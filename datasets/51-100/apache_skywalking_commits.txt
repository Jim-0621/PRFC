File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java
Patch:
@@ -233,10 +233,10 @@ public class CoreModuleConfig extends ModuleConfig {
 
     /**
      * The int value of the max heap memory usage percent.
-     * The default value is 85%.
+     * The default value is 96%.
      */
     @Getter
-    private long maxHeapMemoryUsagePercent = 85;
+    private long maxHeapMemoryUsagePercent = 96;
 
     /**
      * The long value of the max direct memory usage.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/cache/TopNCacheReadCommand.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.analysis.manual.cache;
 
+import java.util.Objects;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
@@ -31,14 +32,11 @@
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 
-import java.util.Objects;
-
 /**
  * Database TopN statement, including Database SQL statement, mongoDB and Redis commands.
  */
 @Stream(name = TopNCacheReadCommand.INDEX_NAME, scopeId = DefaultScopeDefine.CACHE_SLOW_ACCESS, builder = TopNCacheReadCommand.Builder.class, processor = TopNStreamProcessor.class)
 @BanyanDB.TimestampColumn(TopN.TIMESTAMP)
-@BanyanDB.IndexMode
 public class TopNCacheReadCommand extends TopN {
     public static final String INDEX_NAME = "top_n_cache_read_command";
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/cache/TopNCacheWriteCommand.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.analysis.manual.cache;
 
+import java.util.Objects;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
@@ -31,14 +32,11 @@
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 
-import java.util.Objects;
-
 /**
  * Database TopN statement, including Database SQL statement, mongoDB and Redis commands.
  */
 @Stream(name = TopNCacheWriteCommand.INDEX_NAME, scopeId = DefaultScopeDefine.CACHE_SLOW_ACCESS, builder = TopNCacheWriteCommand.Builder.class, processor = TopNStreamProcessor.class)
 @BanyanDB.TimestampColumn(TopN.TIMESTAMP)
-@BanyanDB.IndexMode
 public class TopNCacheWriteCommand extends TopN {
     public static final String INDEX_NAME = "top_n_cache_write_command";
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/database/TopNDatabaseStatement.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.analysis.manual.database;
 
+import java.util.Objects;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
@@ -31,14 +32,11 @@
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 
-import java.util.Objects;
-
 /**
  * Database TopN statement, including Database SQL statement, mongoDB and Redis commands.
  */
 @Stream(name = TopNDatabaseStatement.INDEX_NAME, scopeId = DefaultScopeDefine.DATABASE_SLOW_STATEMENT, builder = TopNDatabaseStatement.Builder.class, processor = TopNStreamProcessor.class)
 @BanyanDB.TimestampColumn(TopN.TIMESTAMP)
-@BanyanDB.IndexMode
 public class TopNDatabaseStatement extends TopN {
     public static final String INDEX_NAME = "top_n_database_statement";
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointRelationServerSideMetrics.java
Patch:
@@ -41,7 +41,6 @@
 @EqualsAndHashCode(of = {
     "entityId"
 }, callSuper = true)
-@BanyanDB.IndexMode
 public class EndpointRelationServerSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "endpoint_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationClientSideMetrics.java
Patch:
@@ -41,7 +41,6 @@
 @EqualsAndHashCode(of = {
     "entityId"
 }, callSuper = true)
-@BanyanDB.IndexMode
 public class ServiceInstanceRelationClientSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "service_instance_relation_client_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationServerSideMetrics.java
Patch:
@@ -41,7 +41,6 @@
 @EqualsAndHashCode(of = {
     "entityId"
 }, callSuper = true)
-@BanyanDB.IndexMode
 public class ServiceInstanceRelationServerSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "service_instance_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java
Patch:
@@ -43,7 +43,6 @@
     "entityId",
     "component_id"
 }, callSuper = true)
-@BanyanDB.IndexMode
 public class ProcessRelationClientSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "process_relation_client_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java
Patch:
@@ -42,7 +42,6 @@
 @EqualsAndHashCode(of = {
     "entityId"
 }, callSuper = true)
-@BanyanDB.IndexMode
 public class ProcessRelationServerSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "process_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationClientSideMetrics.java
Patch:
@@ -40,7 +40,6 @@
 @EqualsAndHashCode(of = {
     "entityId"
 }, callSuper = true)
-@BanyanDB.IndexMode
 public class ServiceRelationClientSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "service_relation_client_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java
Patch:
@@ -42,7 +42,6 @@
 @EqualsAndHashCode(of = {
     "entityId"
 }, callSuper = true)
-@BanyanDB.IndexMode
 public class ServiceRelationServerSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "service_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java
Patch:
@@ -109,6 +109,7 @@ public abstract class AvgHistogramPercentileFunction extends Meter implements Ac
     @Getter
     @Setter
     @Column(name = RANKS, storageOnly = true)
+    @BanyanDB.MeasureField
     private IntList ranks = new IntList(10);
 
     private boolean isCalculated = false;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java
Patch:
@@ -284,7 +284,7 @@ public static Span buildSpanFromRecord(ZipkinSpanRecord record) {
         //Build remoteEndpoint
         Endpoint.Builder remoteEndpoint = Endpoint.newBuilder();
         remoteEndpoint.serviceName(record.getRemoteEndpointServiceName());
-        if (!StringUtil.isEmpty(record.getLocalEndpointIPV4())) {
+        if (!StringUtil.isEmpty(record.getRemoteEndpointIPV4())) {
             remoteEndpoint.parseIp(record.getRemoteEndpointIPV4());
         } else {
             remoteEndpoint.parseIp(record.getRemoteEndpointIPV6());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/status/ServerStatusService.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.skywalking.oap.server.core.status;
 
-import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import org.apache.skywalking.oap.server.core.CoreModuleConfig;
@@ -46,7 +46,7 @@ public class ServerStatusService implements Service {
     @Getter
     private ClusterStatus clusterStatus = new ClusterStatus();
 
-    private List<ServerStatusWatcher> statusWatchers = new ArrayList<>();
+    private List<ServerStatusWatcher> statusWatchers = new CopyOnWriteArrayList<>();
 
     private List<ApplicationConfiguration.ModuleConfiguration> configurations;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.skywalking.oap.server.core.storage.query.ITopologyQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IZipkinQueryDAO;
+import org.apache.skywalking.oap.server.core.storage.ttl.StorageTTLStatusQuery;
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
 
 /**
@@ -95,6 +96,7 @@ public Class[] services() {
             IAsyncProfilerTaskQueryDAO.class,
             IAsyncProfilerTaskLogQueryDAO.class,
             IJFRDataQueryDAO.class,
+            StorageTTLStatusQuery.class
         };
     }
 }

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java
Patch:
@@ -26,6 +26,6 @@ public class CoreModuleTest {
     public void testOpenServiceList() {
         CoreModule coreModule = new CoreModule();
 
-        Assertions.assertEquals(47, coreModule.services().length);
+        Assertions.assertEquals(48, coreModule.services().length);
     }
 }

File: oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java
Patch:
@@ -85,17 +85,17 @@
 import zipkin2.Span;
 
 @Slf4j
-@ExceptionHandler(DebuggingQueryExceptionHandler.class)
+@ExceptionHandler(StatusQueryExceptionHandler.class)
 public class DebuggingHTTPHandler {
     private final ServerStatusService serverStatusService;
     private final MetricsExpressionQuery mqeQuery;
     private final TraceQuery traceQuery;
     private final ZipkinQueryHandler zipkinQueryHandler;
     private final TopologyQuery topologyQuery;
     private final LogQuery logQuery;
-    final DebuggingQueryConfig config;
+    final StatusQueryConfig config;
 
-    public DebuggingHTTPHandler(final ModuleManager manager, final DebuggingQueryConfig config) {
+    public DebuggingHTTPHandler(final ModuleManager manager, final StatusQueryConfig config) {
         serverStatusService = manager.find(CoreModule.NAME)
                                      .provider()
                                      .getService(ServerStatusService.class);

File: oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryConfig.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
 
 @Getter
-public class DebuggingQueryConfig extends ModuleConfig {
+public class StatusQueryConfig extends ModuleConfig {
     /**
      * Include the list of keywords to filter configurations including secrets. Separate keywords by a comma.
      *

File: oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryExceptionHandler.java
Patch:
@@ -29,7 +29,7 @@
 import static com.linecorp.armeria.common.MediaType.ANY_TEXT_TYPE;
 
 @Slf4j
-public class DebuggingQueryExceptionHandler implements ExceptionHandlerFunction {
+public class StatusQueryExceptionHandler implements ExceptionHandlerFunction {
     @Override
     public HttpResponse handleException(final ServiceRequestContext ctx, final HttpRequest req, final Throwable cause) {
         String rspMsg = cause.getMessage() != null ? cause.getMessage() : cause.getClass().getSimpleName();

File: oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryModule.java
Patch:
@@ -20,10 +20,10 @@
 
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
 
-public class DebuggingQueryModule extends ModuleDefine {
-    public static final String NAME = "debugging-query";
+public class StatusQueryModule extends ModuleDefine {
+    public static final String NAME = "status-query";
 
-    public DebuggingQueryModule() {
+    public StatusQueryModule() {
         super(NAME);
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -91,6 +91,7 @@ public class SegmentRecord extends Record {
     @Setter
     @Getter
     @ElasticSearch.EnableDocValues
+    @BanyanDB.EnableSort
     @Column(name = LATENCY)
     private int latency;
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java
Patch:
@@ -62,6 +62,7 @@ public class SampledSlowTraceRecord extends Record {
     @Column(name = URI, storageOnly = true)
     private String uri;
     @ElasticSearch.EnableDocValues
+    @BanyanDB.EnableSort
     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)
     private long latency;
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java
Patch:
@@ -63,6 +63,7 @@ public class SampledStatus4xxTraceRecord extends Record {
     @Column(name = URI, storageOnly = true)
     private String uri;
     @ElasticSearch.EnableDocValues
+    @BanyanDB.EnableSort
     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)
     private long latency;
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java
Patch:
@@ -63,6 +63,7 @@ public class SampledStatus5xxTraceRecord extends Record {
     @Column(name = URI, storageOnly = true)
     private String uri;
     @ElasticSearch.EnableDocValues
+    @BanyanDB.EnableSort
     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)
     private long latency;
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java
Patch:
@@ -109,6 +109,7 @@ protected StorageID id0() {
     private String parameters;
 
     @ElasticSearch.EnableDocValues
+    @BanyanDB.EnableSort
     @Column(name = START_TIME)
     private long startTime;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java
Patch:
@@ -39,6 +39,7 @@ public abstract class TopN extends Record implements ComparableStorageData {
     @Getter
     @Setter
     @ElasticSearch.EnableDocValues
+    @BanyanDB.EnableSort
     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)
     private long latency;
     @Getter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java
Patch:
@@ -40,7 +40,8 @@ public String getEntityId() {
     }
 
     @Getter
-    @ScopeDefaultColumn.DefinedByField(columnName = "service_id", groupByCondInTopN = true)
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
+    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)
     private String serviceId;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java
Patch:
@@ -67,6 +67,7 @@ public class EBPFProfilingScheduleRecord extends Metrics {
     @Column(name = PROCESS_ID, length = 600)
     private String processId;
     @ElasticSearch.EnableDocValues
+    @BanyanDB.EnableSort
     @Column(name = START_TIME)
     private long startTime;
     @Column(name = END_TIME)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java
Patch:
@@ -56,7 +56,8 @@ public String getEntityId() {
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
-    @ScopeDefaultColumn.DefinedByField(columnName = "service_id", groupByCondInTopN = true)
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
+    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)
     private String serviceId;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java
Patch:
@@ -31,7 +31,8 @@
 public class K8SEndpoint extends K8SMetrics.ProtocolMetrics {
     private volatile String entityId;
 
-    @ScopeDefaultColumn.DefinedByField(columnName = "service_id", groupByCondInTopN = true)
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
+    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)
     private String serviceId;
     @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java
Patch:
@@ -42,7 +42,7 @@ public class BanyanDBModelExtension {
 
     /**
      * storeIDTag indicates whether a metric stores its ID as a tag.
-     * The installer will create a virtual string ID tag with a tree index rule.
+     * The installer will create a virtual string ID tag without timestamp.
      */
     @Getter
     @Setter

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java
Patch:
@@ -77,7 +77,7 @@ public List<Metrics> multiGet(Model model, List<Metrics> metrics) throws IOExcep
                 if (ext == null) {
                     return;
                 }
-                if (ext.isShardingKey()) {
+                if (ext.isSeriesID()) {
                     seriesIDColumns.put(c.getColumnName().getName(), new ArrayList<>());
                 }
             });

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskQueryDAO.java
Patch:
@@ -49,7 +49,8 @@ public class BanyanDBAsyncProfilerTaskQueryDAO extends AbstractBanyanDBDAO imple
             AsyncProfilerTaskRecord.TASK_ID,
             AsyncProfilerTaskRecord.CREATE_TIME,
             AsyncProfilerTaskRecord.DURATION,
-            AsyncProfilerTaskRecord.EVENT_TYPES
+            AsyncProfilerTaskRecord.EVENT_TYPES,
+            AsyncProfilerTaskRecord.EXEC_ARGS
     );
 
     private final int queryMaxSize;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java
Patch:
@@ -38,7 +38,6 @@ public abstract class TopN extends Record implements ComparableStorageData {
     @Getter
     @Setter
     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)
-    @BanyanDB.IndexRule(indexType = BanyanDB.IndexRule.IndexType.TREE)
     private long latency;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java
Patch:
@@ -51,12 +51,13 @@ public class BanyanDBExtension {
      * indexType is the type of index built for a {@link ModelColumn} in BanyanDB.
      *
      * @since 9.3.0
+     * @deprecated since 10.2. Only support {@link BanyanDB.IndexRule.IndexType#INVERTED} now. There was IndexType#TREE,
+     * but removed.
      */
-    @Getter
     private final BanyanDB.IndexRule.IndexType indexType;
 
     /**
-     *  A column belong to a measure's field.
+     * A column belong to a measure's field.
      */
     @Getter
     private final boolean isMeasureField;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/SourceDecoratorManager.java
Patch:
@@ -54,7 +54,9 @@ public void addIfAsSourceDecorator(Class<?> aClass) throws IllegalAccessExceptio
                     ISourceDecorator<ISource> decorator = (ISourceDecorator) aClass.newInstance();
                     ISourceDecorator<ISource> exist = DECORATOR_MAP.put(aClass.getSimpleName(), decorator);
                     if (exist != null) {
-                        throw new IllegalStateException("Deprecated decorator: " + aClass.getName() + " the class simple name is already used.");
+                        throw new IllegalStateException(
+                            "Conflict decorator names: The " + aClass.getName() + " class simple name is the same with " + exist.getClass().getName() +
+                                ", please change the class simple name.");
                     }
                     log.info("Decorator {} is added into DefaultScopeDefine {}.", decorator.getClass()
                                                                                                 .getName(), ((ISource) source).scope());

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVerifyVisitor.java
Patch:
@@ -54,7 +54,7 @@ public ExpressionResult visitMetric(MQEParser.MetricContext ctx) {
             metricName);
         if (valueColumn.isEmpty()) {
             result.setType(ExpressionResultType.UNKNOWN);
-            result.setError("Metric: [" + metricName + "] dose not exist.");
+            result.setError("Metric: [" + metricName + "] does not exist.");
             return result;
         }
 
@@ -80,7 +80,7 @@ public ExpressionResult visitMetric(MQEParser.MetricContext ctx) {
             return result;
         } else {
             result.setType(ExpressionResultType.UNKNOWN);
-            result.setError("Metric dose not supported in alarm, metric: [" + metricName + "] is not a common or labeled metric.");
+            result.setError("Metric does not supported in alarm, metric: [" + metricName + "] is not a common or labeled metric.");
             return result;
         }
     }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVisitor.java
Patch:
@@ -80,7 +80,7 @@ public ExpressionResult visitMetric(MQEParser.MetricContext ctx) {
             metricName);
         if (valueColumn.isEmpty()) {
             result.setType(ExpressionResultType.UNKNOWN);
-            result.setError("Metric: [" + metricName + "] dose not exist.");
+            result.setError("Metric: [" + metricName + "] does not exist.");
             return result;
         }
         Column.ValueDataType dataType = valueColumn.get().getDataType();

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRuleTest.java
Patch:
@@ -77,7 +77,7 @@ public void testExpressionVerify() throws IllegalExpressionException {
 
         //not exist metric
         Assertions.assertEquals(
-            "Expression: sum(service_percent111 < 85) >= 3 error: Metric: [service_percent111] dose not exist.",
+            "Expression: sum(service_percent111 < 85) >= 3 error: Metric: [service_percent111] does not exist.",
             Assertions.assertThrows(IllegalExpressionException.class, () -> {
                 rule.setExpression("sum(service_percent111 < 85) >= 3");
             }).getMessage()
@@ -101,7 +101,7 @@ public void testExpressionVerify() throws IllegalExpressionException {
 
         //not a common or labeled metric
         Assertions.assertEquals(
-            "Expression: sum(record < 85) > 1 error: Metric dose not supported in alarm, metric: [record] is not a common or labeled metric.",
+            "Expression: sum(record < 85) > 1 error: Metric does not supported in alarm, metric: [record] is not a common or labeled metric.",
             Assertions.assertThrows(IllegalExpressionException.class, () -> {
                 rule.setExpression("sum(record < 85) > 1");
             }).getMessage()

File: oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/PromQLExprQueryVisitor.java
Patch:
@@ -237,7 +237,7 @@ public ParseResult visitMetricInstant(PromQLParser.MetricInstantContext ctx) {
             Optional<ValueColumnMetadata.ValueColumn> valueColumn = getValueColumn(metricName);
             if (valueColumn.isEmpty()) {
                 result.setErrorType(ErrorType.BAD_DATA);
-                result.setErrorInfo("Metric: [" + metricName + "] dose not exist.");
+                result.setErrorInfo("Metric: [" + metricName + "] does not exist.");
                 return result;
             }
             if (ctx.labelList() == null) {

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java
Patch:
@@ -115,7 +115,7 @@ public ExpressionResult visitMetric(MQEParser.MetricContext ctx) {
                 metricName);
             if (valueColumn.isEmpty()) {
                 result.setType(ExpressionResultType.UNKNOWN);
-                result.setError("Metric: [" + metricName + "] dose not exist.");
+                result.setError("Metric: [" + metricName + "] does not exist.");
                 return result;
             }
 
@@ -141,7 +141,7 @@ public ExpressionResult visitMetric(MQEParser.MetricContext ctx) {
                 } else if (Column.ValueDataType.LABELED_VALUE == dataType) {
                     if (ctx.parent instanceof MQEParser.TopNOPContext) {
                         throw new IllegalExpressionException(
-                            "Metric: [" + metricName + "] is labeled value, dose not support top_n query.");
+                            "Metric: [" + metricName + "] is labeled value, does not support top_n query.");
                     }
                     List<KeyValue> queryLabels = super.buildLabels(ctx.labelList());
                     if (ctx.parent instanceof MQEParser.TrendOPContext) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinServiceSpanTraffic.java
Patch:
@@ -57,6 +57,7 @@ public class ZipkinServiceSpanTraffic extends Metrics {
     @Setter
     @Getter
     @Column(name = SPAN_NAME)
+    @BanyanDB.SeriesID(index = 1)
     private String spanName = Const.EMPTY_STRING;
 
     @Override

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java
Patch:
@@ -195,7 +195,7 @@ protected void apply(MeasureQuery query) {
             endpoints.add(buildEndpoint(dataPoint, schema));
         }
 
-        if (StringUtil.isNotEmpty(serviceId)) {
+        if (StringUtil.isNotEmpty(keyword)) {
             return endpoints.stream().filter(e -> e.getName().contains(keyword)).collect(Collectors.toList());
         }
         return endpoints;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TopologyQueryService.java
Patch:
@@ -130,6 +130,9 @@ public Topology getServiceTopology(final Duration duration,
                 span = traceContext.createSpan("Query Service: getServiceTopology");
                 span.setMsg("Duration: " + duration + ", ServiceIds: " + serviceIds);
             }
+            if (CollectionUtils.isEmpty(serviceIds)) {
+                return new Topology();
+            }
             return invokeGetServiceTopology(duration, serviceIds);
         } finally {
             if (traceContext != null && span != null) {

File: apm-webapp/src/main/java/org/apache/skywalking/oap/server/webapp/OapProxyService.java
Patch:
@@ -58,7 +58,7 @@ public OapProxyService(String[] oapServices) throws Exception {
     private static WebClient newLoadBalancingClient(EndpointGroup oapGroup) {
         final HealthCheckedEndpointGroup healthCheckedGroup =
             HealthCheckedEndpointGroup
-                .builder(oapGroup, "/internal/l7check")
+                .builder(oapGroup, "/healthcheck")
                 .protocol(SessionProtocol.HTTP)
                 .retryInterval(Duration.ofSeconds(10))
                 .build();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/NamingControl.java
Patch:
@@ -96,7 +96,7 @@ public String formatInstanceName(String instanceName) {
      * @return the string, which length less than or equals {@link #endpointNameMaxLength};
      */
     public String formatEndpointName(String serviceName, String endpointName) {
-        if (StringUtil.isEmpty(serviceName) || endpointName == null) {
+        if (StringUtil.isEmpty(serviceName) || StringUtil.isEmpty(endpointName)) {
             return endpointName;
         }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/searchtag/TagAutocompleteDispatcher.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.manual.searchtag;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.TagAutocomplete;
 
@@ -30,7 +31,8 @@ public void dispatch(TagAutocomplete source) {
         autocomplete.setTagKey(source.getTagKey());
         autocomplete.setTagValue(source.getTagValue());
         autocomplete.setTagType(source.getTagType().name());
-        autocomplete.setTimeBucket(source.getTimeBucket());
+        // change the precision in Day for reduce the storage
+        autocomplete.setTimeBucket(TimeBucket.retainToDay4MinuteBucket(source.getTimeBucket()));
         MetricsStreamProcessor.getInstance().in(autocomplete);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TraceQueryService.java
Patch:
@@ -150,6 +150,7 @@ public Trace queryTrace(final String traceId) throws IOException {
                 StringBuilder msg = new StringBuilder();
                 span = traceContext.createSpan("Query Service: queryTrace");
                 msg.append("Condition: TraceId: ").append(traceId);
+                span.setMsg(msg.toString());
             }
             return invokeQueryTrace(traceId);
         } finally {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/LogQueryCondition.java
Patch:
@@ -21,12 +21,14 @@
 import java.util.List;
 import lombok.Getter;
 import lombok.Setter;
+import lombok.ToString;
 import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;
 import org.apache.skywalking.oap.server.core.query.enumeration.Order;
 import org.apache.skywalking.oap.server.core.query.type.Pagination;
 
 @Getter
 @Setter
+@ToString
 public class LogQueryCondition {
     private String serviceId;
     private String serviceInstanceId;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/TraceScopeCondition.java
Patch:
@@ -19,9 +19,11 @@
 
 import lombok.Getter;
 import lombok.Setter;
+import lombok.ToString;
 
 @Setter
 @Getter
+@ToString
 public class TraceScopeCondition {
 
     private String traceId;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Logs.java
Patch:
@@ -24,13 +24,15 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace;
 
 @Setter
 @Getter
 @Accessors(chain = true)
 public class Logs {
     private final List<Log> logs;
     private String errorReason;
+    private DebuggingTrace debuggingTrace;
 
     public Logs() {
         this.logs = new ArrayList<>();

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBLogQueryDAO.java
Patch:
@@ -118,7 +118,7 @@ public void apply(StreamQuery query) {
             tsRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));
         }
 
-        StreamQueryResponse resp = query(LogRecord.INDEX_NAME, TAGS, tsRange, query);
+        StreamQueryResponse resp = queryDebuggable(LogRecord.INDEX_NAME, TAGS, tsRange, query);
 
         Logs logs = new Logs();
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/LogQueryEsDAO.java
Patch:
@@ -145,7 +145,7 @@ public Logs queryLogs(final String serviceId,
                   .size(limit)
                   .from(from);
 
-        SearchResponse response = getClient().search(new TimeRangeIndexNameGenerator(
+        SearchResponse response = searchDebuggable(new TimeRangeIndexNameGenerator(
             IndexController.LogicIndicesRegister.getPhysicalTableName(LogRecord.INDEX_NAME),
             startSecondTB,
             endSecondTB

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java
Patch:
@@ -242,7 +242,7 @@ private void addDBTrace2DebuggingTrace(Trace trace, DebuggingTraceContext traceC
     }
 
     private void addDBSpan2DebuggingTrace(Span span, DebuggingTraceContext traceContext, DebuggingSpan parentSpan) {
-        DebuggingSpan debuggingSpan = traceContext.createSpan("BanyanDB: " + span.getMessage());
+        DebuggingSpan debuggingSpan = traceContext.createSpanForTransform("BanyanDB: " + span.getMessage());
         debuggingSpan.setStartTime(span.getStartTime().getSeconds() * 1000_000_000 + span.getStartTime().getNanos());
         debuggingSpan.setEndTime(span.getEndTime().getSeconds() * 1000_000_000 + span.getEndTime().getNanos());
         debuggingSpan.setDuration(span.getDuration());

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/RecordsQueryEsDAO.java
Patch:
@@ -71,7 +71,7 @@ public List<Record> readRecords(final RecordCondition condition,
                   );
         final SearchResponse response = searchDebuggable(
             IndexController.LogicIndicesRegister.getPhysicalTableName(condition.getName()),
-            search.build(), null
+            search.build()
         );
 
         List<Record> results = new ArrayList<>(condition.getTopN());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/RecordQueryService.java
Patch:
@@ -65,8 +65,8 @@ public List<Record> readRecords(RecordCondition condition, Duration duration) th
         DebuggingSpan span = null;
         try {
             if (traceContext != null) {
-                span = traceContext.createSpan("Query Service");
-                span.setMsg("readRecords, RecordCondition: " + condition + ", Duration: " + duration);
+                span = traceContext.createSpan("Query Service: readRecords");
+                span.setMsg("RecordCondition: " + condition + ", Duration: " + duration);
             }
             return invokeReadRecords(condition, duration);
         } finally {

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java
Patch:
@@ -117,7 +117,7 @@ public void onInitialized(final BanyanDBStorageConfig initialized) {
     public void prepare() throws ServiceNotProvidedException, ModuleStartException {
         this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());
 
-        this.client = new BanyanDBStorageClient(config.getTargetArray());
+        this.client = new BanyanDBStorageClient(config.getFlushTimeout(), config.getTargetArray());
         this.modelInstaller = new BanyanDBIndexInstaller(client, getManager(), this.config);
 
         // Stream

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java
Patch:
@@ -75,7 +75,7 @@ public List<SelectedRecord> sortMetrics(TopNCondition condition, String valueCol
             }
         }
 
-        return directMetricsTopN(condition, valueColumnName, spec, timestampRange, additionalConditions);
+        return directMetricsTopN(condition, schema, valueColumnName, spec, timestampRange, additionalConditions);
     }
 
     List<SelectedRecord> serverSideTopN(TopNCondition condition, MetadataRegistry.Schema schema, MetadataRegistry.ColumnSpec valueColumnSpec,
@@ -103,9 +103,9 @@ List<SelectedRecord> serverSideTopN(TopNCondition condition, MetadataRegistry.Sc
         return topNList;
     }
 
-    List<SelectedRecord> directMetricsTopN(TopNCondition condition, String valueColumnName, MetadataRegistry.ColumnSpec valueColumnSpec,
+    List<SelectedRecord> directMetricsTopN(TopNCondition condition, MetadataRegistry.Schema schema, String valueColumnName, MetadataRegistry.ColumnSpec valueColumnSpec,
                                            TimestampRange timestampRange, List<KeyValue> additionalConditions) throws IOException {
-        MeasureQueryResponse resp = queryDebuggable(condition.getName(), TAGS, Collections.singleton(valueColumnName),
+        MeasureQueryResponse resp = queryDebuggable(schema, TAGS, Collections.singleton(valueColumnName),
                 timestampRange, new QueryBuilder<MeasureQuery>() {
                     @Override
                     protected void apply(MeasureQuery query) {

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java
Patch:
@@ -125,7 +125,7 @@ public List<Metrics> multiGet(Model model, List<Metrics> metrics) throws IOExcep
         }
 
         List<Metrics> metricsInStorage = new ArrayList<>(metrics.size());
-        MeasureQueryResponse resp = query(model.getName(), schema.getTags(), schema.getFields(), timestampRange, new QueryBuilder<MeasureQuery>() {
+        MeasureQueryResponse resp = query(schema, schema.getTags(), schema.getFields(), timestampRange, new QueryBuilder<MeasureQuery>() {
                 @Override
             protected void apply(MeasureQuery query) {
                 seriesIDColumns.entrySet().forEach(entry -> {

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java
Patch:
@@ -62,7 +62,7 @@ private MetadataRegistry.Schema getSchema() {
     public List<NetworkAddressAlias> loadLastUpdate(long timeBucket) {
         try {
             MeasureQueryResponse resp = query(
-                    NetworkAddressAlias.INDEX_NAME,
+                    getSchema(),
                     TAGS,
                     Collections.emptySet(),
                     new QueryBuilder<MeasureQuery>() {

File: oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java
Patch:
@@ -47,7 +47,7 @@
 import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext;
 import org.apache.skywalking.oap.server.library.util.StringUtil;
 
-import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace.TRACE_CONTEXT;
+import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext.TRACE_CONTEXT;
 
 @Slf4j
 public abstract class MQEVisitorBase extends MQEParserBaseVisitor<ExpressionResult> {

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;
 import org.apache.skywalking.oap.server.library.util.StringUtil;
 
-import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace.TRACE_CONTEXT;
+import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext.TRACE_CONTEXT;
 
 @Data
 @ToString

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java
Patch:
@@ -60,7 +60,7 @@
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 
-import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace.TRACE_CONTEXT;
+import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext.TRACE_CONTEXT;
 
 /**
  * RunningRule represents each rule in running status. Based on the {@link AlarmRule} definition,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/AggregationQueryService.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace;
 import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingSpan;
 import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext;
 import org.apache.skywalking.oap.server.library.util.StringUtil;
@@ -70,7 +69,7 @@ private List<SelectedRecord> invokeSortMetrics(TopNCondition condition, Duration
             final String serviceId = IDManager.ServiceID.buildId(condition.getParentService(), condition.getNormal());
             additionalConditions.add(new KeyValue(InstanceTraffic.SERVICE_ID, serviceId));
         }
-        final List<SelectedRecord> selectedRecords = getAggregationQueryDAO().sortMetrics(
+        final List<SelectedRecord> selectedRecords = getAggregationQueryDAO().sortMetricsDebuggable(
             condition, valueCName, duration, additionalConditions);
         selectedRecords.forEach(selectedRecord -> {
             switch (condition.getScope()) {
@@ -115,7 +114,7 @@ private List<SelectedRecord> invokeSortMetrics(TopNCondition condition, Duration
 
     public List<SelectedRecord> sortMetrics(TopNCondition condition,
                                             Duration duration) throws IOException {
-        DebuggingTraceContext traceContext = DebuggingTrace.TRACE_CONTEXT.get();
+        DebuggingTraceContext traceContext = DebuggingTraceContext.TRACE_CONTEXT.get();
         DebuggingSpan span = null;
         try {
             if (traceContext != null) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/MetricsQueryService.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.module.Service;
 
-import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace.TRACE_CONTEXT;
+import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext.TRACE_CONTEXT;
 
 @Slf4j
 public class MetricsQueryService implements Service {
@@ -80,7 +80,7 @@ private MetricsValues invokeReadMetricsValues(MetricsCondition condition, Durati
         if (!condition.senseScope() || !condition.getEntity().isValid()) {
             return new MetricsValues();
         }
-        return getMetricQueryDAO().readMetricsValues(
+        return getMetricQueryDAO().readMetricsValuesDebuggable(
             condition, ValueColumnMetadata.INSTANCE.getValueCName(condition.getName()), duration);
     }
 
@@ -109,7 +109,7 @@ private List<MetricsValues> invokeReadLabeledMetricsValues(MetricsCondition cond
         if (!condition.senseScope() || !condition.getEntity().isValid()) {
             return Collections.emptyList();
         }
-        return getMetricQueryDAO().readLabeledMetricsValues(
+        return getMetricQueryDAO().readLabeledMetricsValuesDebuggable(
             condition, ValueColumnMetadata.INSTANCE.getValueCName(condition.getName()), labels, duration);
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/RecordQueryService.java
Patch:
@@ -33,7 +33,7 @@
 import java.io.IOException;
 import java.util.List;
 
-import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace.TRACE_CONTEXT;
+import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext.TRACE_CONTEXT;
 
 public class RecordQueryService implements Service {
     private final ModuleManager moduleManager;
@@ -56,7 +56,7 @@ private List<Record> invokeReadRecords(RecordCondition condition, Duration durat
         if (!condition.senseScope() || !condition.getParentEntity().isValid()) {
             return Collections.emptyList();
         }
-        return getRecordsQueryDAO().readRecords(
+        return getRecordsQueryDAO().readRecordsDebuggable(
             condition, ValueColumnMetadata.INSTANCE.getValueCName(condition.getName()), duration);
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/TraceQueryCondition.java
Patch:
@@ -21,13 +21,15 @@
 import java.util.List;
 import lombok.Getter;
 import lombok.Setter;
+import lombok.ToString;
 import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;
 import org.apache.skywalking.oap.server.core.query.type.Pagination;
 import org.apache.skywalking.oap.server.core.query.type.QueryOrder;
 import org.apache.skywalking.oap.server.core.query.type.TraceState;
 
 @Getter
 @Setter
+@ToString
 public class TraceQueryCondition {
     private String serviceId;
     private String serviceInstanceId;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Pagination.java
Patch:
@@ -22,11 +22,13 @@
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
+import lombok.ToString;
 
 @Getter
 @Setter
 @NoArgsConstructor
 @AllArgsConstructor
+@ToString
 public class Pagination {
     private int pageNum;
     private int pageSize;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/debugging/DebuggingTrace.java
Patch:
@@ -25,7 +25,6 @@
 
 @Getter
 public class DebuggingTrace {
-    public final static ThreadLocal<DebuggingTraceContext> TRACE_CONTEXT = new ThreadLocal<>();
     private final String traceId;
     private final String condition;
     private final long startTime;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/debugging/DebuggingTraceContext.java
Patch:
@@ -23,6 +23,7 @@
 
 @Getter
 public class DebuggingTraceContext {
+    public final static ThreadLocal<DebuggingTraceContext> TRACE_CONTEXT = new ThreadLocal<>();
     private final DebuggingTrace execTrace;
     private final Stack<DebuggingSpan> spanStack = new Stack<>();
     private int spanIdGenerator;

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/requests/search/SearchParams.java
Patch:
@@ -19,6 +19,7 @@
 
 package org.apache.skywalking.library.elasticsearch.requests.search;
 
+import lombok.ToString;
 import org.apache.skywalking.oap.server.library.util.StringUtil;
 
 import static com.google.common.base.Preconditions.checkArgument;
@@ -28,6 +29,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
+@ToString
 public final class SearchParams implements Iterable<Map.Entry<String, Object>> {
     private static final String IGNORE_UNAVAILABLE = "ignore_unavailable";
     private static final String ALLOW_NO_INDICES = "allow_no_indices";

File: oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java
Patch:
@@ -31,5 +31,5 @@ public class DebuggingMQERsp {
     private final ExpressionResultType type;
     private final List<MQEValues> results;
     private final String error;
-    private final DebuggingTraceRsp execTrace;
+    private final DebuggingTraceRsp debuggingTrace;
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java
Patch:
@@ -57,7 +57,7 @@
 import org.apache.skywalking.mqe.rt.type.ExpressionResultType;
 import org.joda.time.DateTime;
 
-import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace.TRACE_CONTEXT;
+import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext.TRACE_CONTEXT;
 
 @Slf4j
 public class MQEVisitor extends MQEVisitorBase {

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsExpressionQuery.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.skywalking.mqe.rt.grammar.MQELexer;
 import org.apache.skywalking.mqe.rt.grammar.MQEParser;
 
-import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace.TRACE_CONTEXT;
+import static org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext.TRACE_CONTEXT;
 
 public class MetricsExpressionQuery implements GraphQLQueryResolver {
     private final ModuleManager moduleManager;

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBZipkinQueryDAO.java
Patch:
@@ -258,7 +258,7 @@ public List<List<Span>> getTraces(final Set<String> traceIds) throws IOException
         }
         List<AbstractCriteria> conditions = new ArrayList<>(traceIds.size());
         StreamQueryResponse resp =
-            query(ZipkinSpanRecord.INDEX_NAME, TRACE_TAGS,
+            queryDebuggable(ZipkinSpanRecord.INDEX_NAME, TRACE_TAGS, null,
                   new QueryBuilder<StreamQuery>() {
 
                       @Override

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBSpanAttachedEventQueryDAO.java
Patch:
@@ -53,7 +53,7 @@ public BanyanDBSpanAttachedEventQueryDAO(BanyanDBStorageClient client) {
 
     @Override
     public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds) throws IOException {
-        final StreamQueryResponse resp = query(SpanAttachedEventRecord.INDEX_NAME, TAGS, new QueryBuilder<StreamQuery>() {
+        final StreamQueryResponse resp = queryDebuggable(SpanAttachedEventRecord.INDEX_NAME, TAGS, null, new QueryBuilder<StreamQuery>() {
             @Override
             protected void apply(StreamQuery query) {
                 query.and(in(SpanAttachedEventRecord.RELATED_TRACE_ID, traceIds));
@@ -69,4 +69,4 @@ private SpanAttachedEventRecord buildRecord(RowEntity row) {
         final SpanAttachedEventRecord.Builder builder = new SpanAttachedEventRecord.Builder();
         return builder.storage2Entity(new BanyanDBConverter.StorageToStream(SpanAttachedEventRecord.INDEX_NAME, row));
     }
-}
\ No newline at end of file
+}

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBTraceQueryDAO.java
Patch:
@@ -144,7 +144,7 @@ public void apply(StreamQuery query) {
             tsRange = new TimestampRange(TimeBucket.getTimestamp(startSecondTB), TimeBucket.getTimestamp(endSecondTB));
         }
 
-        StreamQueryResponse resp = query(SegmentRecord.INDEX_NAME,
+        StreamQueryResponse resp = queryDebuggable(SegmentRecord.INDEX_NAME,
                 BASIC_TAGS,
                 tsRange, q);
 
@@ -176,7 +176,7 @@ public void apply(StreamQuery query) {
 
     @Override
     public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {
-        StreamQueryResponse resp = query(SegmentRecord.INDEX_NAME, TAGS,
+        StreamQueryResponse resp = queryDebuggable(SegmentRecord.INDEX_NAME, TAGS, null,
                 new QueryBuilder<StreamQuery>() {
                     @Override
                     public void apply(StreamQuery query) {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/SpanAttachedEventEsDAO.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.library.elasticsearch.requests.search.Query;
 import org.apache.skywalking.library.elasticsearch.requests.search.Search;
 import org.apache.skywalking.library.elasticsearch.requests.search.SearchBuilder;
+import org.apache.skywalking.library.elasticsearch.requests.search.SearchParams;
 import org.apache.skywalking.library.elasticsearch.requests.search.Sort;
 import org.apache.skywalking.library.elasticsearch.response.search.SearchHit;
 import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventRecord;
@@ -73,6 +74,6 @@ public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTr
             .index(index)
             .resultConverter(searchHitSpanAttachedEventRecordFunction)
             .build();
-        return scroller.scroll();
+        return scrollDebuggable(scroller, index, new SearchParams());
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java
Patch:
@@ -147,7 +147,7 @@ public TraceBrief queryBasicTraces(Duration duration,
         }
         search.size(limit).from(from);
 
-        final SearchResponse response = getClient().search(
+        final SearchResponse response = searchDebuggable(
             new TimeRangeIndexNameGenerator(
                 IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME),
                 startSecondTB,
@@ -190,7 +190,7 @@ public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {
         SearchParams searchParams = new SearchParams();
         RoutingUtils.addRoutingValueToSearchParam(searchParams, traceId);
 
-        final SearchResponse response = getClient().search(index, search.build(), searchParams);
+        final SearchResponse response = searchDebuggable(index, search.build(), searchParams);
 
         return buildRecords(response);
     }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/zipkin/ZipkinQueryEsDAO.java
Patch:
@@ -149,7 +149,7 @@ final var record = new ZipkinSpanRecord.Builder().storage2Entity(
                 return ZipkinSpanRecord.buildSpanFromRecord(record);
             })
             .build();
-        return scroller.scroll();
+        return scrollDebuggable(scroller, index, params);
     }
 
     @Override
@@ -200,7 +200,7 @@ public List<List<Span>> getTraces(final QueryRequest request, Duration duration)
                        .order(BucketOrder.aggregation(ZipkinSpanRecord.TIMESTAMP_MILLIS, false));
 
         SearchBuilder search = Search.builder().query(query).aggregation(traceIdAggregation);
-        SearchResponse traceIdResponse = getClient().search(new TimeRangeIndexNameGenerator(
+        SearchResponse traceIdResponse = searchDebuggable(new TimeRangeIndexNameGenerator(
             IndexController.LogicIndicesRegister.getPhysicalTableName(ZipkinSpanRecord.INDEX_NAME),
             TimeBucket.getRecordTimeBucket(startTimeMillis),
             TimeBucket.getRecordTimeBucket(endTimeMillis)

File: oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/browser/provider/handler/rest/BrowserPerfServiceHTTPHandler.java
Patch:
@@ -74,7 +74,7 @@ public BrowserPerfServiceHTTPHandler(ModuleManager moduleManager,
 
         errorLogHistogram = metricsCreator.createHistogramMetric(
             "browser_error_log_in_latency", "The process latency of browser error log", new MetricsTag.Keys("protocol"),
-            new MetricsTag.Values("grpc")
+            new MetricsTag.Values("http")
         );
         logErrorCounter = metricsCreator.createCounter(
             "browser_error_log_analysis_error_count", "The error number of browser error log analysis",

File: oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/ExpressionResult.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import lombok.Data;
+import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace;
 
 @Data
 public class ExpressionResult {
@@ -30,4 +31,5 @@ public class ExpressionResult {
     private String error;
     private boolean isLabeledResult = false;
     private boolean isBoolResult = false;
+    private DebuggingTrace debuggingTrace;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Duration.java
Patch:
@@ -20,6 +20,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
+import lombok.ToString;
 import org.apache.skywalking.oap.server.core.query.DurationUtils;
 import org.apache.skywalking.oap.server.core.query.PointOfTime;
 import org.apache.skywalking.oap.server.core.query.enumeration.Step;
@@ -28,6 +29,7 @@
 
 @Getter
 @Setter
+@ToString
 public class Duration {
     private String start;
     private String end;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Entity.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Objects;
 import lombok.Getter;
 import lombok.Setter;
+import lombok.ToString;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;
 import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
 
@@ -31,6 +32,7 @@
  */
 @Setter
 @Getter
+@ToString
 public class Entity {
     /**
      * <pre>

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/MetricsCondition.java
Patch:
@@ -20,6 +20,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
+import lombok.ToString;
 import org.apache.skywalking.oap.server.core.query.MetricsMetadataQueryService;
 import org.apache.skywalking.oap.server.core.query.enumeration.MetricsType;
 import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;
@@ -29,6 +30,7 @@
  */
 @Getter
 @Setter
+@ToString
 public class MetricsCondition {
     /**
      * Metrics name

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/RecordCondition.java
Patch:
@@ -20,6 +20,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
+import lombok.ToString;
 import org.apache.skywalking.oap.server.core.query.MetricsMetadataQueryService;
 import org.apache.skywalking.oap.server.core.query.enumeration.MetricsType;
 import org.apache.skywalking.oap.server.core.query.enumeration.Order;
@@ -34,6 +35,7 @@
  */
 @Setter
 @Getter
+@ToString
 public class RecordCondition {
     /**
      * Metrics name

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/TopNCondition.java
Patch:
@@ -20,6 +20,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
+import lombok.ToString;
 import org.apache.skywalking.oap.server.core.query.MetricsMetadataQueryService;
 import org.apache.skywalking.oap.server.core.query.enumeration.MetricsType;
 import org.apache.skywalking.oap.server.core.query.enumeration.Order;
@@ -33,6 +34,7 @@
  */
 @Setter
 @Getter
+@ToString
 public class TopNCondition {
     /**
      * Metrics name

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/KeyValue.java
Patch:
@@ -20,9 +20,11 @@
 
 import lombok.Data;
 import lombok.EqualsAndHashCode;
+import lombok.ToString;
 
 @Data
 @EqualsAndHashCode
+@ToString
 public class KeyValue {
     private String key;
     private String value;

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java
Patch:
@@ -624,6 +624,7 @@ boolean isIndex() {
 
     @Builder
     @EqualsAndHashCode
+    @ToString
     public static class Schema {
         @Getter
         private final SchemaMetadata metadata;
@@ -671,6 +672,7 @@ public void installTopNAggregation(BanyanDBClient client) throws BanyanDBExcepti
     @Builder
     @EqualsAndHashCode
     @Getter
+    @ToString
     public static class TopNSpec {
         private final String name;
         @Singular
@@ -683,6 +685,7 @@ public static class TopNSpec {
 
     @RequiredArgsConstructor
     @Getter
+    @ToString
     public static class ColumnSpec {
         private final ColumnType columnType;
         private final Class<?> columnClass;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/EBPFProfilingQueryService.java
Patch:
@@ -190,7 +190,7 @@ public List<EBPFProfilingTask> queryEBPFProfilingTasks(String serviceId, String
         final List<EBPFProfilingTaskRecord> tasks = getTaskDAO().queryTasksByTargets(serviceId, serviceInstanceId, targets, triggerType, startTime, endTime);
         // combine same id tasks
         final Map<String, EBPFProfilingTaskRecord> records = tasks.stream().collect(Collectors.toMap(EBPFProfilingTaskRecord::getLogicalId, Function.identity(), EBPFProfilingTaskRecord::combine));
-        return records.values().stream().map(this::parseTask).collect(Collectors.toList());
+        return records.values().stream().map(this::parseTask).sorted((o1, o2) -> -Long.compare(o1.getCreateTime(), o2.getCreateTime())).collect(Collectors.toList());
     }
 
     private EBPFProfilingTask parseTask(EBPFProfilingTaskRecord record) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingDataRecord.java
Patch:
@@ -51,8 +51,8 @@ public class EBPFProfilingDataRecord extends Record {
     public static final String UPLOAD_TIME = "upload_time";
 
     @Column(name = TASK_ID)
-    @BanyanDB.SeriesID(index = 0)
     private String taskId;
+    @BanyanDB.SeriesID(index = 0)
     @Column(name = SCHEDULE_ID)
     private String scheduleId;
     @Column(name = STACK_ID_LIST)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java
Patch:
@@ -60,6 +60,7 @@ public class EBPFProfilingScheduleRecord extends Metrics {
     public static final String EBPF_PROFILING_SCHEDULE_ID = "ebpf_profiling_schedule_id";
 
     @Column(name = TASK_ID)
+    @BanyanDB.SeriesID(index = 0)
     private String taskId;
     @Column(name = PROCESS_ID, length = 600)
     private String processId;
@@ -68,7 +69,7 @@ public class EBPFProfilingScheduleRecord extends Metrics {
     @Column(name = END_TIME)
     private long endTime;
     @Column(name = EBPF_PROFILING_SCHEDULE_ID)
-    @BanyanDB.SeriesID(index = 0)
+    @BanyanDB.SeriesID(index = 1)
     private String scheduleId;
 
     @Override
@@ -96,7 +97,7 @@ public Metrics toDay() {
 
     @Override
     protected StorageID id0() {
-        return new StorageID().append(EBPF_PROFILING_SCHEDULE_ID, scheduleId);
+        return new StorageID().append(TASK_ID, taskId).append(EBPF_PROFILING_SCHEDULE_ID, scheduleId);
     }
 
     @Override

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java
Patch:
@@ -278,7 +278,7 @@ Duration downSamplingDuration(DownSampling downSampling) {
             case Minute:
                 return Duration.ofMinutes(1);
             case Day:
-                return Duration.ofDays(1);
+                return Duration.ofHours(24);
             default:
                 throw new UnsupportedOperationException("unsupported downSampling interval");
         }

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsQueryDAO.java
Patch:
@@ -227,8 +227,9 @@ protected void apply(MeasureQuery query) {
         });
         for (final DataPoint dp : resp.getDataPoints()) {
             long timeBucket = TimeBucket.getTimeBucket(dp.getTimestamp(), schema.getMetadata().getDownSampling());
-            if (map.putIfAbsent(timeBucket, dp) != null) {
-                log.warn("duplicated data point at " + timeBucket);
+            DataPoint preDp = map.putIfAbsent(timeBucket, dp);
+            if (preDp != null) {
+                log.warn("{}:{} returns duplicated data point at {}, pre:{}, current:{}", entityID, schema.getMetadata(), timeBucket, preDp.getFields(), dp.getFields());
             }
         }
 

File: oap-server/analyzer/log-analyzer/src/main/java/org/apache/skywalking/oap/log/analyzer/dsl/spec/extractor/ExtractorSpec.java
Patch:
@@ -162,7 +162,6 @@ public void tag(final Map<String, ?> kv) {
                          .collect(Collectors.toList())
                    )
         );
-        BINDING.get().log(logData);
     }
 
     @SuppressWarnings("unused")

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/RecordCondition.java
Patch:
@@ -55,7 +55,7 @@ public RecordCondition(TopNCondition condition) {
             final Entity entity = new Entity();
             entity.setScope(condition.getScope() == null ? Scope.Service : condition.getScope());
             entity.setServiceName(condition.getParentService());
-            entity.setNormal(condition.isNormal());
+            entity.setNormal(condition.getNormal());
             this.parentEntity = entity;
         }
         this.topN = condition.getTopN();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/TopNCondition.java
Patch:
@@ -46,7 +46,7 @@ public class TopNCondition {
      * Normal service is the service having installed agent or metrics reported directly. Unnormal service is
      * conjectural service, usually detected by the agent.
      */
-    private boolean normal;
+    private Boolean normal;
     /**
      * Indicate the metrics entity scope. Because this is a top list, don't need to set the Entity like the
      * MetricsCondition. Only accept scope = {@link Scope#Service} {@link Scope#ServiceInstance} and {@link

File: oap-server/exporter/src/test/java/org/apache/skywalking/oap/server/exporter/provider/grpc/MockMetrics.java
Patch:
@@ -26,7 +26,7 @@ public class MockMetrics extends Metrics {
 
     @Override
     protected StorageID id0() {
-        return new StorageID().append("", "mock-metrics");
+        return new StorageID().append("mock-service", "mock-metrics");
     }
 
     @Override

File: oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LogicalFunctionOp.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.skywalking.mqe.rt.type.ExpressionResultType;
 import org.apache.skywalking.mqe.rt.type.MQEValue;
 import org.apache.skywalking.mqe.rt.type.MQEValues;
-import org.apache.skywalking.mqe.rt.type.Metadata;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
 
 import java.util.Objects;
@@ -85,7 +84,6 @@ private static ExpressionResult isPresent(MQEParser.ExpressionListContext expres
 
         MQEValue mqeValue = new MQEValue();
         MQEValues mqeValues = new MQEValues();
-        mqeValues.setMetric(new Metadata());
         mqeValues.getValues().add(mqeValue);
         result.getResults().add(mqeValues);
         mqeValue.setDoubleValue(present ? 1 : 0);

File: oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/MQEValues.java
Patch:
@@ -25,7 +25,7 @@
 
 @Data
 public class MQEValues {
-    private Metadata metric;
+    private Metadata metric = new Metadata();
 
     private List<MQEValue> values = new ArrayList<>();
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java
Patch:
@@ -81,7 +81,7 @@ public abstract class AvgHistogramPercentileFunction extends Meter implements Ac
     @Getter
     @Setter
     @Column(name = VALUE, dataType = Column.ValueDataType.LABELED_VALUE, storageOnly = true)
-    @ElasticSearch.Column(legacyName = "name")
+    @ElasticSearch.Column(legacyName = "value")
     @BanyanDB.MeasureField
     private DataTable percentileValues = new DataTable(10);
     @Getter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/ServiceTopologyBuilder.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;
+import org.apache.skywalking.oap.server.core.analysis.Layer;
 import org.apache.skywalking.oap.server.core.analysis.manual.networkalias.NetworkAddressAlias;
 import org.apache.skywalking.oap.server.core.cache.NetworkAddressAliasCache;
 import org.apache.skywalking.oap.server.core.config.IComponentLibraryCatalogService;
@@ -216,6 +217,8 @@ private Node buildNode(String sourceId, IDManager.ServiceID.ServiceIDDefinition
         Service service = getMetadataQueryService().getService(sourceId);
         if (service != null) {
             serviceNode.getLayers().addAll(service.getLayers());
+        } else {
+            serviceNode.getLayers().add(Layer.UNDEFINED.name());
         }
         return serviceNode;
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java
Patch:
@@ -68,12 +68,12 @@ public class CoreModuleConfig extends ModuleConfig {
      * The time to live of all metrics data. Unit is day.
      */
 
-    private int metricsDataTTL = 3;
+    private int metricsDataTTL = 7;
     /**
      * The time to live of all record data, including tracing. Unit is Day.
      */
 
-    private int recordDataTTL = 7;
+    private int recordDataTTL = 3;
 
     private int gRPCThreadPoolSize;
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/TableHelper.java
Patch:
@@ -202,7 +202,7 @@ List<Long> getTTLTimeBuckets(Model model) {
             getConfigService().getRecordDataTTL() :
             getConfigService().getMetricsDataTTL();
         return LongStream
-            .rangeClosed(0, ttl)
+            .range(0, ttl)
             .mapToObj(it -> TimeBucket.getTimeBucket(System.currentTimeMillis() - TimeUnit.DAYS.toMillis(it), DownSampling.Day))
             .distinct()
             .collect(toList());

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAO.java
Patch:
@@ -51,7 +51,7 @@ public class JDBCHistoryDeleteDAO implements IHistoryDeleteDAO {
     @SneakyThrows
     public void deleteHistory(Model model, String timeBucketColumnName, int ttl) {
         final var endTimeBucket = TimeBucket.getTimeBucket(clock.millis() + TimeUnit.DAYS.toMillis(1), DownSampling.Day);
-        final var startTimeBucket = TimeBucket.getTimeBucket(clock.millis() - TimeUnit.DAYS.toMillis(ttl), DownSampling.Day);
+        final var startTimeBucket = TimeBucket.getTimeBucket(clock.millis() - TimeUnit.DAYS.toMillis(ttl - 1), DownSampling.Day);
         log.info(
             "Deleting history data, ttl: {}, now: {}. Keep [{}, {}]",
             ttl,

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/jdbc/hikaricp/JDBCClient.java
Patch:
@@ -152,7 +152,7 @@ public void registerChecker(HealthChecker healthChecker) {
     public boolean indexExists(final String table,
                                final String index) throws SQLException {
         try (final var connection = getConnection();
-             final var resultSet = connection.getMetaData().getIndexInfo(connection.getCatalog(), null, table, false, false)) {
+             final var resultSet = connection.getMetaData().getIndexInfo(connection.getCatalog(), connection.getSchema(), table, false, false)) {
             while (resultSet.next()) {
                 if (resultSet.getString("INDEX_NAME").equalsIgnoreCase(index)) {
                     return true;
@@ -164,14 +164,14 @@ public boolean indexExists(final String table,
 
     public boolean tableExists(final String table) throws SQLException {
         try (final var conn = getConnection();
-             final var result = conn.getMetaData().getTables(conn.getCatalog(), null, table, null)) {
+             final var result = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), table, null)) {
             return result.next();
         }
     }
 
     public Set<String> getTableColumns(final String table) throws SQLException {
         try (final var conn = getConnection();
-             final var result = conn.getMetaData().getColumns(conn.getCatalog(), null, table, null)) {
+             final var result = conn.getMetaData().getColumns(conn.getCatalog(), conn.getSchema(), table, null)) {
             final var columns = new HashSet<String>();
             while (result.next()) {
                 columns.add(result.getString("COLUMN_NAME").toLowerCase());

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAO.java
Patch:
@@ -78,7 +78,7 @@ public void deleteHistory(Model model, String timeBucketColumnName, int ttl) {
         final var tableName = TableHelper.getTableName(model);
 
         try (final var conn = jdbcClient.getConnection();
-             final var result = conn.getMetaData().getTables(conn.getCatalog(), null, tableName + "%", new String[]{"TABLE"})) {
+             final var result = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), tableName + "%", new String[]{"TABLE"})) {
             while (result.next()) {
                 tablesToDrop.add(result.getString("TABLE_NAME"));
             }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCSQLExecutor.java
Patch:
@@ -257,7 +257,7 @@ private static ArrayList<String> getModelTables(JDBCClient h2Client, String mode
         final var tableNamePattern = TableHelper.getTableName(model) + "%";
         final var tables = new ArrayList<String>();
         try (final var connection = h2Client.getConnection();
-             final var resultSet = connection.getMetaData().getTables(connection.getCatalog(), null, tableNamePattern, new String[]{"TABLE"})) {
+             final var resultSet = connection.getMetaData().getTables(connection.getCatalog(), connection.getSchema(), tableNamePattern, new String[]{"TABLE"})) {
             while (resultSet.next()) {
                 tables.add(resultSet.getString("TABLE_NAME"));
             }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAOIT.java
Patch:
@@ -122,7 +122,7 @@ void test() throws SQLException {
         var jdbcHistoryDeleteDAO = new JDBCHistoryDeleteDAO(jdbcClient, tableHelper, tableInstaller, clock);
         jdbcHistoryDeleteDAO.deleteHistory(model, "time_bucket", 3);
         try (final var conn = jdbcClient.getConnection();
-             final var rs = conn.getMetaData().getTables(conn.getCatalog(), null, "service_traffic_20230317", null)) {
+             final var rs = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), "service_traffic_20230317", null)) {
             assertThat(rs.next()).isTrue();
         }
 
@@ -131,12 +131,12 @@ void test() throws SQLException {
         jdbcHistoryDeleteDAO = new JDBCHistoryDeleteDAO(jdbcClient, tableHelper, tableInstaller, clock);
         jdbcHistoryDeleteDAO.deleteHistory(model, "time_bucket", 3);
         try (final var conn = jdbcClient.getConnection();
-             final var rs = conn.getMetaData().getTables(conn.getCatalog(), null, "service_traffic_20230317", null)) {
+             final var rs = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), "service_traffic_20230317", null)) {
             assertThat(rs.next()).isFalse();
         }
         // ... and should create the new table
         try (final var conn = jdbcClient.getConnection();
-             final var rs = conn.getMetaData().getTables(conn.getCatalog(), null, "service_traffic_20230322", null)) {
+             final var rs = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), "service_traffic_20230322", null)) {
             assertThat(rs.next()).isTrue();
         }
     }

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java
Patch:
@@ -162,7 +162,9 @@ protected void apply(MeasureQuery query) {
                         List<AbstractCriteria> instanceRelationsQueryConditions = new ArrayList<>(instanceIds.size());
                         for (final String instanceId : instanceIds) {
                             final IDManager.ServiceInstanceID.InstanceIDDefinition def = IDManager.ServiceInstanceID.analysisId(instanceId);
-                            and(Lists.newArrayList(eq(InstanceTraffic.SERVICE_ID, def.getServiceId()), eq(InstanceTraffic.NAME, def.getName())));
+                            instanceRelationsQueryConditions.add(
+                                and(Lists.newArrayList(eq(InstanceTraffic.SERVICE_ID, def.getServiceId()), eq(InstanceTraffic.NAME, def.getName())))
+                            );
                         }
                         query.criteria(or(instanceRelationsQueryConditions));
                     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/data/LimitedSizeBufferedData.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
 import org.apache.skywalking.oap.server.core.analysis.topn.TopN;
 
 /**
@@ -39,7 +40,7 @@ public LimitedSizeBufferedData(int limitedSize) {
 
     @Override
     public void accept(final STORAGE_DATA data) {
-        final String topGroupKey = data.getEntityId() + data.getTimeBucket();
+        final String topGroupKey = data.getEntityId() + TimeBucket.getMinuteTimeBucket(data.getTimestamp());
         LinkedList<STORAGE_DATA> storageDataList = this.data.get(topGroupKey);
         if (storageDataList == null) {
             storageDataList = new LinkedList<>();

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinFunctionTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
 import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;
 import org.apache.skywalking.oap.server.core.analysis.meter.function.AcceptableValue;
-import org.apache.skywalking.oap.server.core.analysis.meter.function.latest.LatestFunction;
 import org.apache.skywalking.oap.server.core.config.NamingControl;
 import org.apache.skywalking.oap.server.core.config.group.EndpointNameGrouping;
 import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
@@ -100,7 +99,7 @@ public void testHour() {
     public void testSerialize() {
         long time = 1597113447737L;
         function.accept(MeterEntity.newService("sum_sync_time", Layer.GENERAL), time);
-        LatestFunction function2 = Mockito.spy(LatestFunction.class);
+        SumPerMinFunction function2 = Mockito.spy(SumPerMinFunction.class);
         function2.deserialize(function.serialize().build());
         assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());
         assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java
Patch:
@@ -77,7 +77,6 @@ public class CoreModuleConfig extends ModuleConfig {
 
     private int gRPCThreadPoolSize;
 
-    private int gRPCThreadPoolQueueSize;
     /**
      * Timeout for cluster internal communication, in seconds.
      */

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -230,9 +230,6 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
         if (moduleConfig.getMaxMessageSize() > 0) {
             grpcServer.setMaxMessageSize(moduleConfig.getMaxMessageSize());
         }
-        if (moduleConfig.getGRPCThreadPoolQueueSize() > 0) {
-            grpcServer.setThreadPoolQueueSize(moduleConfig.getGRPCThreadPoolQueueSize());
-        }
         if (moduleConfig.getGRPCThreadPoolSize() > 0) {
             grpcServer.setThreadPoolSize(moduleConfig.getGRPCThreadPoolSize());
         }

File: oap-server/server-receiver-plugin/skywalking-sharing-server-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/sharing/server/SharingServerConfig.java
Patch:
@@ -43,7 +43,6 @@ public class SharingServerConfig extends ModuleConfig {
     private int maxConcurrentCallsPerConnection;
     private int maxMessageSize;
     private int gRPCThreadPoolSize;
-    private int gRPCThreadPoolQueueSize;
     private String authentication;
     private boolean gRPCSslEnabled = false;
     private String gRPCSslKeyPath;

File: oap-server/server-receiver-plugin/skywalking-sharing-server-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/sharing/server/SharingServerModuleProvider.java
Patch:
@@ -125,9 +125,6 @@ public void prepare() {
             if (config.getMaxConcurrentCallsPerConnection() > 0) {
                 grpcServer.setMaxConcurrentCallsPerConnection(config.getMaxConcurrentCallsPerConnection());
             }
-            if (config.getGRPCThreadPoolQueueSize() > 0) {
-                grpcServer.setThreadPoolQueueSize(config.getGRPCThreadPoolQueueSize());
-            }
             if (config.getGRPCThreadPoolSize() > 0) {
                 grpcServer.setThreadPoolSize(config.getGRPCThreadPoolSize());
             }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCLogQueryDAO.java
Patch:
@@ -122,7 +122,7 @@ public Logs queryLogs(String serviceId,
                 )
             );
         }
-        final var comparator = Order.DES.equals(queryOrder) ?
+        final var comparator = Order.ASC.equals(queryOrder) ?
             comparing(Log::getTimestamp) :
             comparing(Log::getTimestamp).reversed();
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -238,7 +238,7 @@ public List<Endpoint> findEndpoint(String keyword, String serviceId, int limit)
             .client(getClient())
             .search(search.build())
             .index(index)
-            .queryMaxSize(queryMaxSize)
+            .queryMaxSize(limit)
             .resultConverter(searchHit -> {
                 final var sourceAsMap = searchHit.getSource();
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCZipkinQueryDAO.java
Patch:
@@ -253,7 +253,7 @@ public List<List<Span>> getTraces(final QueryRequest request, Duration duration)
                     }
                 }
             }
-            sql.append(" group by ").append(ZipkinSpanRecord.TRACE_ID);
+            sql.append(" group by ").append(table).append(".").append(ZipkinSpanRecord.TRACE_ID);
             sql.append(" order by min(").append(ZipkinSpanRecord.TIMESTAMP_MILLIS).append(") desc");
             sql.append(" limit ").append(request.limit());
             h2Client.executeQuery(sql.toString(), resultSet -> {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingDataRecord.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.skywalking.oap.server.core.profiling.ebpf.storage;
 
+import com.google.common.base.Charsets;
 import com.google.common.hash.Hashing;
-import com.linecorp.armeria.internal.shaded.guava.base.Charsets;
 import lombok.Data;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/EBPFProcessProfilingSchedule.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.skywalking.oap.server.core.source;
 
+import com.google.common.base.Charsets;
 import com.google.common.hash.Hashing;
-import com.linecorp.armeria.internal.shaded.guava.base.Charsets;
 import lombok.Getter;
 import lombok.Setter;
 
@@ -41,8 +41,8 @@ public int scope() {
     public String getEntityId() {
         if (entityId == null) {
             entityId = Hashing.sha256().newHasher()
-                    .putString(String.format("%s_%s_%d", taskId, processId, startTime), Charsets.UTF_8)
-                    .hash().toString();
+                              .putString(String.format("%s_%s_%d", taskId, processId, startTime), Charsets.UTF_8)
+                              .hash().toString();
         }
         return entityId;
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -37,7 +37,7 @@
 
 import java.util.List;
 
-import static org.apache.skywalking.oap.server.core.analysis.record.Record.TIME_BUCKET;
+import static org.apache.skywalking.oap.server.core.storage.StorageData.TIME_BUCKET;
 
 @SuperDataset
 @Stream(name = SegmentRecord.INDEX_NAME, scopeId = DefaultScopeDefine.SEGMENT, builder = SegmentRecord.Builder.class, processor = RecordStreamProcessor.class)

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/jdbc/hikaricp/JDBCClient.java
Patch:
@@ -152,7 +152,7 @@ public void registerChecker(HealthChecker healthChecker) {
     public boolean indexExists(final String table,
                                final String index) throws SQLException {
         try (final var connection = getConnection();
-             final var resultSet = connection.getMetaData().getIndexInfo(null, null, table, false, false)) {
+             final var resultSet = connection.getMetaData().getIndexInfo(connection.getCatalog(), null, table, false, false)) {
             while (resultSet.next()) {
                 if (resultSet.getString("INDEX_NAME").equalsIgnoreCase(index)) {
                     return true;
@@ -164,14 +164,14 @@ public boolean indexExists(final String table,
 
     public boolean tableExists(final String table) throws SQLException {
         try (final var conn = getConnection();
-             final var result = conn.getMetaData().getTables(null, null, table, null)) {
+             final var result = conn.getMetaData().getTables(conn.getCatalog(), null, table, null)) {
             return result.next();
         }
     }
 
     public Set<String> getTableColumns(final String table) throws SQLException {
         try (final var conn = getConnection();
-             final var result = conn.getMetaData().getColumns(null, null, table, null)) {
+             final var result = conn.getMetaData().getColumns(conn.getCatalog(), null, table, null)) {
             final var columns = new HashSet<String>();
             while (result.next()) {
                 columns.add(result.getString("COLUMN_NAME").toLowerCase());

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAO.java
Patch:
@@ -78,7 +78,7 @@ public void deleteHistory(Model model, String timeBucketColumnName, int ttl) {
         final var tableName = TableHelper.getTableName(model);
 
         try (final var conn = jdbcClient.getConnection();
-             final var result = conn.getMetaData().getTables(null, null, tableName + "%", new String[]{"TABLE"})) {
+             final var result = conn.getMetaData().getTables(conn.getCatalog(), null, tableName + "%", new String[]{"TABLE"})) {
             while (result.next()) {
                 tablesToDrop.add(result.getString("TABLE_NAME"));
             }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAOIT.java
Patch:
@@ -122,7 +122,7 @@ void test() throws SQLException {
         var jdbcHistoryDeleteDAO = new JDBCHistoryDeleteDAO(jdbcClient, tableHelper, tableInstaller, clock);
         jdbcHistoryDeleteDAO.deleteHistory(model, "time_bucket", 3);
         try (final var conn = jdbcClient.getConnection();
-             final var rs = conn.getMetaData().getTables(null, null, "service_traffic_20230317", null)) {
+             final var rs = conn.getMetaData().getTables(conn.getCatalog(), null, "service_traffic_20230317", null)) {
             assertThat(rs.next()).isTrue();
         }
 
@@ -131,12 +131,12 @@ void test() throws SQLException {
         jdbcHistoryDeleteDAO = new JDBCHistoryDeleteDAO(jdbcClient, tableHelper, tableInstaller, clock);
         jdbcHistoryDeleteDAO.deleteHistory(model, "time_bucket", 3);
         try (final var conn = jdbcClient.getConnection();
-             final var rs = conn.getMetaData().getTables(null, null, "service_traffic_20230317", null)) {
+             final var rs = conn.getMetaData().getTables(conn.getCatalog(), null, "service_traffic_20230317", null)) {
             assertThat(rs.next()).isFalse();
         }
         // ... and should create the new table
         try (final var conn = jdbcClient.getConnection();
-             final var rs = conn.getMetaData().getTables(null, null, "service_traffic_20230322", null)) {
+             final var rs = conn.getMetaData().getTables(conn.getCatalog(), null, "service_traffic_20230322", null)) {
             assertThat(rs.next()).isTrue();
         }
     }

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/handler/ZipkinSpanHTTPHandler.java
Patch:
@@ -101,7 +101,7 @@ HttpResponse doCollectSpans(final SpanBytesDecoder decoder,
             try (final HttpData httpData = request.content()) {
                 final List<Span> spanList = decoder.decodeList(httpData.byteBuf().nioBuffer());
                 spanForward.send(spanList);
-                return HttpResponse.of(HttpStatus.OK);
+                return HttpResponse.of(HttpStatus.ACCEPTED);
             }
         }));
         response.whenComplete().handle((unused, throwable) -> {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/menu/UIMenu.java
Patch:
@@ -49,7 +49,7 @@ public class UIMenu extends ManagementData {
     @Column(name = CONFIGURATION, storageOnly = true, length = 1_000_000)
     private String configurationJson;
     @Column(name = UPDATE_TIME)
-    private long updateTime;
+    private Long updateTime;
 
     @Override
     public StorageID id() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplate.java
Patch:
@@ -55,9 +55,9 @@ public class UITemplate extends ManagementData {
     @Column(name = CONFIGURATION, storageOnly = true, length = 1_000_000)
     private String configuration;
     @Column(name = UPDATE_TIME)
-    private long updateTime;
+    private Long updateTime;
     @Column(name = DISABLED)
-    private int disabled;
+    private Integer disabled;
 
     @Override
     public StorageID id() {
@@ -70,6 +70,7 @@ public UITemplate storage2Entity(final Convert2Entity converter) {
             UITemplate uiTemplate = new UITemplate();
             uiTemplate.setTemplateId((String) converter.get(TEMPLATE_ID));
             uiTemplate.setConfiguration((String) converter.get(CONFIGURATION));
+            uiTemplate.setUpdateTime(((Number) converter.get(UPDATE_TIME)).longValue());
             uiTemplate.setDisabled(((Number) converter.get(DISABLED)).intValue());
             return uiTemplate;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/AbstractDAO.java
Patch:
@@ -27,7 +27,7 @@ public AbstractDAO(C client) {
         this.client = client;
     }
 
-    public final C getClient() {
+    public C getClient() {
         return client;
     }
 }

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.management.ui.template;
 
 import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
+import org.apache.skywalking.oap.server.library.util.BooleanUtils;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -28,7 +29,8 @@ public void testSerialization() {
         UITemplate uiTemplate = new UITemplate();
         uiTemplate.setTemplateId("id");
         uiTemplate.setConfiguration("configuration");
-
+        uiTemplate.setUpdateTime(1694760289493L);
+        uiTemplate.setDisabled(BooleanUtils.FALSE);
         final UITemplate.Builder builder = new UITemplate.Builder();
 
         final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ManagementCRUDEsDAO.java
Patch:
@@ -52,7 +52,7 @@ public boolean create(String modelName, ManagementData managementData) throws IO
         final ElasticSearchConverter.ToStorage toStorage = new ElasticSearchConverter.ToStorage(modelName);
         storageBuilder.entity2Storage(managementData, toStorage);
         final String docId = IndexController.INSTANCE.generateDocId(modelName, managementData.id().build());
-        final boolean exist = getClient().existDoc(modelName, docId);
+        final boolean exist = getClient().existDoc(index, docId);
         if (exist) {
             return false;
         }
@@ -100,7 +100,7 @@ public boolean update(String modelName, ManagementData managementData) throws IO
         final ElasticSearchConverter.ToStorage toStorage = new ElasticSearchConverter.ToStorage(modelName);
         storageBuilder.entity2Storage(managementData, toStorage);
         final String docId = IndexController.INSTANCE.generateDocId(modelName, managementData.id().build());
-        final boolean exist = getClient().existDoc(modelName, docId);
+        final boolean exist = getClient().existDoc(index, docId);
         if (!exist) {
             return false;
         }
@@ -120,7 +120,7 @@ public boolean deleteById(String modelName, String id) throws IOException {
         final String index =
             IndexController.LogicIndicesRegister.getPhysicalTableName(modelName);
         final String docId = IndexController.INSTANCE.generateDocId(modelName, id);
-        final boolean exist = getClient().existDoc(modelName, docId);
+        final boolean exist = getClient().existDoc(index, docId);
         if (!exist) {
             return false;
         }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProvider.java
Patch:
@@ -78,7 +78,7 @@ public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleSta
         }
         RulesReader reader = new RulesReader(applicationReader);
         Rules rules = reader.readRules();
-        alarmRulesWatcher.notify(rules);
+        alarmRulesWatcher.initConfig(rules);
         notifyHandler.init(new AlarmStandardPersistence(getManager()));
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/MetadataQueryService.java
Patch:
@@ -107,6 +107,9 @@ public ServiceInstance getInstance(final String instanceId) throws IOException {
 
     public List<ServiceInstance> listInstances(final Duration duration,
                                                      final String serviceId) throws IOException {
+        if (duration.getStartTimestamp() >= duration.getEndTimestamp()) {
+            return Collections.emptyList();
+        }
         return getMetadataQueryDAO().listInstances(duration, serviceId)
                                     .stream().distinct().collect(Collectors.toList());
     }

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.skywalking.banyandb.v1.client.DataPoint;
 import org.apache.skywalking.banyandb.v1.client.MeasureQuery;
 import org.apache.skywalking.banyandb.v1.client.MeasureQueryResponse;
+import org.apache.skywalking.banyandb.v1.client.TimestampRange;
 import org.apache.skywalking.oap.server.core.analysis.DownSampling;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;
 import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
@@ -113,13 +114,14 @@ public List<ServiceInstance> listInstances(Duration duration, String serviceId)
         MeasureQueryResponse resp = query(InstanceTraffic.INDEX_NAME,
                 INSTANCE_TRAFFIC_TAGS,
                 Collections.emptySet(),
+                new TimestampRange(0, duration.getEndTimestamp()),
                 new QueryBuilder<MeasureQuery>() {
                     @Override
                     protected void apply(MeasureQuery query) {
                         if (StringUtil.isNotEmpty(serviceId)) {
                             query.and(eq(InstanceTraffic.SERVICE_ID, serviceId));
                         }
-                        final long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(duration.getStartTimestamp());
+                        final var minuteTimeBucket = TimeBucket.getMinuteTimeBucket(duration.getStartTimestamp());
                         query.and(gte(InstanceTraffic.LAST_PING_TIME_BUCKET, minuteTimeBucket));
                     }
                 });

File: oap-server/server-library/library-kubernetes-support/src/main/java/org/apache/skywalking/library/kubernetes/IstioServiceEntries.java
Patch:
@@ -40,7 +40,7 @@ public enum IstioServiceEntries {
     IstioServiceEntries() {
         final CacheBuilder<Object, Object> cacheBuilder =
             CacheBuilder.newBuilder()
-                .expireAfterAccess(Duration.ofMinutes(3));
+                .expireAfterWrite(Duration.ofMinutes(3));
 
         serviceEntries = cacheBuilder.build(CacheLoader.from(() -> {
             try (final var istioClient = new DefaultIstioClient()) {

File: oap-server/server-library/library-kubernetes-support/src/main/java/org/apache/skywalking/library/kubernetes/KubernetesEndpoints.java
Patch:
@@ -39,8 +39,8 @@ public enum KubernetesEndpoints {
     @SneakyThrows
     KubernetesEndpoints() {
         final CacheBuilder<Object, Object> cacheBuilder =
-                CacheBuilder.newBuilder()
-                        .expireAfterAccess(Duration.ofMinutes(3));
+            CacheBuilder.newBuilder()
+                        .expireAfterWrite(Duration.ofMinutes(3));
 
         endpoints = cacheBuilder.build(CacheLoader.from(() -> {
             try (final var kubernetesClient = new KubernetesClientBuilder().build()) {

File: oap-server/server-library/library-kubernetes-support/src/main/java/org/apache/skywalking/library/kubernetes/KubernetesPods.java
Patch:
@@ -38,8 +38,8 @@ public enum KubernetesPods {
     @SneakyThrows
     KubernetesPods() {
         final CacheBuilder<Object, Object> cacheBuilder =
-                CacheBuilder.newBuilder()
-                        .expireAfterAccess(Duration.ofMinutes(5));
+            CacheBuilder.newBuilder()
+                        .expireAfterWrite(Duration.ofMinutes(5));
 
         podByIP = cacheBuilder.build(new CacheLoader<>() {
             @Override

File: oap-server/server-library/library-kubernetes-support/src/main/java/org/apache/skywalking/library/kubernetes/KubernetesServices.java
Patch:
@@ -41,8 +41,8 @@ public enum KubernetesServices {
     @SneakyThrows
     KubernetesServices() {
         final CacheBuilder<Object, Object> cacheBuilder =
-                CacheBuilder.newBuilder()
-                        .expireAfterAccess(Duration.ofMinutes(3));
+            CacheBuilder.newBuilder()
+                        .expireAfterWrite(Duration.ofMinutes(3));
 
         services = cacheBuilder.build(CacheLoader.from(() -> {
             try (final var kubernetesClient = new KubernetesClientBuilder().build()) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/TableHelper.java
Patch:
@@ -60,7 +60,7 @@ public class TableHelper {
 
     private final LoadingCache<String, Boolean> tableExistence =
         CacheBuilder.newBuilder()
-                    .expireAfterAccess(Duration.ofMinutes(10))
+                    .expireAfterWrite(Duration.ofMinutes(10))
                     .build(new CacheLoader<>() {
                         @Override
                         public @NonNull Boolean load(@NonNull String tableName) throws Exception {

File: oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregateLabelsOpTest.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.library.mqe.rt;
+package org.apache.skywalking.mqe.rt;
 
 import org.apache.skywalking.mqe.rt.grammar.MQEParser;
 import org.apache.skywalking.mqe.rt.operation.AggregateLabelsOp;

File: oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregationOpTest.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.library.mqe.rt;
+package org.apache.skywalking.mqe.rt;
 
 import org.apache.skywalking.mqe.rt.grammar.MQEParser;
 import org.apache.skywalking.mqe.rt.operation.AggregationOp;

File: oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/LogicalFunctionOpTest.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.library.mqe.rt;
+package org.apache.skywalking.mqe.rt;
 
 import org.apache.skywalking.mqe.rt.grammar.MQEParser;
 import org.apache.skywalking.mqe.rt.grammar.MQEParserBaseVisitor;

File: oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MathematicalFunctionOpTest.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.library.mqe.rt;
+package org.apache.skywalking.mqe.rt;
 
 import org.apache.skywalking.mqe.rt.grammar.MQEParser;
 import org.apache.skywalking.mqe.rt.operation.MathematicalFunctionOp;

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/k8s/ServiceNameFormatter.java
Patch:
@@ -36,7 +36,7 @@ public class ServiceNameFormatter {
     private final StringBuffer serviceNamePattern;
 
     public ServiceNameFormatter(String rule) {
-        rule = StringUtils.defaultIfBlank(rule, "${pod.metadata.labels.(service.istio.io/canonical-name),pod.metadata.labels.(app.kubernetes.io/name),pod.metadata.labels.app)}");
+        rule = StringUtils.defaultIfBlank(rule, "${pod.metadata.labels.(service.istio.io/canonical-name),pod.metadata.labels.(app.kubernetes.io/name),pod.metadata.labels.app}");
 
         this.properties = new ArrayList<>();
         this.serviceNamePattern = new StringBuffer();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/BooleanMatch.java
Patch:
@@ -23,7 +23,7 @@
 @BooleanValueFilterMatcher
 public class BooleanMatch {
     public boolean match(Boolean left, Boolean right) {
-        return left == right;
+        return left.equals(right);
     }
 
     public boolean match(boolean left, boolean right) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/BooleanNotEqualMatch.java
Patch:
@@ -23,7 +23,7 @@
 @BooleanValueFilterMatcher
 public class BooleanNotEqualMatch {
     public boolean match(Boolean left, Boolean right) {
-        return left != right;
+        return !left.equals(right);
     }
 
     public boolean match(boolean left, boolean right) {

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeAlarmRule.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.alarm.provider;
 
+import java.util.Set;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Getter;
@@ -38,4 +39,5 @@ public class CompositeAlarmRule {
     private String expression;
     private String message;
     private Map<String, String> tags;
+    private Set<String> hooks;
 }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java
Patch:
@@ -88,6 +88,7 @@ public List<AlarmMessage> evaluate(List<CompositeAlarmRule> compositeAlarmRules,
                     message.setAlarmMessage(alarmMessage);
                     message.setPeriod(headMsg.getPeriod());
                     message.setTags(compositeAlarmRule.getTags().entrySet().stream().map(e -> new Tag(e.getKey(), e.getValue())).collect(Collectors.toList()));
+                    message.getHooks().addAll(compositeAlarmRule.getHooks());
                     compositeRuleMessages.add(message);
                 }
             });

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.skywalking.oap.server.core.alarm.provider.grpc.GRPCCallback;
 import org.apache.skywalking.oap.server.core.alarm.provider.pagerduty.PagerDutyHookCallback;
 import org.apache.skywalking.oap.server.core.alarm.provider.slack.SlackhookCallback;
+import org.apache.skywalking.oap.server.core.alarm.provider.webhook.WebhookCallback;
 import org.apache.skywalking.oap.server.core.alarm.provider.wechat.WechatHookCallback;
 import org.apache.skywalking.oap.server.core.alarm.provider.welink.WeLinkHookCallback;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmCoreTest.java
Patch:
@@ -49,7 +49,6 @@ public void testTriggerTimePoint() throws InterruptedException {
 
         Rules emptyRules = new Rules();
         emptyRules.setRules(new ArrayList<>(0));
-        emptyRules.setWebhooks(new ArrayList<>(0));
         AlarmCore core = new AlarmCore(new AlarmRulesWatcher(emptyRules, null));
 
         Map<String, List<RunningRule>> runningContext = Whitebox.getInternalState(core, "runningContext");

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java
Patch:
@@ -18,6 +18,8 @@
 
 package org.apache.skywalking.oap.server.core.alarm;
 
+import java.util.HashSet;
+import java.util.Set;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;
@@ -41,4 +43,5 @@ public class AlarmMessage {
     private long startTime;
     private transient int period;
     private transient boolean onlyAsCondition;
+    private Set<String> hooks = new HashSet<>();
 }

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/query/MetricsQueryUtilTest.java
Patch:
@@ -109,7 +109,7 @@ public void testComposeLabelValue(final List<String> queryConditionLabels,
         MetricsCondition condition = new MetricsCondition();
         condition.setName(MODULE_NAME);
         List<MetricsValues> result = IMetricsQueryDAO.Util.sortValues(
-            IMetricsQueryDAO.Util.composeLabelValue(condition, queryConditionLabels, valueColumnData),
+            IMetricsQueryDAO.Util.composeLabelValue(condition, queryConditionLabels, datePoints, valueColumnData),
             datePoints, DEFAULT_VALUE
         );
         assertThat(new Gson().toJson(result)).isEqualTo(expectedResult);

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsQueryDAO.java
Patch:
@@ -172,7 +172,7 @@ public List<MetricsValues> readLabeledMetricsValues(MetricsCondition condition,
         }
 
         return Util.sortValues(
-                Util.composeLabelValue(condition, labels, dataTableMap),
+                Util.composeLabelValue(condition, labels, ids, dataTableMap),
                 ids,
                 ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName())
         );

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java
Patch:
@@ -192,7 +192,7 @@ public List<MetricsValues> readLabeledMetricsValues(final MetricsCondition condi
             }
         }
         return Util.sortValues(
-            Util.composeLabelValue(condition, labels, idMap),
+            Util.composeLabelValue(condition, labels, ids, idMap),
             ids,
             ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName())
         );

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCMetricsQueryDAO.java
Patch:
@@ -220,7 +220,7 @@ public List<MetricsValues> readLabeledMetricsValues(final MetricsCondition condi
         }
 
         return Util.sortValues(
-            Util.composeLabelValue(condition, labels, idMap),
+            Util.composeLabelValue(condition, labels, ids, idMap),
             ids,
             ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName())
         );

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java
Patch:
@@ -66,7 +66,7 @@ public class MQEVisitor extends MQEParserBaseVisitor<ExpressionResult> {
     private final Entity entity;
     private final Duration duration;
 
-    private final static String LABEL = "label";
+    private final static String GENERAL_LABEL_NAME = "_";
 
     public MQEVisitor(final MetricsQuery metricsQuery,
                       final RecordsQuery recordsQuery,
@@ -217,7 +217,7 @@ public ExpressionResult visitTopNOP(MQEParser.TopNOPContext ctx) {
     public ExpressionResult visitRelablesOP(MQEParser.RelablesOPContext ctx) {
         ExpressionResult result = visit(ctx.expression());
         if (!result.isLabeledResult()) {
-            // Resever the original result type
+            // Reserve the original result type
             result.setError("The result of expression [" + ctx.expression().getText() + "] is not a labeled result.");
             return result;
         }
@@ -405,7 +405,7 @@ private void queryLabeledMetrics(String metricName,
             }
 
             Metadata metadata = new Metadata();
-            KeyValue labelValue = new KeyValue(LABEL, metricsValues.getLabel());
+            KeyValue labelValue = new KeyValue(GENERAL_LABEL_NAME, metricsValues.getLabel());
             metadata.getLabels().add(labelValue);
             MQEValues mqeValues = new MQEValues();
             mqeValues.setValues(mqeValueList);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/BatchSQLExecutor.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.jdbc;
 
+import java.sql.Statement;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.oap.server.core.UnexpectedException;
@@ -84,7 +85,7 @@ private void executeBatch(PreparedStatement preparedStatement,
         final var executeBatchResults = preparedStatement.executeBatch();
         final var isInsert = bulkRequest.get(0) instanceof InsertRequest;
         for (int i = 0; i < executeBatchResults.length; i++) {
-            if (executeBatchResults[i] == 1 && isInsert) {
+            if ((executeBatchResults[i] == 1 || executeBatchResults[i] == Statement.SUCCESS_NO_INFO) && isInsert) {
                 // Insert successfully.
                 ((InsertRequest) bulkRequest.get(i)).onInsertCompleted();
             } else if (executeBatchResults[i] == 0 && !isInsert) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/group/openapi/EndpointGroupingRule4Openapi.java
Patch:
@@ -44,7 +44,7 @@ void addGroupedRule(String serviceName, String endpointGroupName, String ruleReg
     public StringFormatGroup.FormatResult format(String service, String endpointName) {
         Map<String, String> endpointNameLookup = directLookup.get(service);
         if (endpointNameLookup != null && endpointNameLookup.get(endpointName) != null) {
-            return new StringFormatGroup.FormatResult(true, endpointNameLookup.get(endpointName), endpointName);
+            return new StringFormatGroup.FormatResult(true, endpointName, endpointNameLookup.get(endpointName));
         }
 
         Map<String, StringFormatGroup> rules = groupedRules.get(service);

File: oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/StringFormatGroup.java
Patch:
@@ -68,7 +68,7 @@ public void addRule(String name, String ruleRegex) {
     public FormatResult format(String string) {
         for (PatternRule rule : rules) {
             if (rule.getPattern().matcher(string).matches()) {
-                return new FormatResult(true, rule.getName(), string);
+                return new FormatResult(true, string, rule.getName());
             }
         }
         return new FormatResult(false, string, string);

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchScroller.java
Patch:
@@ -62,7 +62,7 @@ public List<T> scroll() {
                 for (final var searchHit : response.getHits()) {
                     results.add(resultConverter.apply(searchHit));
                 }
-                if (search.getSize() != null && response.getHits().getTotal() < search.getSize()) {
+                if (search.getSize() != null && response.getHits().getHits().size() < search.getSize()) {
                     break;
                 }
                 if (queryMaxSize > 0 && results.size() >= queryMaxSize) {

File: oap-server/server-cluster-plugin/cluster-nacos-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/nacos/NacosCoordinatorTest.java
Patch:
@@ -110,10 +110,10 @@ public void registerRemoteUsingInternal() throws NacosException {
         registerRemote(internalAddress);
     }
 
-    private void validate(Address originArress, RemoteInstance instance) {
+    private void validate(Address originAddress, RemoteInstance instance) {
         Address instanceAddress = instance.getAddress();
-        assertEquals(originArress.getHost(), instanceAddress.getHost());
-        assertEquals(originArress.getPort(), instanceAddress.getPort());
+        assertEquals(originAddress.getHost(), instanceAddress.getHost());
+        assertEquals(originAddress.getPort(), instanceAddress.getPort());
     }
 
     private void registerRemote(Address address) throws NacosException {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java
Patch:
@@ -262,7 +262,9 @@ public static Span buildSpanFromRecord(ZipkinSpanRecord record) {
         span.traceId(record.getTraceId());
         span.id(record.getSpanId());
         span.parentId(record.getParentId());
-        span.kind(Span.Kind.valueOf(record.getKind()));
+        if (!StringUtil.isEmpty(record.getKind())) {
+            span.kind(Span.Kind.valueOf(record.getKind()));
+        }
         span.timestamp(record.getTimestamp());
         span.duration(record.getDuration());
         span.name(record.getName());

File: oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/ExporterSetting.java
Patch:
@@ -38,4 +38,5 @@ public class ExporterSetting extends ModuleConfig {
     private String kafkaProducerConfig;
     private String kafkaTopicTrace = "skywalking-export-trace";
     private String kafkaTopicLog = "skywalking-export-log";
+    private boolean exportErrorStatusTraceOnly = false;
 }

File: oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java
Patch:
@@ -500,11 +500,13 @@ private MetricInfo buildMetaMetricInfo(String metricName,
                 break;
             case ServiceInstance:
                 metricInfo.getLabels().add(new LabelValuePair(LabelName.SCOPE, Scope.ServiceInstance.name()));
+                metricInfo.getLabels().add(new LabelValuePair(LabelName.SERVICE, ""));
                 metricInfo.getLabels().add(new LabelValuePair(LabelName.SERVICE_INSTANCE, ""));
                 metricInfo.getLabels().add(new LabelValuePair(LabelName.PARENT_SERVICE, ""));
                 break;
             case Endpoint:
                 metricInfo.getLabels().add(new LabelValuePair(LabelName.SCOPE, Scope.Endpoint.name()));
+                metricInfo.getLabels().add(new LabelValuePair(LabelName.SERVICE, ""));
                 metricInfo.getLabels().add(new LabelValuePair(LabelName.ENDPOINT, ""));
                 metricInfo.getLabels().add(new LabelValuePair(LabelName.PARENT_SERVICE, ""));
                 break;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAO.java
Patch:
@@ -51,7 +51,7 @@ public class JDBCHistoryDeleteDAO implements IHistoryDeleteDAO {
     @SneakyThrows
     public void deleteHistory(Model model, String timeBucketColumnName, int ttl) {
         final var endTimeBucket = TimeBucket.getTimeBucket(clock.millis() + TimeUnit.DAYS.toMillis(1), DownSampling.Day);
-        final var startTimeBucket = endTimeBucket - ttl - 1;
+        final var startTimeBucket = TimeBucket.getTimeBucket(clock.millis() - TimeUnit.DAYS.toMillis(ttl), DownSampling.Day);
         log.info(
             "Deleting history data, ttl: {}, now: {}. Keep [{}, {}]",
             ttl,

File: oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java
Patch:
@@ -111,7 +111,8 @@ public HttpResponse metadata(
         response.setStatus(ResultStatus.SUCCESS);
         String regex = metric.orElse("");
         List<MetricDefinition> definitionList = metricsQuery.listMetrics(regex);
-        int maxNum = limit.orElse(definitionList.size());
+        int inputLimit = limit.orElse(definitionList.size());
+        int maxNum = Math.min(inputLimit, definitionList.size());
         for (int i = 0; i < maxNum; i++) {
             List<MetricMetadata> metadataList = new ArrayList<>();
             MetricMetadata metadata = new MetricMetadata(MetricType.GAUGE, "", "");

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAO.java
Patch:
@@ -103,8 +103,7 @@ public void deleteHistory(Model model, String timeBucketColumnName, int ttl) {
 
         // Create tables for the next day.
         final var nextTimeBucket = TimeBucket.getTimeBucket(clock.millis() + TimeUnit.DAYS.toMillis(1), DownSampling.Day);
-        final var table = TableHelper.getTable(model, nextTimeBucket);
-        modelInstaller.createTable(model, table);
+        modelInstaller.createTable(model, nextTimeBucket);
 
         lastDeletedTimeBucket.put(model.getName(), deadline);
     }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAOIT.java
Patch:
@@ -117,7 +117,7 @@ void setup() {
     void test() throws SQLException {
         // Table install should create the table.
         var clock = Clock.fixed(Instant.parse("2023-03-17T10:00:00Z"), ZoneId.systemDefault());
-        tableInstaller.createTable(model, "service_traffic_20230317");
+        tableInstaller.createTable(model, 20230317);
 
         var jdbcHistoryDeleteDAO = new JDBCHistoryDeleteDAO(jdbcClient, tableHelper, tableInstaller, clock);
         jdbcHistoryDeleteDAO.deleteHistory(model, "time_bucket", 3);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCHistoryDeleteDAO.java
Patch:
@@ -75,16 +75,17 @@ public void deleteHistory(Model model, String timeBucketColumnName, int ttl) {
 
         final var ttlTables = tableHelper.getTablesForRead(model.getName(), startTimeBucket, endTimeBucket);
         final var tablesToDrop = new HashSet<String>();
+        final var tableName = TableHelper.getTableName(model);
 
         try (final var conn = jdbcClient.getConnection();
-             final var result = conn.getMetaData().getTables(null, null, TableHelper.getTableName(model) + "%", new String[]{"TABLE"})) {
+             final var result = conn.getMetaData().getTables(null, null, tableName + "%", new String[]{"TABLE"})) {
             while (result.next()) {
                 tablesToDrop.add(result.getString("TABLE_NAME"));
             }
         }
 
         ttlTables.forEach(tablesToDrop::remove);
-        tablesToDrop.removeIf(it -> !it.matches(".*_\\d{8}$"));
+        tablesToDrop.removeIf(it -> !it.matches(tableName + "_\\d{8}$"));
         for (final var table : tablesToDrop) {
             final var dropSql = new SQLBuilder("drop table if exists ").append(table);
             jdbcClient.executeUpdate(dropSql.toString());

File: oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java
Patch:
@@ -459,7 +459,7 @@ private List<LabelName> buildLabelNames(Scope scope,
                                             Column.ValueDataType dataType) {
         List<LabelName> labelNames = new ArrayList<>();
         labelNames.add(LabelName.LAYER);
-        labelNames.add(LabelName.SCOPE);
+        labelNames.add(LabelName.SERVICE);
         labelNames.add(LabelName.TOP_N);
         labelNames.add(LabelName.ORDER);
         if (Column.ValueDataType.LABELED_VALUE == dataType) {

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/tagOpt/K8sRetagType.java
Patch:
@@ -33,7 +33,7 @@ public Sample[] execute(final Sample[] ss,
                                 final String newLabelName,
                                 final String existingLabelName,
                                 final String namespaceLabelName) {
-            Sample[] samples = Arrays.stream(ss).map(sample -> {
+            return Arrays.stream(ss).map(sample -> {
                 String podName = sample.getLabels().get(existingLabelName);
                 String namespace = sample.getLabels().get(namespaceLabelName);
                 if (!Strings.isNullOrEmpty(podName) && !Strings.isNullOrEmpty(namespace)) {
@@ -47,7 +47,6 @@ public Sample[] execute(final Sample[] ss,
                 }
                 return sample;
             }).toArray(Sample[]::new);
-            return samples;
         }
     }
 }

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/k8s/K8sInfoRegistry.java
Patch:
@@ -51,6 +51,7 @@ private K8sInfoRegistry() {
                     .namespace(it.getMetadata().getNamespace())
                     .build())
                 .orElse(ObjectID.EMPTY)));
+
         ipServiceMap = CacheBuilder.newBuilder()
             .expireAfterWrite(Duration.ofMinutes(3))
             .build(CacheLoader.from(ip -> KubernetesServices.INSTANCE
@@ -73,6 +74,7 @@ private K8sInfoRegistry() {
                     .build())
                 .findFirst()
                 .orElse(ObjectID.EMPTY)));
+
         podServiceMap = CacheBuilder.newBuilder()
             .expireAfterWrite(Duration.ofMinutes(3))
             .build(CacheLoader.from(podObjectID -> {
@@ -94,6 +96,7 @@ private K8sInfoRegistry() {
                     .list()
                     .stream()
                     .filter(it -> it.getMetadata() != null)
+                    .filter(it -> Objects.equals(it.getMetadata().getNamespace(), pod.get().getMetadata().getNamespace()))
                     .filter(it -> it.getSpec() != null)
                     .filter(it -> requireNonNull(it.getSpec()).getSelector() != null)
                     .filter(it -> {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java
Patch:
@@ -27,6 +27,7 @@ public class Const {
     public static final String RELATION_ID_CONNECTOR = "-";
     public static final String RELATION_ID_PARSER_SPLIT = "\\-";
     public static final String LINE = "-";
+    public static final String UNDERSCORE = "_";
     public static final String COMMA = ",";
     public static final String SPACE = " ";
     public static final String KEY_VALUE_SPLIT = ",";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/LogRecord.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
@@ -31,13 +30,11 @@
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 
-import static org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord.SERVICE_ID;
 import static org.apache.skywalking.oap.server.core.analysis.record.Record.TIME_BUCKET;
 
 @SuperDataset
 @Stream(name = LogRecord.INDEX_NAME, scopeId = DefaultScopeDefine.LOG, builder = LogRecord.Builder.class, processor = RecordStreamProcessor.class)
 @SQLDatabase.ExtraColumn4AdditionalEntity(additionalTable = AbstractLogRecord.ADDITIONAL_TAG_TABLE, parentColumn = TIME_BUCKET)
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.TIME_SEC_RANGE_SHARDING_ALGORITHM, dataSourceShardingColumn = SERVICE_ID, tableShardingColumn = TIME_BUCKET)
 @BanyanDB.TimestampColumn(AbstractLogRecord.TIMESTAMP)
 public class LogRecord extends AbstractLogRecord {
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/networkalias/NetworkAddressAlias.java
Patch:
@@ -28,11 +28,9 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -46,7 +44,6 @@
 @EqualsAndHashCode(of = {
     "address"
 })
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 public class NetworkAddressAlias extends Metrics {
     public static final String INDEX_NAME = "network_address_alias";
     public static final String ADDRESS = "address";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/process/ProcessTraffic.java
Patch:
@@ -31,11 +31,9 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -52,7 +50,6 @@
     "instanceId",
     "name",
 })
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 @BanyanDB.StoreIDAsTag
 public class ProcessTraffic extends Metrics {
     public static final String INDEX_NAME = "process_traffic";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/process/ServiceLabelRecord.java
Patch:
@@ -25,11 +25,9 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -50,7 +48,6 @@
         "serviceId",
         "label"
 })
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 public class ServiceLabelRecord extends Metrics {
 
     public static final String INDEX_NAME = "service_label";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java
Patch:
@@ -28,11 +28,9 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -44,7 +42,6 @@
     "entityId",
     "component_id"
 }, callSuper = true)
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 public class ProcessRelationClientSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "process_relation_client_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java
Patch:
@@ -28,11 +28,9 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -43,7 +41,6 @@
 @EqualsAndHashCode(of = {
     "entityId"
 }, callSuper = true)
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 public class ProcessRelationServerSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "process_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/searchtag/TagAutocompleteData.java
Patch:
@@ -27,11 +27,9 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -47,7 +45,6 @@
     "tagValue",
     "tagType"
 })
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 public class TagAutocompleteData extends Metrics {
     public static final String INDEX_NAME = "tag_autocomplete";
     public static final String TAG_KEY = "tag_key";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java
Patch:
@@ -29,11 +29,9 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -50,7 +48,6 @@
     callSuper = false,
     of = "uuid"
 )
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 public class Event extends Metrics {
 
     public static final String INDEX_NAME = "events";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/NoneStreamProcessor.java
Patch:
@@ -77,7 +77,7 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
 
         ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);
         // None stream doesn't read data from database during the persistent process. Keep the timeRelativeID == false always.
-        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Minute), true);
+        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Minute));
 
         final NoneStreamPersistentWorker persistentWorker = new NoneStreamPersistentWorker(moduleDefineHolder, model, noneStream);
         workers.put(streamClass, persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java
Patch:
@@ -73,7 +73,7 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
         ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);
         // Record stream doesn't read data from database during the persistent process. Keep the timeRelativeID == false always.
         Model model = modelSetter.add(
-            recordClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Second), true);
+            recordClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Second));
         ExportRecordWorker exportWorker = new ExportRecordWorker(moduleDefineHolder);
         RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO, exportWorker);
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java
Patch:
@@ -92,7 +92,7 @@ public void create(ModuleDefineHolder moduleDefineHolder,
         ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);
         // Top N metrics doesn't read data from database during the persistent process. Keep the timeRelativeID == false always.
         Model model = modelSetter.add(
-            topNClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Second), true);
+            topNClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Second));
 
         TopNWorker persistentWorker = new TopNWorker(
             moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingDataRecord.java
Patch:
@@ -50,10 +50,10 @@ public class EBPFProfilingDataRecord extends Record {
     public static final String DATA_BINARY = "dump_binary";
     public static final String UPLOAD_TIME = "upload_time";
 
-    @Column(name = TASK_ID, length = 600)
+    @Column(name = TASK_ID)
     @BanyanDB.SeriesID(index = 0)
     private String taskId;
-    @Column(name = SCHEDULE_ID, length = 600)
+    @Column(name = SCHEDULE_ID)
     private String scheduleId;
     @Column(name = STACK_ID_LIST)
     private String stackIdList;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileThreadSnapshotRecord.java
Patch:
@@ -52,11 +52,11 @@ public class ProfileThreadSnapshotRecord extends Record {
     public static final String STACK_BINARY = "stack_binary";
 
     @Column(name = TASK_ID)
-    @SQLDatabase.QueryUnifiedIndex(withColumns = {SEGMENT_ID})
+    @SQLDatabase.CompositeIndex(withColumns = {SEGMENT_ID})
     private String taskId;
     @Column(name = SEGMENT_ID)
-    @SQLDatabase.QueryUnifiedIndex(withColumns = {SEQUENCE})
-    @SQLDatabase.QueryUnifiedIndex(withColumns = {DUMP_TIME})
+    @SQLDatabase.CompositeIndex(withColumns = {SEQUENCE})
+    @SQLDatabase.CompositeIndex(withColumns = {DUMP_TIME})
     @BanyanDB.SeriesID(index = 0)
     private String segmentId;
     @Column(name = DUMP_TIME)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/DurationUtils.java
Patch:
@@ -18,15 +18,16 @@
 
 package org.apache.skywalking.oap.server.core.query;
 
-import java.util.LinkedList;
-import java.util.List;
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.UnexpectedException;
 import org.apache.skywalking.oap.server.core.query.enumeration.Step;
 import org.joda.time.DateTime;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 
+import java.util.LinkedList;
+import java.util.List;
+
 public enum DurationUtils {
     INSTANCE;
 
@@ -190,5 +191,4 @@ public void verifyDateTimeString(Step step, String dateStr) {
         }
         throw new UnexpectedException("Unsupported step " + step.name());
     }
-
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Duration.java
Patch:
@@ -18,13 +18,14 @@
 
 package org.apache.skywalking.oap.server.core.query.input;
 
-import java.util.List;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.query.DurationUtils;
 import org.apache.skywalking.oap.server.core.query.PointOfTime;
 import org.apache.skywalking.oap.server.core.query.enumeration.Step;
 
+import java.util.List;
+
 @Getter
 @Setter
 public class Duration {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Record.java
Patch:
@@ -50,4 +50,4 @@ public SelectedRecord toSelectedRecord() {
         result.setValue(getValue());
         return result;
     }
-}
\ No newline at end of file
+}

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java
Patch:
@@ -18,11 +18,12 @@
 
 package org.apache.skywalking.oap.server.core.source;
 
+import lombok.Getter;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import lombok.Getter;
 
 /**
  * Define the default columns of source scope. These columns pass down into the persistent entity(OAL metrics entity)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelCreator.java
Patch:
@@ -31,7 +31,7 @@ public interface ModelCreator extends Service {
      *
      * @return the created new model
      */
-    Model add(Class<?> aClass, int scopeId, Storage storage, boolean record) throws StorageException;
+    Model add(Class<?> aClass, int scopeId, Storage storage) throws StorageException;
 
     void addModelListener(CreatingListener listener) throws StorageException;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinServiceRelationTraffic.java
Patch:
@@ -27,11 +27,9 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -43,7 +41,6 @@
     "serviceName",
     "remoteServiceName"
 })
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 public class ZipkinServiceRelationTraffic extends Metrics {
 
     public static final String INDEX_NAME = "zipkin_service_relation_traffic";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinServiceSpanTraffic.java
Patch:
@@ -28,11 +28,9 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -44,7 +42,6 @@
     "serviceName",
     "spanName"
 })
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 public class ZipkinServiceSpanTraffic extends Metrics {
 
     public static final String INDEX_NAME = "zipkin_service_span_traffic";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinServiceTraffic.java
Patch:
@@ -28,11 +28,9 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -43,7 +41,6 @@
 @EqualsAndHashCode(of = {
     "serviceName"
 })
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.NO_SHARDING)
 public class ZipkinServiceTraffic extends Metrics {
     public static final String INDEX_NAME = "zipkin_service_traffic";
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
-import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
 import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
@@ -46,13 +45,11 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord.TRACE_ID;
 import static org.apache.skywalking.oap.server.core.analysis.record.Record.TIME_BUCKET;
 
 @SuperDataset
 @Stream(name = ZipkinSpanRecord.INDEX_NAME, scopeId = DefaultScopeDefine.ZIPKIN_SPAN, builder = ZipkinSpanRecord.Builder.class, processor = RecordStreamProcessor.class)
 @SQLDatabase.ExtraColumn4AdditionalEntity(additionalTable = ZipkinSpanRecord.ADDITIONAL_QUERY_TABLE, parentColumn = TIME_BUCKET)
-@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.TIME_SEC_RANGE_SHARDING_ALGORITHM, dataSourceShardingColumn = TRACE_ID, tableShardingColumn = TIME_BUCKET)
 @BanyanDB.TimestampColumn(ZipkinSpanRecord.TIMESTAMP_MILLIS)
 public class ZipkinSpanRecord extends Record {
     private static final Gson GSON = new Gson();

File: oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/PromQLExprQueryVisitor.java
Patch:
@@ -287,7 +287,7 @@ private void queryTopN(String metricName,
                                                     Optional.ofNullable(selectedRecord.getName()), Optional.empty()
             );
             metricData.setMetric(metricInfo);
-            metricData.setValues(buildMatrixValues(duration, selectedRecord.getValue()));
+            metricData.setValues(buildMatrixValues(duration, String.valueOf(selectedRecord.getValue())));
             matrixResult.getMetricDataList().add(metricData);
         }
     }
@@ -306,7 +306,7 @@ private void queryRecords(String metricName,
                                                     Optional.ofNullable(record.getName())
             );
             metricData.setMetric(metricInfo);
-            metricData.setValues(buildMatrixValues(duration, record.getValue()));
+            metricData.setValues(buildMatrixValues(duration, String.valueOf(record.getValue())));
             matrixResult.getMetricDataList().add(metricData);
         }
     }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/EBPFProcessProfilingQuery.java
Patch:
@@ -66,7 +66,7 @@ public List<EBPFProfilingTask> queryEBPFProfilingTasks(String serviceId, String
         return getQueryService().queryEBPFProfilingTasks(serviceId, serviceInstanceId, targets);
     }
 
-    public List<EBPFProfilingSchedule> queryEBPFProfilingSchedules(String taskId) throws IOException {
+    public List<EBPFProfilingSchedule> queryEBPFProfilingSchedules(String taskId) throws Exception {
         return getQueryService().queryEBPFProfilingSchedules(taskId);
     }
 
@@ -75,4 +75,4 @@ public EBPFProfilingAnalyzation analysisEBPFProfilingResult(List<String> schedul
                                                                 EBPFProfilingAnalyzeAggregateType aggregateType) throws IOException {
         return getQueryService().getEBPFProfilingAnalyzation(scheduleIdList, timeRanges, aggregateType);
     }
-}
\ No newline at end of file
+}

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TopologyQuery.java
Patch:
@@ -83,7 +83,7 @@ public EndpointTopology getEndpointDependencies(final String endpointId,
         return getQueryService().getEndpointDependencies(duration, endpointId);
     }
 
-    public ProcessTopology getProcessTopology(final String instanceId, final Duration duration) throws IOException {
+    public ProcessTopology getProcessTopology(final String instanceId, final Duration duration) throws Exception {
         return getQueryService().getProcessTopology(instanceId, duration);
     }
 }

File: oap-server/server-starter/src/test/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoaderTestCase.java
Patch:
@@ -47,7 +47,7 @@ public void testLoadConfig() {
         assertThat(providerConfig.get("metadataQueryMaxSize")).isEqualTo(5000);
         assertThat(providerConfig.get("properties")).isInstanceOf(Properties.class);
         Properties properties = (Properties) providerConfig.get("properties");
-        assertThat(properties.get("jdbcUrl")).isEqualTo("jdbc:mysql://localhost:3306/swtest?rewriteBatchedStatements=true");
+        assertThat(properties.get("jdbcUrl")).isEqualTo("jdbc:mysql://localhost:3306/swtest?rewriteBatchedStatements=true&allowMultiQueries=true");
     }
 
     @Test

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtilsTest.java
Patch:
@@ -43,15 +43,15 @@ public class TimeSeriesUtilsTest {
     @BeforeEach
     public void prepare() {
         superDatasetModel = new Model("superDatasetModel", Lists.newArrayList(),
-                                      0, DownSampling.Second, true, true, Record.class, true,
+                                      0, DownSampling.Second, true, Record.class, true,
                                       new SQLDatabaseModelExtension(), new BanyanDBModelExtension(), new ElasticSearchModelExtension()
         );
         normalRecordModel = new Model("normalRecordModel", Lists.newArrayList(),
-                                      0, DownSampling.Second, true, false, Record.class, true,
+                                      0, DownSampling.Second, false, Record.class, true,
                                       new SQLDatabaseModelExtension(), new BanyanDBModelExtension(), new ElasticSearchModelExtension()
         );
         normalMetricsModel = new Model("normalMetricsModel", Lists.newArrayList(),
-                                       0, DownSampling.Minute, false, false, Metrics.class, true,
+                                       0, DownSampling.Minute, false, Metrics.class, true,
                                        new SQLDatabaseModelExtension(), new BanyanDBModelExtension(), new ElasticSearchModelExtension()
         );
         TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(1);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/TableMetaInfo.java
Patch:
@@ -18,16 +18,17 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.jdbc;
 
+import org.apache.skywalking.oap.server.core.storage.model.Model;
+
 import java.util.HashMap;
 import java.util.Map;
-import org.apache.skywalking.oap.server.core.storage.model.Model;
 
 /**
  * Consider there additional table columns need to remove from model columns, SQL storage implementation
  * should get model from here.
  */
 public class TableMetaInfo {
-    private static Map<String, Model> TABLES = new HashMap<>();
+    private static final Map<String, Model> TABLES = new HashMap<>();
 
     public static void addModel(Model model) {
         // remove exclude columns according to @SQLDatabase.AdditionalEntity

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCStorageDAO.java
Patch:
@@ -29,11 +29,11 @@
 import org.apache.skywalking.oap.server.core.storage.IRecordDAO;
 import org.apache.skywalking.oap.server.core.storage.StorageDAO;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
-import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
+import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCClient;
 
 @RequiredArgsConstructor
 public class JDBCStorageDAO implements StorageDAO {
-    private final JDBCHikariCPClient jdbcClient;
+    private final JDBCClient jdbcClient;
 
     @Override
     public IMetricsDAO newMetricsDao(StorageBuilder storageBuilder) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/postgresql/PostgreSQLStorageProvider.java
Patch:
@@ -49,9 +49,9 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
 
         this.registerServiceImplementation(
             IMetricsQueryDAO.class,
-            new PostgreSQLMetricsQueryDAO(jdbcClient));
+            new PostgreSQLMetricsQueryDAO(jdbcClient, tableHelper));
         this.registerServiceImplementation(
             IAggregationQueryDAO.class,
-            new PostgreSQLAggregationQueryDAO(jdbcClient));
+            new PostgreSQLAggregationQueryDAO(jdbcClient, tableHelper));
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java
Patch:
@@ -86,7 +86,7 @@ protected StorageID id0() {
     @Override
     public boolean combine(Metrics metrics) {
         final ProcessRelationClientSideMetrics processRelationClientSideMetrics = (ProcessRelationClientSideMetrics) metrics;
-        if (!ComponentLibraryCatalogUtil.get().compare(this.componentId, processRelationClientSideMetrics.getComponentId())) {
+        if (ComponentLibraryCatalogUtil.get().compare(this.componentId, processRelationClientSideMetrics.getComponentId())) {
             this.setComponentId(processRelationClientSideMetrics.getComponentId());
             return true;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java
Patch:
@@ -84,7 +84,7 @@ protected StorageID id0() {
     @Override
     public boolean combine(Metrics metrics) {
         final ProcessRelationServerSideMetrics processRelationServerSideMetrics = (ProcessRelationServerSideMetrics) metrics;
-        if (!ComponentLibraryCatalogUtil.get().compare(this.componentId, processRelationServerSideMetrics.getComponentId())) {
+        if (ComponentLibraryCatalogUtil.get().compare(this.componentId, processRelationServerSideMetrics.getComponentId())) {
             this.setComponentId(processRelationServerSideMetrics.getComponentId());
             return true;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/ComponentLibraryCatalogService.java
Patch:
@@ -128,6 +128,6 @@ private void init() throws InitialComponentCatalogException {
     public boolean compare(int componentA, int componentB) {
         final Integer priorityA = componentIDPriorities.getOrDefault(componentA, 50);
         final Integer priorityB = componentIDPriorities.getOrDefault(componentB, 50);
-        return priorityA.compareTo(priorityB) > 0;
+        return priorityA.compareTo(priorityB) < 0;
     }
 }

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTopologyQueryDAO.java
Patch:
@@ -136,8 +136,8 @@ List<Call.CallDetail> queryServiceRelation(Duration duration,
             final String entityId = dataPoint.getTagValue(Metrics.ENTITY_ID);
             final IntList componentIds = new IntList(
                     dataPoint.getTagValue(ServiceRelationClientSideMetrics.COMPONENT_IDS));
-            final Call.CallDetail call = new Call.CallDetail();
             for (int i = 0; i < componentIds.size(); i++) {
+                final Call.CallDetail call = new Call.CallDetail();
                 call.buildFromServiceRelation(entityId, componentIds.get(i), detectPoint);
                 calls.add(call);
             }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TopologyQueryEsDAO.java
Patch:
@@ -316,8 +316,8 @@ private List<Call.CallDetail> buildServiceRelation(SearchBuilder sourceBuilder,
                 (List<Map<String, Object>>) componentTerms.get("buckets");
             final IntList componentIds = new IntList((String) subAgg.iterator().next().get("key"));
 
-            Call.CallDetail call = new Call.CallDetail();
             for (int i = 0; i < componentIds.size(); i++) {
+                Call.CallDetail call = new Call.CallDetail();
                 call.buildFromServiceRelation(entityId, componentIds.get(i), detectPoint);
                 calls.add(call);
             }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCTopologyQueryDAO.java
Patch:
@@ -271,11 +271,11 @@ private List<Call.CallDetail> loadProcessFromSide(Duration duration,
     private void buildServiceCalls(ResultSet resultSet, List<Call.CallDetail> calls,
                                    DetectPoint detectPoint) throws SQLException {
         while (resultSet.next()) {
-            Call.CallDetail call = new Call.CallDetail();
             String entityId = resultSet.getString(Metrics.ENTITY_ID);
             final IntList componentIds = new IntList(
                 resultSet.getString(ServiceRelationServerSideMetrics.COMPONENT_IDS));
             for (int i = 0; i < componentIds.size(); i++) {
+                Call.CallDetail call = new Call.CallDetail();
                 call.buildFromServiceRelation(entityId, componentIds.get(i), detectPoint);
                 calls.add(call);
             }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java
Patch:
@@ -112,7 +112,7 @@ public class CoreModuleConfig extends ModuleConfig {
      * load for memory, network of OAP and storage.
      *
      * But, being activated, user could see the name in the storage entities, which make users easier to use 3rd party
-     * tool, such as Kibana->ES, to query the data by themselves.
+     * tool, such as Kibana-&gt;ES, to query the data by themselves.
      */
     private boolean activeExtraModelColumns = false;
     /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
Patch:
@@ -124,7 +124,7 @@ public enum Layer {
     MYSQL(18, true),
 
     /**
-     * Cache conjectured by client side plugin(eg. skywalking-java -> JedisPlugin LettucePlugin)
+     * Cache conjectured by client side plugin(eg. skywalking-java -&gt; JedisPlugin LettucePlugin)
      */
     VIRTUAL_CACHE(19, false),
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java
Patch:
@@ -65,7 +65,6 @@
      * <p>
      * Only work with {@link Column}
      *
-     * @return non-negative if this column be used for sharding. -1 means not as a sharding key
      * @since 9.3.0 Rename as SeriesID.
      * @since 9.1.0 created as a new annotation.
      * @since 9.0.0 added in {@link Column}
@@ -84,7 +83,7 @@
          * considering OAP finds services by "layer", the "layer" 's index should be 0 to
          * trigger a prefix-scanning.
          *
-         * @return index, from zero.
+         * @return non-negative if this column be used for sharding. -1 means not as a sharding key
          */
         int index() default -1;
     }
@@ -158,7 +157,7 @@ enum IndexType {
 
     /**
      * StoreIDTag indicates a metric store its ID as a tag for searching.
-     * @Since 9.4.0
+     * @since 9.4.0
      */
     @Target({ElementType.TYPE})
     @Retention(RetentionPolicy.RUNTIME)

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java
Patch:
@@ -145,7 +145,7 @@ public class StorageModuleElasticsearchConfig extends ModuleConfig {
 
     /**
      * The number of threads for the underlying HTTP client to perform socket I/O.
-     * If the value is <= 0, the number of available processors will be used.
+     * If the value is {@code <= 0}, the number of available processors will be used.
      */
     private int numHttpClientThread;
 

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsQuery.java
Patch:
@@ -102,7 +102,7 @@ private MetricsQueryService getMetricsQueryService() {
      * Metrics definition metadata query. Response the metrics type which determines the suitable query methods.
      */
     public MetricsType typeOfMetrics(String name) throws IOException {
-        return getMetricsMetadataQueryService().typeOfMetrics(name);
+        return MetricsMetadataQueryService.typeOfMetrics(name);
     }
 
     /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/DurationUtils.java
Patch:
@@ -88,6 +88,9 @@ public List<PointOfTime> getDurationPoints(Step step, long startTimeBucket, long
 
         List<PointOfTime> durations = new LinkedList<>();
         durations.add(new PointOfTime(startTimeBucket));
+        if (startTimeBucket == endTimeBucket) {
+            return durations;
+        }
 
         int i = 0;
         do {

File: oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java
Patch:
@@ -103,7 +103,6 @@ public PromQLApiHandler(ModuleManager moduleManager) {
     }
 
     @Get
-    @Post
     @Path("/api/v1/metadata")
     public HttpResponse metadata(
         @Param("limit") Optional<Integer> limit,
@@ -174,7 +173,6 @@ public HttpResponse labels(
      * reserve these param to keep consistent with API protocol.
      */
     @Get
-    @Post
     @Path("/api/v1/label/{label_name}/values")
     public HttpResponse labelValues(
         @Param("label_name") String labelName,

File: oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/PromQLExprQueryVisitor.java
Patch:
@@ -58,6 +58,7 @@
 import org.apache.skywalking.promql.rt.grammar.PromQLParserBaseVisitor;
 
 import static org.apache.skywalking.oap.query.promql.rt.PromOpUtils.buildMatrixValues;
+import static org.apache.skywalking.oap.query.promql.rt.PromOpUtils.formatDuration;
 import static org.apache.skywalking.oap.query.promql.rt.PromOpUtils.matrixBinaryOp;
 import static org.apache.skywalking.oap.query.promql.rt.PromOpUtils.matrixCompareOp;
 import static org.apache.skywalking.oap.query.promql.rt.PromOpUtils.matrixScalarBinaryOp;
@@ -247,9 +248,9 @@ public ParseResult visitMetricRange(PromQLParser.MetricRangeContext ctx) {
             return result;
         }
 
-        String timeRange = "PT" + ctx.DURATION().getText().toUpperCase();
+        String timeRange = ctx.DURATION().getText().toUpperCase();
         long endTS = System.currentTimeMillis();
-        long startTS = endTS - java.time.Duration.parse(timeRange).toMillis();
+        long startTS = endTS - formatDuration(timeRange).getMillis();
         duration = timestamp2Duration(startTS, endTS);
         ParseResult result = visit(ctx.metricInstant());
         result.setRangeExpression(true);

File: test/e2e-v2/java-test-service/e2e-mock-sender/src/main/java/org/apache/skywalking/e2e/controller/OtelMetricsSender.java
Patch:
@@ -89,7 +89,7 @@ public String sendMetricsByTemplate() throws IOException {
     }
 
     private String rewriteTimeField(File file) throws IOException {
-        final long nanoTime = System.nanoTime();
+        final long nanoTime = System.currentTimeMillis() * 1000000L;
         final Configuration configuration = Configuration.builder()
                                                          .options(Option.SUPPRESS_EXCEPTIONS)
                                                          .evaluationListener(found -> {

File: oap-server/server-storage-plugin/storage-shardingsphere-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/shardingsphere/TCITShardingSphere.java
Patch:
@@ -133,7 +133,7 @@ public static void setup() {
     public static Collection<Object[]> versions() {
         return Arrays.asList(new Object[][] {
             {
-                "5.1.2",
+                "26999bd02c3b1613c3508373963334d698c37361",
                 DataSourceType.MYSQL
             }
         });

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/cache/TopNCacheReadCommand.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.skywalking.oap.server.core.analysis.manual.cache;
 
-import java.util.Objects;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
@@ -32,6 +31,8 @@
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 
+import java.util.Objects;
+
 /**
  * Database TopN statement, including Database SQL statement, mongoDB and Redis commands.
  */

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java
Patch:
@@ -38,6 +38,7 @@ public abstract class TopN extends Record implements ComparableStorageData {
     @Getter
     @Setter
     @Column(columnName = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)
+    @BanyanDB.IndexRule(indexType = BanyanDB.IndexRule.IndexType.TREE)
     private long latency;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TraceQueryService.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.LinkedList;
@@ -146,7 +147,7 @@ public Trace queryTrace(final String traceId) throws IOException {
 
         if (CollectionUtils.isNotEmpty(sortedSpans)) {
             final List<SpanAttachedEventRecord> spanAttachedEvents = getSpanAttachedEventQueryDAO().
-                querySpanAttachedEvents(SpanAttachedEventTraceType.SKYWALKING, traceId);
+                querySpanAttachedEvents(SpanAttachedEventTraceType.SKYWALKING, Arrays.asList(traceId));
             appendAttachedEventsToSpan(sortedSpans, spanAttachedEvents);
         }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ISpanAttachedEventQueryDAO.java
Patch:
@@ -26,5 +26,5 @@
 import java.util.List;
 
 public interface ISpanAttachedEventQueryDAO extends Service {
-    List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, String traceId) throws IOException;
+    List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds) throws IOException;
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/SpanAttachedEventEsDAO.java
Patch:
@@ -51,15 +51,15 @@ public SpanAttachedEventEsDAO(ElasticSearchClient client, StorageModuleElasticse
     }
 
     @Override
-    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, String traceId) throws IOException {
+    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds) throws IOException {
         final String index =
             IndexController.LogicIndicesRegister.getPhysicalTableName(SpanAttachedEventRecord.INDEX_NAME);
         final BoolQueryBuilder query = Query.bool();
         if (IndexController.LogicIndicesRegister.isMergedTable(SpanAttachedEventRecord.INDEX_NAME)) {
             query.must(Query.term(IndexController.LogicIndicesRegister.RECORD_TABLE_NAME, SpanAttachedEventRecord.INDEX_NAME));
         }
         final SearchBuilder search = Search.builder().query(query).size(scrollingBatchSize);
-        query.must(Query.terms(SpanAttachedEventRecord.RELATED_TRACE_ID, traceId));
+        query.must(Query.terms(SpanAttachedEventRecord.RELATED_TRACE_ID, traceIds));
         query.must(Query.terms(SpanAttachedEventRecord.TRACE_REF_TYPE, type.value()));
         search.sort(SpanAttachedEventRecord.START_TIME_SECOND, Sort.Order.ASC);
         search.sort(SpanAttachedEventRecord.START_TIME_NANOS, Sort.Order.ASC);

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/SpanAttachedEventQueryDAO.java
Patch:
@@ -27,7 +27,7 @@
 
 public class SpanAttachedEventQueryDAO implements ISpanAttachedEventQueryDAO {
     @Override
-    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, String traceId) throws IOException {
+    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds) throws IOException {
         return null;
     }
 }
\ No newline at end of file

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinLabeledFunction.java
Patch:
@@ -108,7 +108,7 @@ public Metrics toHour() {
         metrics.setEntityId(getEntityId());
         metrics.setTimeBucket(toTimeBucketInHour());
         metrics.setServiceId(getServiceId());
-        metrics.setTotal(getTotal());
+        metrics.getTotal().copyFrom(getTotal());
         return metrics;
     }
 
@@ -118,7 +118,7 @@ public Metrics toDay() {
         metrics.setEntityId(getEntityId());
         metrics.setTimeBucket(toTimeBucketInDay());
         metrics.setServiceId(getServiceId());
-        metrics.setTotal(getTotal());
+        metrics.getTotal().copyFrom(getTotal());
         return metrics;
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/EndpointNode.java
Patch:
@@ -29,8 +29,9 @@ public class EndpointNode {
     private String serviceId;
     private String serviceName;
     /**
-     * Not type for endpoint for now.
+     * @since 9.4.0 No type for endpoint node dependency
      */
+    @Deprecated
     private String type = "";
     private boolean isReal;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java
Patch:
@@ -21,6 +21,7 @@
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
+import org.apache.skywalking.oap.server.core.ComponentLibraryCatalogUtil;
 import org.apache.skywalking.oap.server.core.analysis.MetricsExtension;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
@@ -82,7 +83,7 @@ protected StorageID id0() {
     @Override
     public boolean combine(Metrics metrics) {
         final ProcessRelationClientSideMetrics processRelationClientSideMetrics = (ProcessRelationClientSideMetrics) metrics;
-        if (!ProcessNetworkRelationIDs.compare(this.componentId, processRelationClientSideMetrics.getComponentId())) {
+        if (!ComponentLibraryCatalogUtil.get().compare(this.componentId, processRelationClientSideMetrics.getComponentId())) {
             this.setComponentId(processRelationClientSideMetrics.getComponentId());
             return true;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java
Patch:
@@ -21,6 +21,7 @@
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
+import org.apache.skywalking.oap.server.core.ComponentLibraryCatalogUtil;
 import org.apache.skywalking.oap.server.core.analysis.MetricsExtension;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
@@ -80,7 +81,7 @@ protected StorageID id0() {
     @Override
     public boolean combine(Metrics metrics) {
         final ProcessRelationServerSideMetrics processRelationServerSideMetrics = (ProcessRelationServerSideMetrics) metrics;
-        if (!ProcessNetworkRelationIDs.compare(this.componentId, processRelationServerSideMetrics.getComponentId())) {
+        if (!ComponentLibraryCatalogUtil.get().compare(this.componentId, processRelationServerSideMetrics.getComponentId())) {
             this.setComponentId(processRelationServerSideMetrics.getComponentId());
             return true;
         }

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/Analyzer.java
Patch:
@@ -324,7 +324,7 @@ private void serviceRelationServerSide(MeterEntity entity) {
         metrics.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));
         metrics.setSourceServiceId(entity.sourceServiceId());
         metrics.setDestServiceId(entity.destServiceId());
-        metrics.setComponentId(0);
+        metrics.getComponentIds().add(0);
         metrics.setEntityId(entity.id());
         MetricsStreamProcessor.getInstance().in(metrics);
     }
@@ -334,7 +334,7 @@ private void serviceRelationClientSide(MeterEntity entity) {
         metrics.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));
         metrics.setSourceServiceId(entity.sourceServiceId());
         metrics.setDestServiceId(entity.destServiceId());
-        metrics.setComponentId(0);
+        metrics.getComponentIds().add(0);
         metrics.setEntityId(entity.id());
         MetricsStreamProcessor.getInstance().in(metrics);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceCallRelationDispatcher.java
Patch:
@@ -41,7 +41,7 @@ private void serverSide(ServiceRelation source) {
         metrics.setTimeBucket(source.getTimeBucket());
         metrics.setSourceServiceId(source.getSourceServiceId());
         metrics.setDestServiceId(source.getDestServiceId());
-        metrics.setComponentId(source.getComponentId());
+        metrics.getComponentIds().add(source.getComponentId());
         metrics.setEntityId(source.getEntityId());
         MetricsStreamProcessor.getInstance().in(metrics);
     }
@@ -51,7 +51,7 @@ private void clientSide(ServiceRelation source) {
         metrics.setTimeBucket(source.getTimeBucket());
         metrics.setSourceServiceId(source.getSourceServiceId());
         metrics.setDestServiceId(source.getDestServiceId());
-        metrics.setComponentId(source.getComponentId());
+        metrics.getComponentIds().add(source.getComponentId());
         metrics.setEntityId(source.getEntityId());
         MetricsStreamProcessor.getInstance().in(metrics);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/TCPServiceCallRelationDispatcher.java
Patch:
@@ -41,7 +41,7 @@ private void serverSide(TCPServiceRelation source) {
         metrics.setTimeBucket(source.getTimeBucket());
         metrics.setSourceServiceId(source.getSourceServiceId());
         metrics.setDestServiceId(source.getDestServiceId());
-        metrics.setComponentId(source.getComponentId());
+        metrics.getComponentIds().add(source.getComponentId());
         metrics.setEntityId(source.getEntityId());
         MetricsStreamProcessor.getInstance().in(metrics);
     }
@@ -51,7 +51,7 @@ private void clientSide(TCPServiceRelation source) {
         metrics.setTimeBucket(source.getTimeBucket());
         metrics.setSourceServiceId(source.getSourceServiceId());
         metrics.setDestServiceId(source.getDestServiceId());
-        metrics.setComponentId(source.getComponentId());
+        metrics.getComponentIds().add(source.getComponentId());
         metrics.setEntityId(source.getEntityId());
         MetricsStreamProcessor.getInstance().in(metrics);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/IntList.java
Patch:
@@ -77,8 +77,8 @@ public void copyFrom(final IntList source) {
         this.data.addAll(source.data);
     }
 
-    public void add(final int rank) {
-        this.data.add(rank);
+    public void add(final int value) {
+        this.data.add(value);
     }
 
     public int get(final int idx) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/ServiceTopologyBuilder.java
Patch:
@@ -108,6 +108,9 @@ Topology build(List<Call.CallDetail> serviceRelationClientCalls, List<Call.CallD
                 call.addDetectPoint(DetectPoint.CLIENT);
                 call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));
                 calls.add(call);
+            } else {
+                Call call = callMap.get(relationId);
+                call.addSourceComponent(componentLibraryCatalogService.getComponentName(clientCall.getComponentId()));
             }
         }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Call.java
Patch:
@@ -36,9 +36,6 @@ public class Call {
     private String id;
     private List<DetectPoint> detectPoints;
 
-    private List<Integer> sourceComponentIDs;
-    private List<Integer> targetComponentIDs;
-
     public Call() {
         sourceComponents = new ArrayList<>();
         targetComponents = new ArrayList<>();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ElasticSearchExtension.java
Patch:
@@ -38,6 +38,8 @@ public class ElasticSearchExtension {
 
     private final String columnAlias;
 
+    private final boolean isKeyword;
+
     public boolean needMatchQuery() {
         return analyzer != null;
     }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java
Patch:
@@ -302,7 +302,7 @@ protected Mappings createMapping(Model model) {
         Map<String, Object> properties = new HashMap<>();
         Mappings.Source source = new Mappings.Source();
         for (ModelColumn columnDefine : model.getColumns()) {
-            final String type = columnTypeEsMapping.transform(columnDefine.getType(), columnDefine.getGenericType());
+            final String type = columnTypeEsMapping.transform(columnDefine.getType(), columnDefine.getGenericType(), columnDefine.getElasticSearchExtension());
             String columnName = columnDefine.getColumnName().getName();
             String alias = columnDefine.getElasticSearchExtension().getColumnAlias();
             if (!config.isLogicSharding() && alias != null) {

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/registry/ProcessRegistry.java
Patch:
@@ -79,6 +79,6 @@ public static String generateVirtualProcess(String service, String instance, Str
         traffic.setTimeBucket(timeBucket);
         traffic.setLastPingTimestamp(timeBucket);
         MetricsStreamProcessor.getInstance().in(traffic);
-        return traffic.id();
+        return traffic.id().build();
     }
 }
\ No newline at end of file

File: oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/kafka/log/KafkaLogExporter.java
Patch:
@@ -101,7 +101,7 @@ public void consume(final List<LogRecord> data) {
                     LogData logData = transLogData(logRecord);
                     ProducerRecord<String, Bytes> record = new ProducerRecord<>(
                         setting.getKafkaTopicLog(),
-                        logRecord.id(),
+                        logRecord.id().build(),
                         Bytes.wrap(logData.toByteArray())
                     );
                     super.getProducer().send(record, (metadata, ex) -> {

File: oap-server/exporter/src/test/java/org/apache/skywalking/oap/server/exporter/provider/grpc/MockMetrics.java
Patch:
@@ -20,12 +20,13 @@
 
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 
 public class MockMetrics extends Metrics {
 
     @Override
-    protected String id0() {
-        return "mock-metrics";
+    protected StorageID id0() {
+        return new StorageID().append("", "mock-metrics");
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/data/LimitedSizeBufferedData.java
Patch:
@@ -24,13 +24,14 @@
 import java.util.List;
 import org.apache.skywalking.oap.server.core.storage.ComparableStorageData;
 import org.apache.skywalking.oap.server.core.storage.StorageData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 
 /**
  * LimitedSizeBufferedData is a thread no safe implementation of {@link BufferedData}. It collects limited records of
  * each {@link StorageData#id()}.
  */
 public class LimitedSizeBufferedData<STORAGE_DATA extends ComparableStorageData & StorageData> implements BufferedData<STORAGE_DATA> {
-    private final HashMap<String, LinkedList<STORAGE_DATA>> data;
+    private final HashMap<StorageID, LinkedList<STORAGE_DATA>> data;
     private final int limitedSize;
 
     public LimitedSizeBufferedData(int limitedSize) {
@@ -40,7 +41,7 @@ public LimitedSizeBufferedData(int limitedSize) {
 
     @Override
     public void accept(final STORAGE_DATA data) {
-        final String id = data.id();
+        final StorageID id = data.id();
         LinkedList<STORAGE_DATA> storageDataList = this.data.get(id);
         if (storageDataList == null) {
             storageDataList = new LinkedList<>();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/data/MergableBufferedData.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 
 /**
  * MergableBufferedData is a thread no safe implementation of {@link BufferedData}. {@link Metrics} in this cache would
@@ -31,7 +32,7 @@
  * Concurrency {@link #accept(Metrics)}s and {@link #read()} while {@link #accept(Metrics)} are both not recommended.
  */
 public class MergableBufferedData<METRICS extends Metrics> implements BufferedData<METRICS> {
-    private Map<String, METRICS> buffer;
+    private Map<StorageID, METRICS> buffer;
 
     public MergableBufferedData() {
         buffer = new HashMap<>();
@@ -46,7 +47,7 @@ public MergableBufferedData() {
      */
     @Override
     public void accept(final METRICS data) {
-        final String id = data.id();
+        final StorageID id = data.id();
         final METRICS existed = buffer.get(id);
         if (existed == null) {
             buffer.put(id, data);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/cache/TopNCacheReadCommand.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.oap.server.core.analysis.topn.TopN;
 import org.apache.skywalking.oap.server.core.analysis.worker.TopNStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
@@ -47,8 +48,8 @@ public class TopNCacheReadCommand extends TopN {
     private String command;
 
     @Override
-    public String id() {
-        return id;
+    public StorageID id() {
+        return new StorageID().appendMutant(null, id);
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/cache/TopNCacheWriteCommand.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.oap.server.core.analysis.topn.TopN;
 import org.apache.skywalking.oap.server.core.analysis.worker.TopNStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
@@ -48,8 +49,8 @@ public class TopNCacheWriteCommand extends TopN {
     private String command;
 
     @Override
-    public String id() {
-        return id;
+    public StorageID id() {
+        return new StorageID().appendMutant(null, id);
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/database/TopNDatabaseStatement.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.oap.server.core.analysis.topn.TopN;
 import org.apache.skywalking.oap.server.core.analysis.worker.TopNStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
@@ -47,8 +48,8 @@ public class TopNDatabaseStatement extends TopN {
     private String statement;
 
     @Override
-    public String id() {
-        return id;
+    public StorageID id() {
+        return new StorageID().appendMutant(null, id);
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/AbstractLogRecord.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.skywalking.oap.server.core.analysis.record.LongText;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.query.type.ContentType;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;
@@ -106,7 +107,7 @@ public abstract class AbstractLogRecord extends Record {
     private List<String> tagsInString;
 
     @Override
-    public String id() {
+    public StorageID id() {
         throw new UnexpectedException("AbstractLogRecord doesn't provide id()");
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/LogRecord.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
@@ -50,8 +51,8 @@ public class LogRecord extends AbstractLogRecord {
     private String uniqueId;
 
     @Override
-    public String id() {
-        return uniqueId;
+    public StorageID id() {
+        return new StorageID().append(UNIQUE_ID, uniqueId);
     }
 
     public static class Builder extends AbstractLogRecord.Builder<LogRecord> {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
@@ -106,8 +107,8 @@ public class SegmentRecord extends Record {
     private List<String> tags;
 
     @Override
-    public String id() {
-        return segmentId;
+    public StorageID id() {
+        return new StorageID().append(SEGMENT_ID, segmentId);
     }
 
     public static class Builder implements StorageBuilder<SegmentRecord> {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsAggregateWorker.java
Patch:
@@ -118,9 +118,6 @@ private void flush() {
         if (currentTime - lastSendTime > l1FlushPeriod) {
             mergeDataCache.read().forEach(
                 data -> {
-                    if (log.isDebugEnabled()) {
-                        log.debug(data.toString());
-                    }
                     nextWorker.in(data);
                 }
             );

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/errorlog/BrowserErrorLogRecord.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
@@ -50,8 +51,8 @@ public class BrowserErrorLogRecord extends Record {
     public static final String DATA_BINARY = "data_binary";
 
     @Override
-    public String id() {
-        return uniqueId;
+    public StorageID id() {
+        return new StorageID().append(UNIQUE_ID, uniqueId);
     }
 
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplate.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.oap.server.core.analysis.management.ManagementData;
 import org.apache.skywalking.oap.server.core.analysis.worker.ManagementStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -59,8 +60,8 @@ public class UITemplate extends ManagementData {
     private int disabled;
 
     @Override
-    public String id() {
-        return templateId;
+    public StorageID id() {
+        return new StorageID().append(TEMPLATE_ID, templateId);
     }
 
     public static class Builder implements StorageBuilder<UITemplate> {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskMutationService.java
Patch:
@@ -97,7 +97,7 @@ public ProfileTaskCreationResult createTask(final String serviceId,
         task.setTimeBucket(TimeBucket.getMinuteTimeBucket(taskStartTime));
         NoneStreamProcessor.getInstance().in(task);
 
-        return ProfileTaskCreationResult.builder().id(task.id()).build();
+        return ProfileTaskCreationResult.builder().id(task.id().build()).build();
     }
 
     private String checkDataSuccess(final String serviceId,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskRecord.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.oap.server.core.analysis.config.NoneStream;
 import org.apache.skywalking.oap.server.core.analysis.worker.NoneStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
@@ -54,8 +55,8 @@ public class ProfileTaskRecord extends NoneStream {
     public static final String MAX_SAMPLING_COUNT = "max_sampling_count";
 
     @Override
-    public String id() {
-        return taskId;
+    public StorageID id() {
+        return new StorageID().append(TASK_ID, taskId);
     }
 
     @Column(columnName = SERVICE_ID)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageData.java
Patch:
@@ -25,5 +25,5 @@ public interface StorageData {
     /**
      * @return the unique id used in any storage option.
      */
-    String id();
+    StorageID id();
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinServiceTraffic.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
@@ -53,8 +54,8 @@ public class ZipkinServiceTraffic extends Metrics {
     private String serviceName = Const.EMPTY_STRING;
 
     @Override
-    protected String id0() {
-        return serviceName;
+    protected StorageID id0() {
+        return new StorageID().append(SERVICE_NAME, serviceName);
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
@@ -167,8 +168,8 @@ public class ZipkinSpanRecord extends Record {
     private List<String> query;
 
     @Override
-    public String id() {
-        return traceId + Const.LINE + spanId;
+    public StorageID id() {
+        return new StorageID().append(TRACE_ID, traceId).append(SPAN_ID, spanId);
     }
 
     public static class Builder implements StorageBuilder<ZipkinSpanRecord> {

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/data/LimitedSizeBufferedDataTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.util.Objects;
 import org.apache.skywalking.oap.server.core.storage.ComparableStorageData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -63,8 +64,8 @@ public int compareTo(Object o) {
         }
 
         @Override
-        public String id() {
-            return "id";
+        public StorageID id() {
+            return new StorageID().append("ID", "id");
         }
 
         @Override

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetricsTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -104,7 +105,7 @@ public void testCombine() {
     public class ApdexMetricsImpl extends ApdexMetrics {
 
         @Override
-        protected String id0() {
+        protected StorageID id0() {
             return null;
         }
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/CountMetricsTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -56,7 +57,7 @@ public void testSelfCombine() {
 
     public class CountMetricsImpl extends CountMetrics {
         @Override
-        protected String id0() {
+        protected StorageID id0() {
             return null;
         }
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/HeatMapMetricsTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -88,7 +89,7 @@ public void testMerge() {
     public class HistogramMetricsMocker extends HistogramMetrics {
 
         @Override
-        protected String id0() {
+        protected StorageID id0() {
             return null;
         }
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetricsTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -52,7 +53,7 @@ public void testSelfCombine() {
     public class LongAvgMetricsImpl extends LongAvgMetrics {
 
         @Override
-        protected String id0() {
+        protected StorageID id0() {
             return null;
         }
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxLongMetricsTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -54,7 +55,7 @@ public void testSelfCombine() {
     public class MaxLongMetricsImpl extends MaxLongMetrics {
 
         @Override
-        protected String id0() {
+        protected StorageID id0() {
             return null;
         }
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/MetricsTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -73,7 +74,7 @@ public void testIllegalTransferToTimeBucket() {
     public class MetricsMocker extends Metrics {
 
         @Override
-        protected String id0() {
+        protected StorageID id0() {
             return null;
         }
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinLongMetricsTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -59,7 +60,7 @@ public void testSelfCombine() {
     public class MinLongMetricsImpl extends MinLongMetrics {
 
         @Override
-        protected String id0() {
+        protected StorageID id0() {
             return null;
         }
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentMetricsTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.metrics.expression.StringMatch;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -67,7 +68,7 @@ public void testSelfCombine() {
     public class PercentMetricsImpl extends PercentMetrics {
 
         @Override
-        protected String id0() {
+        protected StorageID id0() {
             return null;
         }
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetricsTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.StorageID;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -118,7 +119,7 @@ public void percentileTest4() {
     public class PercentileMetricsMocker extends PercentileMetrics {
 
         @Override
-        protected String id0() {
+        protected StorageID id0() {
             return null;
         }
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/NumberMatchTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.junit.Test;
 
-import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class NumberMatchTest {
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimerTest.java
Patch:
@@ -116,8 +116,8 @@ static class MockStorageData implements StorageData {
         private final String id;
 
         @Override
-        public String id() {
-            return id;
+        public StorageID id() {
+            return new StorageID().append("ID", id);
         }
 
     }

File: oap-server/server-library/library-datacarrier-queue/src/main/java/org/apache/skywalking/oap/server/library/datacarrier/consumer/BulkConsumePool.java
Patch:
@@ -36,7 +36,7 @@ public class BulkConsumePool implements ConsumerPool {
 
     public BulkConsumePool(String name, int size, long consumeCycle) {
         size = EnvUtil.getInt(name + "_THREAD", size);
-        allConsumers = new ArrayList<MultipleChannelsConsumer>(size);
+        allConsumers = new ArrayList<>(size);
         for (int i = 0; i < size; i++) {
             MultipleChannelsConsumer multipleChannelsConsumer = new MultipleChannelsConsumer("DataCarrier." + name + ".BulkConsumePool." + i + ".Thread", consumeCycle);
             multipleChannelsConsumer.setDaemon(true);

File: oap-server/server-library/library-datacarrier-queue/src/main/java/org/apache/skywalking/oap/server/library/datacarrier/consumer/MultipleChannelsConsumer.java
Patch:
@@ -95,7 +95,7 @@ private boolean consume(Group target, List consumeList) {
     public void addNewTarget(Channels channels, IConsumer consumer) {
         Group group = new Group(channels, consumer);
         // Recreate the new list to avoid change list while the list is used in consuming.
-        ArrayList<Group> newList = new ArrayList<Group>();
+        ArrayList<Group> newList = new ArrayList<>();
         for (Group target : consumeTargets) {
             newList.add(target);
         }

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBNoneStreamDAO.java
Patch:
@@ -47,7 +47,7 @@ public void insert(Model model, NoneStream noneStream) throws IOException {
         StreamWrite streamWrite = new StreamWrite(
             schema.getMetadata().getGroup(), // group name
             schema.getMetadata().name(), // stream-name
-            noneStream.id() // identity
+            noneStream.id().build() // identity
         ); // set timestamp inside `BanyanDBConverter.StreamToStorage`
         Convert2Storage<StreamWrite> convert2Storage = new BanyanDBConverter.StreamToStorage(schema, streamWrite);
         storageBuilder.entity2Storage(noneStream, convert2Storage);

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java
Patch:
@@ -62,7 +62,7 @@ public List<Metrics> multiGet(Model model, List<Metrics> metrics) throws IOExcep
             @Override
             protected void apply(MeasureQuery query) {
                 for (final Metrics missCachedMetric : metrics) {
-                    query.or(id(missCachedMetric.id()));
+                    query.or(id(missCachedMetric.id().build()));
                 }
             }
         });
@@ -89,7 +89,7 @@ public InsertRequest prepareBatchInsert(Model model, Metrics metrics, SessionCac
                 TimeBucket.getTimestamp(metrics.getTimeBucket(), model.getDownsampling())); // timestamp
         final BanyanDBConverter.MeasureToStorage toStorage = new BanyanDBConverter.MeasureToStorage(schema, measureWrite);
         storageBuilder.entity2Storage(metrics, toStorage);
-        toStorage.acceptID(metrics.id());
+        toStorage.acceptID(metrics.id().build());
         return new BanyanDBMeasureInsertRequest(toStorage.obtain(), callback);
     }
 
@@ -105,7 +105,7 @@ public UpdateRequest prepareBatchUpdate(Model model, Metrics metrics, SessionCac
                 TimeBucket.getTimestamp(metrics.getTimeBucket(), model.getDownsampling())); // timestamp
         final BanyanDBConverter.MeasureToStorage toStorage = new BanyanDBConverter.MeasureToStorage(schema, measureWrite);
         storageBuilder.entity2Storage(metrics, toStorage);
-        toStorage.acceptID(metrics.id());
+        toStorage.acceptID(metrics.id().build());
         return new BanyanDBMeasureUpdateRequest(toStorage.obtain());
     }
 }

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBRecordDAO.java
Patch:
@@ -44,7 +44,7 @@ public InsertRequest prepareBatchInsert(Model model, Record record) throws IOExc
         StreamWrite streamWrite = new StreamWrite(
             schema.getMetadata().getGroup(), // group name
             model.getName(), // index-name
-            record.id() // identity
+            record.id().build() // identity
         ); // set timestamp inside `BanyanDBConverter.StreamToStorage`
         Convert2Storage<StreamWrite> convert2Storage = new BanyanDBConverter.StreamToStorage(schema, streamWrite);
         storageBuilder.entity2Storage(record, convert2Storage);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ManagementEsDAO.java
Patch:
@@ -38,7 +38,7 @@ public ManagementEsDAO(ElasticSearchClient client,
     @Override
     public void insert(Model model, ManagementData managementData) throws IOException {
         String tableName = IndexController.INSTANCE.getTableName(model);
-        String docId = IndexController.INSTANCE.generateDocId(model, managementData.id());
+        String docId = IndexController.INSTANCE.generateDocId(model, managementData.id().build());
         final boolean exist = getClient().existDoc(tableName, docId);
         if (exist) {
             return;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/NoneStreamEsDAO.java
Patch:
@@ -45,7 +45,7 @@ public void insert(Model model, NoneStream noneStream) throws IOException {
         Map<String, Object> builder =
             IndexController.INSTANCE.appendTableColumn(model, toStorage.obtain());
         String modelName = TimeSeriesUtils.writeIndexName(model, noneStream.getTimeBucket());
-        String id = IndexController.INSTANCE.generateDocId(model, noneStream.id());
+        String id = IndexController.INSTANCE.generateDocId(model, noneStream.id().build());
         getClient().forceInsert(modelName, id, builder);
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/RecordEsDAO.java
Patch:
@@ -42,7 +42,7 @@ public InsertRequest prepareBatchInsert(Model model, Record record) throws IOExc
         storageBuilder.entity2Storage(record, toStorage);
         Map<String, Object> builder = IndexController.INSTANCE.appendTableColumn(model, toStorage.obtain());
         String modelName = TimeSeriesUtils.writeIndexName(model, record.getTimeBucket());
-        String id = IndexController.INSTANCE.generateDocId(model, record.id());
+        String id = IndexController.INSTANCE.generateDocId(model, record.id().build());
         return getClient().prepareInsert(modelName, id, builder);
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -228,7 +228,7 @@ public List<Endpoint> findEndpoint(String keyword, String serviceId, int limit)
                 new EndpointTraffic.Builder().storage2Entity(new ElasticSearchConverter.ToEntity(EndpointTraffic.INDEX_NAME, sourceAsMap));
 
             Endpoint endpoint = new Endpoint();
-            endpoint.setId(endpointTraffic.id());
+            endpoint.setId(endpointTraffic.id().build());
             endpoint.setName(endpointTraffic.getName());
             endpoints.add(endpoint);
         }
@@ -388,7 +388,7 @@ private List<ServiceInstance> buildInstances(SearchResponse response) {
                 new InstanceTraffic.Builder().storage2Entity(new ElasticSearchConverter.ToEntity(InstanceTraffic.INDEX_NAME, sourceAsMap));
 
             ServiceInstance serviceInstance = new ServiceInstance();
-            serviceInstance.setId(instanceTraffic.id());
+            serviceInstance.setId(instanceTraffic.id().build());
             serviceInstance.setName(instanceTraffic.getName());
             serviceInstance.setInstanceUUID(serviceInstance.getId());
 
@@ -420,7 +420,7 @@ private List<Process> buildProcesses(SearchResponse response) {
                 new ProcessTraffic.Builder().storage2Entity(new ElasticSearchConverter.ToEntity(ProcessTraffic.INDEX_NAME, sourceAsMap));
 
             Process process = new Process();
-            process.setId(processTraffic.id());
+            process.setId(processTraffic.id().build());
             process.setName(processTraffic.getName());
             final String serviceId = processTraffic.getServiceId();
             process.setServiceId(serviceId);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCManagementDAO.java
Patch:
@@ -42,7 +42,7 @@ public class JDBCManagementDAO extends JDBCSQLExecutor implements IManagementDAO
     @Override
     public void insert(Model model, ManagementData storageData) throws IOException {
         try (Connection connection = jdbcClient.getConnection()) {
-            final StorageData data = getByID(jdbcClient, model.getName(), storageData.id(), storageBuilder);
+            final StorageData data = getByID(jdbcClient, model.getName(), storageData.id().build(), storageBuilder);
             if (data != null) {
                 return;
             }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCMetricsDAO.java
Patch:
@@ -40,7 +40,7 @@ public class JDBCMetricsDAO extends JDBCSQLExecutor implements IMetricsDAO {
 
     @Override
     public List<Metrics> multiGet(Model model, List<Metrics> metrics) throws IOException {
-        String[] ids = metrics.stream().map(Metrics::id).collect(Collectors.toList()).toArray(new String[] {});
+        String[] ids = metrics.stream().map(m -> m.id().build()).collect(Collectors.toList()).toArray(new String[] {});
         List<StorageData> storageDataList = getByIDs(jdbcClient, model.getName(), ids, storageBuilder);
         List<Metrics> result = new ArrayList<>(storageDataList.size());
         for (StorageData storageData : storageDataList) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCSQLExecutor.java
Patch:
@@ -154,7 +154,7 @@ private <T extends StorageData> SQLExecutor buildInsertExecutor(String tableName
         SQLBuilder sqlBuilder = new SQLBuilder("INSERT INTO " + tableName + " VALUES");
         List<Object> param = new ArrayList<>();
         sqlBuilder.append("(?,");
-        param.add(metrics.id());
+        param.add(metrics.id().build());
         for (int i = 0; i < columns.size(); i++) {
             ModelColumn column = columns.get(i);
             sqlBuilder.append("?");
@@ -185,7 +185,7 @@ private <T extends StorageData> List<SQLExecutor> buildAdditionalInsertExecutor(
         SQLBuilder sqlBuilder = new SQLBuilder("INSERT INTO " + tableName + " VALUES");
         List<Object> param = new ArrayList<>();
         sqlBuilder.append("(?,");
-        param.add(metrics.id());
+        param.add(metrics.id().build());
         int position = 0;
         List valueList = new ArrayList();
         for (int i = 0; i < columns.size(); i++) {
@@ -257,7 +257,7 @@ protected <T extends StorageData> SQLExecutor getUpdateExecutor(String modelName
         }
         sqlBuilder.replace(sqlBuilder.length() - 1, sqlBuilder.length(), "");
         sqlBuilder.append(" WHERE id = ?");
-        param.add(metrics.id());
+        param.add(metrics.id().build());
 
         return new SQLExecutor(sqlBuilder.toString(), param, callback);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java
Patch:
@@ -320,7 +320,7 @@ private void loadFromStorage(List<Metrics> metrics) {
                            // This is a cache-DB inconsistent case:
                            // Metrics keep coming due to traffic, but the entity in the
                            // database has been removed due to TTL.
-                           if (!model.isTimeRelativeID() && supportUpdate) {
+                           if (!model.isTimeRelativeID()) {
                                // Mostly all updatable metadata level metrics are required to do this check.
 
                                if (metricsDAO.isExpiredCache(model, cachedValue, currentTimeMillis, metricsDataTTL)) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java
Patch:
@@ -80,7 +80,7 @@ protected String id0() {
     @Override
     public boolean combine(Metrics metrics) {
         final ProcessRelationClientSideMetrics processRelationClientSideMetrics = (ProcessRelationClientSideMetrics) metrics;
-        if (ProcessNetworkRelationIDs.compare(this.componentId, processRelationClientSideMetrics.getComponentId())) {
+        if (!ProcessNetworkRelationIDs.compare(this.componentId, processRelationClientSideMetrics.getComponentId())) {
             this.setComponentId(processRelationClientSideMetrics.getComponentId());
             return true;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java
Patch:
@@ -79,7 +79,7 @@ protected String id0() {
     @Override
     public boolean combine(Metrics metrics) {
         final ProcessRelationServerSideMetrics processRelationServerSideMetrics = (ProcessRelationServerSideMetrics) metrics;
-        if (ProcessNetworkRelationIDs.compare(this.componentId, processRelationServerSideMetrics.getComponentId())) {
+        if (!ProcessNetworkRelationIDs.compare(this.componentId, processRelationServerSideMetrics.getComponentId())) {
             this.setComponentId(processRelationServerSideMetrics.getComponentId());
             return true;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointRelationServerSideMetrics.java
Patch:
@@ -22,6 +22,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.Const;
+import org.apache.skywalking.oap.server.core.analysis.MetricsExtension;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
@@ -40,6 +41,7 @@
 
 @Stream(name = EndpointRelationServerSideMetrics.INDEX_NAME, scopeId = DefaultScopeDefine.ENDPOINT_RELATION,
     builder = EndpointRelationServerSideMetrics.Builder.class, processor = MetricsStreamProcessor.class)
+@MetricsExtension(supportDownSampling = true, supportUpdate = false, timeRelativeID = true)
 @EqualsAndHashCode(of = {
     "entityId"
 }, callSuper = true)

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/IndexStructuresTest.java
Patch:
@@ -74,6 +74,7 @@ public void resolveStructure() {
             "test", Mappings.builder()
                             .type(ElasticSearchClient.TYPE)
                             .properties(properties)
+                            .source(new Mappings.Source())
                             .build(), new HashMap<>());
         Mappings mapping = structures.getMapping("test");
         Assert.assertEquals(properties, mapping.getProperties());
@@ -84,6 +85,7 @@ public void resolveStructure() {
             "test", Mappings.builder()
                             .type(ElasticSearchClient.TYPE)
                             .properties(properties2)
+                            .source(new Mappings.Source())
                             .build(), new HashMap<>());
         mapping = structures.getMapping("test");
         HashMap<String, Object> res = new HashMap<>();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java
Patch:
@@ -53,9 +53,9 @@ public class SampledSlowTraceRecord extends Record {
     @Column(columnName = SCOPE)
     private int scope;
     @Column(columnName = ENTITY_ID)
-    private String entityId;
-    @Column(columnName = TRACE_ID)
     @BanyanDB.SeriesID(index = 0)
+    private String entityId;
+    @Column(columnName = TRACE_ID, storageOnly = true)
     private String traceId;
     @Column(columnName = URI, storageOnly = true)
     private String uri;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java
Patch:
@@ -54,9 +54,9 @@ public class SampledStatus4xxTraceRecord extends Record {
     @Column(columnName = SCOPE)
     private int scope;
     @Column(columnName = ENTITY_ID)
-    private String entityId;
-    @Column(columnName = TRACE_ID)
     @BanyanDB.SeriesID(index = 0)
+    private String entityId;
+    @Column(columnName = TRACE_ID, storageOnly = true)
     private String traceId;
     @Column(columnName = URI, storageOnly = true)
     private String uri;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java
Patch:
@@ -54,9 +54,9 @@ public class SampledStatus5xxTraceRecord extends Record {
     @Column(columnName = SCOPE)
     private int scope;
     @Column(columnName = ENTITY_ID)
-    private String entityId;
-    @Column(columnName = TRACE_ID)
     @BanyanDB.SeriesID(index = 0)
+    private String entityId;
+    @Column(columnName = TRACE_ID, storageOnly = true)
     private String traceId;
     @Column(columnName = URI, storageOnly = true)
     private String uri;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java
Patch:
@@ -41,7 +41,7 @@ public abstract class TopN extends Record implements ComparableStorageData {
     private long latency;
     @Getter
     @Setter
-    @Column(columnName = TRACE_ID)
+    @Column(columnName = TRACE_ID, storageOnly = true)
     private String traceId;
     @Getter
     @Setter

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/grpc/SpanAttachedEventReportServiceHandler.java
Patch:
@@ -53,13 +53,13 @@ public void onNext(SpanAttachedEvent event) {
                 record.setEndTimeSecond(event.getEndTime().getSeconds());
                 record.setEndTimeNanos(event.getEndTime().getNanos());
                 record.setTraceRefType(event.getTraceContext().getTypeValue());
-                record.setTraceId(event.getTraceContext().getTraceId());
+                record.setRelatedTraceId(event.getTraceContext().getTraceId());
                 record.setTraceSegmentId(event.getTraceContext().getTraceSegmentId());
                 record.setTraceSpanId(event.getTraceContext().getSpanId());
                 record.setDataBinary(event.toByteArray());
                 long timestamp = TimeUnit.SECONDS.toMillis(record.getStartTimeSecond())
                     + TimeUnit.NANOSECONDS.toMillis(record.getStartTimeNanos());
-                record.setTimeBucket(TimeBucket.getMinuteTimeBucket(timestamp));
+                record.setTimeBucket(TimeBucket.getRecordTimeBucket(timestamp));
                 record.setTimestamp(timestamp);
                 RecordStreamProcessor.getInstance().in(record);
             }

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBSpanAttachedEventQueryDAO.java
Patch:
@@ -41,7 +41,7 @@ public class BanyanDBSpanAttachedEventQueryDAO extends AbstractBanyanDBDAO imple
         SpanAttachedEventRecord.END_TIME_SECOND,
         SpanAttachedEventRecord.END_TIME_NANOS,
         SpanAttachedEventRecord.TRACE_REF_TYPE,
-        SpanAttachedEventRecord.TRACE_ID,
+        SpanAttachedEventRecord.RELATED_TRACE_ID,
         SpanAttachedEventRecord.TRACE_SEGMENT_ID,
         SpanAttachedEventRecord.TRACE_SPAN_ID,
         SpanAttachedEventRecord.DATA_BINARY);
@@ -55,7 +55,7 @@ public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTr
         final StreamQueryResponse resp = query(SpanAttachedEventRecord.INDEX_NAME, TAGS, new QueryBuilder<StreamQuery>() {
             @Override
             protected void apply(StreamQuery query) {
-                query.and(eq(SpanAttachedEventRecord.TRACE_ID, traceId));
+                query.and(eq(SpanAttachedEventRecord.RELATED_TRACE_ID, traceId));
                 query.and(eq(SpanAttachedEventRecord.TRACE_REF_TYPE, type.value()));
                 query.setOrderBy(new StreamQuery.OrderBy(SpanAttachedEventRecord.START_TIME_SECOND, AbstractQuery.Sort.ASC));
             }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/SpanAttachedEventEsDAO.java
Patch:
@@ -59,7 +59,7 @@ public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTr
             query.must(Query.term(IndexController.LogicIndicesRegister.RECORD_TABLE_NAME, SpanAttachedEventRecord.INDEX_NAME));
         }
         final SearchBuilder search = Search.builder().query(query).size(scrollingBatchSize);
-        query.must(Query.terms(SpanAttachedEventRecord.TRACE_ID, traceId));
+        query.must(Query.terms(SpanAttachedEventRecord.RELATED_TRACE_ID, traceId));
         query.must(Query.terms(SpanAttachedEventRecord.TRACE_REF_TYPE, type.value()));
         search.sort(SpanAttachedEventRecord.START_TIME_SECOND, Sort.Order.ASC);
         search.sort(SpanAttachedEventRecord.START_TIME_NANOS, Sort.Order.ASC);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCSpanAttachedEventQueryDAO.java
Patch:
@@ -42,7 +42,7 @@ public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTr
         StringBuilder sql = new StringBuilder("select * from " + SpanAttachedEventRecord.INDEX_NAME + " where ");
         List<Object> parameters = new ArrayList<>(2);
 
-        sql.append(" ").append(SpanAttachedEventRecord.TRACE_ID).append(" = ?");
+        sql.append(" ").append(SpanAttachedEventRecord.RELATED_TRACE_ID).append(" = ?");
         parameters.add(traceId);
         sql.append(" and ").append(SpanAttachedEventRecord.TRACE_REF_TYPE).append(" = ?");
         parameters.add(type.value());
@@ -62,7 +62,7 @@ public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTr
                     record.setEndTimeSecond(resultSet.getLong(SpanAttachedEventRecord.END_TIME_SECOND));
                     record.setEndTimeNanos(resultSet.getInt(SpanAttachedEventRecord.END_TIME_NANOS));
                     record.setTraceRefType(resultSet.getInt(SpanAttachedEventRecord.TRACE_REF_TYPE));
-                    record.setTraceId(resultSet.getString(SpanAttachedEventRecord.TRACE_ID));
+                    record.setRelatedTraceId(resultSet.getString(SpanAttachedEventRecord.RELATED_TRACE_ID));
                     record.setTraceSegmentId(resultSet.getString(SpanAttachedEventRecord.TRACE_SEGMENT_ID));
                     record.setTraceSpanId(resultSet.getString(SpanAttachedEventRecord.TRACE_SPAN_ID));
                     String dataBinaryBase64 = resultSet.getString(SpanAttachedEventRecord.DATA_BINARY);

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java
Patch:
@@ -268,12 +268,13 @@ private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompile
                 if (field.getType().equals(String.class)) {
                     columnAnnotation.addMemberValue("length", new IntegerMemberValue(constPool, field.getLength()));
                 }
+                annotationsAttribute.addAnnotation(columnAnnotation);
                 if (field.isID()) {
                     // Add shardingKeyIdx = 0 to column annotation.
                     Annotation banyanShardingKeyAnnotation = new Annotation(BanyanDB.ShardingKey.class.getName(), constPool);
                     banyanShardingKeyAnnotation.addMemberValue("index", new IntegerMemberValue(constPool, 0));
+                    annotationsAttribute.addAnnotation(banyanShardingKeyAnnotation);
                 }
-                annotationsAttribute.addAnnotation(columnAnnotation);
 
                 newField.getFieldInfo().addAttribute(annotationsAttribute);
             } catch (CannotCompileException e) {

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java
Patch:
@@ -53,7 +53,7 @@
 import com.google.gson.JsonObject;
 
 /**
- * TelemetryDataDispatcher processes the {@link ServiceMeshMetric} format telemetry data, transfers it to source
+ * TelemetryDataDispatcher processes the {@link ServiceMeshMetrics} format telemetry data, transfers it to source
  * dispatcher.
  */
 @Slf4j

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java
Patch:
@@ -40,4 +40,5 @@ public class Const {
     public static final String EMPTY_STRING = "";
     public static final String POINT = ".";
     public static final String DOUBLE_COLONS_SPLIT = "::";
+    public static final String BLANK_ENTITY_NAME = "_blank";
 }

File: oap-server/server-storage-plugin/storage-shardingsphere-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/shardingsphere/dao/ShardingTopologyQueryDAO.java
Patch:
@@ -35,7 +35,7 @@ public ShardingTopologyQueryDAO(JDBCHikariCPClient h2Client) {
     @Override
     public List<Call.CallDetail> loadServiceRelationsDetectedAtServerSide(Duration duration,
                                                                           List<String> serviceIds) throws IOException {
-        return super.loadServiceRelationsDetectedAtServerSide(DurationWithinTTL.INSTANCE.getMetricDurationWithinTTL(duration));
+        return super.loadServiceRelationsDetectedAtServerSide(DurationWithinTTL.INSTANCE.getMetricDurationWithinTTL(duration), serviceIds);
     }
 
     @Override

File: oap-server/server-storage-plugin/storage-shardingsphere-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/shardingsphere/DurationWithinTTLTest.java
Patch:
@@ -16,11 +16,10 @@
  *
  */
 
-package org.apache.skywalking.oap.server.storage.plugin.jdbc.shardingsphere.mysql;
+package org.apache.skywalking.oap.server.storage.plugin.jdbc.shardingsphere;
 
 import org.apache.skywalking.oap.server.core.config.ConfigService;
 import org.apache.skywalking.oap.server.core.query.enumeration.Step;
-import org.apache.skywalking.oap.server.storage.plugin.jdbc.shardingsphere.DurationWithinTTL;
 import org.joda.time.DateTime;
 import org.junit.Assert;
 import org.junit.Before;

File: oap-server/server-storage-plugin/storage-shardingsphere-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/shardingsphere/ShardingRulesTest.java
Patch:
@@ -16,13 +16,11 @@
  *
  */
 
-package org.apache.skywalking.oap.server.storage.plugin.jdbc.shardingsphere.mysql;
+package org.apache.skywalking.oap.server.storage.plugin.jdbc.shardingsphere;
 
 import java.util.Arrays;
 import java.util.HashSet;
 import org.apache.skywalking.oap.server.core.storage.ShardingAlgorithm;
-import org.apache.skywalking.oap.server.storage.plugin.jdbc.shardingsphere.ShardingRule;
-import org.apache.skywalking.oap.server.storage.plugin.jdbc.shardingsphere.ShardingRulesOperator;
 import org.joda.time.DateTime;
 import org.joda.time.format.DateTimeFormat;
 import org.junit.Assert;

File: oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/kafka/log/KafkaLogExporter.java
Patch:
@@ -142,15 +142,15 @@ private LogData transLogData(LogRecord logRecord) throws InvalidProtocolBufferEx
         switch (ContentType.instanceOf(logRecord.getContentType())) {
             case JSON:
                 bodyBuilder.setType(ContentType.JSON.name());
-                bodyBuilder.setJson(JSONLog.newBuilder().setJson(logRecord.getContent()));
+                bodyBuilder.setJson(JSONLog.newBuilder().setJson(logRecord.getContent().getText()));
                 break;
             case YAML:
                 bodyBuilder.setType(ContentType.YAML.name());
-                bodyBuilder.setYaml(YAMLLog.newBuilder().setYaml(logRecord.getContent()));
+                bodyBuilder.setYaml(YAMLLog.newBuilder().setYaml(logRecord.getContent().getText()));
                 break;
             case TEXT:
                 bodyBuilder.setType(ContentType.TEXT.name());
-                bodyBuilder.setText(TextLog.newBuilder().setText(logRecord.getContent()));
+                bodyBuilder.setText(TextLog.newBuilder().setText(logRecord.getContent().getText()));
                 break;
             case NONE:
                 bodyBuilder.setType(ContentType.NONE.name());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/AbstractLogRecord.java
Patch:
@@ -23,6 +23,7 @@
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.UnexpectedException;
 import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;
+import org.apache.skywalking.oap.server.core.analysis.record.LongText;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.query.type.ContentType;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
@@ -85,7 +86,7 @@ public abstract class AbstractLogRecord extends Record {
     @Getter
     @Column(columnName = CONTENT, length = 1_000_000)
     @ElasticSearch.MatchQuery(analyzer = ElasticSearch.MatchQuery.AnalyzerType.OAP_LOG_ANALYZER)
-    private String content;
+    private LongText content;
     @Setter
     @Getter
     @Column(columnName = TIMESTAMP)
@@ -118,7 +119,7 @@ protected void map2Data(T record, final Convert2Entity converter) {
             record.setTraceSegmentId((String) converter.get(TRACE_SEGMENT_ID));
             record.setSpanId(((Number) converter.get(SPAN_ID)).intValue());
             record.setContentType(((Number) converter.get(CONTENT_TYPE)).intValue());
-            record.setContent((String) converter.get(CONTENT));
+            record.setContent(new LongText((String) converter.get(CONTENT)));
             record.setTimestamp(((Number) converter.get(TIMESTAMP)).longValue());
             record.setTagsRawData(converter.getBytes(TAGS_RAW_DATA));
             record.setTimeBucket(((Number) converter.get(TIME_BUCKET)).longValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/LogRecordDispatcher.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;
+import org.apache.skywalking.oap.server.core.analysis.record.LongText;
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.Log;
 
@@ -37,7 +38,7 @@ public void dispatch(final Log source) {
         record.setTraceSegmentId(source.getTraceSegmentId());
         record.setSpanId(source.getSpanId());
         record.setContentType(source.getContentType().value());
-        record.setContent(source.getContent());
+        record.setContent(new LongText(source.getContent()));
         record.setTagsRawData(source.getTagsRawData());
         record.setTagsInString(Tag.Util.toStringList(source.getTags()));
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java
Patch:
@@ -64,9 +64,9 @@ public String id() {
 
     @Column(columnName = SCOPE)
     private int scope;
-    @Column(columnName = NAME, storageOnly = true)
+    @Column(columnName = NAME, storageOnly = true, length = 512)
     private String name;
-    @Column(columnName = ID0, storageOnly = true)
+    @Column(columnName = ID0, storageOnly = true, length = 512)
     @BanyanDB.ShardingKey(index = 0)
     private String id0;
     @Column(columnName = ID1, storageOnly = true)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/AbstractLogRecord.java
Patch:
@@ -55,12 +55,12 @@ public abstract class AbstractLogRecord extends Record {
     private String serviceId;
     @Setter
     @Getter
-    @Column(columnName = SERVICE_INSTANCE_ID)
+    @Column(columnName = SERVICE_INSTANCE_ID, length = 512)
     @BanyanDB.ShardingKey(index = 1)
     private String serviceInstanceId;
     @Setter
     @Getter
-    @Column(columnName = ENDPOINT_ID)
+    @Column(columnName = ENDPOINT_ID, length = 512)
     private String endpointId;
     @Setter
     @Getter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -74,12 +74,12 @@ public class SegmentRecord extends Record {
     private String serviceId;
     @Setter
     @Getter
-    @Column(columnName = SERVICE_INSTANCE_ID)
+    @Column(columnName = SERVICE_INSTANCE_ID, length = 512)
     @BanyanDB.ShardingKey(index = 1)
     private String serviceInstanceId;
     @Setter
     @Getter
-    @Column(columnName = ENDPOINT_ID)
+    @Column(columnName = ENDPOINT_ID, length = 512)
     private String endpointId;
     @Setter
     @Getter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java
Patch:
@@ -44,7 +44,7 @@ public abstract class TopN extends Record implements ComparableStorageData {
     private String traceId;
     @Getter
     @Setter
-    @Column(columnName = ENTITY_ID)
+    @Column(columnName = ENTITY_ID, length = 512)
     @BanyanDB.ShardingKey(index = 0)
     private String entityId;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/errorlog/BrowserErrorLogRecord.java
Patch:
@@ -66,12 +66,12 @@ public String id() {
 
     @Setter
     @Getter
-    @Column(columnName = SERVICE_VERSION_ID)
+    @Column(columnName = SERVICE_VERSION_ID, length = 512)
     private String serviceVersionId;
 
     @Setter
     @Getter
-    @Column(columnName = PAGE_PATH_ID)
+    @Column(columnName = PAGE_PATH_ID, length = 512)
     private String pagePathId;
 
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingTaskRecord.java
Patch:
@@ -62,7 +62,7 @@ public class EBPFProfilingTaskRecord extends NoneStream {
     private String serviceId;
     @Column(columnName = PROCESS_LABELS_JSON, length = PROCESS_LABELS_JSON_MAX_LENGTH)
     private String processLabelsJson;
-    @Column(columnName = INSTANCE_ID)
+    @Column(columnName = INSTANCE_ID, length = 512)
     private String instanceId;
     @Column(columnName = START_TIME)
     private long startTime;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskRecord.java
Patch:
@@ -60,7 +60,7 @@ public String id() {
     @Column(columnName = SERVICE_ID)
     @BanyanDB.ShardingKey(index = 0)
     private String serviceId;
-    @Column(columnName = ENDPOINT_NAME)
+    @Column(columnName = ENDPOINT_NAME, length = 512)
     private String endpointName;
     @Column(columnName = TASK_ID)
     private String taskId;

File: oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/K8sTagTest.java
Patch:
@@ -34,6 +34,7 @@
 import io.kubernetes.client.openapi.models.V1ServiceStatus;
 import lombok.SneakyThrows;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.skywalking.library.kubernetes.KubernetesClient;
 import org.apache.skywalking.library.kubernetes.KubernetesPods;
 import org.apache.skywalking.library.kubernetes.KubernetesServices;
 import org.apache.skywalking.library.kubernetes.ObjectID;
@@ -60,7 +61,7 @@
 @PowerMockIgnore({"javax.net.ssl.*", "javax.management.*"})
 @RunWith(PowerMockRunner.class)
 @PowerMockRunnerDelegate(Parameterized.class)
-@PrepareForTest({KubernetesPods.class, KubernetesServices.class})
+@PrepareForTest({KubernetesPods.class, KubernetesServices.class, KubernetesClient.class})
 public class K8sTagTest {
 
     @Parameterized.Parameter
@@ -257,8 +258,7 @@ public static Collection<Object[]> data() {
     @SneakyThrows
     @Before
     public void setup() {
-        PowerMockito.mockStatic(KubernetesServices.class);
-        PowerMockito.mockStatic(KubernetesPods.class);
+        PowerMockito.mockStatic(KubernetesClient.class);
 
         Whitebox.setInternalState(KubernetesServices.class, "INSTANCE",
                                   Mockito.mock(KubernetesServices.class)

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java
Patch:
@@ -77,7 +77,7 @@ protected void apply(MeasureQuery query) {
             return Collections.emptyList();
         }
 
-        MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(modelName);
+        MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(modelName, duration.getStep());
         if (schema == null) {
             throw new IOException("schema is not registered");
         }

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBNoneStreamDAO.java
Patch:
@@ -41,12 +41,12 @@ public BanyanDBNoneStreamDAO(BanyanDBStorageClient client, StorageBuilder<NoneSt
 
     @Override
     public void insert(Model model, NoneStream noneStream) throws IOException {
-        MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(model.getName());
+        MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findRecordMetadata(model.getName());
         if (schema == null) {
             throw new IOException(model.getName() + " is not registered");
         }
         StreamWrite streamWrite = new StreamWrite(schema.getMetadata().getGroup(), // group name
-                model.getName(), // index-name
+                schema.getMetadata().name(), // stream-name
                 noneStream.id(), // identity
                 TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())); // timestamp
         Convert2Storage<StreamWrite> convert2Storage = new BanyanDBConverter.StreamToStorage(schema, streamWrite);

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBRecordsQueryDAO.java
Patch:
@@ -71,7 +71,7 @@ protected void apply(MeasureQuery query) {
             return Collections.emptyList();
         }
 
-        MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(modelName);
+        MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findRecordMetadata(modelName);
         if (schema == null) {
             throw new IOException("schema is not registered");
         }

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageClient.java
Patch:
@@ -118,7 +118,7 @@ public MeasureQueryResponse query(MeasureQuery q) throws IOException {
 
     public void define(Property property) throws IOException {
         try {
-            this.client.save(property);
+            this.client.apply(property);
             this.healthChecker.health();
         } catch (BanyanDBException ex) {
             healthChecker.unHealth(ex);

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBRecordDAO.java
Patch:
@@ -38,7 +38,7 @@ public class BanyanDBRecordDAO implements IRecordDAO {
 
     @Override
     public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {
-        MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(model.getName());
+        MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(model);
         if (schema == null) {
             throw new IOException(model.getName() + " is not registered");
         }

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/client/IndexClient.java
Patch:
@@ -30,6 +30,7 @@
 import lombok.SneakyThrows;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.library.elasticsearch.ElasticSearchVersion;
+import org.apache.skywalking.library.elasticsearch.exception.ResponseException;
 import org.apache.skywalking.library.elasticsearch.response.Index;
 import org.apache.skywalking.library.elasticsearch.response.Mappings;
 
@@ -108,7 +109,7 @@ public boolean create(String name,
                     if (response.status() == HttpStatus.OK) {
                         return true;
                     }
-                    throw new RuntimeException(response.contentUtf8());
+                    throw new ResponseException(response.contentUtf8(), response.status().code());
                 }));
         future.whenComplete((result, exception) -> {
             if (exception != null) {

File: oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/ScopeTest.java
Patch:
@@ -205,7 +205,7 @@ public static Collection<Object[]> data() {
                 }
             },
             {
-                "sum_service_endpiont",
+                "sum_service_endpoint",
                 of("http_success_request", SampleFamilyBuilder.newBuilder(
                     Sample.builder().labels(of("idc", "t1")).value(50).name("http_success_request").build(),
                     Sample.builder()
@@ -250,7 +250,7 @@ public static Collection<Object[]> data() {
             },
 
             {
-                "sum_service_endpiont_labels",
+                "sum_service_endpoint_labels",
                 of("http_success_request", SampleFamilyBuilder.newBuilder(
                     Sample.builder().labels(of("idc", "t1")).value(50).name("http_success_request").build(),
                     Sample.builder()
@@ -317,7 +317,7 @@ public static Collection<Object[]> data() {
                 }
             },
             {
-                "sum_service_endpiont_labels_m",
+                "sum_service_endpoint_labels_m",
                 of("http_success_request", SampleFamilyBuilder.newBuilder(
                     Sample.builder().labels(of("idc", "t1")).value(50).name("http_success_request").build(),
                     Sample.builder()

File: oap-server/microbench/src/main/java/org/apache/skywalking/oap/server/microbench/core/profiling/ebpf/EBPFProfilingAnalyzerBenchmark.java
Patch:
@@ -138,8 +138,8 @@ public void analyze() {
         }
     }
 
-    private static int calculateStackCount(int stackReportPeriodSecond, int totalTimeMiniute, int combineInstanceCount) {
-        return (int) (TimeUnit.MINUTES.toSeconds(totalTimeMiniute) / stackReportPeriodSecond * combineInstanceCount);
+    private static int calculateStackCount(int stackReportPeriodSecond, int totalTimeMinute, int combineInstanceCount) {
+        return (int) (TimeUnit.MINUTES.toSeconds(totalTimeMinute) / stackReportPeriodSecond * combineInstanceCount);
     }
 
     @State(Scope.Benchmark)

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmCore.java
Patch:
@@ -72,7 +72,7 @@ public void start(List<AlarmCallback> allCallbacks) {
                 }));
                 // Set the last execute time, and make sure the second is `00`, such as: 18:30:00
                 if (hasExecute[0]) {
-                    lastExecuteTime = checkTime.minusSeconds(checkTime.getSecondOfMinute());
+                    lastExecuteTime = checkTime.withSecondOfMinute(0).withMillisOfSecond(0);
                 }
 
                 if (!alarmMessageList.isEmpty()) {

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java
Patch:
@@ -222,7 +222,9 @@ private boolean validate(String target, List<String> includeList, List<String> e
      * @param targetTime of moving target
      */
     public void moveTo(LocalDateTime targetTime) {
-        windows.values().forEach(window -> window.moveTo(targetTime));
+        // Truncate targetTime to minute, make sure the second is `00` and milliseconds is `00` such as: 18:30:00.000
+        final LocalDateTime target = targetTime.withSecondOfMinute(0).withMillisOfSecond(0);
+        windows.values().forEach(window -> window.moveTo(target));
     }
 
     /**

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/meter/process/MeterProcessor.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.skywalking.apm.network.language.agent.v3.MeterSingleValue;
 import org.apache.skywalking.oap.server.library.util.StringUtil;
 import org.apache.skywalking.oap.meter.analyzer.MetricConvert;
-import org.apache.skywalking.oap.meter.analyzer.dsl.HistogramType;
 import org.apache.skywalking.oap.meter.analyzer.dsl.Sample;
 import org.apache.skywalking.oap.meter.analyzer.dsl.SampleFamilyBuilder;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
@@ -137,7 +136,7 @@ public void process() {
                 Map.Entry::getKey,
                 v -> SampleFamilyBuilder.newBuilder(
                     v.getValue().stream().map(s -> s.build(service, serviceInstance, timestamp)).toArray(Sample[]::new)
-                ).histogramType(HistogramType.ORDINARY).defaultHistogramBucketUnit(TimeUnit.MILLISECONDS).build()
+                ).defaultHistogramBucketUnit(TimeUnit.MILLISECONDS).build()
             ))));
         } catch (Exception e) {
             log.warn("Process meters failure.", e);

File: oap-server/server-cluster-plugin/cluster-kubernetes-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/kubernetes/NamespacedPodListInformer.java
Patch:
@@ -85,7 +85,7 @@ private void doStartPodInformer(ClusterModuleKubernetesConfig podConfig) throws
         SharedIndexInformer<V1Pod> podSharedIndexInformer = factory.sharedIndexInformerFor(
             params -> coreV1Api.listNamespacedPodCall(
                 podConfig.getNamespace(), null, null, null, null,
-                podConfig.getLabelSelector(), Integer.MAX_VALUE, params.resourceVersion, null, params.timeoutSeconds,
+                podConfig.getLabelSelector(), Integer.MAX_VALUE, null, null, params.timeoutSeconds,
                 params.watch, null
             ),
             V1Pod.class, V1PodList.class

File: oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigurationConfigmapInformer.java
Patch:
@@ -76,7 +76,7 @@ private void doStartConfigMapInformer(final ConfigmapConfigurationSettings setti
         SharedIndexInformer<V1ConfigMap> configMapSharedIndexInformer = factory.sharedIndexInformerFor(
             params -> coreV1Api.listNamespacedConfigMapCall(
                 settings.getNamespace(), null, null, null, null, settings.getLabelSelector()
-                , 1, params.resourceVersion, null, params.timeoutSeconds, params.watch, null
+                , 1, null, null, params.timeoutSeconds, params.watch, null
             ),
             V1ConfigMap.class, V1ConfigMapList.class
         );

File: oap-server/server-library/library-kubernetes-support/src/main/java/org/apache/skywalking/library/kubernetes/KubernetesEndpointWatcher.java
Patch:
@@ -94,7 +94,7 @@ private void listenEndpointEvents(final CoreV1Api coreV1Api,
                 null,
                 null,
                 null,
-                params.resourceVersion,
+                null,
                 null,
                 params.timeoutSeconds,
                 params.watch,

File: oap-server/server-library/library-kubernetes-support/src/main/java/org/apache/skywalking/library/kubernetes/KubernetesNodeWatcher.java
Patch:
@@ -93,7 +93,7 @@ private void listenNodeEvents(final CoreV1Api coreV1Api,
                 null,
                 null,
                 null,
-                params.resourceVersion,
+                null,
                 null,
                 params.timeoutSeconds,
                 params.watch,

File: oap-server/server-library/library-kubernetes-support/src/main/java/org/apache/skywalking/library/kubernetes/KubernetesPodWatcher.java
Patch:
@@ -93,7 +93,7 @@ private void listenPodEvents(final CoreV1Api coreV1Api,
                 null,
                 null,
                 null,
-                params.resourceVersion,
+                null,
                 null,
                 params.timeoutSeconds,
                 params.watch,

File: oap-server/server-library/library-kubernetes-support/src/main/java/org/apache/skywalking/library/kubernetes/KubernetesServiceWatcher.java
Patch:
@@ -93,7 +93,7 @@ private void listenServiceEvents(final CoreV1Api coreV1Api,
                 null,
                 null,
                 null,
-                params.resourceVersion,
+                null,
                 null,
                 params.timeoutSeconds,
                 params.watch,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/HistogramFunction.java
Patch:
@@ -101,7 +101,7 @@ public Metrics toHour() {
         HistogramFunction metrics = (HistogramFunction) createNew();
         metrics.setEntityId(getEntityId());
         metrics.setTimeBucket(toTimeBucketInHour());
-        metrics.setDataset(getDataset());
+        metrics.getDataset().copyFrom(getDataset());
         return metrics;
     }
 
@@ -110,7 +110,7 @@ public Metrics toDay() {
         HistogramFunction metrics = (HistogramFunction) createNew();
         metrics.setEntityId(getEntityId());
         metrics.setTimeBucket(toTimeBucketInDay());
-        metrics.setDataset(getDataset());
+        metrics.getDataset().copyFrom(getDataset());
         return metrics;
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/cache/CacheSlowAccessDispatcher.java
Patch:
@@ -21,12 +21,12 @@
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.TopNStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.VirtualCacheOperation;
-import org.apache.skywalking.oap.server.core.source.VirtualCacheSlowAccess;
+import org.apache.skywalking.oap.server.core.source.CacheSlowAccess;
 
-public class CacheSlowAccessDispatcher implements SourceDispatcher<VirtualCacheSlowAccess> {
+public class CacheSlowAccessDispatcher implements SourceDispatcher<CacheSlowAccess> {
 
     @Override
-    public void dispatch(VirtualCacheSlowAccess source) {
+    public void dispatch(CacheSlowAccess source) {
         // There are only two kinds of Operation : write or read .Refer VirtualCacheProcessor#prepareVSIfNecessary
         if (source.getOperation() == VirtualCacheOperation.Read) {
             TopNCacheReadCommand readCommand = new TopNCacheReadCommand();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/CacheAccess.java
Patch:
@@ -25,9 +25,9 @@
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.CACHE_ACCESS;
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;
 
-@ScopeDeclaration(id = CACHE_ACCESS, name = "VirtualCacheAccess", catalog = SERVICE_CATALOG_NAME)
+@ScopeDeclaration(id = CACHE_ACCESS, name = "CacheAccess", catalog = SERVICE_CATALOG_NAME)
 @ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
-public class VirtualCacheAccess extends Source {
+public class CacheAccess extends Source {
 
     @Override
     public int scope() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/CacheSlowAccess.java
Patch:
@@ -26,7 +26,7 @@
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;
 
 @ScopeDeclaration(id = CACHE_SLOW_ACCESS, name = "VirtualCacheSlowAccess", catalog = SERVICE_CATALOG_NAME)
-public class VirtualCacheSlowAccess extends Source {
+public class CacheSlowAccess extends Source {
     @Getter
     @Setter
     private String id;

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/DBLatencyThresholdsAndWatcher.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Optional;
 import java.util.concurrent.atomic.AtomicReference;
 import org.apache.skywalking.oap.server.analyzer.module.AnalyzerModule;
 import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;
@@ -56,7 +57,7 @@ public int getThreshold(String type) {
         if (thresholds.get().containsKey(type)) {
             return thresholds.get().get(type);
         } else {
-            return thresholds.get().get("default");
+            return Optional.ofNullable(thresholds.get().get("default")).orElse(Integer.MAX_VALUE);
         }
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/database/TopNDatabaseStatement.java
Patch:
@@ -56,7 +56,7 @@ public boolean equals(Object o) {
         if (o == null || getClass() != o.getClass())
             return false;
         TopNDatabaseStatement statement = (TopNDatabaseStatement) o;
-        return getServiceId() == statement.getServiceId();
+        return Objects.equals(getServiceId(), statement.getServiceId());
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/management/ui/template/UITemplateInitializer.java
Patch:
@@ -54,6 +54,7 @@ public class UITemplateInitializer {
         Layer.BROWSER.name(),
         Layer.SO11Y_OAP.name(),
         Layer.VIRTUAL_DATABASE.name(),
+        Layer.VIRTUAL_CACHE.name(),
         Layer.K8S_SERVICE.name(),
         Layer.SO11Y_SATELLITE.name(),
         Layer.FAAS.name(),

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -106,6 +106,8 @@ public class DefaultScopeDefine {
     public static final int ZIPKIN_SERVICE_SPAN = 52;
     public static final int ZIPKIN_SERVICE_RELATION = 53;
     public static final int PROCESS_RELATION = 54;
+    public static final int CACHE_ACCESS = 55;
+    public static final int CACHE_SLOW_ACCESS = 56;
 
     /**
      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/DataTTLKeeperTimer.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.storage.ttl;
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
@@ -76,6 +77,8 @@ private void delete() {
         List<Model> models = modelGetter.allModels();
 
         List<RemoteInstance> remoteInstances = clusterNodesQuery.queryRemoteNodes();
+        // Sort the instances as same as RemoteClientManager#refresh did.
+        Collections.sort(remoteInstances);
         if (CollectionUtils.isNotEmpty(remoteInstances) && !remoteInstances.get(0).getAddress().isSelf()) {
             log.info(
                 "The selected first getAddress is {}. The remove stage is skipped.",

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java
Patch:
@@ -34,13 +34,14 @@
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
-
+import static org.apache.skywalking.oap.server.core.analysis.record.Record.TIME_BUCKET;
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ALARM;
 
 @Getter
 @Setter
 @ScopeDeclaration(id = ALARM, name = "Alarm")
 @Stream(name = AlarmRecord.INDEX_NAME, scopeId = DefaultScopeDefine.ALARM, builder = AlarmRecord.Builder.class, processor = RecordStreamProcessor.class)
+@SQLDatabase.ExtraColumn4AdditionalEntity(additionalTable = AlarmRecord.ADDITIONAL_TAG_TABLE, parentColumn = TIME_BUCKET)
 public class AlarmRecord extends Record {
 
     public static final String INDEX_NAME = "alarm_record";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/LogRecord.java
Patch:
@@ -23,12 +23,15 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;
 import org.apache.skywalking.oap.server.core.storage.annotation.SuperDataset;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
+import static org.apache.skywalking.oap.server.core.analysis.record.Record.TIME_BUCKET;
 
 @SuperDataset
 @Stream(name = LogRecord.INDEX_NAME, scopeId = DefaultScopeDefine.LOG, builder = LogRecord.Builder.class, processor = RecordStreamProcessor.class)
+@SQLDatabase.ExtraColumn4AdditionalEntity(additionalTable = AbstractLogRecord.ADDITIONAL_TAG_TABLE, parentColumn = TIME_BUCKET)
 public class LogRecord extends AbstractLogRecord {
 
     public static final String INDEX_NAME = "log";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -32,9 +32,11 @@
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
+import static org.apache.skywalking.oap.server.core.analysis.record.Record.TIME_BUCKET;
 
 @SuperDataset
 @Stream(name = SegmentRecord.INDEX_NAME, scopeId = DefaultScopeDefine.SEGMENT, builder = SegmentRecord.Builder.class, processor = RecordStreamProcessor.class)
+@SQLDatabase.ExtraColumn4AdditionalEntity(additionalTable = SegmentRecord.ADDITIONAL_TAG_TABLE, parentColumn = TIME_BUCKET)
 public class SegmentRecord extends Record {
 
     public static final String INDEX_NAME = "segment";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java
Patch:
@@ -37,9 +37,11 @@
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;
 import org.apache.skywalking.oap.server.library.util.StringUtil;
+import static org.apache.skywalking.oap.server.core.analysis.record.Record.TIME_BUCKET;
 
 @SuperDataset
 @Stream(name = ZipkinSpanRecord.INDEX_NAME, scopeId = DefaultScopeDefine.ZIPKIN_SPAN, builder = ZipkinSpanRecord.Builder.class, processor = RecordStreamProcessor.class)
+@SQLDatabase.ExtraColumn4AdditionalEntity(additionalTable = ZipkinSpanRecord.ADDITIONAL_QUERY_TABLE, parentColumn = TIME_BUCKET)
 public class ZipkinSpanRecord extends Record {
     private static final Gson GSON = new Gson();
     public static final String INDEX_NAME = "zipkin_span";

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java
Patch:
@@ -86,9 +86,9 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
             parameters.add(scopeId.intValue());
         }
         if (startTB != 0 && endTB != 0) {
-            sql.append(" and ").append(AlarmRecord.TIME_BUCKET).append(" >= ?");
+            sql.append(" and ").append(AlarmRecord.INDEX_NAME).append(".").append(AlarmRecord.TIME_BUCKET).append(" >= ?");
             parameters.add(startTB);
-            sql.append(" and ").append(AlarmRecord.TIME_BUCKET).append(" <= ?");
+            sql.append(" and ").append(AlarmRecord.INDEX_NAME).append(".").append(AlarmRecord.TIME_BUCKET).append(" <= ?");
             parameters.add(endTB);
         }
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2LogQueryDAO.java
Patch:
@@ -105,9 +105,9 @@ public Logs queryLogs(String serviceId,
         sql.append(" where ");
         sql.append(" 1=1 ");
         if (startSecondTB != 0 && endSecondTB != 0) {
-            sql.append(" and ").append(AbstractLogRecord.TIME_BUCKET).append(" >= ?");
+            sql.append(" and ").append(LogRecord.INDEX_NAME).append(".").append(AbstractLogRecord.TIME_BUCKET).append(" >= ?");
             parameters.add(startSecondTB);
-            sql.append(" and ").append(AbstractLogRecord.TIME_BUCKET).append(" <= ?");
+            sql.append(" and ").append(LogRecord.INDEX_NAME).append(".").append(AbstractLogRecord.TIME_BUCKET).append(" <= ?");
             parameters.add(endSecondTB);
         }
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java
Patch:
@@ -99,9 +99,9 @@ public TraceBrief queryBasicTraces(long startSecondTB,
         sql.append(" where ");
         sql.append(" 1=1 ");
         if (startSecondTB != 0 && endSecondTB != 0) {
-            sql.append(" and ").append(SegmentRecord.TIME_BUCKET).append(" >= ?");
+            sql.append(" and ").append(SegmentRecord.INDEX_NAME).append(".").append(SegmentRecord.TIME_BUCKET).append(" >= ?");
             parameters.add(startSecondTB);
-            sql.append(" and ").append(SegmentRecord.TIME_BUCKET).append(" <= ?");
+            sql.append(" and ").append(SegmentRecord.INDEX_NAME).append(".").append(SegmentRecord.TIME_BUCKET).append(" <= ?");
             parameters.add(endSecondTB);
         }
         if (minDuration != 0) {

File: oap-server/server-receiver-plugin/otel-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/otel/Handler.java
Patch:
@@ -54,7 +54,7 @@ static List<Handler> all() throws HandlerInitializationException {
 
     String type();
 
-    void active(List<String> enabledRules, MeterSystem service,
-        GRPCHandlerRegister grpcHandlerRegister) throws ModuleStartException;
-
+    void active(OtelMetricReceiverConfig config,
+                MeterSystem meterSystem,
+                GRPCHandlerRegister grpcHandlerRegister) throws ModuleStartException;
 }

File: oap-server/server-receiver-plugin/otel-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/otel/OtelMetricReceiverProvider.java
Patch:
@@ -68,7 +68,7 @@ public void start() throws ServiceNotProvidedException, ModuleStartException {
                 .filter(h -> config.getEnabledHandlers().contains(h.type()))
                 .collect(toList());
         for (Handler h : handlers) {
-            h.active(config.getEnabledRulesFrom(h.type()), meterSystem, grpcHandlerRegister);
+            h.active(config, meterSystem, grpcHandlerRegister);
         }
     }
 

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java
Patch:
@@ -210,7 +210,6 @@ public List<Process> listProcesses(String serviceId, ProfilingSupportStatus supp
                 protected void apply(MeasureQuery query) {
                     query.and(eq(ProcessTraffic.SERVICE_ID, serviceId));
                     query.and(gte(ProcessTraffic.LAST_PING_TIME_BUCKET, lastPingStartTimeBucket));
-                    query.and(lte(ProcessTraffic.LAST_PING_TIME_BUCKET, lastPingEndTimeBucket));
                     query.and(eq(ProcessTraffic.PROFILING_SUPPORT_STATUS, supportStatus.value()));
                     query.and(ne(ProcessTraffic.DETECT_TYPE, ProcessDetectType.VIRTUAL.value()));
                 }
@@ -235,7 +234,6 @@ public List<Process> listProcesses(String serviceInstanceId, long lastPingStartT
                 protected void apply(MeasureQuery query) {
                     query.and(eq(ProcessTraffic.INSTANCE_ID, serviceInstanceId));
                     query.and(gte(ProcessTraffic.LAST_PING_TIME_BUCKET, lastPingStartTimeBucket));
-                    query.and(lte(ProcessTraffic.LAST_PING_TIME_BUCKET, lastPingEndTimeBucket));
                     query.and(ne(ProcessTraffic.DETECT_TYPE, ProcessDetectType.VIRTUAL.value()));
                 }
             });
@@ -281,7 +279,6 @@ public long getProcessCount(String serviceId, ProfilingSupportStatus profilingSu
                 protected void apply(MeasureQuery query) {
                     query.and(eq(ProcessTraffic.SERVICE_ID, serviceId));
                     query.and(gte(ProcessTraffic.LAST_PING_TIME_BUCKET, lastPingStartTimeBucket));
-                    query.and(lte(ProcessTraffic.LAST_PING_TIME_BUCKET, lastPingEndTimeBucket));
                     query.and(eq(ProcessTraffic.PROFILING_SUPPORT_STATUS, profilingSupportStatus.value()));
                     query.and(ne(ProcessTraffic.DETECT_TYPE, ProcessDetectType.VIRTUAL.value()));
                 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -69,13 +69,15 @@ public class MetadataQueryEsDAO extends EsDAO implements IMetadataQueryDAO {
     private final int scrollingBatchSize;
     private String endpointTrafficNameAlias;
     private boolean aliasNameInit = false;
+    private final int layerSize;
 
     public MetadataQueryEsDAO(
         ElasticSearchClient client,
         StorageModuleElasticsearchConfig config) {
         super(client);
         this.queryMaxSize = config.getMetadataQueryMaxSize();
         this.scrollingBatchSize = config.getScrollingBatchSize();
+        this.layerSize = Layer.values().length;
     }
 
     @Override
@@ -136,7 +138,7 @@ public List<Service> getServices(final String serviceId) throws IOException {
         if (IndexController.LogicIndicesRegister.isPhysicalTable(ServiceTraffic.INDEX_NAME)) {
             query.must(Query.term(IndexController.LogicIndicesRegister.METRIC_TABLE_NAME, ServiceTraffic.INDEX_NAME));
         }
-        final SearchBuilder search = Search.builder().query(query).size(queryMaxSize);
+        final SearchBuilder search = Search.builder().query(query).size(layerSize);
 
         final SearchResponse response = getClient().search(index, search.build());
         return buildServices(response);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/endpoint/EndpointTraffic.java
Patch:
@@ -45,7 +45,7 @@ public class EndpointTraffic extends Metrics {
     public static final String INDEX_NAME = "endpoint_traffic";
 
     public static final String SERVICE_ID = "service_id";
-    public static final String NAME = "endpoint_traffic_name";
+    public static final String NAME = "name";
 
     @Setter
     @Getter
@@ -55,6 +55,7 @@ public class EndpointTraffic extends Metrics {
     @Getter
     @Column(columnName = NAME)
     @ElasticSearch.MatchQuery
+    @ElasticSearch.Column(columnAlias = "endpoint_traffic_name")
     private String name = Const.EMPTY_STRING;
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/instance/InstanceTraffic.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -48,7 +49,7 @@
 public class InstanceTraffic extends Metrics {
     public static final String INDEX_NAME = "instance_traffic";
     public static final String SERVICE_ID = "service_id";
-    public static final String NAME = "instance_traffic_name";
+    public static final String NAME = "name";
     public static final String LAST_PING_TIME_BUCKET = "last_ping";
     public static final String PROPERTIES = "properties";
 
@@ -62,6 +63,7 @@ public class InstanceTraffic extends Metrics {
     @Setter
     @Getter
     @Column(columnName = NAME, storageOnly = true)
+    @ElasticSearch.Column(columnAlias = "instance_traffic_name")
     private String name;
 
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/service/ServiceTraffic.java
Patch:
@@ -49,7 +49,7 @@
 public class ServiceTraffic extends Metrics {
     public static final String INDEX_NAME = "service_traffic";
 
-    public static final String NAME = "service_traffic_name";
+    public static final String NAME = "name";
 
     public static final String SHORT_NAME = "short_name";
 
@@ -63,6 +63,7 @@ public class ServiceTraffic extends Metrics {
     @Getter
     @Column(columnName = NAME)
     @ElasticSearch.MatchQuery
+    @ElasticSearch.Column(columnAlias = "service_traffic_name")
     private String name = Const.EMPTY_STRING;
 
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/PercentileFunction.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -52,7 +53,7 @@
 public abstract class PercentileFunction extends Meter implements AcceptableValue<PercentileFunction.PercentileArgument>, MultiIntValuesHolder {
     public static final String DATASET = "dataset";
     public static final String RANKS = "ranks";
-    public static final String VALUE = "datatable_value";
+    public static final String VALUE = "value";
 
     @Setter
     @Getter
@@ -62,6 +63,7 @@ public abstract class PercentileFunction extends Meter implements AcceptableValu
     @Getter
     @Setter
     @Column(columnName = VALUE, dataType = Column.ValueDataType.LABELED_VALUE, storageOnly = true)
+    @ElasticSearch.Column(columnAlias = "datatable_value")
     private DataTable percentileValues = new DataTable(10);
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetrics.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;
 import org.apache.skywalking.oap.server.core.query.sql.Function;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;
 
 /**
  * Apdex dissatisfaction levels of Tolerating (apdex_t) and Frustrated (apdex_f) indicate how slow site performance
@@ -44,7 +45,7 @@ public abstract class ApdexMetrics extends Metrics implements IntValueHolder {
     protected static final String S_NUM = "s_num";
     // Level: tolerated
     protected static final String T_NUM = "t_num";
-    protected static final String VALUE = "int_value";
+    protected static final String VALUE = "value";
 
     @Getter
     @Setter
@@ -61,6 +62,7 @@ public abstract class ApdexMetrics extends Metrics implements IntValueHolder {
     @Getter
     @Setter
     @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Avg)
+    @ElasticSearch.Column(columnAlias = "int_value")
     private int value;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;
 import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;
 
 /**
  * Percentile is a better implementation than deprecated PxxMetrics in older releases.
@@ -38,7 +39,7 @@
 @MetricsFunction(functionName = "percentile")
 public abstract class PercentileMetrics extends Metrics implements MultiIntValuesHolder {
     protected static final String DATASET = "dataset";
-    protected static final String VALUE = "datatable_value";
+    protected static final String VALUE = "value";
     protected static final String PRECISION = "precision";
 
     private static final int[] RANKS = {
@@ -52,6 +53,7 @@ public abstract class PercentileMetrics extends Metrics implements MultiIntValue
     @Getter
     @Setter
     @Column(columnName = VALUE, dataType = Column.ValueDataType.LABELED_VALUE, storageOnly = true)
+    @ElasticSearch.Column(columnAlias = "datatable_value")
     private DataTable percentileValues;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ElasticSearchExtension.java
Patch:
@@ -36,6 +36,8 @@ public class ElasticSearchExtension {
      */
     private final ElasticSearch.MatchQuery.AnalyzerType analyzer;
 
+    private final String columnAlias;
+
     public boolean needMatchQuery() {
         return analyzer != null;
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java
Patch:
@@ -162,8 +162,10 @@ private void retrieval(final Class<?> clazz,
                 // ElasticSearch extension
                 final ElasticSearch.MatchQuery elasticSearchAnalyzer = field.getAnnotation(
                     ElasticSearch.MatchQuery.class);
+                final ElasticSearch.Column elasticSearchColumn = field.getAnnotation(ElasticSearch.Column.class);
                 ElasticSearchExtension elasticSearchExtension = new ElasticSearchExtension(
-                    elasticSearchAnalyzer == null ? null : elasticSearchAnalyzer.analyzer()
+                    elasticSearchAnalyzer == null ? null : elasticSearchAnalyzer.analyzer(),
+                    elasticSearchColumn == null ? null : elasticSearchColumn.columnAlias()
                 );
 
                 // BanyanDB extension

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ManagementEsDAO.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.skywalking.oap.server.core.analysis.management.ManagementData;
 import org.apache.skywalking.oap.server.core.storage.IManagementDAO;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 
@@ -44,7 +43,7 @@ public void insert(Model model, ManagementData managementData) throws IOExceptio
         if (exist) {
             return;
         }
-        final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();
+        final ElasticSearchConverter.ToStorage toStorage = new ElasticSearchConverter.ToStorage(model.getName());
         storageBuilder.entity2Storage(managementData, toStorage);
         Map<String, Object> source =
             IndexController.INSTANCE.appendTableColumn(model, toStorage.obtain());

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/NoneStreamEsDAO.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.skywalking.oap.server.core.analysis.config.NoneStream;
 import org.apache.skywalking.oap.server.core.storage.INoneStreamDAO;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 
@@ -41,7 +40,7 @@ public NoneStreamEsDAO(ElasticSearchClient client,
 
     @Override
     public void insert(Model model, NoneStream noneStream) throws IOException {
-        final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();
+        final ElasticSearchConverter.ToStorage toStorage = new ElasticSearchConverter.ToStorage(model.getName());
         storageBuilder.entity2Storage(noneStream, toStorage);
         Map<String, Object> builder =
             IndexController.INSTANCE.appendTableColumn(model, toStorage.obtain());

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/RecordEsDAO.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.storage.IRecordDAO;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.library.client.request.InsertRequest;
@@ -39,7 +38,7 @@ public RecordEsDAO(ElasticSearchClient client,
 
     @Override
     public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {
-        final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();
+        final ElasticSearchConverter.ToStorage toStorage = new ElasticSearchConverter.ToStorage(model.getName());
         storageBuilder.entity2Storage(record, toStorage);
         Map<String, Object> builder = IndexController.INSTANCE.appendTableColumn(model, toStorage.obtain());
         String modelName = TimeSeriesUtils.writeIndexName(model, record.getTimeBucket());

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/NetworkAddressAliasEsDAO.java
Patch:
@@ -31,9 +31,9 @@
 import org.apache.skywalking.library.elasticsearch.response.search.SearchResponse;
 import org.apache.skywalking.oap.server.core.analysis.manual.networkalias.NetworkAddressAlias;
 import org.apache.skywalking.oap.server.core.storage.cache.INetworkAddressAliasDAO;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.StorageModuleElasticsearchConfig;
+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.ElasticSearchConverter;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.IndexController;
 
@@ -81,7 +81,7 @@ public List<NetworkAddressAlias> loadLastUpdate(long timeBucketInMinute) {
                     for (SearchHit searchHit : results.getHits()) {
                         networkAddressAliases.add(
                             builder.storage2Entity(
-                                new HashMapConverter.ToEntity(searchHit.getSource())));
+                                new ElasticSearchConverter.ToEntity(NetworkAddressAlias.INDEX_NAME, searchHit.getSource())));
                     }
                     if (results.getHits().getTotal() < batchSize) {
                         break;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java
Patch:
@@ -35,9 +35,9 @@
 import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;
 import org.apache.skywalking.oap.server.core.query.type.Alarms;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.ElasticSearchConverter;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.IndexController;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.MatchCNameBuilder;
@@ -88,7 +88,7 @@ public Alarms getAlarm(final Integer scopeId, final String keyword, final int li
 
         for (SearchHit searchHit : response.getHits().getHits()) {
             AlarmRecord.Builder builder = new AlarmRecord.Builder();
-            AlarmRecord alarmRecord = builder.storage2Entity(new HashMapConverter.ToEntity(searchHit.getSource()));
+            AlarmRecord alarmRecord = builder.storage2Entity(new ElasticSearchConverter.ToEntity(AlarmRecord.INDEX_NAME, searchHit.getSource()));
 
             AlarmMessage message = new AlarmMessage();
             message.setId(String.valueOf(alarmRecord.getId0()));

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/EBPFProfilingDataEsDAO.java
Patch:
@@ -27,9 +27,9 @@
 import org.apache.skywalking.library.elasticsearch.response.search.SearchResponse;
 import org.apache.skywalking.oap.server.core.profiling.ebpf.storage.EBPFProfilingDataRecord;
 import org.apache.skywalking.oap.server.core.storage.profiling.ebpf.IEBPFProfilingDataDAO;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.StorageModuleElasticsearchConfig;
+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.ElasticSearchConverter;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.IndexController;
 
@@ -91,7 +91,7 @@ private List<EBPFProfilingDataRecord> buildDataList(SearchResponse response) {
         for (SearchHit hit : response.getHits()) {
             final Map<String, Object> sourceAsMap = hit.getSource();
             final EBPFProfilingDataRecord.Builder builder = new EBPFProfilingDataRecord.Builder();
-            records.add(builder.storage2Entity(new HashMapConverter.ToEntity(sourceAsMap)));
+            records.add(builder.storage2Entity(new ElasticSearchConverter.ToEntity(EBPFProfilingDataRecord.INDEX_NAME, sourceAsMap)));
         }
         return records;
     }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/EBPFProfilingTaskEsDAO.java
Patch:
@@ -32,11 +32,11 @@
 import org.apache.skywalking.oap.server.core.profiling.ebpf.storage.EBPFProfilingTriggerType;
 import org.apache.skywalking.oap.server.core.query.type.EBPFProfilingTask;
 import org.apache.skywalking.oap.server.core.storage.profiling.ebpf.IEBPFProfilingTaskDAO;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
 import org.apache.skywalking.oap.server.library.util.StringUtil;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.StorageModuleElasticsearchConfig;
+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.ElasticSearchConverter;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.IndexController;
 
@@ -138,7 +138,7 @@ public EBPFProfilingTask queryById(String id) throws IOException {
     private EBPFProfilingTask parseTask(final SearchHit hit) {
         final Map<String, Object> sourceAsMap = hit.getSource();
         final EBPFProfilingTaskRecord.Builder builder = new EBPFProfilingTaskRecord.Builder();
-        final EBPFProfilingTaskRecord record = builder.storage2Entity(new HashMapConverter.ToEntity(sourceAsMap));
+        final EBPFProfilingTaskRecord record = builder.storage2Entity(new ElasticSearchConverter.ToEntity(EBPFProfilingTaskRecord.INDEX_NAME, sourceAsMap));
 
         final EBPFProfilingTask task = new EBPFProfilingTask();
         task.setTaskId(record.getLogicalId());
@@ -161,4 +161,4 @@ private EBPFProfilingTask parseTask(final SearchHit hit) {
         task.setLastUpdateTime(record.getLastUpdateTime());
         return task;
     }
-}
\ No newline at end of file
+}

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileThreadSnapshotQueryEsDAO.java
Patch:
@@ -39,10 +39,10 @@
 import org.apache.skywalking.oap.server.core.profiling.trace.ProfileThreadSnapshotRecord;
 import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
 import org.apache.skywalking.oap.server.core.storage.profiling.trace.IProfileThreadSnapshotQueryDAO;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.ElasticSearchConverter;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.IndexController;
 
@@ -170,7 +170,7 @@ public List<ProfileThreadSnapshotRecord> queryRecords(String segmentId,
         List<ProfileThreadSnapshotRecord> result = new ArrayList<>(maxSequence - minSequence);
         for (SearchHit searchHit : response.getHits().getHits()) {
             ProfileThreadSnapshotRecord record = builder.storage2Entity(
-                new HashMapConverter.ToEntity(searchHit.getSource()));
+                new ElasticSearchConverter.ToEntity(ProfileThreadSnapshotRecord.INDEX_NAME, searchHit.getSource()));
 
             result.add(record);
         }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TagAutoCompleteQueryDAO.java
Patch:
@@ -33,9 +33,9 @@
 import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.TagAutocompleteData;
 import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.TagType;
 import org.apache.skywalking.oap.server.core.storage.query.ITagAutoCompleteQueryDAO;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.library.util.StringUtil;
+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.ElasticSearchConverter;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.IndexController;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.TimeRangeIndexNameGenerator;
@@ -103,7 +103,7 @@ public Set<String> queryTagAutocompleteValues(final TagType tagType, final Strin
         Set<String> tagValues = new HashSet<>();
         for (SearchHit searchHit : response.getHits().getHits()) {
             TagAutocompleteData tag = new TagAutocompleteData.Builder().storage2Entity(
-                new HashMapConverter.ToEntity(searchHit.getSource()));
+                new ElasticSearchConverter.ToEntity(TagAutocompleteData.INDEX_NAME, searchHit.getSource()));
             tagValues.add(tag.getTagValue());
         }
         return tagValues;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java
Patch:
@@ -40,11 +40,11 @@
 import org.apache.skywalking.oap.server.core.query.type.TraceBrief;
 import org.apache.skywalking.oap.server.core.query.type.TraceState;
 import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;
-import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
 import org.apache.skywalking.oap.server.library.util.StringUtil;
+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.ElasticSearchConverter;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.IndexController;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.TimeRangeIndexNameGenerator;
@@ -174,7 +174,7 @@ public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {
         List<SegmentRecord> segmentRecords = new ArrayList<>();
         for (SearchHit searchHit : response.getHits().getHits()) {
             SegmentRecord segmentRecord = new SegmentRecord.Builder().storage2Entity(
-                new HashMapConverter.ToEntity(searchHit.getSource()));
+                new ElasticSearchConverter.ToEntity(SegmentRecord.INDEX_NAME, searchHit.getSource()));
             segmentRecords.add(segmentRecord);
         }
         return segmentRecords;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimer.java
Patch:
@@ -136,8 +136,9 @@ private CompletableFuture<Void> extractDataAndSave(IBatchDAO batchDAO) {
                             .whenComplete(($1, $2) -> executeLatencyTimer.close());
                 }, prepareExecutorService);
             }).toArray(CompletableFuture[]::new));
-        batchDAO.endOfFlush();
+
         future.whenComplete((unused, throwable) -> {
+            batchDAO.endOfFlush();
             allTimer.close();
             if (log.isDebugEnabled()) {
                 log.debug(

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimer.java
Patch:
@@ -136,6 +136,7 @@ private CompletableFuture<Void> extractDataAndSave(IBatchDAO batchDAO) {
                             .whenComplete(($1, $2) -> executeLatencyTimer.close());
                 }, prepareExecutorService);
             }).toArray(CompletableFuture[]::new));
+        batchDAO.endOfFlush();
         future.whenComplete((unused, throwable) -> {
             allTimer.close();
             if (log.isDebugEnabled()) {

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/bulk/BulkProcessor.java
Patch:
@@ -101,7 +101,7 @@ private void flushIfNeeded() {
         }
     }
 
-    void flush() {
+    public void flush() {
         if (requests.isEmpty()) {
             return;
         }

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/RPCAnalysisListener.java
Patch:
@@ -395,7 +395,7 @@ protected Layer identifyRemoteServiceLayer(SpanLayer spanLayer, String peer) {
             case MQ:
                 return Layer.VIRTUAL_MQ;
             case Cache:
-                return Layer.CACHE;
+                return Layer.VIRTUAL_CACHE;
             case UNRECOGNIZED:
                 return Layer.UNDEFINED;
             case FAAS:

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/registry/ProcessRegistry.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.skywalking.oap.meter.analyzer.k8s.K8sInfoRegistry;
+import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.analysis.DownSampling;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;
 import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
@@ -71,6 +72,8 @@ private static String generateVirtualProcess(String service, String instance, St
         traffic.setServiceId(serviceId);
         traffic.setInstanceId(IDManager.ServiceInstanceID.buildId(serviceId, instance));
         traffic.setName(processName);
+        traffic.setAgentId(Const.EMPTY_STRING);
+        traffic.setLabelsJson(Const.EMPTY_STRING);
         traffic.setDetectType(ProcessDetectType.VIRTUAL.value());
         traffic.setTimeBucket(TimeBucket.getTimeBucket(System.currentTimeMillis(), DownSampling.Minute));
         MetricsStreamProcessor.getInstance().in(traffic);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java
Patch:
@@ -96,6 +96,7 @@ public void deserialize(RemoteData remoteData) {
         setSourceProcessId(remoteData.getDataStrings(1));
         setDestProcessId(remoteData.getDataStrings(2));
         setEntityId(remoteData.getDataStrings(3));
+        setTimeBucket(remoteData.getDataLongs(0));
     }
 
     @Override
@@ -105,6 +106,7 @@ public RemoteData.Builder serialize() {
         builder.addDataStrings(getSourceProcessId());
         builder.addDataStrings(getDestProcessId());
         builder.addDataStrings(getEntityId());
+        builder.addDataLongs(getTimeBucket());
         return builder;
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java
Patch:
@@ -96,6 +96,7 @@ public void deserialize(RemoteData remoteData) {
         setSourceProcessId(remoteData.getDataStrings(1));
         setDestProcessId(remoteData.getDataStrings(2));
         setEntityId(remoteData.getDataStrings(3));
+        setTimeBucket(remoteData.getDataLongs(0));
     }
 
     @Override
@@ -105,6 +106,7 @@ public RemoteData.Builder serialize() {
         builder.addDataStrings(getSourceProcessId());
         builder.addDataStrings(getDestProcessId());
         builder.addDataStrings(getEntityId());
+        builder.addDataLongs(getTimeBucket());
         return builder;
     }
 

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/meter/config/MeterConfig.java
Patch:
@@ -29,8 +29,10 @@
 public class MeterConfig implements MetricRuleConfig {
     private String metricPrefix;
     private String expSuffix;
+    private String expPrefix;
     private String filter;
     private List<Rule> metricsRules;
+    private String initExp;
 
     @Data
     @NoArgsConstructor

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/prometheus/rule/Rule.java
Patch:
@@ -37,6 +37,8 @@ public class Rule implements MetricRuleConfig {
     private StaticConfig staticConfig;
     private String metricPrefix;
     private String expSuffix;
+    private String expPrefix;
     private String filter;
+    private String initExp;
     private List<MetricsRule> metricsRules;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/ScopeType.java
Patch:
@@ -25,7 +25,8 @@ public enum ScopeType {
     SERVICE(DefaultScopeDefine.SERVICE),
     SERVICE_INSTANCE(DefaultScopeDefine.SERVICE_INSTANCE),
     ENDPOINT(DefaultScopeDefine.ENDPOINT),
-    SERVICE_RELATION(DefaultScopeDefine.SERVICE_RELATION);
+    SERVICE_RELATION(DefaultScopeDefine.SERVICE_RELATION),
+    PROCESS_RELATION(DefaultScopeDefine.PROCESS_RELATION);
 
     @Getter
     private final int scopeId;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -105,6 +105,7 @@ public class DefaultScopeDefine {
     public static final int ZIPKIN_SERVICE = 51;
     public static final int ZIPKIN_SERVICE_SPAN = 52;
     public static final int ZIPKIN_SERVICE_RELATION = 53;
+    public static final int PROCESS_RELATION = 54;
 
     /**
      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.
@@ -116,6 +117,7 @@ public class DefaultScopeDefine {
     public static final String SERVICE_INSTANCE_RELATION_CATALOG_NAME = "SERVICE_INSTANCE_RELATION";
     public static final String ENDPOINT_RELATION_CATALOG_NAME = "ENDPOINT_RELATION";
     public static final String PROCESS_CATALOG_NAME = "PROCESS";
+    public static final String PROCESS_RELATION_CATALOG_NAME = "PROCESS_RELATION";
 
     private static final Map<Integer, Boolean> SERVICE_CATALOG = new HashMap<>();
     private static final Map<Integer, Boolean> SERVICE_INSTANCE_CATALOG = new HashMap<>();

File: oap-server/server-receiver-plugin/skywalking-zabbix-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zabbix/provider/config/ZabbixConfig.java
Patch:
@@ -28,7 +28,9 @@ public class ZabbixConfig implements MetricRuleConfig {
 
     private String metricPrefix;
     private String expSuffix;
+    private String expPrefix;
     private String filter;
+    private String initExp;
     private Entities entities;
     private List<String> requiredZabbixItemKeys;
     private List<Metric> metrics;

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/EndpointDepFromCrossThreadAnalysisListener.java
Patch:
@@ -93,6 +93,7 @@ private void parseRefForEndpointDependency(final SpanObject span, final SegmentO
                     } else {
                         sourceBuilder.setSourceLayer(Layer.VIRTUAL_GATEWAY);
                     }
+                    sourceBuilder.setSourceEndpointOwnerServiceLayer(Layer.GENERAL);
                 } else {
                     sourceBuilder.setSourceServiceName(reference.getParentService());
                     sourceBuilder.setSourceServiceInstanceName(reference.getParentServiceInstance());

File: oap-server/server-query-plugin/zipkin-query-plugin/src/main/java/org/apache/skywalking/oap/query/zipkin/handler/ZipkinQueryHandler.java
Patch:
@@ -29,6 +29,7 @@
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
 import com.linecorp.armeria.server.annotation.Blocking;
 import com.linecorp.armeria.server.annotation.Default;
+import com.linecorp.armeria.server.annotation.ExceptionHandler;
 import com.linecorp.armeria.server.annotation.Get;
 import com.linecorp.armeria.server.annotation.Param;
 import java.io.IOException;
@@ -63,6 +64,7 @@
 /**
  * Reference from zipkin2.server.internal.ZipkinQueryApiV2 for the API consistent.
  */
+@ExceptionHandler(ZipkinQueryExceptionHandler.class)
 public class ZipkinQueryHandler {
     private final ZipkinQueryConfig config;
     private final ModuleManager moduleManager;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Entity.java
Patch:
@@ -36,7 +36,7 @@ public class Entity {
     /**
      * <pre>
      * 1. scope=All, no name is required.
-     * 2. scope=Service, ServiceInstance and Endpoint, set neccessary serviceName/serviceInstanceName/endpointName
+     * 2. scope=Service, ServiceInstance and Endpoint, set necessary serviceName/serviceInstanceName/endpointName
      * 3. Scope=ServiceRelation, ServiceInstanceRelation and EndpointRelation
      *    serviceName/serviceInstanceName/endpointName is/are the source(s)
      *    estServiceName/destServiceInstanceName/destEndpointName is/are destination(s)

File: oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java
Patch:
@@ -226,6 +226,7 @@ protected void apply(MeasureQuery query) {
                         if (profilingSupportStatus != null) {
                             query.and(eq(ProcessTraffic.PROFILING_SUPPORT_STATUS, profilingSupportStatus.value()));
                         }
+                        query.and(ne(ProcessTraffic.DETECT_TYPE, ProcessDetectType.VIRTUAL.value()));
                     }
                 });
 
@@ -264,6 +265,7 @@ protected void apply(MeasureQuery query) {
                         if (profilingSupportStatus != null) {
                             query.and(eq(ProcessTraffic.PROFILING_SUPPORT_STATUS, profilingSupportStatus.value()));
                         }
+                        query.and(ne(ProcessTraffic.DETECT_TYPE, ProcessDetectType.VIRTUAL.value()));
                     }
                 });
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -244,8 +244,8 @@ public long getProcessesCount(String serviceId, String instanceId, String agentI
     }
 
     private void appendProcessWhereQuery(BoolQueryBuilder query, String serviceId, String instanceId, String agentId,
-                                         final ProfilingSupportStatus profilingSupportStatus, final long lastPingStartTimeBucket,
-                                         final long lastPingEndTimeBucket) {
+                                         final ProfilingSupportStatus profilingSupportStatus,
+                                         final long lastPingStartTimeBucket, final long lastPingEndTimeBucket) {
         if (StringUtil.isNotEmpty(serviceId)) {
             query.must(Query.term(ProcessTraffic.SERVICE_ID, serviceId));
         }
@@ -268,6 +268,7 @@ private void appendProcessWhereQuery(BoolQueryBuilder query, String serviceId, S
         if (lastPingStartTimeBucket > 0 || lastPingEndTimeBucket > 0) {
             query.must(rangeQuery);
         }
+        query.mustNot(Query.term(ProcessTraffic.DETECT_TYPE, ProcessDetectType.VIRTUAL.value()));
     }
 
     @Override

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/FieldsHelper.java
Patch:
@@ -168,6 +168,7 @@ public void inflate(final Struct metadata, final ServiceMetaInfo serviceMetaInfo
                         continue;
                     }
                     values[i] = value.getStringValue();
+                    break;
                 }
             }
             final String value = Strings.lenientFormat(serviceNameFormat.format, values);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java
Patch:
@@ -87,8 +87,6 @@ static String writeIndexName(Model model, long timeBucket) {
         String tableName = IndexController.INSTANCE.getTableName(model);
         if (model.isRecord() && model.isSuperDataset()) {
             return tableName + Const.LINE + compressTimeBucket(timeBucket / 1000000, SUPER_DATASET_DAY_STEP);
-        } else if (model.isRecord()) {
-            return tableName + Const.LINE + compressTimeBucket(timeBucket / 1000000, DAY_STEP);
         } else {
             switch (model.getDownsampling()) {
                 case None:

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtilsTest.java
Patch:
@@ -38,10 +38,10 @@ public class TimeSeriesUtilsTest {
     @Before
     public void prepare() {
         superDatasetModel = new Model("superDatasetModel", Lists.newArrayList(),
-                                      0, DownSampling.Minute, true, true, "", true, new SQLDatabaseModelExtension()
+                                      0, DownSampling.Second, true, true, "", true, new SQLDatabaseModelExtension()
         );
         normalRecordModel = new Model("normalRecordModel", Lists.newArrayList(),
-                                      0, DownSampling.Minute, true, false, "", true, new SQLDatabaseModelExtension()
+                                      0, DownSampling.Second, true, false, "", true, new SQLDatabaseModelExtension()
         );
         normalMetricsModel = new Model("normalMetricsModel", Lists.newArrayList(),
                                        0, DownSampling.Minute, false, false, "", true, new SQLDatabaseModelExtension()

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/analyze/EBPFProfilingAnalyzer.java
Patch:
@@ -50,7 +50,7 @@
 public class EBPFProfilingAnalyzer {
 
     private static final EBPFProfilingAnalyzeCollector ANALYZE_COLLECTOR = new EBPFProfilingAnalyzeCollector();
-    private static final Long FETCH_DATA_DURATION = TimeUnit.MINUTES.toMillis(2);
+    private static final Long FETCH_DATA_DURATION = TimeUnit.SECONDS.toMillis(10);
 
     private final ModuleManager moduleManager;
     protected IEBPFProfilingDataDAO dataDAO;

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/requests/search/aggregation/SumAggregationBuilder.java
Patch:
@@ -37,7 +37,7 @@ public SumAggregationBuilder field(String field) {
     }
 
     @Override
-    public MaxAggregation build() {
-        return new MaxAggregation(name, field);
+    public SumAggregation build() {
+        return new SumAggregation(name, field);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/NoneStreamProcessor.java
Patch:
@@ -78,7 +78,7 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
 
         ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);
         // None stream doesn't read data from database during the persistent process. Keep the timeRelativeID == false always.
-        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Second), true);
+        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Minute), true);
 
         final NoneStreamPersistentWorker persistentWorker = new NoneStreamPersistentWorker(moduleDefineHolder, model, noneStream);
         workers.put(streamClass, persistentWorker);

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/RPCAnalysisListener.java
Patch:
@@ -393,7 +393,7 @@ protected Layer identifyRemoteServiceLayer(SpanLayer spanLayer, String peer) {
                 }
                 return Layer.GENERAL;
             case MQ:
-                return Layer.MQ;
+                return Layer.VIRTUAL_MQ;
             case Cache:
                 return Layer.CACHE;
             case UNRECOGNIZED:

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/AlarmMockReceiver.java
Patch:
@@ -55,7 +55,6 @@ public void onError(Throwable throwable) {
                     if (log.isDebugEnabled()) {
                         log.debug("received alarm message error.");
                     }
-                    responseObserver.onCompleted();
                 }
 
                 @Override
@@ -69,4 +68,4 @@ public void onCompleted() {
             };
         }
     }
-}
\ No newline at end of file
+}

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/AccessLogServiceGRPCHandler.java
Patch:
@@ -171,7 +171,6 @@ public void onNext(StreamAccessLogsMessage message) {
             @Override
             public void onError(Throwable throwable) {
                 LOGGER.error("Error in receiving access log from envoy", throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/MetricServiceGRPCHandler.java
Patch:
@@ -130,7 +130,6 @@ public void onNext(StreamMetricsMessage message) {
             @Override
             public void onError(Throwable throwable) {
                 log.error("Error in receiving metrics from envoy", throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/browser/provider/handler/grpc/BrowserPerfServiceHandler.java
Patch:
@@ -131,7 +131,6 @@ public void onNext(final BrowserErrorLog browserErrorLog) {
             @Override
             public void onError(final Throwable throwable) {
                 log.error(throwable.getMessage(), throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/skywalking-ebpf-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/ebpf/provider/handler/EBPFProfilingServiceHandler.java
Patch:
@@ -168,7 +168,6 @@ public void onNext(org.apache.skywalking.apm.network.ebpf.profiling.v3.EBPFProfi
             @Override
             public void onError(Throwable throwable) {
                 log.error("Error in receiving ebpf profiling data", throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/skywalking-event-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/event/grpc/EventGrpcServiceHandler.java
Patch:
@@ -94,7 +94,6 @@ public void onNext(final Event event) {
             @Override
             public void onError(Throwable throwable) {
                 log.error(throwable.getMessage(), throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/skywalking-log-recevier-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/log/provider/handler/grpc/LogReportServiceGrpcHandler.java
Patch:
@@ -99,7 +99,6 @@ public void onNext(final LogData logData) {
             @Override
             public void onError(final Throwable throwable) {
                 log.error(throwable.getMessage(), throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshGRPCHandler.java
Patch:
@@ -48,7 +48,6 @@ public void onNext(ServiceMeshMetric metrics) {
             @Override
             public void onError(Throwable throwable) {
                 LOGGER.error(throwable.getMessage(), throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/handler/MeterServiceHandler.java
Patch:
@@ -77,7 +77,6 @@ public void onNext(MeterData meterData) {
             public void onError(Throwable throwable) {
                 processor.process();
                 log.error(throwable.getMessage(), throwable);
-                responseObserver.onCompleted();
             }
 
             @Override
@@ -107,7 +106,6 @@ public void onNext(MeterDataCollection meterDataCollection) {
             @Override
             public void onError(Throwable throwable) {
                 log.error(throwable.getMessage(), throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/skywalking-profile-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/profile/provider/handler/ProfileTaskServiceHandler.java
Patch:
@@ -112,7 +112,6 @@ public void onNext(ThreadSnapshot snapshot) {
             @Override
             public void onError(Throwable throwable) {
                 LOGGER.error(throwable.getMessage(), throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/grpc/TraceSegmentReportServiceHandler.java
Patch:
@@ -81,7 +81,6 @@ public void onNext(SegmentObject segment) {
             @Override
             public void onError(Throwable throwable) {
                 log.error(throwable.getMessage(), throwable);
-                responseObserver.onCompleted();
             }
 
             @Override

File: oap-server/server-receiver-plugin/skywalking-ebpf-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/ebpf/provider/handler/EBPFProcessServiceHandler.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.skywalking.apm.network.ebpf.profiling.process.v3.EBPFProcessReportList;
 import org.apache.skywalking.apm.network.ebpf.profiling.process.v3.EBPFProcessServiceGrpc;
 import org.apache.skywalking.apm.network.ebpf.profiling.process.v3.EBPFReportProcessDownstream;
+import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.analysis.DownSampling;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;
@@ -118,6 +119,7 @@ public void keepAlive(EBPFProcessPingPkgList request, StreamObserver<Commands> r
             processUpdate.setName(entity.getProcessName());
             processUpdate.setLabels(entity.getLabelsList());
             processUpdate.setTimeBucket(timeBucket);
+            processUpdate.setAgentId(Const.EMPTY_STRING);
             sourceReceiver.receive(processUpdate);
 
             // instance

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/k8s/K8sInfoRegistry.java
Patch:
@@ -223,10 +223,10 @@ private boolean hasIntersection(Collection<?> o, Collection<?> c) {
         Objects.requireNonNull(o);
         Objects.requireNonNull(c);
         for (final Object value : o) {
-            if (c.contains(value)) {
-                return true;
+            if (!c.contains(value)) {
+                return false;
             }
         }
-        return false;
+        return true;
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java
Patch:
@@ -80,7 +80,7 @@ public class StorageModuleElasticsearchConfig extends ModuleConfig {
      */
     private int bulkActions = 5000;
     /**
-     * Period of flesh, no matter `bulkActions` reached or not.
+     * Period of flush, no matter `bulkActions` reached or not.
      * INT(flushInterval * 2/3) would be used for index refresh period.
      * Unit is second.
      *
@@ -117,13 +117,13 @@ public class StorageModuleElasticsearchConfig extends ModuleConfig {
     private int segmentQueryMaxSize = 200;
     private int profileTaskQueryMaxSize = 200;
     /**
-     * The default analyzer for match query field. {@link org.apache.skywalking.oap.server.core.storage.annotation.Column.AnalyzerType#OAP_ANALYZER}
+     * The default analyzer for match query field. {@link org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearchMatchQuery.AnalyzerType#OAP_ANALYZER}
      *
      * @since 8.4.0
      */
     private String oapAnalyzer = "{\"analyzer\":{\"oap_analyzer\":{\"type\":\"stop\"}}}";
     /**
-     * The log analyzer for match query field. {@link org.apache.skywalking.oap.server.core.storage.annotation.Column.AnalyzerType#OAP_LOG_ANALYZER}
+     * The log analyzer for match query field. {@link org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearchMatchQuery.AnalyzerType#OAP_LOG_ANALYZER}
      *
      * @since 8.4.0
      */

File: oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java
Patch:
@@ -69,9 +69,9 @@ public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) {
         this.config = config;
 
         properties = new Properties();
-        properties.putAll(config.getKafkaConsumerConfig());
         properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, config.getGroupId());
         properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, config.getBootstrapServers());
+        properties.putAll(config.getKafkaConsumerConfig());
 
         int threadPoolSize = Runtime.getRuntime().availableProcessors() * 2;
         if (config.getKafkaHandlerThreadPoolSize() > 0) {

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/bulk/BulkProcessor.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.skywalking.library.elasticsearch.requests.IndexRequest;
 import org.apache.skywalking.library.elasticsearch.requests.UpdateRequest;
 import org.apache.skywalking.library.elasticsearch.requests.factory.RequestFactory;
+import org.apache.skywalking.oap.server.library.util.RunnableWithExceptionProtection;
 
 import static java.util.Objects.requireNonNull;
 
@@ -72,7 +73,8 @@ public static BulkProcessorBuilder builder() {
         scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
         scheduler.setRemoveOnCancelPolicy(true);
         scheduler.scheduleWithFixedDelay(
-            this::flush, 0, flushInterval.getSeconds(), TimeUnit.SECONDS);
+                new RunnableWithExceptionProtection(this::flush,
+                        t -> log.error("flush data to ES failure:", t)), 0, flushInterval.getSeconds(), TimeUnit.SECONDS);
     }
 
     public CompletableFuture<Void> add(IndexRequest request) {

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/GraphQLQueryConfig.java
Patch:
@@ -29,6 +29,6 @@
 @Setter
 public class GraphQLQueryConfig extends ModuleConfig {
     private boolean enableLogTestTool;
-    private int maxQueryComplexity = 100;
+    private int maxQueryComplexity = 1000;
     private boolean enableUpdateUITemplate = false;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Event.java
Patch:
@@ -44,6 +44,7 @@
 @Getter
 @Setter
 @ScopeDeclaration(id = EVENT, name = "Event", catalog = SERVICE_CATALOG_NAME)
+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
 @Stream(name = Event.INDEX_NAME, scopeId = EVENT, builder = Event.Builder.class, processor = MetricsStreamProcessor.class)
 @EqualsAndHashCode(
     callSuper = false,

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java
Patch:
@@ -71,6 +71,7 @@
 import org.apache.skywalking.oap.server.core.source.oal.rt.metrics.builder.MetricBuilderClassPackageHolder;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilderFactory;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.library.module.ModuleStartException;
 import org.apache.skywalking.oap.server.library.util.ResourceUtils;
@@ -269,7 +270,8 @@ private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompile
                 }
                 if (field.isID()) {
                     // Add shardingKeyIdx = 0 to column annotation.
-                    columnAnnotation.addMemberValue("shardingKeyIdx", new IntegerMemberValue(constPool, 0));
+                    Annotation banyanShardingKeyAnnotation = new Annotation(BanyanDBShardingKey.class.getName(), constPool);
+                    banyanShardingKeyAnnotation.addMemberValue("index", new IntegerMemberValue(constPool, 0));
                 }
                 annotationsAttribute.addAnnotation(columnAnnotation);
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearchMatchQuery;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
@@ -68,7 +69,8 @@ public String id() {
     private String id1;
     @Column(columnName = START_TIME)
     private long startTime;
-    @Column(columnName = ALARM_MESSAGE, matchQuery = true)
+    @Column(columnName = ALARM_MESSAGE)
+    @ElasticSearchMatchQuery
     private String alarmMessage;
     @Column(columnName = RULE_NAME)
     private String ruleName;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/endpoint/EndpointTraffic.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearchMatchQuery;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -52,7 +53,8 @@ public class EndpointTraffic extends Metrics {
     private String serviceId;
     @Setter
     @Getter
-    @Column(columnName = NAME, matchQuery = true)
+    @Column(columnName = NAME)
+    @ElasticSearchMatchQuery
     private String name = Const.EMPTY_STRING;
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/networkalias/NetworkAddressAlias.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -51,7 +52,8 @@ public class NetworkAddressAlias extends Metrics {
 
     @Setter
     @Getter
-    @Column(columnName = ADDRESS, shardingKeyIdx = 0)
+    @Column(columnName = ADDRESS)
+    @BanyanDBShardingKey(index = 0)
     private String address;
     @Setter
     @Getter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointRelationServerSideMetrics.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -58,7 +59,8 @@ public class EndpointRelationServerSideMetrics extends Metrics {
     private int componentId;
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationServerSideMetrics.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -68,7 +69,8 @@ public class ServiceInstanceRelationServerSideMetrics extends Metrics {
     private int componentId;
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -58,7 +59,8 @@ public class ServiceRelationServerSideMetrics extends Metrics {
     private int componentId;
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/service/ServiceTraffic.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearchMatchQuery;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
@@ -60,7 +61,8 @@ public class ServiceTraffic extends Metrics {
 
     @Setter
     @Getter
-    @Column(columnName = NAME, matchQuery = true)
+    @Column(columnName = NAME)
+    @ElasticSearchMatchQuery
     private String name = Const.EMPTY_STRING;
 
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/HistogramFunction.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.query.type.Bucket;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -48,7 +49,8 @@ public abstract class HistogramFunction extends Meter implements AcceptableValue
 
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/PercentileFunction.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.PercentileMetrics;
 import org.apache.skywalking.oap.server.core.query.type.Bucket;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -55,7 +56,8 @@ public abstract class PercentileFunction extends Meter implements AcceptableValu
 
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgFunction.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;
 import org.apache.skywalking.oap.server.core.query.sql.Function;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -50,7 +51,8 @@ public abstract class AvgFunction extends Meter implements AcceptableValue<Long>
 
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
 
     /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.query.type.Bucket;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -59,7 +60,8 @@ public abstract class AvgHistogramFunction extends Meter implements AcceptableVa
 
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java
Patch:
@@ -43,6 +43,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.MultiIntValuesHolder;
 import org.apache.skywalking.oap.server.core.query.type.Bucket;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -74,7 +75,8 @@ public abstract class AvgHistogramPercentileFunction extends Meter implements Ac
 
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgLabeledFunction.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.LabeledValueHolder;
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -48,7 +49,8 @@ public abstract class AvgLabeledFunction extends Meter implements AcceptableValu
 
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
 
     /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/latest/LatestFunction.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;
 import org.apache.skywalking.oap.server.core.query.sql.Function;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -47,7 +48,8 @@ public abstract class LatestFunction extends Meter implements AcceptableValue<Lo
 
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
 
     /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumFunction.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;
 import org.apache.skywalking.oap.server.core.query.sql.Function;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -47,7 +48,8 @@ public abstract class SumFunction extends Meter implements AcceptableValue<Long>
 
     @Setter
     @Getter
-    @Column(columnName = ENTITY_ID, length = 512, shardingKeyIdx = 0)
+    @Column(columnName = ENTITY_ID, length = 512)
+    @BanyanDBShardingKey(index = 0)
     private String entityId;
 
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/errorlog/BrowserErrorLogRecord.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.annotation.SuperDataset;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
@@ -54,7 +55,8 @@ public String id() {
 
     @Setter
     @Getter
-    @Column(columnName = SERVICE_ID, shardingKeyIdx = 0)
+    @Column(columnName = SERVICE_ID)
+    @BanyanDBShardingKey(index = 0)
     private String serviceId;
 
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingDataRecord.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDBShardingKey;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
@@ -48,7 +49,8 @@ public class EBPFProfilingDataRecord extends Record {
     public static final String STACKS_BINARY = "dump_binary";
     public static final String UPLOAD_TIME = "upload_time";
 
-    @Column(columnName = TASK_ID, length = 600, shardingKeyIdx = 0)
+    @Column(columnName = TASK_ID, length = 600)
+    @BanyanDBShardingKey(index = 0)
     private String taskId;
     @Column(columnName = SCHEDULE_ID, length = 600)
     private String scheduleId;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/Model.java
Patch:
@@ -31,7 +31,6 @@
 public class Model {
     private final String name;
     private final List<ModelColumn> columns;
-    private final List<ExtraQueryIndex> extraQueryIndices;
     private final int scopeId;
     private final DownSampling downsampling;
     private final boolean record;
@@ -42,7 +41,6 @@ public class Model {
 
     public Model(final String name,
                  final List<ModelColumn> columns,
-                 final List<ExtraQueryIndex> extraQueryIndices,
                  final int scopeId,
                  final DownSampling downsampling,
                  final boolean record,
@@ -51,7 +49,6 @@ public Model(final String name,
                  boolean timeRelativeID) {
         this.name = name;
         this.columns = columns;
-        this.extraQueryIndices = extraQueryIndices;
         this.scopeId = scopeId;
         this.downsampling = downsampling;
         this.isTimeSeries = !DownSampling.None.equals(downsampling);

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/StorageModelsTest.java
Patch:
@@ -74,12 +74,10 @@ public void testStorageModels() throws StorageException {
         Assert.assertEquals(false, model.getColumns().get(2).isStorageOnly());
         Assert.assertEquals(true, model.getColumns().get(3).isStorageOnly());
 
-        final List<ExtraQueryIndex> extraQueryIndices = model.getExtraQueryIndices();
-        Assert.assertEquals(3, extraQueryIndices.size());
         Assert.assertArrayEquals(new String[] {
             "column2",
             "column"
-        }, extraQueryIndices.get(2).getColumns());
+        }, model.getColumns().get(2).getSqlDatabaseExtension().getIndices().get(1).getColumns());
     }
 
     @Stream(name = "StorageModelsTest", scopeId = -1, builder = TestModel.Builder.class, processor = MetricsStreamProcessor.class)

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtilsTest.java
Patch:
@@ -36,13 +36,13 @@ public class TimeSeriesUtilsTest {
 
     @Before
     public void prepare() {
-        superDatasetModel = new Model("superDatasetModel", Lists.newArrayList(), Lists.newArrayList(),
+        superDatasetModel = new Model("superDatasetModel", Lists.newArrayList(),
                                       0, DownSampling.Minute, true, true, "", true
         );
-        normalRecordModel = new Model("normalRecordModel", Lists.newArrayList(), Lists.newArrayList(),
+        normalRecordModel = new Model("normalRecordModel", Lists.newArrayList(),
                                       0, DownSampling.Minute, true, false, "", true
         );
-        normalMetricsModel = new Model("normalMetricsModel", Lists.newArrayList(), Lists.newArrayList(),
+        normalMetricsModel = new Model("normalMetricsModel", Lists.newArrayList(),
                                        0, DownSampling.Minute, false, false, "", true
         );
         TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(1);

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/handler/ZipkinSpanHTTPHandler.java
Patch:
@@ -109,7 +109,7 @@ HttpResponse doCollectSpans(final SpanBytesDecoder decoder,
         final HistogramMetrics.Timer timer = histogram.createTimer();
         final HttpResponse response = HttpResponse.from(req.aggregate().thenApply(request -> {
             final HttpData httpData = UnzippingBytesRequestConverter.convertRequest(ctx, request);
-            final List<Span> spanList = decoder.decodeList(httpData.byteBuf().array());
+            final List<Span> spanList = decoder.decodeList(httpData.byteBuf().nioBuffer());
             final SpanForward forward = new SpanForward(namingControl, sourceReceiver, config);
             forward.send(spanList);
             return HttpResponse.of(HttpStatus.OK);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/enumeration/Language.java
Patch:
@@ -22,7 +22,7 @@ public enum Language {
     UNKNOWN, JAVA, DOTNET, NODEJS, PYTHON, RUBY, GO, LUA, PHP;
 
     public static Language value(String language) {
-        switch (language) {
+        switch (language.toLowerCase()) {
             case "java":
                 return Language.JAVA;
             case ".net":

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/k8s/K8SServiceRegistry.java
Patch:
@@ -64,9 +64,9 @@ public class K8SServiceRegistry {
 
     protected final ServiceNameFormatter serviceNameFormatter;
 
-    private final EnvoyMetricReceiverConfig config;
+    protected final KubernetesNodeRegistry nodeRegistry;
 
-    private final KubernetesNodeRegistry nodeRegistry;
+    private final EnvoyMetricReceiverConfig config;
 
     public K8SServiceRegistry(final EnvoyMetricReceiverConfig config) {
         this.config = config;

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/k8s/KubernetesNodeRegistry.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.skywalking.oap.server.library.util.StringUtil;
 
 @Slf4j
-final class KubernetesNodeRegistry implements ResourceEventHandler<V1Node> {
+public final class KubernetesNodeRegistry implements ResourceEventHandler<V1Node> {
     private final Set<String> nodeIPs;
 
     private final ExecutorService executor;

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/Analyzer.java
Patch:
@@ -92,8 +92,6 @@ public static Analyzer build(final String metricName,
         return analyzer;
     }
 
-    private static final String FUNCTION_NAME_TEMP = "%s%s";
-
     private List<String> samples;
 
     private final String metricName;
@@ -250,7 +248,7 @@ private void createMetric(final ScopeType scopeType,
                               final String dataType,
                               final DownsamplingType downsamplingType) {
         String functionName = String.format(
-            FUNCTION_NAME_TEMP, downsamplingType.toString().toLowerCase(), StringUtils.capitalize(dataType));
+            "%s%s", downsamplingType.toString().toLowerCase(), StringUtils.capitalize(dataType));
         meterSystem.create(metricName, functionName, scopeType);
     }
 
@@ -272,6 +270,7 @@ private void generateTraffic(MeterEntity entity) {
                     toService(requireNonNull(entity.getSourceServiceName()), entity.getLayer());
                     clientSide(entity);
                     break;
+                default:
             }
         } else {
             toService(requireNonNull(entity.getServiceName()), entity.getLayer());

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/AnalysisResult.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oal.rt.parser;
 
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import lombok.Getter;
 import lombok.Setter;
@@ -91,7 +91,7 @@ public class AnalysisResult {
 
     public void addPersistentField(String fieldName, String columnName, Class<?> type) {
         if (persistentFields == null) {
-            persistentFields = new LinkedList<>();
+            persistentFields = new ArrayList<>();
         }
         DataColumn dataColumn = new DataColumn(fieldName, columnName, type);
         persistentFields.add(dataColumn);

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/OALScripts.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oal.rt.parser;
 
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import lombok.Getter;
 
@@ -28,7 +28,7 @@ public class OALScripts {
     private DisableCollection disableCollection;
 
     public OALScripts() {
-        metricsStmts = new LinkedList<>();
+        metricsStmts = new ArrayList<>();
         disableCollection = new DisableCollection();
     }
 }

File: oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ClusterModuleZookeeperProvider.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.cluster.plugin.zookeeper;
 
 import com.google.common.collect.Lists;
+import java.nio.charset.StandardCharsets;
 import java.security.NoSuchAlgorithmException;
 import java.util.List;
 import org.apache.curator.RetryPolicy;
@@ -114,7 +115,7 @@ public List<ACL> getAclForPath(String s) {
                 }
             };
             builder.aclProvider(provider);
-            builder.authorization(config.getSchema(), config.getExpression().getBytes());
+            builder.authorization(config.getSchema(), config.getExpression().getBytes(StandardCharsets.UTF_8));
         }
         client = builder.build();
 

File: oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/SWInstanceSerializer.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
+import java.nio.charset.StandardCharsets;
 import org.apache.curator.x.discovery.ServiceInstance;
 import org.apache.curator.x.discovery.details.InstanceSerializer;
 import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;
@@ -30,7 +31,7 @@ public class SWInstanceSerializer implements InstanceSerializer<RemoteInstance>
 
     @Override
     public byte[] serialize(ServiceInstance<RemoteInstance> instance) throws Exception {
-        return gson.toJson(instance).getBytes();
+        return gson.toJson(instance).getBytes(StandardCharsets.UTF_8);
     }
 
     @Override

File: oap-server/server-configuration/configuration-api/src/main/java/org/apache/skywalking/oap/server/configuration/api/ConfigWatcherRegister.java
Patch:
@@ -208,7 +208,7 @@ private void groupConfigsSync() {
 
     public abstract Optional<GroupConfigTable> readGroupConfig(Set<String> keys);
 
-    public class Register {
+    static class Register {
         private Map<String, WatcherHolder> register = new HashMap<>();
 
         private boolean containsKey(String key) {
@@ -255,7 +255,7 @@ public String toString() {
     }
 
     @Getter
-    protected class WatcherHolder {
+    protected static class WatcherHolder {
         private ConfigChangeWatcher watcher;
         private final String key;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointCallRelationDispatcher.java
Patch:
@@ -31,6 +31,7 @@ public void dispatch(EndpointRelation source) {
             case SERVER:
                 serverSide(source);
                 break;
+            default:
         }
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/sql/Where.java
Patch:
@@ -18,11 +18,11 @@
 
 package org.apache.skywalking.oap.server.core.query.sql;
 
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import lombok.Getter;
 
 @Getter
 public class Where {
-    private List<KeyValues> keyValues = new LinkedList<>();
+    private List<KeyValues> keyValues = new ArrayList<>();
 }

File: oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/LogHandler.java
Patch:
@@ -34,15 +34,13 @@
 @Slf4j
 public class LogHandler extends AbstractKafkaHandler {
 
-    private final KafkaFetcherConfig config;
     private final HistogramMetrics histogram;
     private final CounterMetrics errorCounter;
     private final ILogAnalyzerService logAnalyzerService;
 
     public LogHandler(final ModuleManager moduleManager,
                       final KafkaFetcherConfig config) {
         super(moduleManager, config);
-        this.config = config;
         this.logAnalyzerService = moduleManager.find(LogAnalyzerModule.NAME)
                                                .provider()
                                                .getService(ILogAnalyzerService.class);

File: oap-server/server-library/library-server/src/main/java/org/apache/skywalking/oap/server/library/server/ssl/PrivateKeyUtil.java
Patch:
@@ -67,7 +67,7 @@ private static InputStream readPkcs1PrivateKey(byte[] pkcs1Bytes) {
             0x4, (byte) 0x82, (byte) ((pkcs1Length >> 8) & 0xff), (byte) (pkcs1Length & 0xff) // Octet string + length
         };
         StringBuilder pkcs8 = new StringBuilder(PKCS_8_PEM_HEADER);
-        pkcs8.append("\n").append(new String(Base64.getEncoder().encode(join(pkcs8Header, pkcs1Bytes))));
+        pkcs8.append("\n").append(new String(Base64.getEncoder().encode(join(pkcs8Header, pkcs1Bytes)), StandardCharsets.UTF_8));
         pkcs8.append("\n").append(PKCS_8_PEM_FOOTER);
         return new ByteArrayInputStream(pkcs8.toString().getBytes());
     }

File: oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/ResourceUtils.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
@@ -34,7 +35,7 @@
 public class ResourceUtils {
 
     public static Reader read(String fileName) throws FileNotFoundException {
-        return new InputStreamReader(readToStream(fileName));
+        return new InputStreamReader(readToStream(fileName), StandardCharsets.UTF_8);
     }
 
     public static InputStream readToStream(String fileName) throws FileNotFoundException {

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/Query.java
Patch:
@@ -18,13 +18,14 @@
 
 package org.apache.skywalking.oap.query.graphql.resolver;
 
+import com.google.errorprone.annotations.Keep;
 import graphql.kickstart.tools.GraphQLQueryResolver;
 import org.apache.skywalking.oap.server.core.version.Version;
 
 /**
  * Root Query Resolver.
  */
 public class Query implements GraphQLQueryResolver {
-    @SuppressWarnings("unused") // Used in GraphQL query
+    @Keep // GraphQL picks this as version
     private final String version = Version.CURRENT.toString();
 }

File: oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/browser/provider/parser/errorlog/ErrorLogParserListenerManager.java
Patch:
@@ -17,14 +17,14 @@
 
 package org.apache.skywalking.oap.server.receiver.browser.provider.parser.errorlog;
 
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import lombok.Getter;
 import org.apache.skywalking.oap.server.receiver.browser.provider.parser.errorlog.listener.ErrorLogListenerFactory;
 
 public class ErrorLogParserListenerManager {
     @Getter
-    private final List<ErrorLogListenerFactory> errorLogAnalysisListeners = new LinkedList<>();
+    private final List<ErrorLogListenerFactory> errorLogAnalysisListeners = new ArrayList<>();
 
     public void add(final ErrorLogListenerFactory factory) {
         errorLogAnalysisListeners.add(factory);

File: oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/browser/provider/parser/performance/PerfDataParserListenerManager.java
Patch:
@@ -17,14 +17,14 @@
 
 package org.apache.skywalking.oap.server.receiver.browser.provider.parser.performance;
 
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import lombok.Getter;
 import org.apache.skywalking.oap.server.receiver.browser.provider.parser.performance.listener.PerfDataListenerFactory;
 
 public class PerfDataParserListenerManager {
     @Getter
-    private final List<PerfDataListenerFactory> perfDataListenerFactories = new LinkedList<>();
+    private final List<PerfDataListenerFactory> perfDataListenerFactories = new ArrayList<>();
 
     public void add(final PerfDataListenerFactory factory) {
         perfDataListenerFactories.add(factory);

File: oap-server/server-receiver-plugin/skywalking-sharing-server-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/sharing/server/ReceiverGRPCHandlerRegister.java
Patch:
@@ -22,7 +22,7 @@
 import io.grpc.ServerInterceptor;
 import io.grpc.ServerInterceptors;
 import io.grpc.ServerServiceDefinition;
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.server.GRPCHandlerRegister;
@@ -31,7 +31,7 @@ public class ReceiverGRPCHandlerRegister implements GRPCHandlerRegister {
 
     @Setter
     private GRPCHandlerRegister grpcHandlerRegister;
-    private List<ServerInterceptor> interceptors = new LinkedList<>();
+    private List<ServerInterceptor> interceptors = new ArrayList<>();
 
     @Override
     public void addHandler(BindableService handler) {

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/ProfileThreadSnapshotQuery.java
Patch:
@@ -25,17 +25,16 @@
 import java.util.ArrayList;
 import java.util.Base64;
 import java.util.Collections;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Objects;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.skywalking.oap.server.library.util.StringUtil;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.profiling.trace.ProfileThreadSnapshotRecord;
 import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
 import org.apache.skywalking.oap.server.core.storage.profiling.trace.IProfileThreadSnapshotQueryDAO;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;
+import org.apache.skywalking.oap.server.library.util.StringUtil;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxClient;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxConstants;
 import org.influxdb.dto.QueryResult;
@@ -65,7 +64,7 @@ public List<BasicTrace> queryProfiledSegments(String taskId) throws IOException
         countQuery.and(eq(ProfileThreadSnapshotRecord.TASK_ID, taskId))
                   .and(eq(ProfileThreadSnapshotRecord.SEQUENCE, 0));
 
-        final LinkedList<String> segments = new LinkedList<>();
+        final List<String> segments = new ArrayList<>();
         QueryResult.Series series = client.queryForSingleSeries(countQuery);
         if (Objects.isNull(series)) {
             return Collections.emptyList();

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/TraceQuery.java
Patch:
@@ -121,6 +121,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,
             case SUCCESS:
                 recallQuery.and(eq(SegmentRecord.IS_ERROR, BooleanUtils.FALSE));
                 break;
+            default:
         }
         if (CollectionUtils.isNotEmpty(tags)) {
             WhereNested<WhereQueryImpl<SelectQueryImpl>> nested = recallQuery.andNested();

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/HistogramMetrics.java
Patch:
@@ -36,7 +36,7 @@ public Timer createTimer() {
      */
     public abstract void observe(double value);
 
-    public class Timer implements Closeable {
+    public static class Timer implements Closeable {
         private final HistogramMetrics metrics;
         private final long startNanos;
         private double duration;

File: oap-server/server-telemetry/telemetry-prometheus/src/main/java/org/apache/skywalking/oap/server/telemetry/prometheus/PrometheusMetricsCollector.java
Patch:
@@ -22,15 +22,14 @@
 import io.prometheus.client.CollectorRegistry;
 import java.util.ArrayList;
 import java.util.Enumeration;
-import java.util.LinkedList;
 import java.util.List;
 import org.apache.skywalking.oap.server.telemetry.api.MetricFamily;
 import org.apache.skywalking.oap.server.telemetry.api.MetricsCollector;
 
 public class PrometheusMetricsCollector implements MetricsCollector {
     @Override public Iterable<MetricFamily> collect() {
         Enumeration<Collector.MetricFamilySamples> mfs = CollectorRegistry.defaultRegistry.metricFamilySamples();
-        List<MetricFamily> result = new LinkedList<>();
+        List<MetricFamily> result = new ArrayList<>();
         while (mfs.hasMoreElements()) {
             Collector.MetricFamilySamples metricFamilySamples = mfs.nextElement();
             List<MetricFamily.Sample> samples = new ArrayList<>(metricFamilySamples.samples.size());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DatabaseSlowStatement.java
Patch:
@@ -23,8 +23,9 @@
 import org.apache.skywalking.oap.server.core.Const;
 
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.DATABASE_SLOW_STATEMENT;
+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;
 
-@ScopeDeclaration(id = DATABASE_SLOW_STATEMENT, name = "DatabaseSlowStatement")
+@ScopeDeclaration(id = DATABASE_SLOW_STATEMENT, name = "DatabaseSlowStatement", catalog = SERVICE_CATALOG_NAME)
 public class DatabaseSlowStatement extends Source {
     @Getter
     @Setter

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/EntityDescription/EndpointEntityDescription.java
Patch:
@@ -35,6 +35,7 @@ public class EndpointEntityDescription implements EntityDescription {
     private final List<String> serviceKeys;
     private final List<String> endpointKeys;
     private final Layer layer;
+    private final String delimiter;
 
     @Override
     public List<String> getLabelKeys() {

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/EntityDescription/InstanceEntityDescription.java
Patch:
@@ -35,6 +35,7 @@ public class InstanceEntityDescription implements EntityDescription {
     private final List<String> serviceKeys;
     private final List<String> instanceKeys;
     private final Layer layer;
+    private final String delimiter;
 
     @Override
     public List<String> getLabelKeys() {

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/EntityDescription/ServiceEntityDescription.java
Patch:
@@ -32,6 +32,7 @@ public class ServiceEntityDescription implements EntityDescription {
     private final ScopeType scopeType = ScopeType.SERVICE;
     private final List<String> serviceKeys;
     private final Layer layer;
+    private final String delimiter;
 
     @Override
     public List<String> getLabelKeys() {

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/EntityDescription/ServiceRelationEntityDescription.java
Patch:
@@ -37,6 +37,7 @@ public class ServiceRelationEntityDescription implements EntityDescription {
     private final List<String> destServiceKeys;
     private final DetectPoint detectPoint;
     private final Layer layer;
+    private final String delimiter;
 
     @Override
     public List<String> getLabelKeys() {

File: oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/grpc/GRPCExporter.java
Patch:
@@ -27,8 +27,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.ReentrantLock;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.skywalking.oap.server.library.datacarrier.DataCarrier;
-import org.apache.skywalking.oap.server.library.datacarrier.consumer.IConsumer;
 import org.apache.skywalking.oap.server.core.analysis.metrics.DoubleValueHolder;
 import org.apache.skywalking.oap.server.core.analysis.metrics.IntValueHolder;
 import org.apache.skywalking.oap.server.core.analysis.metrics.LongValueHolder;
@@ -49,6 +47,8 @@
 import org.apache.skywalking.oap.server.exporter.grpc.ValueType;
 import org.apache.skywalking.oap.server.exporter.provider.MetricFormatter;
 import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;
+import org.apache.skywalking.oap.server.library.datacarrier.DataCarrier;
+import org.apache.skywalking.oap.server.library.datacarrier.consumer.IConsumer;
 import org.apache.skywalking.oap.server.library.util.GRPCStreamStatus;
 
 @Slf4j
@@ -180,7 +180,7 @@ public void onCompleted() {
             MetricsMetaInfo meta = row.getMeta();
             builder.setMetricName(meta.getMetricsName());
             builder.setEventType(
-                EventType.INCREMENT.equals(row.getEventType()) ? EventType.INCREMENT : EventType.TOTAL);
+                ExportEvent.EventType.INCREMENT.equals(row.getEventType()) ? EventType.INCREMENT : EventType.TOTAL);
             String entityName = getEntityName(meta);
             if (entityName == null) {
                 return;

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/requests/factory/TemplateFactory.java
Patch:
@@ -39,7 +39,7 @@ public interface TemplateFactory {
 
     /**
      * Returns a request to create or update a template of {@code name} with the given {@code
-     * settings}, {@code mapping} and {@code order}.
+     * settings}, {@code mappings} and {@code order}.
      */
     HttpRequest createOrUpdate(String name, Map<String, ?> settings,
                                Mappings mappings, int order);

File: oap-server/server-receiver-plugin/otel-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/otel/Handler.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.reflect.ClassPath;
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -41,8 +42,8 @@ static List<Handler> all() throws HandlerInitializationException {
             Class<?> c = each.load();
             if (Arrays.stream(c.getInterfaces()).anyMatch(interfaceClass -> interfaceClass.isAssignableFrom(Handler.class))) {
                 try {
-                    result.add((Handler) c.newInstance());
-                } catch (InstantiationException | IllegalAccessException e) {
+                    result.add((Handler) c.getDeclaredConstructor().newInstance());
+                } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
                     throw new HandlerInitializationException("failed to get instances of handler classed", e);
                 }
             }

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/NetworkAddressAliasMappingListener.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * NetworkAddressAliasMappingListener use the propagated data in the segment reference, set up the alias relationship
  * between network address and current service and instance. The alias relationship will be used in the {@link
- * MultiScopesAnalysisListener#parseExit(SpanObject, SegmentObject)} to setup the accurate target destination service
+ * RPCAnalysisListener#parseExit(SpanObject, SegmentObject)} to setup the accurate target destination service
  * and instance.
  *
  * This is a key point of SkyWalking header propagation protocol.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/ServiceTopologyBuilder.java
Patch:
@@ -69,8 +69,7 @@ Topology build(List<Call.CallDetail> serviceRelationClientCalls, List<Call.CallD
             /*
              * Use the alias name to make topology relationship accurate.
              */
-            if (!destService.isReal()
-                && networkAddressAliasCache.get(destService.getName()) != null) {
+            if (networkAddressAliasCache.get(destService.getName()) != null) {
                 /*
                  * If alias exists, mean this network address is representing a real service.
                  */

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/EndpointMeta.java
Patch:
@@ -31,6 +31,7 @@ public class EndpointMeta extends Source {
     @Setter
     private String serviceName;
     @Setter
+    @Getter
     private boolean isServiceNormal;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/Column.java
Patch:
@@ -102,8 +102,8 @@
     AnalyzerType analyzer() default AnalyzerType.OAP_ANALYZER;
 
     /**
-     * Sharding key is used to group time series data per metric of one entity in one place (same sharding or same
-     * column for column-oriented database).
+     * Sharding key is used to group time series data per metric of one entity in one place (same sharding and/or same
+     * row for column-oriented database).
      * For example,
      * ServiceA's traffic gauge, service call per minute, includes following timestamp values, then it should be sharded
      * by service ID

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmRecordBuilder.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
-import org.apache.skywalking.oap.server.storage.plugin.jdbc.HashMapConverterWrapper;
 
 public class H2AlarmRecordBuilder extends AbstractSearchTagBuilder<Record> {
 
@@ -38,9 +37,8 @@ public Record storage2Entity(final Convert2Entity converter) {
     }
 
     @Override
-    public void entity2Storage(final Record record, final Convert2Storage originConverter) {
+    public void entity2Storage(final Record record, final Convert2Storage converter) {
         final AlarmRecord storageData = (AlarmRecord) record;
-        Convert2Storage converter = HashMapConverterWrapper.of(originConverter);
         final AlarmRecord.Builder builder = new AlarmRecord.Builder();
         builder.entity2Storage(storageData, converter);
         analysisSearchTag(storageData.getTags(), converter);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2LogRecordBuilder.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
-import org.apache.skywalking.oap.server.storage.plugin.jdbc.HashMapConverterWrapper;
 
 public class H2LogRecordBuilder extends AbstractSearchTagBuilder<Record> {
 
@@ -38,9 +37,8 @@ public Record storage2Entity(final Convert2Entity converter) {
     }
 
     @Override
-    public void entity2Storage(final Record record, final Convert2Storage originConverter) {
+    public void entity2Storage(final Record record, final Convert2Storage converter) {
         final LogRecord storageData = (LogRecord) record;
-        Convert2Storage converter = HashMapConverterWrapper.of(originConverter);
         final LogRecord.Builder builder = new LogRecord.Builder();
         builder.entity2Storage(storageData, converter);
         analysisSearchTag(storageData.getTags(), converter);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ManagementDAO.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.oap.server.core.storage.IManagementDAO;
 import org.apache.skywalking.oap.server.core.storage.StorageData;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
+import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.SQLExecutor;
@@ -50,7 +51,8 @@ public void insert(Model model, ManagementData storageData) throws IOException {
                 return;
             }
 
-            SQLExecutor insertExecutor = getInsertExecutor(model.getName(), storageData, storageBuilder);
+            SQLExecutor insertExecutor = getInsertExecutor(model.getName(), storageData, storageBuilder,
+                                                           new HashMapConverter.ToStorage());
             insertExecutor.invoke(connection);
         } catch (IOException | SQLException e) {
             throw new IOException(e.getMessage(), e);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsDAO.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.skywalking.oap.server.core.storage.IMetricsDAO;
 import org.apache.skywalking.oap.server.core.storage.StorageData;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
+import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.SQLExecutor;
@@ -53,7 +54,7 @@ public List<Metrics> multiGet(Model model, List<Metrics> metrics) throws IOExcep
 
     @Override
     public SQLExecutor prepareBatchInsert(Model model, Metrics metrics) throws IOException {
-        return getInsertExecutor(model.getName(), metrics, storageBuilder);
+        return getInsertExecutor(model.getName(), metrics, storageBuilder, new HashMapConverter.ToStorage());
     }
 
     @Override

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2NoneStreamDAO.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.oap.server.core.analysis.config.NoneStream;
 import org.apache.skywalking.oap.server.core.storage.INoneStreamDAO;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
+import org.apache.skywalking.oap.server.core.storage.type.HashMapConverter;
 import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.SQLExecutor;
@@ -44,7 +45,7 @@ public H2NoneStreamDAO(JDBCHikariCPClient h2Client, StorageBuilder<NoneStream> s
     @Override
     public void insert(Model model, NoneStream noneStream) throws IOException {
         try (Connection connection = h2Client.getConnection()) {
-            SQLExecutor insertExecutor = getInsertExecutor(model.getName(), noneStream, storageBuilder);
+            SQLExecutor insertExecutor = getInsertExecutor(model.getName(), noneStream, storageBuilder, new HashMapConverter.ToStorage());
             insertExecutor.invoke(connection);
         } catch (IOException | SQLException e) {
             throw new IOException(e.getMessage(), e);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2RecordDAO.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
 import org.apache.skywalking.oap.server.library.client.request.InsertRequest;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
+import org.apache.skywalking.oap.server.storage.plugin.jdbc.JDBCConverter;
 
 public class H2RecordDAO extends H2SQLExecutor implements IRecordDAO {
     private JDBCHikariCPClient h2Client;
@@ -98,6 +99,6 @@ public H2RecordDAO(ModuleManager manager,
 
     @Override
     public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {
-        return getInsertExecutor(model.getName(), record, storageBuilder, maxSizeOfArrayColumn);
+        return getInsertExecutor(model.getName(), record, storageBuilder, new JDBCConverter.RecordToStorage(), maxSizeOfArrayColumn);
     }
 }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SegmentRecordBuilder.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;
 import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;
-import org.apache.skywalking.oap.server.storage.plugin.jdbc.HashMapConverterWrapper;
 
 import static org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord.TAGS;
 
@@ -45,9 +44,8 @@ public Record storage2Entity(final Convert2Entity converter) {
     }
 
     @Override
-    public void entity2Storage(final Record record, final Convert2Storage originConverter) {
+    public void entity2Storage(final Record record, final Convert2Storage converter) {
         SegmentRecord storageData = (SegmentRecord) record;
-        Convert2Storage converter = HashMapConverterWrapper.of(originConverter);
         final SegmentRecord.Builder builder = new SegmentRecord.Builder();
         builder.entity2Storage(storageData, converter);
         analysisSearchTag(storageData.getTagsRawData(), converter);

File: oap-server/server-library/library-datacarrier-queue/src/main/java/org/apache/skywalking/oap/server/library/datacarrier/consumer/BulkConsumePool.java
Patch:
@@ -34,9 +34,9 @@ public class BulkConsumePool implements ConsumerPool {
     private List<MultipleChannelsConsumer> allConsumers;
     private volatile boolean isStarted = false;
 
-    public BulkConsumePool(String name, int size, long consumeCycle) {
+    private BulkConsumePool(String name, int size, long consumeCycle) {
         size = EnvUtil.getInt(name + "_THREAD", size);
-        allConsumers = new ArrayList<MultipleChannelsConsumer>(size);
+        allConsumers = new ArrayList<>(size);
         for (int i = 0; i < size; i++) {
             MultipleChannelsConsumer multipleChannelsConsumer = new MultipleChannelsConsumer("DataCarrier." + name + ".BulkConsumePool." + i + ".Thread", consumeCycle);
             multipleChannelsConsumer.setDaemon(true);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Event.java
Patch:
@@ -155,7 +155,7 @@ public boolean combine(final Metrics metrics) {
      */
     public void setParameters(String parameters) {
         this.parameters = parameters == null || parameters.length() <= PARAMETER_MAX_LENGTH ?
-                parameters : parameters.substring(0, PARAMETER_MAX_LENGTH);
+            parameters : parameters.substring(0, PARAMETER_MAX_LENGTH);
     }
 
     @Override

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/handler/SpanProcessor.java
Patch:
@@ -58,7 +58,7 @@ void convert(ZipkinReceiverConfig config, SpanBytesDecoder decoder, HttpServletR
     private InputStream getInputStream(HttpServletRequest request) throws IOException {
         InputStream requestInStream;
 
-        String headEncoding = request.getHeader("accept-encoding");
+        String headEncoding = request.getHeader("Content-Encoding");
         if (headEncoding != null && (headEncoding.indexOf("gzip") != -1)) {
             requestInStream = new GZIPInputStream(request.getInputStream());
         } else {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java
Patch:
@@ -34,7 +34,7 @@ public class StorageModuleElasticsearchConfig extends ModuleConfig {
      *
      * @since 8.7.0
      */
-    private int connectTimeout = 500;
+    private int connectTimeout = 3000;
     /**
      * Socket timeout of ElasticSearch client.
      *

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -156,8 +156,8 @@ public void prepare() throws ServiceNotProvidedException {
             config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config
             .getTrustStorePass(), config.getUser(), config.getPassword(),
             indexNameConverter(config.getNamespace()), config.getConnectTimeout(),
-            config.getSocketTimeout(), config.getNumHttpClientThread(),
-            config.getResponseTimeout()
+            config.getSocketTimeout(), config.getResponseTimeout(),
+            config.getNumHttpClientThread()
         );
         this.registerServiceImplementation(
             IBatchDAO.class,

File: oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/ScriptParserTest.java
Patch:
@@ -47,15 +47,15 @@ public static void clear() {
     @Test
     public void testParse() throws IOException {
         ScriptParser parser = ScriptParser.createFromScriptText(
-            "Endpoint_avg = from(Endpoint.latency).longAvg(); //comment test" + "\n" + "Service_avg = from(Service.latency).longAvg()",
+            "endpoint_resp_time = from(Endpoint.latency).longAvg(); //comment test" + "\n" + "Service_avg = from(Service.latency).longAvg()",
             TEST_SOURCE_PACKAGE
         );
         List<AnalysisResult> results = parser.parse().getMetricsStmts();
 
         Assert.assertEquals(2, results.size());
 
         AnalysisResult endpointAvg = results.get(0);
-        Assert.assertEquals("EndpointAvg", endpointAvg.getMetricsName());
+        Assert.assertEquals("EndpointRespTime", endpointAvg.getMetricsName());
         Assert.assertEquals("Endpoint", endpointAvg.getFrom().getSourceName());
         Assert.assertEquals("[latency]", endpointAvg.getFrom().getSourceAttribute().toString());
         Assert.assertEquals("longAvg", endpointAvg.getAggregationFuncStmt().getAggregationFunctionName());

File: oap-server/server-storage-plugin/storage-iotdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/iotdb/base/IoTDBInsertRequest.java
Patch:
@@ -61,8 +61,8 @@ public <T extends StorageData> IoTDBInsertRequest(String modelName, long time, T
             if (index.equals(IoTDBIndexes.ID_IDX)) {
                 indexValues.add(storageData.id());
             } else if (storageMap.containsKey(index)) {
-                // avoid `service_group` be "null" when inserting
-                if (index.equals(IoTDBIndexes.GROUP_IDX) && storageMap.get(index) == null) {
+                // avoid indexValue be "null" when inserting
+                if (storageMap.get(index) == null) {
                     indexValues.add("");
                 } else {
                     indexValues.add(String.valueOf(storageMap.get(index)));

File: oap-server/server-storage-plugin/storage-iotdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/iotdb/base/IoTDBRecordDAO.java
Patch:
@@ -74,9 +74,6 @@ public InsertRequest prepareBatchInsert(Model model, Record record) {
                 measurementValues.add(rawTag.getValue());
             });
         }
-        request.setMeasurements(measurements);
-        request.setMeasurementTypes(measurementTypes);
-        request.setMeasurementValues(measurementValues);
         return request;
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/instance/InstanceTraffic.java
Patch:
@@ -106,6 +106,7 @@ public int remoteHashCode() {
     public void deserialize(final RemoteData remoteData) {
         setServiceId(remoteData.getDataStrings(0));
         setName(remoteData.getDataStrings(1));
+        setLayer(Layer.valueOf(remoteData.getDataIntegers(0)));
         final String propString = remoteData.getDataStrings(2);
         if (StringUtil.isNotEmpty(propString)) {
             setProperties(GSON.fromJson(propString, JsonObject.class));
@@ -119,6 +120,7 @@ public RemoteData.Builder serialize() {
         final RemoteData.Builder builder = RemoteData.newBuilder();
         builder.addDataStrings(serviceId);
         builder.addDataStrings(name);
+        builder.addDataIntegers(layer.value());
         if (properties == null) {
             builder.addDataStrings(Const.EMPTY_STRING);
         } else {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/instance/BrowserAppSingleVersionTrafficDispatcher.java
Patch:
@@ -31,6 +31,7 @@ protected void dispatchInterval(final BrowserAppSingleVersionTraffic source) {
         traffic.setName(source.getName());
         traffic.setServiceId(source.getServiceId());
         traffic.setLastPingTimestamp(source.getTimeBucket());
+        traffic.setLayer(source.getLayer());
         MetricsStreamProcessor.getInstance().in(traffic);
     }
 }

File: oap-server/server-storage-plugin/storage-iotdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/iotdb/query/IoTDBMetadataQueryDAO.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Map;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.skywalking.oap.server.core.analysis.Layer;
 import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
 import org.apache.skywalking.oap.server.core.analysis.manual.endpoint.EndpointTraffic;
 import org.apache.skywalking.oap.server.core.analysis.manual.instance.InstanceTraffic;
@@ -59,7 +60,7 @@ public List<Service> listServices(final String layer, final String group) throws
         query = client.addModelPath(query, ServiceTraffic.INDEX_NAME);
         Map<String, String> indexAndValueMap = new HashMap<>();
         if (StringUtil.isNotEmpty(layer)) {
-            indexAndValueMap.put(IoTDBIndexes.LAYER_IDX, layer);
+            indexAndValueMap.put(IoTDBIndexes.LAYER_IDX, String.valueOf(Layer.valueOf(layer).value()));
         }
         if (StringUtil.isNotEmpty(group)) {
             indexAndValueMap.put(IoTDBIndexes.GROUP_IDX, group);
@@ -168,7 +169,7 @@ private List<ServiceInstance> buildInstances(List<? super StorageData> storageDa
             serviceInstance.setId(instanceTraffic.id());
             serviceInstance.setName(instanceTraffic.getName());
             serviceInstance.setInstanceUUID(serviceInstance.getId());
-            serviceInstance.setLayer(serviceInstance.getLayer());
+            serviceInstance.setLayer(instanceTraffic.getLayer().name());
 
             JsonObject properties = instanceTraffic.getProperties();
             if (properties != null) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/GCPhase.java
Patch:
@@ -18,6 +18,6 @@
 
 package org.apache.skywalking.oap.server.core.source;
 
-public enum GCPhrase {
+public enum GCPhase {
     NEW, OLD
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMGC.java
Patch:
@@ -54,7 +54,7 @@ public String getEntityId() {
     private String serviceId;
     @Getter
     @Setter
-    private GCPhrase phrase;
+    private GCPhase phase;
     @Getter
     @Setter
     private long time;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/IndexController.java
Patch:
@@ -88,7 +88,7 @@ public static class LogicIndicesRegister {
         public static final String METRIC_TABLE_NAME = "metric_table";
 
         public static String getPhysicalTableName(String logicName) {
-            return Optional.of(LOGIC_INDICES_CATALOG.get(logicName)).orElse(logicName);
+            return Optional.ofNullable(LOGIC_INDICES_CATALOG.get(logicName)).orElse(logicName);
         }
 
         public static void registerRelation(String logicName, String physicalName) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AggregationQueryDAO.java
Patch:
@@ -61,8 +61,7 @@ public List<SelectedRecord> sortMetrics(final TopNCondition metrics,
             });
         }
         sql.append(" group by ").append(Metrics.ENTITY_ID);
-        sql.append(")  as T order by ")
-           .append(valueColumnName)
+        sql.append(")  as T order by result")
            .append(metrics.getOrder().equals(Order.ASC) ? " asc" : " desc")
            .append(" limit ")
            .append(metrics.getTopN());

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/postgresql/dao/PostgreSQLAggregationQueryDAO.java
Patch:
@@ -33,7 +33,7 @@ protected StringBuilder buildMetricsValueSql(String valueColumnName, String metr
         StringBuilder sql = new StringBuilder();
         sql.append("select * from (select avg(")
                 .append(valueColumnName)
-                .append(") as value,")
+                .append(") as result,")
                 .append(Metrics.ENTITY_ID)
                 .append(" from ")
                 .append(metricsName)

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/postgresql/dao/PostgreSQLMetricsQueryDAO.java
Patch:
@@ -31,6 +31,6 @@ public PostgreSQLMetricsQueryDAO(JDBCHikariCPClient h2Client) {
     @Override
     protected StringBuilder buildMetricsValueSql(String op, String valueColumnName, String conditionName) {
         return new StringBuilder(
-                "select " + Metrics.ENTITY_ID + " id, " + op + "(" + valueColumnName + ") as value from " + conditionName + " where ");
+                "select " + Metrics.ENTITY_ID + " id, " + op + "(" + valueColumnName + ") as result from " + conditionName + " where ");
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java
Patch:
@@ -166,6 +166,7 @@ private void retrieval(final Class<?> clazz,
     public void overrideColumnName(String columnName, String newName) {
         columnNameOverrideRule.put(columnName, newName);
         models.forEach(this::followColumnNameRules);
+        ValueColumnMetadata.INSTANCE.overrideColumnName(columnName, newName);
     }
 
     private void followColumnNameRules(Model model) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java
Patch:
@@ -82,8 +82,8 @@ public long readMetricsValue(final MetricsCondition condition,
                 sql.toString(),
                 parameters.toArray(new Object[0])
             )) {
-                while (resultSet.next()) {
-                    return resultSet.getLong("value");
+                if (resultSet.next()) {
+                    return resultSet.getLong("result");
                 }
             }
         } catch (SQLException e) {
@@ -94,7 +94,7 @@ public long readMetricsValue(final MetricsCondition condition,
 
     protected StringBuilder buildMetricsValueSql(String op, String valueColumnName, String conditionName) {
         return new StringBuilder(
-                "select " + Metrics.ENTITY_ID + " id, " + op + "(" + valueColumnName + ") value from " + conditionName + " where ");
+                "select " + Metrics.ENTITY_ID + " id, " + op + "(" + valueColumnName + ") result from " + conditionName + " where ");
     }
 
     @Override

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TableInstaller.java
Patch:
@@ -56,6 +56,7 @@ public H2TableInstaller(Client client,
         super(client, moduleManager);
         this.maxSizeOfArrayColumn = maxSizeOfArrayColumn;
         this.numOfSearchableValuesPerTag = numOfSearchableValuesPerTag;
+        overrideColumnName("value", "value_");
     }
 
     @Override

File: test/e2e-v2/java-test-service/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/User.java
Patch:
@@ -22,13 +22,15 @@
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.Id;
+import javax.persistence.Table;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.RequiredArgsConstructor;
 
 @Data
 @Entity
+@Table(name = "users")
 @Builder
 @AllArgsConstructor
 @RequiredArgsConstructor

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/StringMatch.java
Patch:
@@ -25,12 +25,12 @@
 public class StringMatch {
 
     public boolean match(String left, String right) {
-        if (left.startsWith("\"") && left.endsWith("\"")) {
+        if (left != null && left.startsWith("\"") && left.endsWith("\"")) {
             left = left.substring(1, left.length() - 1);
         }
 
-        if (right.startsWith("\"") && right.endsWith("\"")) {
-            right = left.substring(1, right.length() - 1);
+        if (right != null && right.startsWith("\"") && right.endsWith("\"")) {
+            right = right.substring(1, right.length() - 1);
         }
 
         return Objects.equals(left, right);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Entity.java
Patch:
@@ -89,7 +89,7 @@ public boolean isValid() {
                     && Objects.nonNull(serviceInstanceName) && Objects.nonNull(destServiceInstanceName)
                     && Objects.nonNull(normal) && Objects.nonNull(destNormal);
             case EndpointRelation:
-                return Objects.nonNull(serviceName) && Objects.nonNull(endpointName)
+                return Objects.nonNull(serviceName) && Objects.nonNull(destServiceName)
                     && Objects.nonNull(endpointName) && Objects.nonNull(destEndpointName)
                     && Objects.nonNull(normal) && Objects.nonNull(destNormal);
             default:

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/TopologyQuery.java
Patch:
@@ -169,9 +169,7 @@ public List<Call.CallDetail> loadEndpointRelation(final long startTB,
         );
         subQuery2.and(eq(EndpointRelationServerSideMetrics.SOURCE_ENDPOINT, destEndpointId));
 
-        final List<Call.CallDetail> calls = buildEndpointCalls(buildQuery(subQuery), DetectPoint.SERVER);
-        calls.addAll(buildEndpointCalls(buildQuery(subQuery), DetectPoint.CLIENT));
-        return calls;
+        return buildEndpointCalls(buildQuery(subQuery), DetectPoint.SERVER);
     }
 
     private WhereSubQueryImpl<SelectSubQueryImpl<SelectQueryImpl>, SelectQueryImpl> buildServiceCallsQuery(

File: oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/grpc/GRPCExporter.java
Patch:
@@ -104,8 +104,8 @@ public void export(ExportEvent event) {
     public void fetchSubscriptionList() {
         final long currentTimeMillis = System.currentTimeMillis();
         if (currentTimeMillis - lastFetchTimestamp > FETCH_SUBSCRIPTION_PERIOD) {
+            fetchListLock.lock();
             try {
-                fetchListLock.lock();
                 if (currentTimeMillis - lastFetchTimestamp > FETCH_SUBSCRIPTION_PERIOD) {
                     lastFetchTimestamp = currentTimeMillis;
                     SubscriptionsResp subscription = blockingStub.withDeadlineAfter(10, TimeUnit.SECONDS)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java
Patch:
@@ -179,14 +179,14 @@ public void in(Metrics metrics) {
     @Override
     public List<PrepareRequest> buildBatchRequests() {
         if (persistentCounter++ % persistentMod != 0) {
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
         }
 
         final List<Metrics> lastCollection = getCache().read();
 
         long start = System.currentTimeMillis();
         if (lastCollection.size() == 0) {
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
         }
 
         /*

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/IBatchDAO.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.storage;
 
 import java.util.List;
+import java.util.concurrent.CompletableFuture;
 import org.apache.skywalking.oap.server.library.client.request.InsertRequest;
 import org.apache.skywalking.oap.server.library.client.request.PrepareRequest;
 
@@ -43,5 +44,5 @@ public interface IBatchDAO extends DAO {
      *
      * @param prepareRequests data to insert or update. No delete happens in streaming mode.
      */
-    void flush(List<PrepareRequest> prepareRequests);
+    CompletableFuture<Void> flush(List<PrepareRequest> prepareRequests);
 }

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/meter/config/MeterConfig.java
Patch:
@@ -29,6 +29,7 @@
 public class MeterConfig implements MetricRuleConfig {
     private String metricPrefix;
     private String expSuffix;
+    private String filter;
     private List<Rule> metricsRules;
 
     @Data

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/meter/process/MeterProcessor.java
Patch:
@@ -133,7 +133,7 @@ public void process() {
         }
 
         try {
-            converts.stream().forEach(convert -> convert.toMeter(meters.entrySet().stream().collect(toImmutableMap(
+            converts.forEach(convert -> convert.toMeter(meters.entrySet().stream().collect(toImmutableMap(
                 Map.Entry::getKey,
                 v -> SampleFamilyBuilder.newBuilder(
                     v.getValue().stream().map(s -> s.build(service, serviceInstance, timestamp)).toArray(Sample[]::new)

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/MetricConvert.java
Patch:
@@ -51,6 +51,7 @@ public MetricConvert(MetricRuleConfig rule, MeterSystem service) {
         this.analyzers = rule.getMetricsRules().stream().map(
             r -> Analyzer.build(
                 formatMetricName(rule, r.getName()),
+                rule.getFilter(),
                 Strings.isNullOrEmpty(rule.getExpSuffix()) ?
                     r.getExp() : String.format("(%s).%s", r.getExp(), rule.getExpSuffix()),
                 service

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/MetricRuleConfig.java
Patch:
@@ -40,6 +40,8 @@ public interface MetricRuleConfig {
      */
     List<? extends RuleConfig> getMetricsRules();
 
+    String getFilter();
+
     interface RuleConfig {
         /**
          * Get definition metrics name

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/prometheus/rule/Rule.java
Patch:
@@ -37,5 +37,6 @@ public class Rule implements MetricRuleConfig {
     private StaticConfig staticConfig;
     private String metricPrefix;
     private String expSuffix;
+    private String filter;
     private List<MetricsRule> metricsRules;
 }

File: oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/AnalyzerTest.java
Patch:
@@ -87,6 +87,7 @@ public static void tearDown() {
     public void testSingle() {
         analyzer = Analyzer.build(
             "sum_service_instance",
+            null,
             "http_success_request.sum(['region', 'idc']).instance(['idc'] , ['region'])",
             meterSystem
         );
@@ -130,6 +131,7 @@ public void testSingle() {
     public void testLabeled() {
         analyzer = Analyzer.build(
             "sum_service_instance_labels",
+            null,
             "http_success_request.sum(['region', 'idc' , 'instance']).instance(['idc'] , ['region'])",
             meterSystem
         );
@@ -178,6 +180,7 @@ public void testLabeled() {
     public void testHistogramPercentile() {
         analyzer = Analyzer.build(
             "instance_cpu_percentage",
+            null,
             "instance_cpu_percentage.sum(['le' , 'service' , 'instance']).histogram().histogram_percentile([75,99]).service(['service'])",
             meterSystem
         );

File: oap-server/server-receiver-plugin/skywalking-zabbix-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zabbix/provider/config/ZabbixConfig.java
Patch:
@@ -28,6 +28,7 @@ public class ZabbixConfig implements MetricRuleConfig {
 
     private String metricPrefix;
     private String expSuffix;
+    private String filter;
     private Entities entities;
     private List<String> requiredZabbixItemKeys;
     private List<Metric> metrics;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics.java
Patch:
@@ -33,7 +33,7 @@
 @EqualsAndHashCode(of = {
     "timeBucket"
 })
-public abstract class Metrics extends StreamData implements StorageData {
+public abstract class Metrics extends StreamData implements StorageData, HavingDefaultValue {
 
     public static final String TIME_BUCKET = "time_bucket";
     public static final String ENTITY_ID = "entity_id";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/service/ServiceTraffic.java
Patch:
@@ -80,7 +80,6 @@ public int remoteHashCode() {
     public void deserialize(final RemoteData remoteData) {
         setName(remoteData.getDataStrings(0));
         setNodeType(NodeType.valueOf(remoteData.getDataIntegers(0)));
-        // Time bucket is not a part of persistent, but still is required in the first time insert.
         setTimeBucket(remoteData.getDataLongs(0));
     }
 
@@ -89,7 +88,6 @@ public RemoteData.Builder serialize() {
         final RemoteData.Builder builder = RemoteData.newBuilder();
         builder.addDataStrings(name);
         builder.addDataIntegers(nodeType.value());
-        // Time bucket is not a part of persistent, but still is required in the first time insert.
         builder.addDataLongs(getTimeBucket());
         return builder;
     }
@@ -102,6 +100,7 @@ public ServiceTraffic storage2Entity(final Map<String, Object> dbMap) {
             serviceTraffic.setName((String) dbMap.get(NAME));
             serviceTraffic.setNodeType(NodeType.valueOf(((Number) dbMap.get(NODE_TYPE)).intValue()));
             serviceTraffic.setGroup((String) dbMap.get(GROUP));
+            serviceTraffic.setTimeBucket(((Number) dbMap.get(TIME_BUCKET)).longValue());
             return serviceTraffic;
         }
 
@@ -118,6 +117,7 @@ public Map<String, Object> entity2Storage(final ServiceTraffic storageData) {
             map.put(NAME, serviceName);
             map.put(NODE_TYPE, storageData.getNodeType().value());
             map.put(GROUP, storageData.getGroup());
+            map.put(TIME_BUCKET, storageData.getTimeBucket());
             return map;
         }
     }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/Query.java
Patch:
@@ -19,10 +19,12 @@
 package org.apache.skywalking.oap.query.graphql.resolver;
 
 import com.coxautodev.graphql.tools.GraphQLQueryResolver;
+import org.apache.skywalking.oap.server.core.version.Version;
 
 /**
  * Root Query Resolver.
  */
 public class Query implements GraphQLQueryResolver {
-    private String version = "8.0";
+    @SuppressWarnings("unused") // Used in GraphQL query
+    private final String version = Version.CURRENT.toString();
 }

File: oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/OAPServerBootstrap.java
Patch:
@@ -20,6 +20,7 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.oap.server.core.RunningMode;
+import org.apache.skywalking.oap.server.core.version.Version;
 import org.apache.skywalking.oap.server.library.module.ApplicationConfiguration;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.starter.config.ApplicationConfigLoader;
@@ -49,6 +50,8 @@ public static void start() {
                    // Set uptime to second
                    .setValue(System.currentTimeMillis() / 1000d);
 
+            log.info("Version of OAP: {}", Version.CURRENT);
+
             if (RunningMode.isInitMode()) {
                 log.info("OAP starts up in init mode successfully, exit now...");
                 System.exit(0);

File: oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/module/KafkaFetcherConfig.java
Patch:
@@ -67,9 +67,9 @@ public class KafkaFetcherConfig extends ModuleConfig {
      */
     private int replicationFactor = 2;
 
-    private boolean enableNativeProtoLog = false;
+    private boolean enableNativeProtoLog = true;
 
-    private boolean enableNativeJsonLog = false;
+    private boolean enableNativeJsonLog = true;
 
     private String configPath = "meter-analyzer-config";
 

File: test/e2e-v2/java-test-service/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/controller/FileLogController.java
Patch:
@@ -33,9 +33,9 @@ public class FileLogController {
 
     @RequestMapping(value = "/file/logs/trigger")
     public String trigger() {
-        LOG4J_LOGGER.info("log4j fileLogger ==> mills: " + System.currentTimeMillis());
-        LOG4J2_LOGGER.info("log4j2 fileLogger ==> mills: " + System.currentTimeMillis());
-        LOGBACK_LOGGER.info("logback fileLogger ==> mills: {}", System.currentTimeMillis());
+        LOG4J_LOGGER.info("log4j fileLogger ==> mills-> " + System.currentTimeMillis());
+        LOG4J2_LOGGER.info("log4j2 fileLogger ==> mills->" + System.currentTimeMillis());
+        LOGBACK_LOGGER.info("logback fileLogger ==> mills-> {}", System.currentTimeMillis());
         return TraceContext.traceId();
     }
 }

File: test/e2e-v2/java-test-service/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/controller/LogController.java
Patch:
@@ -34,9 +34,9 @@ public class LogController {
 
     @RequestMapping(value = "/logs/trigger")
     public String trigger() {
-        LOG4J_LOGGER.info("log4j message==> now: " + System.currentTimeMillis());
-        LOG4J2_LOGGER.info("log4j2 message==> now: " + System.currentTimeMillis());
-        LOGBACK_LOGGER.info("logback message==> now: {}", System.currentTimeMillis());
+        LOG4J_LOGGER.info("log4j message==> now-> " + System.currentTimeMillis());
+        LOG4J2_LOGGER.info("log4j2 message==> now-> " + System.currentTimeMillis());
+        LOGBACK_LOGGER.info("logback message==> now-> {}", System.currentTimeMillis());
         return TraceContext.traceId();
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Event.java
Patch:
@@ -138,7 +138,7 @@ public boolean combine(final Metrics metrics) {
             setType(event.getType());
         }
         if (isNotBlank(event.getMessage())) {
-            setType(event.getMessage());
+            setMessage(event.getMessage());
         }
         if (isNotBlank(event.getParameters())) {
             setParameters(event.getParameters());

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java
Patch:
@@ -295,7 +295,7 @@ private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompile
             constPool, AnnotationsAttribute.visibleTag);
         Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);
         streamAnnotation.addMemberValue("name", new StringMemberValue(metricsStmt.getTableName(), constPool));
-        streamAnnotation.addMemberValue("scopeId", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));
+        streamAnnotation.addMemberValue("scopeId", new IntegerMemberValue(constPool, metricsStmt.getFrom().getSourceScopeId()));
         streamAnnotation.addMemberValue(
             "builder", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));
         streamAnnotation.addMemberValue("processor", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));
@@ -460,7 +460,7 @@ private String dispatcherClassName(String scopeName, boolean fullName) {
     }
 
     private void buildDispatcherContext(AnalysisResult metricsStmt) {
-        String sourceName = metricsStmt.getSourceName();
+        String sourceName = metricsStmt.getFrom().getSourceName();
 
         DispatcherContext context = allDispatcherContext.getAllContext().computeIfAbsent(sourceName, name -> {
             DispatcherContext absent = new DispatcherContext();

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java
Patch:
@@ -36,6 +36,7 @@ public class ConditionExpression {
     private String value;
     private List<String> values;
     private boolean number;
+    private String castType;
 
     public ConditionExpression(final String expressionType, final String attributes, final String value) {
         this.expressionType = expressionType;

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/ElasticSearchVersion.java
Patch:
@@ -43,7 +43,7 @@ private ElasticSearchVersion(final String distribution, final int major, final i
 
         if (distribution.equalsIgnoreCase("OpenSearch")) {
             requestFactory = new V78RequestFactory(this);
-            codec = V7Codec.INSTANCE;
+            codec = V78Codec.INSTANCE;
             return;
         }
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java
Patch:
@@ -121,7 +121,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,
         }
         if (CollectionUtils.isNotEmpty(tags)) {
             BoolQueryBuilder tagMatchQuery = Query.bool();
-            tags.forEach(tag -> tagMatchQuery.must(Query.term(SegmentRecord.TAGS, tag)));
+            tags.forEach(tag -> tagMatchQuery.must(Query.term(SegmentRecord.TAGS, tag.toString())));
             query.must(tagMatchQuery);
         }
         search.size(limit).from(from);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.skywalking.oap.server.core.analysis.worker;
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -160,11 +159,13 @@ public void in(Metrics metrics) {
     }
 
     @Override
-    public List<PrepareRequest> prepareBatch(Collection<Metrics> lastCollection) {
+    public List<PrepareRequest> buildBatchRequests() {
         if (persistentCounter++ % persistentMod != 0) {
             return Collections.EMPTY_LIST;
         }
 
+        final List<Metrics> lastCollection = getCache().read();
+
         long start = System.currentTimeMillis();
         if (lastCollection.size() == 0) {
             return Collections.EMPTY_LIST;

File: oap-server/server-library/library-elasticsearch-client/src/test/java/org/apache/skywalking/library/elasticsearch/ITElasticSearchTest.java
Patch:
@@ -99,6 +99,8 @@ public void testTemplate() {
         assertThat(templateClient.createOrUpdate(name, ImmutableMap.of(), mappings, 0))
             .isTrue();
 
+        assertThat(templateClient.exists(name)).isTrue();
+
         assertThat(templateClient.get(name))
             .isPresent()
             .map(IndexTemplate::getMappings)

File: oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/LogHandler.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.skywalking.oap.server.telemetry.api.MetricsTag;
 
 @Slf4j
-public class LogHandler implements KafkaHandler {
+public class LogHandler extends AbstractKafkaHandler {
 
     private final KafkaFetcherConfig config;
     private final HistogramMetrics histogram;
@@ -41,6 +41,7 @@ public class LogHandler implements KafkaHandler {
 
     public LogHandler(final ModuleManager moduleManager,
                       final KafkaFetcherConfig config) {
+        super(moduleManager, config);
         this.config = config;
         this.logAnalyzerService = moduleManager.find(LogAnalyzerModule.NAME)
                                                .provider()
@@ -69,7 +70,7 @@ public String getConsumePartitions() {
     }
 
     @Override
-    public String getTopic() {
+    protected String getPlainTopic() {
         return config.getTopicNameOfLogs();
     }
 

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/ElasticSearchVersion.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.library.elasticsearch.requests.factory.v6.codec.V6Codec;
 import org.apache.skywalking.library.elasticsearch.requests.factory.v7.V78RequestFactory;
 import org.apache.skywalking.library.elasticsearch.requests.factory.v7.V7RequestFactory;
+import org.apache.skywalking.library.elasticsearch.requests.factory.v7.codec.V78Codec;
 import org.apache.skywalking.library.elasticsearch.requests.factory.v7.codec.V7Codec;
 
 public final class ElasticSearchVersion {
@@ -53,11 +54,12 @@ private ElasticSearchVersion(final String distribution, final int major, final i
                 return;
             }
             if (major == 7) {
-                codec = V7Codec.INSTANCE;
                 if (minor < 8) { // [7.0, 7.8)
                     requestFactory = new V7RequestFactory(this);
+                    codec = V7Codec.INSTANCE;
                 } else { // [7.8, 8.0)
                     requestFactory = new V78RequestFactory(this);
+                    codec = V78Codec.INSTANCE;
                 }
                 return;
             }

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/requests/factory/v6/codec/V6MappingsDeserializer.java
Patch:
@@ -33,7 +33,7 @@ public Mappings deserialize(final JsonParser p, final DeserializationContext ctx
         throws IOException {
 
         final Map<String, Object> m =
-            p.readValueAs(new TypeReference<Map<String, Object>>() {
+            p.getCodec().readValue(p, new TypeReference<Map<String, Object>>() {
             });
         final Optional<Map.Entry<String, Object>> typeMapping =
             m.entrySet()

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/requests/factory/v7/codec/V7MappingsDeserializer.java
Patch:
@@ -33,14 +33,14 @@ public Mappings deserialize(final JsonParser p, final DeserializationContext ctx
         throws IOException {
 
         final Map<String, Object> m =
-            p.readValueAs(new TypeReference<Map<String, Object>>() {
+            p.getCodec().readValue(p, new TypeReference<Map<String, Object>>() {
             });
 
         final Iterator<Map.Entry<String, Object>> it = m.entrySet().iterator();
         if (it.hasNext()) {
             final Map.Entry<String, Object> first = it.next();
             final Mappings mappings = new Mappings();
-            mappings.setType(first.getKey());
+            mappings.setType("_doc");
             mappings.setProperties((Map<String, Object>) first.getValue());
             return mappings;
         }

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/response/IndexTemplate.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.skywalking.library.elasticsearch.response;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
 import java.util.List;
 import java.util.Map;
 import lombok.Data;
@@ -25,6 +26,7 @@
 public final class IndexTemplate {
     private String name;
     private int order;
+    @JsonProperty("index_patterns")
     private List<String> indexPatterns;
     private Map<String, Object> settings;
     private Mappings mappings;

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/response/IndexTemplates.java
Patch:
@@ -22,10 +22,12 @@
 import java.util.Map;
 import java.util.Optional;
 import lombok.Data;
+import lombok.RequiredArgsConstructor;
 
 @Data
+@RequiredArgsConstructor
 public final class IndexTemplates implements Iterable<IndexTemplate> {
-    private Map<String, IndexTemplate> templates;
+    private final Map<String, IndexTemplate> templates;
 
     public Optional<IndexTemplate> get(String name) {
         final Map<String, IndexTemplate> templates = getTemplates();

File: oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/response/Mappings.java
Patch:
@@ -22,13 +22,15 @@
 import java.util.Map;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
+import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
 
 @Builder
 @ToString
+@EqualsAndHashCode
 @NoArgsConstructor // For deserialization
 @AllArgsConstructor
 public final class Mappings {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AggregationQueryEsDAO.java
Patch:
@@ -82,7 +82,7 @@ public List<SelectedRecord> sortMetrics(final TopNCondition condition,
                          condition.getName()
                      ));
             additionalConditions.forEach(additionalCondition -> boolQuery
-                .must(Query.term(
+                .must(Query.terms(
                     additionalCondition.getKey(),
                     additionalCondition.getValue()
                 )));
@@ -91,7 +91,7 @@ public List<SelectedRecord> sortMetrics(final TopNCondition condition,
         } else {
             final BoolQueryBuilder boolQuery = Query.bool();
             additionalConditions.forEach(additionalCondition -> boolQuery
-                .must(Query.term(
+                .must(Query.terms(
                     additionalCondition.getKey(),
                     additionalCondition.getValue()
                 )));

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AggregationQueryEsDAO.java
Patch:
@@ -118,7 +118,7 @@ public List<SelectedRecord> sortMetrics(final TopNCondition condition,
             SelectedRecord record = new SelectedRecord();
             record.setId((String) termsBucket.get("key"));
             Map<String, Object> value = (Map<String, Object>) termsBucket.get(valueColumnName);
-            record.setValue(String.valueOf(value.get("value")));
+            record.setValue(String.valueOf(((Number) value.get("value")).longValue()));
             topNList.add(record);
         }
 

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/ProfileThreadSnapshotQuery.java
Patch:
@@ -77,7 +77,7 @@ public List<BasicTrace> queryProfiledSegments(String taskId) throws IOException
         }
 
         final WhereQueryImpl<SelectQueryImpl> whereQuery = select()
-            .function(InfluxConstants.SORT_ASC, SegmentRecord.START_TIME, segments.size())
+            .function(InfluxConstants.SORT_DES, SegmentRecord.START_TIME, segments.size())
             .column(SegmentRecord.SEGMENT_ID)
             .column(SegmentRecord.START_TIME)
             .column(SegmentRecord.ENDPOINT_ID)

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/LogTestQuery.java
Patch:
@@ -53,7 +53,9 @@ public class LogTestQuery implements GraphQLQueryResolver {
 
     public LogTestResponse test(LogTestRequest request) throws Exception {
         if (!config.isEnableLogTestTool()) {
-            throw new IllegalAccessException("LAL debug tool is not enabled");
+            throw new IllegalAccessException(
+                "LAL debug tool is not enabled. To enable, please set SW_QUERY_GRAPHQL_ENABLE_LOG_TEST_TOOL=true," +
+                    "for more details, refer to https://skywalking.apache.org/docs/main/latest/en/setup/backend/configuration-vocabulary/");
         }
 
         requireNonNull(request, "request");

File: oap-server/server-query-plugin/query-graphql-plugin/src/test/java/org/apache/skywalking/oap/query/graphql/resolver/LogTestQueryTest.java
Patch:
@@ -86,7 +86,7 @@ public void shouldThrowWhenDisabled() {
             fail();
         } catch (Exception e) {
             assertTrue(e instanceof IllegalAccessException);
-            assertEquals("LAL debug tool is not enabled", e.getMessage());
+            assertTrue(e.getMessage().contains("LAL debug tool is not enabled"));
         }
     }
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java
Patch:
@@ -163,6 +163,7 @@ public Service searchService(String serviceCode) throws IOException {
                     Service service = new Service();
                     service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));
                     service.setName(resultSet.getString(ServiceTraffic.NAME));
+                    service.setGroup(resultSet.getString(ServiceTraffic.GROUP));
                     return service;
                 }
             }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -376,6 +376,9 @@ public void notifyAfterCompleted() throws ModuleStartException {
         try {
             final File[] templateFiles = ResourceUtils.getPathFiles("ui-initialized-templates");
             for (final File templateFile : templateFiles) {
+                if (!templateFile.getName().endsWith(".yml") && !templateFile.getName().endsWith(".yaml")) {
+                    continue;
+                }
                 new UITemplateInitializer(new FileInputStream(templateFile))
                     .read()
                     .forEach(uiTemplate -> {

File: oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 import org.apache.skywalking.oap.server.core.analysis.metrics.expression.BooleanMatch;
 import org.apache.skywalking.oap.server.core.analysis.metrics.expression.BooleanNotEqualMatch;
-import org.apache.skywalking.oap.server.core.analysis.metrics.expression.EqualMatch;
+import org.apache.skywalking.oap.server.core.analysis.metrics.expression.StringMatch;
 import org.apache.skywalking.oap.server.core.analysis.metrics.expression.NotEqualMatch;
 import org.apache.skywalking.oap.server.core.annotation.AnnotationScan;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
@@ -127,7 +127,7 @@ public void testFilterAnalysis() {
         List<Expression> filterExpressions = result.getFilterExpressions();
         Assert.assertEquals(1, filterExpressions.size());
         Expression filterExpression = filterExpressions.get(0);
-        Assert.assertEquals(EqualMatch.class.getName(), filterExpression.getExpressionObject());
+        Assert.assertEquals(StringMatch.class.getName(), filterExpression.getExpressionObject());
         Assert.assertEquals("source.getName()", filterExpression.getLeft());
         Assert.assertEquals("\"/service/prod/save\"", filterExpression.getRight());
     }
@@ -157,7 +157,7 @@ public void shouldUseCorrectMatcher() {
         result.addFilterExpressionsParserResult(new ConditionExpression("stringMatch", "type", ""));
         result = analysis.analysis(result);
         assertTrue(result.getFilterExpressions().size() > 0);
-        assertEquals(EqualMatch.class.getName(), result.getFilterExpressions().get(0).getExpressionObject());
+        assertEquals(StringMatch.class.getName(), result.getFilterExpressions().get(0).getExpressionObject());
         assertEquals("source.getType()", result.getFilterExpressions().get(0).getLeft());
 
         result.setFilterExpressions(null);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/StringMatch.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.FilterMatcher;
 
 @FilterMatcher("stringMatch")
-public class EqualMatch {
+public class StringMatch {
 
     public boolean match(String left, String right) {
         if (left.startsWith("\"") && left.endsWith("\"")) {

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java
Patch:
@@ -26,7 +26,6 @@
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;
-import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.alarm.AlarmModule;
 import org.apache.skywalking.oap.server.core.alarm.provider.dingtalk.DingtalkSettings;
 import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;
@@ -58,7 +57,7 @@ public AlarmRulesWatcher(Rules defaultRules, ModuleProvider provider) {
         super(AlarmModule.NAME, provider, "alarm-settings");
         this.runningContext = new HashMap<>();
         this.alarmRuleRunningRuleMap = new HashMap<>();
-        this.settingsString = Const.EMPTY_STRING;
+        this.settingsString = null;
         Expression expression = new Expression(new ExpressionContext());
         this.compositeRuleEvaluator = new CompositeRuleEvaluator(expression);
         notify(defaultRules);
@@ -67,7 +66,7 @@ public AlarmRulesWatcher(Rules defaultRules, ModuleProvider provider) {
     @Override
     public void notify(ConfigChangeEvent value) {
         if (value.getEventType().equals(EventType.DELETE)) {
-            settingsString = Const.EMPTY_STRING;
+            settingsString = null;
             notify(new Rules());
         } else {
             settingsString = value.getNewValue();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/group/EndpointNameGroupingRuleWatcher.java
Patch:
@@ -47,7 +47,7 @@ public EndpointNameGroupingRuleWatcher(ModuleProvider provider,
     @Override
     public void notify(final ConfigChangeEvent value) {
         if (value.getEventType().equals(EventType.DELETE)) {
-            ruleSetting = "";
+            ruleSetting = null;
             grouping.setEndpointGroupingRule(new EndpointGroupingRule());
         } else {
             ruleSetting = value.getNewValue();

File: oap-server/server-receiver-plugin/configuration-discovery-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/configuration/discovery/AgentConfigurationsWatcher.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;
-import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.library.module.ModuleProvider;
 
 import java.io.StringReader;
@@ -36,7 +35,7 @@ public class AgentConfigurationsWatcher extends ConfigChangeWatcher {
 
     public AgentConfigurationsWatcher(ModuleProvider provider) {
         super(ConfigurationDiscoveryModule.NAME, provider, "agentConfigurations");
-        this.settingsString = Const.EMPTY_STRING;
+        this.settingsString = null;
         this.agentConfigurationsTable = new AgentConfigurationsTable();
         this.emptyAgentConfigurations = new AgentConfigurations(
             null, new HashMap<>(), DigestUtils.sha512Hex("EMPTY")
@@ -46,7 +45,7 @@ public AgentConfigurationsWatcher(ModuleProvider provider) {
     @Override
     public void notify(ConfigChangeEvent value) {
         if (value.getEventType().equals(EventType.DELETE)) {
-            settingsString = Const.EMPTY_STRING;
+            settingsString = null;
             this.agentConfigurationsTable = new AgentConfigurationsTable();
         } else {
             settingsString = value.getNewValue();

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/BrowserLogQueryEsDAO.java
Patch:
@@ -32,6 +32,7 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
+import org.elasticsearch.search.sort.SortOrder;
 
 import static java.util.Objects.nonNull;
 
@@ -72,6 +73,7 @@ public BrowserErrorLogs queryBrowserErrorLogs(final String serviceId,
             boolQueryBuilder.must()
                             .add(QueryBuilders.termQuery(BrowserErrorLogRecord.ERROR_CATEGORY, category.getValue()));
         }
+        sourceBuilder.sort(BrowserErrorLogRecord.TIMESTAMP, SortOrder.DESC);
         sourceBuilder.size(limit);
         sourceBuilder.from(from);
         SearchResponse response = getClient()

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/BrowserLogQueryEs7DAO.java
Patch:
@@ -31,6 +31,7 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
+import org.elasticsearch.search.sort.SortOrder;
 
 import static java.util.Objects.nonNull;
 
@@ -71,6 +72,7 @@ public BrowserErrorLogs queryBrowserErrorLogs(final String serviceId,
             boolQueryBuilder.must()
                             .add(QueryBuilders.termQuery(BrowserErrorLogRecord.ERROR_CATEGORY, category.getValue()));
         }
+        sourceBuilder.sort(BrowserErrorLogRecord.TIMESTAMP, SortOrder.DESC);
         sourceBuilder.size(limit);
         sourceBuilder.from(from);
         SearchResponse response = getClient()

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2BrowserLogQueryDAO.java
Patch:
@@ -78,6 +78,8 @@ public BrowserErrorLogs queryBrowserErrorLogs(String serviceId,
             parameters.add(category.getValue());
         }
 
+        sql.append(" order by ").append(BrowserErrorLogRecord.TIMESTAMP).append(" DESC ");
+
         BrowserErrorLogs logs = new BrowserErrorLogs();
         try (Connection connection = h2Client.getConnection()) {
 

File: oap-server/server-configuration/configuration-api/src/main/java/org/apache/skywalking/oap/server/configuration/api/ConfigTable.java
Patch:
@@ -25,7 +25,7 @@
 import lombok.ToString;
 
 /**
- * ConfigTable contains all config.
+ * ConfigTable contains all WatchType.SINGLE config.
  */
 @ToString
 public class ConfigTable {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Event.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.source;
 
+import com.google.common.base.Strings;
 import java.util.HashMap;
 import java.util.Map;
 import lombok.EqualsAndHashCode;
@@ -186,7 +187,7 @@ public RemoteData.Builder serialize() {
         builder.addDataStrings(getName());
         builder.addDataStrings(getType());
         builder.addDataStrings(getMessage());
-        builder.addDataStrings(getParameters());
+        builder.addDataStrings(Strings.nullToEmpty(getParameters()));
 
         builder.addDataLongs(getStartTime());
         builder.addDataLongs(getEndTime());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Database.java
Patch:
@@ -18,14 +18,13 @@
 
 package org.apache.skywalking.oap.server.core.query.type;
 
+import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
 
-/**
- *
- **/
 @Getter
 @Setter
+@EqualsAndHashCode
 public class Database {
     private String id;
     private String name;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Endpoint.java
Patch:
@@ -18,11 +18,13 @@
 
 package org.apache.skywalking.oap.server.core.query.type;
 
+import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
 
 @Getter
 @Setter
+@EqualsAndHashCode
 public class Endpoint {
     private String id;
     private String name;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Service.java
Patch:
@@ -18,11 +18,13 @@
 
 package org.apache.skywalking.oap.server.core.query.type;
 
+import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
 
 @Getter
 @Setter
+@EqualsAndHashCode
 public class Service {
     private String id;
     private String name;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ServiceInstance.java
Patch:
@@ -20,11 +20,13 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.query.enumeration.Language;
 
 @Getter
+@EqualsAndHashCode
 public class ServiceInstance {
     @Setter
     private String id;

File: apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v2/AsyncHandlerWrapper.java
Patch:
@@ -51,7 +51,7 @@ public AsyncHandlerWrapper(AsyncHandler asyncHandler, AbstractSpan span) {
     @Override
     public State onStatusReceived(final HttpResponseStatus httpResponseStatus) throws Exception {
         int statusCode = httpResponseStatus.getStatusCode();
-        Tags.STATUS_CODE.set(asyncSpan, String.valueOf(statusCode));
+        Tags.HTTP_RESPONSE_STATUS_CODE.set(asyncSpan, statusCode);
         if (statusCode >= 400) {
             asyncSpan.errorOccurred();
         }

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/feign/http/v9/DefaultHttpClientInterceptor.java
Patch:
@@ -156,7 +156,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
             AbstractSpan span = ContextManager.activeSpan();
             if (statusCode >= 400) {
                 span.errorOccurred();
-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
             }
         }
 

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/feign/http/v9/LoadBalancerHttpClientInterceptor.java
Patch:
@@ -83,7 +83,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
             AbstractSpan span = ContextManager.activeSpan();
             if (statusCode >= 400) {
                 span.errorOccurred();
-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
             }
         }
 

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -91,7 +91,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
                 AbstractSpan span = ContextManager.activeSpan();
                 if (statusCode >= 400) {
                     span.errorOccurred();
-                    Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+                    Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
                 }
                 HttpRequest httpRequest = (HttpRequest) allArguments[1];
                 // Active HTTP parameter collection automatically in the profiling context.

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/wrapper/HttpAsyncResponseConsumerWrapper.java
Patch:
@@ -49,7 +49,7 @@ public void responseReceived(HttpResponse response) throws IOException, HttpExce
             int statusCode = response.getStatusLine().getStatusCode();
             if (statusCode >= 400) {
                 AbstractSpan span = ContextManager.activeSpan().errorOccurred();
-                Tags.STATUS_CODE.set(span, String.valueOf(statusCode));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
             }
             ContextManager.stopSpan();
         }

File: apm-sniffer/apm-sdk-plugin/httpclient-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpclient/v3/HttpClientExecuteInterceptor.java
Patch:
@@ -77,7 +77,7 @@ public Object afterMethod(final EnhancedInstance objInst, final Method method, f
             final AbstractSpan span = ContextManager.activeSpan();
             if (statusCode >= 400) {
                 span.errorOccurred();
-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
             }
             final HttpMethod httpMethod = (HttpMethod) allArguments[1];
             if (httpMethod == null) {

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v9/server/HandleInterceptor.java
Patch:
@@ -73,7 +73,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         AbstractSpan span = ContextManager.activeSpan();
         if (IS_SERVLET_GET_STATUS_METHOD_EXIST && servletResponse.getStatus() >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(servletResponse.getStatus()));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, servletResponse.getStatus());
         }
         ContextManager.stopSpan();
         ContextManager.getRuntimeContext().remove(Constants.FORWARD_REQUEST_FLAG);

File: apm-sniffer/apm-sdk-plugin/jsonrpc4j-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jsonrpc4j/JsonServiceExporterInterceptor.java
Patch:
@@ -68,7 +68,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] obje
         HttpServletResponse response = (HttpServletResponse) objects[1];
         AbstractSpan span = ContextManager.activeSpan();
         if (IS_SERVLET_GET_STATUS_METHOD_EXIST) {
-            Tags.STATUS_CODE.set(span, String.valueOf(response.getStatus()));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, response.getStatus());
         }
 
         ContextManager.stopSpan();

File: apm-sniffer/apm-sdk-plugin/light4j-plugins/light4j-plugin/src/main/java/org/apache/skywalking/apm/plugin/light4j/HandleRequestInterceptor.java
Patch:
@@ -76,7 +76,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
 
                 if (exchange.getStatusCode() >= 400) {
                     span.errorOccurred();
-                    Tags.STATUS_CODE.set(span, String.valueOf(exchange.getStatusCode()));
+                    Tags.HTTP_RESPONSE_STATUS_CODE.set(span, exchange.getStatusCode());
                 }
 
                 ContextManager.stopSpan(span);

File: apm-sniffer/apm-sdk-plugin/nutz-plugins/http-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/nutz/http/sync/SenderSendInterceptor.java
Patch:
@@ -68,7 +68,7 @@ public Object afterMethod(final EnhancedInstance objInst, final Method method, f
         if (response == null || response.getStatus() >= 400) {
             span.errorOccurred();
             if (response != null)
-                Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(span, response.getStatus());
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/nutz-plugins/mvc-annotation-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/nutz/mvc/ActionMethodInterceptor.java
Patch:
@@ -76,7 +76,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         AbstractSpan span = ContextManager.activeSpan();
         if (response.getStatus() >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, response.getStatus());
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/okhttp-common/src/main/java/org/apache/skywalking/apm/plugin/okhttp/common/RealCallInterceptor.java
Patch:
@@ -107,7 +107,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
             AbstractSpan span = ContextManager.activeSpan();
             if (statusCode >= 400) {
                 span.errorOccurred();
-                Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
             }
         }
 

File: apm-sniffer/apm-sdk-plugin/play-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/play/v2x/TracingFilter.java
Patch:
@@ -80,7 +80,7 @@ public CompletionStage<Result> apply(Function<Http.RequestHeader, CompletionStag
             CompletionStage<Result> stage = next.apply(request).thenApply(result -> {
                 if (result.status() >= 400) {
                     span.errorOccurred();
-                    Tags.STATUS_CODE.set(span, Integer.toString(result.status()));
+                    Tags.HTTP_RESPONSE_STATUS_CODE.set(span, result.status());
                 }
                 try {
                     span.asyncFinish();

File: apm-sniffer/apm-sdk-plugin/resteasy-plugin/resteasy-server-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resteasy/v3/server/SynchronousDispatcherInterceptor.java
Patch:
@@ -61,7 +61,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         AbstractSpan span = ContextManager.activeSpan();
         if (response.getStatus() >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, response.getStatus());
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/ProducerOperationHandlerInterceptor.java
Patch:
@@ -59,7 +59,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         int statusCode = invocation.getStatus().getStatusCode();
         if (statusCode >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/TransportClientHandlerInterceptor.java
Patch:
@@ -68,7 +68,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         int statusCode = invocation.getStatus().getStatusCode();
         if (statusCode >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/ProducerOperationHandlerInterceptor.java
Patch:
@@ -59,7 +59,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         int statusCode = invocation.getStatus().getStatusCode();
         if (statusCode >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/TransportClientHandlerInterceptor.java
Patch:
@@ -68,7 +68,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         int statusCode = invocation.getStatus().getStatusCode();
         if (statusCode >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v5/InvokeInterceptor.java
Patch:
@@ -73,7 +73,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
             HttpStatus httpStatus = exchange.getResponse().getStatusCode();
             if (httpStatus != null && httpStatus.isError()) {
                 span.errorOccurred();
-                Tags.STATUS_CODE.set(span, Integer.toString(httpStatus.value()));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(span, httpStatus.value());
             }
             span.asyncFinish();
         });

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java
Patch:
@@ -229,7 +229,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
 
                 if (statusCode != null && statusCode >= 400) {
                     span.errorOccurred();
-                    Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+                    Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
                 }
 
                 runtimeContext.remove(REACTIVE_ASYNC_SPAN_IN_RUNTIME_CONTEXT);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestResponseInterceptor.java
Patch:
@@ -44,7 +44,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         AbstractSpan span = ContextManager.activeSpan();
         if (statusCode >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(statusCode));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, statusCode);
         }
         return ret;
     }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/spring-webflux-5.x-webclient-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/webflux/v5/webclient/WebFluxWebClientInterceptor.java
Patch:
@@ -81,7 +81,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         return ret1.doOnSuccess(clientResponse -> {
             HttpStatus httpStatus = clientResponse.statusCode();
             if (httpStatus != null) {
-                Tags.STATUS_CODE.set(span, Integer.toString(httpStatus.value()));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(span, httpStatus.value());
                 if (httpStatus.isError()) {
                     span.errorOccurred();
                 }

File: apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/struts2/Struts2Interceptor.java
Patch:
@@ -71,7 +71,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         AbstractSpan span = ContextManager.activeSpan();
         if (IS_SERVLET_GET_STATUS_METHOD_EXIST && response.getStatus() >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, response.getStatus());
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/TomcatInvokeInterceptor.java
Patch:
@@ -95,7 +95,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         AbstractSpan span = ContextManager.activeSpan();
         if (IS_SERVLET_GET_STATUS_METHOD_EXIST && response.getStatus() >= 400) {
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, response.getStatus());
         }
         // Active HTTP parameter collection automatically in the profiling context.
         if (!TomcatPluginConfig.Plugin.Tomcat.COLLECT_HTTP_PARAMS && span.isProfiling()) {

File: apm-sniffer/apm-sdk-plugin/undertow-plugins/undertow-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/undertow/v2x/handler/TracingHandler.java
Patch:
@@ -72,7 +72,7 @@ public void exchangeEvent(HttpServerExchange httpServerExchange, NextListener ne
                     nextListener.proceed();
                     if (httpServerExchange.getStatusCode() >= 400) {
                         span.errorOccurred();
-                        Tags.STATUS_CODE.set(span, Integer.toString(httpServerExchange.getStatusCode()));
+                        Tags.HTTP_RESPONSE_STATUS_CODE.set(span, httpServerExchange.getStatusCode());
                     }
                     span.asyncFinish();
                 }

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/HttpClientRequestImplHandleResponseInterceptor.java
Patch:
@@ -40,7 +40,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             HttpClientRequestContext requestContext = (HttpClientRequestContext) objInst.getSkyWalkingDynamicField();
             if (!requestContext.usingWebClient) {
                 VertxContext context = requestContext.vertxContext;
-                Tags.STATUS_CODE.set(context.getSpan(), Integer.toString(((HttpClientResponse) allArguments[0]).statusCode()));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(context.getSpan(), ((HttpClientResponse) allArguments[0]).statusCode());
                 context.getSpan().asyncFinish();
 
                 AbstractSpan span = ContextManager.createLocalSpan("#" + context.getSpan().getOperationName());

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/HttpContextHandleDispatchResponseInterceptor.java
Patch:
@@ -42,7 +42,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         HttpClientRequest clientRequest = httpContext.clientRequest();
         VertxContext context = ((HttpClientRequestContext) ((EnhancedInstance) clientRequest)
                 .getSkyWalkingDynamicField()).vertxContext;
-        Tags.STATUS_CODE.set(context.getSpan(), Integer.toString(httpContext.clientResponse().statusCode()));
+        Tags.HTTP_RESPONSE_STATUS_CODE.set(context.getSpan(), httpContext.clientResponse().statusCode());
         context.getSpan().asyncFinish();
 
         AbstractSpan span = ContextManager.createLocalSpan("#" + context.getSpan().getOperationName());

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/HttpServerResponseImplInterceptor.java
Patch:
@@ -43,7 +43,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         if ((VertxContext.VERTX_VERSION < 36 && allArguments[0] instanceof ByteBuf)
                 || ((VertxContext.VERTX_VERSION >= 36 && VertxContext.VERTX_VERSION <= 37) || allArguments.length == 2)) {
             VertxContext context = (VertxContext) objInst.getSkyWalkingDynamicField();
-            Tags.STATUS_CODE.set(context.getSpan(), Integer.toString(((HttpServerResponse) objInst).getStatusCode()));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(context.getSpan(), ((HttpServerResponse) objInst).getStatusCode());
             context.getSpan().asyncFinish();
         }
     }

File: apm-sniffer/bootstrap-plugins/jdk-http-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdk/http/HttpClientParseHttpInterceptor.java
Patch:
@@ -46,7 +46,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         if (responseCode >= 400) {
             AbstractSpan span = ContextManager.activeSpan();
             span.errorOccurred();
-            Tags.STATUS_CODE.set(span, Integer.toString(responseCode));
+            Tags.HTTP_RESPONSE_STATUS_CODE.set(span, responseCode);
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v20x/HttpClientRequestInterceptor.java
Patch:
@@ -92,7 +92,7 @@ public void accept(final HttpClientResponse httpClientResponse, final Throwable
                     } else if (httpClientResponse.status().code() > 400) {
                         abstractSpan.errorOccurred();
                     }
-                    Tags.STATUS_CODE.set(abstractSpan, String.valueOf(httpClientResponse.status().code()));
+                    Tags.HTTP_RESPONSE_STATUS_CODE.set(abstractSpan, httpClientResponse.status().code());
                     abstractSpan.asyncFinish();
                 }
 

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v21x/HttpClientFinalizerResponseConnectionInterceptor.java
Patch:
@@ -43,7 +43,7 @@ public Publisher apply(final HttpClientResponse response, final Connection conne
                     if (response.status().code() >= 400) {
                         cache.getSpan().errorOccurred();
                     }
-                    Tags.STATUS_CODE.set(cache.getSpan(), String.valueOf(response.status().code()));
+                    Tags.HTTP_RESPONSE_STATUS_CODE.set(cache.getSpan(), response.status().code());
                     cache.getSpan().asyncFinish();
                 }
 

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v3x/HttpClientFinalizerResponseConnectionInterceptor.java
Patch:
@@ -52,7 +52,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
                 if (response.status().code() >= HttpResponseStatus.BAD_REQUEST.code()) {
                     cache.getSpan().errorOccurred();
                 }
-                Tags.STATUS_CODE.set(cache.getSpan(), String.valueOf(response.status().code()));
+                Tags.HTTP_RESPONSE_STATUS_CODE.set(cache.getSpan(), response.status().code());
                 cache.getSpan().asyncFinish();
             }
 

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java
Patch:
@@ -64,8 +64,8 @@ private SpanObject.Builder createEntrySpan(long startTimestamp) {
         span.setOperationName(REST_ENDPOINT);
         span.setIsError(false);
         span.addTags(KeyStringValuePair.newBuilder().setKey("http.method").setValue("get").build());
-        span.addTags(KeyStringValuePair.newBuilder().setKey("status_code").setValue("404").build());
-        span.addTags(KeyStringValuePair.newBuilder().setKey("status_code").setValue("200").build());
+        span.addTags(KeyStringValuePair.newBuilder().setKey("http.status_code").setValue("404").build());
+        span.addTags(KeyStringValuePair.newBuilder().setKey("http.status_code").setValue("200").build());
         return span;
     }
 

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java
Patch:
@@ -180,7 +180,6 @@ public void build() {
         }
 
         segment.setEndpointId(endpointId);
-        segment.setEndpointName(endpointName);
 
         sourceReceiver.receive(segment);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentDispatcher.java
Patch:
@@ -32,7 +32,6 @@ public void dispatch(Segment source) {
         segment.setTraceId(source.getTraceId());
         segment.setServiceId(source.getServiceId());
         segment.setServiceInstanceId(source.getServiceInstanceId());
-        segment.setEndpointName(source.getEndpointName());
         segment.setEndpointId(source.getEndpointId());
         segment.setStartTime(source.getStartTime());
         segment.setLatency(source.getLatency());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TraceQueryService.java
Patch:
@@ -77,7 +77,6 @@ public TraceBrief queryBasicTraces(final String serviceId,
                                        final String serviceInstanceId,
                                        final String endpointId,
                                        final String traceId,
-                                       final String endpointName,
                                        final int minTraceDuration,
                                        int maxTraceDuration,
                                        final TraceState traceState,
@@ -89,7 +88,7 @@ public TraceBrief queryBasicTraces(final String serviceId,
         PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(paging);
 
         return getTraceQueryDAO().queryBasicTraces(
-            startTB, endTB, minTraceDuration, maxTraceDuration, endpointName, serviceId, serviceInstanceId, endpointId,
+            startTB, endTB, minTraceDuration, maxTraceDuration, serviceId, serviceInstanceId, endpointId,
             traceId, page.getLimit(), page.getFrom(), traceState, queryOrder, tags
         );
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/TraceQueryCondition.java
Patch:
@@ -32,7 +32,6 @@ public class TraceQueryCondition {
     private String serviceId;
     private String serviceInstanceId;
     private String traceId;
-    private String endpointName;
     private String endpointId;
     private Duration queryDuration;
     private int minTraceDuration;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Segment.java
Patch:
@@ -53,9 +53,6 @@ public String getEntityId() {
     private String serviceInstanceId;
     @Setter
     @Getter
-    private String endpointName;
-    @Setter
-    @Getter
     private String endpointId;
     @Setter
     @Getter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITraceQueryDAO.java
Patch:
@@ -34,7 +34,6 @@ TraceBrief queryBasicTraces(long startSecondTB,
                                 long endSecondTB,
                                 long minDuration,
                                 long maxDuration,
-                                String endpointName,
                                 String serviceId,
                                 String serviceInstanceId,
                                 String endpointId,

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TraceQuery.java
Patch:
@@ -67,14 +67,13 @@ public TraceBrief queryBasicTraces(final TraceQueryCondition condition) throws I
 
         int minDuration = condition.getMinTraceDuration();
         int maxDuration = condition.getMaxTraceDuration();
-        String endpointName = condition.getEndpointName();
         String endpointId = condition.getEndpointId();
         TraceState traceState = condition.getTraceState();
         QueryOrder queryOrder = condition.getQueryOrder();
         Pagination pagination = condition.getPaging();
 
         return getQueryService().queryBasicTraces(
-            condition.getServiceId(), condition.getServiceInstanceId(), endpointId, traceId, endpointName, minDuration,
+            condition.getServiceId(), condition.getServiceInstanceId(), endpointId, traceId, minDuration,
             maxDuration, traceState, queryOrder, pagination, startSecondTB, endSecondTB, condition.getTags()
         );
     }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SegmentRecordBuilder.java
Patch:
@@ -30,7 +30,6 @@
 
 import static org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord.DATA_BINARY;
 import static org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord.ENDPOINT_ID;
-import static org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord.ENDPOINT_NAME;
 import static org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord.IS_ERROR;
 import static org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord.LATENCY;
 import static org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord.SEGMENT_ID;
@@ -61,7 +60,6 @@ public Map<String, Object> entity2Storage(Record record) {
         map.put(TRACE_ID, storageData.getTraceId());
         map.put(SERVICE_ID, storageData.getServiceId());
         map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());
-        map.put(ENDPOINT_NAME, storageData.getEndpointName());
         map.put(ENDPOINT_ID, storageData.getEndpointId());
         map.put(START_TIME, storageData.getStartTime());
         map.put(LATENCY, storageData.getLatency());
@@ -83,7 +81,6 @@ public Record storage2Entity(Map<String, Object> dbMap) {
         record.setTraceId((String) dbMap.get(TRACE_ID));
         record.setServiceId((String) dbMap.get(SERVICE_ID));
         record.setServiceInstanceId((String) dbMap.get(SERVICE_INSTANCE_ID));
-        record.setEndpointName((String) dbMap.get(ENDPOINT_NAME));
         record.setEndpointId((String) dbMap.get(ENDPOINT_ID));
         record.setStartTime(((Number) dbMap.get(START_TIME)).longValue());
         record.setLatency(((Number) dbMap.get(LATENCY)).intValue());

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileSnapshotExporterTest.java
Patch:
@@ -46,11 +46,13 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.powermock.reflect.Whitebox;
 import org.yaml.snakeyaml.Yaml;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 public class ProfileSnapshotExporterTest {
 
     @Mock

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileTraceDAO.java
Patch:
@@ -43,7 +43,6 @@ public TraceBrief queryBasicTraces(long startSecondTB,
                                        long endSecondTB,
                                        long minDuration,
                                        long maxDuration,
-                                       String endpointName,
                                        String serviceId,
                                        String serviceInstanceId,
                                        String endpointId,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java
Patch:
@@ -275,7 +275,8 @@ private void loadFromStorage(List<Metrics> metrics) {
                                // Mostly all updatable metadata level metrics are required to do this check.
 
                                if (metricsDAO.isExpiredCache(model, cachedValue, currentTimeMillis, metricsDataTTL)) {
-                                   // The expired metrics should be tagged `not in cache` directly.
+                                   // The expired metrics should be removed from the context and tagged `not in cache` directly.
+                                   context.remove(m);
                                    return true;
                                }
                            }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/MetricsEsDAO.java
Patch:
@@ -135,7 +135,7 @@ public boolean isExpiredCache(final Model model,
             return false;
         }
         final long deadline = Long.parseLong(new DateTime(currentTimeMillis).plusDays(-ttl).toString("yyyyMMdd"));
-        final long timeBucket = TimeBucket.getTimeBucket(cachedValue.getTimeBucket(), DownSampling.Day);
+        final long timeBucket = TimeBucket.getTimeBucket(metricTimestamp, DownSampling.Day);
         // If time bucket is earlier or equals(mostly) the deadline, then the cached metric is expired.
         if (timeBucket <= deadline) {
             return true;

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java
Patch:
@@ -74,6 +74,7 @@ public class SampleFamily {
 
     static SampleFamily build(RunningContext ctx, Sample... samples) {
         Preconditions.checkNotNull(samples);
+        samples = Arrays.stream(samples).filter(sample -> !Double.isNaN(sample.getValue())).toArray(Sample[]::new);
         Preconditions.checkArgument(samples.length > 0);
         return new SampleFamily(samples, Optional.ofNullable(ctx).orElseGet(RunningContext::instance));
     }

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/prometheus/PrometheusMetricConverter.java
Patch:
@@ -88,7 +88,7 @@ public ImmutableMap<String, SampleFamily> convertPromMetricToSampleFamily(Stream
         return metricStream
             .peek(metric -> log.debug("Prom metric to be convert to SampleFamily: {}", metric))
             .flatMap(this::convertMetric)
-            .filter(t -> t != NIL)
+            .filter(t -> t != NIL && t._2.samples.length > 0)
             .peek(t -> log.debug("SampleFamily: {}", t))
             .collect(toImmutableMap(Tuple2::_1, Tuple2::_2, (a, b) -> {
                 log.debug("merge {} {}", a, b);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationClientSideMetrics.java
Patch:
@@ -114,7 +114,9 @@ public Metrics toDay() {
 
     @Override
     public int remoteHashCode() {
-        return hashCode();
+        int n = 17;
+        n = 31 * n + this.entityId.hashCode();
+        return n;
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationServerSideMetrics.java
Patch:
@@ -114,7 +114,9 @@ public Metrics toDay() {
 
     @Override
     public int remoteHashCode() {
-        return hashCode();
+        int n = 17;
+        n = 31 * n + this.entityId.hashCode();
+        return n;
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationClientSideMetrics.java
Patch:
@@ -100,7 +100,9 @@ public Metrics toDay() {
 
     @Override
     public int remoteHashCode() {
-        return this.hashCode();
+        int n = 17;
+        n = 31 * n + this.entityId.hashCode();
+        return n;
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java
Patch:
@@ -100,7 +100,9 @@ public Metrics toDay() {
 
     @Override
     public int remoteHashCode() {
-        return this.hashCode();
+        int n = 17;
+        n = 31 * n + this.entityId.hashCode();
+        return n;
     }
 
     @Override

File: oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/KafkaFetcherProvider.java
Patch:
@@ -69,7 +69,7 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
     }
 
     @Override
-    public void start() throws ServiceNotProvidedException {
+    public void start() throws ServiceNotProvidedException, ModuleStartException {
         handlerRegister.register(new JVMMetricsHandler(getManager(), config));
         handlerRegister.register(new ServiceManagementHandler(getManager(), config));
         handlerRegister.register(new TraceSegmentHandler(getManager(), config));

File: oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/module/KafkaFetcherConfig.java
Patch:
@@ -67,8 +67,6 @@ public class KafkaFetcherConfig extends ModuleConfig {
      */
     private int replicationFactor = 2;
 
-    private boolean enableMeterSystem = false;
-
     private boolean enableNativeProtoLog = false;
 
     private boolean enableNativeJsonLog = false;

File: oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/KafkaFetcherProvider.java
Patch:
@@ -74,10 +74,8 @@ public void start() throws ServiceNotProvidedException {
         handlerRegister.register(new ServiceManagementHandler(getManager(), config));
         handlerRegister.register(new TraceSegmentHandler(getManager(), config));
         handlerRegister.register(new ProfileTaskHandler(getManager(), config));
+        handlerRegister.register(new MeterServiceHandler(getManager(), config));
 
-        if (config.isEnableMeterSystem()) {
-            handlerRegister.register(new MeterServiceHandler(getManager(), config));
-        }
         if (config.isEnableNativeProtoLog()) {
             handlerRegister.register(new LogHandler(getManager(), config));
         }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/MetricsEsDAO.java
Patch:
@@ -83,9 +83,9 @@ public List<Metrics> multiGet(Model model, List<Metrics> metrics) throws IOExcep
         // the current day and the T-1 day(if at the edge between days)
         List<Metrics> result = new ArrayList<>(metrics.size());
         groupIndices.forEach((tableName, metricList) -> {
-            String[] ids = metrics.stream()
-                                  .map(item -> IndexController.INSTANCE.generateDocId(model, item.id()))
-                                  .toArray(String[]::new);
+            String[] ids = metricList.stream()
+                                     .map(item -> IndexController.INSTANCE.generateDocId(model, item.id()))
+                                     .toArray(String[]::new);
             try {
                 SearchResponse response = getClient().ids(tableName, ids);
                 for (int i = 0; i < response.getHits().getHits().length; i++) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java
Patch:
@@ -64,7 +64,7 @@ public class CoreModuleConfig extends ModuleConfig {
      * The period of doing data persistence. Unit is second.
      */
     @Setter
-    private long persistentPeriod = 3;
+    private long persistentPeriod = 25;
 
     private boolean enableDataKeeperExecutor = true;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordPersistentWorker.java
Patch:
@@ -49,7 +49,7 @@ public class RecordPersistentWorker extends AbstractWorker<Record> {
     public void in(Record record) {
         try {
             InsertRequest insertRequest = recordDAO.prepareBatchInsert(model, record);
-            batchDAO.asynchronous(insertRequest);
+            batchDAO.insert(insertRequest);
         } catch (IOException e) {
             LOGGER.error(e.getMessage(), e);
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimer.java
Patch:
@@ -161,7 +161,7 @@ private void extractDataAndSave(IBatchDAO batchDAO) {
                         HistogramMetrics.Timer executeLatencyTimer = executeLatency.createTimer();
                         try {
                             if (CollectionUtils.isNotEmpty(partition)) {
-                                batchDAO.synchronous(partition);
+                                batchDAO.flush(partition);
                             }
                         } catch (Throwable e) {
                             log.error(e.getMessage(), e);

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimerTest.java
Patch:
@@ -57,12 +57,12 @@ public void testExtractDataAndSave() throws Exception {
         moduleConfig.setPersistentPeriod(Integer.MAX_VALUE);
         IBatchDAO iBatchDAO = new IBatchDAO() {
             @Override
-            public void asynchronous(InsertRequest insertRequest) {
+            public void insert(InsertRequest insertRequest) {
 
             }
 
             @Override
-            public void synchronous(List<PrepareRequest> prepareRequests) {
+            public void flush(final List<PrepareRequest> prepareRequests) {
                 synchronized (result) {
                     result.addAll(prepareRequests);
                 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java
Patch:
@@ -162,9 +162,7 @@ protected Map<String, Object> createSetting(Model model) throws StorageException
         setting.put("index.number_of_shards", model.isSuperDataset()
             ? config.getIndexShardsNumber() * config.getSuperDatasetIndexShardsFactor()
             : config.getIndexShardsNumber());
-        setting.put("index.refresh_interval", model.isRecord()
-            ? TimeValue.timeValueSeconds(10).toString()
-            : TimeValue.timeValueSeconds(config.getFlushInterval()).toString());
+        setting.put("index.refresh_interval", TimeValue.timeValueSeconds(config.getFlushInterval()).toString());
         setting.put("analysis", getAnalyzerSetting(model.getColumns()));
         if (!StringUtil.isEmpty(config.getAdvanced())) {
             Map<String, Object> advancedSettings = gson.fromJson(config.getAdvanced(), Map.class);

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/BatchDAO.java
Patch:
@@ -36,12 +36,12 @@ public BatchDAO(InfluxClient client) {
     }
 
     @Override
-    public void asynchronous(InsertRequest insertRequest) {
+    public void insert(InsertRequest insertRequest) {
         client.write(((InfluxInsertRequest) insertRequest).getPoint());
     }
 
     @Override
-    public void synchronous(List<PrepareRequest> prepareRequests) {
+    public void flush(List<PrepareRequest> prepareRequests) {
         if (CollectionUtils.isEmpty(prepareRequests)) {
             return;
         }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2BatchDAO.java
Patch:
@@ -56,7 +56,7 @@ public H2BatchDAO(JDBCHikariCPClient h2Client) {
     }
 
     @Override
-    public void synchronous(List<PrepareRequest> prepareRequests) {
+    public void flush(List<PrepareRequest> prepareRequests) {
         if (CollectionUtils.isEmpty(prepareRequests)) {
             return;
         }
@@ -81,7 +81,7 @@ public void synchronous(List<PrepareRequest> prepareRequests) {
     }
 
     @Override
-    public void asynchronous(InsertRequest insertRequest) {
+    public void insert(InsertRequest insertRequest) {
         this.dataCarrier.produce(insertRequest);
     }
 
@@ -100,7 +100,7 @@ public void init() {
 
         @Override
         public void consume(List<PrepareRequest> prepareRequests) {
-            h2BatchDAO.synchronous(prepareRequests);
+            h2BatchDAO.flush(prepareRequests);
         }
 
         @Override

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/metrics/MetricsQuery.java
Patch:
@@ -158,10 +158,8 @@ public class MetricsQuery extends AbstractQuery<MetricsQuery> {
         "envoy_worker_threads_max"
     };
 
-    public static String METER_INSTANCE_PERSISTENCE_EXECUTE_PERCENTILE = "meter_oap_instance_persistence_execute_percentile";
-
     public static String[] ALL_SO11Y_LABELED_METRICS = {
-        METER_INSTANCE_PERSISTENCE_EXECUTE_PERCENTILE
+        // Nothing to check for now.
     };
     private String id;
     private String metricsName;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -221,6 +221,8 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
                                                                .jettyMaxThreads(moduleConfig.getRestMaxThreads())
                                                                .jettyAcceptQueueSize(
                                                                    moduleConfig.getRestAcceptQueueSize())
+                                                               .jettyHttpMaxRequestHeaderSize(
+                                                                   moduleConfig.getHttpMaxRequestHeaderSize())
                                                                .build();
         jettyServer = new JettyServer(jettyServerConfig);
         jettyServer.initialize();

File: oap-server/server-library/library-server/src/main/java/org/apache/skywalking/oap/server/library/server/jetty/JettyServerConfig.java
Patch:
@@ -41,4 +41,6 @@ public class JettyServerConfig {
     private int jettyAcceptorPriorityDelta = 0;
     @Builder.Default
     private int jettyAcceptQueueSize = 0;
+    @Builder.Default
+    private int jettyHttpMaxRequestHeaderSize = 8192;
 }

File: oap-server/server-receiver-plugin/skywalking-sharing-server-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/sharing/server/SharingServerModuleProvider.java
Patch:
@@ -78,7 +78,8 @@ public void prepare() {
                                  .jettyAcceptQueueSize(config.getRestAcceptQueueSize())
                                  .jettyAcceptorPriorityDelta(
                                      config.getRestAcceptorPriorityDelta())
-                                 .jettyIdleTimeOut(config.getRestIdleTimeOut()).build();
+                                 .jettyIdleTimeOut(config.getRestIdleTimeOut())
+                                 .jettyHttpMaxRequestHeaderSize(config.getHttpMaxRequestHeaderSize()).build();
             jettyServerConfig.setHost(Strings.isBlank(config.getRestHost()) ? "0.0.0.0" : config.getRestHost());
             jettyServerConfig.setPort(config.getRestPort());
             jettyServerConfig.setContextPath(config.getRestContextPath());

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java
Patch:
@@ -134,7 +134,7 @@ public static void initializeConfig(Class configClass) {
         }
     }
 
-    private static void overrideConfigByAgentOptions(String agentOptions) throws IllegalAccessException {
+    private static void overrideConfigByAgentOptions(String agentOptions) throws IllegalArgumentException {
         for (List<String> terms : parseAgentOptions(agentOptions)) {
             if (terms.size() != 2) {
                 throw new IllegalArgumentException("[" + terms + "] is not a key-value pair.");

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerThread.java
Patch:
@@ -80,6 +80,7 @@ private boolean consume(List<T> consumeList) {
             }
             return true;
         }
+        consumer.nothingToConsume();
         return false;
     }
 

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java
Patch:
@@ -85,6 +85,7 @@ private boolean consume(Group target, List consumeList) {
             }
             return true;
         }
+        target.consumer.nothingToConsume();
         return false;
     }
 
@@ -112,7 +113,7 @@ void shutdown() {
     }
 
     private static class Group {
-        private  Channels channels;
+        private Channels channels;
         private IConsumer consumer;
 
         public Group(Channels channels, IConsumer consumer) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -46,9 +46,9 @@
 import org.apache.skywalking.oap.server.core.config.DownSamplingConfigService;
 import org.apache.skywalking.oap.server.core.config.IComponentLibraryCatalogService;
 import org.apache.skywalking.oap.server.core.config.NamingControl;
-import org.apache.skywalking.oap.server.core.config.group.openapi.EndpointGroupingRuleReader4Openapi;
 import org.apache.skywalking.oap.server.core.config.group.EndpointNameGrouping;
 import org.apache.skywalking.oap.server.core.config.group.EndpointNameGroupingRuleWatcher;
+import org.apache.skywalking.oap.server.core.config.group.openapi.EndpointGroupingRuleReader4Openapi;
 import org.apache.skywalking.oap.server.core.management.ui.template.UITemplateInitializer;
 import org.apache.skywalking.oap.server.core.management.ui.template.UITemplateManagementService;
 import org.apache.skywalking.oap.server.core.oal.rt.DisableOALDefine;
@@ -289,6 +289,7 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
             UITemplateManagementService.class, new UITemplateManagementService(getManager()));
 
         MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());
+        MetricsStreamProcessor.getInstance().setL1FlushPeriod(moduleConfig.getL1FlushPeriod());
         TopNStreamProcessor.getInstance().setTopNWorkerReportCycle(moduleConfig.getTopNReportPeriod());
         apdexThresholdConfig = new ApdexThresholdConfig(this);
         ApdexMetrics.setDICT(apdexThresholdConfig);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java
Patch:
@@ -160,7 +160,7 @@ public class CoreModuleConfig extends ModuleConfig {
 
     @Getter
     @Setter
-    private boolean enableEndpointNameGroupingByOpenapi = false;
+    private boolean enableEndpointNameGroupingByOpenapi = true;
 
     public CoreModuleConfig() {
         this.downsampling = new ArrayList<>();

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/LogEntry2MetricsAdapter.java
Patch:
@@ -96,7 +96,7 @@ public ServiceMeshMetric.Builder adaptCommonPart() {
         final String endpoint = endpoint();
         int responseCode = entry.getResponse().getResponseCode().getValue();
         responseCode = responseCode > 0 ? responseCode : 200;
-        final boolean status = responseCode >= 200 && responseCode < 400;
+        final boolean status = responseCode < 500;
         final Protocol protocol = requestProtocol(entry.getRequest());
         final String tlsMode = parseTLS(properties.getTlsProperties());
         final String internalErrorCode = parseInternalErrorCode(properties.getResponseFlags());

File: oap-server/server-receiver-plugin/skywalking-log-recevier-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/log/provider/handler/rest/LogReportServiceRestHandler.java
Patch:
@@ -90,6 +90,6 @@ protected void doPost(final HttpServletRequest req, final HttpServletResponse re
 
     @Override
     public String pathSpec() {
-        return "/logs";
+        return "/v3/logs";
     }
 }

File: apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/TraceIgnoreExtendService.java
Patch:
@@ -89,6 +89,8 @@ public void forceSampled() {
     void handleTraceIgnorePatternsChanged() {
         if (StringUtil.isNotBlank(traceIgnorePatternWatcher.getTraceIgnorePathPatterns())) {
             patterns = traceIgnorePatternWatcher.getTraceIgnorePathPatterns().split(PATTERN_SEPARATOR);
+        } else {
+            patterns = new String[] {};
         }
     }
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java
Patch:
@@ -186,15 +186,16 @@ protected String buildSourceID(final Event event) {
         }
 
         final String service = source.getService();
+        final String serviceId = IDManager.ServiceID.buildId(service, true);
         if (isNullOrEmpty(service)) {
             return "";
         }
 
         final String instance = source.getServiceInstance();
         if (isNullOrEmpty(instance)) {
-            return IDManager.ServiceID.buildId(service, true);
+            return serviceId;
         }
 
-        return IDManager.ServiceInstanceID.buildId(service, instance);
+        return IDManager.ServiceInstanceID.buildId(serviceId, instance);
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v5/define/AbstractSpring5Instrumentation.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 
 public abstract class AbstractSpring5Instrumentation extends ClassInstanceMethodsEnhancePluginDefine {
-    public static final String WITHNESS_CLASSES = "org.springframework.web.servlet.resource.HttpResource";
+    public static final String WITNESS_CLASSES = "org.springframework.web.servlet.resource.HttpResource";
 
     @Override
     protected final String[] witnessClasses() {
-        return new String[] {WITHNESS_CLASSES};
+        return new String[] {WITNESS_CLASSES};
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v5/define/reactive/AbstractSpring5ReactiveInstrumentation.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 
 public abstract class AbstractSpring5ReactiveInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
-    public static final String WITHNESS_CLASSES = "org.springframework.web.reactive.result.method.InvocableHandlerMethod";
+    public static final String WITNESS_CLASSES = "org.springframework.web.reactive.result.method.InvocableHandlerMethod";
 
     @Override
     protected final String[] witnessClasses() {
-        return new String[] {WITHNESS_CLASSES};
+        return new String[] {WITNESS_CLASSES};
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java
Patch:
@@ -34,6 +34,8 @@ public class Constants {
 
     public static final String RESPONSE_KEY_IN_RUNTIME_CONTEXT = "SW_RESPONSE";
 
+    public static final String REACTIVE_ASYNC_SPAN_IN_RUNTIME_CONTEXT = "SW_REACTIVE_RESPONSE_ASYNC_SPAN";
+
     public static final String FORWARD_REQUEST_FLAG = "SW_FORWARD_REQUEST_FLAG";
 
     public static final String WEBFLUX_REQUEST_KEY = "SW_WEBFLUX_REQUEST_KEY";

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.apache.skywalking.apm.plugin.spring.mvc.commons.JavaxServletRequestHolder;
 import org.springframework.web.context.request.NativeWebRequest;
 import org.springframework.web.context.request.RequestContextHolder;
 import org.springframework.web.context.request.ServletRequestAttributes;
@@ -45,8 +44,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         Object ret) throws Throwable {
         if (ret instanceof EnhancedInstance) {
             ContextManager.getRuntimeContext()
-                          .put(REQUEST_KEY_IN_RUNTIME_CONTEXT, new JavaxServletRequestHolder(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes())
-                              .getRequest()));
+                          .put(REQUEST_KEY_IN_RUNTIME_CONTEXT, ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes())
+                              .getRequest());
         }
         return ret;
     }

File: apm-commons/apm-util/src/main/java/org/apache/skywalking/apm/util/ConfigInitializer.java
Patch:
@@ -112,7 +112,7 @@ private static Object convertToTypicalType(Type type, String value) {
         } else if (boolean.class.equals(type) || Boolean.class.equals(type)) {
             result = Boolean.valueOf(value);
         } else if (float.class.equals(type) || Float.class.equals(type)) {
-            result = Boolean.valueOf(value);
+            result = Float.valueOf(value);
         } else if (double.class.equals(type) || Double.class.equals(type)) {
             result = Double.valueOf(value);
         } else if (List.class.equals(type)) {

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/AnalyzerModuleProvider.java
Patch:
@@ -122,6 +122,7 @@ public void start() throws ModuleStartException {
         dynamicConfigurationService.registerConfigChangeWatcher(thresholds);
         dynamicConfigurationService.registerConfigChangeWatcher(uninstrumentedGatewaysConfig);
         dynamicConfigurationService.registerConfigChangeWatcher(traceSampleRateWatcher);
+        dynamicConfigurationService.registerConfigChangeWatcher(traceLatencyThresholdsAndWatcher);
 
         segmentParserService.setListenerManager(listenerManager());
 

File: oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationWatcherRegister.java
Patch:
@@ -42,7 +42,7 @@ public Optional<ConfigTable> readConfig(Set<String> keys) {
         final ConfigTable configTable = new ConfigTable();
         Optional<V1ConfigMap> v1ConfigMap = informer.configMap();
         for (final String name : keys) {
-            final String value = v1ConfigMap.map(configMap -> configMap.getData().get(name)).orElse(null);
+            final String value = v1ConfigMap.map(V1ConfigMap::getData).map(data -> data.get(name)).orElse(null);
             if (log.isDebugEnabled()) {
                 log.debug("read config: name:{} ,value:{}", name, value);
             }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java
Patch:
@@ -104,8 +104,6 @@ public interface AbstractSpan extends AsyncSpan {
 
     String getOperationName();
 
-    int getComponentId();
-
     /**
      * Reference other trace segment.
      *

File: apm-sniffer/optional-plugins/mybatis-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mybatis/define/MyBatisInstrumentation.java
Patch:
@@ -46,7 +46,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "org.apache.skywalking.apm.plugin.mybatis.SqlSessionOperationInterceptor";
+                    return "org.apache.skywalking.apm.plugin.mybatis.MyBatisInterceptor";
                 }
 
                 @Override

File: apm-sniffer/apm-sdk-plugin/pulsar-plugin/src/main/java/org/apache/skywalking/apm/plugin/pulsar/ConsumerConstructorInterceptor.java
Patch:
@@ -45,7 +45,6 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
         requireInfo.setServiceUrl(pulsarClient.getLookup().getServiceUrl());
         requireInfo.setTopic(topic);
         requireInfo.setSubscriptionName(consumerConfigurationData.getSubscriptionName());
-        requireInfo.setHasMessageListener(consumerConfigurationData.getMessageListener() != null);
         objInst.setSkyWalkingDynamicField(requireInfo);
     }
 }

File: apm-sniffer/apm-sdk-plugin/pulsar-plugin/src/main/java/org/apache/skywalking/apm/plugin/pulsar/PulsarConsumerListenerInterceptor.java
Patch:
@@ -58,7 +58,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         return ret == null ? null : (MessageListener) (consumer, message) -> {
             final MessageEnhanceRequiredInfo requiredInfo = (MessageEnhanceRequiredInfo) ((EnhancedInstance) message)
                     .getSkyWalkingDynamicField();
-            if (requiredInfo == null) {
+            if (requiredInfo == null || requiredInfo.getContextSnapshot() == null) {
                 ((MessageListener) ret).received(consumer, message);
             } else {
                 AbstractSpan activeSpan = ContextManager

File: apm-sniffer/apm-sdk-plugin/pulsar-plugin/src/main/java/org/apache/skywalking/apm/plugin/pulsar/define/MessageInstrumentation.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
-import static org.apache.skywalking.apm.agent.core.plugin.match.HierarchyMatch.byHierarchyMatch;
+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
  * Pulsar message instrumentation.
@@ -39,7 +39,7 @@
  */
 public class MessageInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String ENHANCE_CLASS = "org.apache.pulsar.client.api.Message";
+    public static final String ENHANCE_CLASS = "org.apache.pulsar.client.impl.MessageImpl";
     public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.pulsar.MessageConstructorInterceptor";
 
     @Override
@@ -66,6 +66,6 @@ public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
 
     @Override
     protected ClassMatch enhanceClass() {
-        return byHierarchyMatch(ENHANCE_CLASS);
+        return byName(ENHANCE_CLASS);
     }
 }

File: apm-sniffer/apm-sdk-plugin/pulsar-plugin/src/test/java/org/apache/skywalking/apm/plugin/pulsar/PulsarConsumerInterceptorTest.java
Patch:
@@ -122,7 +122,6 @@ public void testConsumerWithMessage() throws Throwable {
 
     @Test
     public void testConsumerWithMessageListener() throws Throwable {
-        consumerEnhanceRequiredInfo.setHasMessageListener(true);
         consumerInterceptor.beforeMethod(consumerInstance, null, new Object[]{msg}, new Class[0], null);
         consumerInterceptor.afterMethod(consumerInstance, null, new Object[]{msg}, new Class[0], null);
 

File: apm-sniffer/apm-sdk-plugin/pulsar-plugin/src/test/java/org/apache/skywalking/apm/plugin/pulsar/PulsarConsumerListenerInterceptorTest.java
Patch:
@@ -96,7 +96,6 @@ public void setUp() {
         consumerEnhanceRequiredInfo.setTopic("persistent://my-tenant/my-ns/my-topic");
         consumerEnhanceRequiredInfo.setServiceUrl("pulsar://localhost:6650");
         consumerEnhanceRequiredInfo.setSubscriptionName("my-sub");
-        consumerEnhanceRequiredInfo.setHasMessageListener(true);
         msg = new MockMessage();
         msg.getMessageBuilder()
                 .addProperties(PulsarApi.KeyValue.newBuilder()

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/LogEntry2MetricsAdapter.java
Patch:
@@ -91,7 +91,7 @@ public ServiceMeshMetric.Builder adaptToUpstreamMetrics() {
             .setDetectPoint(DetectPoint.client);
     }
 
-    protected ServiceMeshMetric.Builder adaptCommonPart() {
+    public ServiceMeshMetric.Builder adaptCommonPart() {
         final AccessLogCommon properties = entry.getCommonProperties();
         final String endpoint = endpoint();
         int responseCode = entry.getResponse().getResponseCode().getValue();

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/tcp/TCPLogEntry2MetricsAdapter.java
Patch:
@@ -85,7 +85,7 @@ public ServiceMeshMetric.Builder adaptToUpstreamMetrics() {
             .setDetectPoint(DetectPoint.client);
     }
 
-    protected ServiceMeshMetric.Builder adaptCommonPart() {
+    public ServiceMeshMetric.Builder adaptCommonPart() {
         final AccessLogCommon properties = entry.getCommonProperties();
         final ConnectionProperties connectionProperties = entry.getConnectionProperties();
         final String tlsMode = parseTLS(properties.getTlsProperties());

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/ControllerConstructorInterceptor.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;
+import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.web.bind.annotation.RequestMapping;
 
 /**
@@ -32,7 +33,7 @@ public class ControllerConstructorInterceptor implements InstanceConstructorInte
     @Override
     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
         String basePath = "";
-        RequestMapping basePathRequestMapping = objInst.getClass().getAnnotation(RequestMapping.class);
+        RequestMapping basePathRequestMapping = AnnotationUtils.findAnnotation(objInst.getClass(), RequestMapping.class);
         if (basePathRequestMapping != null) {
             if (basePathRequestMapping.value().length > 0) {
                 basePath = basePathRequestMapping.value()[0];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/ControllerConstructorInterceptor.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;
 import org.apache.skywalking.apm.plugin.spring.mvc.commons.PathMappingCache;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
+import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.web.bind.annotation.RequestMapping;
 
 /**
@@ -42,7 +43,7 @@ public class ControllerConstructorInterceptor implements InstanceConstructorInte
     @Override
     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
         String basePath = "";
-        RequestMapping basePathRequestMapping = objInst.getClass().getAnnotation(RequestMapping.class);
+        RequestMapping basePathRequestMapping = AnnotationUtils.findAnnotation(objInst.getClass(), RequestMapping.class);
         if (basePathRequestMapping != null) {
             if (basePathRequestMapping.value().length > 0) {
                 basePath = basePathRequestMapping.value()[0];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/ControllerForLowVersionConstructorInterceptor.java
Patch:
@@ -22,13 +22,14 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;
 import org.apache.skywalking.apm.plugin.spring.mvc.commons.PathMappingCache;
+import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.web.bind.annotation.RequestMapping;
 
 public class ControllerForLowVersionConstructorInterceptor implements InstanceConstructorInterceptor {
     @Override
     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
         String basePath = "";
-        RequestMapping basePathRequestMapping = objInst.getClass().getAnnotation(RequestMapping.class);
+        RequestMapping basePathRequestMapping = AnnotationUtils.findAnnotation(objInst.getClass(), RequestMapping.class);
         if (basePathRequestMapping != null) {
             if (basePathRequestMapping.value().length > 0) {
                 basePath = basePathRequestMapping.value()[0];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v5/ControllerConstructorInterceptor.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;
 import org.apache.skywalking.apm.plugin.spring.mvc.commons.PathMappingCache;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
+import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.web.bind.annotation.RequestMapping;
 
 /**
@@ -42,7 +43,7 @@ public class ControllerConstructorInterceptor implements InstanceConstructorInte
     @Override
     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
         String basePath = "";
-        RequestMapping basePathRequestMapping = objInst.getClass().getAnnotation(RequestMapping.class);
+        RequestMapping basePathRequestMapping = AnnotationUtils.findAnnotation(objInst.getClass(), RequestMapping.class);
         if (basePathRequestMapping != null) {
             if (basePathRequestMapping.value().length > 0) {
                 basePath = basePathRequestMapping.value()[0];

File: test/plugin/scenarios/spring-3.0.x-scenario/src/main/java/test/apache/skywalking/apm/testcase/spring3/CaseController.java
Patch:
@@ -36,6 +36,7 @@ public class CaseController {
     @ResponseBody
     public String updateUser() {
         testServiceBean.doSomeBusiness("test");
+        testServiceBean.doInvokeImplCase();
         return SUCCESS;
     }
 

File: test/plugin/scenarios/spring-4.3.x-scenario/src/main/java/test/apache/skywalking/apm/testcase/implinterface/TestCaseInterface.java
Patch:
@@ -21,10 +21,11 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 
+@RequestMapping("/impl")
 public interface TestCaseInterface {
-    @RequestMapping("/impl/requestmapping")
+    @RequestMapping(path = "/requestmapping")
     String implRequestMappingAnnotationTestCase();
 
-    @GetMapping("/impl/restmapping")
+    @GetMapping("/restmapping")
     String implRestAnnotationTestCase();
 }

File: oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/BasicTest.java
Patch:
@@ -63,9 +63,9 @@ public static Collection<Object[]> data() {
             },
             {
                 "single-value",
-                of("instance_cpu_percentage", SampleFamilyBuilder.newBuilder(Sample.builder().value(1600592418480.0).build()).build()),
+                of("instance_cpu_percentage", SampleFamilyBuilder.newBuilder(Sample.builder().value(1600592418480.0).name("instance_cpu_percentage").build()).build()),
                 "instance_cpu_percentage",
-                Result.success(SampleFamilyBuilder.newBuilder(Sample.builder().value(1600592418480.0).build()).build()),
+                Result.success(SampleFamilyBuilder.newBuilder(Sample.builder().value(1600592418480.0).name("instance_cpu_percentage").build()).build()),
                 false,
             },
         });

File: oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/TagFilterTest.java
Patch:
@@ -63,9 +63,9 @@ public static Collection<Object[]> data() {
             },
             {
                 "single-value",
-                of("instance_cpu_percentage", SampleFamilyBuilder.newBuilder(Sample.builder().value(1600592418480.0).build()).build()),
+                of("instance_cpu_percentage", SampleFamilyBuilder.newBuilder(Sample.builder().value(1600592418480.0).name("instance_cpu_percentage").build()).build()),
                 "instance_cpu_percentage",
-                Result.success(SampleFamilyBuilder.newBuilder(Sample.builder().value(1600592418480.0).build()).build()),
+                Result.success(SampleFamilyBuilder.newBuilder(Sample.builder().value(1600592418480.0).name("instance_cpu_percentage").build()).build()),
                 false,
             },
         });

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/welink/WeLinkHookCallbackTest.java
Patch:
@@ -74,7 +74,7 @@ public void testWeLinkDoAlarm() {
         webHooks.add(new WeLinkSettings.WebHookUrl("clientId", "clientSecret",
                                                    "http://127.0.0.1:" + port + "/welinkhook/api/auth/v2/tickets",
                                                    "http://127.0.0.1:" + port + "/welinkhook/api/welinkim/v1/im-service/chat/group-chat",
-                                                   "rebootName", "1,2,3"
+                                                   "robotName", "1,2,3"
         ));
         Rules rules = new Rules();
         String template = "Apache SkyWalking Alarm: \n %s.";

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/handler/SpanProcessor.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.zip.GZIPInputStream;
 import javax.servlet.http.HttpServletRequest;
+
 import lombok.RequiredArgsConstructor;
 import org.apache.skywalking.oap.server.core.config.NamingControl;
 import org.apache.skywalking.oap.server.core.source.SourceReceiver;
@@ -49,7 +50,7 @@ void convert(ZipkinReceiverConfig config, SpanBytesDecoder decoder, HttpServletR
 
             List<Span> spanList = decoder.decodeList(out.toByteArray());
 
-            SpanForward forward = new SpanForward(namingControl, receiver);
+            SpanForward forward = new SpanForward(namingControl, receiver, config);
             forward.send(spanList);
         }
     }

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/client/ElasticSearch7Client.java
Patch:
@@ -175,7 +175,7 @@ public Map<String, Object> getIndex(String indexName) throws IOException {
         indexName = formatIndexName(indexName);
         try {
             Response response = client.getLowLevelClient()
-                                      .performRequest(new Request(HttpGet.METHOD_NAME, indexName));
+                                      .performRequest(new Request(HttpGet.METHOD_NAME, "/" + indexName));
             int statusCode = response.getStatusLine().getStatusCode();
             if (statusCode != HttpStatus.SC_OK) {
                 healthChecker.health();
@@ -218,7 +218,7 @@ public Map<String, Object> getTemplate(String name) throws IOException {
         name = formatIndexName(name);
         try {
             Response response = client.getLowLevelClient()
-                                      .performRequest(new Request(HttpGet.METHOD_NAME, "_template/" + name));
+                                      .performRequest(new Request(HttpGet.METHOD_NAME, "/_template/" + name));
             int statusCode = response.getStatusLine().getStatusCode();
             if (statusCode != HttpStatus.SC_OK) {
                 healthChecker.health();

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v20x/HttpClientRequestInterceptor.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
@@ -52,7 +53,7 @@ public void beforeMethod(final EnhancedInstance objInst,
             "SpringCloudGateway/sendRequest", contextCarrier, getPeer(url));
         abstractSpan.prepareForAsync();
         Tags.URL.set(abstractSpan, String.valueOf(allArguments[1]));
-
+        abstractSpan.setLayer(SpanLayer.HTTP);
         abstractSpan.setComponent(SPRING_CLOUD_GATEWAY);
         ContextManager.stopSpan(abstractSpan);
 

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v21x/HttpClientFinalizerSendInterceptor.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
@@ -53,7 +54,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             Tags.URL.set(abstractSpan, enhanceObjectCache.getUrl());
             abstractSpan.prepareForAsync();
             abstractSpan.setComponent(SPRING_CLOUD_GATEWAY);
-
+            abstractSpan.setLayer(SpanLayer.HTTP);
             ContextManager.stopSpan(abstractSpan);
             ContextManager.stopSpan(span);
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v5/define/reactive/InvocableHandlerMethodInstrumentation.java
Patch:
@@ -45,7 +45,7 @@ public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
             new InstanceMethodsInterceptPoint() {
                 @Override
                 public ElementMatcher<MethodDescription> getMethodsMatcher() {
-                    return named("getMethodArgumentValues").and(
+                    return named("invoke").and(
                         takesArgumentWithType(0, "org.springframework.web.server.ServerWebExchange"));
                 }
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java
Patch:
@@ -53,7 +53,6 @@ public class StorageModuleElasticsearchConfig extends ModuleConfig {
     private int superDatasetIndexShardsFactor = 5;
     private int indexRefreshInterval = 2;
     private int bulkActions = 2000;
-    private int syncBulkActions = 50000;
     private int flushInterval = 10;
     private int concurrentRequests = 2;
     /**

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -167,7 +167,7 @@ public void prepare() throws ServiceNotProvidedException {
         );
         this.registerServiceImplementation(
             IBatchDAO.class,
-            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config
+            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(),  config
                 .getFlushInterval(), config.getConcurrentRequests())
         );
         this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/StorageModuleElasticsearch7Provider.java
Patch:
@@ -165,8 +165,8 @@ public void prepare() throws ServiceNotProvidedException {
         );
         this.registerServiceImplementation(
             IBatchDAO.class,
-            new BatchProcessEsDAO(elasticSearch7Client, config.getBulkActions(), config.getSyncBulkActions(),
-                                  config.getFlushInterval(), config.getConcurrentRequests()
+            new BatchProcessEsDAO(
+                elasticSearch7Client, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()
             )
         );
         this.registerServiceImplementation(StorageDAO.class, new StorageEs7DAO(elasticSearch7Client));

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java
Patch:
@@ -234,7 +234,7 @@ public Map<String, Object> getIndex(String indexName) throws IOException {
         indexName = formatIndexName(indexName);
         try {
             Response response = client.getLowLevelClient()
-                                      .performRequest(HttpGet.METHOD_NAME, indexName);
+                                      .performRequest(HttpGet.METHOD_NAME, "/" + indexName);
             int statusCode = response.getStatusLine().getStatusCode();
             if (statusCode != HttpStatus.SC_OK) {
                 healthChecker.health();
@@ -341,7 +341,7 @@ public Map<String, Object> getTemplate(String name) throws IOException {
         name = formatIndexName(name);
         try {
             Response response = client.getLowLevelClient()
-                                      .performRequest(HttpGet.METHOD_NAME, "_template/" + name);
+                                      .performRequest(HttpGet.METHOD_NAME, "/_template/" + name);
             int statusCode = response.getStatusLine().getStatusCode();
             if (statusCode != HttpStatus.SC_OK) {
                 healthChecker.health();

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/k8s/K8SServiceRegistry.java
Patch:
@@ -209,7 +209,7 @@ protected void addService(final V1Service service) {
 
     protected void removeService(final V1Service service) {
         ofNullable(service.getMetadata()).ifPresent(
-            metadata -> idServiceMap.remove(metadata.getUid())
+            metadata -> idServiceMap.remove(metadata.getNamespace() + ":" + metadata.getName())
         );
     }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/ControllerForLowVersionInstrumentation.java
Patch:
@@ -25,7 +25,7 @@
 import static net.bytebuddy.matcher.ElementMatchers.any;
 
 public class ControllerForLowVersionInstrumentation extends AbstractControllerInstrumentation {
-    public static final String WITNESS_CLASSES_LOW_VERSION = "org.springframework.web.context.support.ServletContextPropertyPlaceholderConfigurer";
+    public static final String WITNESS_CLASSES_LOW_VERSION = "org.springframework.web.method.HandlerMethodSelector";
 
     public static final String ENHANCE_ANNOTATION = "org.springframework.stereotype.Controller";
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/RestControllerForLowVersionInstrumentation.java
Patch:
@@ -25,7 +25,7 @@
 import static net.bytebuddy.matcher.ElementMatchers.any;
 
 public class RestControllerForLowVersionInstrumentation extends AbstractControllerInstrumentation {
-    public static final String WITNESS_CLASSES_LOW_VERSION = "org.springframework.web.context.support.ServletContextPropertyPlaceholderConfigurer";
+    public static final String WITNESS_CLASSES_LOW_VERSION = "org.springframework.web.method.HandlerMethodSelector";
 
     public static final String ENHANCE_ANNOTATION = "org.springframework.web.bind.annotation.RestController";
 

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/log4j/v2/x/async/Log4jLogEventConstructorInterceptor.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.apm.toolkit.activation.log.log4j.v2.x.async;
 
+import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 
@@ -31,5 +32,6 @@ public class Log4jLogEventConstructorInterceptor implements InstanceConstructorI
 
     @Override
     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
+        objInst.setSkyWalkingDynamicField(ContextManager.getGlobalTraceId());
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/record/Record.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 
 /**
- * Record storage represents the entity have fully and manually entity definition by hard codes. Most of then are
+ * Record storage represents the entity have fully and manually entity definition by hard codes. Most of them are
  * original log data or task records. These data needs to persistent without further analysis.
  */
 public abstract class Record implements StorageData {

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/jdbc/hikaricp/JDBCHikariCPClient.java
Patch:
@@ -80,7 +80,7 @@ public Connection getConnection(boolean autoCommit) throws JDBCClientException {
     }
 
     public void execute(Connection connection, String sql) throws JDBCClientException {
-        LOGGER.debug("execute aql: {}", sql);
+        LOGGER.debug("execute sql: {}", sql);
         try (Statement statement = connection.createStatement()) {
             statement.execute(sql);
             healthChecker.health();

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/SQLExecutor.java
Patch:
@@ -49,7 +49,7 @@ public void invoke(Connection connection) throws SQLException {
             preparedStatement.setObject(i + 1, param.get(i));
         }
 
-        LOGGER.debug("execute aql in batch: {}", sql);
+        LOGGER.debug("execute sql in batch: {}", sql);
         preparedStatement.execute();
     }
 }

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/CallableInstrumentation.java
Patch:
@@ -28,8 +28,9 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link CallableInstrumentation} define that the mysql-2.x plugin intercepts the following methods in the
- * com.mysql.jdbc.CallableStatement 1. execute 2. executeQuery 3. executeUpdate
+ * {@link CallableInstrumentation} define that the mysql-5.x plugin intercepts the following methods in the
+ * com.mysql.jdbc.CallableStatement class:
+ * 1. execute 2. executeQuery 3. executeUpdate
  */
 public class CallableInstrumentation extends AbstractMysqlInstrumentation {
     private static final String ENHANCE_CLASS = "com.mysql.jdbc.CallableStatement";

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/PreparedStatementInstrumentation.java
Patch:
@@ -30,9 +30,9 @@
 import net.bytebuddy.matcher.ElementMatcher;
 
 /**
- * {@link PreparedStatementInstrumentation} define that the mysql-2.x plugin intercepts the following methods in the
- * com.mysql.jdbc.JDBC42PreparedStatement, com.mysql.jdbc.PreparedStatement and com.mysql.cj.jdbc.PreparedStatement
- * class: 1. execute 2. executeQuery 3. executeUpdate 4. executeLargeUpdate 5. addBatch
+ * {@link PreparedStatementInstrumentation} define that the mysql-5.x plugin intercepts the following methods in the
+ * com.mysql.jdbc.PreparedStatement class:
+ * 1. execute 2. executeQuery 3. executeUpdate 4. executeLargeUpdate
  */
 public class PreparedStatementInstrumentation extends AbstractMysqlInstrumentation {
 

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/CallableInstrumentation.java
Patch:
@@ -28,8 +28,9 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link CallableInstrumentation} define that the mysql-2.x plugin intercepts the following methods in the
- * com.mysql.jdbc.CallableStatement 1. execute 2. executeQuery 3. executeUpdate
+ * {@link CallableInstrumentation} define that the mysql-6.x plugin intercepts the following methods in the
+ * com.mysql.jdbc.cj.CallableStatement class:
+ * 1. execute 2. executeQuery 3. executeUpdate
  */
 public class CallableInstrumentation extends AbstractMysqlInstrumentation {
     private static final String ENHANCE_CLASS = "com.mysql.jdbc.cj.CallableStatement";

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/PreparedStatementInstrumentation.java
Patch:
@@ -28,9 +28,9 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link PreparedStatementInstrumentation} define that the mysql-2.x plugin intercepts the following methods in the
- * com.mysql.jdbc.JDBC42PreparedStatement, com.mysql.jdbc.PreparedStatement and com.mysql.cj.jdbc.PreparedStatement
- * class: 1. execute 2. executeQuery 3. executeUpdate 4. executeLargeUpdate 5. addBatch
+ * {@link PreparedStatementInstrumentation} define that the mysql-6.x plugin intercepts the following methods in the
+ * com.mysql.cj.jdbc.PreparedStatement class:
+ * 1. execute 2. executeQuery 3. executeUpdate 4. executeLargeUpdate
  */
 public class PreparedStatementInstrumentation extends AbstractMysqlInstrumentation {
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/AbstractSearchTagBuilder.java
Patch:
@@ -50,8 +50,8 @@ protected void analysisSearchTag(List<Tag> rawTags, Map<String, Object> dbMap) {
             int tagInx = 0;
             final String tagExpression = tag.toString();
             for (int i = 0; i < numOfSearchableValuesPerTag; i++) {
-                tagInx = index + numOfSearchableValuesPerTag + i;
-                final String previousValue = (String) dbMap.get(tagColumn);
+                tagInx = index * numOfSearchableValuesPerTag + i;
+                final String previousValue = (String) dbMap.get(tagColumn + "_" + tagInx);
                 if (previousValue == null) {
                     // Still have at least one available slot, add directly.
                     shouldAdd = true;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/JVMMetricsSender.java
Patch:
@@ -84,6 +84,7 @@ public void run() {
                 }
             } catch (Throwable t) {
                 LOGGER.error(t, "send JVM metrics to Collector fail.");
+                ServiceManager.INSTANCE.findService(GRPCChannelManager.class).reportError(t);
             }
         }
     }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/dynamic/watcher/IgnoreSuffixPatternsWatcher.java
Patch:
@@ -16,10 +16,11 @@
  *
  */
 
-package org.apache.skywalking.apm.agent.core.context;
+package org.apache.skywalking.apm.agent.core.conf.dynamic.watcher;
 
 import org.apache.skywalking.apm.agent.core.conf.Config;
 import org.apache.skywalking.apm.agent.core.conf.dynamic.AgentConfigChangeWatcher;
+import org.apache.skywalking.apm.agent.core.context.ContextManagerExtendService;
 import org.apache.skywalking.apm.agent.core.logging.api.ILog;
 import org.apache.skywalking.apm.agent.core.logging.api.LogManager;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/dynamic/watcher/SamplingRateWatcher.java
Patch:
@@ -16,13 +16,14 @@
  *
  */
 
-package org.apache.skywalking.apm.agent.core.sampling;
+package org.apache.skywalking.apm.agent.core.conf.dynamic.watcher;
 
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.skywalking.apm.agent.core.conf.Config;
 import org.apache.skywalking.apm.agent.core.conf.dynamic.AgentConfigChangeWatcher;
 import org.apache.skywalking.apm.agent.core.logging.api.ILog;
 import org.apache.skywalking.apm.agent.core.logging.api.LogManager;
+import org.apache.skywalking.apm.agent.core.sampling.SamplingService;
 
 public class SamplingRateWatcher extends AgentConfigChangeWatcher {
     private static final ILog LOGGER = LogManager.getLogger(SamplingRateWatcher.class);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.skywalking.apm.agent.core.boot.ServiceManager;
 import org.apache.skywalking.apm.agent.core.conf.Config;
 import org.apache.skywalking.apm.agent.core.conf.dynamic.ConfigurationDiscoveryService;
+import org.apache.skywalking.apm.agent.core.conf.dynamic.watcher.SamplingRateWatcher;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.apache.skywalking.apm.agent.core.logging.api.ILog;
 import org.apache.skywalking.apm.agent.core.logging.api.LogManager;
@@ -109,7 +110,7 @@ private void resetSamplingFactor() {
     /**
      * Handle the samplingRate changed.
      */
-    void handleSamplingRateChanged() {
+    public void handleSamplingRateChanged() {
         if (samplingRateWatcher.getSamplingRate() > 0) {
             if (!on) {
                 on = true;

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/conf/watcher/IgnoreSuffixPatternsWatcherTest.java
Patch:
@@ -16,10 +16,12 @@
  *
  */
 
-package org.apache.skywalking.apm.agent.core.context;
+package org.apache.skywalking.apm.agent.core.conf.watcher;
 
 import org.apache.skywalking.apm.agent.core.boot.ServiceManager;
 import org.apache.skywalking.apm.agent.core.conf.dynamic.AgentConfigChangeWatcher;
+import org.apache.skywalking.apm.agent.core.conf.dynamic.watcher.IgnoreSuffixPatternsWatcher;
+import org.apache.skywalking.apm.agent.core.context.ContextManagerExtendService;
 import org.apache.skywalking.apm.agent.core.test.tools.AgentServiceRule;
 import org.junit.AfterClass;
 import org.junit.Assert;

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/conf/watcher/SamplingRateWatcherTest.java
Patch:
@@ -16,10 +16,12 @@
  *
  */
 
-package org.apache.skywalking.apm.agent.core.sampling;
+package org.apache.skywalking.apm.agent.core.conf.watcher;
 
 import org.apache.skywalking.apm.agent.core.boot.ServiceManager;
 import org.apache.skywalking.apm.agent.core.conf.dynamic.AgentConfigChangeWatcher;
+import org.apache.skywalking.apm.agent.core.conf.dynamic.watcher.SamplingRateWatcher;
+import org.apache.skywalking.apm.agent.core.sampling.SamplingService;
 import org.apache.skywalking.apm.agent.core.test.tools.AgentServiceRule;
 import org.junit.AfterClass;
 import org.junit.Assert;

File: oap-server/analyzer/log-analyzer/src/main/java/org/apache/skywalking/oap/log/analyzer/dsl/spec/sink/sampler/RateLimitingSampler.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.skywalking.oap.log.analyzer.dsl.spec.sink.sampler;
 
-import java.util.HashSet;
-import java.util.Set;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
@@ -69,7 +69,7 @@ public RateLimitingSampler reset() {
 
     @Slf4j
     public static class ResetHandler {
-        private final Set<Sampler> samplers = new HashSet<>();
+        private final List<Sampler> samplers = new ArrayList<>();
 
         private volatile ScheduledFuture<?> future;
 

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverProvider.java
Patch:
@@ -57,7 +57,7 @@ public ModuleConfig createConfigBeanIfAbsent() {
     @Override
     public void prepare() throws ServiceNotProvidedException, ModuleStartException {
         try {
-            FieldsHelper.SINGLETON.init(fieldMappingFile);
+            FieldsHelper.SINGLETON.init(fieldMappingFile, config.serviceMetaInfoFactory().clazz());
         } catch (final Exception e) {
             throw new ModuleStartException("Failed to load metadata-service-mapping.yaml", e);
         }

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/AbstractALSAnalyzer.java
Patch:
@@ -32,10 +32,10 @@ public Role identify(final StreamAccessLogsMessage.Identifier alsIdentifier, fin
         if (alsIdentifier == null) {
             return defaultRole;
         }
-        final Node node = alsIdentifier.getNode();
-        if (node == null) {
+        if (!alsIdentifier.hasNode()) {
             return defaultRole;
         }
+        final Node node = alsIdentifier.getNode();
         final String id = node.getId();
         if (id.startsWith("router~")) {
             return Role.PROXY;

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/ServiceMetaInfoAdapter.java
Patch:
@@ -83,7 +83,7 @@ public ServiceMetaInfoAdapter(final Any any) throws Exception {
      * @param node the flat buffer node where to extract the metadata
      * @return the metadata {@link Struct}
      */
-    protected Struct extractStructFromNodeFlatBuffer(final FlatNode node) {
+    public static Struct extractStructFromNodeFlatBuffer(final FlatNode node) {
         final Struct.Builder builder = Struct.newBuilder();
 
         builder.putFields("NAME", Value.newBuilder().setStringValue(nullToEmpty(node.name())).build());

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/GRPCChannelManager.java
Patch:
@@ -170,7 +170,7 @@ public Channel getChannel() {
     }
 
     /**
-     * If the given expcetion is triggered by network problem, connect in background.
+     * If the given exception is triggered by network problem, connect in background.
      */
     public void reportError(Throwable throwable) {
         if (isNetworkError(throwable)) {

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/DownsamplingType.java
Patch:
@@ -22,5 +22,5 @@
  * DownsamplingType indicates the downsampling type of meter function
  */
 public enum DownsamplingType {
-    AVG, LATEST
+    AVG, SUM, LATEST
 }

File: test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/log/LogE2E.java
Patch:
@@ -153,9 +153,9 @@ private void verifyInstanceMetrics(final Service service, final Instances instan
 
             LOGGER.info("{}: {}", metricsName, instanceMetrics);
             final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();
-            final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();
-            greaterThanZero.setValue("gt 0");
-            instanceRespTimeMatcher.setValue(greaterThanZero);
+            final MetricsValueMatcher greaterThanOne = new MetricsValueMatcher();
+            greaterThanOne.setValue("gt 1");
+            instanceRespTimeMatcher.setValue(greaterThanOne);
             instanceRespTimeMatcher.verify(instanceMetrics.getValues());
         }
     }

File: apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientDestTracingFilterInterceptor.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * When we create exitspan in ClientTracingFilter, we can't know the remote address because the ClientTracingFilter
  * is above the loadbalancefilter in the rpc call stack. However by intercept the ClientDestTracingFilter, we can get
- * the remote adress and set it to exitspan and contextCarrier.
+ * the remote address and set it to exitspan and contextCarrier.
  */
 public class ClientDestTracingFilterInterceptor extends AbstractInterceptor {
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/spring-webflux-5.x-webclient-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/webflux/v5/webclient/WebFluxWebClientInterceptor.java
Patch:
@@ -54,7 +54,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         final String remotePeer = getIPAndPort(uri);
         AbstractSpan span = ContextManager.createExitSpan(operationName, contextCarrier, remotePeer);
 
-        //set componet name
+        //set components name
         span.setComponent(ComponentsDefine.SPRING_WEBCLIENT);
         Tags.URL.set(span, uri.toString());
         Tags.HTTP.METHOD.set(span, request.method().toString());

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/AnalyzerModuleConfig.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.analyzer.provider;
 
+import com.google.common.base.Splitter;
 import lombok.Getter;
 import lombok.Setter;
 import lombok.extern.slf4j.Slf4j;
@@ -145,10 +146,10 @@ public boolean shouldIgnorePeerIPDue2Virtual(int componentId) {
     /**
      * Get all files could be meter analyzed, files split by ","
      */
-    public String[] meterAnalyzerActiveFileNames() {
+    public List<String> meterAnalyzerActiveFileNames() {
         if (StringUtils.isEmpty(this.meterAnalyzerActiveFiles)) {
             return null;
         }
-        return this.meterAnalyzerActiveFiles.split(",");
+        return Splitter.on(",").splitToList(this.meterAnalyzerActiveFiles);
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -53,11 +53,11 @@ public class SamplingService implements BootService {
 
     @Override
     public void prepare() {
-        samplingRateWatcher = new SamplingRateWatcher("agent.sample_n_per_3_secs", this);
     }
 
     @Override
     public void boot() {
+        samplingRateWatcher = new SamplingRateWatcher("agent.sample_n_per_3_secs", this);
         ServiceManager.INSTANCE.findService(ConfigurationDiscoveryService.class)
                                .registerAgentConfigChangeWatcher(samplingRateWatcher);
 

File: apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/TraceIgnoreExtendService.java
Patch:
@@ -41,7 +41,6 @@ public class TraceIgnoreExtendService extends SamplingService {
     @Override
     public void prepare() {
         super.prepare();
-        traceIgnorePatternWatcher = new TraceIgnorePatternWatcher("agent.trace.ignore_path", this);
     }
 
     @Override
@@ -53,6 +52,7 @@ public void boot() {
             patterns = IgnoreConfig.Trace.IGNORE_PATH.split(PATTERN_SEPARATOR);
         }
 
+        traceIgnorePatternWatcher = new TraceIgnorePatternWatcher("agent.trace.ignore_path", this);
         ServiceManager.INSTANCE.findService(ConfigurationDiscoveryService.class)
                                .registerAgentConfigChangeWatcher(traceIgnorePatternWatcher);
 

File: oap-server/server-cluster-plugin/cluster-kubernetes-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/kubernetes/NamespacedPodListInformer.java
Patch:
@@ -22,6 +22,7 @@
 import io.kubernetes.client.informer.SharedInformerFactory;
 import io.kubernetes.client.informer.cache.Lister;
 import io.kubernetes.client.openapi.ApiClient;
+import io.kubernetes.client.openapi.Configuration;
 import io.kubernetes.client.openapi.apis.CoreV1Api;
 import io.kubernetes.client.openapi.models.V1Pod;
 import io.kubernetes.client.openapi.models.V1PodList;
@@ -77,6 +78,7 @@ private void doStartPodInformer(ClusterModuleKubernetesConfig podConfig) throws
 
         ApiClient apiClient = Config.defaultClient();
         apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().readTimeout(0, TimeUnit.SECONDS).build());
+        Configuration.setDefaultApiClient(apiClient);
         CoreV1Api coreV1Api = new CoreV1Api(apiClient);
         factory = new SharedInformerFactory(executorService);
 

File: oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigurationConfigmapInformer.java
Patch:
@@ -22,6 +22,7 @@
 import io.kubernetes.client.informer.SharedInformerFactory;
 import io.kubernetes.client.informer.cache.Lister;
 import io.kubernetes.client.openapi.ApiClient;
+import io.kubernetes.client.openapi.Configuration;
 import io.kubernetes.client.openapi.apis.CoreV1Api;
 import io.kubernetes.client.openapi.models.V1ConfigMap;
 import io.kubernetes.client.openapi.models.V1ConfigMapList;
@@ -67,6 +68,7 @@ private void doAddShutdownHook() {
     private void doStartConfigMapInformer(final ConfigmapConfigurationSettings settings) throws IOException {
         ApiClient apiClient = Config.defaultClient();
         apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().readTimeout(0, TimeUnit.SECONDS).build());
+        Configuration.setDefaultApiClient(apiClient);
         CoreV1Api coreV1Api = new CoreV1Api(apiClient);
         factory = new SharedInformerFactory(executorService);
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Log.java
Patch:
@@ -33,7 +33,7 @@ public class Log {
     private String endpointId;
     private String endpointName;
     private String traceId;
-    private String timestamp;
+    private Long timestamp;
     private ContentType contentType = ContentType.NONE;
     private String content;
     private final List<KeyValue> tags;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/LogQueryEsDAO.java
Patch:
@@ -150,7 +150,7 @@ public Logs queryLogs(final String serviceId,
             log.setEndpointId((String) searchHit.getSourceAsMap().get(AbstractLogRecord.ENDPOINT_ID));
             log.setEndpointName((String) searchHit.getSourceAsMap().get(AbstractLogRecord.ENDPOINT_NAME));
             log.setTraceId((String) searchHit.getSourceAsMap().get(AbstractLogRecord.TRACE_ID));
-            log.setTimestamp(searchHit.getSourceAsMap().get(AbstractLogRecord.TIMESTAMP).toString());
+            log.setTimestamp(((Number) searchHit.getSourceAsMap().get(AbstractLogRecord.TIMESTAMP)).longValue());
             log.setContentType(ContentType.instanceOf(
                 ((Number) searchHit.getSourceAsMap().get(AbstractLogRecord.CONTENT_TYPE)).intValue()));
             log.setContent((String) searchHit.getSourceAsMap().get(AbstractLogRecord.CONTENT));

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/LogQueryEs7DAO.java
Patch:
@@ -150,7 +150,7 @@ public Logs queryLogs(final String serviceId,
             log.setEndpointId((String) searchHit.getSourceAsMap().get(AbstractLogRecord.ENDPOINT_ID));
             log.setEndpointName((String) searchHit.getSourceAsMap().get(AbstractLogRecord.ENDPOINT_NAME));
             log.setTraceId((String) searchHit.getSourceAsMap().get(AbstractLogRecord.TRACE_ID));
-            log.setTimestamp(searchHit.getSourceAsMap().get(AbstractLogRecord.TIMESTAMP).toString());
+            log.setTimestamp(((Number) searchHit.getSourceAsMap().get(AbstractLogRecord.TIMESTAMP)).longValue());
             log.setContentType(ContentType.instanceOf(
                 ((Number) searchHit.getSourceAsMap().get(AbstractLogRecord.CONTENT_TYPE)).intValue()));
             log.setContent((String) searchHit.getSourceAsMap().get(AbstractLogRecord.CONTENT));

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/LogQuery.java
Patch:
@@ -166,7 +166,7 @@ public Logs queryLogs(final String serviceId,
                 log.setEndpointId((String) data.get(ENDPOINT_ID));
                 log.setEndpointName((String) data.get(ENDPOINT_NAME));
                 log.setTraceId((String) data.get(TRACE_ID));
-                log.setTimestamp(data.get(TIMESTAMP).toString());
+                log.setTimestamp(((Number) data.get(TIMESTAMP)).longValue());
                 log.setContentType(
                     ContentType.instanceOf(((Number) data.get(AbstractLogRecord.CONTENT_TYPE)).intValue()));
                 log.setContent((String) data.get(AbstractLogRecord.CONTENT));

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2LogQueryDAO.java
Patch:
@@ -186,7 +186,7 @@ public Logs queryLogs(String serviceId,
                     log.setEndpointId(resultSet.getString(ENDPOINT_ID));
                     log.setEndpointName(resultSet.getString(ENDPOINT_NAME));
                     log.setTraceId(resultSet.getString(TRACE_ID));
-                    log.setTimestamp(resultSet.getString(TIMESTAMP));
+                    log.setTimestamp(resultSet.getLong(TIMESTAMP));
                     log.setContentType(ContentType.instanceOf(resultSet.getInt(CONTENT_TYPE)));
                     log.setContent(resultSet.getString(CONTENT));
                     String dataBinaryBase64 = resultSet.getString(TAGS_RAW_DATA);

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/browser/BrowserErrorLogMatcher.java
Patch:
@@ -72,11 +72,11 @@ public void verify(final BrowserErrorLog log) {
         }
 
         if (nonNull(getLine())) {
-            doVerify(getLine(), String.valueOf(log.getLine()));
+            doVerify(getLine(), log.getLine());
         }
 
         if (nonNull(getCol())) {
-            doVerify(getCol(), String.valueOf(log.getCol()));
+            doVerify(getCol(), log.getCol());
         }
 
         if (nonNull(getStack())) {
@@ -88,7 +88,7 @@ public void verify(final BrowserErrorLog log) {
         }
 
         if (nonNull(getFirstReportedError())) {
-            doVerify(getFirstReportedError(), String.valueOf(log.isFirstReportedError()));
+            doVerify(getFirstReportedError(), log.isFirstReportedError());
         }
     }
 }

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/dashboard/DashboardConfigurationMatcher.java
Patch:
@@ -34,7 +34,7 @@ public void verify(final DashboardConfiguration configuration) {
         doVerify(this.name, configuration.getName());
         doVerify(this.type, String.valueOf(configuration.getType()));
         doVerify(this.configuration, configuration.getConfiguration());
-        doVerify(this.activated, String.valueOf(configuration.isActivated()));
-        doVerify(this.disabled, String.valueOf(configuration.isDisabled()));
+        doVerify(this.activated, configuration.isActivated());
+        doVerify(this.disabled, configuration.isDisabled());
     }
 }

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/log/Log.java
Patch:
@@ -33,7 +33,7 @@ public class Log {
     private String endpointName;
     private String endpointId;
     private String traceId;
-    private String timestamp;
+    private Long timestamp;
     private String contentType;
     private String content;
     private List<KeyValue> tags;

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/trace/TraceMatcher.java
Patch:
@@ -93,7 +93,7 @@ private void verifyEndpointName(Trace trace) {
 
     private void verifyDuration(Trace trace) {
         final String expected = this.getDuration();
-        final String actual = String.valueOf(trace.getDuration());
+        final int actual = trace.getDuration();
 
         doVerify(expected, actual);
     }

File: test/e2e/e2e-data/src/test/java/org/apache/skywalking/e2e/TestLogsMatcher.java
Patch:
@@ -51,7 +51,7 @@ public void shouldSuccess() {
                           .setEndpointName("/traffic")
                           .setEndpointId("ZTJl.1_L3RyYWZmaWM=")
                           .setTraceId("ac81b308-0d66-4c69-a7af-a023a536bd3e")
-                          .setTimestamp("1609665785987")
+                          .setTimestamp(1609665785987L)
                           .setContentType("TEXT")
                           .setContent("log")
                           .setTags(
@@ -63,7 +63,7 @@ public void shouldSuccess() {
                           .setEndpointName("/traffic")
                           .setEndpointId("ZTJl.1_L3RyYWZmaWM=")
                           .setTraceId("ac81b308-0d66-4c69-a7af-a023a536bd3e")
-                          .setTimestamp("1609665785987")
+                          .setTimestamp(1609665785987L)
                           .setContentType("TEXT")
                           .setContent("log")
                           .setTags(

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/LogQueryService.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;
 import org.apache.skywalking.oap.server.core.query.enumeration.Order;
 import org.apache.skywalking.oap.server.core.query.input.TraceScopeCondition;
-import org.apache.skywalking.oap.server.core.query.type.LogState;
 import org.apache.skywalking.oap.server.core.query.type.Logs;
 import org.apache.skywalking.oap.server.core.query.type.Pagination;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
@@ -61,7 +60,6 @@ public Logs queryLogs(String serviceId,
                           String endpointId,
                           String endpointName,
                           TraceScopeCondition relatedTrace,
-                          LogState state,
                           Pagination paging,
                           Order queryOrder,
                           final long startTB,
@@ -87,7 +85,6 @@ public Logs queryLogs(String serviceId,
                                                endpointId,
                                                endpointName,
                                                relatedTrace,
-                                               state,
                                                queryOrder,
                                                page.getFrom(), page.getLimit(),
                                                startTB, endTB, tags,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/LogQueryCondition.java
Patch:
@@ -23,7 +23,6 @@
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;
 import org.apache.skywalking.oap.server.core.query.enumeration.Order;
-import org.apache.skywalking.oap.server.core.query.type.LogState;
 import org.apache.skywalking.oap.server.core.query.type.Pagination;
 
 @Getter
@@ -35,7 +34,6 @@ public class LogQueryCondition {
     private String endpointName;
     private TraceScopeCondition relatedTrace;
     private Duration queryDuration;
-    private LogState state;
     private Pagination paging;
     private List<Tag> tags;
     private List<String> keywordsOfContent;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Log.java
Patch:
@@ -34,8 +34,6 @@ public class Log {
     private String endpointName;
     private String traceId;
     private String timestamp;
-    private boolean isError;
-    private String statusCode;
     private ContentType contentType = ContentType.NONE;
     private String content;
     private final List<KeyValue> tags;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/AbstractLog.java
Patch:
@@ -41,6 +41,7 @@ public abstract class AbstractLog extends Source {
     private String content;
     private byte[] tagsRawData;
     private List<Tag> tags = new ArrayList<>();
+    private boolean error = false;
 
     @Override
     public String getEntityId() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ILogQueryDAO.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.skywalking.oap.server.core.query.enumeration.Order;
 import org.apache.skywalking.oap.server.core.query.input.TraceScopeCondition;
 import org.apache.skywalking.oap.server.core.query.type.KeyValue;
-import org.apache.skywalking.oap.server.core.query.type.LogState;
 import org.apache.skywalking.oap.server.core.query.type.Logs;
 import org.apache.skywalking.oap.server.library.module.Service;
 
@@ -42,7 +41,6 @@ Logs queryLogs(String serviceId,
                    String endpointId,
                    String endpointName,
                    TraceScopeCondition relatedTrace,
-                   LogState state,
                    Order queryOrder,
                    int from,
                    int limit,

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/LogQuery.java
Patch:
@@ -68,7 +68,6 @@ public Logs queryLogs(LogQueryCondition condition) throws IOException {
             condition.getEndpointId(),
             condition.getEndpointName(),
             condition.getRelatedTrace(),
-            condition.getState(),
             condition.getPaging(),
             queryOrder,
             startSecondTB, endSecondTB,

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2LogRecordBuilder.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
 
-import static org.apache.skywalking.oap.server.core.analysis.manual.log.AbstractLogRecord.IS_ERROR;
 import static org.apache.skywalking.oap.server.core.analysis.manual.log.AbstractLogRecord.TAGS_RAW_DATA;
 import static org.apache.skywalking.oap.server.core.analysis.manual.log.LogRecord.CONTENT;
 import static org.apache.skywalking.oap.server.core.analysis.manual.log.LogRecord.CONTENT_TYPE;
@@ -61,7 +60,6 @@ public Record map2Data(final Map<String, Object> dbMap) {
         record.setTraceId((String) dbMap.get(TRACE_ID));
         record.setTraceSegmentId((String) dbMap.get(TRACE_SEGMENT_ID));
         record.setSpanId(((Number) dbMap.get(SPAN_ID)).intValue());
-        record.setIsError(((Number) dbMap.get(IS_ERROR)).intValue());
         record.setContentType(((Number) dbMap.get(CONTENT_TYPE)).intValue());
         record.setContent((String) dbMap.get(CONTENT));
         record.setTimestamp(((Number) dbMap.get(TIMESTAMP)).longValue());
@@ -87,7 +85,6 @@ public Map<String, Object> data2Map(final Record record) {
         map.put(TRACE_ID, storageData.getTraceId());
         map.put(TRACE_SEGMENT_ID, storageData.getTraceSegmentId());
         map.put(SPAN_ID, storageData.getSpanId());
-        map.put(IS_ERROR, storageData.getIsError());
         map.put(TIME_BUCKET, storageData.getTimeBucket());
         map.put(CONTENT_TYPE, storageData.getContentType());
         map.put(CONTENT, storageData.getContent());

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java
Patch:
@@ -396,15 +396,12 @@ public List<Log> logs(final LogsQuery query) throws Exception {
         final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)
                                             .stream().filter(it -> !it.startsWith("#"))
                                             .collect(Collectors.joining())
-                                            .replace("{state}", query.state())
                                             .replace("{serviceId}", query.serviceId())
                                             .replace("{endpointId}", query.endpointId())
                                             .replace("{endpointName}", query.endpointName())
                                             .replace("{start}", query.start())
                                             .replace("{end}", query.end())
                                             .replace("{step}", query.step())
-                                            .replace("{tagKey}", query.tagKey())
-                                            .replace("{tagValue}", query.tagValue())
                                             .replace("{pageNum}", query.pageNum())
                                             .replace("{pageSize}", query.pageSize())
                                             .replace("{needTotal}", query.needTotal())

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/log/Log.java
Patch:
@@ -34,7 +34,6 @@ public class Log {
     private String endpointId;
     private String traceId;
     private String timestamp;
-    private boolean isError;
     private String contentType;
     private String content;
     private List<KeyValue> tags;

File: test/e2e/e2e-data/src/test/java/org/apache/skywalking/e2e/TestLogsMatcher.java
Patch:
@@ -52,7 +52,6 @@ public void shouldSuccess() {
                           .setEndpointId("ZTJl.1_L3RyYWZmaWM=")
                           .setTraceId("ac81b308-0d66-4c69-a7af-a023a536bd3e")
                           .setTimestamp("1609665785987")
-                          .setError(false)
                           .setContentType("TEXT")
                           .setContent("log")
                           .setTags(
@@ -65,7 +64,6 @@ public void shouldSuccess() {
                           .setEndpointId("ZTJl.1_L3RyYWZmaWM=")
                           .setTraceId("ac81b308-0d66-4c69-a7af-a023a536bd3e")
                           .setTimestamp("1609665785987")
-                          .setError(false)
                           .setContentType("TEXT")
                           .setContent("log")
                           .setTags(

File: test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/kafka/KafkaLogE2E.java
Patch:
@@ -96,7 +96,6 @@ public void verifyService() throws Exception {
     @RetryableTest
     public void verifyLog() throws Exception {
         LogsQuery logsQuery = new LogsQuery().serviceId("WW91cl9BcHBsaWNhdGlvbk5hbWU=.1")
-                                             .tag("logger", "org.apache.skywalking.e2e.controller.LogController")
                                              .start(startTime)
                                              .end(Times.now());
         if (graphql.supportQueryLogsByKeywords()) {

File: test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/log/LogE2E.java
Patch:
@@ -91,7 +91,6 @@ public void verifyService() throws Exception {
     @RetryableTest
     public void verifyLog() throws Exception {
         LogsQuery logsQuery = new LogsQuery().serviceId("WW91cl9BcHBsaWNhdGlvbk5hbWU=.1")
-                                             .tag("logger", "org.apache.skywalking.e2e.controller.LogController")
                                              .start(startTime)
                                              .end(Times.now());
         if (graphql.supportQueryLogsByKeywords()) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -62,6 +62,7 @@ public static class Agent {
 
         /**
          * If the operation name of the first span is included in this set, this segment should be ignored.
+         * Multiple values should be separated by `,`.
          */
         public static String IGNORE_SUFFIX = ".jpg,.jpeg,.js,.css,.png,.bmp,.gif,.ico,.mp3,.mp4,.html,.svg";
 

File: apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/TraceIgnoreExtendService.java
Patch:
@@ -35,7 +35,7 @@ public class TraceIgnoreExtendService extends SamplingService {
     private static final ILog LOGGER = LogManager.getLogger(TraceIgnoreExtendService.class);
     private static final String PATTERN_SEPARATOR = ",";
     private TracePathMatcher pathMatcher = new FastPathMatcher();
-    private String[] patterns = new String[] {};
+    private volatile String[] patterns = new String[] {};
     private TraceIgnorePatternWatcher traceIgnorePatternWatcher;
 
     @Override

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java
Patch:
@@ -58,6 +58,7 @@ public IntValues getValues(final BatchMetricConditions metrics, final Duration d
             condition.setEntity(new MockEntity(null));
 
             kv.setValue(query.readMetricsValue(condition, duration));
+            values.addKVInt(kv);
         } else {
             for (final String id : metrics.getIds()) {
                 KVInt kv = new KVInt();

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/LogEntry2MetricsAdapter.java
Patch:
@@ -202,7 +202,7 @@ protected static String parseInternalErrorCode(final ResponseFlags responseFlags
                 return "fault_injected";
             } else if (responseFlags.getRateLimited()) {
                 return "rate_limited";
-            } else if (responseFlags.getUnauthorizedDetails() != null) {
+            } else if (responseFlags.hasUnauthorizedDetails()) {
                 return "unauthorized_details";
             } else if (responseFlags.getRateLimitServiceError()) {
                 return "rate_limit_service_error";

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java
Patch:
@@ -50,8 +50,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);
 
         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);
-        Tags.URL.set(span, requestURL.getScheme() + "://" + requestURL.getHost() + ":" + requestURL.getPort() + requestURL
-            .getPath());
+        Tags.URL.set(span, requestURL.getScheme() + "://" + requestURL.getHost() +
+                (requestURL.getPort() > 0 ? ":" + requestURL.getPort() : "") + requestURL.getPath());
         Tags.HTTP.METHOD.set(span, httpMethod.toString());
         SpanLayer.asHttp(span);
         RestTemplateRuntimeContextHelper.addUri(uri);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java
Patch:
@@ -46,8 +46,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);
 
         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);
-        Tags.URL.set(span, requestURL.getScheme() + "://" + requestURL.getHost() + ":" + requestURL.getPort() + requestURL
-            .getPath());
+        Tags.URL.set(span, requestURL.getScheme() + "://" + requestURL.getHost() +
+                (requestURL.getPort() > 0 ? ":" + requestURL.getPort() : "") + requestURL.getPath());
         Tags.HTTP.METHOD.set(span, httpMethod.toString());
         SpanLayer.asHttp(span);
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/AbstractTracerContext.java
Patch:
@@ -74,7 +74,7 @@ public interface AbstractTracerContext {
      *
      * @return the string represents the id.
      */
-    String getSpanId();
+    int getSpanId();
 
     /**
      * Create an entry span

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/IgnoredTracerContext.java
Patch:
@@ -75,8 +75,8 @@ public String getSegmentId() {
     }
 
     @Override
-    public String getSpanId() {
-        return IGNORE_TRACE;
+    public int getSpanId() {
+        return -1;
     }
 
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java
Patch:
@@ -249,8 +249,8 @@ public String getSegmentId() {
     }
 
     @Override
-    public String getSpanId() {
-        return String.valueOf(activeSpan().getSpanId());
+    public int getSpanId() {
+        return activeSpan().getSpanId();
     }
 
     /**

File: test/plugin/scenarios/apm-toolkit-trace-scenario/src/main/java/test/apache/skywalking/apm/testcase/toolkit/controller/TestController.java
Patch:
@@ -61,7 +61,9 @@ public String toolKitCase() {
         TraceContext.putCorrelation(CORRELATION_CONTEXT_KEY, CORRELATION_CONTEXT_VALUE);
         ActiveSpan.tag("traceID", TraceContext.traceId());
         ActiveSpan.tag("segmentID", TraceContext.segmentId());
-        ActiveSpan.tag("spanID", TraceContext.spanId());
+        if (TraceContext.spanId() > -1) {
+            ActiveSpan.tag("spanID", String.valueOf(TraceContext.spanId()));
+        }
         testService.asyncCallable(() -> {
             visit("http://localhost:8080/apm-toolkit-trace-scenario/case/asyncVisit/callable");
             return true;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointRelationServerSideMetrics.java
Patch:
@@ -35,9 +35,8 @@
 @Stream(name = EndpointRelationServerSideMetrics.INDEX_NAME, scopeId = DefaultScopeDefine.ENDPOINT_RELATION,
     builder = EndpointRelationServerSideMetrics.Builder.class, processor = MetricsStreamProcessor.class)
 @EqualsAndHashCode(of = {
-    "entityId",
-    "timeBucket"
-})
+    "entityId"
+}, callSuper = true)
 public class EndpointRelationServerSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "endpoint_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationClientSideMetrics.java
Patch:
@@ -35,9 +35,8 @@
 @Stream(name = ServiceInstanceRelationClientSideMetrics.INDEX_NAME, scopeId = DefaultScopeDefine.SERVICE_INSTANCE_RELATION,
     builder = ServiceInstanceRelationClientSideMetrics.Builder.class, processor = MetricsStreamProcessor.class)
 @EqualsAndHashCode(of = {
-    "entityId",
-    "timeBucket"
-})
+    "entityId"
+}, callSuper = true)
 public class ServiceInstanceRelationClientSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "service_instance_relation_client_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationServerSideMetrics.java
Patch:
@@ -35,9 +35,8 @@
 @Stream(name = ServiceInstanceRelationServerSideMetrics.INDEX_NAME, scopeId = DefaultScopeDefine.SERVICE_INSTANCE_RELATION,
     builder = ServiceInstanceRelationServerSideMetrics.Builder.class, processor = MetricsStreamProcessor.class)
 @EqualsAndHashCode(of = {
-    "entityId",
-    "timeBucket"
-})
+    "entityId"
+}, callSuper = true)
 public class ServiceInstanceRelationServerSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "service_instance_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationClientSideMetrics.java
Patch:
@@ -35,9 +35,8 @@
 @Stream(name = ServiceRelationClientSideMetrics.INDEX_NAME, scopeId = DefaultScopeDefine.SERVICE_RELATION,
     builder = ServiceRelationClientSideMetrics.Builder.class, processor = MetricsStreamProcessor.class)
 @EqualsAndHashCode(of = {
-    "entityId",
-    "timeBucket"
-})
+    "entityId"
+}, callSuper = true)
 public class ServiceRelationClientSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "service_relation_client_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java
Patch:
@@ -35,9 +35,8 @@
 @Stream(name = ServiceRelationServerSideMetrics.INDEX_NAME, scopeId = DefaultScopeDefine.SERVICE_RELATION,
     builder = ServiceRelationServerSideMetrics.Builder.class, processor = MetricsStreamProcessor.class)
 @EqualsAndHashCode(of = {
-    "entityId",
-    "timeBucket"
-})
+    "entityId"
+}, callSuper = true)
 public class ServiceRelationServerSideMetrics extends Metrics {
 
     public static final String INDEX_NAME = "service_relation_server_side";

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/TopNRecordsQuery.java
Patch:
@@ -101,8 +101,8 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
     }
 
     private static final Comparator<SelectedRecord> ASCENDING = Comparator.comparingLong(
-        a -> Long.parseLong(a.getValue()));
+        a -> ((Number) Double.parseDouble(a.getValue())).longValue());
 
     private static final Comparator<SelectedRecord> DESCENDING = (a, b) -> Long.compare(
-        Long.parseLong(b.getValue()), Long.parseLong(a.getValue()));
+        ((Number) Double.parseDouble(b.getValue())).longValue(), ((Number) Double.parseDouble(a.getValue())).longValue());
 }

File: apm-sniffer/apm-sdk-plugin/rocketMQ-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v3/MessageConcurrentlyConsumeInterceptor.java
Patch:
@@ -39,7 +39,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         if (status == ConsumeConcurrentlyStatus.RECONSUME_LATER) {
             AbstractSpan activeSpan = ContextManager.activeSpan();
             activeSpan.errorOccurred();
-            Tags.STATUS_CODE.set(activeSpan, status.name());
+            Tags.MQ_STATUS.set(activeSpan, status.name());
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/rocketMQ-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v3/MessageOrderlyConsumeInterceptor.java
Patch:
@@ -40,7 +40,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         if (status == ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT) {
             AbstractSpan activeSpan = ContextManager.activeSpan();
             activeSpan.errorOccurred();
-            Tags.STATUS_CODE.set(activeSpan, status.name());
+            Tags.MQ_STATUS.set(activeSpan, status.name());
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/rocketMQ-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v3/OnSuccessInterceptor.java
Patch:
@@ -47,7 +47,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         SendStatus sendStatus = ((SendResult) allArguments[0]).getSendStatus();
         if (sendStatus != SendStatus.SEND_OK) {
             activeSpan.errorOccurred();
-            Tags.STATUS_CODE.set(activeSpan, sendStatus.name());
+            Tags.MQ_STATUS.set(activeSpan, sendStatus.name());
         }
         ContextManager.continued(enhanceInfo.getContextSnapshot());
     }

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/MessageConcurrentlyConsumeInterceptor.java
Patch:
@@ -39,7 +39,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         if (status == ConsumeConcurrentlyStatus.RECONSUME_LATER) {
             AbstractSpan activeSpan = ContextManager.activeSpan();
             activeSpan.errorOccurred();
-            Tags.STATUS_CODE.set(activeSpan, status.name());
+            Tags.MQ_STATUS.set(activeSpan, status.name());
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/MessageOrderlyConsumeInterceptor.java
Patch:
@@ -40,7 +40,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         if (status == ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT) {
             AbstractSpan activeSpan = ContextManager.activeSpan();
             activeSpan.errorOccurred();
-            Tags.STATUS_CODE.set(activeSpan, status.name());
+            Tags.MQ_STATUS.set(activeSpan, status.name());
         }
         ContextManager.stopSpan();
         return ret;

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/OnSuccessInterceptor.java
Patch:
@@ -47,7 +47,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         SendStatus sendStatus = ((SendResult) allArguments[0]).getSendStatus();
         if (sendStatus != SendStatus.SEND_OK) {
             activeSpan.errorOccurred();
-            Tags.STATUS_CODE.set(activeSpan, sendStatus.name());
+            Tags.MQ_STATUS.set(activeSpan, sendStatus.name());
         }
         ContextManager.continued(enhanceInfo.getContextSnapshot());
     }

File: apm-sniffer/apm-sdk-plugin/mssql-jdbc-plugin/src/main/java/org/apache/skywalking/apm/plugin/mssql/jdbc/define/ConnectionInstrumentation.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.apm.plugin.mssql.jdbc.define;
 
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
+import org.apache.skywalking.apm.plugin.mssql.commons.define.AbstractConnectionInstrumentation;
 
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 

File: apm-sniffer/apm-sdk-plugin/mssql-jtds-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mssql/jtds/v1/define/ConnectionInstrumentation.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch;
+import org.apache.skywalking.apm.plugin.mssql.commons.define.AbstractConnectionInstrumentation;
 
 /**
  * {@link ConnectionInstrumentation} presents that skywalking intercepts.

File: oap-server/server-configuration/grpc-configuration-sync/src/main/java/org/apache/skywalking/oap/server/configuration/grpc/GRPCConfigWatcherRegister.java
Patch:
@@ -67,6 +67,7 @@ public Optional<ConfigTable> readConfig(Set<String> keys) {
                     table.add(new ConfigTable.ConfigItem(name, config.getValue()));
                 }
             });
+            this.uuid = responseUuid;
         } catch (Exception e) {
             LOGGER.error("Remote config center [" + settings + "] is not available.", e);
         }

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/MetadataQuery.java
Patch:
@@ -125,7 +125,7 @@ public Service searchService(String serviceCode) throws IOException {
         final WhereQueryImpl<SelectQueryImpl> whereQuery = select(ID_COLUMN, NAME, ServiceTraffic.GROUP)
             .from(client.getDatabase(), ServiceTraffic.INDEX_NAME)
             .where(eq(TagName.NODE_TYPE, String.valueOf(NodeType.Normal.value())));
-        whereQuery.and(eq(ServiceTraffic.NAME, serviceCode));
+        whereQuery.and(eq(InfluxConstants.NAME, serviceCode));
         return buildServices(whereQuery).get(0);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/TraceSegmentServiceClient.java
Patch:
@@ -64,8 +64,7 @@ public void boot() {
         lastLogTime = System.currentTimeMillis();
         segmentUplinkedCounter = 0;
         segmentAbandonedCounter = 0;
-        carrier = new DataCarrier<>(CHANNEL_SIZE, BUFFER_SIZE);
-        carrier.setBufferStrategy(BufferStrategy.IF_POSSIBLE);
+        carrier = new DataCarrier<>(CHANNEL_SIZE, BUFFER_SIZE, BufferStrategy.IF_POSSIBLE);
         carrier.consume(this, 1);
     }
 

File: apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaTraceSegmentServiceClient.java
Patch:
@@ -59,8 +59,7 @@ public void prepare() {
 
     @Override
     public void boot() {
-        carrier = new DataCarrier<>(CHANNEL_SIZE, BUFFER_SIZE);
-        carrier.setBufferStrategy(BufferStrategy.IF_POSSIBLE);
+        carrier = new DataCarrier<>(CHANNEL_SIZE, BUFFER_SIZE, BufferStrategy.IF_POSSIBLE);
         carrier.consume(this, 1);
 
         producer = ServiceManager.INSTANCE.findService(KafkaProducerManager.class).getProducer();

File: apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientInterceptor.java
Patch:
@@ -100,6 +100,7 @@ private String getArguments(String method, TBase base) {
         while (true) {
             TFieldIdEnum field = base.fieldForId(++idx);
             if (field == null) {
+                idx--;
                 break;
             }
             buffer.append(field.getFieldName()).append(", ");

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassInstanceMethodsEnhancePluginDefine.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;
 
 /**
- * Plugins, which only need enhance class static methods. Actually, inherit from {@link
+ * Plugins, which only need enhance class instance methods. Actually, inherit from {@link
  * ClassInstanceMethodsEnhancePluginDefine} has no differences with inherit from {@link ClassEnhancePluginDefine}. Just
  * override {@link ClassEnhancePluginDefine#getStaticMethodsInterceptPoints}, and return NULL, which means nothing to
  * enhance.

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java
Patch:
@@ -39,7 +39,7 @@
  * <code>ControllerConstructorInterceptor</code> set the controller base path to
  * dynamic field before execute constructor.
  *
- * <code>org.apache.skywalking.apm.plugin.spring.mvc.v4.RequestMappingMethodInterceptor</code> get the request path
+ * <code>org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor</code> get the request path
  * from dynamic field first, if not found, <code>RequestMappingMethodInterceptor</code> generate request path  that
  * combine the path value of current annotation on current method and the base path and set the new path to the dynamic
  * filed

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v5/define/AbstractControllerInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
  * <code>ControllerConstructorInterceptor</code> set the controller base path to
  * dynamic field before execute constructor.
  *
- * <code>org.apache.skywalking.apm.plugin.spring.mvc.v4.RequestMappingMethodInterceptor</code> get the request path
+ * <code>org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor</code> get the request path
  * from dynamic field first, if not found, <code>RequestMappingMethodInterceptor</code> generate request path  that
  * combine the path value of current annotation on current method and the base path and set the new path to the dynamic
  * filed

File: test/plugin/scenarios/correlation-autotag-scenario/src/main/java/org/apache/skywalking/apm/testcase/grpc/controller/CaseController.java
Patch:
@@ -48,7 +48,7 @@ public class CaseController {
 
     private static final String SUCCESS = "Success";
 
-    private final String gprcProviderHost = "127.0.0.1";
+    private final String grpcProviderHost = "127.0.0.1";
     private final int grpcProviderPort = 18080;
     private ManagedChannel channel;
     private GreeterGrpc.GreeterStub greeterStub;
@@ -57,7 +57,7 @@ public class CaseController {
 
     @PostConstruct
     public void up() {
-        channel = ManagedChannelBuilder.forAddress(gprcProviderHost, grpcProviderPort).usePlaintext(true).build();
+        channel = ManagedChannelBuilder.forAddress(grpcProviderHost, grpcProviderPort).usePlaintext(true).build();
         greeterStub = GreeterGrpc.newStub(ClientInterceptors.intercept(channel, new ConsumerInterceptor()));
         greeterBlockingStub = GreeterBlockingGrpc.newBlockingStub(ClientInterceptors.intercept(channel, new ConsumerInterceptor()));
         greeterBlockingErrorStub = GreeterBlockingErrorGrpc.newBlockingStub(ClientInterceptors.intercept(channel, new ConsumerInterceptor()));

File: test/plugin/scenarios/grpc-scenario/src/main/java/org/apache/skywalking/apm/testcase/grpc/controller/CaseController.java
Patch:
@@ -43,7 +43,7 @@ public class CaseController {
 
     private static final String SUCCESS = "Success";
 
-    private final String gprcProviderHost = "127.0.0.1";
+    private final String grpcProviderHost = "127.0.0.1";
     private final int grpcProviderPort = 18080;
     private ManagedChannel channel;
     private GreeterGrpc.GreeterStub greeterStub;
@@ -52,7 +52,7 @@ public class CaseController {
 
     @PostConstruct
     public void up() {
-        channel = ManagedChannelBuilder.forAddress(gprcProviderHost, grpcProviderPort).usePlaintext(true).build();
+        channel = ManagedChannelBuilder.forAddress(grpcProviderHost, grpcProviderPort).usePlaintext(true).build();
         greeterStub = GreeterGrpc.newStub(ClientInterceptors.intercept(channel, new ConsumerInterceptor()));
         greeterBlockingStub = GreeterBlockingGrpc.newBlockingStub(ClientInterceptors.intercept(channel, new ConsumerInterceptor()));
         greeterBlockingErrorStub = GreeterBlockingErrorGrpc.newBlockingStub(ClientInterceptors.intercept(channel, new ConsumerInterceptor()));

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java
Patch:
@@ -68,7 +68,9 @@ public void start() throws ServiceNotProvidedException, ModuleStartException {
         GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)
                                                   .provider()
                                                   .getService(GRPCHandlerRegister.class);
-        service.addHandler(new MeshGRPCHandler(getManager()));
+        MeshGRPCHandler meshGRPCHandler = new MeshGRPCHandler(getManager());
+        service.addHandler(meshGRPCHandler);
+        service.addHandler(new MeshGRPCHandlerCompat(meshGRPCHandler));
     }
 
     @Override

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageConfig.java
Patch:
@@ -26,7 +26,7 @@
 @Getter
 public class H2StorageConfig extends ModuleConfig {
     private String driver = "org.h2.jdbcx.JdbcDataSource";
-    private String url = "jdbc:h2:mem:skywalking-oap-db";
+    private String url = "jdbc:h2:mem:skywalking-oap-db;DB_CLOSE_DELAY=-1";
     private String user = "";
     private String password = "";
     private int metadataQueryMaxSize = 5000;

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/TomcatInvokeInterceptor.java
Patch:
@@ -101,8 +101,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         if (!TomcatPluginConfig.Plugin.Tomcat.COLLECT_HTTP_PARAMS && span.isProfiling()) {
             collectHttpParam(request, span);
         }
-        ContextManager.stopSpan();
         ContextManager.getRuntimeContext().remove(Constants.FORWARD_REQUEST_FLAG);
+        ContextManager.stopSpan();
         return ret;
     }
 

File: apm-sniffer/optional-plugins/logger-plugin/src/test/java/org/apache/skywalking/apm/plugin/logger/ContextConfigDefaultTest.java
Patch:
@@ -15,6 +15,7 @@
  * limitations under the License.
  *
  */
+
 package org.apache.skywalking.apm.plugin.logger;
 
 import org.junit.Test;
@@ -24,7 +25,7 @@
 public class ContextConfigDefaultTest {
     @Test
     public void testDefaultConfig() {
-        ContextConfig config = ContextConfig.getInstance();
+        ContextConfig config = ContextConfig.getLatestConfig();
         ContextConfig.LoggerConfig log4jConfig = config.getLog4jConfig();
         ContextConfig.LoggerConfig log4j2Config = config.getLog4j2Config();
         ContextConfig.LoggerConfig logbackConfig = config.getLogbackConfig();

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/ExpressionParsingContext.java
Patch:
@@ -42,6 +42,7 @@ public class ExpressionParsingContext implements Closeable {
     static ExpressionParsingContext create() {
         if (CACHE.get() == null) {
             CACHE.set(ExpressionParsingContext.builder()
+                                              .samples(Lists.newArrayList())
                                               .downsampling(DownsamplingType.AVG)
                                               .scopeLabels(Lists.newArrayList())
                                               .aggregationLabels(Lists.newArrayList()).build());
@@ -55,6 +56,8 @@ static Optional<ExpressionParsingContext> get() {
 
     private final static ThreadLocal<ExpressionParsingContext> CACHE = new ThreadLocal<>();
 
+    List<String> samples;
+
     boolean isHistogram;
 
     int[] percentiles;

File: oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/ExpressionParsingTest.java
Patch:
@@ -65,6 +65,7 @@ public static Collection<Object[]> data() {
                 "all",
                 "latest (foo - 1).tagEqual('bar', '1').sum(['tt']).irate().histogram().histogram_percentile([50,99]).service(['rr'])",
                 ExpressionParsingContext.builder()
+                                        .samples(Collections.singletonList("foo"))
                                         .scopeType(ScopeType.SERVICE)
                                         .scopeLabels(Collections.singletonList("rr"))
                                         .aggregationLabels(Collections.singletonList("tt"))

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/InfluxClient.java
Patch:
@@ -72,10 +72,11 @@ public final String getDatabase() {
     @Override
     public void connect() {
         try {
+            InfluxDB.ResponseFormat responseFormat = InfluxDB.ResponseFormat.valueOf(config.getConnectionResponseFormat());
             influx = InfluxDBFactory.connect(config.getUrl(), config.getUser(), config.getPassword(),
                     new OkHttpClient.Builder().readTimeout(3, TimeUnit.MINUTES)
                             .writeTimeout(3, TimeUnit.MINUTES),
-                    InfluxDB.ResponseFormat.MSGPACK
+                    responseFormat
             );
             influx.query(new Query("CREATE DATABASE " + database));
             influx.enableGzip();

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/InfluxStorageConfig.java
Patch:
@@ -35,4 +35,5 @@ public class InfluxStorageConfig extends ModuleConfig {
     private boolean batchEnabled = true;
 
     private int fetchTaskLogMaxSize = 5000;
+    private String connectionResponseFormat = "MSGPACK";
 }

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/TraceQuery.java
Patch:
@@ -165,7 +165,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,
             BasicTrace basicTrace = new BasicTrace();
 
             basicTrace.setSegmentId((String) values.get(2));
-            basicTrace.setStart(String.valueOf(values.get(3)));
+            basicTrace.setStart(String.valueOf(((Number) values.get(3)).longValue()));
             basicTrace.getEndpointNames().add((String) values.get(4));
             basicTrace.setDuration(((Number) values.get(5)).intValue());
             basicTrace.setError(BooleanUtils.valueToBoolean(((Number) values.get(6)).intValue()));

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java
Patch:
@@ -74,7 +74,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         CarrierItem next = contextCarrier.items();
         while (next.hasNext()) {
             next = next.next();
-            headerBuilder.add(next.getHeadKey(), next.getHeadValue());
+            headerBuilder.set(next.getHeadKey(), next.getHeadValue());
         }
         headersField.set(request, headerBuilder.build());
     }

File: apm-sniffer/bootstrap-plugins/jdk-http-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdk/http/HttpClientWriteRequestInterceptor.java
Patch:
@@ -52,7 +52,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         CarrierItem next = contextCarrier.items();
         while (next.hasNext()) {
             next = next.next();
-            headers.add(next.getHeadKey(), next.getHeadValue());
+            headers.set(next.getHeadKey(), next.getHeadValue());
         }
     }
 

File: test/plugin/scenarios/jdk-http-scenario/src/main/java/org/apache/skywalking/apm/testcase/jdkhttp/controller/CaseController.java
Patch:
@@ -38,9 +38,11 @@ public class CaseController {
     @RequestMapping("/jdk-http-scenario")
     @ResponseBody
     public String testcase() throws IOException {
+        // Like gateway forward trace header.
         URL url = new URL("http://localhost:8080/jdk-http-scenario/case/receiveContext-0");
         HttpURLConnection connection = (HttpURLConnection) url.openConnection();
         connection.addRequestProperty("key", "value");
+        connection.addRequestProperty("sw8", "123456");
         int responseCode = connection.getResponseCode();
         return "Success:" + responseCode;
     }

File: apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v2/ExecuteInterceptor.java
Patch:
@@ -65,7 +65,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         CarrierItem next = contextCarrier.items();
         while (next.hasNext()) {
             next = next.next();
-            headers.add(next.getHeadKey(), next.getHeadValue());
+            headers.set(next.getHeadKey(), next.getHeadValue());
         }
     }
 

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/AsyncCallInterceptor.java
Patch:
@@ -78,7 +78,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         CarrierItem next = contextCarrier.items();
         while (next.hasNext()) {
             next = next.next();
-            headerBuilder.add(next.getHeadKey(), next.getHeadValue());
+            headerBuilder.set(next.getHeadKey(), next.getHeadValue());
         }
         headersField.set(request, headerBuilder.build());
 

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/client/ElasticSearch7Client.java
Patch:
@@ -48,6 +48,7 @@
 import org.elasticsearch.action.search.SearchRequest;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.support.ActiveShardCount;
+import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.action.support.WriteRequest;
 import org.elasticsearch.action.support.master.AcknowledgedResponse;
 import org.elasticsearch.client.GetAliasesResponse;
@@ -195,6 +196,7 @@ public boolean deleteTemplate(String indexName) throws IOException {
     @Override
     public SearchResponse doSearch(SearchSourceBuilder searchSourceBuilder, String... indexNames) throws IOException {
         SearchRequest searchRequest = new SearchRequest(indexNames);
+        searchRequest.indicesOptions(IndicesOptions.fromOptions(true, true, true, false));
         searchRequest.source(searchSourceBuilder);
         try {
             SearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/InfluxStorageConfig.java
Patch:
@@ -32,6 +32,7 @@ public class InfluxStorageConfig extends ModuleConfig {
 
     private int actions;
     private int duration;
+    private boolean batchEnabled = true;
 
     private int fetchTaskLogMaxSize = 5000;
 }

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/DSL.java
Patch:
@@ -39,6 +39,6 @@ public static Expression parse(final String expression) {
         cc.setScriptBaseClass(DelegatingScript.class.getName());
         GroovyShell sh = new GroovyShell(new Binding(), cc);
         DelegatingScript script = (DelegatingScript) sh.parse(expression);
-        return new Expression(script);
+        return new Expression(expression, script);
     }
 }

File: oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/prometheus/rule/Rule.java
Patch:
@@ -33,6 +33,7 @@ public class Rule {
     private String fetcherTimeout;
     private String metricsPath;
     private StaticConfig staticConfig;
+    private String group;
     private String defaultMetricLevel;
     private List<MetricsRule> metricsRules;
 }

File: oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/FunctionTest.java
Patch:
@@ -90,7 +90,7 @@ public static Collection<Object[]> data() {
                     Sample.builder().labels(of("le", String.valueOf(Integer.MAX_VALUE))).value(410).build())
                 ),
                 "instance_cpu_percentage.histogram()",
-                Result.success(SampleFamily.buildHistogram(
+                Result.success(SampleFamily.build(
                     Sample.builder().labels(of("le", "0")).value(100).build(),
                     Sample.builder().labels(of("le", "25")).value(22).build(),
                     Sample.builder().labels(of("le", "750")).value(178).build(),
@@ -107,12 +107,12 @@ public static Collection<Object[]> data() {
                     Sample.builder().labels(of("le", String.valueOf(Integer.MAX_VALUE))).value(410).build())
                 ),
                 "instance_cpu_percentage.histogram().histogram_percentile([75,99])",
-                Result.success(SampleFamily.buildHistogramPercentile(SampleFamily.buildHistogram(
+                Result.success(SampleFamily.build(
                     Sample.builder().labels(of("le", "0")).value(100).build(),
                     Sample.builder().labels(of("le", "25")).value(22).build(),
                     Sample.builder().labels(of("le", "750")).value(178).build(),
                     Sample.builder().labels(of("le", "1250")).value(110).build())
-                , new int[]{75, 99})),
+                ),
                 false,
             },
         });

File: oap-server/analyzer/meter-analyzer/src/test/java/org/apache/skywalking/oap/meter/analyzer/dsl/TagFilterTest.java
Patch:
@@ -57,7 +57,7 @@ public static Collection<Object[]> data() {
                 "default",
                 of("instance_cpu_percentage", SampleFamily.EMPTY),
                 "instance_cpu_percentage",
-                Result.fail(),
+                Result.fail("Parsed result is an EMPTY sample family"),
                 false,
             },
             {

File: oap-server/server-fetcher-plugin/prometheus-fetcher-plugin/src/test/java/org/apache/skywalking/oap/server/fetcher/prometheus/provider/rule/RulesTest.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.fetcher.prometheus.provider.rule;
 
+import java.util.Collections;
 import java.util.List;
 import org.apache.skywalking.oap.meter.analyzer.prometheus.rule.Rule;
 import org.apache.skywalking.oap.meter.analyzer.prometheus.rule.Rules;
@@ -31,7 +32,7 @@ public class RulesTest {
 
     @Test
     public void testFetcherPrometheusRulesLoader() throws ModuleStartException {
-        List<Rule> rr = Rules.loadRules("fetcher-prom-rules");
+        List<Rule> rr = Rules.loadRules("fetcher-prom-rules", Collections.singletonList("localhost"));
 
         assertThat(rr.size(), is(1));
     }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java
Patch:
@@ -63,7 +63,7 @@ public List<Service> getAllServices(final String group) throws IOException {
         sql.append(ServiceTraffic.NODE_TYPE).append("=?");
         condition.add(NodeType.Normal.value());
         if (StringUtil.isNotEmpty(group)) {
-            sql.append(ServiceTraffic.GROUP).append("=?");
+            sql.append(" and ").append(ServiceTraffic.GROUP).append("=?");
             condition.add(group);
         }
         sql.append(" limit ").append(metadataQueryMaxSize);

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/metrics/ReadMetricsQuery.java
Patch:
@@ -28,7 +28,7 @@
 @EqualsAndHashCode(callSuper = true)
 public class ReadMetricsQuery extends AbstractQuery<ReadMetricsQuery> {
 
-    public static String METER_INSTANCE_CPU_PERCENTAGE = "meter_instance_cpu_percentage";
+    public static String METER_INSTANCE_CPU_PERCENTAGE = "meter_oap_instance_cpu_percentage";
 
     public static String[] ALL_SO11Y_LINER_METRICS = {
         METER_INSTANCE_CPU_PERCENTAGE

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/jdbc/hikaricp/JDBCHikariCPClient.java
Patch:
@@ -90,14 +90,14 @@ public void execute(Connection connection, String sql) throws JDBCClientExceptio
         }
     }
 
-    public boolean execute(Connection connection, String sql, Object... params) throws JDBCClientException {
+    public int executeUpdate(Connection connection, String sql, Object... params) throws JDBCClientException {
         LOGGER.debug("execute query with result: {}", sql);
-        boolean result;
+        int result;
         PreparedStatement statement = null;
         try {
             statement = connection.prepareStatement(sql);
             setStatementParam(statement, params);
-            result = statement.execute();
+            result = statement.executeUpdate();
             statement.closeOnCompletion();
             healthChecker.health();
         } catch (SQLException e) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2HistoryDeleteDAO.java
Patch:
@@ -60,7 +60,7 @@ public void deleteHistory(Model model, String timeBucketColumnName, int ttl) thr
                         return;
                 }
             }
-            client.execute(connection, dataDeleteSQL.toString(), deadline);
+            client.executeUpdate(connection, dataDeleteSQL.toString(), deadline);
         } catch (JDBCClientException | SQLException e) {
             throw new IOException(e.getMessage(), e);
         }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageConfig.java
Patch:
@@ -25,7 +25,7 @@
 
 @Setter
 @Getter
-public final class MySQLStorageConfig extends ModuleConfig {
+public class MySQLStorageConfig extends ModuleConfig {
     private int metadataQueryMaxSize = 5000;
     /**
      * Inherit from {@link org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.H2StorageConfig#getMaxSizeOfArrayColumn()}

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/AnalysisResult.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oal.rt.parser;
 
+import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import lombok.Getter;
@@ -43,7 +44,7 @@ public class AnalysisResult {
 
     private int sourceScopeId;
 
-    private String sourceAttribute;
+    private List<String> sourceAttribute = new ArrayList<>();
 
     private String aggregationFunctionName;
 

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/Argument.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oal.rt.parser;
 
+import java.util.List;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 
@@ -30,5 +31,5 @@ public class Argument {
 
     private final int type;
 
-    private final String text;
+    private final List<String> text;
 }

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/EntryMethod.java
Patch:
@@ -37,7 +37,8 @@ public class EntryMethod {
 
     void addArg(Class<?> parameterType, Argument arg) {
         if (arg.getType() == LITERAL_TYPE) {
-            addArg(parameterType, arg.getType(), arg.getText());
+            // As literal type, there is always one element.
+            addArg(parameterType, arg.getType(), arg.getText().get(0));
             return;
         }
         addArg(parameterType, arg.getType(), parameterType.equals(boolean.class) ? "source." + ClassMethodUtil.toIsMethod(arg

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/Expression.java
Patch:
@@ -22,8 +22,8 @@
 import lombok.Setter;
 
 @Getter
-@Setter
 public class Expression {
+    @Setter
     private String expressionObject;
     private String left;
     private String right;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java
Patch:
@@ -79,6 +79,9 @@ public String getEntityId() {
     @Getter
     @Setter
     private List<String> tags;
+    @Getter
+    @Setter
+    private SideCar sideCar = new SideCar();
 
     @Override
     public void prepare() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Service.java
Patch:
@@ -68,5 +68,7 @@ public String getEntityId() {
     @Getter
     @Setter
     private List<String> tags;
-
+    @Getter
+    @Setter
+    private SideCar sideCar = new SideCar();
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstance.java
Patch:
@@ -71,6 +71,9 @@ public String getEntityId() {
     @Getter
     @Setter
     private List<String> tags;
+    @Getter
+    @Setter
+    private SideCar sideCar = new SideCar();
 
     @Override
     public void prepare() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceRelation.java
Patch:
@@ -106,6 +106,9 @@ public String getEntityId() {
     @Getter
     @Setter
     private String tlsMode;
+    @Getter
+    @Setter
+    private SideCar sideCar = new SideCar();
 
     @Override
     public void prepare() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceRelation.java
Patch:
@@ -96,6 +96,9 @@ public String getEntityId() {
     @Getter
     @Setter
     private String tlsMode;
+    @Getter
+    @Setter
+    private SideCar sideCar = new SideCar();
 
     @Override
     public void prepare() {

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/AbstractALSAnalyzer.java
Patch:
@@ -56,8 +56,7 @@ public Role identify(final StreamAccessLogsMessage.Identifier alsIdentifier, fin
     protected LogEntry2MetricsAdapter newAdapter(
         final HTTPAccessLogEntry entry,
         final ServiceMetaInfo sourceService,
-        final ServiceMetaInfo targetService
-    ) {
+        final ServiceMetaInfo targetService) {
         return new LogEntry2MetricsAdapter(entry, sourceService, targetService);
     }
 

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/mesh/MeshDataMock.java
Patch:
@@ -53,6 +53,7 @@ public static void main(String[] args) throws InterruptedException {
                                                  .setStatus(true)
                                                  .setProtocol(Protocol.HTTP)
                                                  .setDetectPoint(DetectPoint.server)
+                                                 .setInternalErrorCode("rate_limited")
                                                  .build());
         }
         meshObserver.onCompleted();

File: apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerTest.java
Patch:
@@ -35,6 +35,7 @@ public class ConsumerTest {
 
     @Test
     public void testConsumerLessThanChannel() throws IllegalAccessException {
+
         final DataCarrier<SampleData> carrier = new DataCarrier<SampleData>(2, 100);
 
         for (int i = 0; i < 100; i++) {
@@ -56,6 +57,7 @@ public void testConsumerLessThanChannel() throws IllegalAccessException {
 
     @Test
     public void testConsumerMoreThanChannel() throws IllegalAccessException, InterruptedException {
+        BUFFER.drainTo(new ArrayList<SampleData>());
         final DataCarrier<SampleData> carrier = new DataCarrier<SampleData>(2, 100);
 
         for (int i = 0; i < 200; i++) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/group/EndpointNameGroupingRuleWatcher.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.StringReader;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;
+import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.library.module.ModuleProvider;
 import org.apache.skywalking.oap.server.library.util.ResourceUtils;
 
@@ -35,7 +36,7 @@ public class EndpointNameGroupingRuleWatcher extends ConfigChangeWatcher {
 
     public EndpointNameGroupingRuleWatcher(ModuleProvider provider,
                                            EndpointNameGrouping grouping) throws FileNotFoundException {
-        super(provider.module().getName(), provider, "endpoint-name-grouping");
+        super(CoreModule.NAME, provider, "endpoint-name-grouping");
         this.grouping = grouping;
         // This is just a place holder text representing the original text.
         ruleSetting = "SkyWalking endpoint rule";

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/k8s/K8sALSServiceMeshHTTPAnalysis.java
Patch:
@@ -127,7 +127,8 @@ protected List<ServiceMeshMetric.Builder> analyzeProxy(final HTTPAccessLogEntry
             return Collections.emptyList();
         }
         final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();
-        final Address downstreamRemoteAddress = properties.getDownstreamRemoteAddress();
+        final Address downstreamRemoteAddress = properties.hasDownstreamDirectRemoteAddress() ?
+            properties.getDownstreamDirectRemoteAddress() : properties.getDownstreamRemoteAddress();
         final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();
         if (downstreamLocalAddress == null || downstreamRemoteAddress == null || upstreamRemoteAddress == null) {
             return Collections.emptyList();

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/k8s/ServiceNameFormatter.java
Patch:
@@ -27,13 +27,13 @@
 import org.apache.commons.beanutils.PropertyUtils;
 import org.apache.commons.lang3.StringUtils;
 
-class ServiceNameFormatter {
+public class ServiceNameFormatter {
 
     private final List<String> properties;
 
     private final StringBuffer serviceNamePattern;
 
-    ServiceNameFormatter(String rule) {
+    public ServiceNameFormatter(String rule) {
         rule = StringUtils.defaultIfBlank(rule, "${service.metadata.name}");
 
         this.properties = new ArrayList<>();
@@ -48,7 +48,7 @@ class ServiceNameFormatter {
         }
     }
 
-    String format(final Map<String, Object> context) throws Exception {
+    public String format(final Map<String, Object> context) throws Exception {
         final Object[] values = new Object[properties.size()];
 
         for (int i = 0; i < properties.size(); i++) {

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/FieldsHelperTest.java
Patch:
@@ -84,7 +84,7 @@ public void testFormat() throws Exception {
             final StreamAccessLogsMessage.Builder requestBuilder = StreamAccessLogsMessage.newBuilder();
             JsonFormat.parser().merge(isr, requestBuilder);
             final ServiceMetaInfo info = new ServiceMetaInfo();
-            FieldsHelper.SINGLETON.init(new ByteArrayInputStream(mapping.getBytes()));
+            FieldsHelper.SINGLETON.init(new ByteArrayInputStream(mapping.getBytes()), ServiceMetaInfo.class);
             FieldsHelper.SINGLETON.inflate(
                 requestBuilder.getIdentifier().getNode().getMetadata(),
                 info

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java
Patch:
@@ -194,8 +194,8 @@ public void calculate() {
             dataset.keys().stream()
                 .map(key -> {
                     if (key.contains(":")) {
-                        String[] kk = key.split(":");
-                        return Tuple.of(kk[0], key);
+                        int index = key.lastIndexOf(":");
+                        return Tuple.of(key.substring(0, index), key.substring(index + 1));
                     } else {
                         return Tuple.of(DEFAULT_GROUP, key);
                     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/ApdexThresholdConfig.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.skywalking.oap.server.core.CoreModuleProvider;
 import org.apache.skywalking.oap.server.library.util.ResourceUtils;
 import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.constructor.SafeConstructor;
 
 /**
  * Apdex threshold configuration dictionary adapter. Looking up a service apdex threshold from dynamic config service.
@@ -94,7 +95,7 @@ private synchronized void activeSetting(String config) {
 
     @SuppressWarnings("unchecked")
     private void updateConfig(final Reader contentRender) {
-        dictionary = (Map<String, Integer>) new Yaml().load(contentRender);
+        dictionary = (Map<String, Integer>) new Yaml(new SafeConstructor()).load(contentRender);
         if (dictionary == null) {
             dictionary = Collections.emptyMap();
         }

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/MetadataQuery.java
Patch:
@@ -137,7 +137,7 @@ public Service searchService(String serviceCode) throws IOException {
         WhereQueryImpl<SelectQueryImpl> query = select(ID_COLUMN, NAME)
             .from(client.getDatabase(), ServiceTraffic.INDEX_NAME)
             .where(eq(InfluxConstants.TagName.NODE_TYPE, String.valueOf(NodeType.Normal.value())));
-        query.and(eq(ServiceTraffic.NODE_TYPE, serviceCode));
+        query.and(eq(ServiceTraffic.NAME, serviceCode));
         return buildServices(query).get(0);
     }
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLTableInstaller.java
Patch:
@@ -58,7 +58,7 @@ protected boolean isExists(Model model) throws StorageException {
         TableMetaInfo.addModel(model);
         JDBCHikariCPClient h2Client = (JDBCHikariCPClient) client;
         try (Connection conn = h2Client.getConnection()) {
-            try (ResultSet rset = conn.getMetaData().getTables(null, null, model.getName(), null)) {
+            try (ResultSet rset = conn.getMetaData().getTables(conn.getCatalog(), null, model.getName(), null)) {
                 if (rset.next()) {
                     return true;
                 }

File: oap-server/server-cluster-plugin/cluster-kubernetes-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/kubernetes/NamespacedPodListInformer.java
Patch:
@@ -83,7 +83,7 @@ private void doStartPodInformer(ClusterModuleKubernetesConfig podConfig) throws
         SharedIndexInformer<V1Pod> podSharedIndexInformer = factory.sharedIndexInformerFor(
             params -> coreV1Api.listNamespacedPodCall(
                 podConfig.getNamespace(), null, null, null, null,
-                podConfig.getLabelSelector(), Integer.MAX_VALUE, params.resourceVersion, params.timeoutSeconds,
+                podConfig.getLabelSelector(), Integer.MAX_VALUE, params.resourceVersion, 300,
                 params.watch, null
             ),
             V1Pod.class, V1PodList.class

File: oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigurationConfigmapInformer.java
Patch:
@@ -73,7 +73,7 @@ private void doStartConfigMapInformer(final ConfigmapConfigurationSettings setti
         SharedIndexInformer<V1ConfigMap> configMapSharedIndexInformer = factory.sharedIndexInformerFor(
             params -> coreV1Api.listNamespacedConfigMapCall(
                 settings.getNamespace(), null, null, null, null, settings.getLabelSelector()
-                , 1, params.resourceVersion, params.timeoutSeconds, params.watch, null
+                , 1, params.resourceVersion, 300, params.watch, null
             ),
             V1ConfigMap.class, V1ConfigMapList.class
         );

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/errorlog/BrowserErrorLogRecord.java
Patch:
@@ -30,8 +30,10 @@
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
+import org.apache.skywalking.oap.server.core.storage.annotation.SuperDataset;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
 
+@SuperDataset
 @Stream(name = BrowserErrorLogRecord.INDEX_NAME, scopeId = DefaultScopeDefine.BROWSER_ERROR_LOG, builder = BrowserErrorLogRecord.Builder.class, processor = RecordStreamProcessor.class)
 public class BrowserErrorLogRecord extends Record {
     public static final String INDEX_NAME = "browser_error_log";

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/jdk9module/JDK9ModuleExporter.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.ByteBuddyCoreClasses;
 
 /**
- * Since JDK 9, module concept has been introduced. By supporting that, agent core needs to open the
+ * Since JDK 9, module concept has been introduced. By supporting that, agent core needs to open the read edge
  */
 public class JDK9ModuleExporter {
     private static final ILog LOGGER = LogManager.getLogger(JDK9ModuleExporter.class);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/IDManager.java
Patch:
@@ -39,7 +39,7 @@ public static class ServiceID {
          * @return encoded service id
          */
         public static String buildId(String name, NodeType type) {
-            return buildId(name, type.equals(NodeType.Normal));
+            return buildId(name, type.equals(NodeType.Normal) || type.equals(NodeType.Browser));
         }
 
         public static String buildId(String name, boolean isNormal) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppTrafficSource.java
Patch:
@@ -20,7 +20,6 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
-import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;
 import org.apache.skywalking.oap.server.core.source.Source;
 
 /**
@@ -29,9 +28,7 @@
 @Setter
 @Getter
 public abstract class BrowserAppTrafficSource extends Source {
-    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     protected String name;
-
     protected final NodeType nodeType = NodeType.Browser;
 
     private final int count = 1;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/BrowserLogQueryService.java
Patch:
@@ -53,6 +53,7 @@ public BrowserErrorLogs queryBrowserErrorLogs(final String serviceId,
                                                   final Pagination paging) throws IOException {
         PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(paging);
         BrowserErrorCategory errorCategory = Optional.ofNullable(category)
+                                                     .filter(c -> !c.equals(ErrorCategory.ALL)) // ErrorCategory.All stands for query all.
                                                      .map(c -> BrowserErrorCategory.valueOf(c.name()))
                                                      .orElse(null);
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/PrefixMatch.java
Patch:
@@ -44,7 +44,7 @@ public ElementMatcher.Junction buildJunction() {
             if (junction == null) {
                 junction = ElementMatchers.nameStartsWith(prefix);
             } else {
-                junction = junction.and(ElementMatchers.nameStartsWith(prefix));
+                junction = junction.or(ElementMatchers.nameStartsWith(prefix));
             }
         }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/LogLevel.java
Patch:
@@ -19,5 +19,5 @@
 package org.apache.skywalking.apm.agent.core.logging.core;
 
 public enum LogLevel {
-    DEBUG, INFO, WARN, ERROR, OFF
+    TRACE, DEBUG, INFO, WARN, ERROR, OFF
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/spring-cloud-feign-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/netflix/feign/v11/define/NetflixFeignInstrumentation.java
Patch:
@@ -37,7 +37,7 @@ public class NetflixFeignInstrumentation extends ClassInstanceMethodsEnhancePlug
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.feign.http.v9.DefaultHttpClientInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.feign.http.v9.LoadBalancerHttpClientInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/spring-cloud-feign-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/string/cloud/netflix/feign/v2/define/LoadBalancerFeignClientInstrumentation.java
Patch:
@@ -32,7 +32,7 @@ public class LoadBalancerFeignClientInstrumentation extends ClassInstanceMethods
 
     public static final String ENHANCE_CLASS = "org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient";
 
-    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.feign.http.v9.DefaultHttpClientInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.feign.http.v9.LoadBalancerHttpClientInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestRequestInterceptor.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
+import org.apache.skywalking.apm.plugin.spring.resttemplate.helper.RestTemplateRuntimeContextHelper;
 import org.springframework.http.client.AsyncClientHttpRequest;
 
 public class RestRequestInterceptor implements InstanceMethodsAroundInterceptor {
@@ -39,8 +40,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         Object ret) throws Throwable {
         AsyncClientHttpRequest clientHttpRequest = (AsyncClientHttpRequest) ret;
         if (ret != null) {
-            Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();
-            ContextCarrier contextCarrier = (ContextCarrier) cacheValues[1];
+            ContextCarrier contextCarrier = RestTemplateRuntimeContextHelper.getContextCarrier();
             CarrierItem next = contextCarrier.items();
             while (next.hasNext()) {
                 next = next.next();

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
+import org.apache.skywalking.apm.plugin.spring.resttemplate.helper.RestTemplateRuntimeContextHelper;
 import org.springframework.http.HttpMethod;
 
 public class RestExecuteInterceptor implements InstanceMethodsAroundInterceptor {
@@ -50,12 +51,13 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         Tags.HTTP.METHOD.set(span, httpMethod.toString());
         SpanLayer.asHttp(span);
 
-        objInst.setSkyWalkingDynamicField(contextCarrier);
+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);
     }
 
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
+        RestTemplateRuntimeContextHelper.cleanContextCarrier();
         ContextManager.stopSpan();
         return ret;
     }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestRequestInterceptor.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
+import org.apache.skywalking.apm.plugin.spring.resttemplate.helper.RestTemplateRuntimeContextHelper;
 import org.springframework.http.client.AbstractClientHttpRequest;
 import org.springframework.http.client.ClientHttpRequest;
 
@@ -41,7 +42,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         ClientHttpRequest clientHttpRequest = (ClientHttpRequest) ret;
         if (clientHttpRequest instanceof AbstractClientHttpRequest) {
             AbstractClientHttpRequest httpRequest = (AbstractClientHttpRequest) clientHttpRequest;
-            ContextCarrier contextCarrier = (ContextCarrier) objInst.getSkyWalkingDynamicField();
+            ContextCarrier contextCarrier = RestTemplateRuntimeContextHelper.getContextCarrier();
             CarrierItem next = contextCarrier.items();
             while (next.hasNext()) {
                 next = next.next();

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java
Patch:
@@ -31,7 +31,9 @@
 import org.apache.skywalking.apm.network.language.agent.v3.SpanObject;
 import org.apache.skywalking.apm.network.language.agent.v3.SpanType;
 import org.apache.skywalking.apm.util.StringUtil;
+import org.apache.skywalking.oap.server.analyzer.provider.AnalyzerModuleConfig;
 import org.apache.skywalking.oap.server.analyzer.provider.trace.DBLatencyThresholdsAndWatcher;
+import org.apache.skywalking.oap.server.analyzer.provider.trace.parser.SpanTags;
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;
@@ -47,8 +49,6 @@
 import org.apache.skywalking.oap.server.core.source.ServiceInstanceRelation;
 import org.apache.skywalking.oap.server.core.source.SourceReceiver;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
-import org.apache.skywalking.oap.server.analyzer.provider.AnalyzerModuleConfig;
-import org.apache.skywalking.oap.server.analyzer.provider.trace.parser.SpanTags;
 
 import static org.apache.skywalking.oap.server.analyzer.provider.trace.parser.SpanTags.LOGIC_ENDPOINT;
 
@@ -184,7 +184,7 @@ public void parseExit(SpanObject span, SegmentObject segmentObject) {
              * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.
              * Keeping dest instance name as NULL makes no instance relation generate from this exit span.
              */
-            if (!config.getNoUpstreamRealAddressAgents().contains(span.getComponentId())) {
+            if (!config.shouldIgnorePeerIPDue2Virtual(span.getComponentId())) {
                 sourceBuilder.setDestServiceInstanceName(instanceIDDefinition.getName());
             }
             sourceBuilder.setDestNodeType(NodeType.Normal);

File: oap-server/server-library/library-module/src/test/java/org/apache/skywalking/oap/server/library/module/ModuleAProvider.java
Patch:
@@ -19,14 +19,16 @@
 package org.apache.skywalking.oap.server.library.module;
 
 public class ModuleAProvider extends ModuleProvider {
+    private ModuleAProviderConfig config = new ModuleAProviderConfig();
+
     @Override
     public String name() {
         return "P-A";
     }
 
     @Override
     public ModuleConfig createConfigBeanIfAbsent() {
-        return null;
+        return config;
     }
 
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/commands/executor/ProfileTaskCommandExecutor.java
Patch:
@@ -38,7 +38,7 @@ public void execute(BaseCommand command) throws CommandExecutionException {
         // build profile task
         final ProfileTask profileTask = new ProfileTask();
         profileTask.setTaskId(profileTaskCommand.getTaskId());
-        profileTask.setFistSpanOPName(profileTaskCommand.getEndpointName());
+        profileTask.setFirstSpanOPName(profileTaskCommand.getEndpointName());
         profileTask.setDuration(profileTaskCommand.getDuration());
         profileTask.setMinDurationThreshold(profileTaskCommand.getMinDurationThreshold());
         profileTask.setThreadDumpPeriod(profileTaskCommand.getDumpPeriod());

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionContext.java
Patch:
@@ -82,7 +82,7 @@ public ProfileStatusReference attemptProfiling(TracingContext tracingContext,
         }
 
         // check first operation name matches
-        if (!Objects.equals(task.getFistSpanOPName(), firstSpanOPName)) {
+        if (!Objects.equals(task.getFirstSpanOPName(), firstSpanOPName)) {
             return ProfileStatusReference.createWithNone();
         }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java
Patch:
@@ -186,7 +186,7 @@ public long getLastCommandCreateTime() {
      */
     private CheckResult checkProfileTaskSuccess(ProfileTask task) {
         // endpoint name
-        if (StringUtil.isEmpty(task.getFistSpanOPName())) {
+        if (StringUtil.isEmpty(task.getFirstSpanOPName())) {
             return new CheckResult(false, "endpoint name cannot be empty");
         }
 
@@ -234,7 +234,7 @@ private CheckResult checkProfileTaskSuccess(ProfileTask task) {
                 return new CheckResult(
                     false,
                     "there already have processing task in time range, could not add a new task again. processing task monitor endpoint name: "
-                        + profileTask.getFistSpanOPName()
+                        + profileTask.getFirstSpanOPName()
                 );
             }
         }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/AgentClassLoader.java
Patch:
@@ -209,4 +209,4 @@ private static class Jar {
         private final JarFile jarFile;
         private final File sourceFile;
     }
-}
+}
\ No newline at end of file

File: apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/conf/IgnoreConfigInitializer.java
Patch:
@@ -98,4 +98,4 @@ private static InputStream loadConfigFromAgentFolder() throws AgentPackageNotFou
         }
         throw new ConfigNotFoundException("Fail to load ignore config file.");
     }
-}
+}
\ No newline at end of file

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/AdapterActionFutureActionGetMethodsInterceptor.java
Patch:
@@ -75,9 +75,7 @@ public void handleMethodException(EnhancedInstance objInst, Method method, Objec
     }
 
     private boolean isTrace(EnhancedInstance objInst) {
-
         return objInst.getSkyWalkingDynamicField() != null && (boolean) objInst.getSkyWalkingDynamicField();
-
     }
 
     private void parseResponseInfo(ActionResponse response, AbstractSpan span) {

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/ClusterClientGetSettingsMethodsInterceptor.java
Patch:
@@ -36,7 +36,7 @@ public class ClusterClientGetSettingsMethodsInterceptor implements InstanceMetho
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,
         Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {
 
-        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField());
+        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) objInst.getSkyWalkingDynamicField();
         if (restClientEnhanceInfo != null) {
             AbstractSpan span = ContextManager
                 .createExitSpan(Constants.CLUSTER_GET_SETTINGS_NAME, restClientEnhanceInfo.getPeers());
@@ -50,7 +50,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,
         Class<?>[] argumentsTypes, Object ret) throws Throwable {
-        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField());
+        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) objInst.getSkyWalkingDynamicField();
         if (restClientEnhanceInfo != null) {
             ContextManager.stopSpan();
         }
@@ -60,7 +60,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
     @Override
     public void handleMethodException(EnhancedInstance objInst, Method method,
         Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {
-        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField());
+        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) objInst.getSkyWalkingDynamicField();
         if (restClientEnhanceInfo != null) {
             ContextManager.activeSpan().log(t);
         }

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/ClusterClientHealthMethodsInterceptor.java
Patch:
@@ -36,7 +36,7 @@ public class ClusterClientHealthMethodsInterceptor implements InstanceMethodsAro
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,
         Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {
 
-        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField());
+        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) objInst.getSkyWalkingDynamicField();
         if (restClientEnhanceInfo != null) {
             AbstractSpan span = ContextManager.createExitSpan(Constants.CLUSTER_HEALTH_NAME, restClientEnhanceInfo.getPeers());
             span.setComponent(ComponentsDefine.REST_HIGH_LEVEL_CLIENT);

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/IndicesClientCreateMethodsInterceptor.java
Patch:
@@ -40,7 +40,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         MethodInterceptResult result) throws Throwable {
         CreateIndexRequest createIndexRequest = (CreateIndexRequest) (allArguments[0]);
 
-        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField());
+        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) objInst.getSkyWalkingDynamicField();
         if (restClientEnhanceInfo != null) {
             AbstractSpan span = ContextManager.createExitSpan(Constants.CREATE_OPERATOR_NAME, restClientEnhanceInfo.getPeers());
             span.setComponent(ComponentsDefine.REST_HIGH_LEVEL_CLIENT);

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/RestHighLevelClientConInterceptor.java
Patch:
@@ -29,7 +29,7 @@
 public class RestHighLevelClientConInterceptor implements InstanceConstructorInterceptor {
     @Override
     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
-        RestClientBuilder restClientBuilder = (RestClientBuilder) (allArguments[0]);
+        RestClientBuilder restClientBuilder = (RestClientBuilder) allArguments[0];
         RestClient restClient = restClientBuilder.build();
 
         RestClientEnhanceInfo restClientEnhanceInfo = new RestClientEnhanceInfo();

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/RestHighLevelClientGetMethodsInterceptor.java
Patch:
@@ -40,7 +40,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         MethodInterceptResult result) throws Throwable {
         GetRequest getRequest = (GetRequest) (allArguments[0]);
 
-        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField());
+        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) objInst.getSkyWalkingDynamicField();
         AbstractSpan span = ContextManager.createExitSpan(Constants.GET_OPERATOR_NAME, restClientEnhanceInfo.getPeers());
         span.setComponent(ComponentsDefine.REST_HIGH_LEVEL_CLIENT);
 

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/RestHighLevelClientIndexMethodsInterceptor.java
Patch:
@@ -40,7 +40,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         MethodInterceptResult result) throws Throwable {
         IndexRequest indexRequest = (IndexRequest) (allArguments[0]);
 
-        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField());
+        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) objInst.getSkyWalkingDynamicField();
         AbstractSpan span = ContextManager.createExitSpan(Constants.INDEX_OPERATOR_NAME, restClientEnhanceInfo.getPeers());
         span.setComponent(ComponentsDefine.REST_HIGH_LEVEL_CLIENT);
 

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/RestHighLevelClientIndicesMethodsInterceptor.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.apache.skywalking.apm.plugin.elasticsearch.v6.RestClientEnhanceInfo;
 
 public class RestHighLevelClientIndicesMethodsInterceptor implements InstanceMethodsAroundInterceptor {
 
@@ -36,7 +35,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
         if (ret instanceof EnhancedInstance) {
-            ((EnhancedInstance) ret).setSkyWalkingDynamicField((RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField()));
+            ((EnhancedInstance) ret).setSkyWalkingDynamicField(objInst.getSkyWalkingDynamicField());
         }
         return ret;
     }

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/RestHighLevelClientSearchMethodsInterceptor.java
Patch:
@@ -41,7 +41,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         MethodInterceptResult result) throws Throwable {
         SearchRequest searchRequest = (SearchRequest) (allArguments[0]);
 
-        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField());
+        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) objInst.getSkyWalkingDynamicField();
         AbstractSpan span = ContextManager.createExitSpan(Constants.SEARCH_OPERATOR_NAME, restClientEnhanceInfo.getPeers());
         span.setComponent(ComponentsDefine.REST_HIGH_LEVEL_CLIENT);
 

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/RestHighLevelClientUpdateMethodsInterceptor.java
Patch:
@@ -40,7 +40,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         MethodInterceptResult result) throws Throwable {
         UpdateRequest updateRequest = (UpdateRequest) (allArguments[0]);
 
-        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) (objInst.getSkyWalkingDynamicField());
+        RestClientEnhanceInfo restClientEnhanceInfo = (RestClientEnhanceInfo) objInst.getSkyWalkingDynamicField();
         AbstractSpan span = ContextManager.createExitSpan(Constants.UPDATE_OPERATOR_NAME, restClientEnhanceInfo.getPeers());
         span.setComponent(ComponentsDefine.REST_HIGH_LEVEL_CLIENT);
 

File: apm-sniffer/apm-sdk-plugin/play-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/play/v2x/define/Play2xInstrumentation.java
Patch:
@@ -87,8 +87,9 @@ public static ElementMatcher<MethodDescription> getInjectConstructorMatcher() {
     public static ElementMatcher<MethodDescription> getFiltersMethodMatcher() {
         String scala212Seq = "scala.collection.Seq";
         String scala213Seq = "scala.collection.immutable.Seq";
-        return (named(ENHANCE_METHOD).and(ReturnTypeNameMatch.returnsWithType(scala212Seq))).or(named(ENHANCE_METHOD).and(ReturnTypeNameMatch
-            .returnsWithType(scala213Seq)));
+        return named(ENHANCE_METHOD)
+            .and(ReturnTypeNameMatch.returnsWithType(scala212Seq))
+            .or(named(ENHANCE_METHOD).and(ReturnTypeNameMatch.returnsWithType(scala213Seq)));
     }
 
 }

File: apm-sniffer/apm-test-tools/src/main/java/org/apache/skywalking/apm/agent/test/helper/FieldGetter.java
Patch:
@@ -21,20 +21,23 @@
 import java.lang.reflect.Field;
 
 public class FieldGetter {
+    @SuppressWarnings("TypeParameterUnusedInFormals")
     public static <T> T getValue(Object instance,
         String fieldName) throws IllegalAccessException, NoSuchFieldException {
         Field field = instance.getClass().getDeclaredField(fieldName);
         field.setAccessible(true);
         return (T) field.get(instance);
     }
 
+    @SuppressWarnings("TypeParameterUnusedInFormals")
     public static <T> T getParentFieldValue(Object instance,
         String fieldName) throws IllegalAccessException, NoSuchFieldException {
         Field field = instance.getClass().getSuperclass().getDeclaredField(fieldName);
         field.setAccessible(true);
         return (T) field.get(instance);
     }
 
+    @SuppressWarnings("TypeParameterUnusedInFormals")
     public static <T> T get2LevelParentFieldValue(Object instance,
         String fieldName) throws IllegalAccessException, NoSuchFieldException {
         Field field = instance.getClass().getSuperclass().getSuperclass().getDeclaredField(fieldName);

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumeDriver.java
Patch:
@@ -78,8 +78,8 @@ public void begin(Channels channels) {
         if (running) {
             return;
         }
+        lock.lock();
         try {
-            lock.lock();
             this.allocateBuffer2Thread();
             for (ConsumerThread consumerThread : consumerThreads) {
                 consumerThread.start();
@@ -116,8 +116,8 @@ private void allocateBuffer2Thread() {
 
     @Override
     public void close(Channels channels) {
+        lock.lock();
         try {
-            lock.lock();
             this.running = false;
             for (ConsumerThread consumerThread : consumerThreads) {
                 consumerThread.shutdown();

File: apm-sniffer/apm-sdk-plugin/avro-plugin/src/main/java/org/apache/skywalking/apm/plugin/avro/SWClientRPCPlugin.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 
 import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
 
 /**
  * A SkyWalking tracing plugin for Avro Client. Inject CarrierItems into RPC's metadata from cross-process propagation.
@@ -39,7 +40,7 @@ public void clientSendRequest(RPCContext context) {
         CarrierItem items = carrier.items();
         while (items.hasNext()) {
             items = items.next();
-            context.requestCallMeta().put(items.getHeadKey(), ByteBuffer.wrap(items.getHeadValue().getBytes()));
+            context.requestCallMeta().put(items.getHeadKey(), ByteBuffer.wrap(items.getHeadValue().getBytes(StandardCharsets.UTF_8)));
         }
     }
 

File: apm-sniffer/apm-sdk-plugin/avro-plugin/src/main/java/org/apache/skywalking/apm/plugin/avro/SWServerRPCPlugin.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.apm.plugin.avro;
 
 import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 import org.apache.avro.ipc.RPCContext;
 import org.apache.avro.ipc.RPCPlugin;
@@ -50,7 +51,7 @@ public void serverReceiveRequest(RPCContext context) {
         while (items.hasNext()) {
             items = items.next();
             ByteBuffer buffer = (ByteBuffer) meta.get(new Utf8(items.getHeadKey()));
-            items.setHeadValue(new String(buffer.array()));
+            items.setHeadValue(new String(buffer.array(), StandardCharsets.UTF_8));
         }
 
         String operationName = prefix + context.getMessage().getName();

File: apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java
Patch:
@@ -37,6 +37,7 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
@@ -74,10 +75,10 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             while (next.hasNext()) {
                 next = next.next();
                 if (operation != null) {
-                    operation.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());
+                    operation.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes(StandardCharsets.UTF_8));
                 } else {
                     for (OperationWithAttributes o : operations) {
-                        o.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());
+                        o.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes(StandardCharsets.UTF_8));
                     }
                 }
             }

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.skywalking.apm.plugin.kafka.define.KafkaContext;
 
 import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -88,7 +89,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
                         next = next.next();
                         Iterator<Header> iterator = record.headers().headers(next.getHeadKey()).iterator();
                         if (iterator.hasNext()) {
-                            next.setHeadValue(new String(iterator.next().value()));
+                            next.setHeadValue(new String(iterator.next().value(), StandardCharsets.UTF_8));
                         }
                     }
                     ContextManager.extract(contextCarrier);

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
 
 public class KafkaProducerInterceptor implements InstanceMethodsAroundInterceptor {
 
@@ -57,7 +58,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         CarrierItem next = contextCarrier.items();
         while (next.hasNext()) {
             next = next.next();
-            record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes());
+            record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes(StandardCharsets.UTF_8));
         }
 
         //when use lambda expression, not to generate inner class,

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java
Patch:
@@ -19,9 +19,9 @@
 package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;
 
 import java.lang.reflect.Method;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Enumeration;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
@@ -219,7 +219,7 @@ private void collectHttpParam(RequestHolder request, AbstractSpan span) {
     }
 
     private void collectHttpHeaders(RequestHolder request, AbstractSpan span) {
-        final List<String> headersList = new LinkedList<>();
+        final List<String> headersList = new ArrayList<>(SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.size());
         SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream()
                                                               .filter(
                                                                   headerName -> request.getHeaders(headerName) != null)

File: apm-sniffer/apm-test-tools/src/main/java/org/apache/skywalking/apm/agent/test/tools/AgentServiceRule.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.skywalking.apm.agent.test.tools;
 
+import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.LinkedList;
 import org.apache.skywalking.apm.agent.core.boot.BootService;
 import org.apache.skywalking.apm.agent.core.boot.ServiceManager;
 import org.apache.skywalking.apm.agent.core.conf.Config;
@@ -40,9 +40,9 @@ protected void after() {
             FieldSetter.setValue(
                 ServiceManager.INSTANCE.getDeclaringClass(), "bootedServices", new HashMap<Class, BootService>());
             FieldSetter.setValue(
-                IgnoredTracerContext.ListenerManager.class, "LISTENERS", new LinkedList<TracingContextListener>());
+                IgnoredTracerContext.ListenerManager.class, "LISTENERS", new ArrayList<TracingContextListener>());
             FieldSetter.setValue(
-                TracingContext.ListenerManager.class, "LISTENERS", new LinkedList<TracingContextListener>());
+                TracingContext.ListenerManager.class, "LISTENERS", new ArrayList<TracingContextListener>());
             ServiceManager.INSTANCE.shutdown();
         } catch (Exception e) {
         }

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java
Patch:
@@ -110,8 +110,8 @@ void shutdown() {
         running = false;
     }
 
-    private class Group {
-        private Channels channels;
+    private static class Group {
+        private  Channels channels;
         private IConsumer consumer;
 
         public Group(Channels channels, IConsumer consumer) {

File: apm-application-toolkit/apm-toolkit-micrometer-registry/src/main/java/org/apache/skywalking/apm/meter/micrometer/SkywalkingMeterRegistry.java
Patch:
@@ -126,6 +126,8 @@ protected Meter newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> mea
                 case DURATION:
                     meterName = baseName + "_duration_sum";
                     break;
+                default:
+                    break;
             }
 
             if (isCounter) {

File: apm-sniffer/apm-test-tools/src/main/java/org/apache/skywalking/apm/agent/test/tools/AgentServiceRule.java
Patch:
@@ -38,7 +38,7 @@ protected void after() {
         super.after();
         try {
             FieldSetter.setValue(
-                ServiceManager.INSTANCE.getClass(), "bootedServices", new HashMap<Class, BootService>());
+                ServiceManager.INSTANCE.getDeclaringClass(), "bootedServices", new HashMap<Class, BootService>());
             FieldSetter.setValue(
                 IgnoredTracerContext.ListenerManager.class, "LISTENERS", new LinkedList<TracingContextListener>());
             FieldSetter.setValue(

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/logging/core/WriterFactoryTest.java
Patch:
@@ -49,7 +49,6 @@ public void alwaysReturnSystemLogWriteWithSetLoggingDir() {
         assertTrue(AgentPackagePath.isPathFound());
 
         IWriter logWriter = WriterFactory.getLogWriter();
-        PowerMockito.verifyStatic();
         assertTrue(logWriter instanceof SystemOutWriter);
     }
 
@@ -65,7 +64,6 @@ public void returnFileWriterWriteWithBlankLoggingDir() {
         assertTrue(AgentPackagePath.isPathFound());
 
         IWriter logWriter = WriterFactory.getLogWriter();
-        PowerMockito.verifyStatic();
         assertTrue(logWriter instanceof FileWriter);
     }
 }
\ No newline at end of file

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/meter/CounterTest.java
Patch:
@@ -28,11 +28,11 @@
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
-import org.mockito.internal.util.reflection.Whitebox;
 
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
+import org.powermock.reflect.Whitebox;
 
 public class CounterTest {
     @Rule

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/test/java/org/apache/skywalking/apm/plugin/jdbc/SwPreparedStatementTest.java
Patch:
@@ -206,10 +206,10 @@ public void testSetParam() throws SQLException, MalformedURLException {
         verify(mysqlPreparedStatement).setBlob(anyInt(), any(InputStream.class), anyLong());
         verify(mysqlPreparedStatement).setClob(anyInt(), any(Clob.class));
         verify(mysqlPreparedStatement).setClob(anyInt(), any(Reader.class));
-        verify(mysqlPreparedStatement).setClob(anyInt(), any(Reader.class), anyInt());
+        verify(mysqlPreparedStatement).setClob(anyInt(), any(Reader.class), anyLong());
         verify(mysqlPreparedStatement).setNString(anyInt(), anyString());
         verify(mysqlPreparedStatement).setNCharacterStream(anyInt(), any(Reader.class));
-        verify(mysqlPreparedStatement).setNCharacterStream(anyInt(), any(Reader.class), anyInt());
+        verify(mysqlPreparedStatement).setNCharacterStream(anyInt(), any(Reader.class), anyLong());
         verify(mysqlPreparedStatement).setNClob(27, nClob);
         verify(mysqlPreparedStatement).setNClob(28, reader, 1);
         verify(mysqlPreparedStatement).setObject(anyInt(), Matchers.anyObject());

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/TransportClientHandlerInterceptorTest.java
Patch:
@@ -91,7 +91,7 @@ public void setUp() throws Exception {
         nextInterceptor = new TransportClientHandlerInterceptor();
         PowerMockito.mock(Invocation.class);
         when(operationMeta.getSchemaMeta()).thenReturn(schemaMeta);
-        when(endpoint.getAddress()).thenReturn("0.0.0.0:7777");
+        when(endpoint.toString()).thenReturn("/bmi");
         when(invocation.getEndpoint()).thenReturn(endpoint);
         when(invocation.getMicroserviceQualifiedName()).thenReturn("consumerTest");
         when(operationMeta.getOperationPath()).thenReturn("/bmi");

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/v1/TransportClientHandlerInterceptorTest.java
Patch:
@@ -91,7 +91,7 @@ public void setUp() throws Exception {
         nextInterceptor = new TransportClientHandlerInterceptor();
         PowerMockito.mock(Invocation.class);
         when(operationMeta.getSchemaMeta()).thenReturn(schemaMeta);
-        when(endpoint.getAddress()).thenReturn("0.0.0.0:7777");
+        when(endpoint.toString()).thenReturn("/bmi");
         when(invocation.getEndpoint()).thenReturn(endpoint);
         when(invocation.getMicroserviceQualifiedName()).thenReturn("consumerTest");
         when(operationMeta.getOperationPath()).thenReturn("/bmi");

File: oap-server/analyzer/agent-analyzer/src/test/java/org/apache/skywalking/oap/server/analyzer/provider/meter/process/MeterProcessContextTest.java
Patch:
@@ -25,16 +25,16 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.internal.util.reflection.Whitebox;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.modules.junit4.PowerMockRunner;
+import org.powermock.reflect.Whitebox;
 
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore("javax.management.*")
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 public class MeterProcessContextTest extends MeterBaseTest {
     private static final String CONFIG_PATH = "meter-receive-config";
 

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java
Patch:
@@ -59,7 +59,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore("javax.management.*")
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 @PrepareForTest(DefaultScopeDefine.class)
 public class NotifyHandlerTest {
 

File: oap-server/server-cluster-plugin/cluster-consul-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ClusterModuleConsulProviderTest.java
Patch:
@@ -48,7 +48,7 @@
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(Consul.class)
-@PowerMockIgnore("javax.management.*")
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 public class ClusterModuleConsulProviderTest {
 
     private ClusterModuleConsulProvider provider = new ClusterModuleConsulProvider();

File: oap-server/server-cluster-plugin/cluster-kubernetes-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/kubernetes/ClusterModuleKubernetesProviderTest.java
Patch:
@@ -31,7 +31,7 @@
 import static org.junit.Assert.assertTrue;
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore("javax.management.*")
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 public class ClusterModuleKubernetesProviderTest {
 
     private ClusterModuleKubernetesProvider provider = new ClusterModuleKubernetesProvider();

File: oap-server/server-cluster-plugin/cluster-kubernetes-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/kubernetes/KubernetesCoordinatorTest.java
Patch:
@@ -46,7 +46,7 @@
 import static org.powermock.api.mockito.PowerMockito.when;
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore("javax.management.*")
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 @PrepareForTest({NamespacedPodListInformer.class})
 public class KubernetesCoordinatorTest {
 

File: oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigWatcherRegisterTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.yaml.snakeyaml.Yaml;
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore("javax.management.*")
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 @PrepareForTest({ConfigurationConfigmapInformer.class})
 public class ConfigmapConfigWatcherRegisterTest {
 

File: oap-server/server-configuration/configuration-k8s-configmap/src/test/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationProviderTest.java
Patch:
@@ -28,7 +28,7 @@
 import static org.junit.Assert.assertTrue;
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore("javax.management.*")
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 public class ConfigmapConfigurationProviderTest {
 
     private final ConfigmapConfigurationProvider provider = new ConfigmapConfigurationProvider();

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/TimeBucketTest.java
Patch:
@@ -56,8 +56,8 @@ public static Object[][] parameters() {
                 DownSampling.Day,
                 DAYS,
                 MILLISECONDS.toDays(NOW)
-            },
-            };
+            }
+        };
     }
 
     private DownSampling downSampling;

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/StorageModelsTest.java
Patch:
@@ -35,11 +35,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({DefaultScopeDefine.class})
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 public class StorageModelsTest {
     @BeforeClass
     public static void setup() {

File: oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/browser/provider/handler/rest/BrowserReportServletHandlerTest.java
Patch:
@@ -36,14 +36,14 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.internal.util.reflection.Whitebox;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.modules.junit4.PowerMockRunner;
+import org.powermock.reflect.Whitebox;
 
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore({"javax.management.*"})
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 public class BrowserReportServletHandlerTest {
     @Mock
     private HttpServletRequest request;

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java
Patch:
@@ -40,14 +40,14 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.internal.util.reflection.Whitebox;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.modules.junit4.PowerMockRunner;
+import org.powermock.reflect.Whitebox;
 
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore({"javax.management.*"})
+@PowerMockIgnore({"com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "javax.management.*", "org.w3c.*"})
 public class TraceSegmentReportServletHandlerTest {
 
     @Mock
@@ -71,7 +71,7 @@ public void init() throws IOException {
         Mockito.when(moduleManager.find(AnalyzerModule.NAME)).thenReturn(analyzerModule);
 
         Mockito.when(telemetryProvider.getService(MetricsCreator.class))
-            .thenReturn(new MetricsCreatorNoop());
+               .thenReturn(new MetricsCreatorNoop());
 
         when(analyzerModuleProvider.getService(ISegmentParserService.class))
             .thenReturn(new SegmentParserServiceImpl(moduleManager, new AnalyzerModuleConfig()));

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileSnapshotExporterTest.java
Patch:
@@ -46,8 +46,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.internal.util.reflection.Whitebox;
 import org.powermock.modules.junit4.PowerMockRunner;
+import org.powermock.reflect.Whitebox;
 import org.yaml.snakeyaml.Yaml;
 
 @RunWith(PowerMockRunner.class)

File: apm-application-toolkit/apm-toolkit-meter/src/main/java/org/apache/skywalking/apm/toolkit/meter/Counter.java
Patch:
@@ -19,7 +19,9 @@
 package org.apache.skywalking.apm.toolkit.meter;
 
 /**
- * A counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart.
+ * A counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase.
+ *
+ * The source code of this class doesn't include the implementation, all logic are injected from its activation.
  */
 public class Counter extends BaseMeter {
 

File: apm-application-toolkit/apm-toolkit-meter/src/main/java/org/apache/skywalking/apm/toolkit/meter/Gauge.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * A gauge is a metric that represents a single numerical value that can arbitrarily go up and down.
+ *
+ * The source code of this class doesn't include the implementation, all logic are injected from its activation.
  */
 public class Gauge extends BaseMeter {
 

File: apm-application-toolkit/apm-toolkit-meter/src/main/java/org/apache/skywalking/apm/toolkit/meter/MeterCenter.java
Patch:
@@ -19,13 +19,13 @@
 package org.apache.skywalking.apm.toolkit.meter;
 
 /**
- * Management the meter.
+ * Management the meter. No implementation yet. As meter typically is not deleted/removed by the user codes manually, we
+ * don't support this.
  */
 public class MeterCenter {
 
     /**
-     * Remove meter
-     * @return Meter reference if exists
+     * @return NULL always, no real operation.
      */
     public static BaseMeter removeMeter(MeterId id) {
         return null;

File: apm-application-toolkit/apm-toolkit-meter/src/main/java/org/apache/skywalking/apm/toolkit/meter/MeterId.java
Patch:
@@ -79,7 +79,7 @@ public int hashCode() {
     /**
      * The meter type
      */
-    public static enum MeterType {
+    public enum MeterType {
         COUNTER,
         GAUGE,
         HISTOGRAM

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/Counter.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.atomic.DoubleAdder;
 
 /**
- * A counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart.
+ * A counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase.
  */
 public class Counter extends BaseMeter {
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/CounterMode.java
Patch:
@@ -23,12 +23,12 @@
  */
 public enum CounterMode {
     /**
-     * Increase single value, report the real value
+     * INCREMENT mode represents reporting the latest value.
      */
     INCREMENT,
 
     /**
-     * Rate with previous value when report
+     * RATE mode represents reporting the increment rate. Value = latest value - last reported value.
      */
     RATE
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/Gauge.java
Patch:
@@ -47,7 +47,6 @@ public double get() {
 
     @Override
     public MeterData.Builder transform() {
-        // get count
         double count;
         try {
             count = get();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterId.java
Patch:
@@ -33,7 +33,7 @@ public class MeterId {
     private final MeterType type;
     private final List<MeterTag> tags;
 
-    // cache the gRPC label message
+    // Labels are used to report meter to the backend.
     private List<Label> labels;
 
     public MeterId(String name, MeterType type, List<MeterTag> tags) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterSender.java
Patch:
@@ -42,7 +42,7 @@
 import static org.apache.skywalking.apm.agent.core.conf.Config.Collector.GRPC_UPSTREAM_TIMEOUT;
 
 /**
- * Collect the values from given registered metrics, and send to the backend.
+ * MeterSender collects the values of registered meter instances, and sends to the backend.
  */
 @DefaultImplementor
 public class MeterSender implements BootService, GRPCChannelListener {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterService.java
Patch:
@@ -32,7 +32,8 @@
 import org.apache.skywalking.apm.util.RunnableWithExceptionProtection;
 
 /**
- * Agent core level service. It provides the register map for all available metrics and send them through meter sender.
+ * Agent core level service. It provides the register map for all available {@link BaseMeter} instances and schedules
+ * the {@link MeterSender}
  */
 @DefaultImplementor
 public class MeterService implements BootService, Runnable {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/IDManager.java
Patch:
@@ -275,14 +275,14 @@ public static String analysisId(String id) {
 
     /**
      * @param text normal literal string
-     * @return Base74 encoded UTF-8 string
+     * @return Base64 encoded UTF-8 string
      */
     private static String encode(String text) {
         return new String(Base64.getEncoder().encode(text.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
     }
 
     /**
-     * @param base64text Base74 encoded UTF-8 string
+     * @param base64text Base64 encoded UTF-8 string
      * @return normal literal string
      */
     private static String decode(String base64text) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RateMetrics.java
Patch:
@@ -62,6 +62,9 @@ public final void combine(Metrics metrics) {
 
     @Override
     public void calculate() {
+        if (denominator == 0) {
+            return;
+        }
         percentage = (int) (numerator * 10000 / denominator);
     }
 

File: oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/browser/provider/BrowserServiceModuleConfig.java
Patch:
@@ -21,11 +21,11 @@
 import lombok.Setter;
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
 
+@Setter
+@Getter
 public class BrowserServiceModuleConfig extends ModuleConfig {
     /**
      * The sample rate precision is 1/10000. 10000 means 100% sample in default.
      */
-    @Setter
-    @Getter
     private int sampleRate = 10000;
 }

File: oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/browser/provider/handler/grpc/BrowserPerfServiceHandler.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.skywalking.oap.server.telemetry.api.MetricsTag;
 
 /**
- * Collect and process the performance and error log.
+ * Collect and process the performance data and error log.
  */
 @Slf4j
 public class BrowserPerfServiceHandler extends BrowserPerfServiceGrpc.BrowserPerfServiceImplBase implements GRPCHandler {

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v3/define/v38/MongoDBOperationExecutorInstrumentation.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class MongoDBOperationExecutorInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String WITNESS_CLASS = "com.mongodb.client.ClientSession";
+    private static final String WITNESS_CLASS = "com.mongodb.operation.AggregateOperationImpl";
 
     private static final String ENHANCE_CLASS = "com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor";
 

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v3/support/MongoSpanHelper.java
Patch:
@@ -39,7 +39,7 @@ public static void createExitSpan(String executeMethod, String remotePeer, Objec
         SpanLayer.asDB(span);
 
         if (MongoPluginConfig.Plugin.MongoDB.TRACE_PARAM) {
-            Tags.DB_STATEMENT.set(span, executeMethod + " " + MongoOperationHelper.getTraceParam(operation));
+            Tags.DB_BIND_VARIABLES.set(span, MongoOperationHelper.getTraceParam(operation));
         }
     }
 }

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/mongodb/v3/interceptor/v30/MongoDBInterceptorTest.java
Patch:
@@ -128,7 +128,7 @@ private void assertRedisSpan(AbstractTracingSpan span) {
         assertThat(span.getOperationName(), is("MongoDB/FindOperation"));
         assertThat(SpanHelper.getComponentId(span), is(42));
         List<TagValuePair> tags = SpanHelper.getTags(span);
-        assertThat(tags.get(1).getValue(), is("FindOperation {\"name\": \"by\"}"));
+        assertThat(tags.get(1).getValue(), is("{\"name\": \"by\"}"));
         assertThat(tags.get(0).getValue(), is("MongoDB"));
         assertThat(span.isExit(), is(true));
         assertThat(SpanHelper.getLayer(span), CoreMatchers.is(SpanLayer.DB));

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/mongodb/v3/interceptor/v37/MongoDBOperationExecutorInterceptorTest.java
Patch:
@@ -127,7 +127,7 @@ private void assertRedisSpan(AbstractTracingSpan span) {
         assertThat(span.getOperationName(), is("MongoDB/FindOperation"));
         assertThat(SpanHelper.getComponentId(span), is(42));
         List<TagValuePair> tags = SpanHelper.getTags(span);
-        assertThat(tags.get(1).getValue(), is("FindOperation {\"name\": \"by\"}"));
+        assertThat(tags.get(1).getValue(), is("{\"name\": \"by\"}"));
         assertThat(tags.get(0).getValue(), is("MongoDB"));
         assertThat(span.isExit(), is(true));
         assertThat(SpanHelper.getLayer(span), CoreMatchers.is(SpanLayer.DB));

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterSender.java
Patch:
@@ -42,12 +42,14 @@
 
 import static org.apache.skywalking.apm.agent.core.conf.Config.Collector.GRPC_UPSTREAM_TIMEOUT;
 
+/**
+ * Collect the values from given registered metrics, and send to the backend.
+ */
 @DefaultImplementor
 public class MeterSender implements BootService, GRPCChannelListener {
     private static final ILog LOGGER = LogManager.getLogger(MeterSender.class);
 
     private volatile GRPCChannelStatus status = GRPCChannelStatus.DISCONNECT;
-
     private volatile MeterReportServiceGrpc.MeterReportServiceStub meterReportServiceStub;
 
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterService.java
Patch:
@@ -32,6 +32,9 @@
 import org.apache.skywalking.apm.agent.core.meter.transform.MeterTransformer;
 import org.apache.skywalking.apm.util.RunnableWithExceptionProtection;
 
+/**
+ * Agent core level service. It provides the register map for all available metrics and send them through meter sender.
+ */
 @DefaultImplementor
 public class MeterService implements BootService, Runnable {
     private static final ILog LOGGER = LogManager.getLogger(MeterService.class);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/adapter/MeterAdapter.java
Patch:
@@ -24,5 +24,8 @@
  * Working on adapt the tool-kit side with agent core
  */
 public interface MeterAdapter {
+    /**
+     * @return {@link MeterId}
+     */
     MeterId getId();
 }

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-meter-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/meter/CounterInterceptor.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 import org.apache.skywalking.apm.toolkit.meter.impl.CounterImpl;
-import org.apache.skywalking.apm.toolkit.activation.meter.adapter.TookitCounterAdapter;
+import org.apache.skywalking.apm.toolkit.activation.meter.adapter.ToolkitCounterAdapter;
 
 public class CounterInterceptor implements InstanceConstructorInterceptor {
     private static MeterService METER_SERVICE;
@@ -33,7 +33,7 @@ public class CounterInterceptor implements InstanceConstructorInterceptor {
     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
         final CounterImpl toolkitCounter = (CounterImpl) objInst;
 
-        final TookitCounterAdapter counterAdapter = new TookitCounterAdapter(toolkitCounter);
+        final ToolkitCounterAdapter counterAdapter = new ToolkitCounterAdapter(toolkitCounter);
         final CounterTransformer counterTransformer = new CounterTransformer(counterAdapter);
 
         if (METER_SERVICE == null) {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-meter-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/meter/adapter/ToolkitCounterAdapter.java
Patch:
@@ -23,12 +23,12 @@
 import org.apache.skywalking.apm.toolkit.activation.meter.util.MeterIdConverter;
 import org.apache.skywalking.apm.toolkit.meter.impl.CounterImpl;
 
-public class TookitCounterAdapter implements CounterAdapter {
+public class ToolkitCounterAdapter implements CounterAdapter {
 
     private final CounterImpl counter;
     private final MeterId id;
 
-    public TookitCounterAdapter(CounterImpl counter) {
+    public ToolkitCounterAdapter(CounterImpl counter) {
         this.counter = counter;
         this.id = MeterIdConverter.convert(counter.getMeterId());
     }

File: apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaMeterSender.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.skywalking.apm.network.language.agent.v3.MeterDataCollection;
 
 /**
- * A report to send JVM Metrics data to Kafka Broker.
+ * A report to send Metrics data of meter system to Kafka Broker.
  */
 @OverrideImplementor(MeterSender.class)
 public class KafkaMeterSender extends MeterSender {

File: oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleDefine.java
Patch:
@@ -83,7 +83,7 @@ void prepare(ModuleManager moduleManager, ApplicationConfiguration.ModuleConfigu
         }
 
         if (loadedProvider == null) {
-            throw new ProviderNotFoundException(this.name() + " module no provider exists.");
+            throw new ProviderNotFoundException(this.name() + " module no provider found.");
         }
 
         LOGGER.info("Prepare the {} provider in {} module.", loadedProvider.name(), this.name());

File: test/e2e/e2e-common/src/test/java/org/apache/skywalking/e2e/docker/DockerComposeFileTest.java
Patch:
@@ -59,7 +59,6 @@ void getAllConfigInfo() throws IOException, InterruptedException, URISyntaxExcep
         Assert.assertNotNull(testFile.getServices());
         Assert.assertEquals(COMPOSE_FILE_ONE.getServices().size() + COMPOSE_FILE_TWO.getServices().size(),
                 testFile.getServices().size());
-        Assert.assertEquals(COMPOSE_FILE_ONE.getVersion(), testFile.getVersion());
     }
 
     @Test

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v20x/define/HttpClientInstrumentation.java
Patch:
@@ -21,13 +21,12 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
-public class HttpClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class HttpClientInstrumentation extends AbstractGateway200EnhancePluginDefine {
 
     @Override
     protected ClassMatch enhanceClass() {
@@ -41,7 +40,7 @@ public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
 
     @Override
     public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
-        return new InstanceMethodsInterceptPoint[]{
+        return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override
                 public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v20x/define/HttpClientRequestInstrumentation.java
Patch:
@@ -21,13 +21,12 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static org.apache.skywalking.apm.agent.core.plugin.match.HierarchyMatch.byHierarchyMatch;
 
-public class HttpClientRequestInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class HttpClientRequestInstrumentation extends AbstractGateway200EnhancePluginDefine {
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v20x/define/NettyRoutingFilterInstrumentation.java
Patch:
@@ -21,14 +21,13 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static org.apache.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
-public class NettyRoutingFilterInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class NettyRoutingFilterInstrumentation extends AbstractGateway200EnhancePluginDefine {
 
     @Override
     protected ClassMatch enhanceClass() {

File: test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/kafka/KafkaProfileE2E.java
Patch:
@@ -141,9 +141,8 @@ void services() throws Exception {
     @Order(3)
     void createProfileTask() throws Exception {
         final ProfileTaskCreationRequest creationRequest = ProfileTaskCreationRequest.builder()
-                                                                                     .serviceId(
-                                                                                         "ZTJlLXByb2ZpbGUtc2VydmljZQ==.1")
-                                                                                     .endpointName("/profile/{name}")
+                                                                                     .serviceId("ZTJlLXByb2ZpbGUtc2VydmljZQ==.1")
+                                                                                     .endpointName("{POST}/profile/{name}")
                                                                                      .duration(1)
                                                                                      .startTime(-1)
                                                                                      .minDurationThreshold(1500)

File: test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/profile/ProfileE2E.java
Patch:
@@ -141,7 +141,7 @@ void services() throws Exception {
     void createProfileTask() throws Exception {
         final ProfileTaskCreationRequest creationRequest = ProfileTaskCreationRequest.builder()
                                                                                      .serviceId("ZTJlLXByb2ZpbGUtc2VydmljZQ==.1")
-                                                                                     .endpointName("/profile/{name}")
+                                                                                     .endpointName("{POST}/profile/{name}")
                                                                                      .duration(1)
                                                                                      .startTime(-1)
                                                                                      .minDurationThreshold(1500)

File: apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/AbstractSpringBeanInstrumentation.java
Patch:
@@ -34,7 +34,7 @@
 import static net.bytebuddy.matcher.ElementMatchers.not;
 import static org.apache.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch.byClassAnnotationMatch;
 import static org.apache.skywalking.apm.agent.core.plugin.match.RegexMatch.byRegexMatch;
-import static org.apache.skywalking.apm.plugin.spring.annotations.SpringAnnotationConfig.Plugin.SpringAnnotation.CLASSNAME_MATCH_REGEX_EXPRESSION;
+import static org.apache.skywalking.apm.plugin.spring.annotations.SpringAnnotationConfig.Plugin.SpringAnnotation.CLASSNAME_MATCH_REGEX;
 
 public abstract class AbstractSpringBeanInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.spring.annotations.SpringAnnotationInterceptor";
@@ -72,11 +72,11 @@ public boolean isOverrideArgs() {
 
     @Override
     protected ClassMatch enhanceClass() {
-        if (StringUtil.isEmpty(CLASSNAME_MATCH_REGEX_EXPRESSION)) {
+        if (StringUtil.isEmpty(CLASSNAME_MATCH_REGEX)) {
             return byClassAnnotationMatch(getEnhanceAnnotation());
         } else {
             return LogicalMatchOperation.and(
-                byRegexMatch(CLASSNAME_MATCH_REGEX_EXPRESSION.split(",")),
+                byRegexMatch(CLASSNAME_MATCH_REGEX.split(",")),
                 byClassAnnotationMatch(getEnhanceAnnotation())
             );
         }

File: apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/SpringAnnotationConfig.java
Patch:
@@ -28,7 +28,7 @@ public static class SpringAnnotation {
             /**
              * regex expression to match spring bean classname
              */
-            public static String CLASSNAME_MATCH_REGEX_EXPRESSION = "";
+            public static String CLASSNAME_MATCH_REGEX = "";
         }
     }
 }
\ No newline at end of file

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/jvm/JVMSourceDispatcher.java
Patch:
@@ -77,7 +77,9 @@ private void sendToCpuMetricProcess(String service,
         serviceInstanceJVMCPU.setName(serviceInstance);
         serviceInstanceJVMCPU.setServiceId(serviceId);
         serviceInstanceJVMCPU.setServiceName(service);
-        serviceInstanceJVMCPU.setUsePercent(cpu.getUsagePercent());
+        // If the cpu usage percent is less than 1, will set to 1
+        double adjustedCpuUsagePercent = Math.max(cpu.getUsagePercent(), 1.0);
+        serviceInstanceJVMCPU.setUsePercent(adjustedCpuUsagePercent);
         serviceInstanceJVMCPU.setTimeBucket(timeBucket);
         sourceReceiver.receive(serviceInstanceJVMCPU);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/server/GRPCHandlerRegisterImpl.java
Patch:
@@ -43,6 +43,6 @@ public void addHandler(ServerServiceDefinition definition) {
 
     @Override
     public void addFilter(ServerInterceptor interceptor) {
-
+        server.addHandler(interceptor);
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManagerExtendService.java
Patch:
@@ -65,7 +65,7 @@ public AbstractTracerContext createTraceContext(String operationName, boolean fo
             context = new IgnoredTracerContext();
         } else {
             SamplingService samplingService = ServiceManager.INSTANCE.findService(SamplingService.class);
-            if (forceSampling || samplingService.trySampling()) {
+            if (forceSampling || samplingService.trySampling(operationName)) {
                 context = new TracingContext(operationName);
             } else {
                 context = new IgnoredTracerContext();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -86,9 +86,10 @@ public void shutdown() {
     }
 
     /**
+     * @param operationName The first operation name of the new tracing context.
      * @return true, if sampling mechanism is on, and getDefault the sampling factor successfully.
      */
-    public boolean trySampling() {
+    public boolean trySampling(String operationName) {
         if (on) {
             int factor = samplingFactorHolder.get();
             if (factor < Config.Agent.SAMPLE_N_PER_3_SECS) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java
Patch:
@@ -130,7 +130,7 @@ public void prepareBatch(Collection<Metrics> lastCollection, List<PrepareRequest
          * Hard coded the max size. This is only the batch size of one metrics, too large number is meaningless.
          */
         int maxBatchGetSize = 2000;
-        final int batchSize = Math.max(maxBatchGetSize, lastCollection.size());
+        final int batchSize = Math.min(maxBatchGetSize, lastCollection.size());
         List<Metrics> metricsList = new ArrayList<>();
         for (Metrics data : lastCollection) {
             transWorker.ifPresent(metricsTransWorker -> metricsTransWorker.in(data));

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/GetBeanInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
+import org.apache.skywalking.apm.plugin.spring.mvc.commons.JavaxServletRequestHolder;
 import org.springframework.web.context.request.NativeWebRequest;
 import org.springframework.web.context.request.RequestContextHolder;
 import org.springframework.web.context.request.ServletRequestAttributes;
@@ -44,8 +45,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         Object ret) throws Throwable {
         if (ret instanceof EnhancedInstance) {
             ContextManager.getRuntimeContext()
-                          .put(REQUEST_KEY_IN_RUNTIME_CONTEXT, ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes())
-                              .getRequest());
+                          .put(REQUEST_KEY_IN_RUNTIME_CONTEXT, new JavaxServletRequestHolder(((ServletRequestAttributes) RequestContextHolder.getRequestAttributes())
+                              .getRequest()));
         }
         return ret;
     }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java
Patch:
@@ -76,7 +76,8 @@ public Rules readRules() {
                         alarmRule.setOp((String) settings.get("op"));
                         alarmRule.setPeriod((Integer) settings.getOrDefault("period", 1));
                         alarmRule.setCount((Integer) settings.getOrDefault("count", 1));
-                        alarmRule.setSilencePeriod((Integer) settings.getOrDefault("silence-period", -1));
+                        // How many times of checks, the alarm keeps silence after alarm triggered, default as same as period.
+                        alarmRule.setSilencePeriod((Integer) settings.getOrDefault("silence-period", alarmRule.getPeriod()));
                         alarmRule.setMessage(
                             (String) settings.getOrDefault("message", "Alarm caused by Rule " + alarmRule
                                 .getAlarmRuleName()));

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java
Patch:
@@ -87,6 +87,8 @@ public static final class HTTP {
 
     public static final StringTag LOGIC_ENDPOINT = new StringTag(12, "x-le");
 
+    public static final String VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT = "{\"logic-span\":true}";
+
     /**
      * Creates a {@code StringTag} with the given key and cache it, if it's created before, simply return it without
      * creating a new one.

File: apm-sniffer/apm-sdk-plugin/elastic-job-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticjob/ElasticJobExecutorInterceptor.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.apm.plugin.elasticjob;
 
 import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;
-import org.apache.skywalking.apm.agent.core.context.ContextCarrier;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
+import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
@@ -36,8 +36,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         ShardingContexts shardingContexts = (ShardingContexts) allArguments[0];
         Integer item = (Integer) allArguments[1];
         String operateName = ComponentsDefine.ELASTIC_JOB.getName() + "/" + shardingContexts.getJobName();
-        AbstractSpan span = ContextManager.createEntrySpan(operateName, new ContextCarrier());
+        AbstractSpan span = ContextManager.createLocalSpan(operateName);
         span.setComponent(ComponentsDefine.ELASTIC_JOB);
+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);
         span.tag("item", item == null ? "" : String.valueOf(item));
         span.tag("shardingTotalCount", Integer.toString(shardingContexts.getShardingTotalCount()));
         span.tag("taskId", shardingContexts.getTaskId());

File: oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRSourceDispatcher.java
Patch:
@@ -80,7 +80,7 @@ void sendMetric(String service, String serviceInstance, long minuteTimeBucket, C
         serviceInstanceCLRThread.setMaxCompletionPortThreads(thread.getMaxCompletionPortThreads());
         serviceInstanceCLRThread.setMaxWorkerThreads(thread.getMaxWorkerThreads());
         serviceInstanceCLRThread.setTimeBucket(minuteTimeBucket);
-        serviceInstanceCLRThread.setId(serviceInstance);
+        serviceInstanceCLRThread.setId(serviceInstanceId);
         serviceInstanceCLRThread.setName(service);
         serviceInstanceCLRThread.setServiceId(serviceId);
         serviceInstanceCLRThread.setServiceName(serviceInstance);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/PatternLogger.java
Patch:
@@ -85,6 +85,9 @@ protected void logger(LogLevel level, String message, Throwable e) {
     }
 
     private String replaceParam(String message, Object... parameters) {
+        if (message == null) {
+            return message;
+        }
         int startSize = 0;
         int parametersIndex = 0;
         int index;

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;
 import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
@@ -44,6 +45,7 @@ public CallbackAdapterInterceptor(CallbackCache callbackCache) {
     public void onCompletion(RecordMetadata metadata, Exception exception) {
         ContextSnapshot snapshot = callbackCache.getSnapshot();
         AbstractSpan activeSpan = ContextManager.createLocalSpan("Kafka/Producer/Callback");
+        SpanLayer.asMQ(activeSpan);
         activeSpan.setComponent(ComponentsDefine.KAFKA_PRODUCER);
         if (metadata != null) {
             Tags.MQ_TOPIC.set(activeSpan, metadata.topic());

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;
 import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
@@ -43,6 +44,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             ContextSnapshot snapshot = getSnapshot(cache);
             RecordMetadata metadata = (RecordMetadata) allArguments[0];
             AbstractSpan activeSpan = ContextManager.createLocalSpan("Kafka/Producer/Callback");
+            SpanLayer.asMQ(activeSpan);
             activeSpan.setComponent(ComponentsDefine.KAFKA_PRODUCER);
             if (metadata != null) {
                 // Null if an error occurred during processing of this record

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java
Patch:
@@ -210,7 +210,7 @@ public void parseExit(SpanObject span, SegmentObject segmentObject) {
                 if (SpanTags.DB_STATEMENT.equals(tag.getKey())) {
                     String sqlStatement = tag.getValue();
                     if (StringUtil.isEmpty(sqlStatement)) {
-                        statement.setStatement("[No statement]/" + sourceBuilder.getDestEndpointName());
+                        statement.setStatement("[No statement]/" + span.getOperationName());
                     } else if (sqlStatement.length() > config.getMaxSlowSQLLength()) {
                         statement.setStatement(sqlStatement.substring(0, config.getMaxSlowSQLLength()));
                     } else {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Duration.java
Patch:
@@ -49,7 +49,7 @@ public long getStartTimestamp() {
     }
 
     public long getEndTimestamp() {
-        return DurationUtils.INSTANCE.startTimeToTimestamp(step, end);
+        return DurationUtils.INSTANCE.endTimeToTimestamp(step, end);
     }
 
     public long getStartTimeBucketInSec() {

File: oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/AnalyzerModuleConfig.java
Patch:
@@ -68,7 +68,9 @@ public class AnalyzerModuleConfig extends ModuleConfig {
     @Getter
     private boolean traceAnalysis = true;
     /**
-     * Slow Sql string length can't beyond this limit
+     * Slow Sql string length can't beyond this limit. This value should be as same as the length annotation at the
+     * {@code org.apache.skywalking.oap.server.core.analysis.manual.database.TopNDatabaseStatement#statement}. And share
+     * the system env name, SW_SLOW_DB_THRESHOLD
      */
     @Setter
     @Getter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/metric/promethues/PrometheusMetricConverter.java
Patch:
@@ -269,7 +269,7 @@ private void generateTraffic(MeterEntity entity) {
             instanceTraffic.setName(entity.getInstanceName());
             instanceTraffic.setServiceId(entity.serviceId());
             instanceTraffic.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));
-            instanceTraffic.setLastPingTimestamp(System.currentTimeMillis());
+            instanceTraffic.setLastPingTimestamp(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));
             MetricsStreamProcessor.getInstance().in(instanceTraffic);
         }
         if (!Strings.isNullOrEmpty(entity.getEndpointName())) {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/RequestMappingMethodInterceptor.java
Patch:
@@ -31,7 +31,7 @@
 public class RequestMappingMethodInterceptor extends AbstractMethodInterceptor {
     @Override
     public String getRequestURL(Method method) {
-        return ParsePathUtil.recursiveParseMethodAnnotaion(method, m -> {
+        return ParsePathUtil.recursiveParseMethodAnnotation(method, m -> {
             String requestURL = null;
             RequestMapping methodRequestMapping = AnnotationUtils.getAnnotation(m, RequestMapping.class);
             if (methodRequestMapping != null) {
@@ -47,7 +47,7 @@ public String getRequestURL(Method method) {
 
     @Override
     public String getAcceptedMethodTypes(Method method) {
-        return ParsePathUtil.recursiveParseMethodAnnotaion(method, m -> {
+        return ParsePathUtil.recursiveParseMethodAnnotation(method, m -> {
             RequestMapping methodRequestMapping = AnnotationUtils.getAnnotation(m, RequestMapping.class);
             if (methodRequestMapping == null || methodRequestMapping.method().length == 0) {
                 return null;

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/RestMappingMethodInterceptor.java
Patch:
@@ -36,7 +36,7 @@
 public class RestMappingMethodInterceptor extends AbstractMethodInterceptor {
     @Override
     public String getRequestURL(Method method) {
-        return ParsePathUtil.recursiveParseMethodAnnotaion(method, m -> {
+        return ParsePathUtil.recursiveParseMethodAnnotation(method, m -> {
             String requestURL = null;
             GetMapping getMapping = AnnotationUtils.getAnnotation(m, GetMapping.class);
             PostMapping postMapping = AnnotationUtils.getAnnotation(m, PostMapping.class);

File: oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/prometheus/parser/Context.java
Patch:
@@ -116,6 +116,7 @@ void end() {
                 Histogram.HistogramBuilder hBuilder = Histogram.builder();
                 hBuilder.name(name).timestamp(now);
                 samples.forEach(textSample -> {
+                    hBuilder.labels(textSample.getLabels());
                     if (textSample.getName().endsWith("_count")) {
                         hBuilder.sampleCount((long) convertStringToDouble(textSample.getValue()));
                     } else if (textSample.getName().endsWith("_sum")) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/NodeType.java
Patch:
@@ -61,7 +61,7 @@ public enum NodeType {
      */
     User(10),
     /**
-     * <code>User = 11</code>
+     * <code>Unrecognized = 11</code>
      */
     Unrecognized(11);
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java
Patch:
@@ -84,9 +84,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             if (requestURL == null) {
                 requestURL = getRequestURL(method);
                 pathMappingCache.addPathMapping(method, requestURL);
-                requestURL = getAcceptedMethodTypes(method) + pathMappingCache.findPathMapping(method);
+                requestURL = pathMappingCache.findPathMapping(method);
             }
-            operationName = requestURL;
+            operationName = getAcceptedMethodTypes(method) + requestURL;
         }
 
         HttpServletRequest request = (HttpServletRequest) ContextManager.getRuntimeContext()

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/util/TagUtil.java
Patch:
@@ -38,6 +38,6 @@ public static void tagReturnSpanSpan(final AbstractSpan span, final Map<String,
 
     public static Boolean isReturnTag(String expression) {
         String[] es = expression.split("\\.");
-        return es.length == 2 && "returnedObj".equals(es[0]);
+        return "returnedObj".equals(es[0]);
     }
 }

File: oap-server/server-cluster-plugin/cluster-consul-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ConsulCoordinator.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.skywalking.oap.server.core.cluster.ServiceRegisterException;
 import org.apache.skywalking.oap.server.core.remote.client.Address;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
-import org.apache.skywalking.oap.server.telemetry.api.TelemetryRelatedContext;
 
 public class ConsulCoordinator implements ClusterRegister, ClusterNodesQuery {
 
@@ -79,7 +78,6 @@ public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegister
         AgentClient agentClient = client.agentClient();
 
         this.selfAddress = remoteInstance.getAddress();
-        TelemetryRelatedContext.INSTANCE.setId(selfAddress.toString());
 
         Registration registration = ImmutableRegistration.builder()
                                                          .id(remoteInstance.getAddress().toString())

File: oap-server/server-cluster-plugin/cluster-consul-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ITClusterModuleConsulProviderFunctionalTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;
 import org.apache.skywalking.oap.server.core.remote.client.Address;
 import org.apache.skywalking.oap.server.library.module.ModuleProvider;
-import org.apache.skywalking.oap.server.telemetry.api.TelemetryRelatedContext;
 import org.junit.Before;
 import org.junit.Test;
 import org.powermock.reflect.Whitebox;
@@ -196,7 +195,6 @@ private ClusterModuleConsulProvider createProvider(String serviceName, String in
             Consul client = Whitebox.getInternalState(consulCoordinator, "client");
             AgentClient agentClient = client.agentClient();
             Whitebox.setInternalState(consulCoordinator, "selfAddress", remoteInstance.getAddress());
-            TelemetryRelatedContext.INSTANCE.setId(remoteInstance.getAddress().toString());
             Registration registration = ImmutableRegistration.builder()
                                                              .id(remoteInstance.getAddress().toString())
                                                              .name(serviceName)

File: oap-server/server-cluster-plugin/cluster-etcd-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/EtcdCoordinator.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;
 import org.apache.skywalking.oap.server.core.cluster.ServiceRegisterException;
 import org.apache.skywalking.oap.server.core.remote.client.Address;
-import org.apache.skywalking.oap.server.telemetry.api.TelemetryRelatedContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -93,7 +92,6 @@ public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegister
         }
 
         this.selfAddress = remoteInstance.getAddress();
-        TelemetryRelatedContext.INSTANCE.setId(selfAddress.toString());
 
         EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)
                                                           .host(selfAddress.getHost())

File: oap-server/server-cluster-plugin/cluster-kubernetes-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/kubernetes/KubernetesCoordinator.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.skywalking.oap.server.core.config.ConfigService;
 import org.apache.skywalking.oap.server.core.remote.client.Address;
 import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;
-import org.apache.skywalking.oap.server.telemetry.api.TelemetryRelatedContext;
 
 /**
  * Read collector pod info from api-server of kubernetes, then using all containerIp list to construct the list of
@@ -81,7 +80,6 @@ public List<RemoteInstance> queryRemoteNodes() {
     @Override
     public void registerRemote(final RemoteInstance remoteInstance) throws ServiceRegisterException {
         this.port = remoteInstance.getAddress().getPort();
-        TelemetryRelatedContext.INSTANCE.setId(remoteInstance.toString());
     }
 
     private List<V1Pod> selfPod() {

File: oap-server/server-cluster-plugin/cluster-standalone-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/standalone/StandaloneManager.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.skywalking.oap.server.core.cluster.ClusterNodesQuery;
 import org.apache.skywalking.oap.server.core.cluster.ClusterRegister;
 import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;
-import org.apache.skywalking.oap.server.telemetry.api.TelemetryRelatedContext;
 
 /**
  * A cluster manager simulator. Work in memory only. Also return the current instance.
@@ -36,7 +35,6 @@ public class StandaloneManager implements ClusterNodesQuery, ClusterRegister {
     public void registerRemote(RemoteInstance remoteInstance) {
         this.remoteInstance = remoteInstance;
         this.remoteInstance.getAddress().setSelf(true);
-        TelemetryRelatedContext.INSTANCE.setId("standalone");
     }
 
     @Override

File: oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;
 import org.apache.skywalking.oap.server.core.cluster.ServiceRegisterException;
 import org.apache.skywalking.oap.server.core.remote.client.Address;
-import org.apache.skywalking.oap.server.telemetry.api.TelemetryRelatedContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -74,7 +73,6 @@ public synchronized void registerRemote(RemoteInstance remoteInstance) throws Se
             serviceDiscovery.registerService(thisInstance);
 
             this.selfAddress = remoteInstance.getAddress();
-            TelemetryRelatedContext.INSTANCE.setId(selfAddress.toString());
         } catch (Exception e) {
             throw new ServiceRegisterException(e.getMessage());
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsAggregateWorker.java
Patch:
@@ -69,7 +69,7 @@ public class MetricsAggregateWorker extends AbstractWorker<Metrics> {
                                                           .getService(MetricsCreator.class);
         aggregationCounter = metricsCreator.createCounter(
             "metrics_aggregation", "The number of rows in aggregation",
-            new MetricsTag.Keys("metricName", "level", "dimensionality"), new MetricsTag.Values(modelName, "1", "min")
+            new MetricsTag.Keys("metricName", "level", "dimensionality"), new MetricsTag.Values(modelName, "1", "minute")
         );
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java
Patch:
@@ -146,7 +146,7 @@ public void create(ModuleDefineHolder moduleDefineHolder,
             }
 
             transWorker = new MetricsTransWorker(
-                moduleDefineHolder, stream.getName(), hourPersistentWorker, dayPersistentWorker);
+                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);
         }
 
         Model model = modelSetter.add(

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/TimeBucket.java
Patch:
@@ -104,6 +104,7 @@ public static boolean isDayBucket(long timeBucket) {
     public static long getTimestamp(long timeBucket, DownSampling downsampling) {
         Calendar calendar = Calendar.getInstance();
         calendar.setTimeInMillis(0);
+
         switch (downsampling) {
             case Second:
                 calendar.set(Calendar.SECOND, (int) (timeBucket % 100));
@@ -117,11 +118,12 @@ public static long getTimestamp(long timeBucket, DownSampling downsampling) {
             case Day:
                 calendar.set(Calendar.DAY_OF_MONTH, (int) (timeBucket % 100));
                 timeBucket /= 100;
+                calendar.set(Calendar.MONTH, (int) (timeBucket % 100) - 1);
+                calendar.set(Calendar.YEAR, (int) (timeBucket / 100));
                 break;
             default:
                 throw new UnexpectedException("Unknown downsampling value.");
         }
-
         return calendar.getTimeInMillis();
     }
 

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/AggregationQuery.java
Patch:
@@ -79,8 +79,8 @@ public List<SelectedRecord> sortMetrics(final TopNCondition condition,
             });
         }
         final SelectSubQueryImpl<SelectQueryImpl> subQuery = where
-            .and(gte(InfluxClient.TIME, InfluxClient.timeInterval(duration.getStartTimeBucket())))
-            .and(lte(InfluxClient.TIME, InfluxClient.timeInterval(duration.getEndTimeBucket())))
+            .and(gte(InfluxClient.TIME, duration.getStartTimestamp()))
+            .and(lte(InfluxClient.TIME, duration.getEndTimestamp()))
             .groupBy(InfluxConstants.TagName.ENTITY_ID);
 
         query.setSubQuery(subQuery);

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/MetricsQuery.java
Patch:
@@ -82,8 +82,8 @@ public int readMetricsValue(final MetricsCondition condition,
         }
 
         queryWhereQuery
-            .and(gte(InfluxClient.TIME, InfluxClient.timeInterval(duration.getStartTimeBucket())))
-            .and(lte(InfluxClient.TIME, InfluxClient.timeInterval(duration.getEndTimeBucket())))
+            .and(gte(InfluxClient.TIME, duration.getStartTimestamp()))
+            .and(lte(InfluxClient.TIME, duration.getEndTimestamp()))
             .groupBy(InfluxConstants.TagName.ENTITY_ID);
 
         List<QueryResult.Series> seriesList = client.queryForSeries(queryWhereQuery);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Entity.java
Patch:
@@ -90,7 +90,7 @@ public boolean isValid() {
                     && Objects.nonNull(normal) && Objects.nonNull(destNormal);
             case EndpointRelation:
                 return Objects.nonNull(serviceName) && Objects.nonNull(endpointName)
-                    && Objects.nonNull(serviceInstanceName) && Objects.nonNull(endpointName)
+                    && Objects.nonNull(endpointName) && Objects.nonNull(destEndpointName)
                     && Objects.nonNull(normal) && Objects.nonNull(destNormal);
             default:
                 return false;

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListener.java
Patch:
@@ -107,6 +107,7 @@ public void parseEntry(SpanObject span, SegmentObject segmentObject) {
                 if (span.getSpanLayer().equals(SpanLayer.MQ) ||
                     config.getUninstrumentedGatewaysConfig().isAddressConfiguredAsGateway(networkAddressUsedAtPeer)) {
                     sourceBuilder.setSourceServiceName(networkAddressUsedAtPeer);
+                    sourceBuilder.setSourceEndpointOwnerServiceName(reference.getParentService());
                     sourceBuilder.setSourceServiceInstanceName(networkAddressUsedAtPeer);
                     sourceBuilder.setSourceNodeType(NodeType.fromSpanLayerValue(span.getSpanLayer()));
                 } else {

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java
Patch:
@@ -282,6 +282,7 @@ public void testEntrySpanMQRef() {
         Assert.assertEquals("127.0.0.1", serviceInstanceRelation.getSourceServiceInstanceName());
         Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());
         Assert.assertEquals("downstream-endpoint", endpointRelation.getEndpoint());
+        Assert.assertEquals("downstream-service", endpointRelation.getServiceName());
         Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());
     }
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java
Patch:
@@ -61,7 +61,8 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
         }
 
         if (!Strings.isNullOrEmpty(keyword)) {
-            sql.append(" and ").append(AlarmRecord.ALARM_MESSAGE).append(" like '%").append(keyword).append("%' ");
+            sql.append(" and ").append(AlarmRecord.ALARM_MESSAGE).append(" like concat('%',?,'%') ");
+            parameters.add(keyword);
         }
         sql.append(" order by ").append(AlarmRecord.START_TIME).append(" desc ");
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java
Patch:
@@ -82,7 +82,8 @@ public TraceBrief queryBasicTraces(long startSecondTB,
             }
         }
         if (!Strings.isNullOrEmpty(endpointName)) {
-            sql.append(" and ").append(SegmentRecord.ENDPOINT_NAME).append(" like '%" + endpointName + "%'");
+            sql.append(" and ").append(SegmentRecord.ENDPOINT_NAME).append(" like concat('%',?,'%')");
+            parameters.add(endpointName);
         }
         if (StringUtil.isNotEmpty(serviceId)) {
             sql.append(" and ").append(SegmentRecord.SERVICE_ID).append(" = ?");

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java
Patch:
@@ -61,7 +61,8 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
         }
 
         if (!Strings.isNullOrEmpty(keyword)) {
-            sql.append(" and ").append(AlarmRecord.ALARM_MESSAGE).append(" like '%").append(keyword).append("%' ");
+            sql.append(" and ").append(AlarmRecord.ALARM_MESSAGE).append(" like concat('%',?,'%') ");
+            parameters.add(keyword);
         }
         sql.append(" order by ").append(AlarmRecord.START_TIME).append(" desc ");
 

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.1.0-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v41/JDBCRootInvokeInterceptor.java
Patch:
@@ -19,12 +19,13 @@
 package org.apache.skywalking.apm.plugin.shardingsphere.v41;
 
 import java.lang.reflect.Method;
+
+import org.apache.shardingsphere.underlying.executor.engine.ExecutorDataMap;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
-import org.apache.skywalking.apm.plugin.shardingsphere.v41.threadlocal.ContextThreadLocal;
 
 /**
  * {@link JDBCRootInvokeInterceptor} enhances {@link org.apache.shardingsphere.shardingjdbc.executor.AbstractStatementExecutor},
@@ -37,7 +38,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         MethodInterceptResult result) {
         ContextManager.createLocalSpan("/ShardingSphere/JDBCRootInvoke/")
                       .setComponent(ComponentsDefine.SHARDING_SPHERE);
-        ContextThreadLocal.getValue().put(Constant.CONTEXT_SNAPSHOT, ContextManager.capture());
+        ExecutorDataMap.getValue().put(Constant.CONTEXT_SNAPSHOT, ContextManager.capture());
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.1.0-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v41/ProxyRootInvokeInterceptor.java
Patch:
@@ -19,12 +19,13 @@
 package org.apache.skywalking.apm.plugin.shardingsphere.v41;
 
 import java.lang.reflect.Method;
+
+import org.apache.shardingsphere.underlying.executor.engine.ExecutorDataMap;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
-import org.apache.skywalking.apm.plugin.shardingsphere.v41.threadlocal.ContextThreadLocal;
 
 /**
  * ProxyRootInvokeInterceptor enhances. skywalking intercepts org.apache.shardingsphere.shardingproxy.frontend.command.CommandExecutorTask
@@ -37,7 +38,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         MethodInterceptResult result) {
         ContextManager.createLocalSpan("/ShardingSphere/ProxyRootInvoke/")
                       .setComponent(ComponentsDefine.SHARDING_SPHERE);
-        ContextThreadLocal.getValue().put(Constant.CONTEXT_SNAPSHOT, ContextManager.capture());
+        ExecutorDataMap.getValue().put(Constant.CONTEXT_SNAPSHOT, ContextManager.capture());
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.1.0-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v41/define/ExecuteInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
 
@@ -31,7 +30,7 @@
 /**
  * {@link ExecuteInstrumentation} presents that skywalking intercepts. {@link org.apache.shardingsphere.sharding.execute.sql.execute.SQLExecuteCallback}.
  */
-public class ExecuteInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class ExecuteInstrumentation extends AbstractShardingSphere41Instrumentation {
 
     private static final String ENHANCE_CLASS = "org.apache.shardingsphere.sharding.execute.sql.execute.SQLExecuteCallback";
 

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.1.0-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v41/define/JDBCRootInvokeInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
 
@@ -31,7 +30,7 @@
 /**
  * {@link JDBCRootInvokeInstrumentation} presents that skywalking intercepts. {@link org.apache.shardingsphere.shardingjdbc.executor.AbstractStatementExecutor}.
  */
-public class JDBCRootInvokeInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class JDBCRootInvokeInstrumentation extends AbstractShardingSphere41Instrumentation {
 
     private static final String ENHANCE_CLASS = "org.apache.shardingsphere.shardingjdbc.executor.AbstractStatementExecutor";
 

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.1.0-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v41/define/ProxyRootInvokeInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
 
@@ -31,7 +30,7 @@
 /**
  * ProxyRootInvokeInstrumentation presents that skywalking intercepts. skywalking intercepts org.apache.shardingsphere.shardingproxy.frontend.command.CommandExecutorTask.
  */
-public class ProxyRootInvokeInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class ProxyRootInvokeInstrumentation extends AbstractShardingSphere41Instrumentation {
 
     private static final String ENHANCE_CLASS = "org.apache.shardingsphere.shardingproxy.frontend.command.CommandExecutorTask";
 

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-RC3-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4rc3/define/ExecuteInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
 
@@ -31,7 +30,7 @@
 /**
  * {@link ExecuteInstrumentation} presents that skywalking intercepts {@link org.apache.shardingsphere.core.execute.sql.execute.SQLExecuteCallback}.
  */
-public class ExecuteInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class ExecuteInstrumentation extends AbstractShardingSphereV4R3Instrumentation {
 
     private static final String ENHANCE_CLASS = "org.apache.shardingsphere.core.execute.sql.execute.SQLExecuteCallback";
 

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-RC3-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4rc3/define/JDBCRootInvokeInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
 
@@ -32,7 +31,7 @@
  * {@link JDBCRootInvokeInstrumentation} presents that skywalking intercepts {@link
  * org.apache.shardingsphere.shardingjdbc.executor.AbstractStatementExecutor}.
  */
-public class JDBCRootInvokeInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class JDBCRootInvokeInstrumentation extends AbstractShardingSphereV4R3Instrumentation {
 
     private static final String ENHANCE_CLASS = "org.apache.shardingsphere.shardingjdbc.executor.AbstractStatementExecutor";
 

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-RC3-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4rc3/define/ProxyRootInvokeInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
 
@@ -31,7 +30,7 @@
 /**
  * ProxyRootInvokeInstrumentation presents that skywalking intercepts org.apache.shardingsphere.shardingproxy.frontend.command.CommandExecutorTask.
  */
-public class ProxyRootInvokeInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class ProxyRootInvokeInstrumentation extends AbstractShardingSphereV4R3Instrumentation {
 
     private static final String ENHANCE_CLASS = "org.apache.shardingsphere.shardingproxy.frontend.command.CommandExecutorTask";
 

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4/define/ExecuteInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
 
@@ -31,7 +30,7 @@
 /**
  * {@link ExecuteInstrumentation} presents that skywalking intercepts {@link org.apache.shardingsphere.core.execute.sql.execute.SQLExecuteCallback}.
  */
-public class ExecuteInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class ExecuteInstrumentation extends AbstractShardingSphereV4Instrumentation {
 
     private static final String ENHANCE_CLASS = "org.apache.shardingsphere.core.execute.sql.execute.SQLExecuteCallback";
 

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4/define/JDBCRootInvokeInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
 
@@ -32,7 +31,7 @@
  * {@link JDBCRootInvokeInstrumentation} presents that skywalking intercepts {@link
  * org.apache.shardingsphere.shardingjdbc.executor.AbstractStatementExecutor}.
  */
-public class JDBCRootInvokeInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class JDBCRootInvokeInstrumentation extends AbstractShardingSphereV4Instrumentation {
 
     private static final String ENHANCE_CLASS = "org.apache.shardingsphere.shardingjdbc.executor.AbstractStatementExecutor";
 

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4/define/ProxyRootInvokeInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
 
@@ -31,7 +30,7 @@
 /**
  * ProxyRootInvokeInstrumentation presents that skywalking intercepts org.apache.shardingsphere.shardingproxy.frontend.command.CommandExecutorTask.
  */
-public class ProxyRootInvokeInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
+public class ProxyRootInvokeInstrumentation extends AbstractShardingSphereV4Instrumentation {
 
     private static final String ENHANCE_CLASS = "org.apache.shardingsphere.shardingproxy.frontend.command.CommandExecutorTask";
 

File: test/plugin/scenarios/shardingsphere-4.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/shardingsphere/service/utility/config/DataSourceUtil.java
Patch:
@@ -18,13 +18,14 @@
 
 package org.apache.skywalking.apm.testcase.shardingsphere.service.utility.config;
 
+import org.apache.commons.dbcp2.BasicDataSource;
+
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.HashMap;
 import java.util.Map;
 import javax.sql.DataSource;
-import org.apache.commons.dbcp.BasicDataSource;
 
 public class DataSourceUtil {
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/DataTTLKeeperTimer.java
Patch:
@@ -86,6 +86,9 @@ private void delete() {
 
     private void execute(Model model) {
         try {
+            if (!model.isTimeSeries()) {
+                return;
+            }
             moduleManager.find(StorageModule.NAME)
                          .provider()
                          .getService(IHistoryDeleteDAO.class)

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TopNRecordsQueryDAO.java
Patch:
@@ -49,12 +49,12 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
         List<Object> parameters = new ArrayList<>(10);
 
         if (StringUtil.isNotEmpty(condition.getParentService())) {
-            sql.append(" service_id = ? ");
+            sql.append(" service_id = ? and");
             final String serviceId = IDManager.ServiceID.buildId(condition.getParentService(), condition.isNormal());
             parameters.add(serviceId);
         }
 
-        sql.append(" and ").append(TopN.TIME_BUCKET).append(" >= ?");
+        sql.append(" ").append(TopN.TIME_BUCKET).append(" >= ?");
         parameters.add(duration.getStartTimeBucketInSec());
         sql.append(" and ").append(TopN.TIME_BUCKET).append(" <= ?");
         parameters.add(duration.getEndTimeBucketInSec());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/HeatMap.java
Patch:
@@ -34,7 +34,7 @@
 @Getter
 public class HeatMap {
     private List<HeatMapColumn> values = new ArrayList<>(10);
-    private List<Bucket> buckets = null;
+    private List<Bucket> buckets = new ArrayList<>();
 
     public void addBucket(Bucket bucket) {
         this.buckets.add(bucket);
@@ -50,8 +50,7 @@ public void buildColumn(String id, String rawdata, int defaultValue) {
         DataTable dataset = new DataTable(rawdata);
 
         final List<String> sortedKeys = dataset.sortedKeys(new KeyComparator(true));
-        if (buckets == null) {
-            buckets = new ArrayList<>(dataset.size());
+        if (buckets.isEmpty()) {
             for (int i = 0; i < sortedKeys.size(); i++) {
                 final Bucket bucket = new Bucket();
                 final String minValue = sortedKeys.get(i);

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/define/KafkaProducerInstrumentation.java
Patch:
@@ -80,7 +80,7 @@ public String getMethodsInterceptor() {
 
                 @Override
                 public boolean isOverrideArgs() {
-                    return false;
+                    return true;
                 }
             }
         };

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/SegmentAnalysisListener.java
Patch:
@@ -104,7 +104,7 @@ public void parseEntry(SpanObject span, SegmentObject segmentObject) {
         if (StringUtil.isEmpty(serviceId)) {
             serviceName = namingControl.formatServiceName(segmentObject.getService());
             serviceId = IDManager.ServiceID.buildId(
-                serviceName, NodeType.fromSpanLayerValue(span.getSpanLayer()));
+                serviceName, NodeType.Normal);
         }
 
         endpointId = IDManager.EndpointID.buildId(

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -117,6 +117,7 @@ public List<Service> searchServices(long startTimestamp, long endTimestamp, Stri
 
         BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
 
+        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));
         if (!Strings.isNullOrEmpty(keyword)) {
             String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);
             boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/ServiceManagementClient.java
Patch:
@@ -119,7 +119,8 @@ public void run() {
                             .reportInstanceProperties(InstanceProperties.newBuilder()
                                                                         .setService(Config.Agent.SERVICE_NAME)
                                                                         .setServiceInstance(Config.Agent.INSTANCE_NAME)
-                                                                        .addAllProperties(OSUtil.buildOSInfo())
+                                                                        .addAllProperties(OSUtil.buildOSInfo(
+                                                                            Config.OsInfo.IPV4_LIST_SIZE))
                                                                         .addAllProperties(SERVICE_INSTANCE_PROPERTIES)
                                                                         .build());
                         instancePropertiesSubmitted = true;

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/AlarmQuery.java
Patch:
@@ -99,7 +99,7 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
               .sorted((a, b) -> Long.compare((long) b.get(1), (long) a.get(1)))
               .skip(from)
               .forEach(values -> {
-                  final int sid = (int) values.get(4);
+                  final int sid = ((Number) values.get(4)).intValue();
                   Scope scope = Scope.Finder.valueOf(sid);
 
                   AlarmMessage message = new AlarmMessage();

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/LogQuery.java
Patch:
@@ -141,7 +141,7 @@ public Logs queryLogs(String metricName, int serviceId, int serviceInstanceId, S
                     data.put(columns.get(i), value);
                 }
                 log.setContent((String) data.get(CONTENT));
-                log.setContentType(ContentType.instanceOf((int) data.get(CONTENT_TYPE)));
+                log.setContentType(ContentType.instanceOf(((Number) data.get(CONTENT_TYPE)).intValue()));
 
                 log.setEndpointId((String) data.get(ENDPOINT_ID));
                 log.setEndpointName((String) data.get(ENDPOINT_NAME));

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/ProfileThreadSnapshotQuery.java
Patch:
@@ -98,8 +98,8 @@ public List<BasicTrace> queryProfiledSegments(String taskId) throws IOException
                   basicTrace.setSegmentId((String) values.get(2));
                   basicTrace.setStart(String.valueOf(values.get(3)));
                   basicTrace.getEndpointNames().add((String) values.get(4));
-                  basicTrace.setDuration((int) values.get(5));
-                  basicTrace.setError(BooleanUtils.valueToBoolean((int) values.get(6)));
+                  basicTrace.setDuration(((Number) values.get(5)).intValue());
+                  basicTrace.setError(BooleanUtils.valueToBoolean(((Number) values.get(6)).intValue()));
                   String traceIds = (String) values.get(7);
                   basicTrace.getTraceIds().add(traceIds);
 
@@ -148,7 +148,7 @@ public List<ProfileThreadSnapshotRecord> queryRecords(String segmentId, int minS
             record.setTaskId((String) values.get(1));
             record.setSegmentId((String) values.get(2));
             record.setDumpTime(((Number) values.get(3)).longValue());
-            record.setSequence((int) values.get(4));
+            record.setSequence(((Number) values.get(4)).intValue());
             String dataBinaryBase64 = String.valueOf(values.get(5));
             if (StringUtil.isNotEmpty(dataBinaryBase64)) {
                 record.setStackBinary(Base64.getDecoder().decode(dataBinaryBase64));

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/TopNRecordsQuery.java
Patch:
@@ -87,7 +87,7 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
         final List<SelectedRecord> records = new ArrayList<>();
         series.getValues().forEach(values -> {
             SelectedRecord record = new SelectedRecord();
-            record.setValue(String.valueOf((long) values.get(1)));
+            record.setValue(String.valueOf(values.get(1)));
             record.setRefId((String) values.get(3));
             record.setName((String) values.get(2));
             records.add(record);

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/TopologyQuery.java
Patch:
@@ -255,7 +255,7 @@ private List<Call.CallDetail> buildServiceCalls(Query query,
         series.getValues().forEach(values -> {
             Call.CallDetail call = new Call.CallDetail();
             String entityId = String.valueOf(values.get(1));
-            int componentId = (int) values.get(2);
+            int componentId = ((Number) values.get(2)).intValue();
             call.buildFromServiceRelation(entityId, componentId, detectPoint);
             calls.add(call);
         });
@@ -285,7 +285,7 @@ private List<Call.CallDetail> buildInstanceCalls(Query query,
         series.getValues().forEach(values -> {
             Call.CallDetail call = new Call.CallDetail();
             String entityId = (String) values.get(1);
-            int componentId = (int) values.get(2);
+            int componentId = ((Number) values.get(2)).intValue();
             call.buildFromInstanceRelation(entityId, componentId, detectPoint);
             calls.add(call);
         });

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/TopNCondition.java
Patch:
@@ -43,7 +43,7 @@ public class TopNCondition {
      * Normal service is the service having installed agent or metrics reported directly. Unnormal service is
      * conjectural service, usually detected by the agent.
      */
-    private boolean isNormal;
+    private boolean normal;
     /**
      * Indicate the metrics entity scope. Because this is a top list, don't need to set the Entity like the
      * MetricsCondition. Only accept scope = {@link Scope#Service} {@link Scope#ServiceInstance} and {@link

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java
Patch:
@@ -18,12 +18,11 @@
 
 package org.apache.skywalking.oal.rt.parser;
 
-import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
 
-@Getter(AccessLevel.PUBLIC)
-@Setter(AccessLevel.PUBLIC)
+@Getter
+@Setter
 public class ConditionExpression {
     // original from script
     private String expressionType;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/DataColumn.java
Patch:
@@ -18,13 +18,12 @@
 
 package org.apache.skywalking.oal.rt.parser;
 
-import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oal.rt.util.ClassMethodUtil;
 
-@Getter(AccessLevel.PUBLIC)
-@Setter(AccessLevel.PUBLIC)
+@Getter
+@Setter
 public class DataColumn {
     private String fieldName;
     private String columnName;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/EntryMethod.java
Patch:
@@ -20,13 +20,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oal.rt.util.ClassMethodUtil;
 
-@Getter(AccessLevel.PUBLIC)
-@Setter(AccessLevel.PUBLIC)
+@Getter
+@Setter
 public class EntryMethod {
     static final int LITERAL_TYPE = 1;
     static final int IDENTIFIER_TYPE = 2;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/Expression.java
Patch:
@@ -18,12 +18,11 @@
 
 package org.apache.skywalking.oal.rt.parser;
 
-import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
 
-@Getter(AccessLevel.PUBLIC)
-@Setter(AccessLevel.PUBLIC)
+@Getter
+@Setter
 public class Expression {
     private String expressionObject;
     private String left;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/PersistenceField.java
Patch:
@@ -18,13 +18,12 @@
 
 package org.apache.skywalking.oal.rt.parser;
 
-import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oal.rt.util.ClassMethodUtil;
 
-@Getter(AccessLevel.PUBLIC)
-@Setter(AccessLevel.PUBLIC)
+@Getter
+@Setter
 public class PersistenceField {
     private String fieldName;
     private String setter;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumn.java
Patch:
@@ -19,13 +19,12 @@
 package org.apache.skywalking.oal.rt.parser;
 
 import java.util.Objects;
-import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oal.rt.util.ClassMethodUtil;
 
-@Getter(AccessLevel.PUBLIC)
-@Setter(AccessLevel.PUBLIC)
+@Getter
+@Setter
 public class SourceColumn {
     private String fieldName;
     private String columnName;

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.ArrayList;
 import java.util.Objects;
-import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Getter;
@@ -31,8 +30,8 @@
 @Builder
 @NoArgsConstructor
 @AllArgsConstructor
-@Setter(AccessLevel.PUBLIC)
-@Getter(AccessLevel.PUBLIC)
+@Setter
+@Getter
 @ToString
 public class AlarmRule {
     private String alarmRuleName;

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/Rules.java
Patch:
@@ -20,14 +20,13 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
 import lombok.ToString;
 import org.apache.skywalking.oap.server.core.alarm.provider.grpc.GRPCAlarmSetting;
 
-@Setter(AccessLevel.PUBLIC)
-@Getter(AccessLevel.PUBLIC)
+@Setter
+@Getter
 @ToString
 public class Rules {
     private List<AlarmRule> rules;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java
Patch:
@@ -18,15 +18,14 @@
 
 package org.apache.skywalking.oap.server.core.alarm;
 
-import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
 
 /**
  * Alarm message represents the details of each alarm.
  */
-@Setter(AccessLevel.PUBLIC)
-@Getter(AccessLevel.PUBLIC)
+@Setter
+@Getter
 public class AlarmMessage {
 
     public static AlarmMessage NONE = new NoAlarm();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DatabaseAccess.java
Patch:
@@ -24,8 +24,9 @@
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
 
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.DATABASE_ACCESS;
+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;
 
-@ScopeDeclaration(id = DATABASE_ACCESS, name = "DatabaseAccess")
+@ScopeDeclaration(id = DATABASE_ACCESS, name = "DatabaseAccess", catalog = SERVICE_CATALOG_NAME)
 @ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
 public class DatabaseAccess extends Source {
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/EndpointRelation.java
Patch:
@@ -24,8 +24,9 @@
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
 
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_RELATION;
+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_RELATION_CATALOG_NAME;
 
-@ScopeDeclaration(id = ENDPOINT_RELATION, name = "EndpointRelation")
+@ScopeDeclaration(id = ENDPOINT_RELATION, name = "EndpointRelation", catalog = ENDPOINT_RELATION_CATALOG_NAME)
 @ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
 public class EndpointRelation extends Source {
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java
Patch:
@@ -22,14 +22,13 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import lombok.AccessLevel;
 import lombok.Getter;
 
 /**
  * Define the default columns of source scope. These columns pass down into the persistent entity(OAL metrics entity)
  * automatically.
  */
-@Getter(AccessLevel.PUBLIC)
+@Getter
 public class ScopeDefaultColumn {
     private String fieldName;
     private String columnName;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceRelation.java
Patch:
@@ -25,8 +25,9 @@
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
 
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_RELATION;
+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_RELATION_CATALOG_NAME;
 
-@ScopeDeclaration(id = SERVICE_INSTANCE_RELATION, name = "ServiceInstanceRelation")
+@ScopeDeclaration(id = SERVICE_INSTANCE_RELATION, name = "ServiceInstanceRelation", catalog = SERVICE_INSTANCE_RELATION_CATALOG_NAME)
 @ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
 public class ServiceInstanceRelation extends Source {
     private String entityId;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceRelation.java
Patch:
@@ -25,8 +25,9 @@
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
 
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_RELATION;
+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_RELATION_CATALOG_NAME;
 
-@ScopeDeclaration(id = SERVICE_RELATION, name = "ServiceRelation")
+@ScopeDeclaration(id = SERVICE_RELATION, name = "ServiceRelation", catalog = SERVICE_RELATION_CATALOG_NAME)
 @ScopeDefaultColumn.VirtualColumnDefinition(fieldName = "entityId", columnName = "entity_id", isID = true, type = String.class)
 public class ServiceRelation extends Source {
     private String entityId;

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/GraphQLQueryConfig.java
Patch:
@@ -27,7 +27,7 @@
  * The config of {@code query.graphql}.
  */
 @Getter(AccessLevel.PACKAGE)
-@Setter(AccessLevel.PUBLIC)
+@Setter
 public class GraphQLQueryConfig extends ModuleConfig {
     private String path;
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java
Patch:
@@ -57,6 +57,6 @@ public Alarms getAlarm(final Duration duration, final Scope scope, final String
         }
 
         return getQueryService().getAlarm(
-            scopeId, keyword, paging, duration.getStartTimeBucket(), duration.getEndTimeBucket());
+            scopeId, keyword, paging, duration.getStartTimeBucketInSec(), duration.getEndTimeBucketInSec());
     }
 }

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverConfig.java
Patch:
@@ -23,9 +23,12 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
+import lombok.Getter;
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
 
 public class EnvoyMetricReceiverConfig extends ModuleConfig {
+    @Getter
+    private boolean acceptMetricsService = false;
     private String alsHTTPAnalysis;
 
     public List<String> getAlsHTTPAnalysis() {

File: oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/CLRModuleProvider.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.oal.rt.OALEngineLoaderService;
-import org.apache.skywalking.oap.server.core.oal.rt.OfficialOALDefine;
 import org.apache.skywalking.oap.server.core.server.GRPCHandlerRegister;
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
@@ -62,7 +61,7 @@ public void start() throws ServiceNotProvidedException, ModuleStartException {
         getManager().find(CoreModule.NAME)
                     .provider()
                     .getService(OALEngineLoaderService.class)
-                    .load(OfficialOALDefine.INSTANCE);
+                    .load(CLROALDefine.INSTANCE);
 
         GRPCHandlerRegister grpcHandlerRegister = getManager().find(SharingServerModule.NAME)
                                                               .provider()

File: oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/JVMModuleProvider.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.oal.rt.OALEngineLoaderService;
-import org.apache.skywalking.oap.server.core.oal.rt.OfficialOALDefine;
 import org.apache.skywalking.oap.server.core.server.GRPCHandlerRegister;
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
@@ -57,7 +56,7 @@ public void start() throws ModuleStartException {
         getManager().find(CoreModule.NAME)
                     .provider()
                     .getService(OALEngineLoaderService.class)
-                    .load(OfficialOALDefine.INSTANCE);
+                    .load(JVMOALDefine.INSTANCE);
 
         GRPCHandlerRegister grpcHandlerRegister = getManager().find(SharingServerModule.NAME)
                                                               .provider()

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.oal.rt.OALEngineLoaderService;
-import org.apache.skywalking.oap.server.core.oal.rt.OfficialOALDefine;
+import org.apache.skywalking.oap.server.core.oal.rt.CoreOALDefine;
 import org.apache.skywalking.oap.server.core.server.GRPCHandlerRegister;
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
@@ -62,7 +62,7 @@ public void start() throws ServiceNotProvidedException, ModuleStartException {
         getManager().find(CoreModule.NAME)
                     .provider()
                     .getService(OALEngineLoaderService.class)
-                    .load(OfficialOALDefine.INSTANCE);
+                    .load(CoreOALDefine.INSTANCE);
 
         TelemetryDataDispatcher.init(getManager());
         GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)

File: oap-server/server-receiver-plugin/skywalking-so11y-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/so11y/So11yReceiverModuleProvider.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
 import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
 import org.apache.skywalking.oap.server.core.oal.rt.OALEngineLoaderService;
-import org.apache.skywalking.oap.server.core.oal.rt.OfficialOALDefine;
+import org.apache.skywalking.oap.server.core.oal.rt.CoreOALDefine;
 import org.apache.skywalking.oap.server.core.source.GCPhrase;
 import org.apache.skywalking.oap.server.core.source.MemoryPoolType;
 import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMCPU;
@@ -117,7 +117,7 @@ public void start() throws ServiceNotProvidedException, ModuleStartException {
         getManager().find(CoreModule.NAME)
                     .provider()
                     .getService(OALEngineLoaderService.class)
-                    .load(OfficialOALDefine.INSTANCE);
+                    .load(CoreOALDefine.INSTANCE);
 
         sourceReceiver = getManager().find(CoreModule.NAME).provider().getService(SourceReceiver.class);
         MetricsCollector collector = getManager().find(TelemetryModule.NAME)

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.oap.server.configuration.api.DynamicConfigurationService;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.oal.rt.OALEngineLoaderService;
-import org.apache.skywalking.oap.server.core.oal.rt.OfficialOALDefine;
+import org.apache.skywalking.oap.server.core.oal.rt.CoreOALDefine;
 import org.apache.skywalking.oap.server.core.server.GRPCHandlerRegister;
 import org.apache.skywalking.oap.server.core.server.JettyHandlerRegister;
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
@@ -88,7 +88,7 @@ public void start() throws ModuleStartException {
         getManager().find(CoreModule.NAME)
                     .provider()
                     .getService(OALEngineLoaderService.class)
-                    .load(OfficialOALDefine.INSTANCE);
+                    .load(CoreOALDefine.INSTANCE);
 
         DynamicConfigurationService dynamicConfigurationService = getManager().find(ConfigurationModule.NAME)
                                                                               .provider()

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListener.java
Patch:
@@ -276,7 +276,6 @@ public void build() {
         });
 
         exitSourceBuilders.forEach(exitSourceBuilder -> {
-            sourceReceiver.receive(exitSourceBuilder.toService());
             sourceReceiver.receive(exitSourceBuilder.toServiceRelation());
 
             /*

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java
Patch:
@@ -169,6 +169,7 @@ private void flushDataToStorage(List<Metrics> metricsList,
                     nextExportWorker.ifPresent(exportEvenWorker -> exportEvenWorker.in(
                         new ExportEvent(metrics, ExportEvent.EventType.INCREMENT)));
                 } else {
+                    metrics.calculate();
                     prepareRequests.add(metricsDAO.prepareBatchInsert(model, metrics));
                     nextWorker(metrics);
                 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TopNRecordsQueryEsDAO.java
Patch:
@@ -50,8 +50,8 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
         SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();
         BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
         boolQueryBuilder.must().add(QueryBuilders.rangeQuery(TopN.TIME_BUCKET)
-                                                 .gte(duration.getStartTimeBucket())
-                                                 .lte(duration.getEndTimeBucket()));
+                                                 .gte(duration.getStartTimeBucketInSec())
+                                                 .lte(duration.getEndTimeBucketInSec()));
 
         if (StringUtil.isNotEmpty(condition.getParentService())) {
             final String serviceId = IDManager.ServiceID.buildId(condition.getParentService(), condition.isNormal());

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/TopNRecordsQuery.java
Patch:
@@ -68,8 +68,8 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
             .column(TopN.TRACE_ID)
             .from(client.getDatabase(), condition.getName())
             .where()
-            .and(gte(TopN.TIME_BUCKET, duration.getStartTimeBucket()))
-            .and(lte(TopN.TIME_BUCKET, duration.getEndTimeBucket()));
+            .and(gte(TopN.TIME_BUCKET, duration.getStartTimeBucketInSec()))
+            .and(lte(TopN.TIME_BUCKET, duration.getEndTimeBucketInSec()));
 
         if (StringUtil.isNotEmpty(condition.getParentService())) {
             final String serviceId = IDManager.ServiceID.buildId(condition.getParentService(), condition.isNormal());

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TopNRecordsQueryDAO.java
Patch:
@@ -55,9 +55,9 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
         }
 
         sql.append(" and ").append(TopN.TIME_BUCKET).append(" >= ?");
-        parameters.add(duration.getStartTimeBucket());
+        parameters.add(duration.getStartTimeBucketInSec());
         sql.append(" and ").append(TopN.TIME_BUCKET).append(" <= ?");
-        parameters.add(duration.getEndTimeBucket());
+        parameters.add(duration.getEndTimeBucketInSec());
 
         sql.append(" order by ").append(valueColumnName);
         if (condition.getOrder().equals(Order.DES)) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/TopNEntity.java
Patch:
@@ -38,6 +38,6 @@ public TopNEntity() {
     public TopNEntity(SelectedRecord record) {
         this.name = record.getName();
         this.id = record.getId();
-        this.value = Long.parseLong(record.getValue());
+        this.value = Double.valueOf(record.getValue()).longValue();
     }
 }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AggregationQueryDAO.java
Patch:
@@ -68,7 +68,7 @@ public List<SelectedRecord> sortMetrics(final TopNCondition metrics,
             });
         }
         sql.append(" group by ").append(Metrics.ENTITY_ID);
-        sql.append(") order by value ")
+        sql.append(")  as T order by value ")
            .append(metrics.getOrder().equals(Order.ASC) ? "asc" : "desc")
            .append(" limit ")
            .append(metrics.getTopN());

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java
Patch:
@@ -311,7 +311,7 @@ public AbstractSpan asyncFinish() {
             throw new RuntimeException("Span is not in async mode, please use '#prepareForAsync' to active.");
         }
         if (isAsyncStopped) {
-            throw new RuntimeException("Can not do async finish for the span repeately.");
+            throw new RuntimeException("Can not do async finish for the span repeatedly.");
         }
         this.endTime = System.currentTimeMillis();
         owner.asyncStop(this);

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/HttpClientRequestImplHandleResponseInterceptor.java
Patch:
@@ -18,7 +18,9 @@
 
 package org.apache.skywalking.apm.plugin.vertx3;
 
+import io.vertx.core.http.HttpClientResponse;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
+import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
@@ -31,10 +33,10 @@
 public class HttpClientRequestImplHandleResponseInterceptor implements InstanceMethodsAroundInterceptor {
 
     @Override
-    @SuppressWarnings("unchecked")
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         MethodInterceptResult result) throws Throwable {
         VertxContext context = (VertxContext) objInst.getSkyWalkingDynamicField();
+        Tags.STATUS_CODE.set(context.getSpan(), Integer.toString(((HttpClientResponse) allArguments[0]).statusCode()));
         context.getSpan().asyncFinish();
 
         AbstractSpan span = ContextManager.createLocalSpan("#" + context.getSpan().getOperationName());

File: test/plugin/scenarios/vertx-eventbus-3.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/vertxeventbus/controller/VertxEventbusController.java
Patch:
@@ -30,7 +30,7 @@ public class VertxEventbusController extends AbstractVerticle {
     @Override
     public void start() {
         Router router = Router.router(vertx);
-        router.get("/vertx-eventbus-3-scenario/case/eventbus-case").handler(this::handleCoreCase);
+        router.get("/vertx-eventbus-3-scenario/case/eventbus-case").handler(this::handleEventbusCase);
         router.get("/vertx-eventbus-3-scenario/case/executeTest").handler(this::executeTest);
         router.head("/vertx-eventbus-3-scenario/case/healthCheck").handler(this::healthCheck);
         vertx.createHttpServer().requestHandler(router::accept).listen(8080);
@@ -39,7 +39,7 @@ public void start() {
         vertx.deployVerticle(LocalReceiver.class.getName());
     }
 
-    private void handleCoreCase(RoutingContext routingContext) {
+    private void handleEventbusCase(RoutingContext routingContext) {
         vertx.createHttpClient().getNow(8080, "localhost",
                 "/vertx-eventbus-3-scenario/case/executeTest",
                 it -> routingContext.response().setStatusCode(it.statusCode()).end());

File: test/plugin/scenarios/vertx-web-3.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/vertxweb/controller/VertxWebController.java
Patch:
@@ -32,7 +32,7 @@ public void start() {
     }
 
     private void handleCoreCase(RoutingContext routingContext) {
-        vertx.createHttpClient().getNow(8080, "localhost",
+        vertx.createHttpClient().headNow(8080, "localhost",
                 "/vertx-web-3-scenario/case/healthCheck",
                 it -> routingContext.response().setStatusCode(it.statusCode()).end());
     }

File: apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/ActiveSpan.java
Patch:
@@ -43,4 +43,7 @@ public static void debug(String debugMsg) {
 
     public static void info(String infoMsg) {
     }
+
+    public static void setOperationName(String operationName) {
+    }
 }

File: test/plugin/scenarios/apm-toolkit-trace-scenario/src/main/java/org/apache/skywalking/apm/toolkit/trace/ActiveSpan.java
Patch:
@@ -43,4 +43,7 @@ public static void debug(String debugMsg) {
 
     public static void info(String infoMsg) {
     }
+
+    public static void setOperationName(String operationName) {
+    }
 }

File: test/plugin/scenarios/apm-toolkit-trace-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/toolkit/controller/TestController.java
Patch:
@@ -46,6 +46,7 @@ public class TestController {
 
     @RequestMapping("/tool-kit")
     public String toolKitCase() {
+        testService.testSetOperationName("tool-kit-set-operation-name");
         testService.testTag();
         testService.testInfo("testInfoParam");
         testService.testDebug();

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/AnalysisResult.java
Patch:
@@ -139,7 +139,7 @@ public void generateSerializeFields() {
             } else if (columnType.equals(long.class)) {
                 serializeFields.addLongField(column.getFieldName());
             } else if (StorageDataComplexObject.class.isAssignableFrom(columnType)) {
-                serializeFields.addObjectField(column.getFieldName());
+                serializeFields.addObjectField(column.getFieldName(), columnType.getName());
             } else {
                 throw new IllegalStateException(
                     "Unexpected field type [" + columnType.getSimpleName() + "] of persistence column [" + column

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/PersistenceField.java
Patch:
@@ -29,10 +29,12 @@ public class PersistenceField {
     private String fieldName;
     private String setter;
     private String getter;
+    private String fieldType;
 
-    public PersistenceField(String fieldName) {
+    public PersistenceField(String fieldName, String fieldType) {
         this.fieldName = fieldName;
         this.setter = ClassMethodUtil.toSetMethod(fieldName);
         this.getter = ClassMethodUtil.toGetMethod(fieldName);
+        this.fieldType = fieldType;
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ColumnTypeEsMapping.java
Patch:
@@ -20,8 +20,8 @@
 
 import com.google.gson.JsonObject;
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
-import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;
 import org.apache.skywalking.oap.server.core.storage.model.DataTypeMapping;
+import org.apache.skywalking.oap.server.core.storage.type.StorageDataComplexObject;
 
 public class ColumnTypeEsMapping implements DataTypeMapping {
 
@@ -35,7 +35,7 @@ public String transform(Class<?> type) {
             return "double";
         } else if (String.class.equals(type)) {
             return "keyword";
-        } else if (DataTable.class.equals(type)) {
+        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {
             return "text";
         } else if (byte[].class.equals(type)) {
             return "binary";

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TableInstaller.java
Patch:
@@ -23,12 +23,12 @@
 import java.sql.SQLException;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
-import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
 import org.apache.skywalking.oap.server.core.storage.model.ColumnName;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.core.storage.model.ModelColumn;
 import org.apache.skywalking.oap.server.core.storage.model.ModelInstaller;
+import org.apache.skywalking.oap.server.core.storage.type.StorageDataComplexObject;
 import org.apache.skywalking.oap.server.library.client.Client;
 import org.apache.skywalking.oap.server.library.client.jdbc.JDBCClientException;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
@@ -98,7 +98,7 @@ protected String getColumnType(ModelColumn column) {
             return "DOUBLE";
         } else if (String.class.equals(type)) {
             return "VARCHAR(" + column.getLength() + ")";
-        } else if (DataTable.class.equals(type)) {
+        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {
             return "VARCHAR(20000)";
         } else if (byte[].class.equals(type)) {
             return "MEDIUMTEXT";

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLTableInstaller.java
Patch:
@@ -22,11 +22,11 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
 import org.apache.skywalking.oap.server.core.storage.model.ExtraQueryIndex;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.core.storage.model.ModelColumn;
+import org.apache.skywalking.oap.server.core.storage.type.StorageDataComplexObject;
 import org.apache.skywalking.oap.server.library.client.Client;
 import org.apache.skywalking.oap.server.library.client.jdbc.JDBCClientException;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
@@ -105,7 +105,7 @@ protected void createTableIndexes(JDBCHikariCPClient client,
 
     @Override
     protected String getColumnType(final ModelColumn column) {
-        if (DataTable.class.equals(column.getType())) {
+        if (StorageDataComplexObject.class.isAssignableFrom(column.getType())) {
             return "MEDIUMTEXT";
         }
         return super.getColumnType(column);

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AggregationQuery.java
Patch:
@@ -78,6 +78,7 @@ public List<TopNEntity> getServiceInstanceTopN(final String serviceId, final Str
         condition.setScope(Scope.ServiceInstance);
         final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(serviceId);
         condition.setParentService(serviceIDDefinition.getName());
+        condition.setNormal(true);
         condition.setOrder(order);
         condition.setTopN(topN);
         List<TopNEntity> list = new ArrayList<>();
@@ -110,6 +111,7 @@ public List<TopNEntity> getEndpointTopN(final String serviceId, final String nam
         condition.setScope(Scope.Endpoint);
         final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(serviceId);
         condition.setParentService(serviceIDDefinition.getName());
+        condition.setNormal(true);
         condition.setOrder(order);
         condition.setTopN(topN);
         List<TopNEntity> list = new ArrayList<>();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/InstanceMethodsAroundInterceptor.java
Patch:
@@ -36,7 +36,7 @@ void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments
     /**
      * called after target method invocation. Even method's invocation triggers an exception.
      *
-     * @param ret the method's original return value.
+     * @param ret the method's original return value. May be null if the method triggers an exception.
      * @return the method's actual return value.
      */
     Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/HistogramMetrics.java
Patch:
@@ -41,7 +41,7 @@ public abstract class HistogramMetrics extends Metrics {
 
     @Getter
     @Setter
-    @Column(columnName = DATASET, dataType = Column.ValueDataType.HISTOGRAM, storageOnly = true)
+    @Column(columnName = DATASET, dataType = Column.ValueDataType.HISTOGRAM, storageOnly = true, defaultValue = 0)
     private DataTable dataset = new DataTable(30);
 
     /**

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextSnapshot.java
Patch:
@@ -50,7 +50,7 @@ public class ContextSnapshot {
     }
 
     public boolean isFromCurrent() {
-        return traceSegmentId.equals(ContextManager.capture().getTraceSegmentId());
+        return traceSegmentId != null && traceSegmentId.equals(ContextManager.capture().getTraceSegmentId());
     }
 
     public CorrelationContext getCorrelationContext() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import org.apache.skywalking.oap.server.core.analysis.meter.MeterSystem;
 import org.apache.skywalking.oap.server.core.cache.NetworkAddressAliasCache;
 import org.apache.skywalking.oap.server.core.cache.ProfileTaskCache;
 import org.apache.skywalking.oap.server.core.command.CommandService;
@@ -71,6 +72,8 @@ public Class[] services() {
         classes.add(IWorkerInstanceGetter.class);
         classes.add(IWorkerInstanceSetter.class);
 
+        classes.add(MeterSystem.class);
+
         addServerInterface(classes);
         addReceiverInterface(classes);
         addInsideService(classes);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetrics.java
Patch:
@@ -37,11 +37,11 @@ public abstract class LongAvgMetrics extends Metrics implements LongValueHolder
     @Getter
     @Setter
     @Column(columnName = SUMMATION, storageOnly = true)
-    private long summation;
+    protected long summation;
     @Getter
     @Setter
     @Column(columnName = COUNT, storageOnly = true)
-    private long count;
+    protected long count;
     @Getter
     @Setter
     @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Avg)

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java
Patch:
@@ -26,6 +26,6 @@ public class CoreModuleTest {
     public void testOpenServiceList() {
         CoreModule coreModule = new CoreModule();
 
-        Assert.assertEquals(28, coreModule.services().length);
+        Assert.assertEquals(29, coreModule.services().length);
     }
 }

File: test/plugin/runner-helper/src/main/java/org/apache/skywalking/plugin/test/helper/IConfiguration.java
Patch:
@@ -56,6 +56,8 @@ public interface IConfiguration {
 
     String jacocoHome();
 
+    String debugMode();
+
     Map<String, Object> toMap();
 
     String extendEntryHeader();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java
Patch:
@@ -80,7 +80,7 @@ private Tags() {
     public static final class HTTP {
         public static final StringTag METHOD = new StringTag(10, "http.method");
 
-        public static final StringTag PARAMS = new StringTag(11, "http.params");
+        public static final StringTag PARAMS = new StringTag(11, "http.params", true);
     }
 
     /**

File: test/e2e/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/Service0Application.java
Patch:
@@ -20,10 +20,12 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.ComponentScan;
 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 
 @EnableJpaRepositories
 @SpringBootApplication
+@ComponentScan({"org.apache.skywalking", "test.apache.skywalking"})
 public class Service0Application {
     public static void main(String[] args) {
         SpringApplication.run(Service0Application.class, args);

File: test/e2e/e2e-service-provider/src/main/java/test/apache/skywalking/e2e/profile/CreateUser.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.e2e.profile;
+package test.apache.skywalking.e2e.profile;
 
 import lombok.Data;
 import org.apache.skywalking.e2e.User;

File: test/e2e/e2e-service-provider/src/main/java/test/apache/skywalking/e2e/profile/ProfileController.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.e2e.profile;
+package test.apache.skywalking.e2e.profile;
 
 import java.util.concurrent.TimeUnit;
 import lombok.RequiredArgsConstructor;
@@ -31,7 +31,7 @@
 public class ProfileController {
     private final UserRepo userRepo;
 
-    @PostMapping("/profile/users")
+    @PostMapping("/profile/{name}")
     public User createAuthor(@RequestBody final CreateUser createUser) throws InterruptedException {
         final User user = userRepo.save(createUser.toUser());
         if (createUser.isEnableProfiling()) {

File: test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/profile/ProfileE2E.java
Patch:
@@ -141,7 +141,7 @@ void services() throws Exception {
     void createProfileTask() throws Exception {
         final ProfileTaskCreationRequest creationRequest = ProfileTaskCreationRequest.builder()
                                                                                      .serviceId("ZTJlLXByb2ZpbGUtc2VydmljZQ==.1")
-                                                                                     .endpointName("/profile/users")
+                                                                                     .endpointName("/profile/{name}")
                                                                                      .duration(1)
                                                                                      .startTime(-1)
                                                                                      .minDurationThreshold(1500)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.skywalking.oap.server.core.query.AlarmQueryService;
 import org.apache.skywalking.oap.server.core.query.LogQueryService;
 import org.apache.skywalking.oap.server.core.query.MetadataQueryService;
+import org.apache.skywalking.oap.server.core.query.MetricsMetadataQueryService;
 import org.apache.skywalking.oap.server.core.query.MetricsQueryService;
 import org.apache.skywalking.oap.server.core.query.ProfileTaskQueryService;
 import org.apache.skywalking.oap.server.core.query.TopNRecordsQueryService;
@@ -90,6 +91,7 @@ private void addProfileService(List<Class> classes) {
 
     private void addQueryService(List<Class> classes) {
         classes.add(TopologyQueryService.class);
+        classes.add(MetricsMetadataQueryService.class);
         classes.add(MetricsQueryService.class);
         classes.add(TraceQueryService.class);
         classes.add(LogQueryService.class);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.skywalking.oap.server.core.query.AlarmQueryService;
 import org.apache.skywalking.oap.server.core.query.LogQueryService;
 import org.apache.skywalking.oap.server.core.query.MetadataQueryService;
+import org.apache.skywalking.oap.server.core.query.MetricsMetadataQueryService;
 import org.apache.skywalking.oap.server.core.query.MetricsQueryService;
 import org.apache.skywalking.oap.server.core.query.ProfileTaskQueryService;
 import org.apache.skywalking.oap.server.core.query.TopNRecordsQueryService;
@@ -213,6 +214,7 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
             NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));
 
         this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));
+        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());
         this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));
         this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));
         this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetrics.java
Patch:
@@ -60,7 +60,7 @@ public abstract class ApdexMetrics extends Metrics implements IntValueHolder {
     private int tNum;
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true, function = Function.Avg)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Avg)
     private int value;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CPMMetrics.java
Patch:
@@ -34,7 +34,7 @@ public abstract class CPMMetrics extends Metrics implements LongValueHolder {
 
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true, function = Function.Avg)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Avg)
     private long value;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CountMetrics.java
Patch:
@@ -33,7 +33,7 @@ public abstract class CountMetrics extends Metrics implements LongValueHolder {
 
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true, function = Function.Sum)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Sum)
     private long value;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleAvgMetrics.java
Patch:
@@ -44,7 +44,7 @@ public abstract class DoubleAvgMetrics extends Metrics implements DoubleValueHol
     private long count;
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true, function = Function.Avg)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Avg)
     private double value;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetrics.java
Patch:
@@ -44,7 +44,7 @@ public abstract class LongAvgMetrics extends Metrics implements LongValueHolder
     private long count;
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true, function = Function.Avg)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Avg)
     private long value;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxDoubleMetrics.java
Patch:
@@ -32,7 +32,7 @@ public abstract class MaxDoubleMetrics extends Metrics implements DoubleValueHol
 
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)
     private double value;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxLongMetrics.java
Patch:
@@ -35,7 +35,7 @@ public abstract class MaxLongMetrics extends Metrics implements LongValueHolder
 
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)
     private long value;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinDoubleMetrics.java
Patch:
@@ -32,7 +32,7 @@ public abstract class MinDoubleMetrics extends Metrics implements DoubleValueHol
 
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)
     private double value = Double.MAX_VALUE;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinLongMetrics.java
Patch:
@@ -32,7 +32,7 @@ public abstract class MinLongMetrics extends Metrics implements LongValueHolder
 
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)
     private long value = Long.MAX_VALUE;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentMetrics.java
Patch:
@@ -38,7 +38,7 @@ public abstract class PercentMetrics extends Metrics implements IntValueHolder {
     private long total;
     @Getter
     @Setter
-    @Column(columnName = PERCENTAGE, isValue = true, function = Function.Avg)
+    @Column(columnName = PERCENTAGE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Avg)
     private int percentage;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PxxMetrics.java
Patch:
@@ -43,7 +43,7 @@ public abstract class PxxMetrics extends Metrics implements IntValueHolder {
 
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true, function = Function.Avg)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.HISTOGRAM, function = Function.Avg)
     private int value;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/SumMetrics.java
Patch:
@@ -33,7 +33,7 @@ public abstract class SumMetrics extends Metrics implements LongValueHolder {
 
     @Getter
     @Setter
-    @Column(columnName = VALUE, isValue = true, function = Function.Sum)
+    @Column(columnName = VALUE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Sum)
     private long value;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java
Patch:
@@ -39,7 +39,7 @@ public abstract class TopN extends Record implements ComparableStorageData {
     private String statement;
     @Getter
     @Setter
-    @Column(columnName = LATENCY)
+    @Column(columnName = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)
     private long latency;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TopNRecordsQueryService.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.oap.server.core.query.input.TopNCondition;
 import org.apache.skywalking.oap.server.core.query.type.SelectedRecord;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
+import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;
 import org.apache.skywalking.oap.server.core.storage.query.ITopNRecordsQueryDAO;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.module.Service;
@@ -46,6 +47,7 @@ private ITopNRecordsQueryDAO getTopNRecordsQueryDAO() {
     }
 
     public List<SelectedRecord> readSampledRecords(TopNCondition condition, Duration duration) throws IOException {
-        return getTopNRecordsQueryDAO().readSampledRecords(condition, duration);
+        return getTopNRecordsQueryDAO().readSampledRecords(
+            condition, ValueColumnMetadata.INSTANCE.getValueCName(condition.getName()), duration);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java
Patch:
@@ -76,13 +76,13 @@ private void retrieval(Class<?> clazz,
                 modelColumns.add(
                     new ModelColumn(
                         new ColumnName(modelName, column.columnName()), field.getType(), column.matchQuery(), column
-                        .storageOnly(), column.isValue(), column.length()));
+                        .storageOnly(), column.dataType().isValue(), column.length()));
                 if (log.isDebugEnabled()) {
                     log.debug("The field named {} with the {} type", column.columnName(), field.getType());
                 }
-                if (column.isValue()) {
+                if (column.dataType().isValue()) {
                     ValueColumnMetadata.INSTANCE.putIfAbsent(
-                        modelName, column.columnName(), column.function(), column.defaultValue());
+                        modelName, column.columnName(), column.dataType(), column.function(), column.defaultValue());
                 }
 
                 List<QueryUnifiedIndex> indexDefinitions = new ArrayList<>();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITopNRecordsQueryDAO.java
Patch:
@@ -33,5 +33,7 @@
  * @since 8.0.0
  */
 public interface ITopNRecordsQueryDAO extends Service {
-    List<SelectedRecord> readSampledRecords(TopNCondition condition, Duration duration) throws IOException;
+    List<SelectedRecord> readSampledRecords(TopNCondition condition,
+                                            final String valueColumnName,
+                                            Duration duration) throws IOException;
 }

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java
Patch:
@@ -26,6 +26,6 @@ public class CoreModuleTest {
     public void testOpenServiceList() {
         CoreModule coreModule = new CoreModule();
 
-        Assert.assertEquals(27, coreModule.services().length);
+        Assert.assertEquals(28, coreModule.services().length);
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TopNRecordsQueryEsDAO.java
Patch:
@@ -45,6 +45,7 @@ public TopNRecordsQueryEsDAO(ElasticSearchClient client) {
 
     @Override
     public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
+                                                   final String valueColumnName,
                                                    final Duration duration) throws IOException {
         SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();
         BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
@@ -59,7 +60,7 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
 
         sourceBuilder.query(boolQueryBuilder);
         sourceBuilder.size(condition.getTopN())
-                     .sort(TopN.LATENCY, condition.getOrder().equals(Order.DES) ? SortOrder.DESC : SortOrder.ASC);
+                     .sort(valueColumnName, condition.getOrder().equals(Order.DES) ? SortOrder.DESC : SortOrder.ASC);
         SearchResponse response = getClient().search(condition.getName(), sourceBuilder);
 
         List<SelectedRecord> results = new ArrayList<>(condition.getTopN());
@@ -68,7 +69,7 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
             SelectedRecord record = new SelectedRecord();
             record.setName((String) searchHit.getSourceAsMap().get(TopN.STATEMENT));
             record.setRefId((String) searchHit.getSourceAsMap().get(TopN.TRACE_ID));
-            record.setValue(((Number) searchHit.getSourceAsMap().get(TopN.LATENCY)).toString());
+            record.setValue(((Number) searchHit.getSourceAsMap().get(valueColumnName)).toString());
             results.add(record);
         }
 

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/TopNRecordsQuery.java
Patch:
@@ -52,6 +52,7 @@ public TopNRecordsQuery(InfluxClient client) {
 
     @Override
     public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
+                                                   final String valueColumnName,
                                                    final Duration duration) throws IOException {
         String function = InfluxConstants.SORT_ASC;
         // Have to re-sort here. Because the function, top()/bottom(), get the result ordered by the `time`.
@@ -62,7 +63,7 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
         }
 
         WhereQueryImpl query = select()
-            .function(function, TopN.LATENCY, condition.getTopN())
+            .function(function, valueColumnName, condition.getTopN())
             .column(TopN.STATEMENT)
             .column(TopN.TRACE_ID)
             .from(client.getDatabase(), condition.getName())

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TopNRecordsQueryDAO.java
Patch:
@@ -43,6 +43,7 @@ public H2TopNRecordsQueryDAO(JDBCHikariCPClient h2Client) {
 
     @Override
     public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
+                                                   final String valueColumnName,
                                                    final Duration duration) throws IOException {
         StringBuilder sql = new StringBuilder("select * from " + condition.getName() + " where ");
         List<Object> parameters = new ArrayList<>(10);
@@ -58,7 +59,7 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
         sql.append(" and ").append(TopN.TIME_BUCKET).append(" <= ?");
         parameters.add(duration.getEndTimeBucket());
 
-        sql.append(" order by ").append(TopN.LATENCY);
+        sql.append(" order by ").append(valueColumnName);
         if (condition.getOrder().equals(Order.DES)) {
             sql.append(" desc ");
         } else {
@@ -74,7 +75,7 @@ public List<SelectedRecord> readSampledRecords(final TopNCondition condition,
                     SelectedRecord record = new SelectedRecord();
                     record.setName(resultSet.getString(TopN.STATEMENT));
                     record.setRefId(resultSet.getString(TopN.TRACE_ID));
-                    record.setValue(resultSet.getString(TopN.LATENCY));
+                    record.setValue(resultSet.getString(valueColumnName));
                     results.add(record);
                 }
             }

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.skywalking.oap.server.core.query.AlarmQueryService;
 import org.apache.skywalking.oap.server.core.query.LogQueryService;
 import org.apache.skywalking.oap.server.core.query.MetadataQueryService;
+import org.apache.skywalking.oap.server.core.query.MetricsMetadataQueryService;
 import org.apache.skywalking.oap.server.core.query.MetricsQueryService;
 import org.apache.skywalking.oap.server.core.query.ProfileTaskQueryService;
 import org.apache.skywalking.oap.server.core.query.TopNRecordsQueryService;
@@ -132,6 +133,7 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
             NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));
 
         this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));
+        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());
         this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));
         this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));
         this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/AnalysisResult.java
Patch:
@@ -140,8 +140,8 @@ public void generateSerializeFields() {
                 case "long":
                     serializeFields.addLongField(column.getFieldName());
                     break;
-                case "IntKeyLongValueHashMap":
-                    serializeFields.addIntKeyLongValueHashMapField(column.getFieldName());
+                case "DataTable":
+                    serializeFields.addDataTableField(column.getFieldName());
                     break;
                 default:
                     throw new IllegalStateException("Unexpected field type [" + type + "] of persistence column [" + column

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPChookCallbackTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;
 import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;
 import org.apache.skywalking.oap.server.core.alarm.provider.Rules;
-import org.apache.skywalking.oap.server.core.query.entity.Scope;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
 import org.junit.Before;
 import org.junit.Test;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.skywalking.oap.server.core.query.AlarmQueryService;
 import org.apache.skywalking.oap.server.core.query.LogQueryService;
 import org.apache.skywalking.oap.server.core.query.MetadataQueryService;
-import org.apache.skywalking.oap.server.core.query.MetricQueryService;
+import org.apache.skywalking.oap.server.core.query.MetricsQueryService;
 import org.apache.skywalking.oap.server.core.query.ProfileTaskQueryService;
 import org.apache.skywalking.oap.server.core.query.TopNRecordsQueryService;
 import org.apache.skywalking.oap.server.core.query.TopologyQueryService;
@@ -90,7 +90,7 @@ private void addProfileService(List<Class> classes) {
 
     private void addQueryService(List<Class> classes) {
         classes.add(TopologyQueryService.class);
-        classes.add(MetricQueryService.class);
+        classes.add(MetricsQueryService.class);
         classes.add(TraceQueryService.class);
         classes.add(LogQueryService.class);
         classes.add(MetadataQueryService.class);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -48,7 +48,7 @@
 import org.apache.skywalking.oap.server.core.query.AlarmQueryService;
 import org.apache.skywalking.oap.server.core.query.LogQueryService;
 import org.apache.skywalking.oap.server.core.query.MetadataQueryService;
-import org.apache.skywalking.oap.server.core.query.MetricQueryService;
+import org.apache.skywalking.oap.server.core.query.MetricsQueryService;
 import org.apache.skywalking.oap.server.core.query.ProfileTaskQueryService;
 import org.apache.skywalking.oap.server.core.query.TopNRecordsQueryService;
 import org.apache.skywalking.oap.server.core.query.TopologyQueryService;
@@ -213,7 +213,7 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
             NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));
 
         this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));
-        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));
+        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));
         this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));
         this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));
         this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/AbstractLogRecord.java
Patch:
@@ -24,7 +24,7 @@
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.UnexpectedException;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
-import org.apache.skywalking.oap.server.core.query.entity.ContentType;
+import org.apache.skywalking.oap.server.core.query.type.ContentType;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/CacheUpdateTimer.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
 import org.apache.skywalking.oap.server.core.analysis.manual.networkalias.NetworkAddressAlias;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTask;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.cache.INetworkAddressAliasDAO;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ProfileTaskCache.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.skywalking.oap.server.core.CoreModuleConfig;
 import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTask;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/command/CommandService.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.UUID;
 import org.apache.skywalking.apm.network.trace.component.command.ProfileTaskCommand;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTask;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.module.Service;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/ProfileTaskMutationService.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.skywalking.oap.server.core.analysis.DownSampling;
 import org.apache.skywalking.oap.server.core.analysis.TimeBucket;
 import org.apache.skywalking.oap.server.core.analysis.worker.NoneStreamingProcessor;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskCreationResult;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskCreationResult;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTask;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/analyze/ProfileAnalyzeCollector.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.stream.Collector;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileStackTree;
+import org.apache.skywalking.oap.server.core.query.type.ProfileStackTree;
 
 /**
  * Work for {@link ProfileAnalyzer} to analyze.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/analyze/ProfileAnalyzer.java
Patch:
@@ -28,9 +28,9 @@
 import java.util.Objects;
 import java.util.stream.Collectors;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileAnalyzation;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileAnalyzeTimeRange;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileStackTree;
+import org.apache.skywalking.oap.server.core.query.type.ProfileAnalyzation;
+import org.apache.skywalking.oap.server.core.query.type.ProfileAnalyzeTimeRange;
+import org.apache.skywalking.oap.server.core.query.type.ProfileStackTree;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/analyze/ProfileStackNode.java
Patch:
@@ -25,8 +25,8 @@
 import java.util.List;
 import java.util.ListIterator;
 import java.util.function.Consumer;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileStackElement;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileStackTree;
+import org.apache.skywalking.oap.server.core.query.type.ProfileStackElement;
+import org.apache.skywalking.oap.server.core.query.type.ProfileStackTree;
 
 /**
  * Work for profiling stacks, intermediate state of the {@link ProfileStackElement} and {@link ProfileStack}

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/AlarmQueryService.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.query;
 
 import java.io.IOException;
-import org.apache.skywalking.oap.server.core.query.entity.Alarms;
-import org.apache.skywalking.oap.server.core.query.entity.Pagination;
+import org.apache.skywalking.oap.server.core.query.type.Alarms;
+import org.apache.skywalking.oap.server.core.query.type.Pagination;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/LogQueryService.java
Patch:
@@ -21,9 +21,9 @@
 import java.io.IOException;
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;
-import org.apache.skywalking.oap.server.core.query.entity.LogState;
-import org.apache.skywalking.oap.server.core.query.entity.Logs;
-import org.apache.skywalking.oap.server.core.query.entity.Pagination;
+import org.apache.skywalking.oap.server.core.query.type.LogState;
+import org.apache.skywalking.oap.server.core.query.type.Logs;
+import org.apache.skywalking.oap.server.core.query.type.Pagination;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.query.ILogQueryDAO;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/PaginationUtils.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.query;
 
-import org.apache.skywalking.oap.server.core.query.entity.Pagination;
+import org.apache.skywalking.oap.server.core.query.type.Pagination;
 
 public enum PaginationUtils {
     INSTANCE;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/ServiceInstanceTopologyBuilder.java
Patch:
@@ -27,9 +27,9 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.analysis.IDManager;
 import org.apache.skywalking.oap.server.core.config.IComponentLibraryCatalogService;
-import org.apache.skywalking.oap.server.core.query.entity.Call;
-import org.apache.skywalking.oap.server.core.query.entity.ServiceInstanceNode;
-import org.apache.skywalking.oap.server.core.query.entity.ServiceInstanceTopology;
+import org.apache.skywalking.oap.server.core.query.type.Call;
+import org.apache.skywalking.oap.server.core.query.type.ServiceInstanceNode;
+import org.apache.skywalking.oap.server.core.query.type.ServiceInstanceTopology;
 import org.apache.skywalking.oap.server.core.source.DetectPoint;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/ServiceTopologyBuilder.java
Patch:
@@ -31,9 +31,9 @@
 import org.apache.skywalking.oap.server.core.analysis.manual.networkalias.NetworkAddressAlias;
 import org.apache.skywalking.oap.server.core.cache.NetworkAddressAliasCache;
 import org.apache.skywalking.oap.server.core.config.IComponentLibraryCatalogService;
-import org.apache.skywalking.oap.server.core.query.entity.Call;
-import org.apache.skywalking.oap.server.core.query.entity.Node;
-import org.apache.skywalking.oap.server.core.query.entity.Topology;
+import org.apache.skywalking.oap.server.core.query.type.Call;
+import org.apache.skywalking.oap.server.core.query.type.Node;
+import org.apache.skywalking.oap.server.core.query.type.Topology;
 import org.apache.skywalking.oap.server.core.source.DetectPoint;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/enumeration/Order.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.enumeration;
 
 public enum Order {
     ASC, DES

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/enumeration/Step.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.enumeration;
 
 public enum Step {
     DAY, HOUR, MINUTE, SECOND

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/LogQueryCondition.java
Patch:
@@ -16,12 +16,12 @@
  *
  */
 
-package org.apache.skywalking.oap.query.graphql.type;
+package org.apache.skywalking.oap.server.core.query.input;
 
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.skywalking.oap.server.core.query.entity.LogState;
-import org.apache.skywalking.oap.server.core.query.entity.Pagination;
+import org.apache.skywalking.oap.server.core.query.type.LogState;
+import org.apache.skywalking.oap.server.core.query.type.Pagination;
 
 @Getter
 @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/MetricCondition.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.query.graphql.type;
+package org.apache.skywalking.oap.server.core.query.input;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/ProfileTaskCreationRequest.java
Patch:
@@ -16,11 +16,11 @@
  *
  */
 
-package org.apache.skywalking.oap.query.graphql.type;
+package org.apache.skywalking.oap.server.core.query.input;
 
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.skywalking.oap.server.core.query.entity.Step;
+import org.apache.skywalking.oap.server.core.query.enumeration.Step;
 
 /**
  * Profile task create need data

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmMessage.java
Patch:
@@ -16,10 +16,11 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
 
 @Getter
 @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmTrend.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Alarms.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Attribute.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/BasicTrace.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Call.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ContentType.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import org.apache.skywalking.oap.server.core.UnexpectedException;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Database.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Endpoint.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/EndpointInfo.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/KVInt.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/KeyValue.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Log.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/LogEntity.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/LogState.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 public enum LogState {
     ALL, SUCCESS, ERROR

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Logs.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Node.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Pagination.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfileAnalyzation.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfileAnalyzeTimeRange.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfileStackElement.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfileStackTree.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfileTask.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.List;
 import lombok.AllArgsConstructor;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfileTaskCreationResult.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfileTaskLog.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfileTaskLogOperationType.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.HashMap;
 import java.util.Map;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfiledSegment.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ProfiledSpan.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/QueryOrder.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 public enum QueryOrder {
     BY_START_TIME, BY_DURATION

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Ref.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/RefType.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 public enum RefType {
     CROSS_PROCESS, CROSS_THREAD

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Service.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ServiceInstance.java
Patch:
@@ -16,12 +16,13 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;
 import lombok.Getter;
 import lombok.Setter;
+import org.apache.skywalking.oap.server.core.query.enumeration.Language;
 
 @Getter
 public class ServiceInstance {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ServiceInstanceNode.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import lombok.Getter;
 import lombok.Setter;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/ServiceInstanceTopology.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Span.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Topology.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/Trace.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/TraceBrief.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/TraceState.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.query.entity;
+package org.apache.skywalking.oap.server.core.query.type;
 
 public enum TraceState {
     ALL, SUCCESS, ERROR,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/AbstractLog.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.skywalking.oap.server.core.UnexpectedException;
-import org.apache.skywalking.oap.server.core.query.entity.ContentType;
+import org.apache.skywalking.oap.server.core.query.type.ContentType;
 
 @Setter
 @Getter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumn.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.google.gson.JsonObject;
 import lombok.Getter;
-import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueHashMap;
+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;
 
 @Getter
 public class ModelColumn {
@@ -51,7 +51,7 @@ public ModelColumn(ColumnName columnName,
         /*
          * byte[] and {@link IntKeyLongValueHashMap} could never be query.
          */
-        if (type.equals(byte[].class) || type.equals(IntKeyLongValueHashMap.class)) {
+        if (type.equals(byte[].class) || type.equals(DataTable.class)) {
             this.storageOnly = true;
         } else {
             if (storageOnly && isValue) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java
Patch:
@@ -81,7 +81,8 @@ private void retrieval(Class<?> clazz,
                     log.debug("The field named {} with the {} type", column.columnName(), field.getType());
                 }
                 if (column.isValue()) {
-                    ValueColumnMetadata.INSTANCE.putIfAbsent(modelName, column.columnName(), column.function());
+                    ValueColumnMetadata.INSTANCE.putIfAbsent(
+                        modelName, column.columnName(), column.function(), column.defaultValue());
                 }
 
                 List<QueryUnifiedIndex> indexDefinitions = new ArrayList<>();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/profile/IProfileTaskLogQueryDAO.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.io.IOException;
 import java.util.List;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskLog;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskLog;
 import org.apache.skywalking.oap.server.core.storage.DAO;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/profile/IProfileTaskQueryDAO.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.io.IOException;
 import java.util.List;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTask;
 import org.apache.skywalking.oap.server.core.storage.DAO;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/profile/IProfileThreadSnapshotQueryDAO.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.BasicTrace;
+import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
 import org.apache.skywalking.oap.server.core.storage.DAO;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IAlarmQueryDAO.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.storage.query;
 
 import java.io.IOException;
-import org.apache.skywalking.oap.server.core.query.entity.Alarms;
+import org.apache.skywalking.oap.server.core.query.type.Alarms;
 import org.apache.skywalking.oap.server.core.storage.DAO;
 
 public interface IAlarmQueryDAO extends DAO {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ILogQueryDAO.java
Patch:
@@ -19,9 +19,9 @@
 package org.apache.skywalking.oap.server.core.storage.query;
 
 import java.io.IOException;
-import org.apache.skywalking.oap.server.core.query.entity.LogState;
-import org.apache.skywalking.oap.server.core.query.entity.Logs;
-import org.apache.skywalking.oap.server.core.query.entity.Pagination;
+import org.apache.skywalking.oap.server.core.query.type.LogState;
+import org.apache.skywalking.oap.server.core.query.type.Logs;
+import org.apache.skywalking.oap.server.core.query.type.Pagination;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 public interface ILogQueryDAO extends Service {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/type/StorageDataComplexObject.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * StorageDataComplexObject implementation supports String-Object interconversion.
  */
-public interface StorageDataComplexObject {
+public interface StorageDataComplexObject<T> {
     /**
      * @return string representing this object.
      */
@@ -35,5 +35,5 @@ public interface StorageDataComplexObject {
     /**
      * Initialize the object based on the given source.
      */
-    void copyFrom(Object source);
+    void copyFrom(T source);
 }

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/PxxMetricsTest.java
Patch:
@@ -129,7 +129,7 @@ public int remoteHashCode() {
 
     @Test
     public void testAccurate() {
-        IntKeyLongValueHashMap map = new IntKeyLongValueHashMap();
+        DataTable map = new DataTable();
         map.toObject("0,109|128,3|130,1|131,1|132,2|5,16|6,23|10,1|12,1|13,25|14,10|15,2|17,1|146,2|18,1|19,16|20,9|21,4|22,1|23,2|152,1|25,4|26,4|27,3|28,1|31,1|32,2|34,1|44,1|318,1|319,7|320,2|321,1|323,1|324,1|325,2|326,1|327,3|328,1|330,2|205,27|206,14|208,1|337,1|219,15|220,2|221,2|222,1|224,1|352,1|225,1|226,3|227,1|229,1|232,2|105,16|233,1|106,13|108,1|113,20|114,4|115,3|116,2|118,6|119,12|120,4|121,4|122,6|250,1|124,4|125,1|126,4|127,2");
 
         PxxMetricsMocker metrics50Mocker = new PxxMetricsMocker(50);

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/profile/analyze/ProfileStackAnalyze.java
Patch:
@@ -25,9 +25,9 @@
 import lombok.Data;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.BasicTrace;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileAnalyzeTimeRange;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileStackTree;
+import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
+import org.apache.skywalking.oap.server.core.query.type.ProfileAnalyzeTimeRange;
+import org.apache.skywalking.oap.server.core.query.type.ProfileStackTree;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 
 import static org.junit.Assert.assertEquals;

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/profile/analyze/ProfileStackData.java
Patch:
@@ -22,7 +22,7 @@
 import lombok.Data;
 import org.apache.skywalking.apm.network.language.profile.v3.ThreadStack;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileAnalyzeTimeRange;
+import org.apache.skywalking.oap.server.core.query.type.ProfileAnalyzeTimeRange;
 
 import java.util.ArrayList;
 import java.util.List;

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/profile/analyze/ProfileStackElementMatcher.java
Patch:
@@ -25,8 +25,8 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import lombok.Data;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileStackElement;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileStackTree;
+import org.apache.skywalking.oap.server.core.query.type.ProfileStackElement;
+import org.apache.skywalking.oap.server.core.query.type.ProfileStackTree;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
 import org.junit.Assert;
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.storage.model;
 
-import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueHashMap;
+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -31,7 +31,7 @@ public void testColumnDefine() {
         Assert.assertEquals(true, column.isStorageOnly());
         Assert.assertEquals("abc", column.getColumnName().getName());
 
-        column = new ModelColumn(new ColumnName("", "abc"), IntKeyLongValueHashMap.class, true,
+        column = new ModelColumn(new ColumnName("", "abc"), DataTable.class, true,
                                  false, true, 200
         );
         Assert.assertEquals(true, column.isStorageOnly());

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/Mutation.java
Patch:
@@ -24,5 +24,5 @@
  * Root mutation resolver.
  */
 public class Mutation implements GraphQLMutationResolver {
-    private String version;
+    private String version = "8.0";
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/ProfileMutation.java
Patch:
@@ -20,10 +20,10 @@
 
 import com.coxautodev.graphql.tools.GraphQLMutationResolver;
 import java.io.IOException;
-import org.apache.skywalking.oap.query.graphql.type.ProfileTaskCreationRequest;
+import org.apache.skywalking.oap.server.core.query.input.ProfileTaskCreationRequest;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.profile.ProfileTaskMutationService;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskCreationResult;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskCreationResult;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 
 /**

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/Query.java
Patch:
@@ -24,5 +24,5 @@
  * Root Query Resolver.
  */
 public class Query implements GraphQLQueryResolver {
-    private String version = "6.0";
+    private String version = "8.0";
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/BatchMetricConditions.java
Patch:
@@ -22,9 +22,7 @@
 import java.util.List;
 import lombok.Getter;
 
-/**
- *
- **/
+@Deprecated
 @Getter
 public class BatchMetricConditions {
     private String name;

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/TopNRecordsCondition.java
Patch:
@@ -20,8 +20,10 @@
 
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.skywalking.oap.server.core.query.entity.Order;
+import org.apache.skywalking.oap.server.core.query.input.Duration;
+import org.apache.skywalking.oap.server.core.query.enumeration.Order;
 
+@Deprecated
 @Getter
 @Setter
 public class TopNRecordsCondition {

File: oap-server/server-receiver-plugin/skywalking-profile-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/profile/provider/handler/ProfileTaskServiceHandler.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.skywalking.oap.server.core.command.CommandService;
 import org.apache.skywalking.oap.server.core.profile.ProfileTaskLogRecord;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskLogOperationType;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTask;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskLogOperationType;
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.server.grpc.GRPCHandler;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ColumnTypeEsMapping.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.google.gson.JsonObject;
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
-import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueHashMap;
+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;
 import org.apache.skywalking.oap.server.core.storage.model.DataTypeMapping;
 
 public class ColumnTypeEsMapping implements DataTypeMapping {
@@ -35,7 +35,7 @@ public String transform(Class<?> type) {
             return "double";
         } else if (String.class.equals(type)) {
             return "keyword";
-        } else if (IntKeyLongValueHashMap.class.equals(type)) {
+        } else if (DataTable.class.equals(type)) {
             return "text";
         } else if (byte[].class.equals(type)) {
             return "binary";

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java
Patch:
@@ -22,9 +22,9 @@
 import java.io.IOException;
 import java.util.Objects;
 import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;
-import org.apache.skywalking.oap.server.core.query.entity.AlarmMessage;
-import org.apache.skywalking.oap.server.core.query.entity.Alarms;
-import org.apache.skywalking.oap.server.core.query.entity.Scope;
+import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;
+import org.apache.skywalking.oap.server.core.query.type.Alarms;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileTaskLogEsDAO.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.LinkedList;
 import java.util.List;
 import org.apache.skywalking.oap.server.core.profile.ProfileTaskLogRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskLog;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskLogOperationType;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskLog;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskLogOperationType;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskLogQueryDAO;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileTaskQueryEsDAO.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.profile.ProfileTaskRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTask;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileThreadSnapshotQueryEsDAO.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.common.base.Strings;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.BasicTrace;
+import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/AlarmQueryEs7DAO.java
Patch:
@@ -20,9 +20,9 @@
 
 import com.google.common.base.Strings;
 import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;
-import org.apache.skywalking.oap.server.core.query.entity.AlarmMessage;
-import org.apache.skywalking.oap.server.core.query.entity.Alarms;
-import org.apache.skywalking.oap.server.core.query.entity.Scope;
+import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;
+import org.apache.skywalking.oap.server.core.query.type.Alarms;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/AlarmQuery.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.Objects;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;
-import org.apache.skywalking.oap.server.core.query.entity.AlarmMessage;
-import org.apache.skywalking.oap.server.core.query.entity.Alarms;
-import org.apache.skywalking.oap.server.core.query.entity.Scope;
+import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;
+import org.apache.skywalking.oap.server.core.query.type.Alarms;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxClient;
 import org.elasticsearch.common.Strings;

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/ProfileTaskLogQuery.java
Patch:
@@ -24,8 +24,8 @@
 import java.util.List;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.oap.server.core.profile.ProfileTaskLogRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskLog;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskLogOperationType;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskLog;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskLogOperationType;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskLogQueryDAO;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxClient;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxConstants;

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/ProfileTaskQuery.java
Patch:
@@ -25,7 +25,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.profile.ProfileTaskRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTask;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxClient;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxConstants;

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/ProfileThreadSnapshotQuery.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.BasicTrace;
+import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxClient;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java
Patch:
@@ -19,9 +19,9 @@
 package org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao;
 
 import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;
-import org.apache.skywalking.oap.server.core.query.entity.AlarmMessage;
-import org.apache.skywalking.oap.server.core.query.entity.Alarms;
-import org.apache.skywalking.oap.server.core.query.entity.Scope;
+import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;
+import org.apache.skywalking.oap.server.core.query.type.Alarms;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
 import org.elasticsearch.common.Strings;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskLogQueryDAO.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao;
 
 import org.apache.skywalking.oap.server.core.profile.ProfileTaskLogRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskLog;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTaskLogOperationType;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskLog;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTaskLogOperationType;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskLogQueryDAO;
 import org.apache.skywalking.oap.server.library.client.jdbc.JDBCClientException;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskQueryDAO.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.List;
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.profile.ProfileTaskRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;
+import org.apache.skywalking.oap.server.core.query.type.ProfileTask;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.library.client.jdbc.JDBCClientException;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileThreadSnapshotQueryDAO.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.BasicTrace;
+import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TableInstaller.java
Patch:
@@ -23,7 +23,7 @@
 import java.sql.SQLException;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.oap.server.core.analysis.NodeType;
-import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueHashMap;
+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
 import org.apache.skywalking.oap.server.core.storage.model.ColumnName;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
@@ -98,7 +98,7 @@ protected String getColumnType(ModelColumn column) {
             return "DOUBLE";
         } else if (String.class.equals(type)) {
             return "VARCHAR(" + column.getLength() + ")";
-        } else if (IntKeyLongValueHashMap.class.equals(type)) {
+        } else if (DataTable.class.equals(type)) {
             return "VARCHAR(20000)";
         } else if (byte[].class.equals(type)) {
             return "MEDIUMTEXT";

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java
Patch:
@@ -19,9 +19,9 @@
 package org.apache.skywalking.oap.server.storage.plugin.jdbc.mysql;
 
 import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;
-import org.apache.skywalking.oap.server.core.query.entity.AlarmMessage;
-import org.apache.skywalking.oap.server.core.query.entity.Alarms;
-import org.apache.skywalking.oap.server.core.query.entity.Scope;
+import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;
+import org.apache.skywalking.oap.server.core.query.type.Alarms;
+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
 import org.elasticsearch.common.Strings;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLTableInstaller.java
Patch:
@@ -22,7 +22,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueHashMap;
+import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
 import org.apache.skywalking.oap.server.core.storage.model.ExtraQueryIndex;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
@@ -105,7 +105,7 @@ protected void createTableIndexes(JDBCHikariCPClient client,
 
     @Override
     protected String getColumnType(final ModelColumn column) {
-        if (IntKeyLongValueHashMap.class.equals(column.getType())) {
+        if (DataTable.class.equals(column.getType())) {
             return "MEDIUMTEXT";
         }
         return super.getColumnType(column);

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfileSnapshotDumper.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.network.language.profile.v3.ThreadSnapshot;
 import org.apache.skywalking.apm.network.language.profile.v3.ThreadStack;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileAnalyzeTimeRange;
+import org.apache.skywalking.oap.server.core.query.type.ProfileAnalyzeTimeRange;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.query.ProfileTaskQueryService;
 import org.apache.skywalking.oap.server.core.query.TraceQueryService;
-import org.apache.skywalking.oap.server.core.query.entity.BasicTrace;
-import org.apache.skywalking.oap.server.core.query.entity.Span;
-import org.apache.skywalking.oap.server.core.query.entity.Trace;
+import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
+import org.apache.skywalking.oap.server.core.query.type.Span;
+import org.apache.skywalking.oap.server.core.query.type.Trace;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfileAnalyzeSnapshotDAO.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.network.language.profile.v3.ThreadSnapshot;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.BasicTrace;
+import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 
 import java.io.IOException;

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileExportSnapshotDAO.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.skywalking.apm.network.language.profile.v3.ThreadStack;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
-import org.apache.skywalking.oap.server.core.query.entity.BasicTrace;
+import org.apache.skywalking.oap.server.core.query.type.BasicTrace;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 
 import java.io.IOException;

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileSnapshotExporterTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.skywalking.oap.server.core.config.IComponentLibraryCatalogService;
 import org.apache.skywalking.oap.server.core.query.ProfileTaskQueryService;
 import org.apache.skywalking.oap.server.core.query.TraceQueryService;
-import org.apache.skywalking.oap.server.core.query.entity.ProfileAnalyzeTimeRange;
+import org.apache.skywalking.oap.server.core.query.type.ProfileAnalyzeTimeRange;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileThreadSnapshotQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.skywalking.oap.server.core.query.AlarmQueryService;
 import org.apache.skywalking.oap.server.core.query.LogQueryService;
 import org.apache.skywalking.oap.server.core.query.MetadataQueryService;
-import org.apache.skywalking.oap.server.core.query.MetricQueryService;
+import org.apache.skywalking.oap.server.core.query.MetricsQueryService;
 import org.apache.skywalking.oap.server.core.query.ProfileTaskQueryService;
 import org.apache.skywalking.oap.server.core.query.TopNRecordsQueryService;
 import org.apache.skywalking.oap.server.core.query.TopologyQueryService;
@@ -132,7 +132,7 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
             NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));
 
         this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));
-        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));
+        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));
         this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));
         this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));
         this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -117,9 +117,9 @@ public static class Collector {
          */
         public static long GRPC_CHANNEL_CHECK_INTERVAL = 30;
         /**
-         * service and endpoint registry check interval
+         * The period in which the agent report a heartbeat to the backend.
          */
-        public static long APP_AND_SERVICE_REGISTER_CHECK_INTERVAL = 3;
+        public static long HEARTBEAT_PERIOD = 30;
         /**
          * Collector skywalking trace receiver service addresses.
          */

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/BaseCommand.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.skywalking.apm.network.trace.component.command;
 
-import org.apache.skywalking.apm.network.common.Command;
-import org.apache.skywalking.apm.network.common.KeyStringValuePair;
+import org.apache.skywalking.apm.network.common.v3.Command;
+import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;
 
 public abstract class BaseCommand {
 

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/Deserializable.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.network.trace.component.command;
 
-import org.apache.skywalking.apm.network.common.Command;
+import org.apache.skywalking.apm.network.common.v3.Command;
 
 public interface Deserializable<T extends BaseCommand> {
     T deserialize(Command command);

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/ProfileTaskCommand.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.skywalking.apm.network.trace.component.command;
 
-import org.apache.skywalking.apm.network.common.Command;
-import org.apache.skywalking.apm.network.common.KeyStringValuePair;
+import org.apache.skywalking.apm.network.common.v3.Command;
+import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;
 
 import java.util.List;
 

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/Serializable.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.network.trace.component.command;
 
-import org.apache.skywalking.apm.network.common.Command;
+import org.apache.skywalking.apm.network.common.v3.Command;
 
 public interface Serializable {
     Command.Builder serialize();

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/TraceIgnoreCommand.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.skywalking.apm.network.trace.component.command;
 
-import org.apache.skywalking.apm.network.common.Command;
-import org.apache.skywalking.apm.network.common.KeyStringValuePair;
+import org.apache.skywalking.apm.network.common.v3.Command;
+import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;
 
 /**
  * Trace ignore sync, each configuration downstream is the full amount of data related to the received agent.

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/UnsupportedCommandException.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.skywalking.apm.network.trace.component.command;
 
-import org.apache.skywalking.apm.network.common.Command;
+import org.apache.skywalking.apm.network.common.v3.Command;
 
 public class UnsupportedCommandException extends RuntimeException {
     private final Command command;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/commands/CommandExecutionException.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.skywalking.apm.agent.core.commands;
 
-import org.apache.skywalking.apm.network.common.Command;
+import org.apache.skywalking.apm.network.common.v3.Command;
 
 /**
  * Indicates that the execution of a command failed

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/commands/CommandService.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.skywalking.apm.agent.core.boot.ServiceManager;
 import org.apache.skywalking.apm.agent.core.logging.api.ILog;
 import org.apache.skywalking.apm.agent.core.logging.api.LogManager;
-import org.apache.skywalking.apm.network.common.Command;
-import org.apache.skywalking.apm.network.common.Commands;
+import org.apache.skywalking.apm.network.common.v3.Command;
+import org.apache.skywalking.apm.network.common.v3.Commands;
 import org.apache.skywalking.apm.network.trace.component.command.BaseCommand;
 import org.apache.skywalking.apm.network.trace.component.command.CommandDeserializer;
 import org.apache.skywalking.apm.network.trace.component.command.UnsupportedCommandException;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/AbstractTracerContext.java
Patch:
@@ -60,7 +60,7 @@ public interface AbstractTracerContext {
      *
      * @return the string represents the id.
      */
-    String getReadableGlobalTraceId();
+    String getReadablePrimaryTraceId();
 
     /**
      * Create an entry span

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/IgnoredTracerContext.java
Patch:
@@ -53,7 +53,7 @@ public void extract(ContextCarrier carrier) {
 
     @Override
     public ContextSnapshot capture() {
-        return new ContextSnapshot(null, -1, null, correlationContext);
+        return new ContextSnapshot(null, -1, null, null, correlationContext);
     }
 
     @Override
@@ -62,7 +62,7 @@ public void continued(ContextSnapshot snapshot) {
     }
 
     @Override
-    public String getReadableGlobalTraceId() {
+    public String getReadablePrimaryTraceId() {
         return "[Ignored Trace]";
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/ExitTypeSpan.java
Patch:
@@ -24,8 +24,6 @@
  * The exit span has some additional behaviours
  */
 public interface ExitTypeSpan {
-    int getPeerId();
-
     String getPeer();
 
     ExitTypeSpan inject(ContextCarrier carrier);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/LogDataEntity.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import org.apache.skywalking.apm.agent.core.context.util.KeyValuePair;
-import org.apache.skywalking.apm.network.language.agent.v2.Log;
+import org.apache.skywalking.apm.network.language.agent.v3.Log;
 
 /**
  * The <code>LogDataEntity</code> represents a collection of {@link KeyValuePair}, contains several fields of a logging

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/KeyValuePair.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.agent.core.context.util;
 
-import org.apache.skywalking.apm.network.common.KeyStringValuePair;
+import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;
 
 /**
  * The <code>KeyValuePair</code> represents a object which contains a string key and a string value.

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagValuePair.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.skywalking.apm.agent.core.context.util;
 
 import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;
-import org.apache.skywalking.apm.network.common.KeyStringValuePair;
+import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;
 
 public class TagValuePair {
     private AbstractTag key;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/cpu/CPUMetricsAccessor.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.agent.core.jvm.cpu;
 
-import org.apache.skywalking.apm.network.common.CPU;
+import org.apache.skywalking.apm.network.common.v3.CPU;
 
 /**
  * The unit of CPU usage is 1/10000. The backend is using `avg` func directly, and query for percentage requires this

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/cpu/CPUProvider.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.skywalking.apm.agent.core.logging.api.ILog;
 import org.apache.skywalking.apm.agent.core.logging.api.LogManager;
 import org.apache.skywalking.apm.agent.core.os.ProcessorUtil;
-import org.apache.skywalking.apm.network.common.CPU;
+import org.apache.skywalking.apm.network.common.v3.CPU;
 
 public enum CPUProvider {
     INSTANCE;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/gc/GCMetricAccessor.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.apm.agent.core.jvm.gc;
 
 import java.util.List;
-import org.apache.skywalking.apm.network.language.agent.GC;
+import org.apache.skywalking.apm.network.language.agent.v3.GC;
 
 public interface GCMetricAccessor {
     List<GC> getGCList();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/gc/GCModule.java
Patch:
@@ -21,8 +21,8 @@
 import java.lang.management.GarbageCollectorMXBean;
 import java.util.LinkedList;
 import java.util.List;
-import org.apache.skywalking.apm.network.language.agent.GC;
-import org.apache.skywalking.apm.network.language.agent.GCPhrase;
+import org.apache.skywalking.apm.network.language.agent.v3.GC;
+import org.apache.skywalking.apm.network.language.agent.v3.GCPhrase;
 
 public abstract class GCModule implements GCMetricAccessor {
     private List<GarbageCollectorMXBean> beans;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/gc/GCProvider.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.management.GarbageCollectorMXBean;
 import java.lang.management.ManagementFactory;
 import java.util.List;
-import org.apache.skywalking.apm.network.language.agent.GC;
+import org.apache.skywalking.apm.network.language.agent.v3.GC;
 
 public enum GCProvider {
     INSTANCE;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/gc/UnknowGC.java
Patch:
@@ -20,8 +20,8 @@
 
 import java.util.LinkedList;
 import java.util.List;
-import org.apache.skywalking.apm.network.language.agent.GC;
-import org.apache.skywalking.apm.network.language.agent.GCPhrase;
+import org.apache.skywalking.apm.network.language.agent.v3.GC;
+import org.apache.skywalking.apm.network.language.agent.v3.GCPhrase;
 
 public class UnknowGC implements GCMetricAccessor {
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/memory/MemoryProvider.java
Patch:
@@ -23,7 +23,7 @@
 import java.lang.management.MemoryUsage;
 import java.util.LinkedList;
 import java.util.List;
-import org.apache.skywalking.apm.network.language.agent.Memory;
+import org.apache.skywalking.apm.network.language.agent.v3.Memory;
 
 public enum MemoryProvider {
     INSTANCE;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/memorypool/MemoryPoolMetricsAccessor.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.apm.agent.core.jvm.memorypool;
 
 import java.util.List;
-import org.apache.skywalking.apm.network.language.agent.MemoryPool;
+import org.apache.skywalking.apm.network.language.agent.v3.MemoryPool;
 
 public interface MemoryPoolMetricsAccessor {
     List<MemoryPool> getMemoryPoolMetricsList();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/memorypool/MemoryPoolModule.java
Patch:
@@ -22,8 +22,8 @@
 import java.lang.management.MemoryUsage;
 import java.util.LinkedList;
 import java.util.List;
-import org.apache.skywalking.apm.network.language.agent.MemoryPool;
-import org.apache.skywalking.apm.network.language.agent.PoolType;
+import org.apache.skywalking.apm.network.language.agent.v3.MemoryPool;
+import org.apache.skywalking.apm.network.language.agent.v3.PoolType;
 
 public abstract class MemoryPoolModule implements MemoryPoolMetricsAccessor {
     private List<MemoryPoolMXBean> beans;
@@ -59,7 +59,7 @@ public List<MemoryPool> getMemoryPoolMetricsList() {
                                    .setType(type)
                                    .setInit(usage.getInit())
                                    .setMax(usage.getMax())
-                                   .setCommited(usage.getCommitted())
+                                   .setCommitted(usage.getCommitted())
                                    .setUsed(usage.getUsed())
                                    .build());
         }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/memorypool/MemoryPoolProvider.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.management.ManagementFactory;
 import java.lang.management.MemoryPoolMXBean;
 import java.util.List;
-import org.apache.skywalking.apm.network.language.agent.MemoryPool;
+import org.apache.skywalking.apm.network.language.agent.v3.MemoryPool;
 
 public enum MemoryPoolProvider {
     INSTANCE;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/memorypool/UnknownMemoryPool.java
Patch:
@@ -20,8 +20,8 @@
 
 import java.util.LinkedList;
 import java.util.List;
-import org.apache.skywalking.apm.network.language.agent.MemoryPool;
-import org.apache.skywalking.apm.network.language.agent.PoolType;
+import org.apache.skywalking.apm.network.language.agent.v3.MemoryPool;
+import org.apache.skywalking.apm.network.language.agent.v3.PoolType;
 
 public class UnknownMemoryPool implements MemoryPoolMetricsAccessor {
     @Override

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/boot/ServiceManagerTest.java
Patch:
@@ -105,7 +105,7 @@ private void assertGRPCChannelManager(GRPCChannelManager service) throws Excepti
         assertNotNull(service);
 
         List<GRPCChannelListener> listeners = getFieldValue(service, "listeners");
-        assertEquals(listeners.size(), 4);
+        assertEquals(listeners.size(), 5);
     }
 
     private void assertSamplingService(SamplingService service) {

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/util/TraceSegmentRefHelper.java
Patch:
@@ -23,7 +23,7 @@
 public class TraceSegmentRefHelper {
     public static String getPeerHost(TraceSegmentRef ref) {
         try {
-            return FieldGetter.getValue(ref, "peerHost");
+            return FieldGetter.getValue(ref, "addressUsedAtClient");
         } catch (Exception e) {
         }
 

File: apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/finagle/CodecUtilsTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.twitter.io.Bufs;
 import org.apache.skywalking.apm.agent.core.context.CarrierItem;
 import org.apache.skywalking.apm.agent.core.context.ContextCarrier;
-import org.apache.skywalking.apm.agent.core.context.SW6CarrierItem;
+import org.apache.skywalking.apm.agent.core.context.SW8CarrierItem;
 import org.junit.Test;
 
 import java.util.HashMap;
@@ -54,7 +54,7 @@ private SWContextCarrier makeSWContextCarrier() {
         CarrierItem next = contextCarrier.items();
         while (next.hasNext()) {
             next = next.next();
-            if (next.getHeadKey().equals(SW6CarrierItem.HEADER_NAME)) {
+            if (next.getHeadKey().equals(SW8CarrierItem.HEADER_NAME)) {
                 next.setHeadValue(UUID.randomUUID().toString());
             }
         }

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/test/java/org/apache/skywalking/apm/plugin/kafka/CallbackInterceptorTest.java
Patch:
@@ -145,7 +145,6 @@ private void assertCallbackSegmentRef(List<TraceSegmentRef> refs) {
 
         TraceSegmentRef segmentRef = refs.get(0);
         SegmentRefAssert.assertSpanId(segmentRef, 1);
-        assertThat(segmentRef.getEntryEndpointName(), is("/for-test-entryOperationName"));
     }
 
     private void assertCallbackSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/pulsar-plugin/src/test/java/org/apache/skywalking/apm/plugin/pulsar/SendCallbackInterceptorTest.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.apm.plugin.pulsar;
 
+import java.util.List;
 import org.apache.skywalking.apm.agent.core.context.MockContextSnapshot;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
@@ -38,8 +39,6 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.powermock.modules.junit4.PowerMockRunnerDelegate;
 
-import java.util.List;
-
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 
@@ -137,7 +136,6 @@ private void assertCallbackSegmentRef(List<TraceSegmentRef> refs) {
 
         TraceSegmentRef segmentRef = refs.get(0);
         SegmentRefAssert.assertSpanId(segmentRef, 1);
-        assertThat(segmentRef.getEntryEndpointName(), is("/for-test-entryOperationName"));
     }
 
     private void assertCallbackSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptorTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.rabbitmq.client.AMQP;
 import com.rabbitmq.client.Envelope;
-import org.apache.skywalking.apm.agent.core.context.SW6CarrierItem;
+import org.apache.skywalking.apm.agent.core.context.SW8CarrierItem;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;
@@ -73,7 +73,7 @@ public void setUp() throws Exception {
     public void TestRabbitMQConsumerInterceptor() throws Throwable {
         Envelope envelope = new Envelope(1111, false, "", "rabbitmq-test");
         Map<String, Object> headers = new HashMap<String, Object>();
-        headers.put(SW6CarrierItem.HEADER_NAME, "1-MS4xLjE1NDM5NzU1OTEwMTQwMDAx-MS4xLjE1NDM5NzU1OTA5OTcwMDAw-0-1-1-IzEyNy4wLjAuMTo1Mjcy-I1JhYmJpdE1RL1RvcGljL1F1ZXVlL3JhYmJpdG1xLXRlc3QvUHJvZHVjZXI=-I1JhYmJpdE1RL1RvcGljL1F1ZXVlL3JhYmJpdG1xLXRlc3QvUHJvZHVjZXI=");
+        headers.put(SW8CarrierItem.HEADER_NAME, "1-My40LjU=-MS4yLjM=-3-c2VydmljZQ==-aW5zdGFuY2U=-L2FwcA==-MTI3LjAuMC4xOjgwODA=");
         AMQP.BasicProperties.Builder propsBuilder = new AMQP.BasicProperties.Builder();
         Object[] arguments = new Object[] {
             0,

File: apm-sniffer/apm-sdk-plugin/resteasy-plugin/resteasy-server-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/resteasy/v3/server/AssertTools.java
Patch:
@@ -32,9 +32,9 @@
 class AssertTools {
 
     static void assertTraceSegmentRef(TraceSegmentRef ref) {
-        assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(1));
+        assertThat(SegmentRefHelper.getParentServiceInstance(ref), is("instance"));
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.234.111"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("3.4.5"));
     }
 
     static void assertHttpSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/resteasy-plugin/resteasy-server-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/resteasy/v3/server/SynchronousDispatcherInterceptorTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.List;
-import org.apache.skywalking.apm.agent.core.context.SW6CarrierItem;
+import org.apache.skywalking.apm.agent.core.context.SW8CarrierItem;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.apache.skywalking.apm.agent.core.context.trace.LogDataEntity;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
@@ -136,7 +136,7 @@ public void testWithoutSerializedContextData() throws Throwable {
     @Test
     public void testWithSW6SerializedContextData() throws Throwable {
         MultivaluedMapImpl<String, String> multivaluedMap = new MultivaluedMapImpl<String, String>();
-        multivaluedMap.putSingle(SW6CarrierItem.HEADER_NAME, "1-I0FRQSojQVFBKkV0MFdlMHRRTlFBKg==-MS4yMzQuMTEx-3-1-1-IzE5Mi4xNjguMS44OjE4MDAy-Iy9wb3J0YWwv-Iy90ZXN0RW50cnlTcGFu");
+        multivaluedMap.putSingle(SW8CarrierItem.HEADER_NAME, "1-My40LjU=-MS4yLjM=-3-c2VydmljZQ==-aW5zdGFuY2U=-L2FwcA==-MTI3LjAuMC4xOjgwODA=");
         when(request.getHttpHeaders()).thenReturn(new ResteasyHttpHeaders(multivaluedMap));
 
         synchronousDispatcherInterceptor.beforeMethod(enhancedInstance, null, arguments, argumentType, methodInterceptResult);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java
Patch:
@@ -162,7 +162,7 @@ public void handleCase() throws Throwable {
     }
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
-        assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(1));
+        assertThat(SegmentRefHelper.getParentServiceInstance(ref), is("instance"));
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
         assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.444.555"));
     }

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/span/ConstructorWithSpanBuilderInterceptor.java
Patch:
@@ -18,13 +18,13 @@
 
 package org.apache.skywalking.apm.toolkit.activation.opentracing.span;
 
+import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 import org.apache.skywalking.apm.toolkit.opentracing.SkywalkingSpanBuilder;
 import org.apache.skywalking.apm.toolkit.opentracing.Tag;
-import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.util.StringUtil;
 
 public class ConstructorWithSpanBuilderInterceptor implements InstanceConstructorInterceptor {
@@ -45,7 +45,6 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
         for (Tag tag : spanBuilder.getTags()) {
             span.tag(Tags.ofKey(tag.getKey()), tag.getValue());
         }
-        span.setComponent(spanBuilder.getComponentName());
         if (spanBuilder.isError()) {
             span.errorOccurred();
         }

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java
Patch:
@@ -96,8 +96,7 @@ public class OALRuntime implements OALEngine {
         "deserialize",
         "getMeta",
         "toHour",
-        "toDay",
-        "toMonth"
+        "toDay"
     };
     private static final String[] METRICS_BUILDER_CLASS_METHODS = {
         "data2Map",

File: oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java
Patch:
@@ -84,7 +84,7 @@ public void testEndpointAnalysis() {
         Assert.assertEquals("(long)(1)", method.getArgsExpressions().get(1));
 
         List<SourceColumn> source = result.getFieldsFromSource();
-        Assert.assertEquals(3, source.size());
+        Assert.assertEquals(2, source.size());
 
         List<DataColumn> persistentFields = result.getPersistentFields();
         Assert.assertEquals(4, persistentFields.size());
@@ -113,7 +113,7 @@ public void testFilterAnalysis() {
         Assert.assertEquals("(long)(1)", method.getArgsExpressions().get(1));
 
         List<SourceColumn> source = result.getFieldsFromSource();
-        Assert.assertEquals(3, source.size());
+        Assert.assertEquals(2, source.size());
 
         List<DataColumn> persistentFields = result.getPersistentFields();
         Assert.assertEquals(4, persistentFields.size());

File: oap-server/oal-rt/src/test/resources/expectedFiles/MetricsImplementorExpected.java
Patch:
@@ -47,7 +47,7 @@ public class ServiceAvgMetrics extends LongAvgMetrics implements WithMetadata {
     @Override
     public String id() {
         String splitJointId = String.valueOf(getTimeBucket());
-        splitJointId += Const.ID_SPLIT + entityId;
+        splitJointId += Const.ID_CONNECTOR + entityId;
         return splitJointId;
     }
 

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProvider.java
Patch:
@@ -75,13 +75,13 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
     public void start() throws ServiceNotProvidedException, ModuleStartException {
         DynamicConfigurationService dynamicConfigurationService = getManager().find(ConfigurationModule.NAME)
                                                                               .provider()
-                                                                              .getService(DynamicConfigurationService.class);
+                                                                              .getService(
+                                                                                  DynamicConfigurationService.class);
         dynamicConfigurationService.registerConfigChangeWatcher(alarmRulesWatcher);
     }
 
     @Override
     public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleStartException {
-        notifyHandler.initCache(getManager());
     }
 
     @Override

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProviderTest.java
Patch:
@@ -31,7 +31,6 @@
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.mock;
 
 public class AlarmModuleProviderTest {
@@ -67,8 +66,6 @@ public void notifyAfterCompleted() throws Exception {
 
         NotifyHandler handler = mock(NotifyHandler.class);
 
-        doNothing().when(handler).initCache(null);
-
         Whitebox.setInternalState(moduleProvider, "notifyHandler", handler);
         moduleProvider.notifyAfterCompleted();
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java
Patch:
@@ -49,7 +49,7 @@ public class AlarmRecord extends Record {
 
     @Override
     public String id() {
-        return getTimeBucket() + Const.ID_SPLIT + scope + Const.ID_SPLIT + id0 + Const.ID_SPLIT + id1;
+        return getTimeBucket() + Const.ID_CONNECTOR + scope + Const.ID_CONNECTOR + id0 + Const.ID_CONNECTOR + id1;
     }
 
     @Column(columnName = SCOPE)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/DispatcherManager.java
Patch:
@@ -55,6 +55,7 @@ public void forward(Source source) {
          * when the receiver is open, and oal script doesn't ask for analysis.
          */
         if (dispatchers != null) {
+            source.prepare();
             for (SourceDispatcher dispatcher : dispatchers) {
                 dispatcher.dispatch(source);
             }
@@ -94,7 +95,8 @@ public void addIfAsSourceDispatcher(Class aClass) throws IllegalAccessException,
                     Object source = ((Class) argument).newInstance();
 
                     if (!Source.class.isAssignableFrom(source.getClass())) {
-                        throw new UnexpectedException("unexpected type argument of class " + aClass.getName() + ", should be `org.apache.skywalking.oap.server.core.source.Source`. ");
+                        throw new UnexpectedException(
+                            "unexpected type argument of class " + aClass.getName() + ", should be `org.apache.skywalking.oap.server.core.source.Source`. ");
                     }
 
                     Source dispatcherSource = (Source) source;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/database/TopNDatabaseStatement.java
Patch:
@@ -67,7 +67,7 @@ public TopNDatabaseStatement map2Data(Map<String, Object> dbMap) {
             statement.setStatement((String) dbMap.get(STATEMENT));
             statement.setTraceId((String) dbMap.get(TRACE_ID));
             statement.setLatency(((Number) dbMap.get(LATENCY)).longValue());
-            statement.setServiceId(((Number) dbMap.get(SERVICE_ID)).intValue());
+            statement.setServiceId((String) dbMap.get(SERVICE_ID));
             statement.setTimeBucket(((Number) dbMap.get(TIME_BUCKET)).longValue());
             return statement;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceCallRelationDispatcher.java
Patch:
@@ -44,7 +44,7 @@ private void serverSide(ServiceInstanceRelation source) {
         metrics.setDestServiceId(source.getDestServiceId());
         metrics.setDestServiceInstanceId(source.getDestServiceInstanceId());
         metrics.setComponentId(source.getComponentId());
-        metrics.buildEntityId();
+        metrics.setEntityId(source.getEntityId());
         MetricsStreamProcessor.getInstance().in(metrics);
     }
 
@@ -56,7 +56,7 @@ private void clientSide(ServiceInstanceRelation source) {
         metrics.setDestServiceId(source.getDestServiceId());
         metrics.setDestServiceInstanceId(source.getDestServiceInstanceId());
         metrics.setComponentId(source.getComponentId());
-        metrics.buildEntityId();
+        metrics.setEntityId(source.getEntityId());
         MetricsStreamProcessor.getInstance().in(metrics);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceCallRelationDispatcher.java
Patch:
@@ -42,7 +42,7 @@ private void serverSide(ServiceRelation source) {
         metrics.setSourceServiceId(source.getSourceServiceId());
         metrics.setDestServiceId(source.getDestServiceId());
         metrics.setComponentId(source.getComponentId());
-        metrics.buildEntityId();
+        metrics.setEntityId(source.getEntityId());
         MetricsStreamProcessor.getInstance().in(metrics);
     }
 
@@ -52,7 +52,7 @@ private void clientSide(ServiceRelation source) {
         metrics.setSourceServiceId(source.getSourceServiceId());
         metrics.setDestServiceId(source.getDestServiceId());
         metrics.setComponentId(source.getComponentId());
-        metrics.buildEntityId();
+        metrics.setEntityId(source.getEntityId());
         MetricsStreamProcessor.getInstance().in(metrics);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java
Patch:
@@ -48,7 +48,7 @@ public abstract class TopN extends Record implements ComparableStorageData {
     @Getter
     @Setter
     @Column(columnName = SERVICE_ID)
-    private int serviceId;
+    private String serviceId;
 
     @Override
     public int compareTo(Object o) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/NoneStreamingProcessor.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.UnexpectedException;
 import org.apache.skywalking.oap.server.core.analysis.DisableRegister;
-import org.apache.skywalking.oap.server.core.analysis.Downsampling;
+import org.apache.skywalking.oap.server.core.analysis.DownSampling;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.StreamProcessor;
 import org.apache.skywalking.oap.server.core.analysis.config.NoneStream;
@@ -73,7 +73,7 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
         }
 
         INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);
-        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);
+        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);
 
         final NoneStreamPersistentWorker persistentWorker = new NoneStreamPersistentWorker(moduleDefineHolder, model, noneStream);
         workers.put(streamClass, persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.UnexpectedException;
 import org.apache.skywalking.oap.server.core.analysis.DisableRegister;
-import org.apache.skywalking.oap.server.core.analysis.Downsampling;
+import org.apache.skywalking.oap.server.core.analysis.DownSampling;
 import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.StreamProcessor;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
@@ -67,7 +67,8 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
         }
 
         INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);
-        Model model = modelSetter.add(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);
+        Model model = modelSetter.add(
+            recordClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);
         RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);
 
         workers.put(recordClass, persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ProfileTaskCache.java
Patch:
@@ -43,7 +43,7 @@ public class ProfileTaskCache implements Service {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(ProfileTaskCache.class);
 
-    private final Cache<Integer, List<ProfileTask>> profileTaskDownstreamCache;
+    private final Cache<String, List<ProfileTask>> profileTaskDownstreamCache;
     private final Cache<String, ProfileTask> profileTaskIdCache;
 
     private final ModuleManager moduleManager;
@@ -80,7 +80,7 @@ private IProfileTaskQueryDAO getProfileTaskQueryDAO() {
     /**
      * query executable profile task
      */
-    public List<ProfileTask> getProfileTaskList(int serviceId) {
+    public List<ProfileTask> getProfileTaskList(String serviceId) {
         // read profile task list from cache only, use cache update timer mechanism
         List<ProfileTask> profileTaskList = profileTaskDownstreamCache.getIfPresent(serviceId);
         return profileTaskList;
@@ -109,7 +109,7 @@ public ProfileTask getProfileTaskById(String id) {
     /**
      * save service task list
      */
-    public void saveTaskList(int serviceId, List<ProfileTask> taskList) {
+    public void saveTaskList(String serviceId, List<ProfileTask> taskList) {
         if (taskList == null) {
             taskList = Collections.emptyList();
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/ConfigService.java
Patch:
@@ -20,18 +20,15 @@
 
 import lombok.Getter;
 import org.apache.skywalking.oap.server.core.CoreModuleConfig;
-import org.apache.skywalking.oap.server.core.DataTTLConfig;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 @Getter
 public class ConfigService implements Service {
     private final String gRPCHost;
     private final int gRPCPort;
-    private final DataTTLConfig dataTTLConfig;
 
     public ConfigService(CoreModuleConfig moduleConfig) {
         this.gRPCHost = moduleConfig.getGRPCHost();
         this.gRPCPort = moduleConfig.getGRPCPort();
-        this.dataTTLConfig = moduleConfig.getDataTTL();
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/ProfileTaskLogRecord.java
Patch:
@@ -50,15 +50,15 @@ public class ProfileTaskLogRecord extends Record {
     @Column(columnName = TASK_ID, storageOnly = true)
     private String taskId;
     @Column(columnName = INSTANCE_ID, storageOnly = true)
-    private int instanceId;
+    private String instanceId;
     @Column(columnName = OPERATION_TYPE, storageOnly = true)
     private int operationType;
     @Column(columnName = OPERATION_TIME)
     private long operationTime;
 
     @Override
     public String id() {
-        return getTaskId() + Const.ID_SPLIT + getInstanceId() + Const.ID_SPLIT + getOperationType() + Const.ID_SPLIT + getOperationTime();
+        return getTaskId() + Const.ID_CONNECTOR + getInstanceId() + Const.ID_CONNECTOR + getOperationType() + Const.ID_CONNECTOR + getOperationTime();
     }
 
     public static class Builder implements StorageBuilder<ProfileTaskLogRecord> {
@@ -67,7 +67,7 @@ public static class Builder implements StorageBuilder<ProfileTaskLogRecord> {
         public ProfileTaskLogRecord map2Data(Map<String, Object> dbMap) {
             final ProfileTaskLogRecord log = new ProfileTaskLogRecord();
             log.setTaskId((String) dbMap.get(TASK_ID));
-            log.setInstanceId(((Number) dbMap.get(INSTANCE_ID)).intValue());
+            log.setInstanceId((String) dbMap.get(INSTANCE_ID));
             log.setOperationType(((Number) dbMap.get(OPERATION_TYPE)).intValue());
             log.setOperationTime(((Number) dbMap.get(OPERATION_TIME)).longValue());
             log.setTimeBucket(((Number) dbMap.get(TIME_BUCKET)).longValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/ProfileTaskRecord.java
Patch:
@@ -53,11 +53,11 @@ public class ProfileTaskRecord extends NoneStream {
 
     @Override
     public String id() {
-        return getCreateTime() + Const.ID_SPLIT + getServiceId();
+        return getCreateTime() + Const.ID_CONNECTOR + getServiceId();
     }
 
     @Column(columnName = SERVICE_ID)
-    private int serviceId;
+    private String serviceId;
     @Column(columnName = ENDPOINT_NAME)
     private String endpointName;
     @Column(columnName = START_TIME)
@@ -78,7 +78,7 @@ public static class Builder implements StorageBuilder<ProfileTaskRecord> {
         @Override
         public ProfileTaskRecord map2Data(Map<String, Object> dbMap) {
             final ProfileTaskRecord record = new ProfileTaskRecord();
-            record.setServiceId(((Number) dbMap.get(SERVICE_ID)).intValue());
+            record.setServiceId((String) dbMap.get(SERVICE_ID));
             record.setEndpointName((String) dbMap.get(ENDPOINT_NAME));
             record.setStartTime(((Number) dbMap.get(START_TIME)).longValue());
             record.setDuration(((Number) dbMap.get(DURATION)).intValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/ProfileThreadSnapshotRecord.java
Patch:
@@ -68,7 +68,7 @@ public class ProfileThreadSnapshotRecord extends Record {
 
     @Override
     public String id() {
-        return getTaskId() + Const.ID_SPLIT + getSegmentId() + Const.ID_SPLIT + getSequence() + Const.ID_SPLIT;
+        return getTaskId() + Const.ID_CONNECTOR + getSegmentId() + Const.ID_CONNECTOR + getSequence() + Const.ID_CONNECTOR;
     }
 
     public static class Builder implements StorageBuilder<ProfileThreadSnapshotRecord> {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/analyze/ProfileStack.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Objects;
 
 import lombok.Data;
-import org.apache.skywalking.apm.network.language.profile.ThreadStack;
+import org.apache.skywalking.apm.network.language.profile.v3.ThreadStack;
 import org.apache.skywalking.oap.server.core.profile.ProfileThreadSnapshotRecord;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TopNRecordsQueryService.java
Patch:
@@ -44,7 +44,7 @@ private ITopNRecordsQueryDAO getTopNRecordsQueryDAO() {
         return topNRecordsQueryDAO;
     }
 
-    public List<TopNRecord> getTopNRecords(long startSecondTB, long endSecondTB, String metricName, int serviceId,
+    public List<TopNRecord> getTopNRecords(long startSecondTB, long endSecondTB, String metricName, String serviceId,
         int topN, Order order) throws IOException {
         return getTopNRecordsQueryDAO().getTopNRecords(startSecondTB, endSecondTB, metricName, serviceId, topN, order);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Database.java
Patch:
@@ -27,7 +27,7 @@
 @Getter
 @Setter
 public class Database {
-    private int id;
+    private String id;
     private String name;
     private String type;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/EndpointInfo.java
Patch:
@@ -26,6 +26,6 @@
 public class EndpointInfo {
     private String id;
     private String name;
-    private int serviceId;
+    private String serviceId;
     private String serviceName;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Log.java
Patch:
@@ -25,9 +25,9 @@
 @Getter
 public class Log {
     private String serviceName;
-    private int serviceId;
+    private String serviceId;
     private String serviceInstanceName;
-    private int serviceInstanceId;
+    private String serviceInstanceId;
     private String endpointId;
     private String endpointName;
     private String traceId;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/ProfileTask.java
Patch:
@@ -33,7 +33,7 @@
 public class ProfileTask {
 
     private String id;
-    private int serviceId;
+    private String serviceId;
     private String serviceName;
     private String endpointName;
     private long startTime;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/ProfileTaskLog.java
Patch:
@@ -38,7 +38,7 @@ public class ProfileTaskLog {
     private String taskId;
 
     // instance
-    private int instanceId;
+    private String instanceId;
     private String instanceName;
 
     // operation

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/ProfiledSpan.java
Patch:
@@ -18,11 +18,10 @@
 
 package org.apache.skywalking.oap.server.core.query.entity;
 
-import lombok.Getter;
-import lombok.Setter;
-
 import java.util.ArrayList;
 import java.util.List;
+import lombok.Getter;
+import lombok.Setter;
 
 @Getter
 @Setter
@@ -31,6 +30,7 @@ public class ProfiledSpan {
     private int spanId;
     private int parentSpanId;
     private String serviceCode;
+    private String serviceInstanceName;
     private long startTime;
     private long endTime;
     private String endpointName;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Service.java
Patch:
@@ -24,6 +24,6 @@
 @Getter
 @Setter
 public class Service {
-    private int id;
+    private String id;
     private String name;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/ServiceInstanceNode.java
Patch:
@@ -25,10 +25,10 @@
 @Getter
 public class ServiceInstanceNode {
 
-    private int id;
+    private String id;
     private String name;
-    private int serviceId;
+    private String serviceId;
     private String serviceName;
-    private String type;
+    private String type = "";
     private boolean isReal;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Span.java
Patch:
@@ -37,6 +37,8 @@ public class Span {
     @Setter
     private String serviceCode;
     @Setter
+    private String serviceInstanceName;
+    @Setter
     private long startTime;
     @Setter
     private long endTime;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Step.java
Patch:
@@ -19,5 +19,5 @@
 package org.apache.skywalking.oap.server.core.query.entity;
 
 public enum Step {
-    MONTH, DAY, HOUR, MINUTE, SECOND
+    DAY, HOUR, MINUTE, SECOND
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/client/Address.java
Patch:
@@ -55,7 +55,7 @@ public boolean equals(Object obj) {
 
     @Override
     public String toString() {
-        return host + Const.ID_SPLIT + port;
+        return host + Const.ID_CONNECTOR + port;
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DatabaseSlowStatement.java
Patch:
@@ -31,7 +31,7 @@ public class DatabaseSlowStatement extends Source {
     private String id;
     @Getter
     @Setter
-    private int databaseServiceId;
+    private String databaseServiceId;
     @Getter
     @Setter
     private String statement;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DetectPoint.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.source;
 
 import lombok.RequiredArgsConstructor;
-import org.apache.skywalking.apm.network.language.agent.SpanType;
+import org.apache.skywalking.apm.network.language.agent.v3.SpanType;
 
 @RequiredArgsConstructor
 public enum DetectPoint {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/EnvoyInstanceMetric.java
Patch:
@@ -47,11 +47,11 @@ public String getEntityId() {
      */
     @Getter
     @Setter
-    private int id;
+    private String id;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
-    private int serviceId;
+    private String serviceId;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Segment.java
Patch:
@@ -44,10 +44,10 @@ public String getEntityId() {
     private String traceId;
     @Setter
     @Getter
-    private int serviceId;
+    private String serviceId;
     @Setter
     @Getter
-    private int serviceInstanceId;
+    private String serviceInstanceId;
     @Setter
     @Getter
     private String endpointName;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceCLRCPU.java
Patch:
@@ -42,7 +42,7 @@ public String getEntityId() {
 
     @Getter
     @Setter
-    private int id;
+    private String id;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
@@ -54,7 +54,7 @@ public String getEntityId() {
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
-    private int serviceId;
+    private String serviceId;
     @Getter
     @Setter
     private double usePercent;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceCLRGC.java
Patch:
@@ -42,7 +42,7 @@ public String getEntityId() {
 
     @Getter
     @Setter
-    private int id;
+    private String id;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
@@ -54,7 +54,7 @@ public String getEntityId() {
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
-    private int serviceId;
+    private String serviceId;
     @Getter
     @Setter
     private long gen0CollectCount;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceCLRThread.java
Patch:
@@ -42,7 +42,7 @@ public String getEntityId() {
 
     @Getter
     @Setter
-    private int id;
+    private String id;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
@@ -54,7 +54,7 @@ public String getEntityId() {
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
-    private int serviceId;
+    private String serviceId;
     @Getter
     @Setter
     private long availableCompletionPortThreads;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMCPU.java
Patch:
@@ -39,7 +39,7 @@ public String getEntityId() {
 
     @Getter
     @Setter
-    private int id;
+    private String id;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
@@ -51,7 +51,7 @@ public String getEntityId() {
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
-    private int serviceId;
+    private String serviceId;
     @Getter
     @Setter
     private double usePercent;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMGC.java
Patch:
@@ -39,7 +39,7 @@ public String getEntityId() {
 
     @Getter
     @Setter
-    private int id;
+    private String id;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
@@ -51,7 +51,7 @@ public String getEntityId() {
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
-    private int serviceId;
+    private String serviceId;
     @Getter
     @Setter
     private GCPhrase phrase;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMMemory.java
Patch:
@@ -39,7 +39,7 @@ public String getEntityId() {
 
     @Getter
     @Setter
-    private int id;
+    private String id;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
@@ -51,7 +51,7 @@ public String getEntityId() {
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
-    private int serviceId;
+    private String serviceId;
     @Getter
     @Setter
     private boolean heapStatus;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMMemoryPool.java
Patch:
@@ -39,7 +39,7 @@ public String getEntityId() {
 
     @Getter
     @Setter
-    private int id;
+    private String id;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
@@ -51,7 +51,7 @@ public String getEntityId() {
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
-    private int serviceId;
+    private String serviceId;
     @Getter
     @Setter
     private MemoryPoolType poolType;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/IHistoryDeleteDAO.java
Patch:
@@ -29,9 +29,10 @@ public interface IHistoryDeleteDAO extends DAO {
     /**
      * Delete the data
      *
-     * @param model data entity.
+     * @param model                data entity.
      * @param timeBucketColumnName column name represents the time. Right now, always {@link Metrics#TIME_BUCKET}
+     * @param ttl                 the number of days should be kept
      * @throws IOException when error happens in the deletion process.
      */
-    void deleteHistory(Model model, String timeBucketColumnName) throws IOException;
+    void deleteHistory(Model model, String timeBucketColumnName, int ttl) throws IOException;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageDAO.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.skywalking.oap.server.core.analysis.config.NoneStream;
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
-import org.apache.skywalking.oap.server.core.register.RegisterSource;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 /**
@@ -31,8 +30,6 @@ public interface StorageDAO extends Service {
 
     IMetricsDAO newMetricsDao(StorageBuilder<Metrics> storageBuilder);
 
-    IRegisterDAO newRegisterDao(StorageBuilder<RegisterSource> storageBuilder);
-
     IRecordDAO newRecordDao(StorageBuilder<Record> storageBuilder);
 
     INoneStreamDAO newNoneStreamDao(StorageBuilder<NoneStream> storageBuilder);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/profile/IProfileTaskQueryDAO.java
Patch:
@@ -37,7 +37,7 @@ public interface IProfileTaskQueryDAO extends DAO {
      * @param endTimeBucket   time bucket small than or equals, nullable
      * @param limit           limit count, if null means query all
      */
-    List<ProfileTask> getTaskList(final Integer serviceId, final String endpointName, final Long startTimeBucket,
+    List<ProfileTask> getTaskList(final String serviceId, final String endpointName, final Long startTimeBucket,
         final Long endTimeBucket, final Integer limit) throws IOException;
 
     /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetadataQueryDAO.java
Patch:
@@ -45,7 +45,7 @@ List<Service> searchServices(final long startTimestamp, final long endTimestamp,
 
     Service searchService(final String serviceCode) throws IOException;
 
-    List<Endpoint> searchEndpoint(final String keyword, final int serviceId, final int limit) throws IOException;
+    List<Endpoint> searchEndpoint(final String keyword, final String serviceId, final int limit) throws IOException;
 
     List<ServiceInstance> getServiceInstances(final long startTimestamp, final long endTimestamp,
         final String serviceId) throws IOException;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITopNRecordsQueryDAO.java
Patch:
@@ -25,6 +25,6 @@
 import org.apache.skywalking.oap.server.library.module.Service;
 
 public interface ITopNRecordsQueryDAO extends Service {
-    List<TopNRecord> getTopNRecords(long startSecondTB, long endSecondTB, String metricName, int serviceId, int topN,
+    List<TopNRecord> getTopNRecords(long startSecondTB, long endSecondTB, String metricName, String serviceId, int topN,
         Order order) throws IOException;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITraceQueryDAO.java
Patch:
@@ -30,7 +30,7 @@
 public interface ITraceQueryDAO extends Service {
 
     TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long minDuration, long maxDuration,
-        String endpointName, int serviceId, int serviceInstanceId, String endpointId, String traceId, int limit, int from,
+        String endpointName, String serviceId, String serviceInstanceId, String endpointId, String traceId, int limit, int from,
         TraceState traceState, QueryOrder queryOrder) throws IOException;
 
     List<SegmentRecord> queryByTraceId(String traceId) throws IOException;

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java
Patch:
@@ -26,6 +26,6 @@ public class CoreModuleTest {
     public void testOpenServiceList() {
         CoreModule coreModule = new CoreModule();
 
-        Assert.assertEquals(31, coreModule.services().length);
+        Assert.assertEquals(26, coreModule.services().length);
     }
 }

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumeDriver.java
Patch:
@@ -34,7 +34,7 @@ public ConsumeDriver(String name, Channels<T> channels, Class<? extends IConsume
         long consumeCycle) {
         this(channels, num);
         for (int i = 0; i < num; i++) {
-            consumerThreads[i] = new ConsumerThread("DataCarrier." + name + ".Consumser." + i + ".Thread", getNewConsumerInstance(consumerClass), consumeCycle);
+            consumerThreads[i] = new ConsumerThread("DataCarrier." + name + ".Consumer." + i + ".Thread", getNewConsumerInstance(consumerClass), consumeCycle);
             consumerThreads[i].setDaemon(true);
         }
     }
@@ -43,7 +43,7 @@ public ConsumeDriver(String name, Channels<T> channels, IConsumer<T> prototype,
         this(channels, num);
         prototype.init();
         for (int i = 0; i < num; i++) {
-            consumerThreads[i] = new ConsumerThread("DataCarrier." + name + ".Consumser." + i + ".Thread", prototype, consumeCycle);
+            consumerThreads[i] = new ConsumerThread("DataCarrier." + name + ".Consumer." + i + ".Thread", prototype, consumeCycle);
             consumerThreads[i].setDaemon(true);
         }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/NetworkAddressDictionary.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.skywalking.apm.network.register.v2.NetAddresses;
 import org.apache.skywalking.apm.network.register.v2.RegisterGrpc;
 
-import static org.apache.skywalking.apm.agent.core.conf.Config.Dictionary.SERVICE_CODE_BUFFER_SIZE;
+import static org.apache.skywalking.apm.agent.core.conf.Config.Dictionary.NETWORK_ADDRESS_BUFFER_SIZE;
 
 /**
  * Map of network address id to network literal address, which is from the collector side.
@@ -41,7 +41,7 @@ public PossibleFound find(String networkAddress) {
         if (applicationId != null) {
             return new Found(applicationId);
         } else {
-            if (serviceDictionary.size() + unRegisterServices.size() < SERVICE_CODE_BUFFER_SIZE) {
+            if (serviceDictionary.size() + unRegisterServices.size() < NETWORK_ADDRESS_BUFFER_SIZE) {
                 unRegisterServices.add(networkAddress);
             }
             return new NotFound();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -139,6 +139,9 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {
         if (moduleConfig.isActiveExtraModelColumns()) {
             DefaultScopeDefine.activeExtraModelColumns();
         }
+        if (moduleConfig.getEndpointNameMaxLength() > 0) {
+            CoreModule.setEndpointNameMaxLength(moduleConfig.getEndpointNameMaxLength());
+        }
 
         StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(getManager());
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/INewModel.java
Patch:
@@ -30,5 +30,5 @@ public interface INewModel extends Service {
      *
      * @return the created new model
      */
-    Model add(Class aClass, int scopeId, Storage storage, boolean record);
+    Model add(Class<?> aClass, int scopeId, Storage storage, boolean record);
 }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TableInstaller.java
Patch:
@@ -92,7 +92,7 @@ protected String getColumnType(ModelColumn column) {
         } else if (String.class.equals(type)) {
             return "VARCHAR(" + column.getLength() + ")";
         } else if (IntKeyLongValueHashMap.class.equals(type)) {
-            return "MEDIUMTEXT";
+            return "VARCHAR(20000)";
         } else if (byte[].class.equals(type)) {
             return "MEDIUMTEXT";
         } else {

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumn.java
Patch:
@@ -32,15 +32,17 @@ public class SourceColumn {
     private Class<?> type;
     private String typeName;
     private boolean isID;
+    private int length;
     private String fieldSetter;
     private String fieldGetter;
 
-    public SourceColumn(String fieldName, String columnName, Class<?> type, boolean isID) {
+    public SourceColumn(String fieldName, String columnName, Class<?> type, boolean isID, int length) {
         this.fieldName = fieldName;
         this.columnName = columnName;
         this.type = type;
         this.typeName = type.getName();
         this.isID = isID;
+        this.length = length;
 
         this.fieldGetter = ClassMethodUtil.toGetMethod(fieldName);
         this.fieldSetter = ClassMethodUtil.toSetMethod(fieldName);

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumnsFactory.java
Patch:
@@ -29,8 +29,9 @@ public static List<SourceColumn> getColumns(String source) {
 
         List<ScopeDefaultColumn> columns = DefaultScopeDefine.getDefaultColumns(source);
         for (ScopeDefaultColumn defaultColumn : columns) {
-            sourceColumns.add(new SourceColumn(defaultColumn.getFieldName(), defaultColumn.getColumnName(), defaultColumn
-                .getType(), defaultColumn.isID()));
+            sourceColumns.add(
+                new SourceColumn(defaultColumn.getFieldName(), defaultColumn.getColumnName(), defaultColumn
+                    .getType(), defaultColumn.isID(), defaultColumn.getLength()));
         }
         return sourceColumns;
     }

File: oap-server/oal-rt/src/test/resources/expectedFiles/MetricsImplementorExpected.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
-import org.apache.skywalking.oap.server.core.storage.annotation.IDColumn;
 
 /**
  * This class is auto generated. Please don't change this class manually.
@@ -43,7 +42,6 @@ public class ServiceAvgMetrics extends LongAvgMetrics implements WithMetadata {
     @Setter
     @Getter
     @Column(columnName = "entity_id")
-    @IDColumn
     private java.lang.String entityId;
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java
Patch:
@@ -54,11 +54,11 @@ public String id() {
 
     @Column(columnName = SCOPE)
     private int scope;
-    @Column(columnName = NAME)
+    @Column(columnName = NAME, storageOnly = true)
     private String name;
-    @Column(columnName = ID0)
+    @Column(columnName = ID0, storageOnly = true)
     private String id0;
-    @Column(columnName = ID1)
+    @Column(columnName = ID1, storageOnly = true)
     private String id1;
     @Column(columnName = START_TIME)
     private long startTime;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetrics.java
Patch:
@@ -48,15 +48,15 @@ public abstract class ApdexMetrics extends Metrics implements IntValueHolder {
 
     @Getter
     @Setter
-    @Column(columnName = TOTAL_NUM)
+    @Column(columnName = TOTAL_NUM, storageOnly = true)
     private int totalNum;
     @Getter
     @Setter
-    @Column(columnName = S_NUM)
+    @Column(columnName = S_NUM, storageOnly = true)
     private int sNum;
     @Getter
     @Setter
-    @Column(columnName = T_NUM)
+    @Column(columnName = T_NUM, storageOnly = true)
     private int tNum;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CPMMetrics.java
Patch:
@@ -38,7 +38,7 @@ public abstract class CPMMetrics extends Metrics implements LongValueHolder {
     private long value;
     @Getter
     @Setter
-    @Column(columnName = TOTAL)
+    @Column(columnName = TOTAL, storageOnly = true)
     private long total;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleAvgMetrics.java
Patch:
@@ -36,11 +36,11 @@ public abstract class DoubleAvgMetrics extends Metrics implements DoubleValueHol
 
     @Getter
     @Setter
-    @Column(columnName = SUMMATION)
+    @Column(columnName = SUMMATION, storageOnly = true)
     private double summation;
     @Getter
     @Setter
-    @Column(columnName = COUNT)
+    @Column(columnName = COUNT, storageOnly = true)
     private long count;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/IntKeyLongValueHashMap.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.List;
 import java.util.Map;
 import org.apache.skywalking.oap.server.core.Const;
-import org.apache.skywalking.oap.server.core.storage.type.StorageDataType;
+import org.apache.skywalking.oap.server.core.storage.type.StorageDataComplexObject;
 
-public class IntKeyLongValueHashMap extends HashMap<Integer, IntKeyLongValue> implements StorageDataType {
+public class IntKeyLongValueHashMap extends HashMap<Integer, IntKeyLongValue> implements StorageDataComplexObject {
 
     public IntKeyLongValueHashMap() {
         super();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetrics.java
Patch:
@@ -36,11 +36,11 @@ public abstract class LongAvgMetrics extends Metrics implements LongValueHolder
 
     @Getter
     @Setter
-    @Column(columnName = SUMMATION)
+    @Column(columnName = SUMMATION, storageOnly = true)
     private long summation;
     @Getter
     @Setter
-    @Column(columnName = COUNT)
+    @Column(columnName = COUNT, storageOnly = true)
     private long count;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PxxMetrics.java
Patch:
@@ -46,11 +46,11 @@ public abstract class PxxMetrics extends GroupMetrics implements IntValueHolder
     private int value;
     @Getter
     @Setter
-    @Column(columnName = PRECISION)
+    @Column(columnName = PRECISION, storageOnly = true)
     private int precision;
     @Getter
     @Setter
-    @Column(columnName = DETAIL_GROUP)
+    @Column(columnName = DETAIL_GROUP, storageOnly = true)
     private IntKeyLongValueHashMap detailGroup;
 
     private final int percentileRank;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java
Patch:
@@ -35,7 +35,7 @@ public abstract class TopN extends Record implements ComparableStorageData {
 
     @Getter
     @Setter
-    @Column(columnName = STATEMENT, content = true)
+    @Column(columnName = STATEMENT, storageOnly = true)
     private String statement;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/NoneStreamingProcessor.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.skywalking.oap.server.core.storage.StorageDAO;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.annotation.Storage;
-import org.apache.skywalking.oap.server.core.storage.model.IModelSetter;
+import org.apache.skywalking.oap.server.core.storage.model.INewModel;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;
 
@@ -72,8 +72,8 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
                                                             .getSimpleName() + " none stream record DAO failure.", e);
         }
 
-        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);
-        Model model = modelSetter.putIfAbsent(streamClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);
+        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);
+        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);
 
         final NoneStreamPersistentWorker persistentWorker = new NoneStreamPersistentWorker(moduleDefineHolder, model, noneStream);
         workers.put(streamClass, persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.skywalking.oap.server.core.storage.StorageDAO;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.annotation.Storage;
-import org.apache.skywalking.oap.server.core.storage.model.IModelSetter;
+import org.apache.skywalking.oap.server.core.storage.model.INewModel;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;
 
@@ -66,8 +66,8 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
             throw new UnexpectedException("Create " + stream.builder().getSimpleName() + " record DAO failure.", e);
         }
 
-        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);
-        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);
+        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);
+        Model model = modelSetter.add(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);
         RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, recordDAO);
 
         workers.put(recordClass, persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.skywalking.oap.server.core.storage.StorageDAO;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.annotation.Storage;
-import org.apache.skywalking.oap.server.core.storage.model.IModelSetter;
+import org.apache.skywalking.oap.server.core.storage.model.INewModel;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;
 
@@ -77,8 +77,8 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
                                                             .getSimpleName() + " top n record DAO failure.", e);
         }
 
-        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);
-        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);
+        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);
+        Model model = modelSetter.add(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);
 
         TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);
         persistentWorkers.add(persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/ProfileTaskLogRecord.java
Patch:
@@ -47,11 +47,11 @@ public class ProfileTaskLogRecord extends Record {
     public static final String OPERATION_TYPE = "operation_type";
     public static final String OPERATION_TIME = "operation_time";
 
-    @Column(columnName = TASK_ID)
+    @Column(columnName = TASK_ID, storageOnly = true)
     private String taskId;
-    @Column(columnName = INSTANCE_ID)
+    @Column(columnName = INSTANCE_ID, storageOnly = true)
     private int instanceId;
-    @Column(columnName = OPERATION_TYPE)
+    @Column(columnName = OPERATION_TYPE, storageOnly = true)
     private int operationType;
     @Column(columnName = OPERATION_TIME)
     private long operationTime;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/InventoryStreamProcessor.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.skywalking.oap.server.core.storage.StorageDAO;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.annotation.Storage;
-import org.apache.skywalking.oap.server.core.storage.model.IModelSetter;
+import org.apache.skywalking.oap.server.core.storage.model.INewModel;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.core.worker.IWorkerInstanceSetter;
 import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;
@@ -82,8 +82,8 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream,
             throw new UnexpectedException("Create " + stream.builder().getSimpleName() + " register DAO failure.", e);
         }
 
-        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);
-        Model model = modelSetter.putIfAbsent(
+        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);
+        Model model = modelSetter.add(
             inventoryClass, stream.scopeId(), new Storage(stream.name(), false, false, Downsampling.None), false);
 
         RegisterPersistentWorker persistentWorker = new RegisterPersistentWorker(

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/MultipleQueryUnifiedIndex.java
Patch:
@@ -24,9 +24,10 @@
 import java.lang.annotation.Target;
 
 /**
- * IDColumn is the plus annotation for {@link Column}, declares this column is ID for the entity, besides time(bucket).
+ * The support of the multiple {@link QueryUnifiedIndex}s on one field.
  */
 @Target({ElementType.FIELD})
 @Retention(RetentionPolicy.RUNTIME)
-public @interface IDColumn {
+public @interface MultipleQueryUnifiedIndex {
+    QueryUnifiedIndex[] value();
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelInstaller.java
Patch:
@@ -41,9 +41,9 @@ public ModelInstaller(ModuleManager moduleManager) {
      * Entrance of the storage entity installation work.
      */
     public final void install(Client client) throws StorageException {
-        IModelGetter modelGetter = moduleManager.find(CoreModule.NAME).provider().getService(IModelGetter.class);
+        IModelManager modelGetter = moduleManager.find(CoreModule.NAME).provider().getService(IModelManager.class);
 
-        List<Model> models = modelGetter.getModels();
+        List<Model> models = modelGetter.allModels();
 
         if (RunningMode.isNoInitMode()) {
             for (Model model : models) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/DataTTLKeeperTimer.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;
 import org.apache.skywalking.oap.server.core.storage.IHistoryDeleteDAO;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
-import org.apache.skywalking.oap.server.core.storage.model.IModelGetter;
+import org.apache.skywalking.oap.server.core.storage.model.IModelManager;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
@@ -77,8 +77,8 @@ private void delete() {
         }
 
         log.info("Beginning to remove expired metrics from the storage.");
-        IModelGetter modelGetter = moduleManager.find(CoreModule.NAME).provider().getService(IModelGetter.class);
-        List<Model> models = modelGetter.getModels();
+        IModelManager modelGetter = moduleManager.find(CoreModule.NAME).provider().getService(IModelManager.class);
+        List<Model> models = modelGetter.allModels();
         models.forEach(model -> {
             if (model.isDeleteHistory()) {
                 execute(model);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/EsDAO.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.query.sql.Where;
 import org.apache.skywalking.oap.server.core.storage.AbstractDAO;
-import org.apache.skywalking.oap.server.core.storage.type.StorageDataType;
+import org.apache.skywalking.oap.server.core.storage.type.StorageDataComplexObject;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
@@ -62,8 +62,8 @@ protected XContentBuilder map2builder(Map<String, Object> objectMap) throws IOEx
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject();
         for (String key : objectMap.keySet()) {
             Object value = objectMap.get(key);
-            if (value instanceof StorageDataType) {
-                builder.field(key, ((StorageDataType) value).toStorageData());
+            if (value instanceof StorageDataComplexObject) {
+                builder.field(key, ((StorageDataComplexObject) value).toStorageData());
             } else {
                 builder.field(key, value);
             }

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/InfluxStorageProvider.java
Patch:
@@ -149,8 +149,10 @@ public void start() throws ServiceNotProvidedException, ModuleStartException {
             ModelInstaller installer;
             if (config.getMetabaseType().equalsIgnoreCase("h2")) {
                 installer = new InfluxDBH2MetaDBInstaller(getManager());
-            } else {
+            } else if (config.getMetabaseType().equalsIgnoreCase("mysql")) {
                 installer = new InfluxDBMySQLMetaDBInstaller(getManager());
+            } else {
+                throw new IllegalArgumentException("Unavailable metabase type, " + config.getMetabaseType());
             }
             installer.install(client);
             new H2RegisterLockInstaller().install(client, lockDAO);

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/InfluxInsertRequest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.skywalking.oap.server.core.storage.StorageData;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.core.storage.model.ModelColumn;
-import org.apache.skywalking.oap.server.core.storage.type.StorageDataType;
+import org.apache.skywalking.oap.server.core.storage.type.StorageDataComplexObject;
 import org.apache.skywalking.oap.server.library.client.request.InsertRequest;
 import org.apache.skywalking.oap.server.library.client.request.UpdateRequest;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxClient;
@@ -47,10 +47,10 @@ public InfluxInsertRequest(Model model, StorageData storageData, StorageBuilder
         for (ModelColumn column : model.getColumns()) {
             Object value = objectMap.get(column.getColumnName().getName());
 
-            if (value instanceof StorageDataType) {
+            if (value instanceof StorageDataComplexObject) {
                 fields.put(
                     column.getColumnName().getStorageName(),
-                    ((StorageDataType) value).toStorageData()
+                    ((StorageDataComplexObject) value).toStorageData()
                 );
             } else {
                 fields.put(column.getColumnName().getStorageName(), value);

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/MetricsDAO.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.core.storage.model.ModelColumn;
-import org.apache.skywalking.oap.server.core.storage.type.StorageDataType;
+import org.apache.skywalking.oap.server.core.storage.type.StorageDataComplexObject;
 import org.apache.skywalking.oap.server.library.client.request.InsertRequest;
 import org.apache.skywalking.oap.server.library.client.request.UpdateRequest;
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxClient;
@@ -81,8 +81,8 @@ public List<Metrics> multiGet(Model model, List<String> ids) throws IOException
 
             for (int i = 1; i < columns.size(); i++) {
                 Object value = values.get(i);
-                if (value instanceof StorageDataType) {
-                    value = ((StorageDataType) value).toStorageData();
+                if (value instanceof StorageDataComplexObject) {
+                    value = ((StorageDataComplexObject) value).toStorageData();
                 }
 
                 data.put(storageAndColumnNames.get(columns.get(i)), value);

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/TraceQuery.java
Patch:
@@ -98,7 +98,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,
             recallQuery.and(lte(SegmentRecord.LATENCY, maxDuration));
         }
         if (!Strings.isNullOrEmpty(endpointName)) {
-            recallQuery.and(contains(SegmentRecord.ENDPOINT_NAME, endpointName));
+            recallQuery.and(contains(SegmentRecord.ENDPOINT_NAME, endpointName.replaceAll("/", "\\\\/")));
         }
         if (serviceId != 0) {
             recallQuery.and(eq(RecordDAO.TAG_SERVICE_ID, String.valueOf(serviceId)));

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Constants.java
Patch:
@@ -22,4 +22,6 @@ public class Constants {
     public static String PATH_SEPARATOR = System.getProperty("file.separator", "/");
 
     public static String LINE_SEPARATOR = System.getProperty("line.separator", "\n");
+
+    public static String EMPTY_STRING = "";
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/ContextManagerTest.java
Patch:
@@ -141,7 +141,6 @@ public void createMultipleEntrySpan() {
         TraceSegmentRef ref = actualSegment.getRefs().get(0);
         MatcherAssert.assertThat(TraceSegmentRefHelper.getPeerHost(ref), is("127.0.0.1:8080"));
         assertThat(ref.getEntryEndpointName(), is("/portal/"));
-        assertThat(ref.getEntryEndpointId(), is(0));
 
         List<AbstractTracingSpan> spanList = SegmentHelper.getSpan(actualSegment);
         assertThat(spanList.size(), is(2));

File: oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/grpc/GRPCExporterProvider.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.skywalking.oap.server.exporter.provider.grpc;
 
 import org.apache.skywalking.oap.server.core.CoreModule;
-import org.apache.skywalking.oap.server.core.cache.EndpointInventoryCache;
 import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;
 import org.apache.skywalking.oap.server.core.cache.ServiceInventoryCache;
 import org.apache.skywalking.oap.server.core.exporter.ExporterModule;
@@ -67,7 +66,6 @@ public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleSta
         ModuleServiceHolder serviceHolder = getManager().find(CoreModule.NAME).provider();
         exporter.setServiceInventoryCache(serviceHolder.getService(ServiceInventoryCache.class));
         exporter.setServiceInstanceInventoryCache(serviceHolder.getService(ServiceInstanceInventoryCache.class));
-        exporter.setEndpointInventoryCache(serviceHolder.getService(EndpointInventoryCache.class));
 
         exporter.initSubscriptionList();
     }

File: oap-server/exporter/src/test/java/org/apache/skywalking/oap/server/exporter/provider/grpc/GRPCExporterProviderTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Iterator;
 import java.util.ServiceLoader;
 import org.apache.skywalking.oap.server.core.CoreModule;
-import org.apache.skywalking.oap.server.core.cache.EndpointInventoryCache;
 import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;
 import org.apache.skywalking.oap.server.core.cache.ServiceInventoryCache;
 import org.apache.skywalking.oap.server.core.exporter.ExporterModule;
@@ -97,7 +96,6 @@ public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleSta
 
         when(serviceHolder.getService(ServiceInventoryCache.class)).thenReturn(null);
         when(serviceHolder.getService(ServiceInstanceInventoryCache.class)).thenReturn(null);
-        when(serviceHolder.getService(EndpointInventoryCache.class)).thenReturn(null);
 
         doNothing().when(exporter).initSubscriptionList();
 

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPChookCallbackTest.java
Patch:
@@ -66,8 +66,8 @@ public void testGauchoSettingClean() {
 
     private void mockAlarmMessage() {
         AlarmMessage alarmMessage = new AlarmMessage();
-        alarmMessage.setId0(1);
-        alarmMessage.setId1(2);
+        alarmMessage.setId0("1");
+        alarmMessage.setId1("2");
         alarmMessage.setScope(Scope.Service.name());
         alarmMessage.setName("mock alarm message");
         alarmMessage.setAlarmMessage("message");

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java
Patch:
@@ -21,14 +21,15 @@
 public class Const {
     public static final int NONE = 0;
     public static final String ID_SPLIT = "_";
+    public static final String ID_PARSER_SPLIT = "\\_";
     public static final String LINE = "-";
     public static final String SPACE = " ";
     public static final String KEY_VALUE_SPLIT = ",";
     public static final String ARRAY_SPLIT = "|";
     public static final String ARRAY_PARSER_SPLIT = "\\|";
     public static final int USER_SERVICE_ID = 1;
     public static final int USER_INSTANCE_ID = 1;
-    public static final int USER_ENDPOINT_ID = 1;
+    public static final String USER_ENDPOINT_NAME = "User";
     public static final int INEXISTENCE_ENDPOINT_ID = -1;
     public static final String USER_CODE = "User";
     public static final String SEGMENT_SPAN_SPLIT = "S";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java
Patch:
@@ -34,8 +34,8 @@ public class AlarmMessage {
     private int scopeId;
     private String scope;
     private String name;
-    private int id0;
-    private int id1;
+    private String id0;
+    private String id1;
     private String ruleName;
     private String alarmMessage;
     private long startTime;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/MetaInAlarm.java
Patch:
@@ -36,12 +36,12 @@ public abstract class MetaInAlarm {
      *
      * @return the primary id.
      */
-    public abstract int getId0();
+    public abstract String getId0();
 
     /**
      * Only exist in multiple IDs case, Such as ServiceRelation, id1 represents the dest service id
      */
-    public abstract int getId1();
+    public abstract String getId1();
 
     @Override
     public boolean equals(Object o) {
@@ -50,7 +50,7 @@ public boolean equals(Object o) {
         if (o == null || getClass() != o.getClass())
             return false;
         MetaInAlarm that = (MetaInAlarm) o;
-        return getId0() == that.getId0() && getId1() == that.getId1();
+        return getId0().equals(that.getId0()) && getId1().equals(that.getId1());
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/HTTPAccessLogDispatcher.java
Patch:
@@ -32,6 +32,7 @@ public void dispatch(HTTPAccessLog source) {
         record.setServiceId(source.getServiceId());
         record.setServiceInstanceId(source.getServiceInstanceId());
         record.setEndpointId(source.getEndpointId());
+        record.setEndpointName(source.getEndpointName());
         record.setTraceId(source.getTraceId());
         record.setIsError(source.getIsError());
         record.setStatusCode(source.getStatusCode());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -73,7 +73,7 @@ public class SegmentRecord extends Record {
     @Setter
     @Getter
     @Column(columnName = ENDPOINT_ID)
-    private int endpointId;
+    private String endpointId;
     @Setter
     @Getter
     @Column(columnName = START_TIME)
@@ -137,7 +137,7 @@ public SegmentRecord map2Data(Map<String, Object> dbMap) {
             record.setServiceId(((Number) dbMap.get(SERVICE_ID)).intValue());
             record.setServiceInstanceId(((Number) dbMap.get(SERVICE_INSTANCE_ID)).intValue());
             record.setEndpointName((String) dbMap.get(ENDPOINT_NAME));
-            record.setEndpointId(((Number) dbMap.get(ENDPOINT_ID)).intValue());
+            record.setEndpointId((String) dbMap.get(ENDPOINT_ID));
             record.setStartTime(((Number) dbMap.get(START_TIME)).longValue());
             record.setEndTime(((Number) dbMap.get(END_TIME)).longValue());
             record.setLatency(((Number) dbMap.get(LATENCY)).intValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Endpoint.java
Patch:
@@ -24,6 +24,6 @@
 @Getter
 @Setter
 public class Endpoint {
-    private int id;
+    private String id;
     private String name;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/EndpointInfo.java
Patch:
@@ -24,7 +24,7 @@
 @Getter
 @Setter
 public class EndpointInfo {
-    private int id;
+    private String id;
     private String name;
     private int serviceId;
     private String serviceName;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Log.java
Patch:
@@ -28,8 +28,8 @@ public class Log {
     private int serviceId;
     private String serviceInstanceName;
     private int serviceInstanceId;
+    private String endpointId;
     private String endpointName;
-    private int endpointId;
     private String traceId;
     private String timestamp;
     private boolean isError;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Node.java
Patch:
@@ -24,7 +24,7 @@
 @Getter
 @Setter
 public class Node {
-    private int id;
+    private String id;
     private String name;
     private String type;
     private boolean isReal;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/AbstractLog.java
Patch:
@@ -30,7 +30,8 @@ public abstract class AbstractLog extends Source {
     private long timestamp;
     private int serviceId;
     private int serviceInstanceId;
-    private int endpointId;
+    private String endpointId;
+    private String endpointName;
     private String traceId;
     private int isError;
     private String statusCode;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -54,7 +54,7 @@ public class DefaultScopeDefine {
     public static final int ALARM = 13;
     public static final int SERVICE_INVENTORY = 14;
     public static final int SERVICE_INSTANCE_INVENTORY = 15;
-    public static final int ENDPOINT_INVENTORY = 16;
+    public static final int ENDPOINT_TRAFFIC = 16;
     public static final int DATABASE_ACCESS = 17;
     public static final int DATABASE_SLOW_STATEMENT = 18;
     public static final int SERVICE_INSTANCE_CLR_CPU = 19;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Segment.java
Patch:
@@ -53,7 +53,7 @@ public String getEntityId() {
     private String endpointName;
     @Setter
     @Getter
-    private int endpointId;
+    private String endpointId;
     @Setter
     @Getter
     private long startTime;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.skywalking.oap.server.core.storage;
 
-import org.apache.skywalking.oap.server.core.storage.cache.IEndpointInventoryCacheDAO;
 import org.apache.skywalking.oap.server.core.storage.cache.INetworkAddressInventoryCacheDAO;
 import org.apache.skywalking.oap.server.core.storage.cache.IServiceInstanceInventoryCacheDAO;
 import org.apache.skywalking.oap.server.core.storage.cache.IServiceInventoryCacheDAO;
@@ -56,7 +55,6 @@ public Class[] services() {
             IHistoryDeleteDAO.class,
             IServiceInventoryCacheDAO.class,
             IServiceInstanceInventoryCacheDAO.class,
-            IEndpointInventoryCacheDAO.class,
             INetworkAddressInventoryCacheDAO.class,
             ITopologyQueryDAO.class,
             IMetricsQueryDAO.class,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ILogQueryDAO.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.skywalking.oap.server.library.module.Service;
 
 public interface ILogQueryDAO extends Service {
-    Logs queryLogs(final String metricName, int serviceId, int serviceInstanceId, int endpointId, String traceId,
+    Logs queryLogs(final String metricName, int serviceId, int serviceInstanceId, String endpointId, String traceId,
         LogState state, String stateCode, Pagination paging, int from, int limit, final long startTB,
         final long endTB) throws IOException;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetadataQueryDAO.java
Patch:
@@ -45,7 +45,7 @@ List<Service> searchServices(final long startTimestamp, final long endTimestamp,
 
     Service searchService(final String serviceCode) throws IOException;
 
-    List<Endpoint> searchEndpoint(final String keyword, final String serviceId, final int limit) throws IOException;
+    List<Endpoint> searchEndpoint(final String keyword, final int serviceId, final int limit) throws IOException;
 
     List<ServiceInstance> getServiceInstances(final long startTimestamp, final long endTimestamp,
         final String serviceId) throws IOException;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITopologyQueryDAO.java
Patch:
@@ -79,5 +79,5 @@ List<Call.CallDetail> loadClientSideServiceInstanceRelations(int clientServiceId
     List<Call.CallDetail> loadSpecifiedDestOfServerSideEndpointRelations(Downsampling downsampling,
                                                                          long startTB,
                                                                          long endTB,
-                                                                         int destEndpointId) throws IOException;
+                                                                         String destEndpointId) throws IOException;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITraceQueryDAO.java
Patch:
@@ -30,7 +30,7 @@
 public interface ITraceQueryDAO extends Service {
 
     TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long minDuration, long maxDuration,
-        String endpointName, int serviceId, int serviceInstanceId, int endpointId, String traceId, int limit, int from,
+        String endpointName, int serviceId, int serviceInstanceId, String endpointId, String traceId, int limit, int from,
         TraceState traceState, QueryOrder queryOrder) throws IOException;
 
     List<SegmentRecord> queryByTraceId(String traceId) throws IOException;

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TopologyQuery.java
Patch:
@@ -81,7 +81,7 @@ public ServiceInstanceTopology getServiceInstanceTopology(final int clientServic
         );
     }
 
-    public Topology getEndpointTopology(final int endpointId, final Duration duration) throws IOException {
+    public Topology getEndpointTopology(final String endpointId, final Duration duration) throws IOException {
         long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());
         long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());
 

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TraceQuery.java
Patch:
@@ -75,7 +75,7 @@ public TraceBrief queryBasicTraces(final TraceQueryCondition condition) throws I
         int maxDuration = condition.getMaxTraceDuration();
         String endpointName = condition.getEndpointName();
         int serviceId = StringUtils.isEmpty(condition.getServiceId()) ? 0 : Integer.parseInt(condition.getServiceId());
-        int endpointId = StringUtils.isEmpty(condition.getEndpointId()) ? 0 : Integer.parseInt(condition.getEndpointId());
+        String endpointId = condition.getEndpointId();
         int serviceInstanceId = StringUtils.isEmpty(condition.getServiceInstanceId()) ? 0 : Integer.parseInt(condition.getServiceInstanceId());
         TraceState traceState = condition.getTraceState();
         QueryOrder queryOrder = condition.getQueryOrder();

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/LogQueryCondition.java
Patch:
@@ -29,7 +29,7 @@ public class LogQueryCondition {
     private String metricName;
     private int serviceId;
     private int serviceInstanceId;
-    private int endpointId;
+    private String endpointId;
     private String traceId;
     private LogState state;
     private String stateCode;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AggregationQueryEsDAO.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.query.entity.Order;
 import org.apache.skywalking.oap.server.core.query.entity.TopNEntity;
-import org.apache.skywalking.oap.server.core.register.EndpointInventory;
+import org.apache.skywalking.oap.server.core.analysis.manual.endpoint.EndpointTraffic;
 import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;
 import org.apache.skywalking.oap.server.core.storage.model.ModelName;
 import org.apache.skywalking.oap.server.core.storage.query.IAggregationQueryDAO;
@@ -104,7 +104,7 @@ public List<TopNEntity> getEndpointTopN(int serviceId, String indName, String va
         sourceBuilder.query(boolQueryBuilder);
 
         boolQueryBuilder.must().add(QueryBuilders.rangeQuery(Metrics.TIME_BUCKET).lte(endTB).gte(startTB));
-        boolQueryBuilder.must().add(QueryBuilders.termQuery(EndpointInventory.SERVICE_ID, serviceId));
+        boolQueryBuilder.must().add(QueryBuilders.termQuery(EndpointTraffic.SERVICE_ID, serviceId));
 
         return aggregation(indexName, valueCName, sourceBuilder, topN, order);
     }

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java
Patch:
@@ -48,7 +48,7 @@ public TraceQueryEs7DAO(ElasticSearchClient client, int segmentQueryMaxSize) {
 
     @Override
     public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long minDuration, long maxDuration,
-        String endpointName, int serviceId, int serviceInstanceId, int endpointId, String traceId, int limit, int from,
+        String endpointName, int serviceId, int serviceInstanceId, String endpointId, String traceId, int limit, int from,
         TraceState traceState, QueryOrder queryOrder) throws IOException {
         SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();
 
@@ -80,7 +80,7 @@ public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long mi
         if (serviceInstanceId != 0) {
             boolQueryBuilder.must().add(QueryBuilders.termQuery(SegmentRecord.SERVICE_INSTANCE_ID, serviceInstanceId));
         }
-        if (endpointId != 0) {
+        if (!Strings.isNullOrEmpty(endpointId)) {
             boolQueryBuilder.must().add(QueryBuilders.termQuery(SegmentRecord.ENDPOINT_ID, endpointId));
         }
         if (!Strings.isNullOrEmpty(traceId)) {

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/InfluxModelConstants.java
Patch:
@@ -20,7 +20,7 @@
 
 public interface InfluxModelConstants {
     /**
-     * Override column because the 'duration' is a identifier of InfluxDB.
+     * Override column because the 'duration' is the identifier of InfluxDB.
      */
     String DURATION = "dur";
 }

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/installer/InfluxDBH2MetaDBInstaller.java
Patch:
@@ -26,9 +26,9 @@
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxModelConstants;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2TableInstaller;
 
-public class H2Installer extends H2TableInstaller {
+public class InfluxDBH2MetaDBInstaller extends H2TableInstaller {
 
-    public H2Installer(ModuleManager moduleManager) {
+    public InfluxDBH2MetaDBInstaller(ModuleManager moduleManager) {
         super(moduleManager);
         overrideColumnName(ProfileTaskRecord.DURATION, InfluxModelConstants.DURATION);
     }

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/installer/InfluxDBMySQLMetaDBInstaller.java
Patch:
@@ -26,9 +26,9 @@
 import org.apache.skywalking.oap.server.storage.plugin.influxdb.InfluxModelConstants;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.mysql.MySQLTableInstaller;
 
-public class MySQLInstaller extends MySQLTableInstaller {
+public class InfluxDBMySQLMetaDBInstaller extends MySQLTableInstaller {
 
-    public MySQLInstaller(ModuleManager moduleManager) {
+    public InfluxDBMySQLMetaDBInstaller(ModuleManager moduleManager) {
         super(moduleManager);
         overrideColumnName(ProfileTaskRecord.DURATION, InfluxModelConstants.DURATION);
     }

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/AggregationQuery.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.skywalking.oap.server.core.analysis.Downsampling;
 import org.apache.skywalking.oap.server.core.query.entity.Order;
 import org.apache.skywalking.oap.server.core.query.entity.TopNEntity;
-import org.apache.skywalking.oap.server.core.register.EndpointInventory;
+import org.apache.skywalking.oap.server.core.analysis.manual.endpoint.EndpointTraffic;
 import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;
 import org.apache.skywalking.oap.server.core.storage.model.ModelName;
 import org.apache.skywalking.oap.server.core.storage.query.IAggregationQueryDAO;
@@ -85,7 +85,7 @@ public List<TopNEntity> getEndpointTopN(int serviceId, String indName, String va
                                             long startTB, long endTB, Order order) throws IOException {
         return getTopNEntity(
             downsampling, indName,
-            subQuery(EndpointInventory.SERVICE_ID, serviceId, indName, valueCName, startTB, endTB), order, topN
+            subQuery(EndpointTraffic.SERVICE_ID, serviceId, indName, valueCName, startTB, endTB), order, topN
         );
     }
 

File: oap-server/server-storage-plugin/storage-jaeger-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jaeger/JaegerSpan.java
Patch:
@@ -56,7 +56,7 @@ public String getEntityId() {
     private String endpointName;
     @Setter
     @Getter
-    private int endpointId;
+    private String endpointId;
     @Setter
     @Getter
     private long startTime;

File: oap-server/server-storage-plugin/storage-jaeger-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jaeger/JaegerSpanRecord.java
Patch:
@@ -79,7 +79,7 @@ public class JaegerSpanRecord extends Record {
     @Getter
     @Column(columnName = ENDPOINT_ID)
     @IDColumn
-    private int endpointId;
+    private String endpointId;
     @Setter
     @Getter
     @Column(columnName = START_TIME)
@@ -149,7 +149,7 @@ public JaegerSpanRecord map2Data(Map<String, Object> dbMap) {
             record.setServiceId(((Number) dbMap.get(SERVICE_ID)).intValue());
             record.setServiceInstanceId(((Number) dbMap.get(SERVICE_INSTANCE_ID)).intValue());
             record.setEndpointName((String) dbMap.get(ENDPOINT_NAME));
-            record.setEndpointId(((Number) dbMap.get(ENDPOINT_ID)).intValue());
+            record.setEndpointId((String) dbMap.get(ENDPOINT_ID));
             record.setStartTime(((Number) dbMap.get(START_TIME)).longValue());
             record.setEndTime(((Number) dbMap.get(END_TIME)).longValue());
             record.setLatency(((Number) dbMap.get(LATENCY)).intValue());

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AggregationQueryDAO.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.query.entity.Order;
 import org.apache.skywalking.oap.server.core.query.entity.TopNEntity;
-import org.apache.skywalking.oap.server.core.register.EndpointInventory;
+import org.apache.skywalking.oap.server.core.analysis.manual.endpoint.EndpointTraffic;
 import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;
 import org.apache.skywalking.oap.server.core.storage.model.ModelName;
 import org.apache.skywalking.oap.server.core.storage.query.IAggregationQueryDAO;
@@ -77,7 +77,7 @@ public List<TopNEntity> getAllEndpointTopN(String indName, String valueCName, in
     public List<TopNEntity> getEndpointTopN(int serviceId, String indName, String valueCName, int topN,
         Downsampling downsampling, long startTB, long endTB, Order order) throws IOException {
         return topNQuery(indName, valueCName, topN, downsampling, startTB, endTB, order, (sql, conditions) -> {
-            sql.append(" and ").append(EndpointInventory.SERVICE_ID).append("=?");
+            sql.append(" and ").append(EndpointTraffic.SERVICE_ID).append("=?");
             conditions.add(serviceId);
         });
     }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java
Patch:
@@ -48,7 +48,7 @@ public H2TraceQueryDAO(JDBCHikariCPClient h2Client) {
 
     @Override
     public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long minDuration, long maxDuration,
-        String endpointName, int serviceId, int serviceInstanceId, int endpointId, String traceId, int limit, int from,
+        String endpointName, int serviceId, int serviceInstanceId, String endpointId, String traceId, int limit, int from,
         TraceState traceState, QueryOrder queryOrder) throws IOException {
         StringBuilder sql = new StringBuilder();
         List<Object> parameters = new ArrayList<>(10);
@@ -82,7 +82,7 @@ public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long mi
             sql.append(" and ").append(SegmentRecord.SERVICE_INSTANCE_ID).append(" = ?");
             parameters.add(serviceInstanceId);
         }
-        if (endpointId != 0) {
+        if (!Strings.isNullOrEmpty(endpointId)) {
             sql.append(" and ").append(SegmentRecord.ENDPOINT_ID).append(" = ?");
             parameters.add(endpointId);
         }

File: oap-server/server-storage-plugin/storage-zipkin-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/zipkin/ZipkinSpan.java
Patch:
@@ -56,7 +56,7 @@ public String getEntityId() {
     private String endpointName;
     @Setter
     @Getter
-    private int endpointId;
+    private String endpointId;
     @Setter
     @Getter
     private long startTime;

File: oap-server/server-storage-plugin/storage-zipkin-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/zipkin/ZipkinSpanRecord.java
Patch:
@@ -79,7 +79,7 @@ public class ZipkinSpanRecord extends Record {
     @Getter
     @Column(columnName = ENDPOINT_ID)
     @IDColumn
-    private int endpointId;
+    private String endpointId;
     @Setter
     @Getter
     @Column(columnName = START_TIME)
@@ -149,7 +149,7 @@ public ZipkinSpanRecord map2Data(Map<String, Object> dbMap) {
             record.setServiceId(((Number) dbMap.get(SERVICE_ID)).intValue());
             record.setServiceInstanceId(((Number) dbMap.get(SERVICE_INSTANCE_ID)).intValue());
             record.setEndpointName((String) dbMap.get(ENDPOINT_NAME));
-            record.setEndpointId(((Number) dbMap.get(ENDPOINT_ID)).intValue());
+            record.setEndpointId((String) dbMap.get(ENDPOINT_ID));
             record.setStartTime(((Number) dbMap.get(START_TIME)).longValue());
             record.setEndTime(((Number) dbMap.get(END_TIME)).longValue());
             record.setLatency(((Number) dbMap.get(LATENCY)).intValue());

File: oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileTraceDAO.java
Patch:
@@ -39,7 +39,7 @@ public ProfileTraceDAO(ExportedData exportData) {
     }
 
     @Override
-    public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long minDuration, long maxDuration, String endpointName, int serviceId, int serviceInstanceId, int endpointId, String traceId, int limit, int from, TraceState traceState, QueryOrder queryOrder) throws IOException {
+    public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long minDuration, long maxDuration, String endpointName, int serviceId, int serviceInstanceId, String endpointId, String traceId, int limit, int from, TraceState traceState, QueryOrder queryOrder) throws IOException {
         return null;
     }
 

File: test/e2e/e2e-common/src/main/java/org/apache/skywalking/e2e/SkyWalkingAnnotations.java
Patch:
@@ -208,7 +208,7 @@ private static Optional<DockerComposeContainer<?>> initDockerComposeField(final
 
         compose.withPull(true)
                .withLocalCompose(true)
-               .withTailChildContainers(!IS_CI)
+               .withTailChildContainers(true)
                .withRemoveImages(DockerComposeContainer.RemoveImages.LOCAL);
 
         if (IS_CI) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -256,6 +256,8 @@ public static class Elasticsearch {
              * If true, trace all the DSL(Domain Specific Language) in ElasticSearch access, default is false.
              */
             public static boolean TRACE_DSL = false;
+
+            public static int ELASTICSEARCH_DSL_LENGTH_THRESHOLD = 1024;
         }
 
         public static class Customize {

File: apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/Constants.java
Patch:
@@ -21,7 +21,9 @@
 import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;
 import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 
-class Constants {
+public class Constants {
+
+    public static final String INET_SOCKET_TRANSPORT_ADDRESS_WITNESS_CLASS = "org.elasticsearch.common.transport.InetSocketTransportAddress";
 
     static final String DB_TYPE = "Elasticsearch";
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java
Patch:
@@ -224,4 +224,5 @@ public static RuntimeContext getRuntimeContext() {
 
         return runtimeContext;
     }
+
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileThread.java
Patch:
@@ -81,9 +81,9 @@ private void profiling(ProfileTaskExecutionContext executionContext) throws Inte
                     continue;
                 }
 
-                switch (currentProfiler.profilingStatus()) {
+                switch (currentProfiler.profilingStatus().get()) {
 
-                    case READY:
+                    case PENDING:
                         // check tracing context running time
                         currentProfiler.startProfilingIfNeed();
                         break;

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/profile/query/ProfiledSpan.java
Patch:
@@ -22,6 +22,8 @@
 import lombok.Data;
 import lombok.ToString;
 
+import java.util.List;
+
 @Data
 @ToString
 public class ProfiledSpan implements Comparable<ProfiledSpan> {
@@ -31,6 +33,7 @@ public class ProfiledSpan implements Comparable<ProfiledSpan> {
     private String startTime;
     private String endTime;
     private String endpointName;
+    private List<ProfiledSpanTag> tags;
 
     @Override
     public int compareTo(ProfiledSpan o) {

File: test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/profile/ProfileE2E.java
Patch:
@@ -169,7 +169,7 @@ private ResponseEntity<String> sendRequest(boolean needProfiling) {
         final Map<String, String> user = ImmutableMap.of(
             "name", "SkyWalking", "enableProfiling", String.valueOf(needProfiling)
         );
-        return restTemplate.postForEntity(instrumentedServiceUrl + "/profile/users", user, String.class);
+        return restTemplate.postForEntity(instrumentedServiceUrl + "/profile/users?e2e=true", user, String.class);
     }
 
     private void verifyProfiledSegment(String taskId) throws Exception {

File: apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.skywalking.apm.plugin.finagle;
 
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
-import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 
@@ -66,7 +65,7 @@ protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects,
                      * which comes from client.
                      */
                     span.setOperationName(rpc);
-                    tryInjectContext((ExitSpan) span);
+                    tryInjectContext(span);
                 }
             }
         }

File: apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientDestTracingFilterInterceptor.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.twitter.finagle.Address;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
-import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 
@@ -47,7 +46,7 @@ public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects)
     public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, MethodInterceptResult methodInterceptResult) throws Throwable {
         String peer = (String) enhancedInstance.getSkyWalkingDynamicField();
         getLocalContextHolder().let(FinagleCtxs.PEER_HOST, peer);
-        tryInjectContext((ExitSpan) getSpan());
+        tryInjectContext(getSpan());
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/Constants.java
Patch:
@@ -21,4 +21,6 @@
 public class Constants {
 
     public static final String PENDING_OP_NAME = "pending";
+
+    public static final SWContextCarrier EMPTY_SWCONTEXTCARRIER = new SWContextCarrier();
 }

File: apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ServerTracingFilterInterceptor.java
Patch:
@@ -21,7 +21,6 @@
 import com.twitter.finagle.context.Contexts;
 import com.twitter.util.Future;
 import com.twitter.util.FutureEventListener;
-import org.apache.skywalking.apm.agent.core.context.ContextCarrier;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;
@@ -49,7 +48,7 @@ public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, O
             SWContextCarrier swContextCarrier = Contexts.broadcast().apply(SWContextCarrier$.MODULE$);
             span = ContextManager.createEntrySpan(swContextCarrier.getOperationName(), swContextCarrier.getCarrier());
         } else {
-            span = ContextManager.createEntrySpan("unknown", new ContextCarrier());
+            span = ContextManager.createEntrySpan("unknown", null);
         }
 
         span.setComponent(FINAGLE);

File: oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/query/AlarmQuery.java
Patch:
@@ -34,10 +34,10 @@
 import org.influxdb.querybuilder.SelectQueryImpl;
 import org.influxdb.querybuilder.WhereQueryImpl;
 
+import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.contains;
 import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.eq;
 import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.gte;
 import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.lte;
-import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.regex;
 import static org.influxdb.querybuilder.BuiltQuery.QueryBuilder.select;
 
 @Slf4j
@@ -64,7 +64,7 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
                        .and(lte(InfluxClient.TIME, InfluxClient.timeInterval(endTB)));
         }
         if (!Strings.isNullOrEmpty(keyword)) {
-            recallQuery.and(regex(AlarmRecord.ALARM_MESSAGE, keyword));
+            recallQuery.and(contains(AlarmRecord.ALARM_MESSAGE, keyword.replaceAll("/", "\\\\/")));
         }
         if (Objects.nonNull(scopeId)) {
             recallQuery.and(eq(AlarmRecord.SCOPE, scopeId));

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java
Patch:
@@ -212,9 +212,6 @@ public AbstractTracingSpan errorOccurred() {
     public AbstractTracingSpan setOperationName(String operationName) {
         this.operationName = operationName;
         this.operationId = DictionaryUtil.nullValue();
-
-        // recheck profiling status
-        owner.profilingRecheck(this, operationName);
         return this;
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java
Patch:
@@ -76,6 +76,7 @@ public static void initialize(String agentOptions) {
             logger.error(e, "Failed to read the system properties.");
         }
 
+        agentOptions = StringUtil.trim(agentOptions, ',');
         if (!StringUtil.isEmpty(agentOptions)) {
             try {
                 agentOptions = agentOptions.trim();

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/metrics/MetricsData.java
Patch:
@@ -19,10 +19,8 @@
 package org.apache.skywalking.e2e.metrics;
 
 import lombok.Data;
-import lombok.ToString;
 
 @Data
-@ToString
 public class MetricsData {
     private Metrics metrics;
 }

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/metrics/MultiMetricsData.java
Patch:
@@ -20,10 +20,8 @@
 
 import java.util.List;
 import lombok.Data;
-import lombok.ToString;
 
 @Data
-@ToString
 public class MultiMetricsData {
     private List<Metrics> metrics;
 }

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/profile/creation/ProfileTaskCreationResult.java
Patch:
@@ -29,8 +29,6 @@
 @Getter
 @ToString
 public class ProfileTaskCreationResult {
-
     private String errorReason;
     private String id;
-
 }

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/profile/creation/ProfileTaskCreationResultWrapper.java
Patch:
@@ -27,7 +27,5 @@
 @Setter
 @Getter
 public class ProfileTaskCreationResultWrapper {
-
     private ProfileTaskCreationResult creationResult;
-
 }

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/profile/query/ProfiledSegment.java
Patch:
@@ -18,14 +18,12 @@
 
 package org.apache.skywalking.e2e.profile.query;
 
+import java.util.List;
 import lombok.Data;
 import lombok.ToString;
 
-import java.util.List;
-
 @Data
 public class ProfiledSegment {
-
     private ProfiledSegmentData segment;
 
     @Data

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/profile/query/ProfiledSpan.java
Patch:
@@ -25,7 +25,6 @@
 @Data
 @ToString
 public class ProfiledSpan implements Comparable<ProfiledSpan> {
-
     private String spanId;
     private String parentSpanId;
     private String serviceCode;

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/trace/SpanMatcher.java
Patch:
@@ -22,11 +22,13 @@
 import java.util.List;
 import java.util.Objects;
 import lombok.Data;
+import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import org.apache.skywalking.e2e.verification.AbstractMatcher;
 
 @Data
 @ToString(callSuper = true)
+@EqualsAndHashCode(callSuper = true)
 public class SpanMatcher extends AbstractMatcher<Span> {
     private String traceId;
     private String segmentId;

File: test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/trace/TracesMatcher.java
Patch:
@@ -48,7 +48,7 @@ public void verifyLoosely(final List<Trace> traces) {
                 }
             }
             if (!matched) {
-                fail("Expected: %s\n Actual: %s", getTraces(), traces);
+                fail("\nExpected: %s\n Actual: %s", getTraces(), traces);
             }
         }
     }

File: test/e2e/e2e-service-consumer/src/main/java/org/apache/skywalking/e2e/Service1Application.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.e2e.cluster;
+package org.apache.skywalking.e2e;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: test/e2e/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/Service0Application.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.e2e.cluster;
+package org.apache.skywalking.e2e;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: test/e2e/e2e-service-provider/src/main/java/org/apache/skywalking/e2e/UserRepo.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.e2e.cluster;
+package org.apache.skywalking.e2e;
 
 import org.springframework.data.jpa.repository.JpaRepository;
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileThreadSnapshotQueryDAO.java
Patch:
@@ -79,9 +79,8 @@ public List<BasicTrace> queryProfiledSegments(String taskId) throws IOException
         // search traces
         sql = new StringBuilder();
         sql.append("select * from ").append(SegmentRecord.INDEX_NAME).append(" where ");
-        sql.append(" 1=1 ");
         for (int i = 0; i < segments.size(); i++) {
-            sql.append(" and ").append(SegmentRecord.SEGMENT_ID).append(" = ? ");
+            sql.append(i > 0 ? " or " : "").append(SegmentRecord.SEGMENT_ID).append(" = ? ");
         }
         sql.append(" order by ").append(SegmentRecord.START_TIME).append(" ").append(SortOrder.DESC);
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientRealClient.java
Patch:
@@ -56,7 +56,7 @@ public void inc(double value) {
         moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);
         telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);
 
-        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, address, 1, 10, 10));
+        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, address, 1, 10, 10, null));
         remoteClient.connect();
 
         for (int i = 0; i < 10000; i++) {

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java
Patch:
@@ -101,7 +101,7 @@ public void observe(double value) {
         grpcServerRule.getServiceRegistry().addService(new RemoteServiceHandler(moduleManager));
 
         Address address = new Address("not-important", 11, false);
-        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, address, 1, 10, 10));
+        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, address, 1, 10, 10, null));
         remoteClient.connect();
 
         doReturn(grpcServerRule.getChannel()).when(remoteClient).getChannel();

File: oap-server/server-library/library-server/src/main/java/org/apache/skywalking/oap/server/library/server/grpc/GRPCServer.java
Patch:
@@ -84,8 +84,7 @@ public void setThreadPoolQueueSize(int threadPoolQueueSize) {
      * @param privateKeyFile `server.pem` file
      */
     public GRPCServer(String host, int port, File certChainFile, File privateKeyFile) {
-        this.host = host;
-        this.port = port;
+        this(host, port);
         this.certChainFile = certChainFile;
         this.privateKeyFile = privateKeyFile;
         this.sslContextBuilder = SslContextBuilder.forServer(certChainFile, privateKeyFile);

File: oap-server/server-receiver-plugin/skywalking-sharing-server-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/sharing/server/SharingServerConfig.java
Patch:
@@ -41,4 +41,7 @@ public class SharingServerConfig extends ModuleConfig {
     private int gRPCThreadPoolSize;
     private int gRPCThreadPoolQueueSize;
     private String authentication;
+    private boolean gRPCSslEnabled = false;
+    private String gRPCSslKeyPath;
+    private String gRPCSslCertChainPath;
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/FutureGetInterceptor.java
Patch:
@@ -24,14 +24,15 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
+import org.apache.skywalking.apm.plugin.spring.commons.EnhanceCacheObjects;
 
 public class FutureGetInterceptor implements InstanceMethodsAroundInterceptor {
 
     @Override
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         MethodInterceptResult result) throws Throwable {
-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();
-        ContextManager.createLocalSpan("future/get:" + cacheValues[0]);
+        EnhanceCacheObjects cacheValues = (EnhanceCacheObjects) objInst.getSkyWalkingDynamicField();
+        ContextManager.createLocalSpan("future/get:" + cacheValues.getOperationName());
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profile/analyze/ProfileAnalyzer.java
Patch:
@@ -85,7 +85,7 @@ public ProfileAnalyzation analyze(String segmentId, List<ProfileAnalyzeTimeRange
                 LOGGER.warn(e.getMessage(), e);
                 return Collections.<ProfileThreadSnapshotRecord>emptyList();
             }
-        }).flatMap(Collection::stream).map(ProfileStack::deserialize).collect(Collectors.toList());
+        }).flatMap(Collection::stream).map(ProfileStack::deserialize).distinct().collect(Collectors.toList());
 
         // analyze
         analyzation.setTrees(analyze(stacks));

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -154,4 +154,6 @@ public class ComponentsDefine {
     public static final OfficialComponent AVRO_CLIENT = new OfficialComponent(83, "AvroClient");
 
     public static final OfficialComponent UNDERTOW = new OfficialComponent(84, "Undertow");
+
+    public static final OfficialComponent FINAGLE = new OfficialComponent(85, "Finagle");
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Language.java
Patch:
@@ -19,5 +19,5 @@
 package org.apache.skywalking.oap.server.core.query.entity;
 
 public enum Language {
-    UNKNOWN, JAVA, DOTNET, NODEJS, PYTHON, RUBY
+    UNKNOWN, JAVA, DOTNET, NODEJS, PYTHON, RUBY, GO, LUA
 }

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java
Patch:
@@ -156,7 +156,7 @@ public void doServiceInstanceRegister(ServiceInstances request,
                         instanceProperties.addProperty(OS_NAME, property.getValue());
                         break;
                     case LANGUAGE:
-                        instanceProperties.addProperty(LANGUAGE, property.getValue());
+                        instanceProperties.addProperty(LANGUAGE, property.getValue().toLowerCase());
                         break;
                     case "ipv4":
                         ipv4s.add(property.getValue());

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.skywalking.oap.server.receiver.trace.provider;
 
-import java.io.IOException;
 import org.apache.skywalking.oap.server.configuration.api.ConfigurationModule;
 import org.apache.skywalking.oap.server.configuration.api.DynamicConfigurationService;
 import org.apache.skywalking.oap.server.core.CoreModule;
@@ -44,6 +43,8 @@
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.standardization.SegmentStandardizationWorker;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
 
+import java.io.IOException;
+
 public class TraceModuleProvider extends ModuleProvider {
 
     private final TraceServiceModuleConfig moduleConfig;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DatabaseAccess.java
Patch:
@@ -42,6 +42,7 @@ public String getEntityId() {
     private long id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java
Patch:
@@ -42,13 +42,15 @@ public String getEntityId() {
     private int id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter
     @ScopeDefaultColumn.DefinedByField(columnName = "service_id")
     private int serviceId;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/EnvoyInstanceMetric.java
Patch:
@@ -54,6 +54,7 @@ public String getEntityId() {
     private int serviceId;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Service.java
Patch:
@@ -42,6 +42,7 @@ public String getEntityId() {
     private int id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstance.java
Patch:
@@ -46,9 +46,11 @@ public String getEntityId() {
     private int serviceId;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceCLRCPU.java
Patch:
@@ -45,9 +45,11 @@ public String getEntityId() {
     private int id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceCLRGC.java
Patch:
@@ -45,9 +45,11 @@ public String getEntityId() {
     private int id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceCLRThread.java
Patch:
@@ -45,9 +45,11 @@ public String getEntityId() {
     private int id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMCPU.java
Patch:
@@ -42,9 +42,11 @@ public String getEntityId() {
     private int id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMGC.java
Patch:
@@ -42,9 +42,11 @@ public String getEntityId() {
     private int id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMMemory.java
Patch:
@@ -42,9 +42,11 @@ public String getEntityId() {
     private int id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMMemoryPool.java
Patch:
@@ -42,9 +42,11 @@ public String getEntityId() {
     private int id;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "name", requireDynamicActive = true)
     private String name;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "service_name", requireDynamicActive = true)
     private String serviceName;
     @Getter
     @Setter

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceRelation.java
Patch:
@@ -43,6 +43,7 @@ public String getEntityId() {
     private int sourceServiceId;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "source_name", requireDynamicActive = true)
     private String sourceServiceName;
     @Getter
     @Setter
@@ -52,6 +53,7 @@ public String getEntityId() {
     private int destServiceId;
     @Getter
     @Setter
+    @ScopeDefaultColumn.DefinedByField(columnName = "dest_name", requireDynamicActive = true)
     private String destServiceName;
     @Getter
     @Setter

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TopologyQueryDAO.java
Patch:
@@ -56,7 +56,7 @@ public List<Call.CallDetail> loadSpecifiedServerSideServiceRelations(Downsamplin
     public List<Call.CallDetail> loadSpecifiedClientSideServiceRelations(Downsampling downsampling, long startTB,
         long endTB, List<Integer> serviceIds) throws IOException {
         String tableName = ModelName.build(downsampling, ServiceRelationClientSideMetrics.INDEX_NAME);
-        return loadServiceCalls(tableName, startTB, endTB, ServiceRelationServerSideMetrics.SOURCE_SERVICE_ID, ServiceRelationServerSideMetrics.DEST_SERVICE_ID, serviceIds, true);
+        return loadServiceCalls(tableName, startTB, endTB, ServiceRelationClientSideMetrics.SOURCE_SERVICE_ID, ServiceRelationClientSideMetrics.DEST_SERVICE_ID, serviceIds, true);
     }
 
     @Override
@@ -70,7 +70,7 @@ public List<Call.CallDetail> loadServerSideServiceRelations(Downsampling downsam
     public List<Call.CallDetail> loadClientSideServiceRelations(Downsampling downsampling, long startTB,
         long endTB) throws IOException {
         String tableName = ModelName.build(downsampling, ServiceRelationClientSideMetrics.INDEX_NAME);
-        return loadServiceCalls(tableName, startTB, endTB, ServiceRelationServerSideMetrics.SOURCE_SERVICE_ID, ServiceRelationServerSideMetrics.DEST_SERVICE_ID, new ArrayList<>(0), true);
+        return loadServiceCalls(tableName, startTB, endTB, ServiceRelationClientSideMetrics.SOURCE_SERVICE_ID, ServiceRelationClientSideMetrics.DEST_SERVICE_ID, new ArrayList<>(0), true);
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/define/EhcachePluginInstrumentation.java
Patch:
@@ -119,8 +119,8 @@ public String getMethodsInterceptor() {
 
                 @Override
                 public boolean isOverrideArgs() {
-                        return false;
-                    }
+                    return false;
+                }
 
             },
             new InstanceMethodsInterceptPoint() {

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java
Patch:
@@ -58,7 +58,7 @@ public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {
     @Override
     public void doAlarm(List<AlarmMessage> alarmMessage) {
 
-        if (alarmSetting.isEmptySetting()) {
+        if (alarmSetting == null || alarmSetting.isEmptySetting()) {
             return;
         }
 

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/StorageModuleElasticsearch7Provider.java
Patch:
@@ -122,7 +122,8 @@ IBatchDAO.class, new BatchProcessEsDAO(elasticSearch7Client, config.getBulkActio
         this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockEs77DAOImpl(elasticSearch7Client));
         this.registerServiceImplementation(
             IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearch7Client,
-                                                            new ElasticsearchStorageTTL()
+                                                            new ElasticsearchStorageTTL(),
+                                                            config.isEnablePackedDownsampling()
             ));
 
         this.registerServiceImplementation(

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/RegisterSource.java
Patch:
@@ -24,6 +24,9 @@
 import org.apache.skywalking.oap.server.core.storage.StorageData;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 
+/**
+ * RegisterSource represents the metadata entity.
+ */
 public abstract class RegisterSource extends StreamData implements StorageData {
 
     public static final String SEQUENCE = "sequence";

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/TraceSegmentSampler.java
Patch:
@@ -46,9 +46,7 @@ public boolean shouldSample(UniqueId uniqueId) {
         if (idPartsList.size() == 3) {
             Long lastLong = idPartsList.get(2);
             long sampleValue = lastLong % 10000;
-            if (sampleValue < sampleRate) {
-                return true;
-            }
+            return sampleValue < sampleRate;
         }
         return false;
     }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.skywalking.oap.server.core.alarm.MetricsNotify;
 import org.apache.skywalking.oap.server.core.alarm.ServiceInstanceMetaInAlarm;
 import org.apache.skywalking.oap.server.core.alarm.ServiceMetaInAlarm;
+import org.apache.skywalking.oap.server.core.alarm.provider.grpc.GRPCCallback;
 import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.analysis.metrics.MetricsMetaInfo;
 import org.apache.skywalking.oap.server.core.analysis.metrics.WithMetadata;
@@ -110,6 +111,7 @@ public void notify(Metrics metrics) {
     public void init(AlarmCallback... callbacks) {
         List<AlarmCallback> allCallbacks = new ArrayList<>(Arrays.asList(callbacks));
         allCallbacks.add(new WebhookCallback(alarmRulesWatcher));
+        allCallbacks.add(new GRPCCallback(alarmRulesWatcher));
         core.start(allCallbacks);
     }
 

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/Rules.java
Patch:
@@ -24,13 +24,15 @@
 import lombok.Getter;
 import lombok.Setter;
 import lombok.ToString;
+import org.apache.skywalking.oap.server.core.alarm.provider.grpc.GRPCAlarmSetting;
 
 @Setter(AccessLevel.PUBLIC)
 @Getter(AccessLevel.PUBLIC)
 @ToString
 public class Rules {
     private List<AlarmRule> rules;
     private List<String> webhooks;
+    private GRPCAlarmSetting grpchookSetting;
 
     public Rules() {
         this.rules = new ArrayList<>();

File: apm-application-toolkit/apm-toolkit-log4j-1.x/src/main/java/org/apache/skywalking/apm/toolkit/log/log4j/v1/x/TraceIdPatternLayout.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.toolkit.log.log4j.v1.x;
 
 import org.apache.log4j.PatternLayout;
@@ -25,8 +24,6 @@
 /**
  * The log4j extend pattern. By using this pattern, if sky-walking agent is also active, {@link
  * PatternParser#finalizeConverter(char)} method will be override dynamic. <p>
- *
- * @author wusheng
  */
 public class TraceIdPatternLayout extends PatternLayout {
     @Override

File: apm-application-toolkit/apm-toolkit-log4j-1.x/src/main/java/org/apache/skywalking/apm/toolkit/log/log4j/v1/x/TraceIdPatternParser.java
Patch:
@@ -16,15 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.toolkit.log.log4j.v1.x;
 
 import org.apache.log4j.helpers.PatternParser;
 
 /**
  * Base on '%T', use {@link TraceIdPatternConverter} to convert the '%t' to traceId.
  * <p>
- * Created by wusheng on 2016/12/7.
  */
 public class TraceIdPatternParser extends PatternParser {
     public TraceIdPatternParser(String pattern) {

File: apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/apache/skywalking/apm/toolkit/log/logback/v1/x/logstash/TraceIdJsonProvider.java
Patch:
@@ -27,9 +27,6 @@
 import net.logstash.logback.composite.JsonWritingUtils;
 import net.logstash.logback.fieldnames.LogstashFieldNames;
 
-/**
- * @author wuxingye
- */
 public class TraceIdJsonProvider extends AbstractFieldJsonProvider<ILoggingEvent> implements FieldNamesAware<LogstashFieldNames> {
 
     public static final String TRACING_ID = "TID";

File: apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/apache/skywalking/apm/toolkit/log/logback/v1/x/mdc/TraceIdMDCPatternLogbackLayout.java
Patch:
@@ -16,14 +16,12 @@
  *
  */
 
-
 package org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc;
 
 import ch.qos.logback.classic.PatternLayout;
 
 /**
  * Override "X",SuperClass run before Subclass.
- * @author zhangkewei
  */
 public class TraceIdMDCPatternLogbackLayout extends PatternLayout {
     static {

File: apm-application-toolkit/apm-toolkit-opentracing/src/main/java/org/apache/skywalking/apm/toolkit/opentracing/SkywalkingContext.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.toolkit.opentracing;
 
 import io.opentracing.SpanContext;
@@ -25,8 +24,6 @@
 
 /**
  * Skywalking tracer context based on {@link ThreadLocal} auto mechanism.
- *
- * @author wusheng
  */
 public class SkywalkingContext implements SpanContext {
     public static final SkywalkingContext INSTANCE = new SkywalkingContext();

File: apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/ActiveSpan.java
Patch:
@@ -16,13 +16,10 @@
  *
  */
 
-
 package org.apache.skywalking.apm.toolkit.trace;
 
 /**
  * provide custom api that set tag for current active span.
- *
- * @author zhangxin
  */
 public class ActiveSpan {
     /**

File: apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/CallableWrapper.java
Patch:
@@ -15,13 +15,11 @@
  * limitations under the License.
  *
  */
+
 package org.apache.skywalking.apm.toolkit.trace;
 
 import java.util.concurrent.Callable;
 
-/**
- * @author carlvine500
- */
 @TraceCrossThread
 public class CallableWrapper<V> implements Callable<V> {
     final Callable<V> callable;

File: apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/SupplierWrapper.java
Patch:
@@ -15,13 +15,11 @@
  * limitations under the License.
  *
  */
+
 package org.apache.skywalking.apm.toolkit.trace;
 
 import java.util.function.Supplier;
 
-/**
- * @author sxzaihua
- */
 @TraceCrossThread
 public class SupplierWrapper<V> implements Supplier<V> {
     final Supplier<V> supplier;

File: apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/Tags.java
Patch:
@@ -24,8 +24,7 @@
 import java.lang.annotation.Target;
 
 /**
- * A wrapper annotation for {@link Tag} that allows to
- * apply multiple tags to a single method span,
+ * A wrapper annotation for {@link Tag} that allows to apply multiple tags to a single method span,
  *
  * <pre>
  * &#64;Tag(key = "tag1", value = "arg[0]")
@@ -35,7 +34,6 @@
  * }
  * </pre>
  *
- * @author kezhenxu94
  * @see Tag
  */
 @Target(ElementType.METHOD)

File: apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/Trace.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.toolkit.trace;
 
 import java.lang.annotation.ElementType;
@@ -28,8 +27,6 @@
  * The agent create local span if the method that annotation with {@link Trace}. The value of span operation name will
  * fetch by {@link #operationName()}.  if the value of {@link #operationName()} is blank string. the operation name will
  * be set the class name + method name.
- *
- * @author zhangxin
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)

File: apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/TraceCrossThread.java
Patch:
@@ -15,16 +15,14 @@
  * limitations under the License.
  *
  */
+
 package org.apache.skywalking.apm.toolkit.trace;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-/**
- * @author carlvine500
- */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface TraceCrossThread {

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/EnvUtil.java
Patch:
@@ -20,8 +20,6 @@
 
 /**
  * Read value from system env.
- *
- * @author wusheng
  */
 public class EnvUtil {
     public static int getInt(String envName, int defaultValue) {

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/IDriver.java
Patch:
@@ -22,11 +22,11 @@
 
 /**
  * The driver of consumer.
- *
- * @author wusheng
  */
 public interface IDriver {
     boolean isRunning(Channels channels);
+
     void close(Channels channels);
+
     void begin(Channels channels);
 }

File: apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/common/AtomicRangeIntegerV1.java
Patch:
@@ -16,14 +16,12 @@
  *
  */
 
-
 package org.apache.skywalking.apm.commons.datacarrier.common;
 
 import java.io.Serializable;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
- * Created by wusheng on 2016/10/25.
  * This is moved from SkyWalking 6.1
  */
 public class AtomicRangeIntegerV1 extends Number implements Serializable {

File: apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/common/AtomicRangeIntegerV2.java
Patch:
@@ -16,14 +16,12 @@
  *
  */
 
-
 package org.apache.skywalking.apm.commons.datacarrier.common;
 
 import java.io.Serializable;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
- * Created by lkxiaolou
  * This comes from PR#2874
  */
 public class AtomicRangeIntegerV2 extends Number implements Serializable {
@@ -45,7 +43,8 @@ public final int getAndIncrement() {
             if (next > endValue && this.value.compareAndSet(next, startValue)) {
                 return endValue;
             }
-        } while (next > endValue);
+        }
+        while (next > endValue);
 
         return next - 1;
     }

File: apm-commons/apm-util/src/main/java/org/apache/skywalking/apm/util/MachineInfo.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.util;
 
 import java.lang.management.ManagementFactory;

File: apm-commons/apm-util/src/main/java/org/apache/skywalking/apm/util/RunnableWithExceptionProtection.java
Patch:
@@ -18,9 +18,6 @@
 
 package org.apache.skywalking.apm.util;
 
-/**
- * @author wusheng
- */
 public class RunnableWithExceptionProtection implements Runnable {
     private Runnable run;
     private CallbackWhenException callback;

File: apm-commons/apm-util/src/test/java/org/apache/skywalking/apm/util/MachineInfoTest.java
Patch:
@@ -21,9 +21,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-/**
- * @author lican
- */
 public class MachineInfoTest {
 
     @Test

File: apm-commons/apm-util/src/test/java/org/apache/skywalking/apm/util/RunnableWithExceptionProtectionTest.java
Patch:
@@ -21,9 +21,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-/**
- * @author lican
- */
 public class RunnableWithExceptionProtectionTest {
 
     @Test

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/ProtocolVersion.java
Patch:
@@ -20,8 +20,6 @@
 
 /**
  * The version of the protocol between agent and backend.
- *
- * @author kezhenxu94
  */
 public enum ProtocolVersion {
     V2(2);

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/constants/ProfileConstants.java
Patch:
@@ -15,12 +15,11 @@
  * limitations under the License.
  *
  */
+
 package org.apache.skywalking.apm.network.constants;
 
 /**
  * profile task limit constants
- *
- * @author MrPro
  */
 public class ProfileConstants {
 

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/CommandDeserializer.java
Patch:
@@ -19,9 +19,6 @@
 
 import org.apache.skywalking.apm.network.common.Command;
 
-/**
- * @author kezhenxu94
- */
 public class CommandDeserializer {
 
     public static BaseCommand deserialize(final Command command) {

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/Deserializable.java
Patch:
@@ -20,9 +20,6 @@
 
 import org.apache.skywalking.apm.network.common.Command;
 
-/**
- * @author peng-yongsheng
- */
 public interface Deserializable<T extends BaseCommand> {
     T deserialize(Command command);
 }

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/InstanceResetCommand.java
Patch:
@@ -22,16 +22,15 @@
 
 /**
  * Clear the service instance metadata cache, and re-register it.
- *
- * @author peng-yongsheng
  */
 public class InstanceResetCommand extends BaseCommand implements Serializable {
 
     public InstanceResetCommand(String serialNumber) {
         super("InstanceMetadataReset", serialNumber);
     }
 
-    @Override public Command.Builder serialize() {
+    @Override
+    public Command.Builder serialize() {
         return commandBuilder();
     }
 }

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/Serializable.java
Patch:
@@ -20,9 +20,6 @@
 
 import org.apache.skywalking.apm.network.common.Command;
 
-/**
- * @author peng-yongsheng
- */
 public interface Serializable {
     Command.Builder serialize();
 }

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/ServiceResetCommand.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * Clear the service metadata cache and other metadata caches belong to it, and re-register them.
- *
- * @author peng-yongsheng
  */
 public class ServiceResetCommand extends BaseCommand implements Serializable, Deserializable<ServiceResetCommand> {
     public static final Deserializable<ServiceResetCommand> DESERIALIZER = new ServiceResetCommand("");

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/UnsupportedCommandException.java
Patch:
@@ -19,9 +19,6 @@
 
 import org.apache.skywalking.apm.network.common.Command;
 
-/**
- * @author kezhenxu94
- */
 public class UnsupportedCommandException extends RuntimeException {
     private final Command command;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/base64/Base64.java
Patch:
@@ -15,6 +15,7 @@
  * limitations under the License.
  *
  */
+
 package org.apache.skywalking.apm.agent.core.base64;
 
 import java.nio.charset.StandardCharsets;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/DefaultImplementor.java
Patch:
@@ -23,9 +23,6 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-/**
- * @author wusheng
- */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface DefaultImplementor {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/OverrideImplementor.java
Patch:
@@ -23,9 +23,6 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-/**
- * @author wusheng
- */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface OverrideImplementor {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/ServiceConflictException.java
Patch:
@@ -18,9 +18,6 @@
 
 package org.apache.skywalking.apm.agent.core.boot;
 
-/**
- * @author wusheng
- */
 public class ServiceConflictException extends RuntimeException {
     public ServiceConflictException(String message) {
         super(message);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/commands/CommandSerialNumberCache.java
Patch:
@@ -20,9 +20,6 @@
 import java.util.Deque;
 import java.util.concurrent.LinkedBlockingDeque;
 
-/**
- * @author Zhang Xin
- */
 public class CommandSerialNumberCache {
     private static final int DEFAULT_MAX_CAPACITY = 64;
     private final Deque<String> queue;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/commands/CommandService.java
Patch:
@@ -111,8 +111,8 @@ public void receiveCommand(Commands commands) {
                 boolean success = this.commands.offer(baseCommand);
 
                 if (!success && LOGGER.isWarnEnable()) {
-                    LOGGER.warn("Command[{}, {}] cannot add to command list. because the command list is full.",
-                        baseCommand.getCommand(), baseCommand.getSerialNumber());
+                    LOGGER.warn("Command[{}, {}] cannot add to command list. because the command list is full.", baseCommand
+                        .getCommand(), baseCommand.getSerialNumber());
                 }
             } catch (UnsupportedCommandException e) {
                 if (LOGGER.isWarnEnable()) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/commands/executor/ProfileTaskCommandExecutor.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * Command executor that executes the {@link ProfileTaskCommand} command
- *
- * @author MrPro
  */
 public class ProfileTaskCommandExecutor implements CommandExecutor {
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/commands/executor/ServiceResetCommandExecutor.java
Patch:
@@ -32,9 +32,6 @@
 
 /**
  * Command executor that executes the {@link ServiceResetCommand} command
- *
- * @author Zhang Xin
- * @author kezhenxu94
  */
 public class ServiceResetCommandExecutor implements CommandExecutor {
     private static final ILog LOGGER = LogManager.getLogger(ServiceResetCommandExecutor.class);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Constants.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.conf;
 
 public class Constants {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/OPGroupDefinition.java
Patch:
@@ -18,8 +18,5 @@
 
 package org.apache.skywalking.apm.agent.core.conf;
 
-/**
- * @author wusheng
- */
 public interface OPGroupDefinition {
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/AbstractTracerContext.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * The <code>AbstractTracerContext</code> represents the tracer context manager.
- *
- * @author wusheng
  */
 public interface AbstractTracerContext {
     /**
@@ -84,7 +82,7 @@ public interface AbstractTracerContext {
      * Create an exit span
      *
      * @param operationName most likely a service name of remote
-     * @param remotePeer the network id(ip:port, hostname:port or ip1:port1,ip2,port, etc.)
+     * @param remotePeer    the network id(ip:port, hostname:port or ip1:port1,ip2,port, etc.)
      * @return the span represent an exit point of this segment.
      */
     AbstractSpan createExitSpan(String operationName, String remotePeer);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CarrierItem.java
Patch:
@@ -23,9 +23,6 @@
 
 import static org.apache.skywalking.apm.agent.core.conf.Config.Agent.NAMESPACE;
 
-/**
- * @author wusheng
- */
 public class CarrierItem implements Iterator<CarrierItem> {
     private String headKey;
     private String headValue;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/RuntimeContextSnapshot.java
Patch:
@@ -23,13 +23,13 @@
 import java.util.Map;
 
 public class RuntimeContextSnapshot {
-    private final Map map;
+    private final Map<Object, Object> map;
 
-    public RuntimeContextSnapshot(Map map) {
+    public RuntimeContextSnapshot(Map<Object, Object> map) {
         this.map = map;
     }
 
-    public Iterator<Map.Entry> iterator() {
+    public Iterator<Map.Entry<Object, Object>> iterator() {
         return map.entrySet().iterator();
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/SW6CarrierItem.java
Patch:
@@ -18,9 +18,6 @@
 
 package org.apache.skywalking.apm.agent.core.context;
 
-/**
- * @author wusheng
- */
 public class SW6CarrierItem extends CarrierItem {
     public static final String HEADER_NAME = "sw6";
     private ContextCarrier carrier;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContextListener.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context;
 
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingThreadListener.java
Patch:
@@ -18,9 +18,6 @@
 
 package org.apache.skywalking.apm.agent.core.context;
 
-/**
- * @author MrPro
- */
 public interface TracingThreadListener {
 
     void afterMainThreadFinish(TracingContext tracingContext);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ids/NewDistributedTraceId.java
Patch:
@@ -16,13 +16,10 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context.ids;
 
 /**
  * The <code>NewDistributedTraceId</code> is a {@link DistributedTraceId} with a new generated id.
- *
- * @author wusheng
  */
 public class NewDistributedTraceId extends DistributedTraceId {
     public NewDistributedTraceId() {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ids/PropagatedTraceId.java
Patch:
@@ -16,13 +16,10 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context.ids;
 
 /**
  * The <code>PropagatedTraceId</code> represents a {@link DistributedTraceId}, which is propagated from the peer.
- *
- * @author wusheng
  */
 public class PropagatedTraceId extends DistributedTraceId {
     public PropagatedTraceId(String id) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/AbstractTag.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context.tag;
 
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/StringTag.java
Patch:
@@ -16,15 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context.tag;
 
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 
 /**
  * A subclass of {@link AbstractTag}, represent a tag with a {@link String} value.
  * <p>
- * Created by wusheng on 2017/2/17.
  */
 public class StringTag extends AbstractTag<String> {
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/NoopExitSpan.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context.trace;
 
 public class NoopExitSpan extends NoopSpan implements WithPeerInfo {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/KeyValuePair.java
Patch:
@@ -16,15 +16,12 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context.util;
 
 import org.apache.skywalking.apm.network.common.KeyStringValuePair;
 
 /**
  * The <code>KeyValuePair</code> represents a object which contains a string key and a string value.
- *
- * @author wusheng
  */
 public class KeyValuePair {
     private String key;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/ThrowableTransformer.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context.util;
 
 import static org.apache.skywalking.apm.agent.core.conf.Config.Agent.CAUSE_EXCEPTION_DEPTH;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/PossibleFound.java
Patch:
@@ -16,13 +16,10 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.dictionary;
 
 /**
  * The <code>PossibleFound</code> represents a value, which may needEnhance or not.
- *
- * @author wusheng
  */
 public abstract class PossibleFound {
     private boolean found;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/cpu/CPUMetricsAccessor.java
Patch:
@@ -16,16 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.jvm.cpu;
 
 import org.apache.skywalking.apm.network.common.CPU;
 
 /**
  * The unit of CPU usage is 1/10000. The backend is using `avg` func directly, and query for percentage requires this
  * unit.
- *
- * @author wusheng
  */
 public abstract class CPUMetricsAccessor {
     private long lastCPUTimeNs;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/memorypool/MemoryPoolMetricsAccessor.java
Patch:
@@ -21,9 +21,6 @@
 import java.util.List;
 import org.apache.skywalking.apm.network.language.agent.MemoryPool;
 
-/**
- * @author wusheng
- */
 public interface MemoryPoolMetricsAccessor {
     List<MemoryPool> getMemoryPoolMetricsList();
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/api/LogManager.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.api;
 
 import org.apache.skywalking.apm.agent.core.logging.core.PatternLogResolver;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/api/LogResolver.java
Patch:
@@ -16,17 +16,15 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.api;
 
 /**
  * {@link LogResolver} just do only one thing: return the {@link ILog} implementation.
  * <p>
- * Created by xin on 2016/11/10.
  */
 public interface LogResolver {
     /**
-     * @param clazz, the class is showed in log message.
+     * @param clazz the class is showed in log message.
      * @return {@link ILog} implementation.
      */
     ILog getLogger(Class<?> clazz);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/Converter.java
Patch:
@@ -16,13 +16,10 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core;
 
-
 /**
  * The Converter, It is used to convert the LogEvent to the String.
- * @author alvin
  */
 public interface Converter {
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/IWriter.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core;
 
 public interface IWriter {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/LogEvent.java
Patch:
@@ -16,13 +16,10 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core;
 
 /**
  * The representation of logging events. This instance is pass around to the List of Converter.
- *
- * @author alvin
  */
 public class LogEvent {
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/coverts/ClassConverter.java
Patch:
@@ -16,19 +16,16 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core.coverts;
 
 import org.apache.skywalking.apm.agent.core.logging.core.Converter;
 import org.apache.skywalking.apm.agent.core.logging.core.LogEvent;
 
 /**
  * Just return logEvent.getTargetClass().
- * @author alvin
  */
 public class ClassConverter implements Converter {
 
-
     @Override
     public String convert(LogEvent logEvent) {
         return logEvent.getTargetClass();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/coverts/DateConverter.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core.coverts;
 
 import org.apache.skywalking.apm.agent.core.logging.core.Converter;
@@ -27,8 +26,6 @@
 
 /**
  * The Converter is used to return a now date with format.
- *
- * @author alvin
  */
 public class DateConverter implements Converter {
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/coverts/LevelConverter.java
Patch:
@@ -16,15 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core.coverts;
 
 import org.apache.skywalking.apm.agent.core.logging.core.Converter;
 import org.apache.skywalking.apm.agent.core.logging.core.LogEvent;
 
 /**
  * Just return logEvent.getLevel().name()
- * @author alvin
  */
 public class LevelConverter implements Converter {
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/coverts/LiteralConverter.java
Patch:
@@ -16,15 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core.coverts;
 
 import org.apache.skywalking.apm.agent.core.logging.core.Converter;
 import org.apache.skywalking.apm.agent.core.logging.core.LogEvent;
 
 /**
  * This Converter is used to return the literal.
- * @author alvin
  */
 public class LiteralConverter implements Converter {
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/coverts/MessageConverter.java
Patch:
@@ -16,15 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core.coverts;
 
 import org.apache.skywalking.apm.agent.core.logging.core.Converter;
 import org.apache.skywalking.apm.agent.core.logging.core.LogEvent;
 
 /**
  * Just return the logEvent.getMessage()
- * @author alvin
  */
 public class MessageConverter implements Converter {
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/coverts/ThreadConverter.java
Patch:
@@ -16,15 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core.coverts;
 
 import org.apache.skywalking.apm.agent.core.logging.core.Converter;
 import org.apache.skywalking.apm.agent.core.logging.core.LogEvent;
 
 /**
  * Just return the Thread.currentThread().getName()
- * @author alvin
  */
 public class ThreadConverter implements Converter {
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/coverts/ThrowableConverter.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.logging.core.coverts;
 
 import org.apache.skywalking.apm.agent.core.conf.Constants;
@@ -28,7 +27,6 @@
 
 /**
  * Return the StackTrace of String with logEvent.getThrowable()
- * @author alvin
  */
 public class ThrowableConverter implements Converter {
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/os/OSUtil.java
Patch:
@@ -30,9 +30,6 @@
 import java.util.List;
 import org.apache.skywalking.apm.network.common.KeyStringValuePair;
 
-/**
- * @author wusheng
- */
 public class OSUtil {
     private static volatile String OS_NAME;
     private static volatile String HOST_NAME;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/ByteBuddyCoreClasses.java
Patch:
@@ -20,8 +20,6 @@
 
 /**
  * All ByteBuddy core classes required to expose, including open edge for JDK 9+ module, or Bootstrap instrumentation.
- *
- * @author wusheng
  */
 public class ByteBuddyCoreClasses {
     private static final String SHADE_PACKAGE = "org.apache.skywalking.apm.dependencies.";
@@ -34,5 +32,5 @@ public class ByteBuddyCoreClasses {
         SHADE_PACKAGE + "net.bytebuddy.implementation.bind.annotation.SuperCall",
         SHADE_PACKAGE + "net.bytebuddy.implementation.bind.annotation.Origin",
         SHADE_PACKAGE + "net.bytebuddy.implementation.bind.annotation.Morph",
-    };
+        };
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/DynamicPluginLoader.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * The plugin can be inserted into the kernel by implementing this spi return PluginDefine list.
- *
- * @author zhaoyuguang
  */
 
 public enum DynamicPluginLoader {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/InstrumentDebuggingClass.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin;
 
 import java.io.File;
@@ -31,8 +30,6 @@
 /**
  * The manipulated class output. Write the dynamic classes to the `debugging` folder, when we need to do some debug and
  * recheck.
- *
- * @author wu-sheng
  */
 public enum InstrumentDebuggingClass {
     INSTANCE;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/PluginCfg.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin;
 
 import org.apache.skywalking.apm.agent.core.plugin.exception.IllegalPluginDefineException;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/PluginDefine.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin;
 
 import org.apache.skywalking.apm.agent.core.plugin.exception.IllegalPluginDefineException;
@@ -58,4 +57,3 @@ public String getDefineClass() {
     }
 }
 
-

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/PluginException.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin;
 
 public class PluginException extends RuntimeException {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/bootstrap/IBootstrapLog.java
Patch:
@@ -20,10 +20,8 @@
 
 /**
  * The log interface used in bootstrap internal interceptors.
- *
+ * <p>
  * Never used in any plugin or tracing core.
- *
- * @author wusheng
  */
 public interface IBootstrapLog {
     void info(String format);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/exception/IllegalPluginDefineException.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin.exception;
 
 /**

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/EnhanceException.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin.interceptor;
 
 import org.apache.skywalking.apm.agent.core.plugin.PluginException;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/InstrumentationLoader.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * the spi of the InstrumentationLoader.
- *
- * @author : zhaoyuguang
  */
 
 public interface InstrumentationLoader {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/ClassAnnotationMatch.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin.match;
 
 import java.util.ArrayList;
@@ -34,8 +33,6 @@
 
 /**
  * Match the class by the given annotations in class.
- *
- * @author wusheng
  */
 public class ClassAnnotationMatch implements IndirectMatch {
     private String[] annotations;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/HierarchyMatch.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin.match;
 
 import java.util.ArrayList;
@@ -34,8 +33,6 @@
 
 /**
  * Match the class by the given super class or interfaces.
- *
- * @author wusheng
  */
 public class HierarchyMatch implements IndirectMatch {
     private String[] parentTypes;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/IndirectMatch.java
Patch:
@@ -16,16 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin.match;
 
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 
 /**
  * All implementations can't direct match the class like {@link NameMatch} did.
- *
- * @author wusheng
  */
 public interface IndirectMatch extends ClassMatch {
     ElementMatcher.Junction buildJunction();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MultiClassNameMatch.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin.match;
 
 import java.util.Arrays;
@@ -28,8 +27,6 @@
 
 /**
  * Match class with a given set of classes.
- *
- * @author zhangxin
  */
 public class MultiClassNameMatch implements IndirectMatch {
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/NameMatch.java
Patch:
@@ -16,13 +16,10 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin.match;
 
 /**
  * Match the class with an explicit class name.
- *
- * @author wusheng
  */
 public class NameMatch implements ClassMatch {
     private String className;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/PrefixMatch.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin.match;
 
 import net.bytebuddy.description.type.TypeDescription;
@@ -25,8 +24,6 @@
 
 /**
  * Match classes by any one of the given {@link #prefixes}
- *
- * @author kezhenxu94
  */
 @SuppressWarnings("rawtypes")
 public class PrefixMatch implements IndirectMatch {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/logical/LogicalAndMatch.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * Match classes by multiple criteria with AND conjunction
- *
- * @author kezhenxu94
  */
 public class LogicalAndMatch implements IndirectMatch {
     private final IndirectMatch[] indirectMatches;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/logical/LogicalMatchOperation.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * Util class to help to construct logical operations on {@link org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch}s
- *
- * @author kezhenxu94
  */
 public class LogicalMatchOperation {
     public static IndirectMatch and(final IndirectMatch... matches) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/logical/LogicalOrMatch.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * Match classes by multiple criteria with OR conjunction
- *
- * @author kezhenxu94
  */
 public class LogicalOrMatch implements IndirectMatch {
     private final IndirectMatch[] indirectMatches;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileThread.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * Profile task process thread, dump the executing thread stack.
- *
- * @author MrPro
  */
 public class ProfileThread implements Runnable {
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfilingStatus.java
Patch:
@@ -18,9 +18,6 @@
 
 package org.apache.skywalking.apm.agent.core.profile;
 
-/**
- * @author MrPro
- */
 public enum ProfilingStatus {
 
     READY,

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/ChannelBuilder.java
Patch:
@@ -20,9 +20,6 @@
 
 import io.grpc.ManagedChannelBuilder;
 
-/**
- * @author zhang xin
- */
 public interface ChannelBuilder<B extends ManagedChannelBuilder> {
     B build(B managedChannelBuilder) throws Exception;
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/ChannelDecorator.java
Patch:
@@ -20,9 +20,6 @@
 
 import io.grpc.Channel;
 
-/**
- * @author zhang xin
- */
 public interface ChannelDecorator {
     Channel build(Channel channel);
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 import org.apache.skywalking.apm.agent.core.context.AsyncSpan;
 import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;
+import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.network.trace.component.Component;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
@@ -53,6 +54,7 @@ public interface AbstractSpan extends AsyncSpan {
      * Set a key:value tag on the Span.
      *
      * @return this Span instance, for chaining
+     * @deprecated use {@link #tag(AbstractTag, String)} in companion with {@link Tags#ofKey(String)} instead
      */
     @Deprecated
     AbstractSpan tag(String key, String value);
@@ -62,7 +64,7 @@ public interface AbstractSpan extends AsyncSpan {
      * @param value
      * @return
      */
-    AbstractSpan tag(AbstractTag tag, String value);
+    AbstractSpan tag(AbstractTag<?> tag, String value);
 
     /**
      * Record an exception event of the current walltime timestamp.

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/ExitSpan.java
Patch:
@@ -73,7 +73,7 @@ public ExitSpan tag(String key, String value) {
         return this;
     }
 
-    @Override public AbstractTracingSpan tag(AbstractTag tag, String value) {
+    @Override public AbstractTracingSpan tag(AbstractTag<?> tag, String value) {
         if (stackDepth == 1 || tag.isCanOverwrite()) {
             super.tag(tag, value);
         }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/NoopSpan.java
Patch:
@@ -65,7 +65,7 @@ public AbstractSpan tag(String key, String value) {
         return this;
     }
 
-    @Override public AbstractSpan tag(AbstractTag tag, String value) {
+    @Override public AbstractSpan tag(AbstractTag<?> tag, String value) {
         return this;
     }
 

File: apm-sniffer/apm-sdk-plugin/elastic-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/esjob/JobExecutorInterceptor.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.base.Strings;
 import java.lang.reflect.Method;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
+import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
@@ -49,7 +50,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         }
         AbstractSpan span = ContextManager.createLocalSpan(operateName);
         span.setComponent(ComponentsDefine.ELASTIC_JOB);
-        span.tag("sharding_context", shardingContext.toString());
+        span.tag(Tags.ofKey("sharding_context"), shardingContext.toString());
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/netty-socketio-plugin/src/main/java/org/apache/skywalking/apm/plugin/netty/socketio/NettySocketIOConnectionInterceptor.java
Patch:
@@ -21,6 +21,7 @@
 import com.corundumstudio.socketio.SocketIOClient;
 import org.apache.skywalking.apm.agent.core.context.ContextCarrier;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
+import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
@@ -47,7 +48,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         // set client addr
         InetSocketAddress remoteAddress = (InetSocketAddress) client.getRemoteAddress();
         String clientAddress = remoteAddress.getAddress().getHostAddress() + ":" + remoteAddress.getPort();
-        span.tag("from", clientAddress);
+        span.tag(Tags.ofKey("from"), clientAddress);
     }
 
     @Override

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/span/ConstructorWithSpanBuilderInterceptor.java
Patch:
@@ -19,6 +19,7 @@
 
 package org.apache.skywalking.apm.toolkit.activation.opentracing.span;
 
+import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
@@ -43,7 +44,7 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
         }
 
         for (Tag tag : spanBuilder.getTags()) {
-            span.tag(tag.getKey(), tag.getValue());
+            span.tag(Tags.ofKey(tag.getKey()), tag.getValue());
         }
         span.setComponent(spanBuilder.getComponentName());
         if (spanBuilder.isError()) {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/span/SpanSetTagInterceptor.java
Patch:
@@ -46,7 +46,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         } else if (Tags.ERROR.getKey().equals(tagKey) && "true".equals(tagValue)) {
             activeSpan.errorOccurred();
         } else {
-            activeSpan.tag(tagKey, tagValue);
+            activeSpan.tag(org.apache.skywalking.apm.agent.core.context.tag.Tags.ofKey(tagKey), tagValue);
         }
         return ret;
     }

File: apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/interceptor/BaseInterceptorMethods.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.apm.plugin.customize.interceptor;
 
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
+import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.plugin.customize.conf.CustomizeConfiguration;
 import org.apache.skywalking.apm.plugin.customize.conf.MethodConfiguration;
@@ -75,7 +76,7 @@ void beforeMethod(Method method, Object[] allArguments) {
                 AbstractSpan span = ContextManager.createLocalSpan(operationName);
                 if (!spanTags.isEmpty()) {
                     for (Map.Entry<String, String> tag : spanTags.entrySet()) {
-                        span.tag(tag.getKey(), tag.getValue());
+                        span.tag(Tags.ofKey(tag.getKey()), tag.getValue());
                     }
                 }
                 if (!spanLogs.isEmpty()) {

File: apm-sniffer/optional-plugins/gson-2.8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/gson/GsonFromJsonInterceptor.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.apm.plugin.gson;
 
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
+import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
@@ -39,8 +40,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
 
         AbstractSpan span = ContextManager.createLocalSpan("Gson/FromJson");
         span.setComponent(ComponentsDefine.GSON);
-        Integer length = allArguments[0].toString().length();
-        span.tag("length", length.toString());
+        int length = allArguments[0].toString().length();
+        span.tag(Tags.ofKey("length"), Integer.toString(length));
 
     }
 

File: apm-sniffer/optional-plugins/gson-2.8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/gson/GsonToJsonInterceptor.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.apm.plugin.gson;
 
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
+import org.apache.skywalking.apm.agent.core.context.tag.Tags;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
@@ -38,8 +39,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
 
         AbstractSpan span = ContextManager.createLocalSpan("Gson/ToJson");
         span.setComponent(ComponentsDefine.GSON);
-        Integer length = allArguments[0].toString().length();
-        span.tag("length", length.toString());
+        int length = allArguments[0].toString().length();
+        span.tag(Tags.ofKey("length"), Integer.toString(length));
 
     }
 

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java
Patch:
@@ -40,8 +40,8 @@ public class AlarmRule {
     private String alarmRuleName;
 
     private String metricsName;
-    private ArrayList includeNames;
-    private ArrayList excludeNames;
+    private ArrayList<String> includeNames;
+    private ArrayList<String> excludeNames;
     private String threshold;
     private String op;
     private int period;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/commands/executor/ProfileTaskCommandExecutor.java
Patch:
@@ -39,7 +39,8 @@ public void execute(BaseCommand command) throws CommandExecutionException {
 
         // build profile task
         final ProfileTask profileTask = new ProfileTask();
-        profileTask.setEndpointName(profileTaskCommand.getEndpointName());
+        profileTask.setTaskId(profileTaskCommand.getTaskId());
+        profileTask.setFistSpanOPName(profileTaskCommand.getEndpointName());
         profileTask.setDuration(profileTaskCommand.getDuration());
         profileTask.setMinDurationThreshold(profileTaskCommand.getMinDurationThreshold());
         profileTask.setThreadDumpPeriod(profileTaskCommand.getDumpPeriod());

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/AbstractTracerContext.java
Patch:
@@ -115,4 +115,5 @@ public interface AbstractTracerContext {
      * @param span to be stopped.
      */
     void asyncStop(AsyncSpan span);
+
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManagerExtendService.java
Patch:
@@ -51,7 +51,7 @@ public AbstractTracerContext createTraceContext(String operationName, boolean fo
         } else {
             SamplingService samplingService = ServiceManager.INSTANCE.findService(SamplingService.class);
             if (forceSampling || samplingService.trySampling()) {
-                context = new TracingContext();
+                context = new TracingContext(operationName);
             } else {
                 context = new IgnoredTracerContext();
             }

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/TracingContextTest.java
Patch:
@@ -46,7 +46,7 @@ public void testSpanLimit() {
         };
         TracingContext.ListenerManager.add(listener);
         try {
-            TracingContext tracingContext = new TracingContext();
+            TracingContext tracingContext = new TracingContext("/url");
             AbstractSpan span = tracingContext.createEntrySpan("/url");
 
             for (int i = 0; i < 10; i++) {

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/test/tools/AgentServiceRule.java
Patch:
@@ -21,6 +21,8 @@
 
 import java.util.HashMap;
 import java.util.LinkedList;
+
+import org.apache.skywalking.apm.agent.core.context.TracingThreadListener;
 import org.junit.rules.ExternalResource;
 import org.powermock.reflect.Whitebox;
 import org.apache.skywalking.apm.agent.core.boot.BootService;
@@ -37,6 +39,7 @@ protected void after() {
         Whitebox.setInternalState(ServiceManager.INSTANCE, "bootedServices", new HashMap<Class, BootService>());
         Whitebox.setInternalState(TracingContext.ListenerManager.class, "LISTENERS", new LinkedList<TracingContextListener>());
         Whitebox.setInternalState(IgnoredTracerContext.ListenerManager.class, "LISTENERS", new LinkedList<TracingContextListener>());
+        Whitebox.setInternalState(TracingContext.TracingThreadListenerManager.class, "LISTENERS", new LinkedList<TracingThreadListener>());
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/command/CommandService.java
Patch:
@@ -43,7 +43,7 @@ public ServiceResetCommand newResetCommand(final int serviceInstanceId, final lo
 
     public ProfileTaskCommand newProfileTaskCommand(ProfileTask task) {
         final String serialNumber = UUID.randomUUID().toString();
-        return new ProfileTaskCommand(serialNumber, task.getEndpointName(), task.getDuration(), task.getMinDurationThreshold(), task.getDumpPeriod(), task.getMaxSamplingCount(), task.getStartTime(), task.getCreateTime());
+        return new ProfileTaskCommand(serialNumber, task.getId(), task.getEndpointName(), task.getDuration(), task.getMinDurationThreshold(), task.getDumpPeriod(), task.getMaxSamplingCount(), task.getStartTime(), task.getCreateTime());
     }
 
     private String generateSerialNumber(final int serviceInstanceId, final long time, final String serviceInstanceUUID) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -69,6 +69,7 @@ public class DefaultScopeDefine {
     public static final int HTTP_ACCESS_LOG = 25;
     public static final int PROFILE_TASK = 26;
     public static final int PROFILE_TASK_LOG = 27;
+    public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;
 
     /**
      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.

File: apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptorTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.rabbitmq.client.AMQP;
 import com.rabbitmq.client.Envelope;
+import org.apache.skywalking.apm.agent.core.context.SW6CarrierItem;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;
@@ -72,7 +73,7 @@ public void setUp() throws Exception {
     public void TestRabbitMQConsumerInterceptor() throws Throwable {
         Envelope envelope = new Envelope(1111,false,"","rabbitmq-test");
         Map<String, Object> headers = new HashMap<String, Object>();
-        headers.put("sw6","1-MS4xLjE1NDM5NzU1OTEwMTQwMDAx-MS4xLjE1NDM5NzU1OTA5OTcwMDAw-0-1-1-IzEyNy4wLjAuMTo1Mjcy-I1JhYmJpdE1RL1RvcGljL1F1ZXVlL3JhYmJpdG1xLXRlc3QvUHJvZHVjZXI=-I1JhYmJpdE1RL1RvcGljL1F1ZXVlL3JhYmJpdG1xLXRlc3QvUHJvZHVjZXI=");
+        headers.put(SW6CarrierItem.HEADER_NAME,"1-MS4xLjE1NDM5NzU1OTEwMTQwMDAx-MS4xLjE1NDM5NzU1OTA5OTcwMDAw-0-1-1-IzEyNy4wLjAuMTo1Mjcy-I1JhYmJpdE1RL1RvcGljL1F1ZXVlL3JhYmJpdG1xLXRlc3QvUHJvZHVjZXI=-I1JhYmJpdE1RL1RvcGljL1F1ZXVlL3JhYmJpdG1xLXRlc3QvUHJvZHVjZXI=");
         AMQP.BasicProperties.Builder propsBuilder = new AMQP.BasicProperties.Builder();
         Object[] arguments = new Object[]  {0,envelope,propsBuilder.headers(headers).build()};
 

File: oap-server/server-library/library-buffer/src/main/java/org/apache/skywalking/oap/server/library/buffer/BufferData.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.library.buffer;
 
 import com.google.protobuf.GeneratedMessageV3;
-import lombok.*;
-import org.apache.skywalking.apm.network.language.agent.TraceSegmentObject;
+import lombok.Getter;
+import lombok.Setter;
 import org.apache.skywalking.apm.network.language.agent.v2.SegmentObject;
 
 /**
@@ -29,7 +29,6 @@
 @Getter
 public class BufferData<MESSAGE_TYPE extends GeneratedMessageV3> {
     private MESSAGE_TYPE messageType;
-    @Setter private TraceSegmentObject v1Segment;
     @Setter private SegmentObject v2Segment;
 
     public BufferData(MESSAGE_TYPE messageType) {

File: oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/JVMModuleProvider.java
Patch:
@@ -47,7 +47,6 @@ public class JVMModuleProvider extends ModuleProvider {
 
     @Override public void start() {
         GRPCHandlerRegister grpcHandlerRegister = getManager().find(SharingServerModule.NAME).provider().getService(GRPCHandlerRegister.class);
-        grpcHandlerRegister.addHandler(new JVMMetricsServiceHandler(getManager()));
         grpcHandlerRegister.addHandler(new JVMMetricReportServiceHandler(getManager()));
     }
 

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParserListenerManager.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class SegmentParserListenerManager implements ISegmentParserListenerManager {
 
-    private List<SpanListenerFactory> spanListenerFactories;
+    private final List<SpanListenerFactory> spanListenerFactories;
 
     public SegmentParserListenerManager() {
         this.spanListenerFactories = new LinkedList<>();

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/decorator/SegmentCoreInfo.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.receiver.trace.provider.parser.decorator;
 
 import lombok.*;
+import org.apache.skywalking.apm.network.ProtocolVersion;
 
 /**
  * @author peng-yongsheng
@@ -34,5 +35,5 @@ public class SegmentCoreInfo {
     private boolean isError;
     private long minuteTimeBucket;
     private byte[] dataBinary;
-    private boolean isV2;
+    private ProtocolVersion version;
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SegmentStandardizationWorker.java
Patch:
@@ -42,7 +42,7 @@ public class SegmentStandardizationWorker extends AbstractWorker<SegmentStandard
 
     public SegmentStandardizationWorker(ModuleDefineHolder moduleDefineHolder,
         DataStreamReader.CallBack<UpstreamSegment> segmentParse, String path, int offsetFileMaxSize,
-        int dataFileMaxSize, boolean cleanWhenRestart, boolean isV6) throws IOException {
+        int dataFileMaxSize, boolean cleanWhenRestart) throws IOException {
         super(moduleDefineHolder);
 
         BufferStream.Builder<UpstreamSegment> builder = new BufferStream.Builder<>(path);
@@ -59,7 +59,7 @@ public SegmentStandardizationWorker(ModuleDefineHolder moduleDefineHolder,
         dataCarrier.consume(new Consumer(stream), 1, 200);
 
         MetricsCreator metricsCreator = moduleDefineHolder.find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);
-        String metricNamePrefix = isV6 ? "v6_" : "v5_";
+        String metricNamePrefix =  "v6_";
         traceBufferFileIn = metricsCreator.createCounter(metricNamePrefix + "trace_buffer_file_in", "The number of trace segment into the buffer file",
             MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);
     }

File: oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleProvider.java
Patch:
@@ -76,7 +76,7 @@ protected final ModuleManager getManager() {
     public abstract String[] requiredModules();
 
     /**
-     * Register a implementation for the service of this moduleDefine provider.
+     * Register an implementation for the service of this moduleDefine provider.
      */
     @Override public final void registerServiceImplementation(Class<? extends Service> serviceType,
         Service service) throws ServiceNotProvidedException {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/server/GRPCHandlerRegister.java
Patch:
@@ -22,11 +22,13 @@
 import org.apache.skywalking.oap.server.library.module.Service;
 
 /**
- * @author peng-yongsheng
+ * @author peng-yongsheng, jian.tan
  */
 public interface GRPCHandlerRegister extends Service {
 
     void addHandler(BindableService handler);
 
     void addHandler(ServerServiceDefinition definition);
+
+    void addFilter(ServerInterceptor interceptor);
 }

File: oap-server/server-receiver-plugin/skywalking-sharing-server-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/sharing/server/SharingServerConfig.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
 
 /**
- * @author peng-yongsheng,yantaowu
+ * @author peng-yongsheng,yantaowu,jian.tan
  */
 @Getter
 @Setter
@@ -36,4 +36,5 @@ public class SharingServerConfig extends ModuleConfig {
     private int maxMessageSize;
     private int gRPCThreadPoolSize;
     private int gRPCThreadPoolQueueSize;
+    private String authentication;
 }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/MetricsValueType.java
Patch:
@@ -19,5 +19,5 @@
 package org.apache.skywalking.oap.server.core.alarm.provider;
 
 public enum MetricsValueType {
-    LONG, INT, DOUBLE
+    LONG, INT, DOUBLE, MULTI_INTS
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java
Patch:
@@ -34,5 +34,7 @@ public interface IMetricsQueryDAO extends DAO {
 
     IntValues getLinearIntValues(String indName, Downsampling downsampling, List<String> ids, String valueCName) throws IOException;
 
+    IntValues[] getMultipleLinearIntValues(String indName, Downsampling downsampling, List<String> ids, int numOfLinear, String valueCName) throws IOException;
+
     Thermodynamic getThermodynamic(String indName, Downsampling downsampling, List<String> ids, String valueCName) throws IOException;
 }

File: test/e2e/e2e-ttl/e2e-ttl-es/src/test/java/org/apache/skywalking/e2e/StorageTTLITCase.java
Patch:
@@ -43,7 +43,7 @@
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 
-import static org.apache.skywalking.e2e.metrics.MetricsQuery.SERVICE_P99;
+import static org.apache.skywalking.e2e.metrics.MetricsQuery.SERVICE_RESP_TIME;
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
@@ -243,7 +243,7 @@ private Metrics queryMetrics(
                 return queryClient.metrics(
                     new MetricsQuery()
                         .id(serviceId)
-                        .metricsName(SERVICE_P99)
+                        .metricsName(SERVICE_RESP_TIME)
                         .step(step)
                         .start(queryStart)
                         .end(queryEnd)

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/command/CommandDeserializer.java
Patch:
@@ -28,6 +28,8 @@ public static BaseCommand deserialize(final Command command) {
         final String commandName = command.getCommand();
         if (ServiceResetCommand.NAME.equals(commandName)) {
             return ServiceResetCommand.DESERIALIZER.deserialize(command);
+        } else if (ProfileTaskCommand.NAME.equals(commandName)) {
+            return ProfileTaskCommand.DESERIALIZER.deserialize(command);
         }
         throw new UnsupportedCommandException(command);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -170,6 +170,7 @@ public CoreModuleProvider() {
         // add profile service implementations
         this.registerServiceImplementation(ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));
         this.registerServiceImplementation(ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager()));
+        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));
 
         this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -68,6 +68,7 @@ public class DefaultScopeDefine {
     public static final int JAEGER_SPAN = 24;
     public static final int HTTP_ACCESS_LOG = 25;
     public static final int PROFILE_TASK = 26;
+    public static final int PROFILE_TASK_LOG = 27;
 
     /**
      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.storage;
 
 import org.apache.skywalking.oap.server.core.storage.cache.*;
+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskLogQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.*;
 import org.apache.skywalking.oap.server.library.module.*;
@@ -41,6 +42,6 @@ public StorageModule() {
             IServiceInventoryCacheDAO.class, IServiceInstanceInventoryCacheDAO.class,
             IEndpointInventoryCacheDAO.class, INetworkAddressInventoryCacheDAO.class,
             ITopologyQueryDAO.class, IMetricsQueryDAO.class, ITraceQueryDAO.class, IMetadataQueryDAO.class, IAggregationQueryDAO.class, IAlarmQueryDAO.class,
-            ITopNRecordsQueryDAO.class, ILogQueryDAO.class, IProfileTaskQueryDAO.class};
+            ITopNRecordsQueryDAO.class, ILogQueryDAO.class, IProfileTaskQueryDAO.class, IProfileTaskLogQueryDAO.class};
     }
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/ProfileMutation.java
Patch:
@@ -54,7 +54,8 @@ public ProfileTaskCreationResult createProfileTask(ProfileTaskCreationRequest cr
                 creationRequest.getStartTime() == null ? -1 : creationRequest.getStartTime(),
                 creationRequest.getDuration(),
                 creationRequest.getMinDurationThreshold(),
-                creationRequest.getDumpPeriod()
+                creationRequest.getDumpPeriod(),
+                creationRequest.getMaxSamplingCount()
         );
     }
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/ProfileTaskCreationRequest.java
Patch:
@@ -37,5 +37,6 @@ public class ProfileTaskCreationRequest {
     private Step durationUnit;
     private int minDurationThreshold;
     private int dumpPeriod;
+    private int maxSamplingCount;
 
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.skywalking.oap.server.core.storage.cache.INetworkAddressInventoryCacheDAO;
 import org.apache.skywalking.oap.server.core.storage.cache.IServiceInstanceInventoryCacheDAO;
 import org.apache.skywalking.oap.server.core.storage.cache.IServiceInventoryCacheDAO;
+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskLogQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IAggregationQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
@@ -119,6 +120,7 @@ public void prepare() throws ServiceNotProvidedException {
         this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));
 
         this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));
+        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));
     }
 
     @Override

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileTaskQueryEsDAO.java
Patch:
@@ -94,8 +94,10 @@ private ProfileTask parseTask(SearchHit data) {
                 .serviceId(((Number) data.getSourceAsMap().get(ProfileTaskNoneStream.SERVICE_ID)).intValue())
                 .endpointName((String) data.getSourceAsMap().get(ProfileTaskNoneStream.ENDPOINT_NAME))
                 .startTime(((Number) data.getSourceAsMap().get(ProfileTaskNoneStream.START_TIME)).longValue())
+                .createTime(((Number) data.getSourceAsMap().get(ProfileTaskNoneStream.CREATE_TIME)).longValue())
                 .duration(((Number) data.getSourceAsMap().get(ProfileTaskNoneStream.DURATION)).intValue())
                 .minDurationThreshold(((Number) data.getSourceAsMap().get(ProfileTaskNoneStream.MIN_DURATION_THRESHOLD)).intValue())
-                .dumpPeriod(((Number) data.getSourceAsMap().get(ProfileTaskNoneStream.DUMP_PERIOD)).intValue()).build();
+                .dumpPeriod(((Number) data.getSourceAsMap().get(ProfileTaskNoneStream.DUMP_PERIOD)).intValue())
+                .maxSamplingCount(((Number) data.getSourceAsMap().get(ProfileTaskNoneStream.MAX_SAMPLING_COUNT)).intValue()).build();
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/StorageModuleElasticsearch7Provider.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.oap.server.core.storage.cache.INetworkAddressInventoryCacheDAO;
 import org.apache.skywalking.oap.server.core.storage.cache.IServiceInstanceInventoryCacheDAO;
 import org.apache.skywalking.oap.server.core.storage.cache.IServiceInventoryCacheDAO;
+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskLogQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IAggregationQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
@@ -47,6 +48,7 @@
 import org.apache.skywalking.oap.server.library.module.ServiceNotProvidedException;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.BatchProcessEsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.HistoryDeleteEsDAO;
+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.ProfileTaskLogEsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.ProfileTaskQueryEsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.TopNRecordsQueryEsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.TopologyQueryEsDAO;
@@ -124,6 +126,7 @@ public void prepare() throws ServiceNotProvidedException {
         this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEs7DAO(elasticSearch7Client));
 
         this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearch7Client, config.getProfileTaskQueryMaxSize()));
+        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearch7Client, config.getProfileTaskQueryMaxSize()));
     }
 
     @Override

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.storage.*;
 import org.apache.skywalking.oap.server.core.storage.cache.*;
+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskLogQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.*;
 import org.apache.skywalking.oap.server.core.storage.ttl.GeneralStorageTTL;
@@ -92,6 +93,7 @@ public H2StorageProvider() {
         this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));
 
         this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));
+        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskQueryDAO.java
Patch:
@@ -98,8 +98,10 @@ private ProfileTask parseTask(ResultSet data) throws SQLException {
                 .serviceId(data.getInt(ProfileTaskNoneStream.SERVICE_ID))
                 .endpointName(data.getString(ProfileTaskNoneStream.ENDPOINT_NAME))
                 .startTime(data.getLong(ProfileTaskNoneStream.START_TIME))
+                .createTime(data.getLong(ProfileTaskNoneStream.CREATE_TIME))
                 .duration(data.getInt(ProfileTaskNoneStream.DURATION))
                 .minDurationThreshold(data.getInt(ProfileTaskNoneStream.MIN_DURATION_THRESHOLD))
-                .dumpPeriod(data.getInt(ProfileTaskNoneStream.DUMP_PERIOD)).build();
+                .dumpPeriod(data.getInt(ProfileTaskNoneStream.DUMP_PERIOD))
+                .maxSamplingCount(data.getInt(ProfileTaskNoneStream.MAX_SAMPLING_COUNT)).build();
     }
 }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.skywalking.oap.server.core.storage.cache.INetworkAddressInventoryCacheDAO;
 import org.apache.skywalking.oap.server.core.storage.cache.IServiceInstanceInventoryCacheDAO;
 import org.apache.skywalking.oap.server.core.storage.cache.IServiceInventoryCacheDAO;
+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskLogQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IAggregationQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
@@ -107,6 +108,7 @@ public MySQLStorageProvider() {
         this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));
 
         this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));
+        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));
     }
     
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: test/e2e/e2e-profile/e2e-profile-test-runner/src/main/java/org/apache/skywalking/e2e/profile/ProfileClient.java
Patch:
@@ -59,7 +59,8 @@ public ProfileTaskCreationResult createProfileTask(final ProfileTaskCreationRequ
                 .replace("{duration}", String.valueOf(creationRequest.getDuration()))
                 .replace("{startTime}", String.valueOf(creationRequest.getStartTime()))
                 .replace("{minDurationThreshold}", String.valueOf(creationRequest.getMinDurationThreshold()))
-                .replace("{dumpPeriod}", String.valueOf(creationRequest.getDumpPeriod()));
+                .replace("{dumpPeriod}", String.valueOf(creationRequest.getDumpPeriod()))
+                .replace("{maxSamplingCount}", String.valueOf(creationRequest.getMaxSamplingCount()));
         final ResponseEntity<GQLResponse<ProfileTaskCreationResultWrapper>> responseEntity = restTemplate.exchange(
                 new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),
                 new ParameterizedTypeReference<GQLResponse<ProfileTaskCreationResultWrapper>>() {

File: test/e2e/e2e-profile/e2e-profile-test-runner/src/main/java/org/apache/skywalking/e2e/profile/creation/ProfileTaskCreationRequest.java
Patch:
@@ -38,5 +38,6 @@ public class ProfileTaskCreationRequest {
     private int duration;
     private int minDurationThreshold;
     private int dumpPeriod;
+    private int maxSamplingCount;
 
 }

File: apm-sniffer/apm-sdk-plugin/dubbo-2.7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asf/dubbo/DubboInterceptor.java
Patch:
@@ -72,6 +72,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             while (next.hasNext()) {
                 next = next.next();
                 rpcContext.getAttachments().put(next.getHeadKey(), next.getHeadValue());
+                if (invocation.getAttachments().containsKey(next.getHeadKey())) {
+                    invocation.getAttachments().remove(next.getHeadKey());
+                }
             }
         } else {
             ContextCarrier contextCarrier = new ContextCarrier();

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/main/java/org/apache/skywalking/apm/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -73,6 +73,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             while (next.hasNext()) {
                 next = next.next();
                 rpcContext.getAttachments().put(next.getHeadKey(), next.getHeadValue());
+                if (invocation.getAttachments().containsKey(next.getHeadKey())) {
+                    invocation.getAttachments().remove(next.getHeadKey());
+                }
             }
         } else {
             ContextCarrier contextCarrier = new ContextCarrier();

File: test/plugin/mock-collector/src/main/java/org/apache/skywalking/plugin/test/mockcollector/entity/RegistryItem.java
Patch:
@@ -17,15 +17,12 @@
 package org.apache.skywalking.plugin.test.mockcollector.entity;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.skywalking.apm.network.language.agent.SpanType;
-
 public class RegistryItem {
     /**
      * applicationCode, applicationId

File: test/plugin/mock-collector/src/main/java/org/apache/skywalking/plugin/test/mockcollector/entity/ValidateData.java
Patch:
@@ -34,7 +34,7 @@ public SegmentItems getSegmentItem() {
         return segmentItem;
     }
 
-    public static void clearData(){
+    public static void clearData() {
         System.out.println("Clear Data");
         INSTANCE.segmentItem = new SegmentItems();
         INSTANCE.registryItem.getOperationNames().clear();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/ServiceAndEndpointRegisterClient.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.skywalking.apm.network.common.Commands;
 import org.apache.skywalking.apm.network.common.KeyIntValuePair;
 import org.apache.skywalking.apm.network.common.KeyStringValuePair;
+import org.apache.skywalking.apm.network.common.ServiceType;
 import org.apache.skywalking.apm.network.register.v2.RegisterGrpc;
 import org.apache.skywalking.apm.network.register.v2.Service;
 import org.apache.skywalking.apm.network.register.v2.ServiceInstance;
@@ -141,7 +142,7 @@ public void run() {
                 if (RemoteDownstreamConfig.Agent.SERVICE_ID == DictionaryUtil.nullValue()) {
                     if (registerBlockingStub != null) {
                         ServiceRegisterMapping serviceRegisterMapping = registerBlockingStub.withDeadlineAfter(GRPC_UPSTREAM_TIMEOUT, TimeUnit.SECONDS).doServiceRegister(
-                            Services.newBuilder().addServices(Service.newBuilder().setServiceName(Config.Agent.SERVICE_NAME)).build());
+                            Services.newBuilder().addServices(Service.newBuilder().setServiceName(Config.Agent.SERVICE_NAME).setType(ServiceType.normal)).build());
                         if (serviceRegisterMapping != null) {
                             for (KeyIntValuePair registered : serviceRegisterMapping.getServicesList()) {
                                 if (Config.Agent.SERVICE_NAME.equals(registered.getKey())) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/IServiceInventoryRegister.java
Patch:
@@ -29,6 +29,8 @@ public interface IServiceInventoryRegister extends Service {
 
     int getOrCreate(String serviceName, JsonObject properties);
 
+    int getOrCreate(String serviceName, NodeType nodeType, JsonObject properties);
+
     int getOrCreate(int addressId, String serviceName, JsonObject properties);
 
     void update(int serviceId, NodeType nodeType, JsonObject properties);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetadataQueryDAO.java
Patch:
@@ -36,6 +36,8 @@ public interface IMetadataQueryDAO extends DAO {
 
     List<Service> getAllServices(final long startTimestamp, final long endTimestamp) throws IOException;
 
+    List<Service> getAllBrowserServices(long startTimestamp, long endTimestamp) throws IOException;
+
     List<Database> getAllDatabases() throws IOException;
 
     List<Service> searchServices(final long startTimestamp, final long endTimestamp,

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/api/ILog.java
Patch:
@@ -51,5 +51,7 @@ public interface ILog {
 
     void debug(String format, Object... arguments);
 
+    void debug(Throwable t, String format, Object... arguments);
+
     void error(String format);
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/ProtectiveShieldMatcher.java
Patch:
@@ -46,7 +46,9 @@ public boolean matches(T target) {
         try {
             return this.matcher.matches(target);
         } catch (Throwable t) {
-            logger.warn(t, "Byte-buddy occurs exception when match type.");
+            if (logger.isDebugEnable()) {
+                logger.debug(t, "Byte-buddy occurs exception when match type.");
+            }
             return false;
         }
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/DurationUtils.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.text.*;
 import java.util.*;
+
 import org.apache.skywalking.oap.server.core.*;
 import org.apache.skywalking.oap.server.core.analysis.Downsampling;
 import org.apache.skywalking.oap.server.core.query.entity.Step;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -67,6 +67,7 @@ public class DefaultScopeDefine {
     public static final int ZIPKIN_SPAN = 23;
     public static final int JAEGER_SPAN = 24;
     public static final int HTTP_ACCESS_LOG = 25;
+    public static final int PROFILE_TASK = 26;
 
     /**
      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.storage;
 
 import org.apache.skywalking.oap.server.core.storage.cache.*;
+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.*;
 import org.apache.skywalking.oap.server.library.module.*;
 
@@ -40,6 +41,6 @@ public StorageModule() {
             IServiceInventoryCacheDAO.class, IServiceInstanceInventoryCacheDAO.class,
             IEndpointInventoryCacheDAO.class, INetworkAddressInventoryCacheDAO.class,
             ITopologyQueryDAO.class, IMetricsQueryDAO.class, ITraceQueryDAO.class, IMetadataQueryDAO.class, IAggregationQueryDAO.class, IAlarmQueryDAO.class,
-            ITopNRecordsQueryDAO.class, ILogQueryDAO.class};
+            ITopNRecordsQueryDAO.class, ILogQueryDAO.class, IProfileTaskQueryDAO.class};
     }
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/GraphQLQueryProvider.java
Patch:
@@ -70,6 +70,8 @@ public class GraphQLQueryProvider extends ModuleProvider {
             .resolvers(new TopNRecordsQuery(getManager()))
             .file("query-protocol/log.graphqls")
             .resolvers(new LogQuery(getManager()))
+            .file("query-protocol/profile.graphqls")
+            .resolvers(new ProfileQuery(getManager()), new ProfileMutation(getManager()))
             .build()
             .makeExecutableSchema();
         this.graphQL = GraphQL.newGraphQL(schema).build();

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java
Patch:
@@ -44,6 +44,7 @@ public class StorageModuleElasticsearchConfig extends ModuleConfig {
     @Setter private int resultWindowMaxSize = 10000;
     @Setter private int metadataQueryMaxSize = 5000;
     @Setter private int segmentQueryMaxSize = 200;
+    @Setter private int profileTaskQueryMaxSize = 200;
     @Setter private int recordDataTTL = 7;
     @Setter private int minuteMetricsDataTTL = 2;
     @Setter private int hourMetricsDataTTL = 2;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.storage.*;
 import org.apache.skywalking.oap.server.core.storage.cache.*;
+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.*;
 import org.apache.skywalking.oap.server.core.storage.ttl.GeneralStorageTTL;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
@@ -89,6 +90,8 @@ public H2StorageProvider() {
         this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));
         this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));
         this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));
+
+        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java
Patch:
@@ -51,9 +51,9 @@
  * @author kezhenxu94
  */
 public class SimpleQueryClient {
-    private final RestTemplate restTemplate = new RestTemplate();
+    protected final RestTemplate restTemplate = new RestTemplate();
 
-    private final String endpointUrl;
+    protected final String endpointUrl;
 
     public SimpleQueryClient(String host, String port) {
         this("http://" + host + ":" + port + "/graphql");

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodAnnotationMatch.java
Patch:
@@ -27,12 +27,12 @@
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import net.bytebuddy.matcher.ElementMatchers;
 
 import static net.bytebuddy.matcher.ElementMatchers.declaresMethod;
 import static net.bytebuddy.matcher.ElementMatchers.isAnnotatedWith;
 import static net.bytebuddy.matcher.ElementMatchers.isInterface;
 import static net.bytebuddy.matcher.ElementMatchers.named;
-import static net.bytebuddy.matcher.ElementMatchers.not;
 
 /**
  * Match the class, which has methods with the certain annotations.
@@ -60,7 +60,7 @@ public ElementMatcher.Junction buildJunction() {
                 junction = junction.and(buildEachAnnotation(annotation));
             }
         }
-        junction = declaresMethod(junction).and(not(isInterface()));
+        junction = declaresMethod(junction).and(ElementMatchers.not(isInterface()));
         return junction;
     }
 
@@ -85,7 +85,7 @@ private ElementMatcher.Junction buildEachAnnotation(String annotationName) {
         return isAnnotatedWith(named(annotationName));
     }
 
-    public static ClassMatch byMethodAnnotationMatch(String[] annotations) {
+    public static IndirectMatch byMethodAnnotationMatch(String... annotations) {
         return new MethodAnnotationMatch(annotations);
     }
 }

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationActivation.java
Patch:
@@ -65,6 +65,6 @@ public class TraceAnnotationActivation extends ClassInstanceMethodsEnhancePlugin
     }
 
     @Override protected ClassMatch enhanceClass() {
-        return MethodAnnotationMatch.byMethodAnnotationMatch(new String[] {TRACE_ANNOTATION});
+        return MethodAnnotationMatch.byMethodAnnotationMatch(TRACE_ANNOTATION);
     }
 }

File: apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/interceptor/BaseInterceptorMethods.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.skywalking.apm.plugin.customize.conf.CustomizeConfiguration;
 import org.apache.skywalking.apm.plugin.customize.conf.MethodConfiguration;
 import org.apache.skywalking.apm.plugin.customize.constants.Constants;
-import org.apache.skywalking.apm.plugin.customize.util.CustomizeExpression;
+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;
 
 import java.lang.reflect.Method;
 import java.util.HashMap;

File: apm-sniffer/optional-plugins/customize-enhance-plugin/src/test/java/org/apache/skywalking/apm/plugin/customize/util/CustomizeExpressionTest.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.apm.plugin.customize.util;
 
+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;
 import org.junit.Assert;
 import org.junit.Test;
 

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/jdbc/hikaricp/JDBCHikariCPClient.java
Patch:
@@ -48,7 +48,7 @@ public JDBCHikariCPClient(Properties properties) {
     }
 
     /**
-     * Default getConnection is not set in auto-commit.
+     * Default getConnection is set in auto-commit.
      *
      * @return
      * @throws JDBCClientException

File: apm-protocol/apm-network/src/test/java/org/apache/skywalking/apm/network/trace/proto/GRPCNoServerTest.java
Patch:
@@ -40,7 +40,7 @@ public static void main(String[] args) throws InterruptedException {
             NettyChannelBuilder.forAddress("127.0.0.1", 8080)
                 .nameResolverFactory(new DnsNameResolverProvider())
                 .maxInboundMessageSize(1024 * 1024 * 50)
-                .usePlaintext(true);
+                .usePlaintext();
         ManagedChannel channel = channelBuilder.build();
         TraceSegmentServiceGrpc.TraceSegmentServiceStub serviceStub = TraceSegmentServiceGrpc.newStub(channel);
         final Status[] status = {null};

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/StandardChannelBuilder.java
Patch:
@@ -26,11 +26,10 @@
  */
 public class StandardChannelBuilder implements ChannelBuilder {
     private final static int MAX_INBOUND_MESSAGE_SIZE = 1024 * 1024 * 50;
-    private final static boolean USE_PLAIN_TEXT = true;
 
     @Override public ManagedChannelBuilder build(ManagedChannelBuilder managedChannelBuilder) throws Exception {
         return managedChannelBuilder.nameResolverFactory(new DnsNameResolverProvider())
             .maxInboundMessageSize(MAX_INBOUND_MESSAGE_SIZE)
-            .usePlaintext(USE_PLAIN_TEXT);
+            .usePlaintext();
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/ServiceInstanceTopologyBuilder.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.query;
 
-import groovy.util.logging.Slf4j;
+import lombok.extern.slf4j.Slf4j;
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/grpc/GRPCClient.java
Patch:
@@ -42,7 +42,7 @@ public GRPCClient(String host, int port) {
     }
 
     @Override public void connect() {
-        channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext(true).build();
+        channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();
     }
 
     @Override public void shutdown() {

File: oap-server/server-library/library-client/src/test/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ITElasticSearchClient.java
Patch:
@@ -26,8 +26,8 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
-import org.apache.commons.lang3.StringUtils;
 import org.apache.http.client.methods.HttpGet;
+import org.apache.skywalking.apm.util.StringUtil;
 import org.elasticsearch.action.admin.indices.get.GetIndexRequest;
 import org.elasticsearch.action.bulk.BulkProcessor;
 import org.elasticsearch.action.get.GetResponse;
@@ -247,7 +247,7 @@ private RestHighLevelClient getRestHighLevelClient() {
     }
 
     private JsonObject undoFormatIndexName(JsonObject index) {
-        if (StringUtils.isNotEmpty(namespace) && index != null && index.size() > 0) {
+        if (StringUtil.isNotEmpty(namespace) && index != null && index.size() > 0) {
             logger.info("UndoFormatIndexName before " + index.toString());
             String namespacePrefix = namespace + "_";
             index.entrySet().forEach(entry -> {

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/envoy/MetricServiceGRPCHandlerTestMain.java
Patch:
@@ -32,7 +32,7 @@
 public class MetricServiceGRPCHandlerTestMain {
 
     public static void main(String[] args) throws InterruptedException {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
 
         MetricsServiceGrpc.MetricsServiceStub stub = MetricsServiceGrpc.newStub(channel);
 

File: oap-server/server-receiver-plugin/skywalking-istio-telemetry-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/istio/telemetry/handler/IstioTelemetryHandlerMainTest.java
Patch:
@@ -35,7 +35,7 @@
 public class IstioTelemetryHandlerMainTest {
 
     public static void main(String[] args) throws InterruptedException {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
 
         HandleMetricServiceGrpc.HandleMetricServiceBlockingStub stub = HandleMetricServiceGrpc.newBlockingStub(channel);
 

File: oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/jvm/provider/handler/JVMMetricsServiceHandlerMainTest.java
Patch:
@@ -29,7 +29,7 @@
 public class JVMMetricsServiceHandlerMainTest {
 
     public static void main(String[] args) {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
 
         JVMMetricsServiceGrpc.JVMMetricsServiceBlockingStub stub = JVMMetricsServiceGrpc.newBlockingStub(channel);
 

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/ApplicationRegisterHandlerTestCase.java
Patch:
@@ -31,7 +31,7 @@ public class ApplicationRegisterHandlerTestCase {
     private static final Logger logger = LoggerFactory.getLogger(ApplicationRegisterHandlerTestCase.class);
 
     public static void main(String[] args) {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
 
         ApplicationRegisterServiceGrpc.ApplicationRegisterServiceBlockingStub stub = ApplicationRegisterServiceGrpc.newBlockingStub(channel);
 

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/InstanceDiscoveryServiceHandlerTestCase.java
Patch:
@@ -30,7 +30,7 @@ public class InstanceDiscoveryServiceHandlerTestCase {
     private static final Logger logger = LoggerFactory.getLogger(InstanceDiscoveryServiceHandlerTestCase.class);
 
     public static void main(String[] args) {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
 
         InstanceDiscoveryServiceGrpc.InstanceDiscoveryServiceBlockingStub stub = InstanceDiscoveryServiceGrpc.newBlockingStub(channel);
 

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/InstanceHeartBeatTestCase.java
Patch:
@@ -27,7 +27,7 @@
 public class InstanceHeartBeatTestCase {
 
     public static void main(String[] args) {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
 
         InstanceDiscoveryServiceGrpc.InstanceDiscoveryServiceBlockingStub stub = InstanceDiscoveryServiceGrpc.newBlockingStub(channel);
 

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/NetworkAddressRegisterServiceHandlerTestCase.java
Patch:
@@ -30,7 +30,7 @@ public class NetworkAddressRegisterServiceHandlerTestCase {
     private static final Logger logger = LoggerFactory.getLogger(NetworkAddressRegisterServiceHandlerTestCase.class);
 
     public static void main(String[] args) {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
 
         NetworkAddressRegisterServiceGrpc.NetworkAddressRegisterServiceBlockingStub stub = NetworkAddressRegisterServiceGrpc.newBlockingStub(channel);
 

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/ServiceNameDiscoveryHandlerTestCase.java
Patch:
@@ -30,7 +30,7 @@ public class ServiceNameDiscoveryHandlerTestCase {
     private static final Logger logger = LoggerFactory.getLogger(ServiceNameDiscoveryHandlerTestCase.class);
 
     public static void main(String[] args) {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
         ServiceNameDiscoveryServiceGrpc.ServiceNameDiscoveryServiceBlockingStub stub = ServiceNameDiscoveryServiceGrpc.newBlockingStub(channel);
 
         ServiceNameCollection.Builder serviceNameCollection = ServiceNameCollection.newBuilder();

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/AgentDataMock.java
Patch:
@@ -35,7 +35,7 @@ public class AgentDataMock {
     private static boolean IS_COMPLETED = false;
 
     public static void main(String[] args) throws InterruptedException {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
 
         RegisterMock registerMock = new RegisterMock(channel);
 
@@ -85,7 +85,7 @@ public static void main(String[] args) throws InterruptedException {
     }
 
     private static StreamObserver<UpstreamSegment> createStreamObserver() {
-        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
+        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext().build();
         TraceSegmentServiceGrpc.TraceSegmentServiceStub stub = TraceSegmentServiceGrpc.newStub(channel);
         return stub.collect(new StreamObserver<Downstream>() {
             @Override public void onNext(Downstream downstream) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationClientSideMetrics.java
Patch:
@@ -97,7 +97,7 @@ public Metrics toHour() {
     @Override
     public Metrics toDay() {
         ServiceInstanceRelationClientSideMetrics metrics = new ServiceInstanceRelationClientSideMetrics();
-        metrics.setTimeBucket(toTimeBucketInHour());
+        metrics.setTimeBucket(toTimeBucketInDay());
         metrics.setSourceServiceId(getSourceServiceId());
         metrics.setSourceServiceInstanceId(getSourceServiceInstanceId());
         metrics.setDestServiceId(getDestServiceId());
@@ -110,7 +110,7 @@ public Metrics toDay() {
     @Override
     public Metrics toMonth() {
         ServiceInstanceRelationClientSideMetrics metrics = new ServiceInstanceRelationClientSideMetrics();
-        metrics.setTimeBucket(toTimeBucketInHour());
+        metrics.setTimeBucket(toTimeBucketInMonth());
         metrics.setSourceServiceId(getSourceServiceId());
         metrics.setSourceServiceInstanceId(getSourceServiceInstanceId());
         metrics.setDestServiceId(getDestServiceId());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceRelation.java
Patch:
@@ -35,14 +35,14 @@ public class ServiceInstanceRelation extends Source {
     }
 
     @Override public String getEntityId() {
-        return String.valueOf(sourceServiceInstanceId) + Const.ID_SPLIT + String.valueOf(destServiceInstanceId) + Const.ID_SPLIT + String.valueOf(componentId);
+        return String.valueOf(sourceServiceInstanceId) + Const.ID_SPLIT + String.valueOf(destServiceInstanceId);
     }
 
-    @Getter @Setter private int sourceServiceInstanceId;
+    @Getter @Setter @ScopeDefaultColumn.DefinedByField(columnName = "source_service_instance_id") private int sourceServiceInstanceId;
     @Getter @Setter @ScopeDefaultColumn.DefinedByField(columnName = "source_service_id") private int sourceServiceId;
     @Getter @Setter private String sourceServiceName;
     @Getter @Setter private String sourceServiceInstanceName;
-    @Getter @Setter private int destServiceInstanceId;
+    @Getter @Setter @ScopeDefaultColumn.DefinedByField(columnName = "dest_service_instance_id") private int destServiceInstanceId;
     @Getter @Setter @ScopeDefaultColumn.DefinedByField(columnName = "dest_service_id") private int destServiceId;
     @Getter @Setter private String destServiceName;
     @Getter @Setter private String destServiceInstanceName;

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -149,4 +149,6 @@ public class ComponentsDefine {
     public static final OfficialComponent SPRING_TX = new OfficialComponent(78, "spring-tx");
 
     public static final OfficialComponent ARMERIA = new OfficialComponent(79, "Armeria");
+
+    public static final OfficialComponent JDK_THREADING = new OfficialComponent(80, "JdkThreading");
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/HierarchyMatch.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.description.type.TypeList;
 import net.bytebuddy.matcher.ElementMatcher;
@@ -101,7 +102,7 @@ private void matchHierarchyClass(TypeDescription.Generic clazz, List<String> par
 
     }
 
-    public static ClassMatch byHierarchyMatch(String[] parentTypes) {
+    public static IndirectMatch byHierarchyMatch(String... parentTypes) {
         return new HierarchyMatch(parentTypes);
     }
 }

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxLongMetricsTest.java
Patch:
@@ -44,8 +44,8 @@ public void testSelfCombine() {
         impl.combine(5);
 
         MaxLongMetricsImpl impl2 = new MaxLongMetricsImpl();
-        impl.combine(2);
-        impl.combine(6);
+        impl2.combine(2);
+        impl2.combine(6);
 
         impl.combine(impl2);
         Assert.assertEquals(10, impl.getValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java
Patch:
@@ -32,6 +32,7 @@ public class Const {
     public static final int USER_SERVICE_ID = 1;
     public static final int USER_INSTANCE_ID = 1;
     public static final int USER_ENDPOINT_ID = 1;
+    public static final int INEXISTENCE_ENDPOINT_ID = -1;
     public static final String USER_CODE = "User";
     public static final String SEGMENT_SPAN_SPLIT = "S";
     public static final String UNKNOWN = "Unknown";

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java
Patch:
@@ -141,7 +141,7 @@ private boolean preBuild(List<UniqueId> traceIds, SegmentDecorator segmentDecora
         for (int i = 0; i < segmentDecorator.getSpansCount(); i++) {
             SpanDecorator spanDecorator = segmentDecorator.getSpans(i);
 
-            if (!SpanIdExchanger.getInstance(moduleManager).exchange(spanDecorator, segmentCoreInfo.getServiceId())) {
+            if (!SpanExchanger.getInstance(moduleManager).exchange(spanDecorator, segmentCoreInfo.getServiceId())) {
                 exchanged = false;
             } else {
                 for (int j = 0; j < spanDecorator.getRefsCount(); j++) {

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java
Patch:
@@ -158,7 +158,7 @@ private boolean preBuild(List<UniqueId> traceIds, SegmentDecorator segmentDecora
         for (int i = 0; i < segmentDecorator.getSpansCount(); i++) {
             SpanDecorator spanDecorator = segmentDecorator.getSpans(i);
 
-            if (!SpanIdExchanger.getInstance(moduleManager).exchange(spanDecorator, segmentCoreInfo.getServiceId())) {
+            if (!SpanExchanger.getInstance(moduleManager).exchange(spanDecorator, segmentCoreInfo.getServiceId())) {
                 exchanged = false;
             } else {
                 for (int j = 0; j < spanDecorator.getRefsCount(); j++) {

File: test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/SegmentAssert.java
Patch:
@@ -211,8 +211,8 @@ private static SegmentRef findSegmentRef(List<SegmentRef> actual, SegmentRef exp
 
     private static boolean simpleSegmentRefEquals(SegmentRef expected, SegmentRef actual) {
         try {
-            ExpressParser.parse(expected.entryServiceName()).assertValue("entry service name", actual.entryServiceName());
-            ExpressParser.parse(expected.parentServiceName()).assertValue("parent service name", actual.parentServiceName());
+            ExpressParser.parse(expected.entryEndpointName()).assertValue("entry service name", actual.entryEndpointName());
+            ExpressParser.parse(expected.parentEndpointName()).assertValue("parent service name", actual.parentEndpointName());
             ExpressParser.parse(expected.refType()).assertValue("ref type", actual.refType());
             return true;
         } catch (ValueAssertFailedException e) {

File: test/plugin/validator/src/main/java/org/apache/skywalking/plugin/test/agent/tool/validator/assertor/exception/SegmentRefNotFoundException.java
Patch:
@@ -40,9 +40,9 @@ public String getCauseMessage() {
             String reason = cause.getFailedCause().getCauseMessage();
 
             StringBuilder actualSegmentRef = new StringBuilder(String.format("\nSegmentRef:\t%s\n", reason));
-            actualSegmentRef.append(String.format(" - entryServiceName:\t\t%s\n", actual.entryServiceName()))
+            actualSegmentRef.append(String.format(" - entryServiceName:\t\t%s\n", actual.entryEndpointName()))
                 .append(String.format(" - networkAddress:\t\t\t%s\n", actual.networkAddress()))
-                .append(String.format(" - parentServiceName:\t\t%s\n", actual.parentServiceName()))
+                .append(String.format(" - parentServiceName:\t\t%s\n", actual.parentEndpointName()))
                 .append(String.format(" - parentSpanId:\t\t\t%s\n", actual.parentSpanId()))
                 .append(String.format(" - parentTraceSegmentId:\t%s\n", actual.parentTraceSegmentId()))
                 .append(String.format(" - refType:\t\t\t\t\t%s", actual.refType())).toString();

File: apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/RemotePeerCache.java
Patch:
@@ -34,7 +34,7 @@ public void addRemotePeer(String host, int port) {
         if (remotePeers.isEmpty()) {
             remotePeers = hostPort;
         } else {
-            remotePeers = "," + hostPort;
+            remotePeers = remotePeers + "," + hostPort;
         }
     }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/GetPropertyDescriptorsInterceptor.java
Patch:
@@ -41,7 +41,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
 
         PropertyDescriptor[] propertyDescriptors = (PropertyDescriptor[])ret;
 
-        if (EnhancedInstance.class.isAssignableFrom(((BeanWrapperImpl)objInst).getRootClass())) {
+        Class<?> rootClass = ((BeanWrapperImpl) objInst).getRootClass();
+        if (rootClass != null && EnhancedInstance.class.isAssignableFrom(rootClass)) {
             List<PropertyDescriptor> newPropertyDescriptors = new ArrayList<PropertyDescriptor>();
             for (PropertyDescriptor descriptor : propertyDescriptors) {
                 if (!"skyWalkingDynamicField".equals(descriptor.getName())) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceCallRelationDispatcher.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.manual.servicerelation;
+package org.apache.skywalking.oap.server.core.analysis.manual.relation.service;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationClientSideMetrics.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.manual.servicerelation;
+package org.apache.skywalking.oap.server.core.analysis.manual.relation.service;
 
 import java.util.*;
 import lombok.*;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.manual.servicerelation;
+package org.apache.skywalking.oap.server.core.analysis.manual.relation.service;
 
 import java.util.*;
 import lombok.*;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/NetworkAddressInventoryRegister.java
Patch:
@@ -73,7 +73,7 @@ private IServiceInstanceInventoryRegister getServiceInstanceInventoryRegister()
             int serviceId = getServiceInventoryRegister().getOrCreate(addressId, networkAddress, properties);
 
             if (serviceId != Const.NONE) {
-                int serviceInstanceId = getServiceInstanceInventoryRegister().getOrCreate(serviceId, addressId, System.currentTimeMillis());
+                int serviceInstanceId = getServiceInstanceInventoryRegister().getOrCreate(serviceId, networkAddress, addressId, System.currentTimeMillis());
 
                 if (serviceInstanceId != Const.NONE) {
                     return addressId;

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParserServiceImpl;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.endpoint.MultiScopesSpanListener;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.segment.SegmentSpanListener;
+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.service.ServiceInstanceMappingSpanListener;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.service.ServiceMappingSpanListener;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.standardization.SegmentStandardizationWorker;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
@@ -92,6 +93,7 @@ public SegmentParserListenerManager listenerManager() {
         if (moduleConfig.isTraceAnalysis()) {
             listenerManager.add(new MultiScopesSpanListener.Factory());
             listenerManager.add(new ServiceMappingSpanListener.Factory());
+            listenerManager.add(new ServiceInstanceMappingSpanListener.Factory());
         }
         listenerManager.add(new SegmentSpanListener.Factory(moduleConfig.getSampleRate()));
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -111,7 +111,7 @@ public void prepare() throws ServiceNotProvidedException {
         this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));
 
         this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));
-        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));
+        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));
         this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));
         this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));
 

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/StorageModuleElasticsearch7Provider.java
Patch:
@@ -113,7 +113,7 @@ public void prepare() throws ServiceNotProvidedException {
         this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearch7Client, new ElasticsearchStorageTTL()));
 
         this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEs7DAO(elasticSearch7Client, config.getResultWindowMaxSize()));
-        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheEs7DAO(elasticSearch7Client));
+        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheEs7DAO(elasticSearch7Client, config.getResultWindowMaxSize()));
         this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEs7DAO(elasticSearch7Client));
         this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEs7DAO(elasticSearch7Client, config.getResultWindowMaxSize()));
 

File: oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/cache/ServiceInstanceInventoryCacheEs7DAO.java
Patch:
@@ -36,8 +36,8 @@ public class ServiceInstanceInventoryCacheEs7DAO extends ServiceInstanceInventor
 
     private static final Logger logger = LoggerFactory.getLogger(ServiceInstanceInventoryCacheEs7DAO.class);
 
-    public ServiceInstanceInventoryCacheEs7DAO(ElasticSearchClient client) {
-        super(client);
+    public ServiceInstanceInventoryCacheEs7DAO(ElasticSearchClient client, int resultWindowMaxSize) {
+        super(client, resultWindowMaxSize);
     }
 
     @Override

File: test/e2e/e2e-ttl/e2e-ttl-es/src/test/java/org/apache/skywalking/e2e/StorageTTLITCase.java
Patch:
@@ -51,6 +51,9 @@
  */
 @Slf4j
 public class StorageTTLITCase {
+
+    //TODO Make TTL ES7 test stable. Ref https://github.com/apache/skywalking/pull/3978, https://github.com/apache/skywalking/issues/4018
+
     private static final int SW_STORAGE_ES_MONTH_METRIC_DATA_TTL = 4;
     private static final int SW_STORAGE_ES_OTHER_METRIC_DATA_TTL = 5;
 
@@ -190,7 +193,6 @@ private void ensureSendingMetricsWorks(
         final LocalDateTime queryEnd,
         final String step
     ) throws Exception {
-
         boolean prepared = false;
         while (!prepared) {
             sendMetrics(
@@ -199,7 +201,6 @@ private void ensureSendingMetricsWorks(
                     .setEndTime(endTime)
                     .build()
             );
-
             final Metrics serviceMetrics = queryMetrics(queryStart, queryEnd, step);
             final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();
             final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();

File: apm-sniffer/apm-sdk-plugin/dubbo-2.7.x-conflict-patch/src/main/java/org/apache/skywalking/apm/plugin/asf/dubbo/patch/WrapperInstrumentation.java
Patch:
@@ -43,7 +43,7 @@ public class WrapperInstrumentation extends ClassStaticMethodsEnhancePluginDefin
                 }
 
                 @Override public String getMethodsInterceptor() {
-                    return "org.apache.skywalking.apm.plugin.dubbo.patch.MakeWrapperInterceptor";
+                    return "org.apache.skywalking.apm.plugin.asf.dubbo.patch.MakeWrapperInterceptor";
                 }
 
                 @Override public boolean isOverrideArgs() {

File: test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/metrics/MetricsQuery.java
Patch:
@@ -29,12 +29,14 @@ public class MetricsQuery extends AbstractQuery<MetricsQuery> {
     public static String SERVICE_P90 = "service_p90";
     public static String SERVICE_P75 = "service_p75";
     public static String SERVICE_P50 = "service_p50";
+    public static String SERVICE_APDEX = "service_apdex";
     public static String[] ALL_SERVICE_METRICS = {
         SERVICE_P99,
         SERVICE_P95,
         SERVICE_P90,
         SERVICE_P75,
-        SERVICE_P50
+        SERVICE_P50,
+        SERVICE_APDEX
     };
 
     public static String ENDPOINT_P99 = "endpoint_p99";

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -168,7 +168,8 @@ public static class Logging {
         public static String FILE_NAME = "skywalking-api.log";
 
         /**
-         * Log files directory. Default is blank string, means, use "system.out" to output logs.
+         * Log files directory. Default is blank string, means, use "{theSkywalkingAgentJarDir}/logs  " to output logs. 
+         * {theSkywalkingAgentJarDir} is the directory where the skywalking agent jar file is located.
          *
          * Ref to {@link WriterFactory#getLogWriter()}
          */

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/DataCarrier.java
Patch:
@@ -70,7 +70,7 @@ public DataCarrier setBufferStrategy(BufferStrategy strategy) {
     }
 
     /**
-     * produce data to buffer, using the givven {@link BufferStrategy}.
+     * produce data to buffer, using the given {@link BufferStrategy}.
      *
      * @param data
      * @return false means produce data failure. The data will not be consumed.

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/RecordEsDAO.java
Patch:
@@ -33,7 +33,7 @@ public class RecordEsDAO extends EsDAO implements IRecordDAO {
 
     private final StorageBuilder<Record> storageBuilder;
 
-    RecordEsDAO(ElasticSearchClient client, StorageBuilder<Record> storageBuilder) {
+    public RecordEsDAO(ElasticSearchClient client, StorageBuilder<Record> storageBuilder) {
         super(client);
         this.storageBuilder = storageBuilder;
     }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/RegisterEsDAO.java
Patch:
@@ -32,7 +32,7 @@ public class RegisterEsDAO extends EsDAO implements IRegisterDAO {
 
     private final StorageBuilder<RegisterSource> storageBuilder;
 
-    RegisterEsDAO(ElasticSearchClient client, StorageBuilder<RegisterSource> storageBuilder) {
+    public RegisterEsDAO(ElasticSearchClient client, StorageBuilder<RegisterSource> storageBuilder) {
         super(client);
         this.storageBuilder = storageBuilder;
     }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class TimeSeriesUtils {
 
-    static String timeSeries(Model model) {
+    public static String timeSeries(Model model) {
         long timeBucket = TimeBucket.getTimeBucket(System.currentTimeMillis(), model.getDownsampling());
         return timeSeries(model, timeBucket);
     }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/EndpointInventoryCacheEsDAO.java
Patch:
@@ -37,7 +37,7 @@ public class EndpointInventoryCacheEsDAO extends EsDAO implements IEndpointInven
 
     private static final Logger logger = LoggerFactory.getLogger(EndpointInventoryCacheEsDAO.class);
 
-    private final EndpointInventory.Builder builder = new EndpointInventory.Builder();
+    protected final EndpointInventory.Builder builder = new EndpointInventory.Builder();
 
     public EndpointInventoryCacheEsDAO(ElasticSearchClient client) {
         super(client);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/NetworkAddressInventoryCacheEsDAO.java
Patch:
@@ -38,8 +38,8 @@ public class NetworkAddressInventoryCacheEsDAO extends EsDAO implements INetwork
 
     private static final Logger logger = LoggerFactory.getLogger(NetworkAddressInventoryCacheEsDAO.class);
 
-    private final NetworkAddressInventory.Builder builder = new NetworkAddressInventory.Builder();
-    private final int resultWindowMaxSize;
+    protected final NetworkAddressInventory.Builder builder = new NetworkAddressInventory.Builder();
+    protected final int resultWindowMaxSize;
 
     public NetworkAddressInventoryCacheEsDAO(ElasticSearchClient client, int resultWindowMaxSize) {
         super(client);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInstanceInventoryCacheDAO.java
Patch:
@@ -37,7 +37,7 @@ public class ServiceInstanceInventoryCacheDAO extends EsDAO implements IServiceI
 
     private static final Logger logger = LoggerFactory.getLogger(ServiceInstanceInventoryCacheDAO.class);
 
-    private final ServiceInstanceInventory.Builder builder = new ServiceInstanceInventory.Builder();
+    protected final ServiceInstanceInventory.Builder builder = new ServiceInstanceInventory.Builder();
 
     public ServiceInstanceInventoryCacheDAO(ElasticSearchClient client) {
         super(client);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInventoryCacheEsDAO.java
Patch:
@@ -39,8 +39,8 @@ public class ServiceInventoryCacheEsDAO extends EsDAO implements IServiceInvento
 
     private static final Logger logger = LoggerFactory.getLogger(ServiceInventoryCacheEsDAO.class);
 
-    private final ServiceInventory.Builder builder = new ServiceInventory.Builder();
-    private final int resultWindowMaxSize;
+    protected final ServiceInventory.Builder builder = new ServiceInventory.Builder();
+    protected final int resultWindowMaxSize;
 
     public ServiceInventoryCacheEsDAO(ElasticSearchClient client, int resultWindowMaxSize) {
         super(client);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -292,7 +292,7 @@ private List<Service> buildServices(SearchResponse response) {
         return services;
     }
 
-    private BoolQueryBuilder timeRangeQueryBuild(long startTimestamp, long endTimestamp) {
+    protected BoolQueryBuilder timeRangeQueryBuild(long startTimestamp, long endTimestamp) {
         BoolQueryBuilder boolQuery1 = QueryBuilders.boolQuery();
         boolQuery1.must().add(QueryBuilders.rangeQuery(RegisterSource.HEARTBEAT_TIME).gte(endTimestamp));
         boolQuery1.must().add(QueryBuilders.rangeQuery(RegisterSource.REGISTER_TIME).lte(endTimestamp));

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java
Patch:
@@ -86,7 +86,7 @@ public MetricsQueryEsDAO(ElasticSearchClient client) {
         return intValues;
     }
 
-    private void functionAggregation(Function function, TermsAggregationBuilder parentAggBuilder, String valueCName) {
+    protected void functionAggregation(Function function, TermsAggregationBuilder parentAggBuilder, String valueCName) {
         switch (function) {
             case Avg:
                 parentAggBuilder.subAggregation(AggregationBuilders.avg(valueCName).field(valueCName));

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/InterceptorInstanceLoader.java
Patch:
@@ -63,16 +63,17 @@ public static <T> T load(String className, ClassLoader targetClassLoader)
         Object inst = INSTANCE_CACHE.get(instanceKey);
         if (inst == null) {
             INSTANCE_LOAD_LOCK.lock();
+            ClassLoader pluginLoader;
             try {
-                ClassLoader pluginLoader = EXTEND_PLUGIN_CLASSLOADERS.get(targetClassLoader);
+                pluginLoader = EXTEND_PLUGIN_CLASSLOADERS.get(targetClassLoader);
                 if (pluginLoader == null) {
                     pluginLoader = new AgentClassLoader(targetClassLoader);
                     EXTEND_PLUGIN_CLASSLOADERS.put(targetClassLoader, pluginLoader);
                 }
-                inst = Class.forName(className, true, pluginLoader).newInstance();
             } finally {
                 INSTANCE_LOAD_LOCK.unlock();
             }
+            inst = Class.forName(className, true, pluginLoader).newInstance();
             if (inst != null) {
                 INSTANCE_CACHE.put(instanceKey, inst);
             }

File: test/plugin/runner-helper/src/main/java/org/apache/skywalking/plugin/test/helper/DockerComposeRunningGenerator.java
Patch:
@@ -62,6 +62,8 @@ public void generateAdditionFiles(IConfiguration configuration) {
         root.put("docker_image_version", configuration.dockerImageVersion());
         root.put("docker_container_name", configuration.dockerContainerName());
 
+        root.put("network_name", configuration.dockerNetworkName());
+
         ArrayList<String> links = Lists.newArrayList();
         configuration.caseConfiguration().getDependencies().forEach((k, service) -> {
             links.add(service.getHostname());

File: test/plugin/runner-helper/src/main/java/org/apache/skywalking/plugin/test/helper/IConfiguration.java
Patch:
@@ -44,6 +44,8 @@ public interface IConfiguration {
 
     String dockerContainerName();
 
+    String dockerNetworkName();
+
     String dockerImageVersion();
 
     String scenarioHome();

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/RequestMappingMethodInterceptor.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;
 
+import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.web.bind.annotation.RequestMapping;
 
 import java.lang.reflect.Method;
@@ -32,7 +33,7 @@ public class RequestMappingMethodInterceptor extends AbstractMethodInterceptor {
     @Override
     public String getRequestURL(Method method) {
         String requestURL = "";
-        RequestMapping methodRequestMapping = method.getAnnotation(RequestMapping.class);
+        RequestMapping methodRequestMapping = AnnotationUtils.getAnnotation(method, RequestMapping.class);
         if (methodRequestMapping.value().length > 0) {
             requestURL = methodRequestMapping.value()[0];
         } else if (methodRequestMapping.path().length > 0) {
@@ -43,7 +44,7 @@ public String getRequestURL(Method method) {
 
     @Override
     public String getAcceptedMethodTypes(Method method) {
-        RequestMapping methodRequestMapping = method.getAnnotation(RequestMapping.class);
+        RequestMapping methodRequestMapping = AnnotationUtils.getAnnotation(method, RequestMapping.class);
         StringBuilder methodTypes = new StringBuilder();
         if (methodRequestMapping.method().length > 0) {
             methodTypes.append("{");

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -145,4 +145,6 @@ public class ComponentsDefine {
     public static final OfficialComponent SOCKET_IO = new OfficialComponent(76, "SocketIO");
 
     public static final OfficialComponent REST_HIGH_LEVEL_CLIENT = new OfficialComponent(77, "rest-high-level-client");
+
+    public static final OfficialComponent SPRING_TX = new OfficialComponent(78, "spring-tx");
 }

File: test/plugin/scenarios/elasticsearch-6.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/elasticsearch/controller/CaseController.java
Patch:
@@ -27,7 +27,7 @@
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
 import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;
-import org.elasticsearch.action.admin.indices.flush.FlushRequest;
+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;
 import org.elasticsearch.action.get.GetRequest;
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexRequest;
@@ -88,7 +88,7 @@ public String elasticsearch() throws Exception {
             // index
             index(client, indexName);
 
-            client.indices().flush(new FlushRequest(indexName), RequestOptions.DEFAULT);
+            client.indices().refresh(new RefreshRequest(indexName), RequestOptions.DEFAULT);
 
              //get
             get(client, indexName);

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/buffer/BufferStrategy.java
Patch:
@@ -24,6 +24,5 @@
  */
 public enum BufferStrategy {
     BLOCKING,
-    OVERRIDE,
     IF_POSSIBLE
 }

File: apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerTest.java
Patch:
@@ -80,7 +80,7 @@ public void testConsumerMoreThanChannel() throws IllegalAccessException, Interru
         for (SampleData data : result) {
             consumerCounter.add(data.getIntValue());
         }
-        Assert.assertEquals(5, consumerCounter.size());
+        Assert.assertEquals(2, consumerCounter.size());
     }
 
     @Test

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClient.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.skywalking.apm.commons.datacarrier.DataCarrier;
-import org.apache.skywalking.apm.commons.datacarrier.buffer.BufferStrategy;
 import org.apache.skywalking.apm.commons.datacarrier.consumer.IConsumer;
 import org.apache.skywalking.oap.server.core.remote.data.StreamData;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.Empty;
@@ -113,7 +112,6 @@ DataCarrier<RemoteMessage> getDataCarrier() {
             synchronized (GRPCRemoteClient.class) {
                 if (Objects.isNull(this.carrier)) {
                     this.carrier = new DataCarrier<>("GRPCRemoteClient", channelSize, bufferSize);
-                    this.carrier.setBufferStrategy(BufferStrategy.BLOCKING);
                 }
             }
         }

File: test/plugin/scenarios/netty-socketio-scenario/src/main/java/org/apache/skywalking/apm/testcase/netty/socketio/HealthCheckServlet.java
Patch:
@@ -29,10 +29,10 @@ public class HealthCheckServlet extends HttpServlet {
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
         // start socket io server and client on heath check
-        SocketIOStarter.startServer();
         try {
-            SocketIOStarter.startClientAndWaitConnect();
-        } catch (Exception e) {
+            SocketIOStarter.getInstance().healthCheck();
+        } catch (InterruptedException e) {
+            throw new IOException(e);
         }
 
         PrintWriter writer = resp.getWriter();

File: apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java
Patch:
@@ -93,6 +93,7 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th
                     .or(nameStartsWith("org.groovy."))
                     .or(nameContains("javassist"))
                     .or(nameContains(".asm."))
+                    .or(nameContains(".reflectasm."))
                     .or(nameStartsWith("sun.reflect"))
                     .or(allSkyWalkingAgentExcludeToolkit())
                     .or(ElementMatchers.<TypeDescription>isSynthetic()));

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v3/support/MongoConstants.java
Patch:
@@ -31,8 +31,6 @@ private MongoConstants() {
 
     public static final String MONGO_DB_OP_PREFIX = "MongoDB/";
 
-    public static final int FILTER_LENGTH_LIMIT = 256;
-
     public static final String EMPTY = "";
 
 }

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/PreparedStatementExecuteMethodsInterceptor.java
Patch:
@@ -58,7 +58,7 @@ public final void beforeMethod(EnhancedInstance objInst, Method method, Object[]
             if (parameters != null && parameters.length > 0) {
                 int maxIndex = cacheObject.getMaxIndex();
                 String parameterString = buildParameterString(parameters, maxIndex);
-                int sqlParametersMaxLength = Config.Plugin.MySQL.SQL_PARAMETERS_MAX_LENGTH;
+                int sqlParametersMaxLength = Config.Plugin.POSTGRESQL.SQL_PARAMETERS_MAX_LENGTH;
                 if (sqlParametersMaxLength > 0 && parameterString.length() > sqlParametersMaxLength) {
                     parameterString = parameterString.substring(0, sqlParametersMaxLength) + "..." + "]";
                 }

File: test/plugin/archetypes/tomcat/src/main/resources/archetype-resources/src/main/java/CaseServlet.java
Patch:
@@ -29,6 +29,7 @@ public class CaseServlet extends HttpServlet {
 
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+        // your codes
         PrintWriter printWriter = resp.getWriter();
         printWriter.write("success");
         printWriter.flush();

File: test/plugin/archetypes/tomcat/src/main/resources/archetype-resources/src/main/java/HealthCheckServlet.java
Patch:
@@ -28,6 +28,7 @@ public class HealthCheckServlet extends HttpServlet {
 
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+        // your codes
         PrintWriter writer = resp.getWriter();
         writer.write("Success");
         writer.flush();

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/span/SpanSetTagInterceptor.java
Patch:
@@ -43,6 +43,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
             activeSpan.setComponent(tagValue);
         } else if (Tags.PEER_SERVICE.getKey().equals(tagKey)) {
             activeSpan.setOperationName(tagValue);
+        } else if (Tags.ERROR.getKey().equals(tagKey) && "true".equals(tagValue)) {
+            activeSpan.errorOccurred();
         } else {
             activeSpan.tag(tagKey, tagValue);
         }

File: apm-sniffer/apm-sdk-plugin/redisson-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/redisson/v3/RedisClientConstructorInterceptor.java
Patch:
@@ -15,8 +15,6 @@
  * limitations under the License.
  *
  */
-
-
 package org.apache.skywalking.apm.plugin.redisson.v3;
 
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;

File: apm-sniffer/apm-sdk-plugin/redisson-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/redisson/v3/define/ConnectionManagerInstrumentation.java
Patch:
@@ -15,8 +15,6 @@
  * limitations under the License.
  *
  */
-
-
 package org.apache.skywalking.apm.plugin.redisson.v3.define;
 
 import net.bytebuddy.description.method.MethodDescription;

File: apm-sniffer/apm-sdk-plugin/redisson-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/redisson/v3/define/RedisClientInstrumentation.java
Patch:
@@ -15,8 +15,6 @@
  * limitations under the License.
  *
  */
-
-
 package org.apache.skywalking.apm.plugin.redisson.v3.define;
 
 import net.bytebuddy.description.method.MethodDescription;

File: apm-sniffer/apm-sdk-plugin/redisson-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/redisson/v3/define/RedisConnectionInstrumentation.java
Patch:
@@ -15,8 +15,6 @@
  * limitations under the License.
  *
  */
-
-
 package org.apache.skywalking.apm.plugin.redisson.v3.define;
 
 import net.bytebuddy.description.method.MethodDescription;

File: test/plugin/runner-helper/src/main/java/org/apache/skywalking/plugin/test/helper/ConfigurationImpl.java
Patch:
@@ -116,7 +116,7 @@ public String dockerImageVersion() {
 
     @Override
     public String dockerContainerName() {
-        return scenarioName() + "-" + scenarioVersion() + "-" + dockerImageVersion();
+        return (scenarioName() + "-" + scenarioVersion() + "-" + dockerImageVersion()).toLowerCase();
     }
 
     @Override public String scenarioHome() {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
 
 /**
- * @author peng-yongsheng
+ * @author peng-yongsheng, jian.tan
  */
 @Getter
 public class StorageModuleElasticsearchConfig extends ModuleConfig {
@@ -41,6 +41,7 @@ public class StorageModuleElasticsearchConfig extends ModuleConfig {
     @Setter private String password;
     @Getter @Setter String trustStorePath;
     @Getter @Setter String trustStorePass;
+    @Setter private int resultWindowMaxSize = 10000;
     @Setter private int metadataQueryMaxSize = 5000;
     @Setter private int segmentQueryMaxSize = 200;
     @Setter private int recordDataTTL = 7;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -71,7 +71,7 @@
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.ttl.ElasticsearchStorageTTL;
 
 /**
- * @author peng-yongsheng
+ * @author peng-yongsheng, jian.tan
  */
 public class StorageModuleElasticsearchProvider extends ModuleProvider {
 
@@ -110,10 +110,10 @@ public void prepare() throws ServiceNotProvidedException {
         this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));
         this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));
 
-        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));
+        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));
         this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));
         this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));
-        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));
+        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));
 
         this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));
         this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/K8sALSServiceMeshHTTPAnalysis.java
Patch:
@@ -361,7 +361,7 @@ protected ServiceMetaInfo find(String ip, int port) {
         if (map.containsKey(ip)) {
             return map.get(ip);
         }
-        logger.debug("Unknown ip {}, ip -> service is {}", map);
+        logger.debug("Unknown ip {}, ip -> service is {}", ip, map);
         return ServiceMetaInfo.UNKNOWN;
     }
 

File: test/plugin/scenarios/spring-async-scenario/src/main/java/org/apache/skywalking/apm/testcase/spring/async/AsyncBean.java
Patch:
@@ -34,11 +34,11 @@ public class AsyncBean {
 
     @Async
     public void sendVisitBySystem() throws IOException {
-        httpBean.visit("http://skywalking.apache.org/zh/team/?k1=v");
+        httpBean.visit("http://localhost:8080/spring-async-scenario/case/asyncVisit?by=system");
     }
 
     @Async("customizeAsync")
     public void sendVisitByCustomize() throws IOException {
-        httpBean.visit("http://skywalking.apache.org/zh/team/?k2=v");
+        httpBean.visit("http://localhost:8080/spring-async-scenario/case/asyncVisit?by=customize");
     }
 }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java
Patch:
@@ -148,9 +148,11 @@ public List<AlarmMessage> check() {
             AlarmMessage alarmMessage = window.checkAlarm();
             if (alarmMessage != AlarmMessage.NONE) {
                 alarmMessage.setScopeId(meta.getScopeId());
+                alarmMessage.setScope(meta.getScope());
                 alarmMessage.setName(meta.getName());
                 alarmMessage.setId0(meta.getId0());
                 alarmMessage.setId1(meta.getId1());
+                alarmMessage.setRuleName(this.ruleName);
                 alarmMessage.setAlarmMessage(formatter.format(meta));
                 alarmMessage.setStartTime(System.currentTimeMillis());
                 alarmMessageList.add(alarmMessage);

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java
Patch:
@@ -97,6 +97,7 @@ public void testNotifyWithEndpointCatalog() {
 
         assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);
         assertEquals(mockId, metaInAlarm.getId0());
+        assertEquals(DefaultScopeDefine.ENDPOINT_CATALOG_NAME, metaInAlarm.getScope());
         assertEquals(metricsName, metaInAlarm.getMetricsName());
         assertEquals(endpointInventoryName + " in " + serviceInventoryName, metaInAlarm.getName());
         assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());
@@ -129,6 +130,7 @@ public void testNotifyWithServiceInstanceCatalog() {
         assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);
         assertEquals(metricsName, metaInAlarm.getMetricsName());
         assertEquals(mockId, metaInAlarm.getId0());
+        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME, metaInAlarm.getScope());
         assertEquals(instanceInventoryName, metaInAlarm.getName());
         assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());
     }
@@ -157,6 +159,7 @@ public void testNotifyWithServiceCatalog() {
         assertTrue(metaInAlarm instanceof ServiceMetaInAlarm);
         assertEquals(metricsName, metaInAlarm.getMetricsName());
         assertEquals(mockId, metaInAlarm.getId0());
+        assertEquals(DefaultScopeDefine.SERVICE_CATALOG_NAME, metaInAlarm.getScope());
         assertEquals(serviceInventoryName, metaInAlarm.getName());
         assertEquals(DefaultScopeDefine.SERVICE, metaInAlarm.getScopeId());
     }

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/WebhookCallbackTest.java
Patch:
@@ -87,9 +87,11 @@ public void testWebhook() {
         List<AlarmMessage> alarmMessages = new ArrayList<>(2);
         AlarmMessage alarmMessage = new AlarmMessage();
         alarmMessage.setScopeId(DefaultScopeDefine.ALL);
+        alarmMessage.setRuleName("service_resp_time_rule");
         alarmMessage.setAlarmMessage("alarmMessage with [DefaultScopeDefine.All]");
         alarmMessages.add(alarmMessage);
         AlarmMessage anotherAlarmMessage = new AlarmMessage();
+        anotherAlarmMessage.setRuleName("service_resp_time_rule_2");
         anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);
         anotherAlarmMessage.setAlarmMessage("anotherAlarmMessage with [DefaultScopeDefine.Endpoint]");
         alarmMessages.add(anotherAlarmMessage);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java
Patch:
@@ -32,9 +32,11 @@ public class AlarmMessage {
     public static AlarmMessage NONE = new NoAlarm();
 
     private int scopeId;
+    private String scope;
     private String name;
     private int id0;
     private int id1;
+    private String ruleName;
     private String alarmMessage;
     private long startTime;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/MetaInAlarm.java
Patch:
@@ -21,6 +21,9 @@
 import java.util.Objects;
 
 public abstract class MetaInAlarm {
+
+    public abstract String getScope();
+
     public abstract int getScopeId();
 
     public abstract String getName();

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/SourceBuilder.java
Patch:
@@ -114,7 +114,7 @@ ServiceInstanceRelation toServiceInstanceRelation() {
         serviceInstanceRelation.setSourceServiceId(sourceServiceId);
         serviceInstanceRelation.setSourceServiceName(sourceServiceName);
         serviceInstanceRelation.setSourceServiceInstanceName(sourceServiceInstanceName);
-        serviceInstanceRelation.setSourceServiceId(destServiceId);
+        serviceInstanceRelation.setDestServiceId(destServiceId);
         serviceInstanceRelation.setDestServiceInstanceId(destServiceInstanceId);
         serviceInstanceRelation.setDestServiceName(destServiceName);
         serviceInstanceRelation.setDestServiceInstanceName(destServiceInstanceName);

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/SourceBuilder.java
Patch:
@@ -114,7 +114,7 @@ ServiceInstanceRelation toServiceInstanceRelation() {
         serviceInstanceRelation.setSourceServiceId(sourceServiceId);
         serviceInstanceRelation.setSourceServiceName(sourceServiceName);
         serviceInstanceRelation.setSourceServiceInstanceName(sourceServiceInstanceName);
-        serviceInstanceRelation.setSourceServiceId(destServiceId);
+        serviceInstanceRelation.setDestServiceId(destServiceId);
         serviceInstanceRelation.setDestServiceInstanceId(destServiceInstanceId);
         serviceInstanceRelation.setDestServiceName(destServiceName);
         serviceInstanceRelation.setDestServiceInstanceName(destServiceInstanceName);

File: test/plugin/scenarios/gateway-scenario/gateway-projectA-scenario/src/main/java/org/apache/skywalking/apm/testcase/sc/gateway/projectA/TestFilterConfig.java
Patch:
@@ -18,7 +18,9 @@
 package org.apache.skywalking.apm.testcase.sc.gateway.projectA;
 
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 
+@Configuration
 public class TestFilterConfig {
 
     @Bean

File: test/plugin/runner-helper/src/main/java/org/apache/skywalking/plugin/test/helper/IConfiguration.java
Patch:
@@ -49,4 +49,5 @@ public interface IConfiguration {
     String scenarioHome();
 
     String outputDir();
+
 }

File: test/plugin/runner-helper/src/test/java/org/apache/skywalking/plugin/test/helper/vo/CaseIConfigurationTest.java
Patch:
@@ -42,8 +42,7 @@ public void testReadCaseConfiguration() throws FileNotFoundException {
         CaseConfiguration caseConfiguration = yaml.loadAs(configurationFile, CaseConfiguration.class);
         assertNotNull(caseConfiguration);
 
-        assertThat(caseConfiguration.getVersion(), is("4.0.3"));
-        assertThat(caseConfiguration.getFramework(), is("httpclient"));
+        assertThat(caseConfiguration.getFramework(), is("solrj"));
         assertThat(caseConfiguration.getDependencies().size(), is(1));
     }
 }

File: oap-server/server-cluster-plugin/cluster-nacos-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/nacos/ClusterModuleNacosConfig.java
Patch:
@@ -28,4 +28,5 @@
 public class ClusterModuleNacosConfig extends ModuleConfig {
     @Setter @Getter private String serviceName;
     @Setter @Getter private String hostPort;
+    @Setter @Getter private String namespace = "public";
 }

File: oap-server/server-configuration/configuration-nacos/src/main/java/org/apache/skywalking/oap/server/configuration/nacos/NacosConfigWatcherRegister.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.configuration.nacos;
 
 import com.alibaba.nacos.api.NacosFactory;
+import com.alibaba.nacos.api.PropertyKeyConst;
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.config.listener.Listener;
 import com.alibaba.nacos.api.exception.NacosException;
@@ -53,7 +54,8 @@ public NacosConfigWatcherRegister(NacosServerSettings settings) throws NacosExce
         final String serverAddr = this.settings.getServerAddr();
 
         final Properties properties = new Properties();
-        properties.put("serverAddr", serverAddr + ":" + port);
+        properties.put(PropertyKeyConst.SERVER_ADDR, serverAddr + ":" + port);
+        properties.put(PropertyKeyConst.NAMESPACE, settings.getNamespace());
         this.configService = NacosFactory.createConfigService(properties);
     }
 

File: oap-server/server-configuration/configuration-nacos/src/test/java/org/apache/skywalking/oap/server/configuration/nacos/NacosConfigWatcherRegisterTest.java
Patch:
@@ -45,6 +45,7 @@ public void shouldReadConfigs() throws NacosException {
 
         final NacosServerSettings mockSettings = mock(NacosServerSettings.class);
         when(mockSettings.getGroup()).thenReturn(group);
+        when(mockSettings.getNamespace()).thenReturn("");
 
         final NacosConfigWatcherRegister mockRegister = spy(new NacosConfigWatcherRegister(mockSettings));
         final ConfigService mockConfigService = mock(ConfigService.class);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TopologyQueryService.java
Patch:
@@ -79,8 +79,7 @@ private EndpointInventoryCache getEndpointInventoryCache() {
         return endpointInventoryCache;
     }
 
-    public Topology getGlobalTopology(final Downsampling downsampling, final long startTB, final long endTB, final long startTimestamp,
-        final long endTimestamp) throws IOException {
+    public Topology getGlobalTopology(final Downsampling downsampling, final long startTB, final long endTB) throws IOException {
         logger.debug("Downsampling: {}, startTimeBucket: {}, endTimeBucket: {}", downsampling, startTB, endTB);
         List<Call.CallDetail> serviceRelationServerCalls = getTopologyQueryDAO().loadServerSideServiceRelations(downsampling, startTB, endTB);
         List<Call.CallDetail> serviceRelationClientCalls = getTopologyQueryDAO().loadClientSideServiceRelations(downsampling, startTB, endTB);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/AbstractTag.java
Patch:
@@ -51,7 +51,7 @@ public String key() {
     }
 
     public boolean sameWith(AbstractTag<T> tag) {
-        return canOverwrite && tag.id == tag.id;
+        return canOverwrite && this.id == tag.id;
     }
 
     public int getId() {

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumn.java
Patch:
@@ -62,6 +62,7 @@ public void setTypeName(String typeName) {
             case "String":
                 this.type = String.class;
                 typeName = "String";
+                break;
             default:
                 try {
                     this.type = Class.forName(typeName);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/JVMService.java
Patch:
@@ -47,6 +47,8 @@
 import org.apache.skywalking.apm.network.language.agent.v2.JVMMetricReportServiceGrpc;
 import org.apache.skywalking.apm.util.RunnableWithExceptionProtection;
 
+import static org.apache.skywalking.apm.agent.core.conf.Config.Collector.GRPC_UPSTREAM_TIMEOUT;
+
 /**
  * The <code>JVMService</code> represents a timer, which collectors JVM cpu, memory, memorypool and gc info, and send
  * the collected info to Collector through the channel provided by {@link GRPCChannelManager}
@@ -140,7 +142,7 @@ public void run() {
                         if (buffer.size() > 0) {
                             builder.addAllMetrics(buffer);
                             builder.setServiceInstanceId(RemoteDownstreamConfig.Agent.SERVICE_INSTANCE_ID);
-                            Commands commands = stub.withDeadlineAfter(10, TimeUnit.SECONDS).collect(builder.build());
+                            Commands commands = stub.withDeadlineAfter(GRPC_UPSTREAM_TIMEOUT, TimeUnit.SECONDS).collect(builder.build());
                             ServiceManager.INSTANCE.findService(CommandService.class).receiveCommand(commands);
                         }
                     } catch (Throwable t) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/TraceSegmentServiceClient.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.skywalking.apm.agent.core.boot.*;
 import org.apache.skywalking.apm.agent.core.commands.CommandService;
+import org.apache.skywalking.apm.agent.core.conf.Config;
 import org.apache.skywalking.apm.agent.core.context.*;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.apache.skywalking.apm.agent.core.logging.api.*;
@@ -88,7 +89,7 @@ public void init() {
     public void consume(List<TraceSegment> data) {
         if (CONNECTED.equals(status)) {
             final GRPCStreamServiceStatus status = new GRPCStreamServiceStatus(false);
-            StreamObserver<UpstreamSegment> upstreamSegmentStreamObserver = serviceStub.withDeadlineAfter(10, TimeUnit.SECONDS).collect(new StreamObserver<Commands>() {
+            StreamObserver<UpstreamSegment> upstreamSegmentStreamObserver = serviceStub.withDeadlineAfter(Config.Collector.GRPC_UPSTREAM_TIMEOUT, TimeUnit.SECONDS).collect(new StreamObserver<Commands>() {
                 @Override
                 public void onNext(Commands commands) {
                     ServiceManager.INSTANCE.findService(CommandService.class).receiveCommand(commands);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -166,7 +166,7 @@ public CoreModuleProvider() {
 
         annotationScan.registerListener(streamAnnotationListener);
 
-        this.remoteClientManager = new RemoteClientManager(getManager());
+        this.remoteClientManager = new RemoteClientManager(getManager(), moduleConfig.getRemoteTimeout());
         this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);
 
         MetricsStreamProcessor.getInstance().setEnableDatabaseSession(moduleConfig.isEnableDatabaseSession());

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientRealClient.java
Patch:
@@ -57,7 +57,7 @@ public static void main(String[] args) throws InterruptedException {
         moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);
         telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);
 
-        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, address, 1, 10));
+        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, address, 1, 10, 10));
         remoteClient.connect();
 
         for (int i = 0; i < 10000; i++) {

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java
Patch:
@@ -86,7 +86,7 @@ public void testPush() throws InterruptedException {
         grpcServerRule.getServiceRegistry().addService(new RemoteServiceHandler(moduleManager));
 
         Address address = new Address("not-important", 11, false);
-        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, address, 1, 10));
+        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, address, 1, 10, 10));
         remoteClient.connect();
 
         doReturn(grpcServerRule.getChannel()).when(remoteClient).getChannel();

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/RemoteClientManagerTestCase.java
Patch:
@@ -80,7 +80,7 @@ public void refresh() {
         moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);
         telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);
 
-        RemoteClientManager clientManager = new RemoteClientManager(moduleManager);
+        RemoteClientManager clientManager = new RemoteClientManager(moduleManager, 10);
 
         when(clusterNodesQuery.queryRemoteNodes()).thenReturn(groupOneInstances());
         clientManager.refresh();

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -134,4 +134,6 @@ public class ComponentsDefine {
 
     public static final OfficialComponent CASSANDRA_JAVA_DRIVER = new OfficialComponent(69, "cassandra-java-driver");
 
+    public static final OfficialComponent LIGHT_4J = new OfficialComponent(71, "Light4J");
+
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractSpring4Instrumentation.java
Patch:
@@ -25,7 +25,7 @@ public abstract class AbstractSpring4Instrumentation extends ClassInstanceMethod
     public static final String WITHNESS_CLASSES = "org.springframework.cache.interceptor.SimpleKey";
 
     @Override
-    protected final String[] witnessClasses() {
+    protected String[] witnessClasses() {
         return new String[] {WITHNESS_CLASSES, "org.springframework.cache.interceptor.DefaultKeyGenerator"};
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java
Patch:
@@ -45,6 +45,7 @@ public class CoreModuleConfig extends ModuleConfig {
      */
     @Setter private long persistentPeriod = 3;
     @Setter private boolean enableDataKeeperExecutor = true;
+    @Setter private int dataKeeperExecutePeriod = 5;
     @Setter private int recordDataTTL;
     @Setter private int minuteMetricsDataTTL;
     @Setter private int hourMetricsDataTTL;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -203,7 +203,7 @@ public CoreModuleProvider() {
         PersistenceTimer.INSTANCE.start(getManager(), moduleConfig);
 
         if (moduleConfig.isEnableDataKeeperExecutor()) {
-            DataTTLKeeperTimer.INSTANCE.start(getManager());
+            DataTTLKeeperTimer.INSTANCE.start(getManager(), moduleConfig);
         }
 
         CacheUpdateTimer.INSTANCE.start(getManager());

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/SubscribeMethodInterceptor.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.plugin.kafka.v1;
+package org.apache.skywalking.apm.plugin.kafka;
 
 import java.lang.reflect.Method;
 import java.util.Collection;

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/define/AbstractKafkaInstrumentation.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.plugin.kafka.v1.define;
+package org.apache.skywalking.apm.plugin.kafka.define;
 
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/define/CallbackInstrumentation.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.plugin.kafka.v1.define;
+package org.apache.skywalking.apm.plugin.kafka.define;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
@@ -31,7 +31,7 @@ public class CallbackInstrumentation extends AbstractKafkaInstrumentation {
 
     public static final String ENHANCE_CLASS = "org.apache.kafka.clients.producer.Callback";
     public static final String ENHANCE_METHOD = "onCompletion";
-    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.CallbackInterceptor";
+    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.CallbackInterceptor";
 
     @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/kafka-plugin/src/test/java/org/apache/skywalking/apm/plugin/kafka/ConsumerConstructorInterceptorTest.java
Patch:
@@ -16,17 +16,16 @@
  *
  */
 
-package org.apache.skywalking.apm.plugin.kafka.v11;
+package org.apache.skywalking.apm.plugin.kafka;
 
 import org.apache.kafka.clients.consumer.ConsumerConfig;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
-import org.apache.skywalking.apm.plugin.kafka.v1.ConsumerConstructorInterceptor;
-import org.apache.skywalking.apm.plugin.kafka.v1.ConsumerEnhanceRequiredInfo;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
+
 import java.util.ArrayList;
 import java.util.List;
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/webflux-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/webflux/v5/define/DefaultServerWebExchangeInstrumentation.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.any;
-import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
+import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;
 
 /**
  * @author zhaoyuguang
@@ -57,6 +57,6 @@ public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
 
     @Override
     protected ClassMatch enhanceClass() {
-        return byName("org.springframework.web.server.adapter.DefaultServerWebExchange");
+        return byMultiClassMatch("org.springframework.web.server.adapter.DefaultServerWebExchange", "org.springframework.web.server.ServerWebExchangeDecorator");
     }
 }

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/Client.java
Patch:
@@ -25,7 +25,7 @@
  */
 public interface Client {
 
-    void connect() throws IOException;
+    void connect() throws Exception;
 
     void shutdown() throws IOException;
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ids/DistributedTraceId.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * The <code>DistributedTraceId</code> presents a distributed call chain.
  * <p>
- * This call chain has an unique (service) entrance,
+ * This call chain has a unique (service) entrance,
  * <p>
  * such as: Service : http://www.skywalking.com/cust/query, all the remote, called behind this service, rest remote,
  * db executions, are using the same <code>DistributedTraceId</code> even in different JVM.

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/ExitSpan.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.skywalking.apm.network.trace.component.Component;
 
 /**
- * The <code>ExitSpan</code> represents a service consumer point, such as Feign, Okhttp client for a Http service.
+ * The <code>ExitSpan</code> represents a service consumer point, such as Feign, Okhttp client for an Http service.
  *
  * It is an exit point or a leaf span(our old name) of trace tree. In a single rpc call, because of a combination of
  * discovery libs, there maybe contain multi-layer exit point:

File: apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/apache/skywalking/apm/toolkit/log/logback/v1/x/LogbackPatternConverter.java
Patch:
@@ -30,7 +30,7 @@ public class LogbackPatternConverter extends ClassicConverter {
      * As default, return "TID: N/A" to the output message,
      * if sky-walking agent in active mode, return the real traceId in the recent Context, if existed.
      *
-     * @param iLoggingEvent
+     * @param iLoggingEvent the event
      * @return the traceId: N/A, empty String, or the real traceId.
      */
     @Override

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/boot/ServiceManagerTest.java
Patch:
@@ -55,7 +55,7 @@ public static void afterClass() {
     public void testServiceDependencies() throws Exception {
         HashMap<Class, BootService> registryService = getFieldValue(ServiceManager.INSTANCE, "bootedServices");
 
-        assertThat(registryService.size(), is(9));
+        assertThat(registryService.size(), is(10));
 
         assertTraceSegmentServiceClient(ServiceManager.INSTANCE.findService(TraceSegmentServiceClient.class));
         assertContextManager(ServiceManager.INSTANCE.findService(ContextManager.class));

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/FutureGetInterceptor.java
Patch:
@@ -20,7 +20,6 @@
 package org.apache.skywalking.apm.plugin.spring.resttemplate.async;
 
 import java.lang.reflect.Method;
-import java.net.URI;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
@@ -33,7 +32,7 @@ public class FutureGetInterceptor implements InstanceMethodsAroundInterceptor {
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         MethodInterceptResult result) throws Throwable {
         Object[] cacheValues = (Object[])objInst.getSkyWalkingDynamicField();
-        ContextManager.createLocalSpan("future/get:" + ((URI)cacheValues[0]).getPath());
+        ContextManager.createLocalSpan("future/get:" + cacheValues[0]);
     }
 
     @Override

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ColumnTypeEsMapping.java
Patch:
@@ -36,7 +36,7 @@ public class ColumnTypeEsMapping implements DataTypeMapping {
         } else if (String.class.equals(type)) {
             return "keyword";
         } else if (IntKeyLongValueHashMap.class.equals(type)) {
-            return "keyword";
+            return "text";
         } else if (byte[].class.equals(type)) {
             return "binary";
         } else {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLTableInstaller.java
Patch:
@@ -71,6 +71,9 @@ protected String getColumnType(Model model, ColumnName name, Class<?> type) {
             if (DefaultScopeDefine.SEGMENT == model.getScopeId()) {
                 if (name.getName().equals(SegmentRecord.TRACE_ID) || name.getName().equals(SegmentRecord.SEGMENT_ID))
                     return "VARCHAR(300)";
+                if (name.getName().equals(SegmentRecord.DATA_BINARY)) {
+                    return "MEDIUMTEXT";
+                }
             }
             return "VARCHAR(2000)";
         } else if (IntKeyLongValueHashMap.class.equals(type)) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmStandardPersistence.java
Patch:
@@ -45,7 +45,7 @@ public class AlarmStandardPersistence implements AlarmCallback {
             record.setName(message.getName());
             record.setAlarmMessage(message.getAlarmMessage());
             record.setStartTime(message.getStartTime());
-            record.setTimeBucket(TimeBucket.getSecondTimeBucket(message.getStartTime()));
+            record.setTimeBucket(TimeBucket.getRecordTimeBucket(message.getStartTime()));
 
             RecordStreamProcessor.getInstance().in(record);
         });

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/StorageTTL.java
Patch:
@@ -23,5 +23,7 @@
  * @author peng-yongsheng
  */
 public interface StorageTTL {
-    TTLCalculator calculator(Downsampling downsampling);
+    TTLCalculator metricsCalculator(Downsampling downsampling);
+
+    TTLCalculator recordCalculator();
 }

File: oap-server/server-receiver-plugin/jaeger-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/jaeger/JaegerGRPCHandler.java
Patch:
@@ -99,7 +99,7 @@ public void postSpans(Collector.PostSpansRequest request,
 
                 long duration = span.getDuration().getNanos() / 1_000_000;
                 jaegerSpan.setStartTime(Instant.ofEpochSecond(span.getStartTime().getSeconds(), span.getStartTime().getNanos()).toEpochMilli());
-                long timeBucket = TimeBucket.getSecondTimeBucket(jaegerSpan.getStartTime());
+                long timeBucket = TimeBucket.getRecordTimeBucket(jaegerSpan.getStartTime());
                 jaegerSpan.setTimeBucket(timeBucket);
                 jaegerSpan.setEndTime(jaegerSpan.getStartTime() + duration);
                 jaegerSpan.setLatency((int)duration);

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java
Patch:
@@ -157,7 +157,7 @@ public void parseEntry(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI
             statement.setId(segmentCoreInfo.getSegmentId() + "-" + spanDecorator.getSpanId());
             statement.setDatabaseServiceId(sourceBuilder.getDestServiceId());
             statement.setLatency(sourceBuilder.getLatency());
-            statement.setTimeBucket(TimeBucket.getSecondTimeBucket(segmentCoreInfo.getStartTime()));
+            statement.setTimeBucket(TimeBucket.getRecordTimeBucket(segmentCoreInfo.getStartTime()));
             statement.setTraceId(traceId);
             for (KeyStringValuePair tag : spanDecorator.getAllTags()) {
                 if (SpanTags.DB_STATEMENT.equals(tag.getKey())) {

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java
Patch:
@@ -68,7 +68,7 @@ public void parseFirst(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI
             return;
         }
 
-        long timeBucket = TimeBucket.getSecondTimeBucket(segmentCoreInfo.getStartTime());
+        long timeBucket = TimeBucket.getRecordTimeBucket(segmentCoreInfo.getStartTime());
 
         segment.setSegmentId(segmentCoreInfo.getSegmentId());
         segment.setServiceId(segmentCoreInfo.getServiceId());

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/trace/SpanForward.java
Patch:
@@ -93,7 +93,7 @@ public void send(List<Span> spanList) {
             long startTime = span.timestampAsLong() / 1000;
             zipkinSpan.setStartTime(startTime);
             if (startTime != 0) {
-                long timeBucket = TimeBucket.getSecondTimeBucket(zipkinSpan.getStartTime());
+                long timeBucket = TimeBucket.getRecordTimeBucket(zipkinSpan.getStartTime());
                 zipkinSpan.setTimeBucket(timeBucket);
             }
 

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/AsyncUnaryRequestCallCallInterceptor.java
Patch:
@@ -36,7 +36,7 @@
 public class AsyncUnaryRequestCallCallInterceptor implements StaticMethodsAroundInterceptor {
     @Override public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,
         MethodInterceptResult result) {
-        BlockingCallClientInterceptor originClientCall = (BlockingCallClientInterceptor)allArguments[0];
+        CallClientInterceptor originClientCall = (CallClientInterceptor)allArguments[0];
         Channel channel = originClientCall.getChannel();
         MethodDescriptor methodDescriptor = originClientCall.getMethodDescriptor();
 

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/BlockingCallClientInterceptor.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * @author zhang xin
  */
-public class BlockingCallClientInterceptor extends ForwardingClientCall.SimpleForwardingClientCall {
+public class BlockingCallClientInterceptor extends ForwardingClientCall.SimpleForwardingClientCall implements CallClientInterceptor {
 
     private final MethodDescriptor methodDescriptor;
     private final Channel channel;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/GRPCStreamServiceStatus.java
Patch:
@@ -67,7 +67,7 @@ public void wait4Finish() {
             hasWaited += recheckCycle;
 
             if (recheckCycle >= maxCycle) {
-                logger.warn("Collector traceSegment service doesn't response in {} seconds.", hasWaited);
+                logger.warn("Collector traceSegment service doesn't response in {} seconds.", hasWaited / 1000);
             } else {
                 recheckCycle = recheckCycle * 2 > maxCycle ? maxCycle : recheckCycle * 2;
             }

File: apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java
Patch:
@@ -107,6 +107,7 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th
         agentBuilder
             .type(pluginFinder.buildMatch())
             .transform(new Transformer(pluginFinder))
+            .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)
             .with(new Listener())
             .installOn(instrumentation);
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2NetworkAddressInventoryCacheDAO.java
Patch:
@@ -63,7 +63,7 @@ public H2NetworkAddressInventoryCacheDAO(JDBCHikariCPClient h2Client) {
                 try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), lastUpdateTime)) {
                     NetworkAddressInventory addressInventory;
                     do {
-                        addressInventory = (NetworkAddressInventory)toStorageData(resultSet, NetworkAddressInventory.INDEX_NAME, new ServiceInventory.Builder());
+                        addressInventory = (NetworkAddressInventory)toStorageData(resultSet, NetworkAddressInventory.INDEX_NAME, new NetworkAddressInventory.Builder());
                         if (addressInventory != null) {
                             addressInventories.add(addressInventory);
                         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java
Patch:
@@ -36,5 +36,6 @@ public class Const {
     public static final String SEGMENT_SPAN_SPLIT = "S";
     public static final String UNKNOWN = "Unknown";
     public static final String EMPTY_STRING = "";
+    public static final String EMPTY_JSON_OBJECT_STRING = "{}";
     public static final String DOMAIN_OPERATION_NAME = "{domain}";
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/NetworkAddressInventoryRegister.java
Patch:
@@ -115,7 +115,7 @@ private IServiceInstanceInventoryRegister getServiceInstanceInventoryRegister()
         if (!this.compare(networkAddress, nodeType)) {
             NetworkAddressInventory newNetworkAddress = networkAddress.getClone();
             newNetworkAddress.setNetworkAddressNodeType(nodeType);
-            newNetworkAddress.setHeartbeatTime(System.currentTimeMillis());
+            newNetworkAddress.setLastUpdateTime(System.currentTimeMillis());
 
             InventoryStreamProcessor.getInstance().in(newNetworkAddress);
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/cache/INetworkAddressInventoryCacheDAO.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.storage.cache;
 
+import java.util.List;
 import org.apache.skywalking.oap.server.core.register.NetworkAddressInventory;
 import org.apache.skywalking.oap.server.core.storage.DAO;
 
@@ -29,4 +30,6 @@ public interface INetworkAddressInventoryCacheDAO extends DAO {
     int getAddressId(String networkAddress);
 
     NetworkAddressInventory get(int addressId);
+
+    List<NetworkAddressInventory> loadLastUpdate(long lastUpdateTime);
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/cache/IServiceInventoryCacheDAO.java
Patch:
@@ -33,5 +33,5 @@ public interface IServiceInventoryCacheDAO extends DAO {
 
     ServiceInventory get(int serviceId);
 
-    List<ServiceInventory> loadLastMappingUpdate();
+    List<ServiceInventory> loadLastUpdate(long lastUpdateTime);
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SpanIdExchanger.java
Patch:
@@ -103,12 +103,11 @@ private SpanIdExchanger(ModuleManager moduleManager) {
             NodeType nodeType = NodeType.fromSpanLayerValue(spanLayerValue);
             networkAddressInventoryRegister.update(peerId, nodeType);
 
-            /**
+            /*
              * In some case, conjecture node, such as Database node, could be registered by agents.
              * At here, if the target service properties need to be updated,
              * it will only be updated at the first time for now.
              */
-
             JsonObject properties = null;
             ServiceInventory newServiceInventory = serviceInventoryCacheDAO.get(serviceInventoryCacheDAO.getServiceId(peerId));
             if (SpanLayer.Database.equals(standardBuilder.getSpanLayer())) {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInventoryCacheEsDAO.java
Patch:
@@ -88,18 +88,18 @@ private int get(String id) {
         }
     }
 
-    @Override public List<ServiceInventory> loadLastMappingUpdate() {
+    @Override public List<ServiceInventory> loadLastUpdate(long lastUpdateTime) {
         List<ServiceInventory> serviceInventories = new ArrayList<>();
 
         try {
             SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
 
             BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();
             boolQuery.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.TRUE));
-            boolQuery.must().add(QueryBuilders.rangeQuery(ServiceInventory.MAPPING_LAST_UPDATE_TIME).gte(System.currentTimeMillis() - 30 * 60 * 1000));
+            boolQuery.must().add(QueryBuilders.rangeQuery(ServiceInventory.LAST_UPDATE_TIME).gte(lastUpdateTime));
 
             searchSourceBuilder.query(boolQuery);
-            searchSourceBuilder.size(50);
+            searchSourceBuilder.size(500);
 
             SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, searchSourceBuilder);
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ServiceInventoryCacheDAO.java
Patch:
@@ -57,17 +57,17 @@ public H2ServiceInventoryCacheDAO(JDBCHikariCPClient h2Client) {
         }
     }
 
-    @Override public List<ServiceInventory> loadLastMappingUpdate() {
+    @Override public List<ServiceInventory> loadLastUpdate(long lastUpdateTime) {
         List<ServiceInventory> serviceInventories = new ArrayList<>();
 
         try {
             StringBuilder sql = new StringBuilder("select * from ");
             sql.append(ServiceInventory.INDEX_NAME);
             sql.append(" where ").append(ServiceInventory.IS_ADDRESS).append("=? ");
-            sql.append(" and ").append(ServiceInventory.MAPPING_LAST_UPDATE_TIME).append(">?");
+            sql.append(" and ").append(ServiceInventory.LAST_UPDATE_TIME).append(">?");
 
             try (Connection connection = h2Client.getConnection()) {
-                try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), BooleanUtils.TRUE, System.currentTimeMillis() - 30 * 60 * 1000)) {
+                try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), BooleanUtils.TRUE, lastUpdateTime)) {
                     ServiceInventory serviceInventory;
                     do {
                         serviceInventory = (ServiceInventory)toStorageData(resultSet, ServiceInventory.INDEX_NAME, new ServiceInventory.Builder());

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassInstanceMethodsEnhancePluginDefine.java
Patch:
@@ -35,7 +35,7 @@ public abstract class ClassInstanceMethodsEnhancePluginDefine extends ClassEnhan
      * @return null, means enhance no static methods.
      */
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return null;
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassStaticMethodsEnhancePluginDefine.java
Patch:
@@ -37,15 +37,15 @@ public abstract class ClassStaticMethodsEnhancePluginDefine extends ClassEnhance
      * @return null, means enhance no constructors.
      */
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     /**
      * @return null, means enhance no instance methods.
      */
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return null;
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/MethodInterceptResult.java
Patch:
@@ -55,7 +55,7 @@ public boolean isContinue() {
     /**
      * @return the new return value.
      */
-    Object _ret() {
+    public Object _ret() {
         return ret;
     }
 }

File: apm-sniffer/apm-sdk-plugin/activemq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/activemq/define/ActiveMQConsumerInstrumentation.java
Patch:
@@ -42,7 +42,7 @@ public class ActiveMQConsumerInstrumentation extends ClassInstanceMethodsEnhance
     public static final String ENHANCE_METHOD_DISPATCH = "dispatch";
     public static final String CONSTRUCTOR_INTERCEPT_TYPE = "org.apache.activemq.ActiveMQSession";
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                     @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -57,7 +57,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                     @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/activemq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/activemq/define/ActiveMQProducerInstrumentation.java
Patch:
@@ -42,7 +42,7 @@ public class ActiveMQProducerInstrumentation extends ClassInstanceMethodsEnhance
     public static final String ENHANCE_METHOD = "send";
     public static final String CONSTRUCTOR_INTERCEPT_TYPE = "org.apache.activemq.ActiveMQSession";
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                     @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -57,7 +57,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                     @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/canal-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/canal/define/CanalInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class CanalInstrumentation extends ClassInstanceMethodsEnhancePluginDefin
     public static final String ENHANCE_METHOD_DISPATCH = "getWithoutAck";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -55,7 +55,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/canal-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/canal/define/ClusterNodeInstrumentation.java
Patch:
@@ -37,7 +37,7 @@ public class ClusterNodeInstrumentation extends ClassInstanceMethodsEnhancePlugi
     public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.canal.ClusterNodeConstructInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -52,7 +52,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/apm-sdk-plugin/dubbo-2.7.x-conflict-patch/src/main/java/org/apache/skywalking/apm/plugin/asf/dubbo/patch/WrapperInstrumentation.java
Patch:
@@ -35,7 +35,7 @@
  * methods to ensure the correct compilation of the code.
  */
 public class WrapperInstrumentation extends ClassStaticMethodsEnhancePluginDefine {
-    @Override protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    @Override public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[] {
             new StaticMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/dubbo-2.7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asf/dubbo/DubboInstrumentation.java
Patch:
@@ -40,12 +40,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/dubbo-conflict-patch/src/main/java/org/apache/skywalking/apm/plugin/dubbo/patch/WrapperInstrumentation.java
Patch:
@@ -37,7 +37,7 @@
  * @author Zhang Xin
  */
 public class WrapperInstrumentation extends ClassStaticMethodsEnhancePluginDefine {
-    @Override protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    @Override public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[] {
             new StaticMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/main/java/org/apache/skywalking/apm/plugin/dubbo/DubboInstrumentation.java
Patch:
@@ -39,12 +39,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/elastic-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/esjob/define/JobExecutorInstrumentation.java
Patch:
@@ -40,11 +40,11 @@ public class JobExecutorInstrumentation extends ClassInstanceMethodsEnhancePlugi
 
     private static final String JOB_EXECUTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.esjob.JobExecutorInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
 

File: apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/GenericActionInstrumentation.java
Patch:
@@ -29,7 +29,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.HierarchyMatch.byHierarchyMatch;
 
 public class GenericActionInstrumentation extends ClassEnhancePluginDefine {
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -43,11 +43,11 @@ public class GenericActionInstrumentation extends ClassEnhancePluginDefine {
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 
-    @Override protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    @Override public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/PlainListenableActionFutureInstrumentation.java
Patch:
@@ -35,12 +35,12 @@
 public class PlainListenableActionFutureInstrumentation extends ClassEnhancePluginDefine {
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public boolean isOverrideArgs() {
     }
 
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportActionNodeProxyInstrumentation.java
Patch:
@@ -39,7 +39,7 @@ public class TransportActionNodeProxyInstrumentation extends ClassEnhancePluginD
     public static final String ENHANC_CLASS = "org.elasticsearch.action.TransportActionNodeProxy";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[]{
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -54,7 +54,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -76,7 +76,7 @@ public boolean isOverrideArgs() {
     }
 
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportClientNodesServiceInstrumentation.java
Patch:
@@ -33,11 +33,11 @@ public class TransportClientNodesServiceInstrumentation extends ClassInstanceMet
     public static final String REMOVE_TRANSPORT_ADDRESS_INTERCEPTOR = "org.apache.skywalking.apm.plugin.elasticsearch.v5.RemoveTransportAddressInterceptor";
     public static final String ENHANCE_CLASS = "org.elasticsearch.client.transport.TransportClientNodesService";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/TransportProxyClientInstrumentation.java
Patch:
@@ -37,7 +37,7 @@ public class TransportProxyClientInstrumentation extends ClassInstanceMethodsEnh
     private static final String ENHANCE_CLASS = "org.apache.skywalking.apm.plugin.elasticsearch.v5.TransportProxyClientInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -54,12 +54,12 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/feign/http/v9/define/DefaultHttpClientInstrumentation.java
Patch:
@@ -44,11 +44,11 @@ public class DefaultHttpClientInstrumentation extends ClassInstanceMethodsEnhanc
         return byName(ENHANCE_CLASS);
     }
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/AbstractServerImplBuilderInstrumentation.java
Patch:
@@ -36,11 +36,11 @@ public class AbstractServerImplBuilderInstrumentation extends ClassInstanceMetho
     public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.AbstractServerImplBuilderInterceptor";
     public static final String ARGUMENT_TYPE = "io.grpc.ServerServiceDefinition";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/AbstractStubInstrumentation.java
Patch:
@@ -36,7 +36,7 @@ public class AbstractStubInstrumentation extends ClassInstanceMethodsEnhancePlug
     public static final String ENHANCE_CLASS = "io.grpc.stub.AbstractStub";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -50,7 +50,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/ClientCallsInstrumentation.java
Patch:
@@ -37,7 +37,7 @@ public class ClientCallsInstrumentation extends ClassStaticMethodsEnhancePluginD
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.BlockingCallInterceptor";
     private static final String FUTURE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.AsyncUnaryRequestCallCallInterceptor";
 
-    @Override protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    @Override public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[] {
             new StaticMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/AbstractConnectionInstrumentation.java
Patch:
@@ -42,11 +42,11 @@
  */
 public abstract class AbstractConnectionInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/JdbcXAConnectionInstrumentation.java
Patch:
@@ -37,7 +37,7 @@ public class JdbcXAConnectionInstrumentation extends AbstractConnectionInstrumen
     public static final String ENHANCE_CLASS = "org.h2.jdbcx.JdbcXAConnection";
     public static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.jdbc.JdbcXAConnectionConstructorInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/PooledJdbcConnectionInstrumentation.java
Patch:
@@ -38,7 +38,7 @@ public class PooledJdbcConnectionInstrumentation extends AbstractConnectionInstr
     public static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.h2.PooledJdbcConnectionConstructorInterceptor";
     public static final String ENHANCE_CLASS = "org.h2.jdbcx.JdbcXAConnection$PooledJdbcConnection";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/define/AbstractHttpClientInstrumentation.java
Patch:
@@ -48,7 +48,7 @@ public ClassMatch enhanceClass() {
      * public final HttpResponse execute(HttpHost target, HttpRequest request, HttpContext context)
      */
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/define/DefaultRequestDirectorInstrumentation.java
Patch:
@@ -44,7 +44,7 @@ public ClassMatch enhanceClass() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/define/HttpClientInstrumentation.java
Patch:
@@ -26,7 +26,7 @@ public abstract class HttpClientInstrumentation extends ClassInstanceMethodsEnha
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.httpClient.v4.HttpClientExecuteInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/define/InternalHttpClientInstrumentation.java
Patch:
@@ -44,7 +44,7 @@ public ClassMatch enhanceClass() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/define/MinimalHttpClientInstrumentation.java
Patch:
@@ -44,7 +44,7 @@ public ClassMatch enhanceClass() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/HttpAsyncClientInstrumentation.java
Patch:
@@ -43,12 +43,12 @@ public class HttpAsyncClientInstrumentation extends ClassInstanceMethodsEnhanceP
     private static final String FIRST_ARG_TYPE = "org.apache.http.nio.protocol.HttpAsyncRequestProducer";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{new InstanceMethodsInterceptPoint() {
             @Override
             public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/HttpAsyncRequestExecutorInstrumentation.java
Patch:
@@ -39,12 +39,12 @@ public class HttpAsyncRequestExecutorInstrumentation extends ClassInstanceMethod
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.httpasyncclient.v4.HttpAsyncRequestExecutorInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{new InstanceMethodsInterceptPoint() {
             @Override
             public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/SessionRequestInstrumentation.java
Patch:
@@ -46,7 +46,7 @@ public class SessionRequestInstrumentation extends ClassInstanceMethodsEnhancePl
     private static final String ENHANCE_CLASS = "org.apache.http.impl.nio.reactor.SessionRequestImpl";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[]{new ConstructorInterceptPoint() {
             @Override
             public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -62,7 +62,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{new InstanceMethodsInterceptPoint() {
             @Override
             public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/define/HystrixCommandInstrumentation.java
Patch:
@@ -34,7 +34,7 @@ public class HystrixCommandInstrumentation extends ClassInstanceMethodsEnhancePl
     public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.hystrix.v1.HystrixCommandConstructorInterceptor";
     public static final String ENHANCE_CLASS = "com.netflix.hystrix.HystrixCommand";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -48,7 +48,7 @@ public class HystrixCommandInstrumentation extends ClassInstanceMethodsEnhancePl
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/define/HystrixPluginsInstrumentation.java
Patch:
@@ -37,12 +37,12 @@ public class HystrixPluginsInstrumentation extends ClassInstanceMethodsEnhancePl
     public static final String ENHANCE_CLASS = "com.netflix.hystrix.strategy.HystrixPlugins";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/define/AbstractDriverInstrumentation.java
Patch:
@@ -31,12 +31,12 @@ public abstract class AbstractDriverInstrumentation extends ClassInstanceMethods
     private static final String DRIVER_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.JDBCDriverInterceptor";
 
     @Override
-    protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jedis/v2/define/JedisClusterInstrumentation.java
Patch:
@@ -45,7 +45,7 @@ public ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -73,7 +73,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jedis/v2/define/JedisInstrumentation.java
Patch:
@@ -48,7 +48,7 @@ public ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -98,7 +98,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.0-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v90/client/define/HttpRequestInstrumentation.java
Patch:
@@ -43,11 +43,11 @@ public class HttpRequestInstrumentation extends ClassInstanceMethodsEnhancePlugi
     private static final String ENHANCE_CLASS_NAME = "send";
     public static final String SYNC_SEND_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jetty.v90.client.SyncHttpRequestSendV90Interceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 //sync call interceptor point

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v9/client/define/HttpRequestInstrumentation.java
Patch:
@@ -44,11 +44,11 @@ public class HttpRequestInstrumentation extends ClassInstanceMethodsEnhancePlugi
     private static final String ENHANCE_CLASS_NAME = "send";
     public static final String SYNC_SEND_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jetty.v9.client.SyncHttpRequestSendInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 //sync call interceptor point

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v9/server/define/DispatcherInstrumentation.java
Patch:
@@ -35,7 +35,7 @@ public class DispatcherInstrumentation extends ClassInstanceMethodsEnhancePlugin
     private static final String ENHANCE_CLASS = "org.eclipse.jetty.server.Dispatcher";
     public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jetty.v9.server.ForwardInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -49,7 +49,7 @@ public class DispatcherInstrumentation extends ClassInstanceMethodsEnhancePlugin
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v9/server/define/JettyInstrumentation.java
Patch:
@@ -40,11 +40,11 @@ public class JettyInstrumentation extends ClassInstanceMethodsEnhancePluginDefin
     private static final String ENHANCE_METHOD = "handle";
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jetty.v9.server.HandleInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/CallbackInstrumentation.java
Patch:
@@ -33,11 +33,11 @@ public class CallbackInstrumentation extends AbstractKafkaInstrumentation {
     public static final String ENHANCE_METHOD = "onCompletion";
     public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.CallbackInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/KafkaConsumerInstrumentation.java
Patch:
@@ -51,7 +51,7 @@ public class KafkaConsumerInstrumentation extends AbstractKafkaInstrumentation {
     public static final String SUBSCRIBE_INTERCEPT_TYPE = "org.apache.kafka.clients.consumer.ConsumerRebalanceListener";
     public static final String SUBSCRIBE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.SubscribeMethodInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -65,7 +65,7 @@ public class KafkaConsumerInstrumentation extends AbstractKafkaInstrumentation {
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/KafkaProducerInstrumentation.java
Patch:
@@ -48,7 +48,7 @@ public class KafkaProducerInstrumentation extends AbstractKafkaInstrumentation {
     public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.ProducerConstructorInterceptor";
     public static final String CONSTRUCTOR_INTERCEPTOR_FLAG = "org.apache.kafka.clients.producer.ProducerConfig";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -62,7 +62,7 @@ public class KafkaProducerInstrumentation extends AbstractKafkaInstrumentation {
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/ProducerRecordInstrumentation.java
Patch:
@@ -32,7 +32,7 @@ public class ProducerRecordInstrumentation extends AbstractKafkaInstrumentation
     public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.ProducerRecordConstructorInterceptor";
     public static final String ENHANCE_CLASS = "org.apache.kafka.clients.producer.ProducerRecord";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -46,7 +46,7 @@ public class ProducerRecordInstrumentation extends AbstractKafkaInstrumentation
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v2/define/MongoDBCollectionImplInstrumentation.java
Patch:
@@ -51,7 +51,7 @@ public class MongoDBCollectionImplInstrumentation extends ClassInstanceMethodsEn
     private static final String MONGDB_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.mongodb.v2.MongoDBCollectionMethodInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -68,7 +68,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
 
             new InterceptPoint() {

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v2/define/MongoDBCollectionInstrumentation.java
Patch:
@@ -54,7 +54,7 @@ public class MongoDBCollectionInstrumentation extends ClassInstanceMethodsEnhanc
     private static final String MONGDB_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.mongodb.v2.MongoDBCollectionMethodInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -71,7 +71,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
 
             new InterceptPoint() {

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v3/define/MongoDBInstrumentation.java
Patch:
@@ -37,7 +37,7 @@ public class MongoDBInstrumentation extends ClassInstanceMethodsEnhancePluginDef
     private static final String MONGDB_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.mongodb.v3.MongoDBMethodInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -54,7 +54,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/apache/skywalking/apm/plugin/motan/define/MotanConsumerInstrumentation.java
Patch:
@@ -50,7 +50,7 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -67,7 +67,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/apache/skywalking/apm/plugin/motan/define/MotanProviderInstrumentation.java
Patch:
@@ -40,12 +40,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/AbstractConnectionInstrumentation.java
Patch:
@@ -42,11 +42,11 @@
  */
 public abstract class AbstractConnectionInstrumentation extends AbstractMysqlInstrumentation {
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/AbstractMysqlInstrumentation.java
Patch:
@@ -28,16 +28,16 @@
  */
 public abstract class AbstractMysqlInstrumentation extends ClassEnhancePluginDefine {
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return null;
     }
 

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/CacheIpsInstrumentation.java
Patch:
@@ -39,12 +39,12 @@ public class CacheIpsInstrumentation extends AbstractMysqlInstrumentation {
 
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/CallableInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class CallableInstrumentation extends AbstractMysqlInstrumentation {
     private static final String ENHANCE_CLASS = "com.mysql.jdbc.CallableStatement";
     private static final String SERVICE_METHOD_INTERCEPTOR = org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.PREPARED_STATEMENT_EXECUTE_METHODS_INTERCEPTOR;
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/ConnectionImplCreateInstrumentation.java
Patch:
@@ -33,7 +33,7 @@ public class ConnectionImplCreateInstrumentation extends AbstractMysqlInstrument
 
     private static final String CONNECT_METHOD = "getInstance";
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[] {
             new StaticMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/PreparedStatementIgnoredSetterInstrumentation.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class PreparedStatementIgnoredSetterInstrumentation extends PreparedStatementInstrumentation {
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new PSSetterDefinitionOfJDBCInstrumentation(true)
         };

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/PreparedStatementInstrumentation.java
Patch:
@@ -47,11 +47,11 @@ public class PreparedStatementInstrumentation extends AbstractMysqlInstrumentati
     public static final String MYSQL_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.PreparedStatement";
     public static final String JDBC42_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.JDBC42PreparedStatement";
 
-    @Override protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/PreparedStatementNullSetterInstrumentation.java
Patch:
@@ -28,7 +28,7 @@
 public class PreparedStatementNullSetterInstrumentation extends PreparedStatementInstrumentation {
 
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new JDBCPreparedStatementNullSetterInstanceMethodsInterceptPoint()
         };

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/PreparedStatementSetterInstrumentation.java
Patch:
@@ -28,7 +28,7 @@
 public class PreparedStatementSetterInstrumentation extends PreparedStatementInstrumentation {
 
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new PSSetterDefinitionOfJDBCInstrumentation(false)
         };

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/StatementInstrumentation.java
Patch:
@@ -47,11 +47,11 @@ public class StatementInstrumentation extends AbstractMysqlInstrumentation {
     private static final String SERVICE_METHOD_INTERCEPTOR = org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.STATEMENT_EXECUTE_METHODS_INTERCEPTOR;
     public static final String MYSQL_STATEMENT_CLASS_NAME = "com.mysql.jdbc.StatementImpl";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/AbstractMysqlInstrumentation.java
Patch:
@@ -28,16 +28,16 @@
  */
 public abstract class AbstractMysqlInstrumentation extends ClassEnhancePluginDefine {
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return null;
     }
 

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/CacheIpsInstrumentation.java
Patch:
@@ -37,12 +37,12 @@ public class CacheIpsInstrumentation extends AbstractMysqlInstrumentation {
 
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{new InstanceMethodsInterceptPoint() {
             @Override
             public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/CallableInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class CallableInstrumentation extends AbstractMysqlInstrumentation {
     private static final String ENHANCE_CLASS = "com.mysql.jdbc.cj.CallableStatement";
     private static final String SERVICE_METHOD_INTERCEPTOR = org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.PREPARED_STATEMENT_EXECUTE_METHODS_INTERCEPTOR;
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ConnectionImplCreateInstrumentation.java
Patch:
@@ -45,7 +45,7 @@ public class ConnectionImplCreateInstrumentation extends AbstractMysqlInstrument
 
 
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[]{
             new StaticMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/ConnectionInstrumentation.java
Patch:
@@ -38,11 +38,11 @@ public class ConnectionInstrumentation extends AbstractMysqlInstrumentation {
         return byName(ENHANCE_CLASS);
     }
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/PreparedStatementIgnoredSetterInstrumentation.java
Patch:
@@ -28,7 +28,7 @@
 public class PreparedStatementIgnoredSetterInstrumentation extends PreparedStatementInstrumentation {
 
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new PSSetterDefinitionOfJDBCInstrumentation(true)
         };

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/PreparedStatementInstrumentation.java
Patch:
@@ -45,11 +45,11 @@ public class PreparedStatementInstrumentation extends AbstractMysqlInstrumentati
     private static final String SERVICE_METHOD_INTERCEPTOR = org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.PREPARED_STATEMENT_EXECUTE_METHODS_INTERCEPTOR;
     public static final String MYSQL6_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.PreparedStatement";
 
-    @Override protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/PreparedStatementNullSetterInstrumentation.java
Patch:
@@ -28,7 +28,7 @@
 public class PreparedStatementNullSetterInstrumentation extends PreparedStatementInstrumentation {
 
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new JDBCPreparedStatementNullSetterInstanceMethodsInterceptPoint()
         };

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/PreparedStatementSetterInstrumentation.java
Patch:
@@ -28,7 +28,7 @@
 public class PreparedStatementSetterInstrumentation extends PreparedStatementInstrumentation {
 
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new PSSetterDefinitionOfJDBCInstrumentation(false)
         };

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/define/StatementInstrumentation.java
Patch:
@@ -47,11 +47,11 @@ public class StatementInstrumentation extends AbstractMysqlInstrumentation {
     private static final String SERVICE_METHOD_INTERCEPTOR = org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.STATEMENT_EXECUTE_METHODS_INTERCEPTOR;
     public static final String MYSQL6_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.StatementImpl";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/AbstractMysqlInstrumentation.java
Patch:
@@ -29,16 +29,16 @@
 public abstract class AbstractMysqlInstrumentation extends ClassEnhancePluginDefine {
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return null;
     }
 

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/CallableInstrumentation.java
Patch:
@@ -34,11 +34,11 @@ public class CallableInstrumentation extends AbstractMysqlInstrumentation {
     private static final String ENHANCE_CLASS = "com.mysql.cj.jdbc.CallableStatement";
     private static final String SERVICE_METHOD_INTERCEPTOR = org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.PREPARED_STATEMENT_EXECUTE_METHODS_INTERCEPTOR;
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/ConnectionImplCreateInstrumentation.java
Patch:
@@ -42,7 +42,7 @@ public class ConnectionImplCreateInstrumentation extends AbstractMysqlInstrument
 
 
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[] {
             new StaticMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/ConnectionInstrumentation.java
Patch:
@@ -32,11 +32,11 @@
 
 public class ConnectionInstrumentation extends AbstractMysqlInstrumentation {
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/PreparedStatementIgnoredSetterInstrumentation.java
Patch:
@@ -28,7 +28,7 @@
 public class PreparedStatementIgnoredSetterInstrumentation extends PreparedStatementInstrumentation {
 
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new PSSetterDefinitionOfJDBCInstrumentation(true)
         };

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/PreparedStatementInstrumentation.java
Patch:
@@ -36,11 +36,11 @@ public class PreparedStatementInstrumentation extends AbstractMysqlInstrumentati
 
     private static final String SERVICE_METHOD_INTERCEPTOR =  Constants.PREPARED_STATEMENT_EXECUTE_METHODS_INTERCEPTOR;
 
-    @Override protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/PreparedStatementNullSetterInstrumentation.java
Patch:
@@ -28,7 +28,7 @@
 public class PreparedStatementNullSetterInstrumentation extends PreparedStatementInstrumentation {
 
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new JDBCPreparedStatementNullSetterInstanceMethodsInterceptPoint()
         };

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/PreparedStatementSetterInstrumentation.java
Patch:
@@ -28,7 +28,7 @@
 public class PreparedStatementSetterInstrumentation extends PreparedStatementInstrumentation {
 
     @Override
-    protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new PSSetterDefinitionOfJDBCInstrumentation(false)
         };

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/StatementInstrumentation.java
Patch:
@@ -32,11 +32,11 @@ public class StatementInstrumentation extends AbstractMysqlInstrumentation {
     private static final String SERVICE_METHOD_INTERCEPTOR =  org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.STATEMENT_EXECUTE_METHODS_INTERCEPTOR;
     public static final String MYSQL8_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.StatementImpl";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/nutz-plugins/http-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/nutz/http/sync/define/AbstractNutzHttpInstrumentation.java
Patch:
@@ -36,7 +36,7 @@ public abstract class AbstractNutzHttpInstrumentation extends ClassInstanceMetho
     private static final String DO_CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.plugin.nutz.http.sync.SenderConstructorInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -53,7 +53,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/nutz-plugins/mvc-annotation-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/nutz/mvc/define/ActionInstrumentation.java
Patch:
@@ -36,7 +36,7 @@ public class ActionInstrumentation extends ClassInstanceMethodsEnhancePluginDefi
     public static final String ENHANCE_ANNOTATION = "org.nutz.mvc.annotation.At";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -53,7 +53,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/define/AsyncCallInstrumentation.java
Patch:
@@ -31,7 +31,7 @@
 
 public class AsyncCallInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -45,7 +45,7 @@ public class AsyncCallInstrumentation extends ClassInstanceMethodsEnhancePluginD
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/define/CallbackInstrumentation.java
Patch:
@@ -29,11 +29,11 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.HierarchyMatch.byHierarchyMatch;
 
 public class CallbackInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/define/RealCallInstrumentation.java
Patch:
@@ -49,7 +49,7 @@ public class RealCallInstrumentation extends ClassInstanceMethodsEnhancePluginDe
         return NameMatch.byName(ENHANCE_CLASS);
     }
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -63,7 +63,7 @@ public class RealCallInstrumentation extends ClassInstanceMethodsEnhancePluginDe
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/AbstractJdbc2StatementInstrumentation.java
Patch:
@@ -35,11 +35,11 @@ public class AbstractJdbc2StatementInstrumentation extends ClassInstanceMethodsE
 
     private static final String ENHANCE_CLASS = "org.postgresql.jdbc2.AbstractJdbc2Statement";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/ConnectionInstrumentation.java
Patch:
@@ -55,11 +55,11 @@ public class ConnectionInstrumentation extends ClassInstanceMethodsEnhancePlugin
     public static final String PG_JDBC3_CONNECTION_ENHANCE_CLASS = "org.postgresql.jdbc3g.Jdbc3gConnection";
     public static final String PG_JDBC4_CONNECTION_ENHANCE_CLASS = "org.postgresql.jdbc4.Jdbc4Connection";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java
Patch:
@@ -47,11 +47,11 @@ public class Jdbc3ConnectionInstrumentation extends ClassInstanceMethodsEnhanceP
 
     public static final String ENHANCE_CLASS = "org.postgresql.jdbc3.Jdbc3Connection";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java
Patch:
@@ -47,11 +47,11 @@ public class Jdbc4ConnectionInstrumentation extends ClassInstanceMethodsEnhanceP
 
     public static final String ENHANCE_CLASS = "org.postgresql.jdbc4.Jdbc4Connection";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/PgCallableStatementInstrumentation.java
Patch:
@@ -31,11 +31,11 @@
 import static org.apache.skywalking.apm.plugin.jdbc.postgresql.Variables.PG_PREPARED_STATEMENT_EXECUTE_METHOD_INTERCEPTOR;
 
 public class PgCallableStatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/PgPreparedStatementInstrumentation.java
Patch:
@@ -34,11 +34,11 @@
  * @author zhang xin
  */
 public class PgPreparedStatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/PgStatementInstrumentation.java
Patch:
@@ -35,11 +35,11 @@
  */
 public class PgStatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/define/RabbitMQConsumerInstrumentation.java
Patch:
@@ -35,7 +35,7 @@ public class RabbitMQConsumerInstrumentation extends ClassInstanceMethodsEnhance
     public static final String ENHANCE_METHOD_DISPATCH = "handleDelivery";
     public static final String INTERCEPTOR_CONSTRUCTOR = "org.apache.skywalking.apm.plugin.rabbitmq.RabbitMQProducerAndConsumerConstructorInterceptor";
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                     @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -50,7 +50,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                     @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/define/RabbitMQProducerInstrumentation.java
Patch:
@@ -35,7 +35,7 @@ public class RabbitMQProducerInstrumentation extends ClassInstanceMethodsEnhance
     public static final String ENHANCE_METHOD_DISPATCH = "basicPublish";
     public static final String INTERCEPTOR_CONSTRUCTOR = "org.apache.skywalking.apm.plugin.rabbitmq.RabbitMQProducerAndConsumerConstructorInterceptor";
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                     @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -50,7 +50,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                     @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/redisson-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/redisson/v3/define/ConnectionManagerInstrumentation.java
Patch:
@@ -39,12 +39,12 @@ public class ConnectionManagerInstrumentation extends ClassInstanceMethodsEnhanc
     private static final String CONNECTION_MANAGER_INTERCEPTOR = "org.apache.skywalking.apm.plugin.redisson.v3.ConnectionManagerInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/redisson-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/redisson/v3/define/RedisClientInstrumentation.java
Patch:
@@ -39,7 +39,7 @@ public class RedisClientInstrumentation extends ClassInstanceMethodsEnhancePlugi
     private static final String REDIS_CLIENT_CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.plugin.redisson.v3.RedisClientConstructorInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -56,7 +56,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/apm-sdk-plugin/redisson-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/redisson/v3/define/RedisConnectionInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class RedisConnectionInstrumentation extends ClassInstanceMethodsEnhanceP
     private static final String REDISSON_METHOD_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.redisson.v3.RedisConnectionMethodInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -57,7 +57,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/resteasy-plugin/resteasy-server-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resteasy/v3/server/define/SynchronousDispatcherInstrumentation.java
Patch:
@@ -40,12 +40,12 @@ public class SynchronousDispatcherInstrumentation extends ClassInstanceMethodsEn
     private static final String INVOKE_EXCEPTION_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.resteasy.v3.server.SynchronousDispatcherExceptionInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/rocketMQ-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v3/define/ConsumeMessageConcurrentlyInstrumentation.java
Patch:
@@ -40,11 +40,11 @@ public class ConsumeMessageConcurrentlyInstrumentation extends ClassInstanceMeth
     private static final String CONSUMER_MESSAGE_METHOD = "consumeMessage";
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v3.MessageConcurrentlyConsumeInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v3/define/ConsumeMessageOrderlyInstrumentation.java
Patch:
@@ -40,11 +40,11 @@ public class ConsumeMessageOrderlyInstrumentation extends ClassInstanceMethodsEn
     private static final String ENHANCE_METHOD = "consumeMessage";
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v3.MessageOrderlyConsumeInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v3/define/MQClientAPIImplInstrumentation.java
Patch:
@@ -47,11 +47,11 @@ public class MQClientAPIImplInstrumentation extends ClassInstanceMethodsEnhanceP
     private static final String UPDATE_NAME_SERVER_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v3.UpdateNameServerInterceptor";
     private static final String UPDATE_NAME_SERVER_METHOD_NAME = "updateNameServerAddressList";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v3/define/SendCallbackInstrumentation.java
Patch:
@@ -45,11 +45,11 @@ public class SendCallbackInstrumentation extends ClassInstanceMethodsEnhancePlug
     private static final String ON_EXCEPTION_METHOD = "onException";
     private static final String ON_EXCEPTION_INTERCEPTOR = "org.apache.skywalking.apm.plugin.rocketMQ.v3.OnExceptionInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/ConsumeMessageConcurrentlyInstrumentation.java
Patch:
@@ -33,11 +33,11 @@ public class ConsumeMessageConcurrentlyInstrumentation extends ClassInstanceMeth
     private static final String CONSUMER_MESSAGE_METHOD = "consumeMessage";
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v4.MessageConcurrentlyConsumeInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/ConsumeMessageOrderlyInstrumentation.java
Patch:
@@ -33,11 +33,11 @@ public class ConsumeMessageOrderlyInstrumentation extends ClassInstanceMethodsEn
     private static final String ENHANCE_METHOD = "consumeMessage";
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v4.MessageOrderlyConsumeInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/MQClientAPIImplInstrumentation.java
Patch:
@@ -37,11 +37,11 @@ public class MQClientAPIImplInstrumentation extends ClassInstanceMethodsEnhanceP
     public static final String UPDATE_NAME_SERVER_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v4.UpdateNameServerInterceptor";
     public static final String UPDATE_NAME_SERVER_METHOD_NAME = "updateNameServerAddressList";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/SendCallbackInstrumentation.java
Patch:
@@ -37,11 +37,11 @@ public class SendCallbackInstrumentation extends ClassInstanceMethodsEnhancePlug
     private static final String ON_EXCEPTION_METHOD = "onException";
     private static final String ON_EXCEPTION_INTERCEPTOR = "org.apache.skywalking.apm.plugin.rocketMQ.v4.OnExceptionInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/define/ProducerOperationHandlerInstrumentation.java
Patch:
@@ -47,12 +47,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/define/TransportClientHandlerInstrumentation.java
Patch:
@@ -46,12 +46,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/define/ProducerOperationHandlerInstrumentation.java
Patch:
@@ -47,12 +47,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/define/TransportClientHandlerInstrumentation.java
Patch:
@@ -47,12 +47,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/sjdbc/define/ExecutorInstrumentation.java
Patch:
@@ -46,7 +46,7 @@ public class ExecutorInstrumentation extends ClassInstanceMethodsEnhancePluginDe
     private static final String ASYNC_EXECUTE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.sjdbc.define.AsyncExecuteInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return  new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -63,7 +63,7 @@ public String getConstructorInterceptor() {
     }
     
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/define/ExecuteInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class ExecuteInstrumentation extends ClassInstanceMethodsEnhancePluginDef
     private static final String EXECUTE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.shardingsphere.ExecuteInterceptor";
     
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public boolean isOverrideArgs() {
     }
     
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
     

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/define/JDBCRootInvokeInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class JDBCRootInvokeInstrumentation extends ClassInstanceMethodsEnhancePl
     private static final String JDBC_ROOT_INVOKE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.shardingsphere.JDBCRootInvokeInterceptor";
     
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public boolean isOverrideArgs() {
     }
     
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
     

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/define/ParseInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class ParseInstrumentation extends ClassInstanceMethodsEnhancePluginDefin
     private static final String EXECUTE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.shardingsphere.ParseInterceptor";
     
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public boolean isOverrideArgs() {
     }
     
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
     

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/define/ProxyRootInvokeInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class ProxyRootInvokeInstrumentation extends ClassInstanceMethodsEnhanceP
     private static final String PROXY_ROOT_INVOKE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.shardingsphere.ProxyRootInvokeInterceptor";
     
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public boolean isOverrideArgs() {
     }
     
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
     

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4/define/ExecuteInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class ExecuteInstrumentation extends ClassInstanceMethodsEnhancePluginDef
     private static final String EXECUTE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.shardingsphere.v4.ExecuteInterceptor";
     
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public boolean isOverrideArgs() {
     }
     
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
     

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4/define/JDBCRootInvokeInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class JDBCRootInvokeInstrumentation extends ClassInstanceMethodsEnhancePl
     private static final String JDBC_ROOT_INVOKE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.shardingsphere.v4.JDBCRootInvokeInterceptor";
     
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public boolean isOverrideArgs() {
     }
     
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
     

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4/define/ParseInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class ParseInstrumentation extends ClassInstanceMethodsEnhancePluginDefin
     private static final String EXECUTE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.shardingsphere.v4.ParseInterceptor";
     
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public boolean isOverrideArgs() {
     }
     
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
     

File: apm-sniffer/apm-sdk-plugin/sharding-sphere-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/shardingsphere/v4/define/ProxyRootInvokeInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class ProxyRootInvokeInstrumentation extends ClassInstanceMethodsEnhanceP
     private static final String PROXY_ROOT_INVOKE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.shardingsphere.v4.ProxyRootInvokeInterceptor";
     
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public boolean isOverrideArgs() {
     }
     
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
     

File: apm-sniffer/apm-sdk-plugin/sofarpc-plugin/src/main/java/org/apache/skywalking/apm/plugin/sofarpc/SofaRpcConsumerInstrumentation.java
Patch:
@@ -39,12 +39,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/sofarpc-plugin/src/main/java/org/apache/skywalking/apm/plugin/sofarpc/SofaRpcProviderInstrumentation.java
Patch:
@@ -39,12 +39,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/define/SolrClientInstrumentation.java
Patch:
@@ -29,7 +29,7 @@
 public class SolrClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[]{
             new ConstructorInterceptPoint() {
 
@@ -47,7 +47,7 @@ public ElementMatcher<MethodDescription> getConstructorMatcher() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/async-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/async/define/AsyncExecutionInterceptorInstrumentation.java
Patch:
@@ -36,12 +36,12 @@
 public class AsyncExecutionInterceptorInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/concurrent/define/FailureCallbackInstrumentation.java
Patch:
@@ -34,12 +34,12 @@ public class FailureCallbackInstrumentation extends ClassInstanceMethodsEnhanceP
     public static final String FAILURE_METHOD_NAME = "onFailure";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/concurrent/define/ListenableFutureCallbackInstrumentation.java
Patch:
@@ -39,12 +39,12 @@
  */
 public class ListenableFutureCallbackInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/concurrent/define/SuccessCallbackInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class SuccessCallbackInstrumentation extends ClassInstanceMethodsEnhanceP
         "org.apache.skywalking.apm.plugin.spring.concurrent.SuccessCallbackInterceptor";
     public static final String SUCCESS_METHOD_NAME = "onSuccess";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AopExpressionMatchInstrumentation.java
Patch:
@@ -40,12 +40,12 @@ public class AopExpressionMatchInstrumentation extends ClassStaticMethodsEnhance
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spring.patch.AopExpressionMatchInterceptor";
 
     @Override
-    protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[]{new StaticMethodsInterceptPoint() {
             @Override
             public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AopProxyFactoryInstrumentation.java
Patch:
@@ -34,11 +34,11 @@ public class AopProxyFactoryInstrumentation extends ClassInstanceMethodsEnhanceP
     public static final String ENHANCE_METHOD = "hasNoUserSuppliedProxyInterfaces";
     public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spring.patch.CreateAopProxyInterceptor";
 
-    @Override protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AspectJExpressionPointCutInstrumentation.java
Patch:
@@ -43,12 +43,12 @@ public class AspectJExpressionPointCutInstrumentation extends ClassInstanceMetho
 
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new DeclaredInstanceMethodsInterceptPoint[]{new DeclaredInstanceMethodsInterceptPoint() {
             @Override
             public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AutowiredAnnotationProcessorInstrumentation.java
Patch:
@@ -42,7 +42,7 @@ public class AutowiredAnnotationProcessorInstrumentation extends ClassInstanceMe
     private static final String ENHANCE_METHOD = "determineCandidateConstructors";
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.spring.patch.AutowiredAnnotationProcessorInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -56,7 +56,7 @@ public class AutowiredAnnotationProcessorInstrumentation extends ClassInstanceMe
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/BeanWrapperImplInstrumentation.java
Patch:
@@ -33,11 +33,11 @@ public class BeanWrapperImplInstrumentation extends ClassInstanceMethodsEnhanceP
 
     private static final String ENHANCE_CLASS = "org.springframework.beans.BeanWrapperImpl";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java
Patch:
@@ -43,7 +43,7 @@ public class ControllerInstrumentation extends AbstractSpring3Instrumentation {
     public static final String REQUEST_MAPPING_ENHANCE_ANNOTATION = "org.springframework.web.bind.annotation.RequestMapping";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -60,7 +60,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new DeclaredInstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/HandlerMethodInstrumentation.java
Patch:
@@ -41,12 +41,12 @@ public class HandlerMethodInstrumentation extends AbstractSpring3Instrumentation
     public static final String ENHANCE_CLASS = "org.springframework.web.method.HandlerMethod";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/HandlerMethodInvokerInstrumentation.java
Patch:
@@ -39,11 +39,11 @@ public class HandlerMethodInvokerInstrumentation extends AbstractSpring3Instrume
     private static final String ENHANCE_METHOD = "invokeHandlerMethod";
     private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.spring.mvc.v3.HandlerMethodInvokerInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java
Patch:
@@ -39,11 +39,11 @@ public class InvocableHandlerInstrumentation extends AbstractSpring3Instrumentat
     public static final String ENHANCE_METHOD = "invokeForRequest";
     public static final String ENHANCE_CLASS = "org.springframework.web.method.support.InvocableHandlerMethod";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java
Patch:
@@ -46,7 +46,7 @@
  */
 public abstract class AbstractControllerInstrumentation extends AbstractSpring4Instrumentation {
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -63,7 +63,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new DeclaredInstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/HandlerMethodInstrumentation.java
Patch:
@@ -41,12 +41,12 @@ public class HandlerMethodInstrumentation extends AbstractSpring4Instrumentation
     public static final String ENHANCE_CLASS = "org.springframework.web.method.HandlerMethod";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/InvocableHandlerInstrumentation.java
Patch:
@@ -41,12 +41,12 @@ public class InvocableHandlerInstrumentation extends AbstractSpring4Instrumentat
     public static final String ENHANCE_CLASS = "org.springframework.web.method.support.InvocableHandlerMethod";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v5/define/AbstractControllerInstrumentation.java
Patch:
@@ -45,7 +45,7 @@
  */
 public abstract class AbstractControllerInstrumentation extends AbstractSpring5Instrumentation {
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -62,7 +62,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new DeclaredInstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v5/define/HandlerMethodInstrumentation.java
Patch:
@@ -38,12 +38,12 @@ public class HandlerMethodInstrumentation extends AbstractSpring5Instrumentation
     public static final String ENHANCE_CLASS = "org.springframework.web.method.HandlerMethod";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/define/AnnotationMethodHandlerAdapterInstrumentation.java
Patch:
@@ -29,11 +29,11 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 public class AnnotationMethodHandlerAdapterInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/define/ResponseExtractorFutureInstrumentation.java
Patch:
@@ -52,13 +52,13 @@ public class ResponseExtractorFutureInstrumentation extends ClassInstanceMethods
     private static final String GET_METHOD_NAME = "get";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
 
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/define/RestTemplateInstrumentation.java
Patch:
@@ -51,12 +51,12 @@ public class RestTemplateInstrumentation extends ClassInstanceMethodsEnhancePlug
     private static final String CREATE_REQUEST_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.async.RestRequestInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/define/RestTemplateInstrumentation.java
Patch:
@@ -52,12 +52,12 @@ public class RestTemplateInstrumentation extends ClassInstanceMethodsEnhancePlug
     private static final String CREATE_REQUEST_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.sync.RestRequestInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/spring-cloud-feign-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/netflix/feign/v11/define/NetflixFeignInstrumentation.java
Patch:
@@ -43,11 +43,11 @@ public class NetflixFeignInstrumentation extends ClassInstanceMethodsEnhancePlug
         return byName(ENHANCE_CLASS);
     }
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/webflux-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/webflux/v5/define/AbstractControllerInstrumentation.java
Patch:
@@ -46,7 +46,7 @@
  */
 public abstract class AbstractControllerInstrumentation extends AbstractSpringWebflux5Instrumentation {
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -63,7 +63,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new DeclaredInstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/webflux-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/webflux/v5/define/HttpServerOperations20xInstrumentation.java
Patch:
@@ -29,7 +29,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 public class HttpServerOperations20xInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -43,7 +43,7 @@ public class HttpServerOperations20xInstrumentation extends ClassInstanceMethods
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/webflux-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/webflux/v5/define/HttpServerOperations21xInstrumentation.java
Patch:
@@ -29,7 +29,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 public class HttpServerOperations21xInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -43,7 +43,7 @@ public class HttpServerOperations21xInstrumentation extends ClassInstanceMethods
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spymemcached/v2/define/MemcachedInstrumentation.java
Patch:
@@ -53,7 +53,7 @@ public ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -70,7 +70,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/struts2/define/Struts2Instrumentation.java
Patch:
@@ -42,11 +42,11 @@ public class Struts2Instrumentation extends ClassInstanceMethodsEnhancePluginDef
     private static final String ENHANCE_METHOD = "invokeAction";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.struts2.Struts2Interceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/define/ApplicationDispatcherInstrumentation.java
Patch:
@@ -36,7 +36,7 @@ public class ApplicationDispatcherInstrumentation extends ClassInstanceMethodsEn
     public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.tomcat78x.ForwardInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[]{
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -50,7 +50,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/define/TomcatInstrumentation.java
Patch:
@@ -55,12 +55,12 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/undertow-plugins/undertow-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/undertow/v2x/define/RequestDispatcherImplInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class RequestDispatcherImplInstrumentation extends ClassInstanceMethodsEn
     public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.undertow.v2x.ForwardInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -57,7 +57,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/undertow-plugins/undertow-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/undertow/v2x/define/UndertowInstrumentation.java
Patch:
@@ -43,7 +43,7 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[] {
             new StaticMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/define/ClusteredEventBusSendRemoteInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class ClusteredEventBusSendRemoteInstrumentation extends ClassInstanceMet
     private static final String ENHANCE_METHOD = "sendRemote";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.vertx3.ClusteredEventBusSendRemoteInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/define/EventBusImplDeliverToHandlerInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class EventBusImplDeliverToHandlerInstrumentation extends ClassInstanceMe
     private static final String ENHANCE_METHOD = "deliverToHandler";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.vertx3.EventBusImplDeliverToHandlerInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/define/HandlerRegistrationInstrumentation.java
Patch:
@@ -40,11 +40,11 @@ public class HandlerRegistrationInstrumentation extends ClassInstanceMethodsEnha
     private static final String ENHANCE_CLASS = "io.vertx.core.eventbus.impl.HandlerRegistration";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.vertx3.HandlerRegistrationInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/define/HttpClientRequestImplEndInstrumentation.java
Patch:
@@ -42,7 +42,7 @@ public class HttpClientRequestImplEndInstrumentation extends ClassInstanceMethod
     private static final String ENHANCE_METHOD = "end";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.vertx3.HttpClientRequestImplEndInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -56,7 +56,7 @@ public class HttpClientRequestImplEndInstrumentation extends ClassInstanceMethod
         };
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/define/HttpClientRequestImplHandleExceptionInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class HttpClientRequestImplHandleExceptionInstrumentation extends ClassIn
     private static final String ENHANCE_METHOD = "handleException";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.vertx3.HttpClientRequestImplHandleExceptionInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/define/HttpClientRequestImplHandleResponseInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class HttpClientRequestImplHandleResponseInstrumentation extends ClassIns
     private static final String ENHANCE_METHOD = "handleResponse";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.vertx3.HttpClientRequestImplHandleResponseInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/define/HttpServerResponseImplEndInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class HttpServerResponseImplEndInstrumentation extends ClassInstanceMetho
     private static final String ENHANCE_METHOD = "end";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.vertx3.HttpServerResponseImplEndInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/define/HttpServerResponseImplHandleExceptionInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class HttpServerResponseImplHandleExceptionInstrumentation extends ClassI
     private static final String ENHANCE_METHOD = "handleException";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.vertx3.HttpServerResponseImplHandleExceptionInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx3/define/RouterImplAcceptInstrumentation.java
Patch:
@@ -41,11 +41,11 @@ public class RouterImplAcceptInstrumentation extends ClassInstanceMethodsEnhance
     private static final String ENHANCE_METHOD = "accept";
     private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.vertx3.RouterImplAcceptInterceptor";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xmemcached/v2/define/XMemcachedInstrumentation.java
Patch:
@@ -55,7 +55,7 @@ public ClassMatch enhanceClass() {
         return NameMatch.byName(ENHANCE_CLASS);
     }
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -105,7 +105,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-1.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/log4j/v1/x/TraceIdPatternConverterActivation.java
Patch:
@@ -55,7 +55,7 @@ protected ClassMatch enhanceClass() {
      * @return null, no need to intercept constructor of enhance class.
      */
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
@@ -64,7 +64,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
      * interceptors.
      */
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/log4j/v2/x/Log4j2OutputAppenderActivation.java
Patch:
@@ -55,7 +55,7 @@ protected ClassMatch enhanceClass() {
      * interceptors.
      */
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[] {
             new StaticMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/logback/v1/x/LogbackPatternConverterActivation.java
Patch:
@@ -57,7 +57,7 @@ protected ClassMatch enhanceClass() {
      * @return null, no need to intercept constructor of enhance class.
      */
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
@@ -66,7 +66,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
      * interceptors.
      */
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/logback/v1/x/async/AsyncAppenderBaseInstrumentation.java
Patch:
@@ -34,12 +34,12 @@
 
 public class AsyncAppenderBaseInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/logback/v1/x/async/LoggingEventInstrumentation.java
Patch:
@@ -34,7 +34,7 @@
 
 public class LoggingEventInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[]{
             new ConstructorInterceptPoint() {
                 @Override
@@ -51,7 +51,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/MDCConverterActivation.java
Patch:
@@ -40,12 +40,12 @@ public class MDCConverterActivation extends ClassInstanceMethodsEnhancePluginDef
     public static final String ENHANCE_METHOD = "convertTID";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return null;
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/continuation/SkywalkingContinuationActivation.java
Patch:
@@ -52,7 +52,7 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -67,7 +67,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/span/SkywalkingSpanActivation.java
Patch:
@@ -75,7 +75,7 @@ protected ClassMatch enhanceClass() {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -103,7 +103,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/tracer/SkywalkingTracerActivation.java
Patch:
@@ -49,11 +49,11 @@ public class SkywalkingTracerActivation extends ClassInstanceMethodsEnhancePlugi
         return NameMatch.byName(ENHANCE_CLASS);
     }
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/ActiveSpanActivation.java
Patch:
@@ -56,11 +56,11 @@ public class ActiveSpanActivation extends ClassStaticMethodsEnhancePluginDefine
     private static final String INFO_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.toolkit.activation.trace.ActiveSpanInfoInterceptor";
 
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    @Override public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[] {
             new StaticMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/CallableOrRunnableActivation.java
Patch:
@@ -41,7 +41,7 @@ public class CallableOrRunnableActivation extends ClassInstanceMethodsEnhancePlu
     private static final String CALL_METHOD_NAME = "call";
     private static final String RUN_METHOD_NAME = "run";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -56,7 +56,7 @@ public class CallableOrRunnableActivation extends ClassInstanceMethodsEnhancePlu
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationActivation.java
Patch:
@@ -42,11 +42,11 @@ public class TraceAnnotationActivation extends ClassInstanceMethodsEnhancePlugin
     public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.trace.TraceAnnotationMethodInterceptor";
     public static final String TRACE_ANNOTATION = "org.apache.skywalking.apm.toolkit.trace.Trace";
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new DeclaredInstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceContextActivation.java
Patch:
@@ -55,7 +55,7 @@ protected ClassMatch enhanceClass() {
      * interceptors.
      */
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         return new StaticMethodsInterceptPoint[] {
             new StaticMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/define/CustomizeInstanceInstrumentation.java
Patch:
@@ -42,12 +42,12 @@ public CustomizeInstanceInstrumentation(String enhanceClass) {
     }
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         final ElementMatcher matcher = CustomizeConfiguration.INSTANCE.getInterceptPoints(enhanceClass, false);
         if (matcher == null) {
             return new InstanceMethodsInterceptPoint[0];

File: apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/define/CustomizeStaticInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public CustomizeStaticInstrumentation(String enhanceClass) {
     }
 
     @Override
-    protected StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
+    public StaticMethodsInterceptPoint[] getStaticMethodsInterceptPoints() {
         final ElementMatcher matcher = CustomizeConfiguration.INSTANCE.getInterceptPoints(enhanceClass, true);
         if (matcher == null) {
             return new StaticMethodsInterceptPoint[0];

File: apm-sniffer/optional-plugins/gson-2.8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/gson/define/GsonFromJsonInstrumentation.java
Patch:
@@ -39,12 +39,12 @@ public class GsonFromJsonInstrumentation extends ClassInstanceMethodsEnhancePlug
     public static final String ENHANCE_METHOD_DISPATCH = "fromJson";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/optional-plugins/gson-2.8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/gson/define/GsonToJsonInstrumentation.java
Patch:
@@ -39,12 +39,12 @@ public class GsonToJsonInstrumentation extends ClassInstanceMethodsEnhancePlugin
     public static final String ENHANCE_METHOD = "toJson";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/AbstractRedisClientInstrumentation.java
Patch:
@@ -40,12 +40,12 @@ public class AbstractRedisClientInstrumentation extends ClassInstanceMethodsEnha
     private static final String ABSTRACT_REDIS_CLIENT_CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.lettuce.v5.AbstractRedisClientInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/AsyncCommandInstrumentation.java
Patch:
@@ -40,12 +40,12 @@ public class AsyncCommandInstrumentation extends ClassInstanceMethodsEnhancePlug
     private static final String ASYNC_COMMAND_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.lettuce.v5.AsyncCommandMethodInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/ClientOptionsInstrumentation.java
Patch:
@@ -39,7 +39,7 @@ public class ClientOptionsInstrumentation extends ClassInstanceMethodsEnhancePlu
     private static final String CLIENT_OPTIONS_CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.lettuce.v5.ClientOptionsConstructorInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[]{
             new ConstructorInterceptPoint() {
                 @Override
@@ -56,7 +56,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/RedisChannelWriterInstrumentation.java
Patch:
@@ -42,7 +42,7 @@ public class RedisChannelWriterInstrumentation extends ClassInstanceMethodsEnhan
     private static final String REDIS_CHANNEL_WRITER_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.lettuce.v5.RedisChannelWriterInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -59,7 +59,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/RedisClientInstrumentation.java
Patch:
@@ -39,7 +39,7 @@ public class RedisClientInstrumentation extends ClassInstanceMethodsEnhancePlugi
     private static final String REDIS_CLIENT_CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.lettuce.v5.RedisClientConstructorInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[]{
             new ConstructorInterceptPoint() {
                 @Override
@@ -56,7 +56,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/RedisClusterClientInstrumentation.java
Patch:
@@ -39,7 +39,7 @@ public class RedisClusterClientInstrumentation extends ClassInstanceMethodsEnhan
     private static final String REDIS_CLUSTER_CLIENT_CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.lettuce.v5.RedisClusterClientConstructorInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[]{
             new ConstructorInterceptPoint() {
                 @Override
@@ -56,7 +56,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v2/define/DefaultHttpHeadersInstrumentation.java
Patch:
@@ -34,7 +34,7 @@
 
 public class DefaultHttpHeadersInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getConstructorMatcher() {
@@ -49,7 +49,7 @@ public class DefaultHttpHeadersInstrumentation extends ClassInstanceMethodsEnhan
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[0];
     }
 

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v2/define/FilteringWebHandlerInstrumentation.java
Patch:
@@ -36,12 +36,12 @@
 public class FilteringWebHandlerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v2/define/HttpClientOperationsInstrumentation.java
Patch:
@@ -35,12 +35,12 @@
 
 public class HttpClientOperationsInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/AbstractSpringBeanInstrumentation.java
Patch:
@@ -35,11 +35,11 @@ public abstract class AbstractSpringBeanInstrumentation extends ClassInstanceMet
     public static final String INTERCEPT_GET_SKYWALKING_DYNAMIC_FIELD_METHOD = "getSkyWalkingDynamicField";
     public static final String INTERCEPT_SET_SKYWALKING_DYNAMIC_FIELD_METHOD = "setSkyWalkingDynamicField";
 
-    @Override protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    @Override public final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
-    @Override protected final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    @Override public final InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[] {
             new DeclaredInstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {

File: apm-sniffer/optional-plugins/zookeeper-3.4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/zookeeper/define/ClientCnxnInstrumentation.java
Patch:
@@ -41,7 +41,7 @@ public class ClientCnxnInstrumentation extends ClassInstanceMethodsEnhancePlugin
     private static final String CLIENT_CNXN_INTERCEPTOR = "org.apache.skywalking.apm.plugin.zookeeper.ClientCnxnInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {
             new ConstructorInterceptPoint() {
                 @Override
@@ -58,7 +58,7 @@ public String getConstructorInterceptor() {
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: apm-sniffer/optional-plugins/zookeeper-3.4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/zookeeper/define/EventThreadInstrumentation.java
Patch:
@@ -40,12 +40,12 @@ public class EventThreadInstrumentation extends ClassInstanceMethodsEnhancePlugi
     private static final String EVENT_THREAD_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.zookeeper.EventThreadMethodInterceptor";
 
     @Override
-    protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];
     }
 
     @Override
-    protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
         return new InstanceMethodsInterceptPoint[]{
             new InstanceMethodsInterceptPoint() {
                 @Override

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/AnalysisResult.java
Patch:
@@ -136,8 +136,8 @@ public void generateSerializeFields() {
                 case "long":
                     serializeFields.addLongField(column.getFieldName());
                     break;
-                case "IntKeyLongValueArray":
-                    serializeFields.addIntLongValuePairelistField(column.getFieldName());
+                case "IntKeyLongValueHashMap":
+                    serializeFields.addIntKeyLongValueHashMapField(column.getFieldName());
                     break;
                 default:
                     throw new IllegalStateException("Unexpected field type [" + type + "] of persistence column [" + column.getFieldName() + "]");

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ColumnTypeEsMapping.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;
 
-import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueArray;
+import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueHashMap;
 import org.apache.skywalking.oap.server.core.storage.model.DataTypeMapping;
 
 /**
@@ -35,7 +35,7 @@ public class ColumnTypeEsMapping implements DataTypeMapping {
             return "double";
         } else if (String.class.equals(type)) {
             return "keyword";
-        } else if (IntKeyLongValueArray.class.equals(type)) {
+        } else if (IntKeyLongValueHashMap.class.equals(type)) {
             return "keyword";
         } else if (byte[].class.equals(type)) {
             return "binary";

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java
Patch:
@@ -142,15 +142,15 @@ private void functionAggregation(Function function, TermsAggregationBuilder pare
                 numOfSteps = ((Number)source.get(ThermodynamicMetrics.NUM_OF_STEPS)).intValue() + 1;
 
                 String value = (String)source.get(ThermodynamicMetrics.DETAIL_GROUP);
-                IntKeyLongValueArray intKeyLongValues = new IntKeyLongValueArray(5);
+                IntKeyLongValueHashMap intKeyLongValues = new IntKeyLongValueHashMap(5);
                 intKeyLongValues.toObject(value);
 
                 List<Long> axisYValues = new ArrayList<>();
                 for (int i = 0; i < numOfSteps; i++) {
                     axisYValues.add(0L);
                 }
 
-                for (IntKeyLongValue intKeyLongValue : intKeyLongValues) {
+                for (IntKeyLongValue intKeyLongValue : intKeyLongValues.values()) {
                     axisYValues.set(intKeyLongValue.getKey(), intKeyLongValue.getValue());
                 }
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java
Patch:
@@ -178,15 +178,15 @@ private IntValues orderWithDefault0(IntValues origin, List<String> expectedOrder
                     String id = resultSet.getString("id");
                     numOfSteps = resultSet.getInt("num_of_steps") + 1;
                     String value = resultSet.getString("detail_group");
-                    IntKeyLongValueArray intKeyLongValues = new IntKeyLongValueArray(5);
+                    IntKeyLongValueHashMap intKeyLongValues = new IntKeyLongValueHashMap(5);
                     intKeyLongValues.toObject(value);
 
                     List<Long> axisYValues = new ArrayList<>();
                     for (int i = 0; i < numOfSteps; i++) {
                         axisYValues.add(0L);
                     }
 
-                    for (IntKeyLongValue intKeyLongValue : intKeyLongValues) {
+                    for (IntKeyLongValue intKeyLongValue : intKeyLongValues.values()) {
                         axisYValues.set(intKeyLongValue.getKey(), intKeyLongValue.getValue());
                     }
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TableInstaller.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao;
 
 import java.sql.*;
-import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueArray;
+import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueHashMap;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
 import org.apache.skywalking.oap.server.core.storage.model.*;
 import org.apache.skywalking.oap.server.library.client.Client;
@@ -87,7 +87,7 @@ protected String getColumnType(Model model, ColumnName name, Class<?> type) {
             return "DOUBLE";
         } else if (String.class.equals(type)) {
             return "VARCHAR(2000)";
-        } else if (IntKeyLongValueArray.class.equals(type)) {
+        } else if (IntKeyLongValueHashMap.class.equals(type)) {
             return "VARCHAR(20000)";
         } else if (byte[].class.equals(type)) {
             return "VARCHAR(20000)";

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLTableInstaller.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.sql.*;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
-import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueArray;
+import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueHashMap;
 import org.apache.skywalking.oap.server.core.register.RegisterSource;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
@@ -73,7 +73,7 @@ protected String getColumnType(Model model, ColumnName name, Class<?> type) {
                     return "VARCHAR(300)";
             }
             return "VARCHAR(2000)";
-        } else if (IntKeyLongValueArray.class.equals(type)) {
+        } else if (IntKeyLongValueHashMap.class.equals(type)) {
             return "MEDIUMTEXT";
         } else if (byte[].class.equals(type)) {
             return "MEDIUMTEXT";

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/TelemetryModule.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.telemetry;
 
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
+import org.apache.skywalking.oap.server.telemetry.api.MetricsCollector;
 import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;
 
 /**
@@ -34,6 +35,6 @@ public TelemetryModule() {
     }
 
     @Override public Class[] services() {
-        return new Class[] {MetricsCreator.class};
+        return new Class[] {MetricsCreator.class, MetricsCollector.class};
     }
 }

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/none/NoneTelemetryProvider.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.skywalking.oap.server.library.module.*;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
+import org.apache.skywalking.oap.server.telemetry.api.MetricsCollector;
 import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;
 
 /**
@@ -43,6 +44,7 @@ public class NoneTelemetryProvider extends ModuleProvider {
 
     @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {
         this.registerServiceImplementation(MetricsCreator.class, new MetricsCreatorNoop());
+        this.registerServiceImplementation(MetricsCollector.class, new MetricsCollectorNoop());
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java
Patch:
@@ -87,10 +87,10 @@ public static String getGlobalTraceId() {
     }
 
     public static AbstractSpan createEntrySpan(String operationName, ContextCarrier carrier) {
-        SamplingService samplingService = ServiceManager.INSTANCE.findService(SamplingService.class);
         AbstractSpan span;
         AbstractTracerContext context;
         if (carrier != null && carrier.isValid()) {
+            SamplingService samplingService = ServiceManager.INSTANCE.findService(SamplingService.class);
             samplingService.forceSampled();
             context = getOrCreate(operationName, true);
             span = context.createEntrySpan(operationName);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNWorker.java
Patch:
@@ -30,7 +30,7 @@
 import org.slf4j.*;
 
 /**
- * Top N worker is a persistence worker, but no
+ * Top N worker is a persistence worker. Cache and order the data, flush in longer period.
  *
  * @author wusheng, peng-yongsheng
  */

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/IBatchDAO.java
Patch:
@@ -19,13 +19,14 @@
 package org.apache.skywalking.oap.server.core.storage;
 
 import java.util.List;
+import org.apache.skywalking.oap.server.library.client.request.*;
 
 /**
  * @author peng-yongsheng
  */
 public interface IBatchDAO extends DAO {
 
-    void asynchronous(List<?> collection);
+    void asynchronous(InsertRequest insertRequest);
 
-    void synchronous(List<?> collection);
+    void synchronous(List<PrepareRequest> prepareRequests);
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/IRecordDAO.java
Patch:
@@ -21,11 +21,12 @@
 import java.io.IOException;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
+import org.apache.skywalking.oap.server.library.client.request.InsertRequest;
 
 /**
  * @author peng-yongsheng
  */
-public interface IRecordDAO<INSERT> extends DAO {
+public interface IRecordDAO extends DAO {
 
-    INSERT prepareBatchInsert(Model model, Record record) throws IOException;
+    InsertRequest prepareBatchInsert(Model model, Record record) throws IOException;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/worker/AbstractWorker.java
Patch:
@@ -25,6 +25,7 @@
  * @author peng-yongsheng
  */
 public abstract class AbstractWorker<INPUT> {
+    
     @Getter private final ModuleDefineHolder moduleDefineHolder;
 
     public AbstractWorker(ModuleDefineHolder moduleDefineHolder) {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/RecordEsDAO.java
Patch:
@@ -23,13 +23,13 @@
 import org.apache.skywalking.oap.server.core.storage.*;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
-import org.elasticsearch.action.index.IndexRequest;
+import org.apache.skywalking.oap.server.library.client.request.InsertRequest;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 
 /**
  * @author peng-yongsheng
  */
-public class RecordEsDAO extends EsDAO implements IRecordDAO<IndexRequest> {
+public class RecordEsDAO extends EsDAO implements IRecordDAO {
 
     private final StorageBuilder<Record> storageBuilder;
 
@@ -38,7 +38,7 @@ public class RecordEsDAO extends EsDAO implements IRecordDAO<IndexRequest> {
         this.storageBuilder = storageBuilder;
     }
 
-    @Override public IndexRequest prepareBatchInsert(Model model, Record record) throws IOException {
+    @Override public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {
         XContentBuilder builder = map2builder(storageBuilder.data2Map(record));
         String modelName = TimeSeriesUtils.timeSeries(model, record.getTimeBucket());
         return getClient().prepareInsert(modelName, record.id(), builder);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2RecordDAO.java
Patch:
@@ -23,12 +23,12 @@
 import org.apache.skywalking.oap.server.core.storage.*;
 import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCHikariCPClient;
-import org.apache.skywalking.oap.server.storage.plugin.jdbc.SQLExecutor;
+import org.apache.skywalking.oap.server.library.client.request.InsertRequest;
 
 /**
  * @author wusheng
  */
-public class H2RecordDAO extends H2SQLExecutor implements IRecordDAO<SQLExecutor> {
+public class H2RecordDAO extends H2SQLExecutor implements IRecordDAO {
 
     private JDBCHikariCPClient h2Client;
     private StorageBuilder<Record> storageBuilder;
@@ -38,7 +38,7 @@ public H2RecordDAO(JDBCHikariCPClient h2Client, StorageBuilder<Record> storageBu
         this.storageBuilder = storageBuilder;
     }
 
-    @Override public SQLExecutor prepareBatchInsert(Model model, Record record) throws IOException {
+    @Override public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {
         return getInsertExecutor(model.getName(), record, storageBuilder);
     }
 }

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/test/java/org/apache/skywalking/apm/plugin/kafka/v11/ConsumerConstructorInterceptorTest.java
Patch:
@@ -18,8 +18,6 @@
 
 package org.apache.skywalking.apm.plugin.kafka.v11;
 
-import java.util.ArrayList;
-import java.util.List;
 import org.apache.kafka.clients.consumer.ConsumerConfig;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.plugin.kafka.v1.ConsumerConstructorInterceptor;
@@ -29,6 +27,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
+import java.util.ArrayList;
+import java.util.List;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;

File: apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/RedisClusterClientConstructorInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import io.lettuce.core.cluster.RedisClusterClient;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
+import org.apache.skywalking.apm.agent.core.context.util.PeerFormat;
 
 /**
  * @author zhaoyuguang
@@ -39,6 +40,6 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
             peer.append(redisURI.getHost()).append(":").append(redisURI.getPort()).append(";");
         }
         EnhancedInstance optionsInst = (EnhancedInstance) redisClusterClient.getOptions();
-        optionsInst.setSkyWalkingDynamicField(peer.toString());
+        optionsInst.setSkyWalkingDynamicField(PeerFormat.shorten(peer.toString()));
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java
Patch:
@@ -74,7 +74,7 @@ public class MetricsPersistentWorker extends PersistenceWorker<Metrics, MergeDat
     }
 
     @Override void onWork(Metrics metrics) {
-        super.onWork(metrics);
+        cacheData(metrics);
     }
 
     @Override public void in(Metrics metrics) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/PersistenceWorker.java
Patch:
@@ -48,7 +48,7 @@ void onWork(INPUT input) {
                     getCache().switchPointer();
 
                     List<?> collection = buildBatchCollection();
-                    batchDAO.batchPersistence(collection);
+                    batchDAO.asynchronous(collection);
                 }
             } finally {
                 getCache().trySwitchPointerFinally();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/IBatchDAO.java
Patch:
@@ -25,5 +25,7 @@
  */
 public interface IBatchDAO extends DAO {
 
-    void batchPersistence(List<?> batchCollection);
+    void asynchronous(List<?> collection);
+
+    void synchronous(List<?> collection);
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -95,7 +95,7 @@ public void start() throws ModuleStartException {
         try {
             elasticSearchClient.connect();
 
-            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());
+            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber(), config.getIndexRefreshInterval());
             installer.install(elasticSearchClient);
 
             RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/EsDAO.java
Patch:
@@ -58,7 +58,7 @@ protected final void queryBuild(SearchSourceBuilder sourceBuilder, Where where,
         sourceBuilder.size(0);
     }
 
-    XContentBuilder map2builder(Map<String, Object> objectMap) throws IOException {
+    protected XContentBuilder map2builder(Map<String, Object> objectMap) throws IOException {
         XContentBuilder builder = XContentFactory.jsonBuilder().startObject();
         for (String key : objectMap.keySet()) {
             Object value = objectMap.get(key);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/AgentPackagePath.java
Patch:
@@ -72,7 +72,8 @@ private static File findPath() throws AgentPackageNotFoundException {
                     return agentJarFile.getParentFile();
                 }
             } else {
-                String classLocation = urlString.substring(urlString.indexOf("file:"), urlString.length() - classResourcePath.length());
+                int prefixLength = "file:".length();
+                String classLocation = urlString.substring(prefixLength, urlString.length() - classResourcePath.length());
                 return new File(classLocation);
             }
         }

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/meta/MetaSettings.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.meta;
+package org.apache.skywalking.oal.rt.meta;
 
 import java.util.List;
 import lombok.*;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/meta/ScopeMeta.java
Patch:
@@ -16,11 +16,11 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.meta;
+package org.apache.skywalking.oal.rt.meta;
 
 import java.util.*;
 import lombok.*;
-import org.apache.skywalking.oal.tool.parser.SourceColumn;
+import org.apache.skywalking.oal.rt.parser.SourceColumn;
 
 /**
  * @author wusheng

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/output/AllDispatcherContext.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.output;
+package org.apache.skywalking.oal.rt.output;
 
 import java.util.*;
 import lombok.*;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/output/DispatcherContext.java
Patch:
@@ -16,11 +16,11 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.output;
+package org.apache.skywalking.oal.rt.output;
 
 import java.util.*;
 import lombok.*;
-import org.apache.skywalking.oal.tool.parser.AnalysisResult;
+import org.apache.skywalking.oal.rt.parser.AnalysisResult;
 
 @Getter
 @Setter

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/AnalysisResult.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import java.util.*;
 import lombok.*;
@@ -44,7 +44,7 @@ public class AnalysisResult {
 
     private EntryMethod entryMethod;
 
-    private List<FilterExpression> filterExpressions;
+    private List<Expression> filterExpressions;
 
     private List<ConditionExpression> filterExpressionsParserResult;
 
@@ -74,7 +74,7 @@ public void addFuncConditionExpression(ConditionExpression conditionExpression)
         funcConditionExpressions.add(conditionExpression);
     }
 
-    public void addFilterExpressions(FilterExpression filterExpression) {
+    public void addFilterExpressions(Expression filterExpression) {
         if (filterExpressions == null) {
             filterExpressions = new LinkedList<>();
         }

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import lombok.*;
 

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/DataColumn.java
Patch:
@@ -16,10 +16,10 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import lombok.*;
-import org.apache.skywalking.oal.tool.util.ClassMethodUtil;
+import org.apache.skywalking.oal.rt.util.ClassMethodUtil;
 
 @Getter(AccessLevel.PUBLIC)
 @Setter(AccessLevel.PUBLIC)

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/DisableCollection.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import java.util.*;
 import lombok.Getter;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/MetricsHolder.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.reflect.ClassPath;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/OALScripts.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import java.util.*;
 import lombok.*;

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/PersistenceColumns.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import java.util.*;
 

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/PersistenceField.java
Patch:
@@ -16,10 +16,10 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import lombok.*;
-import org.apache.skywalking.oal.tool.util.ClassMethodUtil;
+import org.apache.skywalking.oal.rt.util.ClassMethodUtil;
 
 @Getter(AccessLevel.PUBLIC)
 @Setter(AccessLevel.PUBLIC)

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumn.java
Patch:
@@ -16,11 +16,11 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import java.util.Objects;
 import lombok.*;
-import org.apache.skywalking.oal.tool.util.ClassMethodUtil;
+import org.apache.skywalking.oal.rt.util.ClassMethodUtil;
 
 @Getter(AccessLevel.PUBLIC)
 @Setter(AccessLevel.PUBLIC)

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumnsFactory.java
Patch:
@@ -16,10 +16,10 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.parser;
+package org.apache.skywalking.oal.rt.parser;
 
 import java.util.*;
-import org.apache.skywalking.oal.tool.meta.*;
+import org.apache.skywalking.oal.rt.meta.*;
 
 /**
  * @author wusheng

File: oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/ClassMethodUtil.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.util;
+package org.apache.skywalking.oal.rt.util;
 
 public class ClassMethodUtil {
     public static String toGetMethod(String attribute) {

File: oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/meta/MetaReaderTest.java
Patch:
@@ -16,11 +16,11 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.meta;
+package org.apache.skywalking.oal.rt.meta;
 
 import java.io.InputStream;
 import java.util.List;
-import org.apache.skywalking.oal.tool.parser.SourceColumn;
+import org.apache.skywalking.oal.rt.parser.SourceColumn;
 import org.junit.*;
 
 public class MetaReaderTest {

File: oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/meta/MockSourceColumnsFactory.java
Patch:
@@ -16,10 +16,10 @@
  *
  */
 
-package org.apache.skywalking.oal.tool.meta;
+package org.apache.skywalking.oal.rt.meta;
 
 import java.util.*;
-import org.apache.skywalking.oal.tool.parser.SourceColumn;
+import org.apache.skywalking.oal.rt.parser.SourceColumn;
 
 public class MockSourceColumnsFactory {
     public static List<SourceColumn> getColumns(String source) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleAvgMetrics.java
Patch:
@@ -34,11 +34,11 @@ public abstract class DoubleAvgMetrics extends Metrics implements DoubleValueHol
     protected static final String VALUE = "value";
 
     @Getter @Setter @Column(columnName = SUMMATION) private double summation;
-    @Getter @Setter @Column(columnName = COUNT) private int count;
+    @Getter @Setter @Column(columnName = COUNT) private long count;
     @Getter @Setter @Column(columnName = VALUE, isValue = true, function = Function.Avg) private double value;
 
     @Entrance
-    public final void combine(@SourceFrom double summation, @ConstOne int count) {
+    public final void combine(@SourceFrom double summation, @ConstOne long count) {
         this.summation += summation;
         this.count += count;
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetrics.java
Patch:
@@ -34,11 +34,11 @@ public abstract class LongAvgMetrics extends Metrics implements LongValueHolder
     protected static final String VALUE = "value";
 
     @Getter @Setter @Column(columnName = SUMMATION) private long summation;
-    @Getter @Setter @Column(columnName = COUNT) private int count;
+    @Getter @Setter @Column(columnName = COUNT) private long count;
     @Getter @Setter @Column(columnName = VALUE, isValue = true, function = Function.Avg) private long value;
 
     @Entrance
-    public final void combine(@SourceFrom long summation, @ConstOne int count) {
+    public final void combine(@SourceFrom long summation, @ConstOne long count) {
         this.summation += summation;
         this.count += count;
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -64,7 +64,7 @@ public class DefaultScopeDefine {
     public static final int HTTP_ACCESS_LOG = 25;
 
     /**
-     * Catalog of scope, the metrics processor could use this to group all generated metrics by oal tool.
+     * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.
      */
     public static final String SERVICE_CATALOG_NAME = "SERVICE";
     public static final String SERVICE_INSTANCE_CATALOG_NAME = "SERVICE_INSTANCE";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/SourceReceiverImpl.java
Patch:
@@ -19,13 +19,14 @@
 package org.apache.skywalking.oap.server.core.source;
 
 import java.io.IOException;
+import lombok.Getter;
 import org.apache.skywalking.oap.server.core.analysis.DispatcherManager;
 
 /**
  * @author peng-yongsheng
  */
 public class SourceReceiverImpl implements SourceReceiver {
-
+    @Getter
     private final DispatcherManager dispatcherManager;
 
     public SourceReceiverImpl() {

File: oap-server/server-cluster-plugin/cluster-consul-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ConsulCoordinatorTest.java
Patch:
@@ -104,7 +104,8 @@ public void queryRemoteNodesWithNullSelf() {
         List<ServiceHealth> serviceHealths = mockHealth();
         when(consulResponse.getResponse()).thenReturn(serviceHealths);
         List<RemoteInstance> remoteInstances = coordinator.queryRemoteNodes();
-        assertTrue(remoteInstances.isEmpty());
+        // filter empty address
+        assertEquals(2, remoteInstances.size());
     }
 
     @Test

File: oap-server/server-cluster-plugin/cluster-nacos-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/nacos/NacosCoordinatorTest.java
Patch:
@@ -32,7 +32,6 @@
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
@@ -85,7 +84,7 @@ public void queryRemoteNodesWithNullSelf() throws NacosException {
         List<Instance> instances = mockInstance();
         when(namingService.selectInstances(anyString(), anyBoolean())).thenReturn(instances);
         List<RemoteInstance> remoteInstances = coordinator.queryRemoteNodes();
-        assertTrue(remoteInstances.isEmpty());
+        assertEquals(remoteInstances.size(), instances.size());
     }
 
     @Test

File: oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ClusterModuleZookeeperProvider.java
Patch:
@@ -70,16 +70,17 @@ public ClusterModuleZookeeperProvider() {
             .watchInstances(true)
             .serializer(new SWInstanceSerializer()).build();
 
+        ZookeeperCoordinator coordinator;
         try {
             client.start();
             client.blockUntilConnected();
             serviceDiscovery.start();
+            coordinator = new ZookeeperCoordinator(config, serviceDiscovery);
         } catch (Exception e) {
             logger.error(e.getMessage(), e);
             throw new ModuleStartException(e.getMessage(), e);
         }
 
-        ZookeeperCoordinator coordinator = new ZookeeperCoordinator(config, serviceDiscovery);
         this.registerServiceImplementation(ClusterRegister.class, coordinator);
         this.registerServiceImplementation(ClusterNodesQuery.class, coordinator);
     }

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java
Patch:
@@ -130,7 +130,7 @@ public RegisterServiceHandler(ModuleManager moduleManager) {
         responseObserver.onCompleted();
     }
 
-    @Override public void doEndpointRegister(Enpoints request, StreamObserver<EndpointMapping> responseObserver) {
+    @Override public void doEndpointRegister(Endpoints request, StreamObserver<EndpointMapping> responseObserver) {
         EndpointMapping.Builder builder = EndpointMapping.newBuilder();
 
         request.getEndpointsList().forEach(endpoint -> {

File: apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/loader/CustomizeInstrumentationLoader.java
Patch:
@@ -41,7 +41,7 @@
 
 public class CustomizeInstrumentationLoader implements InstrumentationLoader {
 
-    private static final ILog logger = LogManager.getLogger(CustomizeConfiguration.class);
+    private static final ILog logger = LogManager.getLogger(CustomizeInstrumentationLoader.class);
 
     @Override
     public List<AbstractClassEnhancePluginDefine> load(AgentClassLoader classLoader) {

File: oap-server/server-configuration/configuration-nacos/src/test/java/org/apache/skywalking/oap/server/configuration/nacos/NacosConfigurationTestProvider.java
Patch:
@@ -29,7 +29,7 @@
  * @author kezhenxu94
  */
 public class NacosConfigurationTestProvider extends ModuleProvider {
-    private static final Logger LOGGER = LoggerFactory.getLogger(NacosConfigurationProvider.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(NacosConfigurationTestProvider.class);
 
     ConfigChangeWatcher watcher;
 

File: oap-server/server-library/library-server/src/main/java/org/apache/skywalking/oap/server/library/server/jetty/JettyJsonHandler.java
Patch:
@@ -31,7 +31,7 @@
  * @author wusheng
  */
 public abstract class JettyJsonHandler extends JettyHandler {
-    private static final Logger logger = LoggerFactory.getLogger(JettyHandler.class);
+    private static final Logger logger = LoggerFactory.getLogger(JettyJsonHandler.class);
 
     @Override
     protected final void doGet(HttpServletRequest req, HttpServletResponse resp) {

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/handler/SpanV1JettyHandler.java
Patch:
@@ -29,7 +29,7 @@
 import zipkin2.codec.SpanBytesDecoder;
 
 public class SpanV1JettyHandler extends JettyHandler {
-    private static final Logger logger = LoggerFactory.getLogger(SpanV2JettyHandler.class);
+    private static final Logger logger = LoggerFactory.getLogger(SpanV1JettyHandler.class);
 
     private ZipkinReceiverConfig config;
     private SourceReceiver sourceReceiver;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java
Patch:
@@ -44,7 +44,7 @@
  */
 public class MySQLStorageProvider extends ModuleProvider {
 
-    private static final Logger logger = LoggerFactory.getLogger(H2StorageProvider.class);
+    private static final Logger logger = LoggerFactory.getLogger(MySQLStorageProvider.class);
 
     private H2StorageConfig config;
     private JDBCHikariCPClient mysqlClient;

File: apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/interceptor/BaseInterceptorMethods.java
Patch:
@@ -92,7 +92,7 @@ void afterMethod(Method method) {
     }
 
     void handleMethodException(Throwable t) {
-        if (ContextManager.activeSpan() != null) {
+        if (ContextManager.isActive()) {
             ContextManager.activeSpan().errorOccurred().log(t);
         }
     }

File: apm-sniffer/optional-plugins/optional-spring-plugins/optional-spring-cloud/gateway-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/gateway/v2/FilteringWebHandlerInterceptor.java
Patch:
@@ -42,9 +42,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         ServerWebExchange exchange = (ServerWebExchange) allArguments[0];
         Route route = exchange.getRequiredAttribute(GATEWAY_ROUTE_ATTR);
 
-        AbstractSpan span = ContextManager.activeSpan();
-        if (span != null) {
-            span.tag("route", route.getId());
+        if (ContextManager.isActive()) {
+            ContextManager.activeSpan().tag("route", route.getId());
         }
     }
 

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.skywalking.oap.server.core.source.DetectPoint;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.server.grpc.GRPCHandler;
-import org.apache.skywalking.oap.server.receiver.register.provider.handler.v5.grpc.InstanceDiscoveryServiceHandler;
 import org.slf4j.*;
 
 import static org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory.PropertyUtil.*;
@@ -41,7 +40,7 @@
  */
 public class RegisterServiceHandler extends RegisterGrpc.RegisterImplBase implements GRPCHandler {
 
-    private static final Logger logger = LoggerFactory.getLogger(InstanceDiscoveryServiceHandler.class);
+    private static final Logger logger = LoggerFactory.getLogger(RegisterServiceHandler.class);
 
     private final ServiceInventoryCache serviceInventoryCache;
     private final ServiceInstanceInventoryCache serviceInstanceInventoryCache;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/HistoryDeleteEsDAO.java
Patch:
@@ -69,7 +69,7 @@ public void deleteHistory(Model model, String timeBucketColumnName) throws IOExc
             }
 
             for (String prepareDeleteIndex : prepareDeleteIndexes) {
-                client.deleteIndex(prepareDeleteIndex);
+                client.deleteByIndexName(prepareDeleteIndex);
             }
         } else {
             int statusCode = client.delete(model.getName(), timeBucketColumnName, timeBefore);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/lock/RegisterLockInstaller.java
Patch:
@@ -64,7 +64,7 @@ public void install() throws StorageException {
     }
 
     private void deleteIndex() throws IOException {
-        client.deleteIndex(RegisterLockIndex.NAME);
+        client.deleteByModelName(RegisterLockIndex.NAME);
     }
 
     private void createIndex() throws IOException {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/GeneralStorageTTL.java
Patch:
@@ -32,6 +32,8 @@ public class GeneralStorageTTL implements StorageTTL {
                 return new DayTTLCalculator();
             case Month:
                 return new MonthTTLCalculator();
+            case Second:
+                return new SecondTTLCalculator();
             default:
                 return new MinuteTTLCalculator();
         }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v6/grpc/TraceSegmentReportServiceHandler.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.skywalking.apm.network.language.agent.v2.TraceSegmentReportServiceGrpc;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.server.grpc.GRPCHandler;
-import org.apache.skywalking.oap.server.receiver.trace.provider.handler.v5.grpc.TraceSegmentServiceHandler;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParseV2;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentSource;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
@@ -34,7 +33,7 @@
 
 public class TraceSegmentReportServiceHandler extends TraceSegmentReportServiceGrpc.TraceSegmentReportServiceImplBase implements GRPCHandler {
 
-    private static final Logger logger = LoggerFactory.getLogger(TraceSegmentServiceHandler.class);
+    private static final Logger logger = LoggerFactory.getLogger(TraceSegmentReportServiceHandler.class);
 
     private final SegmentParseV2.Producer segmentProducer;
     private HistogramMetrics histogram;

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -124,6 +124,8 @@ public class ComponentsDefine {
 
     public static final OfficialComponent SOLRJ =  new OfficialComponent(63, "solrj");
 
+    public static final OfficialComponent SPRING_ASYNC = new OfficialComponent(65, "SpringAsync");
+
     private static ComponentsDefine INSTANCE = new ComponentsDefine();
 
     private String[] components;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/GRPCChannelManager.java
Patch:
@@ -134,6 +134,7 @@ public Channel getChannel() {
     public void reportError(Throwable throwable) {
         if (isNetworkError(throwable)) {
             reconnect = true;
+            notify(GRPCChannelStatus.DISCONNECT);
         }
     }
 

File: apm-application-toolkit/apm-toolkit-logback-1.x/src/main/java/org/apache/skywalking/apm/toolkit/log/logback/v1/x/mdc/LogbackMDCPatternConverter.java
Patch:
@@ -40,10 +40,10 @@ public void start() {
     }
     @Override
     public String convert(ILoggingEvent iLoggingEvent) {
-        return convert4TID ? convertTID() : super.convert(iLoggingEvent);
+        return convert4TID ? convertTID(iLoggingEvent) : super.convert(iLoggingEvent);
     }
 
-    public String convertTID() {
+    public String convertTID(ILoggingEvent iLoggingEvent) {
         return "TID: N/A";
     }
 }

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/logback/v1/x/LogbackPatternConverterActivation.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
+import static org.apache.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
@@ -70,7 +71,7 @@ protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
             new InstanceMethodsInterceptPoint() {
                 @Override
                 public ElementMatcher<MethodDescription> getMethodsMatcher() {
-                    return named(ENHANCE_METHOD);
+                    return named(ENHANCE_METHOD).and(takesArgumentWithType(0,"ch.qos.logback.classic.spi.ILoggingEvent"));
                 }
 
                 @Override

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/logback/v1/x/mdc/MDCConverterActivation.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
+import static org.apache.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 
 /**
  * Support MDC https://logback.qos.ch/manual/mdc.html
@@ -49,7 +50,7 @@ protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
             new InstanceMethodsInterceptPoint() {
                 @Override
                 public ElementMatcher<MethodDescription> getMethodsMatcher() {
-                    return named(ENHANCE_METHOD);
+                    return named(ENHANCE_METHOD).and(takesArgumentWithType(0,"ch.qos.logback.classic.spi.ILoggingEvent"));
                 }
 
                 @Override

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2LogQueryDAO.java
Patch:
@@ -81,7 +81,7 @@ public Logs queryLogs(String metricName, int serviceId, int serviceInstanceId, i
         if (LogState.ERROR.equals(state)) {
             sql.append(" and ").append(AbstractLogRecord.IS_ERROR).append(" = ?");
             parameters.add(BooleanUtils.booleanToValue(true));
-        } else if (LogState.ERROR.equals(state)) {
+        } else if (LogState.SUCCESS.equals(state)) {
             sql.append(" and ").append(AbstractLogRecord.IS_ERROR).append(" = ?");
             parameters.add(BooleanUtils.booleanToValue(false));
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java
Patch:
@@ -34,7 +34,7 @@ public abstract class TopN extends Record implements ComparableStorageData {
     public static final String TRACE_ID = "trace_id";
     public static final String SERVICE_ID = "service_id";
 
-    @Getter @Setter @Column(columnName = STATEMENT) private String statement;
+    @Getter @Setter @Column(columnName = STATEMENT, content = true) private String statement;
     @Getter @Setter @Column(columnName = LATENCY) private long latency;
     @Getter @Setter @Column(columnName = TRACE_ID) private String traceId;
     @Getter @Setter @Column(columnName = SERVICE_ID) private int serviceId;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumn.java
Patch:
@@ -28,10 +28,12 @@ public class ModelColumn {
     private final ColumnName columnName;
     private final Class<?> type;
     private final boolean matchQuery;
+    private final boolean content;
 
-    public ModelColumn(ColumnName columnName, Class<?> type, boolean matchQuery) {
+    public ModelColumn(ColumnName columnName, Class<?> type, boolean matchQuery, boolean content) {
         this.columnName = columnName;
         this.type = type;
         this.matchQuery = matchQuery;
+        this.content = content;
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java
Patch:
@@ -62,7 +62,7 @@ private void retrieval(Class clazz, String modelName, List<ModelColumn> modelCol
         for (Field field : fields) {
             if (field.isAnnotationPresent(Column.class)) {
                 Column column = field.getAnnotation(Column.class);
-                modelColumns.add(new ModelColumn(new ColumnName(column.columnName()), field.getType(), column.matchQuery()));
+                modelColumns.add(new ModelColumn(new ColumnName(column.columnName()), field.getType(), column.matchQuery(), column.content()));
                 if (logger.isDebugEnabled()) {
                     logger.debug("The field named {} with the {} type", column.columnName(), field.getType());
                 }

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java
Patch:
@@ -232,7 +232,7 @@ public Map<String, Map<String, Object>> ids(String indexName, String... ids) thr
 
         SearchRequest searchRequest = new SearchRequest(indexName);
         searchRequest.types(TYPE);
-        searchRequest.source().query(QueryBuilders.idsQuery().addIds(ids));
+        searchRequest.source().query(QueryBuilders.idsQuery().addIds(ids)).size(ids.length);
         SearchResponse response = client.search(searchRequest);
 
         Map<String, Map<String, Object>> result = new HashMap<>();

File: oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleDefine.java
Patch:
@@ -58,9 +58,8 @@ public final String name() {
      * @param configuration of this module
      * @throws ProviderNotFoundException when even don't find a single one providers.
      */
-    void prepare(ModuleManager moduleManager,
-        ApplicationConfiguration.ModuleConfiguration configuration) throws ProviderNotFoundException, ServiceNotProvidedException, ModuleConfigException, ModuleStartException {
-        ServiceLoader<ModuleProvider> moduleProviderLoader = ServiceLoader.load(ModuleProvider.class);
+    void prepare(ModuleManager moduleManager, ApplicationConfiguration.ModuleConfiguration configuration,
+        ServiceLoader<ModuleProvider> moduleProviderLoader) throws ProviderNotFoundException, ServiceNotProvidedException, ModuleConfigException, ModuleStartException {
         boolean providerExist = false;
         for (ModuleProvider provider : moduleProviderLoader) {
             if (!configuration.has(provider.name())) {

File: oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleManager.java
Patch:
@@ -37,6 +37,8 @@ public void init(
         ApplicationConfiguration applicationConfiguration) throws ModuleNotFoundException, ProviderNotFoundException, ServiceNotProvidedException, CycleDependencyException, ModuleConfigException, ModuleStartException {
         String[] moduleNames = applicationConfiguration.moduleList();
         ServiceLoader<ModuleDefine> moduleServiceLoader = ServiceLoader.load(ModuleDefine.class);
+        ServiceLoader<ModuleProvider> moduleProviderLoader = ServiceLoader.load(ModuleProvider.class);
+
         LinkedList<String> moduleList = new LinkedList<>(Arrays.asList(moduleNames));
         for (ModuleDefine module : moduleServiceLoader) {
             for (String moduleName : moduleNames) {
@@ -47,7 +49,7 @@ public void init(
                     } catch (InstantiationException | IllegalAccessException e) {
                         throw new ModuleNotFoundException(e);
                     }
-                    newInstance.prepare(this, applicationConfiguration.getModuleConfiguration(moduleName));
+                    newInstance.prepare(this, applicationConfiguration.getModuleConfiguration(moduleName), moduleProviderLoader);
                     loadedModules.put(moduleName, newInstance);
                     moduleList.remove(moduleName);
                 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java
Patch:
@@ -154,10 +154,10 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
                 if (response.getStatus() >= 400) {
                     span.errorOccurred();
                     Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));
-
-                    ContextManager.getRuntimeContext().remove(REQUEST_KEY_IN_RUNTIME_CONTEXT);
-                    ContextManager.getRuntimeContext().remove(RESPONSE_KEY_IN_RUNTIME_CONTEXT);
                 }
+
+                ContextManager.getRuntimeContext().remove(REQUEST_KEY_IN_RUNTIME_CONTEXT);
+                ContextManager.getRuntimeContext().remove(RESPONSE_KEY_IN_RUNTIME_CONTEXT);
             }
 
             ContextManager.stopSpan();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -160,6 +160,7 @@ public CoreModuleProvider() {
 
             annotationScan.scan(() -> {
             });
+            streamDataMapping.init();
         } catch (IOException | IllegalAccessException | InstantiationException e) {
             throw new ModuleStartException(e.getMessage(), e);
         }

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -122,8 +122,6 @@ public class ComponentsDefine {
 
     public static final OfficialComponent RESTEASY =  new OfficialComponent(62, "RESTEasy");
 
-    public static final OfficialComponent SOLRJ =  new OfficialComponent(63, "solrj");
-
     private static ComponentsDefine INSTANCE = new ComponentsDefine();
 
     private String[] components;
@@ -181,7 +179,6 @@ public ComponentsDefine() {
         addComponent(VERTX);
         addComponent(SPRING_CLOUD_GATEWAY);
         addComponent(RESTEASY);
-        addComponent(SOLRJ);
     }
 
     private void addComponent(OfficialComponent component) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/remote/TraceSegmentServiceClient.java
Patch:
@@ -72,6 +72,7 @@ public void onComplete() throws Throwable {
 
     @Override
     public void shutdown() throws Throwable {
+        TracingContext.ListenerManager.remove(this);
         carrier.shutdownConsumers();
     }
 

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/K8sALSServiceMeshHTTPAnalysis.java
Patch:
@@ -175,7 +175,7 @@ protected List<Source> analysisSideCar(StreamAccessLogsMessage.Identifier identi
                 if (request != null) {
                     endpoint = request.getPath();
                     String schema = request.getScheme();
-                    if (schema.equals("http") || schema.equals("https")) {
+                    if ("http".equals(schema) || "https".equals(schema)) {
                         protocol = Protocol.HTTP;
                     } else {
                         protocol = Protocol.gRPC;
@@ -278,7 +278,7 @@ protected void analysisProxy(StreamAccessLogsMessage.Identifier identifier,
                 if (request != null) {
                     endpoint = request.getPath();
                     String schema = request.getScheme();
-                    if (schema.equals("http") || schema.equals("https")) {
+                    if ("http".equals(schema) || "https".equals(schema)) {
                         protocol = Protocol.HTTP;
                     } else {
                         protocol = Protocol.gRPC;

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java
Patch:
@@ -275,7 +275,7 @@ public void send(UpstreamSegment segment, Source source) {
             segmentParse.setStandardizationWorker(standardizationWorker);
             boolean parseResult = segmentParse.parse(bufferData, Source.Buffer);
             if (parseResult) {
-                segmentParse.TRACE_BUFFER_FILE_OUT.inc();
+                TRACE_BUFFER_FILE_OUT.inc();
             }
 
             return parseResult;

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java
Patch:
@@ -275,7 +275,7 @@ public void send(UpstreamSegment segment, SegmentSource source) {
             segmentParse.setStandardizationWorker(standardizationWorker);
             boolean parseResult = segmentParse.parse(bufferData, SegmentSource.Buffer);
             if (parseResult) {
-                segmentParse.TRACE_BUFFER_FILE_OUT.inc();
+                TRACE_BUFFER_FILE_OUT.inc();
             }
 
             return parseResult;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/LogQueryEsDAO.java
Patch:
@@ -75,7 +75,7 @@ public Logs queryLogs(String metricName, int serviceId, int serviceInstanceId, i
         }
         if (LogState.ERROR.equals(state)) {
             boolQueryBuilder.must().add(QueryBuilders.termQuery(AbstractLogRecord.IS_ERROR, BooleanUtils.booleanToValue(true)));
-        } else if (LogState.ERROR.equals(state)) {
+        } else if (LogState.SUCCESS.equals(state)) {
             boolQueryBuilder.must().add(QueryBuilders.termQuery(AbstractLogRecord.IS_ERROR, BooleanUtils.booleanToValue(false)));
         }
 

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParseV2.java
Patch:
@@ -85,7 +85,7 @@ public boolean parse(BufferData<UpstreamSegment> bufferData, SegmentSource sourc
             if (bufferData.getV2Segment() == null) {
                 bufferData.setV2Segment(parseBinarySegment(upstreamSegment));
             }
-            SegmentObject segmentObject = parseBinarySegment(upstreamSegment);
+            SegmentObject segmentObject = bufferData.getV2Segment();
 
             SegmentDecorator segmentDecorator = new SegmentDecorator(segmentObject);
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java
Patch:
@@ -65,7 +65,7 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
         }
 
         IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);
-        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));
+        Model model = modelSetter.putIfAbsent(recordClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));
         RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 1000, recordDAO);
 
         persistentWorkers.add(persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java
Patch:
@@ -61,7 +61,7 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
         }
 
         IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);
-        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));
+        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));
 
         TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);
         persistentWorkers.add(persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelName.java
Patch:
@@ -33,8 +33,8 @@ public static String build(Downsampling downsampling, String modelName) {
                 return modelName + Const.ID_SPLIT + Downsampling.Day.getName();
             case Hour:
                 return modelName + Const.ID_SPLIT + Downsampling.Hour.getName();
-            case Second:
-                return modelName + Const.ID_SPLIT + Downsampling.Second.getName();
+//            case Second:
+//                return modelName + Const.ID_SPLIT + Downsampling.Second.getName();
             default:
                 return modelName;
         }

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverProvider.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.server.GRPCHandlerRegister;
 import org.apache.skywalking.oap.server.library.module.*;
+import org.apache.skywalking.oap.server.receiver.sharing.server.SharingServerModule;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
 
 /**
@@ -50,7 +51,7 @@ public EnvoyMetricReceiverProvider() {
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {
-        GRPCHandlerRegister service = getManager().find(CoreModule.NAME).provider().getService(GRPCHandlerRegister.class);
+        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME).provider().getService(GRPCHandlerRegister.class);
         service.addHandler(new MetricServiceGRPCHandler(getManager()));
         service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));
     }
@@ -60,6 +61,6 @@ public EnvoyMetricReceiverProvider() {
     }
 
     @Override public String[] requiredModules() {
-        return new String[] {TelemetryModule.NAME, CoreModule.NAME};
+        return new String[] {TelemetryModule.NAME, CoreModule.NAME, SharingServerModule.NAME};
     }
 }

File: oap-server/server-receiver-plugin/skywalking-istio-telemetry-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/istio/telemetry/provider/IstioTelemetryReceiverProvider.java
Patch:
@@ -52,6 +52,6 @@ public class IstioTelemetryReceiverProvider extends ModuleProvider {
     }
 
     @Override public String[] requiredModules() {
-        return new String[] {TelemetryModule.NAME, CoreModule.NAME, MeshReceiverModule.NAME};
+        return new String[] {TelemetryModule.NAME, CoreModule.NAME, MeshReceiverModule.NAME, SharingServerModule.NAME};
     }
 }
\ No newline at end of file

File: apm-sniffer/apm-sdk-plugin/solrj-7.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/solrj/SolrClientInterceptor.java
Patch:
@@ -193,11 +193,11 @@ private static final AbstractSpan getSpan(String operatorName, String remotePeer
     }
 
     private static final String getOperatorNameWithAction(String collection, String path, String action) {
-        return String.format("solrJ/%s%s/%s", collection, path, action);
+        return "solrJ/" + collection + path + "/" + action;
     }
 
     private static final String getOperatorName(String collection, String path) {
-        return String.format("solrJ/%s%s", collection, path);
+        return "solrJ/" + collection + path;
     }
 
     private static final String getCollection(SolrjInstance instance, Object argument) {

File: oap-server/server-configuration/configuration-api/src/main/java/org/apache/skywalking/oap/server/configuration/api/ConfigTable.java
Patch:
@@ -26,6 +26,7 @@
  *
  * @author wusheng
  */
+@ToString
 public class ConfigTable {
     @Getter
     private List<ConfigItem> items = new ArrayList<>();
@@ -36,6 +37,7 @@ public void add(ConfigItem item) {
 
     @Getter
     @Setter
+    @ToString
     public static class ConfigItem {
         private String name;
         private String value;

File: oap-server/server-configuration/configuration-api/src/test/java/org/apache/skywalking/oap/server/configuration/api/ConfigWatcherRegisterTest.java
Patch:
@@ -22,6 +22,8 @@
 import org.junit.*;
 import org.powermock.reflect.Whitebox;
 
+import java.util.Set;
+
 /**
  * @author wusheng
  */
@@ -80,7 +82,7 @@ public void testRegisterTableLog() {
 
     public static class MockConfigWatcherRegister extends ConfigWatcherRegister {
 
-        @Override public ConfigTable readConfig() {
+        @Override public ConfigTable readConfig(Set<String> keys) {
             ConfigTable.ConfigItem item1 = new ConfigTable.ConfigItem("module.provider.prop1", "abc");
             ConfigTable.ConfigItem item2 = new ConfigTable.ConfigItem("MockModule.provider.prop2", "abc2");
 

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -122,6 +122,8 @@ public class ComponentsDefine {
 
     public static final OfficialComponent RESTEASY =  new OfficialComponent(62, "RESTEasy");
 
+    public static final OfficialComponent SOLRJ =  new OfficialComponent(63, "solrj");
+
     private static ComponentsDefine INSTANCE = new ComponentsDefine();
 
     private String[] components;
@@ -179,6 +181,7 @@ public ComponentsDefine() {
         addComponent(VERTX);
         addComponent(SPRING_CLOUD_GATEWAY);
         addComponent(RESTEASY);
+        addComponent(SOLRJ);
     }
 
     private void addComponent(OfficialComponent component) {

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java
Patch:
@@ -46,7 +46,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
-
+        ContextManager.getRuntimeContext().remove(Constants.FORWARD_REQUEST_FLAG);
         return ret;
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core;
 
 import java.io.IOException;
+import org.apache.skywalking.oap.server.configuration.api.ConfigurationModule;
 import org.apache.skywalking.oap.server.core.analysis.*;
 import org.apache.skywalking.oap.server.core.annotation.AnnotationScan;
 import org.apache.skywalking.oap.server.core.cache.*;
@@ -188,6 +189,6 @@ public CoreModuleProvider() {
 
     @Override
     public String[] requiredModules() {
-        return new String[] {TelemetryModule.NAME};
+        return new String[] {TelemetryModule.NAME, ConfigurationModule.NAME};
     }
 }

File: oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleStartException.java
Patch:
@@ -22,6 +22,9 @@
  * @author peng-yongsheng
  */
 public class ModuleStartException extends Exception {
+    public ModuleStartException(String message) {
+        super(message);
+    }
 
     public ModuleStartException(String message, Throwable cause) {
         super(message, cause);

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java
Patch:
@@ -38,7 +38,7 @@ public class TraceServiceModuleConfig extends ModuleConfig {
      * The threshold used to check the slow database access. Unit, millisecond.
      */
     @Setter @Getter private String slowDBAccessThreshold = "default:200";
-    @Setter @Getter private DBLatencyThresholds dbLatencyThresholds;
+    @Setter @Getter private DBLatencyThresholdsAndWatcher dbLatencyThresholdsAndWatcher;
     /**
      * Analysis trace status.
      *

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java
Patch:
@@ -165,7 +165,7 @@ public void parseEntry(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI
 
                 } else if (SpanTags.DB_TYPE.equals(tag.getKey())) {
                     String dbType = tag.getValue();
-                    DBLatencyThresholds thresholds = config.getDbLatencyThresholds();
+                    DBLatencyThresholdsAndWatcher thresholds = config.getDbLatencyThresholdsAndWatcher();
                     int threshold = thresholds.getThreshold(dbType);
                     if (sourceBuilder.getLatency() > threshold) {
                         isSlowDBAccess = true;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.skywalking.oap.server.core.server.*;
 import org.apache.skywalking.oap.server.core.source.*;
 import org.apache.skywalking.oap.server.core.storage.PersistenceTimer;
-import org.apache.skywalking.oap.server.core.storage.model.StorageModels;
 import org.apache.skywalking.oap.server.core.storage.model.*;
 import org.apache.skywalking.oap.server.core.storage.ttl.DataTTLKeeperTimer;
 import org.apache.skywalking.oap.server.core.worker.*;
@@ -180,8 +179,9 @@ public CoreModuleProvider() {
 
         PersistenceTimer.INSTANCE.start(getManager());
 
-        DataTTLKeeperTimer.INSTANCE.setDataTTL(moduleConfig.getDataTTL());
-        DataTTLKeeperTimer.INSTANCE.start(getManager());
+        if (moduleConfig.isEnableDataKeeperExecutor()) {
+            DataTTLKeeperTimer.INSTANCE.start(getManager());
+        }
 
         CacheUpdateTimer.INSTANCE.start(getManager());
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/DataTTLConfig.java
Patch:
@@ -25,7 +25,7 @@
  */
 @Setter
 @Getter
-public class DataTTL {
+public class DataTTLConfig {
     private int recordDataTTL;
     private int minuteMetricsDataTTL;
     private int hourMetricsDataTTL;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Downsampling.java
Patch:
@@ -21,7 +21,7 @@
  * @author peng-yongsheng
  */
 public enum Downsampling {
-    Second(0, "second"), Minute(1, "minute"), Hour(2, "hour"), Day(3, "day"), Month(4, "month");
+    None(0, ""), Second(1, "second"), Minute(2, "minute"), Hour(3, "hour"), Day(4, "day"), Month(5, "month");
 
     private final int value;
     private final String name;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordStreamProcessor.java
Patch:
@@ -64,8 +64,8 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
         }
 
         IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);
-        Model model = modelSetter.putIfAbsent(recordClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Second);
-        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model.getName(), 1000, recordDAO);
+        Model model = modelSetter.putIfAbsent(recordClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);
+        RecordPersistentWorker persistentWorker = new RecordPersistentWorker(moduleDefineHolder, model, 1000, recordDAO);
 
         persistentWorkers.add(persistentWorker);
         workers.put(recordClass, persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java
Patch:
@@ -60,9 +60,9 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
         }
 
         IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);
-        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage());
+        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);
 
-        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model.getName(), 50, recordDAO);
+        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);
         persistentWorkers.add(persistentWorker);
         workers.put(topNClass, persistentWorker);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/EndpointInventory.java
Patch:
@@ -35,7 +35,7 @@
  * @author peng-yongsheng
  */
 @ScopeDeclaration(id = ENDPOINT_INVENTORY, name = "EndpointInventory")
-@Stream(name = EndpointInventory.INDEX_NAME, scopeId = DefaultScopeDefine.ENDPOINT_INVENTORY, storage = @Storage(builder = EndpointInventory.Builder.class, deleteHistory = false), processor = InventoryStreamProcessor.class)
+@Stream(name = EndpointInventory.INDEX_NAME, scopeId = DefaultScopeDefine.ENDPOINT_INVENTORY, storage = @Storage(builder = EndpointInventory.Builder.class, deleteHistory = false, capableOfTimeSeries = false), processor = InventoryStreamProcessor.class)
 public class EndpointInventory extends RegisterSource {
 
     public static final String INDEX_NAME = "endpoint_inventory";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/NetworkAddressInventory.java
Patch:
@@ -35,7 +35,7 @@
  * @author peng-yongsheng
  */
 @ScopeDeclaration(id = NETWORK_ADDRESS, name = "NetworkAddress")
-@Stream(name = NetworkAddressInventory.INDEX_NAME, scopeId = DefaultScopeDefine.NETWORK_ADDRESS, storage = @Storage(builder = NetworkAddressInventory.Builder.class, deleteHistory = false), processor = InventoryStreamProcessor.class)
+@Stream(name = NetworkAddressInventory.INDEX_NAME, scopeId = DefaultScopeDefine.NETWORK_ADDRESS, storage = @Storage(builder = NetworkAddressInventory.Builder.class, deleteHistory = false, capableOfTimeSeries = false), processor = InventoryStreamProcessor.class)
 public class NetworkAddressInventory extends RegisterSource {
 
     public static final String INDEX_NAME = "network_address_inventory";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInstanceInventory.java
Patch:
@@ -38,7 +38,7 @@
  * @author peng-yongsheng
  */
 @ScopeDeclaration(id = SERVICE_INSTANCE_INVENTORY, name = "ServiceInstanceInventory")
-@Stream(name = ServiceInstanceInventory.INDEX_NAME, scopeId = DefaultScopeDefine.SERVICE_INSTANCE_INVENTORY, storage = @Storage(builder = ServiceInstanceInventory.Builder.class, deleteHistory = false), processor = InventoryStreamProcessor.class)
+@Stream(name = ServiceInstanceInventory.INDEX_NAME, scopeId = DefaultScopeDefine.SERVICE_INSTANCE_INVENTORY, storage = @Storage(builder = ServiceInstanceInventory.Builder.class, deleteHistory = false, capableOfTimeSeries = false), processor = InventoryStreamProcessor.class)
 public class ServiceInstanceInventory extends RegisterSource {
 
     public static final String INDEX_NAME = "service_instance_inventory";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInventory.java
Patch:
@@ -37,7 +37,7 @@
  * @author peng-yongsheng
  */
 @ScopeDeclaration(id = SERVICE_INVENTORY, name = "ServiceInventory")
-@Stream(name = ServiceInventory.INDEX_NAME, scopeId = DefaultScopeDefine.SERVICE_INVENTORY, storage = @Storage(builder = ServiceInventory.Builder.class, deleteHistory = false), processor = InventoryStreamProcessor.class)
+@Stream(name = ServiceInventory.INDEX_NAME, scopeId = DefaultScopeDefine.SERVICE_INVENTORY, storage = @Storage(builder = ServiceInventory.Builder.class, deleteHistory = false, capableOfTimeSeries = false), processor = InventoryStreamProcessor.class)
 public class ServiceInventory extends RegisterSource {
 
     public static final String INDEX_NAME = "service_inventory";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/InventoryStreamProcessor.java
Patch:
@@ -55,6 +55,7 @@ public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<?
 
         IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);
         Model model = modelSetter.putIfAbsent(inventoryClass, stream.name(), stream.scopeId(), stream.storage());
+
         RegisterPersistentWorker persistentWorker = new RegisterPersistentWorker(moduleDefineHolder, model.getName(), registerDAO, stream.scopeId());
 
         RegisterRemoteWorker remoteWorker = new RegisterRemoteWorker(moduleDefineHolder, persistentWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/IHistoryDeleteDAO.java
Patch:
@@ -19,11 +19,12 @@
 package org.apache.skywalking.oap.server.core.storage;
 
 import java.io.IOException;
+import org.apache.skywalking.oap.server.core.storage.model.Model;
 
 /**
  * @author peng-yongsheng
  */
 public interface IHistoryDeleteDAO extends DAO {
 
-    void deleteHistory(String modelName, String timeBucketColumnName, Long timeBucketBefore) throws IOException;
+    void deleteHistory(Model model, String timeBucketColumnName) throws IOException;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/IRecordDAO.java
Patch:
@@ -20,11 +20,12 @@
 
 import java.io.IOException;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
+import org.apache.skywalking.oap.server.core.storage.model.Model;
 
 /**
  * @author peng-yongsheng
  */
 public interface IRecordDAO<INSERT> extends DAO {
 
-    INSERT prepareBatchInsert(String modelName, Record record) throws IOException;
+    INSERT prepareBatchInsert(Model model, Record record) throws IOException;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/Storage.java
Patch:
@@ -31,4 +31,6 @@
     Class<? extends StorageBuilder> builder();
 
     boolean deleteHistory() default true;
+
+    boolean capableOfTimeSeries() default true;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelName.java
Patch:
@@ -33,8 +33,6 @@ public static String build(Downsampling downsampling, String modelName) {
                 return modelName + Const.ID_SPLIT + Downsampling.Day.getName();
             case Hour:
                 return modelName + Const.ID_SPLIT + Downsampling.Hour.getName();
-            case Minute:
-                return modelName + Const.ID_SPLIT + Downsampling.Minute.getName();
             case Second:
                 return modelName + Const.ID_SPLIT + Downsampling.Second.getName();
             default:

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/DayTTLCalculator.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.skywalking.oap.server.core.storage.ttl;
 
-import org.apache.skywalking.oap.server.core.DataTTL;
+import org.apache.skywalking.oap.server.core.DataTTLConfig;
 import org.joda.time.DateTime;
 
 /**
  * @author peng-yongsheng
  */
 public class DayTTLCalculator implements TTLCalculator {
 
-    @Override public long timeBefore(DateTime currentTime, DataTTL dataTTL) {
-        return Long.valueOf(currentTime.plusDays(0 - dataTTL.getDayMetricsDataTTL()).toString("yyyyMMdd"));
+    @Override public long timeBefore(DateTime currentTime, DataTTLConfig dataTTLConfig) {
+        return Long.valueOf(currentTime.plusDays(0 - dataTTLConfig.getDayMetricsDataTTL()).toString("yyyyMMdd"));
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/HourTTLCalculator.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.skywalking.oap.server.core.storage.ttl;
 
-import org.apache.skywalking.oap.server.core.DataTTL;
+import org.apache.skywalking.oap.server.core.DataTTLConfig;
 import org.joda.time.DateTime;
 
 /**
  * @author peng-yongsheng
  */
 public class HourTTLCalculator implements TTLCalculator {
 
-    @Override public long timeBefore(DateTime currentTime, DataTTL dataTTL) {
-        return Long.valueOf(currentTime.plusHours(0 - dataTTL.getHourMetricsDataTTL()).toString("yyyyMMddHH"));
+    @Override public long timeBefore(DateTime currentTime, DataTTLConfig dataTTLConfig) {
+        return Long.valueOf(currentTime.plusHours(0 - dataTTLConfig.getHourMetricsDataTTL()).toString("yyyyMMddHH"));
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/MinuteTTLCalculator.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.skywalking.oap.server.core.storage.ttl;
 
-import org.apache.skywalking.oap.server.core.DataTTL;
+import org.apache.skywalking.oap.server.core.DataTTLConfig;
 import org.joda.time.DateTime;
 
 /**
  * @author peng-yongsheng
  */
 public class MinuteTTLCalculator implements TTLCalculator {
 
-    @Override public long timeBefore(DateTime currentTime, DataTTL dataTTL) {
-        return Long.valueOf(currentTime.plusMinutes(0 - dataTTL.getMinuteMetricsDataTTL()).toString("yyyyMMddHHmm"));
+    @Override public long timeBefore(DateTime currentTime, DataTTLConfig dataTTLConfig) {
+        return Long.valueOf(currentTime.plusMinutes(0 - dataTTLConfig.getMinuteMetricsDataTTL()).toString("yyyyMMddHHmm"));
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/MonthTTLCalculator.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.skywalking.oap.server.core.storage.ttl;
 
-import org.apache.skywalking.oap.server.core.DataTTL;
+import org.apache.skywalking.oap.server.core.DataTTLConfig;
 import org.joda.time.DateTime;
 
 /**
  * @author peng-yongsheng
  */
 public class MonthTTLCalculator implements TTLCalculator {
 
-    @Override public long timeBefore(DateTime currentTime, DataTTL dataTTL) {
-        return Long.valueOf(currentTime.plusMonths(0 - dataTTL.getMonthMetricsDataTTL()).toString("yyyyMM"));
+    @Override public long timeBefore(DateTime currentTime, DataTTLConfig dataTTLConfig) {
+        return Long.valueOf(currentTime.plusMonths(0 - dataTTLConfig.getMonthMetricsDataTTL()).toString("yyyyMM"));
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/SecondTTLCalculator.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.skywalking.oap.server.core.storage.ttl;
 
-import org.apache.skywalking.oap.server.core.DataTTL;
+import org.apache.skywalking.oap.server.core.DataTTLConfig;
 import org.joda.time.DateTime;
 
 /**
  * @author peng-yongsheng
  */
 public class SecondTTLCalculator implements TTLCalculator {
 
-    @Override public long timeBefore(DateTime currentTime, DataTTL dataTTL) {
-        return Long.valueOf(currentTime.plusMinutes(0 - dataTTL.getRecordDataTTL()).toString("yyyyMMddHHmmss"));
+    @Override public long timeBefore(DateTime currentTime, DataTTLConfig dataTTLConfig) {
+        return Long.valueOf(currentTime.plusMinutes(0 - dataTTLConfig.getRecordDataTTL()).toString("yyyyMMddHHmmss"));
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/TTLCalculator.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.skywalking.oap.server.core.storage.ttl;
 
-import org.apache.skywalking.oap.server.core.DataTTL;
+import org.apache.skywalking.oap.server.core.DataTTLConfig;
 import org.joda.time.DateTime;
 
 /**
  * @author peng-yongsheng
  */
 public interface TTLCalculator {
 
-    long timeBefore(DateTime currentTime, DataTTL dataTTL);
+    long timeBefore(DateTime currentTime, DataTTLConfig dataTTLConfig);
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/RecordEsDAO.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.storage.*;
+import org.apache.skywalking.oap.server.core.storage.model.Model;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.elasticsearch.action.index.IndexRequest;
 import org.elasticsearch.common.xcontent.XContentBuilder;
@@ -37,8 +38,9 @@ public class RecordEsDAO extends EsDAO implements IRecordDAO<IndexRequest> {
         this.storageBuilder = storageBuilder;
     }
 
-    @Override public IndexRequest prepareBatchInsert(String modelName, Record record) throws IOException {
+    @Override public IndexRequest prepareBatchInsert(Model model, Record record) throws IOException {
         XContentBuilder builder = map2builder(storageBuilder.data2Map(record));
+        String modelName = TimeSeriesUtils.timeSeries(model, record.getTimeBucket());
         return getClient().prepareInsert(modelName, record.id(), builder);
     }
 }

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/JDBCDriverInterceptor.java
Patch:
@@ -41,7 +41,7 @@ public class JDBCDriverInterceptor implements InstanceMethodsAroundInterceptor {
 
     @Override public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,
         Class<?>[] argumentsTypes, Object ret) throws Throwable {
-        if (ret != null) {
+        if (ret != null && ret instanceof EnhancedInstance) {
             ((EnhancedInstance)ret).setSkyWalkingDynamicField(URLParser.parser((String)allArguments[0]));
         }
 

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/MysqlURLParser.java
Patch:
@@ -84,12 +84,12 @@ public ConnectionInfo parse() {
             StringBuilder sb = new StringBuilder();
             for (String host : hostSegment) {
                 if (host.split(":").length == 1) {
-                    sb.append(host + ":" + DEFAULT_PORT + ",");
+                    sb.append(host).append(":").append(DEFAULT_PORT).append(",");
                 } else {
-                    sb.append(host + ",");
+                    sb.append(host).append(",");
                 }
             }
-            return new ConnectionInfo(ComponentsDefine.MYSQL_JDBC_DRIVER, DB_TYPE, sb.toString(), fetchDatabaseNameFromURL());
+            return new ConnectionInfo(ComponentsDefine.MYSQL_JDBC_DRIVER, DB_TYPE, sb.substring(0, sb.length() - 1), fetchDatabaseNameFromURL());
         } else {
             String[] hostAndPort = hostSegment[0].split(":");
             if (hostAndPort.length != 1) {

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/test/java/org/apache/skywalking/apm/plugin/jdbc/connectionurl/parser/URLParserTest.java
Patch:
@@ -55,15 +55,15 @@ public void testParseMysqlJDBCURLWithMultiHost() {
         ConnectionInfo connectionInfo = new URLParser().parser("jdbc:mysql//primaryhost:3307,secondaryhost1,secondaryhost2/test?profileSQL=true");
         assertThat(connectionInfo.getDBType(), is("Mysql"));
         assertThat(connectionInfo.getDatabaseName(), is("test"));
-        assertThat(connectionInfo.getDatabasePeer(), is("primaryhost:3307,secondaryhost1:3306,secondaryhost2:3306,"));
+        assertThat(connectionInfo.getDatabasePeer(), is("primaryhost:3307,secondaryhost1:3306,secondaryhost2:3306"));
     }
 
     @Test
     public void testParseMysqlJDBCURLWithConnectorJs() {
         ConnectionInfo connectionInfo = new URLParser().parser("jdbc:mysql:replication://master,slave1,slave2,slave3/test");
         assertThat(connectionInfo.getDBType(), is("Mysql"));
         assertThat(connectionInfo.getDatabaseName(), is("test"));
-        assertThat(connectionInfo.getDatabasePeer(), is("master:3306,slave1:3306,slave2:3306,slave3:3306,"));
+        assertThat(connectionInfo.getDatabasePeer(), is("master:3306,slave1:3306,slave2:3306,slave3:3306"));
     }
 
     @Test

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/ConnectionCreate5xInterceptor.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;
 import org.apache.skywalking.apm.plugin.jdbc.connectionurl.parser.URLParser;
+import org.apache.skywalking.apm.plugin.jdbc.mysql.ConnectionCache;
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 import java.lang.reflect.Method;

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/CacheIpsInstrumentation.java
Patch:
@@ -26,6 +26,7 @@
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;
+import static org.apache.skywalking.apm.plugin.jdbc.mysql.Constants.DRIVER_CONNECT_INTERCEPTOR;
 
 /**
  * @author: dingshaocheng
@@ -35,7 +36,6 @@ public class CacheIpsInstrumentation extends AbstractMysqlInstrumentation {
     private static final String ENHANCE_CLASS_NON_REG_REP = "com.mysql.jdbc.NonRegisteringReplicationDriver";
     private static final String ENHANCE_CLASS = "com.mysql.jdbc.Driver";
     private static final String ENHANCE_CLASS_NON_REG = "com.mysql.jdbc.NonRegisteringDriver";
-    private static final String METHOD_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.mysql.v5.DriverConnectInterceptor";
 
 
     @Override
@@ -54,7 +54,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return METHOD_INTERCEPTOR_CLASS;
+                    return DRIVER_CONNECT_INTERCEPTOR;
                 }
 
                 @Override

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/define/PreparedStatementInstrumentation.java
Patch:
@@ -32,7 +32,7 @@
 public class PreparedStatementInstrumentation extends AbstractMysqlInstrumentation {
 
     private static final String PREPARED_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.ClientPreparedStatement";
-    private static final String PREPARED_STATEMENT_SERVERSIDE_CLASS_NAME = "com.mysql.cj.jdbc.ServerPreparedStatement";
+    private static final String PREPARED_STATEMENT_SERVER_SIDE_CLASS_NAME = "com.mysql.cj.jdbc.ServerPreparedStatement";
 
     private static final String SERVICE_METHOD_INTERCEPTOR =  Constants.PREPARED_STATEMENT_EXECUTE_METHODS_INTERCEPTOR;
 
@@ -62,6 +62,6 @@ public class PreparedStatementInstrumentation extends AbstractMysqlInstrumentati
     }
 
     @Override protected ClassMatch enhanceClass() {
-        return byMultiClassMatch(PREPARED_STATEMENT_CLASS_NAME,PREPARED_STATEMENT_SERVERSIDE_CLASS_NAME);
+        return byMultiClassMatch(PREPARED_STATEMENT_CLASS_NAME, PREPARED_STATEMENT_SERVER_SIDE_CLASS_NAME);
     }
 }

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/ConnectionCache.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.v5;
+package org.apache.skywalking.apm.plugin.jdbc.mysql;
 
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 import org.apache.skywalking.apm.util.StringUtil;
@@ -27,9 +27,9 @@
  * @author: dingshaocheng
  */
 public class ConnectionCache {
-    private static ConcurrentHashMap<String, ConnectionInfo> CONNECTIONS_MAP = new ConcurrentHashMap<String, ConnectionInfo>();
+    private static final ConcurrentHashMap<String, ConnectionInfo> CONNECTIONS_MAP = new ConcurrentHashMap<String, ConnectionInfo>();
 
-    private static String CONNECTION_SPLIT_STR = ",";
+    private static final String CONNECTION_SPLIT_STR = ",";
 
     public static ConnectionInfo get(String host, String port) {
         final String connStr = String.format("%s:%s", host, port);

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/Constants.java
Patch:
@@ -28,4 +28,5 @@ public class Constants {
     public static final String PREPARED_STATEMENT_EXECUTE_METHODS_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.PreparedStatementExecuteMethodsInterceptor";
     public static final String SET_CATALOG_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.SetCatalogInterceptor";
     public static final String STATEMENT_EXECUTE_METHODS_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
+    public static final String DRIVER_CONNECT_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.DriverConnectInterceptor";
 }

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/DriverConnectInterceptor.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.v5;
+package org.apache.skywalking.apm.plugin.jdbc.mysql;
 
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;

File: apm-sniffer/optional-plugins/lettuce-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/lettuce/v5/define/AsyncCommandInstrumentation.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
+import static org.apache.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
@@ -49,7 +50,8 @@ protected InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {
             new InstanceMethodsInterceptPoint() {
                 @Override
                 public ElementMatcher<MethodDescription> getMethodsMatcher() {
-                    return named("onComplete");
+                    return (named("onComplete").and(takesArgumentWithType(0,"java.util.function.Consumer")))
+                            .or(named("onComplete").and(takesArgumentWithType(0,"java.util.function.BiConsumer")));
                 }
 
                 @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java
Patch:
@@ -24,18 +24,17 @@
 public class Const {
     public static final int NONE = 0;
     public static final String ID_SPLIT = "_";
+    public static final String LINE = "-";
+    public static final String SPACE = " ";
     public static final String KEY_VALUE_SPLIT = ",";
     public static final String ARRAY_SPLIT = "|";
     public static final String ARRAY_PARSER_SPLIT = "\\|";
     public static final int USER_SERVICE_ID = 1;
     public static final int USER_INSTANCE_ID = 1;
     public static final int USER_ENDPOINT_ID = 1;
-    public static final String NONE_ENDPOINT_NAME = "None";
     public static final String USER_CODE = "User";
     public static final String SEGMENT_SPAN_SPLIT = "S";
     public static final String UNKNOWN = "Unknown";
-    public static final String EXCEPTION = "Exception";
     public static final String EMPTY_STRING = "";
-    public static final int SPAN_TYPE_VIRTUAL = 9;
     public static final String DOMAIN_OPERATION_NAME = "{domain}";
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Downsampling.java
Patch:
@@ -13,10 +13,9 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
-package org.apache.skywalking.oap.server.core.storage;
+package org.apache.skywalking.oap.server.core.analysis;
 
 /**
  * @author peng-yongsheng

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/DownsamplingConfigService.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.config;
 
 import java.util.List;
-import org.apache.skywalking.oap.server.core.storage.Downsampling;
+import org.apache.skywalking.oap.server.core.analysis.Downsampling;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/LogQueryService.java
Patch:
@@ -31,6 +31,7 @@
  * @author wusheng
  */
 public class LogQueryService implements Service {
+    
     private final ModuleManager moduleManager;
     private ILogQueryDAO logQueryDAO;
     private ServiceInventoryCache serviceInventoryCache;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/IModelSetter.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.storage.model;
 
-import org.apache.skywalking.oap.server.core.storage.Downsampling;
+import org.apache.skywalking.oap.server.core.analysis.Downsampling;
 import org.apache.skywalking.oap.server.core.storage.annotation.Storage;
 import org.apache.skywalking.oap.server.library.module.Service;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/Model.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import lombok.Getter;
 import org.apache.skywalking.oap.server.core.*;
-import org.apache.skywalking.oap.server.core.storage.Downsampling;
+import org.apache.skywalking.oap.server.core.analysis.Downsampling;
 import org.apache.skywalking.oap.server.core.storage.ttl.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.*;
 import lombok.Getter;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
-import org.apache.skywalking.oap.server.core.storage.Downsampling;
+import org.apache.skywalking.oap.server.core.analysis.Downsampling;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 import org.slf4j.*;
 

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java
Patch:
@@ -50,20 +50,20 @@ public IntValues getValues(final BatchMetricConditions metrics, final Duration d
         long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());
         long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());
 
-        return getMetricQueryService().getValues(metrics.getName(), metrics.getIds(), duration.getStep(), startTimeBucket, endTimeBucket);
+        return getMetricQueryService().getValues(metrics.getName(), metrics.getIds(), StepToDownsampling.transform(duration.getStep()), startTimeBucket, endTimeBucket);
     }
 
     public IntValues getLinearIntValues(final MetricCondition metrics, final Duration duration) throws IOException, ParseException {
         long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());
         long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());
 
-        return getMetricQueryService().getLinearIntValues(metrics.getName(), metrics.getId(), duration.getStep(), startTimeBucket, endTimeBucket);
+        return getMetricQueryService().getLinearIntValues(metrics.getName(), metrics.getId(), StepToDownsampling.transform(duration.getStep()), startTimeBucket, endTimeBucket);
     }
 
     public Thermodynamic getThermodynamic(final MetricCondition metrics, final Duration duration) throws IOException, ParseException {
         long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());
         long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());
 
-        return getMetricQueryService().getThermodynamic(metrics.getName(), metrics.getId(), duration.getStep(), startTimeBucket, endTimeBucket);
+        return getMetricQueryService().getThermodynamic(metrics.getName(), metrics.getId(), StepToDownsampling.transform(duration.getStep()), startTimeBucket, endTimeBucket);
     }
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TopologyQuery.java
Patch:
@@ -53,20 +53,20 @@ public Topology getGlobalTopology(final Duration duration) throws IOException, P
         long startTimestamp = DurationUtils.INSTANCE.startTimeToTimestamp(duration.getStep(), duration.getStart());
         long endTimestamp = DurationUtils.INSTANCE.endTimeToTimestamp(duration.getStep(), duration.getEnd());
 
-        return getQueryService().getGlobalTopology(duration.getStep(), startTimeBucket, endTimeBucket, startTimestamp, endTimestamp);
+        return getQueryService().getGlobalTopology(StepToDownsampling.transform(duration.getStep()), startTimeBucket, endTimeBucket, startTimestamp, endTimestamp);
     }
 
     public Topology getServiceTopology(final int serviceId, final Duration duration) throws IOException {
         long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());
         long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());
 
-        return getQueryService().getServiceTopology(duration.getStep(), startTimeBucket, endTimeBucket, serviceId);
+        return getQueryService().getServiceTopology(StepToDownsampling.transform(duration.getStep()), startTimeBucket, endTimeBucket, serviceId);
     }
 
     public Topology getEndpointTopology(final int endpointId, final Duration duration) throws IOException {
         long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());
         long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());
 
-        return getQueryService().getEndpointTopology(duration.getStep(), startTimeBucket, endTimeBucket, endpointId);
+        return getQueryService().getEndpointTopology(StepToDownsampling.transform(duration.getStep()), startTimeBucket, endTimeBucket, endpointId);
     }
 }

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -120,6 +120,8 @@ public class ComponentsDefine {
 
     public static final OfficialComponent SPRING_CLOUD_GATEWAY =  new OfficialComponent(61, "spring-cloud-gateway");
 
+    public static final OfficialComponent RESTEASY =  new OfficialComponent(62, "RESTEasy");
+
     private static ComponentsDefine INSTANCE = new ComponentsDefine();
 
     private String[] components;
@@ -176,6 +178,7 @@ public ComponentsDefine() {
         addComponent(ZOOKEEPER);
         addComponent(VERTX);
         addComponent(SPRING_CLOUD_GATEWAY);
+        addComponent(RESTEASY);
     }
 
     private void addComponent(OfficialComponent component) {

File: oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java
Patch:
@@ -69,7 +69,9 @@ private void loadConfig(ApplicationConfiguration configuration) throws ConfigFil
                                     properties.put(key, value);
                                     final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE
                                         .replacePlaceholders(value + "", properties));
-                                    properties.replace(key, replaceValue);
+                                    if (replaceValue != null) {
+                                        properties.replace(key, replaceValue);
+                                    }
                                     logger.info("The property with key: {}, value: {}, in {} provider", key, replaceValue.toString(), name);
                                 });
                             }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/endpointrelation/EndpointCallRelationDispatcher.java
Patch:
@@ -42,8 +42,7 @@ private void serverSide(EndpointRelation source) {
         metrics.setSourceEndpointId(source.getEndpointId());
         metrics.setDestEndpointId(source.getChildEndpointId());
         metrics.setComponentId(source.getComponentId());
-        metrics.setEntityId(source.getEntityId());
-
+        metrics.buildEntityId();
         MetricsStreamProcessor.getInstance().in(metrics);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/ComponentLibraryCatalogService.java
Patch:
@@ -98,7 +98,7 @@ private void init() throws InitialComponentCatalogException {
                     throw new InitialComponentCatalogException("Component name [" + name + "] in Component-Server-Mappings doesn't exist in component define. ");
                 }
                 if (!componentName2Id.containsKey(serverName)) {
-                    throw new InitialComponentCatalogException("Server component name [" + serverName + "] in Component-Server-Mappings doesn't exist in component define. ");
+                    throw new InitialComponentCatalogException("Server componentId name [" + serverName + "] in Component-Server-Mappings doesn't exist in component define. ");
                 }
 
                 componentId2ServerId.put(componentName2Id.get(name), componentName2Id.get(serverName));

File: oap-server/generate-tool/src/test/resources/expectedFiles/ServiceDispatcherExpected.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.service;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.worker.MetricsProcess;
+import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;
 import org.apache.skywalking.oap.server.core.analysis.metrics.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
@@ -47,6 +47,7 @@ private void doServiceAvg(Service source) {
         metrics.setTimeBucket(source.getTimeBucket());
         metrics.setEntityId(source.getEntityId());
         metrics.combine(source.getLatency(), 1);
-        MetricsProcess.INSTANCE.in(metrics);
+
+        MetricsStreamProcessor.getInstance().in(metrics);
     }
 }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProvider.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.oap.server.library.util.ResourceUtils;
 
 public class AlarmModuleProvider extends ModuleProvider {
+
     private NotifyHandler notifyHandler;
 
     @Override public String name() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java
Patch:
@@ -21,8 +21,9 @@
 import java.util.*;
 import lombok.*;
 import org.apache.skywalking.oap.server.core.Const;
+import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
-import org.apache.skywalking.oap.server.core.analysis.record.annotation.RecordType;
+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.*;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
@@ -34,9 +35,8 @@
  */
 @Getter
 @Setter
-@RecordType
 @ScopeDeclaration(id = ALARM, name = "Alarm")
-@StorageEntity(name = AlarmRecord.INDEX_NAME, builder = AlarmRecord.Builder.class, sourceScopeId = DefaultScopeDefine.ALARM)
+@Stream(name = AlarmRecord.INDEX_NAME, scopeId = DefaultScopeDefine.ALARM, storage = @Storage(builder = AlarmRecord.Builder.class), processor = RecordStreamProcessor.class)
 public class AlarmRecord extends Record {
 
     public static final String INDEX_NAME = "alarm_record";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmStandardPersistence.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.alarm;
 
 import java.util.List;
-import org.apache.skywalking.oap.server.core.analysis.worker.RecordProcess;
+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.library.util.TimeBucketUtils;
 import org.slf4j.*;
 
@@ -47,7 +47,7 @@ public class AlarmStandardPersistence implements AlarmCallback {
             record.setStartTime(message.getStartTime());
             record.setTimeBucket(TimeBucketUtils.INSTANCE.getSecondTimeBucket(message.getStartTime()));
 
-            RecordProcess.INSTANCE.in(record);
+            RecordStreamProcessor.getInstance().in(record);
         });
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/SourceDispatcher.java
Patch:
@@ -23,6 +23,6 @@
 /**
  * @author peng-yongsheng
  */
-public interface SourceDispatcher<S extends Source> {
-    void dispatch(S source);
+public interface SourceDispatcher<SOURCE extends Source> {
+    void dispatch(SOURCE source);
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/database/DatabaseStatementDispatcher.java
Patch:
@@ -19,13 +19,14 @@
 package org.apache.skywalking.oap.server.core.analysis.manual.database;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.worker.TopNProcess;
+import org.apache.skywalking.oap.server.core.analysis.worker.TopNStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DatabaseSlowStatement;
 
 /**
  * @author wusheng
  */
 public class DatabaseStatementDispatcher implements SourceDispatcher<DatabaseSlowStatement> {
+
     @Override public void dispatch(DatabaseSlowStatement source) {
         TopNDatabaseStatement statement = new TopNDatabaseStatement();
         statement.setId(source.getId());
@@ -35,6 +36,6 @@ public class DatabaseStatementDispatcher implements SourceDispatcher<DatabaseSlo
         statement.setTimeBucket(source.getTimeBucket());
         statement.setTraceId(source.getTraceId());
 
-        TopNProcess.INSTANCE.in(statement);
+        TopNStreamProcessor.getInstance().in(statement);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/HTTPAccessLogDispatcher.java
Patch:
@@ -19,13 +19,14 @@
 package org.apache.skywalking.oap.server.core.analysis.manual.log;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.worker.RecordProcess;
+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.HTTPAccessLog;
 
 /**
  * @author wusheng
  */
 public class HTTPAccessLogDispatcher implements SourceDispatcher<HTTPAccessLog> {
+
     @Override public void dispatch(HTTPAccessLog source) {
         HTTPAccessLogRecord record = new HTTPAccessLogRecord();
         record.setTimestamp(source.getTimestamp());
@@ -39,6 +40,6 @@ public class HTTPAccessLogDispatcher implements SourceDispatcher<HTTPAccessLog>
         record.setContentType(source.getContentType().value());
         record.setContent(source.getContent());
 
-        RecordProcess.INSTANCE.in(record);
+        RecordStreamProcessor.getInstance().in(record);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.manual.segment;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.worker.RecordProcess;
+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.Segment;
 
 /**
@@ -43,6 +43,6 @@ public class SegmentDispatcher implements SourceDispatcher<Segment> {
         segment.setTimeBucket(source.getTimeBucket());
         segment.setVersion(source.getVersion());
 
-        RecordProcess.INSTANCE.in(segment);
+        RecordStreamProcessor.getInstance().in(segment);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -22,8 +22,9 @@
 import lombok.*;
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.Const;
+import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
-import org.apache.skywalking.oap.server.core.analysis.record.annotation.RecordType;
+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
@@ -32,8 +33,7 @@
 /**
  * @author peng-yongsheng
  */
-@RecordType
-@StorageEntity(name = SegmentRecord.INDEX_NAME, builder = SegmentRecord.Builder.class, sourceScopeId = DefaultScopeDefine.SEGMENT)
+@Stream(name = SegmentRecord.INDEX_NAME, scopeId = DefaultScopeDefine.SEGMENT, storage = @Storage(builder = SegmentRecord.Builder.class), processor = RecordStreamProcessor.class)
 public class SegmentRecord extends Record {
 
     public static final String INDEX_NAME = "segment";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimer.java
Patch:
@@ -82,9 +82,9 @@ private void extractDataAndSave(IBatchDAO batchDAO) {
             List batchAllCollection = new LinkedList();
             try {
                 List<PersistenceWorker> persistenceWorkers = new ArrayList<>();
-                persistenceWorkers.addAll(MetricsProcess.INSTANCE.getPersistentWorkers());
-                persistenceWorkers.addAll(RecordProcess.INSTANCE.getPersistentWorkers());
-                persistenceWorkers.addAll(TopNProcess.INSTANCE.getPersistentWorkers());
+                persistenceWorkers.addAll(MetricsStreamProcessor.getInstance().getPersistentWorkers());
+                persistenceWorkers.addAll(RecordStreamProcessor.getInstance().getPersistentWorkers());
+                persistenceWorkers.addAll(TopNStreamProcessor.getInstance().getPersistentWorkers());
 
                 persistenceWorkers.forEach(worker -> {
                     if (logger.isDebugEnabled()) {

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientRealClient.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.remote.client;
 
 import java.util.concurrent.TimeUnit;
-import org.apache.skywalking.oap.server.core.remote.annotation.StreamDataClassGetter;
+import org.apache.skywalking.oap.server.core.remote.define.StreamDataMappingGetter;
 import org.apache.skywalking.oap.server.core.remote.data.StreamData;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.worker.AbstractWorker;
@@ -53,7 +53,7 @@ public static void main(String[] args) throws InterruptedException {
         moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);
         telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);
 
-        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, new TestClassGetter(), address, 1, 10));
+        GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, new TestMappingGetter(), address, 1, 10));
         remoteClient.connect();
 
         for (int i = 0; i < 10000; i++) {
@@ -64,7 +64,7 @@ public static void main(String[] args) throws InterruptedException {
         TimeUnit.MINUTES.sleep(10);
     }
 
-    public static class TestClassGetter implements StreamDataClassGetter {
+    public static class TestMappingGetter implements StreamDataMappingGetter {
 
         @Override public int findIdByClass(Class streamDataClass) {
             return 1;

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientRealServer.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.TimeUnit;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.remote.RemoteServiceHandler;
-import org.apache.skywalking.oap.server.core.remote.annotation.StreamDataClassGetter;
+import org.apache.skywalking.oap.server.core.remote.define.StreamDataMappingGetter;
 import org.apache.skywalking.oap.server.library.server.ServerException;
 import org.apache.skywalking.oap.server.library.server.grpc.GRPCServer;
 import org.apache.skywalking.oap.server.testing.module.*;
@@ -36,7 +36,7 @@ public static void main(String[] args) throws ServerException, InterruptedExcept
         ModuleDefineTesting moduleDefine = new ModuleDefineTesting();
         moduleManager.put(CoreModule.NAME, moduleDefine);
 
-        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, new GRPCRemoteClientRealClient.TestClassGetter());
+        moduleDefine.provider().registerServiceImplementation(StreamDataMappingGetter.class, new GRPCRemoteClientRealClient.TestMappingGetter());
 
         GRPCServer server = new GRPCServer("localhost", 10000);
         server.initialize();

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/RemoteClientManagerTestCase.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.*;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.cluster.*;
-import org.apache.skywalking.oap.server.core.remote.annotation.StreamDataClassGetter;
+import org.apache.skywalking.oap.server.core.remote.define.StreamDataMappingGetter;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
 import org.apache.skywalking.oap.server.telemetry.api.*;
 import org.apache.skywalking.oap.server.testing.module.*;
@@ -46,8 +46,8 @@ public void refresh() {
         ClusterNodesQuery clusterNodesQuery = mock(ClusterNodesQuery.class);
         clusterModuleDefine.provider().registerServiceImplementation(ClusterNodesQuery.class, clusterNodesQuery);
 
-        StreamDataClassGetter streamDataClassGetter = mock(StreamDataClassGetter.class);
-        coreModuleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, streamDataClassGetter);
+        StreamDataMappingGetter streamDataMappingGetter = mock(StreamDataMappingGetter.class);
+        coreModuleDefine.provider().registerServiceImplementation(StreamDataMappingGetter.class, streamDataMappingGetter);
 
         MetricsCreator metricsCreator = mock(MetricsCreator.class);
         when(metricsCreator.createGauge(any(), any(), any(), any())).thenReturn(new GaugeMetrics() {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/EndpointInventoryCacheEsDAO.java
Patch:
@@ -46,7 +46,7 @@ public EndpointInventoryCacheEsDAO(ElasticSearchClient client) {
     @Override public int getEndpointId(int serviceId, String endpointName, int detectPoint) {
         try {
             String id = EndpointInventory.buildId(serviceId, endpointName, detectPoint);
-            GetResponse response = getClient().get(EndpointInventory.MODEL_NAME, id);
+            GetResponse response = getClient().get(EndpointInventory.INDEX_NAME, id);
             if (response.isExists()) {
                 return (int)response.getSource().getOrDefault(RegisterSource.SEQUENCE, 0);
             } else {
@@ -64,7 +64,7 @@ public EndpointInventoryCacheEsDAO(ElasticSearchClient client) {
             searchSourceBuilder.query(QueryBuilders.termQuery(EndpointInventory.SEQUENCE, endpointId));
             searchSourceBuilder.size(1);
 
-            SearchResponse response = getClient().search(EndpointInventory.MODEL_NAME, searchSourceBuilder);
+            SearchResponse response = getClient().search(EndpointInventory.INDEX_NAME, searchSourceBuilder);
             if (response.getHits().totalHits == 1) {
                 SearchHit searchHit = response.getHits().getAt(0);
                 return builder.map2Data(searchHit.getSourceAsMap());

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/NetworkAddressInventoryCacheEsDAO.java
Patch:
@@ -46,7 +46,7 @@ public NetworkAddressInventoryCacheEsDAO(ElasticSearchClient client) {
     @Override public int getAddressId(String networkAddress) {
         try {
             String id = NetworkAddressInventory.buildId(networkAddress);
-            GetResponse response = getClient().get(NetworkAddressInventory.MODEL_NAME, id);
+            GetResponse response = getClient().get(NetworkAddressInventory.INDEX_NAME, id);
             if (response.isExists()) {
                 return (int)response.getSource().getOrDefault(NetworkAddressInventory.SEQUENCE, 0);
             } else {
@@ -64,7 +64,7 @@ public NetworkAddressInventoryCacheEsDAO(ElasticSearchClient client) {
             searchSourceBuilder.query(QueryBuilders.termQuery(NetworkAddressInventory.SEQUENCE, addressId));
             searchSourceBuilder.size(1);
 
-            SearchResponse response = getClient().search(NetworkAddressInventory.MODEL_NAME, searchSourceBuilder);
+            SearchResponse response = getClient().search(NetworkAddressInventory.INDEX_NAME, searchSourceBuilder);
             if (response.getHits().totalHits == 1) {
                 SearchHit searchHit = response.getHits().getAt(0);
                 return builder.map2Data(searchHit.getSourceAsMap());

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInstanceInventoryCacheDAO.java
Patch:
@@ -49,7 +49,7 @@ public ServiceInstanceInventoryCacheDAO(ElasticSearchClient client) {
             searchSourceBuilder.query(QueryBuilders.termQuery(ServiceInstanceInventory.SEQUENCE, serviceInstanceId));
             searchSourceBuilder.size(1);
 
-            SearchResponse response = getClient().search(ServiceInstanceInventory.MODEL_NAME, searchSourceBuilder);
+            SearchResponse response = getClient().search(ServiceInstanceInventory.INDEX_NAME, searchSourceBuilder);
             if (response.getHits().totalHits == 1) {
                 SearchHit searchHit = response.getHits().getAt(0);
                 return builder.map2Data(searchHit.getSourceAsMap());
@@ -74,7 +74,7 @@ public ServiceInstanceInventoryCacheDAO(ElasticSearchClient client) {
 
     private int get(String id) {
         try {
-            GetResponse response = getClient().get(ServiceInstanceInventory.MODEL_NAME, id);
+            GetResponse response = getClient().get(ServiceInstanceInventory.INDEX_NAME, id);
             if (response.isExists()) {
                 return (int)response.getSource().getOrDefault(RegisterSource.SEQUENCE, 0);
             } else {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/ServiceInventoryCacheEsDAO.java
Patch:
@@ -57,7 +57,7 @@ public ServiceInventoryCacheEsDAO(ElasticSearchClient client) {
 
     private int get(String id) {
         try {
-            GetResponse response = getClient().get(ServiceInventory.MODEL_NAME, id);
+            GetResponse response = getClient().get(ServiceInventory.INDEX_NAME, id);
             if (response.isExists()) {
                 return (int)response.getSource().getOrDefault(RegisterSource.SEQUENCE, 0);
             } else {
@@ -75,7 +75,7 @@ private int get(String id) {
             searchSourceBuilder.query(QueryBuilders.termQuery(ServiceInventory.SEQUENCE, serviceId));
             searchSourceBuilder.size(1);
 
-            SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, searchSourceBuilder);
+            SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, searchSourceBuilder);
             if (response.getHits().totalHits == 1) {
                 SearchHit searchHit = response.getHits().getAt(0);
                 return builder.map2Data(searchHit.getSourceAsMap());
@@ -101,7 +101,7 @@ private int get(String id) {
             searchSourceBuilder.query(boolQuery);
             searchSourceBuilder.size(50);
 
-            SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, searchSourceBuilder);
+            SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, searchSourceBuilder);
 
             for (SearchHit searchHit : response.getHits().getHits()) {
                 serviceInventories.add(this.builder.map2Data(searchHit.getSourceAsMap()));

File: oap-server/server-storage-plugin/storage-jaeger-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jaeger/JaegerSpanRecord.java
Patch:
@@ -22,15 +22,15 @@
 import lombok.*;
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.Const;
+import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
-import org.apache.skywalking.oap.server.core.analysis.record.annotation.RecordType;
+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
 
-@RecordType
-@StorageEntity(name = JaegerSpanRecord.INDEX_NAME, builder = JaegerSpanRecord.Builder.class, sourceScopeId = DefaultScopeDefine.JAEGER_SPAN)
+@Stream(name = JaegerSpanRecord.INDEX_NAME, scopeId = DefaultScopeDefine.JAEGER_SPAN, storage = @Storage(builder = JaegerSpanRecord.Builder.class), processor = RecordStreamProcessor.class)
 public class JaegerSpanRecord extends Record {
     public static final String INDEX_NAME = "jaeger_span";
     public static final String TRACE_ID = "trace_id";

File: oap-server/server-storage-plugin/storage-jaeger-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jaeger/JaegerSpanRecordDispatcher.java
Patch:
@@ -19,14 +19,15 @@
 package org.apache.skywalking.oap.server.storage.plugin.jaeger;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.worker.RecordProcess;
+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 
 /**
  * Dispatch for Zipkin native mode spans.
  *
  * @author wusheng
  */
 public class JaegerSpanRecordDispatcher implements SourceDispatcher<JaegerSpan> {
+
     @Override public void dispatch(JaegerSpan source) {
         JaegerSpanRecord segment = new JaegerSpanRecord();
         segment.setTraceId(source.getTraceId());
@@ -43,6 +44,6 @@ public class JaegerSpanRecordDispatcher implements SourceDispatcher<JaegerSpan>
         segment.setTimeBucket(source.getTimeBucket());
         segment.setEncode(source.getEncode());
 
-        RecordProcess.INSTANCE.in(segment);
+        RecordStreamProcessor.getInstance().in(segment);
     }
 }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2EndpointInventoryCacheDAO.java
Patch:
@@ -37,12 +37,12 @@ public H2EndpointInventoryCacheDAO(JDBCHikariCPClient h2Client) {
 
     @Override public int getEndpointId(int serviceId, String endpointName, int detectPoint) {
         String id = EndpointInventory.buildId(serviceId, endpointName, detectPoint);
-        return getEntityIDByID(h2Client, EndpointInventory.SEQUENCE, EndpointInventory.MODEL_NAME, id);
+        return getEntityIDByID(h2Client, EndpointInventory.SEQUENCE, EndpointInventory.INDEX_NAME, id);
     }
 
     @Override public EndpointInventory get(int endpointId) {
         try {
-            return (EndpointInventory)getByColumn(h2Client, EndpointInventory.MODEL_NAME, EndpointInventory.SEQUENCE, endpointId, new EndpointInventory.Builder());
+            return (EndpointInventory)getByColumn(h2Client, EndpointInventory.INDEX_NAME, EndpointInventory.SEQUENCE, endpointId, new EndpointInventory.Builder());
         } catch (IOException e) {
             logger.error(e.getMessage(), e);
             return null;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2NetworkAddressInventoryCacheDAO.java
Patch:
@@ -38,12 +38,12 @@ public H2NetworkAddressInventoryCacheDAO(JDBCHikariCPClient h2Client) {
 
     @Override public int getAddressId(String networkAddress) {
         String id = NetworkAddressInventory.buildId(networkAddress);
-        return getEntityIDByID(h2Client, NetworkAddressInventory.SEQUENCE, NetworkAddressInventory.MODEL_NAME, id);
+        return getEntityIDByID(h2Client, NetworkAddressInventory.SEQUENCE, NetworkAddressInventory.INDEX_NAME, id);
     }
 
     @Override public NetworkAddressInventory get(int addressId) {
         try {
-            return (NetworkAddressInventory)getByColumn(h2Client, NetworkAddressInventory.MODEL_NAME, NetworkAddressInventory.SEQUENCE, addressId, new NetworkAddressInventory.Builder());
+            return (NetworkAddressInventory)getByColumn(h2Client, NetworkAddressInventory.INDEX_NAME, NetworkAddressInventory.SEQUENCE, addressId, new NetworkAddressInventory.Builder());
         } catch (IOException e) {
             logger.error(e.getMessage(), e);
             return null;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ServiceInstanceInventoryCacheDAO.java
Patch:
@@ -38,7 +38,7 @@ public H2ServiceInstanceInventoryCacheDAO(JDBCHikariCPClient h2Client) {
 
     @Override public ServiceInstanceInventory get(int serviceInstanceId) {
         try {
-            return (ServiceInstanceInventory)getByColumn(h2Client, ServiceInstanceInventory.MODEL_NAME, ServiceInstanceInventory.SEQUENCE, serviceInstanceId, new ServiceInstanceInventory.Builder());
+            return (ServiceInstanceInventory)getByColumn(h2Client, ServiceInstanceInventory.INDEX_NAME, ServiceInstanceInventory.SEQUENCE, serviceInstanceId, new ServiceInstanceInventory.Builder());
         } catch (IOException e) {
             logger.error(e.getMessage(), e);
             return null;
@@ -56,6 +56,6 @@ public H2ServiceInstanceInventoryCacheDAO(JDBCHikariCPClient h2Client) {
     }
 
     private int getByID(String id) {
-        return getEntityIDByID(h2Client, ServiceInstanceInventory.SEQUENCE, ServiceInstanceInventory.MODEL_NAME, id);
+        return getEntityIDByID(h2Client, ServiceInstanceInventory.SEQUENCE, ServiceInstanceInventory.INDEX_NAME, id);
     }
 }

File: oap-server/server-storage-plugin/storage-zipkin-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/zipkin/ZipkinSpanRecord.java
Patch:
@@ -22,15 +22,15 @@
 import lombok.*;
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.Const;
+import org.apache.skywalking.oap.server.core.analysis.Stream;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
-import org.apache.skywalking.oap.server.core.analysis.record.annotation.RecordType;
+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
 
-@RecordType
-@StorageEntity(name = ZipkinSpanRecord.INDEX_NAME, builder = ZipkinSpanRecord.Builder.class, sourceScopeId = DefaultScopeDefine.ZIPKIN_SPAN)
+@Stream(name = ZipkinSpanRecord.INDEX_NAME, scopeId = DefaultScopeDefine.ZIPKIN_SPAN, storage = @Storage(builder = ZipkinSpanRecord.Builder.class), processor = RecordStreamProcessor.class)
 public class ZipkinSpanRecord extends Record {
     public static final String INDEX_NAME = "zipkin_span";
     public static final String TRACE_ID = "trace_id";

File: oap-server/server-storage-plugin/storage-zipkin-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/zipkin/ZipkinSpanRecordDispatcher.java
Patch:
@@ -19,14 +19,15 @@
 package org.apache.skywalking.oap.server.storage.plugin.zipkin;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.worker.RecordProcess;
+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;
 
 /**
  * Dispatch for Zipkin native mode spans.
  *
  * @author wusheng
  */
 public class ZipkinSpanRecordDispatcher implements SourceDispatcher<ZipkinSpan> {
+
     @Override public void dispatch(ZipkinSpan source) {
         ZipkinSpanRecord segment = new ZipkinSpanRecord();
         segment.setTraceId(source.getTraceId());
@@ -43,6 +44,6 @@ public class ZipkinSpanRecordDispatcher implements SourceDispatcher<ZipkinSpan>
         segment.setTimeBucket(source.getTimeBucket());
         segment.setEncode(source.getEncode());
 
-        RecordProcess.INSTANCE.in(segment);
+        RecordStreamProcessor.getInstance().in(segment);
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/JVMService.java
Patch:
@@ -107,7 +107,7 @@ public void run() {
                 jvmBuilder.setTime(currentTimeMillis);
                 jvmBuilder.setCpu(CPUProvider.INSTANCE.getCpuMetric());
                 jvmBuilder.addAllMemory(MemoryProvider.INSTANCE.getMemoryMetricList());
-                jvmBuilder.addAllMemoryPool(MemoryPoolProvider.INSTANCE.getMemoryPoolMetricList());
+                jvmBuilder.addAllMemoryPool(MemoryPoolProvider.INSTANCE.getMemoryPoolMetricsList());
                 jvmBuilder.addAllGc(GCProvider.INSTANCE.getGCList());
 
                 JVMMetric jvmMetric = jvmBuilder.build();

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/cpu/NoSupportedCPUAccessor.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * @author wusheng
  */
-public class NoSupportedCPUAccessor extends CPUMetricAccessor {
+public class NoSupportedCPUAccessor extends CPUMetricsAccessor {
     public NoSupportedCPUAccessor(int cpuCoreNum) {
         super(cpuCoreNum);
     }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/cpu/SunCpuAccessor.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * @author wusheng
  */
-public class SunCpuAccessor extends CPUMetricAccessor {
+public class SunCpuAccessor extends CPUMetricsAccessor {
     private final OperatingSystemMXBean osMBean;
 
     public SunCpuAccessor(int cpuCoreNum) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/memorypool/UnknownMemoryPool.java
Patch:
@@ -26,9 +26,9 @@
 /**
  * @author wusheng
  */
-public class UnknownMemoryPool implements MemoryPoolMetricAccessor {
+public class UnknownMemoryPool implements MemoryPoolMetricsAccessor {
     @Override
-    public List<MemoryPool> getMemoryPoolMetricList() {
+    public List<MemoryPool> getMemoryPoolMetricsList() {
         List<MemoryPool> poolList = new LinkedList<MemoryPool>();
         poolList.add(MemoryPool.newBuilder().setType(PoolType.CODE_CACHE_USAGE).build());
         poolList.add(MemoryPool.newBuilder().setType(PoolType.NEWGEN_USAGE).build());

File: oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/MetricFormatter.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.exporter.provider;
 
 import lombok.*;
-import org.apache.skywalking.oap.server.core.analysis.indicator.*;
+import org.apache.skywalking.oap.server.core.analysis.metrics.*;
 import org.apache.skywalking.oap.server.core.cache.*;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 
@@ -32,7 +32,7 @@ public class MetricFormatter {
     private ServiceInstanceInventoryCache serviceInstanceInventoryCache;
     private EndpointInventoryCache endpointInventoryCache;
 
-    protected String getEntityName(IndicatorMetaInfo meta) {
+    protected String getEntityName(MetricsMetaInfo meta) {
         int scope = meta.getScope();
         if (DefaultScopeDefine.inServiceCatalog(scope)) {
             return serviceInventoryCache.get(scope).getName();

File: oap-server/exporter/src/test/java/org/apache/skywalking/oap/server/exporter/provider/grpc/MockDoubleValueMetrics.java
Patch:
@@ -18,12 +18,12 @@
 
 package org.apache.skywalking.oap.server.exporter.provider.grpc;
 
-import org.apache.skywalking.oap.server.core.analysis.indicator.DoubleValueHolder;
+import org.apache.skywalking.oap.server.core.analysis.metrics.DoubleValueHolder;
 
 /**
  * Created by dengming, 2019.04.20
  */
-public class MockDoubleValueIndicator extends MockIndicator implements DoubleValueHolder {
+public class MockDoubleValueMetrics extends MockMetrics implements DoubleValueHolder {
     @Override
     public double getValue() {
         return 2.3;

File: oap-server/exporter/src/test/java/org/apache/skywalking/oap/server/exporter/provider/grpc/MockIntValueMetrics.java
Patch:
@@ -18,12 +18,12 @@
 
 package org.apache.skywalking.oap.server.exporter.provider.grpc;
 
-import org.apache.skywalking.oap.server.core.analysis.indicator.IntValueHolder;
+import org.apache.skywalking.oap.server.core.analysis.metrics.IntValueHolder;
 
 /**
  * Created by dengming, 2019.04.20
  */
-public class MockIntValueIndicator extends MockIndicator implements IntValueHolder {
+public class MockIntValueMetrics extends MockMetrics implements IntValueHolder {
     @Override
     public int getValue() {
         return 12;

File: oap-server/exporter/src/test/java/org/apache/skywalking/oap/server/exporter/provider/grpc/MockLongValueMetrics.java
Patch:
@@ -18,12 +18,12 @@
 
 package org.apache.skywalking.oap.server.exporter.provider.grpc;
 
-import org.apache.skywalking.oap.server.core.analysis.indicator.LongValueHolder;
+import org.apache.skywalking.oap.server.core.analysis.metrics.LongValueHolder;
 
 /**
  * Created by dengming, 2019.04.20
  */
-public class MockLongValueIndicator extends MockIndicator implements LongValueHolder {
+public class MockLongValueMetrics extends MockMetrics implements LongValueHolder {
     @Override
     public long getValue() {
         return 1234567891234563312L;

File: oap-server/generate-tool/src/main/java/org/apache/skywalking/oal/tool/Main.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String[] args) throws IOException, TemplateException {
             "org", "apache", "skywalking", "oap", "server", "core", "analysis");
         String metaFilePath = StringUtil.join(File.separatorChar, modulePath, "src", "main", "resources", "generator-scope-meta.yml");
 
-        Indicators.init();
+        MetricsHolder.init();
 
         File scriptFile = new File(scriptFilePath);
         if (!scriptFile.exists()) {

File: oap-server/generate-tool/src/main/java/org/apache/skywalking/oal/tool/output/DispatcherContext.java
Patch:
@@ -27,5 +27,5 @@
 public class DispatcherContext {
     private String source;
     private String packageName;
-    private List<AnalysisResult> indicators = new ArrayList<>();
+    private List<AnalysisResult> metrics = new ArrayList<>();
 }

File: oap-server/generate-tool/src/main/java/org/apache/skywalking/oal/tool/parser/AnalysisResult.java
Patch:
@@ -26,7 +26,7 @@
 public class AnalysisResult {
     private String varName;
 
-    private String metricName;
+    private String metricsName;
 
     private String tableName;
 
@@ -40,7 +40,7 @@ public class AnalysisResult {
 
     private String aggregationFunctionName;
 
-    private String indicatorClassName;
+    private String metricsClassName;
 
     private EntryMethod entryMethod;
 

File: oap-server/generate-tool/src/main/java/org/apache/skywalking/oal/tool/parser/OALScripts.java
Patch:
@@ -23,11 +23,11 @@
 
 @Getter
 public class OALScripts {
-    private List<AnalysisResult> indicatorStmts;
+    private List<AnalysisResult> metricsStmts;
     private DisableCollection disableCollection;
 
     public OALScripts() {
-        indicatorStmts = new LinkedList<>();
+        metricsStmts = new LinkedList<>();
         disableCollection = new DisableCollection();
     }
 }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProvider.java
Patch:
@@ -50,7 +50,7 @@ public class AlarmModuleProvider extends ModuleProvider {
         Rules rules = reader.readRules();
         notifyHandler = new NotifyHandler(rules);
         notifyHandler.init(new AlarmStandardPersistence());
-        this.registerServiceImplementation(IndicatorNotify.class, notifyHandler);
+        this.registerServiceImplementation(MetricsNotify.class, notifyHandler);
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java
Patch:
@@ -31,7 +31,7 @@
 public class AlarmRule {
     private String alarmRuleName;
 
-    private String indicatorName;
+    private String metricsName;
     private ArrayList includeNames;
     private String threshold;
     private String op;

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/MetricsValueType.java
Patch:
@@ -18,6 +18,6 @@
 
 package org.apache.skywalking.oap.server.core.alarm.provider;
 
-public enum IndicatorValueType {
+public enum MetricsValueType {
     LONG, INT, DOUBLE
 }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/Threshold.java
Patch:
@@ -50,7 +50,7 @@ public long getLongThreshold() {
         return longThreshold;
     }
 
-    public void setType(IndicatorValueType type) {
+    public void setType(MetricsValueType type) {
         try {
             switch (type) {
                 case INT:
@@ -64,7 +64,7 @@ public void setType(IndicatorValueType type) {
                     break;
             }
         } catch (NumberFormatException e) {
-            logger.warn("Alarm rule {} threshold doesn't match the indicator type, expected type: {}", alarmRuleName, type);
+            logger.warn("Alarm rule {} threshold doesn't match the metrics type, expected type: {}", alarmRuleName, type);
         }
     }
 }

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatterTest.java
Patch:
@@ -35,7 +35,7 @@ public void testStringFormatWithNoArg() {
                 return null;
             }
 
-            @Override public String getIndicatorName() {
+            @Override public String getMetricsName() {
                 return null;
             }
 
@@ -64,7 +64,7 @@ public void testStringFormatWithArg() {
                 return "service";
             }
 
-            @Override public String getIndicatorName() {
+            @Override public String getMetricsName() {
                 return null;
             }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.io.IOException;
 import org.apache.skywalking.oap.server.core.analysis.DisableRegister;
-import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorTypeListener;
+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsTypeListener;
 import org.apache.skywalking.oap.server.core.analysis.record.annotation.RecordTypeListener;
 import org.apache.skywalking.oap.server.core.analysis.topn.annotation.TopNTypeListener;
 import org.apache.skywalking.oap.server.core.annotation.AnnotationScan;
@@ -153,7 +153,7 @@ public CoreModuleProvider() {
 
         annotationScan.registerListener(storageAnnotationListener);
         annotationScan.registerListener(streamAnnotationListener);
-        annotationScan.registerListener(new IndicatorTypeListener(getManager()));
+        annotationScan.registerListener(new MetricsTypeListener(getManager()));
         annotationScan.registerListener(new InventoryTypeListener(getManager()));
         annotationScan.registerListener(new RecordTypeListener(getManager()));
         annotationScan.registerListener(new TopNTypeListener(getManager()));

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmModule.java
Patch:
@@ -35,6 +35,6 @@ public AlarmModule() {
     }
 
     @Override public Class[] services() {
-        return new Class[] {IndicatorNotify.class};
+        return new Class[] {MetricsNotify.class};
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/EndpointMetaInAlarm.java
Patch:
@@ -26,7 +26,7 @@
 @Getter(AccessLevel.PUBLIC)
 @Setter(AccessLevel.PUBLIC)
 public class EndpointMetaInAlarm extends MetaInAlarm {
-    private String indicatorName;
+    private String metricsName;
 
     private int id;
     private String name;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/MetaInAlarm.java
Patch:
@@ -25,7 +25,7 @@ public abstract class MetaInAlarm {
 
     public abstract String getName();
 
-    public abstract String getIndicatorName();
+    public abstract String getMetricsName();
 
     /**
      * In most scopes, there is only id0, as primary id. Such as Service, Endpoint. But in relation, the ID includes

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleValueHolder.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator;
+package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 /**
  * DoubleValueHolder always holds a value of double.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/IntKeyLongValue.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator;
+package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import java.util.Objects;
 import lombok.*;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/IntKeyLongValueArray.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator;
+package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 import java.util.ArrayList;
 import org.apache.skywalking.oap.server.core.Const;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/IntValueHolder.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator;
+package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 /**
  * IntValueHolder always holds a value of int.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongValueHolder.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator;
+package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 /**
  * LongValueHolder always holds a value of long.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/WithMetadata.java
Patch:
@@ -16,13 +16,13 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator;
+package org.apache.skywalking.oap.server.core.analysis.metrics;
 
 /**
- * Indicator, which implement this interface, could provide {@link IndicatorMetaInfo}.
+ * Metrics, which implement this interface, could provide {@link MetricsMetaInfo}.
  *
  * @author wusheng
  */
 public interface WithMetadata {
-    IndicatorMetaInfo getMeta();
+    MetricsMetaInfo getMeta();
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/Arg.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/ConstOne.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;
 
 import java.lang.annotation.*;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/Entrance.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;
 
 import java.lang.annotation.*;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/Expression.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/ExpressionArg0.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/ExpressionArg1.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/MetricsFunction.java
Patch:
@@ -16,17 +16,17 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;
 
 import java.lang.annotation.*;
 
 /**
- * IndicatorFunction annotation represent this a function in OAL script.
+ * MetricsFunction annotation represent this a function in OAL script.
  *
  * @author wusheng
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface IndicatorFunction {
+public @interface MetricsFunction {
     String functionName();
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/MetricsType.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;
 
 import java.lang.annotation.*;
 
@@ -25,5 +25,5 @@
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface IndicatorType {
+public @interface MetricsType {
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/SourceFrom.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;
 
 import java.lang.annotation.*;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/BinaryMatchExpression.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.expression;
+package org.apache.skywalking.oap.server.core.analysis.metrics.expression;
 
 /**
  * BinaryMatchExpression accepts two calculate factors,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/EqualMatch.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.expression;
+package org.apache.skywalking.oap.server.core.analysis.metrics.expression;
 
 /**
  *

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/GreaterEqualMatch.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.expression;
+package org.apache.skywalking.oap.server.core.analysis.metrics.expression;
 
 /**
  * @author peng-yongsheng

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/GreaterMatch.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.expression;
+package org.apache.skywalking.oap.server.core.analysis.metrics.expression;
 
 /**
  * @author peng-yongsheng

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/LessEqualMatch.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.expression;
+package org.apache.skywalking.oap.server.core.analysis.metrics.expression;
 
 /**
  * @author peng-yongsheng

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/LessMatch.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.analysis.indicator.expression;
+package org.apache.skywalking.oap.server.core.analysis.metrics.expression;
 
 /**
  * @author peng-yongsheng

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/exporter/MetricValuesExportService.java
Patch:
@@ -18,14 +18,14 @@
 
 package org.apache.skywalking.oap.server.core.exporter;
 
-import org.apache.skywalking.oap.server.core.analysis.indicator.*;
+import org.apache.skywalking.oap.server.core.analysis.metrics.*;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 /**
- * Export the metric value from indicators through this service, if provider exists.
+ * Export the metrics value from metrics through this service, if provider exists.
  *
  * @author wusheng
  */
 public interface MetricValuesExportService extends Service {
-    void export(IndicatorMetaInfo meta, Indicator indicator);
+    void export(MetricsMetaInfo meta, Metrics metrics);
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/RegisterRemoteWorker.java
Patch:
@@ -42,9 +42,9 @@ public class RegisterRemoteWorker extends AbstractWorker<RegisterSource> {
         this.nextWorker = nextWorker;
     }
 
-    @Override public final void in(RegisterSource indicator) {
+    @Override public final void in(RegisterSource registerSource) {
         try {
-            remoteSender.send(nextWorker.getWorkerId(), indicator, Selector.ForeverFirst);
+            remoteSender.send(nextWorker.getWorkerId(), registerSource, Selector.ForeverFirst);
         } catch (Throwable e) {
             logger.error(e.getMessage(), e);
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/client/RemoteClientManager.java
Patch:
@@ -44,7 +44,7 @@ public class RemoteClientManager implements Service {
     private final List<RemoteClient> clientsA;
     private final List<RemoteClient> clientsB;
     private volatile List<RemoteClient> usingClients;
-    private GaugeMetric gauge;
+    private GaugeMetrics gauge;
 
     public RemoteClientManager(ModuleDefineHolder moduleDefineHolder) {
         this.moduleDefineHolder = moduleDefineHolder;
@@ -63,9 +63,9 @@ public void start() {
      */
     void refresh() {
         if (gauge == null) {
-            gauge = moduleDefineHolder.find(TelemetryModule.NAME).provider().getService(MetricCreator.class)
+            gauge = moduleDefineHolder.find(TelemetryModule.NAME).provider().getService(MetricsCreator.class)
                 .createGauge("cluster_size", "Cluster size of current oap node",
-                    MetricTag.EMPTY_KEY, MetricTag.EMPTY_VALUE);
+                    MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);
         }
         try {
             if (Objects.isNull(clusterNodesQuery)) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/client/SelfRemoteClient.java
Patch:
@@ -31,15 +31,15 @@
 public class SelfRemoteClient implements RemoteClient {
 
     private final Address address;
-    private CounterMetric remoteOutCounter;
+    private CounterMetrics remoteOutCounter;
     private final IWorkerInstanceGetter workerInstanceGetter;
 
     public SelfRemoteClient(ModuleDefineHolder moduleDefineHolder, Address address) {
         this.address = address;
         workerInstanceGetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IWorkerInstanceGetter.class);
-        remoteOutCounter = moduleDefineHolder.find(TelemetryModule.NAME).provider().getService(MetricCreator.class)
+        remoteOutCounter = moduleDefineHolder.find(TelemetryModule.NAME).provider().getService(MetricsCreator.class)
             .createCounter("remote_out_count", "The number(client side) of inside remote inside aggregate rpc.",
-                new MetricTag.Keys("dest", "self"), new MetricTag.Values(address.toString(), "Y"));
+                new MetricsTag.Keys("dest", "self"), new MetricsTag.Values(address.toString(), "Y"));
     }
 
     @Override public Address getAddress() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -32,7 +32,7 @@ public class DefaultScopeDefine {
     private static final Map<Integer, String> ID_2_NAME = new HashMap<>();
 
     /**
-     * All metric IDs in [0, 10,000) are reserved in Apache SkyWalking.
+     * All metrics IDs in [0, 10,000) are reserved in Apache SkyWalking.
      *
      * If you want to extend the scope, recommend to start with 10,000.
      */
@@ -64,7 +64,7 @@ public class DefaultScopeDefine {
     public static final int HTTP_ACCESS_LOG = 25;
 
     /**
-     * Catalog of scope, the indicator processor could use this to group all generated indicators by oal tool.
+     * Catalog of scope, the metrics processor could use this to group all generated metrics by oal tool.
      */
     public static final String SERVICE_CATALOG_NAME = "SERVICE";
     public static final String SERVICE_INSTANCE_CATALOG_NAME = "SERVICE_INSTANCE";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/EnvoyInstanceMetric.java
Patch:
@@ -24,9 +24,9 @@
 import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME;
 
 /**
- * The envoy metrics. This group of metrics are in Prometheus metric format family.
+ * The envoy metrics. This group of metrics are in Prometheus metrics format family.
  *
- * This metric source supports Counter and Gauge types.
+ * This metrics source supports Counter and Gauge types.
  *
  * @author wusheng
  */

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageDAO.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.storage;
 
-import org.apache.skywalking.oap.server.core.analysis.indicator.Indicator;
+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.register.RegisterSource;
 import org.apache.skywalking.oap.server.library.module.Service;
@@ -28,7 +28,7 @@
  */
 public interface StorageDAO extends Service {
 
-    IIndicatorDAO newIndicatorDao(StorageBuilder<Indicator> storageBuilder);
+    IMetricsDAO newMetricsDao(StorageBuilder<Metrics> storageBuilder);
 
     IRegisterDAO newRegisterDao(StorageBuilder<RegisterSource> storageBuilder);
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -39,7 +39,7 @@ public StorageModule() {
             IHistoryDeleteDAO.class,
             IServiceInventoryCacheDAO.class, IServiceInstanceInventoryCacheDAO.class,
             IEndpointInventoryCacheDAO.class, INetworkAddressInventoryCacheDAO.class,
-            ITopologyQueryDAO.class, IMetricQueryDAO.class, ITraceQueryDAO.class, IMetadataQueryDAO.class, IAggregationQueryDAO.class, IAlarmQueryDAO.class,
+            ITopologyQueryDAO.class, IMetricsQueryDAO.class, ITraceQueryDAO.class, IMetadataQueryDAO.class, IAggregationQueryDAO.class, IAlarmQueryDAO.class,
             ITopNRecordsQueryDAO.class, ILogQueryDAO.class};
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/StorageAnnotationListener.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.reflect.Field;
 import java.util.*;
 import lombok.Getter;
-import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorAnnotationUtils;
+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsAnnotationUtils;
 import org.apache.skywalking.oap.server.core.annotation.AnnotationListener;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.model.*;
@@ -54,10 +54,10 @@ public StorageAnnotationListener() {
         // Check this scope id is valid.
         DefaultScopeDefine.nameOf(sourceScopeId);
         List<ModelColumn> modelColumns = new LinkedList<>();
-        boolean isIndicator = IndicatorAnnotationUtils.isIndicator(aClass);
+        boolean isMetrics = MetricsAnnotationUtils.isMetrics(aClass);
         retrieval(aClass, modelName, modelColumns);
 
-        models.add(new Model(modelName, modelColumns, isIndicator, deleteHistory, sourceScopeId));
+        models.add(new Model(modelName, modelColumns, isMetrics, deleteHistory, sourceScopeId));
     }
 
     private void retrieval(Class clazz, String modelName, List<ModelColumn> modelColumns) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelInstaller.java
Patch:
@@ -46,7 +46,7 @@ public final void install(Client client) throws StorageException {
         List<Model> models = modelGetter.getModels();
         List<Model> allModels = new ArrayList<>();
         models.forEach(model -> {
-            if (model.isIndicator()) {
+            if (model.isMetrics()) {
                 if (downsamplingConfigService.shouldToHour()) {
                     allModels.add(model.copy(model.getName() + Const.ID_SPLIT + Downsampling.Hour.getName()));
                 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author peng-yongsheng
  */
-public interface IMetricQueryDAO extends DAO {
+public interface IMetricsQueryDAO extends DAO {
 
     IntValues getValues(String indName, Step step, long startTB,
         long endTB, Where where, String valueCName, Function function) throws IOException;

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientRealClient.java
Patch:
@@ -39,8 +39,8 @@ public class GRPCRemoteClientRealClient {
     public static void main(String[] args) throws InterruptedException {
         Address address = new Address("localhost", 10000, false);
         ModuleManagerTesting moduleManager = new ModuleManagerTesting();
-        MetricCreator metricCreator = mock(MetricCreator.class);
-        when(metricCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetric() {
+        MetricsCreator metricsCreator = mock(MetricsCreator.class);
+        when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {
             @Override public void inc() {
 
             }
@@ -51,7 +51,7 @@ public static void main(String[] args) throws InterruptedException {
         });
         ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();
         moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);
-        telemetryModuleDefine.provider().registerServiceImplementation(MetricCreator.class, metricCreator);
+        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);
 
         GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, new TestClassGetter(), address, 1, 10));
         remoteClient.connect();

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java
Patch:
@@ -62,8 +62,8 @@ public void before() {
 
     @Test
     public void testPush() throws InterruptedException {
-        MetricCreator metricCreator = mock(MetricCreator.class);
-        when(metricCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetric() {
+        MetricsCreator metricsCreator = mock(MetricsCreator.class);
+        when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {
             @Override public void inc() {
 
             }
@@ -74,7 +74,7 @@ public void testPush() throws InterruptedException {
         });
         ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();
         moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);
-        telemetryModuleDefine.provider().registerServiceImplementation(MetricCreator.class, metricCreator);
+        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);
 
         grpcServerRule.getServiceRegistry().addService(new RemoteServiceHandler(moduleManager));
 

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/RemoteClientManagerTestCase.java
Patch:
@@ -49,8 +49,8 @@ public void refresh() {
         StreamDataClassGetter streamDataClassGetter = mock(StreamDataClassGetter.class);
         coreModuleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, streamDataClassGetter);
 
-        MetricCreator metricCreator = mock(MetricCreator.class);
-        when(metricCreator.createGauge(any(), any(), any(), any())).thenReturn(new GaugeMetric() {
+        MetricsCreator metricsCreator = mock(MetricsCreator.class);
+        when(metricsCreator.createGauge(any(), any(), any(), any())).thenReturn(new GaugeMetrics() {
             @Override public void inc() {
 
             }
@@ -73,7 +73,7 @@ public void refresh() {
         });
         ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();
         moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);
-        telemetryModuleDefine.provider().registerServiceImplementation(MetricCreator.class, metricCreator);
+        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);
 
         RemoteClientManager clientManager = new RemoteClientManager(moduleManager);
 

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverModule.java
Patch:
@@ -21,12 +21,12 @@
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
 
 /**
- * Envoy metric receiver module
+ * Envoy metrics receiver module
  *
  * @author wusheng
  */
 public class EnvoyMetricReceiverModule extends ModuleDefine {
-    public static final String NAME = "envoy-metric";
+    public static final String NAME = "envoy-metrics";
 
     public EnvoyMetricReceiverModule() {
         super(NAME);

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java
Patch:
@@ -42,7 +42,7 @@ public class TraceServiceModuleConfig extends ModuleConfig {
     /**
      * Analysis trace status.
      *
-     * 1. Default(YES) means analysis all metric from trace.
+     * 1. Default(YES) means analysis all metrics from trace.
      *
      * 2. NO means, only save trace, but metrics come other places, such as service mesh.
      */

File: oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/OAPServerStartUp.java
Patch:
@@ -42,8 +42,8 @@ public static void main(String[] args) {
             ApplicationConfiguration applicationConfiguration = configLoader.load();
             manager.init(applicationConfiguration);
 
-            manager.find(TelemetryModule.NAME).provider().getService(MetricCreator.class).createGauge("uptime",
-                "oap server start up time", MetricTag.EMPTY_KEY, MetricTag.EMPTY_VALUE)
+            manager.find(TelemetryModule.NAME).provider().getService(MetricsCreator.class).createGauge("uptime",
+                "oap server start up time", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE)
                 // Set uptime to second
                 .setValue(System.currentTimeMillis() / 1000d);
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ILogQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IMetadataQueryDAO;
-import org.apache.skywalking.oap.server.core.storage.query.IMetricQueryDAO;
+import org.apache.skywalking.oap.server.core.storage.query.IMetricsQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITopNRecordsQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITopologyQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;
@@ -59,7 +59,7 @@
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.AlarmQueryEsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.LogQueryEsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.MetadataQueryEsDAO;
-import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.MetricQueryEsDAO;
+import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.MetricsQueryEsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.TopNRecordsQueryEsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.TopologyQueryEsDAO;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.TraceQueryEsDAO;
@@ -114,7 +114,7 @@ public void prepare() throws ServiceNotProvidedException {
         this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));
 
         this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));
-        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));
+        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));
         this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));
         this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));
         this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ColumnTypeEsMapping.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;
 
-import org.apache.skywalking.oap.server.core.analysis.indicator.IntKeyLongValueArray;
+import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueArray;
 import org.apache.skywalking.oap.server.core.storage.model.DataTypeMapping;
 
 /**

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/EsDAO.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;
 
-import org.apache.skywalking.oap.server.core.analysis.indicator.Indicator;
+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.query.sql.Where;
 import org.apache.skywalking.oap.server.core.storage.AbstractDAO;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
@@ -35,7 +35,7 @@ public EsDAO(ElasticSearchClient client) {
     }
 
     public final void queryBuild(SearchSourceBuilder sourceBuilder, Where where, long startTB, long endTB) {
-        RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(Indicator.TIME_BUCKET).gte(startTB).lte(endTB);
+        RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(Metrics.TIME_BUCKET).gte(startTB).lte(endTB);
         if (where.getKeyValues().isEmpty()) {
             sourceBuilder.query(rangeQueryBuilder);
         } else {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsDAO.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;
 
-import org.apache.skywalking.oap.server.core.analysis.indicator.Indicator;
+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.register.RegisterSource;
 import org.apache.skywalking.oap.server.core.storage.*;
@@ -33,8 +33,8 @@ public StorageEsDAO(ElasticSearchClient client) {
         super(client);
     }
 
-    @Override public IIndicatorDAO newIndicatorDao(StorageBuilder<Indicator> storageBuilder) {
-        return new IndicatorEsDAO(getClient(), storageBuilder);
+    @Override public IMetricsDAO newMetricsDao(StorageBuilder<Metrics> storageBuilder) {
+        return new MetricsEsDAO(getClient(), storageBuilder);
     }
 
     @Override public IRegisterDAO newRegisterDao(StorageBuilder<RegisterSource> storageBuilder) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ILogQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IMetadataQueryDAO;
-import org.apache.skywalking.oap.server.core.storage.query.IMetricQueryDAO;
+import org.apache.skywalking.oap.server.core.storage.query.IMetricsQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITopNRecordsQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITopologyQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;
@@ -51,7 +51,7 @@
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2HistoryDeleteDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2LogQueryDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetadataQueryDAO;
-import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetricQueryDAO;
+import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetricsQueryDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2NetworkAddressInventoryCacheDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2RegisterLockDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2RegisterLockInstaller;
@@ -117,7 +117,7 @@ public H2StorageProvider() {
         this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));
 
         this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));
-        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));
+        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));
         this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));
         this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));
         this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TableInstaller.java
Patch:
@@ -21,7 +21,7 @@
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import org.apache.skywalking.oap.server.core.analysis.indicator.IntKeyLongValueArray;
+import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueArray;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
 import org.apache.skywalking.oap.server.core.storage.model.ColumnName;
 import org.apache.skywalking.oap.server.core.storage.model.Model;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ILogQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.IMetadataQueryDAO;
-import org.apache.skywalking.oap.server.core.storage.query.IMetricQueryDAO;
+import org.apache.skywalking.oap.server.core.storage.query.IMetricsQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITopNRecordsQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITopologyQueryDAO;
 import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;
@@ -52,7 +52,7 @@
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2EndpointInventoryCacheDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2HistoryDeleteDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetadataQueryDAO;
-import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetricQueryDAO;
+import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2MetricsQueryDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2NetworkAddressInventoryCacheDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2RegisterLockDAO;
 import org.apache.skywalking.oap.server.storage.plugin.jdbc.h2.dao.H2RegisterLockInstaller;
@@ -119,7 +119,7 @@ public MySQLStorageProvider() {
         this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));
 
         this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));
-        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));
+        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));
         this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));
         this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));
         this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLTableInstaller.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
-import org.apache.skywalking.oap.server.core.analysis.indicator.IntKeyLongValueArray;
+import org.apache.skywalking.oap.server.core.analysis.metrics.IntKeyLongValueArray;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.register.RegisterSource;
 import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
@@ -108,12 +108,12 @@ protected void createIndexes(JDBCHikariCPClient client, Model model) throws Stor
                 createAlarmIndexes(client, model);
                 return;
             default:
-                createIndexesForAllIndicators(client, model);
+                createIndexesForAllMetrics(client, model);
 
         }
     }
 
-    private void createIndexesForAllIndicators(JDBCHikariCPClient client, Model model) throws StorageException {
+    private void createIndexesForAllMetrics(JDBCHikariCPClient client, Model model) throws StorageException {
         try (Connection connection = client.getConnection()) {
             SQLBuilder tableIndexSQL = new SQLBuilder("CREATE INDEX ");
             tableIndexSQL.append(model.getName().toUpperCase()).append("_TIME_BUCKET ");

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/TelemetryModule.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.telemetry;
 
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
-import org.apache.skywalking.oap.server.telemetry.api.MetricCreator;
+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;
 
 /**
  * Telemetry module definition
@@ -34,6 +34,6 @@ public TelemetryModule() {
     }
 
     @Override public Class[] services() {
-        return new Class[] {MetricCreator.class};
+        return new Class[] {MetricsCreator.class};
     }
 }

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/CounterMetrics.java
Patch:
@@ -19,13 +19,13 @@
 package org.apache.skywalking.oap.server.telemetry.api;
 
 /**
- * A counter is a cumulative metric that represents a single monotonically increasing counter whose value can only
+ * A counter is a cumulative metrics that represents a single monotonically increasing counter whose value can only
  * increase or be reset to zero on restart. For example, you can use a counter to represent the number of requests
  * served, tasks completed, or errors.z
  *
  * @author wusheng
  */
-public interface CounterMetric {
+public interface CounterMetrics {
     /**
      * Increase 1 to counter
      */

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/GaugeMetrics.java
Patch:
@@ -19,11 +19,11 @@
 package org.apache.skywalking.oap.server.telemetry.api;
 
 /**
- * A gauge is a metric that represents a single numerical value that can arbitrarily go up and down.
+ * A gauge is a metrics that represents a single numerical value that can arbitrarily go up and down.
  *
  * @author wusheng
  */
-public interface GaugeMetric {
+public interface GaugeMetrics {
     /**
      * Increase 1 to gauge
      */

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/MetricsTag.java
Patch:
@@ -19,11 +19,11 @@
 package org.apache.skywalking.oap.server.telemetry.api;
 
 /**
- * Tag for the target metric.
+ * Tag for the target metrics.
  *
  * The tag values should be set in putting value phase.
  */
-public class MetricTag {
+public class MetricsTag {
     public static final Keys EMPTY_KEY = new Keys();
     public static final Values EMPTY_VALUE = new Values();
 

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/TelemetryRelatedContext.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.telemetry.api;
 
 /**
- * The telemetry context which the metric instances may need to know.
+ * The telemetry context which the metrics instances may need to know.
  * @author wusheng
  */
 public enum TelemetryRelatedContext {

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/none/NoneTelemetryProvider.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.library.module.*;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
-import org.apache.skywalking.oap.server.telemetry.api.MetricCreator;
+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;
 
 /**
  * A nutshell telemetry implementor.
@@ -42,7 +42,7 @@ public class NoneTelemetryProvider extends ModuleProvider {
     }
 
     @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {
-        this.registerServiceImplementation(MetricCreator.class, new MetricCreatorNoop());
+        this.registerServiceImplementation(MetricsCreator.class, new MetricsCreatorNoop());
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: oap-server/server-telemetry/telemetry-prometheus/src/main/java/org/apache/skywalking/oap/server/telemetry/prometheus/PrometheusTelemetryProvider.java
Patch:
@@ -23,7 +23,7 @@
 import java.io.IOException;
 import org.apache.skywalking.oap.server.library.module.*;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
-import org.apache.skywalking.oap.server.telemetry.api.MetricCreator;
+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;
 
 /**
  * Start the Prometheus
@@ -50,7 +50,7 @@ public PrometheusTelemetryProvider() {
     }
 
     @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {
-        this.registerServiceImplementation(MetricCreator.class, new PrometheusMetricCreator());
+        this.registerServiceImplementation(MetricsCreator.class, new PrometheusMetricsCreator());
         try {
             new HTTPServer(config.getHost(), config.getPort());
         } catch (IOException e) {

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/logging/core/SystemOutWriterTest.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.PrintStream;
 
 import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.times;
 
 /**
  * Created by wusheng on 2017/2/28.
@@ -47,7 +46,7 @@ public void testWrite() {
 
         SystemOutWriter.INSTANCE.write("hello");
 
-        Mockito.verify(mockStream, times(1)).println(anyString());
+        Mockito.verify(mockStream).println(anyString());
     }
 
     @AfterClass

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/HttpAsyncClientInterceptorTest.java
Patch:
@@ -194,7 +194,7 @@ public void testSuccess() throws Throwable {
 
         List<AbstractTracingSpan> spans = SegmentHelper.getSpans(findNeedSegemnt());
         assertHttpSpan(spans.get(0));
-        verify(requestWrapper, times(1)).setHeader(anyString(), anyString());
+        verify(requestWrapper).setHeader(anyString(), anyString());
 
     }
 

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jedis/v2/JedisClusterConstructorWithHostAndPortArgInterceptorTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import redis.clients.jedis.HostAndPort;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -52,7 +51,7 @@ public void tearDown() throws Exception {
     @Test
     public void onConstruct() throws Exception {
         interceptor.onConstruct(enhancedInstance, new Object[] {new HostAndPort("127.0.0.1", 6379)});
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:6379");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:6379");
     }
 
 }

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jedis/v2/JedisClusterConstructorWithListHostAndPortArgInterceptorTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.mockito.runners.MockitoJUnitRunner;
 import redis.clients.jedis.HostAndPort;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -59,7 +58,7 @@ public void tearDown() throws Exception {
     public void onConstruct() throws Exception {
         interceptor.onConstruct(enhancedInstance, new Object[] {hostAndPortSet});
 
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:6379;127.0.0.1:16379;");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:6379;127.0.0.1:16379;");
     }
 
 }

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jedis/v2/JedisConstructorWithShardInfoArgInterceptorTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.mockito.runners.MockitoJUnitRunner;
 import redis.clients.jedis.JedisShardInfo;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -51,7 +50,7 @@ public void tearDown() throws Exception {
     public void onConstruct() throws Exception {
 
         interceptor.onConstruct(enhancedInstance, new Object[] {new JedisShardInfo("127.0.0.1", 6379)});
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:6379");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:6379");
     }
 
 }

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jedis/v2/JedisConstructorWithStringArgInterceptorTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -46,14 +45,14 @@ public void setUp() throws Exception {
     public void onConstruct() throws Exception {
         interceptor.onConstruct(enhancedInstance, new Object[] {"127.0.0.1"});
 
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:6379");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:6379");
     }
 
     @Test
     public void onConstructWithPort() {
         interceptor.onConstruct(enhancedInstance, new Object[] {"127.0.0.1", 16379});
 
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:16379");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:16379");
     }
 
 }

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jedis/v2/JedisConstructorWithUriArgInterceptorTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 @RunWith(PowerMockRunner.class)
@@ -50,6 +49,6 @@ public void setUp() throws Exception {
     public void onConstruct() throws Exception {
         interceptor.onConstruct(enhancedInstance, new Object[] {uri});
 
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:6379");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:6379");
     }
 }

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/test/java/org/apache/skywalking/apm/plugin/motan/MotanConsumerInterceptorTest.java
Patch:
@@ -48,7 +48,6 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static org.apache.skywalking.apm.agent.test.tools.SpanAssert.assertComponent;
@@ -94,7 +93,7 @@ public void testInvokeInterceptor() throws Throwable {
         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);
         List<AbstractTracingSpan> spans = SegmentHelper.getSpans(traceSegment);
         assertMotanConsumerSpan(spans.get(0));
-        verify(request, times(1)).setAttachment(anyString(), anyString());
+        verify(request).setAttachment(anyString(), anyString());
     }
 
     @Test
@@ -112,7 +111,7 @@ public void testResponseWithException() throws Throwable {
 
     private void assertTraceSegmentWhenOccurException(AbstractTracingSpan tracingSpan) {
         assertMotanConsumerSpan(tracingSpan);
-        verify(request, times(1)).setAttachment(anyString(), anyString());
+        verify(request).setAttachment(anyString(), anyString());
         List<LogDataEntity> logDataEntities = SpanHelper.getLogs(tracingSpan);
         assertThat(logDataEntities.size(), is(1));
         SpanAssert.assertException(logDataEntities.get(0), RuntimeException.class);

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/ConnectionImplCreateInterceptorTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.mockito.runners.MockitoJUnitRunner;
 
 import static org.mockito.Mockito.verify;
-import static org.mockito.internal.verification.VerificationModeFactory.times;
 
 /**
  *
@@ -49,6 +48,6 @@ public void setUp() {
     @Test
     public void testResultIsEnhanceInstance() throws Throwable {
         interceptor.afterMethod(null,null,new Object[]{"localhost",3360,null,"test","jdbc:mysql:replication://localhost:3360,localhost:3360,localhost:3360/test?useUnicode=true&characterEncoding=utf8&useSSL=false&roundRobinLoadBalance=true"},null,objectInstance);
-        verify(objectInstance,times(1)).setSkyWalkingDynamicField(Matchers.any());
+        verify(objectInstance).setSkyWalkingDynamicField(Matchers.any());
     }
 }
\ No newline at end of file

File: apm-sniffer/apm-sdk-plugin/mysql-8.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v8/ConnectionImplCreateInterceptorTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.mockito.runners.MockitoJUnitRunner;
 
 import static org.mockito.Mockito.verify;
-import static org.mockito.internal.verification.VerificationModeFactory.times;
 
 /**
  *
@@ -52,6 +51,6 @@ public void testResultIsEnhanceInstance() throws Throwable {
         final ConnectionUrlParser connectionUrlParser = ConnectionUrlParser.parseConnectionString("jdbc:mysql:replication://localhost:3360,localhost:3360,localhost:3360/test?useUnicode=true&characterEncoding=utf8&useSSL=false&roundRobinLoadBalance=true");
 
         interceptor.afterMethod(null,null,connectionUrlParser.getHosts().toArray(),null,objectInstance);
-        verify(objectInstance,times(1)).setSkyWalkingDynamicField(Matchers.any());
+        verify(objectInstance).setSkyWalkingDynamicField(Matchers.any());
     }
 }
\ No newline at end of file

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateCallableStatementInterceptorTest.java
Patch:
@@ -56,7 +56,7 @@ public void setUp() {
     @Test
     public void testResultIsEnhanceInstance() throws Throwable {
         interceptor.afterMethod(objectInstance, null, new Object[] {"SELECT * FROM test"}, null, ret);
-        verify(ret, times(1)).setSkyWalkingDynamicField(Matchers.any());
+        verify(ret).setSkyWalkingDynamicField(Matchers.any());
     }
 
     @Test

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreatePreparedStatementInterceptorTest.java
Patch:
@@ -55,7 +55,7 @@ public void setUp() {
     @Test
     public void testResultIsEnhanceInstance() throws Throwable {
         interceptor.afterMethod(objectInstance, null, new Object[] {"SELECT * FROM test"}, null, ret);
-        verify(ret, times(1)).setSkyWalkingDynamicField(Matchers.any());
+        verify(ret).setSkyWalkingDynamicField(Matchers.any());
     }
 
     @Test

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateStatementInterceptorTest.java
Patch:
@@ -56,7 +56,7 @@ public void setUp() {
     @Test
     public void testResultIsEnhanceInstance() throws Throwable {
         interceptor.afterMethod(objectInstance, null, new Object[] {"SELECT * FROM test"}, null, ret);
-        verify(ret, times(1)).setSkyWalkingDynamicField(Matchers.any());
+        verify(ret).setSkyWalkingDynamicField(Matchers.any());
     }
 
     @Test

File: apm-sniffer/apm-sdk-plugin/nutz-plugins/http-1.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/nutz/http/sync/SenderInterceptorTest.java
Patch:
@@ -46,7 +46,6 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -91,7 +90,7 @@ public void setupSender(Class<? extends Sender> klass) throws NoSuchMethodExcept
     public void test_constructor() {
         Request request = Request.create("https://nutz.cn/yvr/list", METHOD.GET);
         constructorInterceptPoint.onConstruct(enhancedInstance, new Object[] {request});
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField(request);
+        verify(enhancedInstance).setSkyWalkingDynamicField(request);
     }
 
     @Test
@@ -115,7 +114,7 @@ public void test_filepostsender_send() throws NoSuchMethodException, SecurityExc
     protected void _sender_sender_test() throws Throwable {
         Request request = Request.create("https://nutz.cn/yvr/list", METHOD.GET);
         constructorInterceptPoint.onConstruct(enhancedInstance, new Object[] {request});
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField(request);
+        verify(enhancedInstance).setSkyWalkingDynamicField(request);
 
         when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(request);
         when(resp.getStatus()).thenReturn(200);

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/ProducerOperationHandlerInterceptorTest.java
Patch:
@@ -51,7 +51,6 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -119,7 +118,7 @@ public void testConsumer() throws Throwable {
 
         List<AbstractTracingSpan> spans = SegmentHelper.getSpans(traceSegment);
         assertCombSpan(spans.get(0));
-        verify(invocation, times(1)).getContext();
+        verify(invocation).getContext();
     }
 
     private void assertCombSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/TransportClientHandlerInterceptorTest.java
Patch:
@@ -51,7 +51,6 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -114,7 +113,7 @@ public void testConsumer() throws Throwable {
         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);
         List<AbstractTracingSpan> spans = SegmentHelper.getSpans(traceSegment);
         assertCombSpan(spans.get(0));
-        verify(invocation, times(1)).getContext();
+        verify(invocation).getContext();
     }
 
     private void assertCombSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/v1/ProducerOperationHandlerInterceptorTest.java
Patch:
@@ -51,7 +51,6 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -119,7 +118,7 @@ public void testConsumer() throws Throwable {
 
         List<AbstractTracingSpan> spans = SegmentHelper.getSpans(traceSegment);
         assertCombSpan(spans.get(0));
-        verify(invocation, times(1)).getContext();
+        verify(invocation).getContext();
     }
 
     private void assertCombSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/v1/TransportClientHandlerInterceptorTest.java
Patch:
@@ -51,7 +51,6 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -114,7 +113,7 @@ public void testConsumer() throws Throwable {
         TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);
         List<AbstractTracingSpan> spans = SegmentHelper.getSpans(traceSegment);
         assertCombSpan(spans.get(0));
-        verify(invocation, times(1)).getContext();
+        verify(invocation).getContext();
     }
 
     private void assertCombSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spymemcached/v2/MemcachedConstructorWithInetSocketAddressListArgInterceptorTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -52,6 +51,6 @@ public void onConstructWithInetSocketAddressList() {
         inetSocketAddressList.add(new InetSocketAddress("127.0.0.2", 11211));
         interceptor.onConstruct(enhancedInstance, new Object[] {null, inetSocketAddressList});
 
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:11211;127.0.0.2:11211");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:11211;127.0.0.2:11211");
     }
 }

File: apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/xmemcached/v2/XMemcachedConstructorWithComplexArgInterceptorTest.java
Patch:
@@ -19,7 +19,6 @@
 
 package org.apache.skywalking.apm.plugin.xmemcached.v2;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import java.net.InetSocketAddress;
@@ -52,6 +51,6 @@ public void onConstructWithComplex() {
         inetSocketAddressMap.put(new InetSocketAddress("127.0.0.1", 11211), new InetSocketAddress("127.0.0.2", 11211));
         interceptor.onConstruct(enhancedInstance, new Object[]{null, null, null, null, null, null, inetSocketAddressMap});
 
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:11211;127.0.0.2:11211");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:11211;127.0.0.2:11211");
     }
 }

File: apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/xmemcached/v2/XMemcachedConstructorWithHostPortArgInterceptorTest.java
Patch:
@@ -19,7 +19,6 @@
 
 package org.apache.skywalking.apm.plugin.xmemcached.v2;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
@@ -46,6 +45,6 @@ public void setUp() throws Exception {
     public void onConstructWithHostPort() {
         interceptor.onConstruct(enhancedInstance, new Object[]{"127.0.0.1", 11211});
 
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:11211");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:11211");
     }
 }

File: apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/xmemcached/v2/XMemcachedConstructorWithInetSocketAddressArgInterceptorTest.java
Patch:
@@ -19,7 +19,6 @@
 
 package org.apache.skywalking.apm.plugin.xmemcached.v2;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import java.net.InetSocketAddress;
@@ -48,6 +47,6 @@ public void setUp() throws Exception {
     public void onConstructWithInetSocketAddress() {
         interceptor.onConstruct(enhancedInstance, new Object[]{new InetSocketAddress("127.0.0.1", 11211)});
 
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:11211");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:11211");
     }
 }

File: apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/xmemcached/v2/XMemcachedConstructorWithInetSocketAddressListArgInterceptorTest.java
Patch:
@@ -19,7 +19,6 @@
 
 package org.apache.skywalking.apm.plugin.xmemcached.v2;
 
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import java.net.InetSocketAddress;
@@ -53,6 +52,6 @@ public void onConstructWithInetSocketAddressList() {
         inetSocketAddressList.add(new InetSocketAddress("127.0.0.2", 11211));
         interceptor.onConstruct(enhancedInstance, new Object[]{inetSocketAddressList});
 
-        verify(enhancedInstance, times(1)).setSkyWalkingDynamicField("127.0.0.1:11211;127.0.0.2:11211");
+        verify(enhancedInstance).setSkyWalkingDynamicField("127.0.0.1:11211;127.0.0.2:11211");
     }
 }

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/buffer/Channels.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.commons.datacarrier.partition.IDataPartitioner;
 
 /**
- * Channels of Buffer It contais all buffer data which belongs to this channel. It supports several strategy when buffer
+ * Channels of Buffer It contains all buffer data which belongs to this channel. It supports several strategy when buffer
  * is full. The Default is BLOCKING <p> Created by wusheng on 2016/10/25.
  */
 public class Channels<T> {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/Mysql50ConnectionInstrumentation.java
Patch:
@@ -24,7 +24,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link Mysql50ConnectionInstrumentation} interceptor the com.mysql.jdbc.Connection class in the 5.0.x verison
+ * {@link Mysql50ConnectionInstrumentation} interceptor the com.mysql.jdbc.Connection class in the 5.0.x version
  * of mysql driver jar.
  *
  * @author zhangxin

File: apm-sniffer/apm-sdk-plugin/spring-plugins/webflux-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/webflux/v5/define/HttpServerOperations20xInstrumentation.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
-import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
 import static org.apache.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
@@ -48,7 +47,7 @@ public class HttpServerOperations20xInstrumentation extends ClassInstanceMethods
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {
-                    return named("status").and(takesArguments(1));
+                    return named("status").and(takesArgumentWithType(0, "io.netty.handler.codec.http.HttpResponseStatus"));
                 }
 
                 @Override public String getMethodsInterceptor() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/webflux-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/webflux/v5/define/HttpServerOperations21xInstrumentation.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
-import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
 import static org.apache.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
@@ -48,7 +47,7 @@ public class HttpServerOperations21xInstrumentation extends ClassInstanceMethods
         return new InstanceMethodsInterceptPoint[] {
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {
-                    return named("status").and(takesArguments(1));
+                    return named("status").and(takesArgumentWithType(0, "io.netty.handler.codec.http.HttpResponseStatus"));
                 }
 
                 @Override public String getMethodsInterceptor() {
@@ -104,4 +103,4 @@ public class HttpServerOperations21xInstrumentation extends ClassInstanceMethods
     @Override protected ClassMatch enhanceClass() {
         return byName("reactor.netty.http.server.HttpServerOperations");
     }
-}
\ No newline at end of file
+}

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java
Patch:
@@ -58,7 +58,7 @@ public class SnifferConfigInitializer {
      * start with {@link #ENV_KEY_PREFIX}. e.g. in env `skywalking.agent.service_name=yourAppName` to override
      * `agent.service_name` in config file.
      * <p>
-     * At the end, `agent.service_name` and `collector.servers` must be not blank.
+     * At the end, `agent.service_name` and `collector.servers` must not be blank.
      */
     public static void initialize(String agentOptions) throws ConfigNotFoundException, AgentPackageNotFoundException {
         InputStreamReader configFileStream;

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java
Patch:
@@ -45,8 +45,8 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
         List<Object> parameters = new ArrayList<>(10);
         sql.append("from ").append(AlarmRecord.INDEX_NAME).append(" where ");
         sql.append(" 1=1 ");
-        sql.append(" and ").append(AlarmRecord.SCOPE).append(" = ?");
         if (Objects.nonNull(scopeId)) {
+            sql.append(" and ").append(AlarmRecord.SCOPE).append(" = ?");
             parameters.add(scopeId.intValue());
         }
         if (startTB != 0 && endTB != 0) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java
Patch:
@@ -45,8 +45,8 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
         List<Object> parameters = new ArrayList<>(10);
         sql.append("from ").append(AlarmRecord.INDEX_NAME).append(" where ");
         sql.append(" 1=1 ");
-        sql.append(" and ").append(AlarmRecord.SCOPE).append(" = ?");
         if (Objects.nonNull(scopeId)) {
+            sql.append(" and ").append(AlarmRecord.SCOPE).append(" = ?");
             parameters.add(scopeId.intValue());
         }
         if (startTB != 0 && endTB != 0) {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java
Patch:
@@ -32,6 +32,7 @@ public final static void createCaseHandler(HttpServletRequest request, HttpServl
         ContextManager.getRuntimeContext().put(Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT, response);
         a.handleCase();
         ContextManager.stopSpan();
+        ContextManager.getRuntimeContext().remove(Constants.CONTROLLER_METHOD_STACK_DEPTH);
     }
 
     public interface CaseHandler {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java
Patch:
@@ -39,4 +39,6 @@ public class Constants {
     public static final String FORWARD_REQUEST_FLAG = "SW_FORWARD_REQUEST_FLAG";
 
     public static final String WEBFLUX_REQUEST_KEY = "SW_WEBFLUX_REQUEST_KEY";
+
+    public static final String CONTROLLER_METHOD_STACK_DEPTH  = "SW_CONTROLLER_METHOD_STACK_DEPTH";
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java
Patch:
@@ -120,7 +120,7 @@ private JsonObject createMapping(Model tableDefine) {
                 JsonObject matchColumn = new JsonObject();
                 matchColumn.addProperty("type", "text");
                 matchColumn.addProperty("analyzer", "oap_analyzer");
-                properties.add(columnDefine.getColumnName().getName(), matchColumn);
+                properties.add(matchCName, matchColumn);
             } else {
                 JsonObject column = new JsonObject();
                 column.addProperty("type", columnTypeEsMapping.transform(columnDefine.getType()));

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java
Patch:
@@ -54,7 +54,7 @@ public Alarms getAlarm(final Integer scopeId, final String keyword, final int li
 
         if (!Strings.isNullOrEmpty(keyword)) {
             String matchCName = MatchCNameBuilder.INSTANCE.build(AlarmRecord.ALARM_MESSAGE);
-            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));
+            boolQueryBuilder.must().add(QueryBuilders.matchPhraseQuery(matchCName, keyword));
         }
 
         sourceBuilder.query(boolQueryBuilder);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java
Patch:
@@ -46,7 +46,9 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
         sql.append("from ").append(AlarmRecord.INDEX_NAME).append(" where ");
         sql.append(" 1=1 ");
         sql.append(" and ").append(AlarmRecord.SCOPE).append(" = ?");
-        parameters.add(scopeId.intValue());
+        if (Objects.nonNull(scopeId)) {
+            parameters.add(scopeId.intValue());
+        }
         if (startTB != 0 && endTB != 0) {
             sql.append(" and ").append(AlarmRecord.TIME_BUCKET).append(" >= ?");
             parameters.add(startTB);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java
Patch:
@@ -46,7 +46,9 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
         sql.append("from ").append(AlarmRecord.INDEX_NAME).append(" where ");
         sql.append(" 1=1 ");
         sql.append(" and ").append(AlarmRecord.SCOPE).append(" = ?");
-        parameters.add(scopeId.intValue());
+        if (Objects.nonNull(scopeId)) {
+            parameters.add(scopeId.intValue());
+        }
         if (startTB != 0 && endTB != 0) {
             sql.append(" and ").append(AlarmRecord.TIME_BUCKET).append(" >= ?");
             parameters.add(startTB);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -115,7 +115,7 @@ public void prepare() throws ServiceNotProvidedException {
 
         this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));
         this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));
-        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));
+        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));
         this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));
         this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));
         this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/EnvUtil.java
Patch:
@@ -42,7 +42,7 @@ public static long getLong(String envName, long defaultValue) {
         String envValue = System.getenv(envName);
         if (envValue != null) {
             try {
-                value = Integer.parseInt(envValue);
+                value = Long.parseLong(envValue);
             } catch (NumberFormatException e) {
 
             }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageConfig.java
Patch:
@@ -32,4 +32,5 @@ public class H2StorageConfig extends ModuleConfig {
     private String url = "jdbc:h2:mem:collector";
     private String user = "";
     private String password = "";
+    private int metadataQueryMaxSize = 5000;
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -40,7 +40,7 @@ public static class Agent {
         public static String NAMESPACE = "";
 
         /**
-         * Application code is showed in skywalking-ui. Suggestion: set a unique name for each service,
+         * Service name is showed in skywalking-ui. Suggestion: set a unique name for each service,
          * service instance nodes share the same code
          */
         public static String SERVICE_NAME = "";

File: apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java
Patch:
@@ -40,7 +40,7 @@
 import static net.bytebuddy.matcher.ElementMatchers.*;
 
 /**
- * The main entrance of sky-waking agent, based on javaagent mechanism.
+ * The main entrance of sky-walking agent, based on javaagent mechanism.
  *
  * @author wusheng
  */

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/AbstractMessageConsumeInterceptor.java
Patch:
@@ -41,7 +41,7 @@
  */
 public abstract class AbstractMessageConsumeInterceptor implements InstanceMethodsAroundInterceptor {
 
-    public static final String COMSUMER_OPERATION_NAME_PREFIX = "RocketMQ/";
+    public static final String CONSUMER_OPERATION_NAME_PREFIX = "RocketMQ/";
 
     @Override
     public final void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,
@@ -50,7 +50,7 @@ public final void beforeMethod(EnhancedInstance objInst, Method method, Object[]
         List<MessageExt> msgs = (List<MessageExt>)allArguments[0];
 
         ContextCarrier contextCarrier = getContextCarrierFromMessage(msgs.get(0));
-        AbstractSpan span = ContextManager.createEntrySpan(COMSUMER_OPERATION_NAME_PREFIX + msgs.get(0).getTopic() + "/Consumer", contextCarrier);
+        AbstractSpan span = ContextManager.createEntrySpan(CONSUMER_OPERATION_NAME_PREFIX + msgs.get(0).getTopic() + "/Consumer", contextCarrier);
 
         span.setComponent(ComponentsDefine.ROCKET_MQ_CONSUMER);
         SpanLayer.asMQ(span);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch;
 
+import java.io.IOException;
 import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.storage.*;
@@ -98,7 +99,7 @@ public void start() throws ModuleStartException {
 
             RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);
             lockInstaller.install();
-        } catch (StorageException e) {
+        } catch (StorageException | IOException e) {
             throw new ModuleStartException(e.getMessage(), e);
         }
     }

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/CallbackInterceptor.java
Patch:
@@ -34,7 +34,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
 
         //Get the SnapshotContext
         ContextSnapshot contextSnapshot = (ContextSnapshot)objInst.getSkyWalkingDynamicField();
-        ContextManager.continued(contextSnapshot);
+        if (null != contextSnapshot) {
+            ContextManager.continued(contextSnapshot);
+        }
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -66,6 +66,7 @@ private void addQueryService(List<Class> classes) {
         classes.add(TopologyQueryService.class);
         classes.add(MetricQueryService.class);
         classes.add(TraceQueryService.class);
+        classes.add(LogQueryService.class);
         classes.add(MetadataQueryService.class);
         classes.add(AggregationQueryService.class);
         classes.add(AlarmQueryService.class);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -145,6 +145,7 @@ public CoreModuleProvider() {
         this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));
         this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));
         this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));
+        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));
         this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));
         this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));
         this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -61,6 +61,7 @@ public class DefaultScopeDefine {
     public static final int ENVOY_INSTANCE_METRIC = 22;
     public static final int ZIPKIN_SPAN = 23;
     public static final int JAEGER_SPAN = 24;
+    public static final int HTTP_ACCESS_LOG = 25;
 
     /**
      * Catalog of scope, the indicator processor could use this to group all generated indicators by oal tool.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -40,6 +40,6 @@ public StorageModule() {
             IServiceInventoryCacheDAO.class, IServiceInstanceInventoryCacheDAO.class,
             IEndpointInventoryCacheDAO.class, INetworkAddressInventoryCacheDAO.class,
             ITopologyQueryDAO.class, IMetricQueryDAO.class, ITraceQueryDAO.class, IMetadataQueryDAO.class, IAggregationQueryDAO.class, IAlarmQueryDAO.class,
-            ITopNRecordsQueryDAO.class};
+            ITopNRecordsQueryDAO.class, ILogQueryDAO.class};
     }
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/GraphQLQueryProvider.java
Patch:
@@ -68,6 +68,8 @@ public class GraphQLQueryProvider extends ModuleProvider {
             .resolvers(new AlarmQuery(getManager()))
             .file("query-protocol/top-n-records.graphqls")
             .resolvers(new TopNRecordsQuery(getManager()))
+            .file("query-protocol/log.graphqls")
+            .resolvers(new LogQuery(getManager()))
             .build()
             .makeExecutableSchema();
         this.graphQL = GraphQL.newGraphQL(schema).build();

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java
Patch:
@@ -87,6 +87,7 @@ public H2StorageProvider() {
         this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));
         this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));
         this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));
+        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java
Patch:
@@ -93,6 +93,7 @@ public MySQLStorageProvider() {
         this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));
         this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));
         this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));
+        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRSourceDispatcher.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.receiver.clr.provider.handler;
 
+import java.util.Objects;
 import org.apache.skywalking.apm.network.common.CPU;
 import org.apache.skywalking.apm.network.language.agent.CLRMetric;
 import org.apache.skywalking.apm.network.language.agent.ClrGC;
@@ -51,7 +52,7 @@ public CLRSourceDispatcher(ModuleManager moduleManager) {
     void sendMetric(int serviceInstanceId, long minuteTimeBucket, CLRMetric metric) {
         ServiceInstanceInventory serviceInstanceInventory = instanceInventoryCache.get(serviceInstanceId);
         int serviceId;
-        if (serviceInstanceInventory == null) {
+        if (Objects.nonNull(serviceInstanceInventory)) {
             serviceId = serviceInstanceInventory.getServiceId();
         } else {
             logger.warn("Can't found service by service instance id from cache, service instance id is: {}", serviceInstanceId);

File: apm-sniffer/apm-sdk-plugin/rabbitmq-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rabbitmq/RabbitMQConsumerInterceptor.java
Patch:
@@ -53,8 +53,6 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             next = next.next();
             if (properties.getHeaders() != null && properties.getHeaders().get(next.getHeadKey()) != null) {
                 next.setHeadValue(properties.getHeaders().get(next.getHeadKey()).toString());
-            } else {
-                next.setHeadValue("");
             }
         }
         ContextManager.extract(contextCarrier);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -91,6 +91,7 @@ public CoreModuleProvider() {
         AnnotationScan scopeScan = new AnnotationScan();
         scopeScan.registerListener(new DefaultScopeDefine.Listener());
         scopeScan.registerListener(DisableRegister.INSTANCE);
+        scopeScan.registerListener(new DisableRegister.SingleDisableScanListener());
         try {
             scopeScan.scan(null);
         } catch (IOException e) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -60,6 +60,7 @@ public class DefaultScopeDefine {
     public static final int SERVICE_INSTANCE_CLR_THREAD = 21;
     public static final int ENVOY_INSTANCE_METRIC = 22;
     public static final int ZIPKIN_SPAN = 23;
+    public static final int JAEGER_SPAN = 24;
 
     /**
      * Catalog of scope, the indicator processor could use this to group all generated indicators by oal tool.

File: oap-server/server-storage-plugin/storage-zipkin-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/zipkin/elasticsearch/ZipkinTraceQueryEsDAO.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.util.*;
 import lombok.Setter;
+import org.apache.skywalking.apm.util.StringUtil;
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;
 import org.apache.skywalking.oap.server.core.cache.ServiceInventoryCache;
@@ -158,7 +159,6 @@ public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long mi
 
         List<org.apache.skywalking.oap.server.core.query.entity.Span> spanList = new ArrayList<>();
 
-        boolean isFirst = true;
         for (SearchHit searchHit : response.getHits().getHits()) {
             int serviceId = ((Number)searchHit.getSourceAsMap().get(SERVICE_ID)).intValue();
             String dataBinaryBase64 = (String)searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);
@@ -201,10 +201,9 @@ public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long mi
 
             }
 
-            if (isFirst) {
+            if (StringUtil.isEmpty(span.parentId())) {
                 swSpan.setRoot(true);
                 swSpan.setSegmentParentSpanId("");
-                isFirst = false;
             } else {
                 Ref ref = new Ref();
                 ref.setTraceId(span.traceId());

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.server.GRPCHandlerRegister;
 import org.apache.skywalking.oap.server.library.module.*;
-import org.apache.skywalking.oap.server.receiver.sharing.server.SharingServerModule;
+import org.apache.skywalking.oap.server.receiver.sharing.server.*;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
 
 public class MeshReceiverProvider extends ModuleProvider {

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/ServiceMeshMetricDataDecorator.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.skywalking.apm.network.servicemesh.ServiceMeshMetric;
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;
+import org.apache.skywalking.oap.server.receiver.sharing.server.CoreRegisterLinker;
 
 /**
  * @author wusheng

File: oap-server/server-receiver-plugin/skywalking-sharing-server-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/sharing/server/CoreRegisterLinker.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.receiver.zipkin;
+package org.apache.skywalking.oap.server.receiver.sharing.server;
 
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.register.service.*;

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.skywalking.oap.server.library.module.ServiceNotProvidedException;
 import org.apache.skywalking.oap.server.library.server.ServerException;
 import org.apache.skywalking.oap.server.library.server.jetty.JettyServer;
+import org.apache.skywalking.oap.server.receiver.sharing.server.CoreRegisterLinker;
 import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.ISegmentParserService;
 import org.apache.skywalking.oap.server.receiver.zipkin.analysis.*;

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/ZipkinSkyWalkingTransfer.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.receiver.zipkin.analysis;
 
 import java.util.List;
+import org.apache.skywalking.oap.server.receiver.sharing.server.CoreRegisterLinker;
 import org.apache.skywalking.oap.server.receiver.zipkin.*;
 import org.apache.skywalking.oap.server.receiver.zipkin.analysis.cache.CacheFactory;
 import zipkin2.Span;

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/transform/SegmentBuilder.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.skywalking.apm.network.common.KeyStringValuePair;
 import org.apache.skywalking.apm.network.language.agent.*;
 import org.apache.skywalking.apm.network.language.agent.v2.*;
-import org.apache.skywalking.oap.server.receiver.zipkin.CoreRegisterLinker;
+import org.apache.skywalking.oap.server.receiver.sharing.server.CoreRegisterLinker;
 import org.apache.skywalking.oap.server.receiver.zipkin.analysis.*;
 import org.apache.skywalking.oap.server.receiver.zipkin.analysis.data.SkyWalkingTrace;
 import org.eclipse.jetty.util.StringUtil;

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/trace/SpanForward.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.oap.server.core.cache.*;
 import org.apache.skywalking.oap.server.core.source.*;
 import org.apache.skywalking.oap.server.library.util.*;
+import org.apache.skywalking.oap.server.receiver.sharing.server.CoreRegisterLinker;
 import org.apache.skywalking.oap.server.receiver.zipkin.*;
 import org.apache.skywalking.oap.server.receiver.zipkin.handler.SpanEncode;
 import org.apache.skywalking.oap.server.storage.plugin.zipkin.ZipkinSpan;

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/transform/SpringSleuthSegmentBuilderTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.skywalking.apm.network.language.agent.v2.*;
 import org.apache.skywalking.oap.server.core.register.NodeType;
 import org.apache.skywalking.oap.server.core.register.service.*;
-import org.apache.skywalking.oap.server.receiver.zipkin.CoreRegisterLinker;
+import org.apache.skywalking.oap.server.receiver.sharing.server.CoreRegisterLinker;
 import org.apache.skywalking.oap.server.receiver.zipkin.analysis.data.*;
 import org.junit.*;
 import org.powermock.reflect.Whitebox;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -59,6 +59,7 @@ public class DefaultScopeDefine {
     public static final int SERVICE_INSTANCE_CLR_GC = 20;
     public static final int SERVICE_INSTANCE_CLR_THREAD = 21;
     public static final int ENVOY_INSTANCE_METRIC = 22;
+    public static final int ZIPKIN_SPAN = 23;
 
     /**
      * Catalog of scope, the indicator processor could use this to group all generated indicators by oal tool.

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/ZipkinTraceOSInfoBuilder.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.receiver.zipkin;
+package org.apache.skywalking.oap.server.receiver.zipkin.analysis;
 
 import com.google.gson.JsonObject;
 import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/cache/CacheFactory.java
Patch:
@@ -16,10 +16,10 @@
  *
  */
 
-package org.apache.skywalking.oap.server.receiver.zipkin.cache;
+package org.apache.skywalking.oap.server.receiver.zipkin.analysis.cache;
 
 import org.apache.skywalking.oap.server.receiver.zipkin.ZipkinReceiverConfig;
-import org.apache.skywalking.oap.server.receiver.zipkin.cache.caffeine.CaffeineSpanCache;
+import org.apache.skywalking.oap.server.receiver.zipkin.analysis.cache.caffeine.CaffeineSpanCache;
 
 /**
  * @author wusheng

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/cache/ISpanCache.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.receiver.zipkin.cache;
+package org.apache.skywalking.oap.server.receiver.zipkin.analysis.cache;
 
 import zipkin2.Span;
 

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/data/SkyWalkingTrace.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.receiver.zipkin.data;
+package org.apache.skywalking.oap.server.receiver.zipkin.analysis.data;
 
 import java.util.LinkedList;
 import java.util.List;

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/data/ZipkinTrace.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.receiver.zipkin.data;
+package org.apache.skywalking.oap.server.receiver.zipkin.analysis.data;
 
 import java.util.LinkedList;
 import java.util.List;

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/transform/SegmentListener.java
Patch:
@@ -16,9 +16,9 @@
  *
  */
 
-package org.apache.skywalking.oap.server.receiver.zipkin.transform;
+package org.apache.skywalking.oap.server.receiver.zipkin.analysis.transform;
 
-import org.apache.skywalking.oap.server.receiver.zipkin.data.SkyWalkingTrace;
+import org.apache.skywalking.oap.server.receiver.zipkin.analysis.data.SkyWalkingTrace;
 
 public interface SegmentListener {
     void notify(SkyWalkingTrace trace);

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/transform/Zipkin2SkyWalkingTransfer.java
Patch:
@@ -16,12 +16,12 @@
  *
  */
 
-package org.apache.skywalking.oap.server.receiver.zipkin.transform;
+package org.apache.skywalking.oap.server.receiver.zipkin.analysis.transform;
 
 import java.util.LinkedList;
 import java.util.List;
-import org.apache.skywalking.oap.server.receiver.zipkin.data.SkyWalkingTrace;
-import org.apache.skywalking.oap.server.receiver.zipkin.data.ZipkinTrace;
+import org.apache.skywalking.oap.server.receiver.zipkin.analysis.data.SkyWalkingTrace;
+import org.apache.skywalking.oap.server.receiver.zipkin.analysis.data.ZipkinTrace;
 import zipkin2.Span;
 
 /**

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/zipkin/analysis/transform/SpringSleuthSegmentBuilderTest.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.receiver.zipkin.transform;
+package org.apache.skywalking.oap.server.receiver.zipkin.analysis.transform;
 
 import com.google.gson.JsonObject;
 import java.io.UnsupportedEncodingException;
@@ -26,7 +26,7 @@
 import org.apache.skywalking.oap.server.core.register.NodeType;
 import org.apache.skywalking.oap.server.core.register.service.*;
 import org.apache.skywalking.oap.server.receiver.zipkin.CoreRegisterLinker;
-import org.apache.skywalking.oap.server.receiver.zipkin.data.*;
+import org.apache.skywalking.oap.server.receiver.zipkin.analysis.data.*;
 import org.junit.*;
 import org.powermock.reflect.Whitebox;
 import zipkin2.Span;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java
Patch:
@@ -59,15 +59,15 @@ public void setPassword(String password) {
         this.password = password;
     }
 
-    int getIndexShardsNumber() {
+    public int getIndexShardsNumber() {
         return indexShardsNumber;
     }
 
     void setIndexShardsNumber(int indexShardsNumber) {
         this.indexShardsNumber = indexShardsNumber;
     }
 
-    int getIndexReplicasNumber() {
+    public int getIndexReplicasNumber() {
         return indexReplicasNumber;
     }
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -70,8 +70,8 @@ public class StorageModuleElasticsearchProvider extends ModuleProvider {
 
     private static final Logger logger = LoggerFactory.getLogger(StorageModuleElasticsearchProvider.class);
 
-    private final StorageModuleElasticsearchConfig config;
-    private ElasticSearchClient elasticSearchClient;
+    protected final StorageModuleElasticsearchConfig config;
+    protected ElasticSearchClient elasticSearchClient;
 
     public StorageModuleElasticsearchProvider() {
         super();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorPersistentWorker.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.skywalking.oap.server.core.analysis.indicator.Indicator;
 import org.apache.skywalking.oap.server.core.storage.IIndicatorDAO;
 import org.apache.skywalking.oap.server.core.worker.AbstractWorker;
-import org.apache.skywalking.oap.server.library.module.ModuleManager;
+import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;
 import org.slf4j.*;
 
 import static java.util.Objects.nonNull;
@@ -45,10 +45,10 @@ public class IndicatorPersistentWorker extends PersistenceWorker<Indicator, Merg
     private final AbstractWorker<Indicator> nextExportWorker;
     private final DataCarrier<Indicator> dataCarrier;
 
-    IndicatorPersistentWorker(int workerId, String modelName, int batchSize, ModuleManager moduleManager,
+    IndicatorPersistentWorker(ModuleDefineHolder moduleDefineHolder, String modelName, int batchSize,
         IIndicatorDAO indicatorDAO, AbstractWorker<Indicator> nextAlarmWorker,
         AbstractWorker<Indicator> nextExportWorker) {
-        super(moduleManager, workerId, batchSize);
+        super(moduleDefineHolder, batchSize);
         this.modelName = modelName;
         this.mergeDataCache = new MergeDataCache<>();
         this.indicatorDAO = indicatorDAO;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/RecordPersistentWorker.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.skywalking.oap.server.core.analysis.data.NonMergeDataCache;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.storage.IRecordDAO;
-import org.apache.skywalking.oap.server.library.module.ModuleManager;
+import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;
 import org.slf4j.*;
 
 /**
@@ -40,9 +40,9 @@ public class RecordPersistentWorker extends PersistenceWorker<Record, NonMergeDa
     private final IRecordDAO recordDAO;
     private final DataCarrier<Record> dataCarrier;
 
-    RecordPersistentWorker(int workerId, String modelName, int batchSize, ModuleManager moduleManager,
+    RecordPersistentWorker(ModuleDefineHolder moduleDefineHolder, String modelName, int batchSize,
         IRecordDAO recordDAO) {
-        super(moduleManager, workerId, batchSize);
+        super(moduleDefineHolder, batchSize);
         this.modelName = modelName;
         this.nonMergeDataCache = new NonMergeDataCache<>();
         this.recordDAO = recordDAO;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/RegisterDistinctWorker.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.oap.server.core.analysis.data.EndOfBatchContext;
 import org.apache.skywalking.oap.server.core.register.RegisterSource;
 import org.apache.skywalking.oap.server.core.worker.AbstractWorker;
+import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;
 import org.slf4j.*;
 
 /**
@@ -39,8 +40,8 @@ public class RegisterDistinctWorker extends AbstractWorker<RegisterSource> {
     private final Map<RegisterSource, RegisterSource> sources;
     private int messageNum;
 
-    RegisterDistinctWorker(int workerId, AbstractWorker<RegisterSource> nextWorker) {
-        super(workerId);
+    RegisterDistinctWorker(ModuleDefineHolder moduleDefineHolder, AbstractWorker<RegisterSource> nextWorker) {
+        super(moduleDefineHolder);
         this.nextWorker = nextWorker;
         this.sources = new HashMap<>();
         this.dataCarrier = new DataCarrier<>(1, 1000);

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientRealClient.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.skywalking.oap.server.core.remote.data.StreamData;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.worker.AbstractWorker;
+import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
 import org.apache.skywalking.oap.server.telemetry.api.*;
 import org.apache.skywalking.oap.server.testing.module.*;
@@ -96,8 +97,8 @@ public static class TestStreamData extends StreamData {
 
     static class TestWorker extends AbstractWorker {
 
-        public TestWorker(int workerId) {
-            super(workerId);
+        public TestWorker(ModuleDefineHolder moduleDefineHolder) {
+            super(moduleDefineHolder);
         }
 
         @Override public void in(Object o) {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java
Patch:
@@ -44,6 +44,7 @@
  */
 public abstract class AbstractMethodInterceptor implements InstanceMethodsAroundInterceptor {
     public abstract String getRequestURL(Method method);
+    public abstract String getAcceptedMethodTypes(Method method);
 
     @Override
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
@@ -67,7 +68,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             if (requestURL == null) {
                 requestURL = getRequestURL(method);
                 pathMappingCache.addPathMapping(method, requestURL);
-                requestURL = pathMappingCache.findPathMapping(method);
+                requestURL = getAcceptedMethodTypes(method) + pathMappingCache.findPathMapping(method);
             }
             operationName = requestURL;
         }

File: oap-server/generate-tool/src/test/resources/expectedFiles/ServiceDispatcherExpected.java
Patch:
@@ -40,6 +40,9 @@ private void doServiceAvg(Service source) {
         if (!new EqualMatch().setLeft(source.getName()).setRight("/service/prod/save").match()) {
             return;
         }
+        if (!new GreaterMatch().match(source.getLatency(), 1000)) {
+            return;
+        }
 
         indicator.setTimeBucket(source.getTimeBucket());
         indicator.setEntityId(source.getEntityId());

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java
Patch:
@@ -323,6 +323,7 @@ public SpanObjectV2.Builder transform() {
 
     @Override public AbstractSpan prepareForAsync() {
         context = ContextManager.awaitFinishAsync(this);
+        isInAsyncMode = true;
         return this;
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/AbstractTracerContext.java
Patch:
@@ -103,6 +103,8 @@ public interface AbstractTracerContext {
 
     /**
      * Notify this context, current span is going to be finished async in another thread.
+     *
+     * @return The current context
      */
     AbstractTracerContext awaitFinishAsync();
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/AsyncSpan.java
Patch:
@@ -32,7 +32,8 @@ public interface AsyncSpan {
      * The span finish at current tracing context, but the current span is still alive, until {@link #asyncFinish}
      * called.
      *
-     * This method must be called<br/>
+     * This method must be called
+     * 
      * 1. In original thread(tracing context).
      * 2. Current span is active span.
      *

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.apm.agent.core.context.trace;
 
 import java.util.Map;
+import org.apache.skywalking.apm.agent.core.context.AsyncSpan;
 import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;
 import org.apache.skywalking.apm.network.trace.component.Component;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
@@ -28,7 +29,7 @@
  *
  * @author wusheng
  */
-public interface AbstractSpan {
+public interface AbstractSpan extends AsyncSpan {
     /**
      * Set the component id, which defines in {@link ComponentsDefine}
      *

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -193,4 +193,5 @@ public static class Toolkit {
              */
             public static boolean USE_QUALIFIED_NAME_AS_ENDPOINT_NAME = false;
         }
+    }
 }

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v5/define/Mysql50ConnectionInstrumentation.java
Patch:
@@ -17,7 +17,7 @@
  */
 
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.define;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v5.define;
 
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
@@ -29,7 +29,7 @@
  *
  * @author zhangxin
  */
-public class Mysql50ConnectionInstrumentation extends ConnectionInstrumentation {
+public class Mysql50ConnectionInstrumentation extends AbstractConnectionInstrumentation {
     @Override
     protected ClassMatch enhanceClass() {
         return byName("com.mysql.jdbc.Connection");

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateJdbcConnectionProxyInstanceInterceptor.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6;
 
 import com.mysql.cj.api.jdbc.JdbcConnection;
 import com.mysql.cj.core.conf.url.ConnectionUrl;
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
-import org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper.JdbcConnectionWrapper;
+import org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper.JdbcConnectionWrapper;
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 public class CreateJdbcConnectionProxyInstanceInterceptor implements StaticMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateLoadBalancedConnectionProxyInstanceInterceptor.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6;
 
 import com.mysql.cj.api.jdbc.ha.LoadBalancedConnection;
 import com.mysql.cj.core.conf.url.ConnectionUrl;
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
-import org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper.LoadBalancedConnectionWrapper;
+import org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper.LoadBalancedConnectionWrapper;
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 public class CreateLoadBalancedConnectionProxyInstanceInterceptor implements StaticMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/CreateReplicationConnectionProxyInstanceInterceptor.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6;
 
 import com.mysql.cj.api.jdbc.ha.ReplicationConnection;
 import com.mysql.cj.core.conf.url.ConnectionUrl;
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
-import org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper.ReplicationConnectionWrapper;
+import org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper.ReplicationConnectionWrapper;
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 public class CreateReplicationConnectionProxyInstanceInterceptor implements StaticMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/CallableStatementWrapper.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;
 
 import java.io.InputStream;
 import java.io.Reader;

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/JdbcConnectionWrapper.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;
 
 import com.mysql.cj.api.exceptions.ExceptionInterceptor;
 import com.mysql.cj.api.jdbc.ClientInfoProvider;

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/LoadBalancedConnectionWrapper.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;
 
 import com.mysql.cj.api.jdbc.ha.LoadBalancedConnection;
 import java.sql.SQLException;

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/PreparedStatementWrapper.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;
 
 import java.io.InputStream;
 import java.io.Reader;

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/ReplicationConnectionWrapper.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;
 
 import com.mysql.cj.api.jdbc.JdbcConnection;
 import com.mysql.cj.api.jdbc.ha.ReplicationConnection;

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/StatementWrapper.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;
 
 import java.sql.Connection;
 import java.sql.ResultSet;

File: apm-sniffer/apm-sdk-plugin/mysql-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/v6/wrapper/TracingUtils.java
Patch:
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.wrapper;
+package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper;
 
 import java.sql.SQLException;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/SetCatalogInterceptor.java
Patch:
@@ -18,12 +18,13 @@
 
 package org.apache.skywalking.apm.plugin.jdbc.mysql;
 
-import java.lang.reflect.Method;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
+import java.lang.reflect.Method;
+
 public class SetCatalogInterceptor implements InstanceMethodsAroundInterceptor {
     @Override
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateCallableStatementInterceptorTest.java
Patch:
@@ -19,14 +19,14 @@
 
 package org.apache.skywalking.apm.plugin.jdbc.mysql;
 
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
+import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreatePreparedStatementInterceptorTest.java
Patch:
@@ -19,14 +19,14 @@
 
 package org.apache.skywalking.apm.plugin.jdbc.mysql;
 
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
+import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: apm-sniffer/apm-sdk-plugin/mysql-common/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateStatementInterceptorTest.java
Patch:
@@ -20,13 +20,13 @@
 package org.apache.skywalking.apm.plugin.jdbc.mysql;
 
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
+import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
-import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/PluginBootstrap.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.plugin;
 
 import java.net.URL;
@@ -78,6 +77,8 @@ public List<AbstractClassEnhancePluginDefine> loadPlugins() throws AgentPackageN
             }
         }
 
+        plugins.addAll(DynamicPluginLoader.INSTANCE.load(AgentClassLoader.getDefault()));
+
         return plugins;
 
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -28,9 +28,8 @@
 import org.apache.skywalking.oap.server.core.remote.client.RemoteClientManager;
 import org.apache.skywalking.oap.server.core.server.*;
 import org.apache.skywalking.oap.server.core.source.SourceReceiver;
-import org.apache.skywalking.oap.server.core.storage.model.IModelGetter;
-import org.apache.skywalking.oap.server.core.storage.model.IModelOverride;
-import org.apache.skywalking.oap.server.library.module.*;
+import org.apache.skywalking.oap.server.core.storage.model.*;
+import org.apache.skywalking.oap.server.library.module.ModuleDefine;
 
 /**
  * @author peng-yongsheng
@@ -45,6 +44,7 @@ public CoreModule() {
 
     @Override public Class[] services() {
         List<Class> classes = new ArrayList<>();
+        classes.add(ConfigService.class);
         classes.add(DownsamplingConfigService.class);
         classes.add(IComponentLibraryCatalogService.class);
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java
Patch:
@@ -27,7 +27,7 @@
  */
 @Getter
 public class CoreModuleConfig extends ModuleConfig {
-    @Setter private String role;
+    @Setter private String role = "Mixed";
     @Setter private String nameSpace;
     @Setter private String restHost;
     @Setter private int restPort;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -106,6 +106,7 @@ public CoreModuleProvider() {
         jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath(), moduleConfig.getJettySelectors());
         jettyServer.initialize();
 
+        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));
         this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));
 
         this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));
@@ -176,7 +177,7 @@ public CoreModuleProvider() {
             throw new ModuleStartException(e.getMessage(), e);
         }
 
-        if (CoreModuleConfig.Role.Mixed.name().equals(moduleConfig.getRole()) || CoreModuleConfig.Role.Aggregator.name().equals(moduleConfig.getRole())) {
+        if (CoreModuleConfig.Role.Mixed.name().equalsIgnoreCase(moduleConfig.getRole()) || CoreModuleConfig.Role.Aggregator.name().equalsIgnoreCase(moduleConfig.getRole())) {
             RemoteInstance gRPCServerInstance = new RemoteInstance(new Address(moduleConfig.getGRPCHost(), moduleConfig.getGRPCPort(), true));
             this.getManager().find(ClusterModule.NAME).provider().getService(ClusterRegister.class).registerRemote(gRPCServerInstance);
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/client/Address.java
Patch:
@@ -28,7 +28,7 @@
 public class Address implements Comparable<Address> {
     private final String host;
     private final int port;
-    @Setter private boolean isSelf;
+    @Setter private volatile boolean isSelf;
 
     public Address(String host, int port, boolean isSelf) {
         this.host = host;

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/MetricServiceGRPCHandler.java
Patch:
@@ -96,6 +96,7 @@ public StreamObserver<StreamMetricsMessage> streamMetrics(StreamObserver<StreamM
 
                 if (serviceInstanceId != Const.NONE) {
                     List<Metrics.MetricFamily> list = message.getEnvoyMetricsList();
+                    boolean needHeartbeatUpdate = true;
                     for (int i = 0; i < list.size(); i++) {
                         counter.inc();
                         HistogramMetric.Timer timer = histogram.createTimer();
@@ -123,10 +124,11 @@ public StreamObserver<StreamMetricsMessage> streamMetrics(StreamObserver<StreamM
                                 default:
                                     continue;
                             }
-                            if (i == 0) {
+                            if (needHeartbeatUpdate) {
                                 // Send heartbeat
                                 serviceInventoryRegister.heartbeat(serviceId, timestamp);
                                 serviceInstanceInventoryRegister.heartbeat(serviceInstanceId, timestamp);
+                                needHeartbeatUpdate = false;
                             }
                         } finally {
                             timer.finish();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/EnvoyInstanceMetric.java
Patch:
@@ -44,7 +44,6 @@ public class EnvoyInstanceMetric extends Source {
      */
     @Getter @Setter private int id;
     @Getter @Setter private int serviceId;
-    @Getter @Setter private int serviceInstanceId;
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
     @Getter @Setter private String metricName;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceCLRCPU.java
Patch:
@@ -39,6 +39,6 @@ public class ServiceInstanceCLRCPU extends Source {
     @Getter @Setter private int id;
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
-    @Getter @Setter private int serviceInstanceId;
+    @Getter @Setter private int serviceId;
     @Getter @Setter private double usePercent;
 }
\ No newline at end of file

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceCLRGC.java
Patch:
@@ -39,7 +39,7 @@ public class ServiceInstanceCLRGC extends Source {
     @Getter @Setter private int id;
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
-    @Getter @Setter private int serviceInstanceId;
+    @Getter @Setter private int serviceId;
     @Getter @Setter private int gen0CollectCount;
     @Getter @Setter private int gen1CollectCount;
     @Getter @Setter private int gen2CollectCount;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceCLRThread.java
Patch:
@@ -39,7 +39,7 @@ public class ServiceInstanceCLRThread extends Source {
     @Getter @Setter private int id;
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
-    @Getter @Setter private int serviceInstanceId;
+    @Getter @Setter private int serviceId;
     @Getter @Setter private long availableCompletionPortThreads;
     @Getter @Setter private long availableWorkerThreads;
     @Getter @Setter private long maxCompletionPortThreads;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMCPU.java
Patch:
@@ -38,6 +38,6 @@ public class ServiceInstanceJVMCPU extends Source {
     @Getter @Setter private int id;
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
-    @Getter @Setter private int serviceInstanceId;
+    @Getter @Setter private int serviceId;
     @Getter @Setter private double usePercent;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMGC.java
Patch:
@@ -38,7 +38,7 @@ public class ServiceInstanceJVMGC extends Source {
     @Getter @Setter private int id;
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
-    @Getter @Setter private int serviceInstanceId;
+    @Getter @Setter private int serviceId;
     @Getter @Setter private GCPhrase phrase;
     @Getter @Setter private long time;
     @Getter @Setter private long count;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMMemory.java
Patch:
@@ -38,7 +38,7 @@ public class ServiceInstanceJVMMemory extends Source {
     @Getter @Setter private int id;
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
-    @Getter @Setter private int serviceInstanceId;
+    @Getter @Setter private int serviceId;
     @Getter @Setter private boolean heapStatus;
     @Getter @Setter private long init;
     @Getter @Setter private long max;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMMemoryPool.java
Patch:
@@ -38,7 +38,7 @@ public class ServiceInstanceJVMMemoryPool extends Source {
     @Getter @Setter private int id;
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
-    @Getter @Setter private int serviceInstanceId;
+    @Getter @Setter private int serviceId;
     @Getter @Setter private MemoryPoolType poolType;
     @Getter @Setter private long init;
     @Getter @Setter private long max;

File: oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/MetricServiceGRPCHandler.java
Patch:
@@ -113,7 +113,6 @@ public StreamObserver<StreamMetricsMessage> streamMetrics(StreamObserver<StreamM
                                         metricSource.setServiceId(serviceId);
                                         metricSource.setServiceName(serviceName);
                                         metricSource.setId(serviceInstanceId);
-                                        metricSource.setServiceInstanceId(serviceInstanceId);
                                         metricSource.setName(serviceInstanceName);
                                         metricSource.setMetricName(metricFamily.getName());
                                         metricSource.setValue(value);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/MaxLongIndicator.java
Patch:
@@ -29,7 +29,7 @@
  * @author liuhaoyang
  **/
 @IndicatorFunction(functionName = "max")
-public abstract class MaxIndicator extends Indicator implements LongValueHolder {
+public abstract class MaxLongIndicator extends Indicator implements LongValueHolder {
 
     protected static final String VALUE = "value";
 
@@ -43,7 +43,7 @@ public final void combine(@SourceFrom long count) {
     }
 
     @Override public final void combine(Indicator indicator) {
-        MaxIndicator countIndicator = (MaxIndicator)indicator;
+        MaxLongIndicator countIndicator = (MaxLongIndicator)indicator;
         combine(countIndicator.value);
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/expression/EqualMatch.java
Patch:
@@ -19,11 +19,12 @@
 package org.apache.skywalking.oap.server.core.analysis.indicator.expression;
 
 /**
+ *
  *
  * @author wusheng
  */
 public class EqualMatch extends BinaryMatchExpression {
     @Override public boolean match() {
-        return left == right;
+        return left.equals(right);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/RegisterPersistentWorker.java
Patch:
@@ -91,7 +91,7 @@ private void onWork(RegisterSource registerSource) {
                         }
                     } else {
                         int sequence;
-                        if ((sequence = registerLockDAO.getId(scopeId, registerSource)) != Const.NONE) {
+                        if ((sequence = registerLockDAO.getId(scopeId, source)) != Const.NONE) {
                             try {
                                 dbSource = registerDAO.get(modelName, source.id());
                                 if (Objects.nonNull(dbSource)) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java
Patch:
@@ -50,6 +50,9 @@ public class DefaultScopeDefine {
     public static final int ENDPOINT_INVENTORY = 16;
     public static final int DATABASE_ACCESS = 17;
     public static final int DATABASE_SLOW_STATEMENT = 18;
+    public static final int SERVICE_INSTANCE_CLR_CPU = 19;
+    public static final int SERVICE_INSTANCE_CLR_GC = 20;
+    public static final int SERVICE_INSTANCE_CLR_THREAD = 21;
 
     public static class Listener implements AnnotationListener {
         @Override public Class<? extends Annotation> annotation() {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java
Patch:
@@ -127,4 +127,6 @@ public interface AbstractSpan {
     void ref(TraceSegmentRef ref);
 
     AbstractSpan start(long starttime);
+
+    AbstractSpan setPeer(String remotePeer);
 }

File: oap-server/generate-tool/src/main/java/org/apache/skywalking/oal/tool/parser/AnalysisResult.java
Patch:
@@ -34,6 +34,8 @@ public class AnalysisResult {
 
     private String sourceName;
 
+    private int sourceScopeId;
+
     private String sourceAttribute;
 
     private String aggregationFunctionName;

File: oap-server/generate-tool/src/main/java/org/apache/skywalking/oal/tool/parser/OALListener.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 import org.antlr.v4.runtime.misc.NotNull;
 import org.apache.skywalking.oal.tool.grammar.*;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 
 public class OALListener extends OALParserBaseListener {
     private List<AnalysisResult> results;
@@ -46,6 +47,7 @@ public void exitAggregationStatement(@NotNull OALParser.AggregationStatementCont
 
     @Override public void enterSource(OALParser.SourceContext ctx) {
         current.setSourceName(ctx.getText());
+        current.setSourceScopeId(DefaultScopeDefine.valueOf(metricNameFormat(ctx.getText())));
     }
 
     @Override

File: oap-server/generate-tool/src/test/resources/expectedFiles/IndicatorImplementorExpected.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
-import org.apache.skywalking.oap.server.core.source.Scope;
 
 /**
  * This class is auto generated. Please don't change this class manually.
@@ -38,7 +37,7 @@
  */
 @IndicatorType
 @StreamData
-@StorageEntity(name = "service_avg", builder = ServiceAvgIndicator.Builder.class, source = Scope.Service)
+@StorageEntity(name = "service_avg", builder = ServiceAvgIndicator.Builder.class, sourceScopeId = 1)
 public class ServiceAvgIndicator extends LongAvgIndicator implements AlarmSupported {
 
     @Setter @Getter @Column(columnName = "entity_id") @IDColumn private java.lang.String entityId;
@@ -110,7 +109,7 @@ public class ServiceAvgIndicator extends LongAvgIndicator implements AlarmSuppor
     }
 
     @Override public AlarmMeta getAlarmMeta() {
-        return new AlarmMeta("generate_indicator", Scope.Service, entityId);
+        return new AlarmMeta("generate_indicator", 1, entityId);
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.skywalking.oap.server.core.alarm;
 
 import lombok.*;
-import org.apache.skywalking.oap.server.core.source.Scope;
 
 /**
  * Alarm message represents the details of each alarm.
@@ -32,7 +31,7 @@ public class AlarmMessage {
 
     public static AlarmMessage NONE = new NoAlarm();
 
-    private Scope scope;
+    private int scopeId;
     private String name;
     private int id0;
     private int id1;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmStandardPersistence.java
Patch:
@@ -39,7 +39,7 @@ public class AlarmStandardPersistence implements AlarmCallback {
             }
 
             AlarmRecord record = new AlarmRecord();
-            record.setScope(message.getScope().ordinal());
+            record.setScope(message.getScopeId());
             record.setId0(message.getId0());
             record.setId1(message.getId1());
             record.setName(message.getName());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/EndpointMetaInAlarm.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 
 @Getter(AccessLevel.PUBLIC)
 @Setter(AccessLevel.PUBLIC)
@@ -33,8 +33,8 @@ public class EndpointMetaInAlarm extends MetaInAlarm {
     private String[] tags;
     private String[] properties;
 
-    @Override public Scope getScope() {
-        return Scope.Endpoint;
+    @Override public int getScopeId() {
+        return DefaultScopeDefine.ENDPOINT;
     }
 
     @Override public int getId0() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/MetaInAlarm.java
Patch:
@@ -19,18 +19,17 @@
 package org.apache.skywalking.oap.server.core.alarm;
 
 import java.util.Objects;
-import org.apache.skywalking.oap.server.core.source.Scope;
 
 public abstract class MetaInAlarm {
-    public abstract Scope getScope();
+    public abstract int getScopeId();
 
     public abstract String getName();
 
     public abstract String getIndicatorName();
 
     /**
      * In most scopes, there is only id0, as primary id. Such as Service, Endpoint. But in relation, the ID includes
-     * two, actually. Such as ServiceRelation, id0 represents the source service id
+     * two, actually. Such as ServiceRelation, id0 represents the sourceScopeId service id
      *
      * @return the primary id.
      */

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/ServiceInstanceMetaInAlarm.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 
 @Getter(AccessLevel.PUBLIC)
 @Setter(AccessLevel.PUBLIC)
@@ -33,8 +33,8 @@ public class ServiceInstanceMetaInAlarm extends MetaInAlarm {
     private String[] tags;
     private String[] properties;
 
-    @Override public Scope getScope() {
-        return Scope.ServiceInstance;
+    @Override public int getScopeId() {
+        return DefaultScopeDefine.SERVICE_INSTANCE;
     }
 
     @Override public int getId0() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/ServiceMetaInAlarm.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 
 @Getter(AccessLevel.PUBLIC)
 @Setter(AccessLevel.PUBLIC)
@@ -33,8 +33,8 @@ public class ServiceMetaInAlarm extends MetaInAlarm {
     private String[] tags;
     private String[] properties;
 
-    @Override public Scope getScope() {
-        return Scope.Service;
+    @Override public int getScopeId() {
+        return DefaultScopeDefine.SERVICE;
     }
 
     @Override public int getId0() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/database/TopNDatabaseStatement.java
Patch:
@@ -20,10 +20,9 @@
 
 import java.util.*;
 import lombok.*;
-import org.apache.skywalking.oap.server.core.*;
 import org.apache.skywalking.oap.server.core.analysis.topn.TopN;
 import org.apache.skywalking.oap.server.core.analysis.topn.annotation.TopNType;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 
@@ -33,7 +32,7 @@
  * @author wusheng
  */
 @TopNType
-@StorageEntity(name = TopNDatabaseStatement.INDEX_NAME, builder = TopNDatabaseStatement.Builder.class, source = Scope.DatabaseSlowStatement)
+@StorageEntity(name = TopNDatabaseStatement.INDEX_NAME, builder = TopNDatabaseStatement.Builder.class, sourceScopeId = DefaultScopeDefine.DATABASE_SLOW_STATEMENT)
 public class TopNDatabaseStatement extends TopN {
     public static final String INDEX_NAME = "top_n_database_statement";
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/endpointrelation/EndpointRelationServerSideIndicator.java
Patch:
@@ -25,13 +25,13 @@
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorType;
 import org.apache.skywalking.oap.server.core.remote.annotation.StreamData;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 
 @IndicatorType
 @StreamData
-@StorageEntity(name = EndpointRelationServerSideIndicator.INDEX_NAME, builder = EndpointRelationServerSideIndicator.Builder.class, source = Scope.EndpointRelation)
+@StorageEntity(name = EndpointRelationServerSideIndicator.INDEX_NAME, builder = EndpointRelationServerSideIndicator.Builder.class, sourceScopeId = DefaultScopeDefine.ENDPOINT_RELATION)
 public class EndpointRelationServerSideIndicator extends Indicator {
 
     public static final String INDEX_NAME = "endpoint_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.analysis.record.annotation.RecordType;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
@@ -33,7 +33,7 @@
  * @author peng-yongsheng
  */
 @RecordType
-@StorageEntity(name = SegmentRecord.INDEX_NAME, builder = SegmentRecord.Builder.class, source = Scope.Segment)
+@StorageEntity(name = SegmentRecord.INDEX_NAME, builder = SegmentRecord.Builder.class, sourceScopeId = DefaultScopeDefine.SEGMENT)
 public class SegmentRecord extends Record {
 
     public static final String INDEX_NAME = "segment";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/servicerelation/ServiceRelationClientSideIndicator.java
Patch:
@@ -25,13 +25,13 @@
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorType;
 import org.apache.skywalking.oap.server.core.remote.annotation.StreamData;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 
 @IndicatorType
 @StreamData
-@StorageEntity(name = ServiceRelationClientSideIndicator.INDEX_NAME, builder = ServiceRelationClientSideIndicator.Builder.class, source = Scope.ServiceRelation)
+@StorageEntity(name = ServiceRelationClientSideIndicator.INDEX_NAME, builder = ServiceRelationClientSideIndicator.Builder.class, sourceScopeId = DefaultScopeDefine.SERVICE_RELATION)
 public class ServiceRelationClientSideIndicator extends Indicator {
 
     public static final String INDEX_NAME = "service_relation_client_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/servicerelation/ServiceRelationServerSideIndicator.java
Patch:
@@ -25,14 +25,14 @@
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorType;
 import org.apache.skywalking.oap.server.core.remote.annotation.StreamData;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 
 @IndicatorType
 @StreamData
 @StorageEntity(name = ServiceRelationServerSideIndicator.INDEX_NAME, builder = ServiceRelationServerSideIndicator.Builder.class,
-    source = Scope.ServiceRelation)
+    sourceScopeId = DefaultScopeDefine.SERVICE_RELATION)
 public class ServiceRelationServerSideIndicator extends Indicator {
 
     public static final String INDEX_NAME = "service_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/annotation/AnnotationScan.java
Patch:
@@ -56,7 +56,9 @@ public void scan(Runnable callBack) throws IOException {
             listener.complete()
         );
 
-        callBack.run();
+        if (callBack != null) {
+            callBack.run();
+        }
     }
 
     public class AnnotationListenerCache {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/AlarmQueryService.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.IOException;
 import org.apache.skywalking.oap.server.core.query.entity.*;
-import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.library.module.*;
@@ -48,9 +47,9 @@ private IAlarmQueryDAO getAlarmQueryDAO() {
         return alarmQueryDAO;
     }
 
-    public Alarms getAlarm(final Scope scope, final String keyword, final Pagination paging, final long startTB,
+    public Alarms getAlarm(final Integer scopeId, final String keyword, final Pagination paging, final long startTB,
         final long endTB) throws IOException {
         PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(paging);
-        return getAlarmQueryDAO().getAlarm(scope, keyword, page.getLimit(), page.getFrom(), startTB, endTB);
+        return getAlarmQueryDAO().getAlarm(scopeId, keyword, page.getLimit(), page.getFrom(), startTB, endTB);
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/AlarmMessage.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.skywalking.oap.server.core.query.entity;
 
 import lombok.*;
-import org.apache.skywalking.oap.server.core.source.Scope;
 
 /**
  * @author peng-yongsheng
@@ -28,6 +27,7 @@
 @Setter
 public class AlarmMessage {
     private Scope scope;
+    private int scopeId;
     private String id;
     private String message;
     private Long startTime;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Source.java
Patch:
@@ -24,7 +24,7 @@
  * @author peng-yongsheng
  */
 public abstract class Source {
-    public abstract Scope scope();
+    public abstract int scope();
 
     @Getter @Setter private long timeBucket;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/IRegisterLockDAO.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.skywalking.oap.server.core.storage;
 
 import org.apache.skywalking.oap.server.core.register.RegisterSource;
-import org.apache.skywalking.oap.server.core.source.Scope;
 
 /**
  * Entity register and ID generator.
@@ -32,8 +31,8 @@ public interface IRegisterLockDAO extends DAO {
      * in concurrent way, so no `sync` in method level, but the implementation must make sure the return id is unique no
      * matter the cluster size.
      *
-     * @param scope for the id. IDs at different scopes could be same, but unique in same scope.
+     * @param scopeId for the id. IDs at different scopes could be same, but unique in same scope.
      * @return Unique ID.
      */
-    int getId(Scope scope, RegisterSource registerSource);
+    int getId(int scopeId, RegisterSource registerSource);
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/StorageEntityAnnotationUtils.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.skywalking.oap.server.core.storage.annotation;
 
 import org.apache.skywalking.oap.server.core.UnexpectedException;
-import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 
 /**
@@ -54,10 +53,10 @@ public static Class<? extends StorageBuilder> getBuilder(Class aClass) {
         }
     }
 
-    public static Scope getSourceScope(Class aClass) {
+    public static int getSourceScope(Class aClass) {
         if (aClass.isAnnotationPresent(StorageEntity.class)) {
             StorageEntity annotation = (StorageEntity)aClass.getAnnotation(StorageEntity.class);
-            return annotation.source();
+            return annotation.sourceScopeId();
         } else {
             throw new UnexpectedException("");
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IAlarmQueryDAO.java
Patch:
@@ -19,15 +19,14 @@
 package org.apache.skywalking.oap.server.core.storage.query;
 
 import java.io.IOException;
-import org.apache.skywalking.oap.server.core.query.entity.*;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.query.entity.Alarms;
 import org.apache.skywalking.oap.server.core.storage.DAO;
 
 /**
  * @author peng-yongsheng
  */
 public interface IAlarmQueryDAO extends DAO {
 
-    Alarms getAlarm(final Scope scope, final String keyword, final int limit, final int from, final long startTB,
+    Alarms getAlarm(final Integer scopeId, final String keyword, final int limit, final int from, final long startTB,
         final long endTB) throws IOException;
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java
Patch:
@@ -20,11 +20,10 @@
 
 import com.coxautodev.graphql.tools.GraphQLQueryResolver;
 import java.io.IOException;
-import org.apache.skywalking.oap.query.graphql.type.Duration;
+import org.apache.skywalking.oap.query.graphql.type.*;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.query.*;
 import org.apache.skywalking.oap.server.core.query.entity.*;
-import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 
 /**
@@ -55,6 +54,6 @@ public Alarms getAlarm(final Duration duration, final Scope scope, final String
         long startTimeBucket = DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(duration.getStep(), duration.getStart());
         long endTimeBucket = DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(duration.getStep(), duration.getEnd());
 
-        return getQueryService().getAlarm(scope, keyword, paging, startTimeBucket, endTimeBucket);
+        return getQueryService().getAlarm(scope.getScopeId(), keyword, paging, startTimeBucket, endTimeBucket);
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/lock/RegisterLockDAOImpl.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Map;
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.register.RegisterSource;
-import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.IRegisterLockDAO;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.EsDAO;
@@ -41,8 +40,8 @@ public RegisterLockDAOImpl(ElasticSearchClient client) {
         super(client);
     }
 
-    @Override public int getId(Scope scope, RegisterSource registerSource) {
-        String id = String.valueOf(scope.ordinal());
+    @Override public int getId(int scopeId, RegisterSource registerSource) {
+        String id = scopeId + "";
 
         int sequence = Const.NONE;
         try {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/lock/RegisterLockInstaller.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.io.IOException;
 import org.apache.skywalking.oap.server.core.register.worker.InventoryProcess;
-import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
 import org.apache.skywalking.oap.server.core.storage.annotation.StorageEntityAnnotationUtils;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
@@ -56,8 +55,8 @@ public void install() throws StorageException {
             }
 
             for (Class registerSource : InventoryProcess.INSTANCE.getAllRegisterSources()) {
-                Scope sourceScope = StorageEntityAnnotationUtils.getSourceScope(registerSource);
-                putIfAbsent(sourceScope.ordinal());
+                int sourceScopeId = StorageEntityAnnotationUtils.getSourceScope(registerSource);
+                putIfAbsent(sourceScopeId);
             }
         } catch (IOException e) {
             throw new StorageException(e.getMessage());

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java
Patch:
@@ -217,7 +217,7 @@ public List<Endpoint> searchEndpoint(String keyword, String serviceId,
         sql.append(EndpointInventory.SERVICE_ID).append("=?");
         condition.add(serviceId);
         if (!Strings.isNullOrEmpty(keyword)) {
-            sql.append(" and ").append(EndpointInventory.NAME).append(" like \"%").append(keyword).append("%\" ");
+            sql.append(" and ").append(EndpointInventory.NAME).append(" like '%").append(keyword).append("%' ");
         }
         sql.append(" and ").append(EndpointInventory.DETECT_POINT).append(" = ?");
         condition.add(DetectPoint.SERVER.ordinal());

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2RegisterLockInstaller.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.sql.*;
 import org.apache.skywalking.oap.server.core.register.worker.InventoryProcess;
-import org.apache.skywalking.oap.server.core.source.Scope;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
 import org.apache.skywalking.oap.server.core.storage.StorageException;
 import org.apache.skywalking.oap.server.core.storage.annotation.StorageEntityAnnotationUtils;
 import org.apache.skywalking.oap.server.library.client.Client;
@@ -60,8 +60,8 @@ public void install(Client client, H2RegisterLockDAO dao) throws StorageExceptio
             h2Client.execute(connection, tableCreateSQL.toString());
 
             for (Class registerSource : InventoryProcess.INSTANCE.getAllRegisterSources()) {
-                Scope sourceScope = StorageEntityAnnotationUtils.getSourceScope(registerSource);
-                putIfAbsent(h2Client, connection, sourceScope.ordinal(), sourceScope.name());
+                int scopeId = StorageEntityAnnotationUtils.getSourceScope(registerSource);
+                putIfAbsent(h2Client, connection, scopeId, DefaultScopeDefine.nameOf(scopeId));
             }
         } catch (JDBCClientException | SQLException e) {
             throw new StorageException(e.getMessage(), e);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/PreventRedistributionMySQLDriverTest.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * This is a very special test case. It isn't for feature testing.
  *
- * In Apache, we can't redistribute MySQL Driver, because of GPL license, but we deliver MySQL solution source codes and
+ * In Apache, we can't redistribute MySQL Driver, because of GPL license, but we deliver MySQL solution sourceScopeId codes and
  * distribution by using JDBC.
  *
  * @author wusheng

File: apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java
Patch:
@@ -74,9 +74,8 @@ private boolean consume(Group target) {
             Buffer buffer = target.channels.getBuffer(i);
             consumeList.addAll(buffer.obtain());
         }
-        hasData = consumeList.size() > 0;
 
-        if (consumeList.size() > 0) {
+        if (hasData = consumeList.size() > 0) {
             try {
                 target.consumer.consume(consumeList);
             } catch (Throwable t) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorAggregateWorker.java
Patch:
@@ -47,15 +47,16 @@ public class IndicatorAggregateWorker extends AbstractWorker<Indicator> {
     private final String modelName;
     private CounterMetric aggregationCounter;
 
-    IndicatorAggregateWorker(ModuleManager moduleManager, int workerId, AbstractWorker<Indicator> nextWorker, String modelName) {
+    IndicatorAggregateWorker(ModuleManager moduleManager, int workerId, AbstractWorker<Indicator> nextWorker,
+        String modelName) {
         super(workerId);
         this.modelName = modelName;
         this.nextWorker = nextWorker;
         this.mergeDataCache = new MergeDataCache<>();
         this.dataCarrier = new DataCarrier<>("IndicatorAggregateWorker." + modelName, 1, 10000);
 
         String name = "INDICATOR_L1_AGGREGATION";
-        BulkConsumePool.Creator creator = new BulkConsumePool.Creator(name, BulkConsumePool.Creator.recommendMaxSize(), 20);
+        BulkConsumePool.Creator creator = new BulkConsumePool.Creator(name, BulkConsumePool.Creator.recommendMaxSize() * 2, 20);
         try {
             ConsumerPoolFactory.INSTANCE.createIfAbsent(name, creator);
         } catch (Exception e) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorPersistentWorker.java
Patch:
@@ -58,7 +58,7 @@ public class IndicatorPersistentWorker extends PersistenceWorker<Indicator, Merg
         this.nextWorker = nextWorker;
 
         String name = "INDICATOR_L2_AGGREGATION";
-        int size = BulkConsumePool.Creator.recommendMaxSize() / 4;
+        int size = BulkConsumePool.Creator.recommendMaxSize() / 8;
         if (size == 0) {
             size = 1;
         }

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/wrapper/PreparedStatementWrapper.java
Patch:
@@ -153,7 +153,7 @@ public void setUnicodeStream(int parameterIndex, InputStream x, int length) thro
     @Override public boolean execute() throws SQLException {
         return TracingUtils.trace(connectionInfo, "execute", sql, stateType, new TracingUtils.Executable<Boolean>() {
             @Override public Boolean exe(String sql) throws SQLException {
-                return statement.execute(sql);
+                return statement.execute();
             }
         });
     }

File: apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerTest.java
Patch:
@@ -129,8 +129,8 @@ public void onExit() {
     }
 
     private IConsumer getConsumer(DataCarrier<SampleData> carrier) throws IllegalAccessException {
-        ConsumerPool pool = (ConsumerPool)MemberModifier.field(DataCarrier.class, "consumerPool").get(carrier);
-        ConsumerThread[] threads = (ConsumerThread[])MemberModifier.field(ConsumerPool.class, "consumerThreads").get(pool);
+        ConsumeDriver pool = (ConsumeDriver)MemberModifier.field(DataCarrier.class, "driver").get(carrier);
+        ConsumerThread[] threads = (ConsumerThread[])MemberModifier.field(ConsumeDriver.class, "consumerThreads").get(pool);
 
         return (IConsumer)MemberModifier.field(ConsumerThread.class, "consumer").get(threads[0]);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorAggregateWorker.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Iterator;
 import java.util.List;
 import org.apache.skywalking.apm.commons.datacarrier.DataCarrier;
-import org.apache.skywalking.apm.commons.datacarrier.consumer.IConsumer;
+import org.apache.skywalking.apm.commons.datacarrier.consumer.*;
 import org.apache.skywalking.oap.server.core.analysis.data.EndOfBatchContext;
 import org.apache.skywalking.oap.server.core.analysis.data.MergeDataCache;
 import org.apache.skywalking.oap.server.core.analysis.indicator.Indicator;
@@ -52,7 +52,8 @@ public class IndicatorAggregateWorker extends AbstractWorker<Indicator> {
         this.nextWorker = nextWorker;
         this.mergeDataCache = new MergeDataCache<>();
         this.dataCarrier = new DataCarrier<>("IndicatorAggregateWorker." + modelName, 1, 10000);
-        this.dataCarrier.consume(new AggregatorConsumer(this), 1);
+
+        this.dataCarrier.consume(ConsumerPoolFactory.DEFAULT_POOL, new AggregatorConsumer(this));
 
         MetricCreator metricCreator = moduleManager.find(TelemetryModule.NAME).provider().getService(MetricCreator.class);
         aggregationCounter = metricCreator.createCounter("indicator_aggregation", "The number of rows in aggregation",

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorPersistentWorker.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Objects;
 import org.apache.skywalking.apm.commons.datacarrier.DataCarrier;
-import org.apache.skywalking.apm.commons.datacarrier.consumer.IConsumer;
+import org.apache.skywalking.apm.commons.datacarrier.consumer.*;
 import org.apache.skywalking.oap.server.core.analysis.data.EndOfBatchContext;
 import org.apache.skywalking.oap.server.core.analysis.data.MergeDataCache;
 import org.apache.skywalking.oap.server.core.analysis.indicator.Indicator;
@@ -56,7 +56,8 @@ public class IndicatorPersistentWorker extends PersistenceWorker<Indicator, Merg
         this.indicatorDAO = indicatorDAO;
         this.nextWorker = nextWorker;
         this.dataCarrier = new DataCarrier<>("IndicatorPersistentWorker." + modelName, 1, 10000);
-        this.dataCarrier.consume(new IndicatorPersistentWorker.PersistentConsumer(this), 1);
+
+        this.dataCarrier.consume(ConsumerPoolFactory.DEFAULT_POOL, new PersistentConsumer(this));
     }
 
     @Override void onWork(Indicator indicator) {

File: oap-server/server-cluster-plugin/cluster-consul-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ClusterModuleConsulConfig.java
Patch:
@@ -27,4 +27,6 @@
 class ClusterModuleConsulConfig extends ModuleConfig {
     @Setter @Getter private String serviceName;
     @Setter @Getter private String hostPort;
+    @Setter @Getter private String internalComHost;
+    @Setter @Getter private int internalComPort = -1;
 }

File: oap-server/server-cluster-plugin/cluster-consul-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ClusterModuleConsulProvider.java
Patch:
@@ -80,7 +80,7 @@ public ClusterModuleConsulProvider() {
             throw new ModuleStartException(e.getMessage(), e);
         }
 
-        ConsulCoordinator coordinator = new ConsulCoordinator(client, config.getServiceName());
+        ConsulCoordinator coordinator = new ConsulCoordinator(config, client);
         this.registerServiceImplementation(ClusterRegister.class, coordinator);
         this.registerServiceImplementation(ClusterNodesQuery.class, coordinator);
     }

File: oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ClusterModuleZookeeperConfig.java
Patch:
@@ -31,6 +31,8 @@ class ClusterModuleZookeeperConfig extends ModuleConfig {
     private String hostPort;
     private int baseSleepTimeMs;
     private int maxRetries;
+    @Setter @Getter private String internalComHost;
+    @Setter @Getter private int internalComPort = -1;
 
     public String getHostPort() {
         return Strings.isNullOrEmpty(hostPort) ? "localhost:2181" : hostPort;

File: oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ClusterModuleZookeeperProvider.java
Patch:
@@ -79,7 +79,7 @@ public ClusterModuleZookeeperProvider() {
             throw new ModuleStartException(e.getMessage(), e);
         }
 
-        ZookeeperCoordinator coordinator = new ZookeeperCoordinator(serviceDiscovery);
+        ZookeeperCoordinator coordinator = new ZookeeperCoordinator(config, serviceDiscovery);
         this.registerServiceImplementation(ClusterRegister.class, coordinator);
         this.registerServiceImplementation(ClusterNodesQuery.class, coordinator);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -65,6 +65,7 @@ private void addQueryService(List<Class> classes) {
         classes.add(MetadataQueryService.class);
         classes.add(AggregationQueryService.class);
         classes.add(AlarmQueryService.class);
+        classes.add(TopNRecordsQueryService.class);
     }
 
     private void addServerInterface(List<Class> classes) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorTypeListener;
 import org.apache.skywalking.oap.server.core.analysis.record.annotation.RecordTypeListener;
+import org.apache.skywalking.oap.server.core.analysis.topn.annotation.TopNTypeListener;
 import org.apache.skywalking.oap.server.core.annotation.AnnotationScan;
 import org.apache.skywalking.oap.server.core.cache.*;
 import org.apache.skywalking.oap.server.core.cluster.*;
@@ -130,12 +131,14 @@ public CoreModuleProvider() {
         this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));
         this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));
         this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));
+        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));
 
         annotationScan.registerListener(storageAnnotationListener);
         annotationScan.registerListener(streamAnnotationListener);
         annotationScan.registerListener(new IndicatorTypeListener(getManager()));
         annotationScan.registerListener(new InventoryTypeListener(getManager()));
         annotationScan.registerListener(new RecordTypeListener(getManager()));
+        annotationScan.registerListener(new TopNTypeListener(getManager()));
 
         this.remoteClientManager = new RemoteClientManager(getManager());
         this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/data/NonMergeDataCollection.java
Patch:
@@ -69,11 +69,11 @@ public void finishWriting() {
     }
 
     @Override public boolean containsKey(STORAGE_DATA key) {
-        throw new UnsupportedOperationException("Close merge data collection not support containsKey operation.");
+        throw new UnsupportedOperationException("Non merge data collection doesn't support containsKey operation.");
     }
 
     @Override public STORAGE_DATA get(STORAGE_DATA key) {
-        throw new UnsupportedOperationException("Close merge data collection not support get operation.");
+        throw new UnsupportedOperationException("Non merge data collection doesn't support get operation.");
     }
 
     @Override public void put(STORAGE_DATA value) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Scope.java
Patch:
@@ -24,7 +24,7 @@
 public enum Scope {
     All, Service, ServiceInstance, Endpoint, ServiceRelation, ServiceInstanceRelation, EndpointRelation, NetworkAddress,
     ServiceInstanceJVMCPU, ServiceInstanceJVMMemory, ServiceInstanceJVMMemoryPool, ServiceInstanceJVMGC,
-    Segment, Alarm, ServiceInventory, ServiceInstanceInventory, EndpointInventory, DatabaseAccess;
+    Segment, Alarm, ServiceInventory, ServiceInstanceInventory, EndpointInventory, DatabaseAccess, DatabaseSlowStatement;
 
     public static Scope valueOf(int ordinal) {
         if (ordinal < 0 || ordinal >= values().length) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/PersistenceTimer.java
Patch:
@@ -84,6 +84,7 @@ private void extractDataAndSave(IBatchDAO batchDAO) {
                 List<PersistenceWorker> persistenceWorkers = new ArrayList<>();
                 persistenceWorkers.addAll(IndicatorProcess.INSTANCE.getPersistentWorkers());
                 persistenceWorkers.addAll(RecordProcess.INSTANCE.getPersistentWorkers());
+                persistenceWorkers.addAll(TopNProcess.INSTANCE.getPersistentWorkers());
 
                 persistenceWorkers.forEach(worker -> {
                     if (logger.isDebugEnabled()) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -39,6 +39,7 @@ public StorageModule() {
             IHistoryDeleteDAO.class,
             IServiceInventoryCacheDAO.class, IServiceInstanceInventoryCacheDAO.class,
             IEndpointInventoryCacheDAO.class, INetworkAddressInventoryCacheDAO.class,
-            ITopologyQueryDAO.class, IMetricQueryDAO.class, ITraceQueryDAO.class, IMetadataQueryDAO.class, IAggregationQueryDAO.class, IAlarmQueryDAO.class};
+            ITopologyQueryDAO.class, IMetricQueryDAO.class, ITraceQueryDAO.class, IMetadataQueryDAO.class, IAggregationQueryDAO.class, IAlarmQueryDAO.class,
+            ITopNRecordsQueryDAO.class};
     }
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/GraphQLQueryProvider.java
Patch:
@@ -66,6 +66,8 @@ public class GraphQLQueryProvider extends ModuleProvider {
             .resolvers(new AggregationQuery(getManager()))
             .file("query-protocol/alarm.graphqls")
             .resolvers(new AlarmQuery(getManager()))
+            .file("query-protocol/top-n-records.graphqls")
+            .resolvers(new TopNRecordsQuery(getManager()))
             .build()
             .makeExecutableSchema();
         this.graphQL = GraphQL.newGraphQL(schema).build();

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/SpanListenerFactory.java
Patch:
@@ -19,10 +19,11 @@
 package org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener;
 
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;
 
 /**
  * @author peng-yongsheng
  */
 public interface SpanListenerFactory {
-    SpanListener create(ModuleManager moduleManager);
+    SpanListener create(ModuleManager moduleManager, TraceServiceModuleConfig config);
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;
 import org.apache.skywalking.oap.server.library.util.TimeBucketUtils;
+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.decorator.SegmentCoreInfo;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.decorator.SpanDecorator;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.EntrySpanListener;
@@ -144,7 +145,7 @@ public Factory(int segmentSamplingRate) {
             this.sampler = new TraceSegmentSampler(segmentSamplingRate);
         }
 
-        @Override public SpanListener create(ModuleManager moduleManager) {
+        @Override public SpanListener create(ModuleManager moduleManager, TraceServiceModuleConfig config) {
             return new SegmentSpanListener(moduleManager, sampler);
         }
     }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/service/ServiceMappingSpanListener.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.oap.server.core.cache.ServiceInventoryCache;
 import org.apache.skywalking.oap.server.core.register.service.IServiceInventoryRegister;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.decorator.*;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.*;
 import org.slf4j.*;
@@ -81,7 +82,7 @@ private ServiceMappingSpanListener(ModuleManager moduleManager) {
 
     public static class Factory implements SpanListenerFactory {
 
-        @Override public SpanListener create(ModuleManager moduleManager) {
+        @Override public SpanListener create(ModuleManager moduleManager, TraceServiceModuleConfig config) {
             return new ServiceMappingSpanListener(moduleManager);
         }
     }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java
Patch:
@@ -113,9 +113,11 @@ private SpanObject.Builder createExitSpan(long startTimestamp, boolean isPrepare
         span.setSpanLayer(SpanLayer.Database);
         span.setParentSpanId(0);
         span.setStartTime(startTimestamp + 550);
-        span.setEndTime(startTimestamp + 1000);
+        span.setEndTime(startTimestamp + 1500);
         span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());
         span.setIsError(true);
+        span.addTags(KeyWithStringValue.newBuilder().setKey("db.statement").setValue("select * from database where complex = 1;").build());
+        span.addTags(KeyWithStringValue.newBuilder().setKey("db.type").setValue("mongodb").build());
 
         if (isPrepare) {
             span.setOperationName("mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]");

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -80,6 +80,7 @@ public void prepare() throws ServiceNotProvidedException {
         this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));
         this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));
         this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));
+        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));
     }
 
     @Override

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java
Patch:
@@ -86,6 +86,7 @@ public H2StorageProvider() {
         this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));
         this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));
         this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));
+        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java
Patch:
@@ -92,6 +92,7 @@ public MySQLStorageProvider() {
         this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));
         this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));
         this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));
+        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/jvm/cpu/CPUMetricAccessor.java
Patch:
@@ -46,6 +46,6 @@ public CPU getCPUMetric() {
         long now = System.nanoTime();
 
         CPU.Builder cpuBuilder = CPU.newBuilder();
-        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / ((now - lastSampleTimeNs) * cpuCoreNum)).build();
+        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / ((now - lastSampleTimeNs) * cpuCoreNum) * 100).build();
     }
 }

File: oap-server/generate-tool/src/main/java/org/apache/skywalking/oal/tool/output/DispatcherContext.java
Patch:
@@ -36,4 +36,5 @@ public class DispatcherContext {
     private List<AnalysisResult> serviceInstanceJVMMemoryIndicators = new LinkedList<>();
     private List<AnalysisResult> serviceInstanceJVMMemoryPoolIndicators = new LinkedList<>();
     private List<AnalysisResult> serviceInstanceJVMGCIndicators = new LinkedList<>();
+    private List<AnalysisResult> databaseAccessIndicators = new LinkedList<>();
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Scope.java
Patch:
@@ -24,7 +24,7 @@
 public enum Scope {
     All, Service, ServiceInstance, Endpoint, ServiceRelation, ServiceInstanceRelation, EndpointRelation, NetworkAddress,
     ServiceInstanceJVMCPU, ServiceInstanceJVMMemory, ServiceInstanceJVMMemoryPool, ServiceInstanceJVMGC,
-    Segment, Alarm, ServiceInventory, ServiceInstanceInventory, EndpointInventory;
+    Segment, Alarm, ServiceInventory, ServiceInstanceInventory, EndpointInventory, DatabaseAccess;
 
     public static Scope valueOf(int ordinal) {
         if (ordinal < 0 || ordinal >= values().length) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetadataQueryDAO.java
Patch:
@@ -36,6 +36,8 @@ public interface IMetadataQueryDAO extends DAO {
 
     List<Service> getAllServices(final long startTimestamp, final long endTimestamp) throws IOException;
 
+    List<Database> getAllDatabases() throws IOException;
+
     List<Service> searchServices(final long startTimestamp, final long endTimestamp,
         final String keyword) throws IOException;
 

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java
Patch:
@@ -94,6 +94,7 @@ public RegisterServiceHandler(ModuleManager moduleManager) {
                 switch (key) {
                     case HOST_NAME:
                         instanceProperties.addProperty(HOST_NAME, property.getValue());
+                        break;
                     case OS_NAME:
                         instanceProperties.addProperty(OS_NAME, property.getValue());
                         break;

File: oap-server/server-library/library-buffer/src/main/java/org/apache/skywalking/oap/server/library/buffer/BufferStream.java
Patch:
@@ -121,7 +121,8 @@ public Builder<MESSAGE_TYPE> parser(Parser<MESSAGE_TYPE> parser) {
             return this;
         }
 
-        public Builder<MESSAGE_TYPE> callBack(DataStreamReader.CallBack<MESSAGE_TYPE> callBack) {
+        public Builder<MESSAGE_TYPE> callBack(
+            DataStreamReader.CallBack<MESSAGE_TYPE> callBack) {
             this.callBack = callBack;
             return this;
         }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TopologyQueryDAO.java
Patch:
@@ -72,7 +72,9 @@ public H2TopologyQueryDAO(JDBCHikariCPClient h2Client) {
         int destEndpointId) throws IOException {
         String tableName = DownSamplingModelNameBuilder.build(step, EndpointRelationServerSideIndicator.INDEX_NAME);
 
-        return loadEndpointFromSide(tableName, startTB, endTB, EndpointRelationServerSideIndicator.SOURCE_ENDPOINT_ID, EndpointRelationServerSideIndicator.DEST_ENDPOINT_ID, destEndpointId, false);
+        List<Call> calls = loadEndpointFromSide(tableName, startTB, endTB, EndpointRelationServerSideIndicator.SOURCE_ENDPOINT_ID, EndpointRelationServerSideIndicator.DEST_ENDPOINT_ID, destEndpointId, false);
+        calls.addAll(loadEndpointFromSide(tableName, startTB, endTB, EndpointRelationServerSideIndicator.SOURCE_ENDPOINT_ID, EndpointRelationServerSideIndicator.DEST_ENDPOINT_ID, destEndpointId, true));
+        return calls;
     }
 
     private List<Call> loadServiceCalls(String tableName, long startTB, long endTB, String sourceCName,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/IRegisterLockDAO.java
Patch:
@@ -24,7 +24,8 @@
  * @author peng-yongsheng
  */
 public interface IRegisterLockDAO extends DAO {
-    boolean tryLock(Scope scope);
+
+    int tryLockAndIncrement(Scope scope);
 
     void releaseLock(Scope scope);
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -66,7 +66,7 @@ public void prepare() throws ServiceNotProvidedException {
 
         this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));
         this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));
-        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 1000));
+        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 10 * 60 * 1000));
         this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));
 
         this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/lock/RegisterLockIndex.java
Patch:
@@ -26,4 +26,5 @@ public class RegisterLockIndex {
     public static final String NAME = "register_lock";
     public static final String COLUMN_EXPIRE = "expire";
     public static final String COLUMN_LOCKABLE = "lockable";
+    public static final String COLUMN_SEQUENCE = "sequence";
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -216,6 +216,8 @@ public Service searchService(String serviceCode) throws IOException {
                         serviceInstance.getAttributes().add(new Attribute(ServiceInstanceInventory.PropertyUtil.IPV4S, ipv4));
                     }
                 }
+            } else {
+                serviceInstance.setLanguage(Language.UNKNOWN);
             }
 
             serviceInstances.add(serviceInstance);

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java
Patch:
@@ -241,6 +241,8 @@ public List<Service> getAllServices(long startTimestamp, long endTimestamp) thro
                                 serviceInstance.getAttributes().add(new Attribute(ServiceInstanceInventory.PropertyUtil.IPV4S, ipv4));
                             }
                         }
+                    } else {
+                        serviceInstance.setLanguage(Language.UNKNOWN);
                     }
 
                     serviceInstances.add(serviceInstance);

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -197,6 +197,8 @@ public Service searchService(String serviceCode) throws IOException {
                 JsonObject properties = GSON.fromJson(propertiesString, JsonObject.class);
                 if (properties.has(LANGUAGE)) {
                     serviceInstance.setLanguage(LanguageTrans.INSTANCE.value(properties.get(LANGUAGE).getAsString()));
+                } else {
+                    serviceInstance.setLanguage(Language.UNKNOWN);
                 }
 
                 if (properties.has(OS_NAME)) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java
Patch:
@@ -222,6 +222,8 @@ public List<Service> getAllServices(long startTimestamp, long endTimestamp) thro
                         JsonObject properties = GSON.fromJson(propertiesString, JsonObject.class);
                         if (properties.has(LANGUAGE)) {
                             serviceInstance.setLanguage(LanguageTrans.INSTANCE.value(properties.get(LANGUAGE).getAsString()));
+                        } else {
+                            serviceInstance.setLanguage(Language.UNKNOWN);
                         }
 
                         if (properties.has(OS_NAME)) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/IServiceInstanceInventoryRegister.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.register.service;
 
-import org.apache.skywalking.oap.server.core.register.ServiceInstanceInventory;
+import com.google.gson.JsonObject;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 /**
@@ -27,7 +27,7 @@
 public interface IServiceInstanceInventoryRegister extends Service {
 
     int getOrCreate(int serviceId, String serviceInstanceName, String uuid, long registerTime,
-        ServiceInstanceInventory.AgentOsInfo osInfo);
+        JsonObject properties);
 
     int getOrCreate(int serviceId, int addressId, long registerTime);
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/IServiceInventoryRegister.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.register.service;
 
 import com.google.gson.JsonObject;
+import org.apache.skywalking.oap.server.core.register.NodeType;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 /**
@@ -30,7 +31,7 @@ public interface IServiceInventoryRegister extends Service {
 
     int getOrCreate(int addressId, String serviceName, JsonObject properties);
 
-    void updateProperties(int serviceId, JsonObject properties);
+    void update(int serviceId, NodeType nodeType, JsonObject properties);
 
     void heartbeat(int serviceId, long heartBeatTime);
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/ServiceInventoryRegister.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Objects;
 import org.apache.skywalking.oap.server.core.*;
 import org.apache.skywalking.oap.server.core.cache.ServiceInventoryCache;
-import org.apache.skywalking.oap.server.core.register.*;
+import org.apache.skywalking.oap.server.core.register.ServiceInventory;
 import org.apache.skywalking.oap.server.core.register.worker.InventoryProcess;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;
@@ -100,7 +100,7 @@ private ServiceInventoryCache getServiceInventoryCache() {
 
             InventoryProcess.INSTANCE.in(serviceInventory);
         } else {
-            logger.warn("Service {} properties update, but not found in storage.");
+            logger.warn("Service {} properties update, but not found in storage.", serviceId);
         }
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInventory.java
Patch:
@@ -48,6 +48,7 @@ public class ServiceInventory extends RegisterSource {
     public static final String MAPPING_SERVICE_ID = "mapping_service_id";
     public static final String MAPPING_LAST_UPDATE_TIME = "mapping_last_update_time";
     public static final String PROPERTIES = "properties";
+    private static final Gson GSON = new Gson();
 
     @Setter @Getter @Column(columnName = NAME, matchQuery = true) private String name = Const.EMPTY_STRING;
     @Setter @Getter @Column(columnName = IS_ADDRESS) private int isAddress;
@@ -100,7 +101,7 @@ public void setProperties(JsonObject properties) {
     private void setProp(String prop) {
         this.prop = prop;
         if (!Strings.isNullOrEmpty(prop)) {
-            this.properties = new Gson().fromJson(prop, JsonObject.class);
+            this.properties = GSON.fromJson(prop, JsonObject.class);
         }
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/INetworkAddressInventoryRegister.java
Patch:
@@ -18,14 +18,15 @@
 
 package org.apache.skywalking.oap.server.core.register.service;
 
+import com.google.gson.JsonObject;
 import org.apache.skywalking.oap.server.core.register.NodeType;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 /**
  * @author peng-yongsheng
  */
 public interface INetworkAddressInventoryRegister extends Service {
-    int getOrCreate(String networkAddress);
+    int getOrCreate(String networkAddress, JsonObject properties);
 
     int get(String networkAddress);
 

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/ServiceMeshMetricDataDecorator.java
Patch:
@@ -44,7 +44,7 @@ boolean tryMetaDataRegister() {
         boolean isRegistered = true;
         sourceServiceId = origin.getSourceServiceId();
         if (sourceServiceId == Const.NONE) {
-            sourceServiceId = CoreRegisterLinker.getServiceInventoryRegister().getOrCreate(origin.getSourceServiceName());
+            sourceServiceId = CoreRegisterLinker.getServiceInventoryRegister().getOrCreate(origin.getSourceServiceName(), null);
             if (sourceServiceId != Const.NONE) {
                 getNewDataBuilder().setSourceServiceId(sourceServiceId);
             } else {
@@ -65,7 +65,7 @@ boolean tryMetaDataRegister() {
         }
         destServiceId = origin.getDestServiceId();
         if (destServiceId == Const.NONE) {
-            destServiceId = CoreRegisterLinker.getServiceInventoryRegister().getOrCreate(origin.getDestServiceName());
+            destServiceId = CoreRegisterLinker.getServiceInventoryRegister().getOrCreate(origin.getDestServiceName(), null);
             if (destServiceId != Const.NONE) {
                 getNewDataBuilder().setDestServiceId(destServiceId);
             } else {

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/grpc/ApplicationRegisterHandler.java
Patch:
@@ -47,7 +47,7 @@ public void applicationCodeRegister(Application request, StreamObserver<Applicat
 
         ApplicationMapping.Builder builder = ApplicationMapping.newBuilder();
         String serviceName = request.getApplicationCode();
-        int serviceId = serviceInventoryRegister.getOrCreate(serviceName);
+        int serviceId = serviceInventoryRegister.getOrCreate(serviceName, null);
 
         if (serviceId != Const.NONE) {
             KeyWithIntegerValue value = KeyWithIntegerValue.newBuilder().setKey(serviceName).setValue(serviceId).build();

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/grpc/NetworkAddressRegisterServiceHandler.java
Patch:
@@ -50,7 +50,7 @@ public void batchRegister(NetworkAddresses request, StreamObserver<NetworkAddres
 
         NetworkAddressMappings.Builder builder = NetworkAddressMappings.newBuilder();
         for (String networkAddress : addressesList) {
-            int addressId = networkAddressInventoryRegister.getOrCreate(networkAddress);
+            int addressId = networkAddressInventoryRegister.getOrCreate(networkAddress, null);
 
             if (addressId != Const.NONE) {
                 KeyWithIntegerValue value = KeyWithIntegerValue.newBuilder().setKey(networkAddress).setValue(addressId).build();

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/rest/ApplicationRegisterServletHandler.java
Patch:
@@ -57,7 +57,7 @@ public ApplicationRegisterServletHandler(ModuleManager moduleManager) {
             JsonArray applicationCodes = gson.fromJson(req.getReader(), JsonArray.class);
             for (int i = 0; i < applicationCodes.size(); i++) {
                 String applicationCode = applicationCodes.get(i).getAsString();
-                int applicationId = serviceInventoryRegister.getOrCreate(applicationCode);
+                int applicationId = serviceInventoryRegister.getOrCreate(applicationCode, null);
                 JsonObject mapping = new JsonObject();
                 mapping.addProperty(APPLICATION_CODE, applicationCode);
                 mapping.addProperty(APPLICATION_ID, applicationId);

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/rest/NetworkAddressRegisterServletHandler.java
Patch:
@@ -62,7 +62,7 @@ public NetworkAddressRegisterServletHandler(ModuleManager moduleManager) {
                     logger.debug("network getAddress register, network getAddress: {}", networkAddress);
                 }
 
-                int addressId = networkAddressInventoryRegister.getOrCreate(networkAddress);
+                int addressId = networkAddressInventoryRegister.getOrCreate(networkAddress, null);
                 JsonObject mapping = new JsonObject();
                 mapping.addProperty(ADDRESS_ID, addressId);
                 mapping.addProperty(NETWORK_ADDRESS, networkAddress);

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v6/grpc/RegisterServiceHandler.java
Patch:
@@ -63,7 +63,7 @@ public RegisterServiceHandler(ModuleManager moduleManager) {
             if (logger.isDebugEnabled()) {
                 logger.debug("Register service, service code: {}", serviceName);
             }
-            int serviceId = serviceInventoryRegister.getOrCreate(serviceName);
+            int serviceId = serviceInventoryRegister.getOrCreate(serviceName, null);
 
             if (serviceId != Const.NONE) {
                 KeyIntValuePair value = KeyIntValuePair.newBuilder().setKey(serviceName).setValue(serviceId).build();
@@ -149,7 +149,7 @@ public void doNetworkAddressRegister(NetAddresses request, StreamObserver<NetAdd
         NetAddressMapping.Builder builder = NetAddressMapping.newBuilder();
 
         request.getAddressesList().forEach(networkAddress -> {
-            int addressId = networkAddressInventoryRegister.getOrCreate(networkAddress);
+            int addressId = networkAddressInventoryRegister.getOrCreate(networkAddress, null);
 
             if (addressId != Const.NONE) {
                 builder.addAddressIds(KeyIntValuePair.newBuilder().setKey(networkAddress).setValue(addressId));
@@ -186,7 +186,7 @@ public void doNetworkAddressRegister(NetAddresses request, StreamObserver<NetAdd
                     return;
                 }
 
-                networkAddressId = networkAddressInventoryRegister.getOrCreate(address);
+                networkAddressId = networkAddressInventoryRegister.getOrCreate(address, null);
                 if (networkAddressId == Const.NONE) {
                     return;
                 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/ReferenceIdExchanger.java
Patch:
@@ -88,7 +88,7 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {
         }
 
         if (standardBuilder.getNetworkAddressId() == 0 && !Strings.isNullOrEmpty(standardBuilder.getNetworkAddress())) {
-            int networkAddressId = networkAddressInventoryRegister.getOrCreate(standardBuilder.getNetworkAddress());
+            int networkAddressId = networkAddressInventoryRegister.getOrCreate(standardBuilder.getNetworkAddress(), null);
 
             if (networkAddressId == 0) {
                 if (logger.isDebugEnabled()) {

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/handler/SpanProcessor.java
Patch:
@@ -48,7 +48,7 @@ void convert(ZipkinReceiverConfig config, SpanBytesDecoder decoder, HttpServletR
             // In Zipkin, the local service name represents the application owner.
             String applicationCode = span.localServiceName();
             if (applicationCode != null) {
-                int applicationId = CoreRegisterLinker.getServiceInventoryRegister().getOrCreate(applicationCode);
+                int applicationId = CoreRegisterLinker.getServiceInventoryRegister().getOrCreate(applicationCode, null);
                 if (applicationId != 0) {
                     CoreRegisterLinker.getServiceInstanceInventoryRegister().getOrCreate(applicationId, applicationCode, applicationCode,
                         span.timestampAsLong(),

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/transform/SegmentBuilder.java
Patch:
@@ -301,7 +301,7 @@ private boolean isAppChanged(String applicationCode) {
 
         private Segment addApp(String serviceCode, long registerTime) throws Exception {
             int serviceId = waitForExchange(() ->
-                    CoreRegisterLinker.getServiceInventoryRegister().getOrCreate(serviceCode),
+                    CoreRegisterLinker.getServiceInventoryRegister().getOrCreate(serviceCode, null),
                 10
             );
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/EndpointInventoryRegister.java
Patch:
@@ -79,7 +79,7 @@ private EndpointInventoryCache getCacheService() {
 
             InventoryProcess.INSTANCE.in(endpointInventory);
         } else {
-            logger.warn("Endpoint {} heartbeat, but not found in storage.");
+            logger.warn("Endpoint {} heartbeat, but not found in storage.", endpointId);
         }
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/NetworkAddressInventoryRegister.java
Patch:
@@ -111,7 +111,7 @@ private IServiceInstanceInventoryRegister getServiceInstanceInventoryRegister()
 
             InventoryProcess.INSTANCE.in(networkAddress);
         } else {
-            logger.warn("Network getAddress {} heartbeat, but not found in storage.");
+            logger.warn("Network getAddress {} heartbeat, but not found in storage.", addressId);
         }
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/ServiceInventoryRegister.java
Patch:
@@ -96,7 +96,7 @@ private ServiceInventoryCache getServiceInventoryCache() {
 
             InventoryProcess.INSTANCE.in(serviceInventory);
         } else {
-            logger.warn("Service {} heartbeat, but not found in storage.");
+            logger.warn("Service {} heartbeat, but not found in storage.", serviceId);
         }
     }
 
@@ -109,7 +109,7 @@ private ServiceInventoryCache getServiceInventoryCache() {
 
             InventoryProcess.INSTANCE.in(serviceInventory);
         } else {
-            logger.warn("Service {} mapping update, but not found in storage.");
+            logger.warn("Service {} mapping update, but not found in storage.", serviceId);
         }
     }
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java
Patch:
@@ -101,7 +101,7 @@ public TraceModuleProvider() {
 
             SegmentStandardizationWorker standardizationWorker2 = new SegmentStandardizationWorker(getManager(), segmentProducer,
                 moduleConfig.getBufferPath(), moduleConfig.getBufferOffsetMaxFileSize(), moduleConfig.getBufferDataMaxFileSize(), moduleConfig.isBufferFileCleanWhenRestart(),
-                false);
+                true);
             segmentProducerV2.setStandardizationWorker(standardizationWorker2);
         } catch (IOException e) {
             throw new ModuleStartException(e.getMessage(), e);

File: oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/OAPServerStartUp.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.apache.skywalking.oap.server.core.RunningMode;
 import org.apache.skywalking.oap.server.library.module.*;
-import org.apache.skywalking.oap.server.library.util.TimeBucketUtils;
 import org.apache.skywalking.oap.server.starter.config.*;
 import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
 import org.apache.skywalking.oap.server.telemetry.api.*;
@@ -45,7 +44,8 @@ public static void main(String[] args) {
 
             manager.find(TelemetryModule.NAME).provider().getService(MetricCreator.class).createGauge("uptime",
                 "oap server start up time", MetricTag.EMPTY_KEY, MetricTag.EMPTY_VALUE)
-                .setValue(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(System.currentTimeMillis()));
+                // Set uptime to second
+                .setValue(System.currentTimeMillis() / 1000);
 
             if (RunningMode.isInitMode()) {
                 logger.info("OAP starts up in init mode successfully, exit now...");

File: oap-server/server-telemetry/telemetry-prometheus/src/main/java/org/apache/skywalking/oap/server/telemetry/prometheus/BaseMetric.java
Patch:
@@ -57,7 +57,7 @@ protected C getMetric() {
                 try {
                     if (metricInstance == null) {
                         String[] labelNames = new String[labels.getKeys().length + 1];
-                        labelNames[0] = "instance";
+                        labelNames[0] = "sw_backend_instance";
                         for (int i = 0; i < labels.getKeys().length; i++) {
                             labelNames[i + 1] = labels.getKeys()[i];
                         }

File: oap-server/server-cluster-plugin/cluster-kubernetes-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/kubernetes/KubernetesCoordinator.java
Patch:
@@ -26,6 +26,7 @@
 import javax.annotation.Nullable;
 import org.apache.skywalking.oap.server.core.cluster.*;
 import org.apache.skywalking.oap.server.core.remote.client.Address;
+import org.apache.skywalking.oap.server.telemetry.api.TelemetryRelatedContext;
 import org.slf4j.*;
 
 /**
@@ -49,6 +50,7 @@ public class KubernetesCoordinator implements ClusterRegister, ClusterNodesQuery
     KubernetesCoordinator(final ReusableWatch<Event> watch, final Supplier<String> uidSupplier) {
         this.watch = watch;
         this.uid = uidSupplier.get();
+        TelemetryRelatedContext.INSTANCE.setId(uid);
     }
 
     @Override public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {

File: oap-server/server-cluster-plugin/cluster-standalone-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/standalone/StandaloneManager.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.util.*;
 import org.apache.skywalking.oap.server.core.cluster.*;
+import org.apache.skywalking.oap.server.telemetry.api.TelemetryRelatedContext;
 
 /**
  * A cluster manager simulator. Work in memory only. Also return the current instance.
@@ -33,6 +34,7 @@ public class StandaloneManager implements ClusterNodesQuery, ClusterRegister {
     @Override public void registerRemote(RemoteInstance remoteInstance) {
         this.remoteInstance = remoteInstance;
         this.remoteInstance.getAddress().setSelf(true);
+        TelemetryRelatedContext.INSTANCE.setId("standalone");
     }
 
     @Override

File: oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.curator.x.discovery.*;
 import org.apache.skywalking.oap.server.core.cluster.*;
 import org.apache.skywalking.oap.server.core.remote.client.Address;
+import org.apache.skywalking.oap.server.telemetry.api.TelemetryRelatedContext;
 import org.slf4j.*;
 
 /**
@@ -59,6 +60,7 @@ public class ZookeeperCoordinator implements ClusterRegister, ClusterNodesQuery
             serviceCache.start();
 
             this.selfAddress = remoteInstance.getAddress();
+            TelemetryRelatedContext.INSTANCE.setId(selfAddress.toString());
         } catch (Exception e) {
             throw new ServiceRegisterException(e.getMessage());
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorProcess.java
Patch:
@@ -57,13 +57,13 @@ public void create(ModuleManager moduleManager, Class<? extends Indicator> indic
         IndicatorPersistentWorker dayPersistentWorker = worker(moduleManager, indicatorDAO, modelName + Const.ID_SPLIT + Downsampling.Day.getName());
         IndicatorPersistentWorker monthPersistentWorker = worker(moduleManager, indicatorDAO, modelName + Const.ID_SPLIT + Downsampling.Month.getName());
 
-        IndicatorTransWorker transWorker = new IndicatorTransWorker(WorkerIdGenerator.INSTANCES.generate(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);
+        IndicatorTransWorker transWorker = new IndicatorTransWorker(moduleManager, modelName, WorkerIdGenerator.INSTANCES.generate(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);
         WorkerInstances.INSTANCES.put(transWorker.getWorkerId(), transWorker);
 
         IndicatorRemoteWorker remoteWorker = new IndicatorRemoteWorker(WorkerIdGenerator.INSTANCES.generate(), moduleManager, transWorker, modelName);
         WorkerInstances.INSTANCES.put(remoteWorker.getWorkerId(), remoteWorker);
 
-        IndicatorAggregateWorker aggregateWorker = new IndicatorAggregateWorker(WorkerIdGenerator.INSTANCES.generate(), remoteWorker, modelName);
+        IndicatorAggregateWorker aggregateWorker = new IndicatorAggregateWorker(moduleManager, WorkerIdGenerator.INSTANCES.generate(), remoteWorker, modelName);
         WorkerInstances.INSTANCES.put(aggregateWorker.getWorkerId(), aggregateWorker);
 
         entryWorkers.put(indicatorClass, aggregateWorker);

File: oap-server/server-receiver-plugin/skywalking-istio-telemetry-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/istio/telemetry/provider/IstioTelemetryReceiverProvider.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.server.GRPCHandlerRegister;
 import org.apache.skywalking.oap.server.library.module.*;
-import org.apache.skywalking.oap.server.library.module.ModuleDefine;
 import org.apache.skywalking.oap.server.receiver.istio.telemetry.module.IstioTelemetryReceiverModule;
+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
 
 public class IstioTelemetryReceiverProvider extends ModuleProvider {
     @Override public String name() {
@@ -43,14 +43,14 @@ public class IstioTelemetryReceiverProvider extends ModuleProvider {
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {
         GRPCHandlerRegister service = getManager().find(CoreModule.NAME).provider().getService(GRPCHandlerRegister.class);
-        service.addHandler(new IstioTelemetryGRPCHandler());
+        service.addHandler(new IstioTelemetryGRPCHandler(getManager()));
     }
 
     @Override public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleStartException {
 
     }
 
     @Override public String[] requiredModules() {
-        return new String[] {CoreModule.NAME, MeshReceiverModule.NAME};
+        return new String[] {TelemetryModule.NAME, CoreModule.NAME, MeshReceiverModule.NAME};
     }
 }
\ No newline at end of file

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch;
 
+import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.storage.*;
 import org.apache.skywalking.oap.server.core.storage.cache.*;
 import org.apache.skywalking.oap.server.core.storage.query.*;
@@ -102,6 +103,6 @@ public void notifyAfterCompleted() {
 
     @Override
     public String[] requiredModules() {
-        return new String[0];
+        return new String[] {CoreModule.NAME};
     }
 }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 import java.util.Properties;
+import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.storage.IBatchDAO;
 import org.apache.skywalking.oap.server.core.storage.IHistoryDeleteDAO;
 import org.apache.skywalking.oap.server.core.storage.IRegisterLockDAO;
@@ -138,6 +139,6 @@ public MySQLStorageProvider() {
     }
 
     @Override public String[] requiredModules() {
-        return new String[0];
+        return new String[] {CoreModule.NAME};
     }
 }

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/CounterMetric.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @author wusheng
  */
-public interface CounterMetric extends TaggableMetric {
+public interface CounterMetric {
     /**
      * Increase 1 to counter
      */

File: oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/HistogramMetric.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author wusheng
  */
-public abstract class HistogramMetric implements TaggableMetric {
+public abstract class HistogramMetric {
     public Timer createTimer() {
         return new Timer(this);
     }
@@ -38,7 +38,7 @@ public Timer createTimer() {
      */
     public abstract void observe(double value);
 
-    class Timer implements Closeable {
+    public class Timer implements Closeable {
         private final HistogramMetric metric;
         private final long startNanos;
         private double duration;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.skywalking.oap.server.library.server.ServerException;
 import org.apache.skywalking.oap.server.library.server.grpc.GRPCServer;
 import org.apache.skywalking.oap.server.library.server.jetty.JettyServer;
+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;
 import org.slf4j.*;
 
 /**
@@ -177,6 +178,6 @@ public CoreModuleProvider() {
 
     @Override
     public String[] requiredModules() {
-        return new String[0];
+        return new String[] {TelemetryModule.NAME};
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/RegisterPersistentWorker.java
Patch:
@@ -78,8 +78,8 @@ private void onWork(RegisterSource registerSource) {
                                 dbSource.combine(source);
                                 registerDAO.forceUpdate(modelName, dbSource);
                             } else {
-                                int sequence = registerDAO.max(modelName);
-                                source.setSequence(sequence + 1);
+                                int sequence = registerDAO.registerId(modelName, source);
+                                source.setSequence(sequence);
                                 registerDAO.forceInsert(modelName, source);
                             }
                         } catch (Throwable t) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/INetworkAddressInventoryRegister.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.register.service;
 
+import org.apache.skywalking.oap.server.core.register.NodeType;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 /**
@@ -30,5 +31,5 @@ public interface INetworkAddressInventoryRegister extends Service {
 
     void heartbeat(int addressId, long heartBeatTime);
 
-    void update(int addressId, int srcLayer);
+    void update(int addressId, NodeType nodeType);
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetadataQueryDAO.java
Patch:
@@ -32,7 +32,7 @@ public interface IMetadataQueryDAO extends DAO {
 
     int numOfEndpoint(final long startTimestamp, final long endTimestamp) throws IOException;
 
-    int numOfConjectural(final long startTimestamp, final long endTimestamp, final int srcLayer) throws IOException;
+    int numOfConjectural(final long startTimestamp, final long endTimestamp, final int nodeTypeValue) throws IOException;
 
     List<Service> getAllServices(final long startTimestamp, final long endTimestamp) throws IOException;
 

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SpanIdExchanger.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.common.base.Strings;
 import org.apache.skywalking.oap.server.core.*;
 import org.apache.skywalking.oap.server.core.config.IComponentLibraryCatalogService;
+import org.apache.skywalking.oap.server.core.register.NodeType;
 import org.apache.skywalking.oap.server.core.register.service.*;
 import org.apache.skywalking.oap.server.core.source.DetectPoint;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
@@ -81,8 +82,8 @@ private SpanIdExchanger(ModuleManager moduleManager) {
                 standardBuilder.setPeerId(peerId);
                 standardBuilder.setPeer(Const.EMPTY_STRING);
 
-                int spanLayer = standardBuilder.getSpanLayerValue();
-                networkAddressInventoryRegister.update(peerId, spanLayer);
+                int spanLayerValue = standardBuilder.getSpanLayerValue();
+                networkAddressInventoryRegister.update(peerId, NodeType.fromSpanLayerValue(spanLayerValue));
             }
         }
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -72,13 +72,13 @@ public MetadataQueryEsDAO(ElasticSearchClient client) {
         return (int)response.getHits().getTotalHits();
     }
 
-    @Override public int numOfConjectural(long startTimestamp, long endTimestamp, int srcLayer) throws IOException {
+    @Override public int numOfConjectural(long startTimestamp, long endTimestamp, int nodeTypeValue) throws IOException {
         SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();
 
-        sourceBuilder.query(QueryBuilders.termQuery(NetworkAddressInventory.SRC_LAYER, srcLayer));
+        sourceBuilder.query(QueryBuilders.termQuery(ServiceInventory.NODE_TYPE, nodeTypeValue));
         sourceBuilder.size(0);
 
-        SearchResponse response = getClient().search(NetworkAddressInventory.MODEL_NAME, sourceBuilder);
+        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);
 
         return (int)response.getHits().getTotalHits();
     }

File: apm-application-toolkit/apm-toolkit-opentracing/src/main/java/org/apache/skywalking/apm/toolkit/opentracing/SkywalkingSpanBuilder.java
Patch:
@@ -107,7 +107,7 @@ public Tracer.SpanBuilder withTag(String key, String value) {
 
     @Override
     public Tracer.SpanBuilder withTag(String key, boolean value) {
-        if (Tags.ERROR.equals(key)) {
+        if (Tags.ERROR.getKey().equals(key)) {
             isError = value;
         } else {
             tags.add(new Tag(key, value ? "true" : "false"));

File: apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/AntPathMatcher.java
Patch:
@@ -200,7 +200,7 @@ private static String[] resolvePath(String path) {
          *  use pattern match path
          */
         private static boolean matchStrings(String pattern, String path) {
-            if (StringUtil.isEmpty(pattern) || StringUtil.isEmpty(pattern)) {
+            if (StringUtil.isEmpty(pattern) || StringUtil.isEmpty(path)) {
                 return false;
             }
             // if this pattern has been compiled

File: oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ClusterModuleZookeeperConfig.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.apache.skywalking.oap.server.cluster.plugin.zookeeper;
 
+import com.google.common.base.Strings;
 import lombok.*;
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
-import org.apache.skywalking.oap.server.library.util.StringUtils;
 
 /**
  * @author peng-yongsheng
@@ -33,7 +33,7 @@ class ClusterModuleZookeeperConfig extends ModuleConfig {
     private int maxRetries;
 
     public String getHostPort() {
-        return StringUtils.isNotEmpty(hostPort) ? hostPort : "localhost:2181";
+        return Strings.isNullOrEmpty(hostPort) ? "localhost:2181" : hostPort;
     }
 
     public void setHostPort(String hostPort) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.oap.server.core.remote.*;
 import org.apache.skywalking.oap.server.core.remote.annotation.*;
 import org.apache.skywalking.oap.server.core.remote.client.*;
+import org.apache.skywalking.oap.server.core.remote.health.HealthCheckServiceHandler;
 import org.apache.skywalking.oap.server.core.server.*;
 import org.apache.skywalking.oap.server.core.source.*;
 import org.apache.skywalking.oap.server.core.storage.PersistenceTimer;
@@ -141,6 +142,7 @@ public CoreModuleProvider() {
 
     @Override public void start() throws ModuleStartException {
         grpcServer.addHandler(new RemoteServiceHandler(getManager()));
+        grpcServer.addHandler(new HealthCheckServiceHandler());
         remoteClientManager.start();
 
         try {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/NetworkAddressInventoryCache.java
Patch:
@@ -25,10 +25,9 @@
 import org.apache.skywalking.oap.server.core.storage.StorageModule;
 import org.apache.skywalking.oap.server.core.storage.cache.INetworkAddressInventoryCacheDAO;
 import org.apache.skywalking.oap.server.library.module.*;
-import org.apache.skywalking.oap.server.library.util.StringUtils;
 import org.slf4j.*;
 
-import static java.util.Objects.isNull;
+import static java.util.Objects.*;
 
 /**
  * @author peng-yongsheng
@@ -72,7 +71,7 @@ public NetworkAddressInventory get(int addressId) {
 
         if (isNull(networkAddress)) {
             networkAddress = getCacheDAO().get(addressId);
-            if (StringUtils.isNotEmpty(networkAddress)) {
+            if (nonNull(networkAddress)) {
                 addressIdCache.put(addressId, networkAddress);
             }
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/EndpointInventory.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
-import org.apache.skywalking.oap.server.library.util.StringUtils;
+import org.elasticsearch.common.Strings;
 
 /**
  * @author peng-yongsheng
@@ -91,7 +91,7 @@ public static String buildId(int serviceId, String endpointName, int detectPoint
         remoteBuilder.addDataLongs(getRegisterTime());
         remoteBuilder.addDataLongs(getHeartbeatTime());
 
-        remoteBuilder.addDataStrings(StringUtils.getOrDefault(name, Const.EMPTY_STRING));
+        remoteBuilder.addDataStrings(Strings.isNullOrEmpty(name) ? Const.EMPTY_STRING : name);
         return remoteBuilder;
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/NetworkAddressInventory.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
-import org.apache.skywalking.oap.server.library.util.StringUtils;
+import org.elasticsearch.common.Strings;
 
 /**
  * @author peng-yongsheng
@@ -88,7 +88,7 @@ public static String buildId(String networkAddress) {
         remoteBuilder.addDataLongs(getRegisterTime());
         remoteBuilder.addDataLongs(getHeartbeatTime());
 
-        remoteBuilder.addDataStrings(StringUtils.getOrDefault(name, Const.EMPTY_STRING));
+        remoteBuilder.addDataStrings(Strings.isNullOrEmpty(name) ? Const.EMPTY_STRING : name);
         return remoteBuilder;
     }
 

File: oap-server/server-library/library-server/src/main/java/org/apache/skywalking/oap/server/library/server/grpc/GRPCServer.java
Patch:
@@ -90,6 +90,7 @@ public String serverClassify() {
     @Override
     public void initialize() {
         InetSocketAddress address = new InetSocketAddress(host, port);
+
         nettyServerBuilder = NettyServerBuilder.forAddress(address);
         nettyServerBuilder = nettyServerBuilder.maxConcurrentCallsPerConnection(maxConcurrentCallsPerConnection).maxMessageSize(maxMessageSize);
         logger.info("Server started, host {} listening on {}", host, port);

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TraceQuery.java
Patch:
@@ -19,13 +19,14 @@
 package org.apache.skywalking.oap.query.graphql.resolver;
 
 import com.coxautodev.graphql.tools.GraphQLQueryResolver;
+import com.google.common.base.Strings;
 import java.io.IOException;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.skywalking.oap.query.graphql.type.TraceQueryCondition;
 import org.apache.skywalking.oap.server.core.*;
 import org.apache.skywalking.oap.server.core.query.*;
 import org.apache.skywalking.oap.server.core.query.entity.*;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
-import org.apache.skywalking.oap.server.library.util.StringUtils;
 
 import static java.util.Objects.nonNull;
 
@@ -53,7 +54,7 @@ public TraceBrief queryBasicTraces(final TraceQueryCondition condition) throws I
         long endSecondTB = 0;
         String traceId = Const.EMPTY_STRING;
 
-        if (StringUtils.isNotEmpty(condition.getTraceId())) {
+        if (!Strings.isNullOrEmpty(condition.getTraceId())) {
             traceId = condition.getTraceId();
         } else if (nonNull(condition.getQueryDuration())) {
             startSecondTB = DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(condition.getQueryDuration().getStep(), condition.getQueryDuration().getStart());

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java
Patch:
@@ -18,14 +18,14 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query;
 
+import com.google.common.base.Strings;
 import java.io.IOException;
 import java.util.Objects;
 import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;
 import org.apache.skywalking.oap.server.core.query.entity.*;
 import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.query.IAlarmQueryDAO;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
-import org.apache.skywalking.oap.server.library.util.StringUtils;
 import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.*;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.index.query.*;
@@ -52,7 +52,7 @@ public Alarms getAlarm(final Scope scope, final String keyword, final int limit,
             boolQueryBuilder.must().add(QueryBuilders.termQuery(AlarmRecord.SCOPE, scope.ordinal()));
         }
 
-        if (StringUtils.isNotEmpty(keyword)) {
+        if (!Strings.isNullOrEmpty(keyword)) {
             String matchCName = MatchCNameBuilder.INSTANCE.build(AlarmRecord.ALARM_MESSAGE);
             boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));
         }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/RuntimeContextConfiguration.java
Patch:
@@ -23,6 +23,7 @@ public class RuntimeContextConfiguration {
 
     public static String[] NEED_PROPAGATE_CONTEXT_KEY = new String[] {
         "SW_REQUEST",
-        "SW_RESPONSE"
+        "SW_RESPONSE",
+        "SW_WEBFLUX_REQUEST_KEY"
     };
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractSpring4Instrumentation.java
Patch:
@@ -22,10 +22,10 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 
 public abstract class AbstractSpring4Instrumentation extends ClassInstanceMethodsEnhancePluginDefine {
-    public static final String WITHNESS_CLASSES = "org.springframework.web.servlet.tags.ArgumentTag";
+    public static final String WITHNESS_CLASSES = "org.springframework.cache.interceptor.SimpleKey";
 
     @Override
     protected final String[] witnessClasses() {
-        return new String[] {WITHNESS_CLASSES};
+        return new String[] {WITHNESS_CLASSES, "org.springframework.cache.interceptor.DefaultKeyGenerator"};
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java
Patch:
@@ -37,4 +37,6 @@ public class Constants {
     public static final String RESPONSE_KEY_IN_RUNTIME_CONTEXT = "SW_RESPONSE";
 
     public static final String FORWARD_REQUEST_FLAG = "SW_FORWARD_REQUEST_FLAG";
+
+    public static final String WEBFLUX_REQUEST_KEY = "SW_WEBFLUX_REQUEST_KEY";
 }

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/test/java/org/apache/skywalking/apm/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegmentRef;
-import org.apache.skywalking.apm.agent.core.context.util.KeyValuePair;
+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;
@@ -214,7 +214,7 @@ private void assertConsumerSpan(AbstractTracingSpan span) {
     }
 
     private void assertCommonsAttribute(AbstractTracingSpan span) {
-        List<KeyValuePair> tags = SpanHelper.getTags(span);
+        List<TagValuePair> tags = SpanHelper.getTags(span);
         assertThat(tags.size(), is(1));
         assertThat(SpanHelper.getLayer(span), CoreMatchers.is(SpanLayer.RPC_FRAMEWORK));
         assertThat(SpanHelper.getComponentId(span), is(3));

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jetty/v9/client/SyncHttpRequestSendInterceptorTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
-import org.apache.skywalking.apm.agent.core.context.util.KeyValuePair;
+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;
 import org.apache.skywalking.apm.agent.test.helper.SpanHelper;
@@ -85,7 +85,7 @@ public void testMethodsAround() throws Throwable {
         Assert.assertEquals(1, SegmentHelper.getSpans(traceSegment).size());
         AbstractTracingSpan finishedSpan = SegmentHelper.getSpans(traceSegment).get(0);
 
-        List<KeyValuePair> tags = SpanHelper.getTags(finishedSpan);
+        List<TagValuePair> tags = SpanHelper.getTags(finishedSpan);
         assertThat(tags.size(), is(2));
         assertThat(tags.get(0).getValue(), is("GET"));
         assertThat(tags.get(1).getValue(), is(uri.toString()));
@@ -105,7 +105,7 @@ public void testMethodsAroundError() throws Throwable {
         Assert.assertEquals(1, SegmentHelper.getSpans(traceSegment).size());
         AbstractTracingSpan finishedSpan = SegmentHelper.getSpans(traceSegment).get(0);
 
-        List<KeyValuePair> tags = SpanHelper.getTags(finishedSpan);
+        List<TagValuePair> tags = SpanHelper.getTags(finishedSpan);
         assertThat(tags.size(), is(2));
         assertThat(tags.get(0).getValue(), is("GET"));
         assertThat(tags.get(1).getValue(), is(uri.toString()));

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/ProducerOperationHandlerInterceptorTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.skywalking.apm.agent.core.conf.Config;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
-import org.apache.skywalking.apm.agent.core.context.util.KeyValuePair;
+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;
 import org.apache.skywalking.apm.agent.test.helper.SpanHelper;
@@ -125,7 +125,7 @@ public void testConsumer() throws Throwable {
     private void assertCombSpan(AbstractTracingSpan span) {
         assertThat(span.getOperationName(), is("productorTest"));
         assertThat(SpanHelper.getComponentId(span), is(28));
-        List<KeyValuePair> tags = SpanHelper.getTags(span);
+        List<TagValuePair> tags = SpanHelper.getTags(span);
         assertThat(tags.get(0).getValue(), is("/bmi"));
         assertThat(span.isEntry(), is(true));
     }

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/TransportClientHandlerInterceptorTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.skywalking.apm.agent.core.conf.Config;
 import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;
-import org.apache.skywalking.apm.agent.core.context.util.KeyValuePair;
+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;
 import org.apache.skywalking.apm.agent.test.helper.SpanHelper;
@@ -120,7 +120,7 @@ public void testConsumer() throws Throwable {
     private void assertCombSpan(AbstractTracingSpan span) {
         assertThat(span.getOperationName(), is("consumerTest"));
         assertThat(SpanHelper.getComponentId(span), is(28));
-        List<KeyValuePair> tags = SpanHelper.getTags(span);
+        List<TagValuePair> tags = SpanHelper.getTags(span);
         assertThat(tags.get(0).getValue(), is("/bmi"));
         assertThat(span.isExit(), is(true));
     }

File: apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/Constants.java
Patch:
@@ -27,8 +27,6 @@ class Constants {
 
     static final String ELASTICSEARCH_DB_OP_PREFIX = "Elasticsearch/";
 
-    static final String ES_ENHANCE_INFO = "es_enhance_info";
-
     static final String BASE_FUTURE_METHOD = "actionGet";
 
     static final String ES_NODE = "node.address";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/CPMIndicator.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @author wusheng
  */
-@IndicatorOperator
+@IndicatorFunction(functionName = "cpm")
 public abstract class CPMIndicator extends Indicator implements LongValueHolder {
 
     protected static final String VALUE = "value";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/CountIndicator.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @author peng-yongsheng
  */
-@IndicatorOperator
+@IndicatorFunction(functionName = "count")
 public abstract class CountIndicator extends Indicator implements LongValueHolder {
 
     protected static final String VALUE = "value";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/DoubleAvgIndicator.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @author peng-yongsheng
  */
-@IndicatorOperator
+@IndicatorFunction(functionName = "doubleAvg")
 public abstract class DoubleAvgIndicator extends Indicator implements DoubleValueHolder {
 
     protected static final String SUMMATION = "summation";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/LongAvgIndicator.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @author peng-yongsheng
  */
-@IndicatorOperator
+@IndicatorFunction(functionName = "longAvg")
 public abstract class LongAvgIndicator extends Indicator implements LongValueHolder {
 
     protected static final String SUMMATION = "summation";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/P50Indicator.java
Patch:
@@ -18,11 +18,14 @@
 
 package org.apache.skywalking.oap.server.core.analysis.indicator;
 
+import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorFunction;
+
 /**
  * P50
  *
  * @author wusheng
  */
+@IndicatorFunction(functionName = "p50")
 public abstract class P50Indicator extends PxxIndicator {
     public P50Indicator() {
         super(50);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/P75Indicator.java
Patch:
@@ -18,11 +18,14 @@
 
 package org.apache.skywalking.oap.server.core.analysis.indicator;
 
+import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorFunction;
+
 /**
  * P75
  *
  * @author wusheng
  */
+@IndicatorFunction(functionName = "p75")
 public abstract class P75Indicator extends PxxIndicator {
     public P75Indicator() {
         super(75);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/P90Indicator.java
Patch:
@@ -18,11 +18,14 @@
 
 package org.apache.skywalking.oap.server.core.analysis.indicator;
 
+import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorFunction;
+
 /**
  * P90
  *
  * @author wusheng
  */
+@IndicatorFunction(functionName = "p90")
 public abstract class P90Indicator extends PxxIndicator {
     public P90Indicator() {
         super(90);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/P95Indicator.java
Patch:
@@ -18,11 +18,14 @@
 
 package org.apache.skywalking.oap.server.core.analysis.indicator;
 
+import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorFunction;
+
 /**
  * P95
  *
  * @author wusheng
  */
+@IndicatorFunction(functionName = "p95")
 public abstract class P95Indicator extends PxxIndicator {
     public P95Indicator() {
         super(95);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/P99Indicator.java
Patch:
@@ -18,11 +18,14 @@
 
 package org.apache.skywalking.oap.server.core.analysis.indicator;
 
+import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorFunction;
+
 /**
  * P99
  *
  * @author wusheng
  */
+@IndicatorFunction(functionName = "p99")
 public abstract class P99Indicator extends PxxIndicator {
     public P99Indicator() {
         super(99);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PercentIndicator.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author wusheng
  */
-@IndicatorOperator
+@IndicatorFunction(functionName = "percent")
 public abstract class PercentIndicator extends Indicator implements IntValueHolder {
     protected static final String TOTAL = "total";
     protected static final String MATCH = "match";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PxxIndicator.java
Patch:
@@ -33,7 +33,6 @@
  *
  * @author wusheng, peng-yongsheng
  */
-@IndicatorOperator
 public abstract class PxxIndicator extends Indicator implements IntValueHolder {
     protected static final String DETAIL_GROUP = "detail_group";
     protected static final String VALUE = "value";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/SumIndicator.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @author wusheng
  */
-@IndicatorOperator
+@IndicatorFunction(functionName = "sum")
 public abstract class SumIndicator extends Indicator implements LongValueHolder {
 
     protected static final String VALUE = "value";

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -79,7 +79,7 @@ public void run() {
                     logger.error("unexpected exception.", t);
                 }
             }), 0, 3, TimeUnit.SECONDS);
-            logger.debug("Agent sampling mechanism started. Sample {} traces in 10 seconds.", Config.Agent.SAMPLE_N_PER_3_SECS);
+            logger.debug("Agent sampling mechanism started. Sample {} traces in 3 seconds.", Config.Agent.SAMPLE_N_PER_3_SECS);
         }
     }
 

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v6/grpc/TraceSegmentReportServiceHandler.java
Patch:
@@ -33,11 +33,9 @@ public class TraceSegmentReportServiceHandler extends TraceSegmentReportServiceG
 
     private static final Logger logger = LoggerFactory.getLogger(TraceSegmentServiceHandler.class);
 
-    private final Boolean debug;
     private final SegmentParseV2.Producer segmentProducer;
 
     public TraceSegmentReportServiceHandler(SegmentParseV2.Producer segmentProducer) {
-        this.debug = System.getProperty("debug") != null;
         this.segmentProducer = segmentProducer;
     }
 

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v6/grpc/TraceSegmentReportServiceHandler.java
Patch:
@@ -33,11 +33,9 @@ public class TraceSegmentReportServiceHandler extends TraceSegmentReportServiceG
 
     private static final Logger logger = LoggerFactory.getLogger(TraceSegmentServiceHandler.class);
 
-    private final Boolean debug;
     private final SegmentParseV2.Producer segmentProducer;
 
     public TraceSegmentReportServiceHandler(SegmentParseV2.Producer segmentProducer) {
-        this.debug = System.getProperty("debug") != null;
         this.segmentProducer = segmentProducer;
     }
 

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmCore.java
Patch:
@@ -74,12 +74,12 @@ public void start(List<AlarmCallback> allCallbacks) {
                 boolean[] hasExecute = new boolean[] {false};
                 runningContext.values().forEach(ruleList -> ruleList.forEach(runningRule -> {
                     if (minutes > 0) {
-                        hasExecute[0] = true;
                         runningRule.moveTo(checkTime);
                         /**
                          * Don't run in the first quarter per min, avoid to trigger false alarm.
                          */
                         if (checkTime.getSecondOfMinute() > 15) {
+                            hasExecute[0] = true;
                             alarmMessageList.addAll(runningRule.check());
                         }
                     }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmModuleProvider.java
Patch:
@@ -46,7 +46,9 @@ public class AlarmModuleProvider extends ModuleProvider {
         }
         RulesReader reader = new RulesReader(applicationReader);
         Rules rules = reader.readRules();
-        this.registerServiceImplementation(IndicatorNotify.class, new NotifyHandler(rules));
+        NotifyHandler notifyHandler = new NotifyHandler(rules);
+        notifyHandler.init(new AlarmStandardPersistence());
+        this.registerServiceImplementation(IndicatorNotify.class, notifyHandler);
     }
 
     @Override public void start() throws ServiceNotProvidedException, ModuleStartException {

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java
Patch:
@@ -53,7 +53,6 @@ public NotifyHandler(Rules rules) {
         runningRules.forEach(rule -> rule.in(meta, indicator));
     }
 
-    @Override
     public void init(AlarmCallback... callbacks) {
         List<AlarmCallback> allCallbacks = new ArrayList<>();
         for (AlarmCallback callback : callbacks) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmEntrance.java
Patch:
@@ -105,7 +105,6 @@ private void init() {
                     serviceInstanceInventoryCache = moduleManager.find(CoreModule.NAME).provider().getService(ServiceInstanceInventoryCache.class);
                     endpointInventoryCache = moduleManager.find(CoreModule.NAME).provider().getService(EndpointInventoryCache.class);
                     indicatorNotify = moduleManager.find(AlarmModule.NAME).provider().getService(IndicatorNotify.class);
-                    indicatorNotify.init(new AlarmStandardPersistence());
                 }
             } finally {
                 initLock.unlock();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/IndicatorNotify.java
Patch:
@@ -33,6 +33,4 @@
  */
 public interface IndicatorNotify extends Service {
     void notify(MetaInAlarm indicatorName, Indicator indicator);
-
-    void init(AlarmCallback... callbacks);
 }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java
Patch:
@@ -74,7 +74,7 @@ protected StorageData getByColumn(JDBCHikariCPClient h2Client, String modelName,
 
     protected StorageData toStorageData(ResultSet rs, String modelName,
         StorageBuilder storageBuilder) throws SQLException {
-        while (rs.next()) {
+        if (rs.next()) {
             Map data = new HashMap();
             List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();
             for (ModelColumn column : columns) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.skywalking.oap.server.core.server.*;
 import org.apache.skywalking.oap.server.core.source.SourceReceiver;
 import org.apache.skywalking.oap.server.core.storage.model.IModelGetter;
+import org.apache.skywalking.oap.server.core.storage.model.IModelOverride;
 import org.apache.skywalking.oap.server.library.module.*;
 
 /**
@@ -73,6 +74,7 @@ private void addServerInterface(List<Class> classes) {
 
     private void addInsideService(List<Class> classes) {
         classes.add(IModelGetter.class);
+        classes.add(IModelOverride.class);
         classes.add(StreamDataClassGetter.class);
         classes.add(RemoteClientManager.class);
         classes.add(RemoteSenderService.class);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.skywalking.oap.server.core.storage.PersistenceTimer;
 import org.apache.skywalking.oap.server.core.storage.annotation.StorageAnnotationListener;
 import org.apache.skywalking.oap.server.core.storage.model.IModelGetter;
+import org.apache.skywalking.oap.server.core.storage.model.IModelOverride;
 import org.apache.skywalking.oap.server.core.storage.ttl.DataTTLKeeperTimer;
 import org.apache.skywalking.oap.server.library.module.*;
 import org.apache.skywalking.oap.server.library.server.ServerException;
@@ -106,6 +107,7 @@ public CoreModuleProvider() {
 
         this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));
         this.registerServiceImplementation(IModelGetter.class, storageAnnotationListener);
+        this.registerServiceImplementation(IModelOverride.class, storageAnnotationListener);
 
         this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager()));
         this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmStandardPersistence.java
Patch:
@@ -45,7 +45,7 @@ public class AlarmStandardPersistence implements AlarmCallback {
             record.setName(message.getName());
             record.setAlarmMessage(message.getAlarmMessage());
             record.setStartTime(message.getStartTime());
-            record.setTimeBucket(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(message.getStartTime()));
+            record.setTimeBucket(TimeBucketUtils.INSTANCE.getSecondTimeBucket(message.getStartTime()));
 
             RecordProcess.INSTANCE.in(record);
         });

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -38,7 +38,7 @@
  * @author peng-yongsheng
  */
 @RecordType
-@StorageEntity(name = SegmentRecord.INDEX_NAME, builder = SegmentRecord.Builder.class, deleteHistory = false, source = Scope.Segment)
+@StorageEntity(name = SegmentRecord.INDEX_NAME, builder = SegmentRecord.Builder.class, source = Scope.Segment)
 public class SegmentRecord extends Record {
 
     public static final String INDEX_NAME = "segment";

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java
Patch:
@@ -52,8 +52,8 @@ public AlarmTrend getAlarmTrend(final Duration duration) {
 
     public Alarms getAlarm(final Duration duration, final Scope scope, final String keyword,
         final Pagination paging) throws IOException {
-        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());
-        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());
+        long startTimeBucket = DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(duration.getStep(), duration.getStart());
+        long endTimeBucket = DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(duration.getStep(), duration.getEnd());
 
         return getQueryService().getAlarm(scope, keyword, paging, startTimeBucket, endTimeBucket);
     }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TopologyQuery.java
Patch:
@@ -50,8 +50,8 @@ public Topology getGlobalTopology(final Duration duration) throws IOException, P
         long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());
         long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());
 
-        long startTimestamp = DurationUtils.INSTANCE.toTimestamp(duration.getStep(), duration.getStart());
-        long endTimestamp = DurationUtils.INSTANCE.toTimestamp(duration.getStep(), duration.getEnd());
+        long startTimestamp = DurationUtils.INSTANCE.startTimeToTimestamp(duration.getStep(), duration.getStart());
+        long endTimestamp = DurationUtils.INSTANCE.endTimeToTimestamp(duration.getStep(), duration.getEnd());
 
         return getQueryService().getGlobalTopology(duration.getStep(), startTimeBucket, endTimeBucket, startTimestamp, endTimestamp);
     }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java
Patch:
@@ -84,7 +84,7 @@ public TraceModuleProvider() {
             grpcHandlerRegister.addHandler(new TraceSegmentReportServiceHandler(segmentProducerV2));
             jettyHandlerRegister.addHandler(new TraceSegmentServletHandler(segmentProducer));
 
-            SegmentStandardizationWorker standardizationWorker = new SegmentStandardizationWorker(segmentProducer, moduleConfig.getBufferPath() + "-v5", moduleConfig.getBufferOffsetMaxFileSize(), moduleConfig.getBufferDataMaxFileSize(), moduleConfig.isBufferFileCleanWhenRestart());
+            SegmentStandardizationWorker standardizationWorker = new SegmentStandardizationWorker(segmentProducer, moduleConfig.getBufferPath() + "v5", moduleConfig.getBufferOffsetMaxFileSize(), moduleConfig.getBufferDataMaxFileSize(), moduleConfig.isBufferFileCleanWhenRestart());
             segmentProducer.setStandardizationWorker(standardizationWorker);
 
             SegmentStandardizationWorker standardizationWorker2 = new SegmentStandardizationWorker(segmentProducer, moduleConfig.getBufferPath(), moduleConfig.getBufferOffsetMaxFileSize(), moduleConfig.getBufferDataMaxFileSize(), moduleConfig.isBufferFileCleanWhenRestart());

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java
Patch:
@@ -52,7 +52,7 @@ private SegmentSpanListener(ModuleManager moduleManager) {
 
     @Override
     public void parseFirst(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreInfo) {
-        long timeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(segmentCoreInfo.getStartTime());
+        long timeBucket = TimeBucketUtils.INSTANCE.getSecondTimeBucket(segmentCoreInfo.getStartTime());
 
         segment.setSegmentId(segmentCoreInfo.getSegmentId());
         segment.setServiceId(segmentCoreInfo.getServiceId());

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/AgentDataMock.java
Patch:
@@ -68,9 +68,9 @@ public static void main(String[] args) throws InterruptedException {
             serviceASegmentId = UniqueIdBuilder.INSTANCE.create();
             serviceBSegmentId = UniqueIdBuilder.INSTANCE.create();
             serviceCSegmentId = UniqueIdBuilder.INSTANCE.create();
-            serviceAMock.mock(streamObserver, globalTraceId, serviceASegmentId, startTimestamp, false);
-            serviceBMock.mock(streamObserver, globalTraceId, serviceBSegmentId, serviceASegmentId, startTimestamp, false);
-            serviceCMock.mock(streamObserver, globalTraceId, serviceCSegmentId, serviceBSegmentId, startTimestamp, false);
+            serviceAMock.mock(streamObserver, globalTraceId, serviceASegmentId, startTimestamp, true);
+            serviceBMock.mock(streamObserver, globalTraceId, serviceBSegmentId, serviceASegmentId, startTimestamp, true);
+            serviceCMock.mock(streamObserver, globalTraceId, serviceCSegmentId, serviceBSegmentId, startTimestamp, true);
         }
 
         streamObserver.onCompleted();

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java
Patch:
@@ -31,6 +31,7 @@ class ServiceBMock {
     private final RegisterMock registerMock;
     private static int SERVICE_ID;
     static int SERVICE_INSTANCE_ID;
+    static String DUBBO_PROVIDER_ENDPOINT = "org.skywaking.apm.testcase.dubbo.services.GreetServiceImpl.doBusiness()";
     static String ROCKET_MQ_ENDPOINT = "org.apache.skywalking.RocketMQ";
     static String ROCKET_MQ_ADDRESS = "RocketMQAddress:2000";
 
@@ -98,7 +99,7 @@ private SpanObject.Builder createEntrySpan(long startTimestamp, UniqueId.Builder
         span.addRefs(createReference(uniqueId, isPrepare));
 
         if (isPrepare) {
-            span.setOperationName(ServiceAMock.DUBBO_ENDPOINT);
+            span.setOperationName(ServiceBMock.DUBBO_PROVIDER_ENDPOINT);
         } else {
             span.setOperationNameId(4);
         }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceCMock.java
Patch:
@@ -90,7 +90,7 @@ private TraceSegmentReference.Builder createReference(UniqueId.Builder parentTra
         reference.setRefType(RefType.CrossProcess);
 
         if (isPrepare) {
-            reference.setParentServiceName(ServiceBMock.ROCKET_MQ_ENDPOINT);
+            reference.setParentServiceName(ServiceBMock.DUBBO_PROVIDER_ENDPOINT);
             reference.setNetworkAddress(ServiceBMock.ROCKET_MQ_ADDRESS);
             reference.setEntryServiceName(ServiceAMock.REST_ENDPOINT);
         } else {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/HistoryDeleteEsDAO.java
Patch:
@@ -19,10 +19,10 @@
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;
 
 import java.io.IOException;
-import org.apache.skywalking.oap.server.core.analysis.indicator.Indicator;
 import org.apache.skywalking.oap.server.core.storage.IHistoryDeleteDAO;
 import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;
-import org.slf4j.*;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * @author peng-yongsheng
@@ -37,7 +37,7 @@ public HistoryDeleteEsDAO(ElasticSearchClient client) {
 
     @Override
     public void deleteHistory(String modelName, String timeBucketColumnName, Long timeBucketBefore) throws IOException {
-        int statusCode = getClient().delete(modelName, Indicator.TIME_BUCKET, timeBucketBefore);
+        int statusCode = getClient().delete(modelName, timeBucketColumnName, timeBucketBefore);
         if (logger.isDebugEnabled()) {
             logger.debug("Delete history from {} index, status code {}", modelName, statusCode);
         }

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java
Patch:
@@ -142,15 +142,13 @@ public void forceInsert(String indexName, String id, XContentBuilder source) thr
     }
 
     public void forceUpdate(String indexName, String id, XContentBuilder source, long version) throws IOException {
-        indexName = formatIndexName(indexName);
         UpdateRequest request = prepareUpdate(indexName, id, source);
         request.version(version);
         request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);
         client.update(request);
     }
 
     public void forceUpdate(String indexName, String id, XContentBuilder source) throws IOException {
-        indexName = formatIndexName(indexName);
         UpdateRequest request = prepareUpdate(indexName, id, source);
         request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);
         client.update(request);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/ResponseCallBackInterceptor.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.resttemplate.async;
 
 import java.lang.reflect.Method;

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestRequestInterceptor.java
Patch:
@@ -16,13 +16,12 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.resttemplate.async;
 
 import java.lang.reflect.Method;
+import org.apache.skywalking.apm.agent.core.context.CarrierItem;
 import org.apache.skywalking.apm.agent.core.context.ContextCarrier;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
-import org.apache.skywalking.apm.agent.core.context.CarrierItem;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.springframework.http.client.AsyncClientHttpRequest;

File: oap-server/server-cluster-plugin/cluster-standalone-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/standalone/StandaloneManagerTest.java
Patch:
@@ -19,14 +19,15 @@
 package org.apache.skywalking.oap.server.cluster.plugin.standalone;
 
 import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;
+import org.apache.skywalking.oap.server.core.remote.client.Address;
 import org.junit.*;
 
 public class StandaloneManagerTest {
     @Test
     public void test() {
         StandaloneManager standaloneManager = new StandaloneManager();
-        RemoteInstance remote1 = new RemoteInstance("A", 100, true);
-        RemoteInstance remote2 = new RemoteInstance("B", 100, false);
+        RemoteInstance remote1 = new RemoteInstance(new Address("A", 100, true));
+        RemoteInstance remote2 = new RemoteInstance(new Address("B", 100, false));
 
         standaloneManager.registerRemote(remote1);
         Assert.assertEquals(remote1, standaloneManager.queryRemoteNodes().get(0));

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/data/NonMergeDataCollection.java
Patch:
@@ -69,11 +69,11 @@ public void finishWriting() {
     }
 
     @Override public boolean containsKey(STORAGE_DATA key) {
-        throw new UnsupportedOperationException("None merge data collection not support containsKey operation.");
+        throw new UnsupportedOperationException("Close merge data collection not support containsKey operation.");
     }
 
     @Override public STORAGE_DATA get(STORAGE_DATA key) {
-        throw new UnsupportedOperationException("None merge data collection not support get operation.");
+        throw new UnsupportedOperationException("Close merge data collection not support get operation.");
     }
 
     @Override public void put(STORAGE_DATA value) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/NetworkAddressInventoryRegister.java
Patch:
@@ -103,7 +103,7 @@ private IServiceInstanceInventoryRegister getServiceInstanceInventoryRegister()
 
             InventoryProcess.INSTANCE.in(networkAddress);
         } else {
-            logger.warn("Network address {} heartbeat, but not found in storage.");
+            logger.warn("Network getAddress {} heartbeat, but not found in storage.");
         }
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/ServiceInstanceInventoryRegister.java
Patch:
@@ -81,7 +81,7 @@ private ServiceInstanceInventoryCache getServiceInstanceInventoryCache() {
 
     @Override public int getOrCreate(int serviceId, int addressId, long registerTime) {
         if (logger.isDebugEnabled()) {
-            logger.debug("get or create service instance by address id, service id: {}, address id: {}, registerTime: {}", serviceId, addressId, registerTime);
+            logger.debug("get or create service instance by getAddress id, service id: {}, getAddress id: {}, registerTime: {}", serviceId, addressId, registerTime);
         }
 
         int serviceInstanceId = getServiceInstanceInventoryCache().getServiceInstanceId(serviceId, addressId);

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/Client.java
Patch:
@@ -22,7 +22,8 @@
  * @author peng-yongsheng
  */
 public interface Client {
-    void initialize() throws ClientException;
+    
+    void connect() throws ClientException;
 
     void shutdown();
 }

File: oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java
Patch:
@@ -59,7 +59,7 @@ public ElasticSearchClient(String clusterNodes, NameSpace namespace) {
         this.namespace = namespace;
     }
 
-    @Override public void initialize() {
+    @Override public void connect() {
         List<HttpHost> pairsList = parseClusterNodes(clusterNodes);
 
         client = new RestHighLevelClient(

File: oap-server/server-library/library-client/src/test/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClientTestCase.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String[] args) throws IOException, ClientException {
         builder.endObject();
 
         ElasticSearchClient client = new ElasticSearchClient("localhost:9200", null);
-        client.initialize();
+        client.connect();
 
         String indexName = "test";
         client.createIndex(indexName, settings, builder);

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/rest/NetworkAddressRegisterServletHandler.java
Patch:
@@ -59,7 +59,7 @@ public NetworkAddressRegisterServletHandler(ModuleManager moduleManager) {
                 String networkAddress = networkAddresses.get(i).getAsString();
 
                 if (logger.isDebugEnabled()) {
-                    logger.debug("network address register, network address: {}", networkAddress);
+                    logger.debug("network getAddress register, network getAddress: {}", networkAddress);
                 }
 
                 int addressId = networkAddressInventoryRegister.getOrCreate(networkAddress);

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/ReferenceIdExchanger.java
Patch:
@@ -92,7 +92,7 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {
 
             if (networkAddressId == 0) {
                 if (logger.isDebugEnabled()) {
-                    logger.debug("network address: {} from service id: {} exchange failed", standardBuilder.getNetworkAddress(), serviceId);
+                    logger.debug("network getAddress: {} from service id: {} exchange failed", standardBuilder.getNetworkAddress(), serviceId);
                 }
                 return false;
             } else {

File: oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/zipkin/transform/SpringSleuthSegmentBuilderTest.java
Patch:
@@ -99,7 +99,7 @@ public void testTransform() throws Exception {
             }
 
             @Override public int getOrCreate(int serviceId, int addressId, long registerTime) {
-                String key = "VitualAppCode:" + serviceId + ",address:" + addressId;
+                String key = "VitualAppCode:" + serviceId + ",getAddress:" + addressId;
                 if (applicationInstRegister.containsKey(key)) {
                     return applicationInstRegister.get(key);
                 } else {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -88,7 +88,7 @@ public void prepare() throws ServiceNotProvidedException {
     public void start() throws ModuleStartException {
         try {
             nameSpace.setNameSpace(config.getNameSpace());
-            elasticSearchClient.initialize();
+            elasticSearchClient.connect();
 
             StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());
             installer.install(elasticSearchClient);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -40,7 +40,7 @@ public static class Agent {
          * Application code is showed in sky-walking-ui. Suggestion: set an unique name for each application, one
          * application's nodes share the same code.
          */
-        public static String APPLICATION_CODE = "";
+        public static String SERVICE_NAME = "";
 
         /**
          * Authentication active is based on backend setting, see application.yml for more details.
@@ -114,9 +114,9 @@ public static class Dictionary {
         /**
          * The buffer size of application codes and peer
          */
-        public static int APPLICATION_CODE_BUFFER_SIZE = 10 * 10000;
+        public static int SERVICE_CODE_BUFFER_SIZE = 10 * 10000;
 
-        public static int OPERATION_NAME_BUFFER_SIZE = 1000 * 10000;
+        public static int ENDPOINT_NAME_BUFFER_SIZE = 1000 * 10000;
     }
 
     public static class Logging {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/RemoteDownstreamConfig.java
Patch:
@@ -29,8 +29,8 @@
  */
 public class RemoteDownstreamConfig {
     public static class Agent {
-        public volatile static int APPLICATION_ID = DictionaryUtil.nullValue();
+        public volatile static int SERVICE_ID = DictionaryUtil.nullValue();
 
-        public volatile static int APPLICATION_INSTANCE_ID = DictionaryUtil.nullValue();
+        public volatile static int SERVICE_INSTANCE_ID = DictionaryUtil.nullValue();
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java
Patch:
@@ -87,8 +87,8 @@ public static void initialize(String agentOptions) throws ConfigNotFoundExceptio
             }
         }
 
-        if (StringUtil.isEmpty(Config.Agent.APPLICATION_CODE)) {
-            throw new ExceptionInInitializerError("`agent.application_code` is missing.");
+        if (StringUtil.isEmpty(Config.Agent.SERVICE_NAME)) {
+            throw new ExceptionInInitializerError("`agent.service_code` is missing.");
         }
         if (StringUtil.isEmpty(Config.Collector.BACKEND_SERVICE)) {
             throw new ExceptionInInitializerError("`collector.direct_servers` and `collector.servers` cannot be empty at the same time.");

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java
Patch:
@@ -57,8 +57,8 @@ private static AbstractTracerContext getOrCreate(String operationName, boolean f
                 }
                 context = new IgnoredTracerContext();
             } else {
-                if (RemoteDownstreamConfig.Agent.APPLICATION_ID != DictionaryUtil.nullValue()
-                    && RemoteDownstreamConfig.Agent.APPLICATION_INSTANCE_ID != DictionaryUtil.nullValue()
+                if (RemoteDownstreamConfig.Agent.SERVICE_ID != DictionaryUtil.nullValue()
+                    && RemoteDownstreamConfig.Agent.SERVICE_INSTANCE_ID != DictionaryUtil.nullValue()
                     ) {
                     context = EXTEND_SERVICE.createTraceContext(operationName, forceSampling);
                 } else {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ids/GlobalIdGenerator.java
Patch:
@@ -52,13 +52,13 @@ private GlobalIdGenerator() {
      * @return an array contains three long numbers, which represents a unique id.
      */
     public static ID generate() {
-        if (RemoteDownstreamConfig.Agent.APPLICATION_INSTANCE_ID == DictionaryUtil.nullValue()) {
+        if (RemoteDownstreamConfig.Agent.SERVICE_INSTANCE_ID == DictionaryUtil.nullValue()) {
             throw new IllegalStateException();
         }
         IDContext context = THREAD_ID_SEQUENCE.get();
 
         return new ID(
-            RemoteDownstreamConfig.Agent.APPLICATION_INSTANCE_ID,
+            RemoteDownstreamConfig.Agent.SERVICE_INSTANCE_ID,
             Thread.currentThread().getId(),
             context.nextSeq()
         );

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.agent.core.context.util.ThrowableTransformer;
 import org.apache.skywalking.apm.agent.core.dictionary.DictionaryUtil;
 import org.apache.skywalking.apm.network.language.agent.*;
+import org.apache.skywalking.apm.network.language.agent.v2.SpanObjectV2;
 import org.apache.skywalking.apm.network.trace.component.Component;
 
 /**
@@ -244,8 +245,8 @@ public AbstractSpan start(long startTime) {
         return this;
     }
 
-    public SpanObject.Builder transform() {
-        SpanObject.Builder spanBuilder = SpanObject.newBuilder();
+    public SpanObjectV2.Builder transform() {
+        SpanObjectV2.Builder spanBuilder = SpanObjectV2.newBuilder();
 
         spanBuilder.setSpanId(this.spanId);
         spanBuilder.setParentSpanId(parentSpanId);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/StackBasedTracingSpan.java
Patch:
@@ -46,8 +46,8 @@ protected StackBasedTracingSpan(int spanId, int parentSpanId, int operationId) {
     public boolean finish(TraceSegment owner) {
         if (--stackDepth == 0) {
             if (this.operationId == DictionaryUtil.nullValue()) {
-                this.operationId = (Integer)DictionaryManager.findOperationNameCodeSection()
-                    .findOrPrepare4Register(owner.getApplicationId(), operationName, this.isEntry(), this.isExit())
+                this.operationId = (Integer)DictionaryManager.findEndpointSection()
+                    .findOrPrepare4Register(owner.getServiceId(), operationName, this.isEntry(), this.isExit())
                     .doInCondition(
                         new PossibleFound.FoundAndObtain() {
                             @Override public Object doProcess(int value) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/KeyValuePair.java
Patch:
@@ -19,7 +19,7 @@
 
 package org.apache.skywalking.apm.agent.core.context.util;
 
-import org.apache.skywalking.apm.network.language.agent.*;
+import org.apache.skywalking.apm.network.common.KeyStringValuePair;
 
 /**
  * The <code>KeyValuePair</code> represents a object which contains a string key and a string value.
@@ -43,8 +43,8 @@ public String getValue() {
         return value;
     }
 
-    public KeyWithStringValue transform() {
-        KeyWithStringValue.Builder keyValueBuilder = KeyWithStringValue.newBuilder();
+    public KeyStringValuePair transform() {
+        KeyStringValuePair.Builder keyValueBuilder = KeyStringValuePair.newBuilder();
         keyValueBuilder.setKey(key);
         if (value != null) {
             keyValueBuilder.setValue(value);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/dictionary/DictionaryManager.java
Patch:
@@ -31,9 +31,9 @@ public static NetworkAddressDictionary findNetworkAddressSection() {
     }
 
     /**
-     * @return {@link OperationNameDictionary} to find service id.
+     * @return {@link EndpointNameDictionary} to find service id.
      */
-    public static OperationNameDictionary findOperationNameCodeSection() {
-        return OperationNameDictionary.INSTANCE;
+    public static EndpointNameDictionary findEndpointSection() {
+        return EndpointNameDictionary.INSTANCE;
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/IgnoredTracerContextTest.java
Patch:
@@ -48,8 +48,8 @@ public class IgnoredTracerContextTest {
 
     @Before
     public void setUp() throws Exception {
-        RemoteDownstreamConfig.Agent.APPLICATION_ID = 1;
-        RemoteDownstreamConfig.Agent.APPLICATION_INSTANCE_ID = 1;
+        RemoteDownstreamConfig.Agent.SERVICE_ID = 1;
+        RemoteDownstreamConfig.Agent.SERVICE_INSTANCE_ID = 1;
     }
 
     @AfterClass
@@ -99,7 +99,7 @@ public void ignoredTraceContextWithEmptyOperationName() {
         ContextManager.stopSpan();
 
         assertThat(abstractSpan.getClass().getName(), is(NoopSpan.class.getName()));
-        assertNull(contextCarrier.getEntryOperationName());
+        assertNull(contextCarrier.getEntryEndpointName());
         assertThat(contextCarrier.getSpanId(), is(-1));
         assertNull(contextCarrier.getPeerHost());
 

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/test/java/org/apache/skywalking/apm/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -107,7 +107,7 @@ public void setUp() throws Exception {
         when(rpcContext.isConsumerSide()).thenReturn(true);
         allArguments = new Object[] {invoker, invocation};
         argumentTypes = new Class[] {invoker.getClass(), invocation.getClass()};
-        Config.Agent.APPLICATION_CODE = "DubboTestCases-APP";
+        Config.Agent.SERVICE_NAME = "DubboTestCases-APP";
     }
 
     @After
@@ -199,7 +199,7 @@ private void assertProvider() {
 
     private void assertTraceSegmentRef(TraceSegmentRef actual) {
         assertThat(SegmentRefHelper.getSpanId(actual), is(3));
-        assertThat(SegmentRefHelper.getEntryApplicationInstanceId(actual), is(1));
+        assertThat(SegmentRefHelper.getEntryServiceInstanceId(actual), is(1));
         assertThat(SegmentRefHelper.getTraceSegmentId(actual).toString(), is("1.323.4433"));
     }
 

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jetty/v9/server/HandleInterceptorTest.java
Patch:
@@ -146,7 +146,7 @@ public void testWithOccurException() throws Throwable {
     }
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
-        assertThat(SegmentRefHelper.getEntryApplicationInstanceId(ref), is(1));
+        assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(1));
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
         assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.234.111"));
     }

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/test/java/org/apache/skywalking/apm/plugin/kafka/v11/CallbackInterceptorTest.java
Patch:
@@ -139,7 +139,7 @@ private void assertCallbackSegmentRef(List<TraceSegmentRef> refs) {
 
         TraceSegmentRef segmentRef = refs.get(0);
         SegmentRefAssert.assertSpanId(segmentRef, 1);
-        assertThat(segmentRef.getEntryOperationName(), is("/for-test-entryOperationName"));
+        assertThat(segmentRef.getEntryEndpointName(), is("/for-test-entryOperationName"));
     }
 
     private void assertCallbackSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/test/java/org/apache/skywalking/apm/plugin/kafka/v11/KafkaConsumerInterceptorTest.java
Patch:
@@ -143,7 +143,7 @@ private void assertConsumerSpan(AbstractTracingSpan span) {
     }
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
-        MatcherAssert.assertThat(SegmentRefHelper.getEntryApplicationInstanceId(ref), is(1));
+        MatcherAssert.assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(1));
         MatcherAssert.assertThat(SegmentRefHelper.getSpanId(ref), is(3));
         MatcherAssert.assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.234.111"));
     }

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/test/java/org/apache/skywalking/apm/plugin/motan/MotanProviderInterceptorTest.java
Patch:
@@ -163,7 +163,7 @@ private void assertTraceSegmentWhenOccurException() {
     private void assertRefSegment(TraceSegmentRef primaryRef) {
         assertThat(SegmentRefHelper.getTraceSegmentId(primaryRef).toString(), is("1.123.456"));
         assertThat(SegmentRefHelper.getSpanId(primaryRef), is(3));
-        assertThat(SegmentRefHelper.getEntryApplicationInstanceId(primaryRef), is(1));
+        assertThat(SegmentRefHelper.getEntryServiceInstanceId(primaryRef), is(1));
         assertThat(SegmentRefHelper.getPeerHost(primaryRef), is("192.168.1.8:18002"));
     }
 

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/ProducerOperationHandlerInterceptorTest.java
Patch:
@@ -100,7 +100,7 @@ public void setUp() throws Exception {
         when(statusType.getStatusCode()).thenReturn(200);
         when(method.getName()).thenReturn("producer");
         when(invocation.getInvocationType()).thenReturn(InvocationType.PRODUCER);
-        Config.Agent.APPLICATION_CODE = "serviceComnTestCases-APP";
+        Config.Agent.SERVICE_NAME = "serviceComnTestCases-APP";
 
         allArguments = new Object[] {invocation,};
         argumentsType = new Class[] {};

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/TransportClientHandlerInterceptorTest.java
Patch:
@@ -99,7 +99,7 @@ public void setUp() throws Exception {
         when(invocation.getStatus()).thenReturn(statusType);
         when(statusType.getStatusCode()).thenReturn(200);
         when(invocation.getInvocationType()).thenReturn(InvocationType.CONSUMER);
-        Config.Agent.APPLICATION_CODE = "serviceComnTestCases-APP";
+        Config.Agent.SERVICE_NAME = "serviceComnTestCases-APP";
 
         allArguments = new Object[] {invocation,};
         argumentsType = new Class[] {};

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/v1/ProducerOperationHandlerInterceptorTest.java
Patch:
@@ -100,7 +100,7 @@ public void setUp() throws Exception {
         when(statusType.getStatusCode()).thenReturn(200);
         when(method.getName()).thenReturn("producer");
         when(invocation.getInvocationType()).thenReturn(InvocationType.PRODUCER);
-        Config.Agent.APPLICATION_CODE = "serviceComnTestCases-APP";
+        Config.Agent.SERVICE_NAME = "serviceComnTestCases-APP";
 
         allArguments = new Object[] {invocation,};
         argumentsType = new Class[] {};

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/servicecomb/v1/TransportClientHandlerInterceptorTest.java
Patch:
@@ -99,7 +99,7 @@ public void setUp() throws Exception {
         when(invocation.getStatus()).thenReturn(statusType);
         when(statusType.getStatusCode()).thenReturn(200);
         when(invocation.getInvocationType()).thenReturn(InvocationType.CONSUMER);
-        Config.Agent.APPLICATION_CODE = "serviceComnTestCases-APP";
+        Config.Agent.SERVICE_NAME = "serviceComnTestCases-APP";
 
         allArguments = new Object[] {invocation,};
         argumentsType = new Class[] {};

File: apm-sniffer/apm-sdk-plugin/sofarpc-plugin/src/test/java/org/apache/skywalking/apm/plugin/sofarpc/SofaRpcConsumerInterceptorTest.java
Patch:
@@ -100,7 +100,7 @@ public void setUp() throws Exception {
         when(rpcContext.getProviderInfo()).thenReturn(providerInfo);
         allArguments = new Object[] {sofaRequest};
         argumentTypes = new Class[] {sofaRequest.getClass()};
-        Config.Agent.APPLICATION_CODE = "SOFARPC-TestCases-APP";
+        Config.Agent.SERVICE_NAME = "SOFARPC-TestCases-APP";
     }
 
     @Test

File: apm-sniffer/apm-sdk-plugin/sofarpc-plugin/src/test/java/org/apache/skywalking/apm/plugin/sofarpc/SofaRpcProviderInterceptorTest.java
Patch:
@@ -110,7 +110,7 @@ public void setUp() throws Exception {
         when(rpcContext.getProviderInfo()).thenReturn(providerInfo);
         allArguments = new Object[] {sofaRequest};
         argumentTypes = new Class[] {sofaRequest.getClass()};
-        Config.Agent.APPLICATION_CODE = "SOFARPC-TestCases-APP";
+        Config.Agent.SERVICE_NAME = "SOFARPC-TestCases-APP";
     }
 
     @After
@@ -138,7 +138,7 @@ private void assertProvider() {
 
     private void assertTraceSegmentRef(TraceSegmentRef actual) {
         assertThat(SegmentRefHelper.getSpanId(actual), is(3));
-        assertThat(SegmentRefHelper.getEntryApplicationInstanceId(actual), is(1));
+        assertThat(SegmentRefHelper.getEntryServiceInstanceId(actual), is(1));
         assertThat(SegmentRefHelper.getTraceSegmentId(actual).toString(), is("1.323.4433"));
     }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java
Patch:
@@ -155,7 +155,7 @@ public void testWithOccurException() throws Throwable {
     }
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
-        assertThat(SegmentRefHelper.getEntryApplicationInstanceId(ref), is(1));
+        assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(1));
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
         assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.444.555"));
     }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java
Patch:
@@ -286,7 +286,7 @@ public void testWithOccurException() throws Throwable {
     }
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
-        MatcherAssert.assertThat(SegmentRefHelper.getEntryApplicationInstanceId(ref), is(1));
+        MatcherAssert.assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(1));
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
         MatcherAssert.assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.444.555"));
     }

File: apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/struts2/Struts2InterceptorTest.java
Patch:
@@ -161,7 +161,7 @@ public void testWithOccurException() throws Throwable {
     }
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
-        assertThat(SegmentRefHelper.getEntryApplicationInstanceId(ref), is(1));
+        assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(1));
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
         assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.234.111"));
     }

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/tomcat78x/TomcatInvokeInterceptorTest.java
Patch:
@@ -161,7 +161,7 @@ public void testWithTomcatException() throws Throwable {
     }
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
-        assertThat(SegmentRefHelper.getEntryApplicationInstanceId(ref), is(1));
+        assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(1));
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
         assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.234.111"));
     }

File: apm-sniffer/apm-sdk-plugin/undertow-plugins/undertow-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/undertow/v2x/ExecuteRootHandlerInterceptorTest.java
Patch:
@@ -172,7 +172,7 @@ public void testWithUndertowException() throws Throwable {
     }
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
-        assertThat(SegmentRefHelper.getEntryApplicationInstanceId(ref), is(1));
+        assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(1));
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
         assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.234.111"));
     }

File: apm-sniffer/apm-test-tools/src/main/java/org/apache/skywalking/apm/agent/test/helper/SegmentRefHelper.java
Patch:
@@ -50,9 +50,9 @@ public static int getSpanId(TraceSegmentRef ref) {
         return -1;
     }
 
-    public static int getEntryApplicationInstanceId(TraceSegmentRef ref) {
+    public static int getEntryServiceInstanceId(TraceSegmentRef ref) {
         try {
-            return FieldGetter.getValue(ref, "entryApplicationInstanceId");
+            return FieldGetter.getValue(ref, "entryServiceInstanceId");
         } catch (Exception e) {
         }
 

File: apm-sniffer/apm-test-tools/src/main/java/org/apache/skywalking/apm/agent/test/tools/AgentServiceRule.java
Patch:
@@ -53,7 +53,7 @@ protected void before() throws Throwable {
         AgentClassLoader.initDefaultLoader();
         Config.Logging.LEVEL = LogLevel.OFF;
         ServiceManager.INSTANCE.boot();
-        RemoteDownstreamConfig.Agent.APPLICATION_ID = 1;
-        RemoteDownstreamConfig.Agent.APPLICATION_INSTANCE_ID = 1;
+        RemoteDownstreamConfig.Agent.SERVICE_ID = 1;
+        RemoteDownstreamConfig.Agent.SERVICE_INSTANCE_ID = 1;
     }
 }

File: apm-sniffer/apm-test-tools/src/main/java/org/apache/skywalking/apm/agent/test/tools/SegmentRefAssert.java
Patch:
@@ -39,7 +39,7 @@ public static void assertPeerHost(TraceSegmentRef ref, String peerHost) {
     }
 
     public static void assertEntryApplicationInstanceId(TraceSegmentRef ref, int entryApplicationInstanceID) {
-        assertThat(SegmentRefHelper.getEntryApplicationInstanceId(ref), is(entryApplicationInstanceID));
+        assertThat(SegmentRefHelper.getEntryServiceInstanceId(ref), is(entryApplicationInstanceID));
     }
 
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentDispatcher.java
Patch:
@@ -40,6 +40,7 @@ public class SegmentDispatcher implements SourceDispatcher<Segment> {
         segment.setIsError(source.getIsError());
         segment.setDataBinary(source.getDataBinary());
         segment.setTimeBucket(source.getTimeBucket());
+        segment.setVersion(source.getVersion());
 
         RecordProcess.INSTANCE.in(segment);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DetectPoint.java
Patch:
@@ -39,7 +39,7 @@ public static DetectPoint fromSpanType(SpanType spanType) {
         }
     }
 
-    public static DetectPoint fromMeshDetectPoint(org.apache.skywalking.apm.network.common.DetectPoint detectPoint) {
+    public static DetectPoint fromNetworkProtocolDetectPoint(org.apache.skywalking.apm.network.common.DetectPoint detectPoint) {
         switch (detectPoint) {
             case client:
                 return CLIENT;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Segment.java
Patch:
@@ -45,4 +45,5 @@ public class Segment extends Source {
     @Setter @Getter private int latency;
     @Setter @Getter private int isError;
     @Setter @Getter private byte[] dataBinary;
+    @Setter @Getter private int version;
 }

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/ServiceMeshMetricDataDecorator.java
Patch:
@@ -90,12 +90,12 @@ boolean tryMetaDataRegister() {
         if (DetectPoint.client.equals(point)) {
             if (sourceServiceId != Const.NONE) {
                 endpointId = CoreRegisterLinker.getEndpointInventoryRegister().getOrCreate(sourceServiceId, endpoint,
-                    org.apache.skywalking.oap.server.core.source.DetectPoint.fromMeshDetectPoint(point));
+                    org.apache.skywalking.oap.server.core.source.DetectPoint.fromNetworkProtocolDetectPoint(point));
             }
         } else {
             if (destServiceId != Const.NONE) {
                 endpointId = CoreRegisterLinker.getEndpointInventoryRegister().getOrCreate(destServiceId, endpoint,
-                    org.apache.skywalking.oap.server.core.source.DetectPoint.fromMeshDetectPoint(point));
+                    org.apache.skywalking.oap.server.core.source.DetectPoint.fromNetworkProtocolDetectPoint(point));
             }
         }
 

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParserServiceImpl.java
Patch:
@@ -24,15 +24,15 @@
  * @author wusheng
  */
 public class SegmentParserServiceImpl implements ISegmentParserService {
-    private final SegmentParse.Producer segmentProducer;
+    private final SegmentParseV2.Producer segmentProducer;
 
     public SegmentParserServiceImpl(
-        SegmentParse.Producer segmentProducer) {
+        SegmentParseV2.Producer segmentProducer) {
         this.segmentProducer = segmentProducer;
     }
 
     @Override
     public void send(UpstreamSegment segment) {
-        segmentProducer.send(segment, SegmentParse.Source.Agent);
+        segmentProducer.send(segment,SegmentSource.Agent);
     }
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/decorator/SegmentCoreInfo.java
Patch:
@@ -27,11 +27,12 @@
 @Setter
 public class SegmentCoreInfo {
     private String segmentId;
-    private int applicationId;
-    private int applicationInstanceId;
+    private int serviceId;
+    private int serviceInstanceId;
     private long startTime;
     private long endTime;
     private boolean isError;
     private long minuteTimeBucket;
     private byte[] dataBinary;
+    private boolean isV2;
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/service/ServiceMappingSpanListener.java
Patch:
@@ -59,10 +59,10 @@ private ServiceMappingSpanListener(ModuleManager moduleManager) {
                 for (int i = 0; i < spanDecorator.getRefsCount(); i++) {
                     int serviceId = serviceInventoryCache.getServiceId(spanDecorator.getRefs(i).getNetworkAddressId());
                     int mappingServiceId = serviceInventoryCache.get(serviceId).getMappingServiceId();
-                    if (mappingServiceId != segmentCoreInfo.getApplicationId()) {
+                    if (mappingServiceId != segmentCoreInfo.getServiceId()) {
                         ServiceMapping serviceMapping = new ServiceMapping();
                         serviceMapping.setServiceId(serviceId);
-                        serviceMapping.setMappingServiceId(segmentCoreInfo.getApplicationId());
+                        serviceMapping.setMappingServiceId(segmentCoreInfo.getServiceId());
                         serviceMappings.add(serviceMapping);
                     }
                 }

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java
Patch:
@@ -160,6 +160,7 @@ public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long mi
                     if (StringUtils.isNotEmpty(dataBinaryBase64)) {
                         segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));
                     }
+                    segmentRecord.setVersion(resultSet.getInt(SegmentRecord.VERSION));
                     segmentRecords.add(segmentRecord);
                 }
             }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java
Patch:
@@ -52,7 +52,7 @@ private SegmentSpanListener(ModuleManager moduleManager) {
 
     @Override
     public void parseFirst(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreInfo) {
-        long timeBucket = TimeBucketUtils.INSTANCE.getSecondTimeBucket(segmentCoreInfo.getStartTime());
+        long timeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(segmentCoreInfo.getStartTime());
 
         segment.setSegmentId(segmentCoreInfo.getSegmentId());
         segment.setServiceId(segmentCoreInfo.getApplicationId());

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/InstanceConstructorInterceptor.java
Patch:
@@ -28,7 +28,7 @@
  */
 public interface InstanceConstructorInterceptor {
     /**
-     * Called before the origin constructor invocation.
+     * Called after the origin constructor invocation.
      */
     void onConstruct(EnhancedInstance objInst, Object[] allArguments);
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/SW3CarrierItem.java
Patch:
@@ -27,12 +27,12 @@ public class SW3CarrierItem extends CarrierItem {
     private ContextCarrier carrier;
 
     public SW3CarrierItem(ContextCarrier carrier, CarrierItem next) {
-        super(HEADER_NAME, carrier.serialize(), next);
+        super(HEADER_NAME, carrier.serialize(ContextCarrier.HeaderVersion.v1), next);
         this.carrier = carrier;
     }
 
     @Override
     public void setHeadValue(String headValue) {
-        carrier.deserialize(headValue);
+        carrier.deserialize(headValue, ContextCarrier.HeaderVersion.v1);
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/ContextManagerTest.java
Patch:
@@ -80,7 +80,7 @@ public static void afterClass() {
 
     @Test
     public void createSpanWithInvalidateContextCarrier() {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA=#AQA=4WcWe0tQNQA=|1|#127.0.0.1:8080|#/testEntrySpan|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA=#AQA=4WcWe0tQNQA=|1|#127.0.0.1:8080|#/testEntrySpan|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=", ContextCarrier.HeaderVersion.v1);
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testEntrySpan", contextCarrier);
         firstEntrySpan.setComponent(ComponentsDefine.TOMCAT);
@@ -104,7 +104,7 @@ public void createSpanWithInvalidateContextCarrier() {
 
     @Test
     public void createMultipleEntrySpan() {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.2343.234234234|1|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|1.2343.234234234");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.2343.234234234|1|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|1.2343.234234234", ContextCarrier.HeaderVersion.v1);
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);
@@ -227,7 +227,7 @@ public void tearDown() throws Exception {
 
     @Test
     public void testTransform() throws InvalidProtocolBufferException {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.234.1983829|3|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|1.2343.234234234");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.234.1983829|3|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|1.2343.234234234", ContextCarrier.HeaderVersion.v1);
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.analysis.record.annotation.RecordType;
+import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 
@@ -32,7 +33,7 @@
 @Getter
 @Setter
 @RecordType
-@StorageEntity(name = AlarmRecord.INDEX_NAME, builder = AlarmRecord.Builder.class)
+@StorageEntity(name = AlarmRecord.INDEX_NAME, builder = AlarmRecord.Builder.class, source = Scope.Alarm)
 public class AlarmRecord extends Record {
 
     public static final String INDEX_NAME = "alarm_record";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/all/AllDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.All;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpoint/EndpointDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.Endpoint;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpointrelation/EndpointRelationDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.endpointrelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/service/ServiceDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.Service;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstance/ServiceInstanceDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.ServiceInstance;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmcpu/ServiceInstanceJVMCPUDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMCPU;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmgc/ServiceInstanceJVMGCDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmgc;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemory/ServiceInstanceJVMMemoryDispatcher.java
Patch:
@@ -19,9 +19,9 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmmemory;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemory;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemorypool/ServiceInstanceJVMMemoryPoolDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmmemorypool;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemoryPool;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancerelation/ServiceInstanceRelationDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancerelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceRelation;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.servicerelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/endpointrelation/EndpointRelationServerSideIndicator.java
Patch:
@@ -25,12 +25,13 @@
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorType;
 import org.apache.skywalking.oap.server.core.remote.annotation.StreamData;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 
 @IndicatorType
 @StreamData
-@StorageEntity(name = EndpointRelationServerSideIndicator.INDEX_NAME, builder = EndpointRelationServerSideIndicator.Builder.class)
+@StorageEntity(name = EndpointRelationServerSideIndicator.INDEX_NAME, builder = EndpointRelationServerSideIndicator.Builder.class, source = Scope.EndpointRelation)
 public class EndpointRelationServerSideIndicator extends Indicator {
 
     public static final String INDEX_NAME = "endpoint_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.analysis.record.Record;
 import org.apache.skywalking.oap.server.core.analysis.record.annotation.RecordType;
+import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 import org.apache.skywalking.oap.server.library.util.CollectionUtils;
@@ -32,7 +33,7 @@
  * @author peng-yongsheng
  */
 @RecordType
-@StorageEntity(name = SegmentRecord.INDEX_NAME, builder = SegmentRecord.Builder.class, deleteHistory = false)
+@StorageEntity(name = SegmentRecord.INDEX_NAME, builder = SegmentRecord.Builder.class, deleteHistory = false, source = Scope.Segment)
 public class SegmentRecord extends Record {
 
     public static final String INDEX_NAME = "segment";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/servicerelation/ServiceRelationClientSideIndicator.java
Patch:
@@ -25,12 +25,13 @@
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorType;
 import org.apache.skywalking.oap.server.core.remote.annotation.StreamData;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 
 @IndicatorType
 @StreamData
-@StorageEntity(name = ServiceRelationClientSideIndicator.INDEX_NAME, builder = ServiceRelationClientSideIndicator.Builder.class)
+@StorageEntity(name = ServiceRelationClientSideIndicator.INDEX_NAME, builder = ServiceRelationClientSideIndicator.Builder.class, source = Scope.ServiceRelation)
 public class ServiceRelationClientSideIndicator extends Indicator {
 
     public static final String INDEX_NAME = "service_relation_client_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/servicerelation/ServiceRelationServerSideIndicator.java
Patch:
@@ -25,12 +25,14 @@
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorType;
 import org.apache.skywalking.oap.server.core.remote.annotation.StreamData;
 import org.apache.skywalking.oap.server.core.remote.grpc.proto.RemoteData;
+import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 
 @IndicatorType
 @StreamData
-@StorageEntity(name = ServiceRelationServerSideIndicator.INDEX_NAME, builder = ServiceRelationServerSideIndicator.Builder.class)
+@StorageEntity(name = ServiceRelationServerSideIndicator.INDEX_NAME, builder = ServiceRelationServerSideIndicator.Builder.class,
+    source = Scope.ServiceRelation)
 public class ServiceRelationServerSideIndicator extends Indicator {
 
     public static final String INDEX_NAME = "service_relation_server_side";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/EndpointInventory.java
Patch:
@@ -32,9 +32,9 @@
 /**
  * @author peng-yongsheng
  */
-@InventoryType(scope = Scope.Endpoint)
+@InventoryType
 @StreamData
-@StorageEntity(name = EndpointInventory.MODEL_NAME, builder = EndpointInventory.Builder.class, deleteHistory = false)
+@StorageEntity(name = EndpointInventory.MODEL_NAME, builder = EndpointInventory.Builder.class, deleteHistory = false, source = Scope.EndpointInventory)
 public class EndpointInventory extends RegisterSource {
 
     public static final String MODEL_NAME = "endpoint_inventory";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/NetworkAddressInventory.java
Patch:
@@ -32,9 +32,9 @@
 /**
  * @author peng-yongsheng
  */
-@InventoryType(scope = Scope.NetworkAddress)
+@InventoryType
 @StreamData
-@StorageEntity(name = NetworkAddressInventory.MODEL_NAME, builder = NetworkAddressInventory.Builder.class, deleteHistory = false)
+@StorageEntity(name = NetworkAddressInventory.MODEL_NAME, builder = NetworkAddressInventory.Builder.class, deleteHistory = false, source = Scope.NetworkAddress)
 public class NetworkAddressInventory extends RegisterSource {
 
     public static final String MODEL_NAME = "network_address_inventory";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInstanceInventory.java
Patch:
@@ -35,9 +35,9 @@
 /**
  * @author peng-yongsheng
  */
-@InventoryType(scope = Scope.ServiceInstance)
+@InventoryType
 @StreamData
-@StorageEntity(name = ServiceInstanceInventory.MODEL_NAME, builder = ServiceInstanceInventory.Builder.class, deleteHistory = false)
+@StorageEntity(name = ServiceInstanceInventory.MODEL_NAME, builder = ServiceInstanceInventory.Builder.class, deleteHistory = false, source = Scope.ServiceInstanceInventory)
 public class ServiceInstanceInventory extends RegisterSource {
 
     public static final String MODEL_NAME = "service_instance_inventory";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Scope.java
Patch:
@@ -19,12 +19,12 @@
 package org.apache.skywalking.oap.server.core.source;
 
 /**
- * @author peng-yongsheng
+ * @author peng-yongsheng, wusheng
  */
 public enum Scope {
     All, Service, ServiceInstance, Endpoint, ServiceRelation, ServiceInstanceRelation, EndpointRelation, NetworkAddress,
     ServiceInstanceJVMCPU, ServiceInstanceJVMMemory, ServiceInstanceJVMMemoryPool, ServiceInstanceJVMGC,
-    Segment;
+    Segment, Alarm, ServiceInventory, ServiceInstanceInventory, EndpointInventory;
 
     public static Scope valueOf(int ordinal) {
         if (ordinal < 0 || ordinal >= values().length) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/StorageEntity.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.storage.annotation;
 
 import java.lang.annotation.*;
+import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 
 /**
@@ -31,5 +32,7 @@
 
     Class<? extends StorageBuilder> builder();
 
+    Scope source();
+
     boolean deleteHistory() default true;
 }

File: apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java
Patch:
@@ -61,7 +61,7 @@ public class SkyWalkingAgent {
     public static void premain(String agentArgs, Instrumentation instrumentation) throws PluginException {
         final PluginFinder pluginFinder;
         try {
-            SnifferConfigInitializer.initialize();
+            SnifferConfigInitializer.initialize(agentArgs);
 
             pluginFinder = new PluginFinder(new PluginBootstrap().loadPlugins());
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/CacheUpdateTimer.java
Patch:
@@ -64,7 +64,7 @@ private void update(ModuleManager moduleManager) {
                 cache.setMappingServiceId(serviceInventory.getMappingServiceId());
                 cache.setMappingLastUpdateTime(serviceInventory.getMappingLastUpdateTime());
             } else {
-                logger.warn("Unable to found the id of {} in service inventory cache.");
+                logger.warn("Unable to found the id of {} in service inventory cache.", serviceInventory.getSequence());
             }
         });
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/ServiceInstanceInventoryRegister.java
Patch:
@@ -107,7 +107,7 @@ private ServiceInstanceInventoryCache getServiceInstanceInventoryCache() {
             serviceInstanceInventory.setHeartbeatTime(heartBeatTime);
             InventoryProcess.INSTANCE.in(serviceInstanceInventory);
         } else {
-            logger.warn("Service instance {} heartbeat, but not found in storage.");
+            logger.warn("Service instance {} heartbeat, but not found in storage.", serviceInstanceId);
         }
     }
 }

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/DriverInstrumentation.java
Patch:
@@ -30,7 +30,7 @@
  * @author zhangxin
  */
 public class DriverInstrumentation extends AbstractDriverInstrumentation {
-    private static final String CLASS_OF_INTERCEPT_H2_DRIVER = "org.jdbc.Driver";
+    private static final String CLASS_OF_INTERCEPT_H2_DRIVER = "org.h2.Driver";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/JdbcConnectionInstrumentation.java
Patch:
@@ -29,7 +29,7 @@
  * @author zhangxin
  */
 public class JdbcConnectionInstrumentation extends AbstractConnectionInstrumentation {
-    public static final String ENHANCE_CLASS = "org.jdbc.jdbc.JdbcConnection";
+    public static final String ENHANCE_CLASS = "org.h2.jdbc.JdbcConnection";
 
     @Override protected ClassMatch enhanceClass() {
         return byName(ENHANCE_CLASS);

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/JdbcXAConnectionInstrumentation.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class JdbcXAConnectionInstrumentation extends AbstractConnectionInstrumentation {
 
-    public static final String ENHANCE_CLASS = "org.jdbc.jdbcx.JdbcXAConnection";
+    public static final String ENHANCE_CLASS = "org.h2.jdbcx.JdbcXAConnection";
     public static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.jdbc.JdbcXAConnectionConstructorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/IntValues.java
Patch:
@@ -32,7 +32,7 @@ public void addKVInt(KVInt e) {
         values.add(e);
     }
 
-    public int findValue(String id, int defaultValue) {
+    public long findValue(String id, int defaultValue) {
         for (KVInt value : values) {
             if (value.getId().equals(id)) {
                 return value.getValue();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/KVInt.java
Patch:
@@ -27,5 +27,5 @@
 @Getter
 public class KVInt {
     private String id;
-    private int value;
+    private long value;
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/TopNEntity.java
Patch:
@@ -28,5 +28,5 @@
 public class TopNEntity {
     private String name;
     private String id;
-    private int value;
+    private long value;
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AggregationQueryEsDAO.java
Patch:
@@ -129,7 +129,7 @@ private List<TopNEntity> aggregation(String indexName, String valueCName, Search
             TopNEntity topNEntity = new TopNEntity();
             topNEntity.setId(termsBucket.getKeyAsString());
             Avg value = termsBucket.getAggregations().get(valueCName);
-            topNEntity.setValue((int)value.getValue());
+            topNEntity.setValue((long)value.getValue());
             topNEntities.add(topNEntity);
         }
 

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AggregationQueryDAO.java
Patch:
@@ -102,7 +102,7 @@ public List<TopNEntity> topNQuery(String indName, String valueCName, int topN, S
                 while (resultSet.next()) {
                     TopNEntity topNEntity = new TopNEntity();
                     topNEntity.setId(resultSet.getString(Indicator.ENTITY_ID));
-                    topNEntity.setValue(resultSet.getInt("value"));
+                    topNEntity.setValue(resultSet.getLong("value"));
                     topNEntities.add(topNEntity);
                 }
             } catch (SQLException e) {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java
Patch:
@@ -55,6 +55,7 @@ public H2MetadataQueryDAO(JDBCHikariCPClient h2Client) {
         List<Object> condition = new ArrayList<>(5);
         sql.append("select count(*) num from ").append(ServiceInventory.MODEL_NAME).append(" where ");
         setTimeRangeCondition(sql, condition, startTimestamp, endTimestamp);
+        sql.append(" and ").append(ServiceInventory.IS_ADDRESS).append("=0");
 
         Connection connection = null;
         try {

File: oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricQueryDAO.java
Patch:
@@ -103,7 +103,7 @@ public IntValues getValues(String indName, Step step, long startTB, long endTB,
                 while (resultSet.next()) {
                     KVInt kv = new KVInt();
                     kv.setId(resultSet.getString("id"));
-                    kv.setValue(resultSet.getInt("value"));
+                    kv.setValue(resultSet.getLong("value"));
                     intValues.getValues().add(kv);
                 }
             }
@@ -136,7 +136,7 @@ public IntValues getValues(String indName, Step step, long startTB, long endTB,
                 while (resultSet.next()) {
                     KVInt kv = new KVInt();
                     kv.setId(resultSet.getString("id"));
-                    kv.setValue(resultSet.getInt(valueCName));
+                    kv.setValue(resultSet.getLong(valueCName));
                     intValues.getValues().add(kv);
                 }
             }

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/boot/ServiceManagerTest.java
Patch:
@@ -76,7 +76,7 @@ private void assertIgnoreTracingContextListener() throws Exception {
 
     private void assertTracingContextListener() throws Exception {
         List<TracingContextListener> listeners = getFieldValue(TracingContext.ListenerManager.class, "LISTENERS");
-        assertThat(listeners.size(), is(3));
+        assertThat(listeners.size(), is(2));
 
         assertThat(listeners.contains(ServiceManager.INSTANCE.findService(ContextManager.class)), is(true));
         assertThat(listeners.contains(ServiceManager.INSTANCE.findService(TraceSegmentServiceClient.class)), is(true));

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/grpc/InstanceDiscoveryServiceHandler.java
Patch:
@@ -88,7 +88,7 @@ public void registerInstance(ApplicationInstance request,
         if (Objects.nonNull(serviceInstanceInventory)) {
             serviceInventoryRegister.heartbeat(serviceInstanceInventory.getServiceId(), heartBeatTime);
         } else {
-            logger.warn("Can't found service instance by service instance id from cache, service instance id is: {}", serviceInstanceId);
+            logger.warn("Can't found service by service instance id from cache, service instance id is: {}", serviceInstanceId);
         }
 
         responseObserver.onNext(Downstream.getDefaultInstance());

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -61,7 +61,6 @@ public MetadataQueryEsDAO(ElasticSearchClient client) {
         SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();
 
         BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
-        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));
 
         boolQueryBuilder.must().add(QueryBuilders.termQuery(EndpointInventory.DETECT_POINT, DetectPoint.SERVER.ordinal()));
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/ServiceInventoryRegister.java
Patch:
@@ -103,6 +103,7 @@ private ServiceInventoryCache getServiceInventoryCache() {
     @Override public void updateMapping(int serviceId, int mappingServiceId) {
         ServiceInventory serviceInventory = getServiceInventoryCache().get(serviceId);
         if (Objects.nonNull(serviceInventory)) {
+            serviceInventory = serviceInventory.getClone();
             serviceInventory.setMappingServiceId(mappingServiceId);
             serviceInventory.setMappingLastUpdateTime(System.currentTimeMillis());
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/RegisterPersistentWorker.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.commons.datacarrier.DataCarrier;
 import org.apache.skywalking.apm.commons.datacarrier.consumer.IConsumer;
 import org.apache.skywalking.oap.server.core.analysis.data.EndOfBatchContext;
-import org.apache.skywalking.oap.server.core.register.*;
+import org.apache.skywalking.oap.server.core.register.RegisterSource;
 import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.*;
 import org.apache.skywalking.oap.server.core.worker.AbstractWorker;
@@ -63,6 +63,8 @@ public class RegisterPersistentWorker extends AbstractWorker<RegisterSource> {
     private void onWork(RegisterSource registerSource) {
         if (!sources.containsKey(registerSource)) {
             sources.put(registerSource, registerSource);
+        } else {
+            sources.get(registerSource).combine(registerSource);
         }
 
         if (registerSource.getEndOfBatchContext().isEndOfBatch()) {

File: oap-server/server-cluster-plugin/cluster-kubernetes-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/kubernetes/KubernetesCoordinator.java
Patch:
@@ -92,6 +92,9 @@ private Callable<Object> newWatch() {
 
     private void generateRemoteNodes() {
         for (Event event : watch) {
+            if (event == null) {
+                break;
+            }
             logger.debug("Received event {} {}-{}", event.getType(), event.getUid(), event.getHost());
             switch (event.getType()) {
                 case "ADDED":

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/NetworkAddressInventory.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.oap.server.core.source.Scope;
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
+import org.apache.skywalking.oap.server.library.util.StringUtils;
 
 /**
  * @author peng-yongsheng
@@ -87,7 +88,7 @@ public static String buildId(String networkAddress) {
         remoteBuilder.addDataLongs(getRegisterTime());
         remoteBuilder.addDataLongs(getHeartbeatTime());
 
-        remoteBuilder.addDataStrings(name);
+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(name, Const.EMPTY_STRING));
         return remoteBuilder;
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInventory.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 import org.apache.skywalking.oap.server.core.storage.annotation.*;
 import org.apache.skywalking.oap.server.library.util.BooleanUtils;
+import org.apache.skywalking.oap.server.library.util.StringUtils;
 
 /**
  * @author peng-yongsheng
@@ -105,7 +106,7 @@ public static String buildId(int addressId) {
         remoteBuilder.addDataLongs(getHeartbeatTime());
         remoteBuilder.addDataLongs(getMappingLastUpdateTime());
 
-        remoteBuilder.addDataStrings(name);
+        remoteBuilder.addDataStrings(StringUtils.getOrDefault(name, Const.EMPTY_STRING));
         return remoteBuilder;
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java
Patch:
@@ -32,6 +32,8 @@ public class CoreModuleConfig extends ModuleConfig {
     @Setter private String restContextPath;
     @Setter private String gRPCHost;
     @Setter private int gRPCPort;
+    @Setter private int maxConcurrentCallsPerConnection;
+    @Setter private int maxMessageSize;
     private final List<String> downsampling;
     @Setter private int recordDataTTL;
     @Setter private int minuteMetricsDataTTL;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMeta.java
Patch:
@@ -20,6 +20,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
+import org.apache.skywalking.oap.server.core.Const;
 import org.apache.skywalking.oap.server.core.source.Scope;
 
 /**
@@ -33,7 +34,7 @@ public class AlarmMeta {
     public AlarmMeta(String indicatorName, Scope scope) {
         this.indicatorName = indicatorName;
         this.scope = scope;
-        this.id = id;
+        this.id = Const.EMPTY_STRING;
     }
 
     public AlarmMeta(String indicatorName, Scope scope, String id) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PercentIndicator.java
Patch:
@@ -54,7 +54,7 @@ public final void combine(@Expression EqualMatch expression, @ExpressionArg0 Obj
     }
 
     @Override public void calculate() {
-        percentage = (int)(match * 100 / total);
+        percentage = (int)(match * 10000 / total);
     }
 
     @Override public int getValue() {

File: oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/indicator/PercentIndicatorTest.java
Patch:
@@ -36,7 +36,7 @@ public void testEntranceCombine() {
 
         impl.calculate();
 
-        Assert.assertEquals(33, impl.getValue());
+        Assert.assertEquals(3333, impl.getValue());
 
         impl = new PercentIndicatorImpl();
         impl.combine(new EqualMatch(), true, true);
@@ -45,7 +45,7 @@ public void testEntranceCombine() {
 
         impl.calculate();
 
-        Assert.assertEquals(66, impl.getValue());
+        Assert.assertEquals(6666, impl.getValue());
     }
 
     @Test
@@ -64,7 +64,7 @@ public void testSelfCombine() {
 
         impl.calculate();
 
-        Assert.assertEquals(50, impl.getValue());
+        Assert.assertEquals(5000, impl.getValue());
     }
 
     public class PercentIndicatorImpl extends PercentIndicator {

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java
Patch:
@@ -80,10 +80,10 @@ static void doDispatch(ServiceMeshMetricDataDecorator decorator) {
         if (org.apache.skywalking.apm.network.common.DetectPoint.server.equals(metric.getDetectPoint())) {
             toAll(decorator, minuteTimeBucket);
             toService(decorator, minuteTimeBucket);
+            toServiceInstance(decorator, minuteTimeBucket);
             toEndpoint(decorator, minuteTimeBucket);
         }
         toServiceRelation(decorator, minuteTimeBucket);
-        toServiceInstance(decorator, minuteTimeBucket);
         toServiceInstanceRelation(decorator, minuteTimeBucket);
     }
 

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java
Patch:
@@ -149,6 +149,8 @@ public Service searchService(String serviceCode) throws IOException {
             boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));
         }
 
+        boolQueryBuilder.must().add(QueryBuilders.termQuery(EndpointInventory.DETECT_POINT, DetectPoint.SERVER.ordinal()));
+
         sourceBuilder.query(boolQueryBuilder);
         sourceBuilder.size(limit);
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/all/AllDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.All;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpoint/EndpointDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.Endpoint;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpointrelation/EndpointRelationDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.endpointrelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/service/ServiceDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.Service;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstance/ServiceInstanceDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstance;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmcpu/ServiceInstanceJVMCPUDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMCPU;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmgc/ServiceInstanceJVMGCDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmgc;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemory/ServiceInstanceJVMMemoryDispatcher.java
Patch:
@@ -19,9 +19,9 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmmemory;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemory;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemorypool/ServiceInstanceJVMMemoryPoolDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmmemorypool;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemoryPool;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancerelation/ServiceInstanceRelationDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancerelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstanceRelation;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.servicerelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cluster/RemoteInstance.java
Patch:
@@ -41,7 +41,7 @@ public RemoteInstance(String host, int port, boolean isSelf) {
     }
 
     @Override public String toString() {
-        return host + String.valueOf(port);
+        return host + ":" + String.valueOf(port);
     }
 
     @Override public boolean equals(Object o) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClient.java
Patch:
@@ -45,6 +45,7 @@ public GRPCRemoteClient(StreamDataClassGetter streamDataClassGetter, RemoteInsta
         int bufferSize) {
         this.streamDataClassGetter = streamDataClassGetter;
         this.client = new GRPCClient(remoteInstance.getHost(), remoteInstance.getPort());
+        this.client.initialize();
         this.carrier = new DataCarrier<>("GRPCRemoteClient", channelSize, bufferSize);
         this.carrier.setBufferStrategy(BufferStrategy.BLOCKING);
         this.carrier.consume(new RemoteMessageConsumer(), 1);

File: oap-server/server-cluster-plugin/cluster-kubernetes-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/kubernetes/KubernetesCoordinator.java
Patch:
@@ -108,6 +108,7 @@ private void generateRemoteNodes() {
     }
 
     @Override public List<RemoteInstance> queryRemoteNodes() {
+        logger.debug("Query kubernetes remote nodes: {}", cache);
         return Lists.newArrayList(cache.values());
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/boot/ServiceManagerTest.java
Patch:
@@ -55,7 +55,7 @@ public static void afterClass() {
     public void testServiceDependencies() throws Exception {
         HashMap<Class, BootService> registryService = getFieldValue(ServiceManager.INSTANCE, "bootedServices");
 
-        assertThat(registryService.size(), is(8));
+        assertThat(registryService.size(), is(7));
 
         assertTraceSegmentServiceClient(ServiceManager.INSTANCE.findService(TraceSegmentServiceClient.class));
         assertContextManager(ServiceManager.INSTANCE.findService(ContextManager.class));

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/ServiceInstanceInventoryRegister.java
Patch:
@@ -109,4 +109,4 @@ private ServiceInstanceInventoryCache getServiceInstanceInventoryCache() {
             logger.warn("Service instance {} heartbeat, but not found in storage.");
         }
     }
-}
\ No newline at end of file
+}

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/RegisterModuleProvider.java
Patch:
@@ -55,7 +55,6 @@ public class RegisterModuleProvider extends ModuleProvider {
         grpcHandlerRegister.addHandler(new ServiceNameDiscoveryHandler(getManager()));
         grpcHandlerRegister.addHandler(new NetworkAddressRegisterServiceHandler(getManager()));
 
-
         JettyHandlerRegister jettyHandlerRegister = getManager().find(CoreModule.NAME).getService(JettyHandlerRegister.class);
         jettyHandlerRegister.addHandler(new ApplicationRegisterServletHandler(getManager()));
         jettyHandlerRegister.addHandler(new InstanceDiscoveryServletHandler(getManager()));

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -68,7 +68,7 @@ public class ComponentsDefine {
 
     public static final OfficialComponent JEDIS =  new OfficialComponent(30, "Jedis");
 
-    public static final OfficialComponent H2_JDBC_DRIVER =  new OfficialComponent(32, "h2-jdbc-driver");
+    public static final OfficialComponent H2_JDBC_DRIVER =  new OfficialComponent(32, "jdbc-jdbc-driver");
 
     public static final OfficialComponent MYSQL_JDBC_DRIVER = new OfficialComponent(33, "mysql-connector-java");
 

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/DriverInstrumentation.java
Patch:
@@ -30,7 +30,7 @@
  * @author zhangxin
  */
 public class DriverInstrumentation extends AbstractDriverInstrumentation {
-    private static final String CLASS_OF_INTERCEPT_H2_DRIVER = "org.h2.Driver";
+    private static final String CLASS_OF_INTERCEPT_H2_DRIVER = "org.jdbc.Driver";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/JdbcConnectionInstrumentation.java
Patch:
@@ -29,7 +29,7 @@
  * @author zhangxin
  */
 public class JdbcConnectionInstrumentation extends AbstractConnectionInstrumentation {
-    public static final String ENHANCE_CLASS = "org.h2.jdbc.JdbcConnection";
+    public static final String ENHANCE_CLASS = "org.jdbc.jdbc.JdbcConnection";
 
     @Override protected ClassMatch enhanceClass() {
         return byName(ENHANCE_CLASS);

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/JdbcXAConnectionInstrumentation.java
Patch:
@@ -34,8 +34,8 @@
  */
 public class JdbcXAConnectionInstrumentation extends AbstractConnectionInstrumentation {
 
-    public static final String ENHANCE_CLASS = "org.h2.jdbcx.JdbcXAConnection";
-    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.h2.JdbcXAConnectionConstructorInterceptor";
+    public static final String ENHANCE_CLASS = "org.jdbc.jdbcx.JdbcXAConnection";
+    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.jdbc.JdbcXAConnectionConstructorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TraceQueryService.java
Patch:
@@ -121,6 +121,7 @@ public Trace queryTrace(final String traceId) throws IOException {
             }
         }
 
+        trace.getSpans().clear();
         trace.getSpans().addAll(sortedSpans);
         return trace;
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/DownSamplingModelNameBuilder.java
Patch:
@@ -24,9 +24,9 @@
 /**
  * @author peng-yongsheng
  */
-public class DownsampleingModelNameBuilder {
+public class DownSamplingModelNameBuilder {
 
-    private DownsampleingModelNameBuilder() {
+    private DownSamplingModelNameBuilder() {
     }
 
     public static String build(Step step, String modelName) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelInstaller.java
Patch:
@@ -64,7 +64,7 @@ public final void install(Client client) throws StorageException {
 
         for (Model model : downsamplingModels) {
             if (!isExists(client, model)) {
-                logger.info("table: {} not exists", model.getName());
+                logger.info("table: {} does not exist", model.getName());
                 createTable(client, model);
             } else if (debug) {
                 logger.info("table: {} exists", model.getName());

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/EndpointInventoryCacheEsDAO.java
Patch:
@@ -53,7 +53,7 @@ public EndpointInventoryCacheEsDAO(ElasticSearchClient client) {
                 return Const.NONE;
             }
         } catch (Throwable e) {
-            logger.error(e.getMessage());
+            logger.error(e.getMessage(), e);
             return Const.NONE;
         }
     }
@@ -72,7 +72,7 @@ public EndpointInventoryCacheEsDAO(ElasticSearchClient client) {
                 return null;
             }
         } catch (Throwable e) {
-            logger.error(e.getMessage());
+            logger.error(e.getMessage(), e);
             return null;
         }
     }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/cache/NetworkAddressInventoryCacheEsDAO.java
Patch:
@@ -48,7 +48,7 @@ public NetworkAddressInventoryCacheEsDAO(ElasticSearchClient client) {
             String id = NetworkAddressInventory.buildId(networkAddress);
             GetResponse response = getClient().get(NetworkAddressInventory.MODEL_NAME, id);
             if (response.isExists()) {
-                return (int)response.getSource().getOrDefault(RegisterSource.SEQUENCE, 0);
+                return (int)response.getSource().getOrDefault(NetworkAddressInventory.SEQUENCE, 0);
             } else {
                 return Const.NONE;
             }

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/boot/ServiceManagerTest.java
Patch:
@@ -55,7 +55,7 @@ public static void afterClass() {
     public void testServiceDependencies() throws Exception {
         HashMap<Class, BootService> registryService = getFieldValue(ServiceManager.INSTANCE, "bootedServices");
 
-        assertThat(registryService.size(), is(7));
+        assertThat(registryService.size(), is(8));
 
         assertTraceSegmentServiceClient(ServiceManager.INSTANCE.findService(TraceSegmentServiceClient.class));
         assertContextManager(ServiceManager.INSTANCE.findService(ContextManager.class));

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/ServiceInstanceInventoryRegister.java
Patch:
@@ -109,4 +109,4 @@ private ServiceInstanceInventoryCache getServiceInstanceInventoryCache() {
             logger.warn("Service instance {} heartbeat, but not found in storage.");
         }
     }
-}
+}
\ No newline at end of file

File: apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerPoolTest.java
Patch:
@@ -34,7 +34,7 @@ public class ConsumerPoolTest {
     @Test
     public void testBeginConsumerPool() throws IllegalAccessException {
         Channels<SampleData> channels = new Channels<SampleData>(2, 100, new SimpleRollingPartitioner<SampleData>(), BufferStrategy.BLOCKING);
-        ConsumerPool<SampleData> pool = new ConsumerPool<SampleData>(channels, new SampleConsumer(), 2, 20);
+        ConsumerPool<SampleData> pool = new ConsumerPool<SampleData>("default", channels, new SampleConsumer(), 2, 20);
         pool.begin();
 
         ConsumerThread[] threads = (ConsumerThread[])MemberModifier.field(ConsumerPool.class, "consumerThreads").get(pool);
@@ -46,7 +46,7 @@ public void testBeginConsumerPool() throws IllegalAccessException {
     @Test
     public void testCloseConsumerPool() throws InterruptedException, IllegalAccessException {
         Channels<SampleData> channels = new Channels<SampleData>(2, 100, new SimpleRollingPartitioner<SampleData>(), BufferStrategy.BLOCKING);
-        ConsumerPool<SampleData> pool = new ConsumerPool<SampleData>(channels, new SampleConsumer(), 2, 20);
+        ConsumerPool<SampleData> pool = new ConsumerPool<SampleData>("default", channels, new SampleConsumer(), 2, 20);
         pool.begin();
 
         Thread.sleep(5000);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorProcess.java
Patch:
@@ -60,10 +60,10 @@ public void create(ModuleManager moduleManager, Class<? extends Indicator> indic
         IndicatorTransWorker transWorker = new IndicatorTransWorker(WorkerIdGenerator.INSTANCES.generate(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);
         WorkerInstances.INSTANCES.put(transWorker.getWorkerId(), transWorker);
 
-        IndicatorRemoteWorker remoteWorker = new IndicatorRemoteWorker(WorkerIdGenerator.INSTANCES.generate(), moduleManager, transWorker);
+        IndicatorRemoteWorker remoteWorker = new IndicatorRemoteWorker(WorkerIdGenerator.INSTANCES.generate(), moduleManager, transWorker, modelName);
         WorkerInstances.INSTANCES.put(remoteWorker.getWorkerId(), remoteWorker);
 
-        IndicatorAggregateWorker aggregateWorker = new IndicatorAggregateWorker(WorkerIdGenerator.INSTANCES.generate(), remoteWorker);
+        IndicatorAggregateWorker aggregateWorker = new IndicatorAggregateWorker(WorkerIdGenerator.INSTANCES.generate(), remoteWorker, modelName);
         WorkerInstances.INSTANCES.put(aggregateWorker.getWorkerId(), aggregateWorker);
 
         entryWorkers.put(indicatorClass, aggregateWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/PersistenceWorker.java
Patch:
@@ -41,7 +41,7 @@ public abstract class PersistenceWorker<INPUT extends StorageData, CACHE extends
         this.batchDAO = moduleManager.find(StorageModule.NAME).getService(IBatchDAO.class);
     }
 
-    final void onWork(INPUT input) {
+    void onWork(INPUT input) {
         if (getCache().currentCollectionSize() >= batchSize) {
             try {
                 if (getCache().trySwitchPointer()) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/ServiceInventoryRegister.java
Patch:
@@ -62,6 +62,7 @@ private ServiceInventoryCache getServiceInventoryCache() {
             long now = System.currentTimeMillis();
             serviceInventory.setRegisterTime(now);
             serviceInventory.setHeartbeatTime(now);
+            serviceInventory.setMappingServiceId(Const.NONE);
             serviceInventory.setMappingLastUpdateTime(now);
 
             InventoryProcess.INSTANCE.in(serviceInventory);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClient.java
Patch:
@@ -45,7 +45,7 @@ public GRPCRemoteClient(StreamDataClassGetter streamDataClassGetter, RemoteInsta
         int bufferSize) {
         this.streamDataClassGetter = streamDataClassGetter;
         this.client = new GRPCClient(remoteInstance.getHost(), remoteInstance.getPort());
-        this.carrier = new DataCarrier<>(channelSize, bufferSize);
+        this.carrier = new DataCarrier<>("GRPCRemoteClient", channelSize, bufferSize);
         this.carrier.setBufferStrategy(BufferStrategy.BLOCKING);
         this.carrier.consume(new RemoteMessageConsumer(), 1);
     }

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshDataBufferFileCache.java
Patch:
@@ -33,7 +33,7 @@ public class MeshDataBufferFileCache implements IConsumer<ServiceMeshMetricDataD
 
     public MeshDataBufferFileCache(MeshModuleConfig config) {
         this.config = config;
-        dataCarrier = new DataCarrier<>(3, 1024);
+        dataCarrier = new DataCarrier<>("MeshDataBufferFileCache", 3, 1024);
     }
 
     void start() throws IOException {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/BatchProcessEsDAO.java
Patch:
@@ -68,5 +68,7 @@ public BatchProcessEsDAO(ElasticSearchClient client, int bulkActions, int bulkSi
                 }
             });
         }
+
+        this.bulkProcessor.flush();
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricQueryEsDAO.java
Patch:
@@ -150,7 +150,7 @@ private void functionAggregation(Function function, TermsAggregationBuilder pare
                 }
 
                 for (IntKeyLongValue intKeyLongValue : intKeyLongValues) {
-                    axisYValues.set(intKeyLongValue.getKey() - 1, intKeyLongValue.getValue());
+                    axisYValues.set(intKeyLongValue.getKey(), intKeyLongValue.getValue());
                 }
 
                 thermodynamicValueMatrix.add(axisYValues);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/EndpointInventory.java
Patch:
@@ -72,7 +72,7 @@ public static String buildId(int serviceId, String endpointName) {
         EndpointInventory source = (EndpointInventory)obj;
         if (serviceId != source.getServiceId())
             return false;
-        if (name.equals(source.getName()))
+        if (!name.equals(source.getName()))
             return false;
 
         return true;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/NetworkAddressInventory.java
Patch:
@@ -65,7 +65,7 @@ public static String buildId(String networkAddress) {
             return false;
 
         NetworkAddressInventory source = (NetworkAddressInventory)obj;
-        if (name.equals(source.getName()))
+        if (!name.equals(source.getName()))
             return false;
 
         return true;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInstanceInventory.java
Patch:
@@ -97,7 +97,7 @@ public static String buildId(int serviceId, int addressId) {
         ServiceInstanceInventory source = (ServiceInstanceInventory)obj;
         if (serviceId != source.getServiceId())
             return false;
-        if (name.equals(source.getName()))
+        if (!name.equals(source.getName()))
             return false;
         if (isAddress != source.getIsAddress())
             return false;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/ServiceInventory.java
Patch:
@@ -84,7 +84,7 @@ public static String buildId(int addressId) {
             return false;
 
         ServiceInventory source = (ServiceInventory)obj;
-        if (name.equals(source.getName()))
+        if (!name.equals(source.getName()))
             return false;
         if (isAddress != source.getIsAddress())
             return false;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DetectPoint.java
Patch:
@@ -31,7 +31,7 @@ public static DetectPoint fromSpanType(SpanType spanType) {
             case Entry:
                 return DetectPoint.SERVER;
             case Exit:
-                return DetectPoint.SERVER;
+                return DetectPoint.CLIENT;
             case UNRECOGNIZED:
             case Local:
             default:

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricQueryEsDAO.java
Patch:
@@ -150,7 +150,7 @@ private void functionAggregation(Function function, TermsAggregationBuilder pare
                 }
 
                 for (IntKeyLongValue intKeyLongValue : intKeyLongValues) {
-                    axisYValues.set(intKeyLongValue.getKey(), intKeyLongValue.getValue());
+                    axisYValues.set(intKeyLongValue.getKey() - 1, intKeyLongValue.getValue());
                 }
 
                 thermodynamicValueMatrix.add(axisYValues);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Service.java
Patch:
@@ -26,6 +26,6 @@
 @Getter
 @Setter
 public class Service {
-    private String id;
+    private int id;
     private String name;
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java
Patch:
@@ -84,7 +84,7 @@ public void parseFirst(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI
 
     @Override public void build() {
         if (logger.isDebugEnabled()) {
-            logger.debug("segment duration listener build");
+            logger.debug("segment listener build, segment id: {}", segment.getSegmentId());
         }
 
         if (entryEndpointId == 0) {

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SegmentStandardizationWorker.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.receiver.trace.provider.parser.standardization;
 
 import java.io.IOException;
-import java.util.*;
+import java.util.List;
 import org.apache.skywalking.apm.commons.datacarrier.DataCarrier;
 import org.apache.skywalking.apm.commons.datacarrier.consumer.IConsumer;
 import org.apache.skywalking.apm.network.language.agent.UpstreamSegment;
@@ -37,7 +37,7 @@ public class SegmentStandardizationWorker extends AbstractWorker<SegmentStandard
 
     private final DataCarrier<SegmentStandardization> dataCarrier;
 
-    public SegmentStandardizationWorker(SegmentParse segmentParse, String path,
+    public SegmentStandardizationWorker(SegmentParse.Producer segmentParseCreator, String path,
         int offsetFileMaxSize, int dataFileMaxSize, boolean cleanWhenRestart) throws IOException {
         super(Integer.MAX_VALUE);
 
@@ -46,7 +46,7 @@ public SegmentStandardizationWorker(SegmentParse segmentParse, String path,
         builder.dataFileMaxSize(dataFileMaxSize);
         builder.offsetFileMaxSize(offsetFileMaxSize);
         builder.parser(UpstreamSegment.parser());
-        builder.callBack(segmentParse);
+        builder.callBack(segmentParseCreator);
 
         BufferStream<UpstreamSegment> stream = builder.build();
         stream.initialize();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/all/AllDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.All;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpoint/EndpointDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.Endpoint;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpointrelation/EndpointRelationDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.endpointrelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/service/ServiceDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.Service;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstance/ServiceInstanceDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.ServiceInstance;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmcpu/ServiceInstanceJVMCPUDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMCPU;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmgc/ServiceInstanceJVMGCDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmgc;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemory/ServiceInstanceJVMMemoryDispatcher.java
Patch:
@@ -19,9 +19,9 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmmemory;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemory;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemorypool/ServiceInstanceJVMMemoryPoolDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmmemorypool;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemoryPool;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancerelation/ServiceInstanceRelationDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancerelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceRelation;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.servicerelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITopologyQueryDAO.java
Patch:
@@ -45,7 +45,4 @@ List<Call> loadSpecifiedClientSideServiceRelations(Step step, long startTB, long
 
     List<Call> loadSpecifiedDestOfServerSideEndpointRelations(Step step, long startTB, long endTB,
         int destEndpointId) throws IOException;
-
-    List<Call> loadSpecifiedSourceOfClientSideEndpointRelations(Step step, long startTB, long endTB,
-        int sourceEndpointId) throws IOException;
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java
Patch:
@@ -182,7 +182,6 @@ private void setPublicAttrs(SourceBuilder sourceBuilder, SpanDecorator spanDecor
             exitSourceBuilder.setTimeBucket(minuteTimeBucket);
             sourceReceiver.receive(exitSourceBuilder.toServiceRelation());
             sourceReceiver.receive(exitSourceBuilder.toServiceInstanceRelation());
-            sourceReceiver.receive(exitSourceBuilder.toEndpointRelation());
         });
     }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.*;
 import org.apache.skywalking.oap.server.core.cache.*;
-import org.apache.skywalking.oap.server.core.config.IComponentLibraryCatalogService;
+import org.apache.skywalking.oap.server.core.config.*;
 import org.apache.skywalking.oap.server.core.query.*;
 import org.apache.skywalking.oap.server.core.register.service.*;
 import org.apache.skywalking.oap.server.core.remote.RemoteSenderService;
@@ -44,6 +44,7 @@ public class CoreModule extends ModuleDefine {
 
     @Override public Class[] services() {
         List<Class> classes = new ArrayList<>();
+        classes.add(DownsamplingConfigService.class);
         classes.add(IComponentLibraryCatalogService.class);
 
         addServerInterface(classes);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -86,6 +86,8 @@ public CoreModuleProvider() {
         jettyServer = new JettyServer(moduleConfig.getRestHost(), moduleConfig.getRestPort(), moduleConfig.getRestContextPath());
         jettyServer.initialize();
 
+        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(moduleConfig.getDownsampling()));
+
         this.registerServiceImplementation(GRPCHandlerRegister.class, new GRPCHandlerRegisterImpl(grpcServer));
         this.registerServiceImplementation(JettyHandlerRegister.class, new JettyHandlerRegisterImpl(jettyServer));
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/all/AllDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.All;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpoint/EndpointDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.Endpoint;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpointrelation/EndpointRelationDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.endpointrelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/service/ServiceDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.Service;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstance/ServiceInstanceDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstance;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmcpu/ServiceInstanceJVMCPUDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMCPU;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmgc/ServiceInstanceJVMGCDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmgc;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemory/ServiceInstanceJVMMemoryDispatcher.java
Patch:
@@ -19,9 +19,9 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmmemory;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemory;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemorypool/ServiceInstanceJVMMemoryPoolDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancejvmmemorypool;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemoryPool;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancerelation/ServiceInstanceRelationDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.serviceinstancerelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
-import org.apache.skywalking.oap.server.core.source.*;
+import org.apache.skywalking.oap.server.core.source.ServiceInstanceRelation;
 
 /**
  * This class is auto generated. Please don't change this class manually.

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationDispatcher.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.skywalking.oap.server.core.analysis.generated.servicerelation;
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
+import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.analysis.indicator.expression.*;
 import org.apache.skywalking.oap.server.core.source.*;
 
 /**

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorPersistentWorker.java
Patch:
@@ -82,7 +82,9 @@ public boolean flushAndSwitch() {
                     batchCollection.add(indicatorDAO.prepareBatchInsert(modelName, data));
                 }
 
-                nextWorker.in(data);
+                if (Objects.nonNull(nextWorker)) {
+                    nextWorker.in(data);
+                }
             } catch (Throwable t) {
                 logger.error(t.getMessage(), t);
             }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/Downsampling.java
Patch:
@@ -21,13 +21,13 @@
 /**
  * @author peng-yongsheng
  */
-public enum TimePyramid {
+public enum Downsampling {
     Second(0, "second"), Minute(1, "minute"), Hour(2, "hour"), Day(3, "day"), Month(4, "month");
 
     private final int value;
     private final String name;
 
-    TimePyramid(int value, String name) {
+    Downsampling(int value, String name) {
         this.value = value;
         this.name = name;
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/StorageAnnotationListener.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.Field;
 import java.util.*;
 import lombok.Getter;
+import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorAnnotationUtils;
 import org.apache.skywalking.oap.server.core.annotation.AnnotationListener;
 import org.apache.skywalking.oap.server.core.storage.model.*;
 import org.slf4j.*;
@@ -47,11 +48,11 @@ public StorageAnnotationListener() {
         logger.info("The owner class of storage annotation, class name: {}", aClass.getName());
 
         String modelName = StorageEntityAnnotationUtils.getModelName(aClass);
-
+        boolean isIndicator = IndicatorAnnotationUtils.isIndicator(aClass);
         List<ModelColumn> modelColumns = new LinkedList<>();
         retrieval(aClass, modelName, modelColumns);
 
-        models.add(new Model(modelName, modelColumns));
+        models.add(new Model(modelName, modelColumns, isIndicator));
     }
 
     private void retrieval(Class clazz, String modelName, List<ModelColumn> modelColumns) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/CountIndicator.java
Patch:
@@ -20,6 +20,7 @@
 
 import lombok.*;
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.*;
+import org.apache.skywalking.oap.server.core.query.sql.Function;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 
 /**
@@ -30,7 +31,7 @@ public abstract class CountIndicator extends Indicator implements LongValueHolde
 
     protected static final String VALUE = "value";
 
-    @Getter @Setter @Column(columnName = VALUE) private long value;
+    @Getter @Setter @Column(columnName = VALUE, isValue = true, function = Function.Sum) private long value;
 
     @Entrance
     public final void combine(@ConstOne long count) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/DoubleAvgIndicator.java
Patch:
@@ -20,6 +20,7 @@
 
 import lombok.*;
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.*;
+import org.apache.skywalking.oap.server.core.query.sql.Function;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 
 /**
@@ -34,7 +35,7 @@ public abstract class DoubleAvgIndicator extends Indicator implements DoubleValu
 
     @Getter @Setter @Column(columnName = SUMMATION) private double summation;
     @Getter @Setter @Column(columnName = COUNT) private int count;
-    @Getter @Setter @Column(columnName = VALUE) private double value;
+    @Getter @Setter @Column(columnName = VALUE, isValue = true, function = Function.Avg) private double value;
 
     @Entrance
     public final void combine(@SourceFrom double summation, @ConstOne int count) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PercentIndicator.java
Patch:
@@ -21,6 +21,7 @@
 import lombok.*;
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.*;
 import org.apache.skywalking.oap.server.core.analysis.indicator.expression.EqualMatch;
+import org.apache.skywalking.oap.server.core.query.sql.Function;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 
 /**
@@ -33,7 +34,7 @@ public abstract class PercentIndicator extends Indicator implements IntValueHold
     protected static final String PERCENTAGE = "percentage";
 
     @Getter @Setter @Column(columnName = TOTAL) private long total;
-    @Getter @Setter @Column(columnName = PERCENTAGE, isValue = true) private int percentage;
+    @Getter @Setter @Column(columnName = PERCENTAGE, isValue = true, function = Function.Avg) private int percentage;
     @Getter @Setter @Column(columnName = MATCH) private long match;
 
     @Entrance

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PxxIndicator.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.*;
 import lombok.*;
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.*;
+import org.apache.skywalking.oap.server.core.query.sql.Function;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 
 /**
@@ -38,7 +39,7 @@ public abstract class PxxIndicator extends Indicator implements IntValueHolder {
     protected static final String VALUE = "value";
     protected static final String PRECISION = "precision";
 
-    @Getter @Setter @Column(columnName = VALUE, isValue = true) private int value;
+    @Getter @Setter @Column(columnName = VALUE, isValue = true, function = Function.Avg) private int value;
     @Getter @Setter @Column(columnName = PRECISION) private int precision;
     @Getter @Setter @Column(columnName = DETAIL_GROUP) private IntKeyLongValueArray detailGroup;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java
Patch:
@@ -70,6 +70,7 @@ public static class Builder implements StorageBuilder<SegmentRecord> {
             map.put(TRACE_ID, storageData.getTraceId());
             map.put(SERVICE_ID, storageData.getServiceId());
             map.put(ENDPOINT_NAME, storageData.getEndpointName());
+            map.put(ENDPOINT_ID, storageData.getEndpointId());
             map.put(START_TIME, storageData.getStartTime());
             map.put(END_TIME, storageData.getEndTime());
             map.put(LATENCY, storageData.getLatency());
@@ -89,6 +90,7 @@ public static class Builder implements StorageBuilder<SegmentRecord> {
             record.setTraceId((String)dbMap.get(TRACE_ID));
             record.setServiceId(((Number)dbMap.get(SERVICE_ID)).intValue());
             record.setEndpointName((String)dbMap.get(ENDPOINT_NAME));
+            record.setEndpointId(((Number)dbMap.get(ENDPOINT_ID)).intValue());
             record.setStartTime(((Number)dbMap.get(START_TIME)).longValue());
             record.setEndTime(((Number)dbMap.get(END_TIME)).longValue());
             record.setLatency(((Number)dbMap.get(LATENCY)).intValue());

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/InstanceHeartBeatTestCase.java
Patch:
@@ -35,5 +35,8 @@ public static void main(String[] args) {
         builder.setApplicationInstanceId(2);
         builder.setHeartbeatTime(System.currentTimeMillis() + 5 * 1000 * 60);
         Downstream heartbeat = stub.heartbeat(builder.build());
+
+        builder.setApplicationInstanceId(3);
+        heartbeat = stub.heartbeat(builder.build());
     }
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java
Patch:
@@ -137,7 +137,7 @@ private void setPublicAttrs(SourceBuilder sourceBuilder, SpanDecorator spanDecor
         long latency = spanDecorator.getEndTime() - spanDecorator.getStartTime();
         sourceBuilder.setLatency((int)latency);
         sourceBuilder.setResponseCode(Const.NONE);
-        sourceBuilder.setStatus(spanDecorator.getIsError());
+        sourceBuilder.setStatus(!spanDecorator.getIsError());
 
         switch (spanDecorator.getSpanLayer()) {
             case Http:

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/segment/SegmentSpanListener.java
Patch:
@@ -54,7 +54,6 @@ private SegmentSpanListener(ModuleManager moduleManager) {
     public void parseFirst(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreInfo) {
         long timeBucket = TimeBucketUtils.INSTANCE.getSecondTimeBucket(segmentCoreInfo.getStartTime());
 
-        segment.setSegmentId(segmentCoreInfo.getSegmentId());
         segment.setSegmentId(segmentCoreInfo.getSegmentId());
         segment.setServiceId(segmentCoreInfo.getApplicationId());
         segment.setLatency((int)(segmentCoreInfo.getEndTime() - segmentCoreInfo.getStartTime()));

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java
Patch:
@@ -109,6 +109,7 @@ public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long mi
             basicTrace.getEndpointNames().add((String)searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));
             basicTrace.setDuration(((Number)searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());
             basicTrace.setError(BooleanUtils.valueToBoolean(((Number)searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue()));
+            basicTrace.getTraceIds().add((String)searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));
             traceBrief.getTraces().add(basicTrace);
         }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -62,6 +62,7 @@ private void addQueryService(List<Class> classes) {
         classes.add(TraceQueryService.class);
         classes.add(MetadataQueryService.class);
         classes.add(AggregationQueryService.class);
+        classes.add(AlarmQueryService.class);
     }
 
     private void addServerInterface(List<Class> classes) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -115,6 +115,7 @@ public CoreModuleProvider() {
         this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));
         this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));
         this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));
+        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));
 
         annotationScan.registerListener(storageAnnotationListener);
         annotationScan.registerListener(streamAnnotationListener);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java
Patch:
@@ -37,7 +37,7 @@ public class AlarmMessage {
     private int id0;
     private int id1;
     private String alarmMessage;
-    private long timeBucket;
+    private long startTime;
 
     private static class NoAlarm extends AlarmMessage {
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Call.java
Patch:
@@ -21,6 +21,9 @@
 import lombok.*;
 import org.apache.skywalking.oap.server.core.source.DetectPoint;
 
+/**
+ * @author peng-yongsheng
+ */
 @Getter
 @Setter
 public class Call {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/ClusterBrief.java
Patch:
@@ -20,6 +20,9 @@
 
 import lombok.*;
 
+/**
+ * @author peng-yongsheng
+ */
 @Getter
 @Setter
 public class ClusterBrief {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Endpoint.java
Patch:
@@ -20,6 +20,9 @@
 
 import lombok.*;
 
+/**
+ * @author peng-yongsheng
+ */
 @Getter
 @Setter
 public class Endpoint {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/KVInt.java
Patch:
@@ -20,6 +20,9 @@
 
 import lombok.*;
 
+/**
+ * @author peng-yongsheng
+ */
 @Setter
 @Getter
 public class KVInt {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/KeyValue.java
Patch:
@@ -20,6 +20,9 @@
 
 import lombok.*;
 
+/**
+ * @author peng-yongsheng
+ */
 @Getter
 @Setter
 public class KeyValue {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Language.java
Patch:
@@ -18,6 +18,9 @@
 
 package org.apache.skywalking.oap.server.core.query.entity;
 
+/**
+ * @author peng-yongsheng
+ */
 public enum Language {
     UNKNOWN,
     JAVA,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Node.java
Patch:
@@ -20,6 +20,9 @@
 
 import lombok.*;
 
+/**
+ * @author peng-yongsheng
+ */
 @Getter
 @Setter
 public class Node {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Order.java
Patch:
@@ -18,6 +18,9 @@
 
 package org.apache.skywalking.oap.server.core.query.entity;
 
+/**
+ * @author peng-yongsheng
+ */
 public enum Order {
     ASC,
     DES

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Pagination.java
Patch:
@@ -20,6 +20,9 @@
 
 import lombok.*;
 
+/**
+ * @author peng-yongsheng
+ */
 @Getter
 @Setter
 public class Pagination {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/QueryOrder.java
Patch:
@@ -18,6 +18,9 @@
 
 package org.apache.skywalking.oap.server.core.query.entity;
 
+/**
+ * @author peng-yongsheng
+ */
 public enum QueryOrder {
     BY_START_TIME,
     BY_DURATION

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Ref.java
Patch:
@@ -20,6 +20,9 @@
 
 import lombok.*;
 
+/**
+ * @author peng-yongsheng
+ */
 @Setter
 @Getter
 public class Ref {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/RefType.java
Patch:
@@ -18,6 +18,9 @@
 
 package org.apache.skywalking.oap.server.core.query.entity;
 
+/**
+ * @author peng-yongsheng
+ */
 public enum RefType {
     CROSS_PROCESS,
     CROSS_THREAD

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Service.java
Patch:
@@ -20,6 +20,9 @@
 
 import lombok.*;
 
+/**
+ * @author peng-yongsheng
+ */
 @Getter
 @Setter
 public class Service {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Step.java
Patch:
@@ -18,6 +18,9 @@
 
 package org.apache.skywalking.oap.server.core.query.entity;
 
+/**
+ * @author peng-yongsheng
+ */
 public enum Step {
     MONTH,
     DAY,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/TopNEntity.java
Patch:
@@ -20,6 +20,9 @@
 
 import lombok.*;
 
+/**
+ * @author peng-yongsheng
+ */
 @Getter
 @Setter
 public class TopNEntity {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/TraceState.java
Patch:
@@ -18,6 +18,9 @@
 
 package org.apache.skywalking.oap.server.core.query.entity;
 
+/**
+ * @author peng-yongsheng
+ */
 public enum TraceState {
     ALL,
     SUCCESS,

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -38,6 +38,6 @@ public class StorageModule extends ModuleDefine {
             IBatchDAO.class, StorageDAO.class, IRegisterLockDAO.class,
             IServiceInventoryCacheDAO.class, IServiceInstanceInventoryCacheDAO.class,
             IEndpointInventoryCacheDAO.class, INetworkAddressInventoryCacheDAO.class,
-            ITopologyQueryDAO.class, IMetricQueryDAO.class, ITraceQueryDAO.class, IMetadataQueryDAO.class, IAggregationQueryDAO.class};
+            ITopologyQueryDAO.class, IMetricQueryDAO.class, ITraceQueryDAO.class, IMetadataQueryDAO.class, IAggregationQueryDAO.class, IAlarmQueryDAO.class};
     }
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/GraphQLQueryProvider.java
Patch:
@@ -65,7 +65,7 @@ public class GraphQLQueryProvider extends ModuleProvider {
             .file("query-protocol/aggregation.graphqls")
             .resolvers(new AggregationQuery(getManager()))
             .file("query-protocol/alarm.graphqls")
-            .resolvers(new AlarmQuery())
+            .resolvers(new AlarmQuery(getManager()))
             .build()
             .makeExecutableSchema();
         this.graphQL = GraphQL.newGraphQL(schema).build();

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AggregationQuery.java
Patch:
@@ -27,6 +27,9 @@
 import org.apache.skywalking.oap.server.core.query.entity.*;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 
+/**
+ * @author peng-yongsheng
+ */
 public class AggregationQuery implements GraphQLQueryResolver {
 
     private final ModuleManager moduleManager;

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetadataQuery.java
Patch:
@@ -28,6 +28,9 @@
 import org.apache.skywalking.oap.server.core.query.entity.*;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 
+/**
+ * @author peng-yongsheng
+ */
 public class MetadataQuery implements GraphQLQueryResolver {
 
     private final ModuleManager moduleManager;

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java
Patch:
@@ -27,6 +27,9 @@
 import org.apache.skywalking.oap.server.core.query.entity.*;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 
+/**
+ * @author peng-yongsheng
+ */
 public class MetricQuery implements GraphQLQueryResolver {
 
     private final ModuleManager moduleManager;

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TopologyQuery.java
Patch:
@@ -26,6 +26,9 @@
 import org.apache.skywalking.oap.server.core.query.entity.Topology;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 
+/**
+ * @author peng-yongsheng
+ */
 public class TopologyQuery implements GraphQLQueryResolver {
 
     private final ModuleManager moduleManager;

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TraceQuery.java
Patch:
@@ -29,6 +29,9 @@
 
 import static java.util.Objects.nonNull;
 
+/**
+ * @author peng-yongsheng
+ */
 public class TraceQuery implements GraphQLQueryResolver {
 
     private final ModuleManager moduleManager;

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -80,6 +80,7 @@ public void prepare() throws ServiceNotProvidedException {
         this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));
         this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));
         this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));
+        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TopologyQueryService.java
Patch:
@@ -98,7 +98,7 @@ public Topology getServiceTopology(final Step step, final long startTB, final lo
         List<Call> serviceRelationServerCalls = getTopologyQueryDAO().loadSpecifiedServerSideServiceRelations(step, startTB, endTB, serviceIdList);
 
         TopologyBuilder builder = new TopologyBuilder(moduleManager);
-        Topology topology = builder.build(serviceComponents, serviceMappings, serviceRelationClientCalls, serviceRelationServerCalls);
+        Topology topology = builder.build(serviceComponents, new ArrayList<>(), serviceRelationClientCalls, serviceRelationServerCalls);
 
         Set<Integer> nodeIds = new HashSet<>();
         topology.getCalls().forEach(call -> {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/RegisterDistinctWorker.java
Patch:
@@ -38,7 +38,7 @@ public class RegisterDistinctWorker extends AbstractWorker<RegisterSource> {
     private final Map<RegisterSource, RegisterSource> sources;
     private int messageNum;
 
-    public RegisterDistinctWorker(int workerId, AbstractWorker<RegisterSource> nextWorker) {
+    RegisterDistinctWorker(int workerId, AbstractWorker<RegisterSource> nextWorker) {
         super(workerId);
         this.nextWorker = nextWorker;
         this.sources = new HashMap<>();

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/RegisterPersistentWorker.java
Patch:
@@ -39,7 +39,7 @@ public class RegisterPersistentWorker extends AbstractWorker<RegisterSource> {
     private final IRegisterLockDAO registerLockDAO;
     private final IRegisterDAO registerDAO;
 
-    public RegisterPersistentWorker(int workerId, String modelName, ModuleManager moduleManager,
+    RegisterPersistentWorker(int workerId, String modelName, ModuleManager moduleManager,
         IRegisterDAO registerDAO, Scope scope) {
         super(workerId);
         this.modelName = modelName;

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/RegisterMock.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.skywalking.oap.server.receiver.trace.mock;
 
 import io.grpc.ManagedChannel;
-import java.util.UUID;
 import java.util.concurrent.*;
 import org.apache.skywalking.apm.network.language.agent.*;
 import org.apache.skywalking.apm.util.RunnableWithExceptionProtection;
@@ -59,7 +58,7 @@ private void registerConsumer() throws InterruptedException {
 
         ApplicationInstance.Builder instance = ApplicationInstance.newBuilder();
         instance.setApplicationId(applicationMapping.getApplication().getValue());
-        instance.setAgentUUID(UUID.randomUUID().toString());
+        instance.setAgentUUID("pengys");
         instance.setRegisterTime(new DateTime("2017-01-01T00:01:01.001").getMillis());
 
         OSInfo.Builder osInfo = OSInfo.newBuilder();
@@ -104,7 +103,7 @@ private void registerProvider() throws InterruptedException {
 
         ApplicationInstance.Builder instance = ApplicationInstance.newBuilder();
         instance.setApplicationId(applicationMapping.getApplication().getValue());
-        instance.setAgentUUID(UUID.randomUUID().toString());
+        instance.setAgentUUID("peng-yongsheng");
         instance.setRegisterTime(new DateTime("2017-01-01T00:01:01.001").getMillis());
 
         OSInfo.Builder osInfo = OSInfo.newBuilder();

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/RegisterEsDAO.java
Patch:
@@ -91,7 +91,7 @@ private int getResponse(String modelName, SearchSourceBuilder searchSourceBuilde
 
         int id = (int)agg.getValue();
         if (id == Integer.MAX_VALUE || id == Integer.MIN_VALUE) {
-            return 0;
+            return 1;
         } else {
             return id;
         }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java
Patch:
@@ -90,7 +90,7 @@ public TraceBrief queryBasicTraces(long startSecondTB, long endSecondTB, long mi
                 sourceBuilder.sort(SegmentRecord.START_TIME, SortOrder.DESC);
                 break;
             case BY_DURATION:
-                sourceBuilder.sort(SegmentRecord.START_TIME, SortOrder.DESC);
+                sourceBuilder.sort(SegmentRecord.LATENCY, SortOrder.DESC);
                 break;
         }
         sourceBuilder.size(limit);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationClientCallSlaIndicator.java
Patch:
@@ -41,7 +41,7 @@
 @StorageEntity(name = "service_relation_client_call_sla", builder = ServiceRelationClientCallSlaIndicator.Builder.class)
 public class ServiceRelationClientCallSlaIndicator extends PercentIndicator implements AlarmSupported {
 
-    @Setter @Getter @Column(columnName = "source_service_id") @IDColumn private java.lang.String entityId;
+    @Setter @Getter @Column(columnName = "entity_id") @IDColumn private java.lang.String entityId;
 
     @Override public String id() {
         String splitJointId = String.valueOf(getTimeBucket());
@@ -152,7 +152,7 @@ public static class Builder implements StorageBuilder<ServiceRelationClientCallS
 
         @Override public Map<String, Object> data2Map(ServiceRelationClientCallSlaIndicator storageData) {
             Map<String, Object> map = new HashMap<>();
-            map.put("source_service_id", storageData.getEntityId());
+            map.put("entity_id", storageData.getEntityId());
             map.put("total", storageData.getTotal());
             map.put("percentage", storageData.getPercentage());
             map.put("match", storageData.getMatch());
@@ -162,7 +162,7 @@ public static class Builder implements StorageBuilder<ServiceRelationClientCallS
 
         @Override public ServiceRelationClientCallSlaIndicator map2Data(Map<String, Object> dbMap) {
             ServiceRelationClientCallSlaIndicator indicator = new ServiceRelationClientCallSlaIndicator();
-            indicator.setEntityId((String)dbMap.get("source_service_id"));
+            indicator.setEntityId((String)dbMap.get("entity_id"));
             indicator.setTotal(((Number)dbMap.get("total")).longValue());
             indicator.setPercentage(((Number)dbMap.get("percentage")).intValue());
             indicator.setMatch(((Number)dbMap.get("match")).longValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationClientCpmIndicator.java
Patch:
@@ -41,7 +41,7 @@
 @StorageEntity(name = "service_relation_client_cpm", builder = ServiceRelationClientCpmIndicator.Builder.class)
 public class ServiceRelationClientCpmIndicator extends CPMIndicator implements AlarmSupported {
 
-    @Setter @Getter @Column(columnName = "source_service_id") @IDColumn private java.lang.String entityId;
+    @Setter @Getter @Column(columnName = "entity_id") @IDColumn private java.lang.String entityId;
 
     @Override public String id() {
         String splitJointId = String.valueOf(getTimeBucket());
@@ -147,7 +147,7 @@ public static class Builder implements StorageBuilder<ServiceRelationClientCpmIn
 
         @Override public Map<String, Object> data2Map(ServiceRelationClientCpmIndicator storageData) {
             Map<String, Object> map = new HashMap<>();
-            map.put("source_service_id", storageData.getEntityId());
+            map.put("entity_id", storageData.getEntityId());
             map.put("value", storageData.getValue());
             map.put("total", storageData.getTotal());
             map.put("time_bucket", storageData.getTimeBucket());
@@ -156,7 +156,7 @@ public static class Builder implements StorageBuilder<ServiceRelationClientCpmIn
 
         @Override public ServiceRelationClientCpmIndicator map2Data(Map<String, Object> dbMap) {
             ServiceRelationClientCpmIndicator indicator = new ServiceRelationClientCpmIndicator();
-            indicator.setEntityId((String)dbMap.get("source_service_id"));
+            indicator.setEntityId((String)dbMap.get("entity_id"));
             indicator.setValue(((Number)dbMap.get("value")).longValue());
             indicator.setTotal(((Number)dbMap.get("total")).longValue());
             indicator.setTimeBucket(((Number)dbMap.get("time_bucket")).longValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationClientRespTimeIndicator.java
Patch:
@@ -41,7 +41,7 @@
 @StorageEntity(name = "service_relation_client_resp_time", builder = ServiceRelationClientRespTimeIndicator.Builder.class)
 public class ServiceRelationClientRespTimeIndicator extends LongAvgIndicator implements AlarmSupported {
 
-    @Setter @Getter @Column(columnName = "source_service_id") @IDColumn private java.lang.String entityId;
+    @Setter @Getter @Column(columnName = "entity_id") @IDColumn private java.lang.String entityId;
 
     @Override public String id() {
         String splitJointId = String.valueOf(getTimeBucket());
@@ -152,7 +152,7 @@ public static class Builder implements StorageBuilder<ServiceRelationClientRespT
 
         @Override public Map<String, Object> data2Map(ServiceRelationClientRespTimeIndicator storageData) {
             Map<String, Object> map = new HashMap<>();
-            map.put("source_service_id", storageData.getEntityId());
+            map.put("entity_id", storageData.getEntityId());
             map.put("summation", storageData.getSummation());
             map.put("count", storageData.getCount());
             map.put("value", storageData.getValue());
@@ -162,7 +162,7 @@ public static class Builder implements StorageBuilder<ServiceRelationClientRespT
 
         @Override public ServiceRelationClientRespTimeIndicator map2Data(Map<String, Object> dbMap) {
             ServiceRelationClientRespTimeIndicator indicator = new ServiceRelationClientRespTimeIndicator();
-            indicator.setEntityId((String)dbMap.get("source_service_id"));
+            indicator.setEntityId((String)dbMap.get("entity_id"));
             indicator.setSummation(((Number)dbMap.get("summation")).longValue());
             indicator.setCount(((Number)dbMap.get("count")).intValue());
             indicator.setValue(((Number)dbMap.get("value")).longValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationServerCallSlaIndicator.java
Patch:
@@ -41,7 +41,7 @@
 @StorageEntity(name = "service_relation_server_call_sla", builder = ServiceRelationServerCallSlaIndicator.Builder.class)
 public class ServiceRelationServerCallSlaIndicator extends PercentIndicator implements AlarmSupported {
 
-    @Setter @Getter @Column(columnName = "source_service_id") @IDColumn private java.lang.String entityId;
+    @Setter @Getter @Column(columnName = "entity_id") @IDColumn private java.lang.String entityId;
 
     @Override public String id() {
         String splitJointId = String.valueOf(getTimeBucket());
@@ -152,7 +152,7 @@ public static class Builder implements StorageBuilder<ServiceRelationServerCallS
 
         @Override public Map<String, Object> data2Map(ServiceRelationServerCallSlaIndicator storageData) {
             Map<String, Object> map = new HashMap<>();
-            map.put("source_service_id", storageData.getEntityId());
+            map.put("entity_id", storageData.getEntityId());
             map.put("total", storageData.getTotal());
             map.put("percentage", storageData.getPercentage());
             map.put("match", storageData.getMatch());
@@ -162,7 +162,7 @@ public static class Builder implements StorageBuilder<ServiceRelationServerCallS
 
         @Override public ServiceRelationServerCallSlaIndicator map2Data(Map<String, Object> dbMap) {
             ServiceRelationServerCallSlaIndicator indicator = new ServiceRelationServerCallSlaIndicator();
-            indicator.setEntityId((String)dbMap.get("source_service_id"));
+            indicator.setEntityId((String)dbMap.get("entity_id"));
             indicator.setTotal(((Number)dbMap.get("total")).longValue());
             indicator.setPercentage(((Number)dbMap.get("percentage")).intValue());
             indicator.setMatch(((Number)dbMap.get("match")).longValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationServerCpmIndicator.java
Patch:
@@ -41,7 +41,7 @@
 @StorageEntity(name = "service_relation_server_cpm", builder = ServiceRelationServerCpmIndicator.Builder.class)
 public class ServiceRelationServerCpmIndicator extends CPMIndicator implements AlarmSupported {
 
-    @Setter @Getter @Column(columnName = "source_service_id") @IDColumn private java.lang.String entityId;
+    @Setter @Getter @Column(columnName = "entity_id") @IDColumn private java.lang.String entityId;
 
     @Override public String id() {
         String splitJointId = String.valueOf(getTimeBucket());
@@ -147,7 +147,7 @@ public static class Builder implements StorageBuilder<ServiceRelationServerCpmIn
 
         @Override public Map<String, Object> data2Map(ServiceRelationServerCpmIndicator storageData) {
             Map<String, Object> map = new HashMap<>();
-            map.put("source_service_id", storageData.getEntityId());
+            map.put("entity_id", storageData.getEntityId());
             map.put("value", storageData.getValue());
             map.put("total", storageData.getTotal());
             map.put("time_bucket", storageData.getTimeBucket());
@@ -156,7 +156,7 @@ public static class Builder implements StorageBuilder<ServiceRelationServerCpmIn
 
         @Override public ServiceRelationServerCpmIndicator map2Data(Map<String, Object> dbMap) {
             ServiceRelationServerCpmIndicator indicator = new ServiceRelationServerCpmIndicator();
-            indicator.setEntityId((String)dbMap.get("source_service_id"));
+            indicator.setEntityId((String)dbMap.get("entity_id"));
             indicator.setValue(((Number)dbMap.get("value")).longValue());
             indicator.setTotal(((Number)dbMap.get("total")).longValue());
             indicator.setTimeBucket(((Number)dbMap.get("time_bucket")).longValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/servicerelation/ServiceRelationServerRespTimeIndicator.java
Patch:
@@ -41,7 +41,7 @@
 @StorageEntity(name = "service_relation_server_resp_time", builder = ServiceRelationServerRespTimeIndicator.Builder.class)
 public class ServiceRelationServerRespTimeIndicator extends LongAvgIndicator implements AlarmSupported {
 
-    @Setter @Getter @Column(columnName = "source_service_id") @IDColumn private java.lang.String entityId;
+    @Setter @Getter @Column(columnName = "entity_id") @IDColumn private java.lang.String entityId;
 
     @Override public String id() {
         String splitJointId = String.valueOf(getTimeBucket());
@@ -152,7 +152,7 @@ public static class Builder implements StorageBuilder<ServiceRelationServerRespT
 
         @Override public Map<String, Object> data2Map(ServiceRelationServerRespTimeIndicator storageData) {
             Map<String, Object> map = new HashMap<>();
-            map.put("source_service_id", storageData.getEntityId());
+            map.put("entity_id", storageData.getEntityId());
             map.put("summation", storageData.getSummation());
             map.put("count", storageData.getCount());
             map.put("value", storageData.getValue());
@@ -162,7 +162,7 @@ public static class Builder implements StorageBuilder<ServiceRelationServerRespT
 
         @Override public ServiceRelationServerRespTimeIndicator map2Data(Map<String, Object> dbMap) {
             ServiceRelationServerRespTimeIndicator indicator = new ServiceRelationServerRespTimeIndicator();
-            indicator.setEntityId((String)dbMap.get("source_service_id"));
+            indicator.setEntityId((String)dbMap.get("entity_id"));
             indicator.setSummation(((Number)dbMap.get("summation")).longValue());
             indicator.setCount(((Number)dbMap.get("count")).intValue());
             indicator.setValue(((Number)dbMap.get("value")).longValue());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/PxxIndicator.java
Patch:
@@ -38,7 +38,7 @@ public abstract class PxxIndicator extends Indicator implements IntValueHolder {
     protected static final String VALUE = "value";
     protected static final String PRECISION = "precision";
 
-    @Getter @Setter @Column(columnName = VALUE) private int value;
+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private int value;
     @Getter @Setter @Column(columnName = PRECISION) private int precision;
     @Getter @Setter @Column(columnName = DETAIL_GROUP) private IntKeyLongValueArray detailGroup;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java
Patch:
@@ -26,6 +26,7 @@ public class Const {
     public static final String ID_SPLIT = "_";
     public static final String KEY_VALUE_SPLIT = ",";
     public static final String ARRAY_SPLIT = "|";
+    public static final String ARRAY_PARSER_SPLIT = "\\|";
     public static final int USER_SERVICE_ID = 1;
     public static final int USER_INSTANCE_ID = 1;
     public static final int USER_ENDPOINT_ID = 1;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/IntKeyLongValueArray.java
Patch:
@@ -49,11 +49,11 @@ public IntKeyLongValueArray(String data) {
     }
 
     @Override public void toObject(String data) {
-        String[] keyValues = data.split(Const.ARRAY_SPLIT);
+        String[] keyValues = data.split(Const.ARRAY_PARSER_SPLIT);
         for (int i = 0; i < keyValues.length; i++) {
             IntKeyLongValue value = new IntKeyLongValue();
             value.toObject(keyValues[i]);
-            this.set(i, value);
+            this.add(value);
         }
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/ThermodynamicIndicator.java
Patch:
@@ -41,7 +41,7 @@ public abstract class ThermodynamicIndicator extends Indicator {
 
     @Getter @Setter @Column(columnName = STEP) private int step = 0;
     @Getter @Setter @Column(columnName = NUM_OF_STEPS) private int numOfSteps = 0;
-    @Getter @Setter @Column(columnName = DETAIL_GROUP) private IntKeyLongValueArray detailGroup = new IntKeyLongValueArray(30);
+    @Getter @Setter @Column(columnName = DETAIL_GROUP, isValue = true) private IntKeyLongValueArray detailGroup = new IntKeyLongValueArray(30);
 
     private Map<Integer, IntKeyLongValue> detailIndex;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/EndpointInventoryRegister.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.oap.server.core.cache.EndpointInventoryCache;
 import org.apache.skywalking.oap.server.core.register.EndpointInventory;
 import org.apache.skywalking.oap.server.core.register.worker.InventoryProcess;
+import org.apache.skywalking.oap.server.core.source.DetectPoint;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.slf4j.*;
 
@@ -48,14 +49,14 @@ private EndpointInventoryCache getCacheService() {
         return cacheService;
     }
 
-    @Override public int getOrCreate(int serviceId, String endpointName, int detectPoint) {
+    @Override public int getOrCreate(int serviceId, String endpointName, DetectPoint detectPoint) {
         int endpointId = getCacheService().getEndpointId(serviceId, endpointName);
 
         if (endpointId == Const.NONE) {
             EndpointInventory endpointInventory = new EndpointInventory();
             endpointInventory.setServiceId(serviceId);
             endpointInventory.setName(endpointName);
-            endpointInventory.setDetectPoint(detectPoint);
+            endpointInventory.setDetectPoint(detectPoint.ordinal());
 
             long now = System.currentTimeMillis();
             endpointInventory.setRegisterTime(now);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/IEndpointInventoryRegister.java
Patch:
@@ -18,14 +18,15 @@
 
 package org.apache.skywalking.oap.server.core.register.service;
 
+import org.apache.skywalking.oap.server.core.source.DetectPoint;
 import org.apache.skywalking.oap.server.library.module.Service;
 
 /**
  * @author peng-yongsheng
  */
 public interface IEndpointInventoryRegister extends Service {
 
-    int getOrCreate(int serviceId, String endpointName, int detectPoint);
+    int getOrCreate(int serviceId, String endpointName, DetectPoint detectPoint);
 
     int get(int serviceId, String endpointName);
 }

File: oap-server/server-receiver-plugin/skywalking-register-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/register/provider/handler/v5/ServiceNameDiscoveryHandler.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.skywalking.apm.network.language.agent.*;
 import org.apache.skywalking.oap.server.core.*;
 import org.apache.skywalking.oap.server.core.register.service.IEndpointInventoryRegister;
+import org.apache.skywalking.oap.server.core.source.DetectPoint;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.server.grpc.GRPCHandler;
 import org.slf4j.*;
@@ -48,8 +49,7 @@ public ServiceNameDiscoveryHandler(ModuleManager moduleManager) {
         for (ServiceNameElement serviceNameElement : serviceNameElementList) {
             int serviceId = serviceNameElement.getApplicationId();
             String endpointName = serviceNameElement.getServiceName();
-            int srcSpanType = serviceNameElement.getSrcSpanTypeValue();
-            int endpointId = inventoryService.getOrCreate(serviceId, endpointName, srcSpanType);
+            int endpointId = inventoryService.getOrCreate(serviceId, endpointName, DetectPoint.fromSpanType(serviceNameElement.getSrcSpanType()));
 
             if (endpointId != Const.NONE) {
                 ServiceNameMappingElement.Builder mappingElement = ServiceNameMappingElement.newBuilder();

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/standardization/SpanIdExchanger.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.skywalking.oap.server.core.*;
 import org.apache.skywalking.oap.server.core.config.IComponentLibraryCatalogService;
 import org.apache.skywalking.oap.server.core.register.service.*;
+import org.apache.skywalking.oap.server.core.source.DetectPoint;
 import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.apache.skywalking.oap.server.library.util.StringUtils;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.decorator.SpanDecorator;
@@ -88,7 +89,7 @@ private SpanIdExchanger(ModuleManager moduleManager) {
 
         if (standardBuilder.getOperationNameId() == 0) {
             String endpointName = StringUtils.isNotEmpty(standardBuilder.getOperationName()) ? standardBuilder.getOperationName() : Const.DOMAIN_OPERATION_NAME;
-            int endpointId = endpointInventoryRegister.getOrCreate(serviceId, endpointName, standardBuilder.getSpanTypeValue());
+            int endpointId = endpointInventoryRegister.getOrCreate(serviceId, endpointName, DetectPoint.fromSpanType(standardBuilder.getSpanType()));
 
             if (endpointId == 0) {
                 if (logger.isDebugEnabled()) {

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/AlarmTrend.java
Patch:
@@ -18,8 +18,9 @@
 
 package org.apache.skywalking.oap.query.graphql.type;
 
+import java.util.ArrayList;
 import java.util.List;
 
 public class AlarmTrend {
-    private List<Integer> numOfAlarm;
+    private List<Integer> numOfAlarm = new ArrayList<>();
 }

File: oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleDefine.java
Patch:
@@ -90,6 +90,9 @@ void prepare(ModuleManager moduleManager,
 
     private void copyProperties(ModuleConfig dest, Properties src, String moduleName,
         String providerName) throws IllegalAccessException {
+        if (dest == null) {
+            return;
+        }
         Enumeration<?> propertyNames = src.propertyNames();
         while (propertyNames.hasMoreElements()) {
             String propertyName = (String)propertyNames.nextElement();

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java
Patch:
@@ -47,16 +47,16 @@ public MeshReceiverProvider() {
     }
 
     @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {
+    }
+
+    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {
         MeshDataBufferFileCache cache = new MeshDataBufferFileCache(config);
         try {
             cache.start();
             TelemetryDataDispatcher.setCache(cache, getManager());
         } catch (IOException e) {
             throw new ModuleStartException(e.getMessage(), e);
         }
-    }
-
-    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {
         CoreRegisterLinker.setModuleManager(getManager());
         GRPCHandlerRegister service = getManager().find(CoreModule.NAME).getService(GRPCHandlerRegister.class);
         service.addHandler(new MeshGRPCHandler());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java
Patch:
@@ -26,9 +26,9 @@ public class Const {
     public static final String ID_SPLIT = "_";
     public static final String KEY_VALUE_SPLIT = ",";
     public static final String ARRAY_SPLIT = "|";
-    public static final int NONE_SERVICE_ID = 1;
-    public static final int NONE_INSTANCE_ID = 1;
-    public static final int NONE_ENDPOINT_ID = 1;
+    public static final int USER_SERVICE_ID = 1;
+    public static final int USER_INSTANCE_ID = 1;
+    public static final int USER_ENDPOINT_ID = 1;
     public static final String NONE_ENDPOINT_NAME = "None";
     public static final String USER_CODE = "User";
     public static final String SEGMENT_SPAN_SPLIT = "S";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TopologyBuilder.java
Patch:
@@ -95,7 +95,7 @@ Topology build(List<ServiceComponent> serviceComponents, List<ServiceMapping> se
             ServiceInventory source = serviceInventoryCache.get(serverCall.getSource());
             ServiceInventory target = serviceInventoryCache.get(serverCall.getTarget());
 
-            if (source.getSequence() == Const.NONE_SERVICE_ID) {
+            if (source.getSequence() == Const.USER_SERVICE_ID) {
                 if (!nodeIds.contains(source.getSequence())) {
                     Node visualUserNode = new Node();
                     visualUserNode.setId(source.getSequence());
@@ -122,7 +122,7 @@ Topology build(List<ServiceComponent> serviceComponents, List<ServiceMapping> se
             call.setTarget(target.getSequence());
             call.setId(serverCall.getId());
 
-            if (source.getSequence() == Const.NONE_SERVICE_ID) {
+            if (source.getSequence() == Const.USER_SERVICE_ID) {
                 call.setCallType(Const.EMPTY_STRING);
             } else {
                 call.setCallType(nodeCompMap.get(serverCall.getTarget()));
@@ -147,7 +147,7 @@ private List<Call> serverCallsFilter(List<Call> serviceRelationServerCalls) {
 
         serviceRelationServerCalls.forEach(serverCall -> {
             ServiceInventory source = serviceInventoryCache.get(serverCall.getSource());
-            if (BooleanUtils.valueToBoolean(source.getIsAddress()) || source.getSequence() == Const.NONE_SERVICE_ID) {
+            if (BooleanUtils.valueToBoolean(source.getIsAddress()) || source.getSequence() == Const.USER_SERVICE_ID) {
                 filteredCalls.add(serverCall);
             }
         });

File: oap-server/server-receiver-plugin/skywalking-istio-telemetry-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/istio/telemetry/provider/IstioTelemetryReceiverProvider.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.receiver.istio.telemetry.provider;
 
+import org.apache.skywalking.aop.server.receiver.mesh.MeshReceiverModule;
 import org.apache.skywalking.oap.server.core.CoreModule;
 import org.apache.skywalking.oap.server.core.server.GRPCHandlerRegister;
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
@@ -53,6 +54,6 @@ public class IstioTelemetryReceiverProvider extends ModuleProvider {
     }
 
     @Override public String[] requiredModules() {
-        return new String[] {CoreModule.NAME};
+        return new String[] {CoreModule.NAME, MeshReceiverModule.NAME};
     }
 }
\ No newline at end of file

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshGRPCHandler.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.aop.server.receiver.mesh.provider;
+package org.apache.skywalking.aop.server.receiver.mesh;
 
 import io.grpc.stub.StreamObserver;
 import org.apache.skywalking.apm.network.servicemesh.MeshProbeDownstream;
@@ -35,6 +35,7 @@ public StreamObserver<ServiceMeshMetric> collect(StreamObserver<MeshProbeDownstr
                 if (logger.isDebugEnabled()) {
                     logger.debug("Received mesh metric: {}", metric);
                 }
+                TelemetryDataDispatcher.preProcess(metric);
             }
 
             @Override public void onError(Throwable throwable) {

File: oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverModule.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.aop.server.receiver.mesh.module;
+package org.apache.skywalking.aop.server.receiver.mesh;
 
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
 

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java
Patch:
@@ -38,4 +38,5 @@ public class AlarmRule {
     private int period;
     private int count;
     private int silencePeriod;
+    private String message;
 }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java
Patch:
@@ -66,6 +66,7 @@ public Rules readRules() {
                     alarmRule.setPeriod((Integer)settings.getOrDefault("period", 1));
                     alarmRule.setCount((Integer)settings.getOrDefault("count", 1));
                     alarmRule.setSilencePeriod((Integer)settings.getOrDefault("silence-period", alarmRule.getPeriod()));
+                    alarmRule.setMessage((String)settings.getOrDefault("message", "Alarm caused by Rule " + alarmRule.getAlarmRuleName()));
 
                     rules.getRules().add(alarmRule);
                 }

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRuleInitTest.java
Patch:
@@ -34,11 +34,14 @@ public void testInit() {
         Assert.assertEquals("85", ruleList.get(1).getThreshold());
         Assert.assertEquals("endpoint_percent_rule", ruleList.get(0).getAlarmRuleName());
         Assert.assertEquals(0, ruleList.get(0).getIncludeNames().size());
+        Assert.assertEquals("Successful rate of endpoint {name} is lower than 75%", ruleList.get(0).getMessage());
 
         Assert.assertEquals("service_b", ruleList.get(1).getIncludeNames().get(1));
+        Assert.assertEquals("Alarm caused by Rule service_percent_rule", ruleList.get(1).getMessage());
 
         List<String> rulesWebhooks = rules.getWebhooks();
         Assert.assertEquals(2, rulesWebhooks.size());
         Assert.assertEquals("http://127.0.0.1/go-wechat/", rulesWebhooks.get(1));
+
     }
 }

File: apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -96,6 +96,8 @@ public class ComponentsDefine {
 
     public static final  OfficialComponent ACTIVEMQ_CONSUMER = new OfficialComponent(46,"activemq-consumer");
 
+    public static final OfficialComponent TRANSPORT_CLIENT =  new OfficialComponent(48, "transport-client");
+
     private static ComponentsDefine INSTANCE = new ComponentsDefine();
 
     private String[] components;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/all/AllP50Indicator.java
Patch:
@@ -102,7 +102,7 @@ public class AllP50Indicator extends P50Indicator implements AlarmSupported {
     }
 
     @Override public AlarmMeta getAlarmMeta() {
-        return new AlarmMeta("All_p50", Scope.All);
+        return new AlarmMeta("all_p50", Scope.All);
     }
 
     @Override
@@ -153,7 +153,7 @@ public static class Builder implements StorageBuilder<AllP50Indicator> {
             AllP50Indicator indicator = new AllP50Indicator();
             indicator.setValue(((Number)dbMap.get("value")).intValue());
             indicator.setPrecision(((Number)dbMap.get("precision")).intValue());
-            indicator.setDetailGroup((IntKeyLongValueArray)dbMap.get("detail_group"));
+            indicator.setDetailGroup((org.apache.skywalking.oap.server.core.analysis.indicator.IntKeyLongValueArray)dbMap.get("detail_group"));
             indicator.setTimeBucket(((Number)dbMap.get("time_bucket")).longValue());
             return indicator;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/all/AllP75Indicator.java
Patch:
@@ -102,7 +102,7 @@ public class AllP75Indicator extends P75Indicator implements AlarmSupported {
     }
 
     @Override public AlarmMeta getAlarmMeta() {
-        return new AlarmMeta("All_p75", Scope.All);
+        return new AlarmMeta("all_p75", Scope.All);
     }
 
     @Override
@@ -153,7 +153,7 @@ public static class Builder implements StorageBuilder<AllP75Indicator> {
             AllP75Indicator indicator = new AllP75Indicator();
             indicator.setValue(((Number)dbMap.get("value")).intValue());
             indicator.setPrecision(((Number)dbMap.get("precision")).intValue());
-            indicator.setDetailGroup((IntKeyLongValueArray)dbMap.get("detail_group"));
+            indicator.setDetailGroup((org.apache.skywalking.oap.server.core.analysis.indicator.IntKeyLongValueArray)dbMap.get("detail_group"));
             indicator.setTimeBucket(((Number)dbMap.get("time_bucket")).longValue());
             return indicator;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/all/AllP90Indicator.java
Patch:
@@ -102,7 +102,7 @@ public class AllP90Indicator extends P90Indicator implements AlarmSupported {
     }
 
     @Override public AlarmMeta getAlarmMeta() {
-        return new AlarmMeta("All_p90", Scope.All);
+        return new AlarmMeta("all_p90", Scope.All);
     }
 
     @Override
@@ -153,7 +153,7 @@ public static class Builder implements StorageBuilder<AllP90Indicator> {
             AllP90Indicator indicator = new AllP90Indicator();
             indicator.setValue(((Number)dbMap.get("value")).intValue());
             indicator.setPrecision(((Number)dbMap.get("precision")).intValue());
-            indicator.setDetailGroup((IntKeyLongValueArray)dbMap.get("detail_group"));
+            indicator.setDetailGroup((org.apache.skywalking.oap.server.core.analysis.indicator.IntKeyLongValueArray)dbMap.get("detail_group"));
             indicator.setTimeBucket(((Number)dbMap.get("time_bucket")).longValue());
             return indicator;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/all/AllP95Indicator.java
Patch:
@@ -102,7 +102,7 @@ public class AllP95Indicator extends P95Indicator implements AlarmSupported {
     }
 
     @Override public AlarmMeta getAlarmMeta() {
-        return new AlarmMeta("All_p95", Scope.All);
+        return new AlarmMeta("all_p95", Scope.All);
     }
 
     @Override
@@ -153,7 +153,7 @@ public static class Builder implements StorageBuilder<AllP95Indicator> {
             AllP95Indicator indicator = new AllP95Indicator();
             indicator.setValue(((Number)dbMap.get("value")).intValue());
             indicator.setPrecision(((Number)dbMap.get("precision")).intValue());
-            indicator.setDetailGroup((IntKeyLongValueArray)dbMap.get("detail_group"));
+            indicator.setDetailGroup((org.apache.skywalking.oap.server.core.analysis.indicator.IntKeyLongValueArray)dbMap.get("detail_group"));
             indicator.setTimeBucket(((Number)dbMap.get("time_bucket")).longValue());
             return indicator;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/all/AllP99Indicator.java
Patch:
@@ -102,7 +102,7 @@ public class AllP99Indicator extends P99Indicator implements AlarmSupported {
     }
 
     @Override public AlarmMeta getAlarmMeta() {
-        return new AlarmMeta("All_p99", Scope.All);
+        return new AlarmMeta("all_p99", Scope.All);
     }
 
     @Override
@@ -153,7 +153,7 @@ public static class Builder implements StorageBuilder<AllP99Indicator> {
             AllP99Indicator indicator = new AllP99Indicator();
             indicator.setValue(((Number)dbMap.get("value")).intValue());
             indicator.setPrecision(((Number)dbMap.get("precision")).intValue());
-            indicator.setDetailGroup((IntKeyLongValueArray)dbMap.get("detail_group"));
+            indicator.setDetailGroup((org.apache.skywalking.oap.server.core.analysis.indicator.IntKeyLongValueArray)dbMap.get("detail_group"));
             indicator.setTimeBucket(((Number)dbMap.get("time_bucket")).longValue());
             return indicator;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstance/ServiceInstanceRespTimeIndicator.java
Patch:
@@ -38,7 +38,7 @@
  */
 @IndicatorType
 @StreamData
-@StorageEntity(name = "serviceinstance_resptime", builder = ServiceInstanceRespTimeIndicator.Builder.class)
+@StorageEntity(name = "serviceinstance_resp_time", builder = ServiceInstanceRespTimeIndicator.Builder.class)
 public class ServiceInstanceRespTimeIndicator extends LongAvgIndicator implements AlarmSupported {
 
     @Setter @Getter @Column(columnName = "entity_id") @IDColumn private String entityId;
@@ -112,7 +112,7 @@ public class ServiceInstanceRespTimeIndicator extends LongAvgIndicator implement
     }
 
     @Override public AlarmMeta getAlarmMeta() {
-        return new AlarmMeta("ServiceInstance_RespTime", Scope.ServiceInstance, entityId);
+        return new AlarmMeta("serviceInstance_resp_time", Scope.ServiceInstance, entityId);
     }
 
     @Override

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceJVMMemory.java
Patch:
@@ -36,7 +36,7 @@ public class ServiceInstanceJVMMemory extends Source {
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
     @Getter @Setter private int serviceInstanceId;
-    @Getter @Setter private boolean isHeap;
+    @Getter @Setter private boolean heapStatus;
     @Getter @Setter private long init;
     @Getter @Setter private long max;
     @Getter @Setter private long used;

File: oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/handler/JVMMetricsServiceHandler.java
Patch:
@@ -102,7 +102,7 @@ private void sendToMemoryMetricProcess(int serviceInstanceId, long timeBucket, L
             serviceInstanceJVMMemory.setName(Const.EMPTY_STRING);
             serviceInstanceJVMMemory.setServiceInstanceId(serviceInstanceId);
             serviceInstanceJVMMemory.setServiceName(Const.EMPTY_STRING);
-            serviceInstanceJVMMemory.setHeap(memory.getIsHeap());
+            serviceInstanceJVMMemory.setHeapStatus(memory.getIsHeap());
             serviceInstanceJVMMemory.setInit(memory.getInit());
             serviceInstanceJVMMemory.setMax(memory.getMax());
             serviceInstanceJVMMemory.setUsed(memory.getUsed());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.oap.server.core.cache.*;
 import org.apache.skywalking.oap.server.core.cluster.*;
 import org.apache.skywalking.oap.server.core.config.*;
+import org.apache.skywalking.oap.server.core.query.TopologyQueryService;
 import org.apache.skywalking.oap.server.core.register.annotation.InventoryTypeListener;
 import org.apache.skywalking.oap.server.core.register.service.*;
 import org.apache.skywalking.oap.server.core.remote.*;
@@ -108,6 +109,8 @@ public CoreModuleProvider() {
         this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager()));
         this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));
 
+        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));
+
         annotationScan.registerListener(storageAnnotationListener);
         annotationScan.registerListener(streamAnnotationListener);
         annotationScan.registerListener(new IndicatorTypeListener(getManager()));

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/Indicator.java
Patch:
@@ -28,7 +28,7 @@
  */
 public abstract class Indicator extends StreamData implements StorageData {
 
-    protected static final String TIME_BUCKET = "time_bucket";
+    public static final String TIME_BUCKET = "time_bucket";
 
     @Getter @Setter @Column(columnName = TIME_BUCKET) private long timeBucket;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/Step.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.query.graphql.type;
+package org.apache.skywalking.oap.server.core.query.entity;
 
 public enum Step {
     MONTH,

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/Duration.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.query.graphql.type;
 
 import lombok.Getter;
+import org.apache.skywalking.oap.server.core.query.entity.Step;
 
 @Getter
 public class Duration {

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ColumnTypeEsMapping.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;
 
+import java.util.List;
 import org.apache.skywalking.oap.server.core.storage.model.DataTypeMapping;
 
 /**
@@ -34,6 +35,8 @@ public class ColumnTypeEsMapping implements DataTypeMapping {
             return "double";
         } else if (String.class.equals(type)) {
             return "keyword";
+        } else if (List.class.equals(type)) {
+            return "keyword";
         } else {
             throw new IllegalArgumentException("Unsupported data type: " + type.getName());
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/DispatcherManager.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis;
 
 import java.util.*;
+import org.apache.skywalking.oap.server.core.analysis.generated.all.AllDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.generated.endpoint.EndpointDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.generated.endpointrelation.EndpointRelationDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.generated.service.ServiceDispatcher;
@@ -45,6 +46,8 @@ public class DispatcherManager {
     public DispatcherManager() {
         this.dispatcherMap = new HashMap<>();
 
+        this.dispatcherMap.put(Scope.All, new AllDispatcher());
+
         this.dispatcherMap.put(Scope.Service, new ServiceDispatcher());
         this.dispatcherMap.put(Scope.ServiceInstance, new ServiceInstanceDispatcher());
         this.dispatcherMap.put(Scope.Endpoint, new EndpointDispatcher());

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java
Patch:
@@ -162,6 +162,7 @@ private void setPublicAttrs(SourceBuilder sourceBuilder, SpanDecorator spanDecor
     @Override public void build() {
         entrySourceBuilders.forEach(entrySourceBuilder -> {
             entrySourceBuilder.setTimeBucket(minuteTimeBucket);
+            sourceReceiver.receive(entrySourceBuilder.toAll());
             sourceReceiver.receive(entrySourceBuilder.toService());
             sourceReceiver.receive(entrySourceBuilder.toServiceInstance());
             sourceReceiver.receive(entrySourceBuilder.toEndpoint());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/Const.java
Patch:
@@ -33,7 +33,6 @@ public class Const {
     public static final String UNKNOWN = "Unknown";
     public static final String EXCEPTION = "Exception";
     public static final String EMPTY_STRING = "";
-    public static final String FILE_SUFFIX = "sw";
     public static final int SPAN_TYPE_VIRTUAL = 9;
     public static final String DOMAIN_OPERATION_NAME = "{domain}";
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.util.*;
 import org.apache.skywalking.oap.server.core.cache.*;
+import org.apache.skywalking.oap.server.core.config.IComponentLibraryCatalogService;
 import org.apache.skywalking.oap.server.core.register.service.*;
 import org.apache.skywalking.oap.server.core.remote.RemoteSenderService;
 import org.apache.skywalking.oap.server.core.remote.annotation.StreamDataClassGetter;
@@ -42,6 +43,8 @@ public class CoreModule extends ModuleDefine {
 
     @Override public Class[] services() {
         List<Class> classes = new ArrayList<>();
+        classes.add(IComponentLibraryCatalogService.class);
+
         addServerInterface(classes);
         addReceiverInterface(classes);
         addInsideService(classes);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/IndicatorProcess.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.analysis.worker;
 
 import java.util.*;
+import lombok.Getter;
 import org.apache.skywalking.oap.server.core.UnexpectedException;
 import org.apache.skywalking.oap.server.core.analysis.indicator.Indicator;
 import org.apache.skywalking.oap.server.core.storage.*;
@@ -33,6 +34,7 @@ public enum IndicatorProcess {
     INSTANCE;
 
     private Map<Class<? extends Indicator>, IndicatorAggregateWorker> entryWorkers = new HashMap<>();
+    @Getter private List<IndicatorPersistentWorker> persistentWorkers = new ArrayList<>();
 
     public void in(Indicator indicator) {
         entryWorkers.get(indicator.getClass()).in(indicator);
@@ -56,6 +58,7 @@ public void create(ModuleManager moduleManager, Class<? extends Indicator> indic
         IndicatorPersistentWorker persistentWorker = new IndicatorPersistentWorker(WorkerIdGenerator.INSTANCES.generate(), modelName,
             1000, moduleManager, indicatorDAO, alarmNotifyWorker);
         WorkerInstances.INSTANCES.put(persistentWorker.getWorkerId(), persistentWorker);
+        persistentWorkers.add(persistentWorker);
 
         IndicatorRemoteWorker remoteWorker = new IndicatorRemoteWorker(WorkerIdGenerator.INSTANCES.generate(), moduleManager, persistentWorker);
         WorkerInstances.INSTANCES.put(remoteWorker.getWorkerId(), remoteWorker);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/worker/RegisterPersistentWorker.java
Patch:
@@ -66,7 +66,7 @@ public RegisterPersistentWorker(int workerId, String modelName, ModuleManager mo
                                 registerDAO.forceUpdate(modelName, newSource);
                             } else {
                                 int sequence = registerDAO.max(modelName);
-                                source.setSequence(sequence);
+                                source.setSequence(sequence + 1);
                                 registerDAO.forceInsert(modelName, source);
                             }
                         } catch (Throwable t) {

File: oap-server/server-library/library-buffer/src/main/java/org/apache/skywalking/oap/server/library/buffer/OffsetStream.java
Patch:
@@ -84,8 +84,8 @@ synchronized void initialize() throws IOException {
     void flush() {
         try {
             String offsetRecord = offset.serialize();
-            logger.debug("flush offset, record: {}", offsetRecord);
             if (!lastOffsetRecord.equals(offsetRecord)) {
+                logger.debug("flush offset, record: {}", offsetRecord);
                 if (offsetFile.length() >= FileUtils.ONE_MB * offsetFileMaxSize) {
                     nextFile();
                 }

File: oap-server/server-library/library-buffer/src/test/java/org/apache/skywalking/oap/server/library/buffer/BufferStreamTestCase.java
Patch:
@@ -67,8 +67,9 @@ public static void main(String[] args) throws IOException, InterruptedException
 
     private static class SegmentParse implements DataStreamReader.CallBack<TraceSegmentObject> {
 
-        @Override public void call(TraceSegmentObject message) {
+        @Override public boolean call(TraceSegmentObject message) {
             logger.info("segment parse: {}", message.getSpans(0).getSpanId());
+            return true;
         }
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/RegisterEsDAO.java
Patch:
@@ -91,7 +91,7 @@ private int getResponse(String modelName, SearchSourceBuilder searchSourceBuilde
 
         int id = (int)agg.getValue();
         if (id == Integer.MAX_VALUE || id == Integer.MIN_VALUE) {
-            return 1;
+            return 0;
         } else {
             return id;
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Scope.java
Patch:
@@ -23,5 +23,6 @@
  */
 public enum Scope {
     All, Service, ServiceInstance, Endpoint, ServiceRelation, ServiceInstanceRelation, EndpointRelation, NetworkAddress,
-    ServiceInstanceJVMCPU, ServiceInstanceJVMMemory, ServiceInstanceJVMMemoryPool, ServiceInstanceJVMGC
+    ServiceInstanceJVMCPU, ServiceInstanceJVMMemory, ServiceInstanceJVMMemoryPool, ServiceInstanceJVMGC,
+    ServiceComponent, ServiceMapping
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.skywalking.oap.server.receiver.trace.provider.handler.TraceSegmentServiceHandler;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParserListenerManager;
 import org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.endpoint.MultiScopesSpanListener;
+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener.service.*;
 
 /**
  * @author peng-yongsheng
@@ -50,6 +51,8 @@ public class TraceModuleProvider extends ModuleProvider {
     @Override public void start() throws ModuleStartException {
         SegmentParserListenerManager listenerManager = new SegmentParserListenerManager();
         listenerManager.add(new MultiScopesSpanListener.Factory());
+        listenerManager.add(new ServiceComponentSpanListener.Factory());
+        listenerManager.add(new ServiceMappingSpanListener.Factory());
 
         GRPCHandlerRegister grpcHandlerRegister = getManager().find(CoreModule.NAME).getService(GRPCHandlerRegister.class);
         try {

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java
Patch:
@@ -30,7 +30,7 @@ public AlarmTrend getAlarmTrend(final Duration duration) {
         return new AlarmTrend();
     }
 
-    public Alarms getAlarm(final Duration duration, final Scope scope, final Pagination paging) {
+    public Alarms getAlarm(final Duration duration, final Scope scope,final String keyword, final Pagination paging) {
         return new Alarms();
     }
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/AlarmMessage.java
Patch:
@@ -22,4 +22,5 @@ public class AlarmMessage {
     private Scope scope;
     private String id;
     private String message;
+    private Long startTime;
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/Span.java
Patch:
@@ -37,4 +37,5 @@ public class Span {
     private String layer;
     private List<KeyValue> tags;
     private List<LogEntity> logs;
+    private String serviceCode;
 }

File: oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/SegmentParse.java
Patch:
@@ -50,7 +50,7 @@ public SegmentParse(ModuleManager moduleManager, SegmentParserListenerManager li
         this.segmentCoreInfo = new SegmentCoreInfo();
         this.segmentCoreInfo.setStartTime(Long.MAX_VALUE);
         this.segmentCoreInfo.setEndTime(Long.MIN_VALUE);
-        this.standardizationWorker = new SegmentStandardizationWorker(moduleManager, listenerManager);
+        this.standardizationWorker = new SegmentStandardizationWorker(moduleManager, listenerManager,this);
     }
 
     @Override public void call(UpstreamSegment segment) {

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/Call.java
Patch:
@@ -21,8 +21,6 @@
 public class Call {
     private String source;
     private String target;
-    private boolean isAlert;
     private String callType;
     private long cpm;
-    private long avgResponseTime;
 }

File: oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/type/ClusterBrief.java
Patch:
@@ -20,7 +20,7 @@
 
 public class ClusterBrief {
     private int numOfService;
-    private int numOfServiceInstance;
+    private int numOfEndpoint;
     private int numOfDatabase;
     private int numOfCache;
     private int numOfMQ;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpoint/EndpointAvgIndicator.java
Patch:
@@ -69,6 +69,7 @@ public class EndpointAvgIndicator extends LongAvgIndicator implements AlarmSuppo
         EndpointAvgIndicator indicator = (EndpointAvgIndicator)obj;
         if (id != indicator.id)
             return false;
+
         if (getTimeBucket() != indicator.getTimeBucket())
             return false;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/endpoint/EndpointPercentIndicator.java
Patch:
@@ -69,6 +69,7 @@ public class EndpointPercentIndicator extends PercentIndicator implements AlarmS
         EndpointPercentIndicator indicator = (EndpointPercentIndicator)obj;
         if (id != indicator.id)
             return false;
+
         if (getTimeBucket() != indicator.getTimeBucket())
             return false;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/service/ServiceAvgIndicator.java
Patch:
@@ -67,6 +67,7 @@ public class ServiceAvgIndicator extends LongAvgIndicator implements AlarmSuppor
         ServiceAvgIndicator indicator = (ServiceAvgIndicator)obj;
         if (id != indicator.id)
             return false;
+
         if (getTimeBucket() != indicator.getTimeBucket())
             return false;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmcpu/InstanceJvmCpuIndicator.java
Patch:
@@ -68,6 +68,7 @@ public class InstanceJvmCpuIndicator extends DoubleAvgIndicator implements Alarm
         InstanceJvmCpuIndicator indicator = (InstanceJvmCpuIndicator)obj;
         if (id != indicator.id)
             return false;
+
         if (getTimeBucket() != indicator.getTimeBucket())
             return false;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmgc/InstanceJvmYoungGcTimeIndicator.java
Patch:
@@ -68,6 +68,7 @@ public class InstanceJvmYoungGcTimeIndicator extends LongAvgIndicator implements
         InstanceJvmYoungGcTimeIndicator indicator = (InstanceJvmYoungGcTimeIndicator)obj;
         if (id != indicator.id)
             return false;
+
         if (getTimeBucket() != indicator.getTimeBucket())
             return false;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemory/InstanceJvmMemoryMaxIndicator.java
Patch:
@@ -68,6 +68,7 @@ public class InstanceJvmMemoryMaxIndicator extends LongAvgIndicator implements A
         InstanceJvmMemoryMaxIndicator indicator = (InstanceJvmMemoryMaxIndicator)obj;
         if (id != indicator.id)
             return false;
+
         if (getTimeBucket() != indicator.getTimeBucket())
             return false;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemorypool/InstanceJvmMemoryPoolMaxIndicator.java
Patch:
@@ -68,6 +68,7 @@ public class InstanceJvmMemoryPoolMaxIndicator extends LongAvgIndicator implemen
         InstanceJvmMemoryPoolMaxIndicator indicator = (InstanceJvmMemoryPoolMaxIndicator)obj;
         if (id != indicator.id)
             return false;
+
         if (getTimeBucket() != indicator.getTimeBucket())
             return false;
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstance.java
Patch:
@@ -31,6 +31,7 @@ public class ServiceInstance extends Source {
     }
 
     @Getter @Setter private int id;
+    @Getter @Setter private int serviceId;
     @Getter @Setter private String name;
     @Getter @Setter private String serviceName;
     @Getter @Setter private String endpointName;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ServiceInstanceRelation.java
Patch:
@@ -30,9 +30,11 @@ public class ServiceInstanceRelation extends Source {
     }
 
     @Getter @Setter private int sourceServiceInstanceId;
+    @Getter @Setter private int sourceServiceId;
     @Getter @Setter private String sourceServiceName;
     @Getter @Setter private String sourceServiceInstanceName;
     @Getter @Setter private int destServiceInstanceId;
+    @Getter @Setter private int destServiceId;
     @Getter @Setter private String destServiceName;
     @Getter @Setter private String destServiceInstanceName;
     @Getter @Setter private String endpoint;

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmCoreTest.java
Patch:
@@ -81,7 +81,7 @@ public void testTriggerTimePoint() throws InterruptedException {
                 Assert.assertTrue(checkTimePoints(checkTime));
                 break;
             }
-            if(i == 9){
+            if (i == 9) {
                 Assert.assertTrue(false);
             }
         }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.oap.server.core.alarm.provider;
 
+import java.util.ArrayList;
 import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.Setter;
@@ -31,6 +32,7 @@ public class AlarmRule {
     private String alarmRuleName;
 
     private String indicatorName;
+    private ArrayList includeNames;
     private String threshold;
     private String op;
     private int period;

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java
Patch:
@@ -58,7 +58,9 @@ public Rules readRules() {
                     if (indicatorName == null) {
                         throw new IllegalArgumentException("indicator-name can't be null");
                     }
+
                     alarmRule.setIndicatorName((String)indicatorName);
+                    alarmRule.setIncludeNames((ArrayList)settings.getOrDefault("include-names", new ArrayList(0)));
                     alarmRule.setThreshold(settings.get("threshold").toString());
                     alarmRule.setOp((String)settings.get("op"));
                     alarmRule.setPeriod((Integer)settings.getOrDefault("period", 1));

File: oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRuleInitTest.java
Patch:
@@ -33,6 +33,9 @@ public void testInit() {
         Assert.assertEquals(2, ruleList.size());
         Assert.assertEquals("85", ruleList.get(1).getThreshold());
         Assert.assertEquals("endpoint_percent_rule", ruleList.get(0).getAlarmRuleName());
+        Assert.assertEquals(0, ruleList.get(0).getIncludeNames().size());
+
+        Assert.assertEquals("service_b", ruleList.get(1).getIncludeNames().get(1));
 
         List<String> rulesWebhooks = rules.getWebhooks();
         Assert.assertEquals(2, rulesWebhooks.size());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/ServiceMetaInAlarm.java
Patch:
@@ -25,7 +25,7 @@
 
 @Getter(AccessLevel.PUBLIC)
 @Setter(AccessLevel.PUBLIC)
-public class ServiceMetaInAlarm implements MetaInAlarm {
+public class ServiceMetaInAlarm extends MetaInAlarm {
     private String indicatorName;
 
     private int id;

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmAssertWorker.java
Patch:
@@ -66,7 +66,7 @@ public InstanceMetricAlarmAssertWorker(ModuleManager moduleManager) {
         Instance instance = instanceDAO.getInstance(alarm.getInstanceId());
         JsonObject osInfo = gson.fromJson(instance.getOsInfo(), JsonObject.class);
         String serverName = Const.UNKNOWN;
-        if (osInfo.has("hostName")) {
+        if (osInfo != null && osInfo.has("hostName")) {
             serverName = osInfo.get("hostName").getAsString();
         }
 

File: oap-server/server-library/library-buffer/src/main/java/org/apache/skywalking/oap/server/library/buffer/DataStream.java
Patch:
@@ -38,7 +38,7 @@ class DataStream<MESSAGE_TYPE extends GeneratedMessageV3> {
     @Getter private final DataStreamWriter<MESSAGE_TYPE> writer;
     private boolean initialized = false;
 
-    DataStream(File directory, int offsetFileMaxSize, int dataFileMaxSize, Parser<MESSAGE_TYPE> parser,
+    DataStream(File directory, int dataFileMaxSize, int offsetFileMaxSize, Parser<MESSAGE_TYPE> parser,
         DataStreamReader.CallBack<MESSAGE_TYPE> callBack) {
         this.directory = directory;
         this.offsetStream = new OffsetStream(directory, offsetFileMaxSize);

File: oap-server/server-library/library-buffer/src/main/java/org/apache/skywalking/oap/server/library/buffer/OffsetStream.java
Patch:
@@ -66,8 +66,8 @@ synchronized void initialize() throws IOException {
         if (!initialized) {
             String[] fileNames = directory.list(new PrefixFileFilter(BufferFileUtils.OFFSET_FILE_PREFIX));
             if (fileNames != null && fileNames.length > 0) {
-                for (int i = 0; i < fileNames.length; i++) {
-                }
+                BufferFileUtils.sort(fileNames);
+                offsetFile = new File(directory, fileNames[0]);
             } else {
                 offsetFile = newFile();
             }

File: oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java
Patch:
@@ -29,8 +29,6 @@
 import org.apache.skywalking.oap.server.core.analysis.indicator.IntValueHolder;
 import org.apache.skywalking.oap.server.core.analysis.indicator.LongValueHolder;
 import org.apache.skywalking.oap.server.core.source.Scope;
-import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
-import org.apache.skywalking.oap.server.core.storage.annotation.StorageEntityAnnotationUtils;
 import org.joda.time.LocalDateTime;
 import org.joda.time.Minutes;
 import org.joda.time.format.DateTimeFormat;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmcpu/ServiceInstanceJVMCPUDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMCPU;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.
@@ -36,6 +36,7 @@ public class ServiceInstanceJVMCPUDispatcher implements SourceDispatcher<Service
     private void doInstanceJvmCpu(ServiceInstanceJVMCPU source) {
         InstanceJvmCpuIndicator indicator = new InstanceJvmCpuIndicator();
 
+
         indicator.setTimeBucket(source.getTimeBucket());
         indicator.setId(source.getId());
         indicator.setServiceInstanceId(source.getServiceInstanceId());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemory/ServiceInstanceJVMMemoryDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemory;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.
@@ -36,6 +36,7 @@ public class ServiceInstanceJVMMemoryDispatcher implements SourceDispatcher<Serv
     private void doInstanceJvmMemoryMax(ServiceInstanceJVMMemory source) {
         InstanceJvmMemoryMaxIndicator indicator = new InstanceJvmMemoryMaxIndicator();
 
+
         indicator.setTimeBucket(source.getTimeBucket());
         indicator.setId(source.getId());
         indicator.setServiceInstanceId(source.getServiceInstanceId());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemorypool/ServiceInstanceJVMMemoryPoolDispatcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.skywalking.oap.server.core.analysis.SourceDispatcher;
 import org.apache.skywalking.oap.server.core.analysis.worker.IndicatorProcess;
-import org.apache.skywalking.oap.server.core.source.ServiceInstanceJVMMemoryPool;
+import org.apache.skywalking.oap.server.core.source.*;
 
 /**
  * This class is auto generated. Please don't change this class manually.
@@ -36,6 +36,7 @@ public class ServiceInstanceJVMMemoryPoolDispatcher implements SourceDispatcher<
     private void doInstanceJvmMemoryPoolMax(ServiceInstanceJVMMemoryPool source) {
         InstanceJvmMemoryPoolMaxIndicator indicator = new InstanceJvmMemoryPoolMaxIndicator();
 
+
         indicator.setTimeBucket(source.getTimeBucket());
         indicator.setId(source.getId());
         indicator.setServiceInstanceId(source.getServiceInstanceId());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core;
 
 import java.io.IOException;
+import org.apache.skywalking.oap.server.core.alarm.IndicatorAlarmListener;
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.IndicatorTypeListener;
 import org.apache.skywalking.oap.server.core.annotation.AnnotationScan;
 import org.apache.skywalking.oap.server.core.cache.*;
@@ -108,6 +109,7 @@ public CoreModuleProvider() {
         annotationScan.registerListener(streamAnnotationListener);
         annotationScan.registerListener(new IndicatorTypeListener(getManager()));
         annotationScan.registerListener(new InventoryTypeListener(getManager()));
+        annotationScan.registerListener(IndicatorAlarmListener.INSTANCE);
 
         this.remoteClientManager = new RemoteClientManager(getManager());
         this.registerServiceImplementation(RemoteClientManager.class, remoteClientManager);

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmAssertWorker.java
Patch:
@@ -68,7 +68,7 @@ public InstanceReferenceMetricAlarmAssertWorker(ModuleManager moduleManager) {
         Instance instance = instanceDAO.getInstance(alarm.getBehindInstanceId());
         JsonObject osInfo = gson.fromJson(instance.getOsInfo(), JsonObject.class);
         String serverName = Const.UNKNOWN;
-        if (osInfo.has("hostName")) {
+        if (osInfo != null && osInfo.has("hostName")) {
             serverName = osInfo.get("hostName").getAsString();
         }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeForRequestInterceptor.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;
 
 import java.lang.reflect.Method;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/EasyLogger.java
Patch:
@@ -66,7 +66,7 @@ private String replaceParam(String message, Object... parameters) {
 
     String format(LogLevel level, String message, Throwable t) {
         return StringUtil.join(' ', level.name(),
-            new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),
+            new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS").format(new Date()),
             targetClass.getSimpleName(),
             ": ",
             message,

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/EasyLogger.java
Patch:
@@ -66,7 +66,7 @@ private String replaceParam(String message, Object... parameters) {
 
     String format(LogLevel level, String message, Throwable t) {
         return StringUtil.join(' ', level.name(),
-            new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),
+            new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS").format(new Date()),
             targetClass.getSimpleName(),
             ": ",
             message,

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java
Patch:
@@ -40,8 +40,6 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
-        ContextManager.getRuntimeContext().remove(RESPONSE_KEY_IN_RUNTIME_CONTEXT);
-        ContextManager.getRuntimeContext().remove(REQUEST_KEY_IN_RUNTIME_CONTEXT);
         return ret;
     }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java
Patch:
@@ -40,8 +40,6 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
-        ContextManager.getRuntimeContext().remove(RESPONSE_KEY_IN_RUNTIME_CONTEXT);
-        ContextManager.getRuntimeContext().remove(REQUEST_KEY_IN_RUNTIME_CONTEXT);
         return ret;
     }
 

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java
Patch:
@@ -37,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         if (ContextManager.isActive()) {
             AbstractSpan abstractTracingSpan = ContextManager.activeSpan();
             Map<String, String> eventMap = new HashMap<String, String>();
-            eventMap.put("forward-url", (String)objInst.getSkyWalkingDynamicField());
+            eventMap.put("forward-url", objInst.getSkyWalkingDynamicField() == null ? "" : String.valueOf(objInst.getSkyWalkingDynamicField()));
             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);
             ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);
         }

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java
Patch:
@@ -37,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         if (ContextManager.isActive()) {
             AbstractSpan abstractTracingSpan = ContextManager.activeSpan();
             Map<String, String> eventMap = new HashMap<String, String>();
-            eventMap.put("forward-url", (String)objInst.getSkyWalkingDynamicField());
+            eventMap.put("forward-url", objInst.getSkyWalkingDynamicField() == null ? "" : String.valueOf(objInst.getSkyWalkingDynamicField()));
             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);
             ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmgc/ServiceInstanceJVMGCDispatcher.java
Patch:
@@ -34,7 +34,7 @@ public class ServiceInstanceJVMGCDispatcher implements SourceDispatcher<ServiceI
     }
 
     private void doInstanceJvmGcTime(ServiceInstanceJVMGC source) {
-    InstanceJvmGcTimeIndicator indicator = new InstanceJvmGcTimeIndicator();
+        InstanceJvmGcTimeIndicator indicator = new InstanceJvmGcTimeIndicator();
 
         indicator.setTimeBucket(source.getTimeBucket());
         indicator.setId(source.getId());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemory/ServiceInstanceJVMMemoryDispatcher.java
Patch:
@@ -34,7 +34,7 @@ public class ServiceInstanceJVMMemoryDispatcher implements SourceDispatcher<Serv
     }
 
     private void doInstanceJvmMemoryMax(ServiceInstanceJVMMemory source) {
-    InstanceJvmMemoryMaxIndicator indicator = new InstanceJvmMemoryMaxIndicator();
+        InstanceJvmMemoryMaxIndicator indicator = new InstanceJvmMemoryMaxIndicator();
 
         indicator.setTimeBucket(source.getTimeBucket());
         indicator.setId(source.getId());

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/generated/serviceinstancejvmmemorypool/ServiceInstanceJVMMemoryPoolDispatcher.java
Patch:
@@ -34,7 +34,7 @@ public class ServiceInstanceJVMMemoryPoolDispatcher implements SourceDispatcher<
     }
 
     private void doInstanceJvmMemoryPoolMax(ServiceInstanceJVMMemoryPool source) {
-    InstanceJvmMemoryPoolMaxIndicator indicator = new InstanceJvmMemoryPoolMaxIndicator();
+        InstanceJvmMemoryPoolMaxIndicator indicator = new InstanceJvmMemoryPoolMaxIndicator();
 
         indicator.setTimeBucket(source.getTimeBucket());
         indicator.setId(source.getId());

File: apm-collector/apm-collector-thirdparty-receiver/receiver-zipkin/receiver-zipkin-provider/src/test/java/org/apache/skywalking/apm/collector/receiver/zipkin/provider/transform/SpringSleuthSegmentBuilderTest.java
Patch:
@@ -125,11 +125,11 @@ public void heartBeat(int instanceId, long heartBeatTime) {
 
     private List<Span> buildSpringSleuthExampleTrace() throws UnsupportedEncodingException {
         List<Span> spans = new LinkedList<>();
-        String span = "{\"traceId\":\"5b0e64354eea4fa71a8a1b5bdd791b8a\",\"id\":\"1a8a1b5bdd791b8a\",\"kind\":\"SERVER\",\"name\":\"get /\",\"timestamp\":1527669813700123,\"duration\":11295,\"localEndpoint\":{\"serviceName\":\"frontend\",\"ipv4s\":\"192.168.72.220\"},\"remoteEndpoint\":{\"ipv6\":\"::1\",\"port\":55146},\"tags\":{\"http.method\":\"GET\",\"http.path\":\"/\",\"mvc.controller.class\":\"Frontend\",\"mvc.controller.method\":\"callBackend\"}}";
+        String span = "{\"traceId\":\"5b0e64354eea4fa71a8a1b5bdd791b8a\",\"id\":\"1a8a1b5bdd791b8a\",\"kind\":\"SERVER\",\"name\":\"get /\",\"timestamp\":1527669813700123,\"duration\":11295,\"localEndpoint\":{\"serviceName\":\"frontend\",\"ipv4\":\"192.168.72.220\"},\"remoteEndpoint\":{\"ipv6\":\"::1\",\"port\":55146},\"tags\":{\"http.method\":\"GET\",\"http.path\":\"/\",\"mvc.controller.class\":\"Frontend\",\"mvc.controller.method\":\"callBackend\"}}";
         spans.add(SpanBytesDecoder.JSON_V2.decodeOne(span.getBytes("UTF-8")));
-        span = "{\"traceId\":\"5b0e64354eea4fa71a8a1b5bdd791b8a\",\"parentId\":\"1a8a1b5bdd791b8a\",\"id\":\"d7d5b93dcda767c8\",\"kind\":\"CLIENT\",\"name\":\"get\",\"timestamp\":1527669813702456,\"duration\":6672,\"localEndpoint\":{\"serviceName\":\"frontend\",\"ipv4s\":\"192.168.72.220\"},\"tags\":{\"http.method\":\"GET\",\"http.path\":\"/api\"}}";
+        span = "{\"traceId\":\"5b0e64354eea4fa71a8a1b5bdd791b8a\",\"parentId\":\"1a8a1b5bdd791b8a\",\"id\":\"d7d5b93dcda767c8\",\"kind\":\"CLIENT\",\"name\":\"get\",\"timestamp\":1527669813702456,\"duration\":6672,\"localEndpoint\":{\"serviceName\":\"frontend\",\"ipv4\":\"192.168.72.220\"},\"tags\":{\"http.method\":\"GET\",\"http.path\":\"/api\"}}";
         spans.add(SpanBytesDecoder.JSON_V2.decodeOne(span.getBytes("UTF-8")));
-        span = "{\"traceId\":\"5b0e64354eea4fa71a8a1b5bdd791b8a\",\"parentId\":\"1a8a1b5bdd791b8a\",\"id\":\"d7d5b93dcda767c8\",\"kind\":\"SERVER\",\"name\":\"get /api\",\"timestamp\":1527669813705106,\"duration\":4802,\"localEndpoint\":{\"serviceName\":\"backend\",\"ipv4s\":\"192.168.72.220\"},\"remoteEndpoint\":{\"ipv4s\":\"127.0.0.1\",\"port\":55147},\"tags\":{\"http.method\":\"GET\",\"http.path\":\"/api\",\"mvc.controller.class\":\"Backend\",\"mvc.controller.method\":\"printDate\"},\"shared\":true}";
+        span = "{\"traceId\":\"5b0e64354eea4fa71a8a1b5bdd791b8a\",\"parentId\":\"1a8a1b5bdd791b8a\",\"id\":\"d7d5b93dcda767c8\",\"kind\":\"SERVER\",\"name\":\"get /api\",\"timestamp\":1527669813705106,\"duration\":4802,\"localEndpoint\":{\"serviceName\":\"backend\",\"ipv4\":\"192.168.72.220\"},\"remoteEndpoint\":{\"ipv4\":\"127.0.0.1\",\"port\":55147},\"tags\":{\"http.method\":\"GET\",\"http.path\":\"/api\",\"mvc.controller.class\":\"Backend\",\"mvc.controller.method\":\"printDate\"},\"shared\":true}";
         spans.add(SpanBytesDecoder.JSON_V2.decodeOne(span.getBytes("UTF-8")));
 
         return SpanBytesDecoder.JSON_V2.decodeList(spans.toString().getBytes("UTF-8"));

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmAssertWorker.java
Patch:
@@ -68,7 +68,7 @@ public InstanceReferenceMetricAlarmAssertWorker(ModuleManager moduleManager) {
         Instance instance = instanceDAO.getInstance(alarm.getBehindInstanceId());
         JsonObject osInfo = gson.fromJson(instance.getOsInfo(), JsonObject.class);
         String serverName = Const.UNKNOWN;
-        if (osInfo.has("hostName")) {
+        if (osInfo != null && osInfo.has("hostName")) {
             serverName = osInfo.get("hostName").getAsString();
         }
 

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/EndpointInventoryRegister.java
Patch:
@@ -48,14 +48,14 @@ private EndpointInventoryCache getCacheService() {
         return cacheService;
     }
 
-    @Override public int getOrCreate(int serviceId, String endpointName, int srcSpanType) {
+    @Override public int getOrCreate(int serviceId, String endpointName, int detectPoint) {
         int endpointId = getCacheService().getEndpointId(serviceId, endpointName);
 
         if (endpointId == Const.NONE) {
             EndpointInventory endpointInventory = new EndpointInventory();
             endpointInventory.setServiceId(serviceId);
             endpointInventory.setName(endpointName);
-            endpointInventory.setSrcSpanType(srcSpanType);
+            endpointInventory.setDetectPoint(detectPoint);
 
             long now = System.currentTimeMillis();
             endpointInventory.setRegisterTime(now);

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/register/service/IEndpointInventoryRegister.java
Patch:
@@ -25,7 +25,7 @@
  */
 public interface IEndpointInventoryRegister extends Service {
 
-    int getOrCreate(int serviceId, String endpointName, int srcSpanType);
+    int getOrCreate(int serviceId, String endpointName, int detectPoint);
 
     int get(int serviceId, String endpointName);
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/annotation/ConstOne.java
Patch:
@@ -24,6 +24,6 @@
  * @author peng-yongsheng
  */
 @Target(ElementType.PARAMETER)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.RUNTIME)
 public @interface ConstOne {
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/annotation/Entrance.java
Patch:
@@ -24,6 +24,6 @@
  * @author peng-yongsheng
  */
 @Target(ElementType.METHOD)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.RUNTIME)
 public @interface Entrance {
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/annotation/SourceFrom.java
Patch:
@@ -24,6 +24,6 @@
  * @author peng-yongsheng
  */
 @Target(ElementType.PARAMETER)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.RUNTIME)
 public @interface SourceFrom {
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.skywalking.oap.server.core.server.*;
 import org.apache.skywalking.oap.server.core.source.SourceReceiver;
 import org.apache.skywalking.oap.server.core.storage.model.IModelGetter;
-import org.apache.skywalking.oap.server.core.worker.annotation.WorkerAnnotationContainer;
 import org.apache.skywalking.oap.server.library.module.ModuleDefine;
 
 /**
@@ -56,7 +55,6 @@ private void addServerInterface(List<Class> classes) {
     private void addInsideService(List<Class> classes) {
         classes.add(IModelGetter.class);
         classes.add(StreamDataClassGetter.class);
-        classes.add(WorkerAnnotationContainer.class);
         classes.add(RemoteClientManager.class);
         classes.add(RemoteSenderService.class);
     }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/DispatcherManager.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.*;
 import org.apache.skywalking.oap.server.core.analysis.endpoint.EndpointDispatcher;
 import org.apache.skywalking.oap.server.core.source.Scope;
-import org.apache.skywalking.oap.server.library.module.ModuleManager;
 import org.slf4j.*;
 
 /**
@@ -33,9 +32,9 @@ public class DispatcherManager {
 
     private Map<Scope, SourceDispatcher> dispatcherMap;
 
-    public DispatcherManager(ModuleManager moduleManager) {
+    public DispatcherManager() {
         this.dispatcherMap = new HashMap<>();
-        this.dispatcherMap.put(Scope.Endpoint, new EndpointDispatcher(moduleManager));
+        this.dispatcherMap.put(Scope.Endpoint, new EndpointDispatcher());
     }
 
     public SourceDispatcher getDispatcher(Scope scope) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/AvgIndicator.java
Patch:
@@ -20,13 +20,12 @@
 
 import lombok.*;
 import org.apache.skywalking.oap.server.core.analysis.indicator.annotation.*;
-import org.apache.skywalking.oap.server.core.remote.selector.Selector;
 import org.apache.skywalking.oap.server.core.storage.annotation.Column;
 
 /**
  * @author peng-yongsheng
  */
-@IndicatorType(selector = Selector.HashCode, needMerge = true)
+@IndicatorOperator
 public abstract class AvgIndicator extends Indicator {
 
     protected static final String SUMMATION = "summation";

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/annotation/IndicatorOperator.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.oap.server.core.worker.annotation;
+package org.apache.skywalking.oap.server.core.analysis.indicator.annotation;
 
 import java.lang.annotation.*;
 
@@ -25,5 +25,5 @@
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface Worker {
+public @interface IndicatorOperator {
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/remote/client/RemoteClientManager.java
Patch:
@@ -20,8 +20,8 @@
 
 import java.util.*;
 import java.util.concurrent.*;
-import org.apache.skywalking.oap.server.core.remote.annotation.StreamDataAnnotationContainer;
 import org.apache.skywalking.oap.server.core.cluster.*;
+import org.apache.skywalking.oap.server.core.remote.annotation.StreamDataAnnotationContainer;
 import org.apache.skywalking.oap.server.library.module.*;
 import org.slf4j.*;
 
@@ -96,7 +96,7 @@ private void buildNewClients(List<RemoteInstance> remoteInstances) {
                 client = currentClientsMap.get(address);
             } else {
                 if (remoteInstance.isSelf()) {
-                    client = new SelfRemoteClient(moduleManager, remoteInstance.getHost(), remoteInstance.getPort());
+                    client = new SelfRemoteClient(remoteInstance.getHost(), remoteInstance.getPort());
                 } else {
                     client = new GRPCRemoteClient(indicatorMapper, remoteInstance, 1, 3000);
                 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/SourceReceiverImpl.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.skywalking.oap.server.core.source;
 
 import org.apache.skywalking.oap.server.core.analysis.DispatcherManager;
-import org.apache.skywalking.oap.server.library.module.ModuleManager;
 
 /**
  * @author peng-yongsheng
@@ -28,8 +27,8 @@ public class SourceReceiverImpl implements SourceReceiver {
 
     private final DispatcherManager dispatcherManager;
 
-    public SourceReceiverImpl(ModuleManager moduleManager) {
-        this.dispatcherManager = new DispatcherManager(moduleManager);
+    public SourceReceiverImpl() {
+        this.dispatcherManager = new DispatcherManager();
     }
 
     @Override public void receive(Source source) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -32,6 +32,6 @@ public class StorageModule extends ModuleDefine {
     }
 
     @Override public Class[] services() {
-        return new Class[] {IBatchDAO.class, IPersistenceDAO.class, IRegisterLockDAO.class};
+        return new Class[] {IBatchDAO.class, StorageDAO.class, IRegisterLockDAO.class};
     }
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/StorageAnnotationListener.java
Patch:
@@ -49,8 +49,8 @@ public StorageAnnotationListener() {
         List<ModelColumn> modelColumns = new LinkedList<>();
         retrieval(aClass, modelColumns);
 
-        StorageEntity annotation = (StorageEntity)aClass.getAnnotation(StorageEntity.class);
-        models.add(new Model(annotation.name(), modelColumns));
+        String modelName = StorageEntityAnnotationUtils.getModelName(aClass);
+        models.add(new Model(modelName, modelColumns));
     }
 
     private void retrieval(Class clazz, List<ModelColumn> modelColumns) {

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/StorageEntity.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.skywalking.oap.server.core.storage.annotation;
 
 import java.lang.annotation.*;
+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;
 
 /**
  * @author peng-yongsheng
@@ -27,4 +28,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface StorageEntity {
     String name();
+
+    Class<? extends StorageBuilder> builder();
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java
Patch:
@@ -63,7 +63,7 @@ public void prepare() throws ServiceNotProvidedException {
         elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), nameSpace);
 
         this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));
-        this.registerServiceImplementation(IPersistenceDAO.class, new PersistenceEsDAO(elasticSearchClient, nameSpace));
+        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));
         this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 1000));
     }
 

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/base/dao/IBatchDAO.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.storage.base.dao;
 
 import java.util.List;

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -48,7 +48,7 @@ public CoreModuleProvider() {
         super();
         this.moduleConfig = new CoreModuleConfig();
         this.indicatorMapper = new IndicatorMapper();
-        this.workerMapper = new WorkerMapper(getManager());
+        this.workerMapper = new WorkerMapper();
     }
 
     @Override public String name() {
@@ -87,7 +87,7 @@ public CoreModuleProvider() {
 
         try {
             indicatorMapper.load();
-            workerMapper.load();
+            workerMapper.load(getManager());
         } catch (IndicatorDefineLoadException | WorkerDefineLoadException e) {
             throw new ModuleStartException(e.getMessage(), e);
         }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/indicator/annotation/IndicatorType.java
Patch:
@@ -28,4 +28,6 @@
 @Retention(RetentionPolicy.SOURCE)
 public @interface IndicatorType {
     Selector selector();
+
+    boolean needMerge();
 }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java
Patch:
@@ -32,6 +32,6 @@ public class StorageModule extends ModuleDefine {
     }
 
     @Override public Class[] services() {
-        return new Class[] {};
+        return new Class[] {IBatchDAO.class, IPersistenceDAO.class};
     }
 }

File: oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchConfig.java
Patch:
@@ -18,13 +18,16 @@
 
 package org.apache.skywalking.oap.server.storage.plugin.elasticsearch;
 
+import lombok.*;
 import org.apache.skywalking.oap.server.library.module.ModuleConfig;
 
 /**
  * @author peng-yongsheng
  */
 public class StorageModuleElasticsearchConfig extends ModuleConfig {
 
+    @Setter @Getter private String nameSpace;
+    @Setter @Getter private String clusterNodes;
     private int indexShardsNumber;
     private int indexReplicasNumber;
     private boolean highPerformanceMode;

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServiceNameService.java
Patch:
@@ -77,7 +77,7 @@ public List<ServiceInfo> searchService(String keyword, int applicationId, int to
 
     private long startTimeMillis() {
         int minuteMetricDataTTL = configService.minuteMetricDataTTL();
-        return System.currentTimeMillis() - minuteMetricDataTTL * 60 * 60 * 100;
+        return System.currentTimeMillis() - minuteMetricDataTTL * 60 * 1000L;
     }
 
     public ThroughputTrend getServiceThroughputTrend(int serviceId, Step step, long startTimeBucket,

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServiceNameService.java
Patch:
@@ -77,7 +77,7 @@ public List<ServiceInfo> searchService(String keyword, int applicationId, int to
 
     private long startTimeMillis() {
         int minuteMetricDataTTL = configService.minuteMetricDataTTL();
-        return System.currentTimeMillis() - minuteMetricDataTTL * 60 * 1000;
+        return System.currentTimeMillis() - minuteMetricDataTTL * 60 * 1000L;
     }
 
     public ThroughputTrend getServiceThroughputTrend(int serviceId, Step step, long startTimeBucket,

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v9/server/ForwardInterceptor.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 
 public class ForwardInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {
-    private static final String FORWARD_REQUEST_FLAG = "SW_FORWARD_REQUEST_FLAG";
 
     @Override
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
@@ -40,7 +39,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             Map<String, String> eventMap = new HashMap<String, String>();
             eventMap.put("forward-url", (String)objInst.getSkyWalkingDynamicField());
             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);
-            ContextManager.getRuntimeContext().put(FORWARD_REQUEST_FLAG, true);
+            ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);
         }
     }
 

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v9/server/HandleInterceptor.java
Patch:
@@ -67,6 +67,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
             Tags.STATUS_CODE.set(span, Integer.toString(servletResponse.getStatus()));
         }
         ContextManager.stopSpan();
+        ContextManager.getRuntimeContext().remove(Constants.FORWARD_REQUEST_FLAG);
         return ret;
     }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RequestMappingMethodInterceptorTest.java
Patch:
@@ -175,8 +175,6 @@ private class MockEnhancedInstance1 implements EnhancedInstance {
         @Override
         public Object getSkyWalkingDynamicField() {
             value.setPathMappingCache(new PathMappingCache("/test"));
-            value.setHttpResponse(response);
-            value.setNativeWebRequest(nativeWebRequest);
             return value;
         }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java
Patch:
@@ -306,8 +306,6 @@ private class MockEnhancedInstance1 implements EnhancedInstance {
         @Override
         public Object getSkyWalkingDynamicField() {
             value.setPathMappingCache(new PathMappingCache("/test"));
-            value.setHttpResponse(response);
-            value.setNativeWebRequest(nativeWebRequest);
             return value;
         }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/SpringTestCaseHelper.java
Patch:
@@ -21,12 +21,15 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
+import org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants;
 
 public final class SpringTestCaseHelper {
 
     public final static void createCaseHandler(HttpServletRequest request, HttpServletResponse response,
         CaseHandler a) throws Throwable {
         ContextManager.createLocalSpan("For-Test");
+        ContextManager.getRuntimeContext().put(Constants.REQUEST_KEY_IN_RUNTIME_CONTEXT, request);
+        ContextManager.getRuntimeContext().put(Constants.RESPONSE_KEY_IN_RUNTIME_CONTEXT, response);
         a.handleCase();
         ContextManager.stopSpan();
     }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java
Patch:
@@ -32,9 +32,9 @@ public class Constants {
 
     public static final String REST_MAPPING_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RestMappingMethodInterceptor";
 
-    public static final String HYSTRIX_COMMAND_ANNOTATION = "com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand";
+    public static final String REQUEST_KEY_IN_RUNTIME_CONTEXT = "SW_REQUEST";
 
-    public static final String ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT = "ISOLATE_STRATEGY";
+    public static final String RESPONSE_KEY_IN_RUNTIME_CONTEXT = "SW_RESPONSE";
 
     public static final String FORWARD_REQUEST_FLAG = "SW_FORWARD_REQUEST_FLAG";
 }

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/ForwardInterceptor.java
Patch:
@@ -31,8 +31,6 @@
 
 public class ForwardInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {
 
-    private static final String FORWARD_REQUEST_FLAG = "SW_FORWARD_REQUEST_FLAG";
-
     @Override
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         MethodInterceptResult result) throws Throwable {
@@ -41,7 +39,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             Map<String, String> eventMap = new HashMap<String, String>();
             eventMap.put("forward-url", (String)objInst.getSkyWalkingDynamicField());
             abstractTracingSpan.log(System.currentTimeMillis(), eventMap);
-            ContextManager.getRuntimeContext().put(FORWARD_REQUEST_FLAG, true);
+            ContextManager.getRuntimeContext().put(Constants.FORWARD_REQUEST_FLAG, true);
         }
     }
 

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/TomcatInvokeInterceptor.java
Patch:
@@ -81,6 +81,7 @@ public class TomcatInvokeInterceptor implements InstanceMethodsAroundInterceptor
             Tags.STATUS_CODE.set(span, Integer.toString(response.getStatus()));
         }
         ContextManager.stopSpan();
+        ContextManager.getRuntimeContext().remove(Constants.FORWARD_REQUEST_FLAG);
         return ret;
     }
 

File: oap-server/server-cluster-plugin/cluster-standalone-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/standalone/StandaloneManagerTest.java
Patch:
@@ -24,7 +24,7 @@
 
 public class StandaloneManagerTest {
     @Test
-    public void test(){
+    public void test() {
         StandaloneManager standaloneManager = new StandaloneManager();
         RemoteInstance remote1 = new RemoteInstance();
         RemoteInstance remote2 = new RemoteInstance();

File: oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ClusterModuleZookeeperProviderTestCase.java
Patch:
@@ -67,7 +67,7 @@ public void testStart() throws ServiceNotProvidedException, ModuleStartException
 
         for (int i = 0; i < 20; i++) {
             List<RemoteInstance> detailsList = clusterNodesQuery.queryRemoteNodes();
-            if(detailsList.size() == 0){
+            if (detailsList.size() == 0) {
                 Thread.sleep(500);
                 continue;
             }

File: oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java
Patch:
@@ -82,7 +82,7 @@ public CoreModuleProvider() {
 
     }
 
-    @Override public void notifyAfterCompleted() throws ModuleStartException{
+    @Override public void notifyAfterCompleted() throws ModuleStartException {
         try {
             grpcServer.start();
             jettyServer.start();

File: oap-server/server-library/library-module/src/test/java/org/apache/skywalking/oap/server/library/module/ModuleABusiness1Impl.java
Patch:
@@ -16,6 +16,7 @@
  *
  */
 
+
 package org.apache.skywalking.oap.server.library.module;
 
 /**

File: oap-server/server-library/library-module/src/test/java/org/apache/skywalking/oap/server/library/module/ModuleABusiness2Impl.java
Patch:
@@ -16,6 +16,7 @@
  *
  */
 
+
 package org.apache.skywalking.oap.server.library.module;
 
 /**

File: oap-server/server-library/library-module/src/test/java/org/apache/skywalking/oap/server/library/module/ModuleBBusiness1Impl.java
Patch:
@@ -16,6 +16,7 @@
  *
  */
 
+
 package org.apache.skywalking.oap.server.library.module;
 
 /**

File: oap-server/server-library/library-module/src/test/java/org/apache/skywalking/oap/server/library/module/ModuleBBusiness2Impl.java
Patch:
@@ -16,6 +16,7 @@
  *
  */
 
+
 package org.apache.skywalking.oap.server.library.module;
 
 /**

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java
Patch:
@@ -44,7 +44,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         Object ret) throws Throwable {
         AdvisedSupport advisedSupport = (AdvisedSupport)allArguments[0];
 
-        if (EnhancedInstance.class.isAssignableFrom(advisedSupport.getTargetClass())) {
+        Class targetClass = advisedSupport.getTargetClass();
+        if (targetClass != null && EnhancedInstance.class.isAssignableFrom(targetClass)) {
             return true;
         }
         return ret;

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java
Patch:
@@ -44,7 +44,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         Object ret) throws Throwable {
         AdvisedSupport advisedSupport = (AdvisedSupport)allArguments[0];
 
-        if (EnhancedInstance.class.isAssignableFrom(advisedSupport.getTargetClass())) {
+        Class targetClass = advisedSupport.getTargetClass();
+        if (targetClass != null && EnhancedInstance.class.isAssignableFrom(targetClass)) {
             return true;
         }
         return ret;

File: apm-collector/apm-collector-thirdparty-receiver/receiver-zipkin/receiver-zipkin-provider/src/main/java/org/apache/skywalking/apm/collector/receiver/zipkin/provider/ZipkinReceiverProvider.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.apm.collector.jetty.manager.JettyManagerModule;
 import org.apache.skywalking.apm.collector.jetty.manager.service.JettyManagerService;
 import org.apache.skywalking.apm.collector.receiver.zipkin.define.ZipkinReceiverModule;
+import org.apache.skywalking.apm.collector.receiver.zipkin.provider.handler.SpanV1JettyHandler;
 import org.apache.skywalking.apm.collector.receiver.zipkin.provider.handler.SpanV2JettyHandler;
 import org.apache.skywalking.apm.collector.receiver.zipkin.provider.transform.Zipkin2SkyWalkingTransfer;
 import org.apache.skywalking.apm.collector.server.jetty.JettyServer;
@@ -74,6 +75,7 @@ public ZipkinReceiverProvider() {
 
         JettyManagerService managerService = getManager().find(JettyManagerModule.NAME).getService(JettyManagerService.class);
         JettyServer jettyServer = managerService.createIfAbsent(config.getHost(), config.getPort(), config.getContextPath());
+        jettyServer.addHandler(new SpanV1JettyHandler(config, registerServices));
         jettyServer.addHandler(new SpanV2JettyHandler(config, registerServices));
 
         ISegmentParseService segmentParseService = getManager().find(AnalysisSegmentParserModule.NAME).getService(ISegmentParseService.class);

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/ui/IGCMetricUIDAO.java
Patch:
@@ -40,7 +40,7 @@ public interface IGCMetricUIDAO extends DAO {
      * <p>SQL as: select COUNT, TIMES, DURATION from GC_METRIC where ID in (durationPoints), rule of
      * ID generation is "${durationPoint}_${instanceId}_${gcPhrase}",
      * {@link org.apache.skywalking.apm.network.proto.GCPhrase#NEW_VALUE}
-     * <p>The average young generation GC average count formula is "COUNT / TIMES".
+     * <p>The young generation GC count
      * <p>The average young generation GC average duration formula is "DURATION / TIMES".
      * <p>Every element in return list must match DurationPoint list, which also means that,
      * the two list must be in same size, and index match.
@@ -64,8 +64,8 @@ public interface IGCMetricUIDAO extends DAO {
      * <p>SQL as: select COUNT, TIMES, DURATION from GC_METRIC where ID in (durationPoints), rule of
      * ID generation is "${durationPoint}_${instanceId}_${gcPhrase}",
      * {@link org.apache.skywalking.apm.network.proto.GCPhrase#OLD_VALUE}
-     * <p>The average young generation GC average count formula is "COUNT / TIMES".
-     * <p>The average young generation GC average duration formula is "DURATION / TIMES".
+     * <p>The old generation GC count
+     * <p>The average old generation GC average duration formula is "DURATION / TIMES".
      * <p>Every element in return list must match DurationPoint list, which also means that,
      * the two list must be in same size, and index match.
      * <p>If some element of the return list can't be found, the implementor must set 0 as

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/GCMetricEsUIDAO.java
Patch:
@@ -66,7 +66,7 @@ public void accept(DurationPoint durationPoint) {
                 long count = ((Number)itemResponse.getResponse().getSource().get(GCMetricTable.COUNT.getName())).longValue();
                 long duration = ((Number)itemResponse.getResponse().getSource().get(GCMetricTable.DURATION.getName())).longValue();
                 long times = ((Number)itemResponse.getResponse().getSource().get(GCMetricTable.TIMES.getName())).intValue();
-                gcTrends.add(new Trend((int)(count / times), (int)(duration / times)));
+                gcTrends.add(new Trend((int)count, (int)(duration / times)));
             } else {
                 gcTrends.add(new Trend(0, 0));
             }

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/GCMetricH2UIDAO.java
Patch:
@@ -65,7 +65,7 @@ private List<Trend> getGCTrend(int instanceId, Step step, List<DurationPoint> du
                     long count = rs.getLong(GCMetricTable.COUNT.getName());
                     long duration = rs.getLong(GCMetricTable.DURATION.getName());
                     long times = rs.getLong(GCMetricTable.TIMES.getName());
-                    gcTrends.add(new Trend((int)(count / times), (int)(duration / times)));
+                    gcTrends.add(new Trend((int)count, (int)(duration / times)));
                 } else {
                     gcTrends.add(new Trend(0, 0));
                 }

File: apm-collector/apm-collector-configuration/collector-configuration-provider/src/main/java/org/apache/skywalking/apm/collector/configuration/ConfigurationModuleProvider.java
Patch:
@@ -49,11 +49,11 @@ public ConfigurationModuleProvider() {
     @Override public void prepare() throws ServiceNotProvidedException {
         String namespace = StringUtils.isNotEmpty(config.getNamespace()) ? config.getNamespace() : Const.EMPTY_STRING;
         int applicationApdexThreshold = config.getApplicationApdexThreshold() == 0 ? 2000 : config.getApplicationApdexThreshold();
-        double serviceErrorRateThreshold = config.getServiceErrorRateThreshold() == 0 ? 10.00 : config.getServiceErrorRateThreshold();
+        double serviceErrorRateThreshold = config.getServiceErrorRateThreshold() == 0 ? 0.10 : config.getServiceErrorRateThreshold() / 100;
         int serviceAverageResponseTimeThreshold = config.getServiceAverageResponseTimeThreshold() == 0 ? 2000 : config.getServiceAverageResponseTimeThreshold();
-        double instanceErrorRateThreshold = config.getInstanceErrorRateThreshold() == 0 ? 10.00 : config.getInstanceErrorRateThreshold();
+        double instanceErrorRateThreshold = config.getInstanceErrorRateThreshold() == 0 ? 0.10 : config.getInstanceErrorRateThreshold() / 100;
         int instanceAverageResponseTimeThreshold = config.getInstanceAverageResponseTimeThreshold() == 0 ? 2000 : config.getInstanceAverageResponseTimeThreshold();
-        double applicationErrorRateThreshold = config.getApplicationErrorRateThreshold() == 0 ? 10.00 : config.getApplicationErrorRateThreshold();
+        double applicationErrorRateThreshold = config.getApplicationErrorRateThreshold() == 0 ? 0.10 : config.getApplicationErrorRateThreshold() / 100;
         int applicationAverageResponseTimeThreshold = config.getApplicationAverageResponseTimeThreshold() == 0 ? 2000 : config.getApplicationAverageResponseTimeThreshold();
 
         int thermodynamicResponseTimeStep = config.getThermodynamicResponseTimeStep() == 0 ? 50 : config.getThermodynamicResponseTimeStep();

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ServiceMetricEsUIDAO.java
Patch:
@@ -208,7 +208,8 @@ public List<ServiceMetric> getSlowService(int applicationId, Step step, long sta
             int serviceId = ((Number)searchHit.getSource().get(ServiceMetricTable.SERVICE_ID.getName())).intValue();
             if (!serviceIds.contains(serviceId)) {
                 ServiceMetric serviceMetric = new ServiceMetric();
-                serviceMetric.setId(serviceId);
+                serviceMetric.getService().setId(serviceId);
+                serviceMetric.getService().setApplicationId(serviceId);
                 serviceMetric.setCalls(((Number)searchHit.getSource().get(ServiceMetricTable.TRANSACTION_CALLS.getName())).longValue());
                 serviceMetric.setAvgResponseTime(((Number)searchHit.getSource().get(ServiceMetricTable.TRANSACTION_AVERAGE_DURATION.getName())).intValue());
                 serviceMetrics.add(serviceMetric);

File: apm-collector/apm-collector-storage/collector-storage-shardingjdbc-provider/src/main/java/org/apache/skywalking/apm/collector/storage/shardingjdbc/dao/ui/ServiceMetricShardingjdbcUIDAO.java
Patch:
@@ -208,7 +208,8 @@ public List<Integer> getServiceResponseTimeTrend(int serviceId, Step step, List<
                 int serviceId = rs.getInt(ServiceMetricTable.SERVICE_ID.getName());
                 if (!serviceIds.contains(serviceId)) {
                     ServiceMetric serviceMetric = new ServiceMetric();
-                    serviceMetric.setId(serviceId);
+                    serviceMetric.getService().setId(serviceId);
+                    serviceMetric.getService().setApplicationId(applicationId);
                     serviceMetric.setCalls(rs.getLong(ServiceMetricTable.TRANSACTION_CALLS.getName()));
                     serviceMetric.setAvgResponseTime(rs.getInt(ServiceMetricTable.TRANSACTION_AVERAGE_DURATION.getName()));
                     serviceMetrics.add(serviceMetric);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/SegmentDurationEsPersistenceDAO.java
Patch:
@@ -56,7 +56,7 @@ public IndexRequestBuilder prepareBatchInsert(SegmentDuration data) throws IOExc
         XContentBuilder target = XContentFactory.jsonBuilder().startObject()
             .field(SegmentDurationTable.SEGMENT_ID.getName(), data.getSegmentId())
             .field(SegmentDurationTable.APPLICATION_ID.getName(), data.getApplicationId())
-            .array(SegmentDurationTable.SERVICE_NAME.getName(), data.getServiceName())
+            .field(SegmentDurationTable.SERVICE_NAME.getName(), data.getServiceName())
             .field(SegmentDurationTable.DURATION.getName(), data.getDuration())
             .field(SegmentDurationTable.START_TIME.getName(), data.getStartTime())
             .field(SegmentDurationTable.END_TIME.getName(), data.getEndTime())

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ApplicationComponentEsUIDAO.java
Patch:
@@ -52,7 +52,7 @@ public ApplicationComponentEsUIDAO(ElasticSearchClient client) {
         SearchRequestBuilder searchRequestBuilder = getClient().prepareSearch(tableName);
         searchRequestBuilder.setTypes(ApplicationComponentTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
-        searchRequestBuilder.setPostFilter(QueryBuilders.rangeQuery(ApplicationComponentTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
+        searchRequestBuilder.setQuery(QueryBuilders.rangeQuery(ApplicationComponentTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
         searchRequestBuilder.setSize(0);
 
         searchRequestBuilder.addAggregation(AggregationBuilders.terms(ApplicationComponentTable.COMPONENT_ID.getName()).field(ApplicationComponentTable.COMPONENT_ID.getName()).size(100)

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ApplicationMappingEsUIDAO.java
Patch:
@@ -52,7 +52,7 @@ public ApplicationMappingEsUIDAO(ElasticSearchClient client) {
         SearchRequestBuilder searchRequestBuilder = getClient().prepareSearch(tableName);
         searchRequestBuilder.setTypes(ApplicationMappingTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
-        searchRequestBuilder.setPostFilter(QueryBuilders.rangeQuery(ApplicationMappingTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
+        searchRequestBuilder.setQuery(QueryBuilders.rangeQuery(ApplicationMappingTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
         searchRequestBuilder.setSize(0);
 
         searchRequestBuilder.addAggregation(

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ApplicationMetricEsUIDAO.java
Patch:
@@ -101,10 +101,10 @@ public List<ApplicationMetric> getApplications(Step step, long startTimeBucket,
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
 
         BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();
-        boolQuery.must().add(QueryBuilders.rangeQuery(ApplicationMetricTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
-        boolQuery.must().add(QueryBuilders.termQuery(ApplicationMetricTable.SOURCE_VALUE.getName(), metricSource.getValue()));
+        boolQuery.filter().add(QueryBuilders.rangeQuery(ApplicationMetricTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
+        boolQuery.filter().add(QueryBuilders.termQuery(ApplicationMetricTable.SOURCE_VALUE.getName(), metricSource.getValue()));
 
-        searchRequestBuilder.setPostFilter(boolQuery);
+        searchRequestBuilder.setQuery(boolQuery);
         searchRequestBuilder.setSize(0);
 
         TermsAggregationBuilder aggregationBuilder = AggregationBuilders.terms(ApplicationMetricTable.APPLICATION_ID.getName()).field(ApplicationMetricTable.APPLICATION_ID.getName()).size(100);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ApplicationReferenceMetricEsUIDAO.java
Patch:
@@ -56,8 +56,8 @@ public ApplicationReferenceMetricEsUIDAO(ElasticSearchClient client) {
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
 
         BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();
-        boolQuery.must().add(QueryBuilders.rangeQuery(ApplicationReferenceMetricTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
-        boolQuery.must().add(QueryBuilders.termQuery(ApplicationReferenceMetricTable.SOURCE_VALUE.getName(), metricSource.getValue()));
+        boolQuery.filter().add(QueryBuilders.rangeQuery(ApplicationReferenceMetricTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
+        boolQuery.filter().add(QueryBuilders.termQuery(ApplicationReferenceMetricTable.SOURCE_VALUE.getName(), metricSource.getValue()));
 
         if (CollectionUtils.isNotEmpty(applicationIds)) {
             BoolQueryBuilder applicationBoolQuery = QueryBuilders.boolQuery();
@@ -71,7 +71,7 @@ public ApplicationReferenceMetricEsUIDAO(ElasticSearchClient client) {
             boolQuery.must().add(applicationBoolQuery);
         }
 
-        searchRequestBuilder.setPostFilter(boolQuery);
+        searchRequestBuilder.setQuery(boolQuery);
         searchRequestBuilder.setSize(0);
 
         return buildMetrics(searchRequestBuilder);

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/ApplicationRegisterServiceHandler.java
Patch:
@@ -45,7 +45,9 @@ public ApplicationRegisterServiceHandler(ModuleManager moduleManager) {
 
     @Override
     public void applicationCodeRegister(Application request, StreamObserver<ApplicationMapping> responseObserver) {
-        logger.debug("register application");
+        if (logger.isDebugEnabled()) {
+            logger.debug("register application");
+        }
 
         ApplicationMapping.Builder builder = ApplicationMapping.newBuilder();
         String applicationCode = request.getApplicationCode();

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/service/InstanceHeartBeatService.java
Patch:
@@ -51,7 +51,9 @@ private Graph<Instance> getHeartBeatGraph() {
         instance.setHeartBeatTime(TimeBucketUtils.INSTANCE.getSecondTimeBucket(heartBeatTime));
         instance.setInstanceId(instanceId);
 
-        logger.debug("push to instance heart beat persistence worker, id: {}", instance.getId());
+        if (logger.isDebugEnabled()) {
+            logger.debug("push to instance heart beat persistence worker, id: {}", instance.getId());
+        }
         getHeartBeatGraph().start(instance);
     }
 }

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/application/component/ApplicationComponentSpanListener.java
Patch:
@@ -36,7 +36,7 @@
 public class ApplicationComponentSpanListener implements EntrySpanListener, ExitSpanListener {
 
     private final ApplicationCacheService applicationCacheService;
-    private List<ApplicationComponent> applicationComponents = new LinkedList<>();
+    private final List<ApplicationComponent> applicationComponents = new LinkedList<>();
 
     private ApplicationComponentSpanListener(ModuleManager moduleManager) {
         this.applicationCacheService = moduleManager.find(CacheModule.NAME).getService(ApplicationCacheService.class);

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/service/heartbeat/ServiceNameAggregationWorker.java
Patch:
@@ -49,7 +49,7 @@ public Factory(ModuleManager moduleManager) {
         }
 
         @Override public int queueSize() {
-            return 256;
+            return 4096;
         }
     }
 

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/service/heartbeat/ServiceNameHeartBeatPersistenceWorker.java
Patch:
@@ -61,7 +61,7 @@ public Factory(ModuleManager moduleManager) {
 
         @Override
         public int queueSize() {
-            return 1024;
+            return 4096;
         }
     }
 

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/service/heartbeat/ServiceNameSpanListener.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class ServiceNameSpanListener implements EntrySpanListener, ExitSpanListener, LocalSpanListener {
 
-    private List<ServiceName> serviceNames;
+    private final List<ServiceName> serviceNames;
 
     private ServiceNameSpanListener() {
         this.serviceNames = new LinkedList<>();

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/SegmentPersistenceWorker.java
Patch:
@@ -59,7 +59,7 @@ public static class Factory extends NonMergePersistenceWorkerProvider<Segment, S
 
         @Override
         public int queueSize() {
-            return 1024;
+            return 2048;
         }
     }
 }

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/test/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/service/SegmentBase64Printer.java
Patch:
@@ -35,7 +35,7 @@ public class SegmentBase64Printer {
     private static final Logger LOGGER = LoggerFactory.getLogger(SegmentBase64Printer.class);
 
     public static void main(String[] args) throws InvalidProtocolBufferException {
-        String segmentBase64 = "CgwKCgMXjPKUga3WgBsSvAEIARiF7Jq1nywgp+yatZ8sKlASDAoKAnPAqKD5rNaAGxgBIAIqDjEyNy4wLjAuMTo5MDkyOAJCFC9zZW5kTWVzc2FnZS97Y291bnR9UhQvc2VuZE1lc3NhZ2Uve2NvdW50fTocS2Fma2EvVHJhY2UtdG9waWMtMS9Db25zdW1lclgEYBt6GwoJbXEuYnJva2VyEg4xMjcuMC4wLjE6OTA5MnoZCghtcS50b3BpYxINVHJhY2UtdG9waWMtMRImEP///////////wEY/+uatZ8sILTsmrWfLDD///////////8BUAIYAiAD";
+        String segmentBase64 = "CgoKCJbf2NPCLBAQEiAQ////////////ARiV39jTwiwg2+7Y08IsMNQPWANgARIlCAEYn9/Y08IsILns2NPCLDCUyAJA////////////AVABWAJgAxInCAIQARif39jTwiwguezY08IsMJTIAkD///////////8BUAFYAmADEicIAxACGJ/f2NPCLCC57NjTwiwwlMgCQP///////////wFQAVgCYAMSJwgEEAMYn9/Y08IsILns2NPCLDCUyAJA////////////AVABWAJgAxInCAUQBBif39jTwiwguezY08IsMJTIAkD///////////8BUAFYAmADEicIBhAFGJ/f2NPCLCC57NjTwiwwlMgCQP///////////wFQAVgCYAMSJwgHEAYYn9/Y08IsILns2NPCLDCUyAJA////////////AVABWAJgAxInCAgQBxif39jTwiwguezY08IsMJTIAkD///////////8BUAFYAmADEicICRAIGJ/f2NPCLCC57NjTwiwwlMgCQP///////////wFQAVgCYAMSJwgKEAkYn9/Y08IsILns2NPCLDCUyAJA////////////AVABWAJgAxInCAsQChif39jTwiwguezY08IsMJTIAkD///////////8BUAFYAmADEicIDBALGJ/f2NPCLCC57NjTwiwwlMgCQP///////////wFQAVgCYAMSJwgNEAwYn9/Y08IsILns2NPCLDCUyAJA////////////AVABWAJgAxInCA4QDRif39jTwiwguezY08IsMJTIAkD///////////8BUAFYAmADEvMCCA8QDhif39jTwiwguezY08IsMJTIAkD///////////8BUAFYAmADggHIAhKhAQoNZXJyb3IgbWVzc2FnZRKPAVtJTkZPXSBCdWlsZGluZyBqYXI6IC9Vc2Vycy9wZW5neXM1L2NvZGUvc2t5LXdhbGtpbmcvY29sbGVjdG9yLXBlcmZvcm1hbmNlLXRlc3QvdGFyZ2V0L2NvbGxlY3Rvci1wZXJmb3JtYW5jZS10ZXN0LTEuMC1qYXItd2l0aC1kZXBlbmRlbmNpZXMuamFyEqEBCg1lcnJvciBtZXNzYWdlEo8BW0lORk9dIEJ1aWxkaW5nIGphcjogL1VzZXJzL3Blbmd5czUvY29kZS9za3ktd2Fsa2luZy9jb2xsZWN0b3ItcGVyZm9ybWFuY2UtdGVzdC90YXJnZXQvY29sbGVjdG9yLXBlcmZvcm1hbmNlLXRlc3QtMS4wLWphci13aXRoLWRlcGVuZGVuY2llcy5qYXIS8wIIEBAPGJ/f2NPCLCC57NjTwiwwlMgCQP///////////wFQAVgCYAOCAcgCEqEBCg1lcnJvciBtZXNzYWdlEo8BW0lORk9dIEJ1aWxkaW5nIGphcjogL1VzZXJzL3Blbmd5czUvY29kZS9za3ktd2Fsa2luZy9jb2xsZWN0b3ItcGVyZm9ybWFuY2UtdGVzdC90YXJnZXQvY29sbGVjdG9yLXBlcmZvcm1hbmNlLXRlc3QtMS4wLWphci13aXRoLWRlcGVuZGVuY2llcy5qYXISoQEKDWVycm9yIG1lc3NhZ2USjwFbSU5GT10gQnVpbGRpbmcgamFyOiAvVXNlcnMvcGVuZ3lzNS9jb2RlL3NreS13YWxraW5nL2NvbGxlY3Rvci1wZXJmb3JtYW5jZS10ZXN0L3RhcmdldC9jb2xsZWN0b3ItcGVyZm9ybWFuY2UtdGVzdC0xLjAtamFyLXdpdGgtZGVwZW5kZW5jaWVzLmphchLzAggREBAYn9/Y08IsILns2NPCLDCUyAJA////////////AVABWAJgA4IByAISoQEKDWVycm9yIG1lc3NhZ2USjwFbSU5GT10gQnVpbGRpbmcgamFyOiAvVXNlcnMvcGVuZ3lzNS9jb2RlL3NreS13YWxraW5nL2NvbGxlY3Rvci1wZXJmb3JtYW5jZS10ZXN0L3RhcmdldC9jb2xsZWN0b3ItcGVyZm9ybWFuY2UtdGVzdC0xLjAtamFyLXdpdGgtZGVwZW5kZW5jaWVzLmphchKhAQoNZXJyb3IgbWVzc2FnZRKPAVtJTkZPXSBCdWlsZGluZyBqYXI6IC9Vc2Vycy9wZW5neXM1L2NvZGUvc2t5LXdhbGtpbmcvY29sbGVjdG9yLXBlcmZvcm1hbmNlLXRlc3QvdGFyZ2V0L2NvbGxlY3Rvci1wZXJmb3JtYW5jZS10ZXN0LTEuMC1qYXItd2l0aC1kZXBlbmRlbmNpZXMuamFyEvMCCBIQERif39jTwiwguezY08IsMJTIAkD///////////8BUAFYAmADggHIAhKhAQoNZXJyb3IgbWVzc2FnZRKPAVtJTkZPXSBCdWlsZGluZyBqYXI6IC9Vc2Vycy9wZW5neXM1L2NvZGUvc2t5LXdhbGtpbmcvY29sbGVjdG9yLXBlcmZvcm1hbmNlLXRlc3QvdGFyZ2V0L2NvbGxlY3Rvci1wZXJmb3JtYW5jZS10ZXN0LTEuMC1qYXItd2l0aC1kZXBlbmRlbmNpZXMuamFyEqEBCg1lcnJvciBtZXNzYWdlEo8BW0lORk9dIEJ1aWxkaW5nIGphcjogL1VzZXJzL3Blbmd5czUvY29kZS9za3ktd2Fsa2luZy9jb2xsZWN0b3ItcGVyZm9ybWFuY2UtdGVzdC90YXJnZXQvY29sbGVjdG9yLXBlcmZvcm1hbmNlLXRlc3QtMS4wLWphci13aXRoLWRlcGVuZGVuY2llcy5qYXIS8wIIExASGJ/f2NPCLCC57NjTwiwwlMgCQP///////////wFQAVgCYAOCAcgCEqEBCg1lcnJvciBtZXNzYWdlEo8BW0lORk9dIEJ1aWxkaW5nIGphcjogL1VzZXJzL3Blbmd5czUvY29kZS9za3ktd2Fsa2luZy9jb2xsZWN0b3ItcGVyZm9ybWFuY2UtdGVzdC90YXJnZXQvY29sbGVjdG9yLXBlcmZvcm1hbmNlLXRlc3QtMS4wLWphci13aXRoLWRlcGVuZGVuY2llcy5qYXISoQEKDWVycm9yIG1lc3NhZ2USjwFbSU5GT10gQnVpbGRpbmcgamFyOiAvVXNlcnMvcGVuZ3lzNS9jb2RlL3NreS13YWxraW5nL2NvbGxlY3Rvci1wZXJmb3JtYW5jZS10ZXN0L3RhcmdldC9jb2xsZWN0b3ItcGVyZm9ybWFuY2UtdGVzdC0xLjAtamFyLXdpdGgtZGVwZW5kZW5jaWVzLmphchLzAggUEBMYn9/Y08IsILns2NPCLDCUyAJA////////////AVABWAJgA4IByAISoQEKDWVycm9yIG1lc3NhZ2USjwFbSU5GT10gQnVpbGRpbmcgamFyOiAvVXNlcnMvcGVuZ3lzNS9jb2RlL3NreS13YWxraW5nL2NvbGxlY3Rvci1wZXJmb3JtYW5jZS10ZXN0L3RhcmdldC9jb2xsZWN0b3ItcGVyZm9ybWFuY2UtdGVzdC0xLjAtamFyLXdpdGgtZGVwZW5kZW5jaWVzLmphchKhAQoNZXJyb3IgbWVzc2FnZRKPAVtJTkZPXSBCdWlsZGluZyBqYXI6IC9Vc2Vycy9wZW5neXM1L2NvZGUvc2t5LXdhbGtpbmcvY29sbGVjdG9yLXBlcmZvcm1hbmNlLXRlc3QvdGFyZ2V0L2NvbGxlY3Rvci1wZXJmb3JtYW5jZS10ZXN0LTEuMC1qYXItd2l0aC1kZXBlbmRlbmNpZXMuamFyGP7//////////wEgCA==";
         byte[] binarySegment = Base64.getDecoder().decode(segmentBase64);
         TraceSegmentObject segmentObject = TraceSegmentObject.parseFrom(binarySegment);
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractLocalAsyncWorkerProvider.java
Patch:
@@ -39,7 +39,7 @@ public final WorkerRef<INPUT, OUTPUT> create(WorkerCreateListener workerCreateLi
         workerCreateListener.addWorker(localAsyncWorker);
 
         LocalAsyncWorkerRef<INPUT, OUTPUT> localAsyncWorkerRef = new LocalAsyncWorkerRef<>(localAsyncWorker);
-        DataCarrier<INPUT> dataCarrier = new DataCarrier<>(1, queueSize());
+        DataCarrier<INPUT> dataCarrier = new DataCarrier<>(1, 10000);
         localAsyncWorkerRef.setQueueEventHandler(dataCarrier);
         dataCarrier.consume(localAsyncWorkerRef, 1);
         return localAsyncWorkerRef;

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractWorker.java
Patch:
@@ -29,7 +29,7 @@
  */
 public abstract class AbstractWorker<INPUT, OUTPUT> implements NodeProcessor<INPUT, OUTPUT> {
 
-    private final Logger logger = LoggerFactory.getLogger(AbstractWorker.class);
+    private static final Logger logger = LoggerFactory.getLogger(AbstractWorker.class);
 
     private final ModuleManager moduleManager;
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/RemoteWorkerRef.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class RemoteWorkerRef<INPUT extends RemoteData, OUTPUT extends RemoteData> extends WorkerRef<INPUT, OUTPUT> {
 
-    private final Logger logger = LoggerFactory.getLogger(RemoteWorkerRef.class);
+    private static final Logger logger = LoggerFactory.getLogger(RemoteWorkerRef.class);
 
     private final AbstractRemoteWorker<INPUT, OUTPUT> remoteWorker;
     private final RemoteSenderService remoteSenderService;

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/impl/NonMergePersistenceWorker.java
Patch:
@@ -30,7 +30,7 @@
  */
 public abstract class NonMergePersistenceWorker<INPUT_AND_OUTPUT extends StreamData> extends PersistenceWorker<INPUT_AND_OUTPUT, NonMergeDataCollection<INPUT_AND_OUTPUT>> {
 
-    private final Logger logger = LoggerFactory.getLogger(NonMergePersistenceWorker.class);
+    private static final Logger logger = LoggerFactory.getLogger(NonMergePersistenceWorker.class);
 
     private final NonMergeDataCache<INPUT_AND_OUTPUT> mergeDataCache;
 
@@ -50,7 +50,7 @@ public NonMergePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override protected List<Object> prepareBatch(NonMergeDataCollection<INPUT_AND_OUTPUT> collection) {
-        List<Object> insertBatchCollection = new LinkedList<>();
+        List<Object> insertBatchCollection = new ArrayList<>(collection.collection().size());
         collection.collection().forEach(data -> {
             try {
                 insertBatchCollection.add(persistenceDAO().prepareBatchInsert(data));

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/impl/PersistenceWorker.java
Patch:
@@ -36,7 +36,7 @@
  */
 public abstract class PersistenceWorker<INPUT_AND_OUTPUT extends StreamData, COLLECTION extends Collection> extends AbstractLocalAsyncWorker<INPUT_AND_OUTPUT, INPUT_AND_OUTPUT> {
 
-    private final Logger logger = LoggerFactory.getLogger(PersistenceWorker.class);
+    private static final Logger logger = LoggerFactory.getLogger(PersistenceWorker.class);
 
     private final IBatchDAO batchDAO;
     private final int blockBatchPersistenceSize;

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/service/ServiceIdCacheGuavaService.java
Patch:
@@ -37,7 +37,7 @@ public class ServiceIdCacheGuavaService implements ServiceIdCacheService {
 
     private final Logger logger = LoggerFactory.getLogger(ServiceIdCacheGuavaService.class);
 
-    private final Cache<String, Integer> serviceIdCache = CacheBuilder.newBuilder().maximumSize(10000).build();
+    private final Cache<String, Integer> serviceIdCache = CacheBuilder.newBuilder().maximumSize(1000000).build();
 
     private final ModuleManager moduleManager;
     private IServiceNameCacheDAO serviceNameCacheDAO;

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/cache/Window.java
Patch:
@@ -67,7 +67,7 @@ protected WINDOW_COLLECTION getCurrentAndWriting() {
         }
     }
 
-    protected WINDOW_COLLECTION getCurrent() {
+    private WINDOW_COLLECTION getCurrent() {
         return pointer;
     }
 

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/data/operator/NonMergeOperation.java
Patch:
@@ -24,6 +24,7 @@
  * @author peng-yongsheng
  */
 public class NonMergeOperation implements MergeOperation {
+
     @Override public String operate(String newValue, String oldValue) {
         return oldValue;
     }

File: apm-collector/apm-collector-remote/collector-remote-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/remote/grpc/service/selector/ForeverFirstSelector.java
Patch:
@@ -32,7 +32,9 @@ public class ForeverFirstSelector implements RemoteClientSelector {
     private static final Logger logger = LoggerFactory.getLogger(ForeverFirstSelector.class);
 
     @Override public RemoteClient select(List<RemoteClient> clients, RemoteData remoteData) {
-        logger.debug("clients size: {}", clients.size());
+        if (logger.isDebugEnabled()) {
+            logger.debug("clients size: {}", clients.size());
+        }
         return clients.get(0);
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/base/dao/IPersistenceDAO.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.apm.collector.storage.base.dao;
 
+import java.io.IOException;
 import org.apache.skywalking.apm.collector.core.data.StreamData;
 
 /**
@@ -27,9 +28,9 @@ public interface IPersistenceDAO<INSERT, UPDATE, STREAM_DATA extends StreamData>
 
     STREAM_DATA get(String id);
 
-    INSERT prepareBatchInsert(STREAM_DATA data);
+    INSERT prepareBatchInsert(STREAM_DATA data) throws IOException;
 
-    UPDATE prepareBatchUpdate(STREAM_DATA data);
+    UPDATE prepareBatchUpdate(STREAM_DATA data) throws IOException;
 
     void deleteHistory(Long timeBucketBefore);
 }

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/StorageModuleEsProvider.java
Patch:
@@ -48,7 +48,7 @@
 import org.apache.skywalking.apm.collector.storage.dao.smp.*;
 import org.apache.skywalking.apm.collector.storage.dao.srmp.*;
 import org.apache.skywalking.apm.collector.storage.dao.ui.*;
-import org.apache.skywalking.apm.collector.storage.es.base.dao.BatchEsDAO;
+import org.apache.skywalking.apm.collector.storage.es.base.dao.BatchProcessEsDAO;
 import org.apache.skywalking.apm.collector.storage.es.base.define.ElasticSearchStorageInstaller;
 import org.apache.skywalking.apm.collector.storage.es.dao.*;
 import org.apache.skywalking.apm.collector.storage.es.dao.acp.*;
@@ -105,7 +105,7 @@ public StorageModuleEsProvider() {
         elasticSearchClient = new ElasticSearchClient(config.getClusterName(), config.getClusterTransportSniffer(), config.getClusterNodes(), nameSpace);
 
         this.registerServiceImplementation(ITTLConfigService.class, new TTLConfigService(config));
-        this.registerServiceImplementation(IBatchDAO.class, new BatchEsDAO(elasticSearchClient));
+        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));
 
         registerCacheDAO();
         registerRegisterDAO();

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ApplicationComponentEsUIDAO.java
Patch:
@@ -52,7 +52,7 @@ public ApplicationComponentEsUIDAO(ElasticSearchClient client) {
         SearchRequestBuilder searchRequestBuilder = getClient().prepareSearch(tableName);
         searchRequestBuilder.setTypes(ApplicationComponentTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
-        searchRequestBuilder.setQuery(QueryBuilders.rangeQuery(ApplicationComponentTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
+        searchRequestBuilder.setPostFilter(QueryBuilders.rangeQuery(ApplicationComponentTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
         searchRequestBuilder.setSize(0);
 
         searchRequestBuilder.addAggregation(AggregationBuilders.terms(ApplicationComponentTable.COMPONENT_ID.getName()).field(ApplicationComponentTable.COMPONENT_ID.getName()).size(100)

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ApplicationMappingEsUIDAO.java
Patch:
@@ -52,7 +52,7 @@ public ApplicationMappingEsUIDAO(ElasticSearchClient client) {
         SearchRequestBuilder searchRequestBuilder = getClient().prepareSearch(tableName);
         searchRequestBuilder.setTypes(ApplicationMappingTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
-        searchRequestBuilder.setQuery(QueryBuilders.rangeQuery(ApplicationMappingTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
+        searchRequestBuilder.setPostFilter(QueryBuilders.rangeQuery(ApplicationMappingTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
         searchRequestBuilder.setSize(0);
 
         searchRequestBuilder.addAggregation(

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ApplicationMetricEsUIDAO.java
Patch:
@@ -104,7 +104,7 @@ public List<ApplicationMetric> getApplications(Step step, long startTimeBucket,
         boolQuery.must().add(QueryBuilders.rangeQuery(ApplicationMetricTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
         boolQuery.must().add(QueryBuilders.termQuery(ApplicationMetricTable.SOURCE_VALUE.getName(), metricSource.getValue()));
 
-        searchRequestBuilder.setQuery(boolQuery);
+        searchRequestBuilder.setPostFilter(boolQuery);
         searchRequestBuilder.setSize(0);
 
         TermsAggregationBuilder aggregationBuilder = AggregationBuilders.terms(ApplicationMetricTable.APPLICATION_ID.getName()).field(ApplicationMetricTable.APPLICATION_ID.getName()).size(100);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ApplicationReferenceMetricEsUIDAO.java
Patch:
@@ -71,7 +71,7 @@ public ApplicationReferenceMetricEsUIDAO(ElasticSearchClient client) {
             boolQuery.must().add(applicationBoolQuery);
         }
 
-        searchRequestBuilder.setQuery(boolQuery);
+        searchRequestBuilder.setPostFilter(boolQuery);
         searchRequestBuilder.setSize(0);
 
         return buildMetrics(searchRequestBuilder);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/InstanceEsUIDAO.java
Patch:
@@ -176,7 +176,7 @@ public List<AppServerInfo> getAllServer(int applicationId, long startSecondTimeB
         timeBoolQuery.should().add(boolQuery2);
 
         boolQuery.must().add(timeBoolQuery);
-        searchRequestBuilder.setQuery(boolQuery);
+        searchRequestBuilder.setPostFilter(boolQuery);
 
         SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();
         SearchHit[] searchHits = searchResponse.getHits().getHits();
@@ -190,7 +190,7 @@ public List<AppServerInfo> getAllServer(int applicationId, long startSecondTimeB
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
         searchRequestBuilder.setSize(1);
 
-        searchRequestBuilder.setQuery(QueryBuilders.termQuery(InstanceTable.APPLICATION_ID.getName(), applicationId));
+        searchRequestBuilder.setPostFilter(QueryBuilders.termQuery(InstanceTable.APPLICATION_ID.getName(), applicationId));
         searchRequestBuilder.addSort(SortBuilders.fieldSort(InstanceTable.REGISTER_TIME.getName()).order(SortOrder.ASC));
 
         SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();
@@ -210,7 +210,7 @@ public List<AppServerInfo> getAllServer(int applicationId, long startSecondTimeB
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
         searchRequestBuilder.setSize(1);
 
-        searchRequestBuilder.setQuery(QueryBuilders.termQuery(InstanceTable.APPLICATION_ID.getName(), applicationId));
+        searchRequestBuilder.setPostFilter(QueryBuilders.termQuery(InstanceTable.APPLICATION_ID.getName(), applicationId));
         searchRequestBuilder.addSort(SortBuilders.fieldSort(InstanceTable.HEARTBEAT_TIME.getName()).order(SortOrder.DESC));
 
         SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ApplicationTopologyService.java
Patch:
@@ -75,7 +75,7 @@ public Topology getApplicationTopology(Step step, int applicationId, long startT
 
         TopologyBuilder builder = new TopologyBuilder(moduleManager);
 
-        Topology topology = builder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, step, startTimeBucket, endTimeBucket, startSecondTimeBucket, endSecondTimeBucket);
+        Topology topology = builder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, startSecondTimeBucket, endSecondTimeBucket);
 
         Set<Integer> nodeIds = new HashSet<>();
         topology.getCalls().forEach(call -> {

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ClusterTopologyService.java
Patch:
@@ -67,6 +67,6 @@ public Topology getClusterTopology(Step step, long startTimeBucket, long endTime
 
         TopologyBuilder builder = new TopologyBuilder(moduleManager);
 
-        return builder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, step, startTimeBucket, endTimeBucket, startSecondTimeBucket, endSecondTimeBucket);
+        return builder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, startSecondTimeBucket, endSecondTimeBucket);
     }
 }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/test/java/org/apache/skywalking/apm/collector/ui/service/TopologyBuilderTest.java
Patch:
@@ -59,7 +59,6 @@ public void setUp() throws Exception {
         alarmService = mock(AlarmService.class);
         dateBetweenService = mock(DateBetweenService.class);
         Whitebox.setInternalState(topologyBuilder, "applicationCacheService", applicationCacheService);
-        Whitebox.setInternalState(topologyBuilder, "alarmService", alarmService);
         Whitebox.setInternalState(topologyBuilder, "dateBetweenService", dateBetweenService);
         duration = new Duration();
         duration.setEnd("2018-02");
@@ -129,7 +128,7 @@ public void build() throws ParseException {
             return alarm;
         });
         when(dateBetweenService.minutesBetween(anyInt(), anyLong(), anyLong())).then(invocation -> 20L);
-        Topology topology = topologyBuilder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, duration.getStep(), startTimeBucket, endTimeBucket, startSecondTimeBucket, endSecondTimeBucket);
+        Topology topology = topologyBuilder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, startSecondTimeBucket, endSecondTimeBucket);
         Assert.assertNotNull(topology);
     }
 

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/SegmentDurationH2UIDAO.java
Patch:
@@ -128,7 +128,7 @@ public TraceBrief loadTop(long startSecondTimeBucket, long endSecondTimeBucket,
                 basicTrace.setSegmentId(rs.getString(SegmentDurationTable.SEGMENT_ID.getName()));
                 basicTrace.setDuration(rs.getInt(SegmentDurationTable.DURATION.getName()));
                 basicTrace.setStart(rs.getLong(SegmentDurationTable.START_TIME.getName()));
-                basicTrace.setOperationName(rs.getString(SegmentDurationTable.SERVICE_NAME.getName()));
+//                basicTrace.setOperationName(rs.getString(SegmentDurationTable.SERVICE_NAME.getName()));
                 basicTrace.setError(BooleanUtils.valueToBoolean(rs.getInt(SegmentDurationTable.IS_ERROR.getName())));
                 traceBrief.getTraces().add(basicTrace);
                 cnt++;

File: apm-collector/apm-collector-storage/collector-storage-shardingjdbc-provider/src/main/java/org/apache/skywalking/apm/collector/storage/shardingjdbc/dao/ui/SegmentDurationShardingjdbcUIDAO.java
Patch:
@@ -141,7 +141,8 @@ public TraceBrief loadTop(long startSecondTimeBucket, long endSecondTimeBucket,
                 basicTrace.setSegmentId(rs.getString(SegmentDurationTable.SEGMENT_ID.getName()));
                 basicTrace.setDuration(rs.getInt(SegmentDurationTable.DURATION.getName()));
                 basicTrace.setStart(rs.getLong(SegmentDurationTable.START_TIME.getName()));
-                basicTrace.setOperationName(rs.getString(SegmentDurationTable.SERVICE_NAME.getName()));
+                //TODO linjiaqi operation name was changed to contains multiple values
+                //basicTrace.setOperationName(rs.getString(SegmentDurationTable.SERVICE_NAME.getName()));
                 basicTrace.setError(BooleanUtils.valueToBoolean(rs.getInt(SegmentDurationTable.IS_ERROR.getName())));
                 traceBrief.getTraces().add(basicTrace);
                 cnt++;

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/test/java/org/apache/skywalking/apm/collector/ui/service/SegmentTopServiceTest.java
Patch:
@@ -83,7 +83,7 @@ private TraceBrief getTrace() {
         BasicTrace basicTrace = new BasicTrace();
         basicTrace.setDuration(12);
         basicTrace.setError(false);
-        basicTrace.setOperationName("test");
+        basicTrace.getOperationName().add("test");
         basicTrace.setSegmentId("segmentId");
         basicTrace.setStart(System.currentTimeMillis());
         basicTrace.setTraceIds(Collections.singletonList("traceId"));

File: apm-webapp/src/main/java/org/apache/skywalking/apm/webapp/proxy/CollectorServerList.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.webapp.tools;
+package org.apache.skywalking.apm.webapp.proxy;
 
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;

File: apm-webapp/src/main/java/org/apache/skywalking/apm/webapp/proxy/HttpClientTools.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.webapp.tools;
+package org.apache.skywalking.apm.webapp.proxy;
 
 import org.apache.http.HttpEntity;
 import org.apache.http.NameValuePair;

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/PathMappingCache.java
Patch:
@@ -53,6 +53,6 @@ public void addPathMapping(Method method, String methodPath) {
                 && !classPath.endsWith(PATH_SEPARATOR)) {
             methodPath = PATH_SEPARATOR + methodPath;
         }
-        methodPathMapping.put(method, classPath + methodPath);
+        methodPathMapping.put(method, (classPath + methodPath).replace("//","/"));
     }
 }

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v9/server/HandleInterceptor.java
Patch:
@@ -38,7 +38,7 @@ public class HandleInterceptor implements InstanceMethodsAroundInterceptor {
     @Override
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         MethodInterceptResult result) throws Throwable {
-        HttpChannel httpChannel = (HttpChannel)allArguments[0];
+        HttpChannel httpChannel = (HttpChannel)objInst;
         HttpServletRequest servletRequest = httpChannel.getRequest();
 
         ContextCarrier contextCarrier = new ContextCarrier();
@@ -59,7 +59,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
-        HttpChannel httpChannel = (HttpChannel)allArguments[0];
+        HttpChannel httpChannel = (HttpChannel)objInst;
         HttpServletResponse servletResponse = httpChannel.getResponse();
         AbstractSpan span = ContextManager.activeSpan();
         if (servletResponse.getStatus() >= 400) {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/Constants.java
Patch:
@@ -39,4 +39,6 @@ public class Constants {
     public static final String RESPONSE_KEY_IN_RUNTIME_CONTEXT = "SW_RESPONSE";
 
     public static final String ISOLATE_STRATEGY_KEY_IN_RUNNING_CONTEXT = "ISOLATE_STRATEGY";
+
+    public static final String FORWARD_REQUEST_FLAG = "SW_FORWARD_REQUEST_FLAG";
 }

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/define/TomcatInstrumentation.java
Patch:
@@ -37,7 +37,7 @@ public class TomcatInstrumentation extends ClassInstanceMethodsEnhancePluginDefi
     /**
      * Enhance class.
      */
-    private static final String ENHANCE_CLASS = "org.apache.catalina.core.StandardWrapperValve";
+    private static final String ENHANCE_CLASS = "org.apache.catalina.core.StandardHostValve";
 
     /**
      * The intercept class for "invoke" method in the class "org.apache.catalina.core.StandardWrapperValve"
@@ -80,7 +80,7 @@ public boolean isOverrideArgs() {
             },
             new InstanceMethodsInterceptPoint() {
                 @Override public ElementMatcher<MethodDescription> getMethodsMatcher() {
-                    return named("exception");
+                    return named("throwable");
                 }
 
                 @Override public String getMethodsInterceptor() {

File: apm-collector/apm-collector-analysis/analysis-metric/metric-define/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/define/graph/MetricGraphIdDefine.java
Patch:
@@ -38,4 +38,5 @@ public class MetricGraphIdDefine {
     public static final int INSTANCE_MAPPING_GRAPH_ID = 411;
 
     public static final int INSTANCE_HEART_BEAT_PERSISTENCE_GRAPH_ID = 412;
+    public static final int SERVICE_HEART_BEAT_PERSISTENCE_GRAPH_ID = 413;
 }

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractLocalAsyncWorkerProvider.java
Patch:
@@ -39,7 +39,7 @@ public final WorkerRef<INPUT, OUTPUT> create(WorkerCreateListener workerCreateLi
         workerCreateListener.addWorker(localAsyncWorker);
 
         LocalAsyncWorkerRef<INPUT, OUTPUT> localAsyncWorkerRef = new LocalAsyncWorkerRef<>(localAsyncWorker);
-        DataCarrier<INPUT> dataCarrier = new DataCarrier<>(1, 8192 * 2);
+        DataCarrier<INPUT> dataCarrier = new DataCarrier<>(1, queueSize());
         localAsyncWorkerRef.setQueueEventHandler(dataCarrier);
         dataCarrier.consume(localAsyncWorkerRef, 1);
         return localAsyncWorkerRef;

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/define/register/ServiceNameEsTableDefine.java
Patch:
@@ -18,8 +18,7 @@
 
 package org.apache.skywalking.apm.collector.storage.es.define.register;
 
-import org.apache.skywalking.apm.collector.storage.es.base.define.ElasticSearchColumnDefine;
-import org.apache.skywalking.apm.collector.storage.es.base.define.ElasticSearchTableDefine;
+import org.apache.skywalking.apm.collector.storage.es.base.define.*;
 import org.apache.skywalking.apm.collector.storage.table.register.ServiceNameTable;
 
 /**
@@ -41,5 +40,7 @@ public ServiceNameEsTableDefine() {
         addColumn(new ElasticSearchColumnDefine(ServiceNameTable.SERVICE_NAME_KEYWORD, ElasticSearchColumnDefine.Type.Keyword.name()));
         addColumn(new ElasticSearchColumnDefine(ServiceNameTable.SERVICE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(ServiceNameTable.SRC_SPAN_TYPE, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(ServiceNameTable.REGISTER_TIME, ElasticSearchColumnDefine.Type.Long.name()));
+        addColumn(new ElasticSearchColumnDefine(ServiceNameTable.HEARTBEAT_TIME, ElasticSearchColumnDefine.Type.Long.name()));
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/test/java/org/apache/skywalking/apm/collector/storage/es/DataTTLKeeperTimerTestCase.java
Patch:
@@ -29,7 +29,7 @@ public class DataTTLKeeperTimerTestCase {
 
     @Test
     public void testConvertTimeBucket() {
-        DataTTLKeeperTimer timer = new DataTTLKeeperTimer(null, null, null);
+        DataTTLKeeperTimer timer = new DataTTLKeeperTimer(null, null, null, new StorageModuleEsConfig());
 
         DateTime currentTime = new DateTime(2018, 5, 26, 15, 5);
         DataTTLKeeperTimer.TimeBuckets timeBuckets = timer.convertTimeBucket(currentTime);

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/define/register/ServiceNameH2TableDefine.java
Patch:
@@ -18,8 +18,7 @@
 
 package org.apache.skywalking.apm.collector.storage.h2.define.register;
 
-import org.apache.skywalking.apm.collector.storage.h2.base.define.H2ColumnDefine;
-import org.apache.skywalking.apm.collector.storage.h2.base.define.H2TableDefine;
+import org.apache.skywalking.apm.collector.storage.h2.base.define.*;
 import org.apache.skywalking.apm.collector.storage.table.register.ServiceNameTable;
 
 /**
@@ -37,5 +36,7 @@ public ServiceNameH2TableDefine() {
         addColumn(new H2ColumnDefine(ServiceNameTable.SERVICE_NAME, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(ServiceNameTable.SERVICE_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(ServiceNameTable.SRC_SPAN_TYPE, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(ServiceNameTable.REGISTER_TIME, H2ColumnDefine.Type.Bigint.name()));
+        addColumn(new H2ColumnDefine(ServiceNameTable.HEARTBEAT_TIME, H2ColumnDefine.Type.Bigint.name()));
     }
 }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/test/java/org/apache/skywalking/apm/collector/ui/service/ServiceNameServiceTest.java
Patch:
@@ -79,7 +79,7 @@ public void getCount() {
 
     @Test
     public void searchService() {
-        List<ServiceInfo> serviceInfos = serverNameService.searchService("keyword", 10);
+        List<ServiceInfo> serviceInfos = serverNameService.searchService("keyword", 0, 10);
         Assert.assertTrue(serviceInfos.size() == 0);
     }
 

File: apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandGetFallbackInterceptor.java
Patch:
@@ -36,7 +36,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
 
         AbstractSpan activeSpan = ContextManager.createLocalSpan(enhanceRequireObjectCache.getOperationNamePrefix() + "/Fallback");
         activeSpan.setComponent(ComponentsDefine.HYSTRIX);
-        ContextManager.continued(snapshot);
+        if (snapshot != null) {
+            ContextManager.continued(snapshot);
+        }
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/HystrixCommandRunInterceptor.java
Patch:
@@ -41,7 +41,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
 
         AbstractSpan activeSpan = ContextManager.createLocalSpan(enhanceRequireObjectCache.getOperationNamePrefix() + "/Execution");
         activeSpan.setComponent(ComponentsDefine.HYSTRIX);
-        ContextManager.continued(snapshot);
+        if (snapshot != null) {
+            ContextManager.continued(snapshot);
+        }
         // Because of `fall back` method running in other thread. so we need capture concurrent span for tracing.
         enhanceRequireObjectCache.setContextSnapshot(ContextManager.capture());
 

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jedis/v2/define/JedisInstrumentation.java
Patch:
@@ -38,6 +38,7 @@ public class JedisInstrumentation extends ClassInstanceMethodsEnhancePluginDefin
     private static final String ENHANCE_CLASS = "redis.clients.jedis.Jedis";
     private static final String CONSTRUCTOR_WITH_STRING_ARG_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisConstructorWithStringArgInterceptor";
     private static final String CONSTRUCTOR_WITH_SHARD_INFO_ARG_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisConstructorWithShardInfoArgInterceptor";
+    private static final String CONSTRUCTOR_WITH_HOST_AND_PORT_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisClusterConstructorWithHostAndPortArgInterceptor";
     private static final String CONSTRUCTOR_WITH_URI_ARG_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisConstructorWithUriArgInterceptor";
     private static final String JEDIS_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisMethodInterceptor";
 
@@ -68,7 +69,7 @@ public ElementMatcher<MethodDescription> getConstructorMatcher() {
 
                 @Override
                 public String getConstructorInterceptor() {
-                    return CONSTRUCTOR_WITH_SHARD_INFO_ARG_INTERCEPT_CLASS;
+                    return CONSTRUCTOR_WITH_HOST_AND_PORT_INTERCEPT_CLASS;
                 }
             },
             new ConstructorInterceptPoint() {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CarrierItem.java
Patch:
@@ -39,7 +39,7 @@ public CarrierItem(String headKey, String headValue, CarrierItem next) {
         if (StringUtil.isEmpty(NAMESPACE)) {
             this.headKey = headKey;
         } else {
-            this.headKey = NAMESPACE + ":" + headValue;
+            this.headKey = NAMESPACE + "-" + headKey;
         }
         this.headValue = headValue;
         this.next = next;

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/global/GlobalTraceSpanListener.java
Patch:
@@ -64,7 +64,7 @@ public class GlobalTraceSpanListener implements GlobalTraceIdsListener {
         for (String globalTraceId : globalTraceIds) {
             GlobalTrace globalTrace = new GlobalTrace();
             globalTrace.setId(segmentCoreInfo.getSegmentId() + Const.ID_SPLIT + globalTraceId);
-            globalTrace.setGlobalTraceId(globalTraceId);
+            globalTrace.setTraceId(globalTraceId);
             globalTrace.setSegmentId(segmentCoreInfo.getSegmentId());
             globalTrace.setTimeBucket(segmentCoreInfo.getMinuteTimeBucket());
             graph.start(globalTrace);

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/base/dao/IPersistenceDAO.java
Patch:
@@ -31,5 +31,5 @@ public interface IPersistenceDAO<INSERT, UPDATE, STREAM_DATA extends StreamData>
 
     UPDATE prepareBatchUpdate(STREAM_DATA data);
 
-    void deleteHistory(Long startTimestamp, Long endTimestamp);
+    void deleteHistory(Long timeBucketBefore);
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/table/global/GlobalTrace.java
Patch:
@@ -73,11 +73,11 @@ public void setSegmentId(String segmentId) {
         setDataString(1, segmentId);
     }
 
-    public String getGlobalTraceId() {
+    public String getTraceId() {
         return getDataString(2);
     }
 
-    public void setGlobalTraceId(String globalTraceId) {
+    public void setTraceId(String globalTraceId) {
         setDataString(2, globalTraceId);
     }
 

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/base/dao/AbstractPersistenceH2DAO.java
Patch:
@@ -90,6 +90,6 @@ public AbstractPersistenceH2DAO(H2Client client) {
         return entity;
     }
 
-    @Override public final void deleteHistory(Long startTimestamp, Long endTimestamp) {
+    @Override public void deleteHistory(Long timeBucketBefore) {
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/GlobalTraceH2PersistenceDAO.java
Patch:
@@ -55,7 +55,7 @@ public GlobalTraceH2PersistenceDAO(H2Client client) {
         H2SqlEntity entity = new H2SqlEntity();
         target.put(GlobalTraceTable.ID.getName(), data.getId());
         target.put(GlobalTraceTable.SEGMENT_ID.getName(), data.getSegmentId());
-        target.put(GlobalTraceTable.TRACE_ID.getName(), data.getGlobalTraceId());
+        target.put(GlobalTraceTable.TRACE_ID.getName(), data.getTraceId());
         target.put(GlobalTraceTable.TIME_BUCKET.getName(), data.getTimeBucket());
         logger.debug("global trace source: {}", target.toString());
 
@@ -65,6 +65,6 @@ public GlobalTraceH2PersistenceDAO(H2Client client) {
         return entity;
     }
 
-    @Override public void deleteHistory(Long startTimestamp, Long endTimestamp) {
+    @Override public void deleteHistory(Long timeBucketBefore) {
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/ui/ISegmentDurationUIDAO.java
Patch:
@@ -19,7 +19,9 @@
 package org.apache.skywalking.apm.collector.storage.dao.ui;
 
 import org.apache.skywalking.apm.collector.storage.base.dao.DAO;
+import org.apache.skywalking.apm.collector.storage.ui.trace.QueryOrder;
 import org.apache.skywalking.apm.collector.storage.ui.trace.TraceBrief;
+import org.apache.skywalking.apm.collector.storage.ui.trace.TraceState;
 
 /**
  * Interface to be implemented for execute database query operation
@@ -55,5 +57,5 @@ public interface ISegmentDurationUIDAO extends DAO {
      * @return not nullable result list
      */
     TraceBrief loadTop(long startSecondTimeBucket, long endSecondTimeBucket, long minDuration, long maxDuration,
-        String operationName, int applicationId, int limit, int from, String... segmentIds);
+                       String operationName, int applicationId, int limit, int from, TraceState traceState, QueryOrder queryOrder, String... segmentIds);
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/AbstractSpring3Instrumentation.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.mvc.v3.define;
 
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java
Patch:
@@ -21,9 +21,9 @@
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.any;

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/InvocableHandlerInstrumentation.java
Patch:
@@ -16,13 +16,12 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.mvc.v3.define;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java
Patch:
@@ -16,16 +16,15 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.mvc.v4.define;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.plugin.spring.mvc.commons.Constants;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 
 import static net.bytebuddy.matcher.ElementMatchers.any;
 import static net.bytebuddy.matcher.ElementMatchers.isAnnotatedWith;

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/impl/MergePersistenceWorker.java
Patch:
@@ -86,6 +86,7 @@ public MergePersistenceWorker(ModuleManager moduleManager) {
         if (mergeDataCache.containsKey(input.getId())) {
             mergeDataCache.get(input.getId()).mergeAndFormulaCalculateData(input);
         } else {
+            input.calculateFormula();
             mergeDataCache.put(input.getId(), input);
         }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/TraceSegmentRef.java
Patch:
@@ -123,7 +123,6 @@ public TraceSegmentReference transform() {
         TraceSegmentReference.Builder refBuilder = TraceSegmentReference.newBuilder();
         if (SegmentRefType.CROSS_PROCESS.equals(type)) {
             refBuilder.setRefType(RefType.CrossProcess);
-            refBuilder.setParentApplicationInstanceId(parentApplicationInstanceId);
             if (peerId == DictionaryUtil.nullValue()) {
                 refBuilder.setNetworkAddress(peerHost);
             } else {
@@ -133,6 +132,7 @@ public TraceSegmentReference transform() {
             refBuilder.setRefType(RefType.CrossThread);
         }
 
+        refBuilder.setParentApplicationInstanceId(parentApplicationInstanceId);
         refBuilder.setEntryApplicationInstanceId(entryApplicationInstanceId);
         refBuilder.setParentTraceSegmentId(traceSegmentId.transform());
         refBuilder.setParentSpanId(spanId);

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/impl/AggregationWorker.java
Patch:
@@ -82,6 +82,7 @@ private void aggregate(OUTPUT message) {
         if (mergeDataCache.containsKey(message.getId())) {
             mergeDataCache.get(message.getId()).mergeAndFormulaCalculateData(message);
         } else {
+            message.calculateFormula();
             mergeDataCache.put(message.getId(), message);
         }
         mergeDataCache.finishWriting();

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/data/AbstractData.java
Patch:
@@ -156,7 +156,7 @@ private void mergeData(AbstractData newData) {
     }
 
     @SuppressWarnings("unchecked")
-    private void calculateFormula() {
+    public void calculateFormula() {
         for (int i = 0; i < stringColumns.length; i++) {
             if (nonNull(stringColumns[i].getFormulaOperation())) {
                 String stringData = (String)stringColumns[i].getFormulaOperation().operate(this);

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/CallableOrRunnableConstructInterceptor.java
Patch:
@@ -13,9 +13,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-package org.apache.skywalking.apm.plugin.jdk.thread;
+package org.apache.skywalking.apm.toolkit.activation.trace;
 
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/CallableOrRunnableInvokeInterceptor.java
Patch:
@@ -13,17 +13,17 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-package org.apache.skywalking.apm.plugin.jdk.thread;
+package org.apache.skywalking.apm.toolkit.activation.trace;
 
-import java.lang.reflect.Method;
 import org.apache.skywalking.apm.agent.core.context.ContextManager;
 import org.apache.skywalking.apm.agent.core.context.ContextSnapshot;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 
+import java.lang.reflect.Method;
+
 /**
  * @author carlvine500
  */

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ApplicationMetricEsUIDAO.java
Patch:
@@ -78,7 +78,7 @@ public List<ApplicationThroughput> getTopNApplicationThroughput(Step step, long
             applicationThroughputList.add(applicationThroughput);
         });
 
-        applicationThroughputList.sort((first, second) -> first.getCpm() > second.getCpm() ? -1 : 1);
+        applicationThroughputList.sort((first, second) -> Integer.compare(second.getCpm(), first.getCpm()));
 
         if (applicationThroughputList.size() <= topN) {
             return applicationThroughputList;

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/InstanceMetricEsUIDAO.java
Patch:
@@ -84,7 +84,7 @@ public List<AppServerInfo> getServerThroughput(int applicationId, Step step, lon
             appServerInfoList.add(appServerInfo);
         });
 
-        appServerInfoList.sort((first, second) -> first.getCpm() > second.getCpm() ? -1 : 1);
+        appServerInfoList.sort((first, second) -> Integer.compare(second.getCpm(), first.getCpm()));
         if (appServerInfoList.size() <= topN) {
             return appServerInfoList;
         } else {

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/NetworkAddressIDService.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.skywalking.apm.collector.storage.table.register.NetworkAddress;
 
 import static java.util.Objects.isNull;
+import static java.util.Objects.nonNull;
 
 /**
  * @author peng-yongsheng
@@ -122,7 +123,7 @@ private Graph<NetworkAddress> getNetworkAddressGraph() {
     private boolean compare(int addressId, int spanLayer, int serverType) {
         NetworkAddress networkAddress = networkAddressCacheService.getAddress(addressId);
         
-        if (isNull(networkAddress)) {
+        if (nonNull(networkAddress)) {
             return spanLayer == networkAddress.getSrcSpanLayer() && serverType == networkAddress.getServerType();
         }
         return true;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/BootService.java
Patch:
@@ -27,11 +27,11 @@
  * @author wusheng
  */
 public interface BootService {
-    void beforeBoot() throws Throwable;
+    void prepare() throws Throwable;
 
     void boot() throws Throwable;
 
-    void afterBoot() throws Throwable;
+    void onComplete() throws Throwable;
 
     void shutdown() throws Throwable;
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/boot/ServiceManagerTest.java
Patch:
@@ -57,7 +57,7 @@ public static void afterClass() {
     public void testServiceDependencies() throws Exception {
         HashMap<Class, BootService> registryService = getFieldValue(ServiceManager.INSTANCE, "bootedServices");
 
-        assertThat(registryService.size(), is(7));
+        assertThat(registryService.size(), is(8));
 
         assertTraceSegmentServiceClient(ServiceManager.INSTANCE.findService(TraceSegmentServiceClient.class));
         assertContextManager(ServiceManager.INSTANCE.findService(ContextManager.class));

File: apm-sniffer/apm-test-tools/src/main/java/org/apache/skywalking/apm/agent/test/tools/AgentServiceRule.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.LinkedList;
 import org.apache.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.apache.skywalking.apm.agent.core.context.TracingContext;
+import org.apache.skywalking.apm.agent.core.plugin.loader.AgentClassLoader;
 import org.junit.rules.ExternalResource;
 import org.apache.skywalking.apm.agent.core.boot.BootService;
 import org.apache.skywalking.apm.agent.core.boot.ServiceManager;
@@ -49,6 +50,7 @@ protected void after() {
     @Override
     protected void before() throws Throwable {
         super.before();
+        AgentClassLoader.initDefaultLoader();
         Config.Logging.LEVEL = LogLevel.OFF;
         ServiceManager.INSTANCE.boot();
         RemoteDownstreamConfig.Agent.APPLICATION_ID = 1;

File: apm-collector/apm-collector-boot/src/main/java/org/apache/skywalking/apm/collector/boot/CollectorBootStartUp.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleConfigException;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.core.module.ModuleNotFoundException;
+import org.apache.skywalking.apm.collector.core.module.ModuleStartException;
 import org.apache.skywalking.apm.collector.core.module.ProviderNotFoundException;
 import org.apache.skywalking.apm.collector.core.module.ServiceNotProvidedException;
 import org.slf4j.Logger;
@@ -42,7 +43,7 @@ public static void main(String[] args) {
         try {
             ApplicationConfiguration applicationConfiguration = configLoader.load();
             manager.init(applicationConfiguration);
-        } catch (ConfigFileNotFoundException | ModuleNotFoundException | ProviderNotFoundException | ServiceNotProvidedException | ModuleConfigException e) {
+        } catch (ConfigFileNotFoundException | ModuleNotFoundException | ProviderNotFoundException | ServiceNotProvidedException | ModuleConfigException | ModuleStartException e) {
             logger.error(e.getMessage(), e);
             System.exit(1);
         }

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/module/BootstrapFlow.java
Patch:
@@ -43,7 +43,8 @@ class BootstrapFlow {
     }
 
     @SuppressWarnings("unchecked")
-    void start(ModuleManager moduleManager) throws ModuleNotFoundException, ServiceNotProvidedException {
+    void start(
+        ModuleManager moduleManager) throws ModuleNotFoundException, ServiceNotProvidedException, ModuleStartException {
         for (ModuleProvider provider : startupSequence) {
             String[] requiredModules = provider.requiredModules();
             if (requiredModules != null) {

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/module/ModuleManager.java
Patch:
@@ -37,7 +37,7 @@ public class ModuleManager {
      * Init the given modules
      */
     public void init(
-        ApplicationConfiguration applicationConfiguration) throws ModuleNotFoundException, ProviderNotFoundException, ServiceNotProvidedException, CycleDependencyException, ModuleConfigException {
+        ApplicationConfiguration applicationConfiguration) throws ModuleNotFoundException, ProviderNotFoundException, ServiceNotProvidedException, CycleDependencyException, ModuleConfigException, ModuleStartException {
         String[] moduleNames = applicationConfiguration.moduleList();
         ServiceLoader<Module> moduleServiceLoader = ServiceLoader.load(Module.class);
         LinkedList<String> moduleList = new LinkedList<>(Arrays.asList(moduleNames));

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/module/ModuleProvider.java
Patch:
@@ -71,7 +71,7 @@ protected final ModuleManager getManager() {
     /**
      * In start stage, the module has been ready for interop.
      */
-    public abstract void start() throws ServiceNotProvidedException;
+    public abstract void start() throws ServiceNotProvidedException, ModuleStartException;
 
     /**
      * This callback executes after all modules start up successfully.

File: apm-collector/apm-collector-core/src/test/java/org/apache/skywalking/apm/collector/core/module/ModuleManagerTest.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.core.module;
 
 import java.util.Properties;
@@ -28,7 +27,7 @@
  */
 public class ModuleManagerTest {
     @Test
-    public void testInit() throws ServiceNotProvidedException, ModuleNotFoundException, ProviderNotFoundException, DuplicateProviderException, ModuleConfigException {
+    public void testInit() throws ServiceNotProvidedException, ModuleNotFoundException, ProviderNotFoundException, DuplicateProviderException, ModuleConfigException, ModuleStartException {
         ApplicationConfiguration configuration = new ApplicationConfiguration();
         configuration.addModule("Test").addProviderConfiguration("TestModule-Provider", new Properties());
         configuration.addModule("BaseA").addProviderConfiguration("P-A", new Properties());

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/StorageInstallException.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.storage;
 
 /**

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/StorageModuleH2Provider.java
Patch:
@@ -280,7 +280,7 @@ public StorageModuleH2Provider() {
         try {
             h2Client.initialize();
 
-            H2StorageInstaller installer = new H2StorageInstaller();
+            H2StorageInstaller installer = new H2StorageInstaller(false);
             installer.install(h2Client);
         } catch (H2ClientException | StorageException e) {
             logger.error(e.getMessage(), e);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/NetworkAddressEsUIDAO.java
Patch:
@@ -43,11 +43,11 @@ public NetworkAddressEsUIDAO(ElasticSearchClient client) {
         super(client);
     }
 
-    @Override public int getNumOfSpanLayer(int spanLayer) {
+    @Override public int getNumOfSpanLayer(int srcSpanLayer) {
         SearchRequestBuilder searchRequestBuilder = getClient().prepareSearch(NetworkAddressTable.TABLE);
         searchRequestBuilder.setTypes(NetworkAddressTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
-        searchRequestBuilder.setQuery(QueryBuilders.termQuery(NetworkAddressTable.SRC_SPAN_LAYER.getName(), spanLayer));
+        searchRequestBuilder.setQuery(QueryBuilders.termQuery(NetworkAddressTable.SRC_SPAN_LAYER.getName(), srcSpanLayer));
         searchRequestBuilder.setSize(0);
 
         SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ServiceMetricEsUIDAO.java
Patch:
@@ -139,7 +139,7 @@ public void accept(DurationPoint durationPoint) {
     }
 
     @Override
-    public List<Node> getServicesMetric(Step step, long startTime, long endTime, MetricSource metricSource,
+    public List<Node> getServicesMetric(Step step, long startTimeBucket, long endTimeBucket, MetricSource metricSource,
         Collection<Integer> serviceIds) {
         String tableName = TimePyramidTableNameBuilder.build(step, ServiceMetricTable.TABLE);
 
@@ -148,7 +148,7 @@ public List<Node> getServicesMetric(Step step, long startTime, long endTime, Met
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
 
         BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();
-        boolQuery.must().add(QueryBuilders.rangeQuery(ServiceMetricTable.TIME_BUCKET.getName()).gte(startTime).lte(endTime));
+        boolQuery.must().add(QueryBuilders.rangeQuery(ServiceMetricTable.TIME_BUCKET.getName()).gte(startTimeBucket).lte(endTimeBucket));
         boolQuery.must().add(QueryBuilders.termsQuery(ServiceMetricTable.SERVICE_ID.getName(), serviceIds));
         boolQuery.must().add(QueryBuilders.termQuery(ServiceMetricTable.SOURCE_VALUE.getName(), metricSource.getValue()));
 

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/NetworkAddressH2UIDAO.java
Patch:
@@ -42,10 +42,10 @@ public NetworkAddressH2UIDAO(H2Client client) {
         super(client);
     }
 
-    @Override public int getNumOfSpanLayer(int spanLayer) {
+    @Override public int getNumOfSpanLayer(int srcSpanLayer) {
         String dynamicSql = "select count({0}) as cnt from {1} where {2} = ?";
         String sql = SqlBuilder.buildSql(dynamicSql, NetworkAddressTable.NETWORK_ADDRESS.getName(), NetworkAddressTable.TABLE, NetworkAddressTable.SRC_SPAN_LAYER.getName());
-        Object[] params = new Object[] {spanLayer};
+        Object[] params = new Object[] {srcSpanLayer};
 
         try (ResultSet rs = getClient().executeQuery(sql, params)) {
             if (rs.next()) {

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/ServiceMetricH2UIDAO.java
Patch:
@@ -109,7 +109,7 @@ public List<Integer> getServiceResponseTimeTrend(int serviceId, Step step, List<
         return trends;
     }
 
-    @Override public List<Node> getServicesMetric(Step step, long startTime, long endTime, MetricSource metricSource,
+    @Override public List<Node> getServicesMetric(Step step, long startTimeBucket, long endTimeBucket, MetricSource metricSource,
         Collection<Integer> serviceIds) {
         return null;
     }

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/AnalysisSegmentParserModuleProvider.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.WorkerCreateListener;
 import org.apache.skywalking.apm.collector.analysis.worker.timer.PersistenceTimer;
 import org.apache.skywalking.apm.collector.cache.CacheModule;
+import org.apache.skywalking.apm.collector.configuration.ConfigurationModule;
 import org.apache.skywalking.apm.collector.core.module.Module;
 import org.apache.skywalking.apm.collector.core.module.ModuleConfig;
 import org.apache.skywalking.apm.collector.core.module.ModuleProvider;
@@ -87,7 +88,7 @@ public AnalysisSegmentParserModuleProvider() {
     }
 
     @Override public String[] requiredModules() {
-        return new String[] {StorageModule.NAME, AnalysisRegisterModule.NAME, CacheModule.NAME};
+        return new String[] {ConfigurationModule.NAME, StorageModule.NAME, AnalysisRegisterModule.NAME, CacheModule.NAME};
     }
 
     private void graphCreate(WorkerCreateListener workerCreateListener) {

File: apm-collector/apm-collector-boot/src/main/java/org/apache/skywalking/apm/collector/boot/CollectorBootStartUp.java
Patch:
@@ -44,6 +44,7 @@ public static void main(String[] args) {
             manager.init(applicationConfiguration);
         } catch (ConfigFileNotFoundException | ModuleNotFoundException | ProviderNotFoundException | ServiceNotProvidedException | ModuleConfigException e) {
             logger.error(e.getMessage(), e);
+            System.exit(1);
         }
     }
 }

File: apm-collector/apm-collector-configuration/collector-configuration-define/src/main/java/org/apache/skywalking/apm/collector/configuration/ConfigurationModule.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.collector.configuration.service.IApplicationAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IApplicationReferenceAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.ICollectorConfig;
+import org.apache.skywalking.apm.collector.configuration.service.IComponentLibraryCatalogService;
 import org.apache.skywalking.apm.collector.configuration.service.IInstanceAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IInstanceReferenceAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IServiceAlarmRuleConfig;
@@ -44,6 +45,7 @@ public class ConfigurationModule extends Module {
             ICollectorConfig.class,
             IApdexThresholdService.class,
             IServiceAlarmRuleConfig.class, IInstanceAlarmRuleConfig.class, IApplicationAlarmRuleConfig.class,
-            IServiceReferenceAlarmRuleConfig.class, IInstanceReferenceAlarmRuleConfig.class, IApplicationReferenceAlarmRuleConfig.class};
+            IServiceReferenceAlarmRuleConfig.class, IInstanceReferenceAlarmRuleConfig.class, IApplicationReferenceAlarmRuleConfig.class,
+            IComponentLibraryCatalogService.class};
     }
 }

File: apm-collector/apm-collector-configuration/collector-configuration-provider/src/main/java/org/apache/skywalking/apm/collector/configuration/ConfigurationModuleProvider.java
Patch:
@@ -22,10 +22,12 @@
 import org.apache.skywalking.apm.collector.configuration.service.ApplicationAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.ApplicationReferenceAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.CollectorConfigService;
+import org.apache.skywalking.apm.collector.configuration.service.ComponentLibraryCatalogService;
 import org.apache.skywalking.apm.collector.configuration.service.IApdexThresholdService;
 import org.apache.skywalking.apm.collector.configuration.service.IApplicationAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IApplicationReferenceAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.ICollectorConfig;
+import org.apache.skywalking.apm.collector.configuration.service.IComponentLibraryCatalogService;
 import org.apache.skywalking.apm.collector.configuration.service.IInstanceAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IInstanceReferenceAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IServiceAlarmRuleConfig;
@@ -76,6 +78,7 @@ public ConfigurationModuleProvider() {
         Integer applicationAverageResponseTimeThreshold = config.getApplicationAverageResponseTimeThreshold() == 0 ? 2000 : config.getApplicationAverageResponseTimeThreshold();
 
         this.registerServiceImplementation(ICollectorConfig.class, new CollectorConfigService(namespace));
+        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new ComponentLibraryCatalogService());
         this.registerServiceImplementation(IApdexThresholdService.class, new ApdexThresholdService(applicationApdexThreshold));
         this.registerServiceImplementation(IServiceAlarmRuleConfig.class, new ServiceAlarmRuleConfig(serviceErrorRateThreshold, serviceAverageResponseTimeThreshold));
         this.registerServiceImplementation(IInstanceAlarmRuleConfig.class, new InstanceAlarmRuleConfig(instanceErrorRateThreshold, instanceAverageResponseTimeThreshold));

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/jetty/UIModuleJettyProvider.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.collector.cluster.ClusterModule;
 import org.apache.skywalking.apm.collector.cluster.service.ModuleListenerService;
 import org.apache.skywalking.apm.collector.cluster.service.ModuleRegisterService;
+import org.apache.skywalking.apm.collector.configuration.ConfigurationModule;
 import org.apache.skywalking.apm.collector.core.module.Module;
 import org.apache.skywalking.apm.collector.core.module.ModuleConfig;
 import org.apache.skywalking.apm.collector.core.module.ModuleProvider;
@@ -84,7 +85,7 @@ public UIModuleJettyProvider() {
     }
 
     @Override public String[] requiredModules() {
-        return new String[] {ClusterModule.NAME, JettyManagerModule.NAME, NamingModule.NAME, CacheModule.NAME, StorageModule.NAME};
+        return new String[] {ConfigurationModule.NAME, ClusterModule.NAME, JettyManagerModule.NAME, NamingModule.NAME, CacheModule.NAME, StorageModule.NAME};
     }
 
     private void addHandlers(JettyServer jettyServer) {

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/AnalysisAlarmModuleProvider.java
Patch:
@@ -92,8 +92,7 @@ public AnalysisAlarmModuleProvider() {
 
         registerRemoteData();
 
-        PersistenceTimer persistenceTimer = new PersistenceTimer(AnalysisAlarmModule.NAME);
-        persistenceTimer.start(getManager(), workerCreateListener.getPersistenceWorkers());
+        PersistenceTimer.INSTANCE.start(getManager(), workerCreateListener.getPersistenceWorkers());
     }
 
     @Override public void notifyAfterCompleted() {

File: apm-collector/apm-collector-analysis/analysis-jvm/jvm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/jvm/provider/AnalysisJVMModuleProvider.java
Patch:
@@ -77,8 +77,7 @@ public AnalysisJVMModuleProvider() {
 
         graphCreate(workerCreateListener);
 
-        PersistenceTimer persistenceTimer = new PersistenceTimer(AnalysisJVMModule.NAME);
-        persistenceTimer.start(getManager(), workerCreateListener.getPersistenceWorkers());
+        PersistenceTimer.INSTANCE.start(getManager(), workerCreateListener.getPersistenceWorkers());
     }
 
     @Override public void notifyAfterCompleted() {

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/AnalysisMetricModuleProvider.java
Patch:
@@ -100,8 +100,7 @@ public AnalysisMetricModuleProvider() {
 
         registerRemoteData();
 
-        PersistenceTimer persistenceTimer = new PersistenceTimer(AnalysisMetricModule.NAME);
-        persistenceTimer.start(getManager(), workerCreateListener.getPersistenceWorkers());
+        PersistenceTimer.INSTANCE.start(getManager(), workerCreateListener.getPersistenceWorkers());
     }
 
     @Override public void notifyAfterCompleted() {

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/service/refmetric/ServiceReferenceDayMetricPersistenceWorker.java
Patch:
@@ -73,7 +73,7 @@ public int queueSize() {
     }
 
     @GraphComputingMetric(name = "/persistence/flushAndSwitch/" + ServiceReferenceMetricTable.TABLE)
-    @Override public void flushAndSwitch() {
-        super.flushAndSwitch();
+    @Override public boolean flushAndSwitch() {
+        return super.flushAndSwitch();
     }
 }

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/service/refmetric/ServiceReferenceHourMetricPersistenceWorker.java
Patch:
@@ -73,7 +73,7 @@ public int queueSize() {
     }
 
     @GraphComputingMetric(name = "/persistence/flushAndSwitch/" + ServiceReferenceMetricTable.TABLE + "/hour")
-    @Override public void flushAndSwitch() {
-        super.flushAndSwitch();
+    @Override public boolean flushAndSwitch() {
+        return super.flushAndSwitch();
     }
 }

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/service/refmetric/ServiceReferenceMinuteMetricPersistenceWorker.java
Patch:
@@ -73,7 +73,7 @@ public int queueSize() {
     }
 
     @GraphComputingMetric(name = "/persistence/flushAndSwitch/" + ServiceReferenceMetricTable.TABLE + "/minute")
-    @Override public void flushAndSwitch() {
-        super.flushAndSwitch();
+    @Override public boolean flushAndSwitch() {
+        return super.flushAndSwitch();
     }
 }

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/service/refmetric/ServiceReferenceMonthMetricPersistenceWorker.java
Patch:
@@ -73,7 +73,7 @@ public int queueSize() {
     }
 
     @GraphComputingMetric(name = "/persistence/flushAndSwitch/" + ServiceReferenceMetricTable.TABLE + "/month")
-    @Override public void flushAndSwitch() {
-        super.flushAndSwitch();
+    @Override public boolean flushAndSwitch() {
+        return super.flushAndSwitch();
     }
 }

File: apm-collector/apm-collector-analysis/analysis-register/register-define/src/main/java/org/apache/skywalking/apm/collector/analysis/register/define/service/INetworkAddressIDService.java
Patch:
@@ -28,5 +28,5 @@ public interface INetworkAddressIDService extends Service {
 
     int get(String networkAddress);
 
-    void update(int addressId, int spanLayer, int serverType);
+    void update(int addressId, int srcSpanLayer, int serverType);
 }

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/AnalysisRegisterModuleProvider.java
Patch:
@@ -85,8 +85,7 @@ public AnalysisRegisterModuleProvider() {
 
         registerRemoteData();
 
-        PersistenceTimer persistenceTimer = new PersistenceTimer(AnalysisRegisterModule.NAME);
-        persistenceTimer.start(getManager(), workerCreateListener.getPersistenceWorkers());
+        PersistenceTimer.INSTANCE.start(getManager(), workerCreateListener.getPersistenceWorkers());
     }
 
     @Override public void notifyAfterCompleted() {

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/register/NetworkAddressRegisterSerialWorker.java
Patch:
@@ -63,7 +63,7 @@ private NetworkAddressRegisterSerialWorker(ModuleManager moduleManager) {
                     newNetworkAddress = new NetworkAddress();
                     newNetworkAddress.setId("-1");
                     newNetworkAddress.setAddressId(-1);
-                    newNetworkAddress.setSpanLayer(networkAddress.getSpanLayer());
+                    newNetworkAddress.setSrcSpanLayer(networkAddress.getSrcSpanLayer());
                     newNetworkAddress.setNetworkAddress(networkAddress.getNetworkAddress());
                 } else {
                     int max = networkAddressRegisterDAO.getMaxNetworkAddressId();
@@ -72,13 +72,13 @@ private NetworkAddressRegisterSerialWorker(ModuleManager moduleManager) {
                     newNetworkAddress = new NetworkAddress();
                     newNetworkAddress.setId(String.valueOf(addressId));
                     newNetworkAddress.setAddressId(addressId);
-                    newNetworkAddress.setSpanLayer(networkAddress.getSpanLayer());
+                    newNetworkAddress.setSrcSpanLayer(networkAddress.getSrcSpanLayer());
                     newNetworkAddress.setNetworkAddress(networkAddress.getNetworkAddress());
                 }
                 networkAddressRegisterDAO.save(newNetworkAddress);
             }
         } else {
-            networkAddressRegisterDAO.update(networkAddress.getId(), networkAddress.getSpanLayer(), networkAddress.getServerType());
+            networkAddressRegisterDAO.update(networkAddress.getId(), networkAddress.getSrcSpanLayer(), networkAddress.getServerType());
         }
     }
 

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/NetworkAddressIDService.java
Patch:
@@ -92,7 +92,7 @@ private Graph<NetworkAddress> getNetworkAddressGraph() {
             NetworkAddress newNetworkAddress = new NetworkAddress();
             newNetworkAddress.setId(String.valueOf(Const.NONE));
             newNetworkAddress.setNetworkAddress(networkAddress);
-            newNetworkAddress.setSpanLayer(Const.NONE);
+            newNetworkAddress.setSrcSpanLayer(Const.NONE);
             newNetworkAddress.setServerType(Const.NONE);
             newNetworkAddress.setAddressId(Const.NONE);
 
@@ -110,7 +110,7 @@ private Graph<NetworkAddress> getNetworkAddressGraph() {
         if (!this.compare(addressId, spanLayer, serverType)) {
             NetworkAddress newNetworkAddress = new NetworkAddress();
             newNetworkAddress.setId(String.valueOf(addressId));
-            newNetworkAddress.setSpanLayer(spanLayer);
+            newNetworkAddress.setSrcSpanLayer(spanLayer);
             newNetworkAddress.setServerType(serverType);
             newNetworkAddress.setAddressId(addressId);
 
@@ -122,7 +122,7 @@ private boolean compare(int addressId, int spanLayer, int serverType) {
         NetworkAddress networkAddress = networkAddressCacheService.getAddress(addressId);
 
         if (ObjectUtils.isNotEmpty(networkAddress)) {
-            return spanLayer == networkAddress.getSpanLayer() && serverType == networkAddress.getServerType();
+            return spanLayer == networkAddress.getSrcSpanLayer() && serverType == networkAddress.getServerType();
         }
 
         return true;

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/AnalysisSegmentParserModuleProvider.java
Patch:
@@ -78,8 +78,7 @@ public AnalysisSegmentParserModuleProvider() {
 
         graphCreate(workerCreateListener);
 
-        PersistenceTimer persistenceTimer = new PersistenceTimer(AnalysisSegmentParserModule.NAME);
-        persistenceTimer.start(getManager(), workerCreateListener.getPersistenceWorkers());
+        PersistenceTimer.INSTANCE.start(getManager(), workerCreateListener.getPersistenceWorkers());
 
         SegmentBufferReader.INSTANCE.setSegmentParserListenerManager(listenerManager);
     }

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/WorkerCreateListener.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 import org.apache.skywalking.apm.collector.analysis.worker.model.impl.PersistenceWorker;
 
@@ -30,7 +30,7 @@ public class WorkerCreateListener {
     private final List<PersistenceWorker> persistenceWorkers;
 
     public WorkerCreateListener() {
-        this.persistenceWorkers = new ArrayList<>();
+        this.persistenceWorkers = new LinkedList<>();
     }
 
     void addWorker(AbstractWorker worker) {

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/impl/data/DataCollection.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.impl.data;
 
+import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
 import org.apache.skywalking.apm.collector.core.cache.Collection;
 import org.apache.skywalking.apm.collector.core.data.StreamData;
 
@@ -32,7 +32,7 @@ public class DataCollection<STREAM_DATA extends StreamData> implements Collectio
     private volatile boolean reading;
 
     DataCollection() {
-        this.data = new ConcurrentHashMap<>();
+        this.data = new LinkedHashMap<>();
         this.writing = false;
         this.reading = false;
     }

File: apm-collector/apm-collector-remote/collector-remote-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/remote/grpc/service/GRPCRemoteSenderService.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.LinkedList;
 import java.util.List;
 import org.apache.skywalking.apm.collector.cluster.ClusterModuleListener;
 import org.apache.skywalking.apm.collector.core.UnexpectedException;
@@ -91,7 +92,7 @@ public GRPCRemoteSenderService(String host, int port, int channelSize, int buffe
     }
 
     @Override public synchronized void serverJoinNotify(String serverAddress) {
-        List<RemoteClient> newRemoteClients = new ArrayList<>();
+        List<RemoteClient> newRemoteClients = new LinkedList<>();
         newRemoteClients.addAll(remoteClients);
 
         String host = serverAddress.split(":")[0];
@@ -105,7 +106,7 @@ public GRPCRemoteSenderService(String host, int port, int channelSize, int buffe
     }
 
     @Override public synchronized void serverQuitNotify(String serverAddress) {
-        List<RemoteClient> newRemoteClients = new ArrayList<>();
+        List<RemoteClient> newRemoteClients = new LinkedList<>();
         newRemoteClients.addAll(remoteClients);
 
         for (int i = newRemoteClients.size() - 1; i >= 0; i--) {

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/StorageModule.java
Patch:
@@ -118,7 +118,6 @@
 import org.apache.skywalking.apm.collector.storage.dao.ui.IInstanceMetricUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.IInstanceUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.IMemoryMetricUIDAO;
-import org.apache.skywalking.apm.collector.storage.dao.ui.IMemoryPoolMetricUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.INetworkAddressUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.ISegmentDurationUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.ISegmentUIDAO;
@@ -250,7 +249,6 @@ private void addUiDAO(List<Class> classes) {
         classes.add(ICpuMetricUIDAO.class);
         classes.add(IGCMetricUIDAO.class);
         classes.add(IMemoryMetricUIDAO.class);
-        classes.add(IMemoryPoolMetricUIDAO.class);
 
         classes.add(IGlobalTraceUIDAO.class);
         classes.add(IInstanceMetricUIDAO.class);

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/table/alarm/AlarmType.java
Patch:
@@ -26,7 +26,7 @@ public enum AlarmType {
 
     private final int value;
 
-    private AlarmType(int value) {
+    AlarmType(int value) {
         this.value = value;
     }
 

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/table/segment/Segment.java
Patch:
@@ -29,11 +29,11 @@
 public class Segment extends StreamData {
 
     private static final Column[] STRING_COLUMNS = {
-        new Column(SegmentTable.COLUMN_ID, new NonMergeOperation()),
+        new Column(SegmentTable.ID, new NonMergeOperation()),
     };
 
     private static final Column[] LONG_COLUMNS = {
-        new Column(SegmentTable.COLUMN_TIME_BUCKET, new NonMergeOperation()),
+        new Column(SegmentTable.TIME_BUCKET, new NonMergeOperation()),
     };
 
     private static final Column[] DOUBLE_COLUMNS = {};
@@ -42,7 +42,7 @@ public class Segment extends StreamData {
     };
 
     private static final Column[] BYTE_COLUMNS = {
-        new Column(SegmentTable.COLUMN_DATA_BINARY, new CoverMergeOperation()),
+        new Column(SegmentTable.DATA_BINARY, new CoverMergeOperation()),
     };
 
     public Segment() {

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/InstanceHeartBeatEsPersistenceDAO.java
Patch:
@@ -52,8 +52,8 @@ public InstanceHeartBeatEsPersistenceDAO(ElasticSearchClient client) {
 
             Instance instance = new Instance();
             instance.setId(id);
-            instance.setInstanceId(((Number)source.get(InstanceTable.COLUMN_INSTANCE_ID)).intValue());
-            instance.setHeartBeatTime(((Number)source.get(InstanceTable.COLUMN_HEARTBEAT_TIME)).longValue());
+            instance.setInstanceId(((Number)source.get(InstanceTable.INSTANCE_ID.getName())).intValue());
+            instance.setHeartBeatTime(((Number)source.get(InstanceTable.HEARTBEAT_TIME.getName())).longValue());
             logger.debug("getApplicationId: {} is exists", id);
             return instance;
         } else {
@@ -68,7 +68,7 @@ public InstanceHeartBeatEsPersistenceDAO(ElasticSearchClient client) {
 
     @Override public UpdateRequestBuilder prepareBatchUpdate(Instance data) {
         Map<String, Object> source = new HashMap<>();
-        source.put(InstanceTable.COLUMN_HEARTBEAT_TIME, data.getHeartBeatTime());
+        source.put(InstanceTable.HEARTBEAT_TIME.getName(), data.getHeartBeatTime());
         return getClient().prepareUpdate(InstanceTable.TABLE, data.getId()).setDoc(source);
     }
 

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/CpuMetricEsUIDAO.java
Patch:
@@ -59,8 +59,8 @@ public void accept(DurationPoint durationPoint) {
         MultiGetResponse multiGetResponse = prepareMultiGet.get();
         for (MultiGetItemResponse response : multiGetResponse.getResponses()) {
             if (response.getResponse().isExists()) {
-                double cpuUsed = ((Number) response.getResponse().getSource().get(CpuMetricTable.COLUMN_USAGE_PERCENT)).doubleValue();
-                long times = ((Number) response.getResponse().getSource().get(CpuMetricTable.COLUMN_TIMES)).longValue();
+                double cpuUsed = ((Number) response.getResponse().getSource().get(CpuMetricTable.USAGE_PERCENT.getName())).doubleValue();
+                long times = ((Number) response.getResponse().getSource().get(CpuMetricTable.TIMES.getName())).longValue();
                 cpuTrends.add((int) ((cpuUsed / times) * 100));
             } else {
                 cpuTrends.add(0);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/GCMetricEsUIDAO.java
Patch:
@@ -68,8 +68,8 @@ public void accept(DurationPoint durationPoint) {
         MultiGetResponse multiGetResponse = youngPrepareMultiGet.get();
         for (MultiGetItemResponse itemResponse : multiGetResponse.getResponses()) {
             if (itemResponse.getResponse().isExists()) {
-                long count = ((Number) itemResponse.getResponse().getSource().get(GCMetricTable.COLUMN_COUNT)).longValue();
-                long times = ((Number) itemResponse.getResponse().getSource().get(GCMetricTable.COLUMN_TIMES)).intValue();
+                long count = ((Number) itemResponse.getResponse().getSource().get(GCMetricTable.COUNT.getName())).longValue();
+                long times = ((Number) itemResponse.getResponse().getSource().get(GCMetricTable.TIMES.getName())).intValue();
                 gcTrends.add((int) (count / times));
             } else {
                 gcTrends.add(0);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/MemoryMetricEsUIDAO.java
Patch:
@@ -68,9 +68,9 @@ public void accept(DurationPoint durationPoint) {
         MultiGetResponse multiGetResponse = prepareMultiGet.get();
         for (MultiGetItemResponse response : multiGetResponse.getResponses()) {
             if (response.getResponse().isExists()) {
-                long max = ((Number) response.getResponse().getSource().get(MemoryMetricTable.COLUMN_MAX)).longValue();
-                long used = ((Number) response.getResponse().getSource().get(MemoryMetricTable.COLUMN_USED)).longValue();
-                long times = ((Number) response.getResponse().getSource().get(MemoryMetricTable.COLUMN_TIMES)).longValue();
+                long max = ((Number) response.getResponse().getSource().get(MemoryMetricTable.MAX.getName())).longValue();
+                long used = ((Number) response.getResponse().getSource().get(MemoryMetricTable.USED.getName())).longValue();
+                long times = ((Number) response.getResponse().getSource().get(MemoryMetricTable.TIMES.getName())).longValue();
 
                 trend.getMetrics().add((int) (used / times));
 

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/SegmentEsUIDAO.java
Patch:
@@ -45,7 +45,7 @@ public SegmentEsUIDAO(ElasticSearchClient client) {
     @Override public TraceSegmentObject load(String segmentId) {
         GetResponse response = getClient().prepareGet(SegmentTable.TABLE, segmentId).get();
         Map<String, Object> source = response.getSource();
-        String dataBinaryBase64 = (String)source.get(SegmentTable.COLUMN_DATA_BINARY);
+        String dataBinaryBase64 = (String)source.get(SegmentTable.DATA_BINARY.getName());
         if (StringUtils.isNotEmpty(dataBinaryBase64)) {
             byte[] dataBinary = Base64.getDecoder().decode(dataBinaryBase64);
             try {

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/define/SegmentEsTableDefine.java
Patch:
@@ -32,11 +32,11 @@ public SegmentEsTableDefine() {
     }
 
     @Override public int refreshInterval() {
-        return 10;
+        return 3;
     }
 
     @Override public void initialize() {
-        addColumn(new ElasticSearchColumnDefine(SegmentTable.COLUMN_DATA_BINARY, ElasticSearchColumnDefine.Type.Binary.name()));
-        addColumn(new ElasticSearchColumnDefine(SegmentTable.COLUMN_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
+        addColumn(new ElasticSearchColumnDefine(SegmentTable.DATA_BINARY, ElasticSearchColumnDefine.Type.Binary.name()));
+        addColumn(new ElasticSearchColumnDefine(SegmentTable.TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/StorageModuleH2Provider.java
Patch:
@@ -124,7 +124,6 @@
 import org.apache.skywalking.apm.collector.storage.dao.ui.IInstanceMetricUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.IInstanceUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.IMemoryMetricUIDAO;
-import org.apache.skywalking.apm.collector.storage.dao.ui.IMemoryPoolMetricUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.INetworkAddressUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.ISegmentDurationUIDAO;
 import org.apache.skywalking.apm.collector.storage.dao.ui.ISegmentUIDAO;
@@ -230,7 +229,6 @@
 import org.apache.skywalking.apm.collector.storage.h2.dao.ui.InstanceH2UIDAO;
 import org.apache.skywalking.apm.collector.storage.h2.dao.ui.InstanceMetricH2UIDAO;
 import org.apache.skywalking.apm.collector.storage.h2.dao.ui.MemoryMetricH2UIDAO;
-import org.apache.skywalking.apm.collector.storage.h2.dao.ui.MemoryPoolMetricH2UIDAO;
 import org.apache.skywalking.apm.collector.storage.h2.dao.ui.NetworkAddressH2UIDAO;
 import org.apache.skywalking.apm.collector.storage.h2.dao.ui.SegmentDurationH2UIDAO;
 import org.apache.skywalking.apm.collector.storage.h2.dao.ui.SegmentH2UIDAO;
@@ -395,7 +393,6 @@ private void registerUiDAO() throws ServiceNotProvidedException {
         this.registerServiceImplementation(ICpuMetricUIDAO.class, new CpuMetricH2UIDAO(h2Client));
         this.registerServiceImplementation(IGCMetricUIDAO.class, new GCMetricH2UIDAO(h2Client));
         this.registerServiceImplementation(IMemoryMetricUIDAO.class, new MemoryMetricH2UIDAO(h2Client));
-        this.registerServiceImplementation(IMemoryPoolMetricUIDAO.class, new MemoryPoolMetricH2UIDAO(h2Client));
 
         this.registerServiceImplementation(IGlobalTraceUIDAO.class, new GlobalTraceH2UIDAO(h2Client));
         this.registerServiceImplementation(IInstanceMetricUIDAO.class, new InstanceMetricH2UIDAO(h2Client));

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/base/dao/AbstractPersistenceH2DAO.java
Patch:
@@ -51,7 +51,7 @@ public AbstractPersistenceH2DAO(H2Client client) {
     protected abstract String tableName();
 
     @Override public final STREAM_DATA get(String id) {
-        String sql = SqlBuilder.buildSql(GET_SQL, tableName(), CommonTable.COLUMN_ID);
+        String sql = SqlBuilder.buildSql(GET_SQL, tableName(), CommonTable.ID.getName());
 
         Object[] params = new Object[] {id};
         try (ResultSet resultSet = getClient().executeQuery(sql, params)) {
@@ -68,7 +68,7 @@ public AbstractPersistenceH2DAO(H2Client client) {
 
     @Override public final H2SqlEntity prepareBatchInsert(STREAM_DATA streamData) {
         Map<String, Object> source = streamDataToH2Data(streamData);
-        source.put(CommonTable.COLUMN_ID, streamData.getId());
+        source.put(CommonTable.ID.getName(), streamData.getId());
 
         H2SqlEntity entity = new H2SqlEntity();
 
@@ -82,7 +82,7 @@ public AbstractPersistenceH2DAO(H2Client client) {
         Map<String, Object> source = streamDataToH2Data(streamData);
 
         H2SqlEntity entity = new H2SqlEntity();
-        String sql = SqlBuilder.buildBatchUpdateSql(tableName(), source.keySet(), CommonTable.COLUMN_ID);
+        String sql = SqlBuilder.buildBatchUpdateSql(tableName(), source.keySet(), CommonTable.ID.getName());
         entity.setSql(sql);
         List<Object> values = new ArrayList<>(source.values());
         values.add(streamData.getId());

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/base/define/H2ColumnDefine.java
Patch:
@@ -19,14 +19,15 @@
 package org.apache.skywalking.apm.collector.storage.h2.base.define;
 
 import org.apache.skywalking.apm.collector.core.data.ColumnDefine;
+import org.apache.skywalking.apm.collector.core.data.ColumnName;
 
 /**
  * @author peng-yongsheng
  */
 public class H2ColumnDefine extends ColumnDefine {
 
-    public H2ColumnDefine(String name, String type) {
-        super(name, type);
+    public H2ColumnDefine(ColumnName columnName, String type) {
+        super(columnName, type);
     }
 
     public enum Type {

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/base/define/H2StorageInstaller.java
Patch:
@@ -90,9 +90,9 @@ public class H2StorageInstaller extends StorageInstaller {
         h2TableDefine.getColumnDefines().forEach(columnDefine -> {
             H2ColumnDefine h2ColumnDefine = (H2ColumnDefine)columnDefine;
             if (h2ColumnDefine.getType().equals(H2ColumnDefine.Type.Varchar.name())) {
-                sqlBuilder.append(h2ColumnDefine.getName()).append(" ").append(h2ColumnDefine.getType()).append("(255),");
+                sqlBuilder.append(h2ColumnDefine.getColumnName()).append(" ").append(h2ColumnDefine.getType()).append("(255),");
             } else {
-                sqlBuilder.append(h2ColumnDefine.getName()).append(" ").append(h2ColumnDefine.getType()).append(",");
+                sqlBuilder.append(h2ColumnDefine.getColumnName()).append(" ").append(h2ColumnDefine.getType()).append(",");
             }
         });
         //remove last comma

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/cache/ApplicationH2CacheDAO.java
Patch:
@@ -48,7 +48,7 @@ public ApplicationH2CacheDAO(H2Client client) {
     public int getApplicationIdByCode(String applicationCode) {
         logger.info("get the application id with application code = {}", applicationCode);
         H2Client client = getClient();
-        String sql = SqlBuilder.buildSql(GET_APPLICATION_ID_SQL, ApplicationTable.COLUMN_APPLICATION_ID, ApplicationTable.TABLE, ApplicationTable.COLUMN_APPLICATION_CODE, ApplicationTable.COLUMN_IS_ADDRESS);
+        String sql = SqlBuilder.buildSql(GET_APPLICATION_ID_SQL, ApplicationTable.APPLICATION_ID.getName(), ApplicationTable.TABLE, ApplicationTable.APPLICATION_CODE.getName(), ApplicationTable.IS_ADDRESS.getName());
 
         Object[] params = new Object[] {applicationCode, false};
         try (ResultSet rs = client.executeQuery(sql, params)) {
@@ -64,7 +64,7 @@ public int getApplicationIdByCode(String applicationCode) {
     @Override public Application getApplication(int applicationId) {
         logger.debug("get application code, applicationId: {}", applicationId);
         H2Client client = getClient();
-        String sql = SqlBuilder.buildSql(GET_APPLICATION_SQL, ApplicationTable.COLUMN_APPLICATION_CODE, ApplicationTable.COLUMN_IS_ADDRESS, ApplicationTable.TABLE, ApplicationTable.COLUMN_APPLICATION_ID);
+        String sql = SqlBuilder.buildSql(GET_APPLICATION_SQL, ApplicationTable.APPLICATION_CODE.getName(), ApplicationTable.IS_ADDRESS.getName(), ApplicationTable.TABLE, ApplicationTable.APPLICATION_ID.getName());
         Object[] params = new Object[] {applicationId};
         try (ResultSet rs = client.executeQuery(sql, params)) {
             if (rs.next()) {
@@ -83,7 +83,7 @@ public int getApplicationIdByCode(String applicationCode) {
     @Override public int getApplicationIdByAddressId(int addressId) {
         logger.info("get the application id with address id = {}", addressId);
         H2Client client = getClient();
-        String sql = SqlBuilder.buildSql(GET_APPLICATION_ID_SQL, ApplicationTable.COLUMN_APPLICATION_ID, ApplicationTable.TABLE, ApplicationTable.COLUMN_ADDRESS_ID, ApplicationTable.COLUMN_IS_ADDRESS);
+        String sql = SqlBuilder.buildSql(GET_APPLICATION_ID_SQL, ApplicationTable.APPLICATION_ID.getName(), ApplicationTable.TABLE, ApplicationTable.ADDRESS_ID.getName(), ApplicationTable.IS_ADDRESS.getName());
 
         Object[] params = new Object[] {addressId, true};
         try (ResultSet rs = client.executeQuery(sql, params)) {

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/ApplicationReferenceMetricH2UIDAO.java
Patch:
@@ -24,15 +24,12 @@
 import org.apache.skywalking.apm.collector.storage.h2.base.dao.H2DAO;
 import org.apache.skywalking.apm.collector.storage.table.MetricSource;
 import org.apache.skywalking.apm.collector.storage.ui.common.Step;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * @author peng-yongsheng, clevertension
  */
 public class ApplicationReferenceMetricH2UIDAO extends H2DAO implements IApplicationReferenceMetricUIDAO {
 
-    private final Logger logger = LoggerFactory.getLogger(ApplicationReferenceMetricH2UIDAO.class);
     private static final String APPLICATION_REFERENCE_SQL = "select {8}, {9}, sum({0}) as {0}, sum({1}) as {1}, sum({2}) as {2}, " +
         "sum({3}) as {3}, sum({4}) as {4}, sum({5}) as {5} from {6} where {7} >= ? and {7} <= ? group by {8}, {9} limit 100";
 

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/CpuMetricH2UIDAO.java
Patch:
@@ -49,16 +49,16 @@ public CpuMetricH2UIDAO(H2Client client) {
     @Override public List<Integer> getCPUTrend(int instanceId, Step step, List<DurationPoint> durationPoints) {
         H2Client client = getClient();
         String tableName = TimePyramidTableNameBuilder.build(step, CpuMetricTable.TABLE);
-        String sql = SqlBuilder.buildSql(GET_CPU_METRIC_SQL, tableName, CpuMetricTable.COLUMN_ID);
+        String sql = SqlBuilder.buildSql(GET_CPU_METRIC_SQL, tableName, CpuMetricTable.ID.getName());
 
         List<Integer> cpuTrends = new LinkedList<>();
         durationPoints.forEach(durationPoint -> {
             String id = durationPoint.getPoint() + Const.ID_SPLIT + instanceId;
 
             try (ResultSet rs = client.executeQuery(sql, new String[] {id})) {
                 if (rs.next()) {
-                    double cpuUsed = rs.getDouble(CpuMetricTable.COLUMN_USAGE_PERCENT);
-                    long times = rs.getLong(CpuMetricTable.COLUMN_TIMES);
+                    double cpuUsed = rs.getDouble(CpuMetricTable.USAGE_PERCENT.getName());
+                    long times = rs.getLong(CpuMetricTable.TIMES.getName());
                     cpuTrends.add((int)((cpuUsed / times) * 100));
                 } else {
                     cpuTrends.add(0);

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/GCMetricH2UIDAO.java
Patch:
@@ -60,15 +60,15 @@ private List<Integer> getGCTrend(int instanceId, Step step, List<DurationPoint>
         String tableName = TimePyramidTableNameBuilder.build(step, GCMetricTable.TABLE);
 
         H2Client client = getClient();
-        String sql = SqlBuilder.buildSql(GET_GC_METRIC_SQL, tableName, GCMetricTable.COLUMN_ID);
+        String sql = SqlBuilder.buildSql(GET_GC_METRIC_SQL, tableName, GCMetricTable.ID.getName());
 
         List<Integer> gcTrends = new LinkedList<>();
         durationPoints.forEach(durationPoint -> {
             String id = durationPoint.getPoint() + Const.ID_SPLIT + instanceId + Const.ID_SPLIT + gcPhrase;
             try (ResultSet rs = client.executeQuery(sql, new String[] {id})) {
                 if (rs.next()) {
-                    long count = rs.getLong(GCMetricTable.COLUMN_COUNT);
-                    long times = rs.getLong(GCMetricTable.COLUMN_TIMES);
+                    long count = rs.getLong(GCMetricTable.COUNT.getName());
+                    long times = rs.getLong(GCMetricTable.TIMES.getName());
                     gcTrends.add((int)(count / times));
                 } else {
                     gcTrends.add(0);

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/NetworkAddressH2UIDAO.java
Patch:
@@ -44,7 +44,7 @@ public NetworkAddressH2UIDAO(H2Client client) {
 
     @Override public int getNumOfSpanLayer(int spanLayer) {
         String dynamicSql = "select count({0}) as cnt from {1} where {2} = ?";
-        String sql = SqlBuilder.buildSql(dynamicSql, NetworkAddressTable.COLUMN_NETWORK_ADDRESS, NetworkAddressTable.TABLE, NetworkAddressTable.COLUMN_SPAN_LAYER);
+        String sql = SqlBuilder.buildSql(dynamicSql, NetworkAddressTable.NETWORK_ADDRESS.getName(), NetworkAddressTable.TABLE, NetworkAddressTable.SRC_SPAN_LAYER.getName());
         Object[] params = new Object[] {spanLayer};
 
         try (ResultSet rs = getClient().executeQuery(sql, params)) {

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/SegmentH2UIDAO.java
Patch:
@@ -45,12 +45,12 @@ public SegmentH2UIDAO(H2Client client) {
 
     @Override public TraceSegmentObject load(String segmentId) {
         H2Client client = getClient();
-        String sql = SqlBuilder.buildSql(GET_SEGMENT_SQL, SegmentTable.COLUMN_DATA_BINARY,
-            SegmentTable.TABLE, SegmentTable.COLUMN_ID);
+        String sql = SqlBuilder.buildSql(GET_SEGMENT_SQL, SegmentTable.DATA_BINARY.getName(),
+            SegmentTable.TABLE, SegmentTable.ID.getName());
         Object[] params = new Object[] {segmentId};
         try (ResultSet rs = client.executeQuery(sql, params)) {
             if (rs.next()) {
-                byte[] dataBinary = rs.getBytes(SegmentTable.COLUMN_DATA_BINARY);
+                byte[] dataBinary = rs.getBytes(SegmentTable.DATA_BINARY.getName());
                 try {
                     return TraceSegmentObject.parseFrom(dataBinary);
                 } catch (InvalidProtocolBufferException e) {

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/define/SegmentH2TableDefine.java
Patch:
@@ -32,8 +32,8 @@ public SegmentH2TableDefine() {
     }
 
     @Override public void initialize() {
-        addColumn(new H2ColumnDefine(SegmentTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
-        addColumn(new H2ColumnDefine(SegmentTable.COLUMN_DATA_BINARY, H2ColumnDefine.Type.BINARY.name()));
-        addColumn(new H2ColumnDefine(SegmentTable.COLUMN_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
+        addColumn(new H2ColumnDefine(SegmentTable.ID, H2ColumnDefine.Type.Varchar.name()));
+        addColumn(new H2ColumnDefine(SegmentTable.DATA_BINARY, H2ColumnDefine.Type.BINARY.name()));
+        addColumn(new H2ColumnDefine(SegmentTable.TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializerTest.java
Patch:
@@ -19,10 +19,10 @@
 
 package org.apache.skywalking.apm.agent.core.conf;
 
-import org.junit.AfterClass;
-import org.junit.Test;
 import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;
 import org.apache.skywalking.apm.agent.core.logging.core.LogLevel;
+import org.junit.AfterClass;
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/test/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/mock/RegisterMock.java
Patch:
@@ -152,6 +152,7 @@ private void registerProvider() throws InterruptedException {
     private void registerServiceName(ServiceNameCollection.Builder serviceNameCollection) throws InterruptedException {
         ServiceNameMappingCollection serviceNameMappingCollection;
         do {
+            logger.debug("register service name: {}", serviceNameCollection.getElements(0).getServiceName());
             serviceNameMappingCollection = serviceNameDiscoveryServiceBlockingStub.discovery(serviceNameCollection.build());
             logger.debug("service name mapping collection size: {}", serviceNameMappingCollection.getElementsCount());
             if (serviceNameMappingCollection.getElementsCount() > 0) {

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/standardization/ReferenceIdExchanger.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.skywalking.apm.collector.analysis.segment.parser.define.decorator.ReferenceDecorator;
 import org.apache.skywalking.apm.collector.cache.CacheModule;
 import org.apache.skywalking.apm.collector.cache.service.InstanceCacheService;
+import org.apache.skywalking.apm.collector.core.annotations.trace.GraphComputingMetric;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.StringUtils;
@@ -56,6 +57,7 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {
         this.instanceCacheService = moduleManager.find(CacheModule.NAME).getService(InstanceCacheService.class);
     }
 
+    @GraphComputingMetric(name = "/segment/parse/exchange/referenceIdExchanger")
     @Override public boolean exchange(ReferenceDecorator standardBuilder, int applicationId) {
         if (standardBuilder.getEntryServiceId() == 0) {
             String entryServiceName = StringUtils.isNotEmpty(standardBuilder.getEntryServiceName()) ? standardBuilder.getEntryServiceName() : Const.DOMAIN_OPERATION_NAME;

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/standardization/SpanIdExchanger.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.collector.analysis.register.define.service.INetworkAddressIDService;
 import org.apache.skywalking.apm.collector.analysis.register.define.service.IServiceNameService;
 import org.apache.skywalking.apm.collector.analysis.segment.parser.define.decorator.SpanDecorator;
+import org.apache.skywalking.apm.collector.core.annotations.trace.GraphComputingMetric;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.StringUtils;
@@ -52,6 +53,7 @@ private SpanIdExchanger(ModuleManager moduleManager) {
         this.networkAddressIDService = moduleManager.find(AnalysisRegisterModule.NAME).getService(INetworkAddressIDService.class);
     }
 
+    @GraphComputingMetric(name = "/segment/parse/exchange/spanIdExchanger")
     @Override public boolean exchange(SpanDecorator standardBuilder, int applicationId) {
         if (standardBuilder.getPeerId() == 0 && StringUtils.isNotEmpty(standardBuilder.getPeer())) {
             int peerId = networkAddressIDService.getOrCreate(standardBuilder.getPeer());

File: apm-collector/apm-collector-cache/collector-cache-define/src/main/java/org/apache/skywalking/apm/collector/cache/service/NetworkAddressCacheService.java
Patch:
@@ -19,14 +19,13 @@
 package org.apache.skywalking.apm.collector.cache.service;
 
 import org.apache.skywalking.apm.collector.core.module.Service;
+import org.apache.skywalking.apm.collector.storage.table.register.NetworkAddress;
 
 /**
  * @author peng-yongsheng
  */
 public interface NetworkAddressCacheService extends Service {
     int getAddressId(String networkAddress);
 
-    String getAddress(int addressId);
-
-    boolean compare(int addressId, int spanLayer, int serverType);
+    NetworkAddress getAddress(int addressId);
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/cache/INetworkAddressCacheDAO.java
Patch:
@@ -27,7 +27,5 @@
 public interface INetworkAddressCacheDAO extends DAO {
     int getAddressId(String networkAddress);
 
-    String getAddressById(int addressId);
-
-    NetworkAddress getAddress(int addressId);
+    NetworkAddress getAddressById(int addressId);
 }

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/BlockingCallClientInterceptor.java
Patch:
@@ -75,7 +75,7 @@ protected CallListener(Listener delegate) {
 
         @Override public void onClose(Status status, Metadata trailers) {
             delegate().onClose(status, trailers);
-            if (status.isOk()) {
+            if (!status.isOk()) {
                 AbstractSpan activeSpan = ContextManager.activeSpan();
                 activeSpan.errorOccurred().log(status.getCause());
                 Tags.STATUS_CODE.set(activeSpan, status.getCode().name());

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ServiceMetricEsUIDAO.java
Patch:
@@ -73,10 +73,8 @@ public void accept(DurationPoint durationPoint) {
         for (MultiGetItemResponse response : multiGetResponse.getResponses()) {
             if (response.getResponse().isExists()) {
                 long calls = ((Number) response.getResponse().getSource().get(ServiceMetricTable.COLUMN_TRANSACTION_CALLS)).longValue();
-                long errorCalls = ((Number) response.getResponse().getSource().get(ServiceMetricTable.COLUMN_TRANSACTION_ERROR_CALLS)).longValue();
                 long durationSum = ((Number) response.getResponse().getSource().get(ServiceMetricTable.COLUMN_TRANSACTION_DURATION_SUM)).longValue();
-                long errorDurationSum = ((Number) response.getResponse().getSource().get(ServiceMetricTable.COLUMN_TRANSACTION_ERROR_DURATION_SUM)).longValue();
-                trends.add((int) ((durationSum - errorDurationSum) / (calls - errorCalls)));
+                trends.add((int) (durationSum / calls));
             } else {
                 trends.add(0);
             }

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/InstanceMetricH2UIDAO.java
Patch:
@@ -90,10 +90,8 @@ public InstanceMetricH2UIDAO(H2Client client) {
             try (ResultSet rs = client.executeQuery(sql, new Object[] {id})) {
                 if (rs.next()) {
                     long callTimes = rs.getLong(InstanceMetricTable.COLUMN_TRANSACTION_CALLS);
-                    long errorCallTimes = rs.getLong(InstanceMetricTable.COLUMN_TRANSACTION_ERROR_CALLS);
                     long durationSum = rs.getLong(InstanceMetricTable.COLUMN_TRANSACTION_DURATION_SUM);
-                    long errorDurationSum = rs.getLong(InstanceMetricTable.COLUMN_BUSINESS_TRANSACTION_ERROR_DURATION_SUM);
-                    responseTimeTrends.add((int)((durationSum - errorDurationSum) / (callTimes - errorCallTimes)));
+                    responseTimeTrends.add((int) (durationSum / callTimes));
                 } else {
                     responseTimeTrends.add(0);
                 }

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/ServiceMetricH2UIDAO.java
Patch:
@@ -65,10 +65,8 @@ public List<Integer> getServiceResponseTimeTrend(int serviceId, Step step, List<
             try (ResultSet rs = client.executeQuery(sql, new String[] {id})) {
                 if (rs.next()) {
                     long calls = rs.getLong(ServiceMetricTable.COLUMN_TRANSACTION_CALLS);
-                    long errorCalls = rs.getLong(ServiceMetricTable.COLUMN_TRANSACTION_ERROR_CALLS);
                     long durationSum = rs.getLong(ServiceMetricTable.COLUMN_TRANSACTION_DURATION_SUM);
-                    long errorDurationSum = rs.getLong(ServiceMetricTable.COLUMN_TRANSACTION_ERROR_DURATION_SUM);
-                    trends.add((int)((durationSum - errorDurationSum) / (calls - errorCalls)));
+                    trends.add((int) (durationSum / calls));
                 } else {
                     trends.add(0);
                 }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServiceTopologyService.java
Patch:
@@ -86,7 +86,7 @@ public Topology getServiceTopology(Step step, int serviceId, long startTimeBucke
             Call call = new Call();
             call.setSource(referenceMetric.getSource());
             call.setTarget(referenceMetric.getTarget());
-            call.setAvgResponseTime((referenceMetric.getDurations() - referenceMetric.getErrorDurations()) / (referenceMetric.getCalls() - referenceMetric.getErrorCalls()));
+            call.setAvgResponseTime(referenceMetric.getDurations() / referenceMetric.getCalls());
             call.setCallType(components.getOrDefault(serviceNameCacheService.get(referenceMetric.getTarget()).getApplicationId(), Const.UNKNOWN));
             try {
                 int applicationId = serviceNameCacheService.get(referenceMetric.getTarget()).getApplicationId();

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/TopologyBuilder.java
Patch:
@@ -97,7 +97,7 @@ Topology build(List<IApplicationComponentUIDAO.ApplicationComponent> application
             } catch (ParseException e) {
                 logger.error(e.getMessage(), e);
             }
-            applicationNode.setAvgResponseTime((applicationMetric.getDurations() - applicationMetric.getErrorDurations()) / (applicationMetric.getCalls() - applicationMetric.getErrorCalls()));
+            applicationNode.setAvgResponseTime(applicationMetric.getDurations() / applicationMetric.getCalls());
             applicationNode.setApdex(ApdexCalculator.INSTANCE.calculate(applicationMetric.getSatisfiedCount(), applicationMetric.getToleratingCount(), applicationMetric.getFrustratedCount()));
             applicationNode.setAlarm(false);
             try {
@@ -168,7 +168,7 @@ Topology build(List<IApplicationComponentUIDAO.ApplicationComponent> application
             } catch (ParseException e) {
                 logger.error(e.getMessage(), e);
             }
-            call.setAvgResponseTime((referenceMetric.getDurations() - referenceMetric.getErrorDurations()) / (referenceMetric.getCalls() - referenceMetric.getErrorCalls()));
+            call.setAvgResponseTime(referenceMetric.getDurations() / referenceMetric.getCalls());
             calls.add(call);
         });
 
@@ -215,7 +215,7 @@ Topology build(List<IApplicationComponentUIDAO.ApplicationComponent> application
             } catch (ParseException e) {
                 logger.error(e.getMessage(), e);
             }
-            call.setAvgResponseTime((referenceMetric.getDurations() - referenceMetric.getErrorDurations()) / (referenceMetric.getCalls() - referenceMetric.getErrorCalls()));
+            call.setAvgResponseTime(referenceMetric.getDurations() / referenceMetric.getCalls());
             calls.add(call);
         });
 

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jedis/v2/define/JedisClusterInstrumentation.java
Patch:
@@ -35,7 +35,7 @@ public class JedisClusterInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ARGUMENT_TYPE_NAME = "redis.clients.jedis.HostAndPort";
     private static final String ENHANCE_CLASS = "redis.clients.jedis.JedisCluster";
-    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "Jorg.apache.skywalking.apm.plugin.jedis.v2.edisClusterConstructorWithListHostAndPortArgInterceptor";
+    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisClusterConstructorWithListHostAndPortArgInterceptor";
     private static final String METHOD_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisMethodInterceptor";
     private static final String CONSTRUCTOR_WITH_HOSTANDPORT_ARG_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisClusterConstructorWithHostAndPortArgInterceptor";
 

File: apm-collector/apm-collector-component/server-component/src/main/java/org/apache/skywalking/apm/collector/server/Server.java
Patch:
@@ -32,8 +32,6 @@ public interface Server {
 
     void start() throws ServerException;
 
-    void addHandler(ServerHandler handler);
-
     boolean isSSLOpen();
 
     boolean isStatusEqual(Server target);

File: apm-collector/apm-collector-grpc-manager/collector-grpc-manager-define/src/main/java/org/apache/skywalking/apm/collector/grpc/manager/service/GRPCManagerService.java
Patch:
@@ -20,15 +20,15 @@
 package org.apache.skywalking.apm.collector.grpc.manager.service;
 
 import org.apache.skywalking.apm.collector.core.module.Service;
-import org.apache.skywalking.apm.collector.server.Server;
+import org.apache.skywalking.apm.collector.server.grpc.GRPCServer;
 
 import java.io.File;
 
 /**
  * @author peng-yongsheng, wusheng
  */
 public interface GRPCManagerService extends Service {
-    Server createIfAbsent(String host, int port) throws ServerCanNotBeCreatedException;
+    GRPCServer createIfAbsent(String host, int port) throws ServerCanNotBeCreatedException;
 
-    Server createIfAbsent(String host, int port, File certChainFile, File privateKeyFile) throws ServerCanNotBeCreatedException;
+    GRPCServer createIfAbsent(String host, int port, File certChainFile, File privateKeyFile) throws ServerCanNotBeCreatedException;
 }

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/InstanceHeartBeatEsPersistenceDAO.java
Patch:
@@ -61,7 +61,7 @@ public InstanceHeartBeatEsPersistenceDAO(ElasticSearchClient client) {
     }
 
     @Override public IndexRequestBuilder prepareBatchInsert(Instance data) {
-        throw new UnexpectedException("There is no need to merge stream data with database data.");
+        throw new UnexpectedException("Received an instance heart beat message under instance id= " + data.getId() + " , which doesn't exist.");
     }
 
     @Override public UpdateRequestBuilder prepareBatchUpdate(Instance data) {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/PluginCfg.java
Patch:
@@ -43,7 +43,7 @@ void load(InputStream input) throws IOException {
             String pluginDefine = null;
             while ((pluginDefine = reader.readLine()) != null) {
                 try {
-                    if (pluginDefine == null || pluginDefine.trim().length() == 0) {
+                    if (pluginDefine == null || pluginDefine.trim().length() == 0 || pluginDefine.startsWith("#")) {
                         continue;
                     }
                     PluginDefine plugin = PluginDefine.build(pluginDefine);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java
Patch:
@@ -73,8 +73,8 @@ public static void initialize() throws ConfigNotFoundException, AgentPackageNotF
         if (StringUtil.isEmpty(Config.Agent.APPLICATION_CODE)) {
             throw new ExceptionInInitializerError("`agent.application_code` is missing.");
         }
-        if (StringUtil.isEmpty(Config.Collector.SERVERS)) {
-            throw new ExceptionInInitializerError("`collector.servers` is missing.");
+        if (StringUtil.isEmpty(Config.Collector.SERVERS) && StringUtil.isEmpty(Config.Collector.DIRECT_SERVERS)) {
+            throw new ExceptionInInitializerError("`collector.direct_servers` and `collector.servers` cannot be empty at the same time.");
         }
 
         IS_INIT_COMPLETED = true;

File: apm-collector/apm-collector-cluster/collector-cluster-define/src/main/java/org/apache/skywalking/apm/collector/cluster/DataMonitor.java
Patch:
@@ -26,8 +26,6 @@
  * @author peng-yongsheng
  */
 public interface DataMonitor {
-    String BASE_CATALOG = "/skywalking";
-
     void setClient(Client client);
 
     void addListener(ClusterModuleListener listener) throws ClientException;
@@ -39,4 +37,6 @@ public interface DataMonitor {
     void createPath(String path) throws ClientException;
 
     void setData(String path, String value) throws ClientException;
+
+    String getBaseCatalog();
 }

File: apm-collector/apm-collector-configuration/collector-configuration-define/src/main/java/org/apache/skywalking/apm/collector/configuration/ConfigurationModule.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.skywalking.apm.collector.configuration.service.IApdexThresholdService;
 import org.apache.skywalking.apm.collector.configuration.service.IApplicationAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IApplicationReferenceAlarmRuleConfig;
+import org.apache.skywalking.apm.collector.configuration.service.ICollectorConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IInstanceAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IInstanceReferenceAlarmRuleConfig;
 import org.apache.skywalking.apm.collector.configuration.service.IServiceAlarmRuleConfig;
@@ -40,6 +41,7 @@ public class ConfigurationModule extends Module {
 
     @Override public Class[] services() {
         return new Class[] {
+            ICollectorConfig.class,
             IApdexThresholdService.class,
             IServiceAlarmRuleConfig.class, IInstanceAlarmRuleConfig.class, IApplicationAlarmRuleConfig.class,
             IServiceReferenceAlarmRuleConfig.class, IInstanceReferenceAlarmRuleConfig.class, IApplicationReferenceAlarmRuleConfig.class};

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/util/Const.java
Patch:
@@ -35,4 +35,5 @@ public class Const {
     public static final String EMPTY_STRING = "";
     public static final String FILE_SUFFIX = "sw";
     public static final int SPAN_TYPE_VIRTUAL = 9;
+    public static final String DOMAIN_OPERATION_NAME = "{domain}";
 }

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/InstanceEsUIDAO.java
Patch:
@@ -160,7 +160,7 @@ private Long heartBeatTime(AbstractQueryBuilder queryBuilder) {
 
     @Override
     public List<AppServerInfo> searchServer(String keyword, long startSecondTimeBucket, long endSecondTimeBucket) {
-        logger.debug("get instances info, keyword: {}, start: {}, end: {}", keyword, startSecondTimeBucket, endSecondTimeBucket);
+        logger.debug("get instances info, keyword: {}, startSecondTimeBucket: {}, endSecondTimeBucket: {}", keyword, startSecondTimeBucket, endSecondTimeBucket);
         SearchRequestBuilder searchRequestBuilder = getClient().prepareSearch(InstanceTable.TABLE);
         searchRequestBuilder.setTypes(InstanceTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
@@ -172,7 +172,6 @@ public List<AppServerInfo> searchServer(String keyword, long startSecondTimeBuck
         }
         boolQuery.must().add(QueryBuilders.termQuery(InstanceTable.COLUMN_IS_ADDRESS, BooleanUtils.FALSE));
 
-        //TODO second
         BoolQueryBuilder timeBoolQuery = QueryBuilders.boolQuery();
         timeBoolQuery.should().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_REGISTER_TIME).gte(startSecondTimeBucket).lte(endSecondTimeBucket));
         timeBoolQuery.should().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_HEARTBEAT_TIME).gte(startSecondTimeBucket).lte(endSecondTimeBucket));

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServiceTopologyService.java
Patch:
@@ -73,8 +73,8 @@ public Topology getServiceTopology(Step step, int serviceId, long startTimeBucke
         Map<Integer, String> components = new HashMap<>();
         applicationComponents.forEach(component -> components.put(component.getApplicationId(), ComponentsDefine.getInstance().getComponentName(component.getComponentId())));
 
-        List<IServiceReferenceMetricUIDAO.ServiceReferenceMetric> referenceMetrics = serviceReferenceMetricUIDAO.getFrontServices(step, startTimeBucket, endTimeBucket, MetricSource.Caller, serviceId);
-        referenceMetrics.addAll(serviceReferenceMetricUIDAO.getBehindServices(step, startTimeBucket, endTimeBucket, MetricSource.Callee, serviceId));
+        List<IServiceReferenceMetricUIDAO.ServiceReferenceMetric> referenceMetrics = serviceReferenceMetricUIDAO.getFrontServices(step, startTimeBucket, endTimeBucket, MetricSource.Callee, serviceId);
+        referenceMetrics.addAll(serviceReferenceMetricUIDAO.getBehindServices(step, startTimeBucket, endTimeBucket, MetricSource.Caller, serviceId));
 
         Set<Integer> nodeIds = new HashSet<>();
 

File: apm-application-toolkit/apm-toolkit-opentracing/src/main/java/org/apache/skywalking/apm/toolkit/opentracing/SkywalkingContext.java
Patch:
@@ -20,6 +20,7 @@
 package org.apache.skywalking.apm.toolkit.opentracing;
 
 import io.opentracing.SpanContext;
+
 import java.util.Map;
 
 /**
@@ -30,7 +31,7 @@
 public class SkywalkingContext implements SpanContext {
     public static final SkywalkingContext INSTANCE = new SkywalkingContext();
 
-    private SkywalkingContext() {
+    public SkywalkingContext() {
     }
 
     @Override

File: apm-application-toolkit/apm-toolkit-opentracing/src/main/java/org/apache/skywalking/apm/toolkit/opentracing/SkywalkingSpanBuilder.java
Patch:
@@ -26,6 +26,7 @@
 import io.opentracing.SpanContext;
 import io.opentracing.Tracer;
 import io.opentracing.tag.Tags;
+
 import java.util.LinkedList;
 import java.util.List;
 
@@ -94,7 +95,7 @@ public Tracer.SpanBuilder withTag(String key, String value) {
                 isExit = false;
             }
         } else if (Tags.PEER_HOST_IPV4.getKey().equals(key) || Tags.PEER_HOST_IPV6.getKey().equals(key)
-            || Tags.PEER_HOSTNAME.getKey().equals(key)) {
+                || Tags.PEER_HOSTNAME.getKey().equals(key)) {
             peer = value;
         } else if (Tags.PEER_SERVICE.getKey().equals(key)) {
             operationName = value;

File: apm-application-toolkit/apm-toolkit-opentracing/src/main/java/org/apache/skywalking/apm/toolkit/opentracing/SkywalkingTracer.java
Patch:
@@ -43,7 +43,7 @@ public <C> void inject(SpanContext spanContext, Format<C> format, C carrier) {
     @NeedSnifferActivation
     @Override
     public <C> SpanContext extract(Format<C> format, C carrier) {
-        return new TextMapContext();
+        return new SkywalkingContext();
     }
 
     @Override

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/utils/TimePyramidTableNameBuilder.java
Patch:
@@ -39,7 +39,7 @@ public static String build(Step step, String tableName) {
                 tableName = tableName + Const.ID_SPLIT + TimePyramid.Day.getName();
                 break;
             case HOUR:
-                tableName = tableName + Const.ID_SPLIT + TimePyramid.Day.getName();
+                tableName = tableName + Const.ID_SPLIT + TimePyramid.Hour.getName();
                 break;
             case MINUTE:
                 tableName = tableName + Const.ID_SPLIT + TimePyramid.Minute.getName();

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/InstanceEsUIDAO.java
Patch:
@@ -106,6 +106,7 @@ private Long heartBeatTime(AbstractQueryBuilder queryBuilder) {
 
         BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
 
+        //TODO second
         BoolQueryBuilder timeBoolQuery = QueryBuilders.boolQuery();
         timeBoolQuery.should().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_REGISTER_TIME).gte(startSecondTimeBucket).lte(endSecondTimeBucket));
         timeBoolQuery.should().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_HEARTBEAT_TIME).gte(startSecondTimeBucket).lte(endSecondTimeBucket));
@@ -171,6 +172,7 @@ public List<AppServerInfo> searchServer(String keyword, long startSecondTimeBuck
         }
         boolQuery.must().add(QueryBuilders.termQuery(InstanceTable.COLUMN_IS_ADDRESS, BooleanUtils.FALSE));
 
+        //TODO second
         BoolQueryBuilder timeBoolQuery = QueryBuilders.boolQuery();
         timeBoolQuery.should().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_REGISTER_TIME).gte(startSecondTimeBucket).lte(endSecondTimeBucket));
         timeBoolQuery.should().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_HEARTBEAT_TIME).gte(startSecondTimeBucket).lte(endSecondTimeBucket));
@@ -197,6 +199,7 @@ public List<AppServerInfo> getAllServer(int applicationId, long startSecondTimeB
         boolQuery.must().add(QueryBuilders.termQuery(InstanceTable.COLUMN_APPLICATION_ID, applicationId));
         boolQuery.must().add(QueryBuilders.termQuery(InstanceTable.COLUMN_IS_ADDRESS, BooleanUtils.FALSE));
 
+        //TODO second
         BoolQueryBuilder timeBoolQuery = QueryBuilders.boolQuery();
         timeBoolQuery.should().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_REGISTER_TIME).gte(startSecondTimeBucket).lte(endSecondTimeBucket));
         timeBoolQuery.should().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_HEARTBEAT_TIME).gte(startSecondTimeBucket).lte(endSecondTimeBucket));

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/SegmentDurationEsUIDAO.java
Patch:
@@ -57,6 +57,7 @@ public TraceBrief loadTop(long startSecondTimeBucket, long endSecondTimeBucket,
         List<QueryBuilder> mustQueryList = boolQueryBuilder.must();
 
         if (startSecondTimeBucket != 0 && endSecondTimeBucket != 0) {
+            //TODO second
             mustQueryList.add(QueryBuilders.rangeQuery(SegmentDurationTable.COLUMN_TIME_BUCKET).gte(startSecondTimeBucket).lte(endSecondTimeBucket));
         }
 

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/query/AlarmQuery.java
Patch:
@@ -51,8 +51,8 @@ private AlarmService getAlarmService() {
 
     public Alarm loadAlarmList(String keyword, AlarmType alarmType, Duration duration,
         Pagination paging) throws ParseException {
-        long startTimeBucket = DurationUtils.INSTANCE.durationToSecondTimeBucket(duration.getStep(), duration.getStart()) / 100;
-        long endTimeBucket = DurationUtils.INSTANCE.durationToSecondTimeBucket(duration.getStep(), duration.getEnd()) / 100;
+        long startTimeBucket = DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(duration.getStep(), duration.getStart()) / 100;
+        long endTimeBucket = DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(duration.getStep(), duration.getEnd()) / 100;
 
         PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(paging);
 

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/query/TraceQuery.java
Patch:
@@ -68,8 +68,8 @@ public TraceBrief queryBasicTraces(TraceQueryCondition condition) throws ParseEx
         if (StringUtils.isNotEmpty(condition.getTraceId())) {
             traceId = condition.getTraceId();
         } else if (ObjectUtils.isNotEmpty(condition.getQueryDuration())) {
-            startSecondTimeBucket = DurationUtils.INSTANCE.durationToSecondTimeBucket(condition.getQueryDuration().getStep(), condition.getQueryDuration().getStart());
-            endSecondTimeBucket = DurationUtils.INSTANCE.durationToSecondTimeBucket(condition.getQueryDuration().getStep(), condition.getQueryDuration().getEnd());
+            startSecondTimeBucket = DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(condition.getQueryDuration().getStep(), condition.getQueryDuration().getStart());
+            endSecondTimeBucket = DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(condition.getQueryDuration().getStep(), condition.getQueryDuration().getEnd());
         } else {
             throw new UnexpectedException("The condition must contains either queryDuration or traceId.");
         }

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/test/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/mock/RegisterMock.java
Patch:
@@ -99,7 +99,7 @@ private void registerConsumer() throws InterruptedException {
         serviceNameElement.setSrcSpanType(SpanType.Exit);
         serviceNameCollection.addElements(serviceNameElement);
 
-        registerServiceName(serviceNameCollection);
+//        registerServiceName(serviceNameCollection);
 
         heartBeatScheduled(instanceMapping.getApplicationInstanceId());
     }
@@ -144,7 +144,7 @@ private void registerProvider() throws InterruptedException {
         serviceNameElement.setSrcSpanType(SpanType.Entry);
         serviceNameCollection.addElements(serviceNameElement);
 
-        registerServiceName(serviceNameCollection);
+//        registerServiceName(serviceNameCollection);
 
         heartBeatScheduled(instanceMapping.getApplicationInstanceId());
     }

File: apm-collector/apm-collector-remote/collector-remote-define/src/main/java/org/apache/skywalking/apm/collector/remote/service/RemoteDataRegisterService.java
Patch:
@@ -28,6 +28,6 @@ public interface RemoteDataRegisterService extends Service {
     void register(Class<? extends RemoteData> dataClass, RemoteDataInstanceCreator instanceCreator);
 
     interface RemoteDataInstanceCreator<REMOTE_DATA extends RemoteData> {
-        REMOTE_DATA createInstance(String id);
+        REMOTE_DATA createInstance();
     }
 }

File: apm-collector/apm-collector-remote/collector-remote-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/remote/grpc/handler/RemoteCommonServiceHandler.java
Patch:
@@ -21,7 +21,6 @@
 import io.grpc.stub.StreamObserver;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
 import org.apache.skywalking.apm.collector.core.graph.Next;
-import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.remote.grpc.proto.Empty;
 import org.apache.skywalking.apm.collector.remote.grpc.proto.RemoteCommonServiceGrpc;
 import org.apache.skywalking.apm.collector.remote.grpc.proto.RemoteData;
@@ -58,7 +57,7 @@ public RemoteCommonServiceHandler(RemoteDataInstanceCreatorGetter instanceCreato
                 RemoteData remoteData = message.getRemoteData();
 
                 try {
-                    org.apache.skywalking.apm.collector.core.data.RemoteData output = instanceCreatorGetter.getInstanceCreator(remoteDataId).createInstance(Const.EMPTY_STRING);
+                    org.apache.skywalking.apm.collector.core.data.RemoteData output = instanceCreatorGetter.getInstanceCreator(remoteDataId).createInstance();
                     service.deserialize(remoteData, output);
                     Next next = GraphManager.INSTANCE.findGraph(graphId).toFinder().findNext(nodeId);
                     next.execute(output);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/spring-cloud-feign-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/netflix/feign/v11/define/NetflixFeignInstrumentation.java
Patch:
@@ -37,7 +37,7 @@ public class NetflixFeignInstrumentation extends ClassInstanceMethodsEnhancePlug
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spring.cloud.netflix.feign.v11.DefaultHttpClientInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.feign.http.v9.DefaultHttpClientInterceptor";
 
     @Override protected ClassMatch enhanceClass() {
         return byName(ENHANCE_CLASS);

File: apm-collector/apm-collector-analysis/analysis-register/register-define/src/main/java/org/apache/skywalking/apm/collector/analysis/register/define/service/IInstanceIDService.java
Patch:
@@ -26,7 +26,5 @@
 public interface IInstanceIDService extends Service {
     int getOrCreateByAgentUUID(int applicationId, String agentUUID, long registerTime, String osInfo);
 
-    void recover(int instanceId, int applicationId, long registerTime, String osInfo);
-
     int getOrCreateByAddressId(int applicationId, int addressId, long registerTime);
 }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/utils/PaginationUtils.java
Patch:
@@ -28,7 +28,7 @@ public enum PaginationUtils {
 
     public Page exchange(Pagination paging) {
         int limit = paging.getPageSize();
-        int from = paging.getPageSize() * (paging.getPageNum() - 1);
+        int from = paging.getPageSize() * ((paging.getPageNum() == 0 ? 1 : paging.getPageNum()) - 1);
 
         return new Page(from, limit);
     }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/query/AlarmQuery.java
Patch:
@@ -58,11 +58,11 @@ public Alarm loadAlarmList(String keyword, AlarmType alarmType, Duration duratio
 
         switch (alarmType) {
             case APPLICATION:
-                return getAlarmService().loadApplicationAlarmList(keyword, startTimeBucket, endTimeBucket, page.getLimit(), page.getFrom());
+                return getAlarmService().loadApplicationAlarmList(keyword, duration.getStep(), startTimeBucket, endTimeBucket, page.getLimit(), page.getFrom());
             case SERVER:
-                return getAlarmService().loadInstanceAlarmList(keyword, startTimeBucket, endTimeBucket, page.getLimit(), page.getFrom());
+                return getAlarmService().loadInstanceAlarmList(keyword, duration.getStep(), startTimeBucket, endTimeBucket, page.getLimit(), page.getFrom());
             case SERVICE:
-                return getAlarmService().loadServiceAlarmList(keyword, startTimeBucket, endTimeBucket, page.getLimit(), page.getFrom());
+                return getAlarmService().loadServiceAlarmList(keyword, duration.getStep(), startTimeBucket, endTimeBucket, page.getLimit(), page.getFrom());
             default:
                 return new Alarm();
         }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/query/TraceQuery.java
Patch:
@@ -65,11 +65,11 @@ public TraceBrief queryBasicTraces(TraceQueryCondition condition) throws ParseEx
         long endSecondTimeBucket = 0;
         String traceId = Const.EMPTY_STRING;
 
-        if (ObjectUtils.isNotEmpty(condition.getQueryDuration())) {
+        if (StringUtils.isNotEmpty(condition.getTraceId())) {
+            traceId = condition.getTraceId();
+        } else if (ObjectUtils.isNotEmpty(condition.getQueryDuration())) {
             startSecondTimeBucket = DurationUtils.INSTANCE.durationToSecondTimeBucket(condition.getQueryDuration().getStep(), condition.getQueryDuration().getStart());
             endSecondTimeBucket = DurationUtils.INSTANCE.durationToSecondTimeBucket(condition.getQueryDuration().getStep(), condition.getQueryDuration().getEnd());
-        } else if (StringUtils.isNotEmpty(condition.getTraceId())) {
-            traceId = condition.getTraceId();
         } else {
             throw new UnexpectedException("The condition must contains either queryDuration or traceId.");
         }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ApplicationTopologyService.java
Patch:
@@ -82,6 +82,6 @@ public Topology getApplicationTopology(Step step, int applicationId, long startT
 
         TopologyBuilder builder = new TopologyBuilder(moduleManager);
 
-        return builder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, startTimeBucket, endTimeBucket, startSecondTimeBucket, endSecondTimeBucket);
+        return builder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, step, startTimeBucket, endTimeBucket, startSecondTimeBucket, endSecondTimeBucket);
     }
 }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ClusterTopologyService.java
Patch:
@@ -72,6 +72,6 @@ public Topology getClusterTopology(Step step, long startTimeBucket, long endTime
 
         TopologyBuilder builder = new TopologyBuilder(moduleManager);
 
-        return builder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, startTimeBucket, endTimeBucket, startSecondTimeBucket, endSecondTimeBucket);
+        return builder.build(applicationComponents, applicationMappings, applicationMetrics, callerReferenceMetric, calleeReferenceMetric, step, startTimeBucket, endTimeBucket, startSecondTimeBucket, endSecondTimeBucket);
     }
 }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/TopologyBuilder.java
Patch:
@@ -108,14 +108,14 @@ Topology build(List<IApplicationComponentUIDAO.ApplicationComponent> application
 
             applicationNode.setNumOfServer(serverService.getAllServer(applicationId, startSecondTimeBucket, endSecondTimeBucket).size());
             try {
-                Alarm alarm = alarmService.loadInstanceAlarmList(Const.EMPTY_STRING, startTimeBucket, endTimeBucket, 1000, 0);
+                Alarm alarm = alarmService.loadInstanceAlarmList(Const.EMPTY_STRING, step, startTimeBucket, endTimeBucket, 1000, 0);
                 applicationNode.setNumOfServerAlarm(alarm.getItems().size());
             } catch (ParseException e) {
                 logger.error(e.getMessage(), e);
             }
 
             try {
-                Alarm alarm = alarmService.loadServiceAlarmList(Const.EMPTY_STRING, startTimeBucket, endTimeBucket, 1000, 0);
+                Alarm alarm = alarmService.loadServiceAlarmList(Const.EMPTY_STRING, step, startTimeBucket, endTimeBucket, 1000, 0);
                 applicationNode.setNumOfServiceAlarm(alarm.getItems().size());
             } catch (ParseException e) {
                 logger.error(e.getMessage(), e);

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/ServiceNameDiscoveryServiceHandler.java
Patch:
@@ -54,7 +54,7 @@ public ServiceNameDiscoveryServiceHandler(ModuleManager moduleManager) {
             int applicationId = serviceNameElement.getApplicationId();
             String serviceName = serviceNameElement.getServiceName();
             int srcSpanType = serviceNameElement.getSrcSpanTypeValue();
-            int serviceId = serviceNameService.getOrCreate(applicationId, srcSpanType, serviceName);
+            int serviceId = serviceNameService.get(applicationId, srcSpanType, serviceName);
 
             if (serviceId != 0) {
                 ServiceNameMappingElement.Builder mappingElement = ServiceNameMappingElement.newBuilder();

File: apm-collector/apm-collector-analysis/analysis-register/register-define/src/main/java/org/apache/skywalking/apm/collector/analysis/register/define/service/IServiceNameService.java
Patch:
@@ -24,5 +24,8 @@
  * @author peng-yongsheng
  */
 public interface IServiceNameService extends Service {
+
     int getOrCreate(int applicationId, int srcSpanType, String serviceName);
+
+    int get(int applicationId, int srcSpanType, String serviceName);
 }

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-define/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/define/decorator/ReferenceDecorator.java
Patch:
@@ -27,6 +27,7 @@
  * @author peng-yongsheng
  */
 public class ReferenceDecorator implements StandardBuilder {
+
     private boolean isOrigin = true;
     private StandardBuilder standardBuilder;
     private TraceSegmentReference referenceObject;

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/query/TraceQuery.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.apm.collector.ui.service.SegmentTopService;
 import org.apache.skywalking.apm.collector.ui.service.TraceStackService;
 import org.apache.skywalking.apm.collector.ui.utils.DurationUtils;
+import org.apache.skywalking.apm.collector.ui.utils.PaginationUtils;
 
 /**
  * @author peng-yongsheng
@@ -77,10 +78,9 @@ public TraceBrief queryBasicTraces(TraceQueryCondition condition) throws ParseEx
         long maxDuration = condition.getMaxTraceDuration();
         String operationName = condition.getOperationName();
         int applicationId = condition.getApplicationId();
-        int limit = condition.getPaging().getPageSize();
-        int from = condition.getPaging().getPageSize() * condition.getPaging().getPageNum();
 
-        return getSegmentTopService().loadTop(startSecondTimeBucket, endSecondTimeBucket, minDuration, maxDuration, operationName, traceId, applicationId, limit, from);
+        PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(condition.getPaging());
+        return getSegmentTopService().loadTop(startSecondTimeBucket, endSecondTimeBucket, minDuration, maxDuration, operationName, traceId, applicationId, page.getLimit(), page.getFrom());
     }
 
     public Trace queryTrace(String traceId) {

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServiceTopologyService.java
Patch:
@@ -73,8 +73,8 @@ public Topology getServiceTopology(Step step, int serviceId, long startTimeBucke
         Map<Integer, String> components = new HashMap<>();
         applicationComponents.forEach(component -> components.put(component.getApplicationId(), ComponentsDefine.getInstance().getComponentName(component.getComponentId())));
 
-        List<IServiceReferenceMetricUIDAO.ServiceReferenceMetric> referenceMetrics = serviceReferenceMetricUIDAO.getFrontServices(step, startTimeBucket, endTimeBucket, MetricSource.Callee, serviceId);
-        referenceMetrics.addAll(serviceReferenceMetricUIDAO.getBehindServices(step, startTimeBucket, endTimeBucket, MetricSource.Caller, serviceId));
+        List<IServiceReferenceMetricUIDAO.ServiceReferenceMetric> referenceMetrics = serviceReferenceMetricUIDAO.getFrontServices(step, startTimeBucket, endTimeBucket, MetricSource.Caller, serviceId);
+        referenceMetrics.addAll(serviceReferenceMetricUIDAO.getBehindServices(step, startTimeBucket, endTimeBucket, MetricSource.Callee, serviceId));
 
         Set<Integer> nodeIds = new HashSet<>();
 

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/ServiceNameDiscoveryServiceHandler.java
Patch:
@@ -54,7 +54,7 @@ public ServiceNameDiscoveryServiceHandler(ModuleManager moduleManager) {
             int applicationId = serviceNameElement.getApplicationId();
             String serviceName = serviceNameElement.getServiceName();
             int srcSpanType = serviceNameElement.getSrcSpanTypeValue();
-            int serviceId = serviceNameService.getOrCreate(applicationId, srcSpanType, serviceName);
+            int serviceId = serviceNameService.get(applicationId, srcSpanType, serviceName);
 
             if (serviceId != 0) {
                 ServiceNameMappingElement.Builder mappingElement = ServiceNameMappingElement.newBuilder();

File: apm-collector/apm-collector-analysis/analysis-register/register-define/src/main/java/org/apache/skywalking/apm/collector/analysis/register/define/service/IServiceNameService.java
Patch:
@@ -24,5 +24,8 @@
  * @author peng-yongsheng
  */
 public interface IServiceNameService extends Service {
+
     int getOrCreate(int applicationId, int srcSpanType, String serviceName);
+
+    int get(int applicationId, int srcSpanType, String serviceName);
 }

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-define/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/define/decorator/ReferenceDecorator.java
Patch:
@@ -27,6 +27,7 @@
  * @author peng-yongsheng
  */
 public class ReferenceDecorator implements StandardBuilder {
+
     private boolean isOrigin = true;
     private StandardBuilder standardBuilder;
     private TraceSegmentReference referenceObject;

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/standardization/SpanIdExchanger.java
Patch:
@@ -65,7 +65,7 @@ private SpanIdExchanger(ModuleManager moduleManager) {
                 standardBuilder.setPeer(Const.EMPTY_STRING);
 
                 int spanLayer = standardBuilder.getSpanLayerValue();
-                int serverType = ServerTypeDefine.getInstance().getServerTypeByComponentId(standardBuilder.getComponentId()).getId();
+                int serverType = ServerTypeDefine.getInstance().getServerTypeId(standardBuilder.getComponentId());
                 networkAddressIDService.update(peerId, spanLayer, serverType);
             }
         }

File: apm-collector/apm-collector-storage/collector-storage-define/src/test/java/org/apache/skywalking/apm/collector/storage/table/register/ServerTypeDefineTestCase.java
Patch:
@@ -35,7 +35,7 @@ public void check() throws IllegalAccessException {
         for (Field field : fields) {
             if (field.getType().equals(OfficialComponent.class)) {
                 OfficialComponent component = (OfficialComponent)field.get(ComponentsDefine.getInstance());
-                ServerTypeDefine.getInstance().getServerTypeByComponentId(component.getId());
+                ServerTypeDefine.getInstance().getServerTypeId(component.getId());
             }
         }
     }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ApplicationService.java
Patch:
@@ -40,7 +40,6 @@
 import org.apache.skywalking.apm.collector.storage.ui.overview.ConjecturalAppBrief;
 import org.apache.skywalking.apm.collector.storage.ui.service.ServiceMetric;
 import org.apache.skywalking.apm.collector.ui.utils.DurationUtils;
-import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -118,8 +117,8 @@ public ConjecturalAppBrief getConjecturalApps(Step step, long startSecondTimeBuc
         long endSecondTimeBucket) throws ParseException {
         List<ConjecturalApp> conjecturalApps = networkAddressUIDAO.getConjecturalApps();
         conjecturalApps.forEach(conjecturalApp -> {
-            int componentId = ServerTypeDefine.getInstance().getServerType(conjecturalApp.getId()).getComponentId();
-            conjecturalApp.setName(ComponentsDefine.getInstance().getComponentName(componentId));
+            String serverType = ServerTypeDefine.getInstance().getServerType(conjecturalApp.getId());
+            conjecturalApp.setName(serverType);
         });
 
         ConjecturalAppBrief conjecturalAppBrief = new ConjecturalAppBrief();

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ServiceTopologyService.java
Patch:
@@ -73,8 +73,8 @@ public Topology getServiceTopology(Step step, int serviceId, long startTimeBucke
         Map<Integer, String> components = new HashMap<>();
         applicationComponents.forEach(component -> components.put(component.getApplicationId(), ComponentsDefine.getInstance().getComponentName(component.getComponentId())));
 
-        List<IServiceReferenceMetricUIDAO.ServiceReferenceMetric> referenceMetrics = serviceReferenceMetricUIDAO.getFrontServices(step, startTimeBucket, endTimeBucket, MetricSource.Callee, serviceId);
-        referenceMetrics.addAll(serviceReferenceMetricUIDAO.getBehindServices(step, startTimeBucket, endTimeBucket, MetricSource.Caller, serviceId));
+        List<IServiceReferenceMetricUIDAO.ServiceReferenceMetric> referenceMetrics = serviceReferenceMetricUIDAO.getFrontServices(step, startTimeBucket, endTimeBucket, MetricSource.Caller, serviceId);
+        referenceMetrics.addAll(serviceReferenceMetricUIDAO.getBehindServices(step, startTimeBucket, endTimeBucket, MetricSource.Callee, serviceId));
 
         Set<Integer> nodeIds = new HashSet<>();
 

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/query/TraceQuery.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.skywalking.apm.collector.ui.service.SegmentTopService;
 import org.apache.skywalking.apm.collector.ui.service.TraceStackService;
 import org.apache.skywalking.apm.collector.ui.utils.DurationUtils;
+import org.apache.skywalking.apm.collector.ui.utils.PaginationUtils;
 
 /**
  * @author peng-yongsheng
@@ -77,10 +78,9 @@ public TraceBrief queryBasicTraces(TraceQueryCondition condition) throws ParseEx
         long maxDuration = condition.getMaxTraceDuration();
         String operationName = condition.getOperationName();
         int applicationId = condition.getApplicationId();
-        int limit = condition.getPaging().getPageSize();
-        int from = condition.getPaging().getPageSize() * condition.getPaging().getPageNum();
 
-        return getSegmentTopService().loadTop(startSecondTimeBucket, endSecondTimeBucket, minDuration, maxDuration, operationName, traceId, applicationId, limit, from);
+        PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(condition.getPaging());
+        return getSegmentTopService().loadTop(startSecondTimeBucket, endSecondTimeBucket, minDuration, maxDuration, operationName, traceId, applicationId, page.getLimit(), page.getFrom());
     }
 
     public Trace queryTrace(String traceId) {

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/standardization/SpanIdExchanger.java
Patch:
@@ -65,7 +65,7 @@ private SpanIdExchanger(ModuleManager moduleManager) {
                 standardBuilder.setPeer(Const.EMPTY_STRING);
 
                 int spanLayer = standardBuilder.getSpanLayerValue();
-                int serverType = ServerTypeDefine.getInstance().getServerTypeId(standardBuilder.getComponentId());
+                int serverType = ServerTypeDefine.getInstance().getServerTypeByComponentId(standardBuilder.getComponentId()).getId();
                 networkAddressIDService.update(peerId, spanLayer, serverType);
             }
         }

File: apm-collector/apm-collector-storage/collector-storage-define/src/test/java/org/apache/skywalking/apm/collector/storage/table/register/ServerTypeDefineTestCase.java
Patch:
@@ -35,7 +35,7 @@ public void check() throws IllegalAccessException {
         for (Field field : fields) {
             if (field.getType().equals(OfficialComponent.class)) {
                 OfficialComponent component = (OfficialComponent)field.get(ComponentsDefine.getInstance());
-                ServerTypeDefine.getInstance().getServerTypeId(component.getId());
+                ServerTypeDefine.getInstance().getServerTypeByComponentId(component.getId());
             }
         }
     }

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/service/ApplicationService.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.skywalking.apm.collector.storage.ui.overview.ConjecturalAppBrief;
 import org.apache.skywalking.apm.collector.storage.ui.service.ServiceMetric;
 import org.apache.skywalking.apm.collector.ui.utils.DurationUtils;
+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -117,8 +118,8 @@ public ConjecturalAppBrief getConjecturalApps(Step step, long startSecondTimeBuc
         long endSecondTimeBucket) throws ParseException {
         List<ConjecturalApp> conjecturalApps = networkAddressUIDAO.getConjecturalApps();
         conjecturalApps.forEach(conjecturalApp -> {
-            String name = ServerTypeDefine.getInstance().getServerType(conjecturalApp.getId());
-            conjecturalApp.setName(name);
+            int componentId = ServerTypeDefine.getInstance().getServerType(conjecturalApp.getId()).getComponentId();
+            conjecturalApp.setName(ComponentsDefine.getInstance().getComponentName(componentId));
         });
 
         ConjecturalAppBrief conjecturalAppBrief = new ConjecturalAppBrief();

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/SegmentDurationEsUIDAO.java
Patch:
@@ -91,7 +91,7 @@ public TraceBrief loadTop(long startSecondTimeBucket, long endSecondTimeBucket,
         for (SearchHit searchHit : searchResponse.getHits().getHits()) {
             BasicTrace basicTrace = new BasicTrace();
 
-            basicTrace.setTraceId((String)searchHit.getSource().get(SegmentDurationTable.COLUMN_TRACE_ID));
+            basicTrace.setSegmentId((String)searchHit.getSource().get(SegmentDurationTable.COLUMN_SEGMENT_ID));
             basicTrace.setStart(((Number)searchHit.getSource().get(SegmentDurationTable.COLUMN_START_TIME)).longValue());
             basicTrace.setOperationName((String)searchHit.getSource().get(SegmentDurationTable.COLUMN_SERVICE_NAME));
             basicTrace.setDuration(((Number)searchHit.getSource().get(SegmentDurationTable.COLUMN_DURATION)).intValue());

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/SegmentDurationH2UIDAO.java
Patch:
@@ -101,9 +101,9 @@ public TraceBrief loadTop(long startSecondTimeBucket, long endSecondTimeBucket,
         try (ResultSet rs = client.executeQuery(sql, p)) {
             while (rs.next()) {
                 BasicTrace basicTrace = new BasicTrace();
+                basicTrace.setSegmentId(rs.getString(SegmentDurationTable.COLUMN_SEGMENT_ID));
                 basicTrace.setDuration(rs.getInt(SegmentDurationTable.COLUMN_DURATION));
                 basicTrace.setStart(rs.getLong(SegmentDurationTable.COLUMN_START_TIME));
-                basicTrace.setTraceId(rs.getString(SegmentDurationTable.COLUMN_TRACE_ID));
                 basicTrace.setOperationName(rs.getString(SegmentDurationTable.COLUMN_SERVICE_NAME));
                 basicTrace.setError(BooleanUtils.valueToBoolean(rs.getInt(SegmentDurationTable.COLUMN_IS_ERROR)));
                 traceBrief.getTraces().add(basicTrace);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/SegmentDurationEsUIDAO.java
Patch:
@@ -91,7 +91,7 @@ public TraceBrief loadTop(long startSecondTimeBucket, long endSecondTimeBucket,
         for (SearchHit searchHit : searchResponse.getHits().getHits()) {
             BasicTrace basicTrace = new BasicTrace();
 
-            basicTrace.setTraceId((String)searchHit.getSource().get(SegmentDurationTable.COLUMN_TRACE_ID));
+            basicTrace.setSegmentId((String)searchHit.getSource().get(SegmentDurationTable.COLUMN_SEGMENT_ID));
             basicTrace.setStart(((Number)searchHit.getSource().get(SegmentDurationTable.COLUMN_START_TIME)).longValue());
             basicTrace.setOperationName((String)searchHit.getSource().get(SegmentDurationTable.COLUMN_SERVICE_NAME));
             basicTrace.setDuration(((Number)searchHit.getSource().get(SegmentDurationTable.COLUMN_DURATION)).intValue());

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/SegmentDurationH2UIDAO.java
Patch:
@@ -101,9 +101,9 @@ public TraceBrief loadTop(long startSecondTimeBucket, long endSecondTimeBucket,
         try (ResultSet rs = client.executeQuery(sql, p)) {
             while (rs.next()) {
                 BasicTrace basicTrace = new BasicTrace();
+                basicTrace.setSegmentId(rs.getString(SegmentDurationTable.COLUMN_SEGMENT_ID));
                 basicTrace.setDuration(rs.getInt(SegmentDurationTable.COLUMN_DURATION));
                 basicTrace.setStart(rs.getLong(SegmentDurationTable.COLUMN_START_TIME));
-                basicTrace.setTraceId(rs.getString(SegmentDurationTable.COLUMN_TRACE_ID));
                 basicTrace.setOperationName(rs.getString(SegmentDurationTable.COLUMN_SERVICE_NAME));
                 basicTrace.setError(BooleanUtils.valueToBoolean(rs.getInt(SegmentDurationTable.COLUMN_IS_ERROR)));
                 traceBrief.getTraces().add(basicTrace);

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/ui/ServiceNameServiceH2UIDAO.java
Patch:
@@ -60,9 +60,9 @@ public ServiceNameServiceH2UIDAO(H2Client client) {
     }
 
     @Override public List<ServiceInfo> searchService(String keyword, int topN) {
-        String dynamicSql = "select {0},{1} from {2} where {3} like ? limit ?";
-        String sql = SqlBuilder.buildSql(dynamicSql, ServiceNameTable.COLUMN_SERVICE_ID, ServiceNameTable.COLUMN_SERVICE_NAME, ServiceNameTable.TABLE, ServiceNameTable.COLUMN_SERVICE_NAME);
-        Object[] params = new Object[] {keyword, topN};
+        String dynamicSql = "select {0},{1} from {2} where {3} like ? and {4} = ? limit ?";
+        String sql = SqlBuilder.buildSql(dynamicSql, ServiceNameTable.COLUMN_SERVICE_ID, ServiceNameTable.COLUMN_SERVICE_NAME, ServiceNameTable.TABLE, ServiceNameTable.COLUMN_SERVICE_NAME, ServiceNameTable.COLUMN_SRC_SPAN_TYPE);
+        Object[] params = new Object[] {keyword, SpanType.Entry_VALUE, topN};
 
         List<ServiceInfo> serviceInfos = new LinkedList<>();
         try (ResultSet rs = getClient().executeQuery(sql, params)) {

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/ServiceNameServiceEsUIDAO.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.storage.es.base.dao.EsDAO;
 import org.apache.skywalking.apm.collector.storage.table.register.ServiceNameTable;
 import org.apache.skywalking.apm.collector.storage.ui.service.ServiceInfo;
+import org.apache.skywalking.apm.network.proto.SpanType;
 import org.elasticsearch.action.search.SearchRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.search.SearchType;
@@ -44,6 +45,7 @@ public ServiceNameServiceEsUIDAO(ElasticSearchClient client) {
         SearchRequestBuilder searchRequestBuilder = getClient().prepareSearch(ServiceNameTable.TABLE);
         searchRequestBuilder.setTypes(ServiceNameTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);
+        searchRequestBuilder.setQuery(QueryBuilders.termQuery(ServiceNameTable.COLUMN_SRC_SPAN_TYPE, SpanType.Entry_VALUE));
         searchRequestBuilder.setSize(0);
 
         SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/ServiceNameDiscoveryServiceHandler.java
Patch:
@@ -53,7 +53,8 @@ public ServiceNameDiscoveryServiceHandler(ModuleManager moduleManager) {
         for (ServiceNameElement serviceNameElement : serviceNameElementList) {
             int applicationId = serviceNameElement.getApplicationId();
             String serviceName = serviceNameElement.getServiceName();
-            int serviceId = serviceNameService.getOrCreate(applicationId, serviceName);
+            int srcSpanType = serviceNameElement.getSrcSpanTypeValue();
+            int serviceId = serviceNameService.getOrCreate(applicationId, srcSpanType, serviceName);
 
             if (serviceId != 0) {
                 ServiceNameMappingElement.Builder mappingElement = ServiceNameMappingElement.newBuilder();

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/test/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/mock/RegisterMock.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.skywalking.apm.network.proto.ServiceNameDiscoveryServiceGrpc;
 import org.apache.skywalking.apm.network.proto.ServiceNameElement;
 import org.apache.skywalking.apm.network.proto.ServiceNameMappingCollection;
+import org.apache.skywalking.apm.network.proto.SpanType;
 import org.apache.skywalking.apm.util.RunnableWithExceptionProtection;
 import org.joda.time.DateTime;
 import org.slf4j.Logger;
@@ -95,6 +96,7 @@ private void registerConsumer() throws InterruptedException {
         ServiceNameElement.Builder serviceNameElement = ServiceNameElement.newBuilder();
         serviceNameElement.setApplicationId(applicationMapping.getApplication().getValue());
         serviceNameElement.setServiceName("org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()");
+        serviceNameElement.setSrcSpanType(SpanType.Exit);
         serviceNameCollection.addElements(serviceNameElement);
 
         registerServiceName(serviceNameCollection);
@@ -139,6 +141,7 @@ private void registerProvider() throws InterruptedException {
         ServiceNameElement.Builder serviceNameElement = ServiceNameElement.newBuilder();
         serviceNameElement.setApplicationId(applicationMapping.getApplication().getValue());
         serviceNameElement.setServiceName("org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()");
+        serviceNameElement.setSrcSpanType(SpanType.Entry);
         serviceNameCollection.addElements(serviceNameElement);
 
         registerServiceName(serviceNameCollection);

File: apm-collector/apm-collector-agent/agent-jetty/agent-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/agent/jetty/provider/handler/ServiceNameDiscoveryServiceHandler.java
Patch:
@@ -44,6 +44,7 @@ public class ServiceNameDiscoveryServiceHandler extends JettyHandler {
 
     private static final String APPLICATION_ID = "ai";
     private static final String SERVICE_NAME = "sn";
+    private static final String SRC_SPAN_TYPE = "st";
     private static final String SERVICE_ID = "si";
     private static final String ELEMENT = "el";
 
@@ -66,8 +67,9 @@ public ServiceNameDiscoveryServiceHandler(ModuleManager moduleManager) {
             for (JsonElement service : services) {
                 int applicationId = service.getAsJsonObject().get(APPLICATION_ID).getAsInt();
                 String serviceName = service.getAsJsonObject().get(SERVICE_NAME).getAsString();
+                int srcSpanType = service.getAsJsonObject().get(SRC_SPAN_TYPE).getAsInt();
 
-                int serviceId = serviceNameService.getOrCreate(applicationId, serviceName);
+                int serviceId = serviceNameService.getOrCreate(applicationId, srcSpanType, serviceName);
                 if (serviceId != 0) {
                     JsonObject responseJson = new JsonObject();
                     responseJson.addProperty(SERVICE_ID, serviceId);

File: apm-collector/apm-collector-analysis/analysis-register/register-define/src/main/java/org/apache/skywalking/apm/collector/analysis/register/define/service/IServiceNameService.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.analysis.register.define.service;
 
 import org.apache.skywalking.apm.collector.core.module.Service;
@@ -25,5 +24,5 @@
  * @author peng-yongsheng
  */
 public interface IServiceNameService extends Service {
-    int getOrCreate(int applicationId, String serviceName);
+    int getOrCreate(int applicationId, int srcSpanType, String serviceName);
 }

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/ServiceNameService.java
Patch:
@@ -59,14 +59,15 @@ private Graph<ServiceName> getServiceNameRegisterGraph() {
         return serviceNameRegisterGraph;
     }
 
-    public int getOrCreate(int applicationId, String serviceName) {
-        int serviceId = getServiceIdCacheService().get(applicationId, serviceName);
+    @Override public int getOrCreate(int applicationId, int srcSpanType, String serviceName) {
+        int serviceId = getServiceIdCacheService().get(applicationId, srcSpanType, serviceName);
 
         if (serviceId == 0) {
             ServiceName service = new ServiceName();
             service.setId("0");
             service.setApplicationId(applicationId);
             service.setServiceName(serviceName);
+            service.setSrcSpanType(srcSpanType);
             service.setServiceId(0);
 
             getServiceNameRegisterGraph().start(service);

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/standardization/ReferenceIdExchanger.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.StringUtils;
+import org.apache.skywalking.apm.network.proto.SpanType;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -57,7 +58,7 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {
 
     @Override public boolean exchange(ReferenceDecorator standardBuilder, int applicationId) {
         if (standardBuilder.getEntryServiceId() == 0 && StringUtils.isNotEmpty(standardBuilder.getEntryServiceName())) {
-            int entryServiceId = serviceNameService.getOrCreate(instanceCacheService.getApplicationId(standardBuilder.getEntryApplicationInstanceId()), standardBuilder.getEntryServiceName());
+            int entryServiceId = serviceNameService.getOrCreate(instanceCacheService.getApplicationId(standardBuilder.getEntryApplicationInstanceId()), SpanType.Entry_VALUE, standardBuilder.getEntryServiceName());
 
             if (entryServiceId == 0) {
                 if (logger.isDebugEnabled()) {
@@ -73,7 +74,7 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {
         }
 
         if (standardBuilder.getParentServiceId() == 0 && StringUtils.isNotEmpty(standardBuilder.getParentServiceName())) {
-            int parentServiceId = serviceNameService.getOrCreate(instanceCacheService.getApplicationId(standardBuilder.getParentApplicationInstanceId()), standardBuilder.getParentServiceName());
+            int parentServiceId = serviceNameService.getOrCreate(instanceCacheService.getApplicationId(standardBuilder.getParentApplicationInstanceId()), SpanType.Entry_VALUE, standardBuilder.getParentServiceName());
 
             if (parentServiceId == 0) {
                 if (logger.isDebugEnabled()) {

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/standardization/SpanIdExchanger.java
Patch:
@@ -71,7 +71,7 @@ private SpanIdExchanger(ModuleManager moduleManager) {
         }
 
         if (standardBuilder.getOperationNameId() == 0 && StringUtils.isNotEmpty(standardBuilder.getOperationName())) {
-            int operationNameId = serviceNameService.getOrCreate(applicationId, standardBuilder.getOperationName());
+            int operationNameId = serviceNameService.getOrCreate(applicationId, standardBuilder.getSpanTypeValue(), standardBuilder.getOperationName());
 
             if (operationNameId == 0) {
                 logger.debug("service name: {} from application id: {} exchange failed", standardBuilder.getOperationName(), applicationId);

File: apm-collector/apm-collector-cache/collector-cache-define/src/main/java/org/apache/skywalking/apm/collector/cache/service/ServiceIdCacheService.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.cache.service;
 
 import org.apache.skywalking.apm.collector.core.module.Service;
@@ -25,5 +24,5 @@
  * @author peng-yongsheng
  */
 public interface ServiceIdCacheService extends Service {
-    int get(int applicationId, String serviceName);
+    int get(int applicationId, int srcSpanType, String serviceName);
 }

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/util/Const.java
Patch:
@@ -34,4 +34,5 @@ public class Const {
     public static final String EXCEPTION = "Exception";
     public static final String EMPTY_STRING = "";
     public static final String FILE_SUFFIX = "sw";
+    public static final int SPAN_TYPE_VIRTUAL = 9;
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/cache/IServiceNameCacheDAO.java
Patch:
@@ -27,5 +27,5 @@
 public interface IServiceNameCacheDAO extends DAO {
     ServiceName get(int serviceId);
 
-    int getServiceId(int applicationId, String serviceName);
+    int getServiceId(int applicationId, int srcSpanType, String serviceName);
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/table/register/ServiceNameTable.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.storage.table.register;
 
 import org.apache.skywalking.apm.collector.core.data.CommonTable;
@@ -27,6 +26,8 @@
 public class ServiceNameTable extends CommonTable {
     public static final String TABLE = "service_name";
     public static final String COLUMN_SERVICE_NAME = "service_name";
+    public static final String COLUMN_SERVICE_NAME_KEYWORD = "service_name_keyword";
+    public static final String COLUMN_SRC_SPAN_TYPE = "src_span_type";
     public static final String COLUMN_APPLICATION_ID = "application_id";
     public static final String COLUMN_SERVICE_ID = "service_id";
 }

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/register/ServiceNameRegisterEsDAO.java
Patch:
@@ -56,6 +56,8 @@ public ServiceNameRegisterEsDAO(ElasticSearchClient client) {
         source.put(ServiceNameTable.COLUMN_SERVICE_ID, serviceName.getServiceId());
         source.put(ServiceNameTable.COLUMN_APPLICATION_ID, serviceName.getApplicationId());
         source.put(ServiceNameTable.COLUMN_SERVICE_NAME, serviceName.getServiceName());
+        source.put(ServiceNameTable.COLUMN_SERVICE_NAME_KEYWORD, serviceName.getServiceName());
+        source.put(ServiceNameTable.COLUMN_SRC_SPAN_TYPE, serviceName.getSrcSpanType());
 
         IndexResponse response = client.prepareIndex(ServiceNameTable.TABLE, serviceName.getId()).setSource(source).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).get();
         logger.debug("save service name register info, application getApplicationId: {}, service name: {}, status: {}", serviceName.getId(), serviceName.getServiceName(), response.status().name());

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/define/register/ServiceNameEsTableDefine.java
Patch:
@@ -38,6 +38,8 @@ public ServiceNameEsTableDefine() {
     @Override public void initialize() {
         addColumn(new ElasticSearchColumnDefine(ServiceNameTable.COLUMN_APPLICATION_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(ServiceNameTable.COLUMN_SERVICE_NAME, ElasticSearchColumnDefine.Type.Text.name()));
+        addColumn(new ElasticSearchColumnDefine(ServiceNameTable.COLUMN_SERVICE_NAME_KEYWORD, ElasticSearchColumnDefine.Type.Keyword.name()));
         addColumn(new ElasticSearchColumnDefine(ServiceNameTable.COLUMN_SERVICE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(ServiceNameTable.COLUMN_SRC_SPAN_TYPE, ElasticSearchColumnDefine.Type.Integer.name()));
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/define/register/ServiceNameH2TableDefine.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.storage.h2.define.register;
 
 import org.apache.skywalking.apm.collector.storage.h2.base.define.H2ColumnDefine;
@@ -37,5 +36,6 @@ public ServiceNameH2TableDefine() {
         addColumn(new H2ColumnDefine(ServiceNameTable.COLUMN_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(ServiceNameTable.COLUMN_SERVICE_NAME, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(ServiceNameTable.COLUMN_SERVICE_ID, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(ServiceNameTable.COLUMN_SRC_SPAN_TYPE, H2ColumnDefine.Type.Int.name()));
     }
 }

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v3/define/ResinV3Instrumentation.java
Patch:
@@ -16,17 +16,15 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.resin.v3.define;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
-import org.apache.skywalking.apm.plugin.resin.v3.ResinV3Interceptor;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v4/define/ResinV4Instrumentation.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.resin.v4.define;
 
 import net.bytebuddy.description.method.MethodDescription;
@@ -25,7 +24,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
-import org.apache.skywalking.apm.plugin.resin.v4.ResinV4Interceptor;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/define/AbstractDriverInstrumentation.java
Patch:
@@ -16,15 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.jdbc.define;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
-import org.apache.skywalking.apm.plugin.jdbc.JDBCDriverInterceptor;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/CallbackInstrumentation.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
-import org.apache.skywalking.apm.plugin.kafka.v1.CallbackInterceptor;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static org.apache.skywalking.apm.agent.core.plugin.match.HierarchyMatch.byHierarchyMatch;

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/ProducerRecordInstrumentation.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
-import org.apache.skywalking.apm.plugin.kafka.v1.ProducerRecordConstructorInterceptor;
 
 import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;

File: apm-application-toolkit/apm-toolkit-log4j-2.x/src/main/java/org/apache/skywalking/apm/toolkit/log/log4j/v2/x/TraceIdConverter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * {@link TraceIdConverter} is a log4j2 plugin, by annotation as {@link Plugin}.
  * It convert the pattern key: traceId.
- * Use '%traceId' in log4j2's config: <PatternLayout pattern="%d [%traceId] %-5p %c{1}:%L - %m%n"/>,
+ * Use '%traceId' in log4j2's config.
  * '%traceId' will output as TID:xxxx
  * <p>
  * Created by wusheng on 2016/12/7.

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -117,7 +117,7 @@ public static class Logging {
         /**
          * Log files directory. Default is blank string, means, use "system.out" to output logs.
          *
-         * @see {@link WriterFactory#getLogWriter()}
+         * Ref to {@link WriterFactory#getLogWriter()}
          */
         public static String DIR = "";
 
@@ -129,8 +129,6 @@ public static class Logging {
 
         /**
          * The log level. Default is debug.
-         *
-         * @see {@link LogLevel}
          */
         public static LogLevel LEVEL = LogLevel.DEBUG;
     }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.conf;
 
 import java.io.File;
@@ -37,7 +36,6 @@
  * The <code>SnifferConfigInitializer</code> initializes all configs in several way.
  *
  * @author wusheng
- * @see {@link #initialize()}, to learn more about how to initialzie.
  */
 public class SnifferConfigInitializer {
     private static final ILog logger = LogManager.getLogger(SnifferConfigInitializer.class);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context;
 
 import org.apache.skywalking.apm.agent.core.boot.BootService;
@@ -34,8 +33,8 @@
 /**
  * {@link ContextManager} controls the whole context of {@link TraceSegment}. Any {@link TraceSegment} relates to
  * single-thread, so this context use {@link ThreadLocal} to maintain the context, and make sure, since a {@link
- * TraceSegment} starts, all ChildOf spans are in the same context. <p> What is 'ChildOf'? {@see
- * https://github.com/opentracing/specification/blob/master/specification.md#references-between-spans}
+ * TraceSegment} starts, all ChildOf spans are in the same context. <p> What is 'ChildOf'?
+ * https://github.com/opentracing/specification/blob/master/specification.md#references-between-spans
  *
  * <p> Also, {@link ContextManager} delegates to all {@link AbstractTracerContext}'s major methods.
  *

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ids/GlobalIdGenerator.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context.ids;
 
 import java.util.Random;
@@ -42,8 +41,8 @@ private GlobalIdGenerator() {
      *
      * The second one represents thread id. (most likely just an integer value, would be helpful in protobuf)
      *
-     * The third one also has two parts,<br/>
-     * 1) a timestamp, measured in milliseconds<br/>
+     * The third one also has two parts,
+     * 1) a timestamp, measured in milliseconds
      * 2) a seq, in current thread, between 0(included) and 9999(included)
      *
      * Notice, a long costs 8 bytes, three longs cost 24 bytes. And at the same time, a char costs 2 bytes. So

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java
Patch:
@@ -59,7 +59,7 @@ public abstract class AbstractTracingSpan implements AbstractSpan {
     protected String componentName;
 
     /**
-     * Log is a concept from OpenTracing spec. <p> {@see https://github.com/opentracing/specification/blob/master/specification.md#log-structured-data}
+     * Log is a concept from OpenTracing spec. https://github.com/opentracing/specification/blob/master/specification.md#log-structured-data
      */
     protected List<LogDataEntity> logs;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/EntrySpan.java
Patch:
@@ -29,7 +29,7 @@
  *
  * But with the last <code>EntrySpan</code>'s tags and logs, which have more details about a service provider.
  *
- * Such as: Tomcat Embed -> Dubbox The <code>EntrySpan</code> represents the Dubbox span.
+ * Such as: Tomcat Embed - Dubbox The <code>EntrySpan</code> represents the Dubbox span.
  *
  * @author wusheng
  */

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/ExitSpan.java
Patch:
@@ -31,7 +31,7 @@
  *
  * The <code>ExitSpan</code> only presents the first one.
  *
- * Such as: Dubbox -> Apache Httpcomponent -> ....(Remote)
+ * Such as: Dubbox - Apache Httpcomponent - ...(Remote)
  * The <code>ExitSpan</code> represents the Dubbox span, and ignore the httpcomponent span's info.
  *
  * @author wusheng

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/TraceSegment.java
Patch:
@@ -22,16 +22,16 @@
 import java.util.LinkedList;
 import java.util.List;
 import org.apache.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
-import org.apache.skywalking.apm.agent.core.context.ids.DistributedTraceIds;
-import org.apache.skywalking.apm.agent.core.context.ids.ID;
 import org.apache.skywalking.apm.agent.core.context.ids.DistributedTraceId;
+import org.apache.skywalking.apm.agent.core.context.ids.DistributedTraceIds;
 import org.apache.skywalking.apm.agent.core.context.ids.GlobalIdGenerator;
+import org.apache.skywalking.apm.agent.core.context.ids.ID;
 import org.apache.skywalking.apm.agent.core.context.ids.NewDistributedTraceId;
 import org.apache.skywalking.apm.network.proto.TraceSegmentObject;
 import org.apache.skywalking.apm.network.proto.UpstreamSegment;
 
 /**
- * {@link TraceSegment} is a segment or fragment of the distributed trace. {@see https://github.com/opentracing/specification/blob/master/specification.md#the-opentracing-data-model}
+ * {@link TraceSegment} is a segment or fragment of the distributed trace. See https://github.com/opentracing/specification/blob/master/specification.md#the-opentracing-data-model
  * A {@link TraceSegment} means the segment, which exists in current {@link Thread}. And the distributed trace is formed
  * by multi {@link TraceSegment}s, because the distributed trace crosses multi-processes, multi-threads. <p>
  *

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java
Patch:
@@ -42,7 +42,7 @@ public abstract class AbstractClassEnhancePluginDefine {
      * @param builder byte-buddy's builder to manipulate target class's bytecode.
      * @param classLoader load the given transformClass
      * @return the new builder, or <code>null</code> if not be enhanced.
-     * @throws PluginException, when set builder failure.
+     * @throws PluginException when set builder failure.
      */
     public DynamicType.Builder<?> define(String transformClassName,
         DynamicType.Builder<?> builder, ClassLoader classLoader, EnhanceContext context) throws PluginException {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/ArgumentTypeNameMatch.java
Patch:
@@ -71,7 +71,7 @@ public boolean matches(MethodDescription target) {
 
     /**
      * The static method to create {@link ArgumentTypeNameMatch}
-     * This is a delegate method to follow byte-buddy {@link ElementMatcher<MethodDescription>}'s code style.
+     * This is a delegate method to follow byte-buddy {@link ElementMatcher}'s code style.
      *
      * @param index the index of arguments list.
      * @param argumentTypeName target argument type

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassInstanceMethodsEnhancePluginDefine.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Plugins, which only need enhance class static methods. Actually, inherit from {@link
  * ClassInstanceMethodsEnhancePluginDefine} has no differences with inherit from {@link ClassEnhancePluginDefine}. Just
- * override {@link ClassEnhancePluginDefine#getStaticMethodsInterceptPoints}, and return {@link null}, which means
+ * override {@link ClassEnhancePluginDefine#getStaticMethodsInterceptPoints}, and return NULL, which means
  * nothing to enhance.
  *
  * @author wusheng

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassStaticMethodsEnhancePluginDefine.java
Patch:
@@ -26,7 +26,7 @@
  * Plugins, which only need enhance class static methods. Actually, inherit from {@link
  * ClassStaticMethodsEnhancePluginDefine} has no differences with inherit from {@link ClassEnhancePluginDefine}. Just
  * override {@link ClassEnhancePluginDefine#getConstructorsInterceptPoints} and {@link
- * ClassEnhancePluginDefine#getInstanceMethodsInterceptPoints}, and return {@link null}, which means nothing to
+ * ClassEnhancePluginDefine#getInstanceMethodsInterceptPoints}, and return NULL, which means nothing to
  * enhance.
  *
  * @author wusheng

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/InstanceMethodsAroundInterceptor.java
Patch:
@@ -31,7 +31,6 @@ public interface InstanceMethodsAroundInterceptor {
     /**
      * called before target method invocation.
      *
-     * @param method
      * @param result change this result, if you want to truncate the method.
      * @throws Throwable
      */

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -37,7 +37,7 @@
  * have been traced, but, considering CPU cost of serialization/deserialization, and network bandwidth, the agent do NOT
  * send all of them to collector, if SAMPLING is on.
  * <p>
- * By default, SAMPLING is on, and {@see {@link Config.Agent#SAMPLE_N_PER_3_SECS }}
+ * By default, SAMPLING is on, and  {@link Config.Agent#SAMPLE_N_PER_3_SECS }
  *
  * @author wusheng
  */

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/AbstractConnectionInstrumentation.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * {@link AbstractConnectionInstrumentation} define how to enhance the following methods that the class which extend
- * {@link java.sql.Connection}. <br/>
+ * {@link java.sql.Connection}. 
  *
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>
  * 3. Enhance <code>prepareCall</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareCallInterceptor</code>

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/define/InternalHttpClientInstrumentation.java
Patch:
@@ -28,9 +28,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link AbstractHttpClientInstrumentation} presents that skywalking intercepts {@link
- * org.apache.http.impl.client.InternalHttpClient#doExecute(org.apache.http.HttpHost, org.apache.http.HttpRequest,
- * org.apache.http.protocol.HttpContext)} by using {@link HttpClientInstrumentation#INTERCEPT_CLASS}.
+ * {@link AbstractHttpClientInstrumentation} presents that skywalking intercepts
+ * InternalHttpClient#doExecute
+ * by using {@link HttpClientInstrumentation#INTERCEPT_CLASS}.
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/AbstractNIOConnPoolInstrumentation.java
Patch:
@@ -29,8 +29,8 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link AbstractNIOConnPoolInstrumentation} presents that skywalking intercept {@link
- * org.apache.http.nio.protocol.AbstractNIOConnPool #requestCompleted}.
+ * {@link AbstractNIOConnPoolInstrumentation} presents that skywalking intercept
+ * org.apache.http.nio.protocol.AbstractNIOConnPool#requestCompleted
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/DefaultConnectingIOReactorInstrumentation.java
Patch:
@@ -29,8 +29,8 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link DefaultConnectingIOReactorInstrumentation} presents that skywalking intercepts {@link
- * org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor#processEvent}
+ * {@link DefaultConnectingIOReactorInstrumentation} presents that skywalking intercepts
+ * org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor#processEvent
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/ExecuteInstrumentation.java
Patch:
@@ -31,7 +31,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link ExecuteInstrumentation} presents that skywalking intercepts {@link org.apache.http.impl.nio.client.CloseableHttpAsyncClient#execute}
+ * {@link ExecuteInstrumentation} presents that skywalking intercepts org.apache.http.impl.nio.client.CloseableHttpAsyncClient#execute
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/ProcessResponseInstrumentation.java
Patch:
@@ -28,12 +28,11 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link ProcessResponseInstrumentation} presents that skywalking intercept {@link
- * org.apache.http.nio.protocol.HttpAsyncRequestExecutor#processResponse,#connected} .
+ * {@link ProcessResponseInstrumentation} presents that skywalking intercept
+ * org.apache.http.nio.protocol.HttpAsyncRequestExecutor#processResponse and #connected
  *
  * @author liyuntao
  */
-
 public class ProcessResponseInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "org.apache.http.nio.protocol.HttpAsyncRequestExecutor";

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/SessionRequestImplInstrumentation.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.apm.plugin.httpasyncclient.v4.define;
 
+import java.io.IOException;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
@@ -29,8 +30,8 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link SessionRequestImplInstrumentation} presents that skywalking intercepts {@link
- * org.apache.http.impl.nio.reactor.SessionRequestImpl#failed(final IOException exception)}
+ * {@link SessionRequestImplInstrumentation} presents that skywalking intercepts
+ * {@link org.apache.http.impl.nio.reactor.SessionRequestImpl#failed(IOException)} }
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/StateInstrumentation.java
Patch:
@@ -29,8 +29,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link StateInstrumentation} presents that skywalking intercept {@link org.apache.http.nio.protocol.HttpAsyncRequestExecutor$State#setRequest
- * #setResponse} .
+ * {@link StateInstrumentation} presents that skywalking intercept  org.apache.http.nio.protocol.HttpAsyncRequestExecutor$State#setRequest
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/trace/ConnectionInfo.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * {@link ConnectionInfo} stored the jdbc connection info, the connection info contains db type, host, port, database
- * name. The {@link #hosts} be null if {@link #host} is not null.
+ * name.
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/KafkaConsumerInterceptor.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * @autor zhang xin
+ * @author  zhang xin
  */
 public class KafkaConsumerInterceptor implements InstanceMethodsAroundInterceptor {
 

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v2/define/InterceptPoint.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 
 /**
- * @auther liyuntao
+ * @author liyuntao
  */
 public abstract class InterceptPoint implements InstanceMethodsInterceptPoint {
     private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBCollectionMethodInterceptor";

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateCallableStatementInterceptor.java
Patch:
@@ -27,9 +27,6 @@
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**
- * {@link CreateStatementInterceptor} intercepts the {@link com.mysql.jdbc.ConnectionImpl#createStatement()} method in
- * the {@link com.mysql.jdbc.ConnectionImpl} class.
- *
  * @author zhangxin
  */
 public class CreateCallableStatementInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateStatementInterceptor.java
Patch:
@@ -27,9 +27,6 @@
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**
- * {@link CreateStatementInterceptor} intercepts the {@link com.mysql.jdbc.ConnectionImpl#createStatement()} method in
- * the {@link com.mysql.jdbc.ConnectionImpl} class.
- *
  * @author zhangxin
  */
 public class CreateStatementInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/ConnectionInstrumentation.java
Patch:
@@ -31,8 +31,8 @@
 import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
 
 /**
- * {@link ConnectionInstrumentation} intercepts the following methods that the class which extend {@link
- * com.mysql.jdbc.ConnectionImpl}. <br/>
+ * {@link ConnectionInstrumentation} intercepts the following methods that the class which extend
+ * com.mysql.jdbc.ConnectionImpl. 
  *
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>
  * 2. Enhance <code>prepareCall</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareCallInterceptor</code>

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/Mysql50ConnectionInstrumentation.java
Patch:
@@ -24,7 +24,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link Mysql50ConnectionInstrumentation} interceptor the {@link com.mysql.jdbc.Connection} class in the 5.0.x verison
+ * {@link Mysql50ConnectionInstrumentation} interceptor the com.mysql.jdbc.Connection class in the 5.0.x verison
  * of mysql driver jar.
  *
  * @author zhangxin

File: apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/oracle/define/ConnectionInstrumentation.java
Patch:
@@ -32,13 +32,13 @@
 
 /**
  * {@link ConnectionInstrumentation} define that the oracle plugin intercept the following methods that the class which
- * extend {@link oracle.jdbc.driver.PhysicalConnection}. <br/>
- * <pre>
+ * extend oracle.jdbc.driver.PhysicalConnection
+ * 
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.oracle.CreatePreparedStatementInterceptor</code>
  * 2. Enhance <code>prepareCall</code> by <code>org.apache.skywalking.apm.plugin.jdbc.oracle.CreateCallableInterceptor</code>
  * 3. Enhance <code>createStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.oracle.CreateStatementInterceptor</code>
  * 4. Enhance <code>commit, rollback, close, releaseSavepoint</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.ConnectionServiceMethodInterceptor</code>
- * </pre>
+ *
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/oracle/define/OracleCallableInstrumentation.java
Patch:
@@ -31,8 +31,8 @@
 
 /**
  * {@link OracleCallableInstrumentation} define that the oracle plugin intercept the <code>execute, executeQuery and
- * executeUpdate</code> method in {@link oracle.jdbc.driver.OracleCallableStatement} class by ${@link
- * org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
+ * executeUpdate</code> method in {@link oracle.jdbc.driver.OracleCallableStatement} class by
+ * {@link org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/oracle/define/OraclePrepareStatementInstrumentation.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * {@link OraclePrepareStatementInstrumentation} define that the oracle plugin intercept the <code>execute,
- * executeQuery, executeUpdate and executeLargeUpdate</code> method in {@link oracle.jdbc.driver.OraclePreparedStatement}
+ * executeQuery, executeUpdate and executeLargeUpdate</code> method in  oracle.jdbc.driver.OraclePreparedStatement
  * class by ${@link org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
  *
  * @author zhangxin

File: apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/oracle/define/OracleStatementInstrumentation.java
Patch:
@@ -31,8 +31,8 @@
 
 /**
  * {@link OracleStatementInstrumentation} define that the oracle plugin intercept the <code>execute, executeQuery,
- * executeUpdate and executeLargeUpdate</code> method in {@link oracle.jdbc.driver.OracleStatement} class by ${@link
- * org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
+ * executeUpdate and executeLargeUpdate</code> method in {@link oracle.jdbc.driver.OracleStatement} class by
+ * {@link org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/AbstractJdbc2StatementInstrumentation.java
Patch:
@@ -21,9 +21,9 @@
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.plugin.jdbc.postgresql.StatementExecuteMethodsInterceptor;
 
@@ -34,8 +34,8 @@
 import static org.apache.skywalking.apm.plugin.jdbc.postgresql.Variables.PG_STATEMENT_EXECUTE_METHOD_INTERCEPTOR;
 
 /**
- * {@link AbstractJdbc2StatementInstrumentation} intercept the following methods that the class which extend {@link
- * org.postgresql.jdbc2.AbstractJdbc2Statement} by {@link StatementExecuteMethodsInterceptor}. <br/>
+ * {@link AbstractJdbc2StatementInstrumentation} intercept the following methods that the class which extend
+ * org.postgresql.jdbc2.AbstractJdbc2Statement by {@link StatementExecuteMethodsInterceptor}.
  * 1. the <code>execute</code> with non parameter
  * 2. the <code>execute</code> with one parameter
  * 3. the <code>executeBatch</code>

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/ConnectionInstrumentation.java
Patch:
@@ -21,9 +21,9 @@
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
@@ -32,8 +32,8 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;
 
 /**
- * {@link ConnectionInstrumentation} intercept the following methods that the class which extend {@link
- * org.postgresql.jdbc.PgConnection}. <br/>
+ * {@link ConnectionInstrumentation} intercept the following methods that the class which extend
+ * {@link org.postgresql.jdbc.PgConnection}.
  *
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>
  * 2. Enhance <code>prepareStatement</code> that the seconds argument type is <code>java.lang.String[]</code> by

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java
Patch:
@@ -21,18 +21,18 @@
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link Jdbc4ConnectionInstrumentation} intercept the following methods that the class which extend {@link
- * org.postgresql.jdbc4.Jdbc4Connection}. <br/>
+ * {@link Jdbc4ConnectionInstrumentation} intercept the following methods that the class which extend
+ * org.postgresql.jdbc4.Jdbc4Connection.
  *
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>
  * 2. Enhance <code>prepareCall</code> by

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v3/ResinV3Interceptor.java
Patch:
@@ -34,9 +34,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {@link ResinV3Interceptor} intercept method of{@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,
- * javax.servlet.ServletResponse)} record the resin host, port ,url.
- *
  * @author baiyang
  */
 public class ResinV3Interceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v3/define/ResinV3Instrumentation.java
Patch:
@@ -31,8 +31,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link ResinV3Instrumentation} presents that skywalking intercepts {@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,
- * javax.servlet.ServletResponse)} by using {@link ResinV3Interceptor}.
+ * {@link ResinV3Instrumentation} presents that skywalking intercepts
+ * {@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)}
+ * by using {@link ResinV3Interceptor}.
  *
  * @author baiyang
  */

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v4/define/ResinV4Instrumentation.java
Patch:
@@ -31,8 +31,9 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link ResinV4Instrumentation} presents that skywalking intercepts {@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,
- * javax.servlet.ServletResponse)} by using {@link ResinV4Interceptor}.
+ * {@link ResinV4Instrumentation} presents that skywalking intercepts
+ * {@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)}
+ * by using {@link ResinV4Interceptor}.
  *
  * @author baiyang
  */

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/ProducerOperationHandlerInterceptor.java
Patch:
@@ -32,9 +32,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {org.apache.skywalking.apm.plugin.servicecomb.ProducerOperationHandlerInterceptor} define how to enhance class {@link
- * ProducerOperationHandler#handle(io.servicecomb.core.Invocation, io.servicecomb.swagger.invocation.AsyncResponse)}.
- *
  * @author lytscu
  */
 public class ProducerOperationHandlerInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/TransportClientHandlerInterceptor.java
Patch:
@@ -33,9 +33,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {@link TransportClientHandlerInterceptor} define how to enhance class {@link TransportClientHandler#handle(io.servicecomb.core.Invocation,
- * io.servicecomb.swagger.invocation.AsyncResponse)}.
- *
  * @author lytscu
  */
 public class TransportClientHandlerInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/define/ProducerOperationHandlerInstrumentation.java
Patch:
@@ -29,9 +29,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link ProducerOperationHandlerInstrumentation} represents that skywalking intercept {@link
- * ProducerOperationHandler#handle(io.servicecomb.core.Invocation, io.servicecomb.swagger.invocation.AsyncResponse)}by
- * using {@link ProducerOperationHandlerInterceptor}
+ * {@link ProducerOperationHandlerInstrumentation} represents that skywalking intercept
+ * {@link io.servicecomb.core.handler.impl.ProducerOperationHandler#handle(io.servicecomb.core.Invocation, io.servicecomb.swagger.invocation.AsyncResponse)}by
+ * using ProducerOperationHandlerInterceptor
  *
  * @author lytscu
  */

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/define/TransportClientHandlerInstrumentation.java
Patch:
@@ -30,8 +30,8 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link TransportClientHandlerInstrumentation} represents that skywalking intercept {@link TransportClientHandler}by
- * using {@linkTransportClientHandlerInterceptor }
+ * {@link TransportClientHandlerInstrumentation} represents that skywalking intercept {@link TransportClientHandler} by
+ * using linkTransportClientHandlerInterceptor
  *
  * @author lytscu
  */

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/ProducerOperationHandlerInterceptor.java
Patch:
@@ -32,9 +32,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {ProducerOperationHandlerInterceptor} define how to enhance class {@link
- * ProducerOperationHandler#handle(org.apache.servicecomb.core.Invocation, org.apache.servicecomb.swagger.invocation.AsyncResponse)}.
- *
  * @author lytscu
  */
 public class ProducerOperationHandlerInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/TransportClientHandlerInterceptor.java
Patch:
@@ -33,9 +33,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {@link TransportClientHandlerInterceptor} define how to enhance class {@link TransportClientHandler#handle(org.apache.servicecomb.core.Invocation,
- * org.apache.servicecomb.swagger.invocation.AsyncResponse)}.
- *
  * @author lytscu
  */
 public class TransportClientHandlerInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/define/ProducerOperationHandlerInstrumentation.java
Patch:
@@ -29,9 +29,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link ProducerOperationHandlerInstrumentation} represents that skywalking intercept {@link
- * ProducerOperationHandler#handle(org.apache.servicecomb.core.Invocation, org.apache.servicecomb.swagger.invocation.AsyncResponse)}by
- * using {@link ProducerOperationHandlerInterceptor}
+ * {@link ProducerOperationHandlerInstrumentation} represents that skywalking intercept
+ * {@link org.apache.servicecomb.core.handler.impl.ProducerOperationHandler#handle(org.apache.servicecomb.core.Invocation, org.apache.servicecomb.swagger.invocation.AsyncResponse)}
+ * by using ProducerOperationHandlerInterceptor
  *
  * @author lytscu
  */

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/define/TransportClientHandlerInstrumentation.java
Patch:
@@ -20,7 +20,6 @@
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
-import org.apache.servicecomb.core.handler.impl.TransportClientHandler;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
@@ -30,8 +29,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link TransportClientHandlerInstrumentation} represents that skywalking intercept {@link TransportClientHandler}by
- * using {@linkTransportClientHandlerInterceptor }
+ * {@link TransportClientHandlerInstrumentation} represents that skywalking intercept
+ * {@link org.apache.servicecomb.core.handler.impl.TransportClientHandler} by
+ * using linkTransportClientHandlerInterceptor
  *
  * @author lytscu
  */

File: apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/sjdbc/define/ExecutorEngineConstructorInterceptor.java
Patch:
@@ -19,13 +19,13 @@
 
 package org.apache.skywalking.apm.plugin.sjdbc.define;
 
-import com.dangdang.ddframe.rdb.sharding.executor.ExecutorEngine;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 import org.apache.skywalking.apm.plugin.sjdbc.ExecuteEventListener;
 
 /**
- * {@link ExecutorEngineConstructorInterceptor} enhances {@link ExecutorEngine#}'s constructor, initializing {@link ExecuteEventListener}
+ * {@link ExecutorEngineConstructorInterceptor} enhances {@link com.dangdang.ddframe.rdb.sharding.executor.ExecutorEngine}'s constructor,
+ * initializing {@link ExecuteEventListener}
  * 
  * @author gaohongtao
  */

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.aop.framework.AdvisedSupport;
 
 /**
- * <code>CreateAopProxyInterceptor</code> check that the bean has been implement {@link EnhancedInstance}. <p/>
+ * <code>CreateAopProxyInterceptor</code> check that the bean has been implement {@link EnhancedInstance}.
  * if yes, true will be returned.
  *
  * @author zhang xin

File: apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xmemcached/v2/XMemcachedConstructorWithInetSocketAddressListArgInterceptor.java
Patch:
@@ -26,9 +26,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 
 /**
- * {@link XMemcachedConstructorWithInetSocketAddressListArgInterceptor} intercept constructor of 
- * {@link XMemcachedClient(List<InetSocketAddress> addressList).
- * 
  * @author IluckySi
  */
 public class XMemcachedConstructorWithInetSocketAddressListArgInterceptor implements InstanceConstructorInterceptor {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/span/SkywalkingSpanActivation.java
Patch:
@@ -49,7 +49,7 @@
  *
  * 4. The <code>SpanLogInterceptor</code>
  * interceptor enhance the <code>log</code> method that the first argument type is {@link Long} and the second
- * argument type is {@link Map<String,?>}
+ * argument type is {@link Map}
  *
  * 5. The <code>SpanSetOperationNameInterceptor</code>
  * interceptor enhance the <code>setOperationName</code> method

File: apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/oracle/define/ConnectionInstrumentation.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * {@link ConnectionInstrumentation} define that the oracle plugin intercept the following methods that the class which
- * extend {@link oracle.jdbc.driver.PhysicalConnection}. 
+ * extend oracle.jdbc.driver.PhysicalConnection
  * 
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.oracle.CreatePreparedStatementInterceptor</code>
  * 2. Enhance <code>prepareCall</code> by <code>org.apache.skywalking.apm.plugin.jdbc.oracle.CreateCallableInterceptor</code>

File: apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/oracle/define/ConnectionInstrumentation.java
Patch:
@@ -32,13 +32,13 @@
 
 /**
  * {@link ConnectionInstrumentation} define that the oracle plugin intercept the following methods that the class which
- * extend {@link oracle.jdbc.driver.PhysicalConnection}. <br/>
- * <pre>
+ * extend {@link oracle.jdbc.driver.PhysicalConnection}. 
+ * 
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.oracle.CreatePreparedStatementInterceptor</code>
  * 2. Enhance <code>prepareCall</code> by <code>org.apache.skywalking.apm.plugin.jdbc.oracle.CreateCallableInterceptor</code>
  * 3. Enhance <code>createStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.oracle.CreateStatementInterceptor</code>
  * 4. Enhance <code>commit, rollback, close, releaseSavepoint</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.ConnectionServiceMethodInterceptor</code>
- * </pre>
+ *
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/oracle/define/OracleCallableInstrumentation.java
Patch:
@@ -31,8 +31,8 @@
 
 /**
  * {@link OracleCallableInstrumentation} define that the oracle plugin intercept the <code>execute, executeQuery and
- * executeUpdate</code> method in {@link oracle.jdbc.driver.OracleCallableStatement} class by ${@link
- * org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
+ * executeUpdate</code> method in {@link oracle.jdbc.driver.OracleCallableStatement} class by
+ * {@link org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/oracle/define/OraclePrepareStatementInstrumentation.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * {@link OraclePrepareStatementInstrumentation} define that the oracle plugin intercept the <code>execute,
- * executeQuery, executeUpdate and executeLargeUpdate</code> method in {@link oracle.jdbc.driver.OraclePreparedStatement}
+ * executeQuery, executeUpdate and executeLargeUpdate</code> method in  oracle.jdbc.driver.OraclePreparedStatement
  * class by ${@link org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
  *
  * @author zhangxin

File: apm-sniffer/apm-sdk-plugin/oracle-10.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/oracle/define/OracleStatementInstrumentation.java
Patch:
@@ -31,8 +31,8 @@
 
 /**
  * {@link OracleStatementInstrumentation} define that the oracle plugin intercept the <code>execute, executeQuery,
- * executeUpdate and executeLargeUpdate</code> method in {@link oracle.jdbc.driver.OracleStatement} class by ${@link
- * org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
+ * executeUpdate and executeLargeUpdate</code> method in {@link oracle.jdbc.driver.OracleStatement} class by
+ * {@link org.apache.skywalking.apm.plugin.jdbc.oracle.StatementExecuteMethodsInterceptor}
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v3/ResinV3Interceptor.java
Patch:
@@ -34,9 +34,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {@link ResinV3Interceptor} intercept method of{@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,
- * javax.servlet.ServletResponse)} record the resin host, port ,url.
- *
  * @author baiyang
  */
 public class ResinV3Interceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v3/define/ResinV3Instrumentation.java
Patch:
@@ -31,8 +31,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link ResinV3Instrumentation} presents that skywalking intercepts {@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,
- * javax.servlet.ServletResponse)} by using {@link ResinV3Interceptor}.
+ * {@link ResinV3Instrumentation} presents that skywalking intercepts
+ * {@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)}
+ * by using {@link ResinV3Interceptor}.
  *
  * @author baiyang
  */

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v4/define/ResinV4Instrumentation.java
Patch:
@@ -31,8 +31,9 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link ResinV4Instrumentation} presents that skywalking intercepts {@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,
- * javax.servlet.ServletResponse)} by using {@link ResinV4Interceptor}.
+ * {@link ResinV4Instrumentation} presents that skywalking intercepts
+ * {@link com.caucho.server.dispatch.ServletInvocation#service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)}
+ * by using {@link ResinV4Interceptor}.
  *
  * @author baiyang
  */

File: apm-application-toolkit/apm-toolkit-log4j-2.x/src/main/java/org/apache/skywalking/apm/toolkit/log/log4j/v2/x/TraceIdConverter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * {@link TraceIdConverter} is a log4j2 plugin, by annotation as {@link Plugin}.
  * It convert the pattern key: traceId.
- * Use '%traceId' in log4j2's config: <PatternLayout pattern="%d [%traceId] %-5p %c{1}:%L - %m%n"/>,
+ * Use '%traceId' in log4j2's config.
  * '%traceId' will output as TID:xxxx
  * <p>
  * Created by wusheng on 2016/12/7.

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/AbstractNIOConnPoolInstrumentation.java
Patch:
@@ -29,8 +29,8 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link AbstractNIOConnPoolInstrumentation} presents that skywalking intercept {@link
- * org.apache.http.nio.protocol.AbstractNIOConnPool #requestCompleted}.
+ * {@link AbstractNIOConnPoolInstrumentation} presents that skywalking intercept
+ * org.apache.http.nio.protocol.AbstractNIOConnPool#requestCompleted
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/DefaultConnectingIOReactorInstrumentation.java
Patch:
@@ -29,8 +29,8 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link DefaultConnectingIOReactorInstrumentation} presents that skywalking intercepts {@link
- * org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor#processEvent}
+ * {@link DefaultConnectingIOReactorInstrumentation} presents that skywalking intercepts
+ * org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor#processEvent
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/ExecuteInstrumentation.java
Patch:
@@ -31,7 +31,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link ExecuteInstrumentation} presents that skywalking intercepts {@link org.apache.http.impl.nio.client.CloseableHttpAsyncClient#execute}
+ * {@link ExecuteInstrumentation} presents that skywalking intercepts org.apache.http.impl.nio.client.CloseableHttpAsyncClient#execute
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/ProcessResponseInstrumentation.java
Patch:
@@ -28,12 +28,11 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link ProcessResponseInstrumentation} presents that skywalking intercept {@link
- * org.apache.http.nio.protocol.HttpAsyncRequestExecutor#processResponse,#connected} .
+ * {@link ProcessResponseInstrumentation} presents that skywalking intercept
+ * org.apache.http.nio.protocol.HttpAsyncRequestExecutor#processResponse and #connected
  *
  * @author liyuntao
  */
-
 public class ProcessResponseInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "org.apache.http.nio.protocol.HttpAsyncRequestExecutor";

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/SessionRequestImplInstrumentation.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.apm.plugin.httpasyncclient.v4.define;
 
+import java.io.IOException;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
@@ -29,8 +30,8 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link SessionRequestImplInstrumentation} presents that skywalking intercepts {@link
- * org.apache.http.impl.nio.reactor.SessionRequestImpl#failed(final IOException exception)}
+ * {@link SessionRequestImplInstrumentation} presents that skywalking intercepts
+ * {@link org.apache.http.impl.nio.reactor.SessionRequestImpl#failed(IOException)} }
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/httpasyncclient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpasyncclient/v4/define/StateInstrumentation.java
Patch:
@@ -29,8 +29,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link StateInstrumentation} presents that skywalking intercept {@link org.apache.http.nio.protocol.HttpAsyncRequestExecutor$State#setRequest
- * #setResponse} .
+ * {@link StateInstrumentation} presents that skywalking intercept  org.apache.http.nio.protocol.HttpAsyncRequestExecutor$State#setRequest
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/KafkaConsumerInterceptor.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * @autor zhang xin
+ * @author  zhang xin
  */
 public class KafkaConsumerInterceptor implements InstanceMethodsAroundInterceptor {
 

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/ProducerOperationHandlerInterceptor.java
Patch:
@@ -32,9 +32,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {org.apache.skywalking.apm.plugin.servicecomb.ProducerOperationHandlerInterceptor} define how to enhance class {@link
- * ProducerOperationHandler#handle(io.servicecomb.core.Invocation, io.servicecomb.swagger.invocation.AsyncResponse)}.
- *
  * @author lytscu
  */
 public class ProducerOperationHandlerInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/TransportClientHandlerInterceptor.java
Patch:
@@ -33,9 +33,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {@link TransportClientHandlerInterceptor} define how to enhance class {@link TransportClientHandler#handle(io.servicecomb.core.Invocation,
- * io.servicecomb.swagger.invocation.AsyncResponse)}.
- *
  * @author lytscu
  */
 public class TransportClientHandlerInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/define/ProducerOperationHandlerInstrumentation.java
Patch:
@@ -29,9 +29,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link ProducerOperationHandlerInstrumentation} represents that skywalking intercept {@link
- * ProducerOperationHandler#handle(io.servicecomb.core.Invocation, io.servicecomb.swagger.invocation.AsyncResponse)}by
- * using {@link ProducerOperationHandlerInterceptor}
+ * {@link ProducerOperationHandlerInstrumentation} represents that skywalking intercept
+ * {@link io.servicecomb.core.handler.impl.ProducerOperationHandler#handle(io.servicecomb.core.Invocation, io.servicecomb.swagger.invocation.AsyncResponse)}by
+ * using ProducerOperationHandlerInterceptor
  *
  * @author lytscu
  */

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-0.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/define/TransportClientHandlerInstrumentation.java
Patch:
@@ -30,8 +30,8 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link TransportClientHandlerInstrumentation} represents that skywalking intercept {@link TransportClientHandler}by
- * using {@linkTransportClientHandlerInterceptor }
+ * {@link TransportClientHandlerInstrumentation} represents that skywalking intercept {@link TransportClientHandler} by
+ * using linkTransportClientHandlerInterceptor
  *
  * @author lytscu
  */

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/ProducerOperationHandlerInterceptor.java
Patch:
@@ -32,9 +32,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {ProducerOperationHandlerInterceptor} define how to enhance class {@link
- * ProducerOperationHandler#handle(org.apache.servicecomb.core.Invocation, org.apache.servicecomb.swagger.invocation.AsyncResponse)}.
- *
  * @author lytscu
  */
 public class ProducerOperationHandlerInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/TransportClientHandlerInterceptor.java
Patch:
@@ -33,9 +33,6 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {@link TransportClientHandlerInterceptor} define how to enhance class {@link TransportClientHandler#handle(org.apache.servicecomb.core.Invocation,
- * org.apache.servicecomb.swagger.invocation.AsyncResponse)}.
- *
  * @author lytscu
  */
 public class TransportClientHandlerInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/define/ProducerOperationHandlerInstrumentation.java
Patch:
@@ -29,9 +29,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link ProducerOperationHandlerInstrumentation} represents that skywalking intercept {@link
- * ProducerOperationHandler#handle(org.apache.servicecomb.core.Invocation, org.apache.servicecomb.swagger.invocation.AsyncResponse)}by
- * using {@link ProducerOperationHandlerInterceptor}
+ * {@link ProducerOperationHandlerInstrumentation} represents that skywalking intercept
+ * {@link org.apache.servicecomb.core.handler.impl.ProducerOperationHandler#handle(org.apache.servicecomb.core.Invocation, org.apache.servicecomb.swagger.invocation.AsyncResponse)}
+ * by using ProducerOperationHandlerInterceptor
  *
  * @author lytscu
  */

File: apm-sniffer/apm-sdk-plugin/servicecomb-plugin/servicecomb-java-chassis-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/servicecomb/v1/define/TransportClientHandlerInstrumentation.java
Patch:
@@ -20,7 +20,6 @@
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
-import org.apache.servicecomb.core.handler.impl.TransportClientHandler;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
@@ -30,8 +29,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link TransportClientHandlerInstrumentation} represents that skywalking intercept {@link TransportClientHandler}by
- * using {@linkTransportClientHandlerInterceptor }
+ * {@link TransportClientHandlerInstrumentation} represents that skywalking intercept
+ * {@link org.apache.servicecomb.core.handler.impl.TransportClientHandler} by
+ * using linkTransportClientHandlerInterceptor
  *
  * @author lytscu
  */

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/span/SkywalkingSpanActivation.java
Patch:
@@ -49,7 +49,7 @@
  *
  * 4. The <code>SpanLogInterceptor</code>
  * interceptor enhance the <code>log</code> method that the first argument type is {@link Long} and the second
- * argument type is {@link Map<String,?>}
+ * argument type is {@link Map}
  *
  * 5. The <code>SpanSetOperationNameInterceptor</code>
  * interceptor enhance the <code>setOperationName</code> method

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/AbstractConnectionInstrumentation.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * {@link AbstractConnectionInstrumentation} define how to enhance the following methods that the class which extend
- * {@link java.sql.Connection}. <br/>
+ * {@link java.sql.Connection}. 
  *
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>
  * 3. Enhance <code>prepareCall</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareCallInterceptor</code>

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/define/InternalHttpClientInstrumentation.java
Patch:
@@ -28,9 +28,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 
 /**
- * {@link AbstractHttpClientInstrumentation} presents that skywalking intercepts {@link
- * org.apache.http.impl.client.InternalHttpClient#doExecute(org.apache.http.HttpHost, org.apache.http.HttpRequest,
- * org.apache.http.protocol.HttpContext)} by using {@link HttpClientInstrumentation#INTERCEPT_CLASS}.
+ * {@link AbstractHttpClientInstrumentation} presents that skywalking intercepts
+ * InternalHttpClient#doExecute
+ * by using {@link HttpClientInstrumentation#INTERCEPT_CLASS}.
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/trace/ConnectionInfo.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * {@link ConnectionInfo} stored the jdbc connection info, the connection info contains db type, host, port, database
- * name. The {@link #hosts} be null if {@link #host} is not null.
+ * name.
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v2/MongoDBCollectionMethodInterceptor.java
Patch:
@@ -38,8 +38,8 @@
 import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {@link MongoDBCollectionMethodInterceptor} intercepts  constructor of {@link com.mongodb.DBCollection}or {@link
- * com.mongodb.DBCollectionImpl} recording the ServerAddress and creating the exit span.
+ * {@link MongoDBCollectionMethodInterceptor} intercepts  constructor of {@link com.mongodb.DBCollection} or
+ * {@link com.mongodb.DBCollectionImpl} recording the ServerAddress and creating the exit span.
  *
  * @author liyuntao
  */

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v2/define/InterceptPoint.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 
 /**
- * @auther liyuntao
+ * @author liyuntao
  */
 public abstract class InterceptPoint implements InstanceMethodsInterceptPoint {
     private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBCollectionMethodInterceptor";

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateCallableStatementInterceptor.java
Patch:
@@ -27,9 +27,6 @@
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**
- * {@link CreateStatementInterceptor} intercepts the {@link com.mysql.jdbc.ConnectionImpl#createStatement()} method in
- * the {@link com.mysql.jdbc.ConnectionImpl} class.
- *
  * @author zhangxin
  */
 public class CreateCallableStatementInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateStatementInterceptor.java
Patch:
@@ -27,9 +27,6 @@
 import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**
- * {@link CreateStatementInterceptor} intercepts the {@link com.mysql.jdbc.ConnectionImpl#createStatement()} method in
- * the {@link com.mysql.jdbc.ConnectionImpl} class.
- *
  * @author zhangxin
  */
 public class CreateStatementInterceptor implements InstanceMethodsAroundInterceptor {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/ConnectionInstrumentation.java
Patch:
@@ -31,8 +31,8 @@
 import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
 
 /**
- * {@link ConnectionInstrumentation} intercepts the following methods that the class which extend {@link
- * com.mysql.jdbc.ConnectionImpl}. <br/>
+ * {@link ConnectionInstrumentation} intercepts the following methods that the class which extend
+ * com.mysql.jdbc.ConnectionImpl. 
  *
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>
  * 2. Enhance <code>prepareCall</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareCallInterceptor</code>

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/Mysql50ConnectionInstrumentation.java
Patch:
@@ -24,7 +24,7 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link Mysql50ConnectionInstrumentation} interceptor the {@link com.mysql.jdbc.Connection} class in the 5.0.x verison
+ * {@link Mysql50ConnectionInstrumentation} interceptor the com.mysql.jdbc.Connection class in the 5.0.x verison
  * of mysql driver jar.
  *
  * @author zhangxin

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/AbstractJdbc2StatementInstrumentation.java
Patch:
@@ -21,9 +21,9 @@
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.plugin.jdbc.postgresql.StatementExecuteMethodsInterceptor;
 
@@ -34,8 +34,8 @@
 import static org.apache.skywalking.apm.plugin.jdbc.postgresql.Variables.PG_STATEMENT_EXECUTE_METHOD_INTERCEPTOR;
 
 /**
- * {@link AbstractJdbc2StatementInstrumentation} intercept the following methods that the class which extend {@link
- * org.postgresql.jdbc2.AbstractJdbc2Statement} by {@link StatementExecuteMethodsInterceptor}. <br/>
+ * {@link AbstractJdbc2StatementInstrumentation} intercept the following methods that the class which extend
+ * org.postgresql.jdbc2.AbstractJdbc2Statement by {@link StatementExecuteMethodsInterceptor}.
  * 1. the <code>execute</code> with non parameter
  * 2. the <code>execute</code> with one parameter
  * 3. the <code>executeBatch</code>

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/ConnectionInstrumentation.java
Patch:
@@ -21,9 +21,9 @@
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
@@ -32,8 +32,8 @@
 import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;
 
 /**
- * {@link ConnectionInstrumentation} intercept the following methods that the class which extend {@link
- * org.postgresql.jdbc.PgConnection}. <br/>
+ * {@link ConnectionInstrumentation} intercept the following methods that the class which extend
+ * {@link org.postgresql.jdbc.PgConnection}.
  *
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>
  * 2. Enhance <code>prepareStatement</code> that the seconds argument type is <code>java.lang.String[]</code> by

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc4ConnectionInstrumentation.java
Patch:
@@ -21,18 +21,18 @@
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
-import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
 import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link Jdbc4ConnectionInstrumentation} intercept the following methods that the class which extend {@link
- * org.postgresql.jdbc4.Jdbc4Connection}. <br/>
+ * {@link Jdbc4ConnectionInstrumentation} intercept the following methods that the class which extend
+ * org.postgresql.jdbc4.Jdbc4Connection.
  *
  * 1. Enhance <code>prepareStatement</code> by <code>org.apache.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>
  * 2. Enhance <code>prepareCall</code> by

File: apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/sjdbc/define/ExecutorEngineConstructorInterceptor.java
Patch:
@@ -19,13 +19,13 @@
 
 package org.apache.skywalking.apm.plugin.sjdbc.define;
 
-import com.dangdang.ddframe.rdb.sharding.executor.ExecutorEngine;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 import org.apache.skywalking.apm.plugin.sjdbc.ExecuteEventListener;
 
 /**
- * {@link ExecutorEngineConstructorInterceptor} enhances {@link ExecutorEngine#}'s constructor, initializing {@link ExecuteEventListener}
+ * {@link ExecutorEngineConstructorInterceptor} enhances {@link com.dangdang.ddframe.rdb.sharding.executor.ExecutorEngine}'s constructor,
+ * initializing {@link ExecuteEventListener}
  * 
  * @author gaohongtao
  */

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/CreateAopProxyInterceptor.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.aop.framework.AdvisedSupport;
 
 /**
- * <code>CreateAopProxyInterceptor</code> check that the bean has been implement {@link EnhancedInstance}. <p/>
+ * <code>CreateAopProxyInterceptor</code> check that the bean has been implement {@link EnhancedInstance}.
  * if yes, true will be returned.
  *
  * @author zhang xin

File: apm-sniffer/apm-sdk-plugin/xmemcached-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xmemcached/v2/XMemcachedConstructorWithInetSocketAddressListArgInterceptor.java
Patch:
@@ -26,9 +26,6 @@
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 
 /**
- * {@link XMemcachedConstructorWithInetSocketAddressListArgInterceptor} intercept constructor of 
- * {@link XMemcachedClient(List<InetSocketAddress> addressList).
- * 
  * @author IluckySi
  */
 public class XMemcachedConstructorWithInetSocketAddressListArgInterceptor implements InstanceConstructorInterceptor {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -117,7 +117,7 @@ public static class Logging {
         /**
          * Log files directory. Default is blank string, means, use "system.out" to output logs.
          *
-         * @see {@link WriterFactory#getLogWriter()}
+         * Ref to {@link WriterFactory#getLogWriter()}
          */
         public static String DIR = "";
 
@@ -129,8 +129,6 @@ public static class Logging {
 
         /**
          * The log level. Default is debug.
-         *
-         * @see {@link LogLevel}
          */
         public static LogLevel LEVEL = LogLevel.DEBUG;
     }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/SnifferConfigInitializer.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.conf;
 
 import java.io.File;
@@ -37,7 +36,6 @@
  * The <code>SnifferConfigInitializer</code> initializes all configs in several way.
  *
  * @author wusheng
- * @see {@link #initialize()}, to learn more about how to initialzie.
  */
 public class SnifferConfigInitializer {
     private static final ILog logger = LogManager.getLogger(SnifferConfigInitializer.class);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context;
 
 import org.apache.skywalking.apm.agent.core.boot.BootService;
@@ -34,8 +33,8 @@
 /**
  * {@link ContextManager} controls the whole context of {@link TraceSegment}. Any {@link TraceSegment} relates to
  * single-thread, so this context use {@link ThreadLocal} to maintain the context, and make sure, since a {@link
- * TraceSegment} starts, all ChildOf spans are in the same context. <p> What is 'ChildOf'? {@see
- * https://github.com/opentracing/specification/blob/master/specification.md#references-between-spans}
+ * TraceSegment} starts, all ChildOf spans are in the same context. <p> What is 'ChildOf'?
+ * https://github.com/opentracing/specification/blob/master/specification.md#references-between-spans
  *
  * <p> Also, {@link ContextManager} delegates to all {@link AbstractTracerContext}'s major methods.
  *

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ids/GlobalIdGenerator.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.agent.core.context.ids;
 
 import java.util.Random;
@@ -42,8 +41,8 @@ private GlobalIdGenerator() {
      *
      * The second one represents thread id. (most likely just an integer value, would be helpful in protobuf)
      *
-     * The third one also has two parts,<br/>
-     * 1) a timestamp, measured in milliseconds<br/>
+     * The third one also has two parts,
+     * 1) a timestamp, measured in milliseconds
      * 2) a seq, in current thread, between 0(included) and 9999(included)
      *
      * Notice, a long costs 8 bytes, three longs cost 24 bytes. And at the same time, a char costs 2 bytes. So

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java
Patch:
@@ -59,7 +59,7 @@ public abstract class AbstractTracingSpan implements AbstractSpan {
     protected String componentName;
 
     /**
-     * Log is a concept from OpenTracing spec. <p> {@see https://github.com/opentracing/specification/blob/master/specification.md#log-structured-data}
+     * Log is a concept from OpenTracing spec. https://github.com/opentracing/specification/blob/master/specification.md#log-structured-data
      */
     protected List<LogDataEntity> logs;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/EntrySpan.java
Patch:
@@ -29,7 +29,7 @@
  *
  * But with the last <code>EntrySpan</code>'s tags and logs, which have more details about a service provider.
  *
- * Such as: Tomcat Embed -> Dubbox The <code>EntrySpan</code> represents the Dubbox span.
+ * Such as: Tomcat Embed - Dubbox The <code>EntrySpan</code> represents the Dubbox span.
  *
  * @author wusheng
  */

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/ExitSpan.java
Patch:
@@ -31,7 +31,7 @@
  *
  * The <code>ExitSpan</code> only presents the first one.
  *
- * Such as: Dubbox -> Apache Httpcomponent -> ....(Remote)
+ * Such as: Dubbox - Apache Httpcomponent - ...(Remote)
  * The <code>ExitSpan</code> represents the Dubbox span, and ignore the httpcomponent span's info.
  *
  * @author wusheng

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/TraceSegment.java
Patch:
@@ -22,16 +22,16 @@
 import java.util.LinkedList;
 import java.util.List;
 import org.apache.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
-import org.apache.skywalking.apm.agent.core.context.ids.DistributedTraceIds;
-import org.apache.skywalking.apm.agent.core.context.ids.ID;
 import org.apache.skywalking.apm.agent.core.context.ids.DistributedTraceId;
+import org.apache.skywalking.apm.agent.core.context.ids.DistributedTraceIds;
 import org.apache.skywalking.apm.agent.core.context.ids.GlobalIdGenerator;
+import org.apache.skywalking.apm.agent.core.context.ids.ID;
 import org.apache.skywalking.apm.agent.core.context.ids.NewDistributedTraceId;
 import org.apache.skywalking.apm.network.proto.TraceSegmentObject;
 import org.apache.skywalking.apm.network.proto.UpstreamSegment;
 
 /**
- * {@link TraceSegment} is a segment or fragment of the distributed trace. {@see https://github.com/opentracing/specification/blob/master/specification.md#the-opentracing-data-model}
+ * {@link TraceSegment} is a segment or fragment of the distributed trace. See https://github.com/opentracing/specification/blob/master/specification.md#the-opentracing-data-model
  * A {@link TraceSegment} means the segment, which exists in current {@link Thread}. And the distributed trace is formed
  * by multi {@link TraceSegment}s, because the distributed trace crosses multi-processes, multi-threads. <p>
  *

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java
Patch:
@@ -42,7 +42,7 @@ public abstract class AbstractClassEnhancePluginDefine {
      * @param builder byte-buddy's builder to manipulate target class's bytecode.
      * @param classLoader load the given transformClass
      * @return the new builder, or <code>null</code> if not be enhanced.
-     * @throws PluginException, when set builder failure.
+     * @throws PluginException when set builder failure.
      */
     public DynamicType.Builder<?> define(String transformClassName,
         DynamicType.Builder<?> builder, ClassLoader classLoader, EnhanceContext context) throws PluginException {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/ArgumentTypeNameMatch.java
Patch:
@@ -71,7 +71,7 @@ public boolean matches(MethodDescription target) {
 
     /**
      * The static method to create {@link ArgumentTypeNameMatch}
-     * This is a delegate method to follow byte-buddy {@link ElementMatcher<MethodDescription>}'s code style.
+     * This is a delegate method to follow byte-buddy {@link ElementMatcher}'s code style.
      *
      * @param index the index of arguments list.
      * @param argumentTypeName target argument type

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassInstanceMethodsEnhancePluginDefine.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Plugins, which only need enhance class static methods. Actually, inherit from {@link
  * ClassInstanceMethodsEnhancePluginDefine} has no differences with inherit from {@link ClassEnhancePluginDefine}. Just
- * override {@link ClassEnhancePluginDefine#getStaticMethodsInterceptPoints}, and return {@link null}, which means
+ * override {@link ClassEnhancePluginDefine#getStaticMethodsInterceptPoints}, and return NULL, which means
  * nothing to enhance.
  *
  * @author wusheng

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassStaticMethodsEnhancePluginDefine.java
Patch:
@@ -26,7 +26,7 @@
  * Plugins, which only need enhance class static methods. Actually, inherit from {@link
  * ClassStaticMethodsEnhancePluginDefine} has no differences with inherit from {@link ClassEnhancePluginDefine}. Just
  * override {@link ClassEnhancePluginDefine#getConstructorsInterceptPoints} and {@link
- * ClassEnhancePluginDefine#getInstanceMethodsInterceptPoints}, and return {@link null}, which means nothing to
+ * ClassEnhancePluginDefine#getInstanceMethodsInterceptPoints}, and return NULL, which means nothing to
  * enhance.
  *
  * @author wusheng

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/InstanceMethodsAroundInterceptor.java
Patch:
@@ -31,7 +31,6 @@ public interface InstanceMethodsAroundInterceptor {
     /**
      * called before target method invocation.
      *
-     * @param method
      * @param result change this result, if you want to truncate the method.
      * @throws Throwable
      */

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -37,7 +37,7 @@
  * have been traced, but, considering CPU cost of serialization/deserialization, and network bandwidth, the agent do NOT
  * send all of them to collector, if SAMPLING is on.
  * <p>
- * By default, SAMPLING is on, and {@see {@link Config.Agent#SAMPLE_N_PER_3_SECS }}
+ * By default, SAMPLING is on, and  {@link Config.Agent#SAMPLE_N_PER_3_SECS }
  *
  * @author wusheng
  */

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/HierarchyMatch.java
Patch:
@@ -85,7 +85,7 @@ public boolean isMatch(TypeDescription typeDescription) {
     }
 
     private void matchHierarchyClass(TypeDescription.Generic clazz, List<String> parentTypes) {
-        parentTypes.remove(clazz.getTypeName());
+        parentTypes.remove(clazz.asRawType().getTypeName());
         if (parentTypes.size() == 0) {
             return;
         }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/HierarchyMatch.java
Patch:
@@ -85,7 +85,7 @@ public boolean isMatch(TypeDescription typeDescription) {
     }
 
     private void matchHierarchyClass(TypeDescription.Generic clazz, List<String> parentTypes) {
-        parentTypes.remove(clazz.getTypeName());
+        parentTypes.remove(clazz.asRawType().getTypeName());
         if (parentTypes.size() == 0) {
             return;
         }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/table/register/ServerTypeDefine.java
Patch:
@@ -32,7 +32,7 @@ public class ServerTypeDefine {
     private ServerType[] serverTypes;
 
     private ServerTypeDefine() {
-        this.serverTypes = new ServerType[28];
+        this.serverTypes = new ServerType[29];
         this.serverTypeNames = new String[11];
         addServerType(new ServerType(ComponentsDefine.TOMCAT.getId(), Const.NONE, Const.EMPTY_STRING));
         addServerType(new ServerType(ComponentsDefine.HTTPCLIENT.getId(), Const.NONE, Const.EMPTY_STRING));
@@ -61,6 +61,7 @@ private ServerTypeDefine() {
         addServerType(new ServerType(ComponentsDefine.ROCKET_MQ.getId(), 9, ComponentsDefine.ROCKET_MQ.getName()));
         addServerType(new ServerType(ComponentsDefine.HTTP_ASYNC_CLIENT.getId(), Const.NONE, Const.EMPTY_STRING));
         addServerType(new ServerType(ComponentsDefine.KAFKA.getId(), 10, ComponentsDefine.KAFKA.getName()));
+        addServerType(new ServerType(ComponentsDefine.SERVICECOMB.getId(), Const.NONE, ComponentsDefine.SERVICECOMB.getName()));
     }
 
     public static ServerTypeDefine getInstance() {

File: apm-collector/apm-collector-analysis/analysis-register/register-define/src/main/java/org/apache/skywalking/apm/collector/analysis/register/define/service/INetworkAddressIDService.java
Patch:
@@ -24,7 +24,9 @@
  * @author peng-yongsheng
  */
 public interface INetworkAddressIDService extends Service {
-    int create(String networkAddress, int spanLayer);
+    int getOrCreate(String networkAddress);
 
     int get(String networkAddress);
+
+    void update(int addressId, int spanLayer, int serverType);
 }

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/InstanceIDService.java
Patch:
@@ -72,7 +72,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
     }
 
     @Override public int getOrCreateByAgentUUID(int applicationId, String agentUUID, long registerTime, String osInfo) {
-        logger.debug("get or create instance id by agent UUID, application id: {}, agentUUID: {}, registerTime: {}, osInfo: {}", applicationId, agentUUID, registerTime, osInfo);
+        logger.debug("get or getOrCreate instance id by agent UUID, application id: {}, agentUUID: {}, registerTime: {}, osInfo: {}", applicationId, agentUUID, registerTime, osInfo);
         int instanceId = getInstanceCacheService().getInstanceIdByAgentUUID(applicationId, agentUUID);
 
         if (instanceId == 0) {
@@ -93,7 +93,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
     }
 
     @Override public int getOrCreateByAddressId(int applicationId, int addressId, long registerTime) {
-        logger.debug("get or create instance id by address id, application id: {}, address id: {}, registerTime: {}", applicationId, addressId, registerTime);
+        logger.debug("get or getOrCreate instance id by address id, application id: {}, address id: {}, registerTime: {}", applicationId, addressId, registerTime);
         int instanceId = getInstanceCacheService().getInstanceIdByAddressId(applicationId, addressId);
 
         if (instanceId == 0) {

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/buffer/SegmentBufferManager.java
Patch:
@@ -81,7 +81,7 @@ public synchronized void writeBuffer(UpstreamSegment segment) {
     }
 
     private void newDataFile() throws IOException {
-        logger.debug("create new segment buffer file");
+        logger.debug("getOrCreate new segment buffer file");
         String timeBucket = String.valueOf(TimeBucketUtils.INSTANCE.getSecondTimeBucket(System.currentTimeMillis()));
         String writeFileName = DATA_FILE_PREFIX + "_" + timeBucket + "." + Const.FILE_SUFFIX;
         File dataFile = new File(BufferFileConfig.BUFFER_PATH + writeFileName);

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/standardization/ReferenceIdExchanger.java
Patch:
@@ -89,7 +89,8 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {
         }
 
         if (standardBuilder.getNetworkAddressId() == 0 && StringUtils.isNotEmpty(standardBuilder.getNetworkAddress())) {
-            int networkAddressId = networkAddressIDService.get(standardBuilder.getNetworkAddress());
+            int networkAddressId = networkAddressIDService.getOrCreate(standardBuilder.getNetworkAddress());
+
             if (networkAddressId == 0) {
                 if (logger.isDebugEnabled()) {
                     logger.debug("network address: {} from application id: {} exchange failed", standardBuilder.getNetworkAddress(), applicationId);

File: apm-collector/apm-collector-cache/collector-cache-define/src/main/java/org/apache/skywalking/apm/collector/cache/service/NetworkAddressCacheService.java
Patch:
@@ -27,4 +27,6 @@ public interface NetworkAddressCacheService extends Service {
     int getAddressId(String networkAddress);
 
     String getAddress(int addressId);
+
+    boolean compare(int addressId, int spanLayer, int serverType);
 }

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/CacheModuleGuavaProvider.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.collector.cache.CacheModule;
 import org.apache.skywalking.apm.collector.cache.guava.service.ApplicationCacheGuavaService;
 import org.apache.skywalking.apm.collector.cache.guava.service.InstanceCacheGuavaService;
-import org.apache.skywalking.apm.collector.cache.guava.service.NetworAddressCacheGuavaService;
+import org.apache.skywalking.apm.collector.cache.guava.service.NetworkAddressCacheGuavaService;
 import org.apache.skywalking.apm.collector.cache.guava.service.ServiceIdCacheGuavaService;
 import org.apache.skywalking.apm.collector.cache.guava.service.ServiceNameCacheGuavaService;
 import org.apache.skywalking.apm.collector.cache.service.ApplicationCacheService;
@@ -53,7 +53,7 @@ public class CacheModuleGuavaProvider extends ModuleProvider {
         this.registerServiceImplementation(InstanceCacheService.class, new InstanceCacheGuavaService(getManager()));
         this.registerServiceImplementation(ServiceIdCacheService.class, new ServiceIdCacheGuavaService(getManager()));
         this.registerServiceImplementation(ServiceNameCacheService.class, new ServiceNameCacheGuavaService(getManager()));
-        this.registerServiceImplementation(NetworkAddressCacheService.class, new NetworAddressCacheGuavaService(getManager()));
+        this.registerServiceImplementation(NetworkAddressCacheService.class, new NetworkAddressCacheGuavaService(getManager()));
     }
 
     @Override public void start(Properties config) throws ServiceNotProvidedException {

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/register/INetworkAddressRegisterDAO.java
Patch:
@@ -30,4 +30,6 @@ public interface INetworkAddressRegisterDAO extends DAO {
     int getMinNetworkAddressId();
 
     void save(NetworkAddress networkAddress);
+
+    void update(String id, int spanLayer, int serverType);
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/table/register/NetworkAddressTable.java
Patch:
@@ -27,5 +27,6 @@ public class NetworkAddressTable extends CommonTable {
     public static final String TABLE = "network_address";
     public static final String COLUMN_NETWORK_ADDRESS = "network_address";
     public static final String COLUMN_SPAN_LAYER = "span_layer";
+    public static final String COLUMN_SERVER_TYPE = "server_type";
     public static final String COLUMN_ADDRESS_ID = "address_id";
 }

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/define/register/NetworkAddressEsTableDefine.java
Patch:
@@ -38,5 +38,7 @@ public NetworkAddressEsTableDefine() {
     @Override public void initialize() {
         addColumn(new ElasticSearchColumnDefine(NetworkAddressTable.COLUMN_NETWORK_ADDRESS, ElasticSearchColumnDefine.Type.Keyword.name()));
         addColumn(new ElasticSearchColumnDefine(NetworkAddressTable.COLUMN_ADDRESS_ID, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(NetworkAddressTable.COLUMN_SPAN_LAYER, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(NetworkAddressTable.COLUMN_SERVER_TYPE, ElasticSearchColumnDefine.Type.Integer.name()));
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/define/register/NetworkAddressH2TableDefine.java
Patch:
@@ -34,6 +34,8 @@ public NetworkAddressH2TableDefine() {
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_NETWORK_ADDRESS, H2ColumnDefine.Type.Varchar.name()));
+        addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_SPAN_LAYER, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_SERVER_TYPE, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_ADDRESS_ID, H2ColumnDefine.Type.Int.name()));
     }
 }

File: apm-collector/apm-collector-analysis/analysis-register/register-define/src/main/java/org/apache/skywalking/apm/collector/analysis/register/define/service/INetworkAddressIDService.java
Patch:
@@ -24,7 +24,9 @@
  * @author peng-yongsheng
  */
 public interface INetworkAddressIDService extends Service {
-    int create(String networkAddress, int spanLayer);
+    int getOrCreate(String networkAddress);
 
     int get(String networkAddress);
+
+    void update(int addressId, int spanLayer, int serverType);
 }

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/InstanceIDService.java
Patch:
@@ -72,7 +72,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
     }
 
     @Override public int getOrCreateByAgentUUID(int applicationId, String agentUUID, long registerTime, String osInfo) {
-        logger.debug("get or create instance id by agent UUID, application id: {}, agentUUID: {}, registerTime: {}, osInfo: {}", applicationId, agentUUID, registerTime, osInfo);
+        logger.debug("get or getOrCreate instance id by agent UUID, application id: {}, agentUUID: {}, registerTime: {}, osInfo: {}", applicationId, agentUUID, registerTime, osInfo);
         int instanceId = getInstanceCacheService().getInstanceIdByAgentUUID(applicationId, agentUUID);
 
         if (instanceId == 0) {
@@ -93,7 +93,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
     }
 
     @Override public int getOrCreateByAddressId(int applicationId, int addressId, long registerTime) {
-        logger.debug("get or create instance id by address id, application id: {}, address id: {}, registerTime: {}", applicationId, addressId, registerTime);
+        logger.debug("get or getOrCreate instance id by address id, application id: {}, address id: {}, registerTime: {}", applicationId, addressId, registerTime);
         int instanceId = getInstanceCacheService().getInstanceIdByAddressId(applicationId, addressId);
 
         if (instanceId == 0) {

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/buffer/SegmentBufferManager.java
Patch:
@@ -81,7 +81,7 @@ public synchronized void writeBuffer(UpstreamSegment segment) {
     }
 
     private void newDataFile() throws IOException {
-        logger.debug("create new segment buffer file");
+        logger.debug("getOrCreate new segment buffer file");
         String timeBucket = String.valueOf(TimeBucketUtils.INSTANCE.getSecondTimeBucket(System.currentTimeMillis()));
         String writeFileName = DATA_FILE_PREFIX + "_" + timeBucket + "." + Const.FILE_SUFFIX;
         File dataFile = new File(BufferFileConfig.BUFFER_PATH + writeFileName);

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/standardization/ReferenceIdExchanger.java
Patch:
@@ -89,7 +89,8 @@ private ReferenceIdExchanger(ModuleManager moduleManager) {
         }
 
         if (standardBuilder.getNetworkAddressId() == 0 && StringUtils.isNotEmpty(standardBuilder.getNetworkAddress())) {
-            int networkAddressId = networkAddressIDService.get(standardBuilder.getNetworkAddress());
+            int networkAddressId = networkAddressIDService.getOrCreate(standardBuilder.getNetworkAddress());
+
             if (networkAddressId == 0) {
                 if (logger.isDebugEnabled()) {
                     logger.debug("network address: {} from application id: {} exchange failed", standardBuilder.getNetworkAddress(), applicationId);

File: apm-collector/apm-collector-cache/collector-cache-define/src/main/java/org/apache/skywalking/apm/collector/cache/service/NetworkAddressCacheService.java
Patch:
@@ -27,4 +27,6 @@ public interface NetworkAddressCacheService extends Service {
     int getAddressId(String networkAddress);
 
     String getAddress(int addressId);
+
+    boolean compare(int addressId, int spanLayer, int serverType);
 }

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/CacheModuleGuavaProvider.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.collector.cache.CacheModule;
 import org.apache.skywalking.apm.collector.cache.guava.service.ApplicationCacheGuavaService;
 import org.apache.skywalking.apm.collector.cache.guava.service.InstanceCacheGuavaService;
-import org.apache.skywalking.apm.collector.cache.guava.service.NetworAddressCacheGuavaService;
+import org.apache.skywalking.apm.collector.cache.guava.service.NetworkAddressCacheGuavaService;
 import org.apache.skywalking.apm.collector.cache.guava.service.ServiceIdCacheGuavaService;
 import org.apache.skywalking.apm.collector.cache.guava.service.ServiceNameCacheGuavaService;
 import org.apache.skywalking.apm.collector.cache.service.ApplicationCacheService;
@@ -53,7 +53,7 @@ public class CacheModuleGuavaProvider extends ModuleProvider {
         this.registerServiceImplementation(InstanceCacheService.class, new InstanceCacheGuavaService(getManager()));
         this.registerServiceImplementation(ServiceIdCacheService.class, new ServiceIdCacheGuavaService(getManager()));
         this.registerServiceImplementation(ServiceNameCacheService.class, new ServiceNameCacheGuavaService(getManager()));
-        this.registerServiceImplementation(NetworkAddressCacheService.class, new NetworAddressCacheGuavaService(getManager()));
+        this.registerServiceImplementation(NetworkAddressCacheService.class, new NetworkAddressCacheGuavaService(getManager()));
     }
 
     @Override public void start(Properties config) throws ServiceNotProvidedException {

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/register/INetworkAddressRegisterDAO.java
Patch:
@@ -30,4 +30,6 @@ public interface INetworkAddressRegisterDAO extends DAO {
     int getMinNetworkAddressId();
 
     void save(NetworkAddress networkAddress);
+
+    void update(String id, int spanLayer, int serverType);
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/table/register/NetworkAddressTable.java
Patch:
@@ -27,5 +27,6 @@ public class NetworkAddressTable extends CommonTable {
     public static final String TABLE = "network_address";
     public static final String COLUMN_NETWORK_ADDRESS = "network_address";
     public static final String COLUMN_SPAN_LAYER = "span_layer";
+    public static final String COLUMN_SERVER_TYPE = "server_type";
     public static final String COLUMN_ADDRESS_ID = "address_id";
 }

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/define/register/NetworkAddressEsTableDefine.java
Patch:
@@ -38,5 +38,7 @@ public NetworkAddressEsTableDefine() {
     @Override public void initialize() {
         addColumn(new ElasticSearchColumnDefine(NetworkAddressTable.COLUMN_NETWORK_ADDRESS, ElasticSearchColumnDefine.Type.Keyword.name()));
         addColumn(new ElasticSearchColumnDefine(NetworkAddressTable.COLUMN_ADDRESS_ID, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(NetworkAddressTable.COLUMN_SPAN_LAYER, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(NetworkAddressTable.COLUMN_SERVER_TYPE, ElasticSearchColumnDefine.Type.Integer.name()));
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/define/register/NetworkAddressH2TableDefine.java
Patch:
@@ -34,6 +34,8 @@ public NetworkAddressH2TableDefine() {
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_NETWORK_ADDRESS, H2ColumnDefine.Type.Varchar.name()));
+        addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_SPAN_LAYER, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_SERVER_TYPE, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(NetworkAddressTable.COLUMN_ADDRESS_ID, H2ColumnDefine.Type.Int.name()));
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/ui/InstanceEsUIDAO.java
Patch:
@@ -160,7 +160,7 @@ private Long heartBeatTime(AbstractQueryBuilder queryBuilder) {
         BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();
         boolQuery.must().add(QueryBuilders.rangeQuery(InstanceTable.COLUMN_HEARTBEAT_TIME).gte(start).lte(end));
         if (StringUtils.isNotEmpty(keyword)) {
-            boolQuery.must().add(QueryBuilders.termQuery(InstanceTable.COLUMN_OS_INFO, keyword));
+            boolQuery.must().add(QueryBuilders.queryStringQuery(keyword));
         }
         boolQuery.must().add(QueryBuilders.termQuery(InstanceTable.COLUMN_IS_ADDRESS, BooleanUtils.FALSE));
         searchRequestBuilder.setQuery(boolQuery);

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/jetty/handler/GraphQLHandler.java
Patch:
@@ -110,8 +110,7 @@ public GraphQLHandler(ModuleManager moduleManager) {
 
         JsonObject requestJson = gson.fromJson(request, JsonObject.class);
 
-        Type mapType = new TypeToken<Map<String, Object>>() {
-        }.getType();
+        Type mapType = new TypeToken<Map<String, Object>>() { }.getType();
 
         return execute(requestJson.get(QUERY).getAsString(), gson.fromJson(requestJson.get(VARIABLES), mapType));
     }

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/CallbackInstrumentation.java
Patch:
@@ -39,7 +39,7 @@ public class CallbackInstrumentation extends ClassInstanceMethodsEnhancePluginDe
 
     public static final String ENHANCE_CLASS = "org.apache.kafka.clients.producer.Callback";
     public static final String ENHANCE_METHOD = "onCompletion";
-    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v11.CallbackInterceptor";
+    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.CallbackInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/KafkaProducerInstrumentation.java
Patch:
@@ -48,9 +48,9 @@
  */
 public class KafkaProducerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v11.KafkaProducerInterceptor";
+    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.KafkaProducerInterceptor";
     public static final String ENHANCE_CLASS = "org.apache.kafka.clients.producer.KafkaProducer";
-    public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v11.ProducerConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.ProducerConstructorInterceptor";
     public static final String CONSTRUCTOR_INTERCEPTOR_FLAG = "org.apache.kafka.clients.producer.ProducerConfig";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/ProducerRecordInstrumentation.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class ProducerRecordInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v11.ProducerRecordConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.ProducerRecordConstructorInterceptor";
     public static final String ENHANCE_CLASS = "org.apache.kafka.clients.producer.ProducerRecord";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/CallbackInstrumentation.java
Patch:
@@ -39,7 +39,7 @@ public class CallbackInstrumentation extends ClassInstanceMethodsEnhancePluginDe
 
     public static final String ENHANCE_CLASS = "org.apache.kafka.clients.producer.Callback";
     public static final String ENHANCE_METHOD = "onCompletion";
-    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v11.CallbackInterceptor";
+    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.CallbackInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/KafkaProducerInstrumentation.java
Patch:
@@ -48,9 +48,9 @@
  */
 public class KafkaProducerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v11.KafkaProducerInterceptor";
+    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.KafkaProducerInterceptor";
     public static final String ENHANCE_CLASS = "org.apache.kafka.clients.producer.KafkaProducer";
-    public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v11.ProducerConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.ProducerConstructorInterceptor";
     public static final String CONSTRUCTOR_INTERCEPTOR_FLAG = "org.apache.kafka.clients.producer.ProducerConfig";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/kafka-v1-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/v1/define/ProducerRecordInstrumentation.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class ProducerRecordInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v11.ProducerRecordConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.kafka.v1.ProducerRecordConstructorInterceptor";
     public static final String ENHANCE_CLASS = "org.apache.kafka.clients.producer.ProducerRecord";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-collector/apm-collector-ui/collector-ui-jetty-provider/src/main/java/org/apache/skywalking/apm/collector/ui/jetty/handler/GraphQLHandler.java
Patch:
@@ -118,7 +118,7 @@ private JsonObject execute(String request, Map<String, Object> variables) {
 
             JsonObject jsonObject = new JsonObject();
             if (data != null) {
-                jsonObject.addProperty(DATA, data.toString());
+                jsonObject.add(DATA, gson.fromJson(gson.toJson(data), JsonObject.class));
             }
 
             if (CollectionUtils.isNotEmpty(errors)) {

File: apm-protocol/apm-ui-protocol/src/test/java/org/apache/skywalking/apm/ui/protocol/GraphQLScriptTest.java
Patch:
@@ -43,6 +43,7 @@ public void assertScriptFormat() {
         typeRegistry.merge(schemaParser.parse(loadSchema("server-layer.graphqls")));
         typeRegistry.merge(schemaParser.parse(loadSchema("service-layer.graphqls")));
         typeRegistry.merge(schemaParser.parse(loadSchema("alarm.graphqls")));
+        typeRegistry.merge(schemaParser.parse(loadSchema("config.graphqls")));
         RuntimeWiring wiring = buildRuntimeWiring();
         assertTrue(schemaGenerator.makeExecutableSchema(typeRegistry, wiring).getAllTypesAsList().size() > 0);
     }

File: apm-collector/apm-collector-analysis/analysis-jvm/jvm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/jvm/provider/service/MemoryMetricService.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.collector.analysis.jvm.define.service.IMemoryMetricService;
 import org.apache.skywalking.apm.collector.core.graph.Graph;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.storage.table.jvm.MemoryMetric;
@@ -53,7 +54,7 @@ public void send(int instanceId, long timeBucket, boolean isHeap, long init, lon
         memoryMetric.setId(id);
         memoryMetric.setMetricId(metricId);
         memoryMetric.setInstanceId(instanceId);
-        memoryMetric.setIsHeap(isHeap);
+        memoryMetric.setIsHeap(BooleanUtils.booleanToValue(isHeap));
         memoryMetric.setInit(init);
         memoryMetric.setMax(max);
         memoryMetric.setUsed(used);

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/segment/SegmentCostSpanListener.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.skywalking.apm.collector.core.graph.Graph;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.TimeBucketUtils;
 import org.apache.skywalking.apm.collector.storage.table.segment.SegmentCost;
 import org.slf4j.Logger;
@@ -98,7 +99,7 @@ public void parseLocal(SpanDecorator spanDecorator, int applicationId, int insta
         Graph<SegmentCost> graph = GraphManager.INSTANCE.findGraph(MetricGraphIdDefine.SEGMENT_COST_GRAPH_ID, SegmentCost.class);
         logger.debug("segment cost listener build");
         for (SegmentCost segmentCost : segmentCosts) {
-            segmentCost.setIsError(isError);
+            segmentCost.setIsError(BooleanUtils.booleanToValue(isError));
             segmentCost.setTimeBucket(timeBucket);
             graph.start(segmentCost);
         }

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/register/ApplicationRegisterSerialWorker.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.cache.CacheModule;
 import org.apache.skywalking.apm.collector.cache.service.ApplicationCacheService;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.dao.register.IApplicationRegisterDAO;
@@ -65,7 +66,7 @@ public ApplicationRegisterSerialWorker(ModuleManager moduleManager) {
                 userApplication.setApplicationCode(Const.USER_CODE);
                 userApplication.setApplicationId(Const.NONE_APPLICATION_ID);
                 userApplication.setAddressId(Const.NONE);
-                userApplication.setIsAddress(false);
+                userApplication.setIsAddress(BooleanUtils.FALSE);
                 applicationRegisterDAO.save(userApplication);
 
                 newApplication = new Application();

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/register/InstanceRegisterSerialWorker.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.cache.CacheModule;
 import org.apache.skywalking.apm.collector.cache.service.InstanceCacheService;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.dao.register.IInstanceRegisterDAO;
@@ -70,7 +71,7 @@ public InstanceRegisterSerialWorker(ModuleManager moduleManager) {
                 userInstance.setOsInfo(Const.EMPTY_STRING);
                 userInstance.setRegisterTime(System.currentTimeMillis());
                 userInstance.setAddressId(Const.NONE);
-                userInstance.setIsAddress(false);
+                userInstance.setIsAddress(BooleanUtils.FALSE);
                 instanceRegisterDAO.save(userInstance);
 
                 newInstance = new Instance();

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/InstanceIDService.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.core.graph.Graph;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
@@ -83,7 +84,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
             instance.setHeartBeatTime(registerTime);
             instance.setInstanceId(0);
             instance.setOsInfo(osInfo);
-            instance.setIsAddress(false);
+            instance.setIsAddress(BooleanUtils.FALSE);
             instance.setAddressId(Const.NONE);
 
             getInstanceRegisterGraph().start(instance);
@@ -104,7 +105,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
             instance.setHeartBeatTime(registerTime);
             instance.setInstanceId(0);
             instance.setOsInfo(Const.EMPTY_STRING);
-            instance.setIsAddress(true);
+            instance.setIsAddress(BooleanUtils.TRUE);
             instance.setAddressId(addressId);
 
             getInstanceRegisterGraph().start(instance);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/cache/NetworkAddressEsCacheDAO.java
Patch:
@@ -48,7 +48,7 @@ public NetworkAddressEsCacheDAO(ElasticSearchClient client) {
         ElasticSearchClient client = getClient();
 
         SearchRequestBuilder searchRequestBuilder = client.prepareSearch(NetworkAddressTable.TABLE);
-        searchRequestBuilder.setTypes("type");
+        searchRequestBuilder.setTypes(NetworkAddressTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH);
         searchRequestBuilder.setQuery(QueryBuilders.termQuery(NetworkAddressTable.COLUMN_NETWORK_ADDRESS, networkAddress));
         searchRequestBuilder.setSize(1);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/memorymp/AbstractMemoryMetricEsPersistenceDAO.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractMemoryMetricEsPersistenceDAO extends AbstractPersi
         memoryMetric.setMetricId((String)source.get(MemoryMetricTable.COLUMN_METRIC_ID));
 
         memoryMetric.setInstanceId(((Number)source.get(MemoryMetricTable.COLUMN_INSTANCE_ID)).intValue());
-        memoryMetric.setIsHeap((Boolean)source.get(MemoryMetricTable.COLUMN_IS_HEAP));
+        memoryMetric.setIsHeap(((Number)source.get(MemoryMetricTable.COLUMN_IS_HEAP)).intValue());
 
         memoryMetric.setInit(((Number)source.get(MemoryMetricTable.COLUMN_INIT)).longValue());
         memoryMetric.setMax(((Number)source.get(MemoryMetricTable.COLUMN_MAX)).longValue());

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/memorymp/AbstractMemoryMetricH2PersistenceDAO.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.skywalking.apm.collector.storage.table.jvm.MemoryMetricTable;
 
 /**
- * @author peng-yongsheng, clevertension
+ * @author peng-yongsheng
  */
 public abstract class AbstractMemoryMetricH2PersistenceDAO extends AbstractPersistenceH2DAO<MemoryMetric> {
 
@@ -42,7 +42,7 @@ public AbstractMemoryMetricH2PersistenceDAO(H2Client client) {
         memoryMetric.setMetricId(resultSet.getString(MemoryMetricTable.COLUMN_METRIC_ID));
 
         memoryMetric.setInstanceId(resultSet.getInt(MemoryMetricTable.COLUMN_INSTANCE_ID));
-        memoryMetric.setIsHeap(resultSet.getBoolean(MemoryMetricTable.COLUMN_IS_HEAP));
+        memoryMetric.setIsHeap(resultSet.getInt(MemoryMetricTable.COLUMN_IS_HEAP));
 
         memoryMetric.setInit(resultSet.getLong(MemoryMetricTable.COLUMN_INIT));
         memoryMetric.setMax(resultSet.getLong(MemoryMetricTable.COLUMN_MAX));

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java
Patch:
@@ -18,13 +18,14 @@
 
 package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;
 
-import java.lang.reflect.Method;
-import javax.servlet.http.HttpServletResponse;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.apache.skywalking.apm.plugin.spring.mvc.commons.EnhanceRequireObjectCache;
 
+import javax.servlet.http.HttpServletResponse;
+import java.lang.reflect.Method;
+
 public class InvokeHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {
     @Override
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
@@ -42,6 +43,5 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
 
     @Override public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,
         Class<?>[] argumentsTypes, Throwable t) {
-
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/RequestMappingMethodInterceptor.java
Patch:
@@ -19,16 +19,17 @@
 
 package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;
 
-import java.lang.reflect.Method;
 import org.springframework.web.bind.annotation.RequestMapping;
 
+import java.lang.reflect.Method;
+
 /**
  * The <code>RequestMappingMethodInterceptor</code> only use the first mapping value.
  * it will inteceptor with <code>@RequestMapping</code>
  *
  * @author clevertension
  */
-public class RequestMappingMethodInterceptor extends AbstractMethodInteceptor {
+public class RequestMappingMethodInterceptor extends AbstractMethodInterceptor {
     @Override
     public String getRequestURL(Method method) {
         String requestURL = "";

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/segment/SegmentCostSpanListener.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.skywalking.apm.collector.core.graph.Graph;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.TimeBucketUtils;
 import org.apache.skywalking.apm.collector.storage.table.segment.SegmentCost;
 import org.slf4j.Logger;
@@ -98,7 +99,7 @@ public void parseLocal(SpanDecorator spanDecorator, int applicationId, int insta
         Graph<SegmentCost> graph = GraphManager.INSTANCE.findGraph(MetricGraphIdDefine.SEGMENT_COST_GRAPH_ID, SegmentCost.class);
         logger.debug("segment cost listener build");
         for (SegmentCost segmentCost : segmentCosts) {
-            segmentCost.setIsError(isError);
+            segmentCost.setIsError(BooleanUtils.booleanToValue(isError));
             segmentCost.setTimeBucket(timeBucket);
             graph.start(segmentCost);
         }

File: apm-collector/apm-collector-analysis/analysis-jvm/jvm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/jvm/provider/service/MemoryMetricService.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.collector.analysis.jvm.define.service.IMemoryMetricService;
 import org.apache.skywalking.apm.collector.core.graph.Graph;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.storage.table.jvm.MemoryMetric;
@@ -53,7 +54,7 @@ public void send(int instanceId, long timeBucket, boolean isHeap, long init, lon
         memoryMetric.setId(id);
         memoryMetric.setMetricId(metricId);
         memoryMetric.setInstanceId(instanceId);
-        memoryMetric.setIsHeap(isHeap);
+        memoryMetric.setIsHeap(BooleanUtils.booleanToValue(isHeap));
         memoryMetric.setInit(init);
         memoryMetric.setMax(max);
         memoryMetric.setUsed(used);

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/register/ApplicationRegisterSerialWorker.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.cache.CacheModule;
 import org.apache.skywalking.apm.collector.cache.service.ApplicationCacheService;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.dao.register.IApplicationRegisterDAO;
@@ -65,7 +66,7 @@ public ApplicationRegisterSerialWorker(ModuleManager moduleManager) {
                 userApplication.setApplicationCode(Const.USER_CODE);
                 userApplication.setApplicationId(Const.NONE_APPLICATION_ID);
                 userApplication.setAddressId(Const.NONE);
-                userApplication.setIsAddress(false);
+                userApplication.setIsAddress(BooleanUtils.FALSE);
                 applicationRegisterDAO.save(userApplication);
 
                 newApplication = new Application();

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/register/InstanceRegisterSerialWorker.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.cache.CacheModule;
 import org.apache.skywalking.apm.collector.cache.service.InstanceCacheService;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.dao.register.IInstanceRegisterDAO;
@@ -70,7 +71,7 @@ public InstanceRegisterSerialWorker(ModuleManager moduleManager) {
                 userInstance.setOsInfo(Const.EMPTY_STRING);
                 userInstance.setRegisterTime(System.currentTimeMillis());
                 userInstance.setAddressId(Const.NONE);
-                userInstance.setIsAddress(false);
+                userInstance.setIsAddress(BooleanUtils.FALSE);
                 instanceRegisterDAO.save(userInstance);
 
                 newInstance = new Instance();

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/InstanceIDService.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.core.graph.Graph;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
@@ -83,7 +84,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
             instance.setHeartBeatTime(registerTime);
             instance.setInstanceId(0);
             instance.setOsInfo(osInfo);
-            instance.setIsAddress(false);
+            instance.setIsAddress(BooleanUtils.FALSE);
             instance.setAddressId(Const.NONE);
 
             getInstanceRegisterGraph().start(instance);
@@ -104,7 +105,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
             instance.setHeartBeatTime(registerTime);
             instance.setInstanceId(0);
             instance.setOsInfo(Const.EMPTY_STRING);
-            instance.setIsAddress(true);
+            instance.setIsAddress(BooleanUtils.TRUE);
             instance.setAddressId(addressId);
 
             getInstanceRegisterGraph().start(instance);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/cache/NetworkAddressEsCacheDAO.java
Patch:
@@ -48,7 +48,7 @@ public NetworkAddressEsCacheDAO(ElasticSearchClient client) {
         ElasticSearchClient client = getClient();
 
         SearchRequestBuilder searchRequestBuilder = client.prepareSearch(NetworkAddressTable.TABLE);
-        searchRequestBuilder.setTypes("type");
+        searchRequestBuilder.setTypes(NetworkAddressTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH);
         searchRequestBuilder.setQuery(QueryBuilders.termQuery(NetworkAddressTable.COLUMN_NETWORK_ADDRESS, networkAddress));
         searchRequestBuilder.setSize(1);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/memorymp/AbstractMemoryMetricEsPersistenceDAO.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractMemoryMetricEsPersistenceDAO extends AbstractPersi
         memoryMetric.setMetricId((String)source.get(MemoryMetricTable.COLUMN_METRIC_ID));
 
         memoryMetric.setInstanceId(((Number)source.get(MemoryMetricTable.COLUMN_INSTANCE_ID)).intValue());
-        memoryMetric.setIsHeap((Boolean)source.get(MemoryMetricTable.COLUMN_IS_HEAP));
+        memoryMetric.setIsHeap(((Number)source.get(MemoryMetricTable.COLUMN_IS_HEAP)).intValue());
 
         memoryMetric.setInit(((Number)source.get(MemoryMetricTable.COLUMN_INIT)).longValue());
         memoryMetric.setMax(((Number)source.get(MemoryMetricTable.COLUMN_MAX)).longValue());

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/memorymp/AbstractMemoryMetricH2PersistenceDAO.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.skywalking.apm.collector.storage.table.jvm.MemoryMetricTable;
 
 /**
- * @author peng-yongsheng, clevertension
+ * @author peng-yongsheng
  */
 public abstract class AbstractMemoryMetricH2PersistenceDAO extends AbstractPersistenceH2DAO<MemoryMetric> {
 
@@ -42,7 +42,7 @@ public AbstractMemoryMetricH2PersistenceDAO(H2Client client) {
         memoryMetric.setMetricId(resultSet.getString(MemoryMetricTable.COLUMN_METRIC_ID));
 
         memoryMetric.setInstanceId(resultSet.getInt(MemoryMetricTable.COLUMN_INSTANCE_ID));
-        memoryMetric.setIsHeap(resultSet.getBoolean(MemoryMetricTable.COLUMN_IS_HEAP));
+        memoryMetric.setIsHeap(resultSet.getInt(MemoryMetricTable.COLUMN_IS_HEAP));
 
         memoryMetric.setInit(resultSet.getLong(MemoryMetricTable.COLUMN_INIT));
         memoryMetric.setMax(resultSet.getLong(MemoryMetricTable.COLUMN_MAX));

File: apm-collector/apm-collector-analysis/analysis-jvm/jvm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/jvm/provider/service/MemoryMetricService.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.skywalking.apm.collector.analysis.jvm.define.service.IMemoryMetricService;
 import org.apache.skywalking.apm.collector.core.graph.Graph;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.storage.table.jvm.MemoryMetric;
@@ -53,7 +54,7 @@ public void send(int instanceId, long timeBucket, boolean isHeap, long init, lon
         memoryMetric.setId(id);
         memoryMetric.setMetricId(metricId);
         memoryMetric.setInstanceId(instanceId);
-        memoryMetric.setIsHeap(isHeap);
+        memoryMetric.setIsHeap(BooleanUtils.booleanToValue(isHeap));
         memoryMetric.setInit(init);
         memoryMetric.setMax(max);
         memoryMetric.setUsed(used);

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/register/ApplicationRegisterSerialWorker.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.cache.CacheModule;
 import org.apache.skywalking.apm.collector.cache.service.ApplicationCacheService;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.dao.register.IApplicationRegisterDAO;
@@ -65,7 +66,7 @@ public ApplicationRegisterSerialWorker(ModuleManager moduleManager) {
                 userApplication.setApplicationCode(Const.USER_CODE);
                 userApplication.setApplicationId(Const.NONE_APPLICATION_ID);
                 userApplication.setAddressId(Const.NONE);
-                userApplication.setIsAddress(false);
+                userApplication.setIsAddress(BooleanUtils.FALSE);
                 applicationRegisterDAO.save(userApplication);
 
                 newApplication = new Application();

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/register/InstanceRegisterSerialWorker.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.cache.CacheModule;
 import org.apache.skywalking.apm.collector.cache.service.InstanceCacheService;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.dao.register.IInstanceRegisterDAO;
@@ -70,7 +71,7 @@ public InstanceRegisterSerialWorker(ModuleManager moduleManager) {
                 userInstance.setOsInfo(Const.EMPTY_STRING);
                 userInstance.setRegisterTime(System.currentTimeMillis());
                 userInstance.setAddressId(Const.NONE);
-                userInstance.setIsAddress(false);
+                userInstance.setIsAddress(BooleanUtils.FALSE);
                 instanceRegisterDAO.save(userInstance);
 
                 newInstance = new Instance();

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/InstanceIDService.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.skywalking.apm.collector.core.graph.Graph;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
+import org.apache.skywalking.apm.collector.core.util.BooleanUtils;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
@@ -83,7 +84,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
             instance.setHeartBeatTime(registerTime);
             instance.setInstanceId(0);
             instance.setOsInfo(osInfo);
-            instance.setIsAddress(false);
+            instance.setIsAddress(BooleanUtils.FALSE);
             instance.setAddressId(Const.NONE);
 
             getInstanceRegisterGraph().start(instance);
@@ -104,7 +105,7 @@ private IInstanceRegisterDAO getInstanceRegisterDAO() {
             instance.setHeartBeatTime(registerTime);
             instance.setInstanceId(0);
             instance.setOsInfo(Const.EMPTY_STRING);
-            instance.setIsAddress(true);
+            instance.setIsAddress(BooleanUtils.TRUE);
             instance.setAddressId(addressId);
 
             getInstanceRegisterGraph().start(instance);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/cache/NetworkAddressEsCacheDAO.java
Patch:
@@ -48,7 +48,7 @@ public NetworkAddressEsCacheDAO(ElasticSearchClient client) {
         ElasticSearchClient client = getClient();
 
         SearchRequestBuilder searchRequestBuilder = client.prepareSearch(NetworkAddressTable.TABLE);
-        searchRequestBuilder.setTypes("type");
+        searchRequestBuilder.setTypes(NetworkAddressTable.TABLE_TYPE);
         searchRequestBuilder.setSearchType(SearchType.QUERY_THEN_FETCH);
         searchRequestBuilder.setQuery(QueryBuilders.termQuery(NetworkAddressTable.COLUMN_NETWORK_ADDRESS, networkAddress));
         searchRequestBuilder.setSize(1);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/memorymp/AbstractMemoryMetricEsPersistenceDAO.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractMemoryMetricEsPersistenceDAO extends AbstractPersi
         memoryMetric.setMetricId((String)source.get(MemoryMetricTable.COLUMN_METRIC_ID));
 
         memoryMetric.setInstanceId(((Number)source.get(MemoryMetricTable.COLUMN_INSTANCE_ID)).intValue());
-        memoryMetric.setIsHeap((Boolean)source.get(MemoryMetricTable.COLUMN_IS_HEAP));
+        memoryMetric.setIsHeap(((Number)source.get(MemoryMetricTable.COLUMN_IS_HEAP)).intValue());
 
         memoryMetric.setInit(((Number)source.get(MemoryMetricTable.COLUMN_INIT)).longValue());
         memoryMetric.setMax(((Number)source.get(MemoryMetricTable.COLUMN_MAX)).longValue());

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/memorymp/AbstractMemoryMetricH2PersistenceDAO.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.skywalking.apm.collector.storage.table.jvm.MemoryMetricTable;
 
 /**
- * @author peng-yongsheng, clevertension
+ * @author peng-yongsheng
  */
 public abstract class AbstractMemoryMetricH2PersistenceDAO extends AbstractPersistenceH2DAO<MemoryMetric> {
 
@@ -42,7 +42,7 @@ public AbstractMemoryMetricH2PersistenceDAO(H2Client client) {
         memoryMetric.setMetricId(resultSet.getString(MemoryMetricTable.COLUMN_METRIC_ID));
 
         memoryMetric.setInstanceId(resultSet.getInt(MemoryMetricTable.COLUMN_INSTANCE_ID));
-        memoryMetric.setIsHeap(resultSet.getBoolean(MemoryMetricTable.COLUMN_IS_HEAP));
+        memoryMetric.setIsHeap(resultSet.getInt(MemoryMetricTable.COLUMN_IS_HEAP));
 
         memoryMetric.setInit(resultSet.getLong(MemoryMetricTable.COLUMN_INIT));
         memoryMetric.setMax(resultSet.getLong(MemoryMetricTable.COLUMN_MAX));

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/agent/grpc/provider/AgentModuleGRPCProvider.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.skywalking.apm.collector.agent.grpc.provider.handler.TraceSegmentServiceHandler;
 import org.apache.skywalking.apm.collector.agent.grpc.provider.handler.naming.AgentGRPCNamingHandler;
 import org.apache.skywalking.apm.collector.agent.grpc.provider.handler.naming.AgentGRPCNamingListener;
+import org.apache.skywalking.apm.collector.analysis.metric.define.AnalysisMetricModule;
 import org.apache.skywalking.apm.collector.analysis.segment.parser.define.AnalysisSegmentParserModule;
 import org.apache.skywalking.apm.collector.cluster.ClusterModule;
 import org.apache.skywalking.apm.collector.cluster.service.ModuleListenerService;
@@ -87,7 +88,7 @@ public class AgentModuleGRPCProvider extends ModuleProvider {
     }
 
     @Override public String[] requiredModules() {
-        return new String[] {ClusterModule.NAME, NamingModule.NAME, GRPCManagerModule.NAME, AnalysisSegmentParserModule.NAME};
+        return new String[] {ClusterModule.NAME, NamingModule.NAME, GRPCManagerModule.NAME, AnalysisSegmentParserModule.NAME, AnalysisMetricModule.NAME};
     }
 
     private void addHandlers(Server gRPCServer) {

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/AlarmAssertWorker.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.skywalking.apm.collector.analysis.metric.define.MetricSource;
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.AbstractLocalAsyncWorker;
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.WorkerException;
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.StreamData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.NumberFormatUtils;
@@ -34,7 +34,7 @@
 /**
  * @author peng-yongsheng
  */
-public abstract class AlarmAssertWorker<INPUT extends Data & Metric, OUTPUT extends Data & Alarm> extends AbstractLocalAsyncWorker<INPUT, OUTPUT> {
+public abstract class AlarmAssertWorker<INPUT extends StreamData & Metric, OUTPUT extends StreamData & Alarm> extends AbstractLocalAsyncWorker<INPUT, OUTPUT> {
 
     private final Logger logger = LoggerFactory.getLogger(AlarmAssertWorker.class);
 

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/AlarmAssertWorkerProvider.java
Patch:
@@ -19,15 +19,15 @@
 package org.apache.skywalking.apm.collector.analysis.alarm.provider.worker;
 
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.AbstractLocalAsyncWorkerProvider;
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.StreamData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.table.Metric;
 import org.apache.skywalking.apm.collector.storage.table.alarm.Alarm;
 
 /**
  * @author peng-yongsheng
  */
-public abstract class AlarmAssertWorkerProvider<INPUT extends Data & Metric, OUTPUT extends Data & Alarm, WORKER_TYPE extends AlarmAssertWorker<INPUT, OUTPUT>> extends AbstractLocalAsyncWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
+public abstract class AlarmAssertWorkerProvider<INPUT extends StreamData & Metric, OUTPUT extends StreamData & Alarm, WORKER_TYPE extends AlarmAssertWorker<INPUT, OUTPUT>> extends AbstractLocalAsyncWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
 
     public AlarmAssertWorkerProvider(ModuleManager moduleManager) {
         super(moduleManager);

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationMetricAlarmAssertWorker.java
Patch:
@@ -45,7 +45,8 @@ public ApplicationMetricAlarmAssertWorker(ModuleManager moduleManager) {
     }
 
     @Override protected ApplicationAlarm newAlarmObject(String id, ApplicationMetric inputMetric) {
-        ApplicationAlarm applicationAlarm = new ApplicationAlarm(id + Const.ID_SPLIT + inputMetric.getApplicationId());
+        ApplicationAlarm applicationAlarm = new ApplicationAlarm();
+        applicationAlarm.setId(id + Const.ID_SPLIT + inputMetric.getApplicationId());
         applicationAlarm.setApplicationId(inputMetric.getApplicationId());
         return applicationAlarm;
     }

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationMetricAlarmGraph.java
Patch:
@@ -64,7 +64,7 @@ public void create() {
 
     private void link(Graph<ApplicationMetric> graph) {
         GraphManager.INSTANCE.findGraph(MetricGraphIdDefine.APPLICATION_METRIC_GRAPH_ID, ApplicationMetric.class)
-            .toFinder().findNode(MetricWorkerIdDefine.APPLICATION_METRIC_PERSISTENCE_WORKER_ID, ApplicationMetric.class)
+            .toFinder().findNode(MetricWorkerIdDefine.APPLICATION_MINUTE_METRIC_PERSISTENCE_WORKER_ID, ApplicationMetric.class)
             .addNext(new NodeProcessor<ApplicationMetric, ApplicationMetric>() {
                 @Override public int id() {
                     return AlarmWorkerIdDefine.APPLICATION_METRIC_ALARM_GRAPH_BRIDGE_WORKER_ID;

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationMetricAlarmListPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IApplicationAlarmListPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IApplicationAlarmListPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ApplicationAlarmList;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationMetricAlarmPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IApplicationAlarmPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IApplicationAlarmPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ApplicationAlarm;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationMetricAlarmToListNodeProcessor.java
Patch:
@@ -39,7 +39,8 @@ public class ApplicationMetricAlarmToListNodeProcessor implements NodeProcessor<
             + Const.ID_SPLIT + applicationAlarm.getAlarmType()
             + Const.ID_SPLIT + applicationAlarm.getApplicationId();
 
-        ApplicationAlarmList applicationAlarmList = new ApplicationAlarmList(id);
+        ApplicationAlarmList applicationAlarmList = new ApplicationAlarmList();
+        applicationAlarmList.setId(id);
         applicationAlarmList.setApplicationId(applicationAlarm.getApplicationId());
         applicationAlarmList.setSourceValue(applicationAlarm.getSourceValue());
         applicationAlarmList.setAlarmType(applicationAlarm.getAlarmType());

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationReferenceMetricAlarmAssertWorker.java
Patch:
@@ -45,7 +45,8 @@ public ApplicationReferenceMetricAlarmAssertWorker(ModuleManager moduleManager)
     }
 
     @Override protected ApplicationReferenceAlarm newAlarmObject(String id, ApplicationReferenceMetric inputMetric) {
-        ApplicationReferenceAlarm applicationReferenceAlarm = new ApplicationReferenceAlarm(id + Const.ID_SPLIT + inputMetric.getFrontApplicationId() + Const.ID_SPLIT + inputMetric.getBehindApplicationId());
+        ApplicationReferenceAlarm applicationReferenceAlarm = new ApplicationReferenceAlarm();
+        applicationReferenceAlarm.setId(id + Const.ID_SPLIT + inputMetric.getFrontApplicationId() + Const.ID_SPLIT + inputMetric.getBehindApplicationId());
         applicationReferenceAlarm.setFrontApplicationId(inputMetric.getFrontApplicationId());
         applicationReferenceAlarm.setBehindApplicationId(inputMetric.getBehindApplicationId());
         return applicationReferenceAlarm;

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationReferenceMetricAlarmGraph.java
Patch:
@@ -65,7 +65,7 @@ public void create() {
 
     private void link(Graph<ApplicationReferenceMetric> graph) {
         GraphManager.INSTANCE.findGraph(MetricGraphIdDefine.APPLICATION_REFERENCE_METRIC_GRAPH_ID, ApplicationReferenceMetric.class)
-            .toFinder().findNode(MetricWorkerIdDefine.APPLICATION_REFERENCE_METRIC_PERSISTENCE_WORKER_ID, ApplicationReferenceMetric.class)
+            .toFinder().findNode(MetricWorkerIdDefine.APPLICATION_REFERENCE_MINUTE_METRIC_PERSISTENCE_WORKER_ID, ApplicationReferenceMetric.class)
             .addNext(new NodeProcessor<ApplicationReferenceMetric, ApplicationReferenceMetric>() {
                 @Override public int id() {
                     return AlarmWorkerIdDefine.APPLICATION_REFERENCE_METRIC_ALARM_GRAPH_BRIDGE_WORKER_ID;

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationReferenceMetricAlarmListPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IApplicationReferenceAlarmListPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IApplicationReferenceAlarmListPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ApplicationReferenceAlarmList;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationReferenceMetricAlarmPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IApplicationReferenceAlarmPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IApplicationReferenceAlarmPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ApplicationReferenceAlarm;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/application/ApplicationReferenceMetricAlarmToListNodeProcessor.java
Patch:
@@ -41,7 +41,8 @@ public void process(ApplicationReferenceAlarm applicationReferenceAlarm, Next<Ap
             + Const.ID_SPLIT + applicationReferenceAlarm.getFrontApplicationId()
             + Const.ID_SPLIT + applicationReferenceAlarm.getBehindApplicationId();
 
-        ApplicationReferenceAlarmList applicationReferenceAlarmList = new ApplicationReferenceAlarmList(id);
+        ApplicationReferenceAlarmList applicationReferenceAlarmList = new ApplicationReferenceAlarmList();
+        applicationReferenceAlarmList.setId(id);
         applicationReferenceAlarmList.setFrontApplicationId(applicationReferenceAlarm.getFrontApplicationId());
         applicationReferenceAlarmList.setBehindApplicationId(applicationReferenceAlarm.getBehindApplicationId());
         applicationReferenceAlarmList.setSourceValue(applicationReferenceAlarm.getSourceValue());

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmAssertWorker.java
Patch:
@@ -45,7 +45,8 @@ public InstanceMetricAlarmAssertWorker(ModuleManager moduleManager) {
     }
 
     @Override protected InstanceAlarm newAlarmObject(String id, InstanceMetric inputMetric) {
-        InstanceAlarm instanceAlarm = new InstanceAlarm(id + Const.ID_SPLIT + inputMetric.getInstanceId());
+        InstanceAlarm instanceAlarm = new InstanceAlarm();
+        instanceAlarm.setId(id + Const.ID_SPLIT + inputMetric.getInstanceId());
         instanceAlarm.setApplicationId(inputMetric.getApplicationId());
         instanceAlarm.setInstanceId(inputMetric.getInstanceId());
         return instanceAlarm;

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmGraph.java
Patch:
@@ -64,7 +64,7 @@ public void create() {
 
     private void link(Graph<InstanceMetric> graph) {
         GraphManager.INSTANCE.findGraph(MetricGraphIdDefine.INSTANCE_METRIC_GRAPH_ID, InstanceMetric.class)
-            .toFinder().findNode(MetricWorkerIdDefine.INSTANCE_METRIC_PERSISTENCE_WORKER_ID, InstanceMetric.class)
+            .toFinder().findNode(MetricWorkerIdDefine.INSTANCE_MINUTE_METRIC_PERSISTENCE_WORKER_ID, InstanceMetric.class)
             .addNext(new NodeProcessor<InstanceMetric, InstanceMetric>() {
                 @Override public int id() {
                     return AlarmWorkerIdDefine.INSTANCE_METRIC_ALARM_GRAPH_BRIDGE_WORKER_ID;

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmListPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IInstanceAlarmListPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IInstanceAlarmListPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.InstanceAlarmList;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IInstanceAlarmPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IInstanceAlarmPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.InstanceAlarm;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceMetricAlarmToListNodeProcessor.java
Patch:
@@ -39,7 +39,8 @@ public class InstanceMetricAlarmToListNodeProcessor implements NodeProcessor<Ins
             + Const.ID_SPLIT + instanceAlarm.getAlarmType()
             + Const.ID_SPLIT + instanceAlarm.getInstanceId();
 
-        InstanceAlarmList instanceAlarmList = new InstanceAlarmList(id);
+        InstanceAlarmList instanceAlarmList = new InstanceAlarmList();
+        instanceAlarmList.setId(id);
         instanceAlarmList.setApplicationId(instanceAlarm.getApplicationId());
         instanceAlarmList.setInstanceId(instanceAlarm.getInstanceId());
         instanceAlarmList.setSourceValue(instanceAlarm.getSourceValue());

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmAssertWorker.java
Patch:
@@ -45,7 +45,8 @@ public InstanceReferenceMetricAlarmAssertWorker(ModuleManager moduleManager) {
     }
 
     @Override protected InstanceReferenceAlarm newAlarmObject(String id, InstanceReferenceMetric inputMetric) {
-        InstanceReferenceAlarm instanceReferenceAlarm = new InstanceReferenceAlarm(id + Const.ID_SPLIT + inputMetric.getFrontInstanceId() + Const.ID_SPLIT + inputMetric.getBehindInstanceId());
+        InstanceReferenceAlarm instanceReferenceAlarm = new InstanceReferenceAlarm();
+        instanceReferenceAlarm.setId(id + Const.ID_SPLIT + inputMetric.getFrontInstanceId() + Const.ID_SPLIT + inputMetric.getBehindInstanceId());
         instanceReferenceAlarm.setFrontApplicationId(inputMetric.getFrontApplicationId());
         instanceReferenceAlarm.setBehindApplicationId(inputMetric.getBehindApplicationId());
         instanceReferenceAlarm.setFrontInstanceId(inputMetric.getFrontInstanceId());

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmGraph.java
Patch:
@@ -64,7 +64,7 @@ public void create() {
 
     private void link(Graph<InstanceReferenceMetric> graph) {
         GraphManager.INSTANCE.findGraph(MetricGraphIdDefine.INSTANCE_REFERENCE_METRIC_GRAPH_ID, InstanceReferenceMetric.class)
-            .toFinder().findNode(MetricWorkerIdDefine.INSTANCE_REFERENCE_METRIC_PERSISTENCE_WORKER_ID, InstanceReferenceMetric.class)
+            .toFinder().findNode(MetricWorkerIdDefine.INSTANCE_REFERENCE_MINUTE_METRIC_PERSISTENCE_WORKER_ID, InstanceReferenceMetric.class)
             .addNext(new NodeProcessor<InstanceReferenceMetric, InstanceReferenceMetric>() {
                 @Override public int id() {
                     return AlarmWorkerIdDefine.INSTANCE_REFERENCE_METRIC_ALARM_GRAPH_BRIDGE_WORKER_ID;

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmListPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IInstanceReferenceAlarmListPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IInstanceReferenceAlarmListPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.InstanceReferenceAlarmList;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IInstanceReferenceAlarmPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IInstanceReferenceAlarmPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.InstanceReferenceAlarm;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/instance/InstanceReferenceMetricAlarmToListNodeProcessor.java
Patch:
@@ -41,7 +41,8 @@ public void process(InstanceReferenceAlarm instanceReferenceAlarm, Next<Instance
             + Const.ID_SPLIT + instanceReferenceAlarm.getFrontInstanceId()
             + Const.ID_SPLIT + instanceReferenceAlarm.getBehindInstanceId();
 
-        InstanceReferenceAlarmList instanceReferenceAlarmList = new InstanceReferenceAlarmList(id);
+        InstanceReferenceAlarmList instanceReferenceAlarmList = new InstanceReferenceAlarmList();
+        instanceReferenceAlarmList.setId(id);
         instanceReferenceAlarmList.setFrontApplicationId(instanceReferenceAlarm.getFrontApplicationId());
         instanceReferenceAlarmList.setBehindApplicationId(instanceReferenceAlarm.getBehindApplicationId());
         instanceReferenceAlarmList.setFrontInstanceId(instanceReferenceAlarm.getFrontInstanceId());

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceMetricAlarmAssertWorker.java
Patch:
@@ -45,7 +45,8 @@ public ServiceMetricAlarmAssertWorker(ModuleManager moduleManager) {
     }
 
     @Override protected ServiceAlarm newAlarmObject(String id, ServiceMetric inputMetric) {
-        ServiceAlarm serviceAlarm = new ServiceAlarm(id + Const.ID_SPLIT + inputMetric.getServiceId());
+        ServiceAlarm serviceAlarm = new ServiceAlarm();
+        serviceAlarm.setId(id + Const.ID_SPLIT + inputMetric.getServiceId());
         serviceAlarm.setApplicationId(inputMetric.getApplicationId());
         serviceAlarm.setInstanceId(inputMetric.getInstanceId());
         serviceAlarm.setServiceId(inputMetric.getServiceId());

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceMetricAlarmGraph.java
Patch:
@@ -64,7 +64,7 @@ public void create() {
 
     private void link(Graph<ServiceMetric> graph) {
         GraphManager.INSTANCE.findGraph(MetricGraphIdDefine.SERVICE_METRIC_GRAPH_ID, ServiceMetric.class)
-            .toFinder().findNode(MetricWorkerIdDefine.SERVICE_METRIC_PERSISTENCE_WORKER_ID, ServiceMetric.class)
+            .toFinder().findNode(MetricWorkerIdDefine.SERVICE_MINUTE_METRIC_PERSISTENCE_WORKER_ID, ServiceMetric.class)
             .addNext(new NodeProcessor<ServiceMetric, ServiceMetric>() {
                 @Override public int id() {
                     return AlarmWorkerIdDefine.SERVICE_METRIC_ALARM_GRAPH_BRIDGE_WORKER_ID;

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceMetricAlarmListPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IServiceAlarmListPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IServiceAlarmListPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ServiceAlarmList;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceMetricAlarmPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IServiceAlarmPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IServiceAlarmPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ServiceAlarm;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceMetricAlarmToListNodeProcessor.java
Patch:
@@ -39,7 +39,8 @@ public class ServiceMetricAlarmToListNodeProcessor implements NodeProcessor<Serv
             + Const.ID_SPLIT + serviceAlarm.getAlarmType()
             + Const.ID_SPLIT + serviceAlarm.getServiceId();
 
-        ServiceAlarmList serviceAlarmList = new ServiceAlarmList(id);
+        ServiceAlarmList serviceAlarmList = new ServiceAlarmList();
+        serviceAlarmList.setId(id);
         serviceAlarmList.setApplicationId(serviceAlarm.getApplicationId());
         serviceAlarmList.setInstanceId(serviceAlarm.getInstanceId());
         serviceAlarmList.setServiceId(serviceAlarm.getServiceId());

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceReferenceMetricAlarmAssertWorker.java
Patch:
@@ -49,7 +49,8 @@ public ServiceReferenceMetricAlarmAssertWorker(ModuleManager moduleManager) {
     }
 
     @Override protected ServiceReferenceAlarm newAlarmObject(String id, ServiceReferenceMetric inputMetric) {
-        ServiceReferenceAlarm serviceReferenceAlarm = new ServiceReferenceAlarm(id + Const.ID_SPLIT + inputMetric.getFrontServiceId() + Const.ID_SPLIT + inputMetric.getBehindServiceId());
+        ServiceReferenceAlarm serviceReferenceAlarm = new ServiceReferenceAlarm();
+        serviceReferenceAlarm.setId(id + Const.ID_SPLIT + inputMetric.getFrontServiceId() + Const.ID_SPLIT + inputMetric.getBehindServiceId());
         serviceReferenceAlarm.setFrontApplicationId(inputMetric.getFrontApplicationId());
         serviceReferenceAlarm.setBehindApplicationId(inputMetric.getBehindApplicationId());
         serviceReferenceAlarm.setFrontInstanceId(inputMetric.getFrontInstanceId());

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceReferenceMetricAlarmGraph.java
Patch:
@@ -64,7 +64,7 @@ public void create() {
 
     private void link(Graph<ServiceReferenceMetric> graph) {
         GraphManager.INSTANCE.findGraph(MetricGraphIdDefine.SERVICE_REFERENCE_METRIC_GRAPH_ID, ServiceReferenceMetric.class)
-            .toFinder().findNode(MetricWorkerIdDefine.SERVICE_REFERENCE_METRIC_PERSISTENCE_WORKER_ID, ServiceReferenceMetric.class)
+            .toFinder().findNode(MetricWorkerIdDefine.SERVICE_REFERENCE_MINUTE_METRIC_PERSISTENCE_WORKER_ID, ServiceReferenceMetric.class)
             .addNext(new NodeProcessor<ServiceReferenceMetric, ServiceReferenceMetric>() {
                 @Override public int id() {
                     return AlarmWorkerIdDefine.SERVICE_REFERENCE_METRIC_ALARM_GRAPH_BRIDGE_WORKER_ID;

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceReferenceMetricAlarmListPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IServiceReferenceAlarmListPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IServiceReferenceAlarmListPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ServiceReferenceAlarmList;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceReferenceMetricAlarmPersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.IServiceReferenceAlarmPersistenceDAO;
+import org.apache.skywalking.apm.collector.storage.dao.alarm.IServiceReferenceAlarmPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ServiceReferenceAlarm;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-alarm/alarm-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/alarm/provider/worker/service/ServiceReferenceMetricAlarmToListNodeProcessor.java
Patch:
@@ -40,7 +40,8 @@ public class ServiceReferenceMetricAlarmToListNodeProcessor implements NodeProce
             + Const.ID_SPLIT + serviceReferenceAlarm.getFrontServiceId()
             + Const.ID_SPLIT + serviceReferenceAlarm.getBehindServiceId();
 
-        ServiceReferenceAlarmList serviceReferenceAlarmList = new ServiceReferenceAlarmList(id);
+        ServiceReferenceAlarmList serviceReferenceAlarmList = new ServiceReferenceAlarmList();
+        serviceReferenceAlarmList.setId(id);
         serviceReferenceAlarmList.setFrontApplicationId(serviceReferenceAlarm.getFrontApplicationId());
         serviceReferenceAlarmList.setBehindApplicationId(serviceReferenceAlarm.getBehindApplicationId());
         serviceReferenceAlarmList.setFrontInstanceId(serviceReferenceAlarm.getFrontInstanceId());

File: apm-collector/apm-collector-analysis/analysis-jvm/jvm-define/src/main/java/org/apache/skywalking/apm/collector/analysis/jvm/define/AnalysisJVMModule.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.apache.skywalking.apm.collector.analysis.jvm.define.service.ICpuMetricService;
 import org.apache.skywalking.apm.collector.analysis.jvm.define.service.IGCMetricService;
-import org.apache.skywalking.apm.collector.analysis.jvm.define.service.IInstanceHeartBeatService;
 import org.apache.skywalking.apm.collector.analysis.jvm.define.service.IMemoryMetricService;
 import org.apache.skywalking.apm.collector.analysis.jvm.define.service.IMemoryPoolMetricService;
 import org.apache.skywalking.apm.collector.core.module.Module;
@@ -38,7 +37,7 @@ public class AnalysisJVMModule extends Module {
 
     @Override public Class[] services() {
         return new Class[] {
-            ICpuMetricService.class, IGCMetricService.class, IInstanceHeartBeatService.class,
+            ICpuMetricService.class, IGCMetricService.class,
             IMemoryMetricService.class, IMemoryPoolMetricService.class
         };
     }

File: apm-collector/apm-collector-analysis/analysis-jvm/jvm-define/src/main/java/org/apache/skywalking/apm/collector/analysis/jvm/define/graph/GraphIdDefine.java
Patch:
@@ -24,7 +24,6 @@
 public class GraphIdDefine {
     public static final int CPU_METRIC_PERSISTENCE_GRAPH_ID = 300;
     public static final int GC_METRIC_PERSISTENCE_GRAPH_ID = 301;
-    public static final int INSTANCE_HEART_BEAT_PERSISTENCE_GRAPH_ID = 302;
     public static final int MEMORY_METRIC_PERSISTENCE_GRAPH_ID = 303;
     public static final int MEMORY_POOL_METRIC_PERSISTENCE_GRAPH_ID = 304;
 }

File: apm-collector/apm-collector-analysis/analysis-jvm/jvm-define/src/main/java/org/apache/skywalking/apm/collector/analysis/jvm/define/service/IMemoryMetricService.java
Patch:
@@ -24,5 +24,5 @@
  * @author peng-yongsheng
  */
 public interface IMemoryMetricService extends Service {
-    void send(int instanceId, long timeBucket, boolean isHeap, long init, long max, long used, long commited);
+    void send(int instanceId, long timeBucket, boolean isHeap, long init, long max, long used, long committed);
 }

File: apm-collector/apm-collector-analysis/analysis-jvm/jvm-define/src/main/java/org/apache/skywalking/apm/collector/analysis/jvm/define/service/IMemoryPoolMetricService.java
Patch:
@@ -24,5 +24,5 @@
  * @author peng-yongsheng
  */
 public interface IMemoryPoolMetricService extends Service {
-    void send(int instanceId, long timeBucket, int poolType, long init, long max, long used, long commited);
+    void send(int instanceId, long timeBucket, int poolType, long init, long max, long used, long committed);
 }

File: apm-collector/apm-collector-analysis/analysis-metric/metric-define/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/define/AnalysisMetricModule.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.skywalking.apm.collector.analysis.metric.define;
 
+import org.apache.skywalking.apm.collector.analysis.metric.define.service.IInstanceHeartBeatService;
 import org.apache.skywalking.apm.collector.core.module.Module;
 
 /**
@@ -32,6 +33,6 @@ public class AnalysisMetricModule extends Module {
     }
 
     @Override public Class[] services() {
-        return new Class[] {};
+        return new Class[] {IInstanceHeartBeatService.class};
     }
 }

File: apm-collector/apm-collector-analysis/analysis-metric/metric-define/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/define/graph/MetricGraphIdDefine.java
Patch:
@@ -32,8 +32,9 @@ public class MetricGraphIdDefine {
 
     public static final int APPLICATION_COMPONENT_GRAPH_ID = 406;
     public static final int APPLICATION_MAPPING_GRAPH_ID = 407;
-    public static final int SERVICE_ENTRY_GRAPH_ID = 408;
     public static final int GLOBAL_TRACE_GRAPH_ID = 409;
     public static final int SEGMENT_COST_GRAPH_ID = 410;
     public static final int INSTANCE_MAPPING_GRAPH_ID = 411;
+
+    public static final int INSTANCE_HEART_BEAT_PERSISTENCE_GRAPH_ID = 412;
 }

File: apm-collector/apm-collector-analysis/analysis-metric/metric-define/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/define/service/IInstanceHeartBeatService.java
Patch:
@@ -16,13 +16,13 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.analysis.jvm.define.service;
+package org.apache.skywalking.apm.collector.analysis.metric.define.service;
 
 import org.apache.skywalking.apm.collector.core.module.Service;
 
 /**
  * @author peng-yongsheng
  */
 public interface IInstanceHeartBeatService extends Service {
-    void send(int instanceId, long heartBeatTime);
+    void heartBeat(int instanceId, long heartBeatTime);
 }

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/global/GlobalTraceSpanListener.java
Patch:
@@ -71,7 +71,8 @@ public void parseFirst(SpanDecorator spanDecorator, int applicationId, int insta
 
         Graph<GlobalTrace> graph = GraphManager.INSTANCE.findGraph(MetricGraphIdDefine.GLOBAL_TRACE_GRAPH_ID, GlobalTrace.class);
         for (String globalTraceId : globalTraceIds) {
-            GlobalTrace globalTrace = new GlobalTrace(segmentId + Const.ID_SPLIT + globalTraceId);
+            GlobalTrace globalTrace = new GlobalTrace();
+            globalTrace.setId(segmentId + Const.ID_SPLIT + globalTraceId);
             globalTrace.setGlobalTraceId(globalTraceId);
             globalTrace.setSegmentId(segmentId);
             globalTrace.setTimeBucket(timeBucket);

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/instance/heartbeat/InstHeartBeatPersistenceWorker.java
Patch:
@@ -16,9 +16,9 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.analysis.jvm.provider.worker;
+package org.apache.skywalking.apm.collector.analysis.metric.provider.worker.instance.heartbeat;
 
-import org.apache.skywalking.apm.collector.analysis.jvm.define.graph.WorkerIdDefine;
+import org.apache.skywalking.apm.collector.analysis.metric.define.graph.MetricWorkerIdDefine;
 import org.apache.skywalking.apm.collector.analysis.worker.model.impl.PersistenceWorker;
 import org.apache.skywalking.apm.collector.analysis.worker.model.impl.PersistenceWorkerProvider;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
@@ -37,7 +37,7 @@ public InstHeartBeatPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return WorkerIdDefine.INST_HEART_BEAT_PERSISTENCE_WORKER_ID;
+        return MetricWorkerIdDefine.INST_HEART_BEAT_PERSISTENCE_WORKER_ID;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/instance/heartbeat/InstanceHeartBeatPersistenceGraph.java
Patch:
@@ -16,9 +16,9 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.analysis.jvm.provider.worker;
+package org.apache.skywalking.apm.collector.analysis.metric.provider.worker.instance.heartbeat;
 
-import org.apache.skywalking.apm.collector.analysis.jvm.define.graph.GraphIdDefine;
+import org.apache.skywalking.apm.collector.analysis.metric.define.graph.MetricGraphIdDefine;
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.WorkerCreateListener;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
@@ -38,7 +38,7 @@ public InstanceHeartBeatPersistenceGraph(ModuleManager moduleManager, WorkerCrea
     }
 
     public void create() {
-        GraphManager.INSTANCE.createIfAbsent(GraphIdDefine.INSTANCE_HEART_BEAT_PERSISTENCE_GRAPH_ID, Instance.class)
+        GraphManager.INSTANCE.createIfAbsent(MetricGraphIdDefine.INSTANCE_HEART_BEAT_PERSISTENCE_GRAPH_ID, Instance.class)
             .addNode(new InstHeartBeatPersistenceWorker.Factory(moduleManager).create(workerCreateListener));
     }
 }

File: apm-collector/apm-collector-analysis/analysis-metric/metric-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/metric/provider/worker/segment/SegmentCostSpanListener.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.skywalking.apm.collector.core.graph.Graph;
 import org.apache.skywalking.apm.collector.core.graph.GraphManager;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
-import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.TimeBucketUtils;
 import org.apache.skywalking.apm.collector.storage.table.segment.SegmentCost;
 import org.slf4j.Logger;
@@ -61,13 +60,13 @@ public void parseFirst(SpanDecorator spanDecorator, int applicationId, int insta
         String segmentId) {
         timeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(spanDecorator.getStartTime());
 
-        SegmentCost segmentCost = new SegmentCost(Const.EMPTY_STRING);
+        SegmentCost segmentCost = new SegmentCost();
+        segmentCost.setId(segmentId);
         segmentCost.setSegmentId(segmentId);
         segmentCost.setApplicationId(applicationId);
         segmentCost.setCost(spanDecorator.getEndTime() - spanDecorator.getStartTime());
         segmentCost.setStartTime(spanDecorator.getStartTime());
         segmentCost.setEndTime(spanDecorator.getEndTime());
-        segmentCost.setId(segmentId);
         if (spanDecorator.getOperationNameId() == 0) {
             segmentCost.setServiceName(spanDecorator.getOperationName());
         } else {

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/register/IdAutoIncrement.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.analysis.register.provider.register;
 
 /**

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/NetworkAddressIDService.java
Patch:
@@ -92,7 +92,8 @@ private Graph<NetworkAddress> getNetworkAddressGraph() {
                 }
             }
         } else {
-            NetworkAddress newNetworkAddress = new NetworkAddress("0");
+            NetworkAddress newNetworkAddress = new NetworkAddress();
+            newNetworkAddress.setId("0");
             newNetworkAddress.setNetworkAddress(networkAddress);
             newNetworkAddress.setAddressId(0);
 

File: apm-collector/apm-collector-analysis/analysis-register/register-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/register/provider/service/ServiceNameService.java
Patch:
@@ -63,7 +63,8 @@ public int getOrCreate(int applicationId, String serviceName) {
         int serviceId = getServiceIdCacheService().get(applicationId, serviceName);
 
         if (serviceId == 0) {
-            ServiceName service = new ServiceName("0");
+            ServiceName service = new ServiceName();
+            service.setId("0");
             service.setApplicationId(applicationId);
             service.setServiceName(serviceName);
             service.setServiceId(0);

File: apm-collector/apm-collector-analysis/analysis-segment-parser/segment-parser-provider/src/main/java/org/apache/skywalking/apm/collector/analysis/segment/parser/provider/parser/SegmentParse.java
Patch:
@@ -162,7 +162,8 @@ private boolean preBuild(List<UniqueId> traceIds, SegmentDecorator segmentDecora
     }
 
     private void buildSegment(String id, byte[] dataBinary) {
-        Segment segment = new Segment(id);
+        Segment segment = new Segment();
+        segment.setId(id);
         segment.setDataBinary(dataBinary);
         segment.setTimeBucket(timeBucket);
         Graph<Segment> graph = GraphManager.INSTANCE.findGraph(GraphIdDefine.SEGMENT_PERSISTENCE_GRAPH_ID, Segment.class);

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractLocalAsyncWorker.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.EndOfBatchQueueMessage;
+import org.apache.skywalking.apm.collector.core.data.QueueData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 
 /**
@@ -28,7 +28,7 @@
  * @author peng-yongsheng
  * @since v3.0-2017
  */
-public abstract class AbstractLocalAsyncWorker<INPUT extends EndOfBatchQueueMessage, OUTPUT extends EndOfBatchQueueMessage> extends AbstractWorker<INPUT, OUTPUT> {
+public abstract class AbstractLocalAsyncWorker<INPUT extends QueueData, OUTPUT extends QueueData> extends AbstractWorker<INPUT, OUTPUT> {
 
     public AbstractLocalAsyncWorker(ModuleManager moduleManager) {
         super(moduleManager);

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractLocalAsyncWorkerProvider.java
Patch:
@@ -18,14 +18,14 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.EndOfBatchQueueMessage;
+import org.apache.skywalking.apm.collector.core.data.QueueData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.commons.datacarrier.DataCarrier;
 
 /**
  * @author peng-yongsheng
  */
-public abstract class AbstractLocalAsyncWorkerProvider<INPUT extends EndOfBatchQueueMessage, OUTPUT extends EndOfBatchQueueMessage, WORKER_TYPE extends AbstractLocalAsyncWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
+public abstract class AbstractLocalAsyncWorkerProvider<INPUT extends QueueData, OUTPUT extends QueueData, WORKER_TYPE extends AbstractLocalAsyncWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
 
     public abstract int queueSize();
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractRemoteWorker.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.remote.service.Selector;
 
@@ -31,7 +31,7 @@
  * @author peng-yongsheng
  * @since v3.0-2017
  */
-public abstract class AbstractRemoteWorker<INPUT extends Data, OUTPUT extends Data> extends AbstractWorker<INPUT, OUTPUT> {
+public abstract class AbstractRemoteWorker<INPUT extends RemoteData, OUTPUT extends RemoteData> extends AbstractWorker<INPUT, OUTPUT> {
 
     public AbstractRemoteWorker(ModuleManager moduleManager) {
         super(moduleManager);

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractRemoteWorkerProvider.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.remote.service.RemoteSenderService;
 
@@ -30,7 +30,7 @@
  * @author peng-yongsheng
  * @since v3.0-2017
  */
-public abstract class AbstractRemoteWorkerProvider<INPUT extends Data, OUTPUT extends Data, WORKER_TYPE extends AbstractRemoteWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
+public abstract class AbstractRemoteWorkerProvider<INPUT extends RemoteData, OUTPUT extends RemoteData, WORKER_TYPE extends AbstractRemoteWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
 
     private final RemoteSenderService remoteSenderService;
     private final int graphId;

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractWorker.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.EndOfBatchQueueMessage;
 import org.apache.skywalking.apm.collector.core.graph.Next;
 import org.apache.skywalking.apm.collector.core.graph.NodeProcessor;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
@@ -28,13 +27,13 @@
 /**
  * @author peng-yongsheng
  */
-public abstract class AbstractWorker<INPUT extends EndOfBatchQueueMessage, OUTPUT extends EndOfBatchQueueMessage> implements NodeProcessor<INPUT, OUTPUT> {
+public abstract class AbstractWorker<INPUT, OUTPUT> implements NodeProcessor<INPUT, OUTPUT> {
 
     private final Logger logger = LoggerFactory.getLogger(AbstractWorker.class);
 
     private final ModuleManager moduleManager;
 
-    public AbstractWorker(ModuleManager moduleManager) {
+    AbstractWorker(ModuleManager moduleManager) {
         this.moduleManager = moduleManager;
     }
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractWorkerProvider.java
Patch:
@@ -18,17 +18,16 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.EndOfBatchQueueMessage;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 
 /**
  * @author peng-yongsheng
  */
-public abstract class AbstractWorkerProvider<INPUT extends EndOfBatchQueueMessage, OUTPUT extends EndOfBatchQueueMessage, WORKER_TYPE extends AbstractWorker<INPUT, OUTPUT>> implements Provider {
+public abstract class AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE extends AbstractWorker<INPUT, OUTPUT>> implements Provider {
 
     private final ModuleManager moduleManager;
 
-    public AbstractWorkerProvider(ModuleManager moduleManager) {
+    AbstractWorkerProvider(ModuleManager moduleManager) {
         this.moduleManager = moduleManager;
     }
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/RemoteWorkerRef.java
Patch:
@@ -18,15 +18,15 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.remote.service.RemoteSenderService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * @author peng-yongsheng
  */
-public class RemoteWorkerRef<INPUT extends Data, OUTPUT extends Data> extends WorkerRef<INPUT, OUTPUT> {
+public class RemoteWorkerRef<INPUT extends RemoteData, OUTPUT extends RemoteData> extends WorkerRef<INPUT, OUTPUT> {
 
     private final Logger logger = LoggerFactory.getLogger(RemoteWorkerRef.class);
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/WorkerCreateListener.java
Patch:
@@ -33,7 +33,7 @@ public WorkerCreateListener() {
         this.persistenceWorkers = new ArrayList<>();
     }
 
-    public void addWorker(AbstractWorker worker) {
+    void addWorker(AbstractWorker worker) {
         if (worker instanceof PersistenceWorker) {
             persistenceWorkers.add((PersistenceWorker)worker);
         }

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/WorkerRef.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @author peng-yongsheng
  */
-public abstract class WorkerRef<INPUT, OUTPUT> extends WayToNode<INPUT, OUTPUT> {
+abstract class WorkerRef<INPUT, OUTPUT> extends WayToNode<INPUT, OUTPUT> {
     WorkerRef(NodeProcessor<INPUT, OUTPUT> destinationHandler) {
         super(destinationHandler);
     }

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/impl/PersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.AbstractLocalAsyncWorker;
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.WorkerException;
 import org.apache.skywalking.apm.collector.analysis.worker.model.impl.data.DataCache;
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.StreamData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
@@ -36,7 +36,7 @@
 /**
  * @author peng-yongsheng
  */
-public abstract class PersistenceWorker<INPUT_AND_OUTPUT extends Data> extends AbstractLocalAsyncWorker<INPUT_AND_OUTPUT, INPUT_AND_OUTPUT> {
+public abstract class PersistenceWorker<INPUT_AND_OUTPUT extends StreamData> extends AbstractLocalAsyncWorker<INPUT_AND_OUTPUT, INPUT_AND_OUTPUT> {
 
     private final Logger logger = LoggerFactory.getLogger(PersistenceWorker.class);
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/impl/PersistenceWorkerProvider.java
Patch:
@@ -19,13 +19,13 @@
 package org.apache.skywalking.apm.collector.analysis.worker.model.impl;
 
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.AbstractLocalAsyncWorkerProvider;
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.StreamData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 
 /**
  * @author peng-yongsheng
  */
-public abstract class PersistenceWorkerProvider<INPUT_AND_OUTPUT extends Data, WORKER_TYPE extends PersistenceWorker<INPUT_AND_OUTPUT>> extends AbstractLocalAsyncWorkerProvider<INPUT_AND_OUTPUT, INPUT_AND_OUTPUT, WORKER_TYPE> {
+public abstract class PersistenceWorkerProvider<INPUT_AND_OUTPUT extends StreamData, WORKER_TYPE extends PersistenceWorker<INPUT_AND_OUTPUT>> extends AbstractLocalAsyncWorkerProvider<INPUT_AND_OUTPUT, INPUT_AND_OUTPUT, WORKER_TYPE> {
 
     public PersistenceWorkerProvider(ModuleManager moduleManager) {
         super(moduleManager);

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/service/ApplicationCacheGuavaService.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.core.util.StringUtils;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
-import org.apache.skywalking.apm.collector.storage.dao.IApplicationCacheDAO;
+import org.apache.skywalking.apm.collector.storage.dao.cache.IApplicationCacheDAO;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/service/InstanceCacheGuavaService.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
-import org.apache.skywalking.apm.collector.storage.dao.IInstanceCacheDAO;
+import org.apache.skywalking.apm.collector.storage.dao.cache.IInstanceCacheDAO;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/service/NetworAddressCacheGuavaService.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.core.util.StringUtils;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
-import org.apache.skywalking.apm.collector.storage.dao.INetworkAddressCacheDAO;
+import org.apache.skywalking.apm.collector.storage.dao.cache.INetworkAddressCacheDAO;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/service/ServiceIdCacheGuavaService.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.skywalking.apm.collector.cache.service.ServiceIdCacheService;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
-import org.apache.skywalking.apm.collector.storage.dao.IServiceNameCacheDAO;
+import org.apache.skywalking.apm.collector.storage.dao.cache.IServiceNameCacheDAO;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/service/ServiceNameCacheGuavaService.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.skywalking.apm.collector.cache.service.ServiceNameCacheService;
 import org.apache.skywalking.apm.collector.core.util.StringUtils;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
-import org.apache.skywalking.apm.collector.storage.dao.IServiceNameCacheDAO;
+import org.apache.skywalking.apm.collector.storage.dao.cache.IServiceNameCacheDAO;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -74,7 +74,7 @@ public String get(int serviceId) {
 
     public String getSplitServiceName(String serviceName) {
         if (StringUtils.isNotEmpty(serviceName)) {
-            String[] serviceNames = serviceName.split(Const.ID_SPLIT);
+            String[] serviceNames = serviceName.split(Const.ID_SPLIT, 2);
             if (serviceNames.length == 2) {
                 return serviceNames[1];
             } else {

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/cache/Window.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.core.cache;
 
 import java.util.concurrent.atomic.AtomicInteger;

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/data/CommonTable.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.core.data;
 
 /**
@@ -25,5 +24,6 @@
 public abstract class CommonTable {
     public static final String TABLE_TYPE = "type";
     public static final String COLUMN_ID = "id";
+    public static final String COLUMN_METRIC_ID = "metric_id";
     public static final String COLUMN_TIME_BUCKET = "time_bucket";
 }

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/data/RemoteData.java
Patch:
@@ -16,10 +16,11 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.analysis.worker.model.impl;
+package org.apache.skywalking.apm.collector.core.data;
 
 /**
  * @author peng-yongsheng
  */
-public class FlushAndSwitch {
+public interface RemoteData extends Data {
+    String selectKey();
 }

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/data/TableDefine.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.core.data;
 
 import java.util.LinkedList;

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/data/operator/AddOperation.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.core.data.operator;
 
 import org.apache.skywalking.apm.collector.core.data.Operation;

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/data/operator/CoverOperation.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.core.data.operator;
 
 import org.apache.skywalking.apm.collector.core.data.Operation;

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/data/operator/NonOperation.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.core.data.operator;
 
 import org.apache.skywalking.apm.collector.core.data.Operation;

File: apm-collector/apm-collector-remote/collector-remote-define/src/main/java/org/apache/skywalking/apm/collector/remote/service/RemoteClient.java
Patch:
@@ -16,18 +16,17 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.remote.service;
 
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 
 /**
  * @author peng-yongsheng
  */
 public interface RemoteClient extends Comparable<RemoteClient> {
     String getAddress();
 
-    void push(int graphId, int nodeId, Data data);
+    void push(int graphId, int nodeId, RemoteData data);
 
     boolean equals(String address);
 }

File: apm-collector/apm-collector-remote/collector-remote-define/src/main/java/org/apache/skywalking/apm/collector/remote/service/RemoteDataIDGetter.java
Patch:
@@ -16,14 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.remote.service;
 
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 
 /**
  * @author peng-yongsheng
  */
 public interface RemoteDataIDGetter {
-    Integer getRemoteDataId(Class<? extends Data> dataClass) throws RemoteDataMappingIdNotFoundException;
+    Integer getRemoteDataId(Class<? extends RemoteData> dataClass) throws RemoteDataMappingIdNotFoundException;
 }

File: apm-collector/apm-collector-remote/collector-remote-define/src/main/java/org/apache/skywalking/apm/collector/remote/service/RemoteSenderService.java
Patch:
@@ -16,17 +16,16 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.remote.service;
 
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.core.module.Service;
-import org.apache.skywalking.apm.collector.core.data.Data;
 
 /**
  * @author peng-yongsheng
  */
 public interface RemoteSenderService extends Service {
-    Mode send(int graphId, int nodeId, Data data, Selector selector);
+    Mode send(int graphId, int nodeId, RemoteData remoteData, Selector selector);
 
     enum Mode {
         Remote, Local

File: apm-collector/apm-collector-remote/collector-remote-define/src/main/java/org/apache/skywalking/apm/collector/remote/service/RemoteSerializeService.java
Patch:
@@ -16,14 +16,13 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.remote.service;
 
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 
 /**
  * @author peng-yongsheng
  */
 public interface RemoteSerializeService<Builder> {
-    Builder serialize(Data data);
+    Builder serialize(RemoteData data);
 }

File: apm-collector/apm-collector-remote/collector-remote-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/remote/grpc/service/GRPCRemoteClientService.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.remote.grpc.service;
 
 import org.apache.skywalking.apm.collector.client.ClientException;

File: apm-collector/apm-collector-remote/collector-remote-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/remote/grpc/service/selector/ForeverFirstSelector.java
Patch:
@@ -16,11 +16,10 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.remote.grpc.service.selector;
 
 import java.util.List;
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.remote.service.RemoteClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -32,7 +31,7 @@ public class ForeverFirstSelector implements RemoteClientSelector {
 
     private final Logger logger = LoggerFactory.getLogger(ForeverFirstSelector.class);
 
-    @Override public RemoteClient select(List<RemoteClient> clients, Data message) {
+    @Override public RemoteClient select(List<RemoteClient> clients, RemoteData remoteData) {
         logger.debug("clients size: {}", clients.size());
         return clients.get(0);
     }

File: apm-collector/apm-collector-remote/collector-remote-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/remote/grpc/service/selector/RemoteClientSelector.java
Patch:
@@ -16,16 +16,15 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.remote.grpc.service.selector;
 
 import java.util.List;
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.remote.service.RemoteClient;
 
 /**
  * @author peng-yongsheng
  */
 public interface RemoteClientSelector {
-    RemoteClient select(List<RemoteClient> clients, Data message);
+    RemoteClient select(List<RemoteClient> clients, RemoteData remoteData);
 }

File: apm-collector/apm-collector-remote/collector-remote-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/remote/grpc/service/selector/RollingSelector.java
Patch:
@@ -16,11 +16,10 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.remote.grpc.service.selector;
 
 import java.util.List;
-import org.apache.skywalking.apm.collector.core.data.Data;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.remote.service.RemoteClient;
 
 /**
@@ -30,7 +29,7 @@ public class RollingSelector implements RemoteClientSelector {
 
     private int index = 0;
 
-    @Override public RemoteClient select(List<RemoteClient> clients, Data message) {
+    @Override public RemoteClient select(List<RemoteClient> clients, RemoteData remoteData) {
         int size = clients.size();
         index++;
         int selectIndex = Math.abs(index) % size;

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/base/sql/SqlBuilder.java
Patch:
@@ -16,13 +16,15 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.storage.base.sql;
 
 import java.text.MessageFormat;
 import java.util.List;
 import java.util.Set;
 
+/**
+ * @author peng-yongsheng, clevertension
+ */
 public class SqlBuilder {
     public static String buildSql(String sql, Object... args) {
         return MessageFormat.format(sql, args);

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/IGlobalTracePersistenceDAO.java
Patch:
@@ -24,5 +24,5 @@
 /**
  * @author peng-yongsheng
  */
-public interface IGlobalTracePersistenceDAO<Insert, Update, DataImpl extends GlobalTrace> extends IPersistenceDAO<Insert, Update, DataImpl> {
+public interface IGlobalTracePersistenceDAO<INSERT, UPDATE, STREAM_DATA extends GlobalTrace> extends IPersistenceDAO<INSERT, UPDATE, STREAM_DATA> {
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/IInstanceHeartBeatPersistenceDAO.java
Patch:
@@ -24,5 +24,5 @@
 /**
  * @author peng-yongsheng
  */
-public interface IInstanceHeartBeatPersistenceDAO<Insert, Update, DataImpl extends Instance> extends IPersistenceDAO<Insert, Update, DataImpl> {
+public interface IInstanceHeartBeatPersistenceDAO<INSERT, UPDATE, STREAM_DATA extends Instance> extends IPersistenceDAO<INSERT, UPDATE, STREAM_DATA> {
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/acp/IApplicationComponentDayPersistenceDAO.java
Patch:
@@ -16,13 +16,13 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.storage.dao;
+package org.apache.skywalking.apm.collector.storage.dao.acp;
 
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.application.ApplicationComponent;
 
 /**
  * @author peng-yongsheng
  */
-public interface IApplicationComponentPersistenceDAO<Insert, Update, DataImpl extends ApplicationComponent> extends IPersistenceDAO<Insert, Update, DataImpl> {
+public interface IApplicationComponentDayPersistenceDAO<INSERT, UPDATE, STREAM_DATA extends ApplicationComponent> extends IPersistenceDAO<INSERT, UPDATE, STREAM_DATA> {
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/alarm/IApplicationAlarmListPersistenceDAO.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.storage.dao;
+package org.apache.skywalking.apm.collector.storage.dao.alarm;
 
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ApplicationAlarmList;

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/alarm/IApplicationAlarmPersistenceDAO.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.storage.dao;
+package org.apache.skywalking.apm.collector.storage.dao.alarm;
 
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ApplicationAlarm;

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/alarm/IApplicationReferenceAlarmListPersistenceDAO.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.storage.dao;
+package org.apache.skywalking.apm.collector.storage.dao.alarm;
 
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ApplicationReferenceAlarmList;

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/alarm/IApplicationReferenceAlarmPersistenceDAO.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.storage.dao;
+package org.apache.skywalking.apm.collector.storage.dao.alarm;
 
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.ApplicationReferenceAlarm;

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/alarm/IInstanceAlarmListPersistenceDAO.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.storage.dao;
+package org.apache.skywalking.apm.collector.storage.dao.alarm;
 
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.InstanceAlarmList;

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/alarm/IInstanceAlarmPersistenceDAO.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.storage.dao;
+package org.apache.skywalking.apm.collector.storage.dao.alarm;
 
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.InstanceAlarm;

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/apache/skywalking/apm/collector/storage/dao/alarm/IInstanceReferenceAlarmListPersistenceDAO.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.skywalking.apm.collector.storage.dao;
+package org.apache.skywalking.apm.collector.storage.dao.alarm;
 
 import org.apache.skywalking.apm.collector.storage.base.dao.IPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.alarm.InstanceReferenceAlarmList;

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/amp/ApplicationDayMetricH2PersistenceDAO.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.apm.collector.core.storage.TimePyramid;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.dao.amp.IApplicationDayMetricPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.amp.IApplicationMinuteMetricPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.h2.base.define.H2SqlEntity;
 import org.apache.skywalking.apm.collector.storage.table.application.ApplicationMetric;
 import org.apache.skywalking.apm.collector.storage.table.application.ApplicationMetricTable;

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/armp/ApplicationReferenceDayMetricH2PersistenceDAO.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.apm.collector.core.storage.TimePyramid;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.dao.armp.IApplicationReferenceDayMetricPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.armp.IApplicationReferenceMinuteMetricPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.h2.base.define.H2SqlEntity;
 import org.apache.skywalking.apm.collector.storage.table.application.ApplicationReferenceMetric;
 import org.apache.skywalking.apm.collector.storage.table.application.ApplicationReferenceMetricTable;

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/armp/ApplicationReferenceHourMetricH2PersistenceDAO.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.apm.collector.core.storage.TimePyramid;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.dao.armp.IApplicationReferenceHourMetricPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.armp.IApplicationReferenceMinuteMetricPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.h2.base.define.H2SqlEntity;
 import org.apache.skywalking.apm.collector.storage.table.application.ApplicationReferenceMetric;
 import org.apache.skywalking.apm.collector.storage.table.application.ApplicationReferenceMetricTable;

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/armp/ApplicationReferenceMonthMetricH2PersistenceDAO.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.skywalking.apm.collector.client.h2.H2Client;
 import org.apache.skywalking.apm.collector.core.storage.TimePyramid;
 import org.apache.skywalking.apm.collector.core.util.Const;
-import org.apache.skywalking.apm.collector.storage.dao.armp.IApplicationReferenceMinuteMetricPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.dao.armp.IApplicationReferenceMonthMetricPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.h2.base.define.H2SqlEntity;
 import org.apache.skywalking.apm.collector.storage.table.application.ApplicationReferenceMetric;

File: apm-collector/apm-collector-storage/collector-storage-h2-provider/src/main/java/org/apache/skywalking/apm/collector/storage/h2/dao/smp/ServiceHourMetricH2PersistenceDAO.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.apm.collector.core.storage.TimePyramid;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.dao.smp.IServiceHourMetricPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.smp.IServiceMinuteMetricPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.h2.base.define.H2SqlEntity;
 import org.apache.skywalking.apm.collector.storage.table.service.ServiceMetric;
 import org.apache.skywalking.apm.collector.storage.table.service.ServiceMetricTable;

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MultiClassNameMatch.java
Patch:
@@ -17,14 +17,12 @@
  */
 
 
-package org.apache.skywalking.apm.plugin.jdbc.mysql.define;
+package org.apache.skywalking.apm.agent.core.plugin.match;
 
 import java.util.Arrays;
 import java.util.List;
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.matcher.ElementMatcher;
-import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
-import org.apache.skywalking.apm.agent.core.plugin.match.IndirectMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/CallableInstrumentation.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
-import static org.apache.skywalking.apm.plugin.jdbc.mysql.define.MultiClassNameMatch.byMultiClassMatch;
+import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;
 
 /**
  * {@link CallableInstrumentation} define that the mysql-2.x plugin intercepts the following methods in the {@link

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/DriverInstrumentation.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.plugin.jdbc.define.AbstractDriverInstrumentation;
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
-import static org.apache.skywalking.apm.plugin.jdbc.mysql.define.MultiClassNameMatch.byMultiClassMatch;
+import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;
 
 /**
  * {@link DriverInstrumentation} presents that skywalking intercepts {@link com.mysql.jdbc.Driver}.

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/Mysql5xConnectionInstrumentation.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
-import static org.apache.skywalking.apm.plugin.jdbc.mysql.define.MultiClassNameMatch.byMultiClassMatch;
+import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;
 
 /**
  * {@link Mysql5xConnectionInstrumentation } interceptor {@link com.mysql.cj.jdbc.ConnectionImpl} and

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/PreparedStatementInstrumentation.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
-import static org.apache.skywalking.apm.plugin.jdbc.mysql.define.MultiClassNameMatch.byMultiClassMatch;
+import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;
 
 /**
  * {@link PreparedStatementInstrumentation} define that the mysql-2.x plugin intercepts the following methods in the

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/StatementInstrumentation.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
-import static org.apache.skywalking.apm.plugin.jdbc.mysql.define.MultiClassNameMatch.byMultiClassMatch;
+import static org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch.byMultiClassMatch;
 
 /**
  * {@link StatementInstrumentation} intercepts the following methods in the {@link

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/InvokeHandlerMethodInterceptor.java
Patch:
@@ -38,9 +38,6 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
-        if (allArguments[2] instanceof EnhancedInstance) {
-            ((EnhanceRequireObjectCache)((EnhancedInstance)allArguments[2]).getSkyWalkingDynamicField()).setHttpResponse(null);
-        }
         return ret;
     }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/RequestMappingMethodInterceptor.java
Patch:
@@ -19,16 +19,17 @@
 
 package org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor;
 
-import java.lang.reflect.Method;
 import org.springframework.web.bind.annotation.RequestMapping;
 
+import java.lang.reflect.Method;
+
 /**
  * The <code>RequestMappingMethodInterceptor</code> only use the first mapping value.
  * it will inteceptor with <code>@RequestMapping</code>
  *
  * @author clevertension
  */
-public class RequestMappingMethodInterceptor extends AbstractMethodInteceptor {
+public class RequestMappingMethodInterceptor extends AbstractMethodInterceptor {
     @Override
     public String getRequestURL(Method method) {
         String requestURL = "";

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/dao/irmp/InstanceReferenceHourMetricEsPersistenceDAO.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.skywalking.apm.collector.core.storage.TimePyramid;
 import org.apache.skywalking.apm.collector.core.util.Const;
 import org.apache.skywalking.apm.collector.storage.dao.irmp.IInstanceReferenceHourMetricPersistenceDAO;
-import org.apache.skywalking.apm.collector.storage.dao.irmp.IInstanceReferenceMinuteMetricPersistenceDAO;
 import org.apache.skywalking.apm.collector.storage.table.instance.InstanceReferenceMetric;
 import org.apache.skywalking.apm.collector.storage.table.instance.InstanceReferenceMetricTable;
 import org.elasticsearch.action.index.IndexRequestBuilder;

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/service/ServiceNameCacheGuavaService.java
Patch:
@@ -74,7 +74,7 @@ public String get(int serviceId) {
 
     public String getSplitServiceName(String serviceName) {
         if (StringUtils.isNotEmpty(serviceName)) {
-            String[] serviceNames = serviceName.split(Const.ID_SPLIT);
+            String[] serviceNames = serviceName.split(Const.ID_SPLIT, 2);
             if (serviceNames.length == 2) {
                 return serviceNames[1];
             } else {

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/impl/PersistenceWorker.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.AbstractLocalAsyncWorker;
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.WorkerException;
 import org.apache.skywalking.apm.collector.analysis.worker.model.impl.data.DataCache;
-import org.apache.skywalking.apm.collector.core.data.AbstractData;
+import org.apache.skywalking.apm.collector.core.data.StreamData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.core.util.ObjectUtils;
 import org.apache.skywalking.apm.collector.storage.StorageModule;
@@ -36,7 +36,7 @@
 /**
  * @author peng-yongsheng
  */
-public abstract class PersistenceWorker<INPUT_AND_OUTPUT extends AbstractData> extends AbstractLocalAsyncWorker<INPUT_AND_OUTPUT, INPUT_AND_OUTPUT> {
+public abstract class PersistenceWorker<INPUT_AND_OUTPUT extends StreamData> extends AbstractLocalAsyncWorker<INPUT_AND_OUTPUT, INPUT_AND_OUTPUT> {
 
     private final Logger logger = LoggerFactory.getLogger(PersistenceWorker.class);
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/impl/PersistenceWorkerProvider.java
Patch:
@@ -19,13 +19,13 @@
 package org.apache.skywalking.apm.collector.analysis.worker.model.impl;
 
 import org.apache.skywalking.apm.collector.analysis.worker.model.base.AbstractLocalAsyncWorkerProvider;
-import org.apache.skywalking.apm.collector.core.data.AbstractData;
+import org.apache.skywalking.apm.collector.core.data.StreamData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 
 /**
  * @author peng-yongsheng
  */
-public abstract class PersistenceWorkerProvider<INPUT_AND_OUTPUT extends AbstractData, WORKER_TYPE extends PersistenceWorker<INPUT_AND_OUTPUT>> extends AbstractLocalAsyncWorkerProvider<INPUT_AND_OUTPUT, INPUT_AND_OUTPUT, WORKER_TYPE> {
+public abstract class PersistenceWorkerProvider<INPUT_AND_OUTPUT extends StreamData, WORKER_TYPE extends PersistenceWorker<INPUT_AND_OUTPUT>> extends AbstractLocalAsyncWorkerProvider<INPUT_AND_OUTPUT, INPUT_AND_OUTPUT, WORKER_TYPE> {
 
     public PersistenceWorkerProvider(ModuleManager moduleManager) {
         super(moduleManager);

File: apm-collector/apm-collector-core/src/main/java/org/apache/skywalking/apm/collector/core/cache/Window.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.collector.core.cache;
 
 import java.util.concurrent.atomic.AtomicInteger;

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractLocalAsyncWorker.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.EndOfBatchQueueMessage;
+import org.apache.skywalking.apm.collector.core.data.QueueData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 
 /**
@@ -28,7 +28,7 @@
  * @author peng-yongsheng
  * @since v3.0-2017
  */
-public abstract class AbstractLocalAsyncWorker<INPUT extends EndOfBatchQueueMessage, OUTPUT extends EndOfBatchQueueMessage> extends AbstractWorker<INPUT, OUTPUT> {
+public abstract class AbstractLocalAsyncWorker<INPUT extends QueueData, OUTPUT extends QueueData> extends AbstractWorker<INPUT, OUTPUT> {
 
     public AbstractLocalAsyncWorker(ModuleManager moduleManager) {
         super(moduleManager);

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractLocalAsyncWorkerProvider.java
Patch:
@@ -18,14 +18,14 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.EndOfBatchQueueMessage;
+import org.apache.skywalking.apm.collector.core.data.QueueData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.commons.datacarrier.DataCarrier;
 
 /**
  * @author peng-yongsheng
  */
-public abstract class AbstractLocalAsyncWorkerProvider<INPUT extends EndOfBatchQueueMessage, OUTPUT extends EndOfBatchQueueMessage, WORKER_TYPE extends AbstractLocalAsyncWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
+public abstract class AbstractLocalAsyncWorkerProvider<INPUT extends QueueData, OUTPUT extends QueueData, WORKER_TYPE extends AbstractLocalAsyncWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
 
     public abstract int queueSize();
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractRemoteWorker.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.AbstractData;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.remote.service.Selector;
 
@@ -31,7 +31,7 @@
  * @author peng-yongsheng
  * @since v3.0-2017
  */
-public abstract class AbstractRemoteWorker<INPUT extends AbstractData, OUTPUT extends AbstractData> extends AbstractWorker<INPUT, OUTPUT> {
+public abstract class AbstractRemoteWorker<INPUT extends RemoteData, OUTPUT extends RemoteData> extends AbstractWorker<INPUT, OUTPUT> {
 
     public AbstractRemoteWorker(ModuleManager moduleManager) {
         super(moduleManager);

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractRemoteWorkerProvider.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.AbstractData;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 import org.apache.skywalking.apm.collector.remote.service.RemoteSenderService;
 
@@ -30,7 +30,7 @@
  * @author peng-yongsheng
  * @since v3.0-2017
  */
-public abstract class AbstractRemoteWorkerProvider<INPUT extends AbstractData, OUTPUT extends AbstractData, WORKER_TYPE extends AbstractRemoteWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
+public abstract class AbstractRemoteWorkerProvider<INPUT extends RemoteData, OUTPUT extends RemoteData, WORKER_TYPE extends AbstractRemoteWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
 
     private final RemoteSenderService remoteSenderService;
     private final int graphId;

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractWorker.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.EndOfBatchQueueMessage;
 import org.apache.skywalking.apm.collector.core.graph.Next;
 import org.apache.skywalking.apm.collector.core.graph.NodeProcessor;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
@@ -28,13 +27,13 @@
 /**
  * @author peng-yongsheng
  */
-public abstract class AbstractWorker<INPUT extends EndOfBatchQueueMessage, OUTPUT extends EndOfBatchQueueMessage> implements NodeProcessor<INPUT, OUTPUT> {
+public abstract class AbstractWorker<INPUT, OUTPUT> implements NodeProcessor<INPUT, OUTPUT> {
 
     private final Logger logger = LoggerFactory.getLogger(AbstractWorker.class);
 
     private final ModuleManager moduleManager;
 
-    public AbstractWorker(ModuleManager moduleManager) {
+    AbstractWorker(ModuleManager moduleManager) {
         this.moduleManager = moduleManager;
     }
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/AbstractWorkerProvider.java
Patch:
@@ -18,17 +18,16 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.EndOfBatchQueueMessage;
 import org.apache.skywalking.apm.collector.core.module.ModuleManager;
 
 /**
  * @author peng-yongsheng
  */
-public abstract class AbstractWorkerProvider<INPUT extends EndOfBatchQueueMessage, OUTPUT extends EndOfBatchQueueMessage, WORKER_TYPE extends AbstractWorker<INPUT, OUTPUT>> implements Provider {
+public abstract class AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE extends AbstractWorker<INPUT, OUTPUT>> implements Provider {
 
     private final ModuleManager moduleManager;
 
-    public AbstractWorkerProvider(ModuleManager moduleManager) {
+    AbstractWorkerProvider(ModuleManager moduleManager) {
         this.moduleManager = moduleManager;
     }
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/RemoteWorkerRef.java
Patch:
@@ -18,15 +18,15 @@
 
 package org.apache.skywalking.apm.collector.analysis.worker.model.base;
 
-import org.apache.skywalking.apm.collector.core.data.AbstractData;
+import org.apache.skywalking.apm.collector.core.data.RemoteData;
 import org.apache.skywalking.apm.collector.remote.service.RemoteSenderService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * @author peng-yongsheng
  */
-public class RemoteWorkerRef<INPUT extends AbstractData, OUTPUT extends AbstractData> extends WorkerRef<INPUT, OUTPUT> {
+public class RemoteWorkerRef<INPUT extends RemoteData, OUTPUT extends RemoteData> extends WorkerRef<INPUT, OUTPUT> {
 
     private final Logger logger = LoggerFactory.getLogger(RemoteWorkerRef.class);
 

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/WorkerCreateListener.java
Patch:
@@ -33,7 +33,7 @@ public WorkerCreateListener() {
         this.persistenceWorkers = new ArrayList<>();
     }
 
-    public void addWorker(AbstractWorker worker) {
+    void addWorker(AbstractWorker worker) {
         if (worker instanceof PersistenceWorker) {
             persistenceWorkers.add((PersistenceWorker)worker);
         }

File: apm-collector/apm-collector-analysis/analysis-worker-model/src/main/java/org/apache/skywalking/apm/collector/analysis/worker/model/base/WorkerRef.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @author peng-yongsheng
  */
-public abstract class WorkerRef<INPUT, OUTPUT> extends WayToNode<INPUT, OUTPUT> {
+abstract class WorkerRef<INPUT, OUTPUT> extends WayToNode<INPUT, OUTPUT> {
     WorkerRef(NodeProcessor<INPUT, OUTPUT> destinationHandler) {
         super(destinationHandler);
     }

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/service/ServiceNameCacheGuavaService.java
Patch:
@@ -74,7 +74,7 @@ public String get(int serviceId) {
 
     public String getSplitServiceName(String serviceName) {
         if (StringUtils.isNotEmpty(serviceName)) {
-            String[] serviceNames = serviceName.split(Const.ID_SPLIT);
+            String[] serviceNames = serviceName.split(Const.ID_SPLIT, 2);
             if (serviceNames.length == 2) {
                 return serviceNames[1];
             } else {

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/apache/skywalking/apm/collector/cache/guava/service/ServiceNameCacheGuavaService.java
Patch:
@@ -74,7 +74,7 @@ public String get(int serviceId) {
 
     public String getSplitServiceName(String serviceName) {
         if (StringUtils.isNotEmpty(serviceName)) {
-            String[] serviceNames = serviceName.split(Const.ID_SPLIT);
+            String[] serviceNames = serviceName.split(Const.ID_SPLIT, 2);
             if (serviceNames.length == 2) {
                 return serviceNames[1];
             } else {

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/main/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/InstanceDiscoveryServiceHandler.java
Patch:
@@ -47,7 +47,7 @@ public InstanceDiscoveryServiceHandler(ModuleManager moduleManager) {
     }
 
     @Override
-    public void register(ApplicationInstance request, StreamObserver<ApplicationInstanceMapping> responseObserver) {
+    public void registerInstance(ApplicationInstance request, StreamObserver<ApplicationInstanceMapping> responseObserver) {
         long timeBucket = TimeBucketUtils.INSTANCE.getSecondTimeBucket(request.getRegisterTime());
         int instanceId = instanceIDService.getOrCreateByAgentUUID(request.getApplicationId(), request.getAgentUUID(), timeBucket, buildOsInfo(request.getOsinfo()));
         ApplicationInstanceMapping.Builder builder = ApplicationInstanceMapping.newBuilder();

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/test/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/ApplicationRegisterServiceHandlerTestCase.java
Patch:
@@ -21,6 +21,7 @@
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import org.apache.skywalking.apm.network.proto.Application;
+import org.apache.skywalking.apm.network.proto.ApplicationMapping;
 import org.apache.skywalking.apm.network.proto.ApplicationMappings;
 import org.apache.skywalking.apm.network.proto.ApplicationRegisterServiceGrpc;
 import org.slf4j.Logger;
@@ -40,7 +41,7 @@ public void testRegister() {
         stub = ApplicationRegisterServiceGrpc.newBlockingStub(channel);
 
         Application application = Application.newBuilder().setApplicationCode("test141").build();
-        ApplicationMappings mapping = stub.applicationCodeRegister(application);
-        logger.debug(mapping.getApplications(0).getKey() + ", " + mapping.getApplications(0).getValue());
+        ApplicationMapping mapping = stub.applicationCodeRegister(application);
+        logger.debug(mapping.getApplication().getKey() + ", " + mapping.getApplication().getValue());
     }
 }

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.skywalking.apm.plugin.httpClient.v4;
 
-import io.netty.handler.codec.http.HttpScheme;
 import java.lang.reflect.Method;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -50,7 +49,7 @@ public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterc
         AbstractSpan span = null;
 
         String remotePeer = httpHost.getHostName() + ":" + (httpHost.getPort() > 0 ? httpHost.getPort() :
-            HttpScheme.HTTPS.name().equals(httpHost.getSchemeName().toLowerCase()) ? 443 : 80);
+            "https".equals(httpHost.getSchemeName().toLowerCase()) ? 443 : 80);
 
         try {
             URL url = new URL(httpRequest.getRequestLine().getUri());

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.skywalking.apm.plugin.httpClient.v4;
 
-import io.netty.handler.codec.http.HttpScheme;
 import java.lang.reflect.Method;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -50,7 +49,7 @@ public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterc
         AbstractSpan span = null;
 
         String remotePeer = httpHost.getHostName() + ":" + (httpHost.getPort() > 0 ? httpHost.getPort() :
-            HttpScheme.HTTPS.name().equals(httpHost.getSchemeName().toLowerCase()) ? 443 : 80);
+            "https".equals(httpHost.getSchemeName().toLowerCase()) ? 443 : 80);
 
         try {
             URL url = new URL(httpRequest.getRequestLine().getUri());

File: apm-collector/apm-collector-agent/agent-grpc/agent-grpc-provider/src/test/java/org/apache/skywalking/apm/collector/agent/grpc/provider/handler/ApplicationRegisterServiceHandlerTestCase.java
Patch:
@@ -20,9 +20,9 @@
 
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
+import org.apache.skywalking.apm.network.proto.Application;
 import org.apache.skywalking.apm.network.proto.ApplicationMappings;
 import org.apache.skywalking.apm.network.proto.ApplicationRegisterServiceGrpc;
-import org.apache.skywalking.apm.network.proto.Applications;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -39,8 +39,8 @@ public void testRegister() {
         ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
         stub = ApplicationRegisterServiceGrpc.newBlockingStub(channel);
 
-        Applications application = Applications.newBuilder().addApplicationCodes("test141").build();
-        ApplicationMappings mapping = stub.batchRegister(application);
+        Application application = Application.newBuilder().setApplicationCode("test141").build();
+        ApplicationMappings mapping = stub.applicationCodeRegister(application);
         logger.debug(mapping.getApplications(0).getKey() + ", " + mapping.getApplications(0).getValue());
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/apache/skywalking/apm/collector/storage/es/DataTTLKeeperTimer.java
Patch:
@@ -62,13 +62,14 @@ public void start() {
     private void delete() {
         Calendar calendar = Calendar.getInstance();
         calendar.setTimeInMillis(System.currentTimeMillis());
-        calendar.set(Calendar.DAY_OF_MONTH, -daysBefore);
+        calendar.add(Calendar.DAY_OF_MONTH, -daysBefore);
         calendar.set(Calendar.HOUR_OF_DAY, 0);
         calendar.set(Calendar.MINUTE, 0);
         calendar.set(Calendar.SECOND, 0);
 
         long startTimestamp = calendar.getTimeInMillis();
 
+        calendar.set(Calendar.HOUR_OF_DAY, 23);
         calendar.set(Calendar.MINUTE, 59);
         calendar.set(Calendar.SECOND, 59);
         long endTimestamp = calendar.getTimeInMillis();

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.resttemplate.async;
 
 import java.lang.reflect.Method;
@@ -40,7 +39,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         final URI requestURL = (URI)allArguments[0];
         final HttpMethod httpMethod = (HttpMethod)allArguments[1];
         final ContextCarrier contextCarrier = new ContextCarrier();
-        String remotePeer = requestURL.getHost() + ":" + requestURL.getPort();
+
+        String remotePeer = requestURL.getHost() + ":" + (requestURL.getPort() > 0 ? requestURL.getPort() : "https".equalsIgnoreCase(requestURL.getScheme()) ? 443 : 80);
         AbstractSpan span = ContextManager.createExitSpan(requestURL.getPath(), contextCarrier, remotePeer);
 
         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.resttemplate.sync;
 
 import java.lang.reflect.Method;
@@ -40,7 +39,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         final URI requestURL = (URI)allArguments[0];
         final HttpMethod httpMethod = (HttpMethod)allArguments[1];
         final ContextCarrier contextCarrier = new ContextCarrier();
-        String remotePeer = requestURL.getHost() + ":" + requestURL.getPort();
+
+        String remotePeer = requestURL.getHost() + ":" + (requestURL.getPort() > 0 ? requestURL.getPort() : "https".equalsIgnoreCase(requestURL.getScheme()) ? 443 : 80);
         AbstractSpan span = ContextManager.createExitSpan(requestURL.getPath(), contextCarrier, remotePeer);
 
         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.resttemplate.async;
 
 import java.lang.reflect.Method;
@@ -40,7 +39,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         final URI requestURL = (URI)allArguments[0];
         final HttpMethod httpMethod = (HttpMethod)allArguments[1];
         final ContextCarrier contextCarrier = new ContextCarrier();
-        String remotePeer = requestURL.getHost() + ":" + requestURL.getPort();
+
+        String remotePeer = requestURL.getHost() + ":" + (requestURL.getPort() > 0 ? requestURL.getPort() : "https".equalsIgnoreCase(requestURL.getScheme()) ? 443 : 80);
         AbstractSpan span = ContextManager.createExitSpan(requestURL.getPath(), contextCarrier, remotePeer);
 
         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.resttemplate.sync;
 
 import java.lang.reflect.Method;
@@ -40,7 +39,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         final URI requestURL = (URI)allArguments[0];
         final HttpMethod httpMethod = (HttpMethod)allArguments[1];
         final ContextCarrier contextCarrier = new ContextCarrier();
-        String remotePeer = requestURL.getHost() + ":" + requestURL.getPort();
+
+        String remotePeer = requestURL.getHost() + ":" + (requestURL.getPort() > 0 ? requestURL.getPort() : "https".equalsIgnoreCase(requestURL.getScheme()) ? 443 : 80);
         AbstractSpan span = ContextManager.createExitSpan(requestURL.getPath(), contextCarrier, remotePeer);
 
         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.resttemplate.async;
 
 import java.lang.reflect.Method;
@@ -40,7 +39,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         final URI requestURL = (URI)allArguments[0];
         final HttpMethod httpMethod = (HttpMethod)allArguments[1];
         final ContextCarrier contextCarrier = new ContextCarrier();
-        String remotePeer = requestURL.getHost() + ":" + requestURL.getPort();
+
+        String remotePeer = requestURL.getHost() + ":" + (requestURL.getPort() > 0 ? requestURL.getPort() : "https".equalsIgnoreCase(requestURL.getScheme()) ? 443 : 80);
         AbstractSpan span = ContextManager.createExitSpan(requestURL.getPath(), contextCarrier, remotePeer);
 
         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.spring.resttemplate.sync;
 
 import java.lang.reflect.Method;
@@ -40,7 +39,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         final URI requestURL = (URI)allArguments[0];
         final HttpMethod httpMethod = (HttpMethod)allArguments[1];
         final ContextCarrier contextCarrier = new ContextCarrier();
-        String remotePeer = requestURL.getHost() + ":" + requestURL.getPort();
+
+        String remotePeer = requestURL.getHost() + ":" + (requestURL.getPort() > 0 ? requestURL.getPort() : "https".equalsIgnoreCase(requestURL.getScheme()) ? 443 : 80);
         AbstractSpan span = ContextManager.createExitSpan(requestURL.getPath(), contextCarrier, remotePeer);
 
         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v3/MongoDBMethodInterceptor.java
Patch:
@@ -173,7 +173,7 @@ private String limitFilter(String filter) {
 
         String executeMethod = arguments[0].getClass().getSimpleName();
         String remotePeer = (String)objInst.getSkyWalkingDynamicField();
-        AbstractSpan span = ContextManager.createExitSpan(MONGO_DB_OP_PREFIX + method.getName(), new ContextCarrier(), remotePeer);
+        AbstractSpan span = ContextManager.createExitSpan(MONGO_DB_OP_PREFIX + executeMethod, new ContextCarrier(), remotePeer);
         span.setComponent(ComponentsDefine.MONGODB);
         Tags.DB_TYPE.set(span, DB_TYPE);
         SpanLayer.asDB(span);

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/mongodb/v3/MongoDBMethodInterceptorTest.java
Patch:
@@ -122,7 +122,7 @@ public void testInterceptWithException() throws Throwable {
     }
 
     private void assertRedisSpan(AbstractTracingSpan span) {
-        assertThat(span.getOperationName(), is("MongoDB/getUsedDatabases"));
+        assertThat(span.getOperationName(), is("MongoDB/FindOperation"));
         assertThat(SpanHelper.getComponentId(span), is(9));
         List<KeyValuePair> tags = SpanHelper.getTags(span);
         assertThat(tags.get(1).getValue(), is("FindOperation { \"name\" : \"by\" }"));

File: apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/concurrent/define/FailureCallbackInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class FailureCallbackInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String FAILURE_CALLBACK_INTERCEPTOR = "FailureCallbackInterceptor";
+    public static final String FAILURE_CALLBACK_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.concurrent.FailureCallbackInterceptor";
     public static final String FAILURE_METHOD_NAME = "onFailure";
 
     @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/concurrent/define/SuccessCallbackInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
 public class SuccessCallbackInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     public static final String SUCCESS_CALLBACK_INTERCEPTOR =
-        "SuccessCallbackInterceptor";
+        "org.apache.skywalking.apm.plugin.spring.concurrent.SuccessCallbackInterceptor";
     public static final String SUCCESS_METHOD_NAME = "onSuccess";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/concurrent/define/FailureCallbackInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class FailureCallbackInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String FAILURE_CALLBACK_INTERCEPTOR = "FailureCallbackInterceptor";
+    public static final String FAILURE_CALLBACK_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.concurrent.FailureCallbackInterceptor";
     public static final String FAILURE_METHOD_NAME = "onFailure";
 
     @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/concurrent-util-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/concurrent/define/SuccessCallbackInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
 public class SuccessCallbackInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     public static final String SUCCESS_CALLBACK_INTERCEPTOR =
-        "SuccessCallbackInterceptor";
+        "org.apache.skywalking.apm.plugin.spring.concurrent.SuccessCallbackInterceptor";
     public static final String SUCCESS_METHOD_NAME = "onSuccess";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/api/ILog.java
Patch:
@@ -33,6 +33,8 @@ public interface ILog {
 
     void warn(String format, Object... arguments);
 
+    void warn(Throwable e, String format, Object... arguments);
+
     void error(String format, Throwable e);
 
     void error(Throwable e, String format, Object... arguments);

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/PluginFinder.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.IndirectMatch;
 import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;
+import org.apache.skywalking.apm.agent.core.plugin.match.ProtectiveShieldMatcher;
 
 import static net.bytebuddy.matcher.ElementMatchers.isInterface;
 import static net.bytebuddy.matcher.ElementMatchers.not;
@@ -98,6 +99,6 @@ public boolean matches(NamedElement target) {
                 judge = judge.or(((IndirectMatch)match).buildJunction());
             }
         }
-        return judge;
+        return new ProtectiveShieldMatcher(judge);
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/ProtectiveShieldMatcher.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.skywalking.apm.agent.core.logging.api.LogManager;
 
 /**
- * In same cases, some frameworks and libraries use some binary codes tech too. From the community feedback, some of
+ * In some cases, some frameworks and libraries use some binary codes tech too. From the community feedback, some of
  * them have compatible issues with byte-buddy core, which trigger "Can't resolve type description" exception.
  *
  * So I build this protective shield by a nested matcher. When the origin matcher(s) can't resolve the type, the

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/DriverInstrumentation.java
Patch:
@@ -32,6 +32,6 @@
 public class DriverInstrumentation extends AbstractDriverInstrumentation {
     @Override
     protected ClassMatch enhanceClass() {
-        return byMultiClassMatch("com.mysql.jdbc.Driver", "com.mysql.cj.jdbc.Driver");
+        return byMultiClassMatch("com.mysql.jdbc.Driver", "com.mysql.cj.jdbc.Driver", "com.mysql.jdbc.NonRegisteringDriver");
     }
 }

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jetty/v9/client/SyncHttpRequestSendInterceptorTest.java
Patch:
@@ -63,7 +63,7 @@ public class SyncHttpRequestSendInterceptorTest {
     private Object[] allArguments;
     private Class[] argumentTypes;
     private MockHttpRequest enhancedInstance;
-    private AsyncHttpRequestSendInterceptor interceptor;
+    private SyncHttpRequestSendInterceptor interceptor;
     private URI uri = URI.create("http://localhost:8080/test");
 
     @Before
@@ -72,7 +72,7 @@ public void setUp() throws Exception {
         allArguments = new Object[] {"OperationKey", "OperationValue"};
         argumentTypes = new Class[] {String.class, String.class};
 
-        interceptor = new AsyncHttpRequestSendInterceptor();
+        interceptor = new SyncHttpRequestSendInterceptor();
         allArguments = new Object[] {callBackEnhanceInstance};
     }
 

File: apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/DataCarrierTest.java
Patch:
@@ -128,7 +128,7 @@ public void testBlockingProduce() throws IllegalAccessException {
             @Override
             public void run() {
                 try {
-                    Thread.sleep(2000);
+                    Thread.sleep(3000);
                 } catch (InterruptedException e) {
                     e.printStackTrace();
                 }

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/WriterFactory.java
Patch:
@@ -22,11 +22,12 @@
 import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;
 import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;
 import org.apache.skywalking.apm.agent.core.conf.Config;
+import org.apache.skywalking.apm.agent.core.conf.SnifferConfigInitializer;
 import org.apache.skywalking.apm.util.StringUtil;
 
 public class WriterFactory {
     public static IWriter getLogWriter() {
-        if (AgentPackagePath.isPathFound()) {
+        if (SnifferConfigInitializer.isInitCompleted() && AgentPackagePath.isPathFound()) {
             if (StringUtil.isEmpty(Config.Logging.DIR)) {
                 try {
                     Config.Logging.DIR = AgentPackagePath.getPath() + "/logs";

File: apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerPoolTest.java
Patch:
@@ -34,7 +34,7 @@ public class ConsumerPoolTest {
     @Test
     public void testBeginConsumerPool() throws IllegalAccessException {
         Channels<SampleData> channels = new Channels<SampleData>(2, 100, new SimpleRollingPartitioner<SampleData>(), BufferStrategy.BLOCKING);
-        ConsumerPool<SampleData> pool = new ConsumerPool<SampleData>(channels, new SampleConsumer(), 2);
+        ConsumerPool<SampleData> pool = new ConsumerPool<SampleData>(channels, new SampleConsumer(), 2, 20);
         pool.begin();
 
         ConsumerThread[] threads = (ConsumerThread[])MemberModifier.field(ConsumerPool.class, "consumerThreads").get(pool);
@@ -46,7 +46,7 @@ public void testBeginConsumerPool() throws IllegalAccessException {
     @Test
     public void testCloseConsumerPool() throws InterruptedException, IllegalAccessException {
         Channels<SampleData> channels = new Channels<SampleData>(2, 100, new SimpleRollingPartitioner<SampleData>(), BufferStrategy.BLOCKING);
-        ConsumerPool<SampleData> pool = new ConsumerPool<SampleData>(channels, new SampleConsumer(), 2);
+        ConsumerPool<SampleData> pool = new ConsumerPool<SampleData>(channels, new SampleConsumer(), 2, 20);
         pool.begin();
 
         Thread.sleep(5000);

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jedis/v2/JedisClusterConstructorWithListHostAndPortArgInterceptorTest.java
Patch:
@@ -16,10 +16,9 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.jedis.v2;
 
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Set;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.junit.After;
@@ -45,7 +44,7 @@ public class JedisClusterConstructorWithListHostAndPortArgInterceptorTest {
 
     @Before
     public void setUp() throws Exception {
-        hostAndPortSet = new HashSet<HostAndPort>();
+        hostAndPortSet = new LinkedHashSet<HostAndPort>();
         interceptor = new JedisClusterConstructorWithListHostAndPortArgInterceptor();
         hostAndPortSet.add(new HostAndPort("127.0.0.1", 6379));
         hostAndPortSet.add(new HostAndPort("127.0.0.1", 16379));

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jedis/v2/JedisClusterConstructorWithListHostAndPortArgInterceptorTest.java
Patch:
@@ -16,10 +16,9 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.jedis.v2;
 
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Set;
 import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.junit.After;
@@ -45,7 +44,7 @@ public class JedisClusterConstructorWithListHostAndPortArgInterceptorTest {
 
     @Before
     public void setUp() throws Exception {
-        hostAndPortSet = new HashSet<HostAndPort>();
+        hostAndPortSet = new LinkedHashSet<HostAndPort>();
         interceptor = new JedisClusterConstructorWithListHostAndPortArgInterceptor();
         hostAndPortSet.add(new HostAndPort("127.0.0.1", 6379));
         hostAndPortSet.add(new HostAndPort("127.0.0.1", 16379));

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/continuation/SkywalkingContinuationActivation.java
Patch:
@@ -42,7 +42,7 @@
  */
 public class SkywalkingContinuationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String ENHANCE_CLASS = "org.skywalking.apm.toolkit.opentracing.SkywalkingContinuation";
+    private static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingContinuation";
     private static final String CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.continuation.ConstructorInterceptor";
     private static final String ACTIVATE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.continuation.ActivateInterceptor";
 

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/span/SkywalkingSpanActivation.java
Patch:
@@ -58,10 +58,10 @@ public class SkywalkingSpanActivation extends ClassInstanceMethodsEnhancePluginD
 
     private static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingSpan";
 
-    private static final String SPAN_BUILDER_CLASS_NAME = "org.skywalking.apm.toolkit.opentracing.SkywalkingSpanBuilder";
+    private static final String SPAN_BUILDER_CLASS_NAME = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingSpanBuilder";
     private static final String CONSTRUCTOR_WITH_SPAN_BUILDER_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.span.ConstructorWithSpanBuilderInterceptor";
 
-    private static final String SKYWALKING_TRACER_CLASS_NAME = "SkywalkingTracer";
+    private static final String SKYWALKING_TRACER_CLASS_NAME = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingTracer";
     private static final String CONSTRUCTOR_WITH_TRACER_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.span.ConstructorWithTracerInterceptor";
 
     private static final String FINISH_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.span.SpanFinishInterceptor";

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/NoopSpan.java
Patch:
@@ -99,4 +99,7 @@ public AbstractSpan tag(String key, String value) {
     @Override public AbstractSpan setOperationId(int operationId) {
         return this;
     }
+
+    @Override public void ref(TraceSegmentRef ref) {
+    }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AutowiredAnnotationProcessorInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
 public class AutowiredAnnotationProcessorInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor";
     private static final String ENHANCE_METHOD = "determineCandidateConstructors";
-    private static final String INTERCEPTOR_CLASS = "AutowiredAnnotationProcessorInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.spring.patch.AutowiredAnnotationProcessorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/ActiveSpanTagActivation.java
Patch:
@@ -37,8 +37,8 @@
  */
 public class ActiveSpanTagActivation extends ClassStaticMethodsEnhancePluginDefine {
 
-    public static final String ENHANCE_CLASS = "ActiveSpan";
-    public static final String INTERCEPTOR_CLASS = "ActiveSpanTagInterceptor";
+    public static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.trace.ActiveSpan";
+    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.toolkit.activation.trace.ActiveSpanTagInterceptor";
     public static final String INTERCEPTOR_METHOD_NAME = "tag";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationActivation.java
Patch:
@@ -38,8 +38,8 @@
  */
 public class TraceAnnotationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "TraceAnnotationMethodInterceptor";
-    public static final String TRACE_ANNOTATION = "Trace";
+    public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.trace.TraceAnnotationMethodInterceptor";
+    public static final String TRACE_ANNOTATION = "org.apache.skywalking.apm.toolkit.trace.Trace";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/continuation/SkywalkingContinuationActivation.java
Patch:
@@ -42,7 +42,7 @@
  */
 public class SkywalkingContinuationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String ENHANCE_CLASS = "org.skywalking.apm.toolkit.opentracing.SkywalkingContinuation";
+    private static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingContinuation";
     private static final String CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.continuation.ConstructorInterceptor";
     private static final String ACTIVATE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.continuation.ActivateInterceptor";
 

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/span/SkywalkingSpanActivation.java
Patch:
@@ -58,10 +58,10 @@ public class SkywalkingSpanActivation extends ClassInstanceMethodsEnhancePluginD
 
     private static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingSpan";
 
-    private static final String SPAN_BUILDER_CLASS_NAME = "org.skywalking.apm.toolkit.opentracing.SkywalkingSpanBuilder";
+    private static final String SPAN_BUILDER_CLASS_NAME = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingSpanBuilder";
     private static final String CONSTRUCTOR_WITH_SPAN_BUILDER_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.span.ConstructorWithSpanBuilderInterceptor";
 
-    private static final String SKYWALKING_TRACER_CLASS_NAME = "SkywalkingTracer";
+    private static final String SKYWALKING_TRACER_CLASS_NAME = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingTracer";
     private static final String CONSTRUCTOR_WITH_TRACER_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.span.ConstructorWithTracerInterceptor";
 
     private static final String FINISH_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.span.SpanFinishInterceptor";

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/NoopSpan.java
Patch:
@@ -99,4 +99,7 @@ public AbstractSpan tag(String key, String value) {
     @Override public AbstractSpan setOperationId(int operationId) {
         return this;
     }
+
+    @Override public void ref(TraceSegmentRef ref) {
+    }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AutowiredAnnotationProcessorInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
 public class AutowiredAnnotationProcessorInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor";
     private static final String ENHANCE_METHOD = "determineCandidateConstructors";
-    private static final String INTERCEPTOR_CLASS = "AutowiredAnnotationProcessorInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.spring.patch.AutowiredAnnotationProcessorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/ActiveSpanTagActivation.java
Patch:
@@ -37,8 +37,8 @@
  */
 public class ActiveSpanTagActivation extends ClassStaticMethodsEnhancePluginDefine {
 
-    public static final String ENHANCE_CLASS = "ActiveSpan";
-    public static final String INTERCEPTOR_CLASS = "ActiveSpanTagInterceptor";
+    public static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.trace.ActiveSpan";
+    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.toolkit.activation.trace.ActiveSpanTagInterceptor";
     public static final String INTERCEPTOR_METHOD_NAME = "tag";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationActivation.java
Patch:
@@ -38,8 +38,8 @@
  */
 public class TraceAnnotationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "TraceAnnotationMethodInterceptor";
-    public static final String TRACE_ANNOTATION = "Trace";
+    public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.trace.TraceAnnotationMethodInterceptor";
+    public static final String TRACE_ANNOTATION = "org.apache.skywalking.apm.toolkit.trace.Trace";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AutowiredAnnotationProcessorInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
 public class AutowiredAnnotationProcessorInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor";
     private static final String ENHANCE_METHOD = "determineCandidateConstructors";
-    private static final String INTERCEPTOR_CLASS = "AutowiredAnnotationProcessorInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.spring.patch.AutowiredAnnotationProcessorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/ActiveSpanTagActivation.java
Patch:
@@ -37,8 +37,8 @@
  */
 public class ActiveSpanTagActivation extends ClassStaticMethodsEnhancePluginDefine {
 
-    public static final String ENHANCE_CLASS = "ActiveSpan";
-    public static final String INTERCEPTOR_CLASS = "ActiveSpanTagInterceptor";
+    public static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.trace.ActiveSpan";
+    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.toolkit.activation.trace.ActiveSpanTagInterceptor";
     public static final String INTERCEPTOR_METHOD_NAME = "tag";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationActivation.java
Patch:
@@ -38,8 +38,8 @@
  */
 public class TraceAnnotationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "TraceAnnotationMethodInterceptor";
-    public static final String TRACE_ANNOTATION = "Trace";
+    public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.trace.TraceAnnotationMethodInterceptor";
+    public static final String TRACE_ANNOTATION = "org.apache.skywalking.apm.toolkit.trace.Trace";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AutowiredAnnotationProcessorInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
 public class AutowiredAnnotationProcessorInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor";
     private static final String ENHANCE_METHOD = "determineCandidateConstructors";
-    private static final String INTERCEPTOR_CLASS = "AutowiredAnnotationProcessorInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.spring.patch.AutowiredAnnotationProcessorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/ActiveSpanTagActivation.java
Patch:
@@ -37,8 +37,8 @@
  */
 public class ActiveSpanTagActivation extends ClassStaticMethodsEnhancePluginDefine {
 
-    public static final String ENHANCE_CLASS = "ActiveSpan";
-    public static final String INTERCEPTOR_CLASS = "ActiveSpanTagInterceptor";
+    public static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.trace.ActiveSpan";
+    public static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.toolkit.activation.trace.ActiveSpanTagInterceptor";
     public static final String INTERCEPTOR_METHOD_NAME = "tag";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationActivation.java
Patch:
@@ -38,8 +38,8 @@
  */
 public class TraceAnnotationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "TraceAnnotationMethodInterceptor";
-    public static final String TRACE_ANNOTATION = "Trace";
+    public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.trace.TraceAnnotationMethodInterceptor";
+    public static final String TRACE_ANNOTATION = "org.apache.skywalking.apm.toolkit.trace.Trace";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateStatementInterceptor.java
Patch:
@@ -43,7 +43,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
         if (ret instanceof EnhancedInstance) {
-            ((EnhancedInstance)ret).setSkyWalkingDynamicField(new StatementEnhanceInfos((ConnectionInfo)objInst.getSkyWalkingDynamicField(), "", "CallableStatement"));
+            ((EnhancedInstance)ret).setSkyWalkingDynamicField(new StatementEnhanceInfos((ConnectionInfo)objInst.getSkyWalkingDynamicField(), "", "Statement"));
         }
         return ret;
     }

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/CallableInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
  */
 public class CallableInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "com.mysql.jdbc.CallableStatement";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.PreparedStatementExecuteMethodsInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/PreparedStatementInstrumentation.java
Patch:
@@ -44,7 +44,7 @@
 public class PreparedStatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.PreparedStatement";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.PreparedStatementExecuteMethodsInterceptor";
     public static final String MYSQL6_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.PreparedStatement";
     public static final String JDBC42_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.JDBC42PreparedStatement";
 
@@ -59,8 +59,7 @@ public class PreparedStatementInstrumentation extends ClassInstanceMethodsEnhanc
                     return named("execute")
                         .or(named("executeQuery"))
                         .or(named("executeUpdate"))
-                        .or(named("executeLargeUpdate"))
-                        .or(named("addBatch"));
+                        .or(named("executeLargeUpdate"));
                 }
 
                 @Override public String getMethodsInterceptor() {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/StatementInstrumentation.java
Patch:
@@ -61,7 +61,6 @@ public class StatementInstrumentation extends ClassInstanceMethodsEnhancePluginD
                         .or(named("executeQuery"))
                         .or(named("executeUpdate"))
                         .or(named("executeLargeUpdate"))
-                        .or(named("addBatch"))
                         .or(named("executeBatchInternal"))
                         .or(named("executeUpdateInternal"))
                         .or(named("executeQuery"))

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/StatementExecuteMethodsInterceptorTest.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.jdbc.mysql;
 
 import java.lang.reflect.Method;
@@ -80,8 +79,8 @@ public void setUp() {
 
     @Test
     public void testCreateDatabaseSpan() throws Throwable {
-        serviceMethodInterceptor.beforeMethod(objectInstance, method, null, null, null);
-        serviceMethodInterceptor.afterMethod(objectInstance, method, null, null, null);
+        serviceMethodInterceptor.beforeMethod(objectInstance, method, new Object[] {"SELECT * FROM test"}, null, null);
+        serviceMethodInterceptor.afterMethod(objectInstance, method, new Object[] {"SELECT * FROM test"}, null, null);
 
         assertThat(segmentStorage.getTraceSegments().size(), is(1));
         TraceSegment segment = segmentStorage.getTraceSegments().get(0);

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/AbstractJdbc2StatementInstrumentation.java
Patch:
@@ -65,9 +65,7 @@ public class AbstractJdbc2StatementInstrumentation extends ClassInstanceMethodsE
                         .or(named("executeQuery").and(takesArguments(0)))
                         .or(named("executeQuery").and(takesArguments(1)))
                         .or(named("executeUpdate").and(takesArguments(0)))
-                        .or(named("executeUpdate").and(takesArguments(1)))
-                        .or(named("addBatch").and(takesArguments(1)))
-                        .or(named("addBatch").and(takesArguments(0)));
+                        .or(named("executeUpdate").and(takesArguments(1)));
                 }
 
                 @Override public String getMethodsInterceptor() {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassEnhancePluginDefine.java
Patch:
@@ -210,7 +210,7 @@ private DynamicType.Builder<?> enhanceClass(String enhanceOriginClassName,
                             .withBinders(
                                 Morph.Binder.install(OverrideCallable.class)
                             )
-                            .to(new StaticMethodsInter(interceptor))
+                            .to(new StaticMethodsInterWithOverrideArgs(interceptor))
                     );
             } else {
                 newClassBuilder = newClassBuilder.method(isStatic().and(staticMethodsInterceptPoint.getMethodsMatcher()))

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/CreateStatementInterceptor.java
Patch:
@@ -43,7 +43,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
         if (ret instanceof EnhancedInstance) {
-            ((EnhancedInstance)ret).setSkyWalkingDynamicField(new StatementEnhanceInfos((ConnectionInfo)objInst.getSkyWalkingDynamicField(), "", "CallableStatement"));
+            ((EnhancedInstance)ret).setSkyWalkingDynamicField(new StatementEnhanceInfos((ConnectionInfo)objInst.getSkyWalkingDynamicField(), "", "Statement"));
         }
         return ret;
     }

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/CallableInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
  */
 public class CallableInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "com.mysql.jdbc.CallableStatement";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.PreparedStatementExecuteMethodsInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/PreparedStatementInstrumentation.java
Patch:
@@ -44,7 +44,7 @@
 public class PreparedStatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.PreparedStatement";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.PreparedStatementExecuteMethodsInterceptor";
     public static final String MYSQL6_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.PreparedStatement";
     public static final String JDBC42_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.JDBC42PreparedStatement";
 
@@ -59,8 +59,7 @@ public class PreparedStatementInstrumentation extends ClassInstanceMethodsEnhanc
                     return named("execute")
                         .or(named("executeQuery"))
                         .or(named("executeUpdate"))
-                        .or(named("executeLargeUpdate"))
-                        .or(named("addBatch"));
+                        .or(named("executeLargeUpdate"));
                 }
 
                 @Override public String getMethodsInterceptor() {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/StatementInstrumentation.java
Patch:
@@ -61,7 +61,6 @@ public class StatementInstrumentation extends ClassInstanceMethodsEnhancePluginD
                         .or(named("executeQuery"))
                         .or(named("executeUpdate"))
                         .or(named("executeLargeUpdate"))
-                        .or(named("addBatch"))
                         .or(named("executeBatchInternal"))
                         .or(named("executeUpdateInternal"))
                         .or(named("executeQuery"))

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/jdbc/mysql/StatementExecuteMethodsInterceptorTest.java
Patch:
@@ -16,7 +16,6 @@
  *
  */
 
-
 package org.apache.skywalking.apm.plugin.jdbc.mysql;
 
 import java.lang.reflect.Method;
@@ -80,8 +79,8 @@ public void setUp() {
 
     @Test
     public void testCreateDatabaseSpan() throws Throwable {
-        serviceMethodInterceptor.beforeMethod(objectInstance, method, null, null, null);
-        serviceMethodInterceptor.afterMethod(objectInstance, method, null, null, null);
+        serviceMethodInterceptor.beforeMethod(objectInstance, method, new Object[] {"SELECT * FROM test"}, null, null);
+        serviceMethodInterceptor.afterMethod(objectInstance, method, new Object[] {"SELECT * FROM test"}, null, null);
 
         assertThat(segmentStorage.getTraceSegments().size(), is(1));
         TraceSegment segment = segmentStorage.getTraceSegments().get(0);

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/AbstractJdbc2StatementInstrumentation.java
Patch:
@@ -65,9 +65,7 @@ public class AbstractJdbc2StatementInstrumentation extends ClassInstanceMethodsE
                         .or(named("executeQuery").and(takesArguments(0)))
                         .or(named("executeQuery").and(takesArguments(1)))
                         .or(named("executeUpdate").and(takesArguments(0)))
-                        .or(named("executeUpdate").and(takesArguments(1)))
-                        .or(named("addBatch").and(takesArguments(1)))
-                        .or(named("addBatch").and(takesArguments(0)));
+                        .or(named("executeUpdate").and(takesArguments(1)));
                 }
 
                 @Override public String getMethodsInterceptor() {

File: apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassEnhancePluginDefine.java
Patch:
@@ -210,7 +210,7 @@ private DynamicType.Builder<?> enhanceClass(String enhanceOriginClassName,
                             .withBinders(
                                 Morph.Binder.install(OverrideCallable.class)
                             )
-                            .to(new StaticMethodsInter(interceptor))
+                            .to(new StaticMethodsInterWithOverrideArgs(interceptor))
                     );
             } else {
                 newClassBuilder = newClassBuilder.method(isStatic().and(staticMethodsInterceptPoint.getMethodsMatcher()))

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/main/java/org/apache/skywalking/apm/plugin/dubbo/DubboInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
 public class DubboInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "com.alibaba.dubbo.monitor.support.MonitorFilter";
-    private static final String INTERCEPT_CLASS = "DubboInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.dubbo.DubboInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/elastic-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/esjob/define/JobExecutorInstrumentation.java
Patch:
@@ -38,7 +38,7 @@ public class JobExecutorInstrumentation extends ClassInstanceMethodsEnhancePlugi
 
     private static final String ENHANCE_CLASS = "com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor";
 
-    private static final String JOB_EXECUTOR_INTERCEPTOR_CLASS = "JobExecutorInterceptor";
+    private static final String JOB_EXECUTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.esjob.JobExecutorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/feign/http/v9/define/DefaultHttpClientInstrumentation.java
Patch:
@@ -48,7 +48,7 @@ public class DefaultHttpClientInstrumentation extends ClassInstanceMethodsEnhanc
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "DefaultHttpClientInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.feign.http.v9.DefaultHttpClientInterceptor";
 
     @Override protected ClassMatch enhanceClass() {
         return byName(ENHANCE_CLASS);

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/ClientCallInstrumentation.java
Patch:
@@ -40,8 +40,8 @@
 public class ClientCallInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.internal.ClientCallImpl";
     private static final String ENHANCE_METHOD = "start";
-    public static final String CONSTRUCTOR_CLASS = "ClientCallIConstructorInterceptor";
-    public static final String START_METHOD_INTERCEPT_CLASS = "ClientCallStartInterceptor";
+    public static final String CONSTRUCTOR_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ClientCallIConstructorInterceptor";
+    public static final String START_METHOD_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ClientCallStartInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/ClientCallsInstrumentation.java
Patch:
@@ -43,7 +43,7 @@ public class ClientCallsInstrumentation extends ClassStaticMethodsEnhancePluginD
                 }
 
                 @Override public String getMethodsInterceptor() {
-                    return "ClientCallsMethodInterceptor";
+                    return "org.apache.skywalking.apm.plugin.grpc.v1.ClientCallsMethodInterceptor";
                 }
 
                 @Override public boolean isOverrideArgs() {

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/ManagedChannelInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
 public class ManagedChannelInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.internal.ManagedChannelImpl";
     private static final String ENHANCE_METHOD = "newCall";
-    public static final String INTERCEPT_CLASS = "ManagedChannelInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ManagedChannelInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/StreamObserverToCallListenerInstrumentation.java
Patch:
@@ -41,11 +41,11 @@
 public class StreamObserverToCallListenerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter";
     public static final String ON_READY_METHOD = "onReady";
-    public static final String ON_READY_INTERCEPT_CLASS = "StreamClientOnReadyInterceptor";
+    public static final String ON_READY_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.StreamClientOnReadyInterceptor";
     public static final String ON_CLASS_METHOD = "onClose";
-    public static final String ON_CLOSE_INTERCEPT_CLASS = "StreamClientOnCloseInterceptor";
+    public static final String ON_CLOSE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.StreamClientOnCloseInterceptor";
     public static final String ON_MESSAGE_METHOD = "onMessage";
-    public static final String ON_MESSAGE_INTERCEPT_CLASS = "ClientCallOnNextInterceptor";
+    public static final String ON_MESSAGE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ClientCallOnNextInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/StreamingServerCallHandlerInstrumentation.java
Patch:
@@ -39,7 +39,7 @@
 public class StreamingServerCallHandlerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ServerCalls$UnaryServerCallHandler";
     private static final String ENHANCE_METHOD = "startCall";
-    public static final String INTERCEPT_CLASS = "ServerCallHandlerInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallHandlerInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/UnaryClientCallListenerInstrumentation.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class UnaryClientCallListenerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ClientCalls$UnaryStreamToFuture";
-    public static final String INTERCEPT_CLASS = "UnaryStreamToFutureConstructorInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.UnaryStreamToFutureConstructorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/UnaryServerCallHandlerInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
 public class UnaryServerCallHandlerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ServerCalls$StreamingServerCallHandler";
     private static final String ENHANCE_METHOD = "startCall";
-    public static final String INTERCEPT_CLASS = "ServerCallHandlerInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallHandlerInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/UnaryServerCallListenerInstrumentation.java
Patch:
@@ -42,11 +42,11 @@
 public class UnaryServerCallListenerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener";
     public static final String ON_CLOSE_METHOD = "onHalfClose";
-    public static final String ON_CLOSE_INTERCEPT_CLASS = "ServerCallOnCloseInterceptor";
+    public static final String ON_CLOSE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallOnCloseInterceptor";
     public static final String ON_READY_METHOD = "onReady";
-    public static final String ON_READY_INTERCEPT_CLASS = "ServerCallOnReadyInterceptor";
+    public static final String ON_READY_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallOnReadyInterceptor";
     public static final String ON_CANCEL_METHOD = "onCancel";
-    public static final String ON_CANCEL_INTERCEPT_CLASS = "ServerCallOnCancelInterceptor";
+    public static final String ON_CANCEL_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallOnCancelInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/JdbcXAConnectionInstrumentation.java
Patch:
@@ -35,7 +35,7 @@
 public class JdbcXAConnectionInstrumentation extends AbstractConnectionInstrumentation {
 
     public static final String ENHANCE_CLASS = "org.h2.jdbcx.JdbcXAConnection";
-    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "JdbcXAConnectionConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.h2.JdbcXAConnectionConstructorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/PooledJdbcConnectionInstrumentation.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class PooledJdbcConnectionInstrumentation extends AbstractConnectionInstrumentation {
 
-    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "PooledJdbcConnectionConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.h2.PooledJdbcConnectionConstructorInterceptor";
     public static final String ENHANCE_CLASS = "org.h2.jdbcx.JdbcXAConnection$PooledJdbcConnection";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/define/HttpClientInstrumentation.java
Patch:
@@ -31,7 +31,7 @@
  */
 public abstract class HttpClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String INTERCEPT_CLASS = "HttpClientExecuteInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.httpClient.v4.HttpClientExecuteInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/define/AbstractDriverInstrumentation.java
Patch:
@@ -35,7 +35,7 @@
  */
 public abstract class AbstractDriverInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String DRIVER_INTERCEPT_CLASS = "JDBCDriverInterceptor";
+    private static final String DRIVER_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.JDBCDriverInterceptor";
 
     @Override
     protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jedis/v2/define/JedisClusterInstrumentation.java
Patch:
@@ -48,9 +48,9 @@ public class JedisClusterInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ARGUMENT_TYPE_NAME = "redis.clients.jedis.HostAndPort";
     private static final String ENHANCE_CLASS = "redis.clients.jedis.JedisCluster";
-    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "JedisClusterConstructorWithListHostAndPortArgInterceptor";
-    private static final String METHOD_INTERCEPT_CLASS = "JedisMethodInterceptor";
-    private static final String CONSTRUCTOR_WITH_HOSTANDPORT_ARG_INTERCEPT_CLASS = "JedisClusterConstructorWithHostAndPortArgInterceptor";
+    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "Jorg.apache.skywalking.apm.plugin.jedis.v2.edisClusterConstructorWithListHostAndPortArgInterceptor";
+    private static final String METHOD_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisMethodInterceptor";
+    private static final String CONSTRUCTOR_WITH_HOSTANDPORT_ARG_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisClusterConstructorWithHostAndPortArgInterceptor";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v9/server/define/JettyInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class JettyInstrumentation extends ClassInstanceMethodsEnhancePluginDefin
 
     private static final String ENHANCE_CLASS = "org.eclipse.jetty.server.Server";
     private static final String ENHANCE_METHOD = "handle";
-    private static final String INTERCEPTOR_CLASS = "HandleInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jetty.v9.server.HandleInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v2/define/MongoDBCollectionImplInstrumentation.java
Patch:
@@ -48,7 +48,7 @@ public class MongoDBCollectionImplInstrumentation extends ClassInstanceMethodsEn
 
     private static final String ENHANCE_CLASS = "com.mongodb.DBCollectionImpl";
 
-    private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBCollectionMethodInterceptor";
+    private static final String MONGDB_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.mongodb.v2.MongoDBCollectionMethodInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v2/define/MongoDBCollectionInstrumentation.java
Patch:
@@ -52,7 +52,7 @@ public class MongoDBCollectionInstrumentation extends ClassInstanceMethodsEnhanc
 
     private static final String ENHANCE_CLASS = "com.mongodb.DBCollection";
 
-    private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBCollectionMethodInterceptor";
+    private static final String MONGDB_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.mongodb.v2.MongoDBCollectionMethodInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v3/define/MongoDBInstrumentation.java
Patch:
@@ -34,7 +34,7 @@ public class MongoDBInstrumentation extends ClassInstanceMethodsEnhancePluginDef
 
     private static final String ENHANCE_CLASS = "com.mongodb.Mongo";
 
-    private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBMethodInterceptor";
+    private static final String MONGDB_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.mongodb.v3.MongoDBMethodInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/apache/skywalking/apm/plugin/motan/define/MotanConsumerInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class MotanConsumerInstrumentation extends ClassInstanceMethodsEnhancePlu
 
     private static final String ENHANCE_CLASS = "com.weibo.api.motan.transport.ProviderMessageRouter";
 
-    private static final String INVOKE_INTERCEPT_CLASS = "MotanProviderInterceptor";
+    private static final String INVOKE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.motan.MotanProviderInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/apache/skywalking/apm/plugin/motan/define/MotanProviderInstrumentation.java
Patch:
@@ -49,11 +49,11 @@ public class MotanProviderInstrumentation extends ClassInstanceMethodsEnhancePlu
     /**
      * Class that intercept all constructor of ${@link com.weibo.api.motan.rpc.AbstractProvider}.
      */
-    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "MotanConsumerInterceptor";
+    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.motan.MotanConsumerInterceptor";
     /**
      * Class that intercept {@link com.weibo.api.motan.rpc.AbstractProvider#call(Request)}.
      */
-    private static final String PROVIDER_INVOKE_INTERCEPT_CLASS = "MotanConsumerInterceptor";
+    private static final String PROVIDER_INVOKE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.motan.MotanConsumerInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/CallableInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
  */
 public class CallableInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "com.mysql.jdbc.CallableStatement";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/ConnectionInstrumentation.java
Patch:
@@ -55,7 +55,7 @@ public abstract class ConnectionInstrumentation extends ClassInstanceMethodsEnha
                 }
 
                 @Override public String getMethodsInterceptor() {
-                    return "CreatePreparedStatementInterceptor";
+                    return "org.apache.skywalking.apm.plugin.jdbc.mysql.CreatePreparedStatementInterceptor";
                 }
 
                 @Override public boolean isOverrideArgs() {
@@ -68,7 +68,7 @@ public abstract class ConnectionInstrumentation extends ClassInstanceMethodsEnha
                 }
 
                 @Override public String getMethodsInterceptor() {
-                    return "CreateCallableStatementInterceptor";
+                    return "org.apache.skywalking.apm.plugin.jdbc.mysql.CreateCallableStatementInterceptor";
                 }
 
                 @Override public boolean isOverrideArgs() {
@@ -81,7 +81,7 @@ public abstract class ConnectionInstrumentation extends ClassInstanceMethodsEnha
                 }
 
                 @Override public String getMethodsInterceptor() {
-                    return "CreateStatementInterceptor";
+                    return "org.apache.skywalking.apm.plugin.jdbc.mysql.CreateStatementInterceptor";
                 }
 
                 @Override public boolean isOverrideArgs() {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/PreparedStatementInstrumentation.java
Patch:
@@ -44,7 +44,7 @@
 public class PreparedStatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.PreparedStatement";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
     public static final String MYSQL6_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.PreparedStatement";
     public static final String JDBC42_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.JDBC42PreparedStatement";
 

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/StatementInstrumentation.java
Patch:
@@ -46,7 +46,7 @@
  */
 public class StatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String STATEMENT_CLASS_NAME = "com.mysql.jdbc.StatementImpl";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
     public static final String MYSQL6_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.StatementImpl";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/nutz-plugins/http-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/nutz/http/sync/define/AbstractNutzHttpInstrumentation.java
Patch:
@@ -32,8 +32,8 @@
 public abstract class AbstractNutzHttpInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String DO_SEND_METHOD_NAME = "send";
-    private static final String DO_SEND_INTERCEPTOR = "SenderSendInterceptor";
-    private static final String DO_CONSTRUCTOR_INTERCEPTOR = "SenderConstructorInterceptor";
+    private static final String DO_SEND_INTERCEPTOR = "org.apache.skywalking.apm.plugin.nutz.http.sync.SenderSendInterceptor";
+    private static final String DO_CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.plugin.nutz.http.sync.SenderConstructorInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/nutz-plugins/mvc-annotation-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/nutz/mvc/define/ActionInstrumentation.java
Patch:
@@ -46,7 +46,7 @@ public ElementMatcher<MethodDescription> getConstructorMatcher() {
 
                 @Override
                 public String getConstructorInterceptor() {
-                    return "ActionConstructorInterceptor";
+                    return "org.apache.skywalking.apm.plugin.nutz.mvc.ActionConstructorInterceptor";
                 }
             }
         };
@@ -63,7 +63,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "ActionMethodInterceptor";
+                    return "org.apache.skywalking.apm.plugin.nutz.mvc.ActionMethodInterceptor";
                 }
 
                 @Override

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/define/RealCallInstrumentation.java
Patch:
@@ -49,7 +49,7 @@ public class RealCallInstrumentation extends ClassInstanceMethodsEnhancePluginDe
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "RealCallInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.okhttp.v3.RealCallInterceptor";
 
     @Override protected ClassMatch enhanceClass() {
         return NameMatch.byName(ENHANCE_CLASS);

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/AbstractJdbc2StatementInstrumentation.java
Patch:
@@ -49,7 +49,7 @@
 public class AbstractJdbc2StatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "org.postgresql.jdbc2.AbstractJdbc2Statement";
-    private static final String INTERCEPTOR_CLASS = "StatementExecuteMethodsInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.StatementExecuteMethodsInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/ConnectionInstrumentation.java
Patch:
@@ -48,7 +48,7 @@
  */
 public class ConnectionInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String PREPARE_STATEMENT_METHOD_WITH_STRING_ARRAY_INTERCEPTOR_CLASS = "JDBCPrepareStatementWithStringArrayInterceptor";
+    private static final String PREPARE_STATEMENT_METHOD_WITH_STRING_ARRAY_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.JDBCPrepareStatementWithStringArrayInterceptor";
     public static final String ENHANCE_CLASS = "org.postgresql.jdbc.PgConnection";
     public static final String STRING_ARRAY_ARGUMENT_TYPE = "java.lang.String[]";
 

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/Constants.java
Patch:
@@ -25,8 +25,8 @@
  * @author zhangxin
  */
 public class Constants {
-    public static final String CREATE_STATEMENT_INTERCEPTOR_CLASS = "CreateStatementInterceptor";
-    public static final String CREATE_PREPARED_STATEMENT_INTERCEPTOR_CLASS = "CreatePreparedStatementInterceptor";
-    public static final String CREATE_CALLABLE_STATEMENT_INTERCEPTOR_CLASS = "CreateCallableStatementInterceptor";
+    public static final String CREATE_STATEMENT_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.CreateStatementInterceptor";
+    public static final String CREATE_PREPARED_STATEMENT_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.CreatePreparedStatementInterceptor";
+    public static final String CREATE_CALLABLE_STATEMENT_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.CreateCallableStatementInterceptor";
 
 }

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v3/define/ResinV3Instrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class ResinV3Instrumentation extends ClassInstanceMethodsEnhancePluginDef
 
     private static final String ENHANCE_CLASS = "com.caucho.server.dispatch.ServletInvocation";
 
-    private static final String METHOD_INTERCET_CLASS = "ResinV3Interceptor";
+    private static final String METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.resin.v3.ResinV3Interceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v4/define/ResinV4Instrumentation.java
Patch:
@@ -39,7 +39,7 @@
 public class ResinV4Instrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "com.caucho.server.dispatch.ServletInvocation";
 
-    private static final String METHOD_INTERCET_CLASS = "ResinV4Interceptor";
+    private static final String METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.resin.v4.ResinV4Interceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/ConsumeMessageConcurrentlyInstrumentation.java
Patch:
@@ -39,7 +39,7 @@
 public class ConsumeMessageConcurrentlyInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently";
     private static final String CONSUMER_MESSAGE_METHOD = "consumeMessage";
-    private static final String INTERCEPTOR_CLASS = "org.apache.rocketmq.common.message.MessageConcurrentlyConsumeInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v4.MessageConcurrentlyConsumeInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/ConsumeMessageOrderlyInstrumentation.java
Patch:
@@ -39,7 +39,7 @@
 public class ConsumeMessageOrderlyInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly";
     private static final String ENHANCE_METHOD = "consumeMessage";
-    private static final String INTERCEPTOR_CLASS = "org.apache.rocketmq.common.message.MessageOrderlyConsumeInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v4.MessageOrderlyConsumeInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/MQClientAPIImplInstrumentation.java
Patch:
@@ -45,8 +45,8 @@ public class MQClientAPIImplInstrumentation extends ClassInstanceMethodsEnhanceP
 
     private static final String ENHANCE_CLASS = "org.apache.rocketmq.client.impl.MQClientAPIImpl";
     private static final String SEND_MESSAGE_METHOD_NAME = "sendMessage";
-    private static final String ASYNC_METHOD_INTERCEPTOR = "MessageSendInterceptor";
-    public static final String UPDATE_NAME_SERVER_INTERCEPT_CLASS = "UpdateNameServerInterceptor";
+    private static final String ASYNC_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.rocketMQ.v4.MessageSendInterceptor";
+    public static final String UPDATE_NAME_SERVER_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v4.UpdateNameServerInterceptor";
     public static final String UPDATE_NAME_SERVER_METHOD_NAME = "updateNameServerAddressList";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/SendCallbackInstrumentation.java
Patch:
@@ -43,9 +43,9 @@ public class SendCallbackInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ENHANCE_CLASS = "org.apache.rocketmq.client.producer.SendCallback";
     private static final String ON_SUCCESS_ENHANCE_METHOD = "onSuccess";
-    private static final String ON_SUCCESS_INTERCEPTOR = "OnSuccessInterceptor";
+    private static final String ON_SUCCESS_INTERCEPTOR = "org.apache.skywalking.apm.plugin.rocketMQ.v4.OnSuccessInterceptor";
     private static final String ON_EXCEPTION_METHOD = "onException";
-    private static final String ON_EXCEPTION_INTERCEPTOR = "OnExceptionInterceptor";
+    private static final String ON_EXCEPTION_INTERCEPTOR = "org.apache.skywalking.apm.plugin.rocketMQ.v4.OnExceptionInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/sjdbc/define/ExecutorInstrumentation.java
Patch:
@@ -39,11 +39,11 @@ public class ExecutorInstrumentation extends ClassInstanceMethodsEnhancePluginDe
     
     private static final String ENHANCE_CLASS = "com.dangdang.ddframe.rdb.sharding.executor.ExecutorEngine";
     
-    private static final String EXECUTOR_ENGINE_CONSTRUCTOR_INTERCEPTOR_CLASS = "ExecutorEngineConstructorInterceptor";
+    private static final String EXECUTOR_ENGINE_CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.sjdbc.define.ExecutorEngineConstructorInterceptor";
 
-    private static final String EXECUTE_INTERCEPTOR_CLASS = "ExecuteInterceptor";
+    private static final String EXECUTE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.sjdbc.define.ExecuteInterceptor";
     
-    private static final String ASYNC_EXECUTE_INTERCEPTOR_CLASS = "AsyncExecuteInterceptor";
+    private static final String ASYNC_EXECUTE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.sjdbc.define.AsyncExecuteInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AopProxyFactoryInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class AopProxyFactoryInstrumentation extends ClassInstanceMethodsEnhanceP
 
     private static final String ENHANCE_CLASS = "org.springframework.aop.framework.DefaultAopProxyFactory";
     public static final String ENHANCE_METHOD = "hasNoUserSuppliedProxyInterfaces";
-    public static final String INTERCEPT_CLASS = "CreateAopProxyInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spring.patch.CreateAopProxyInterceptor";
 
     @Override protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
  */
 public class ControllerInstrumentation extends AbstractSpring3Instrumentation {
     public static final String CONTROLLER_ENHANCE_ANNOTATION = "org.springframework.stereotype.Controller";
-    public static final String CONSTRUCTOR_INTERCEPTOR = "ControllerConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.mvc.v3.ControllerConstructorInterceptor";
     public static final String REQUEST_MAPPING_ENHANCE_ANNOTATION = "org.springframework.web.bind.annotation.RequestMapping";
 
     @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/HandlerMethodInvokerInstrumentation.java
Patch:
@@ -37,7 +37,7 @@
 public class HandlerMethodInvokerInstrumentation extends AbstractSpring3Instrumentation {
     private static final String ENHANCE_CLASS = "org.springframework.web.bind.annotation.support.HandlerMethodInvoker";
     private static final String ENHANCE_METHOD = "invokeHandlerMethod";
-    private static final String INTERCEPTOR_CLASS = "HandlerMethodInvokerInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.spring.mvc.v3.HandlerMethodInvokerInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java
Patch:
@@ -58,7 +58,7 @@ public ElementMatcher<MethodDescription> getConstructorMatcher() {
 
                 @Override
                 public String getConstructorInterceptor() {
-                    return "ControllerConstructorInterceptor";
+                    return "org.apache.skywalking.apm.plugin.spring.mvc.v4.ControllerConstructorInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/ControllerInstrumentationTest.java
Patch:
@@ -53,8 +53,8 @@ public void testGetEnhanceAnnotations() throws Throwable {
     public void testGetInstanceMethodsInterceptPoints() throws Throwable {
         InstanceMethodsInterceptPoint[] methodPoints = controllerInstrumentation.getInstanceMethodsInterceptPoints();
         assertThat(methodPoints.length, is(2));
-        assertThat(methodPoints[0].getMethodsInterceptor(), is("RequestMappingMethodInterceptor"));
-        assertThat(methodPoints[1].getMethodsInterceptor(), is("RestMappingMethodInterceptor"));
+        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor"));
+        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RestMappingMethodInterceptor"));
 
         Assert.assertFalse(methodPoints[0].isOverrideArgs());
         Assert.assertFalse(methodPoints[1].isOverrideArgs());
@@ -71,7 +71,7 @@ public void testGetConstructorsInterceptPoints() throws Throwable {
         ConstructorInterceptPoint cip = cips[0];
         Assert.assertNotNull(cip);
 
-        Assert.assertEquals(cip.getConstructorInterceptor(), "ControllerConstructorInterceptor");
+        Assert.assertEquals(cip.getConstructorInterceptor(), "org.apache.skywalking.apm.plugin.spring.mvc.v4.ControllerConstructorInterceptor");
         Assert.assertTrue(cip.getConstructorMatcher().equals(ElementMatchers.any()));
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/RestControllerInstrumentationTest.java
Patch:
@@ -51,8 +51,8 @@ public void testGetEnhanceAnnotations() throws Throwable {
     public void testGetInstanceMethodsInterceptPoints() throws Throwable {
         InstanceMethodsInterceptPoint[] methodPoints = restControllerInstrumentation.getInstanceMethodsInterceptPoints();
         assertThat(methodPoints.length, is(2));
-        assertThat(methodPoints[0].getMethodsInterceptor(), is("RequestMappingMethodInterceptor"));
-        assertThat(methodPoints[1].getMethodsInterceptor(), is("RestMappingMethodInterceptor"));
+        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor"));
+        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RestMappingMethodInterceptor"));
 
         Assert.assertFalse(methodPoints[0].isOverrideArgs());
         Assert.assertFalse(methodPoints[1].isOverrideArgs());

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/define/ResponseExtractorFutureInstrumentation.java
Patch:
@@ -46,9 +46,9 @@
 public class ResponseExtractorFutureInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ADD_CALLBACK_METHOD_NAME = "addCallback";
-    private static final String ADD_CALLBACK_INTERCEPTOR = "ResponseCallBackInterceptor";
+    private static final String ADD_CALLBACK_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.async.ResponseCallBackInterceptor";
     private static final String ENHANCE_CLASS = "org.springframework.web.client.AsyncRestTemplate$ResponseExtractorFuture";
-    private static final String GET_METHOD_INTERCEPTOR = "FutureGetInterceptor";
+    private static final String GET_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.async.FutureGetInterceptor";
     private static final String GET_METHOD_NAME = "get";
 
     @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/define/RestTemplateInstrumentation.java
Patch:
@@ -46,9 +46,9 @@ public class RestTemplateInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ENHANCE_CLASS = "org.springframework.web.client.AsyncRestTemplate";
     private static final String DO_EXECUTE_METHOD_NAME = "doExecute";
-    private static final String DO_EXECUTE_INTERCEPTOR = "RestExecuteInterceptor";
+    private static final String DO_EXECUTE_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.async.RestExecuteInterceptor";
     private static final String CREATE_REQUEST_METHOD_NAME = "createAsyncRequest";
-    private static final String CREATE_REQUEST_INTERCEPTOR = "RestRequestInterceptor";
+    private static final String CREATE_REQUEST_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.async.RestRequestInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/define/RestTemplateInstrumentation.java
Patch:
@@ -45,11 +45,11 @@ public class RestTemplateInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ENHANCE_CLASS = "org.springframework.web.client.RestTemplate";
     private static final String DO_EXECUTE_METHOD_NAME = "doExecute";
-    private static final String DO_EXECUTE_INTERCEPTOR = "RestExecuteInterceptor";
+    private static final String DO_EXECUTE_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.sync.RestExecuteInterceptor";
     private static final String HANDLE_REQUEST_METHOD_NAME = "handleResponse";
-    private static final String HAND_REQUEST_INTERCEPTOR = "RestResponseInterceptor";
+    private static final String HAND_REQUEST_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.sync.RestResponseInterceptor";
     private static final String CREATE_REQUEST_METHOD_NAME = "createRequest";
-    private static final String CREATE_REQUEST_INTERCEPTOR = "RestRequestInterceptor";
+    private static final String CREATE_REQUEST_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.sync.RestRequestInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/spring-cloud-feign-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/netflix/feign/v11/define/NetflixFeignInstrumentation.java
Patch:
@@ -45,7 +45,7 @@ public class NetflixFeignInstrumentation extends ClassInstanceMethodsEnhancePlug
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "DefaultHttpClientInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spring.cloud.netflix.feign.v11.DefaultHttpClientInterceptor";
 
     @Override protected ClassMatch enhanceClass() {
         return byName(ENHANCE_CLASS);

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spymemcached/v2/define/MemcachedInstrumentation.java
Patch:
@@ -42,8 +42,8 @@
 public class MemcachedInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "net.spy.memcached.MemcachedClient";
-    private static final String CONSTRUCTOR_WITH_INETSOCKETADDRESS_LIST_ARG_INTERCEPT_CLASS = "MemcachedConstructorWithInetSocketAddressListArgInterceptor";
-    private static final String METHOD_INTERCEPT_CLASS = "MemcachedMethodInterceptor";
+    private static final String CONSTRUCTOR_WITH_INETSOCKETADDRESS_LIST_ARG_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spymemcached.MemcachedConstructorWithInetSocketAddressListArgInterceptor";
+    private static final String METHOD_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spymemcached.MemcachedMethodInterceptor";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/struts2/define/Struts2Instrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class Struts2Instrumentation extends ClassInstanceMethodsEnhancePluginDef
 
     private static final String ENHANCE_CLASS = "com.opensymphony.xwork2.DefaultActionInvocation";
     private static final String ENHANCE_METHOD = "invokeAction";
-    private static final String INTERCEPT_CLASS = "Struts2Interceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.struts2.Struts2Interceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/define/TomcatInstrumentation.java
Patch:
@@ -47,12 +47,12 @@ public class TomcatInstrumentation extends ClassInstanceMethodsEnhancePluginDefi
     /**
      * The intercept class for "invoke" method in the class "org.apache.catalina.core.StandardWrapperValve"
      */
-    private static final String INVOKE_INTERCEPT_CLASS = "TomcatInvokeInterceptor";
+    private static final String INVOKE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.tomcat78x.TomcatInvokeInterceptor";
 
     /**
      * The intercept class for "exception" method in the class "org.apache.catalina.core.StandardWrapperValve"
      */
-    private static final String EXCEPTION_INTERCEPT_CLASS = "TomcatExceptionInterceptor";
+    private static final String EXCEPTION_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.tomcat78x.TomcatExceptionInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/continuation/SkywalkingContinuationActivation.java
Patch:
@@ -42,9 +42,9 @@
  */
 public class SkywalkingContinuationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String ENHANCE_CLASS = "SkywalkingContinuation";
-    private static final String CONSTRUCTOR_INTERCEPTOR = "ConstructorInterceptor";
-    private static final String ACTIVATE_METHOD_INTERCEPTOR = "ActivateInterceptor";
+    private static final String ENHANCE_CLASS = "org.skywalking.apm.toolkit.opentracing.SkywalkingContinuation";
+    private static final String CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.continuation.ConstructorInterceptor";
+    private static final String ACTIVATE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.continuation.ActivateInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/tracer/SkywalkingTracerActivation.java
Patch:
@@ -41,9 +41,9 @@
  **/
 public class SkywalkingTracerActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String ENHANCE_CLASS = "SkywalkingTracer";
-    private static final String INJECT_INTERCEPTOR = "SkywalkingTracerInjectInterceptor";
-    private static final String EXTRACT_INTERCEPTOR = "SkywalkingTracerExtractInterceptor";
+    private static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingTracer";
+    private static final String INJECT_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.tracer.SkywalkingTracerInjectInterceptor";
+    private static final String EXTRACT_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.tracer.SkywalkingTracerExtractInterceptor";
 
     @Override protected ClassMatch enhanceClass() {
         return NameMatch.byName(ENHANCE_CLASS);

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/main/java/org/apache/skywalking/apm/plugin/dubbo/DubboInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
 public class DubboInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "com.alibaba.dubbo.monitor.support.MonitorFilter";
-    private static final String INTERCEPT_CLASS = "DubboInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.dubbo.DubboInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/elastic-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/esjob/define/JobExecutorInstrumentation.java
Patch:
@@ -38,7 +38,7 @@ public class JobExecutorInstrumentation extends ClassInstanceMethodsEnhancePlugi
 
     private static final String ENHANCE_CLASS = "com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor";
 
-    private static final String JOB_EXECUTOR_INTERCEPTOR_CLASS = "JobExecutorInterceptor";
+    private static final String JOB_EXECUTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.esjob.JobExecutorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/feign/http/v9/define/DefaultHttpClientInstrumentation.java
Patch:
@@ -48,7 +48,7 @@ public class DefaultHttpClientInstrumentation extends ClassInstanceMethodsEnhanc
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "DefaultHttpClientInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.feign.http.v9.DefaultHttpClientInterceptor";
 
     @Override protected ClassMatch enhanceClass() {
         return byName(ENHANCE_CLASS);

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/ClientCallInstrumentation.java
Patch:
@@ -40,8 +40,8 @@
 public class ClientCallInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.internal.ClientCallImpl";
     private static final String ENHANCE_METHOD = "start";
-    public static final String CONSTRUCTOR_CLASS = "ClientCallIConstructorInterceptor";
-    public static final String START_METHOD_INTERCEPT_CLASS = "ClientCallStartInterceptor";
+    public static final String CONSTRUCTOR_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ClientCallIConstructorInterceptor";
+    public static final String START_METHOD_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ClientCallStartInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/ClientCallsInstrumentation.java
Patch:
@@ -43,7 +43,7 @@ public class ClientCallsInstrumentation extends ClassStaticMethodsEnhancePluginD
                 }
 
                 @Override public String getMethodsInterceptor() {
-                    return "ClientCallsMethodInterceptor";
+                    return "org.apache.skywalking.apm.plugin.grpc.v1.ClientCallsMethodInterceptor";
                 }
 
                 @Override public boolean isOverrideArgs() {

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/ManagedChannelInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
 public class ManagedChannelInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.internal.ManagedChannelImpl";
     private static final String ENHANCE_METHOD = "newCall";
-    public static final String INTERCEPT_CLASS = "ManagedChannelInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ManagedChannelInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/StreamObserverToCallListenerInstrumentation.java
Patch:
@@ -41,11 +41,11 @@
 public class StreamObserverToCallListenerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter";
     public static final String ON_READY_METHOD = "onReady";
-    public static final String ON_READY_INTERCEPT_CLASS = "StreamClientOnReadyInterceptor";
+    public static final String ON_READY_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.StreamClientOnReadyInterceptor";
     public static final String ON_CLASS_METHOD = "onClose";
-    public static final String ON_CLOSE_INTERCEPT_CLASS = "StreamClientOnCloseInterceptor";
+    public static final String ON_CLOSE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.StreamClientOnCloseInterceptor";
     public static final String ON_MESSAGE_METHOD = "onMessage";
-    public static final String ON_MESSAGE_INTERCEPT_CLASS = "ClientCallOnNextInterceptor";
+    public static final String ON_MESSAGE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ClientCallOnNextInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/StreamingServerCallHandlerInstrumentation.java
Patch:
@@ -39,7 +39,7 @@
 public class StreamingServerCallHandlerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ServerCalls$UnaryServerCallHandler";
     private static final String ENHANCE_METHOD = "startCall";
-    public static final String INTERCEPT_CLASS = "ServerCallHandlerInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallHandlerInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/UnaryClientCallListenerInstrumentation.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class UnaryClientCallListenerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ClientCalls$UnaryStreamToFuture";
-    public static final String INTERCEPT_CLASS = "UnaryStreamToFutureConstructorInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.UnaryStreamToFutureConstructorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/UnaryServerCallHandlerInstrumentation.java
Patch:
@@ -38,7 +38,7 @@
 public class UnaryServerCallHandlerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ServerCalls$StreamingServerCallHandler";
     private static final String ENHANCE_METHOD = "startCall";
-    public static final String INTERCEPT_CLASS = "ServerCallHandlerInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallHandlerInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/grpc/v1/define/UnaryServerCallListenerInstrumentation.java
Patch:
@@ -42,11 +42,11 @@
 public class UnaryServerCallListenerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener";
     public static final String ON_CLOSE_METHOD = "onHalfClose";
-    public static final String ON_CLOSE_INTERCEPT_CLASS = "ServerCallOnCloseInterceptor";
+    public static final String ON_CLOSE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallOnCloseInterceptor";
     public static final String ON_READY_METHOD = "onReady";
-    public static final String ON_READY_INTERCEPT_CLASS = "ServerCallOnReadyInterceptor";
+    public static final String ON_READY_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallOnReadyInterceptor";
     public static final String ON_CANCEL_METHOD = "onCancel";
-    public static final String ON_CANCEL_INTERCEPT_CLASS = "ServerCallOnCancelInterceptor";
+    public static final String ON_CANCEL_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.grpc.v1.ServerCallOnCancelInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/JdbcXAConnectionInstrumentation.java
Patch:
@@ -35,7 +35,7 @@
 public class JdbcXAConnectionInstrumentation extends AbstractConnectionInstrumentation {
 
     public static final String ENHANCE_CLASS = "org.h2.jdbcx.JdbcXAConnection";
-    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "JdbcXAConnectionConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.h2.JdbcXAConnectionConstructorInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {

File: apm-sniffer/apm-sdk-plugin/h2-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/h2/define/PooledJdbcConnectionInstrumentation.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class PooledJdbcConnectionInstrumentation extends AbstractConnectionInstrumentation {
 
-    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "PooledJdbcConnectionConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.h2.PooledJdbcConnectionConstructorInterceptor";
     public static final String ENHANCE_CLASS = "org.h2.jdbcx.JdbcXAConnection$PooledJdbcConnection";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/httpClient/v4/define/HttpClientInstrumentation.java
Patch:
@@ -31,7 +31,7 @@
  */
 public abstract class HttpClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String INTERCEPT_CLASS = "HttpClientExecuteInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.httpClient.v4.HttpClientExecuteInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/apache/skywalking/apm/plugin/jdbc/define/AbstractDriverInstrumentation.java
Patch:
@@ -35,7 +35,7 @@
  */
 public abstract class AbstractDriverInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String DRIVER_INTERCEPT_CLASS = "JDBCDriverInterceptor";
+    private static final String DRIVER_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jdbc.JDBCDriverInterceptor";
 
     @Override
     protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jedis/v2/define/JedisClusterInstrumentation.java
Patch:
@@ -48,9 +48,9 @@ public class JedisClusterInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ARGUMENT_TYPE_NAME = "redis.clients.jedis.HostAndPort";
     private static final String ENHANCE_CLASS = "redis.clients.jedis.JedisCluster";
-    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "JedisClusterConstructorWithListHostAndPortArgInterceptor";
-    private static final String METHOD_INTERCEPT_CLASS = "JedisMethodInterceptor";
-    private static final String CONSTRUCTOR_WITH_HOSTANDPORT_ARG_INTERCEPT_CLASS = "JedisClusterConstructorWithHostAndPortArgInterceptor";
+    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "Jorg.apache.skywalking.apm.plugin.jedis.v2.edisClusterConstructorWithListHostAndPortArgInterceptor";
+    private static final String METHOD_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisMethodInterceptor";
+    private static final String CONSTRUCTOR_WITH_HOSTANDPORT_ARG_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.jedis.v2.JedisClusterConstructorWithHostAndPortArgInterceptor";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-server-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jetty/v9/server/define/JettyInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class JettyInstrumentation extends ClassInstanceMethodsEnhancePluginDefin
 
     private static final String ENHANCE_CLASS = "org.eclipse.jetty.server.Server";
     private static final String ENHANCE_METHOD = "handle";
-    private static final String INTERCEPTOR_CLASS = "HandleInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jetty.v9.server.HandleInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v2/define/MongoDBCollectionImplInstrumentation.java
Patch:
@@ -48,7 +48,7 @@ public class MongoDBCollectionImplInstrumentation extends ClassInstanceMethodsEn
 
     private static final String ENHANCE_CLASS = "com.mongodb.DBCollectionImpl";
 
-    private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBCollectionMethodInterceptor";
+    private static final String MONGDB_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.mongodb.v2.MongoDBCollectionMethodInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v2/define/MongoDBCollectionInstrumentation.java
Patch:
@@ -52,7 +52,7 @@ public class MongoDBCollectionInstrumentation extends ClassInstanceMethodsEnhanc
 
     private static final String ENHANCE_CLASS = "com.mongodb.DBCollection";
 
-    private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBCollectionMethodInterceptor";
+    private static final String MONGDB_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.mongodb.v2.MongoDBCollectionMethodInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/mongodb/v3/define/MongoDBInstrumentation.java
Patch:
@@ -34,7 +34,7 @@ public class MongoDBInstrumentation extends ClassInstanceMethodsEnhancePluginDef
 
     private static final String ENHANCE_CLASS = "com.mongodb.Mongo";
 
-    private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBMethodInterceptor";
+    private static final String MONGDB_METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.mongodb.v3.MongoDBMethodInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/apache/skywalking/apm/plugin/motan/define/MotanConsumerInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class MotanConsumerInstrumentation extends ClassInstanceMethodsEnhancePlu
 
     private static final String ENHANCE_CLASS = "com.weibo.api.motan.transport.ProviderMessageRouter";
 
-    private static final String INVOKE_INTERCEPT_CLASS = "MotanProviderInterceptor";
+    private static final String INVOKE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.motan.MotanProviderInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/apache/skywalking/apm/plugin/motan/define/MotanProviderInstrumentation.java
Patch:
@@ -49,11 +49,11 @@ public class MotanProviderInstrumentation extends ClassInstanceMethodsEnhancePlu
     /**
      * Class that intercept all constructor of ${@link com.weibo.api.motan.rpc.AbstractProvider}.
      */
-    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "MotanConsumerInterceptor";
+    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.motan.MotanConsumerInterceptor";
     /**
      * Class that intercept {@link com.weibo.api.motan.rpc.AbstractProvider#call(Request)}.
      */
-    private static final String PROVIDER_INVOKE_INTERCEPT_CLASS = "MotanConsumerInterceptor";
+    private static final String PROVIDER_INVOKE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.motan.MotanConsumerInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/CallableInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
  */
 public class CallableInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "com.mysql.jdbc.CallableStatement";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/ConnectionInstrumentation.java
Patch:
@@ -55,7 +55,7 @@ public abstract class ConnectionInstrumentation extends ClassInstanceMethodsEnha
                 }
 
                 @Override public String getMethodsInterceptor() {
-                    return "CreatePreparedStatementInterceptor";
+                    return "org.apache.skywalking.apm.plugin.jdbc.mysql.CreatePreparedStatementInterceptor";
                 }
 
                 @Override public boolean isOverrideArgs() {
@@ -68,7 +68,7 @@ public abstract class ConnectionInstrumentation extends ClassInstanceMethodsEnha
                 }
 
                 @Override public String getMethodsInterceptor() {
-                    return "CreateCallableStatementInterceptor";
+                    return "org.apache.skywalking.apm.plugin.jdbc.mysql.CreateCallableStatementInterceptor";
                 }
 
                 @Override public boolean isOverrideArgs() {
@@ -81,7 +81,7 @@ public abstract class ConnectionInstrumentation extends ClassInstanceMethodsEnha
                 }
 
                 @Override public String getMethodsInterceptor() {
-                    return "CreateStatementInterceptor";
+                    return "org.apache.skywalking.apm.plugin.jdbc.mysql.CreateStatementInterceptor";
                 }
 
                 @Override public boolean isOverrideArgs() {

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/PreparedStatementInstrumentation.java
Patch:
@@ -44,7 +44,7 @@
 public class PreparedStatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.PreparedStatement";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
     public static final String MYSQL6_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.PreparedStatement";
     public static final String JDBC42_PREPARED_STATEMENT_CLASS_NAME = "com.mysql.jdbc.JDBC42PreparedStatement";
 

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/mysql/define/StatementInstrumentation.java
Patch:
@@ -46,7 +46,7 @@
  */
 public class StatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String STATEMENT_CLASS_NAME = "com.mysql.jdbc.StatementImpl";
-    private static final String SERVICE_METHOD_INTERCEPTOR = "StatementExecuteMethodsInterceptor";
+    private static final String SERVICE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.jdbc.mysql.StatementExecuteMethodsInterceptor";
     public static final String MYSQL6_STATEMENT_CLASS_NAME = "com.mysql.cj.jdbc.StatementImpl";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/nutz-plugins/http-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/nutz/http/sync/define/AbstractNutzHttpInstrumentation.java
Patch:
@@ -32,8 +32,8 @@
 public abstract class AbstractNutzHttpInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String DO_SEND_METHOD_NAME = "send";
-    private static final String DO_SEND_INTERCEPTOR = "SenderSendInterceptor";
-    private static final String DO_CONSTRUCTOR_INTERCEPTOR = "SenderConstructorInterceptor";
+    private static final String DO_SEND_INTERCEPTOR = "org.apache.skywalking.apm.plugin.nutz.http.sync.SenderSendInterceptor";
+    private static final String DO_CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.plugin.nutz.http.sync.SenderConstructorInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/nutz-plugins/mvc-annotation-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/nutz/mvc/define/ActionInstrumentation.java
Patch:
@@ -46,7 +46,7 @@ public ElementMatcher<MethodDescription> getConstructorMatcher() {
 
                 @Override
                 public String getConstructorInterceptor() {
-                    return "ActionConstructorInterceptor";
+                    return "org.apache.skywalking.apm.plugin.nutz.mvc.ActionConstructorInterceptor";
                 }
             }
         };
@@ -63,7 +63,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "ActionMethodInterceptor";
+                    return "org.apache.skywalking.apm.plugin.nutz.mvc.ActionMethodInterceptor";
                 }
 
                 @Override

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/okhttp/v3/define/RealCallInstrumentation.java
Patch:
@@ -49,7 +49,7 @@ public class RealCallInstrumentation extends ClassInstanceMethodsEnhancePluginDe
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "RealCallInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.okhttp.v3.RealCallInterceptor";
 
     @Override protected ClassMatch enhanceClass() {
         return NameMatch.byName(ENHANCE_CLASS);

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/AbstractJdbc2StatementInstrumentation.java
Patch:
@@ -49,7 +49,7 @@
 public class AbstractJdbc2StatementInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "org.postgresql.jdbc2.AbstractJdbc2Statement";
-    private static final String INTERCEPTOR_CLASS = "StatementExecuteMethodsInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.StatementExecuteMethodsInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/ConnectionInstrumentation.java
Patch:
@@ -48,7 +48,7 @@
  */
 public class ConnectionInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String PREPARE_STATEMENT_METHOD_WITH_STRING_ARRAY_INTERCEPTOR_CLASS = "JDBCPrepareStatementWithStringArrayInterceptor";
+    private static final String PREPARE_STATEMENT_METHOD_WITH_STRING_ARRAY_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.JDBCPrepareStatementWithStringArrayInterceptor";
     public static final String ENHANCE_CLASS = "org.postgresql.jdbc.PgConnection";
     public static final String STRING_ARRAY_ARGUMENT_TYPE = "java.lang.String[]";
 

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/jdbc/postgresql/define/Constants.java
Patch:
@@ -25,8 +25,8 @@
  * @author zhangxin
  */
 public class Constants {
-    public static final String CREATE_STATEMENT_INTERCEPTOR_CLASS = "CreateStatementInterceptor";
-    public static final String CREATE_PREPARED_STATEMENT_INTERCEPTOR_CLASS = "CreatePreparedStatementInterceptor";
-    public static final String CREATE_CALLABLE_STATEMENT_INTERCEPTOR_CLASS = "CreateCallableStatementInterceptor";
+    public static final String CREATE_STATEMENT_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.CreateStatementInterceptor";
+    public static final String CREATE_PREPARED_STATEMENT_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.CreatePreparedStatementInterceptor";
+    public static final String CREATE_CALLABLE_STATEMENT_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.jdbc.postgresql.CreateCallableStatementInterceptor";
 
 }

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v3/define/ResinV3Instrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class ResinV3Instrumentation extends ClassInstanceMethodsEnhancePluginDef
 
     private static final String ENHANCE_CLASS = "com.caucho.server.dispatch.ServletInvocation";
 
-    private static final String METHOD_INTERCET_CLASS = "ResinV3Interceptor";
+    private static final String METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.resin.v3.ResinV3Interceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/resin/v4/define/ResinV4Instrumentation.java
Patch:
@@ -39,7 +39,7 @@
 public class ResinV4Instrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "com.caucho.server.dispatch.ServletInvocation";
 
-    private static final String METHOD_INTERCET_CLASS = "ResinV4Interceptor";
+    private static final String METHOD_INTERCET_CLASS = "org.apache.skywalking.apm.plugin.resin.v4.ResinV4Interceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/ConsumeMessageConcurrentlyInstrumentation.java
Patch:
@@ -39,7 +39,7 @@
 public class ConsumeMessageConcurrentlyInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently";
     private static final String CONSUMER_MESSAGE_METHOD = "consumeMessage";
-    private static final String INTERCEPTOR_CLASS = "org.apache.rocketmq.common.message.MessageConcurrentlyConsumeInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v4.MessageConcurrentlyConsumeInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/ConsumeMessageOrderlyInstrumentation.java
Patch:
@@ -39,7 +39,7 @@
 public class ConsumeMessageOrderlyInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
     private static final String ENHANCE_CLASS = "org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly";
     private static final String ENHANCE_METHOD = "consumeMessage";
-    private static final String INTERCEPTOR_CLASS = "org.apache.rocketmq.common.message.MessageOrderlyConsumeInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v4.MessageOrderlyConsumeInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/MQClientAPIImplInstrumentation.java
Patch:
@@ -45,8 +45,8 @@ public class MQClientAPIImplInstrumentation extends ClassInstanceMethodsEnhanceP
 
     private static final String ENHANCE_CLASS = "org.apache.rocketmq.client.impl.MQClientAPIImpl";
     private static final String SEND_MESSAGE_METHOD_NAME = "sendMessage";
-    private static final String ASYNC_METHOD_INTERCEPTOR = "MessageSendInterceptor";
-    public static final String UPDATE_NAME_SERVER_INTERCEPT_CLASS = "UpdateNameServerInterceptor";
+    private static final String ASYNC_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.rocketMQ.v4.MessageSendInterceptor";
+    public static final String UPDATE_NAME_SERVER_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.rocketMQ.v4.UpdateNameServerInterceptor";
     public static final String UPDATE_NAME_SERVER_METHOD_NAME = "updateNameServerAddressList";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/rocketMQ-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/rocketMQ/v4/define/SendCallbackInstrumentation.java
Patch:
@@ -43,9 +43,9 @@ public class SendCallbackInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ENHANCE_CLASS = "org.apache.rocketmq.client.producer.SendCallback";
     private static final String ON_SUCCESS_ENHANCE_METHOD = "onSuccess";
-    private static final String ON_SUCCESS_INTERCEPTOR = "OnSuccessInterceptor";
+    private static final String ON_SUCCESS_INTERCEPTOR = "org.apache.skywalking.apm.plugin.rocketMQ.v4.OnSuccessInterceptor";
     private static final String ON_EXCEPTION_METHOD = "onException";
-    private static final String ON_EXCEPTION_INTERCEPTOR = "OnExceptionInterceptor";
+    private static final String ON_EXCEPTION_INTERCEPTOR = "org.apache.skywalking.apm.plugin.rocketMQ.v4.OnExceptionInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/sjdbc/define/ExecutorInstrumentation.java
Patch:
@@ -39,11 +39,11 @@ public class ExecutorInstrumentation extends ClassInstanceMethodsEnhancePluginDe
     
     private static final String ENHANCE_CLASS = "com.dangdang.ddframe.rdb.sharding.executor.ExecutorEngine";
     
-    private static final String EXECUTOR_ENGINE_CONSTRUCTOR_INTERCEPTOR_CLASS = "ExecutorEngineConstructorInterceptor";
+    private static final String EXECUTOR_ENGINE_CONSTRUCTOR_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.sjdbc.define.ExecutorEngineConstructorInterceptor";
 
-    private static final String EXECUTE_INTERCEPTOR_CLASS = "ExecuteInterceptor";
+    private static final String EXECUTE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.sjdbc.define.ExecuteInterceptor";
     
-    private static final String ASYNC_EXECUTE_INTERCEPTOR_CLASS = "AsyncExecuteInterceptor";
+    private static final String ASYNC_EXECUTE_INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.sjdbc.define.AsyncExecuteInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/core-patch/src/main/java/org/apache/skywalking/apm/plugin/spring/patch/define/AopProxyFactoryInstrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class AopProxyFactoryInstrumentation extends ClassInstanceMethodsEnhanceP
 
     private static final String ENHANCE_CLASS = "org.springframework.aop.framework.DefaultAopProxyFactory";
     public static final String ENHANCE_METHOD = "hasNoUserSuppliedProxyInterfaces";
-    public static final String INTERCEPT_CLASS = "CreateAopProxyInterceptor";
+    public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spring.patch.CreateAopProxyInterceptor";
 
     @Override protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/ControllerInstrumentation.java
Patch:
@@ -40,7 +40,7 @@
  */
 public class ControllerInstrumentation extends AbstractSpring3Instrumentation {
     public static final String CONTROLLER_ENHANCE_ANNOTATION = "org.springframework.stereotype.Controller";
-    public static final String CONSTRUCTOR_INTERCEPTOR = "ControllerConstructorInterceptor";
+    public static final String CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.mvc.v3.ControllerConstructorInterceptor";
     public static final String REQUEST_MAPPING_ENHANCE_ANNOTATION = "org.springframework.web.bind.annotation.RequestMapping";
 
     @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v3/define/HandlerMethodInvokerInstrumentation.java
Patch:
@@ -37,7 +37,7 @@
 public class HandlerMethodInvokerInstrumentation extends AbstractSpring3Instrumentation {
     private static final String ENHANCE_CLASS = "org.springframework.web.bind.annotation.support.HandlerMethodInvoker";
     private static final String ENHANCE_METHOD = "invokeHandlerMethod";
-    private static final String INTERCEPTOR_CLASS = "HandlerMethodInvokerInterceptor";
+    private static final String INTERCEPTOR_CLASS = "org.apache.skywalking.apm.plugin.spring.mvc.v3.HandlerMethodInvokerInterceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/AbstractControllerInstrumentation.java
Patch:
@@ -58,7 +58,7 @@ public ElementMatcher<MethodDescription> getConstructorMatcher() {
 
                 @Override
                 public String getConstructorInterceptor() {
-                    return "ControllerConstructorInterceptor";
+                    return "org.apache.skywalking.apm.plugin.spring.mvc.v4.ControllerConstructorInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/ControllerInstrumentationTest.java
Patch:
@@ -53,8 +53,8 @@ public void testGetEnhanceAnnotations() throws Throwable {
     public void testGetInstanceMethodsInterceptPoints() throws Throwable {
         InstanceMethodsInterceptPoint[] methodPoints = controllerInstrumentation.getInstanceMethodsInterceptPoints();
         assertThat(methodPoints.length, is(2));
-        assertThat(methodPoints[0].getMethodsInterceptor(), is("RequestMappingMethodInterceptor"));
-        assertThat(methodPoints[1].getMethodsInterceptor(), is("RestMappingMethodInterceptor"));
+        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor"));
+        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RestMappingMethodInterceptor"));
 
         Assert.assertFalse(methodPoints[0].isOverrideArgs());
         Assert.assertFalse(methodPoints[1].isOverrideArgs());
@@ -71,7 +71,7 @@ public void testGetConstructorsInterceptPoints() throws Throwable {
         ConstructorInterceptPoint cip = cips[0];
         Assert.assertNotNull(cip);
 
-        Assert.assertEquals(cip.getConstructorInterceptor(), "ControllerConstructorInterceptor");
+        Assert.assertEquals(cip.getConstructorInterceptor(), "org.apache.skywalking.apm.plugin.spring.mvc.v4.ControllerConstructorInterceptor");
         Assert.assertTrue(cip.getConstructorMatcher().equals(ElementMatchers.any()));
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/define/RestControllerInstrumentationTest.java
Patch:
@@ -51,8 +51,8 @@ public void testGetEnhanceAnnotations() throws Throwable {
     public void testGetInstanceMethodsInterceptPoints() throws Throwable {
         InstanceMethodsInterceptPoint[] methodPoints = restControllerInstrumentation.getInstanceMethodsInterceptPoints();
         assertThat(methodPoints.length, is(2));
-        assertThat(methodPoints[0].getMethodsInterceptor(), is("RequestMappingMethodInterceptor"));
-        assertThat(methodPoints[1].getMethodsInterceptor(), is("RestMappingMethodInterceptor"));
+        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RequestMappingMethodInterceptor"));
+        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.apache.skywalking.apm.plugin.spring.mvc.commons.interceptor.RestMappingMethodInterceptor"));
 
         Assert.assertFalse(methodPoints[0].isOverrideArgs());
         Assert.assertFalse(methodPoints[1].isOverrideArgs());

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/define/ResponseExtractorFutureInstrumentation.java
Patch:
@@ -46,9 +46,9 @@
 public class ResponseExtractorFutureInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ADD_CALLBACK_METHOD_NAME = "addCallback";
-    private static final String ADD_CALLBACK_INTERCEPTOR = "ResponseCallBackInterceptor";
+    private static final String ADD_CALLBACK_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.async.ResponseCallBackInterceptor";
     private static final String ENHANCE_CLASS = "org.springframework.web.client.AsyncRestTemplate$ResponseExtractorFuture";
-    private static final String GET_METHOD_INTERCEPTOR = "FutureGetInterceptor";
+    private static final String GET_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.async.FutureGetInterceptor";
     private static final String GET_METHOD_NAME = "get";
 
     @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/define/RestTemplateInstrumentation.java
Patch:
@@ -46,9 +46,9 @@ public class RestTemplateInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ENHANCE_CLASS = "org.springframework.web.client.AsyncRestTemplate";
     private static final String DO_EXECUTE_METHOD_NAME = "doExecute";
-    private static final String DO_EXECUTE_INTERCEPTOR = "RestExecuteInterceptor";
+    private static final String DO_EXECUTE_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.async.RestExecuteInterceptor";
     private static final String CREATE_REQUEST_METHOD_NAME = "createAsyncRequest";
-    private static final String CREATE_REQUEST_INTERCEPTOR = "RestRequestInterceptor";
+    private static final String CREATE_REQUEST_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.async.RestRequestInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/sync/define/RestTemplateInstrumentation.java
Patch:
@@ -45,11 +45,11 @@ public class RestTemplateInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ENHANCE_CLASS = "org.springframework.web.client.RestTemplate";
     private static final String DO_EXECUTE_METHOD_NAME = "doExecute";
-    private static final String DO_EXECUTE_INTERCEPTOR = "RestExecuteInterceptor";
+    private static final String DO_EXECUTE_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.sync.RestExecuteInterceptor";
     private static final String HANDLE_REQUEST_METHOD_NAME = "handleResponse";
-    private static final String HAND_REQUEST_INTERCEPTOR = "RestResponseInterceptor";
+    private static final String HAND_REQUEST_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.sync.RestResponseInterceptor";
     private static final String CREATE_REQUEST_METHOD_NAME = "createRequest";
-    private static final String CREATE_REQUEST_INTERCEPTOR = "RestRequestInterceptor";
+    private static final String CREATE_REQUEST_INTERCEPTOR = "org.apache.skywalking.apm.plugin.spring.resttemplate.sync.RestRequestInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/spring-cloud/netflix-plugins/spring-cloud-feign-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/cloud/netflix/feign/v11/define/NetflixFeignInstrumentation.java
Patch:
@@ -45,7 +45,7 @@ public class NetflixFeignInstrumentation extends ClassInstanceMethodsEnhancePlug
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "DefaultHttpClientInterceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spring.cloud.netflix.feign.v11.DefaultHttpClientInterceptor";
 
     @Override protected ClassMatch enhanceClass() {
         return byName(ENHANCE_CLASS);

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spymemcached/v2/define/MemcachedInstrumentation.java
Patch:
@@ -42,8 +42,8 @@
 public class MemcachedInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "net.spy.memcached.MemcachedClient";
-    private static final String CONSTRUCTOR_WITH_INETSOCKETADDRESS_LIST_ARG_INTERCEPT_CLASS = "MemcachedConstructorWithInetSocketAddressListArgInterceptor";
-    private static final String METHOD_INTERCEPT_CLASS = "MemcachedMethodInterceptor";
+    private static final String CONSTRUCTOR_WITH_INETSOCKETADDRESS_LIST_ARG_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spymemcached.MemcachedConstructorWithInetSocketAddressListArgInterceptor";
+    private static final String METHOD_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.spymemcached.MemcachedMethodInterceptor";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/struts2-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/struts2/define/Struts2Instrumentation.java
Patch:
@@ -40,7 +40,7 @@ public class Struts2Instrumentation extends ClassInstanceMethodsEnhancePluginDef
 
     private static final String ENHANCE_CLASS = "com.opensymphony.xwork2.DefaultActionInvocation";
     private static final String ENHANCE_METHOD = "invokeAction";
-    private static final String INTERCEPT_CLASS = "Struts2Interceptor";
+    private static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.struts2.Struts2Interceptor";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/tomcat78x/define/TomcatInstrumentation.java
Patch:
@@ -47,12 +47,12 @@ public class TomcatInstrumentation extends ClassInstanceMethodsEnhancePluginDefi
     /**
      * The intercept class for "invoke" method in the class "org.apache.catalina.core.StandardWrapperValve"
      */
-    private static final String INVOKE_INTERCEPT_CLASS = "TomcatInvokeInterceptor";
+    private static final String INVOKE_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.tomcat78x.TomcatInvokeInterceptor";
 
     /**
      * The intercept class for "exception" method in the class "org.apache.catalina.core.StandardWrapperValve"
      */
-    private static final String EXCEPTION_INTERCEPT_CLASS = "TomcatExceptionInterceptor";
+    private static final String EXCEPTION_INTERCEPT_CLASS = "org.apache.skywalking.apm.plugin.tomcat78x.TomcatExceptionInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/continuation/SkywalkingContinuationActivation.java
Patch:
@@ -42,9 +42,9 @@
  */
 public class SkywalkingContinuationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String ENHANCE_CLASS = "SkywalkingContinuation";
-    private static final String CONSTRUCTOR_INTERCEPTOR = "ConstructorInterceptor";
-    private static final String ACTIVATE_METHOD_INTERCEPTOR = "ActivateInterceptor";
+    private static final String ENHANCE_CLASS = "org.skywalking.apm.toolkit.opentracing.SkywalkingContinuation";
+    private static final String CONSTRUCTOR_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.continuation.ConstructorInterceptor";
+    private static final String ACTIVATE_METHOD_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.continuation.ActivateInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/opentracing/tracer/SkywalkingTracerActivation.java
Patch:
@@ -41,9 +41,9 @@
  **/
 public class SkywalkingTracerActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String ENHANCE_CLASS = "SkywalkingTracer";
-    private static final String INJECT_INTERCEPTOR = "SkywalkingTracerInjectInterceptor";
-    private static final String EXTRACT_INTERCEPTOR = "SkywalkingTracerExtractInterceptor";
+    private static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.opentracing.SkywalkingTracer";
+    private static final String INJECT_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.tracer.SkywalkingTracerInjectInterceptor";
+    private static final String EXTRACT_INTERCEPTOR = "org.apache.skywalking.apm.toolkit.activation.opentracing.tracer.SkywalkingTracerExtractInterceptor";
 
     @Override protected ClassMatch enhanceClass() {
         return NameMatch.byName(ENHANCE_CLASS);

File: apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/logging/core/EasyLoggerTest.java
Patch:
@@ -117,7 +117,7 @@ public void testFormat() {
         String formatLines = logger.format(exception);
         String[] lines = formatLines.split(Constants.LINE_SEPARATOR);
         Assert.assertEquals("java.lang.NullPointerException", lines[1]);
-        Assert.assertEquals("\tat org.apache.skywalking.apm.agent.core.logging.core.EasyLoggerTest.testFormat(EasyLoggerTest.java:132)", lines[2]);
+        Assert.assertEquals("\tat org.apache.skywalking.apm.agent.core.logging.core.EasyLoggerTest.testFormat(EasyLoggerTest.java:115)", lines[2]);
     }
 
     @AfterClass

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/define/Mysql5xConnectionInstrumentation.java
Patch:
@@ -23,8 +23,8 @@
 import static org.skywalking.apm.plugin.jdbc.mysql.define.MultiClassNameMatch.byMultiClassMatch;
 
 /**
- * {@link Mysql5xConnectionInstrumentation } interceptor the {@link com.mysql.cj.jdbc.ConnectionImpl} class above the
- * version 5.1+ of mysql jdbc driver jar.
+ * {@link Mysql5xConnectionInstrumentation } interceptor {@link com.mysql.cj.jdbc.ConnectionImpl} and
+ * com.mysql.jdbc.ConnectionImpl in mysql jdbc driver 5.1 and 5.1+
  *
  * @author zhangxin
  */

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/define/Mysql5xConnectionInstrumentation.java
Patch:
@@ -23,7 +23,7 @@
 import static org.skywalking.apm.plugin.jdbc.mysql.define.MultiClassNameMatch.byMultiClassMatch;
 
 /**
- * {@link Mysql50ConnectionInstrumentation} interceptor the {@link com.mysql.cj.jdbc.ConnectionImpl} class above the
+ * {@link Mysql5xConnectionInstrumentation } interceptor the {@link com.mysql.cj.jdbc.ConnectionImpl} class above the
  * version 5.1+ of mysql jdbc driver jar.
  *
  * @author zhangxin

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/match/HierarchyMatch.java
Patch:
@@ -72,7 +72,9 @@ public boolean isMatch(TypeDescription typeDescription) {
             matchHierarchyClass(implInterface, parentTypes);
         }
 
-        matchHierarchyClass(typeDescription.getSuperClass(), parentTypes);
+        if (typeDescription.getSuperClass() != null) {
+            matchHierarchyClass(typeDescription.getSuperClass(), parentTypes);
+        }
 
         if (parentTypes.size() == 0) {
             return true;

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/parser/standardization/SegmentStandardizationWorker.java
Patch:
@@ -42,7 +42,7 @@ public SegmentStandardizationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return SegmentStandardizationWorker.class.hashCode();
+        return 108;
     }
 
     @Override protected void onWork(SegmentStandardization segmentStandardization) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/CpuMetricPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public CpuMetricPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 115;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/GCMetricPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public GCMetricPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 112;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/InstHeartBeatPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public InstHeartBeatPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return InstHeartBeatPersistenceWorker.class.hashCode();
+        return 113;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/MemoryMetricPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public MemoryMetricPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 119;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/MemoryPoolMetricPersistenceWorker.java
Patch:
@@ -33,7 +33,7 @@
 public class MemoryPoolMetricPersistenceWorker extends PersistenceWorker<MemoryPoolMetric, MemoryPoolMetric> {
 
     @Override public int id() {
-        return 0;
+        return 122;
     }
 
     public MemoryPoolMetricPersistenceWorker(ModuleManager moduleManager) {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ApplicationRegisterRemoteWorker.java
Patch:
@@ -40,7 +40,7 @@ public ApplicationRegisterRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ApplicationRegisterRemoteWorker.class.hashCode();
+        return 10006;
     }
 
     @Override protected void onWork(Application message) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ApplicationRegisterSerialWorker.java
Patch:
@@ -50,7 +50,7 @@ public ApplicationRegisterSerialWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ApplicationRegisterSerialWorker.class.hashCode();
+        return 101;
     }
 
     @Override protected void onWork(Application application) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/InstanceRegisterRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class InstanceRegisterRemoteWorker extends AbstractRemoteWorker<Instance,
     private final Logger logger = LoggerFactory.getLogger(InstanceRegisterRemoteWorker.class);
 
     @Override public int id() {
-        return InstanceRegisterRemoteWorker.class.hashCode();
+        return 10001;
     }
 
     InstanceRegisterRemoteWorker(ModuleManager moduleManager) {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/InstanceRegisterSerialWorker.java
Patch:
@@ -48,7 +48,7 @@ public InstanceRegisterSerialWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return InstanceRegisterSerialWorker.class.hashCode();
+        return 102;
     }
 
     @Override protected void onWork(Instance instance) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ServiceNameRegisterRemoteWorker.java
Patch:
@@ -40,7 +40,7 @@ public ServiceNameRegisterRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceNameRegisterRemoteWorker.class.hashCode();
+        return 10000;
     }
 
     @Override protected void onWork(ServiceName serviceName) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ServiceNameRegisterSerialWorker.java
Patch:
@@ -50,7 +50,7 @@ public ServiceNameRegisterSerialWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceNameRegisterSerialWorker.class.hashCode();
+        return 100;
     }
 
     @Override protected void onWork(ServiceName serviceName) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/global/GlobalTracePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public GlobalTracePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 120;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/instance/InstPerformancePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public InstPerformancePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return InstPerformancePersistenceWorker.class.hashCode();
+        return 118;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeComponentAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public NodeComponentAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeComponentAggregationWorker.class.hashCode();
+        return 104;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<NodeComponent, NodeComponent, NodeComponentAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeComponentPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public NodeComponentPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeComponentPersistenceWorker.class.hashCode();
+        return 111;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeComponentRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class NodeComponentRemoteWorker extends AbstractRemoteWorker<NodeComponen
     }
 
     @Override public int id() {
-        return NodeComponentRemoteWorker.class.hashCode();
+        return 10004;
     }
 
     @Override protected void onWork(NodeComponent nodeComponent) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeMappingAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public NodeMappingAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeMappingAggregationWorker.class.hashCode();
+        return 105;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<NodeMapping, NodeMapping, NodeMappingAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeMappingPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public NodeMappingPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeMappingPersistenceWorker.class.hashCode();
+        return 114;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeMappingRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class NodeMappingRemoteWorker extends AbstractRemoteWorker<NodeMapping, N
     }
 
     @Override public int id() {
-        return NodeMappingRemoteWorker.class.hashCode();
+        return 10007;
     }
 
     @Override protected void onWork(NodeMapping nodeMapping) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/noderef/NodeReferenceAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public NodeReferenceAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeReferenceAggregationWorker.class.hashCode();
+        return 106;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<NodeReference, NodeReference, NodeReferenceAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/noderef/NodeReferencePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public NodeReferencePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 116;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/noderef/NodeReferenceRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class NodeReferenceRemoteWorker extends AbstractRemoteWorker<NodeReferenc
     }
 
     @Override public int id() {
-        return NodeReferenceRemoteWorker.class.hashCode();
+        return 10002;
     }
 
     @Override protected void onWork(NodeReference nodeReference) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/segment/SegmentCostPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public SegmentCostPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return SegmentCostPersistenceWorker.class.hashCode();
+        return 110;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/segment/SegmentPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public SegmentPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 117;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/service/ServiceEntryAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public ServiceEntryAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceEntryAggregationWorker.class.hashCode();
+        return 103;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<ServiceEntry, ServiceEntry, ServiceEntryAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/service/ServiceEntryPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public ServiceEntryPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 121;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/service/ServiceEntryRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public ServiceEntryRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceEntryRemoteWorker.class.hashCode();
+        return 10003;
     }
 
     @Override protected void onWork(ServiceEntry serviceEntry) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/serviceref/ServiceReferenceAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public ServiceReferenceAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceReferenceAggregationWorker.class.hashCode();
+        return 107;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<ServiceReference, ServiceReference, ServiceReferenceAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/serviceref/ServiceReferencePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public ServiceReferencePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 109;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/serviceref/ServiceReferenceRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public ServiceReferenceRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceReferenceRemoteWorker.class.hashCode();
+        return 10005;
     }
 
     @Override protected void onWork(ServiceReference serviceReference) throws WorkerException {

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/BootstrapFlow.java
Patch:
@@ -103,10 +103,12 @@ private void makeSequence() throws CycleDependencyException {
                     if (isAllRequiredModuleStarted) {
                         startupSequence.add(provider);
                         allProviders.remove(i);
+                        i--;
                     }
                 } else {
                     startupSequence.add(provider);
                     allProviders.remove(i);
+                    i--;
                 }
             }
 

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/skywalking/apm/collector/storage/es/DataTTLKeeperTimer.java
Patch:
@@ -19,8 +19,6 @@
 package org.skywalking.apm.collector.storage.es;
 
 import java.util.Calendar;
-import java.util.concurrent.Executors;
-import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.collector.core.module.ModuleManager;
 import org.skywalking.apm.collector.storage.StorageModule;
 import org.skywalking.apm.collector.storage.dao.ICpuMetricPersistenceDAO;
@@ -55,7 +53,8 @@ public DataTTLKeeperTimer(ModuleManager moduleManager,
     }
 
     public void start() {
-        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(this::delete, 1, 8, TimeUnit.HOURS);
+        //TODO: Don't release auto delete feature, yet
+        //Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(this::delete, 1, 8, TimeUnit.HOURS);
     }
 
     private void delete() {

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/skywalking/apm/plugin/jdbc/define/StatementEnhanceInfos.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.plugin.jdbc.mysql.define;
+package org.skywalking.apm.plugin.jdbc.define;
 
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/CreateCallableStatementInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/CreatePreparedStatementInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/CreateStatementInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/StatementExecuteMethodsInterceptor.java
Patch:
@@ -26,7 +26,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/mysql/StatementExecuteMethodsInterceptorTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.skywalking.apm.agent.test.tools.SpanAssert;
 import org.skywalking.apm.agent.test.tools.TracingSegmentRunner;
 import org.skywalking.apm.network.trace.component.ComponentsDefine;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 import static org.hamcrest.CoreMatchers.is;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/match/HierarchyMatch.java
Patch:
@@ -72,7 +72,9 @@ public boolean isMatch(TypeDescription typeDescription) {
             matchHierarchyClass(implInterface, parentTypes);
         }
 
-        matchHierarchyClass(typeDescription.getSuperClass(), parentTypes);
+        if (typeDescription.getSuperClass() != null) {
+            matchHierarchyClass(typeDescription.getSuperClass(), parentTypes);
+        }
 
         if (parentTypes.size() == 0) {
             return true;

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/parser/standardization/SegmentStandardizationWorker.java
Patch:
@@ -42,7 +42,7 @@ public SegmentStandardizationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return SegmentStandardizationWorker.class.hashCode();
+        return 108;
     }
 
     @Override protected void onWork(SegmentStandardization segmentStandardization) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/CpuMetricPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public CpuMetricPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 115;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/GCMetricPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public GCMetricPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 112;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/InstHeartBeatPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public InstHeartBeatPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return InstHeartBeatPersistenceWorker.class.hashCode();
+        return 113;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/MemoryMetricPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public MemoryMetricPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 119;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/MemoryPoolMetricPersistenceWorker.java
Patch:
@@ -33,7 +33,7 @@
 public class MemoryPoolMetricPersistenceWorker extends PersistenceWorker<MemoryPoolMetric, MemoryPoolMetric> {
 
     @Override public int id() {
-        return 0;
+        return 122;
     }
 
     public MemoryPoolMetricPersistenceWorker(ModuleManager moduleManager) {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ApplicationRegisterRemoteWorker.java
Patch:
@@ -40,7 +40,7 @@ public ApplicationRegisterRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ApplicationRegisterRemoteWorker.class.hashCode();
+        return 10006;
     }
 
     @Override protected void onWork(Application message) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ApplicationRegisterSerialWorker.java
Patch:
@@ -50,7 +50,7 @@ public ApplicationRegisterSerialWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ApplicationRegisterSerialWorker.class.hashCode();
+        return 101;
     }
 
     @Override protected void onWork(Application application) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/InstanceRegisterRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class InstanceRegisterRemoteWorker extends AbstractRemoteWorker<Instance,
     private final Logger logger = LoggerFactory.getLogger(InstanceRegisterRemoteWorker.class);
 
     @Override public int id() {
-        return InstanceRegisterRemoteWorker.class.hashCode();
+        return 10001;
     }
 
     InstanceRegisterRemoteWorker(ModuleManager moduleManager) {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/InstanceRegisterSerialWorker.java
Patch:
@@ -48,7 +48,7 @@ public InstanceRegisterSerialWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return InstanceRegisterSerialWorker.class.hashCode();
+        return 102;
     }
 
     @Override protected void onWork(Instance instance) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ServiceNameRegisterRemoteWorker.java
Patch:
@@ -40,7 +40,7 @@ public ServiceNameRegisterRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceNameRegisterRemoteWorker.class.hashCode();
+        return 10000;
     }
 
     @Override protected void onWork(ServiceName serviceName) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ServiceNameRegisterSerialWorker.java
Patch:
@@ -50,7 +50,7 @@ public ServiceNameRegisterSerialWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceNameRegisterSerialWorker.class.hashCode();
+        return 100;
     }
 
     @Override protected void onWork(ServiceName serviceName) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/global/GlobalTracePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public GlobalTracePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 120;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/instance/InstPerformancePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public InstPerformancePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return InstPerformancePersistenceWorker.class.hashCode();
+        return 118;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeComponentAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public NodeComponentAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeComponentAggregationWorker.class.hashCode();
+        return 104;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<NodeComponent, NodeComponent, NodeComponentAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeComponentPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public NodeComponentPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeComponentPersistenceWorker.class.hashCode();
+        return 111;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeComponentRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class NodeComponentRemoteWorker extends AbstractRemoteWorker<NodeComponen
     }
 
     @Override public int id() {
-        return NodeComponentRemoteWorker.class.hashCode();
+        return 10004;
     }
 
     @Override protected void onWork(NodeComponent nodeComponent) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeMappingAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public NodeMappingAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeMappingAggregationWorker.class.hashCode();
+        return 105;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<NodeMapping, NodeMapping, NodeMappingAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeMappingPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public NodeMappingPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeMappingPersistenceWorker.class.hashCode();
+        return 114;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeMappingRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class NodeMappingRemoteWorker extends AbstractRemoteWorker<NodeMapping, N
     }
 
     @Override public int id() {
-        return NodeMappingRemoteWorker.class.hashCode();
+        return 10007;
     }
 
     @Override protected void onWork(NodeMapping nodeMapping) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/noderef/NodeReferenceAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public NodeReferenceAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeReferenceAggregationWorker.class.hashCode();
+        return 106;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<NodeReference, NodeReference, NodeReferenceAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/noderef/NodeReferencePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public NodeReferencePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 116;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/noderef/NodeReferenceRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class NodeReferenceRemoteWorker extends AbstractRemoteWorker<NodeReferenc
     }
 
     @Override public int id() {
-        return NodeReferenceRemoteWorker.class.hashCode();
+        return 10002;
     }
 
     @Override protected void onWork(NodeReference nodeReference) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/segment/SegmentCostPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public SegmentCostPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return SegmentCostPersistenceWorker.class.hashCode();
+        return 110;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/segment/SegmentPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public SegmentPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 117;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/service/ServiceEntryAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public ServiceEntryAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceEntryAggregationWorker.class.hashCode();
+        return 103;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<ServiceEntry, ServiceEntry, ServiceEntryAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/service/ServiceEntryPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public ServiceEntryPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 121;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/service/ServiceEntryRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public ServiceEntryRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceEntryRemoteWorker.class.hashCode();
+        return 10003;
     }
 
     @Override protected void onWork(ServiceEntry serviceEntry) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/serviceref/ServiceReferenceAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public ServiceReferenceAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceReferenceAggregationWorker.class.hashCode();
+        return 107;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<ServiceReference, ServiceReference, ServiceReferenceAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/serviceref/ServiceReferencePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public ServiceReferencePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 109;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/serviceref/ServiceReferenceRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public ServiceReferenceRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceReferenceRemoteWorker.class.hashCode();
+        return 10005;
     }
 
     @Override protected void onWork(ServiceReference serviceReference) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/parser/standardization/SegmentStandardizationWorker.java
Patch:
@@ -42,7 +42,7 @@ public SegmentStandardizationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return SegmentStandardizationWorker.class.hashCode();
+        return 108;
     }
 
     @Override protected void onWork(SegmentStandardization segmentStandardization) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/CpuMetricPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public CpuMetricPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 115;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/GCMetricPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public GCMetricPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 112;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/InstHeartBeatPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public InstHeartBeatPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return InstHeartBeatPersistenceWorker.class.hashCode();
+        return 113;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/MemoryMetricPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public MemoryMetricPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 119;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/jvm/MemoryPoolMetricPersistenceWorker.java
Patch:
@@ -33,7 +33,7 @@
 public class MemoryPoolMetricPersistenceWorker extends PersistenceWorker<MemoryPoolMetric, MemoryPoolMetric> {
 
     @Override public int id() {
-        return 0;
+        return 122;
     }
 
     public MemoryPoolMetricPersistenceWorker(ModuleManager moduleManager) {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ApplicationRegisterRemoteWorker.java
Patch:
@@ -40,7 +40,7 @@ public ApplicationRegisterRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ApplicationRegisterRemoteWorker.class.hashCode();
+        return 10006;
     }
 
     @Override protected void onWork(Application message) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ApplicationRegisterSerialWorker.java
Patch:
@@ -50,7 +50,7 @@ public ApplicationRegisterSerialWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ApplicationRegisterSerialWorker.class.hashCode();
+        return 101;
     }
 
     @Override protected void onWork(Application application) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/InstanceRegisterRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class InstanceRegisterRemoteWorker extends AbstractRemoteWorker<Instance,
     private final Logger logger = LoggerFactory.getLogger(InstanceRegisterRemoteWorker.class);
 
     @Override public int id() {
-        return InstanceRegisterRemoteWorker.class.hashCode();
+        return 10001;
     }
 
     InstanceRegisterRemoteWorker(ModuleManager moduleManager) {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/InstanceRegisterSerialWorker.java
Patch:
@@ -48,7 +48,7 @@ public InstanceRegisterSerialWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return InstanceRegisterSerialWorker.class.hashCode();
+        return 102;
     }
 
     @Override protected void onWork(Instance instance) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ServiceNameRegisterRemoteWorker.java
Patch:
@@ -40,7 +40,7 @@ public ServiceNameRegisterRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceNameRegisterRemoteWorker.class.hashCode();
+        return 10000;
     }
 
     @Override protected void onWork(ServiceName serviceName) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/register/ServiceNameRegisterSerialWorker.java
Patch:
@@ -50,7 +50,7 @@ public ServiceNameRegisterSerialWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceNameRegisterSerialWorker.class.hashCode();
+        return 100;
     }
 
     @Override protected void onWork(ServiceName serviceName) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/global/GlobalTracePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public GlobalTracePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 120;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/instance/InstPerformancePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public InstPerformancePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return InstPerformancePersistenceWorker.class.hashCode();
+        return 118;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeComponentAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public NodeComponentAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeComponentAggregationWorker.class.hashCode();
+        return 104;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<NodeComponent, NodeComponent, NodeComponentAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeComponentPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public NodeComponentPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeComponentPersistenceWorker.class.hashCode();
+        return 111;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeComponentRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class NodeComponentRemoteWorker extends AbstractRemoteWorker<NodeComponen
     }
 
     @Override public int id() {
-        return NodeComponentRemoteWorker.class.hashCode();
+        return 10004;
     }
 
     @Override protected void onWork(NodeComponent nodeComponent) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeMappingAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public NodeMappingAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeMappingAggregationWorker.class.hashCode();
+        return 105;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<NodeMapping, NodeMapping, NodeMappingAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeMappingPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public NodeMappingPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeMappingPersistenceWorker.class.hashCode();
+        return 114;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/node/NodeMappingRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class NodeMappingRemoteWorker extends AbstractRemoteWorker<NodeMapping, N
     }
 
     @Override public int id() {
-        return NodeMappingRemoteWorker.class.hashCode();
+        return 10007;
     }
 
     @Override protected void onWork(NodeMapping nodeMapping) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/noderef/NodeReferenceAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public NodeReferenceAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return NodeReferenceAggregationWorker.class.hashCode();
+        return 106;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<NodeReference, NodeReference, NodeReferenceAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/noderef/NodeReferencePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public NodeReferencePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 116;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/noderef/NodeReferenceRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public class NodeReferenceRemoteWorker extends AbstractRemoteWorker<NodeReferenc
     }
 
     @Override public int id() {
-        return NodeReferenceRemoteWorker.class.hashCode();
+        return 10002;
     }
 
     @Override protected void onWork(NodeReference nodeReference) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/segment/SegmentCostPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public SegmentCostPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return SegmentCostPersistenceWorker.class.hashCode();
+        return 110;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/segment/SegmentPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public SegmentPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 117;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/service/ServiceEntryAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public ServiceEntryAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceEntryAggregationWorker.class.hashCode();
+        return 103;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<ServiceEntry, ServiceEntry, ServiceEntryAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/service/ServiceEntryPersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public ServiceEntryPersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 121;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/service/ServiceEntryRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public ServiceEntryRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceEntryRemoteWorker.class.hashCode();
+        return 10003;
     }
 
     @Override protected void onWork(ServiceEntry serviceEntry) throws WorkerException {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/serviceref/ServiceReferenceAggregationWorker.java
Patch:
@@ -34,7 +34,7 @@ public ServiceReferenceAggregationWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceReferenceAggregationWorker.class.hashCode();
+        return 107;
     }
 
     public static class Factory extends AbstractLocalAsyncWorkerProvider<ServiceReference, ServiceReference, ServiceReferenceAggregationWorker> {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/serviceref/ServiceReferencePersistenceWorker.java
Patch:
@@ -37,7 +37,7 @@ public ServiceReferencePersistenceWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return 0;
+        return 109;
     }
 
     @Override protected boolean needMergeDBData() {

File: apm-collector/apm-collector-agent-stream/collector-agent-stream-provider/src/main/java/org/skywalking/apm/collector/agent/stream/worker/trace/serviceref/ServiceReferenceRemoteWorker.java
Patch:
@@ -36,7 +36,7 @@ public ServiceReferenceRemoteWorker(ModuleManager moduleManager) {
     }
 
     @Override public int id() {
-        return ServiceReferenceRemoteWorker.class.hashCode();
+        return 10005;
     }
 
     @Override protected void onWork(ServiceReference serviceReference) throws WorkerException {

File: apm-network/src/main/java/org/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -85,7 +85,7 @@ public static ComponentsDefine getInstance() {
     }
 
     public ComponentsDefine() {
-        components = new String[25];
+        components = new String[26];
         addComponent(TOMCAT);
         addComponent(HTTPCLIENT);
         addComponent(DUBBO);

File: apm-collector/apm-collector-storage/collector-storage-es-provider/src/main/java/org/skywalking/apm/collector/storage/es/define/ServiceMetricEsTableDefine.java
Patch:
@@ -36,7 +36,6 @@ public ServiceMetricEsTableDefine() {
     }
 
     @Override public void initialize() {
-        addColumn(new ElasticSearchColumnDefine(ServiceMetricTable.COLUMN_AGG, ElasticSearchColumnDefine.Type.Keyword.name()));
         addColumn(new ElasticSearchColumnDefine(ServiceMetricTable.COLUMN_SERVICE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
 
         addColumn(new ElasticSearchColumnDefine(ServiceMetricTable.COLUMN_TRANSACTION_CALLS, ElasticSearchColumnDefine.Type.Long.name()));

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/skywalking/apm/plugin/jdbc/define/StatementEnhanceInfos.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.plugin.jdbc.mysql.define;
+package org.skywalking.apm.plugin.jdbc.define;
 
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/CreateCallableStatementInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/CreatePreparedStatementInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/CreateStatementInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/StatementExecuteMethodsInterceptor.java
Patch:
@@ -26,7 +26,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/mysql/StatementExecuteMethodsInterceptorTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.skywalking.apm.agent.test.tools.SpanAssert;
 import org.skywalking.apm.agent.test.tools.TracingSegmentRunner;
 import org.skywalking.apm.network.trace.component.ComponentsDefine;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 import static org.hamcrest.CoreMatchers.is;

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/BootstrapFlow.java
Patch:
@@ -103,10 +103,12 @@ private void makeSequence() throws CycleDependencyException {
                     if (isAllRequiredModuleStarted) {
                         startupSequence.add(provider);
                         allProviders.remove(i);
+                        i--;
                     }
                 } else {
                     startupSequence.add(provider);
                     allProviders.remove(i);
+                    i--;
                 }
             }
 

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/skywalking/apm/plugin/jdbc/define/StatementEnhanceInfos.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.plugin.jdbc.mysql.define;
+package org.skywalking.apm.plugin.jdbc.define;
 
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/CreateCallableStatementInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/CreatePreparedStatementInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/CreateStatementInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/StatementExecuteMethodsInterceptor.java
Patch:
@@ -26,7 +26,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/mysql/StatementExecuteMethodsInterceptorTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.skywalking.apm.agent.test.tools.SpanAssert;
 import org.skywalking.apm.agent.test.tools.TracingSegmentRunner;
 import org.skywalking.apm.network.trace.component.ComponentsDefine;
-import org.skywalking.apm.plugin.jdbc.mysql.define.StatementEnhanceInfos;
+import org.skywalking.apm.plugin.jdbc.define.StatementEnhanceInfos;
 import org.skywalking.apm.plugin.jdbc.trace.ConnectionInfo;
 
 import static org.hamcrest.CoreMatchers.is;

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/BootstrapFlow.java
Patch:
@@ -103,10 +103,12 @@ private void makeSequence() throws CycleDependencyException {
                     if (isAllRequiredModuleStarted) {
                         startupSequence.add(provider);
                         allProviders.remove(i);
+                        i--;
                     }
                 } else {
                     startupSequence.add(provider);
                     allProviders.remove(i);
+                    i--;
                 }
             }
 

File: apm-sniffer/apm-sdk-plugin/mongodb-2.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v2/MongoDBCollectionMethodInterceptor.java
Patch:
@@ -73,7 +73,6 @@ public class MongoDBCollectionMethodInterceptor implements InstanceMethodsAround
             cresult = aresult.getCommandResult();
         }
         if (null != cresult && !cresult.ok()) {
-            activeSpan.tag("CommandError", cresult.getErrorMessage());
             activeSpan.log(cresult.getException());
         }
         ContextManager.stopSpan();

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -76,7 +76,7 @@ public static class Collector {
         /**
          * Collector service discovery REST service name
          */
-        public static String DISCOVERY_SERVICE_NAME = "/agentstream/grpc";
+        public static String DISCOVERY_SERVICE_NAME = "/agent/gRPC";
     }
 
     public static class Jvm {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -76,7 +76,7 @@ public static class Collector {
         /**
          * Collector service discovery REST service name
          */
-        public static String DISCOVERY_SERVICE_NAME = "/agentstream/grpc";
+        public static String DISCOVERY_SERVICE_NAME = "/agent/gRPC";
     }
 
     public static class Jvm {

File: apm-sniffer/apm-sdk-plugin/elastic-job-2.x-plugin/src/test/java/org/skywalking/apm/plugin/esjob/JobExecutorInterceptorTest.java
Patch:
@@ -67,7 +67,7 @@ public void assertSuccess() throws Throwable {
         assertNotNull(spans);
         assertThat(spans.size(), is(1));
         assertThat(spans.get(0).transform().getOperationName(), is("fooJob-test"));
-        assertThat(spans.get(0).transform().getComponentId(), is(23));
+        assertThat(spans.get(0).transform().getComponentId(), is(24));
         assertThat(spans.get(0).transform().getTags(0).getKey(), is("sharding_context"));
         assertThat(spans.get(0).transform().getTags(0).getValue(), is("ShardingContext(jobName=fooJob, taskId=fooJob1, shardingTotalCount=2, jobParameter=, shardingItem=1, shardingParameter=test)"));
     }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/RestRequestInterceptor.java
Patch:
@@ -16,14 +16,15 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.springframework.http.client;
+package org.skywalking.apm.plugin.spring.resttemplate.async;
 
 import java.lang.reflect.Method;
 import org.skywalking.apm.agent.core.context.CarrierItem;
 import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
+import org.springframework.http.client.AsyncClientHttpRequest;
 
 public class RestRequestInterceptor implements InstanceMethodsAroundInterceptor {
 
@@ -36,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
-        AbstractAsyncClientHttpRequest clientHttpRequest = (AbstractAsyncClientHttpRequest)ret;
+        AsyncClientHttpRequest clientHttpRequest = (AsyncClientHttpRequest)ret;
         if (ret != null) {
             Object[] cacheValues = (Object[])objInst.getSkyWalkingDynamicField();
             ContextCarrier contextCarrier = (ContextCarrier)cacheValues[1];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/define/RestTemplateInstrumentation.java
Patch:
@@ -47,7 +47,7 @@ public class RestTemplateInstrumentation extends ClassInstanceMethodsEnhancePlug
     private static final String DO_EXECUTE_METHOD_NAME = "doExecute";
     private static final String DO_EXECUTE_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.RestExecuteInterceptor";
     private static final String CREATE_REQUEST_METHOD_NAME = "createAsyncRequest";
-    private static final String CREATE_REQUEST_INTERCEPTOR = "org.springframework.http.client.RestRequestInterceptor";
+    private static final String CREATE_REQUEST_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.RestRequestInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/RestRequestInterceptor.java
Patch:
@@ -16,14 +16,15 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.springframework.http.client;
+package org.skywalking.apm.plugin.spring.resttemplate.async;
 
 import java.lang.reflect.Method;
 import org.skywalking.apm.agent.core.context.CarrierItem;
 import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
+import org.springframework.http.client.AsyncClientHttpRequest;
 
 public class RestRequestInterceptor implements InstanceMethodsAroundInterceptor {
 
@@ -36,7 +37,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
-        AbstractAsyncClientHttpRequest clientHttpRequest = (AbstractAsyncClientHttpRequest)ret;
+        AsyncClientHttpRequest clientHttpRequest = (AsyncClientHttpRequest)ret;
         if (ret != null) {
             Object[] cacheValues = (Object[])objInst.getSkyWalkingDynamicField();
             ContextCarrier contextCarrier = (ContextCarrier)cacheValues[1];

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/define/RestTemplateInstrumentation.java
Patch:
@@ -47,7 +47,7 @@ public class RestTemplateInstrumentation extends ClassInstanceMethodsEnhancePlug
     private static final String DO_EXECUTE_METHOD_NAME = "doExecute";
     private static final String DO_EXECUTE_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.RestExecuteInterceptor";
     private static final String CREATE_REQUEST_METHOD_NAME = "createAsyncRequest";
-    private static final String CREATE_REQUEST_INTERCEPTOR = "org.springframework.http.client.RestRequestInterceptor";
+    private static final String CREATE_REQUEST_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.RestRequestInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java
Patch:
@@ -60,6 +60,7 @@ public void parseExit(SpanDecorator spanDecorator, int applicationId, int applic
         }
 
         nodeComponent.setPeerId(spanDecorator.getPeerId());
+        nodeComponent.setPeer(Const.EMPTY_STRING);
         id = id + Const.ID_SPLIT + nodeComponent.getPeerId();
         nodeComponent.setId(id);
         nodeComponents.add(nodeComponent);
@@ -81,6 +82,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli
         }
 
         nodeComponent.setPeerId(applicationId);
+        nodeComponent.setPeer(Const.EMPTY_STRING);
         id = id + Const.ID_SPLIT + String.valueOf(applicationId);
         nodeComponent.setId(id);
 

File: apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java
Patch:
@@ -51,6 +51,7 @@ public class NodeMappingSpanListener implements RefsListener, FirstSpanListener
         NodeMappingDataDefine.NodeMapping nodeMapping = new NodeMappingDataDefine.NodeMapping();
         nodeMapping.setApplicationId(applicationId);
         nodeMapping.setAddressId(referenceDecorator.getNetworkAddressId());
+        nodeMapping.setAddress(Const.EMPTY_STRING);
         String id = String.valueOf(applicationId) + Const.ID_SPLIT + String.valueOf(nodeMapping.getAddressId());
         nodeMapping.setId(id);
         nodeMappings.add(nodeMapping);

File: apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java
Patch:
@@ -53,6 +53,7 @@ public void parseExit(SpanDecorator spanDecorator, int applicationId, int applic
         NodeReferenceDataDefine.NodeReference nodeReference = new NodeReferenceDataDefine.NodeReference();
         nodeReference.setFrontApplicationId(applicationId);
         nodeReference.setBehindApplicationId(spanDecorator.getPeerId());
+        nodeReference.setBehindPeer(Const.EMPTY_STRING);
         nodeReference.setTimeBucket(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(spanDecorator.getStartTime()));
 
         StringBuilder idBuilder = new StringBuilder();
@@ -79,6 +80,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli
             NodeReferenceDataDefine.NodeReference nodeReference = new NodeReferenceDataDefine.NodeReference();
             nodeReference.setFrontApplicationId(Const.USER_ID);
             nodeReference.setBehindApplicationId(applicationId);
+            nodeReference.setBehindPeer(Const.EMPTY_STRING);
             nodeReference.setTimeBucket(TimeBucketUtils.INSTANCE.getMinuteTimeBucket(spanDecorator.getStartTime()));
 
             String idBuilder = String.valueOf(nodeReference.getTimeBucket()) + Const.ID_SPLIT + nodeReference.getFrontApplicationId() +
@@ -96,6 +98,7 @@ public void parseEntry(SpanDecorator spanDecorator, int applicationId, int appli
         NodeReferenceDataDefine.NodeReference referenceSum = new NodeReferenceDataDefine.NodeReference();
         referenceSum.setFrontApplicationId(parentApplicationId);
         referenceSum.setBehindApplicationId(applicationId);
+        referenceSum.setBehindPeer(Const.EMPTY_STRING);
         references.add(referenceSum);
     }
 

File: apm-collector-3.2.3/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/ServiceReferenceSpanListener.java
Patch:
@@ -127,12 +127,15 @@ private void sendToAggregationWorker(StreamModuleContext context,
 
         idBuilder.append(entryServiceId).append(Const.ID_SPLIT);
         serviceReference.setEntryServiceId(entryServiceId);
+        serviceReference.setEntryServiceName(Const.EMPTY_STRING);
 
         idBuilder.append(frontServiceId).append(Const.ID_SPLIT);
         serviceReference.setFrontServiceId(frontServiceId);
+        serviceReference.setFrontServiceName(Const.EMPTY_STRING);
 
         idBuilder.append(behindServiceId);
         serviceReference.setBehindServiceId(behindServiceId);
+        serviceReference.setBehindServiceName(Const.EMPTY_STRING);
 
         serviceReference.setId(idBuilder.toString());
         serviceReference.setTimeBucket(timeBucket);

File: apm-collector/apm-collector-agent/collector-agent-stream/src/main/java/org/skywalking/apm/collector/agent/stream/parser/SpanListener.java
Patch:
@@ -16,10 +16,11 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.dao;
+package org.skywalking.apm.collector.agent.stream.parser;
 
 /**
  * @author peng-yongsheng
  */
-public interface IInstPerformanceDAO {
+public interface SpanListener {
+    void build();
 }

File: apm-collector/apm-collector-component/server-component/src/main/java/org/skywalking/apm/collector/server/jetty/JettyServer.java
Patch:
@@ -73,6 +73,7 @@ public JettyServer(String host, int port, String contextPath) {
     }
 
     @Override public void start() throws ServerException {
+        logger.info("start server, host: {}, port: {}", host, port);
         try {
             for (ServletMapping servletMapping : servletContextHandler.getServletHandler().getServletMappings()) {
                 logger.info("jetty servlet mappings: {} register by {}", servletMapping.getPathSpecs(), servletMapping.getServletName());

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/Attribute.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define;
+package org.skywalking.apm.collector.core.data;
 
 /**
  * @author peng-yongsheng

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/AttributeType.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define;
+package org.skywalking.apm.collector.core.data;
 
 /**
  * @author peng-yongsheng

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/ColumnDefine.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define;
+package org.skywalking.apm.collector.core.data;
 
 /**
  * @author peng-yongsheng

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/CommonTable.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define;
+package org.skywalking.apm.collector.core.data;
 
 /**
  * @author peng-yongsheng

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/Operation.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define;
+package org.skywalking.apm.collector.core.data;
 
 /**
  * @author peng-yongsheng

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/StorageDefineLoader.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define;
+package org.skywalking.apm.collector.core.data;
 
 import java.util.LinkedList;
 import java.util.List;

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/StorageDefinitionFile.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define;
+package org.skywalking.apm.collector.core.data;
 
 import org.skywalking.apm.collector.core.define.DefinitionFile;
 

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/TableDefine.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define;
+package org.skywalking.apm.collector.core.data;
 
 import java.util.LinkedList;
 import java.util.List;

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/operator/AddOperation.java
Patch:
@@ -16,9 +16,9 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define.operator;
+package org.skywalking.apm.collector.core.data.operator;
 
-import org.skywalking.apm.collector.storage.base.define.Operation;
+import org.skywalking.apm.collector.core.data.Operation;
 
 /**
  * @author peng-yongsheng

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/operator/CoverOperation.java
Patch:
@@ -16,9 +16,9 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define.operator;
+package org.skywalking.apm.collector.core.data.operator;
 
-import org.skywalking.apm.collector.storage.base.define.Operation;
+import org.skywalking.apm.collector.core.data.Operation;
 
 /**
  * @author peng-yongsheng

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/data/operator/NonOperation.java
Patch:
@@ -16,9 +16,9 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.base.define.operator;
+package org.skywalking.apm.collector.core.data.operator;
 
-import org.skywalking.apm.collector.storage.base.define.Operation;
+import org.skywalking.apm.collector.core.data.Operation;
 
 /**
  * @author peng-yongsheng

File: apm-collector/apm-collector-core/src/test/java/org/skywalking/apm/collector/core/module/ModuleAProvider.java
Patch:
@@ -34,10 +34,10 @@ public class ModuleAProvider extends ModuleProvider {
 
     @Override public void prepare(Properties config) throws ServiceNotProvidedException {
         this.registerServiceImplementation(BaseModuleA.ServiceABusiness1.class, new ModuleABusiness1Impl());
+        this.registerServiceImplementation(BaseModuleA.ServiceABusiness2.class, new ModuleABusiness2Impl());
     }
 
     @Override public void start(Properties config) throws ServiceNotProvidedException {
-        this.registerServiceImplementation(BaseModuleA.ServiceABusiness2.class, new ModuleABusiness2Impl());
     }
 
     @Override public void notifyAfterCompleted() throws ServiceNotProvidedException {

File: apm-collector/apm-collector-core/src/test/java/org/skywalking/apm/collector/core/module/ModuleBProvider.java
Patch:
@@ -34,10 +34,10 @@ public class ModuleBProvider extends ModuleProvider {
 
     @Override public void prepare(Properties config) throws ServiceNotProvidedException {
         this.registerServiceImplementation(BaseModuleB.ServiceBBusiness1.class, new ModuleBBusiness1Impl());
+        this.registerServiceImplementation(BaseModuleB.ServiceBBusiness2.class, new ModuleBBusiness2Impl());
     }
 
     @Override public void start(Properties config) throws ServiceNotProvidedException {
-        this.registerServiceImplementation(BaseModuleB.ServiceBBusiness2.class, new ModuleBBusiness2Impl());
     }
 
     @Override public void notifyAfterCompleted() throws ServiceNotProvidedException {

File: apm-collector/apm-collector-grpc-manager/collector-grpc-manager-define/src/main/java/org/skywalking/apm/collector/grpc/manager/service/GRPCManagerService.java
Patch:
@@ -25,5 +25,5 @@
  * @author peng-yongsheng
  */
 public interface GRPCManagerService extends Service {
-    Server getOrCreateIfAbsent(String host, int port);
+    Server createIfAbsent(String host, int port);
 }

File: apm-collector/apm-collector-grpc-manager/collector-grpc-manager-provider/src/main/java/org/skywalking/apm/collector/grpc/manager/service/GRPCManagerServiceImpl.java
Patch:
@@ -38,7 +38,7 @@ public GRPCManagerServiceImpl(Map<String, GRPCServer> servers) {
         this.servers = servers;
     }
 
-    @Override public Server getOrCreateIfAbsent(String host, int port) {
+    @Override public Server createIfAbsent(String host, int port) {
         String id = host + String.valueOf(port);
         if (servers.containsKey(id)) {
             return servers.get(id);

File: apm-collector/apm-collector-instrument/src/main/java/org/skywalking/apm/collector/instrument/MetricCollector.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.core.module.instrument;
+package org.skywalking.apm.collector.instrument;
 
 import java.lang.reflect.Method;
 import java.util.HashMap;

File: apm-collector/apm-collector-instrument/src/main/java/org/skywalking/apm/collector/instrument/ServiceInstrumentation.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.core.module.instrument;
+package org.skywalking.apm.collector.instrument;
 
 import net.bytebuddy.ByteBuddy;
 import net.bytebuddy.description.method.MethodDescription;

File: apm-collector/apm-collector-instrument/src/main/java/org/skywalking/apm/collector/instrument/ServiceMetricTracing.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.core.module.instrument;
+package org.skywalking.apm.collector.instrument;
 
 import java.lang.reflect.Method;
 import java.util.concurrent.Callable;

File: apm-collector/apm-collector-remote/collector-remote-define/src/main/java/org/skywalking/apm/collector/remote/RemoteModule.java
Patch:
@@ -19,7 +19,7 @@
 package org.skywalking.apm.collector.remote;
 
 import org.skywalking.apm.collector.core.module.Module;
-import org.skywalking.apm.collector.remote.service.RemoteClientService;
+import org.skywalking.apm.collector.remote.service.RemoteSenderService;
 import org.skywalking.apm.collector.remote.service.RemoteServerService;
 
 /**
@@ -34,6 +34,6 @@ public class RemoteModule extends Module {
     }
 
     @Override public Class[] services() {
-        return new Class[] {RemoteServerService.class, RemoteClientService.class};
+        return new Class[] {RemoteServerService.class, RemoteSenderService.class};
     }
 }

File: apm-collector/apm-collector-remote/collector-remote-define/src/main/java/org/skywalking/apm/collector/remote/RoutingRule.java
Patch:
@@ -16,10 +16,11 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.dao;
+package org.skywalking.apm.collector.remote;
 
 /**
  * @author peng-yongsheng
  */
-public interface IGlobalTraceDAO {
+public enum RoutingRule {
+    HashCode, ForeverFirst
 }

File: apm-collector/apm-collector-remote/collector-remote-define/src/main/java/org/skywalking/apm/collector/remote/service/Selector.java
Patch:
@@ -16,10 +16,11 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.dao;
+package org.skywalking.apm.collector.remote.service;
 
 /**
  * @author peng-yongsheng
  */
-public interface IGCMetricDAO {
+public enum Selector {
+    HashCode, Rolling, ForeverFirst
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/skywalking/apm/collector/storage/StorageInstaller.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.List;
 import org.skywalking.apm.collector.client.Client;
 import org.skywalking.apm.collector.core.define.DefineException;
-import org.skywalking.apm.collector.storage.base.define.StorageDefineLoader;
-import org.skywalking.apm.collector.storage.base.define.TableDefine;
+import org.skywalking.apm.collector.core.data.StorageDefineLoader;
+import org.skywalking.apm.collector.core.data.TableDefine;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/skywalking/apm/collector/storage/StorageModule.java
Patch:
@@ -19,6 +19,7 @@
 package org.skywalking.apm.collector.storage;
 
 import org.skywalking.apm.collector.core.module.Module;
+import org.skywalking.apm.collector.storage.service.DAOService;
 
 /**
  * @author peng-yongsheng
@@ -32,6 +33,6 @@ public class StorageModule extends Module {
     }
 
     @Override public Class[] services() {
-        return new Class[0];
+        return new Class[] {DAOService.class};
     }
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/skywalking/apm/collector/storage/base/dao/IBatchDAO.java
Patch:
@@ -23,6 +23,6 @@
 /**
  * @author peng-yongsheng
  */
-public interface IBatchDAO {
+public interface IBatchDAO extends DAO {
     void batchPersistence(List<?> batchCollection);
 }

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/skywalking/apm/collector/storage/base/sql/SqlBuilder.java
Patch:
@@ -16,7 +16,7 @@
  * Project repository: https://github.com/OpenSkywalking/skywalking
  */
 
-package org.skywalking.apm.collector.storage.sql;
+package org.skywalking.apm.collector.storage.base.sql;
 
 import java.text.MessageFormat;
 import java.util.List;

File: apm-collector/apm-collector-storage/collector-storage-define/src/main/java/org/skywalking/apm/collector/storage/dao/IApplicationCacheDAO.java
Patch:
@@ -18,10 +18,12 @@
 
 package org.skywalking.apm.collector.storage.dao;
 
+import org.skywalking.apm.collector.storage.base.dao.DAO;
+
 /**
  * @author peng-yongsheng
  */
-public interface IApplicationCacheDAO {
+public interface IApplicationCacheDAO extends DAO {
     int getApplicationId(String applicationCode);
 
     String getApplicationCode(int applicationId);

File: apm-collector/apm-collector-instrument/src/main/java/org/skywalking/apm/collector/instrument/ServiceInstrumentation.java
Patch:
@@ -22,7 +22,6 @@
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.implementation.MethodDelegation;
 import net.bytebuddy.matcher.ElementMatcher;
-import net.bytebuddy.matcher.ElementMatchers;
 import org.skywalking.apm.collector.core.module.Service;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/skywalking/apm/collector/cache/guava/service/InstanceCacheGuavaService.java
Patch:
@@ -33,7 +33,7 @@ public class InstanceCacheGuavaService implements InstanceCacheService {
 
     private final Logger logger = LoggerFactory.getLogger(InstanceCacheGuavaService.class);
 
-    private final Cache<Integer, Integer> INSTANCE_CACHE = CacheBuilder.newBuilder().initialCapacity(100).maximumSize(5000).build();
+    private final Cache<Integer, Integer> integerCache = CacheBuilder.newBuilder().initialCapacity(100).maximumSize(5000).build();
 
     private final DAOService daoService;
 
@@ -46,15 +46,15 @@ public int get(int applicationInstanceId) {
 
         int applicationId = 0;
         try {
-            applicationId = INSTANCE_CACHE.get(applicationInstanceId, () -> dao.getApplicationId(applicationInstanceId));
+            applicationId = integerCache.get(applicationInstanceId, () -> dao.getApplicationId(applicationInstanceId));
         } catch (Throwable e) {
             logger.error(e.getMessage(), e);
         }
 
         if (applicationId == 0) {
             applicationId = dao.getApplicationId(applicationInstanceId);
             if (applicationId != 0) {
-                INSTANCE_CACHE.put(applicationInstanceId, applicationId);
+                integerCache.put(applicationInstanceId, applicationId);
             }
         }
         return applicationId;

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/skywalking/apm/collector/cache/guava/service/ServiceIdCacheGuavaService.java
Patch:
@@ -34,7 +34,7 @@ public class ServiceIdCacheGuavaService implements ServiceIdCacheService {
 
     private final Logger logger = LoggerFactory.getLogger(ServiceIdCacheGuavaService.class);
 
-    private final Cache<String, Integer> SERVICE_CACHE = CacheBuilder.newBuilder().maximumSize(1000).build();
+    private final Cache<String, Integer> serviceIdCache = CacheBuilder.newBuilder().maximumSize(1000).build();
 
     private final DAOService daoService;
 
@@ -47,15 +47,15 @@ public int get(int applicationId, String serviceName) {
 
         int serviceId = 0;
         try {
-            serviceId = SERVICE_CACHE.get(applicationId + Const.ID_SPLIT + serviceName, () -> dao.getServiceId(applicationId, serviceName));
+            serviceId = serviceIdCache.get(applicationId + Const.ID_SPLIT + serviceName, () -> dao.getServiceId(applicationId, serviceName));
         } catch (Throwable e) {
             logger.error(e.getMessage(), e);
         }
 
         if (serviceId == 0) {
             serviceId = dao.getServiceId(applicationId, serviceName);
             if (serviceId != 0) {
-                SERVICE_CACHE.put(applicationId + Const.ID_SPLIT + serviceName, serviceId);
+                serviceIdCache.put(applicationId + Const.ID_SPLIT + serviceName, serviceId);
             }
         }
         return serviceId;

File: apm-collector/apm-collector-cache/collector-cache-guava-provider/src/main/java/org/skywalking/apm/collector/cache/guava/service/ServiceNameCacheGuavaService.java
Patch:
@@ -35,7 +35,7 @@ public class ServiceNameCacheGuavaService implements ServiceNameCacheService {
 
     private final Logger logger = LoggerFactory.getLogger(ServiceNameCacheGuavaService.class);
 
-    private final Cache<Integer, String> CACHE = CacheBuilder.newBuilder().maximumSize(10000).build();
+    private final Cache<Integer, String> serviceNameCache = CacheBuilder.newBuilder().maximumSize(10000).build();
 
     private final DAOService daoService;
 
@@ -48,15 +48,15 @@ public String get(int serviceId) {
 
         String serviceName = Const.EMPTY_STRING;
         try {
-            serviceName = CACHE.get(serviceId, () -> dao.getServiceName(serviceId));
+            serviceName = serviceNameCache.get(serviceId, () -> dao.getServiceName(serviceId));
         } catch (Throwable e) {
             logger.error(e.getMessage(), e);
         }
 
         if (StringUtils.isEmpty(serviceName)) {
             serviceName = dao.getServiceName(serviceId);
             if (StringUtils.isNotEmpty(serviceName)) {
-                CACHE.put(serviceId, serviceName);
+                serviceNameCache.put(serviceId, serviceName);
             }
         }
 

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/graph/Graph.java
Patch:
@@ -32,8 +32,8 @@ public final class Graph<INPUT> {
         this.id = id;
     }
 
-    public void start(INPUT INPUT) {
-        entryWay.in(INPUT);
+    public void start(INPUT input) {
+        entryWay.in(input);
     }
 
     public <OUTPUT> Node<INPUT, OUTPUT> addNode(NodeProcessor<INPUT, OUTPUT> nodeProcessor) {
@@ -53,7 +53,7 @@ void checkForNewNode(Node node) {
         if (nodeIndex.containsKey(nodeId)) {
             throw new PotentialCyclicGraphException("handler="
                 + node.getHandler().getClass().getName()
-                + " already exists in graph[" + id + "】");
+                + " already exists in graph[" + id + "]");
         }
         nodeIndex.put(nodeId, node);
     }

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/graph/GraphManager.java
Patch:
@@ -35,7 +35,7 @@ public enum GraphManager {
      * @param graphId represents a graph, which is used for finding it.
      * @return
      */
-    public synchronized <Input> Graph<Input> createIfAbsent(int graphId, Class<Input> input) {
+    public synchronized <INPUT> Graph<INPUT> createIfAbsent(int graphId, Class<INPUT> input) {
         if (!allGraphs.containsKey(graphId)) {
             Graph graph = new Graph(graphId);
             allGraphs.put(graphId, graph);

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/graph/GraphNodeFinder.java
Patch:
@@ -35,10 +35,10 @@ public class GraphNodeFinder {
      *
      * @param handlerId of specific node in graph.
      * @param outputClass of the found node
-     * @param <NODE_OUTPUT> type of given output class
+     * @param <NODEOUTPUT> type of given output class
      * @return Node instance.
      */
-    public <NODE_OUTPUT> Node<?, NODE_OUTPUT> findNode(int handlerId, Class<NODE_OUTPUT> outputClass) {
+    public <NODEOUTPUT> Node<?, NODEOUTPUT> findNode(int handlerId, Class<NODEOUTPUT> outputClass) {
         ConcurrentHashMap<Integer, Node> graphNodeIndex = graph.getNodeIndex();
         Node node = graphNodeIndex.get(handlerId);
         if (node == null) {

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/graph/Next.java
Patch:
@@ -42,9 +42,9 @@ final void addWay(WayToNode way) {
     /**
      * Drive to the next nodes
      *
-     * @param INPUT
+     * @param input
      */
-    @Override public void execute(INPUT INPUT) {
-        ways.forEach(way -> way.in(INPUT));
+    @Override public void execute(INPUT input) {
+        ways.forEach(way -> way.in(input));
     }
 }

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/graph/Node.java
Patch:
@@ -47,8 +47,8 @@ public final <NEXTOUTPUT> Node<OUTPUT, NEXTOUTPUT> addNext(WayToNode<OUTPUT, NEX
         }
     }
 
-    final void execute(INPUT INPUT) {
-        nodeProcessor.process(INPUT, next);
+    final void execute(INPUT input) {
+        nodeProcessor.process(input, next);
     }
 
     NodeProcessor getHandler() {

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/graph/NodeProcessor.java
Patch:
@@ -21,13 +21,13 @@
 /**
  * @author peng-yongsheng, wu-sheng
  */
-public interface NodeProcessor<INPUT, OUTPUT> {
+public interface NodeProcessor<input, output> {
     /**
      * The unique id in the certain graph.
      *
      * @return id
      */
     int id();
 
-    void process(INPUT INPUT, Next<OUTPUT> next);
+    void process(input input, Next<output> next);
 }

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/graph/WayToNode.java
Patch:
@@ -33,10 +33,10 @@ void buildDestination(Graph graph) {
         destination = new Node(graph, destinationHandler);
     }
 
-    protected abstract void in(INPUT INPUT);
+    protected abstract void in(INPUT input);
 
-    protected void out(INPUT INPUT) {
-        destination.execute(INPUT);
+    protected void out(INPUT input) {
+        destination.execute(input);
     }
 
     Node getDestination() {

File: apm-collector/apm-collector-core/src/test/java/org/skywalking/apm/collector/core/graph/Node1Processor.java
Patch:
@@ -21,13 +21,13 @@
 /**
  * @author wusheng
  */
-public class Node1Processor implements NodeProcessor<String, String> {
+public class Node1Processor extends OutputProcessor implements NodeProcessor<String, String> {
     @Override public int id() {
         return 1;
     }
 
     @Override public void process(String s, Next<String> next) {
-        System.out.println("Node1 process: s=" + s);
+        outstream().println("Node1 process: s=" + s);
         next.execute(s);
     }
 }

File: apm-collector/apm-collector-core/src/test/java/org/skywalking/apm/collector/core/graph/Node2Processor.java
Patch:
@@ -21,13 +21,13 @@
 /**
  * @author wusheng
  */
-public class Node2Processor implements NodeProcessor<String, Integer> {
+public class Node2Processor extends OutputProcessor implements NodeProcessor<String, Integer> {
     @Override public int id() {
         return 2;
     }
 
     @Override public void process(String s, Next<Integer> next) {
-        System.out.println("Node2 process: s=" + s);
+        outstream().println("Node2 process: s=" + s);
         next.execute(123);
     }
 }

File: apm-collector/apm-collector-core/src/test/java/org/skywalking/apm/collector/core/graph/Node3Processor.java
Patch:
@@ -21,14 +21,14 @@
 /**
  * @author wusheng
  */
-public class Node3Processor implements NodeProcessor<Long, Long> {
+public class Node3Processor extends OutputProcessor  implements NodeProcessor<Long, Long> {
     @Override public int id() {
         return 3;
     }
 
     @Override
     public void process(Long aLong, Next<Long> next) {
-        System.out.println("Node3 process: long=" + aLong);
+        outstream().println("Node3 process: long=" + aLong);
         next.execute(aLong);
     }
 }

File: apm-collector/apm-collector-core/src/test/java/org/skywalking/apm/collector/core/graph/Node4Processor.java
Patch:
@@ -21,14 +21,14 @@
 /**
  * @author wusheng
  */
-public class Node4Processor implements NodeProcessor<Integer, Long> {
+public class Node4Processor extends OutputProcessor implements NodeProcessor<Integer, Long> {
     @Override public int id() {
         return 4;
     }
 
     @Override
     public void process(Integer in, Next<Long> next) {
-        System.out.println("Node4 process: int=" + in);
+        outstream().println("Node4 process: int=" + in);
         next.execute(new Long(in.intValue()));
     }
 }

File: apm-collector/apm-collector-stream/collector-stream-provider/src/main/java/org/skywalking/apm/collector/stream/worker/base/AbstractLocalAsyncWorkerProvider.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author peng-yongsheng
  */
-public abstract class AbstractLocalAsyncWorkerProvider<INPUT extends Data, OUTPUT extends Data, WorkerType extends AbstractLocalAsyncWorker<INPUT, OUTPUT> & QueueExecutor<INPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WorkerType> {
+public abstract class AbstractLocalAsyncWorkerProvider<INPUT extends Data, OUTPUT extends Data, WORKER_TYPE extends AbstractLocalAsyncWorker<INPUT, OUTPUT> & QueueExecutor<INPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
 
     public abstract int queueSize();
 
@@ -41,7 +41,7 @@ public AbstractLocalAsyncWorkerProvider(DAOService daoService, QueueCreatorServi
 
     @Override
     final public WorkerRef create(WorkerCreateListener workerCreateListener) throws ProviderNotFoundException {
-        WorkerType localAsyncWorker = workerInstance(daoService);
+        WORKER_TYPE localAsyncWorker = workerInstance(daoService);
         workerCreateListener.addWorker(localAsyncWorker);
         QueueEventHandler<INPUT> queueEventHandler = queueCreatorService.create(queueSize(), localAsyncWorker);
         return new LocalAsyncWorkerRef<>(localAsyncWorker, queueEventHandler);

File: apm-collector/apm-collector-stream/collector-stream-provider/src/main/java/org/skywalking/apm/collector/stream/worker/base/AbstractRemoteWorkerProvider.java
Patch:
@@ -30,7 +30,7 @@
  * @author peng-yongsheng
  * @since v3.0-2017
  */
-public abstract class AbstractRemoteWorkerProvider<INPUT extends Data, OUTPUT extends Data, WorkerType extends AbstractRemoteWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WorkerType> {
+public abstract class AbstractRemoteWorkerProvider<INPUT extends Data, OUTPUT extends Data, WORKER_TYPE extends AbstractRemoteWorker<INPUT, OUTPUT>> extends AbstractWorkerProvider<INPUT, OUTPUT, WORKER_TYPE> {
 
     private final DAOService daoService;
     private final RemoteClientService remoteClientService;
@@ -48,7 +48,7 @@ public AbstractRemoteWorkerProvider(DAOService daoService, RemoteClientService r
      * worker instance, when the worker provider not find then Throw this Exception.
      */
     @Override final public WorkerRef create(WorkerCreateListener workerCreateListener) {
-        WorkerType remoteWorker = workerInstance(daoService);
+        WORKER_TYPE remoteWorker = workerInstance(daoService);
         workerCreateListener.addWorker(remoteWorker);
         RemoteWorkerRef<INPUT, OUTPUT> workerRef = new RemoteWorkerRef<>(remoteWorker);
         return workerRef;

File: apm-collector/apm-collector-stream/collector-stream-provider/src/main/java/org/skywalking/apm/collector/stream/worker/base/AbstractWorker.java
Patch:
@@ -41,10 +41,10 @@ public abstract class AbstractWorker<INPUT extends Data, OUTPUT extends Data> im
      */
     protected abstract void onWork(INPUT message) throws WorkerException;
 
-    @Override public final void process(INPUT INPUT, Next<OUTPUT> next) {
+    @Override public final void process(INPUT input, Next<OUTPUT> next) {
         this.next = next;
         try {
-            onWork(INPUT);
+            onWork(input);
         } catch (WorkerException e) {
             logger.error(e.getMessage(), e);
         }

File: apm-collector/apm-collector-stream/collector-stream-provider/src/main/java/org/skywalking/apm/collector/stream/worker/base/AbstractWorkerProvider.java
Patch:
@@ -24,6 +24,6 @@
 /**
  * @author peng-yongsheng
  */
-public abstract class AbstractWorkerProvider<INPUT extends Data, OUTPUT extends Data, WorkerType extends AbstractWorker<INPUT, OUTPUT>> implements Provider {
-    public abstract WorkerType workerInstance(DAOService daoService);
+public abstract class AbstractWorkerProvider<INPUT extends Data, OUTPUT extends Data, WORKER_TYPE extends AbstractWorker<INPUT, OUTPUT>> implements Provider {
+    public abstract WORKER_TYPE workerInstance(DAOService daoService);
 }

File: apm-collector/apm-collector-stream/collector-stream-provider/src/main/java/org/skywalking/apm/collector/stream/worker/base/RemoteWorkerRef.java
Patch:
@@ -61,8 +61,8 @@ public RemoteWorkerRef(AbstractRemoteWorker<INPUT, OUTPUT> remoteWorker, RemoteC
         }
     }
 
-    @Override protected void out(INPUT INPUT) {
-        super.out(INPUT);
+    @Override protected void out(INPUT input) {
+        super.out(input);
     }
 
     private Boolean isAcrossJVM() {

File: apm-sniffer/apm-sdk-plugin/postgresql-8.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/postgresql/define/Jdbc3ConnectionInstrumentation.java
Patch:
@@ -41,8 +41,8 @@
 import static org.skywalking.apm.plugin.jdbc.define.Constants.SERVICE_METHOD_INTERCEPT_CLASS;
 
 /**
- * {@link ConnectionInstrumentation} intercept the following methods that the class which extend {@link
- * org.postgresql.jdbc.PgConnection}. <br/>
+ * {@link Jdbc3ConnectionInstrumentation} intercept the following methods that the class which extend {@link
+ * org.postgresql.jdbc3.Jdbc3Connection}. <br/>
  *
  * 1. Enhance <code>prepareStatement</code> by <code>org.skywalking.apm.plugin.jdbc.define.JDBCPrepareStatementInterceptor</code>
  * 2. Enhance <code>prepareCall</code> by

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/graph/NodeHandler.java
Patch:
@@ -21,13 +21,13 @@
 /**
  * @author peng-yongsheng, wu-sheng
  */
-public interface NodeHandler<Input, Output> {
+public interface NodeHandler<INPUT, OUTPUT> {
     /**
      * The unique id in the certain graph.
      *
      * @return id
      */
     int id();
 
-    void process(Input input, Next<Output> next);
+    void process(INPUT INPUT, Next<OUTPUT> next);
 }

File: apm-sniffer/apm-sdk-plugin/mysql-5.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/define/DriverInstrumentation.java
Patch:
@@ -21,7 +21,7 @@
 import org.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.skywalking.apm.plugin.jdbc.define.AbstractDriverInstrumentation;
 
-import static org.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
+import static org.skywalking.apm.plugin.jdbc.mysql.define.MultiClassNameMatch.byMultiClassMatch;
 
 /**
  * {@link DriverInstrumentation} presents that skywalking intercepts {@link com.mysql.jdbc.Driver}.
@@ -31,6 +31,6 @@
 public class DriverInstrumentation extends AbstractDriverInstrumentation {
     @Override
     protected ClassMatch enhanceClass() {
-        return byName("com.mysql.jdbc.Driver");
+        return byMultiClassMatch("com.mysql.jdbc.Driver", "com.mysql.cj.jdbc.Driver");
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/skywalking/apm/plugin/spring/mvc/v4/define/ControllerInstrumentationTest.java
Patch:
@@ -52,8 +52,8 @@ public void testGetEnhanceAnnotations() throws Throwable {
     public void testGetInstanceMethodsInterceptPoints() throws Throwable {
         InstanceMethodsInterceptPoint[] methodPoints = controllerInstrumentation.getInstanceMethodsInterceptPoints();
         assertThat(methodPoints.length, is(2));
-        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.RequestMappingMethodInterceptor"));
-        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.RestMappingMethodInterceptor"));
+        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.v4.RequestMappingMethodInterceptor"));
+        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.v4.RestMappingMethodInterceptor"));
 
         Assert.assertFalse(methodPoints[0].isOverrideArgs());
         Assert.assertFalse(methodPoints[1].isOverrideArgs());
@@ -70,7 +70,7 @@ public void testGetConstructorsInterceptPoints() throws Throwable {
         ConstructorInterceptPoint cip = cips[0];
         Assert.assertNotNull(cip);
 
-        Assert.assertEquals(cip.getConstructorInterceptor(), "org.skywalking.apm.plugin.spring.mvc.ControllerConstructorInterceptor");
+        Assert.assertEquals(cip.getConstructorInterceptor(), "org.skywalking.apm.plugin.spring.mvc.v4.ControllerConstructorInterceptor");
         Assert.assertTrue(cip.getConstructorMatcher().equals(ElementMatchers.any()));
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/skywalking/apm/plugin/spring/mvc/v4/define/RestControllerInstrumentationTest.java
Patch:
@@ -50,8 +50,8 @@ public void testGetEnhanceAnnotations() throws Throwable {
     public void testGetInstanceMethodsInterceptPoints() throws Throwable {
         InstanceMethodsInterceptPoint[] methodPoints = restControllerInstrumentation.getInstanceMethodsInterceptPoints();
         assertThat(methodPoints.length, is(2));
-        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.RequestMappingMethodInterceptor"));
-        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.RestMappingMethodInterceptor"));
+        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.v4.RequestMappingMethodInterceptor"));
+        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.v4.RestMappingMethodInterceptor"));
 
         Assert.assertFalse(methodPoints[0].isOverrideArgs());
         Assert.assertFalse(methodPoints[1].isOverrideArgs());

File: apm-collector/apm-collector-core/src/test/java/org/skywalking/apm/collector/core/data/AbstractHashMessageTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.junit.Assert;
 import org.junit.Test;
-import org.skywalking.apm.collector.core.data.AbstractHashMessage;
 
 /**
  * @author wu-sheng

File: apm-commons/apm-datacarrier/src/test/java/org/skywalking/apm/commons/datacarrier/consumer/ConsumerTest.java
Patch:
@@ -83,7 +83,7 @@ public void testConsumerMoreThanChannel() throws IllegalAccessException, Interru
     }
 
     @Test
-    public void testConsumerOnError() {
+    public void testConsumerOnError() throws InterruptedException {
         final DataCarrier<SampleData> carrier = new DataCarrier<SampleData>(2, 100);
 
         for (int i = 0; i < 200; i++) {
@@ -94,6 +94,8 @@ public void testConsumerOnError() {
         consumer.onError = true;
         carrier.consume(consumer, 5);
 
+        Thread.sleep(3 * 1000L);
+
         Assert.assertTrue(IS_OCCUR_ERROR);
     }
 

File: apm-sniffer/apm-sdk-plugin/mysql-2.x-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/mysql/define/DriverInstrumentation.java
Patch:
@@ -21,7 +21,7 @@
 import org.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.skywalking.apm.plugin.jdbc.define.AbstractDriverInstrumentation;
 
-import static org.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
+import static org.skywalking.apm.plugin.jdbc.mysql.define.MultiClassNameMatch.byMultiClassMath;
 
 /**
  * {@link DriverInstrumentation} presents that skywalking intercepts {@link com.mysql.jdbc.Driver}.
@@ -31,6 +31,6 @@
 public class DriverInstrumentation extends AbstractDriverInstrumentation {
     @Override
     protected ClassMatch enhanceClass() {
-        return byName("com.mysql.jdbc.Driver");
+        return byMultiClassMath("com.mysql.jdbc.Driver", "com.mysql.cj.jdbc.Driver");
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/skywalking/apm/plugin/spring/mvc/v4/define/ControllerInstrumentationTest.java
Patch:
@@ -52,8 +52,8 @@ public void testGetEnhanceAnnotations() throws Throwable {
     public void testGetInstanceMethodsInterceptPoints() throws Throwable {
         InstanceMethodsInterceptPoint[] methodPoints = controllerInstrumentation.getInstanceMethodsInterceptPoints();
         assertThat(methodPoints.length, is(2));
-        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.RequestMappingMethodInterceptor"));
-        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.RestMappingMethodInterceptor"));
+        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.v4.RequestMappingMethodInterceptor"));
+        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.v4.RestMappingMethodInterceptor"));
 
         Assert.assertFalse(methodPoints[0].isOverrideArgs());
         Assert.assertFalse(methodPoints[1].isOverrideArgs());
@@ -70,7 +70,7 @@ public void testGetConstructorsInterceptPoints() throws Throwable {
         ConstructorInterceptPoint cip = cips[0];
         Assert.assertNotNull(cip);
 
-        Assert.assertEquals(cip.getConstructorInterceptor(), "org.skywalking.apm.plugin.spring.mvc.ControllerConstructorInterceptor");
+        Assert.assertEquals(cip.getConstructorInterceptor(), "org.skywalking.apm.plugin.spring.mvc.v4.ControllerConstructorInterceptor");
         Assert.assertTrue(cip.getConstructorMatcher().equals(ElementMatchers.any()));
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/skywalking/apm/plugin/spring/mvc/v4/define/RestControllerInstrumentationTest.java
Patch:
@@ -50,8 +50,8 @@ public void testGetEnhanceAnnotations() throws Throwable {
     public void testGetInstanceMethodsInterceptPoints() throws Throwable {
         InstanceMethodsInterceptPoint[] methodPoints = restControllerInstrumentation.getInstanceMethodsInterceptPoints();
         assertThat(methodPoints.length, is(2));
-        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.RequestMappingMethodInterceptor"));
-        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.RestMappingMethodInterceptor"));
+        assertThat(methodPoints[0].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.v4.RequestMappingMethodInterceptor"));
+        assertThat(methodPoints[1].getMethodsInterceptor(), is("org.skywalking.apm.plugin.spring.mvc.v4.RestMappingMethodInterceptor"));
 
         Assert.assertFalse(methodPoints[0].isOverrideArgs());
         Assert.assertFalse(methodPoints[1].isOverrideArgs());

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/ModuleProvider.java
Patch:
@@ -96,7 +96,7 @@ protected final void registerServiceImplementation(Class<? extends Service> serv
         Service service) throws ServiceNotProvidedException {
         if (serviceType.isInstance(service)) {
             if (manager.isServiceInstrument()) {
-                service = ServiceInstrumentation.INSTANCE.buildServiceUnderMonitor(service);
+                service = ServiceInstrumentation.INSTANCE.buildServiceUnderMonitor(module.name(), name(), service);
             }
             this.services.put(serviceType, service);
         } else {

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/instrument/ServiceInstrumentation.java
Patch:
@@ -42,7 +42,7 @@ public enum ServiceInstrumentation {
     private final Logger logger = LoggerFactory.getLogger(ServiceInstrumentation.class);
     private ElementMatcher<? super MethodDescription> excludeObjectMethodsMatcher;
 
-    public Service buildServiceUnderMonitor(Service implementation) {
+    public Service buildServiceUnderMonitor(String moduleName, String providerName, Service implementation) {
         if (implementation instanceof TracedService) {
             // Duplicate service instrument, ignore.
             return implementation;
@@ -51,7 +51,7 @@ public Service buildServiceUnderMonitor(Service implementation) {
             return new ByteBuddy().subclass(implementation.getClass())
                 .implement(TracedService.class)
                 .method(getDefaultMatcher()).intercept(
-                    MethodDelegation.withDefaultConfiguration().to(new ServiceMetricCollector())
+                    MethodDelegation.withDefaultConfiguration().to(new ServiceMetricTracing(moduleName, providerName, implementation.getClass().getName()))
                 ).make().load(getClass().getClassLoader()
                 ).getLoaded().newInstance();
         } catch (InstantiationException e) {

File: apm-collector/apm-collector-core/src/test/java/org/skywalking/apm/collector/core/module/ModuleAProvider.java
Patch:
@@ -51,7 +51,6 @@ public class ModuleAProvider extends ModuleProvider {
     public class Business1 implements BaseModuleA.ServiceABusiness1 {
 
         @Override public void print() {
-            System.out.println("ModuleA.Business1.print()");
         }
     }
 

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/InstanceH2CacheDAO.java
Patch:
@@ -40,7 +40,7 @@ public class InstanceH2CacheDAO extends H2DAO implements IInstanceCacheDAO {
     @Override public int getApplicationId(int applicationInstanceId) {
         logger.info("get the application id with application id = {}", applicationInstanceId);
         H2Client client = getClient();
-        String sql = SqlBuilder.buildSql(GET_APPLICATION_ID_SQL, InstanceTable.COLUMN_APPLICATION_ID, InstanceTable.TABLE, InstanceTable.COLUMN_APPLICATION_ID);
+        String sql = SqlBuilder.buildSql(GET_APPLICATION_ID_SQL, InstanceTable.COLUMN_APPLICATION_ID, InstanceTable.TABLE, InstanceTable.COLUMN_INSTANCE_ID);
         Object[] params = new Object[] {applicationInstanceId};
         try (ResultSet rs = client.executeQuery(sql, params)) {
             if (rs.next()) {

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/InstanceH2CacheDAO.java
Patch:
@@ -40,7 +40,7 @@ public class InstanceH2CacheDAO extends H2DAO implements IInstanceCacheDAO {
     @Override public int getApplicationId(int applicationInstanceId) {
         logger.info("get the application id with application id = {}", applicationInstanceId);
         H2Client client = getClient();
-        String sql = SqlBuilder.buildSql(GET_APPLICATION_ID_SQL, InstanceTable.COLUMN_APPLICATION_ID, InstanceTable.TABLE, InstanceTable.COLUMN_APPLICATION_ID);
+        String sql = SqlBuilder.buildSql(GET_APPLICATION_ID_SQL, InstanceTable.COLUMN_APPLICATION_ID, InstanceTable.TABLE, InstanceTable.COLUMN_INSTANCE_ID);
         Object[] params = new Object[] {applicationInstanceId};
         try (ResultSet rs = client.executeQuery(sql, params)) {
             if (rs.next()) {

File: apm-collector/apm-collector-modulization-core/src/main/java/org/skywalking/apm/collector/modulization/Module.java
Patch:
@@ -48,7 +48,7 @@ public abstract class Module {
      * @throws ProviderNotFoundException when even don't find a single one providers.
      */
     void prepare(ModuleManager moduleManager,
-        ApplicationConfiguration.ModuleConfiguration configuration) throws ProviderNotFoundException {
+        ApplicationConfiguration.ModuleConfiguration configuration) throws ProviderNotFoundException, ServiceNotProvidedException {
         ServiceLoader<ModuleProvider> moduleProviderLoader = ServiceLoader.load(ModuleProvider.class);
         boolean providerExist = false;
         for (ModuleProvider provider : moduleProviderLoader) {

File: apm-collector/apm-collector-modulization-core/src/main/java/org/skywalking/apm/collector/modulization/ModuleManager.java
Patch:
@@ -54,7 +54,7 @@ public void init(
                         throw new ModuleNotFoundException(e);
                     }
                     newInstance.prepare(this, applicationConfiguration.getModuleConfiguration(moduleName));
-                    loadedModules.put(moduleName, module);
+                    loadedModules.put(moduleName, newInstance);
                     moduleList.remove(moduleName);
                 }
             }

File: apm-collector/apm-collector-modulization-core/src/main/java/org/skywalking/apm/collector/modulization/Module.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.skywalking.apm.collector.modulization;
 
-import java.lang.reflect.InvocationTargetException;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.ServiceLoader;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/standardization/SegmentDecorator.java
Patch:
@@ -78,7 +78,7 @@ public byte[] toByteArray() {
     }
 
     @Override public void toBuilder() {
-        if (!isOrigin) {
+        if (isOrigin) {
             this.isOrigin = false;
             this.segmentBuilder = segmentObject.toBuilder();
         }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ServiceReferenceH2DAO.java
Patch:
@@ -60,7 +60,7 @@ private Map<String, JsonObject> load(H2Client client, Object[] params, String sq
         Map<String, JsonObject> serviceReferenceMap = new LinkedHashMap<>();
 
         try (ResultSet rs = client.executeQuery(sql, params)) {
-            if (rs.next()) {
+            while (rs.next()) {
                 int frontServiceId = rs.getInt(ServiceReferenceTable.COLUMN_FRONT_SERVICE_ID);
                 parseSubAggregate(serviceReferenceMap, rs, frontServiceId);
             }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/standardization/SegmentDecorator.java
Patch:
@@ -78,7 +78,7 @@ public byte[] toByteArray() {
     }
 
     @Override public void toBuilder() {
-        if (!isOrigin) {
+        if (isOrigin) {
             this.isOrigin = false;
             this.segmentBuilder = segmentObject.toBuilder();
         }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ServiceReferenceH2DAO.java
Patch:
@@ -60,7 +60,7 @@ private Map<String, JsonObject> load(H2Client client, Object[] params, String sq
         Map<String, JsonObject> serviceReferenceMap = new LinkedHashMap<>();
 
         try (ResultSet rs = client.executeQuery(sql, params)) {
-            if (rs.next()) {
+            while (rs.next()) {
                 int frontServiceId = rs.getInt(ServiceReferenceTable.COLUMN_FRONT_SERVICE_ID);
                 parseSubAggregate(serviceReferenceMap, rs, frontServiceId);
             }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/gc/dao/GCMetricH2DAO.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-
 import org.skywalking.apm.collector.core.stream.Data;
 import org.skywalking.apm.collector.storage.define.DataDefine;
 import org.skywalking.apm.collector.storage.define.jvm.GCMetricTable;
@@ -40,7 +39,7 @@ public class GCMetricH2DAO extends H2DAO implements IGCMetricDAO, IPersistenceDA
     @Override public H2SqlEntity prepareBatchInsert(Data data) {
         H2SqlEntity entity = new H2SqlEntity();
         Map<String, Object> source = new HashMap<>();
-        source.put("id", data.getDataString(0));
+        source.put(GCMetricTable.COLUMN_ID, data.getDataString(0));
         source.put(GCMetricTable.COLUMN_INSTANCE_ID, data.getDataInteger(0));
         source.put(GCMetricTable.COLUMN_PHRASE, data.getDataInteger(1));
         source.put(GCMetricTable.COLUMN_COUNT, data.getDataLong(0));

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/heartbeat/dao/InstanceHeartBeatH2DAO.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-
 import org.skywalking.apm.collector.client.h2.H2Client;
 import org.skywalking.apm.collector.client.h2.H2ClientException;
 import org.skywalking.apm.collector.core.framework.UnexpectedException;
@@ -44,10 +43,11 @@
 public class InstanceHeartBeatH2DAO extends H2DAO implements IInstanceHeartBeatDAO, IPersistenceDAO<H2SqlEntity, H2SqlEntity> {
     private final Logger logger = LoggerFactory.getLogger(InstanceHeartBeatEsDAO.class);
     private static final String GET_INSTANCE_HEARTBEAT_SQL = "select * from {0} where {1} = ?";
+
     @Override public Data get(String id, DataDefine dataDefine) {
         H2Client client = getClient();
         String sql = SqlBuilder.buildSql(GET_INSTANCE_HEARTBEAT_SQL, InstanceTable.TABLE, InstanceTable.COLUMN_INSTANCE_ID);
-        Object[] params = new Object[]{id};
+        Object[] params = new Object[] {id};
         try (ResultSet rs = client.executeQuery(sql, params)) {
             if (rs.next()) {
                 Data data = dataDefine.build(id);
@@ -69,7 +69,7 @@ public class InstanceHeartBeatH2DAO extends H2DAO implements IInstanceHeartBeatD
         H2SqlEntity entity = new H2SqlEntity();
         Map<String, Object> source = new HashMap<>();
         source.put(InstanceTable.COLUMN_HEARTBEAT_TIME, data.getDataLong(0));
-        String sql = SqlBuilder.buildBatchUpdateSql(InstanceTable.TABLE, source.keySet(), InstanceTable.COLUMN_APPLICATION_ID);
+        String sql = SqlBuilder.buildBatchUpdateSql(InstanceTable.TABLE, source.keySet(), InstanceTable.COLUMN_INSTANCE_ID);
         entity.setSql(sql);
         List<Object> params = new ArrayList<>(source.values());
         params.add(data.getDataString(0));

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memory/dao/MemoryMetricH2DAO.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-
 import org.skywalking.apm.collector.core.stream.Data;
 import org.skywalking.apm.collector.storage.define.DataDefine;
 import org.skywalking.apm.collector.storage.define.jvm.MemoryMetricTable;
@@ -40,7 +39,7 @@ public class MemoryMetricH2DAO extends H2DAO implements IMemoryMetricDAO, IPersi
     @Override public H2SqlEntity prepareBatchInsert(Data data) {
         H2SqlEntity entity = new H2SqlEntity();
         Map<String, Object> source = new HashMap<>();
-        source.put("id", data.getDataString(0));
+        source.put(MemoryMetricTable.COLUMN_ID, data.getDataString(0));
         source.put(MemoryMetricTable.COLUMN_APPLICATION_INSTANCE_ID, data.getDataInteger(0));
         source.put(MemoryMetricTable.COLUMN_IS_HEAP, data.getDataBoolean(0));
         source.put(MemoryMetricTable.COLUMN_INIT, data.getDataLong(0));

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memorypool/dao/MemoryPoolMetricH2DAO.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-
 import org.skywalking.apm.collector.core.stream.Data;
 import org.skywalking.apm.collector.storage.define.DataDefine;
 import org.skywalking.apm.collector.storage.define.jvm.MemoryPoolMetricTable;
@@ -40,7 +39,7 @@ public class MemoryPoolMetricH2DAO extends H2DAO implements IMemoryPoolMetricDAO
     @Override public H2SqlEntity prepareBatchInsert(Data data) {
         H2SqlEntity entity = new H2SqlEntity();
         Map<String, Object> source = new HashMap<>();
-        source.put("id", data.getDataString(0));
+        source.put(MemoryPoolMetricTable.COLUMN_ID, data.getDataString(0));
         source.put(MemoryPoolMetricTable.COLUMN_INSTANCE_ID, data.getDataInteger(0));
         source.put(MemoryPoolMetricTable.COLUMN_POOL_TYPE, data.getDataInteger(1));
         source.put(MemoryPoolMetricTable.COLUMN_INIT, data.getDataLong(0));

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/application/ApplicationH2TableDefine.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.skywalking.apm.collector.agentregister.worker.application;
 
+import org.skywalking.apm.collector.storage.define.global.GlobalTraceTable;
 import org.skywalking.apm.collector.storage.define.register.ApplicationTable;
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
@@ -32,6 +33,7 @@ public ApplicationH2TableDefine() {
     }
 
     @Override public void initialize() {
+        addColumn(new H2ColumnDefine(GlobalTraceTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(ApplicationTable.COLUMN_APPLICATION_CODE, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(ApplicationTable.COLUMN_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
     }

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/application/dao/ApplicationEsDAO.java
Patch:
@@ -47,7 +47,7 @@ public class ApplicationEsDAO extends EsDAO implements IApplicationDAO {
     @Override public void save(ApplicationDataDefine.Application application) {
         logger.debug("save application register info, application id: {}, application code: {}", application.getApplicationId(), application.getApplicationCode());
         ElasticSearchClient client = getClient();
-        Map<String, Object> source = new HashMap();
+        Map<String, Object> source = new HashMap<>();
         source.put(ApplicationTable.COLUMN_APPLICATION_CODE, application.getApplicationCode());
         source.put(ApplicationTable.COLUMN_APPLICATION_ID, application.getApplicationId());
 

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/instance/InstanceH2TableDefine.java
Patch:
@@ -32,6 +32,7 @@ public InstanceH2TableDefine() {
     }
 
     @Override public void initialize() {
+        addColumn(new H2ColumnDefine(InstanceTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(InstanceTable.COLUMN_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(InstanceTable.COLUMN_AGENT_UUID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(InstanceTable.COLUMN_REGISTER_TIME, H2ColumnDefine.Type.Bigint.name()));

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/instance/dao/InstanceH2DAO.java
Patch:
@@ -38,7 +38,7 @@ public class InstanceH2DAO extends H2DAO implements IInstanceDAO {
     private final Logger logger = LoggerFactory.getLogger(InstanceH2DAO.class);
 
     private static final String GET_INSTANCE_ID_SQL = "select {0} from {1} where {2} = ? and {3} = ?";
-    private static final String UPDATE_HEARTBEAT_TIME_SQL = "updatte {0} set {1} = ? where {2} = ?";
+    private static final String UPDATE_HEARTBEAT_TIME_SQL = "update {0} set {1} = ? where {2} = ?";
 
     @Override public int getInstanceId(int applicationId, String agentUUID) {
         logger.info("get the application id with application id = {}, agentUUID = {}", applicationId, agentUUID);
@@ -67,6 +67,7 @@ public class InstanceH2DAO extends H2DAO implements IInstanceDAO {
     @Override public void save(InstanceDataDefine.Instance instance) {
         H2Client client = getClient();
         Map<String, Object> source = new HashMap<>();
+        source.put(InstanceTable.COLUMN_ID, instance.getId());
         source.put(InstanceTable.COLUMN_INSTANCE_ID, instance.getInstanceId());
         source.put(InstanceTable.COLUMN_APPLICATION_ID, instance.getApplicationId());
         source.put(InstanceTable.COLUMN_AGENT_UUID, instance.getAgentUUID());
@@ -85,7 +86,7 @@ public class InstanceH2DAO extends H2DAO implements IInstanceDAO {
     @Override public void updateHeartbeatTime(int instanceId, long heartbeatTime) {
         H2Client client = getClient();
         String sql = SqlBuilder.buildSql(UPDATE_HEARTBEAT_TIME_SQL, InstanceTable.TABLE, InstanceTable.COLUMN_HEARTBEAT_TIME,
-            InstanceTable.COLUMN_INSTANCE_ID);
+            InstanceTable.COLUMN_ID);
         Object[] params = new Object[] {heartbeatTime, instanceId};
         try {
             client.execute(sql, params);

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/ServiceNameH2TableDefine.java
Patch:
@@ -32,6 +32,7 @@ public ServiceNameH2TableDefine() {
     }
 
     @Override public void initialize() {
+        addColumn(new H2ColumnDefine(ServiceNameTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(ServiceNameTable.COLUMN_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(ServiceNameTable.COLUMN_SERVICE_NAME, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(ServiceNameTable.COLUMN_SERVICE_ID, H2ColumnDefine.Type.Int.name()));

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/dao/ServiceNameEsDAO.java
Patch:
@@ -47,7 +47,7 @@ public class ServiceNameEsDAO extends EsDAO implements IServiceNameDAO {
     @Override public void save(ServiceNameDataDefine.ServiceName serviceName) {
         logger.debug("save service name register info, application id: {}, service name: {}", serviceName.getApplicationId(), serviceName.getServiceName());
         ElasticSearchClient client = getClient();
-        Map<String, Object> source = new HashMap();
+        Map<String, Object> source = new HashMap<>();
         source.put(ServiceNameTable.COLUMN_SERVICE_ID, serviceName.getServiceId());
         source.put(ServiceNameTable.COLUMN_APPLICATION_ID, serviceName.getApplicationId());
         source.put(ServiceNameTable.COLUMN_SERVICE_NAME, serviceName.getServiceName());

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/dao/ServiceNameH2DAO.java
Patch:
@@ -50,6 +50,7 @@ public void save(ServiceNameDataDefine.ServiceName serviceName) {
         logger.debug("save service name register info, application id: {}, service name: {}", serviceName.getApplicationId(), serviceName.getServiceName());
         H2Client client = getClient();
         Map<String, Object> source = new HashMap<>();
+        source.put(ServiceNameTable.COLUMN_ID, serviceName.getId());
         source.put(ServiceNameTable.COLUMN_SERVICE_ID, serviceName.getServiceId());
         source.put(ServiceNameTable.COLUMN_APPLICATION_ID, serviceName.getApplicationId());
         source.put(ServiceNameTable.COLUMN_SERVICE_NAME, serviceName.getServiceName());

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/origin/dao/SegmentH2DAO.java
Patch:
@@ -44,7 +44,7 @@ public class SegmentH2DAO extends H2DAO implements ISegmentDAO, IPersistenceDAO<
     @Override public H2SqlEntity prepareBatchInsert(Data data) {
         Map<String, Object> source = new HashMap<>();
         H2SqlEntity entity = new H2SqlEntity();
-        source.put("id", data.getDataString(0));
+        source.put(SegmentTable.COLUMN_ID, data.getDataString(0));
         source.put(SegmentTable.COLUMN_DATA_BINARY, data.getDataBytes(0));
         logger.debug("segment source: {}", source.toString());
 

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/service/entry/dao/ServiceEntryH2DAO.java
Patch:
@@ -45,7 +45,7 @@ public class ServiceEntryH2DAO extends H2DAO implements IServiceEntryDAO, IPersi
 
     @Override public Data get(String id, DataDefine dataDefine) {
         H2Client client = getClient();
-        String sql = SqlBuilder.buildSql(GET_SERVICE_ENTRY_SQL, ServiceEntryTable.TABLE, "id");
+        String sql = SqlBuilder.buildSql(GET_SERVICE_ENTRY_SQL, ServiceEntryTable.TABLE, ServiceEntryTable.COLUMN_ID);
         Object[] params = new Object[] {id};
         try (ResultSet rs = client.executeQuery(sql, params)) {
             if (rs.next()) {
@@ -66,7 +66,7 @@ public class ServiceEntryH2DAO extends H2DAO implements IServiceEntryDAO, IPersi
     @Override public H2SqlEntity prepareBatchInsert(Data data) {
         H2SqlEntity entity = new H2SqlEntity();
         Map<String, Object> source = new HashMap<>();
-        source.put("id", data.getDataString(0));
+        source.put(ServiceEntryTable.COLUMN_ID, data.getDataString(0));
         source.put(ServiceEntryTable.COLUMN_APPLICATION_ID, data.getDataInteger(0));
         source.put(ServiceEntryTable.COLUMN_ENTRY_SERVICE_ID, data.getDataInteger(1));
         source.put(ServiceEntryTable.COLUMN_ENTRY_SERVICE_NAME, data.getDataString(1));
@@ -87,7 +87,7 @@ public class ServiceEntryH2DAO extends H2DAO implements IServiceEntryDAO, IPersi
         source.put(ServiceEntryTable.COLUMN_REGISTER_TIME, data.getDataLong(0));
         source.put(ServiceEntryTable.COLUMN_NEWEST_TIME, data.getDataLong(1));
         String id = data.getDataString(0);
-        String sql = SqlBuilder.buildBatchUpdateSql(ServiceEntryTable.TABLE, source.keySet(), "id");
+        String sql = SqlBuilder.buildBatchUpdateSql(ServiceEntryTable.TABLE, source.keySet(), ServiceEntryTable.COLUMN_ID);
         entity.setSql(sql);
         List<Object> values = new ArrayList<>(source.values());
         values.add(id);

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/InstanceH2DAO.java
Patch:
@@ -44,7 +44,7 @@ public class InstanceH2DAO extends H2DAO implements IInstanceDAO {
     private static final String GET_INST_LAST_HEARTBEAT_TIME_SQL = "select {0} from {1} where {2} > ? and {3} = ? limit 1";
     private static final String GET_INSTANCE_SQL = "select * from {0} where {1} = ?";
     private static final String GET_INSTANCES_SQL = "select * from {0} where {1} = ? and {2} >= ?";
-    private static final String GET_APPLICATIONS_SQL = "select {3}, count({0}) as cnt from {1} where {2} >= ? and {2} <= ? group by {3} limit 100";
+    private static final String GET_APPLICATIONS_SQL = "select {3}, count({0}) as cnt from {1} where {2} >= ? group by {3} limit 100";
 
     @Override
     public Long lastHeartBeatTime() {
@@ -87,7 +87,7 @@ public JsonArray getApplications(long startTime, long endTime) {
         JsonArray applications = new JsonArray();
         String sql = SqlBuilder.buildSql(GET_APPLICATIONS_SQL, InstanceTable.COLUMN_INSTANCE_ID,
             InstanceTable.TABLE, InstanceTable.COLUMN_HEARTBEAT_TIME, InstanceTable.COLUMN_APPLICATION_ID);
-        Object[] params = new Object[] {startTime, endTime};
+        Object[] params = new Object[] {startTime};
         try (ResultSet rs = client.executeQuery(sql, params)) {
             while (rs.next()) {
                 Integer applicationId = rs.getInt(InstanceTable.COLUMN_APPLICATION_ID);

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/SegmentH2DAO.java
Patch:
@@ -40,7 +40,7 @@ public class SegmentH2DAO extends H2DAO implements ISegmentDAO {
     @Override public TraceSegmentObject load(String segmentId) {
         H2Client client = getClient();
         String sql = SqlBuilder.buildSql(GET_SEGMENT_SQL, SegmentTable.COLUMN_DATA_BINARY,
-            SegmentTable.TABLE, "id");
+            SegmentTable.TABLE, SegmentTable.COLUMN_ID);
         Object[] params = new Object[] {segmentId};
         try (ResultSet rs = client.executeQuery(sql, params)) {
             if (rs.next()) {

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/skywalking/apm/plugin/jdbc/define/AbstractDriverInstrumentation.java
Patch:
@@ -34,7 +34,7 @@
  */
 public abstract class AbstractDriverInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String DRIVER_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jdbc.define.JDBCDriverInterceptor";
+    private static final String DRIVER_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jdbc.JDBCDriverInterceptor";
 
     @Override
     protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/skywalking/apm/plugin/jdbc/define/AbstractDriverInstrumentation.java
Patch:
@@ -34,7 +34,7 @@
  */
 public abstract class AbstractDriverInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String DRIVER_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jdbc.define.JDBCDriverInterceptor";
+    private static final String DRIVER_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jdbc.JDBCDriverInterceptor";
 
     @Override
     protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jdbc-commons/src/main/java/org/skywalking/apm/plugin/jdbc/define/AbstractDriverInstrumentation.java
Patch:
@@ -34,7 +34,7 @@
  */
 public abstract class AbstractDriverInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String DRIVER_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jdbc.define.JDBCDriverInterceptor";
+    private static final String DRIVER_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jdbc.JDBCDriverInterceptor";
 
     @Override
     protected final ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/servicename/ServiceNameService.java
Patch:
@@ -19,7 +19,7 @@
 package org.skywalking.apm.collector.agentregister.servicename;
 
 import org.skywalking.apm.collector.agentregister.worker.servicename.ServiceNameRegisterRemoteWorker;
-import org.skywalking.apm.collector.cache.dao.IServiceNameDAO;
+import org.skywalking.apm.collector.cache.dao.IServiceNameCacheDAO;
 import org.skywalking.apm.collector.core.framework.CollectorContextHelper;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.storage.define.register.ServiceNameDataDefine;
@@ -38,7 +38,7 @@ public class ServiceNameService {
     private final Logger logger = LoggerFactory.getLogger(ServiceNameService.class);
 
     public int getOrCreate(int applicationId, String serviceName) {
-        IServiceNameDAO dao = (IServiceNameDAO)DAOContainer.INSTANCE.get(IServiceNameDAO.class.getName());
+        IServiceNameCacheDAO dao = (IServiceNameCacheDAO)DAOContainer.INSTANCE.get(IServiceNameCacheDAO.class.getName());
         int serviceId = dao.getServiceId(applicationId, serviceName);
 
         if (serviceId == 0) {

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/application/ApplicationRegisterSerialWorker.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.skywalking.apm.collector.agentregister.worker.IdAutoIncrement;
 import org.skywalking.apm.collector.agentregister.worker.application.dao.IApplicationDAO;
+import org.skywalking.apm.collector.cache.dao.IApplicationCacheDAO;
 import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.storage.define.DataDefine;
@@ -55,7 +56,7 @@ public ApplicationRegisterSerialWorker(Role role, ClusterWorkerContext clusterCo
             ApplicationDataDefine.Application application = (ApplicationDataDefine.Application)message;
             logger.debug("register application, application code: {}", application.getApplicationCode());
 
-            org.skywalking.apm.collector.cache.dao.IApplicationDAO cacheDao = (org.skywalking.apm.collector.cache.dao.IApplicationDAO)DAOContainer.INSTANCE.get(org.skywalking.apm.collector.cache.dao.IApplicationDAO.class.getName());
+            IApplicationCacheDAO cacheDao = (IApplicationCacheDAO)DAOContainer.INSTANCE.get(IApplicationCacheDAO.class.getName());
             int applicationId = cacheDao.getApplicationId(application.getApplicationCode());
 
             IApplicationDAO dao = (IApplicationDAO)DAOContainer.INSTANCE.get(IApplicationDAO.class.getName());

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/ServiceNameRegisterSerialWorker.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.skywalking.apm.collector.agentregister.worker.IdAutoIncrement;
 import org.skywalking.apm.collector.agentregister.worker.servicename.dao.IServiceNameDAO;
+import org.skywalking.apm.collector.cache.dao.IServiceNameCacheDAO;
 import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.storage.define.DataDefine;
@@ -55,7 +56,7 @@ public ServiceNameRegisterSerialWorker(Role role, ClusterWorkerContext clusterCo
             ServiceNameDataDefine.ServiceName serviceName = (ServiceNameDataDefine.ServiceName)message;
             logger.debug("register service name: {}, application id: {}", serviceName.getServiceName(), serviceName.getApplicationId());
 
-            org.skywalking.apm.collector.cache.dao.IServiceNameDAO cacheDao = (org.skywalking.apm.collector.cache.dao.IServiceNameDAO)DAOContainer.INSTANCE.get(IServiceNameDAO.class.getName());
+            IServiceNameCacheDAO cacheDao = (IServiceNameCacheDAO)DAOContainer.INSTANCE.get(IServiceNameDAO.class.getName());
             int serviceId = cacheDao.getServiceId(serviceName.getApplicationId(), serviceName.getServiceName());
 
             IServiceNameDAO dao = (IServiceNameDAO)DAOContainer.INSTANCE.get(IServiceNameDAO.class.getName());

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/ApplicationCache.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.cache.dao.IApplicationDAO;
+import org.skywalking.apm.collector.cache.dao.IApplicationCacheDAO;
 import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.core.util.StringUtils;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
@@ -37,7 +37,7 @@ public class ApplicationCache {
     private static Cache<String, Integer> CODE_CACHE = CacheBuilder.newBuilder().initialCapacity(100).maximumSize(1000).build();
 
     public static int get(String applicationCode) {
-        IApplicationDAO dao = (IApplicationDAO)DAOContainer.INSTANCE.get(IApplicationDAO.class.getName());
+        IApplicationCacheDAO dao = (IApplicationCacheDAO)DAOContainer.INSTANCE.get(IApplicationCacheDAO.class.getName());
 
         int applicationId = 0;
         try {
@@ -58,7 +58,7 @@ public static int get(String applicationCode) {
     private static Cache<Integer, String> ID_CACHE = CacheBuilder.newBuilder().maximumSize(1000).build();
 
     public static String get(int applicationId) {
-        IApplicationDAO dao = (IApplicationDAO)DAOContainer.INSTANCE.get(IApplicationDAO.class.getName());
+        IApplicationCacheDAO dao = (IApplicationCacheDAO)DAOContainer.INSTANCE.get(IApplicationCacheDAO.class.getName());
 
         String applicationCode = Const.EMPTY_STRING;
         try {

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/InstanceCache.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.cache.dao.IInstanceDAO;
+import org.skywalking.apm.collector.cache.dao.IInstanceCacheDAO;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -35,7 +35,7 @@ public class InstanceCache {
     private static Cache<Integer, Integer> INSTANCE_CACHE = CacheBuilder.newBuilder().initialCapacity(100).maximumSize(5000).build();
 
     public static int get(int applicationInstanceId) {
-        IInstanceDAO dao = (IInstanceDAO)DAOContainer.INSTANCE.get(IInstanceDAO.class.getName());
+        IInstanceCacheDAO dao = (IInstanceCacheDAO)DAOContainer.INSTANCE.get(IInstanceCacheDAO.class.getName());
 
         int applicationId = 0;
         try {

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/ServiceIdCache.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.cache.dao.IServiceNameDAO;
+import org.skywalking.apm.collector.cache.dao.IServiceNameCacheDAO;
 import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.slf4j.Logger;
@@ -37,7 +37,7 @@ public class ServiceIdCache {
     private static Cache<String, Integer> SERVICE_CACHE = CacheBuilder.newBuilder().maximumSize(1000).build();
 
     public static int get(int applicationId, String serviceName) {
-        IServiceNameDAO dao = (IServiceNameDAO)DAOContainer.INSTANCE.get(IServiceNameDAO.class.getName());
+        IServiceNameCacheDAO dao = (IServiceNameCacheDAO)DAOContainer.INSTANCE.get(IServiceNameCacheDAO.class.getName());
 
         int serviceId = 0;
         try {

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/ServiceNameCache.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.cache.dao.IServiceNameDAO;
+import org.skywalking.apm.collector.cache.dao.IServiceNameCacheDAO;
 import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.core.util.StringUtils;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
@@ -38,7 +38,7 @@ public class ServiceNameCache {
     private static Cache<Integer, String> CACHE = CacheBuilder.newBuilder().maximumSize(10000).build();
 
     public static String get(int serviceId) {
-        IServiceNameDAO dao = (IServiceNameDAO)DAOContainer.INSTANCE.get(IServiceNameDAO.class.getName());
+        IServiceNameCacheDAO dao = (IServiceNameCacheDAO)DAOContainer.INSTANCE.get(IServiceNameCacheDAO.class.getName());
 
         String serviceName = Const.EMPTY_STRING;
         try {

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/ApplicationEsCacheDAO.java
Patch:
@@ -35,9 +35,9 @@
 /**
  * @author pengys5
  */
-public class ApplicationEsDAO extends EsDAO implements IApplicationDAO {
+public class ApplicationEsCacheDAO extends EsDAO implements IApplicationCacheDAO {
 
-    private final Logger logger = LoggerFactory.getLogger(ApplicationEsDAO.class);
+    private final Logger logger = LoggerFactory.getLogger(ApplicationEsCacheDAO.class);
 
     @Override public int getApplicationId(String applicationCode) {
         ElasticSearchClient client = getClient();

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/IApplicationCacheDAO.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author pengys5
  */
-public interface IApplicationDAO {
+public interface IApplicationCacheDAO {
     int getApplicationId(String applicationCode);
 
     String getApplicationCode(int applicationId);

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/IInstanceCacheDAO.java
Patch:
@@ -21,6 +21,6 @@
 /**
  * @author pengys5
  */
-public interface IInstanceDAO {
+public interface IInstanceCacheDAO {
     int getApplicationId(int applicationInstanceId);
 }

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/IServiceNameCacheDAO.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author pengys5
  */
-public interface IServiceNameDAO {
+public interface IServiceNameCacheDAO {
     String getServiceName(int serviceId);
 
     int getServiceId(int applicationId, String serviceName);

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/InstanceEsCacheDAO.java
Patch:
@@ -27,9 +27,9 @@
 /**
  * @author pengys5
  */
-public class InstanceEsDAO extends EsDAO implements IInstanceDAO {
+public class InstanceEsCacheDAO extends EsDAO implements IInstanceCacheDAO {
 
-    private final Logger logger = LoggerFactory.getLogger(InstanceEsDAO.class);
+    private final Logger logger = LoggerFactory.getLogger(InstanceEsCacheDAO.class);
 
     @Override public int getApplicationId(int applicationInstanceId) {
         GetResponse response = getClient().prepareGet(InstanceTable.TABLE, String.valueOf(applicationInstanceId)).get();

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/InstanceH2CacheDAO.java
Patch:
@@ -31,9 +31,9 @@
 /**
  * @author pengys5
  */
-public class InstanceH2DAO extends H2DAO implements IInstanceDAO {
+public class InstanceH2CacheDAO extends H2DAO implements IInstanceCacheDAO {
 
-    private final Logger logger = LoggerFactory.getLogger(InstanceH2DAO.class);
+    private final Logger logger = LoggerFactory.getLogger(InstanceH2CacheDAO.class);
 
     private static final String GET_APPLICATION_ID_SQL = "select {0} from {1} where {2} = ?";
 

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/ServiceNameEsCacheDAO.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * @author pengys5
  */
-public class ServiceNameEsDAO extends EsDAO implements IServiceNameDAO {
+public class ServiceNameEsCacheDAO extends EsDAO implements IServiceNameCacheDAO {
 
     @Override public String getServiceName(int serviceId) {
         GetRequestBuilder getRequestBuilder = getClient().prepareGet(ServiceNameTable.TABLE, String.valueOf(serviceId));

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/ServiceNameH2CacheDAO.java
Patch:
@@ -32,9 +32,9 @@
 /**
  * @author pengys5, clevertension
  */
-public class ServiceNameH2DAO extends H2DAO implements IServiceNameDAO {
+public class ServiceNameH2CacheDAO extends H2DAO implements IServiceNameCacheDAO {
 
-    private final Logger logger = LoggerFactory.getLogger(ServiceNameH2DAO.class);
+    private final Logger logger = LoggerFactory.getLogger(ServiceNameH2CacheDAO.class);
 
     private static final String GET_SERVICE_NAME_SQL = "select {0},{1} from {2} where {3} = ?";
     private static final String GET_SERVICE_ID_SQL = "select {0} from {1} where {2} = ? and {3} = ? limit 1";

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/SegmentCostSpanListener.java
Patch:
@@ -62,7 +62,7 @@ public void parseFirst(SpanDecorator spanDecorator, int applicationId, int appli
         if (spanDecorator.getOperationNameId() == 0) {
             segmentCost.setServiceName(spanDecorator.getOperationName());
         } else {
-            segmentCost.setServiceName(ServiceNameCache.get(spanDecorator.getOperationNameId()));
+            segmentCost.setServiceName(ServiceNameCache.getSplitServiceName(ServiceNameCache.get(spanDecorator.getOperationNameId())));
         }
 
         segmentCosts.add(segmentCost);

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/ApplicationEsDAO.java
Patch:
@@ -51,8 +51,7 @@ public class ApplicationEsDAO extends EsDAO implements IApplicationDAO {
         SearchResponse searchResponse = searchRequestBuilder.execute().actionGet();
         if (searchResponse.getHits().totalHits > 0) {
             SearchHit searchHit = searchResponse.getHits().iterator().next();
-            int applicationId = (int)searchHit.getSource().get(ApplicationTable.COLUMN_APPLICATION_ID);
-            return applicationId;
+            return (int)searchHit.getSource().get(ApplicationTable.COLUMN_APPLICATION_ID);
         }
         return 0;
     }
@@ -66,6 +65,6 @@ public class ApplicationEsDAO extends EsDAO implements IApplicationDAO {
         if (getResponse.isExists()) {
             return (String)getResponse.getSource().get(ApplicationTable.COLUMN_APPLICATION_CODE);
         }
-        return Const.UNKNOWN;
+        return Const.EMPTY_STRING;
     }
 }

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/ApplicationH2DAO.java
Patch:
@@ -57,6 +57,6 @@ public int getApplicationId(String applicationCode) {
         } catch (SQLException | H2ClientException e) {
             logger.error(e.getMessage(), e);
         }
-        return Const.UNKNOWN;
+        return Const.EMPTY_STRING;
     }
 }

File: apm-collector/apm-collector-cache/src/main/java/org/skywalking/apm/collector/cache/dao/ServiceNameEsDAO.java
Patch:
@@ -44,7 +44,7 @@ public class ServiceNameEsDAO extends EsDAO implements IServiceNameDAO {
             int applicationId = ((Number)getResponse.getSource().get(ServiceNameTable.COLUMN_APPLICATION_ID)).intValue();
             return applicationId + Const.ID_SPLIT + serviceName;
         }
-        return Const.UNKNOWN;
+        return Const.EMPTY_STRING;
     }
 
     @Override public int getServiceId(int applicationId, String serviceName) {
@@ -61,8 +61,7 @@ public class ServiceNameEsDAO extends EsDAO implements IServiceNameDAO {
         SearchResponse searchResponse = searchRequestBuilder.get();
         if (searchResponse.getHits().totalHits > 0) {
             SearchHit searchHit = searchResponse.getHits().iterator().next();
-            int serviceId = (int)searchHit.getSource().get(ServiceNameTable.COLUMN_SERVICE_ID);
-            return serviceId;
+            return (int)searchHit.getSource().get(ServiceNameTable.COLUMN_SERVICE_ID);
         }
         return 0;
     }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/service/ServiceEntryDataDefine.java
Patch:
@@ -38,9 +38,9 @@ public class ServiceEntryDataDefine extends DataDefine {
 
     @Override protected void attributeDefine() {
         addAttribute(0, new Attribute(ServiceEntryTable.COLUMN_ID, AttributeType.STRING, new NonOperation()));
-        addAttribute(1, new Attribute(ServiceEntryTable.COLUMN_APPLICATION_ID, AttributeType.INTEGER, new NonOperation()));
+        addAttribute(1, new Attribute(ServiceEntryTable.COLUMN_APPLICATION_ID, AttributeType.INTEGER, new CoverOperation()));
         addAttribute(2, new Attribute(ServiceEntryTable.COLUMN_ENTRY_SERVICE_ID, AttributeType.INTEGER, new CoverOperation()));
-        addAttribute(3, new Attribute(ServiceEntryTable.COLUMN_ENTRY_SERVICE_NAME, AttributeType.STRING, new NonOperation()));
+        addAttribute(3, new Attribute(ServiceEntryTable.COLUMN_ENTRY_SERVICE_NAME, AttributeType.STRING, new CoverOperation()));
         addAttribute(4, new Attribute(ServiceEntryTable.COLUMN_REGISTER_TIME, AttributeType.LONG, new NonOperation()));
         addAttribute(5, new Attribute(ServiceEntryTable.COLUMN_NEWEST_TIME, AttributeType.LONG, new CoverOperation()));
     }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/h2/StorageH2ModuleDefine.java
Patch:
@@ -51,11 +51,11 @@ public class StorageH2ModuleDefine extends StorageModuleDefine {
     }
 
     @Override protected ModuleConfigParser configParser() {
-        return null;
+        return new StorageH2ConfigParser();
     }
 
     @Override protected Client createClient() {
-        return new H2Client();
+        return new H2Client(StorageH2Config.URL, StorageH2Config.USER_NAME, StorageH2Config.PASSWORD);
     }
 
     @Override public StorageInstaller storageInstaller() {

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/GlobalTraceH2DAO.java
Patch:
@@ -66,7 +66,7 @@ public class GlobalTraceH2DAO extends H2DAO implements IGlobalTraceDAO {
             while (rs.next()) {
                 String segmentId = rs.getString(GlobalTraceTable.COLUMN_SEGMENT_ID);
                 logger.debug("segmentId: {}, global trace id: {}", segmentId, globalTraceId);
-                segmentIds.add(globalTraceId);
+                segmentIds.add(segmentId);
             }
         } catch (SQLException | H2ClientException e) {
             logger.error(e.getMessage(), e);

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/IServiceReferenceDAO.java
Patch:
@@ -26,6 +26,4 @@
  */
 public interface IServiceReferenceDAO {
     Map<String, JsonObject> load(int entryServiceId, long startTime, long endTime);
-
-    Map<String, JsonObject> load(String entryServiceName, int entryApplicationId, long startTime, long endTime);
 }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ServiceEntryH2DAO.java
Patch:
@@ -76,7 +76,7 @@ public class ServiceEntryH2DAO extends H2DAO implements IServiceEntryDAO {
             while (rs.next()) {
                 int appId = rs.getInt(ServiceEntryTable.COLUMN_APPLICATION_ID);
                 int entryServiceId = rs.getInt(ServiceEntryTable.COLUMN_ENTRY_SERVICE_ID);
-                String applicationCode = ApplicationCache.get(applicationId);
+                String applicationCode = ApplicationCache.get(appId);
                 String entryServiceName1 = rs.getString(ServiceEntryTable.COLUMN_ENTRY_SERVICE_NAME);
 
                 JsonObject row = new JsonObject();

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/jetty/UIJettyModuleDefine.java
Patch:
@@ -39,7 +39,6 @@
 import org.skywalking.apm.collector.ui.jetty.handler.instancemetric.InstanceOsInfoGetHandler;
 import org.skywalking.apm.collector.ui.jetty.handler.servicetree.EntryServiceGetHandler;
 import org.skywalking.apm.collector.ui.jetty.handler.servicetree.ServiceTreeGetByIdHandler;
-import org.skywalking.apm.collector.ui.jetty.handler.servicetree.ServiceTreeGetByNameHandler;
 import org.skywalking.apm.collector.ui.jetty.handler.time.AllInstanceLastTimeGetHandler;
 import org.skywalking.apm.collector.ui.jetty.handler.time.OneInstanceLastTimeGetHandler;
 
@@ -89,7 +88,6 @@ public class UIJettyModuleDefine extends UIModuleDefine {
         handlers.add(new InstanceMetricGetRangeTimeBucketHandler());
         handlers.add(new EntryServiceGetHandler());
         handlers.add(new ServiceTreeGetByIdHandler());
-        handlers.add(new ServiceTreeGetByNameHandler());
         return handlers;
     }
 }

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/skywalking/apm/plugin/jedis/v2/RedisMethodMatch.java
Patch:
@@ -39,7 +39,7 @@ private ElementMatcher.Junction<MethodDescription> getIntersectionalMethodMacher
             .or(named("zrangeByScore")).or(named("smove")).or(named("lset"))
             .or(named("decrBy")).or(named("pttl")).or(named("scan"))
             .or(named("zrank")).or(named("blpop")).or(named("rpoplpush"))
-            .or(named("zremrangeByLex")).or(named("getDefault")).or(named("lpop"))
+            .or(named("zremrangeByLex")).or(named("get")).or(named("lpop"))
             .or(named("persist")).or(named("scriptExists")).or(named("georadius"))
             .or(named("set")).or(named("srandmember")).or(named("incr")).or(named("setbit"))
             .or(named("hexists")).or(named("expireAt")).or(named("pexpire")).or(named("zcard"))

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/FutureGetInterceptor.java
Patch:
@@ -32,7 +32,7 @@ public class FutureGetInterceptor implements InstanceMethodsAroundInterceptor {
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         MethodInterceptResult result) throws Throwable {
         Object[] cacheValues = (Object[])objInst.getSkyWalkingDynamicField();
-        ContextManager.createLocalSpan("future/getDefault:" + ((URI)cacheValues[0]).getPath());
+        ContextManager.createLocalSpan("future/get:" + ((URI)cacheValues[0]).getPath());
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/define/ResponseExtractorFutureInstrumentation.java
Patch:
@@ -48,7 +48,7 @@ public class ResponseExtractorFutureInstrumentation extends ClassInstanceMethods
     private static final String ADD_CALLBACK_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.ResponseCallBackInterceptor";
     private static final String ENHANCE_CLASS = "org.springframework.web.client.AsyncRestTemplate$ResponseExtractorFuture";
     private static final String GET_METHOD_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.FutureGetInterceptor";
-    private static final String GET_METHOD_NAME = "getDefault";
+    private static final String GET_METHOD_NAME = "get";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/skywalking/apm/plugin/spymemcached/v2/define/MemcachedInstrumentation.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * {@link MemcachedInstrumentation} presents that skywalking intercept all constructors and methods of
  * {@link net.spy.memcached.MemcachedClient}.
- * {@link XMemcachedConstructorWithInetSocketAddressListArgInterceptor} intercepts the constructor with
+ * <code>org.skywalking.apm.plugin.spymemcached.v2.MemcachedConstructorWithInetSocketAddressListArgInterceptor</code> intercepts the constructor with
  * argument {@link java.net.InetSocketAddress}.
  *
  * @author IluckySi
@@ -75,7 +75,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
                     return named("touch").or(named("append")).or(named("prepend")).or(named("asyncCAS"))
                         .or(named("cas")).or(named("add")).or(named("set")).or(named("replace"))
                         .or(named("asyncGet")).or(named("asyncGets")).or(named("gets")).or(named("getAndTouch"))
-                        .or(named("getDefault")).or(named("asyncGetBulk")).or(named("asyncGetAndTouch"))
+                        .or(named("get")).or(named("asyncGetBulk")).or(named("asyncGetAndTouch"))
                         .or(named("getBulk")).or(named("getStats")).or(named("incr"))
                         .or(named("decr")).or(named("asyncIncr")).or(named("asyncDecr"))
                         .or(named("delete"));

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/skywalking/apm/plugin/jedis/v2/RedisMethodMatch.java
Patch:
@@ -39,7 +39,7 @@ private ElementMatcher.Junction<MethodDescription> getIntersectionalMethodMacher
             .or(named("zrangeByScore")).or(named("smove")).or(named("lset"))
             .or(named("decrBy")).or(named("pttl")).or(named("scan"))
             .or(named("zrank")).or(named("blpop")).or(named("rpoplpush"))
-            .or(named("zremrangeByLex")).or(named("getDefault")).or(named("lpop"))
+            .or(named("zremrangeByLex")).or(named("get")).or(named("lpop"))
             .or(named("persist")).or(named("scriptExists")).or(named("georadius"))
             .or(named("set")).or(named("srandmember")).or(named("incr")).or(named("setbit"))
             .or(named("hexists")).or(named("expireAt")).or(named("pexpire")).or(named("zcard"))

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/FutureGetInterceptor.java
Patch:
@@ -32,7 +32,7 @@ public class FutureGetInterceptor implements InstanceMethodsAroundInterceptor {
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         MethodInterceptResult result) throws Throwable {
         Object[] cacheValues = (Object[])objInst.getSkyWalkingDynamicField();
-        ContextManager.createLocalSpan("future/getDefault:" + ((URI)cacheValues[0]).getPath());
+        ContextManager.createLocalSpan("future/get:" + ((URI)cacheValues[0]).getPath());
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/define/ResponseExtractorFutureInstrumentation.java
Patch:
@@ -48,7 +48,7 @@ public class ResponseExtractorFutureInstrumentation extends ClassInstanceMethods
     private static final String ADD_CALLBACK_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.ResponseCallBackInterceptor";
     private static final String ENHANCE_CLASS = "org.springframework.web.client.AsyncRestTemplate$ResponseExtractorFuture";
     private static final String GET_METHOD_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.FutureGetInterceptor";
-    private static final String GET_METHOD_NAME = "getDefault";
+    private static final String GET_METHOD_NAME = "get";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/skywalking/apm/plugin/spymemcached/v2/define/MemcachedInstrumentation.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * {@link MemcachedInstrumentation} presents that skywalking intercept all constructors and methods of
  * {@link net.spy.memcached.MemcachedClient}.
- * {@link XMemcachedConstructorWithInetSocketAddressListArgInterceptor} intercepts the constructor with
+ * <code>org.skywalking.apm.plugin.spymemcached.v2.MemcachedConstructorWithInetSocketAddressListArgInterceptor</code> intercepts the constructor with
  * argument {@link java.net.InetSocketAddress}.
  *
  * @author IluckySi
@@ -75,7 +75,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
                     return named("touch").or(named("append")).or(named("prepend")).or(named("asyncCAS"))
                         .or(named("cas")).or(named("add")).or(named("set")).or(named("replace"))
                         .or(named("asyncGet")).or(named("asyncGets")).or(named("gets")).or(named("getAndTouch"))
-                        .or(named("getDefault")).or(named("asyncGetBulk")).or(named("asyncGetAndTouch"))
+                        .or(named("get")).or(named("asyncGetBulk")).or(named("asyncGetAndTouch"))
                         .or(named("getBulk")).or(named("getStats")).or(named("incr"))
                         .or(named("decr")).or(named("asyncIncr")).or(named("asyncDecr"))
                         .or(named("delete"));

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/define/NodeReferenceH2TableDefine.java
Patch:
@@ -32,6 +32,7 @@ public NodeReferenceH2TableDefine() {
     }
 
     @Override public void initialize() {
+        addColumn(new H2ColumnDefine(NodeReferenceTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(NodeReferenceTable.COLUMN_FRONT_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(NodeReferenceTable.COLUMN_BEHIND_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(NodeReferenceTable.COLUMN_BEHIND_PEER, H2ColumnDefine.Type.Varchar.name()));

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/segment/SegmentCostDataDefine.java
Patch:
@@ -28,7 +28,7 @@
 import org.skywalking.apm.collector.storage.define.DataDefine;
 
 /**
- * @author pengys5
+ * @author pengys5H
  */
 public class SegmentCostDataDefine extends DataDefine {
 

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/h2/StorageH2ModuleDefine.java
Patch:
@@ -51,7 +51,7 @@ public class StorageH2ModuleDefine extends StorageModuleDefine {
     }
 
     @Override protected Client createClient() {
-        return new H2Client();
+        return new H2Client(StorageH2Config.URL, StorageH2Config.USER_NAME, StorageH2Config.PASSWORD);
     }
 
     @Override public StorageInstaller storageInstaller() {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/logging/core/LogLevel.java
Patch:
@@ -22,5 +22,5 @@
  * Created by xin on 2016/12/7.
  */
 public enum LogLevel {
-    DEBUG, INFO, WARN, ERROR;
+    DEBUG, INFO, WARN, ERROR, OFF
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/logging/core/LogLevel.java
Patch:
@@ -22,5 +22,5 @@
  * Created by xin on 2016/12/7.
  */
 public enum LogLevel {
-    DEBUG, INFO, WARN, ERROR;
+    DEBUG, INFO, WARN, ERROR, OFF
 }

File: apm-collector/apm-collector-agentserver/src/main/java/org/skywalking/apm/collector/agentserver/AgentServerModuleInstaller.java
Patch:
@@ -20,12 +20,12 @@
 
 import java.util.List;
 import org.skywalking.apm.collector.core.framework.Context;
-import org.skywalking.apm.collector.core.module.MultipleCommonModuleInstaller;
+import org.skywalking.apm.collector.core.module.MultipleModuleInstaller;
 
 /**
  * @author pengys5
  */
-public class AgentServerCommonModuleInstaller extends MultipleCommonModuleInstaller {
+public class AgentServerModuleInstaller extends MultipleModuleInstaller {
 
     @Override public String groupName() {
         return AgentServerModuleGroupDefine.GROUP_NAME;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/AgentStreamModuleInstaller.java
Patch:
@@ -24,13 +24,13 @@
 import org.skywalking.apm.collector.core.config.ConfigException;
 import org.skywalking.apm.collector.core.framework.Context;
 import org.skywalking.apm.collector.core.framework.DefineException;
-import org.skywalking.apm.collector.core.module.MultipleCommonModuleInstaller;
+import org.skywalking.apm.collector.core.module.MultipleModuleInstaller;
 import org.skywalking.apm.collector.core.server.ServerException;
 
 /**
  * @author pengys5
  */
-public class AgentStreamModuleInstaller extends MultipleCommonModuleInstaller {
+public class AgentStreamModuleInstaller extends MultipleModuleInstaller {
 
     @Override public String groupName() {
         return AgentStreamModuleGroupDefine.GROUP_NAME;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/jetty/handler/TraceSegmentServletHandler.java
Patch:
@@ -66,7 +66,7 @@ private void read(BufferedReader bufferedReader) throws IOException {
         while (reader.hasNext()) {
             SegmentParse segmentParse = new SegmentParse();
             TraceSegment traceSegment = jsonReader.read(reader);
-            segmentParse.parse(traceSegment.getGlobalTraceIds(), traceSegment.getTraceSegmentObject());
+            segmentParse.parse(traceSegment.getUpstreamSegment(), SegmentParse.Source.Agent);
         }
         reader.endArray();
     }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/jetty/handler/reader/SegmentJsonReader.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author pengys5
  */
-public class SegmentJsonReader implements StreamJsonReader<TraceSegmentObject> {
+public class SegmentJsonReader implements StreamJsonReader<TraceSegmentObject.Builder> {
 
     private final Logger logger = LoggerFactory.getLogger(SegmentJsonReader.class);
 
@@ -41,7 +41,7 @@ public class SegmentJsonReader implements StreamJsonReader<TraceSegmentObject> {
     private static final String TRACE_SEGMENT_REFERENCE = "rs";
     private static final String SPANS = "ss";
 
-    @Override public TraceSegmentObject read(JsonReader reader) throws IOException {
+    @Override public TraceSegmentObject.Builder read(JsonReader reader) throws IOException {
         TraceSegmentObject.Builder builder = TraceSegmentObject.newBuilder();
 
         reader.beginObject();
@@ -82,6 +82,6 @@ public class SegmentJsonReader implements StreamJsonReader<TraceSegmentObject> {
         }
         reader.endObject();
 
-        return builder.build();
+        return builder;
     }
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/jetty/handler/reader/UniqueIdJsonReader.java
Patch:
@@ -25,16 +25,16 @@
 /**
  * @author pengys5
  */
-public class UniqueIdJsonReader implements StreamJsonReader<UniqueId> {
+public class UniqueIdJsonReader implements StreamJsonReader<UniqueId.Builder> {
 
-    @Override public UniqueId read(JsonReader reader) throws IOException {
+    @Override public UniqueId.Builder read(JsonReader reader) throws IOException {
         UniqueId.Builder builder = UniqueId.newBuilder();
 
         reader.beginArray();
         while (reader.hasNext()) {
             builder.addIdParts(reader.nextLong());
         }
         reader.endArray();
-        return builder.build();
+        return builder;
     }
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/EntrySpanListener.java
Patch:
@@ -18,11 +18,11 @@
 
 package org.skywalking.apm.collector.agentstream.worker.segment;
 
-import org.skywalking.apm.network.proto.SpanObject;
+import org.skywalking.apm.collector.agentstream.worker.segment.standardization.SpanDecorator;
 
 /**
  * @author pengys5
  */
 public interface EntrySpanListener extends SpanListener {
-    void parseEntry(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId);
+    void parseEntry(SpanDecorator spanDecorator, int applicationId, int applicationInstanceId, String segmentId);
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/ExitSpanListener.java
Patch:
@@ -18,11 +18,11 @@
 
 package org.skywalking.apm.collector.agentstream.worker.segment;
 
-import org.skywalking.apm.network.proto.SpanObject;
+import org.skywalking.apm.collector.agentstream.worker.segment.standardization.SpanDecorator;
 
 /**
  * @author pengys5
  */
 public interface ExitSpanListener extends SpanListener {
-    void parseExit(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId);
+    void parseExit(SpanDecorator spanDecorator, int applicationId, int applicationInstanceId, String segmentId);
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/FirstSpanListener.java
Patch:
@@ -18,11 +18,11 @@
 
 package org.skywalking.apm.collector.agentstream.worker.segment;
 
-import org.skywalking.apm.network.proto.SpanObject;
+import org.skywalking.apm.collector.agentstream.worker.segment.standardization.SpanDecorator;
 
 /**
  * @author pengys5
  */
 public interface FirstSpanListener extends SpanListener {
-    void parseFirst(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId);
+    void parseFirst(SpanDecorator spanDecorator, int applicationId, int applicationInstanceId, String segmentId);
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/LocalSpanListener.java
Patch:
@@ -18,11 +18,11 @@
 
 package org.skywalking.apm.collector.agentstream.worker.segment;
 
-import org.skywalking.apm.network.proto.SpanObject;
+import org.skywalking.apm.collector.agentstream.worker.segment.standardization.SpanDecorator;
 
 /**
  * @author pengys5
  */
 public interface LocalSpanListener extends SpanListener {
-    void parseLocal(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId);
+    void parseLocal(SpanDecorator spanDecorator, int applicationId, int applicationInstanceId, String segmentId);
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/RefsListener.java
Patch:
@@ -18,11 +18,11 @@
 
 package org.skywalking.apm.collector.agentstream.worker.segment;
 
-import org.skywalking.apm.network.proto.TraceSegmentReference;
+import org.skywalking.apm.collector.agentstream.worker.segment.standardization.ReferenceDecorator;
 
 /**
  * @author pengys5
  */
 public interface RefsListener extends SpanListener {
-    void parseRef(TraceSegmentReference reference, int applicationId, int applicationInstanceId, String segmentId);
+    void parseRef(ReferenceDecorator referenceDecorator, int applicationId, int applicationInstanceId, String segmentId);
 }

File: apm-collector/apm-collector-agentstream/src/test/java/org/skywalking/apm/collector/agentstream/grpc/handler/TraceSegmentServiceHandlerTestCase.java
Patch:
@@ -21,6 +21,7 @@
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.stub.StreamObserver;
+import org.junit.Test;
 import org.skywalking.apm.network.proto.Downstream;
 import org.skywalking.apm.network.proto.KeyWithStringValue;
 import org.skywalking.apm.network.proto.LogMessage;
@@ -45,6 +46,7 @@ public class TraceSegmentServiceHandlerTestCase {
 
     private TraceSegmentServiceGrpc.TraceSegmentServiceStub stub;
 
+    @Test
     public void testCollect() {
         ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
         stub = TraceSegmentServiceGrpc.newStub(channel);
@@ -70,7 +72,7 @@ public void testCollect() {
         streamObserver.onCompleted();
 
         try {
-            Thread.sleep(30000);
+            Thread.sleep(10000);
         } catch (InterruptedException e) {
         }
     }

File: apm-collector/apm-collector-agentstream/src/test/java/org/skywalking/apm/collector/agentstream/mock/SegmentPost.java
Patch:
@@ -60,6 +60,8 @@ public static void main(String[] args) throws IOException, InterruptedException,
         applicationEsDAO.save(consumerApplication);
         ApplicationDataDefine.Application providerApplication = new ApplicationDataDefine.Application("3", "dubbox-provider", 3);
         applicationEsDAO.save(providerApplication);
+//        ApplicationDataDefine.Application peer = new ApplicationDataDefine.Application("4", "172.25.0.4:20880", 4);
+//        applicationEsDAO.save(peer);
 
         ServiceNameEsDAO serviceNameEsDAO = new ServiceNameEsDAO();
         serviceNameEsDAO.setClient(client);
@@ -84,6 +86,7 @@ public static void main(String[] args) throws IOException, InterruptedException,
 
             DIFF = 0;
             Thread.sleep(1000);
+            break;
         }
     }
 

File: apm-collector/apm-collector-boot/src/main/java/org/skywalking/apm/collector/boot/CollectorBootStartUp.java
Patch:
@@ -19,6 +19,7 @@
 package org.skywalking.apm.collector.boot;
 
 import org.skywalking.apm.collector.core.CollectorException;
+import org.skywalking.apm.collector.core.config.SystemConfigParser;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,6 +32,7 @@ public class CollectorBootStartUp {
 
     public static void main(String[] args) throws CollectorException {
         logger.info("collector starting...");
+        SystemConfigParser.INSTANCE.parse();
         CollectorStarter starter = new CollectorStarter();
         starter.start();
         logger.info("collector start successful.");

File: apm-collector/apm-collector-boot/src/main/java/org/skywalking/apm/collector/boot/CollectorStarter.java
Patch:
@@ -53,6 +53,9 @@ public class CollectorStarter implements Starter {
 
         ServerHolder serverHolder = new ServerHolder();
         for (ModuleGroupDefine moduleGroupDefine : moduleGroupDefineMap.values()) {
+            if (moduleGroupDefine.groupConfigParser() != null) {
+                moduleGroupDefine.groupConfigParser().parse(configuration.get(moduleGroupDefine.name()));
+            }
             moduleGroupDefine.moduleInstaller().injectConfiguration(configuration.get(moduleGroupDefine.name()), moduleDefineMap.get(moduleGroupDefine.name()));
             moduleGroupDefine.moduleInstaller().injectServerHolder(serverHolder);
             moduleGroupDefine.moduleInstaller().preInstall();

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/CommonModuleInstaller.java
Patch:
@@ -36,11 +36,11 @@ public final void injectConfiguration(Map<String, Map> moduleConfig, Map<String,
         this.moduleDefineMap = moduleDefineMap;
     }
 
-    protected final Map<String, Map> getModuleConfig() {
+    final Map<String, Map> getModuleConfig() {
         return moduleConfig;
     }
 
-    protected final Map<String, ModuleDefine> getModuleDefineMap() {
+    final Map<String, ModuleDefine> getModuleDefineMap() {
         return moduleDefineMap;
     }
 

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/ModuleGroupDefine.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.skywalking.apm.collector.core.module;
 
+import org.skywalking.apm.collector.core.config.GroupConfigParser;
 import org.skywalking.apm.collector.core.framework.Context;
 
 /**
@@ -29,4 +30,6 @@ public interface ModuleGroupDefine {
     Context groupContext();
 
     ModuleInstaller moduleInstaller();
+
+    GroupConfigParser groupConfigParser();
 }

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/MultipleModuleInstaller.java
Patch:
@@ -37,11 +37,11 @@
 /**
  * @author pengys5
  */
-public abstract class MultipleCommonModuleInstaller extends CommonModuleInstaller {
+public abstract class MultipleModuleInstaller extends CommonModuleInstaller {
 
-    private final Logger logger = LoggerFactory.getLogger(MultipleCommonModuleInstaller.class);
+    private final Logger logger = LoggerFactory.getLogger(MultipleModuleInstaller.class);
 
-    public MultipleCommonModuleInstaller() {
+    public MultipleModuleInstaller() {
         moduleDefines = new LinkedList<>();
     }
 

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/util/Const.java
Patch:
@@ -31,4 +31,5 @@ public class Const {
     public static final String UNKNOWN = "Unknown";
     public static final String EXCEPTION = "Exception";
     public static final String EMPTY_STRING = "";
+    public static final String FILE_SUFFIX = "sw";
 }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/UIModuleInstaller.java
Patch:
@@ -20,12 +20,12 @@
 
 import java.util.List;
 import org.skywalking.apm.collector.core.framework.Context;
-import org.skywalking.apm.collector.core.module.MultipleCommonModuleInstaller;
+import org.skywalking.apm.collector.core.module.MultipleModuleInstaller;
 
 /**
  * @author pengys5
  */
-public class UICommonModuleInstaller extends MultipleCommonModuleInstaller {
+public class UIModuleInstaller extends MultipleModuleInstaller {
 
     @Override public String groupName() {
         return UIModuleGroupDefine.GROUP_NAME;

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/InstanceEsDAO.java
Patch:
@@ -112,7 +112,7 @@ private Long heartBeatTime(AbstractQueryBuilder queryBuilder) {
 
             JsonObject application = new JsonObject();
             application.addProperty("applicationId", applicationId);
-            application.addProperty("applicationCode", ApplicationCache.getForUI(applicationId));
+            application.addProperty("applicationCode", ApplicationCache.get(applicationId));
             application.addProperty("instanceCount", instanceCount.getValue());
             applications.add(application);
         }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/NodeComponentEsDAO.java
Patch:
@@ -106,7 +106,7 @@ private void buildComponentArray(Terms.Bucket componentBucket, String componentN
             int peerId = peerIdBucket.getKeyAsNumber().intValue();
 
             if (peerId != 0) {
-                String peer = ApplicationCache.getForUI(peerId);
+                String peer = ApplicationCache.get(peerId);
 
                 JsonObject nodeComponentObj = new JsonObject();
                 nodeComponentObj.addProperty("componentName", componentName);

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/NodeMappingEsDAO.java
Patch:
@@ -58,11 +58,11 @@ public class NodeMappingEsDAO extends EsDAO implements INodeMappingDAO {
         JsonArray nodeMappingArray = new JsonArray();
         for (Terms.Bucket applicationIdBucket : applicationIdTerms.getBuckets()) {
             int applicationId = applicationIdBucket.getKeyAsNumber().intValue();
-            String applicationCode = ApplicationCache.getForUI(applicationId);
+            String applicationCode = ApplicationCache.get(applicationId);
             Terms addressIdTerms = applicationIdBucket.getAggregations().get(NodeMappingTable.COLUMN_ADDRESS_ID);
             for (Terms.Bucket addressIdBucket : addressIdTerms.getBuckets()) {
                 int addressId = addressIdBucket.getKeyAsNumber().intValue();
-                String address = ApplicationCache.getForUI(addressId);
+                String address = ApplicationCache.get(addressId);
 
                 if (addressId != 0) {
                     JsonObject nodeMappingObj = new JsonObject();

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/NodeReferenceEsDAO.java
Patch:
@@ -72,13 +72,13 @@ public class NodeReferenceEsDAO extends EsDAO implements INodeReferenceDAO {
         Terms frontApplicationIdTerms = searchResponse.getAggregations().get(NodeReferenceTable.COLUMN_FRONT_APPLICATION_ID);
         for (Terms.Bucket frontApplicationIdBucket : frontApplicationIdTerms.getBuckets()) {
             int applicationId = frontApplicationIdBucket.getKeyAsNumber().intValue();
-            String applicationCode = ApplicationCache.getForUI(applicationId);
+            String applicationCode = ApplicationCache.get(applicationId);
             Terms behindApplicationIdTerms = frontApplicationIdBucket.getAggregations().get(NodeReferenceTable.COLUMN_BEHIND_APPLICATION_ID);
             for (Terms.Bucket behindApplicationIdBucket : behindApplicationIdTerms.getBuckets()) {
                 int behindApplicationId = behindApplicationIdBucket.getKeyAsNumber().intValue();
 
                 if (behindApplicationId != 0) {
-                    String behindApplicationCode = ApplicationCache.getForUI(behindApplicationId);
+                    String behindApplicationCode = ApplicationCache.get(behindApplicationId);
 
                     Sum s1LTE = behindApplicationIdBucket.getAggregations().get(NodeReferenceTable.COLUMN_S1_LTE);
                     Sum s3LTE = behindApplicationIdBucket.getAggregations().get(NodeReferenceTable.COLUMN_S3_LTE);

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ServiceEntryEsDAO.java
Patch:
@@ -75,7 +75,7 @@ private JsonObject parseResponse(SearchResponse searchResponse) {
         for (SearchHit searchHit : searchHits.getHits()) {
             int applicationId = ((Number)searchHit.getSource().get(ServiceEntryTable.COLUMN_APPLICATION_ID)).intValue();
             int entryServiceId = ((Number)searchHit.getSource().get(ServiceEntryTable.COLUMN_ENTRY_SERVICE_ID)).intValue();
-            String applicationCode = ApplicationCache.getForUI(applicationId);
+            String applicationCode = ApplicationCache.get(applicationId);
             String entryServiceName = (String)searchHit.getSource().get(ServiceEntryTable.COLUMN_ENTRY_SERVICE_NAME);
 
             JsonObject row = new JsonObject();

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/service/InstanceHealthService.java
Patch:
@@ -50,7 +50,7 @@ public JsonObject getInstances(long timeBucket, int applicationId) {
         response.add("instances", instances);
 
         instanceList.forEach(instance -> {
-            response.addProperty("applicationCode", ApplicationCache.getForUI(applicationId));
+            response.addProperty("applicationCode", ApplicationCache.get(applicationId));
             response.addProperty("applicationId", applicationId);
 
             IInstPerformanceDAO instPerformanceDAO = (IInstPerformanceDAO)DAOContainer.INSTANCE.get(IInstPerformanceDAO.class.getName());

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/service/SpanService.java
Patch:
@@ -96,7 +96,7 @@ public JsonObject load(String segmentId, int spanId) {
                 if (spanObject.getPeerId() == 0) {
                     peerJson.addProperty("value", spanObject.getPeer());
                 } else {
-                    peerJson.addProperty("value", ApplicationCache.getForUI(spanObject.getPeerId()));
+                    peerJson.addProperty("value", ApplicationCache.get(spanObject.getPeerId()));
                 }
                 tagsArray.add(peerJson);
 

File: apm-sniffer/apm-sdk-plugin/grpc-1.x-plugin/src/test/java/org/skywalking/apm/plugin/grpc/v1/ServerCallHandlerInterceptorTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Matchers;
 import org.mockito.Mock;
+import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 
@@ -34,6 +35,7 @@
 import static org.powermock.api.mockito.PowerMockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PrepareForTest(MethodDescriptor.class)
 public class ServerCallHandlerInterceptorTest {
     @Mock
     private EnhancedInstance enhancedInstance;

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/ModuleConfigLoader.java
Patch:
@@ -19,7 +19,7 @@
 package org.skywalking.apm.collector.core.module;
 
 import java.io.FileNotFoundException;
-import java.io.FileReader;
+import java.io.Reader;
 import java.util.Map;
 import org.skywalking.apm.collector.core.config.ConfigLoader;
 import org.skywalking.apm.collector.core.framework.DefineException;
@@ -39,8 +39,8 @@ public class ModuleConfigLoader implements ConfigLoader<Map<String, Map>> {
         Yaml yaml = new Yaml();
         try {
             try {
-                FileReader applicationFileReader = ResourceUtils.read("application.yml");
-                return (Map<String, Map>)yaml.load(applicationFileReader);
+                Reader applicationReader = ResourceUtils.read("application.yml");
+                return (Map<String, Map>)yaml.load(applicationReader);
             } catch (FileNotFoundException e) {
                 logger.info("Could not found application.yml file, use default");
                 return (Map<String, Map>)yaml.load(ResourceUtils.read("application-default.yml"));

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/test/java/org/skywalking/apm/plugin/spymemcached/v2/MemcachedMethodInterceptorTest.java
Patch:
@@ -112,7 +112,7 @@ private void assertMemcacheSpan(AbstractTracingSpan span) {
         assertThat(span.isExit(), is(true));
         assertThat(SpanHelper.getComponentId(span), is(20));
         List<KeyValuePair> tags = SpanHelper.getTags(span);
-        assertThat(tags.get(0).getValue(), is("Memcache"));
+        assertThat(tags.get(0).getValue(), is("Memcached"));
         assertThat(tags.get(1).getValue(), is("set OperationKey"));
         assertThat(SpanHelper.getLayer(span), is(SpanLayer.DB));
     }

File: apm-network/src/main/java/org/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -63,7 +63,7 @@ public class ComponentsDefine {
 
     public static final OfficialComponent JETTY_SERVER = new OfficialComponent(19, "JettyServer");
 
-    public static final OfficialComponent MEMCACHE = new OfficialComponent(20, "Memcache");
+    public static final OfficialComponent MEMCACHED = new OfficialComponent(20, "Memcached");
 
     public static final OfficialComponent SHARDING_JDBC = new OfficialComponent(21, "ShardingJDBC");
 
@@ -96,7 +96,7 @@ public ComponentsDefine() {
         addComponent(NUTZ_HTTP);
         addComponent(JETTY_CLIENT);
         addComponent(JETTY_SERVER);
-        addComponent(MEMCACHE);
+        addComponent(MEMCACHED);
         addComponent(SHARDING_JDBC);
     }
 
@@ -111,4 +111,4 @@ public String getComponentName(int componentId) {
             return components[componentId];
         }
     }
-}
\ No newline at end of file
+}

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/skywalking/apm/plugin/spymemcached/v2/MemcachedMethodInterceptor.java
Patch:
@@ -37,8 +37,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {
         String peer = String.valueOf(objInst.getSkyWalkingDynamicField());
         AbstractSpan span = ContextManager.createExitSpan(SPY_MEMCACHE + method.getName(), peer);
-        span.setComponent(ComponentsDefine.MEMCACHE);
-        Tags.DB_TYPE.set(span, ComponentsDefine.MEMCACHE.getName());
+        span.setComponent(ComponentsDefine.MEMCACHED);
+        Tags.DB_TYPE.set(span, ComponentsDefine.MEMCACHED.getName());
         SpanLayer.asDB(span);
         Tags.DB_STATEMENT.set(span, method.getName() + " " + allArguments[0]);
     }

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/ModuleConfigLoader.java
Patch:
@@ -19,7 +19,7 @@
 package org.skywalking.apm.collector.core.module;
 
 import java.io.FileNotFoundException;
-import java.io.FileReader;
+import java.io.Reader;
 import java.util.Map;
 import org.skywalking.apm.collector.core.config.ConfigLoader;
 import org.skywalking.apm.collector.core.framework.DefineException;
@@ -39,8 +39,8 @@ public class ModuleConfigLoader implements ConfigLoader<Map<String, Map>> {
         Yaml yaml = new Yaml();
         try {
             try {
-                FileReader applicationFileReader = ResourceUtils.read("application.yml");
-                return (Map<String, Map>)yaml.load(applicationFileReader);
+                Reader applicationReader = ResourceUtils.read("application.yml");
+                return (Map<String, Map>)yaml.load(applicationReader);
             } catch (FileNotFoundException e) {
                 logger.info("Could not found application.yml file, use default");
                 return (Map<String, Map>)yaml.load(ResourceUtils.read("application-default.yml"));

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/ConstructorInter.java
Patch:
@@ -22,7 +22,7 @@
 import net.bytebuddy.implementation.bind.annotation.RuntimeType;
 import net.bytebuddy.implementation.bind.annotation.This;
 import org.skywalking.apm.agent.core.plugin.PluginException;
-import org.skywalking.apm.agent.core.plugin.interceptor.loader.InterceptorInstanceLoader;
+import org.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/InstMethodsInter.java
Patch:
@@ -26,7 +26,7 @@
 import net.bytebuddy.implementation.bind.annotation.SuperCall;
 import net.bytebuddy.implementation.bind.annotation.This;
 import org.skywalking.apm.agent.core.plugin.PluginException;
-import org.skywalking.apm.agent.core.plugin.interceptor.loader.InterceptorInstanceLoader;
+import org.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/InstMethodsInterWithOverrideArgs.java
Patch:
@@ -25,7 +25,7 @@
 import net.bytebuddy.implementation.bind.annotation.RuntimeType;
 import net.bytebuddy.implementation.bind.annotation.This;
 import org.skywalking.apm.agent.core.plugin.PluginException;
-import org.skywalking.apm.agent.core.plugin.interceptor.loader.InterceptorInstanceLoader;
+import org.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/StaticMethodsInter.java
Patch:
@@ -24,7 +24,7 @@
 import net.bytebuddy.implementation.bind.annotation.Origin;
 import net.bytebuddy.implementation.bind.annotation.RuntimeType;
 import net.bytebuddy.implementation.bind.annotation.SuperCall;
-import org.skywalking.apm.agent.core.plugin.interceptor.loader.InterceptorInstanceLoader;
+import org.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/StaticMethodsInterWithOverrideArgs.java
Patch:
@@ -23,7 +23,7 @@
 import net.bytebuddy.implementation.bind.annotation.Morph;
 import net.bytebuddy.implementation.bind.annotation.Origin;
 import net.bytebuddy.implementation.bind.annotation.RuntimeType;
-import org.skywalking.apm.agent.core.plugin.interceptor.loader.InterceptorInstanceLoader;
+import org.skywalking.apm.agent.core.plugin.loader.InterceptorInstanceLoader;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -86,7 +86,7 @@ public void shutdown() throws Throwable {
     }
 
     /**
-     * @return true, if sampling mechanism is on, and get the sampling factor successfully.
+     * @return true, if sampling mechanism is on, and getDefault the sampling factor successfully.
      */
     public boolean trySampling() {
         if (on) {

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/skywalking/apm/plugin/jedis/v2/RedisMethodMatch.java
Patch:
@@ -39,7 +39,7 @@ private ElementMatcher.Junction<MethodDescription> getIntersectionalMethodMacher
             .or(named("zrangeByScore")).or(named("smove")).or(named("lset"))
             .or(named("decrBy")).or(named("pttl")).or(named("scan"))
             .or(named("zrank")).or(named("blpop")).or(named("rpoplpush"))
-            .or(named("zremrangeByLex")).or(named("get")).or(named("lpop"))
+            .or(named("zremrangeByLex")).or(named("getDefault")).or(named("lpop"))
             .or(named("persist")).or(named("scriptExists")).or(named("georadius"))
             .or(named("set")).or(named("srandmember")).or(named("incr")).or(named("setbit"))
             .or(named("hexists")).or(named("expireAt")).or(named("pexpire")).or(named("zcard"))

File: apm-sniffer/apm-sdk-plugin/sharding-jdbc-1.5.x-plugin/src/main/java/org/skywalking/apm/plugin/sjdbc/ExecuteEventListener.java
Patch:
@@ -35,8 +35,8 @@
 import org.skywalking.apm.plugin.sjdbc.define.AsyncExecuteInterceptor;
 
 /**
- * Sharding-jdbc provides {@link EventBusInstance} to help external systems get events of sql execution.
- * {@link ExecuteEventListener} can get sql statement start and end events, resulting in db span.
+ * Sharding-jdbc provides {@link EventBusInstance} to help external systems getDefault events of sql execution.
+ * {@link ExecuteEventListener} can getDefault sql statement start and end events, resulting in db span.
  * 
  * @author gaohongtao
  */

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/FutureGetInterceptor.java
Patch:
@@ -32,7 +32,7 @@ public class FutureGetInterceptor implements InstanceMethodsAroundInterceptor {
     public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         MethodInterceptResult result) throws Throwable {
         Object[] cacheValues = (Object[])objInst.getSkyWalkingDynamicField();
-        ContextManager.createLocalSpan("future/get:" + ((URI)cacheValues[0]).getPath());
+        ContextManager.createLocalSpan("future/getDefault:" + ((URI)cacheValues[0]).getPath());
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/define/ResponseExtractorFutureInstrumentation.java
Patch:
@@ -32,7 +32,7 @@
 import static org.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 /**
- * {@link ResponseExtractorFutureInstrumentation} enhance the <code>addCallback</code> method and <code>get</code>
+ * {@link ResponseExtractorFutureInstrumentation} enhance the <code>addCallback</code> method and <code>getDefault</code>
  * method of <code>org.springframework.web.client.AsyncRestTemplate$ResponseExtractorFuture</code> by
  * <code>org.skywalking.apm.plugin.spring.resttemplate.async.ResponseCallBackInterceptor</code> and
  * <code>org.skywalking.apm.plugin.spring.resttemplate.async.FutureGetInterceptor</code>.
@@ -48,7 +48,7 @@ public class ResponseExtractorFutureInstrumentation extends ClassInstanceMethods
     private static final String ADD_CALLBACK_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.ResponseCallBackInterceptor";
     private static final String ENHANCE_CLASS = "org.springframework.web.client.AsyncRestTemplate$ResponseExtractorFuture";
     private static final String GET_METHOD_INTERCEPTOR = "org.skywalking.apm.plugin.spring.resttemplate.async.FutureGetInterceptor";
-    private static final String GET_METHOD_NAME = "get";
+    private static final String GET_METHOD_NAME = "getDefault";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/skywalking/apm/plugin/spymemcached/v2/define/MemcachedInstrumentation.java
Patch:
@@ -75,7 +75,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
                     return named("touch").or(named("append")).or(named("prepend")).or(named("asyncCAS"))
                         .or(named("cas")).or(named("add")).or(named("set")).or(named("replace"))
                         .or(named("asyncGet")).or(named("asyncGets")).or(named("gets")).or(named("getAndTouch"))
-                        .or(named("get")).or(named("asyncGetBulk")).or(named("asyncGetAndTouch"))
+                        .or(named("getDefault")).or(named("asyncGetBulk")).or(named("asyncGetAndTouch"))
                         .or(named("getBulk")).or(named("getStats")).or(named("incr"))
                         .or(named("decr")).or(named("asyncIncr")).or(named("asyncDecr"))
                         .or(named("delete"));

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/skywalking/apm/toolkit/activation/trace/TraceContextInterceptor.java
Patch:
@@ -43,6 +43,6 @@ public Object afterMethod(Class clazz, Method method, Object[] allArguments, Cla
     @Override
     public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes,
         Throwable t) {
-        logger.error("Failed to get trace Id.", t);
+        logger.error("Failed to getDefault trace Id.", t);
     }
 }

File: apm-network/src/main/java/org/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -63,7 +63,7 @@ public class ComponentsDefine {
 
     public static final OfficialComponent JETTY_SERVER = new OfficialComponent(19, "JettyServer");
 
-    public static final OfficialComponent MEMCACHE = new OfficialComponent(20, "Memcache");
+    public static final OfficialComponent MEMCACHED = new OfficialComponent(20, "Memcached");
 
     public static final OfficialComponent SHARDING_JDBC = new OfficialComponent(21, "ShardingJDBC");
 
@@ -96,7 +96,7 @@ public ComponentsDefine() {
         addComponent(NUTZ_HTTP);
         addComponent(JETTY_CLIENT);
         addComponent(JETTY_SERVER);
-        addComponent(MEMCACHE);
+        addComponent(MEMCACHED);
         addComponent(SHARDING_JDBC);
     }
 
@@ -111,4 +111,4 @@ public String getComponentName(int componentId) {
             return components[componentId];
         }
     }
-}
\ No newline at end of file
+}

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/skywalking/apm/plugin/spymemcached/v2/MemcachedMethodInterceptor.java
Patch:
@@ -37,8 +37,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {
         String peer = String.valueOf(objInst.getSkyWalkingDynamicField());
         AbstractSpan span = ContextManager.createExitSpan(SPY_MEMCACHE + method.getName(), peer);
-        span.setComponent(ComponentsDefine.MEMCACHE);
-        Tags.DB_TYPE.set(span, ComponentsDefine.MEMCACHE.getName());
+        span.setComponent(ComponentsDefine.MEMCACHED);
+        Tags.DB_TYPE.set(span, ComponentsDefine.MEMCACHED.getName());
         SpanLayer.asDB(span);
         Tags.DB_STATEMENT.set(span, method.getName() + " " + allArguments[0]);
     }

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/test/java/org/skywalking/apm/plugin/spymemcached/v2/MemcachedMethodInterceptorTest.java
Patch:
@@ -112,7 +112,7 @@ private void assertMemcacheSpan(AbstractTracingSpan span) {
         assertThat(span.isExit(), is(true));
         assertThat(SpanHelper.getComponentId(span), is(20));
         List<KeyValuePair> tags = SpanHelper.getTags(span);
-        assertThat(tags.get(0).getValue(), is("Memcache"));
+        assertThat(tags.get(0).getValue(), is("Memcached"));
         assertThat(tags.get(1).getValue(), is("set OperationKey"));
         assertThat(SpanHelper.getLayer(span), is(SpanLayer.DB));
     }

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/test/java/org/skywalking/apm/plugin/spymemcached/v2/MemcachedMethodInterceptorTest.java
Patch:
@@ -112,7 +112,7 @@ private void assertMemcacheSpan(AbstractTracingSpan span) {
         assertThat(span.isExit(), is(true));
         assertThat(SpanHelper.getComponentId(span), is(20));
         List<KeyValuePair> tags = SpanHelper.getTags(span);
-        assertThat(tags.get(0).getValue(), is("Memcache"));
+        assertThat(tags.get(0).getValue(), is("Memcached"));
         assertThat(tags.get(1).getValue(), is("set OperationKey"));
         assertThat(SpanHelper.getLayer(span), is(SpanLayer.DB));
     }

File: apm-network/src/main/java/org/skywalking/apm/network/trace/component/ComponentsDefine.java
Patch:
@@ -63,7 +63,7 @@ public class ComponentsDefine {
 
     public static final OfficialComponent JETTY_SERVER = new OfficialComponent(19, "JettyServer");
 
-    public static final OfficialComponent MEMCACHE = new OfficialComponent(20, "Memcache");
+    public static final OfficialComponent MEMCACHED = new OfficialComponent(20, "Memcached");
 
     public static final OfficialComponent SHARDING_JDBC = new OfficialComponent(21, "ShardingJDBC");
 
@@ -96,7 +96,7 @@ public ComponentsDefine() {
         addComponent(NUTZ_HTTP);
         addComponent(JETTY_CLIENT);
         addComponent(JETTY_SERVER);
-        addComponent(MEMCACHE);
+        addComponent(MEMCACHED);
         addComponent(SHARDING_JDBC);
     }
 
@@ -111,4 +111,4 @@ public String getComponentName(int componentId) {
             return components[componentId];
         }
     }
-}
\ No newline at end of file
+}

File: apm-sniffer/apm-sdk-plugin/spymemcached-2.x-plugin/src/main/java/org/skywalking/apm/plugin/spymemcached/v2/MemcachedMethodInterceptor.java
Patch:
@@ -37,8 +37,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {
         String peer = String.valueOf(objInst.getSkyWalkingDynamicField());
         AbstractSpan span = ContextManager.createExitSpan(SPY_MEMCACHE + method.getName(), peer);
-        span.setComponent(ComponentsDefine.MEMCACHE);
-        Tags.DB_TYPE.set(span, ComponentsDefine.MEMCACHE.getName());
+        span.setComponent(ComponentsDefine.MEMCACHED);
+        Tags.DB_TYPE.set(span, ComponentsDefine.MEMCACHED.getName());
         SpanLayer.asDB(span);
         Tags.DB_STATEMENT.set(span, method.getName() + " " + allArguments[0]);
     }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/logging/SystemOutWriter.java
Patch:
@@ -35,7 +35,7 @@ public void write(String message) {
         out.println(message);
     }
 
-    public PrintStream getStream(){
+    public PrintStream getStream() {
         return System.out;
     }
 }

File: apm-sniffer/apm-agent/src/main/java/org/skywalking/apm/agent/SkyWalkingAgent.java
Patch:
@@ -27,6 +27,7 @@
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.conf.SnifferConfigInitializer;
 import org.skywalking.apm.agent.core.logging.EasyLogResolver;
+import org.skywalking.apm.agent.core.logging.SystemOutWriter;
 import org.skywalking.apm.agent.core.plugin.AbstractClassEnhancePluginDefine;
 import org.skywalking.apm.agent.core.plugin.EnhanceContext;
 import org.skywalking.apm.agent.core.plugin.PluginBootstrap;
@@ -66,7 +67,8 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th
 
             ServiceManager.INSTANCE.boot();
         } catch (Exception e) {
-            logger.error(e, "skywalking agent shutdown.");
+            SystemOutWriter.INSTANCE.write("skywalking agent is shutting down.");
+            e.printStackTrace(SystemOutWriter.INSTANCE.getStream());
             return;
         }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ContextManager.java
Patch:
@@ -153,7 +153,7 @@ public static void continued(ContextSnapshot snapshot) {
         if (snapshot == null) {
             throw new IllegalArgumentException("ContextSnapshot can't be null.");
         }
-        if (snapshot.isValid()) {
+        if (snapshot.isValid() && !snapshot.isFromCurrent()) {
             get().continued(snapshot);
         }
     }

File: apm-collector/apm-collector-agentstream/src/test/java/org/skywalking/apm/collector/agentstream/jetty/handler/reader/TraceSegmentJsonReaderTestCase.java
Patch:
@@ -34,7 +34,6 @@ public class TraceSegmentJsonReaderTestCase {
     public void testRead() throws IOException {
         TraceSegmentJsonReader reader = new TraceSegmentJsonReader();
         JsonElement jsonElement = JsonFileReader.INSTANCE.read("json/segment/normal/dubbox-consumer.json");
-        System.out.println(jsonElement.toString());
 
         JsonReader jsonReader = new JsonReader(new StringReader(jsonElement.toString()));
         jsonReader.beginArray();

File: apm-collector/apm-collector-stream/src/test/java/org/skywalking/apm/collector/stream/worker/util/TimeBucketUtilsTestCase.java
Patch:
@@ -57,10 +57,7 @@ public void test() {
         Calendar calendar = Calendar.getInstance();
         calendar.setTimeInMillis(1490922929258L);
         calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND) - 3);
-//        System.out.println(calendar.getTimeInMillis());
         calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND) - 2);
-//        System.out.println(calendar.getTimeInMillis());
         calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND) - 2);
-//        System.out.println(calendar.getTimeInMillis());
     }
 }

File: apm-commons/apm-datacarrier/src/test/java/org/skywalking/apm/commons/datacarrier/consumer/SampleConsumer.java
Patch:
@@ -36,7 +36,7 @@ public void init() {
     public void consume(List<SampleData> data) {
         for (SampleData one : data) {
             one.setIntValue(this.hashCode());
-            ConsumerTest.buffer.offer(one);
+            ConsumerTest.BUFFER.offer(one);
         }
     }
 

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/boot/DefaultNamedThreadFactoryTest.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.skywalking.apm.agent.core.boot;
 
+import org.junit.Assert;
 import org.junit.Test;
 
 import static org.junit.Assert.assertNotNull;
@@ -36,6 +37,6 @@ public void run() {
         });
         newThread.start();
         assertNotNull(newThread.getName());
-        assert(newThread.getName().contains("DefaultNamedThreadFactoryTest"));
+        Assert.assertTrue(newThread.getName().contains("DefaultNamedThreadFactoryTest"));
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/logging/SystemOutWriterTest.java
Patch:
@@ -31,11 +31,11 @@
  * Created by wusheng on 2017/2/28.
  */
 public class SystemOutWriterTest {
-    private static PrintStream outRef;
+    private static PrintStream OUT_REF;
 
     @BeforeClass
     public static void initAndHoldOut() {
-        outRef = System.out;
+        OUT_REF = System.out;
     }
 
     @Test
@@ -50,6 +50,6 @@ public void testWrite() {
 
     @AfterClass
     public static void reset() {
-        System.setOut(outRef);
+        System.setOut(OUT_REF);
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/logging/WriterFactoryTest.java
Patch:
@@ -30,11 +30,11 @@
  * Created by wusheng on 2017/2/28.
  */
 public class WriterFactoryTest {
-    private static PrintStream errRef;
+    private static PrintStream ERR_REF;
 
     @BeforeClass
     public static void initAndHoldOut() {
-        errRef = System.err;
+        ERR_REF = System.err;
     }
 
     /**
@@ -54,6 +54,6 @@ public void testGetLogWriter() {
     @AfterClass
     public static void reset() {
         Config.Logging.DIR = "";
-        System.setErr(errRef);
+        System.setErr(ERR_REF);
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/logging/EasyLoggerTest.java
Patch:
@@ -105,7 +105,7 @@ public void testFormat() {
         String formatLines = logger.format(exception);
         String[] lines = formatLines.split(Constants.LINE_SEPARATOR);
         Assert.assertEquals("java.lang.NullPointerException", lines[1]);
-        Assert.assertEquals("\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:86)", lines[2]);
+        Assert.assertEquals("\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:103)", lines[2]);
     }
 
     @AfterClass

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/NoopSpan.java
Patch:
@@ -39,7 +39,7 @@ public AbstractSpan log(Throwable t) {
     }
 
     @Override public AbstractSpan errorOccurred() {
-        return null;
+        return this;
     }
 
     public void finish() {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/JVMService.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
@@ -57,7 +58,6 @@ public class JVMService implements BootService, Runnable {
     private volatile ScheduledFuture<?> collectMetricFuture;
     private volatile ScheduledFuture<?> sendMetricFuture;
     private Sender sender;
-
     @Override
     public void beforeBoot() throws Throwable {
         queue = new LinkedBlockingQueue(Config.Jvm.BUFFER_SIZE);
@@ -68,10 +68,10 @@ public void beforeBoot() throws Throwable {
     @Override
     public void boot() throws Throwable {
         collectMetricFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("JVMService-produce"))
             .scheduleAtFixedRate(this, 0, 1, TimeUnit.SECONDS);
         sendMetricFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("JVMService-consume"))
             .scheduleAtFixedRate(sender, 0, 1, TimeUnit.SECONDS);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/AppAndServiceRegisterClient.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
@@ -89,7 +90,7 @@ public void beforeBoot() throws Throwable {
     @Override
     public void boot() throws Throwable {
         applicationRegisterFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("AppAndServiceRegisterClient"))
             .scheduleAtFixedRate(this, 0, Config.Collector.APP_AND_SERVICE_REGISTER_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/CollectorDiscoveryService.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.conf.Config;
 
 /**
@@ -39,7 +40,7 @@ public void beforeBoot() throws Throwable {
 
     @Override
     public void boot() throws Throwable {
-        future = Executors.newSingleThreadScheduledExecutor()
+        future = Executors.newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("CollectorDiscoveryService"))
             .scheduleAtFixedRate(new DiscoveryRestServiceClient(), 0,
                 Config.Collector.DISCOVERY_CHECK_INTERVAL, TimeUnit.SECONDS);
     }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/GRPCChannelManager.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
@@ -58,7 +59,7 @@ public void beforeBoot() throws Throwable {
     @Override
     public void boot() throws Throwable {
         connectCheckFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("GRPCChannelManager"))
             .scheduleAtFixedRate(this, 0, GRPC_CHANNEL_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.skywalking.apm.logging.ILog;
@@ -63,7 +64,7 @@ public void boot() throws Throwable {
             on = true;
             this.resetSamplingFactor();
             ScheduledExecutorService service = Executors
-                .newSingleThreadScheduledExecutor();
+                .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("SamplingService"));
             scheduledFuture = service.scheduleAtFixedRate(new Runnable() {
                 @Override
                 public void run() {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/boot/DefaultNamedThreadFactory.java
Patch:
@@ -32,8 +32,7 @@ public DefaultNamedThreadFactory(String name) {
     }
     @Override
     public Thread newThread(Runnable r) {
-        Thread t = new Thread();
-        t.setName(namePrefix + threadSeq.getAndIncrement());
+        Thread t = new Thread(null, r,namePrefix + threadSeq.getAndIncrement(),0);
         t.setDaemon(true);
         return t;
     }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/AppAndServiceRegisterClient.java
Patch:
@@ -106,6 +106,7 @@ public void shutdown() throws Throwable {
 
     @Override
     public void run() {
+        logger.debug("AppAndServiceRegisterClient running, status:{}.",status);
         boolean shouldTry = true;
         while (CONNECTED.equals(status) && shouldTry) {
             shouldTry = false;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/NoopSpan.java
Patch:
@@ -39,7 +39,7 @@ public AbstractSpan log(Throwable t) {
     }
 
     @Override public AbstractSpan errorOccurred() {
-        return null;
+        return this;
     }
 
     public void finish() {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/JVMService.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
@@ -57,7 +58,6 @@ public class JVMService implements BootService, Runnable {
     private volatile ScheduledFuture<?> collectMetricFuture;
     private volatile ScheduledFuture<?> sendMetricFuture;
     private Sender sender;
-
     @Override
     public void beforeBoot() throws Throwable {
         queue = new LinkedBlockingQueue(Config.Jvm.BUFFER_SIZE);
@@ -68,10 +68,10 @@ public void beforeBoot() throws Throwable {
     @Override
     public void boot() throws Throwable {
         collectMetricFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("JVMService-produce"))
             .scheduleAtFixedRate(this, 0, 1, TimeUnit.SECONDS);
         sendMetricFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("JVMService-consume"))
             .scheduleAtFixedRate(sender, 0, 1, TimeUnit.SECONDS);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/AppAndServiceRegisterClient.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
@@ -89,7 +90,7 @@ public void beforeBoot() throws Throwable {
     @Override
     public void boot() throws Throwable {
         applicationRegisterFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("AppAndServiceRegisterClient"))
             .scheduleAtFixedRate(this, 0, Config.Collector.APP_AND_SERVICE_REGISTER_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/CollectorDiscoveryService.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.conf.Config;
 
 /**
@@ -39,7 +40,7 @@ public void beforeBoot() throws Throwable {
 
     @Override
     public void boot() throws Throwable {
-        future = Executors.newSingleThreadScheduledExecutor()
+        future = Executors.newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("CollectorDiscoveryService"))
             .scheduleAtFixedRate(new DiscoveryRestServiceClient(), 0,
                 Config.Collector.DISCOVERY_CHECK_INTERVAL, TimeUnit.SECONDS);
     }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/GRPCChannelManager.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
@@ -58,7 +59,7 @@ public void beforeBoot() throws Throwable {
     @Override
     public void boot() throws Throwable {
         connectCheckFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("GRPCChannelManager"))
             .scheduleAtFixedRate(this, 0, GRPC_CHANNEL_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.skywalking.apm.logging.ILog;
@@ -63,7 +64,7 @@ public void boot() throws Throwable {
             on = true;
             this.resetSamplingFactor();
             ScheduledExecutorService service = Executors
-                .newSingleThreadScheduledExecutor();
+                .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("SamplingService"));
             scheduledFuture = service.scheduleAtFixedRate(new Runnable() {
                 @Override
                 public void run() {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/NoopSpan.java
Patch:
@@ -39,7 +39,7 @@ public AbstractSpan log(Throwable t) {
     }
 
     @Override public AbstractSpan errorOccurred() {
-        return null;
+        return this;
     }
 
     public void finish() {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/JVMService.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
@@ -57,7 +58,6 @@ public class JVMService implements BootService, Runnable {
     private volatile ScheduledFuture<?> collectMetricFuture;
     private volatile ScheduledFuture<?> sendMetricFuture;
     private Sender sender;
-
     @Override
     public void beforeBoot() throws Throwable {
         queue = new LinkedBlockingQueue(Config.Jvm.BUFFER_SIZE);
@@ -68,10 +68,10 @@ public void beforeBoot() throws Throwable {
     @Override
     public void boot() throws Throwable {
         collectMetricFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("JVMService-produce"))
             .scheduleAtFixedRate(this, 0, 1, TimeUnit.SECONDS);
         sendMetricFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("JVMService-consume"))
             .scheduleAtFixedRate(sender, 0, 1, TimeUnit.SECONDS);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/AppAndServiceRegisterClient.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
@@ -89,7 +90,7 @@ public void beforeBoot() throws Throwable {
     @Override
     public void boot() throws Throwable {
         applicationRegisterFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("AppAndServiceRegisterClient"))
             .scheduleAtFixedRate(this, 0, Config.Collector.APP_AND_SERVICE_REGISTER_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/CollectorDiscoveryService.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.conf.Config;
 
 /**
@@ -39,7 +40,7 @@ public void beforeBoot() throws Throwable {
 
     @Override
     public void boot() throws Throwable {
-        future = Executors.newSingleThreadScheduledExecutor()
+        future = Executors.newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("CollectorDiscoveryService"))
             .scheduleAtFixedRate(new DiscoveryRestServiceClient(), 0,
                 Config.Collector.DISCOVERY_CHECK_INTERVAL, TimeUnit.SECONDS);
     }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/GRPCChannelManager.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
@@ -58,7 +59,7 @@ public void beforeBoot() throws Throwable {
     @Override
     public void boot() throws Throwable {
         connectCheckFuture = Executors
-            .newSingleThreadScheduledExecutor()
+            .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("GRPCChannelManager"))
             .scheduleAtFixedRate(this, 0, GRPC_CHANNEL_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.skywalking.apm.agent.core.boot.BootService;
+import org.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.skywalking.apm.logging.ILog;
@@ -63,7 +64,7 @@ public void boot() throws Throwable {
             on = true;
             this.resetSamplingFactor();
             ScheduledExecutorService service = Executors
-                .newSingleThreadScheduledExecutor();
+                .newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory("SamplingService"));
             scheduledFuture = service.scheduleAtFixedRate(new Runnable() {
                 @Override
                 public void run() {

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/logging/EasyLoggerTest.java
Patch:
@@ -105,7 +105,7 @@ public void testFormat() {
         String formatLines = logger.format(exception);
         String[] lines = formatLines.split(Constants.LINE_SEPARATOR);
         Assert.assertEquals("java.lang.NullPointerException", lines[1]);
-        Assert.assertEquals("\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:86)", lines[2]);
+        Assert.assertEquals("\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:103)", lines[2]);
     }
 
     @AfterClass

File: apm-sniffer/apm-agent/src/main/java/org/skywalking/apm/agent/SkyWalkingAgent.java
Patch:
@@ -61,7 +61,7 @@ public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDesc
                     DynamicType.Builder<?> newBuilder = builder;
                     EnhanceContext context = new EnhanceContext();
                     for (AbstractClassEnhancePluginDefine define : pluginDefines) {
-                        DynamicType.Builder<?> possibleNewBuilder = define.define(typeDescription.getTypeName(), builder, classLoader, context);
+                        DynamicType.Builder<?> possibleNewBuilder = define.define(typeDescription.getTypeName(), newBuilder, classLoader, context);
                         if (possibleNewBuilder != null) {
                             newBuilder = possibleNewBuilder;
                         }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/logging/EasyLoggerTest.java
Patch:
@@ -88,7 +88,7 @@ public void testFormat() {
         String formatLines = logger.format(exception);
         String[] lines = formatLines.split(Constants.LINE_SEPARATOR);
         Assert.assertEquals("java.lang.NullPointerException", lines[1]);
-        Assert.assertEquals("\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:58)", lines[2]);
+        Assert.assertEquals("\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:86)", lines[2]);
     }
 
     @AfterClass

File: apm-sniffer/apm-agent/src/main/java/org/skywalking/apm/agent/SkyWalkingAgent.java
Patch:
@@ -61,7 +61,7 @@ public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDesc
                     DynamicType.Builder<?> newBuilder = builder;
                     EnhanceContext context = new EnhanceContext();
                     for (AbstractClassEnhancePluginDefine define : pluginDefines) {
-                        DynamicType.Builder<?> possibleNewBuilder = define.define(typeDescription.getTypeName(), builder, classLoader, context);
+                        DynamicType.Builder<?> possibleNewBuilder = define.define(typeDescription.getTypeName(), newBuilder, classLoader, context);
                         if (possibleNewBuilder != null) {
                             newBuilder = possibleNewBuilder;
                         }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/mvc/ControllerServiceMethodInterceptor.java
Patch:
@@ -16,7 +16,6 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.context.request.RequestContextHolder;
 import org.springframework.web.context.request.ServletRequestAttributes;
-import org.springframework.web.context.request.ServletWebRequest;
 
 /**
  * The <code>ControllerServiceMethodInterceptor</code> only use the first mapping value.
@@ -59,7 +58,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
-        HttpServletResponse response = ((ServletWebRequest)RequestContextHolder.getRequestAttributes()).getResponse();
+        HttpServletResponse response = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getResponse();
 
         AbstractSpan span = ContextManager.activeSpan();
         if (response.getStatus() >= 400) {

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/mvc/ControllerServiceMethodInterceptor.java
Patch:
@@ -16,6 +16,7 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.context.request.RequestContextHolder;
 import org.springframework.web.context.request.ServletRequestAttributes;
+import org.springframework.web.context.request.ServletWebRequest;
 
 /**
  * The <code>ControllerServiceMethodInterceptor</code> only use the first mapping value.
@@ -58,7 +59,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
     @Override
     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,
         Object ret) throws Throwable {
-        HttpServletResponse response = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getResponse();
+        HttpServletResponse response = ((ServletWebRequest)RequestContextHolder.getRequestAttributes()).getResponse();
 
         AbstractSpan span = ContextManager.activeSpan();
         if (response.getStatus() >= 400) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/AppAndServiceRegisterClient.java
Patch:
@@ -122,7 +122,7 @@ public void run() {
                                     .setRegisterTime(System.currentTimeMillis())
                                     .setOsinfo(OSUtil.buildOSInfo())
                                     .build());
-                                needRegisterRecover = true;
+                                needRegisterRecover = false;
                             } else {
                                 if (lastSegmentTime - System.currentTimeMillis() > 60 * 1000) {
                                     instanceDiscoveryServiceBlockingStub.heartbeat(ApplicationInstanceHeartbeat.newBuilder()

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/TraceSegmentServiceClient.java
Patch:
@@ -112,7 +112,7 @@ public void onCompleted() {
 
     private void printUplinkStatus() {
         long currentTimeMillis = System.currentTimeMillis();
-        if (lastLogTime - currentTimeMillis > 30 * 1000) {
+        if (currentTimeMillis - lastLogTime > 30 * 1000) {
             lastLogTime = currentTimeMillis;
             if (segmentUplinkedCounter > 0) {
                 logger.debug("{} trace segments have been sent to collector.", segmentUplinkedCounter);

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/logging/EasyLoggerTest.java
Patch:
@@ -88,7 +88,7 @@ public void testFormat() {
         String formatLines = logger.format(exception);
         String[] lines = formatLines.split(Constants.LINE_SEPARATOR);
         Assert.assertEquals("java.lang.NullPointerException", lines[1]);
-        Assert.assertEquals("\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:58)", lines[2]);
+        Assert.assertEquals("\tat org.skywalking.apm.agent.core.logging.EasyLoggerTest.testFormat(EasyLoggerTest.java:86)", lines[2]);
     }
 
     @AfterClass

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.x-plugin/src/main/java/org/skywalking/apm/plugin/jetty/v9/client/CompleteListenerInterceptor.java
Patch:
@@ -2,9 +2,6 @@
 
 import java.lang.reflect.Method;
 import org.eclipse.jetty.client.api.Result;
-import org.eclipse.jetty.http.HttpFields;
-import org.skywalking.apm.agent.core.context.CarrierItem;
-import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.agent.core.context.ContextSnapshot;
 import org.skywalking.apm.agent.core.context.tag.Tags;

File: apm-sniffer/apm-sdk-plugin/jetty-plugin/jetty-client-9.x-plugin/src/main/java/org/skywalking/apm/plugin/jetty/v9/client/CompleteListenerInterceptor.java
Patch:
@@ -2,9 +2,6 @@
 
 import java.lang.reflect.Method;
 import org.eclipse.jetty.client.api.Result;
-import org.eclipse.jetty.http.HttpFields;
-import org.skywalking.apm.agent.core.context.CarrierItem;
-import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.agent.core.context.ContextSnapshot;
 import org.skywalking.apm.agent.core.context.tag.Tags;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/SegmentCostSpanListener.java
Patch:
@@ -38,6 +38,7 @@ public void parseFirst(SpanObject spanObject, int applicationId, int application
     public void parseEntry(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId) {
         SegmentCostDataDefine.SegmentCost segmentCost = new SegmentCostDataDefine.SegmentCost();
         segmentCost.setSegmentId(segmentId);
+        segmentCost.setApplicationId(applicationId);
         segmentCost.setCost(spanObject.getEndTime() - spanObject.getStartTime());
         segmentCost.setStartTime(spanObject.getStartTime());
         segmentCost.setEndTime(spanObject.getEndTime());

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/dao/SegmentCostEsDAO.java
Patch:
@@ -4,11 +4,11 @@
 import java.util.Map;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
+import org.skywalking.apm.collector.core.stream.Data;
+import org.skywalking.apm.collector.storage.define.DataDefine;
 import org.skywalking.apm.collector.storage.define.segment.SegmentCostTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.skywalking.apm.collector.stream.worker.impl.dao.IPersistenceDAO;
-import org.skywalking.apm.collector.core.stream.Data;
-import org.skywalking.apm.collector.storage.define.DataDefine;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,6 +31,7 @@ public class SegmentCostEsDAO extends EsDAO implements ISegmentCostDAO, IPersist
         logger.debug("segment cost prepareBatchInsert, id: {}", data.getDataString(0));
         Map<String, Object> source = new HashMap<>();
         source.put(SegmentCostTable.COLUMN_SEGMENT_ID, data.getDataString(1));
+        source.put(SegmentCostTable.COLUMN_APPLICATION_ID, data.getDataInteger(0));
         source.put(SegmentCostTable.COLUMN_SERVICE_NAME, data.getDataString(2));
         source.put(SegmentCostTable.COLUMN_COST, data.getDataLong(0));
         source.put(SegmentCostTable.COLUMN_START_TIME, data.getDataLong(1));

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/define/SegmentCostEsTableDefine.java
Patch:
@@ -19,6 +19,7 @@ public SegmentCostEsTableDefine() {
 
     @Override public void initialize() {
         addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_SEGMENT_ID, ElasticSearchColumnDefine.Type.Keyword.name()));
+        addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_APPLICATION_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_SERVICE_NAME, ElasticSearchColumnDefine.Type.Text.name()));
         addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_COST, ElasticSearchColumnDefine.Type.Long.name()));
         addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_START_TIME, ElasticSearchColumnDefine.Type.Long.name()));

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/define/SegmentCostH2TableDefine.java
Patch:
@@ -1,8 +1,8 @@
 package org.skywalking.apm.collector.agentstream.worker.segment.cost.define;
 
+import org.skywalking.apm.collector.storage.define.segment.SegmentCostTable;
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
-import org.skywalking.apm.collector.storage.define.segment.SegmentCostTable;
 
 /**
  * @author pengys5
@@ -16,6 +16,7 @@ public SegmentCostH2TableDefine() {
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_SEGMENT_ID, H2ColumnDefine.Type.Varchar.name()));
+        addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_SERVICE_NAME, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_COST, H2ColumnDefine.Type.Bigint.name()));
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_START_TIME, H2ColumnDefine.Type.Bigint.name()));

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/segment/SegmentCostTable.java
Patch:
@@ -8,6 +8,7 @@
 public class SegmentCostTable extends CommonTable {
     public static final String TABLE = "segment_cost";
     public static final String COLUMN_SEGMENT_ID = "segment_id";
+    public static final String COLUMN_APPLICATION_ID = "application_id";
     public static final String COLUMN_START_TIME = "start_time";
     public static final String COLUMN_END_TIME = "end_time";
     public static final String COLUMN_SERVICE_NAME = "service_name";

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/SegmentCostH2DAO.java
Patch:
@@ -9,7 +9,7 @@
  */
 public class SegmentCostH2DAO extends H2DAO implements ISegmentCostDAO {
     @Override public JsonObject loadTop(long startTime, long endTime, long minCost, long maxCost, String operationName,
-        List<String> segmentIds, int limit, int from, Sort sort) {
+        Error error, int applicationId, List<String> segmentIds, int limit, int from, Sort sort) {
         return null;
     }
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/SegmentCostSpanListener.java
Patch:
@@ -38,6 +38,7 @@ public void parseFirst(SpanObject spanObject, int applicationId, int application
     public void parseEntry(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId) {
         SegmentCostDataDefine.SegmentCost segmentCost = new SegmentCostDataDefine.SegmentCost();
         segmentCost.setSegmentId(segmentId);
+        segmentCost.setApplicationId(applicationId);
         segmentCost.setCost(spanObject.getEndTime() - spanObject.getStartTime());
         segmentCost.setStartTime(spanObject.getStartTime());
         segmentCost.setEndTime(spanObject.getEndTime());

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/dao/SegmentCostEsDAO.java
Patch:
@@ -4,11 +4,11 @@
 import java.util.Map;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
+import org.skywalking.apm.collector.core.stream.Data;
+import org.skywalking.apm.collector.storage.define.DataDefine;
 import org.skywalking.apm.collector.storage.define.segment.SegmentCostTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.skywalking.apm.collector.stream.worker.impl.dao.IPersistenceDAO;
-import org.skywalking.apm.collector.core.stream.Data;
-import org.skywalking.apm.collector.storage.define.DataDefine;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,6 +31,7 @@ public class SegmentCostEsDAO extends EsDAO implements ISegmentCostDAO, IPersist
         logger.debug("segment cost prepareBatchInsert, id: {}", data.getDataString(0));
         Map<String, Object> source = new HashMap<>();
         source.put(SegmentCostTable.COLUMN_SEGMENT_ID, data.getDataString(1));
+        source.put(SegmentCostTable.COLUMN_APPLICATION_ID, data.getDataInteger(0));
         source.put(SegmentCostTable.COLUMN_SERVICE_NAME, data.getDataString(2));
         source.put(SegmentCostTable.COLUMN_COST, data.getDataLong(0));
         source.put(SegmentCostTable.COLUMN_START_TIME, data.getDataLong(1));

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/define/SegmentCostEsTableDefine.java
Patch:
@@ -19,6 +19,7 @@ public SegmentCostEsTableDefine() {
 
     @Override public void initialize() {
         addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_SEGMENT_ID, ElasticSearchColumnDefine.Type.Keyword.name()));
+        addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_APPLICATION_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_SERVICE_NAME, ElasticSearchColumnDefine.Type.Text.name()));
         addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_COST, ElasticSearchColumnDefine.Type.Long.name()));
         addColumn(new ElasticSearchColumnDefine(SegmentCostTable.COLUMN_START_TIME, ElasticSearchColumnDefine.Type.Long.name()));

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/define/SegmentCostH2TableDefine.java
Patch:
@@ -1,8 +1,8 @@
 package org.skywalking.apm.collector.agentstream.worker.segment.cost.define;
 
+import org.skywalking.apm.collector.storage.define.segment.SegmentCostTable;
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
-import org.skywalking.apm.collector.storage.define.segment.SegmentCostTable;
 
 /**
  * @author pengys5
@@ -16,6 +16,7 @@ public SegmentCostH2TableDefine() {
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_SEGMENT_ID, H2ColumnDefine.Type.Varchar.name()));
+        addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_SERVICE_NAME, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_COST, H2ColumnDefine.Type.Bigint.name()));
         addColumn(new H2ColumnDefine(SegmentCostTable.COLUMN_START_TIME, H2ColumnDefine.Type.Bigint.name()));

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/segment/SegmentCostTable.java
Patch:
@@ -8,6 +8,7 @@
 public class SegmentCostTable extends CommonTable {
     public static final String TABLE = "segment_cost";
     public static final String COLUMN_SEGMENT_ID = "segment_id";
+    public static final String COLUMN_APPLICATION_ID = "application_id";
     public static final String COLUMN_START_TIME = "start_time";
     public static final String COLUMN_END_TIME = "end_time";
     public static final String COLUMN_SERVICE_NAME = "service_name";

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/SegmentCostH2DAO.java
Patch:
@@ -9,7 +9,7 @@
  */
 public class SegmentCostH2DAO extends H2DAO implements ISegmentCostDAO {
     @Override public JsonObject loadTop(long startTime, long endTime, long minCost, long maxCost, String operationName,
-        List<String> segmentIds, int limit, int from, Sort sort) {
+        Error error, int applicationId, List<String> segmentIds, int limit, int from, Sort sort) {
         return null;
     }
 }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/mvc/ControllerServiceMethodInterceptor.java
Patch:
@@ -30,6 +30,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             RequestMapping methodRequestMapping = method.getAnnotation(RequestMapping.class);
             if (methodRequestMapping.value().length > 0) {
                 requestURL = methodRequestMapping.value()[0];
+            } else if (methodRequestMapping.path().length > 0) {
+                requestURL = methodRequestMapping.path()[0];
             } else {
                 requestURL = "";
             }

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/mvc/ControllerServiceMethodInterceptor.java
Patch:
@@ -30,6 +30,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             RequestMapping methodRequestMapping = method.getAnnotation(RequestMapping.class);
             if (methodRequestMapping.value().length > 0) {
                 requestURL = methodRequestMapping.value()[0];
+            } else if (methodRequestMapping.path().length > 0) {
+                requestURL = methodRequestMapping.path()[0];
             } else {
                 requestURL = "";
             }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/ContextManagerTest.java
Patch:
@@ -79,7 +79,7 @@ public void createSpanWithInvalidateContextCarrier() {
 
     @Test
     public void createMultipleEntrySpan() {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.2343.234234234|1|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.2343.234234234|1|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|1.2343.234234234");
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);
@@ -202,7 +202,7 @@ public void tearDown() throws Exception {
 
     @Test
     public void testTransform() throws InvalidProtocolBufferException {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.234.1983829|3|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.234.1983829|3|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|1.2343.234234234");
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/InstMethodsInterWithOverrideArgs.java
Patch:
@@ -53,7 +53,7 @@ public InstMethodsInterWithOverrideArgs(String instanceMethodsAroundInterceptorC
     public Object intercept(@This Object obj,
         @AllArguments Object[] allArguments,
         @Origin Method method,
-        @Morph(defaultMethod = true) OverrideCallable zuper
+        @Morph OverrideCallable zuper
     ) throws Throwable {
         EnhancedInstance targetObject = (EnhancedInstance)obj;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/StaticMethodsInterWithOverrideArgs.java
Patch:
@@ -47,7 +47,7 @@ public StaticMethodsInterWithOverrideArgs(String staticMethodsAroundInterceptorC
      */
     @RuntimeType
     public Object intercept(@Origin Class<?> clazz, @AllArguments Object[] allArguments, @Origin Method method,
-        @Morph(defaultMethod = true) OverrideCallable zuper) throws Throwable {
+        @Morph OverrideCallable zuper) throws Throwable {
         StaticMethodsAroundInterceptor interceptor = InterceptorInstanceLoader
             .load(staticMethodsAroundInterceptorClassName, clazz.getClassLoader());
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/InstMethodsInterWithOverrideArgs.java
Patch:
@@ -53,7 +53,7 @@ public InstMethodsInterWithOverrideArgs(String instanceMethodsAroundInterceptorC
     public Object intercept(@This Object obj,
         @AllArguments Object[] allArguments,
         @Origin Method method,
-        @Morph(defaultMethod = true) OverrideCallable zuper
+        @Morph OverrideCallable zuper
     ) throws Throwable {
         EnhancedInstance targetObject = (EnhancedInstance)obj;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/StaticMethodsInterWithOverrideArgs.java
Patch:
@@ -47,7 +47,7 @@ public StaticMethodsInterWithOverrideArgs(String staticMethodsAroundInterceptorC
      */
     @RuntimeType
     public Object intercept(@Origin Class<?> clazz, @AllArguments Object[] allArguments, @Origin Method method,
-        @Morph(defaultMethod = true) OverrideCallable zuper) throws Throwable {
+        @Morph OverrideCallable zuper) throws Throwable {
         StaticMethodsAroundInterceptor interceptor = InterceptorInstanceLoader
             .load(staticMethodsAroundInterceptorClassName, clazz.getClassLoader());
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/SW3CarrierItem.java
Patch:
@@ -4,11 +4,11 @@
  * @author wusheng
  */
 public class SW3CarrierItem extends CarrierItem {
-    private static final String HEAD_NAME = "sw3";
+    public static final String HEADER_NAME = "sw3";
     private ContextCarrier carrier;
 
     public SW3CarrierItem(ContextCarrier carrier, CarrierItem next) {
-        super(HEAD_NAME, carrier.serialize(), next);
+        super(HEADER_NAME, carrier.serialize(), next);
         this.carrier = carrier;
     }
 

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/test/java/org/skywalking/apm/plugin/tomcat78x/TomcatInvokeInterceptorTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.Mock;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.powermock.modules.junit4.PowerMockRunnerDelegate;
-import org.skywalking.apm.agent.core.conf.Config;
+import org.skywalking.apm.agent.core.context.SW3CarrierItem;
 import org.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.skywalking.apm.agent.core.context.trace.LogDataEntity;
 import org.skywalking.apm.agent.core.context.trace.SpanLayer;
@@ -90,7 +90,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA*#AQA*4WcWe0tQNQA*|3|1|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
+        when(request.getHeader(SW3CarrierItem.HEADER_NAME)).thenReturn("1.234.111|3|1|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         tomcatInvokeInterceptor.beforeMethod(enhancedInstance, null, arguments, argumentType, methodInterceptResult);
         tomcatInvokeInterceptor.afterMethod(enhancedInstance, null, arguments, argumentType, null);
@@ -138,7 +138,7 @@ public void testWithTomcatException() throws Throwable {
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
         assertThat(SegmentRefHelper.getEntryApplicationInstanceId(ref), is(1));
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.1.15006458883500001"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.234.111"));
     }
 
     private void assertHttpSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ContextCarrier.java
Patch:
@@ -61,7 +61,8 @@ public class ContextCarrier implements Serializable {
 
     public CarrierItem items() {
         SW3CarrierItem carrierItem = new SW3CarrierItem(this, null);
-        return carrierItem;
+        CarrierItemHead head = new CarrierItemHead(carrierItem);
+        return head;
     }
 
     /**
@@ -119,6 +120,7 @@ ContextCarrier deserialize(String text) {
      */
     public boolean isValid() {
         return traceSegmentId != null
+            && traceSegmentId.isValid()
             && getSpanId() > -1
             && parentApplicationInstanceId != DictionaryUtil.nullValue()
             && entryApplicationInstanceId != DictionaryUtil.nullValue()

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/ContextManagerTest.java
Patch:
@@ -79,7 +79,7 @@ public void createSpanWithInvalidateContextCarrier() {
 
     @Test
     public void createMultipleEntrySpan() {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA*#AQA*4WcWe0tQNQA*|1|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.2343.234234234|1|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);
@@ -202,7 +202,7 @@ public void tearDown() throws Exception {
 
     @Test
     public void testTransform() throws InvalidProtocolBufferException {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA*#AQA*4WcWe0tQNQA*|3|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("1.234.1983829|3|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/main/java/org/skywalking/apm/plugin/feign/http/v9/DefaultHttpClientInterceptor.java
Patch:
@@ -61,9 +61,9 @@ public class DefaultHttpClientInterceptor implements InstanceMethodsAroundInterc
 
         headersField.setAccessible(true);
         Map<String, Collection<String>> headers = new LinkedHashMap<String, Collection<String>>();
-        CarrierItem items = contextCarrier.items();
-        while (items.hasNext()) {
-            CarrierItem next = items.next();
+        CarrierItem next = contextCarrier.items();
+        while (next.hasNext()) {
+            next = next.next();
             List<String> contextCollection = new LinkedList<String>();
             contextCollection.add(next.getHeadValue());
             headers.put(next.getHeadKey(), contextCollection);

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -42,9 +42,9 @@ public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterc
         Tags.HTTP.METHOD.set(span, httpRequest.getRequestLine().getMethod());
         SpanLayer.asHttp(span);
 
-        CarrierItem items = contextCarrier.items();
-        while (items.hasNext()) {
-            CarrierItem next = items.next();
+        CarrierItem next = contextCarrier.items();
+        while (next.hasNext()) {
+            next = next.next();
             httpRequest.setHeader(next.getHeadKey(), next.getHeadValue());
         }
     }

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/MotanConsumerInterceptor.java
Patch:
@@ -42,9 +42,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             span.setComponent(ComponentsDefine.MOTAN);
             Tags.URL.set(span, url.getIdentity());
             SpanLayer.asRPCFramework(span);
-            CarrierItem items = contextCarrier.items();
-            while (items.hasNext()) {
-                CarrierItem next = items.next();
+            CarrierItem next = contextCarrier.items();
+            while (next.hasNext()) {
+                next = next.next();
                 request.setAttachment(next.getHeadKey(), next.getHeadValue());
             }
         }

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/MotanProviderInterceptor.java
Patch:
@@ -28,9 +28,9 @@ public class MotanProviderInterceptor implements InstanceMethodsAroundIntercepto
         Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {
         Request request = (Request)allArguments[0];
         ContextCarrier contextCarrier = new ContextCarrier();
-        CarrierItem items = contextCarrier.items();
-        while (items.hasNext()) {
-            CarrierItem next = items.next();
+        CarrierItem next = contextCarrier.items();
+        while (next.hasNext()) {
+            next = next.next();
             next.setHeadValue(request.getAttachments().get(next.getHeadKey()));
         }
 

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java
Patch:
@@ -67,9 +67,9 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {
 
         headersField.setAccessible(true);
         Headers.Builder headerBuilder = request.headers().newBuilder();
-        CarrierItem items = contextCarrier.items();
-        while (items.hasNext()) {
-            CarrierItem next = items.next();
+        CarrierItem next = contextCarrier.items();
+        while (next.hasNext()) {
+            next = next.next();
             headerBuilder.add(next.getHeadKey(), next.getHeadValue());
         }
         headersField.set(request, headerBuilder.build());

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/main/java/org/skywalking/apm/plugin/resin/v3/ResinV3Interceptor.java
Patch:
@@ -26,9 +26,9 @@ public class ResinV3Interceptor implements InstanceMethodsAroundInterceptor {
         Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {
         CauchoRequest request = (CauchoRequest)allArguments[0];
         ContextCarrier contextCarrier = new ContextCarrier();
-        CarrierItem items = contextCarrier.items();
-        while (items.hasNext()) {
-            CarrierItem next = items.next();
+        CarrierItem next = contextCarrier.items();
+        while (next.hasNext()) {
+            next = next.next();
             next.setHeadValue(request.getHeader(next.getHeadKey()));
         }
 

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/main/java/org/skywalking/apm/plugin/resin/v4/ResinV4Interceptor.java
Patch:
@@ -23,9 +23,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {
         CauchoRequest request = (CauchoRequest)allArguments[0];
         ContextCarrier contextCarrier = new ContextCarrier();
-        CarrierItem items = contextCarrier.items();
-        while (items.hasNext()) {
-            CarrierItem next = items.next();
+        CarrierItem next = contextCarrier.items();
+        while (next.hasNext()) {
+            next = next.next();
             next.setHeadValue(request.getHeader(next.getHeadKey()));
         }
         AbstractSpan span = ContextManager.createEntrySpan(request.getPageURI(), contextCarrier);

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java
Patch:
@@ -30,7 +30,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         SpanLayer.asHttp(span);
         Object[] cacheValues = new Object[3];
         cacheValues[0] = requestURL;
-        cacheValues[1] = contextCarrier.serialize();
+        cacheValues[1] = contextCarrier;
         objInst.setSkyWalkingDynamicField(cacheValues);
     }
 

File: apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/resttemplate/sync/RestExecuteInterceptor.java
Patch:
@@ -29,7 +29,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
         Tags.HTTP.METHOD.set(span, httpMethod.toString());
         SpanLayer.asHttp(span);
 
-        objInst.setSkyWalkingDynamicField(contextCarrier.serialize());
+        objInst.setSkyWalkingDynamicField(contextCarrier);
     }
 
     @Override

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/skywalking/apm/plugin/tomcat78x/TomcatInvokeInterceptor.java
Patch:
@@ -38,9 +38,9 @@ public class TomcatInvokeInterceptor implements InstanceMethodsAroundInterceptor
         HttpServletRequest request = (HttpServletRequest)allArguments[0];
         ContextCarrier contextCarrier = new ContextCarrier();
 
-        CarrierItem items = contextCarrier.items();
-        while (items.hasNext()) {
-            CarrierItem next = items.next();
+        CarrierItem next = contextCarrier.items();
+        while (next.hasNext()) {
+            next = next.next();
             next.setHeadValue(request.getHeader(next.getHeadKey()));
         }
 

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/MotanConsumerInterceptor.java
Patch:
@@ -43,7 +43,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
             Tags.URL.set(span, url.getIdentity());
             SpanLayer.asRPCFramework(span);
             CarrierItem items = contextCarrier.items();
-            while(items.hasNext()){
+            while (items.hasNext()) {
                 CarrierItem next = items.next();
                 request.setAttachment(next.getHeadKey(), next.getHeadValue());
             }

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/MotanProviderInterceptor.java
Patch:
@@ -29,7 +29,7 @@ public class MotanProviderInterceptor implements InstanceMethodsAroundIntercepto
         Request request = (Request)allArguments[0];
         ContextCarrier contextCarrier = new ContextCarrier();
         CarrierItem items = contextCarrier.items();
-        while(items.hasNext()){
+        while (items.hasNext()) {
             CarrierItem next = items.next();
             next.setHeadValue(request.getAttachments().get(next.getHeadKey()));
         }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/ID.java
Patch:
@@ -58,9 +58,8 @@ public ID(String encodingString) {
     public String encode() {
         if (encoding == null) {
             encoding = long2Base64(part1) + long2Base64(part2) + long2Base64(part3);
-        } else {
-            return encoding;
         }
+        return encoding;
     }
 
     private String long2Base64(long partN) {

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/NodeReferenceSpanListener.java
Patch:
@@ -91,10 +91,10 @@ public void parseEntry(SpanObject spanObject, int applicationId, int application
         logger.debug("node reference summary listener build");
         StreamModuleContext context = (StreamModuleContext)CollectorContextHelper.INSTANCE.getContext(StreamModuleGroupDefine.GROUP_NAME);
 
-        for (NodeReferenceDataDefine.NodeReference referenceSum : nodeReferences) {
+        for (NodeReferenceDataDefine.NodeReference nodeReference : nodeReferences) {
             try {
-                logger.debug("send to node reference summary aggregation worker, id: {}", referenceSum.getId());
-                context.getClusterWorkerContext().lookup(NodeReferenceAggregationWorker.WorkerRole.INSTANCE).tell(referenceSum.toData());
+                logger.debug("send to node reference summary aggregation worker, id: {}", nodeReference.getId());
+                context.getClusterWorkerContext().lookup(NodeReferenceAggregationWorker.WorkerRole.INSTANCE).tell(nodeReference.toData());
             } catch (WorkerInvokeException | WorkerNotFoundException e) {
                 logger.error(e.getMessage(), e);
             }

File: apm-collector/apm-collector-stream/src/main/java/org/skywalking/apm/collector/stream/worker/selector/HashCodeSelector.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.util.List;
 import org.skywalking.apm.collector.core.stream.AbstractHashMessage;
-import org.skywalking.apm.collector.stream.worker.WorkerRef;
 import org.skywalking.apm.collector.stream.worker.AbstractWorker;
+import org.skywalking.apm.collector.stream.worker.WorkerRef;
 
 /**
  * The <code>HashCodeSelector</code> is a simple implementation of {@link WorkerSelector}. It choose {@link WorkerRef}
@@ -30,7 +30,7 @@ public WorkerRef select(List<WorkerRef> members, Object message) {
             int selectIndex = Math.abs(hashMessage.getHashCode()) % size;
             return members.get(selectIndex);
         } else {
-            throw new IllegalArgumentException("the message send into HashCodeSelector must implementation of AbstractHashMessage");
+            throw new IllegalArgumentException("the message send into HashCodeSelector must implementation of AbstractHashMessage, the message object class is: " + message.getClass().getName());
         }
     }
 }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/InstPerformanceEsDAO.java
Patch:
@@ -12,6 +12,7 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.aggregations.AggregationBuilders;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
+import org.elasticsearch.search.sort.SortOrder;
 import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.core.util.TimeBucketUtils;
 import org.skywalking.apm.collector.storage.define.instance.InstPerformanceTable;
@@ -33,6 +34,7 @@ public class InstPerformanceEsDAO extends EsDAO implements IInstPerformanceDAO {
 
         searchRequestBuilder.setQuery(boolQuery);
         searchRequestBuilder.setSize(0);
+        searchRequestBuilder.addSort(InstPerformanceTable.COLUMN_INSTANCE_ID, SortOrder.ASC);
 
         searchRequestBuilder.addAggregation(AggregationBuilders.sum(InstPerformanceTable.COLUMN_CALLS).field(InstPerformanceTable.COLUMN_CALLS));
         searchRequestBuilder.addAggregation(AggregationBuilders.sum(InstPerformanceTable.COLUMN_COST_TOTAL).field(InstPerformanceTable.COLUMN_COST_TOTAL));

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/application/ApplicationIDService.java
Patch:
@@ -1,9 +1,9 @@
 package org.skywalking.apm.collector.agentregister.application;
 
-import org.skywalking.apm.collector.agentstream.worker.cache.ApplicationCache;
-import org.skywalking.apm.collector.storage.define.register.ApplicationDataDefine;
-import org.skywalking.apm.collector.agentstream.worker.register.application.ApplicationRegisterRemoteWorker;
+import org.skywalking.apm.collector.agentregister.worker.application.ApplicationRegisterRemoteWorker;
+import org.skywalking.apm.collector.agentregister.worker.cache.ApplicationCache;
 import org.skywalking.apm.collector.core.framework.CollectorContextHelper;
+import org.skywalking.apm.collector.storage.define.register.ApplicationDataDefine;
 import org.skywalking.apm.collector.stream.StreamModuleContext;
 import org.skywalking.apm.collector.stream.StreamModuleGroupDefine;
 import org.skywalking.apm.collector.stream.worker.WorkerInvokeException;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/instance/InstanceIDService.java
Patch:
@@ -1,7 +1,7 @@
 package org.skywalking.apm.collector.agentregister.instance;
 
-import org.skywalking.apm.collector.agentstream.worker.register.instance.InstanceRegisterRemoteWorker;
-import org.skywalking.apm.collector.agentstream.worker.register.instance.dao.IInstanceDAO;
+import org.skywalking.apm.collector.agentregister.worker.instance.InstanceRegisterRemoteWorker;
+import org.skywalking.apm.collector.agentregister.worker.instance.dao.IInstanceDAO;
 import org.skywalking.apm.collector.core.framework.CollectorContextHelper;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.storage.define.register.InstanceDataDefine;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/servicename/ServiceNameService.java
Patch:
@@ -1,8 +1,8 @@
 package org.skywalking.apm.collector.agentregister.servicename;
 
 import org.skywalking.apm.collector.storage.define.register.ServiceNameDataDefine;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.ServiceNameRegisterRemoteWorker;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.dao.IServiceNameDAO;
+import org.skywalking.apm.collector.agentregister.worker.servicename.ServiceNameRegisterRemoteWorker;
+import org.skywalking.apm.collector.agentregister.worker.servicename.dao.IServiceNameDAO;
 import org.skywalking.apm.collector.core.framework.CollectorContextHelper;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.stream.StreamModuleContext;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/IdAutoIncrement.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register;
+package org.skywalking.apm.collector.agentregister.worker;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/application/ApplicationH2TableDefine.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.application;
+package org.skywalking.apm.collector.agentregister.worker.application;
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/application/ApplicationRegisterRemoteWorker.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.application;
+package org.skywalking.apm.collector.agentregister.worker.application;
 
 import org.skywalking.apm.collector.storage.define.register.ApplicationDataDefine;
 import org.skywalking.apm.collector.stream.worker.AbstractRemoteWorker;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/application/ApplicationRegisterSerialWorker.java
Patch:
@@ -1,8 +1,8 @@
-package org.skywalking.apm.collector.agentstream.worker.register.application;
+package org.skywalking.apm.collector.agentregister.worker.application;
 
 import org.skywalking.apm.collector.core.util.Const;
-import org.skywalking.apm.collector.agentstream.worker.register.IdAutoIncrement;
-import org.skywalking.apm.collector.agentstream.worker.register.application.dao.IApplicationDAO;
+import org.skywalking.apm.collector.agentregister.worker.IdAutoIncrement;
+import org.skywalking.apm.collector.agentregister.worker.application.dao.IApplicationDAO;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.storage.define.register.ApplicationDataDefine;
 import org.skywalking.apm.collector.stream.worker.AbstractLocalAsyncWorker;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/application/dao/ApplicationEsDAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.application.dao;
+package org.skywalking.apm.collector.agentregister.worker.application.dao;
 
 import java.util.HashMap;
 import java.util.Map;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/application/dao/ApplicationH2DAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.application.dao;
+package org.skywalking.apm.collector.agentregister.worker.application.dao;
 
 import org.skywalking.apm.collector.storage.define.register.ApplicationDataDefine;
 import org.skywalking.apm.collector.client.h2.H2Client;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/application/dao/IApplicationDAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.application.dao;
+package org.skywalking.apm.collector.agentregister.worker.application.dao;
 
 import org.skywalking.apm.collector.storage.define.register.ApplicationDataDefine;
 

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/cache/ApplicationCache.java
Patch:
@@ -1,8 +1,8 @@
-package org.skywalking.apm.collector.agentstream.worker.cache;
+package org.skywalking.apm.collector.agentregister.worker.cache;
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.agentstream.worker.register.application.dao.IApplicationDAO;
+import org.skywalking.apm.collector.agentregister.worker.application.dao.IApplicationDAO;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 
 /**

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/instance/InstanceH2TableDefine.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.instance;
+package org.skywalking.apm.collector.agentregister.worker.instance;
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/instance/InstanceRegisterRemoteWorker.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.instance;
+package org.skywalking.apm.collector.agentregister.worker.instance;
 
 import org.skywalking.apm.collector.storage.define.register.InstanceDataDefine;
 import org.skywalking.apm.collector.stream.worker.AbstractRemoteWorker;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/instance/InstanceRegisterSerialWorker.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.collector.agentstream.worker.register.instance;
+package org.skywalking.apm.collector.agentregister.worker.instance;
 
-import org.skywalking.apm.collector.agentstream.worker.register.instance.dao.IInstanceDAO;
+import org.skywalking.apm.collector.agentregister.worker.instance.dao.IInstanceDAO;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.storage.define.DataDefine;
 import org.skywalking.apm.collector.storage.define.register.ApplicationDataDefine;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/instance/dao/IInstanceDAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.instance.dao;
+package org.skywalking.apm.collector.agentregister.worker.instance.dao;
 
 import org.skywalking.apm.collector.storage.define.register.InstanceDataDefine;
 

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/instance/dao/InstanceEsDAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.instance.dao;
+package org.skywalking.apm.collector.agentregister.worker.instance.dao;
 
 import java.util.HashMap;
 import java.util.Map;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/instance/dao/InstanceH2DAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.instance.dao;
+package org.skywalking.apm.collector.agentregister.worker.instance.dao;
 
 import org.skywalking.apm.collector.storage.define.register.InstanceDataDefine;
 import org.skywalking.apm.collector.storage.h2.dao.H2DAO;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/ServiceNameH2TableDefine.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.servicename;
+package org.skywalking.apm.collector.agentregister.worker.servicename;
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/ServiceNameRegisterRemoteWorker.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.servicename;
+package org.skywalking.apm.collector.agentregister.worker.servicename;
 
 import org.skywalking.apm.collector.storage.define.register.ServiceNameDataDefine;
 import org.skywalking.apm.collector.stream.worker.AbstractRemoteWorker;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/ServiceNameRegisterSerialWorker.java
Patch:
@@ -1,7 +1,7 @@
-package org.skywalking.apm.collector.agentstream.worker.register.servicename;
+package org.skywalking.apm.collector.agentregister.worker.servicename;
 
-import org.skywalking.apm.collector.agentstream.worker.register.IdAutoIncrement;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.dao.IServiceNameDAO;
+import org.skywalking.apm.collector.agentregister.worker.IdAutoIncrement;
+import org.skywalking.apm.collector.agentregister.worker.servicename.dao.IServiceNameDAO;
 import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.storage.define.DataDefine;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/dao/IServiceNameDAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.servicename.dao;
+package org.skywalking.apm.collector.agentregister.worker.servicename.dao;
 
 import org.skywalking.apm.collector.storage.define.register.ServiceNameDataDefine;
 

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/dao/ServiceNameEsDAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.servicename.dao;
+package org.skywalking.apm.collector.agentregister.worker.servicename.dao;
 
 import java.util.HashMap;
 import java.util.Map;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/worker/servicename/dao/ServiceNameH2DAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.register.servicename.dao;
+package org.skywalking.apm.collector.agentregister.worker.servicename.dao;
 
 import org.skywalking.apm.collector.storage.define.register.ServiceNameDataDefine;
 import org.skywalking.apm.collector.storage.h2.dao.H2DAO;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/AgentStreamModuleGroupDefine.java
Patch:
@@ -10,10 +10,10 @@
 public class AgentStreamModuleGroupDefine implements ModuleGroupDefine {
 
     public static final String GROUP_NAME = "agent_stream";
-    private final AgentStreamCommonModuleInstaller installer;
+    private final AgentStreamModuleInstaller installer;
 
     public AgentStreamModuleGroupDefine() {
-        installer = new AgentStreamCommonModuleInstaller();
+        installer = new AgentStreamModuleInstaller();
     }
 
     @Override public String name() {

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/cache/InstanceCache.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.agentstream.worker.register.instance.dao.IInstanceDAO;
+import org.skywalking.apm.collector.agentregister.worker.instance.dao.IInstanceDAO;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 
 /**

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/cache/ServiceCache.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.dao.IServiceNameDAO;
+import org.skywalking.apm.collector.agentregister.worker.servicename.dao.IServiceNameDAO;
 import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 

File: apm-collector/apm-collector-agentstream/src/test/java/org/skywalking/apm/collector/agentstream/mock/SegmentPost.java
Patch:
@@ -5,9 +5,9 @@
 import com.google.gson.JsonObject;
 import java.io.IOException;
 import org.skywalking.apm.collector.agentstream.HttpClientTools;
-import org.skywalking.apm.collector.agentstream.worker.register.application.dao.ApplicationEsDAO;
-import org.skywalking.apm.collector.agentstream.worker.register.instance.dao.InstanceEsDAO;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.dao.ServiceNameEsDAO;
+import org.skywalking.apm.collector.agentregister.worker.application.dao.ApplicationEsDAO;
+import org.skywalking.apm.collector.agentregister.worker.instance.dao.InstanceEsDAO;
+import org.skywalking.apm.collector.agentregister.worker.servicename.dao.ServiceNameEsDAO;
 import org.skywalking.apm.collector.client.elasticsearch.ElasticSearchClient;
 import org.skywalking.apm.collector.core.CollectorException;
 import org.skywalking.apm.collector.core.util.TimeBucketUtils;

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/elasticsearch/StorageElasticSearchConfig.java
Patch:
@@ -7,4 +7,6 @@ public class StorageElasticSearchConfig {
     public static String CLUSTER_NAME;
     public static Boolean CLUSTER_TRANSPORT_SNIFFER;
     public static String CLUSTER_NODES;
+    public static Integer INDEX_SHARDS_NUMBER;
+    public static Integer INDEX_REPLICAS_NUMBER;
 }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/elasticsearch/define/ElasticSearchStorageInstaller.java
Patch:
@@ -11,6 +11,7 @@
 import org.skywalking.apm.collector.core.storage.ColumnDefine;
 import org.skywalking.apm.collector.core.storage.StorageInstaller;
 import org.skywalking.apm.collector.core.storage.TableDefine;
+import org.skywalking.apm.collector.storage.elasticsearch.StorageElasticSearchConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -51,8 +52,8 @@ public class ElasticSearchStorageInstaller extends StorageInstaller {
 
     private Settings createSettingBuilder(ElasticSearchTableDefine tableDefine) {
         return Settings.builder()
-            .put("index.number_of_shards", tableDefine.numberOfShards())
-            .put("index.number_of_replicas", tableDefine.numberOfReplicas())
+            .put("index.number_of_shards", StorageElasticSearchConfig.INDEX_SHARDS_NUMBER)
+            .put("index.number_of_replicas", StorageElasticSearchConfig.INDEX_REPLICAS_NUMBER)
             .put("index.refresh_interval", String.valueOf(tableDefine.refreshInterval()) + "s")
 
             .put("analysis.analyzer.collector_analyzer.tokenizer", "collector_tokenizer")

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/service/InstanceHealthService.java
Patch:
@@ -28,11 +28,12 @@ public JsonObject getInstances(long timeBucket, int applicationId) {
         IInstanceDAO instanceDAO = (IInstanceDAO)DAOContainer.INSTANCE.get(IInstanceDAO.class.getName());
         List<InstanceDataDefine.Instance> instanceList = instanceDAO.getInstances(applicationId, halfHourBeforeTimeBucket);
 
+        JsonArray instances = new JsonArray();
+        response.add("instances", instances);
+
         instanceList.forEach(instance -> {
-            JsonArray instances = new JsonArray();
             response.addProperty("applicationCode", ApplicationCache.getForUI(applicationId));
             response.addProperty("applicationId", applicationId);
-            response.add("instances", instances);
 
             IInstPerformanceDAO instPerformanceDAO = (IInstPerformanceDAO)DAOContainer.INSTANCE.get(IInstPerformanceDAO.class.getName());
             IInstPerformanceDAO.InstPerformance performance = instPerformanceDAO.get(timeBuckets, instance.getInstanceId());

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/service/InstanceHealthService.java
Patch:
@@ -28,11 +28,12 @@ public JsonObject getInstances(long timeBucket, int applicationId) {
         IInstanceDAO instanceDAO = (IInstanceDAO)DAOContainer.INSTANCE.get(IInstanceDAO.class.getName());
         List<InstanceDataDefine.Instance> instanceList = instanceDAO.getInstances(applicationId, halfHourBeforeTimeBucket);
 
+        JsonArray instances = new JsonArray();
+        response.add("instances", instances);
+
         instanceList.forEach(instance -> {
-            JsonArray instances = new JsonArray();
             response.addProperty("applicationCode", ApplicationCache.getForUI(applicationId));
             response.addProperty("applicationId", applicationId);
-            response.add("instances", instances);
 
             IInstPerformanceDAO instPerformanceDAO = (IInstPerformanceDAO)DAOContainer.INSTANCE.get(IInstPerformanceDAO.class.getName());
             IInstPerformanceDAO.InstPerformance performance = instPerformanceDAO.get(timeBuckets, instance.getInstanceId());

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/application/ApplicationIDService.java
Patch:
@@ -1,9 +1,9 @@
 package org.skywalking.apm.collector.agentregister.application;
 
-import org.skywalking.apm.collector.agentstream.worker.cache.ApplicationCache;
-import org.skywalking.apm.collector.storage.define.register.ApplicationDataDefine;
-import org.skywalking.apm.collector.agentstream.worker.register.application.ApplicationRegisterRemoteWorker;
+import org.skywalking.apm.collector.agentregister.worker.application.ApplicationRegisterRemoteWorker;
+import org.skywalking.apm.collector.agentregister.worker.cache.ApplicationCache;
 import org.skywalking.apm.collector.core.framework.CollectorContextHelper;
+import org.skywalking.apm.collector.storage.define.register.ApplicationDataDefine;
 import org.skywalking.apm.collector.stream.StreamModuleContext;
 import org.skywalking.apm.collector.stream.StreamModuleGroupDefine;
 import org.skywalking.apm.collector.stream.worker.WorkerInvokeException;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/instance/InstanceIDService.java
Patch:
@@ -1,7 +1,7 @@
 package org.skywalking.apm.collector.agentregister.instance;
 
-import org.skywalking.apm.collector.agentstream.worker.register.instance.InstanceRegisterRemoteWorker;
-import org.skywalking.apm.collector.agentstream.worker.register.instance.dao.IInstanceDAO;
+import org.skywalking.apm.collector.agentregister.worker.instance.InstanceRegisterRemoteWorker;
+import org.skywalking.apm.collector.agentregister.worker.instance.dao.IInstanceDAO;
 import org.skywalking.apm.collector.core.framework.CollectorContextHelper;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.storage.define.register.InstanceDataDefine;

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/servicename/ServiceNameService.java
Patch:
@@ -1,8 +1,8 @@
 package org.skywalking.apm.collector.agentregister.servicename;
 
 import org.skywalking.apm.collector.storage.define.register.ServiceNameDataDefine;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.ServiceNameRegisterRemoteWorker;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.dao.IServiceNameDAO;
+import org.skywalking.apm.collector.agentregister.worker.servicename.ServiceNameRegisterRemoteWorker;
+import org.skywalking.apm.collector.agentregister.worker.servicename.dao.IServiceNameDAO;
 import org.skywalking.apm.collector.core.framework.CollectorContextHelper;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.stream.StreamModuleContext;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/AgentStreamModuleGroupDefine.java
Patch:
@@ -10,10 +10,10 @@
 public class AgentStreamModuleGroupDefine implements ModuleGroupDefine {
 
     public static final String GROUP_NAME = "agent_stream";
-    private final AgentStreamCommonModuleInstaller installer;
+    private final AgentStreamModuleInstaller installer;
 
     public AgentStreamModuleGroupDefine() {
-        installer = new AgentStreamCommonModuleInstaller();
+        installer = new AgentStreamModuleInstaller();
     }
 
     @Override public String name() {

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/cache/InstanceCache.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.agentstream.worker.register.instance.dao.IInstanceDAO;
+import org.skywalking.apm.collector.agentregister.worker.instance.dao.IInstanceDAO;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 
 /**

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/cache/ServiceCache.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.dao.IServiceNameDAO;
+import org.skywalking.apm.collector.agentregister.worker.servicename.dao.IServiceNameDAO;
 import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 

File: apm-collector/apm-collector-agentstream/src/test/java/org/skywalking/apm/collector/agentstream/mock/SegmentPost.java
Patch:
@@ -5,9 +5,9 @@
 import com.google.gson.JsonObject;
 import java.io.IOException;
 import org.skywalking.apm.collector.agentstream.HttpClientTools;
-import org.skywalking.apm.collector.agentstream.worker.register.application.dao.ApplicationEsDAO;
-import org.skywalking.apm.collector.agentstream.worker.register.instance.dao.InstanceEsDAO;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.dao.ServiceNameEsDAO;
+import org.skywalking.apm.collector.agentregister.worker.application.dao.ApplicationEsDAO;
+import org.skywalking.apm.collector.agentregister.worker.instance.dao.InstanceEsDAO;
+import org.skywalking.apm.collector.agentregister.worker.servicename.dao.ServiceNameEsDAO;
 import org.skywalking.apm.collector.client.elasticsearch.ElasticSearchClient;
 import org.skywalking.apm.collector.core.CollectorException;
 import org.skywalking.apm.collector.core.util.TimeBucketUtils;

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/service/InstanceHealthService.java
Patch:
@@ -28,11 +28,12 @@ public JsonObject getInstances(long timeBucket, int applicationId) {
         IInstanceDAO instanceDAO = (IInstanceDAO)DAOContainer.INSTANCE.get(IInstanceDAO.class.getName());
         List<InstanceDataDefine.Instance> instanceList = instanceDAO.getInstances(applicationId, halfHourBeforeTimeBucket);
 
+        JsonArray instances = new JsonArray();
+        response.add("instances", instances);
+
         instanceList.forEach(instance -> {
-            JsonArray instances = new JsonArray();
             response.addProperty("applicationCode", ApplicationCache.getForUI(applicationId));
             response.addProperty("applicationId", applicationId);
-            response.add("instances", instances);
 
             IInstPerformanceDAO instPerformanceDAO = (IInstPerformanceDAO)DAOContainer.INSTANCE.get(IInstPerformanceDAO.class.getName());
             IInstPerformanceDAO.InstPerformance performance = instPerformanceDAO.get(timeBuckets, instance.getInstanceId());

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/GRPCChannelManager.java
Patch:
@@ -24,7 +24,7 @@
  * @author wusheng
  */
 public class GRPCChannelManager implements BootService, Runnable {
-    private static final ILog logger = LogManager.getLogger(DiscoveryRestServiceClient.class);
+    private static final ILog logger = LogManager.getLogger(GRPCChannelManager.class);
 
     private volatile ManagedChannel managedChannel = null;
     private volatile ScheduledFuture<?> connectCheckFuture;

File: apm-collector/apm-collector-stream/src/main/java/org/skywalking/apm/collector/stream/worker/impl/AggregationWorker.java
Patch:
@@ -73,7 +73,7 @@ protected final void aggregate(Object message) {
         Data data = (Data)message;
         dataCache.writing();
         if (dataCache.containsKey(data.id())) {
-            getRole().dataDefine().mergeData(data, dataCache.get(data.id()));
+            getRole().dataDefine().mergeData(dataCache.get(data.id()), data);
         } else {
             dataCache.put(data.id(), data);
         }

File: apm-collector/apm-collector-stream/src/main/java/org/skywalking/apm/collector/stream/worker/impl/AggregationWorker.java
Patch:
@@ -73,7 +73,7 @@ protected final void aggregate(Object message) {
         Data data = (Data)message;
         dataCache.writing();
         if (dataCache.containsKey(data.id())) {
-            getRole().dataDefine().mergeData(data, dataCache.get(data.id()));
+            getRole().dataDefine().mergeData(dataCache.get(data.id()), data);
         } else {
             dataCache.put(data.id(), data);
         }

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/storage/StorageInstaller.java
Patch:
@@ -18,13 +18,14 @@ public final void install(Client client) throws StorageException {
         try {
             List<TableDefine> tableDefines = defineLoader.load();
             defineFilter(tableDefines);
+            Boolean debug = System.getProperty("debug") != null;
 
             for (TableDefine tableDefine : tableDefines) {
                 tableDefine.initialize();
                 if (!isExists(client, tableDefine)) {
                     logger.info("table: {} not exists", tableDefine.getName());
                     createTable(client, tableDefine);
-                } else {
+                } else if (debug) {
                     logger.info("table: {} exists", tableDefine.getName());
                     deleteTable(client, tableDefine);
                     createTable(client, tableDefine);

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/storage/StorageInstaller.java
Patch:
@@ -18,13 +18,14 @@ public final void install(Client client) throws StorageException {
         try {
             List<TableDefine> tableDefines = defineLoader.load();
             defineFilter(tableDefines);
+            Boolean debug = System.getProperty("debug") != null;
 
             for (TableDefine tableDefine : tableDefines) {
                 tableDefine.initialize();
                 if (!isExists(client, tableDefine)) {
                     logger.info("table: {} not exists", tableDefine.getName());
                     createTable(client, tableDefine);
-                } else {
+                } else if (debug) {
                     logger.info("table: {} exists", tableDefine.getName());
                     deleteTable(client, tableDefine);
                     createTable(client, tableDefine);

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ServiceReferenceEsDAO.java
Patch:
@@ -210,7 +210,7 @@ private void parseSubAggregate(JsonArray serviceReferenceArray, Terms.Bucket fro
     }
 
     private void merge(Map<String, JsonObject> serviceReferenceMap, JsonObject serviceReference) {
-        String id = serviceReference.get(ServiceReferenceTable.COLUMN_FRONT_SERVICE_ID) + Const.ID_SPLIT + serviceReference.get(ServiceReferenceTable.COLUMN_BEHIND_SERVICE_ID);
+        String id = serviceReference.get(ColumnNameUtils.INSTANCE.rename(ServiceReferenceTable.COLUMN_FRONT_SERVICE_ID)) + Const.ID_SPLIT + serviceReference.get(ColumnNameUtils.INSTANCE.rename(ServiceReferenceTable.COLUMN_BEHIND_SERVICE_ID));
 
         if (serviceReferenceMap.containsKey(id)) {
             JsonObject reference = serviceReferenceMap.get(id);

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ServiceReferenceEsDAO.java
Patch:
@@ -210,7 +210,7 @@ private void parseSubAggregate(JsonArray serviceReferenceArray, Terms.Bucket fro
     }
 
     private void merge(Map<String, JsonObject> serviceReferenceMap, JsonObject serviceReference) {
-        String id = serviceReference.get(ServiceReferenceTable.COLUMN_FRONT_SERVICE_ID) + Const.ID_SPLIT + serviceReference.get(ServiceReferenceTable.COLUMN_BEHIND_SERVICE_ID);
+        String id = serviceReference.get(ColumnNameUtils.INSTANCE.rename(ServiceReferenceTable.COLUMN_FRONT_SERVICE_ID)) + Const.ID_SPLIT + serviceReference.get(ColumnNameUtils.INSTANCE.rename(ServiceReferenceTable.COLUMN_BEHIND_SERVICE_ID));
 
         if (serviceReferenceMap.containsKey(id)) {
             JsonObject reference = serviceReferenceMap.get(id);

File: apm-collector/apm-collector-queue/src/main/java/org/skywalking/apm/collector/queue/QueueModuleDefine.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.List;
 import org.skywalking.apm.collector.core.client.Client;
-import org.skywalking.apm.collector.core.client.DataMonitor;
 import org.skywalking.apm.collector.core.framework.Handler;
 import org.skywalking.apm.collector.core.module.ModuleDefine;
 import org.skywalking.apm.collector.core.module.ModuleRegistration;

File: apm-network/src/main/java/org/skywalking/apm/network/trace/component/OfficialComponent.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * @author wusheng
  */
-public class OfficialComponent implements Component{
+public class OfficialComponent implements Component {
     private int id;
     private String name;
 

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/module/SingleModuleInstaller.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.Iterator;
 import java.util.Map;
-import org.skywalking.apm.collector.core.CollectorException;
 import org.skywalking.apm.collector.core.client.ClientException;
 import org.skywalking.apm.collector.core.cluster.ClusterDataListenerDefine;
 import org.skywalking.apm.collector.core.cluster.ClusterModuleContext;

File: apm-collector/apm-collector-stream/src/main/java/org/skywalking/apm/collector/stream/worker/WorkerRefs.java
Patch:
@@ -31,7 +31,7 @@ public void tell(Object message) throws WorkerInvokeException {
         logger.debug("WorkerSelector instance of {}", workerSelector.getClass());
         workerRefs.forEach(workerRef -> {
             if (workerRef instanceof RemoteWorkerRef) {
-                logger.info("message hashcode: {}, select workers: {}", message.hashCode(), workerRef.toString());
+                logger.debug("message hashcode: {}, select workers: {}", message.hashCode(), workerRef.toString());
             }
         });
         workerSelector.select(workerRefs, message).tell(message);

File: apm-collector/apm-collector-stream/src/main/java/org/skywalking/apm/collector/stream/worker/impl/PersistenceWorker.java
Patch:
@@ -122,7 +122,7 @@ private void aggregate(Object message) {
         Data data = (Data)message;
 
         if (dataCache.containsKey(data.id())) {
-            getRole().dataDefine().mergeData(data, dataCache.get(data.id()));
+            getRole().dataDefine().mergeData(dataCache.get(data.id()), data);
         } else {
             dataCache.put(data.id(), data);
         }

File: apm-collector/apm-collector-agentjvm/src/test/java/org/skywalking/apm/collector/agentjvm/grpc/handler/JVMMetricsServiceHandlerTestCase.java
Patch:
@@ -100,7 +100,6 @@ private static void buildMemoryPoolMetric(JVMMetric.Builder jvmMetric) {
     private static MemoryPool.Builder buildMemoryPoolMetric(PoolType poolType, boolean isHeap) {
         MemoryPool.Builder builder = MemoryPool.newBuilder();
         builder.setType(poolType);
-        builder.setIsHeap(isHeap);
         builder.setInit(20);
         builder.setMax(100);
         builder.setUsed(50);

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/cpu/dao/CpuMetricEsDAO.java
Patch:
@@ -25,7 +25,7 @@ public class CpuMetricEsDAO extends EsDAO implements ICpuMetricDAO, IPersistence
 
     @Override public IndexRequestBuilder prepareBatchInsert(Data data) {
         Map<String, Object> source = new HashMap<>();
-        source.put(CpuMetricTable.COLUMN_APPLICATION_INSTANCE_ID, data.getDataInteger(0));
+        source.put(CpuMetricTable.COLUMN_INSTANCE_ID, data.getDataInteger(0));
         source.put(CpuMetricTable.COLUMN_USAGE_PERCENT, data.getDataDouble(0));
         source.put(CpuMetricTable.COLUMN_TIME_BUCKET, data.getDataLong(0));
 

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/cpu/define/CpuMetricEsTableDefine.java
Patch:
@@ -26,7 +26,7 @@ public CpuMetricEsTableDefine() {
     }
 
     @Override public void initialize() {
-        addColumn(new ElasticSearchColumnDefine(CpuMetricTable.COLUMN_APPLICATION_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(CpuMetricTable.COLUMN_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(CpuMetricTable.COLUMN_USAGE_PERCENT, ElasticSearchColumnDefine.Type.Double.name()));
         addColumn(new ElasticSearchColumnDefine(CpuMetricTable.COLUMN_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
     }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/cpu/define/CpuMetricH2TableDefine.java
Patch:
@@ -15,7 +15,7 @@ public CpuMetricH2TableDefine() {
 
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
-        addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_APPLICATION_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_USAGE_PERCENT, H2ColumnDefine.Type.Double.name()));
         addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
     }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/gc/dao/GCMetricEsDAO.java
Patch:
@@ -21,12 +21,11 @@ public class GCMetricEsDAO extends EsDAO implements IGCMetricDAO, IPersistenceDA
 
     @Override public IndexRequestBuilder prepareBatchInsert(Data data) {
         Map<String, Object> source = new HashMap<>();
-        source.put(GCMetricTable.COLUMN_APPLICATION_INSTANCE_ID, data.getDataInteger(0));
+        source.put(GCMetricTable.COLUMN_INSTANCE_ID, data.getDataInteger(0));
         source.put(GCMetricTable.COLUMN_PHRASE, data.getDataInteger(1));
         source.put(GCMetricTable.COLUMN_COUNT, data.getDataLong(0));
         source.put(GCMetricTable.COLUMN_TIME, data.getDataLong(1));
         source.put(GCMetricTable.COLUMN_TIME_BUCKET, data.getDataLong(2));
-        source.put(GCMetricTable.COLUMN_5S_TIME_BUCKET, data.getDataLong(3));
 
         return getClient().prepareIndex(GCMetricTable.TABLE, data.getDataString(0)).setSource(source);
     }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/gc/define/GCMetricEsTableDefine.java
Patch:
@@ -26,11 +26,10 @@ public GCMetricEsTableDefine() {
     }
 
     @Override public void initialize() {
-        addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_APPLICATION_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_PHRASE, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_COUNT, ElasticSearchColumnDefine.Type.Long.name()));
         addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_TIME, ElasticSearchColumnDefine.Type.Long.name()));
         addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
-        addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_5S_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
     }
 }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/gc/define/GCMetricH2TableDefine.java
Patch:
@@ -15,11 +15,10 @@ public GCMetricH2TableDefine() {
 
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
-        addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_APPLICATION_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_PHRASE, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_COUNT, H2ColumnDefine.Type.Bigint.name()));
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_TIME, H2ColumnDefine.Type.Bigint.name()));
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
-        addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_5S_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
     }
 }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memorypool/dao/MemoryPoolMetricEsDAO.java
Patch:
@@ -21,7 +21,7 @@ public class MemoryPoolMetricEsDAO extends EsDAO implements IMemoryPoolMetricDAO
 
     @Override public IndexRequestBuilder prepareBatchInsert(Data data) {
         Map<String, Object> source = new HashMap<>();
-        source.put(MemoryPoolMetricTable.COLUMN_APPLICATION_INSTANCE_ID, data.getDataInteger(0));
+        source.put(MemoryPoolMetricTable.COLUMN_INSTANCE_ID, data.getDataInteger(0));
         source.put(MemoryPoolMetricTable.COLUMN_POOL_TYPE, data.getDataInteger(1));
         source.put(MemoryPoolMetricTable.COLUMN_IS_HEAP, data.getDataBoolean(0));
         source.put(MemoryPoolMetricTable.COLUMN_INIT, data.getDataLong(0));

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memorypool/define/MemoryPoolMetricEsTableDefine.java
Patch:
@@ -26,7 +26,7 @@ public MemoryPoolMetricEsTableDefine() {
     }
 
     @Override public void initialize() {
-        addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_APPLICATION_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_POOL_TYPE, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_IS_HEAP, ElasticSearchColumnDefine.Type.Boolean.name()));
         addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_INIT, ElasticSearchColumnDefine.Type.Long.name()));

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memorypool/define/MemoryPoolMetricH2TableDefine.java
Patch:
@@ -15,7 +15,7 @@ public MemoryPoolMetricH2TableDefine() {
 
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
-        addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_APPLICATION_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_POOL_TYPE, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_IS_HEAP, H2ColumnDefine.Type.Boolean.name()));
         addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_INIT, H2ColumnDefine.Type.Bigint.name()));

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/instance/InstanceIDService.java
Patch:
@@ -33,7 +33,7 @@ public int getOrCreate(int applicationId, String agentUUID, long registerTime, S
                 logger.error(e.getMessage(), e);
             }
         }
-        return applicationId;
+        return instanceId;
     }
 
     public void recover(int instanceId, int applicationId, long registerTime, String osInfo) {

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/instance/performance/define/InstPerformanceEsTableDefine.java
Patch:
@@ -28,9 +28,8 @@ public InstPerformanceEsTableDefine() {
     @Override public void initialize() {
         addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_APPLICATION_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
-        addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_CALL_TIMES, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_CALLS, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_COST_TOTAL, ElasticSearchColumnDefine.Type.Long.name()));
         addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
-        addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_5S_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
     }
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/instance/performance/define/InstPerformanceH2TableDefine.java
Patch:
@@ -17,9 +17,8 @@ public InstPerformanceH2TableDefine() {
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
-        addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_CALL_TIMES, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_CALLS, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_COST_TOTAL, H2ColumnDefine.Type.Bigint.name()));
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
-        addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_5S_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
     }
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/service/entry/ServiceEntrySpanListener.java
Patch:
@@ -29,6 +29,7 @@ public class ServiceEntrySpanListener implements RefsListener, FirstSpanListener
     private int applicationId;
     private int entryServiceId;
     private String entryServiceName;
+    private boolean hasEntry = false;
 
     @Override
     public void parseEntry(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId) {
@@ -39,6 +40,7 @@ public void parseEntry(SpanObject spanObject, int applicationId, int application
         } else {
             this.entryServiceName = ServiceCache.getServiceName(this.entryServiceId);
         }
+        this.hasEntry = true;
     }
 
     @Override public void parseRef(TraceSegmentReference reference, int applicationId, int applicationInstanceId,
@@ -54,7 +56,7 @@ public void parseFirst(SpanObject spanObject, int applicationId, int application
     @Override public void build() {
         logger.debug("entry service listener build");
         StreamModuleContext context = (StreamModuleContext)CollectorContextHelper.INSTANCE.getContext(StreamModuleGroupDefine.GROUP_NAME);
-        if (!hasReference) {
+        if (!hasReference && hasEntry) {
             ServiceEntryDataDefine.ServiceEntry serviceEntry = new ServiceEntryDataDefine.ServiceEntry();
             serviceEntry.setId(applicationId + Const.ID_SPLIT + entryServiceName);
             serviceEntry.setApplicationId(applicationId);

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/util/Const.java
Patch:
@@ -7,6 +7,7 @@ public class Const {
     public static final String ID_SPLIT = "_";
     public static final int USER_ID = 1;
     public static final int NONE_SERVICE_ID = 1;
+    public static final String NONE_SERVICE_NAME = "None";
     public static final String USER_CODE = "User";
     public static final String SEGMENT_SPAN_SPLIT = "S";
     public static final String UNKNOWN = "Unknown";

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/CommonTable.java
Patch:
@@ -8,5 +8,4 @@ public class CommonTable {
     public static final String COLUMN_ID = "id";
     public static final String COLUMN_AGG = "agg";
     public static final String COLUMN_TIME_BUCKET = "time_bucket";
-    public static final String COLUMN_5S_TIME_BUCKET = "s5_time_bucket";
 }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/instance/InstPerformanceTable.java
Patch:
@@ -9,6 +9,6 @@ public class InstPerformanceTable extends CommonTable {
     public static final String TABLE = "instance_performance";
     public static final String COLUMN_APPLICATION_ID = "application_id";
     public static final String COLUMN_INSTANCE_ID = "instance_id";
-    public static final String COLUMN_CALL_TIMES = "call_times";
+    public static final String COLUMN_CALLS = "calls";
     public static final String COLUMN_COST_TOTAL = "cost_total";
 }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/jvm/CpuMetricTable.java
Patch:
@@ -7,6 +7,6 @@
  */
 public class CpuMetricTable extends CommonTable {
     public static final String TABLE = "cpu_metric";
-    public static final String COLUMN_APPLICATION_INSTANCE_ID = "application_instance_id";
+    public static final String COLUMN_INSTANCE_ID = "instance_id";
     public static final String COLUMN_USAGE_PERCENT = "usage_percent";
 }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/jvm/GCMetricTable.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class GCMetricTable extends CommonTable {
     public static final String TABLE = "gc_metric";
-    public static final String COLUMN_APPLICATION_INSTANCE_ID = "application_instance_id";
+    public static final String COLUMN_INSTANCE_ID = "instance_id";
     public static final String COLUMN_PHRASE = "phrase";
     public static final String COLUMN_COUNT = "count";
     public static final String COLUMN_TIME = "time";

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/jvm/MemoryPoolMetricTable.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class MemoryPoolMetricTable extends CommonTable {
     public static final String TABLE = "memory_pool_metric";
-    public static final String COLUMN_APPLICATION_INSTANCE_ID = "application_instance_id";
+    public static final String COLUMN_INSTANCE_ID = "instance_id";
     public static final String COLUMN_POOL_TYPE = "pool_type";
     public static final String COLUMN_IS_HEAP = "is_heap";
     public static final String COLUMN_INIT = "init";

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/service/ServiceEntryDataDefine.java
Patch:
@@ -21,7 +21,7 @@ public class ServiceEntryDataDefine extends DataDefine {
     @Override protected void attributeDefine() {
         addAttribute(0, new Attribute(ServiceEntryTable.COLUMN_ID, AttributeType.STRING, new NonOperation()));
         addAttribute(1, new Attribute(ServiceEntryTable.COLUMN_APPLICATION_ID, AttributeType.INTEGER, new NonOperation()));
-        addAttribute(2, new Attribute(ServiceEntryTable.COLUMN_ENTRY_SERVICE_ID, AttributeType.INTEGER, new NonOperation()));
+        addAttribute(2, new Attribute(ServiceEntryTable.COLUMN_ENTRY_SERVICE_ID, AttributeType.INTEGER, new CoverOperation()));
         addAttribute(3, new Attribute(ServiceEntryTable.COLUMN_ENTRY_SERVICE_NAME, AttributeType.STRING, new NonOperation()));
         addAttribute(4, new Attribute(ServiceEntryTable.COLUMN_REGISTER_TIME, AttributeType.LONG, new NonOperation()));
         addAttribute(5, new Attribute(ServiceEntryTable.COLUMN_NEWEST_TIME, AttributeType.LONG, new CoverOperation()));

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/cache/ServiceNameCache.java
Patch:
@@ -12,7 +12,7 @@
 public class ServiceNameCache {
 
     //TODO size configuration
-    private static Cache<Integer, String> CACHE = CacheBuilder.newBuilder().maximumSize(1000).build();
+    private static Cache<Integer, String> CACHE = CacheBuilder.newBuilder().maximumSize(10000).build();
 
     public static String get(int serviceId) {
         try {

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/GCMetricH2DAO.java
Patch:
@@ -8,7 +8,7 @@
  */
 public class GCMetricH2DAO extends H2DAO implements IGCMetricDAO {
 
-    @Override public GCCount getGCCount(long timestamp, int instanceId) {
+    @Override public GCCount getGCCount(long[] timeBuckets, int instanceId) {
         return null;
     }
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/IGCMetricDAO.java
Patch:
@@ -7,7 +7,7 @@
  */
 public interface IGCMetricDAO {
 
-    GCCount getGCCount(long timestamp, int instanceId);
+    GCCount getGCCount(long[] timeBuckets, int instanceId);
 
     JsonObject getMetric(int instanceId, long timeBucket);
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/IInstanceDAO.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonArray;
+import java.util.List;
 import org.skywalking.apm.collector.storage.define.register.InstanceDataDefine;
 
 /**
@@ -15,6 +16,8 @@ public interface IInstanceDAO {
 
     InstanceDataDefine.Instance getInstance(int instanceId);
 
+    List<InstanceDataDefine.Instance> getInstances(int applicationId, long timeBucket);
+
     class Application {
         private final int applicationId;
         private final long count;

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ISegmentCostDAO.java
Patch:
@@ -1,13 +1,14 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonObject;
+import java.util.List;
 
 /**
  * @author pengys5
  */
 public interface ISegmentCostDAO {
     JsonObject loadTop(long startTime, long endTime, long minCost, long maxCost, String operationName,
-        String globalTraceId, int limit, int from, Sort sort);
+        List<String> segmentIds, int limit, int from, Sort sort);
 
     public enum Sort {
         Cost, Time

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/IServiceReferenceDAO.java
Patch:
@@ -7,4 +7,6 @@
  */
 public interface IServiceReferenceDAO {
     JsonArray load(int entryServiceId, long startTime, long endTime);
+
+    JsonArray load(String entryServiceName, int entryApplicationId, long startTime, long endTime);
 }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/InstPerformanceH2DAO.java
Patch:
@@ -1,15 +1,14 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonArray;
-import java.util.List;
 import org.skywalking.apm.collector.storage.h2.dao.H2DAO;
 
 /**
  * @author pengys5
  */
 public class InstPerformanceH2DAO extends H2DAO implements IInstPerformanceDAO {
 
-    @Override public List<InstPerformance> getMultiple(long timestamp, int applicationId) {
+    @Override public InstPerformance get(long[] timeBuckets, int instanceId) {
         return null;
     }
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/SegmentCostH2DAO.java
Patch:
@@ -1,14 +1,15 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonObject;
+import java.util.List;
 import org.skywalking.apm.collector.storage.h2.dao.H2DAO;
 
 /**
  * @author pengys5
  */
 public class SegmentCostH2DAO extends H2DAO implements ISegmentCostDAO {
     @Override public JsonObject loadTop(long startTime, long endTime, long minCost, long maxCost, String operationName,
-        String globalTraceId, int limit, int from, Sort sort) {
+        List<String> segmentIds, int limit, int from, Sort sort) {
         return null;
     }
 }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ServiceNameEsDAO.java
Patch:
@@ -22,7 +22,9 @@ public class ServiceNameEsDAO extends EsDAO implements IServiceNameDAO {
 
         GetResponse getResponse = getRequestBuilder.get();
         if (getResponse.isExists()) {
-            return (String)getResponse.getSource().get(ServiceNameTable.COLUMN_SERVICE_NAME);
+            String serviceName = (String)getResponse.getSource().get(ServiceNameTable.COLUMN_SERVICE_NAME);
+            int applicationId = ((Number)getResponse.getSource().get(ServiceNameTable.COLUMN_APPLICATION_ID)).intValue();
+            return applicationId + Const.ID_SPLIT + serviceName;
         }
         return Const.UNKNOWN;
     }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/jetty/handler/servicetree/ServiceTreeGetByIdHandler.java
Patch:
@@ -11,12 +11,12 @@
 /**
  * @author pengys5
  */
-public class ServiceTreeGetHandler extends JettyHandler {
+public class ServiceTreeGetByIdHandler extends JettyHandler {
 
-    private final Logger logger = LoggerFactory.getLogger(ServiceTreeGetHandler.class);
+    private final Logger logger = LoggerFactory.getLogger(ServiceTreeGetByIdHandler.class);
 
     @Override public String pathSpec() {
-        return "/service/tree";
+        return "/service/tree/entryServiceId";
     }
 
     private ServiceTreeService service = new ServiceTreeService();

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/dictionary/OperationNameDictionary.java
Patch:
@@ -35,7 +35,7 @@ private PossibleFound find0(int applicationId, String operationName, boolean reg
         OperationNameKey key = new OperationNameKey(applicationId, operationName);
         Integer operationId = operationNameDictionary.get(key);
         if (operationId != null) {
-            return new Found(applicationId);
+            return new Found(operationId);
         } else {
             if (registerWhenNotFound &&
                 operationNameDictionary.size() + unRegisterOperationNames.size() < OPERATION_NAME_BUFFER_SIZE) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/cpu/CPUMetricAccessor.java
Patch:
@@ -27,6 +27,6 @@ public CPU getCPUMetric() {
         long now = System.nanoTime();
 
         CPU.Builder cpuBuilder = CPU.newBuilder();
-        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / (now - lastSampleTimeNs) * cpuCoreNum).build();
+        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / ((now - lastSampleTimeNs) * cpuCoreNum)).build();
     }
 }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/cpu/dao/CpuMetricEsDAO.java
Patch:
@@ -25,7 +25,7 @@ public class CpuMetricEsDAO extends EsDAO implements ICpuMetricDAO, IPersistence
 
     @Override public IndexRequestBuilder prepareBatchInsert(Data data) {
         Map<String, Object> source = new HashMap<>();
-        source.put(CpuMetricTable.COLUMN_APPLICATION_INSTANCE_ID, data.getDataInteger(0));
+        source.put(CpuMetricTable.COLUMN_INSTANCE_ID, data.getDataInteger(0));
         source.put(CpuMetricTable.COLUMN_USAGE_PERCENT, data.getDataDouble(0));
         source.put(CpuMetricTable.COLUMN_TIME_BUCKET, data.getDataLong(0));
 

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/cpu/define/CpuMetricEsTableDefine.java
Patch:
@@ -26,7 +26,7 @@ public CpuMetricEsTableDefine() {
     }
 
     @Override public void initialize() {
-        addColumn(new ElasticSearchColumnDefine(CpuMetricTable.COLUMN_APPLICATION_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(CpuMetricTable.COLUMN_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(CpuMetricTable.COLUMN_USAGE_PERCENT, ElasticSearchColumnDefine.Type.Double.name()));
         addColumn(new ElasticSearchColumnDefine(CpuMetricTable.COLUMN_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
     }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/cpu/define/CpuMetricH2TableDefine.java
Patch:
@@ -15,7 +15,7 @@ public CpuMetricH2TableDefine() {
 
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
-        addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_APPLICATION_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_USAGE_PERCENT, H2ColumnDefine.Type.Double.name()));
         addColumn(new H2ColumnDefine(CpuMetricTable.COLUMN_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
     }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/gc/dao/GCMetricEsDAO.java
Patch:
@@ -21,12 +21,11 @@ public class GCMetricEsDAO extends EsDAO implements IGCMetricDAO, IPersistenceDA
 
     @Override public IndexRequestBuilder prepareBatchInsert(Data data) {
         Map<String, Object> source = new HashMap<>();
-        source.put(GCMetricTable.COLUMN_APPLICATION_INSTANCE_ID, data.getDataInteger(0));
+        source.put(GCMetricTable.COLUMN_INSTANCE_ID, data.getDataInteger(0));
         source.put(GCMetricTable.COLUMN_PHRASE, data.getDataInteger(1));
         source.put(GCMetricTable.COLUMN_COUNT, data.getDataLong(0));
         source.put(GCMetricTable.COLUMN_TIME, data.getDataLong(1));
         source.put(GCMetricTable.COLUMN_TIME_BUCKET, data.getDataLong(2));
-        source.put(GCMetricTable.COLUMN_5S_TIME_BUCKET, data.getDataLong(3));
 
         return getClient().prepareIndex(GCMetricTable.TABLE, data.getDataString(0)).setSource(source);
     }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/gc/define/GCMetricEsTableDefine.java
Patch:
@@ -26,11 +26,10 @@ public GCMetricEsTableDefine() {
     }
 
     @Override public void initialize() {
-        addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_APPLICATION_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_PHRASE, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_COUNT, ElasticSearchColumnDefine.Type.Long.name()));
         addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_TIME, ElasticSearchColumnDefine.Type.Long.name()));
         addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
-        addColumn(new ElasticSearchColumnDefine(GCMetricTable.COLUMN_5S_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
     }
 }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/gc/define/GCMetricH2TableDefine.java
Patch:
@@ -15,11 +15,10 @@ public GCMetricH2TableDefine() {
 
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
-        addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_APPLICATION_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_PHRASE, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_COUNT, H2ColumnDefine.Type.Bigint.name()));
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_TIME, H2ColumnDefine.Type.Bigint.name()));
         addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
-        addColumn(new H2ColumnDefine(GCMetricTable.COLUMN_5S_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
     }
 }

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memorypool/dao/MemoryPoolMetricEsDAO.java
Patch:
@@ -21,7 +21,7 @@ public class MemoryPoolMetricEsDAO extends EsDAO implements IMemoryPoolMetricDAO
 
     @Override public IndexRequestBuilder prepareBatchInsert(Data data) {
         Map<String, Object> source = new HashMap<>();
-        source.put(MemoryPoolMetricTable.COLUMN_APPLICATION_INSTANCE_ID, data.getDataInteger(0));
+        source.put(MemoryPoolMetricTable.COLUMN_INSTANCE_ID, data.getDataInteger(0));
         source.put(MemoryPoolMetricTable.COLUMN_POOL_TYPE, data.getDataInteger(1));
         source.put(MemoryPoolMetricTable.COLUMN_IS_HEAP, data.getDataBoolean(0));
         source.put(MemoryPoolMetricTable.COLUMN_INIT, data.getDataLong(0));

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memorypool/define/MemoryPoolMetricEsTableDefine.java
Patch:
@@ -26,7 +26,7 @@ public MemoryPoolMetricEsTableDefine() {
     }
 
     @Override public void initialize() {
-        addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_APPLICATION_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_POOL_TYPE, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_IS_HEAP, ElasticSearchColumnDefine.Type.Boolean.name()));
         addColumn(new ElasticSearchColumnDefine(MemoryPoolMetricTable.COLUMN_INIT, ElasticSearchColumnDefine.Type.Long.name()));

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memorypool/define/MemoryPoolMetricH2TableDefine.java
Patch:
@@ -15,7 +15,7 @@ public MemoryPoolMetricH2TableDefine() {
 
     @Override public void initialize() {
         addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
-        addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_APPLICATION_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_POOL_TYPE, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_IS_HEAP, H2ColumnDefine.Type.Boolean.name()));
         addColumn(new H2ColumnDefine(MemoryPoolMetricTable.COLUMN_INIT, H2ColumnDefine.Type.Bigint.name()));

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/instance/InstanceIDService.java
Patch:
@@ -33,7 +33,7 @@ public int getOrCreate(int applicationId, String agentUUID, long registerTime, S
                 logger.error(e.getMessage(), e);
             }
         }
-        return applicationId;
+        return instanceId;
     }
 
     public void recover(int instanceId, int applicationId, long registerTime, String osInfo) {

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/instance/performance/define/InstPerformanceEsTableDefine.java
Patch:
@@ -28,9 +28,8 @@ public InstPerformanceEsTableDefine() {
     @Override public void initialize() {
         addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_APPLICATION_ID, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_INSTANCE_ID, ElasticSearchColumnDefine.Type.Integer.name()));
-        addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_CALL_TIMES, ElasticSearchColumnDefine.Type.Integer.name()));
+        addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_CALLS, ElasticSearchColumnDefine.Type.Integer.name()));
         addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_COST_TOTAL, ElasticSearchColumnDefine.Type.Long.name()));
         addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
-        addColumn(new ElasticSearchColumnDefine(InstPerformanceTable.COLUMN_5S_TIME_BUCKET, ElasticSearchColumnDefine.Type.Long.name()));
     }
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/instance/performance/define/InstPerformanceH2TableDefine.java
Patch:
@@ -17,9 +17,8 @@ public InstPerformanceH2TableDefine() {
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_ID, H2ColumnDefine.Type.Varchar.name()));
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_APPLICATION_ID, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_INSTANCE_ID, H2ColumnDefine.Type.Int.name()));
-        addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_CALL_TIMES, H2ColumnDefine.Type.Int.name()));
+        addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_CALLS, H2ColumnDefine.Type.Int.name()));
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_COST_TOTAL, H2ColumnDefine.Type.Bigint.name()));
         addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
-        addColumn(new H2ColumnDefine(InstPerformanceTable.COLUMN_5S_TIME_BUCKET, H2ColumnDefine.Type.Bigint.name()));
     }
 }

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/service/entry/ServiceEntrySpanListener.java
Patch:
@@ -29,6 +29,7 @@ public class ServiceEntrySpanListener implements RefsListener, FirstSpanListener
     private int applicationId;
     private int entryServiceId;
     private String entryServiceName;
+    private boolean hasEntry = false;
 
     @Override
     public void parseEntry(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId) {
@@ -39,6 +40,7 @@ public void parseEntry(SpanObject spanObject, int applicationId, int application
         } else {
             this.entryServiceName = ServiceCache.getServiceName(this.entryServiceId);
         }
+        this.hasEntry = true;
     }
 
     @Override public void parseRef(TraceSegmentReference reference, int applicationId, int applicationInstanceId,
@@ -54,7 +56,7 @@ public void parseFirst(SpanObject spanObject, int applicationId, int application
     @Override public void build() {
         logger.debug("entry service listener build");
         StreamModuleContext context = (StreamModuleContext)CollectorContextHelper.INSTANCE.getContext(StreamModuleGroupDefine.GROUP_NAME);
-        if (!hasReference) {
+        if (!hasReference && hasEntry) {
             ServiceEntryDataDefine.ServiceEntry serviceEntry = new ServiceEntryDataDefine.ServiceEntry();
             serviceEntry.setId(applicationId + Const.ID_SPLIT + entryServiceName);
             serviceEntry.setApplicationId(applicationId);

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/util/Const.java
Patch:
@@ -7,6 +7,7 @@ public class Const {
     public static final String ID_SPLIT = "_";
     public static final int USER_ID = 1;
     public static final int NONE_SERVICE_ID = 1;
+    public static final String NONE_SERVICE_NAME = "None";
     public static final String USER_CODE = "User";
     public static final String SEGMENT_SPAN_SPLIT = "S";
     public static final String UNKNOWN = "Unknown";

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/CommonTable.java
Patch:
@@ -8,5 +8,4 @@ public class CommonTable {
     public static final String COLUMN_ID = "id";
     public static final String COLUMN_AGG = "agg";
     public static final String COLUMN_TIME_BUCKET = "time_bucket";
-    public static final String COLUMN_5S_TIME_BUCKET = "s5_time_bucket";
 }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/instance/InstPerformanceTable.java
Patch:
@@ -9,6 +9,6 @@ public class InstPerformanceTable extends CommonTable {
     public static final String TABLE = "instance_performance";
     public static final String COLUMN_APPLICATION_ID = "application_id";
     public static final String COLUMN_INSTANCE_ID = "instance_id";
-    public static final String COLUMN_CALL_TIMES = "call_times";
+    public static final String COLUMN_CALLS = "calls";
     public static final String COLUMN_COST_TOTAL = "cost_total";
 }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/jvm/CpuMetricTable.java
Patch:
@@ -7,6 +7,6 @@
  */
 public class CpuMetricTable extends CommonTable {
     public static final String TABLE = "cpu_metric";
-    public static final String COLUMN_APPLICATION_INSTANCE_ID = "application_instance_id";
+    public static final String COLUMN_INSTANCE_ID = "instance_id";
     public static final String COLUMN_USAGE_PERCENT = "usage_percent";
 }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/jvm/GCMetricTable.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class GCMetricTable extends CommonTable {
     public static final String TABLE = "gc_metric";
-    public static final String COLUMN_APPLICATION_INSTANCE_ID = "application_instance_id";
+    public static final String COLUMN_INSTANCE_ID = "instance_id";
     public static final String COLUMN_PHRASE = "phrase";
     public static final String COLUMN_COUNT = "count";
     public static final String COLUMN_TIME = "time";

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/jvm/MemoryPoolMetricTable.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class MemoryPoolMetricTable extends CommonTable {
     public static final String TABLE = "memory_pool_metric";
-    public static final String COLUMN_APPLICATION_INSTANCE_ID = "application_instance_id";
+    public static final String COLUMN_INSTANCE_ID = "instance_id";
     public static final String COLUMN_POOL_TYPE = "pool_type";
     public static final String COLUMN_IS_HEAP = "is_heap";
     public static final String COLUMN_INIT = "init";

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/service/ServiceEntryDataDefine.java
Patch:
@@ -21,7 +21,7 @@ public class ServiceEntryDataDefine extends DataDefine {
     @Override protected void attributeDefine() {
         addAttribute(0, new Attribute(ServiceEntryTable.COLUMN_ID, AttributeType.STRING, new NonOperation()));
         addAttribute(1, new Attribute(ServiceEntryTable.COLUMN_APPLICATION_ID, AttributeType.INTEGER, new NonOperation()));
-        addAttribute(2, new Attribute(ServiceEntryTable.COLUMN_ENTRY_SERVICE_ID, AttributeType.INTEGER, new NonOperation()));
+        addAttribute(2, new Attribute(ServiceEntryTable.COLUMN_ENTRY_SERVICE_ID, AttributeType.INTEGER, new CoverOperation()));
         addAttribute(3, new Attribute(ServiceEntryTable.COLUMN_ENTRY_SERVICE_NAME, AttributeType.STRING, new NonOperation()));
         addAttribute(4, new Attribute(ServiceEntryTable.COLUMN_REGISTER_TIME, AttributeType.LONG, new NonOperation()));
         addAttribute(5, new Attribute(ServiceEntryTable.COLUMN_NEWEST_TIME, AttributeType.LONG, new CoverOperation()));

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/cache/ServiceNameCache.java
Patch:
@@ -12,7 +12,7 @@
 public class ServiceNameCache {
 
     //TODO size configuration
-    private static Cache<Integer, String> CACHE = CacheBuilder.newBuilder().maximumSize(1000).build();
+    private static Cache<Integer, String> CACHE = CacheBuilder.newBuilder().maximumSize(10000).build();
 
     public static String get(int serviceId) {
         try {

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/GCMetricH2DAO.java
Patch:
@@ -8,7 +8,7 @@
  */
 public class GCMetricH2DAO extends H2DAO implements IGCMetricDAO {
 
-    @Override public GCCount getGCCount(long timestamp, int instanceId) {
+    @Override public GCCount getGCCount(long[] timeBuckets, int instanceId) {
         return null;
     }
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/IGCMetricDAO.java
Patch:
@@ -7,7 +7,7 @@
  */
 public interface IGCMetricDAO {
 
-    GCCount getGCCount(long timestamp, int instanceId);
+    GCCount getGCCount(long[] timeBuckets, int instanceId);
 
     JsonObject getMetric(int instanceId, long timeBucket);
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/IInstanceDAO.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonArray;
+import java.util.List;
 import org.skywalking.apm.collector.storage.define.register.InstanceDataDefine;
 
 /**
@@ -15,6 +16,8 @@ public interface IInstanceDAO {
 
     InstanceDataDefine.Instance getInstance(int instanceId);
 
+    List<InstanceDataDefine.Instance> getInstances(int applicationId, long timeBucket);
+
     class Application {
         private final int applicationId;
         private final long count;

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ISegmentCostDAO.java
Patch:
@@ -1,13 +1,14 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonObject;
+import java.util.List;
 
 /**
  * @author pengys5
  */
 public interface ISegmentCostDAO {
     JsonObject loadTop(long startTime, long endTime, long minCost, long maxCost, String operationName,
-        String globalTraceId, int limit, int from, Sort sort);
+        List<String> segmentIds, int limit, int from, Sort sort);
 
     public enum Sort {
         Cost, Time

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/IServiceReferenceDAO.java
Patch:
@@ -7,4 +7,6 @@
  */
 public interface IServiceReferenceDAO {
     JsonArray load(int entryServiceId, long startTime, long endTime);
+
+    JsonArray load(String entryServiceName, int entryApplicationId, long startTime, long endTime);
 }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/InstPerformanceH2DAO.java
Patch:
@@ -1,15 +1,14 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonArray;
-import java.util.List;
 import org.skywalking.apm.collector.storage.h2.dao.H2DAO;
 
 /**
  * @author pengys5
  */
 public class InstPerformanceH2DAO extends H2DAO implements IInstPerformanceDAO {
 
-    @Override public List<InstPerformance> getMultiple(long timestamp, int applicationId) {
+    @Override public InstPerformance get(long[] timeBuckets, int instanceId) {
         return null;
     }
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/SegmentCostH2DAO.java
Patch:
@@ -1,14 +1,15 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonObject;
+import java.util.List;
 import org.skywalking.apm.collector.storage.h2.dao.H2DAO;
 
 /**
  * @author pengys5
  */
 public class SegmentCostH2DAO extends H2DAO implements ISegmentCostDAO {
     @Override public JsonObject loadTop(long startTime, long endTime, long minCost, long maxCost, String operationName,
-        String globalTraceId, int limit, int from, Sort sort) {
+        List<String> segmentIds, int limit, int from, Sort sort) {
         return null;
     }
 }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ServiceNameEsDAO.java
Patch:
@@ -22,7 +22,9 @@ public class ServiceNameEsDAO extends EsDAO implements IServiceNameDAO {
 
         GetResponse getResponse = getRequestBuilder.get();
         if (getResponse.isExists()) {
-            return (String)getResponse.getSource().get(ServiceNameTable.COLUMN_SERVICE_NAME);
+            String serviceName = (String)getResponse.getSource().get(ServiceNameTable.COLUMN_SERVICE_NAME);
+            int applicationId = ((Number)getResponse.getSource().get(ServiceNameTable.COLUMN_APPLICATION_ID)).intValue();
+            return applicationId + Const.ID_SPLIT + serviceName;
         }
         return Const.UNKNOWN;
     }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/jetty/handler/servicetree/ServiceTreeGetByIdHandler.java
Patch:
@@ -11,12 +11,12 @@
 /**
  * @author pengys5
  */
-public class ServiceTreeGetHandler extends JettyHandler {
+public class ServiceTreeGetByIdHandler extends JettyHandler {
 
-    private final Logger logger = LoggerFactory.getLogger(ServiceTreeGetHandler.class);
+    private final Logger logger = LoggerFactory.getLogger(ServiceTreeGetByIdHandler.class);
 
     @Override public String pathSpec() {
-        return "/service/tree";
+        return "/service/tree/entryServiceId";
     }
 
     private ServiceTreeService service = new ServiceTreeService();

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -57,7 +57,7 @@ public static class Collector {
         /**
          * Collector service discovery REST service name
          */
-        public static String DISCOVERY_SERVICE_NAME = "/grpc/addresses";
+        public static String DISCOVERY_SERVICE_NAME = "/agentstream/grpc";
     }
 
     public static class Jvm {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/dictionary/OperationNameDictionary.java
Patch:
@@ -35,7 +35,7 @@ private PossibleFound find0(int applicationId, String operationName, boolean reg
         OperationNameKey key = new OperationNameKey(applicationId, operationName);
         Integer operationId = operationNameDictionary.get(key);
         if (operationId != null) {
-            return new Found(applicationId);
+            return new Found(operationId);
         } else {
             if (registerWhenNotFound &&
                 operationNameDictionary.size() + unRegisterOperationNames.size() < OPERATION_NAME_BUFFER_SIZE) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/cpu/CPUMetricAccessor.java
Patch:
@@ -27,6 +27,6 @@ public CPU getCPUMetric() {
         long now = System.nanoTime();
 
         CPU.Builder cpuBuilder = CPU.newBuilder();
-        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / (now - lastSampleTimeNs) * cpuCoreNum).build();
+        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / ((now - lastSampleTimeNs) * cpuCoreNum)).build();
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/GRPCStreamServiceStatus.java
Patch:
@@ -21,7 +21,7 @@ public void finished() {
     /**
      * @param maxTimeout max wait time, milliseconds.
      */
-    public void wait4Finish(long maxTimeout) {
+    public boolean wait4Finish(long maxTimeout) {
         long time = 0;
         while (!status) {
             if (time > maxTimeout) {
@@ -30,6 +30,7 @@ public void wait4Finish(long maxTimeout) {
             try2Sleep(5);
             time += 5;
         }
+        return status;
     }
 
     /**

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/cpu/CPUMetricAccessor.java
Patch:
@@ -27,6 +27,6 @@ public CPU getCPUMetric() {
         long now = System.nanoTime();
 
         CPU.Builder cpuBuilder = CPU.newBuilder();
-        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / (now - lastSampleTimeNs) * cpuCoreNum).build();
+        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / ((now - lastSampleTimeNs) * cpuCoreNum)).build();
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/cpu/CPUMetricAccessor.java
Patch:
@@ -27,6 +27,6 @@ public CPU getCPUMetric() {
         long now = System.nanoTime();
 
         CPU.Builder cpuBuilder = CPU.newBuilder();
-        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / (now - lastSampleTimeNs) * cpuCoreNum).build();
+        return cpuBuilder.setUsagePercent(cpuCost * 1.0d / ((now - lastSampleTimeNs) * cpuCoreNum)).build();
     }
 }

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/ISegmentCostDAO.java
Patch:
@@ -1,13 +1,14 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonObject;
+import java.util.List;
 
 /**
  * @author pengys5
  */
 public interface ISegmentCostDAO {
     JsonObject loadTop(long startTime, long endTime, long minCost, long maxCost, String operationName,
-        String globalTraceId, int limit, int from, Sort sort);
+        List<String> segmentIds, int limit, int from, Sort sort);
 
     public enum Sort {
         Cost, Time

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/SegmentCostH2DAO.java
Patch:
@@ -1,14 +1,15 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonObject;
+import java.util.List;
 import org.skywalking.apm.collector.storage.h2.dao.H2DAO;
 
 /**
  * @author pengys5
  */
 public class SegmentCostH2DAO extends H2DAO implements ISegmentCostDAO {
     @Override public JsonObject loadTop(long startTime, long endTime, long minCost, long maxCost, String operationName,
-        String globalTraceId, int limit, int from, Sort sort) {
+        List<String> segmentIds, int limit, int from, Sort sort) {
         return null;
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/dictionary/OperationNameDictionary.java
Patch:
@@ -35,7 +35,7 @@ private PossibleFound find0(int applicationId, String operationName, boolean reg
         OperationNameKey key = new OperationNameKey(applicationId, operationName);
         Integer operationId = operationNameDictionary.get(key);
         if (operationId != null) {
-            return new Found(applicationId);
+            return new Found(operationId);
         } else {
             if (registerWhenNotFound &&
                 operationNameDictionary.size() + unRegisterOperationNames.size() < OPERATION_NAME_BUFFER_SIZE) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -57,7 +57,7 @@ public static class Collector {
         /**
          * Collector service discovery REST service name
          */
-        public static String DISCOVERY_SERVICE_NAME = "/grpc/addresses";
+        public static String DISCOVERY_SERVICE_NAME = "/agentstream/grpc";
     }
 
     public static class Jvm {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/GRPCStreamServiceStatus.java
Patch:
@@ -21,7 +21,7 @@ public void finished() {
     /**
      * @param maxTimeout max wait time, milliseconds.
      */
-    public void wait4Finish(long maxTimeout) {
+    public boolean wait4Finish(long maxTimeout) {
         long time = 0;
         while (!status) {
             if (time > maxTimeout) {
@@ -30,6 +30,7 @@ public void wait4Finish(long maxTimeout) {
             try2Sleep(5);
             time += 5;
         }
+        return status;
     }
 
     /**

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/servicename/ServiceNameRegisterSerialWorker.java
Patch:
@@ -43,7 +43,7 @@ public ServiceNameRegisterSerialWorker(Role role, ClusterWorkerContext clusterCo
             if (serviceId == 0) {
                 int min = dao.getMinServiceId();
                 if (min == 0) {
-                    ServiceNameDataDefine.ServiceName noneServiceName = new ServiceNameDataDefine.ServiceName("1", Const.NONE_SERVICE_Name, 0, Const.NONE_SERVICE_ID);
+                    ServiceNameDataDefine.ServiceName noneServiceName = new ServiceNameDataDefine.ServiceName("1", Const.NONE_SERVICE_NAME, 0, Const.NONE_SERVICE_ID);
                     dao.save(noneServiceName);
 
                     serviceName.setServiceId(-1);

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/util/Const.java
Patch:
@@ -7,7 +7,7 @@ public class Const {
     public static final String ID_SPLIT = "_";
     public static final int USER_ID = 1;
     public static final int NONE_SERVICE_ID = 1;
-    public static final String NONE_SERVICE_Name = "None";
+    public static final String NONE_SERVICE_NAME = "None";
     public static final String USER_CODE = "User";
     public static final String SEGMENT_SPAN_SPLIT = "S";
     public static final String UNKNOWN = "Unknown";

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/servicename/ServiceNameRegisterSerialWorker.java
Patch:
@@ -43,7 +43,7 @@ public ServiceNameRegisterSerialWorker(Role role, ClusterWorkerContext clusterCo
             if (serviceId == 0) {
                 int min = dao.getMinServiceId();
                 if (min == 0) {
-                    ServiceNameDataDefine.ServiceName noneServiceName = new ServiceNameDataDefine.ServiceName("1", Const.NONE_SERVICE_Name, 0, Const.NONE_SERVICE_ID);
+                    ServiceNameDataDefine.ServiceName noneServiceName = new ServiceNameDataDefine.ServiceName("1", Const.NONE_SERVICE_NAME, 0, Const.NONE_SERVICE_ID);
                     dao.save(noneServiceName);
 
                     serviceName.setServiceId(-1);

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/util/Const.java
Patch:
@@ -7,7 +7,7 @@ public class Const {
     public static final String ID_SPLIT = "_";
     public static final int USER_ID = 1;
     public static final int NONE_SERVICE_ID = 1;
-    public static final String NONE_SERVICE_Name = "None";
+    public static final String NONE_SERVICE_NAME = "None";
     public static final String USER_CODE = "User";
     public static final String SEGMENT_SPAN_SPLIT = "S";
     public static final String UNKNOWN = "Unknown";

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -57,7 +57,7 @@ public static class Collector {
         /**
          * Collector service discovery REST service name
          */
-        public static String DISCOVERY_SERVICE_NAME = "/grpc/addresses";
+        public static String DISCOVERY_SERVICE_NAME = "/agentstream/grpc";
     }
 
     public static class Jvm {

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/service/entry/ServiceEntrySpanListener.java
Patch:
@@ -29,6 +29,7 @@ public class ServiceEntrySpanListener implements RefsListener, FirstSpanListener
     private int applicationId;
     private int entryServiceId;
     private String entryServiceName;
+    private boolean hasEntry = false;
 
     @Override
     public void parseEntry(SpanObject spanObject, int applicationId, int applicationInstanceId, String segmentId) {
@@ -39,6 +40,7 @@ public void parseEntry(SpanObject spanObject, int applicationId, int application
         } else {
             this.entryServiceName = ServiceCache.getServiceName(this.entryServiceId);
         }
+        this.hasEntry = true;
     }
 
     @Override public void parseRef(TraceSegmentReference reference, int applicationId, int applicationInstanceId,
@@ -54,7 +56,7 @@ public void parseFirst(SpanObject spanObject, int applicationId, int application
     @Override public void build() {
         logger.debug("entry service listener build");
         StreamModuleContext context = (StreamModuleContext)CollectorContextHelper.INSTANCE.getContext(StreamModuleGroupDefine.GROUP_NAME);
-        if (!hasReference) {
+        if (!hasReference && hasEntry) {
             ServiceEntryDataDefine.ServiceEntry serviceEntry = new ServiceEntryDataDefine.ServiceEntry();
             serviceEntry.setId(applicationId + Const.ID_SPLIT + entryServiceName);
             serviceEntry.setApplicationId(applicationId);

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/instance/InstanceIDService.java
Patch:
@@ -33,7 +33,7 @@ public int getOrCreate(int applicationId, String agentUUID, long registerTime, S
                 logger.error(e.getMessage(), e);
             }
         }
-        return applicationId;
+        return instanceId;
     }
 
     public void recover(int instanceId, int applicationId, long registerTime, String osInfo) {

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/InstanceH2DAO.java
Patch:
@@ -1,7 +1,6 @@
 package org.skywalking.apm.collector.ui.dao;
 
 import com.google.gson.JsonArray;
-import java.util.List;
 import org.skywalking.apm.collector.storage.define.register.InstanceDataDefine;
 import org.skywalking.apm.collector.storage.h2.dao.H2DAO;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/util/KeyValuePair.java
Patch:
@@ -27,7 +27,9 @@ public String getValue() {
     public KeyWithStringValue transform() {
         KeyWithStringValue.Builder keyValueBuilder = KeyWithStringValue.newBuilder();
         keyValueBuilder.setKey(key);
-        keyValueBuilder.setValue(value);
+        if (value != null) {
+            keyValueBuilder.setValue(value);
+        }
         return keyValueBuilder.build();
     }
 }

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/skywalking/apm/plugin/tomcat78x/TomcatInvokeInterceptor.java
Patch:
@@ -16,11 +16,11 @@
 import org.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {@link TomcatInterceptor} fetch the serialized context data by using {@link HttpServletRequest#getHeader(String)}.
+ * {@link TomcatInvokeInterceptor} fetch the serialized context data by using {@link HttpServletRequest#getHeader(String)}.
  * The {@link TraceSegment#refs} of current trace segment will reference to the trace
  * segment id of the previous level if the serialized context is not null.
  */
-public class TomcatInterceptor implements InstanceMethodsAroundInterceptor {
+public class TomcatInvokeInterceptor implements InstanceMethodsAroundInterceptor {
 
     /**
      * * The {@link TraceSegment#refs} of current trace segment will reference to the

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/util/KeyValuePair.java
Patch:
@@ -27,7 +27,9 @@ public String getValue() {
     public KeyWithStringValue transform() {
         KeyWithStringValue.Builder keyValueBuilder = KeyWithStringValue.newBuilder();
         keyValueBuilder.setKey(key);
-        keyValueBuilder.setValue(value);
+        if (value != null) {
+            keyValueBuilder.setValue(value);
+        }
         return keyValueBuilder.build();
     }
 }

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/skywalking/apm/plugin/tomcat78x/TomcatInvokeInterceptor.java
Patch:
@@ -16,11 +16,11 @@
 import org.skywalking.apm.network.trace.component.ComponentsDefine;
 
 /**
- * {@link TomcatInterceptor} fetch the serialized context data by using {@link HttpServletRequest#getHeader(String)}.
+ * {@link TomcatInvokeInterceptor} fetch the serialized context data by using {@link HttpServletRequest#getHeader(String)}.
  * The {@link TraceSegment#refs} of current trace segment will reference to the trace
  * segment id of the previous level if the serialized context is not null.
  */
-public class TomcatInterceptor implements InstanceMethodsAroundInterceptor {
+public class TomcatInvokeInterceptor implements InstanceMethodsAroundInterceptor {
 
     /**
      * * The {@link TraceSegment#refs} of current trace segment will reference to the

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/register/ApplicationDataDefine.java
Patch:
@@ -1,12 +1,11 @@
 package org.skywalking.apm.collector.storage.define.register;
 
+import org.skywalking.apm.collector.core.stream.operate.CoverOperation;
+import org.skywalking.apm.collector.core.stream.operate.NonOperation;
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
-import org.skywalking.apm.collector.storage.define.register.ApplicationTable;
 import org.skywalking.apm.collector.storage.define.Attribute;
 import org.skywalking.apm.collector.storage.define.AttributeType;
 import org.skywalking.apm.collector.storage.define.DataDefine;
-import org.skywalking.apm.collector.core.stream.operate.CoverOperation;
-import org.skywalking.apm.collector.core.stream.operate.NonOperation;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/register/InstanceDataDefine.java
Patch:
@@ -1,12 +1,11 @@
 package org.skywalking.apm.collector.storage.define.register;
 
+import org.skywalking.apm.collector.core.stream.operate.CoverOperation;
+import org.skywalking.apm.collector.core.stream.operate.NonOperation;
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
-import org.skywalking.apm.collector.storage.define.register.InstanceTable;
 import org.skywalking.apm.collector.storage.define.Attribute;
 import org.skywalking.apm.collector.storage.define.AttributeType;
 import org.skywalking.apm.collector.storage.define.DataDefine;
-import org.skywalking.apm.collector.core.stream.operate.CoverOperation;
-import org.skywalking.apm.collector.core.stream.operate.NonOperation;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/define/register/ServiceNameDataDefine.java
Patch:
@@ -1,12 +1,11 @@
 package org.skywalking.apm.collector.storage.define.register;
 
+import org.skywalking.apm.collector.core.stream.operate.CoverOperation;
+import org.skywalking.apm.collector.core.stream.operate.NonOperation;
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
-import org.skywalking.apm.collector.storage.define.register.ServiceNameTable;
 import org.skywalking.apm.collector.storage.define.Attribute;
 import org.skywalking.apm.collector.storage.define.AttributeType;
 import org.skywalking.apm.collector.storage.define.DataDefine;
-import org.skywalking.apm.collector.core.stream.operate.CoverOperation;
-import org.skywalking.apm.collector.core.stream.operate.NonOperation;
 
 /**
  * @author pengys5

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/mvc/ControllerServiceMethodInterceptor.java
Patch:
@@ -36,6 +36,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
                 requestURL = "";
             }
             pathMappingCache.addPathMapping(method, requestURL);
+            requestURL = pathMappingCache.findPathMapping(method);
         }
 
         HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();

File: apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/main/java/org/skywalking/apm/plugin/spring/mvc/ControllerServiceMethodInterceptor.java
Patch:
@@ -36,6 +36,7 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr
                 requestURL = "";
             }
             pathMappingCache.addPathMapping(method, requestURL);
+            requestURL = pathMappingCache.findPathMapping(method);
         }
 
         HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/skywalking/apm/toolkit/activation/trace/TraceAnnotationActivation.java
Patch:
@@ -20,7 +20,7 @@
 public class TraceAnnotationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
     public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "org.skywalking.apm.toolkit.activation.trace.TraceAnnotationMethodInterceptor";
-    public static final String TRACE_ANNOTATION = "org.skywalking.apm.toolkit.trace.annotation.Trace";
+    public static final String TRACE_ANNOTATION = "org.skywalking.apm.toolkit.trace.Trace";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/skywalking/apm/toolkit/activation/trace/TraceAnnotationActivation.java
Patch:
@@ -20,7 +20,7 @@
 public class TraceAnnotationActivation extends ClassInstanceMethodsEnhancePluginDefine {
 
     public static final String TRACE_ANNOTATION_METHOD_INTERCEPTOR = "org.skywalking.apm.toolkit.activation.trace.TraceAnnotationMethodInterceptor";
-    public static final String TRACE_ANNOTATION = "org.skywalking.apm.toolkit.trace.annotation.Trace";
+    public static final String TRACE_ANNOTATION = "org.skywalking.apm.toolkit.trace.Trace";
 
     @Override protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[0];

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ContextManager.java
Patch:
@@ -39,7 +39,7 @@ private static AbstractTracerContext getOrCreate(String operationName, boolean f
                 context = new IgnoredTracerContext();
             } else {
                 if (RemoteDownstreamConfig.Agent.APPLICATION_ID != DictionaryUtil.nullValue()
-                    || RemoteDownstreamConfig.Agent.APPLICATION_INSTANCE_ID != DictionaryUtil.nullValue()
+                    && RemoteDownstreamConfig.Agent.APPLICATION_INSTANCE_ID != DictionaryUtil.nullValue()
                     ) {
                     int suffixIdx = operationName.lastIndexOf(".");
                     if (suffixIdx > -1 && Config.Agent.IGNORE_SUFFIX.contains(operationName.substring(suffixIdx))) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ContextManager.java
Patch:
@@ -39,7 +39,7 @@ private static AbstractTracerContext getOrCreate(String operationName, boolean f
                 context = new IgnoredTracerContext();
             } else {
                 if (RemoteDownstreamConfig.Agent.APPLICATION_ID != DictionaryUtil.nullValue()
-                    || RemoteDownstreamConfig.Agent.APPLICATION_INSTANCE_ID != DictionaryUtil.nullValue()
+                    && RemoteDownstreamConfig.Agent.APPLICATION_INSTANCE_ID != DictionaryUtil.nullValue()
                     ) {
                     int suffixIdx = operationName.lastIndexOf(".");
                     if (suffixIdx > -1 && Config.Agent.IGNORE_SUFFIX.contains(operationName.substring(suffixIdx))) {

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -1,7 +1,6 @@
 package org.skywalking.apm.plugin.jdbc;
 
 import java.sql.SQLException;
-import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.agent.core.context.tag.Tags;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -1,7 +1,6 @@
 package org.skywalking.apm.plugin.jdbc;
 
 import java.sql.SQLException;
-import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.agent.core.context.tag.Tags;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -1,7 +1,6 @@
 package org.skywalking.apm.plugin.jdbc;
 
 import java.sql.SQLException;
-import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.agent.core.context.tag.Tags;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;
@@ -21,7 +20,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
                 remotePeer = connectInfo.getHost() + ":" + connectInfo.getPort();
             }
 
-            AbstractSpan span = ContextManager.createExitSpan(connectInfo.getDBType() + "/JDBI/PreparedStatement/" + method, new ContextCarrier(), remotePeer);
+            AbstractSpan span = ContextManager.createExitSpan(connectInfo.getDBType() + "/JDBI/PreparedStatement/" + method, remotePeer);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/StatementTracing.java
Patch:
@@ -1,7 +1,6 @@
 package org.skywalking.apm.plugin.jdbc;
 
 import java.sql.SQLException;
-import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.agent.core.context.tag.Tags;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/skywalking/apm/plugin/jedis/v2/JedisMethodInterceptor.java
Patch:
@@ -1,7 +1,6 @@
 package org.skywalking.apm.plugin.jedis.v2;
 
 import java.lang.reflect.Method;
-import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.agent.core.context.tag.Tags;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/skywalking/apm/toolkit/activation/opentracing/span/ConstructorWithSpanBuilderInterceptor.java
Patch:
@@ -1,6 +1,5 @@
 package org.skywalking.apm.toolkit.activation.opentracing.span;
 
-import org.skywalking.apm.agent.core.context.ContextCarrier;
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/conf/Config.java
Patch:
@@ -16,7 +16,7 @@ public class Config {
     public static class Agent {
         /**
          * Application code is showed in sky-walking-ui.
-         * Suggestion: set a unique name for each application, one application's nodes share the same code.
+         * Suggestion: set an unique name for each application, one application's nodes share the same code.
          */
         public static String APPLICATION_CODE = "";
 

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/grpc/handler/JVMMetricsServiceHandler.java
Patch:
@@ -16,7 +16,7 @@
 import org.skywalking.apm.collector.stream.StreamModuleGroupDefine;
 import org.skywalking.apm.collector.stream.worker.WorkerInvokeException;
 import org.skywalking.apm.collector.stream.worker.WorkerNotFoundException;
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.stream.worker.util.TimeBucketUtils;
 import org.skywalking.apm.network.proto.CPU;
 import org.skywalking.apm.network.proto.Downstream;

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/cpu/define/CpuMetricTable.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.collector.agentjvm.worker.cpu.define;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/gc/define/GCMetricTable.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.collector.agentjvm.worker.gc.define;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memory/define/MemoryMetricTable.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.collector.agentjvm.worker.memory.define;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentjvm/src/main/java/org/skywalking/apm/collector/agentjvm/worker/memorypool/define/MemoryPoolMetricTable.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.collector.agentjvm.worker.memorypool.define;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/cache/ServiceNameCache.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.agentstream.worker.register.servicename.dao.IServiceNameDAO;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/global/define/GlobalTraceDataDefine.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.agentstream.worker.global.define;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.global.GlobalTraceTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/global/define/GlobalTraceEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.global.GlobalTraceTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/global/define/GlobalTraceH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.global.GlobalTraceTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/NodeComponentSpanListener.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.agentstream.worker.node.component.define.NodeComponentDataDefine;
 import org.skywalking.apm.collector.agentstream.worker.segment.EntrySpanListener;
 import org.skywalking.apm.collector.agentstream.worker.segment.ExitSpanListener;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/dao/NodeComponentEsDAO.java
Patch:
@@ -5,7 +5,7 @@
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
-import org.skywalking.apm.collector.agentstream.worker.node.component.define.NodeComponentTable;
+import org.skywalking.apm.collector.storage.table.node.NodeComponentTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.skywalking.apm.collector.stream.worker.impl.dao.IPersistenceDAO;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/define/NodeComponentDataDefine.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.agentstream.worker.node.component.define;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.node.NodeComponentTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/define/NodeComponentEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.node.NodeComponentTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/component/define/NodeComponentH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.node.NodeComponentTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/NodeMappingSpanListener.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.agentstream.worker.node.mapping.define.NodeMappingDataDefine;
 import org.skywalking.apm.collector.agentstream.worker.segment.FirstSpanListener;
 import org.skywalking.apm.collector.agentstream.worker.segment.RefsListener;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/dao/NodeMappingEsDAO.java
Patch:
@@ -5,7 +5,7 @@
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
-import org.skywalking.apm.collector.agentstream.worker.node.mapping.define.NodeMappingTable;
+import org.skywalking.apm.collector.storage.table.node.NodeMappingTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.skywalking.apm.collector.stream.worker.impl.dao.IPersistenceDAO;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/define/NodeMappingDataDefine.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.agentstream.worker.node.mapping.define;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.node.NodeMappingTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/define/NodeMappingEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.node.NodeMappingTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/node/mapping/define/NodeMappingH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.node.NodeMappingTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/reference/NodeRefSpanListener.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.agentstream.worker.cache.InstanceCache;
 import org.skywalking.apm.collector.agentstream.worker.noderef.reference.define.NodeRefDataDefine;
 import org.skywalking.apm.collector.agentstream.worker.segment.EntrySpanListener;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/reference/dao/NodeReferenceEsDAO.java
Patch:
@@ -5,7 +5,7 @@
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
-import org.skywalking.apm.collector.agentstream.worker.noderef.reference.define.NodeRefTable;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.skywalking.apm.collector.stream.worker.impl.dao.IPersistenceDAO;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/reference/define/NodeRefDataDefine.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.agentstream.worker.noderef.reference.define;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/reference/define/NodeRefEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/reference/define/NodeRefH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/summary/NodeRefSumSpanListener.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.agentstream.worker.cache.InstanceCache;
 import org.skywalking.apm.collector.agentstream.worker.noderef.summary.define.NodeRefSumDataDefine;
 import org.skywalking.apm.collector.agentstream.worker.segment.EntrySpanListener;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/summary/dao/NodeRefSumEsDAO.java
Patch:
@@ -5,8 +5,8 @@
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
-import org.skywalking.apm.collector.agentstream.worker.noderef.reference.define.NodeRefTable;
-import org.skywalking.apm.collector.agentstream.worker.noderef.summary.define.NodeRefSumTable;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefTable;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefSumTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.skywalking.apm.collector.stream.worker.impl.dao.IPersistenceDAO;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/summary/define/NodeRefSumDataDefine.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.agentstream.worker.noderef.summary.define;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefSumTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/summary/define/NodeRefSumEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefSumTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/noderef/summary/define/NodeRefSumH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefSumTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/application/ApplicationDataDefine.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.agentstream.worker.register.application;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.register.ApplicationTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.DataDefine;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/application/ApplicationEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.register.ApplicationTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/application/ApplicationH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.register.ApplicationTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/application/ApplicationRegisterSerialWorker.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.collector.agentstream.worker.register.application;
 
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.agentstream.worker.register.IdAutoIncrement;
 import org.skywalking.apm.collector.agentstream.worker.register.application.dao.IApplicationDAO;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/application/dao/ApplicationEsDAO.java
Patch:
@@ -10,7 +10,7 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
 import org.skywalking.apm.collector.agentstream.worker.register.application.ApplicationDataDefine;
-import org.skywalking.apm.collector.agentstream.worker.register.application.ApplicationTable;
+import org.skywalking.apm.collector.storage.table.register.ApplicationTable;
 import org.skywalking.apm.collector.client.elasticsearch.ElasticSearchClient;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.slf4j.Logger;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/instance/InstanceDataDefine.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.agentstream.worker.register.instance;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.register.InstanceTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.DataDefine;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/instance/InstanceEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.register.InstanceTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/instance/InstanceH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.register.InstanceTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/instance/dao/InstanceEsDAO.java
Patch:
@@ -13,7 +13,7 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
 import org.skywalking.apm.collector.agentstream.worker.register.instance.InstanceDataDefine;
-import org.skywalking.apm.collector.agentstream.worker.register.instance.InstanceTable;
+import org.skywalking.apm.collector.storage.table.register.InstanceTable;
 import org.skywalking.apm.collector.client.elasticsearch.ElasticSearchClient;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.slf4j.Logger;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/servicename/ServiceNameDataDefine.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.agentstream.worker.register.servicename;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.register.ServiceNameTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.DataDefine;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/servicename/ServiceNameEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.register.ServiceNameTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/servicename/ServiceNameH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.register.ServiceNameTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/register/servicename/dao/ServiceNameEsDAO.java
Patch:
@@ -11,7 +11,7 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
 import org.skywalking.apm.collector.agentstream.worker.register.servicename.ServiceNameDataDefine;
-import org.skywalking.apm.collector.agentstream.worker.register.servicename.ServiceNameTable;
+import org.skywalking.apm.collector.storage.table.register.ServiceNameTable;
 import org.skywalking.apm.collector.client.elasticsearch.ElasticSearchClient;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.slf4j.Logger;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/dao/SegmentCostEsDAO.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.Map;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
-import org.skywalking.apm.collector.agentstream.worker.segment.cost.define.SegmentCostTable;
+import org.skywalking.apm.collector.storage.table.segment.SegmentCostTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.skywalking.apm.collector.stream.worker.impl.dao.IPersistenceDAO;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/define/SegmentCostDataDefine.java
Patch:
@@ -1,6 +1,7 @@
 package org.skywalking.apm.collector.agentstream.worker.segment.cost.define;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.segment.SegmentCostTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/define/SegmentCostEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.segment.SegmentCostTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/cost/define/SegmentCostH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.segment.SegmentCostTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/origin/dao/SegmentEsDAO.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Map;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
-import org.skywalking.apm.collector.agentstream.worker.segment.origin.define.SegmentTable;
+import org.skywalking.apm.collector.storage.table.segment.SegmentTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.skywalking.apm.collector.stream.worker.impl.dao.IPersistenceDAO;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/origin/define/SegmentDataDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.google.protobuf.ByteString;
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
+import org.skywalking.apm.collector.storage.table.segment.SegmentTable;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;
 import org.skywalking.apm.collector.stream.worker.impl.data.AttributeType;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/origin/define/SegmentEsTableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;
+import org.skywalking.apm.collector.storage.table.segment.SegmentTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/segment/origin/define/SegmentH2TableDefine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;
+import org.skywalking.apm.collector.storage.table.segment.SegmentTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/service/entry/ServiceEntrySpanListener.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.collector.agentstream.worker.service.entry;
 
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.agentstream.worker.segment.EntrySpanListener;
 import org.skywalking.apm.collector.agentstream.worker.segment.FirstSpanListener;
 import org.skywalking.apm.collector.agentstream.worker.segment.RefsListener;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/service/entry/define/ServiceEntryTable.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.collector.agentstream.worker.service.entry.define;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/reference/ServiceRefSpanListener.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.agentstream.worker.cache.InstanceCache;
 import org.skywalking.apm.collector.agentstream.worker.segment.EntrySpanListener;
 import org.skywalking.apm.collector.agentstream.worker.segment.ExitSpanListener;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/reference/define/ServiceRefTable.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.collector.agentstream.worker.serviceref.reference.define;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/storage/StorageInstaller.java
Patch:
@@ -23,11 +23,11 @@ public final void install(Client client) throws StorageException {
                 if (!isExists(client, tableDefine)) {
                     logger.info("table: {} not exists", tableDefine.getName());
                     tableDefine.initialize();
+                    createTable(client, tableDefine);
                 } else {
                     logger.info("table: {} exists", tableDefine.getName());
-                    deleteTable(client, tableDefine);
+//                    deleteTable(client, tableDefine);
                 }
-                createTable(client, tableDefine);
             }
         } catch (DefineException e) {
             throw new StorageInstallException(e.getMessage(), e);

File: apm-collector/apm-collector-core/src/main/java/org/skywalking/apm/collector/core/util/Const.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.stream.worker.util;
+package org.skywalking.apm.collector.core.util;
 
 /**
  * @author pengys5
@@ -9,4 +9,6 @@ public class Const {
     public static final int USER_ID = 1;
     public static final String USER_CODE = "User";
     public static final String SEGMENT_SPAN_SPLIT = "S";
+    public static final String UNKNOWN = "Unknown";
+    public static final String EXCEPTION = "Exception";
 }

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/table/CommonTable.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.stream.worker.storage;
+package org.skywalking.apm.collector.storage.table;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/table/global/GlobalTraceTable.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.collector.agentstream.worker.global.define;
+package org.skywalking.apm.collector.storage.table.global;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/table/noderef/NodeRefSumTable.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.collector.agentstream.worker.noderef.summary.define;
+package org.skywalking.apm.collector.storage.table.noderef;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/table/register/ApplicationTable.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.collector.agentstream.worker.register.application;
+package org.skywalking.apm.collector.storage.table.register;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/table/register/InstanceTable.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.collector.agentstream.worker.register.instance;
+package org.skywalking.apm.collector.storage.table.register;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/table/register/ServiceNameTable.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.collector.agentstream.worker.register.servicename;
+package org.skywalking.apm.collector.storage.table.register;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/table/segment/SegmentCostTable.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.collector.agentstream.worker.segment.cost.define;
+package org.skywalking.apm.collector.storage.table.segment;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-storage/src/main/java/org/skywalking/apm/collector/storage/table/segment/SegmentTable.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.collector.agentstream.worker.segment.origin.define;
+package org.skywalking.apm.collector.storage.table.segment;
 
-import org.skywalking.apm.collector.stream.worker.storage.CommonTable;
+import org.skywalking.apm.collector.storage.table.CommonTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/GlobalTraceEsDAO.java
Patch:
@@ -7,8 +7,8 @@
 import org.elasticsearch.action.search.SearchType;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
-import org.skywalking.apm.collector.agentstream.worker.global.define.GlobalTraceTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
+import org.skywalking.apm.collector.storage.table.global.GlobalTraceTable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/NodeComponentEsDAO.java
Patch:
@@ -8,9 +8,9 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.aggregations.AggregationBuilders;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
-import org.skywalking.apm.collector.stream.worker.util.Const;
-import org.skywalking.apm.collector.agentstream.worker.node.component.define.NodeComponentTable;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
+import org.skywalking.apm.collector.storage.table.node.NodeComponentTable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/NodeMappingEsDAO.java
Patch:
@@ -8,9 +8,9 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.aggregations.AggregationBuilders;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
-import org.skywalking.apm.collector.stream.worker.util.Const;
-import org.skywalking.apm.collector.agentstream.worker.node.mapping.define.NodeMappingTable;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
+import org.skywalking.apm.collector.storage.table.node.NodeMappingTable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/NodeRefSumEsDAO.java
Patch:
@@ -10,9 +10,9 @@
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
 import org.elasticsearch.search.aggregations.metrics.sum.Sum;
-import org.skywalking.apm.collector.stream.worker.util.Const;
-import org.skywalking.apm.collector.agentstream.worker.noderef.summary.define.NodeRefSumTable;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefSumTable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/NodeReferenceEsDAO.java
Patch:
@@ -8,9 +8,9 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.aggregations.AggregationBuilders;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
-import org.skywalking.apm.collector.stream.worker.util.Const;
-import org.skywalking.apm.collector.agentstream.worker.noderef.reference.define.NodeRefTable;
+import org.skywalking.apm.collector.core.util.Const;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
+import org.skywalking.apm.collector.storage.table.noderef.NodeRefTable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/SegmentCostEsDAO.java
Patch:
@@ -12,12 +12,12 @@
 import org.elasticsearch.index.query.RangeQueryBuilder;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.search.sort.SortOrder;
-import org.skywalking.apm.collector.agentstream.worker.global.define.GlobalTraceTable;
-import org.skywalking.apm.collector.agentstream.worker.segment.cost.define.SegmentCostTable;
 import org.skywalking.apm.collector.core.util.CollectionUtils;
 import org.skywalking.apm.collector.core.util.StringUtils;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
+import org.skywalking.apm.collector.storage.table.global.GlobalTraceTable;
+import org.skywalking.apm.collector.storage.table.segment.SegmentCostTable;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/dao/SegmentEsDAO.java
Patch:
@@ -4,9 +4,9 @@
 import java.util.Base64;
 import java.util.Map;
 import org.elasticsearch.action.get.GetResponse;
-import org.skywalking.apm.collector.agentstream.worker.segment.origin.define.SegmentTable;
 import org.skywalking.apm.collector.core.util.StringUtils;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
+import org.skywalking.apm.collector.storage.table.segment.SegmentTable;
 import org.skywalking.apm.network.proto.TraceSegmentObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: apm-collector/apm-collector-ui/src/main/java/org/skywalking/apm/collector/ui/service/TraceDagDataBuilder.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.gson.JsonObject;
 import java.util.HashMap;
 import java.util.Map;
-import org.skywalking.apm.collector.stream.worker.util.Const;
+import org.skywalking.apm.collector.core.util.Const;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracingContext.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.LinkedList;
 import java.util.List;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
-import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.skywalking.apm.agent.core.context.trace.EntrySpan;
@@ -293,7 +292,7 @@ public AbstractSpan createExitSpan(final String operationName, final String remo
                         @Override
                         public Object doProcess(final int peerId) {
                             return DictionaryManager.findOperationNameCodeSection()
-                                .findOnly(RemoteDownstreamConfig.Agent.APPLICATION_ID, operationName)
+                                .findOnly(segment.getApplicationId(), operationName)
                                 .doInCondition(
                                     new PossibleFound.FoundAndObtain() {
                                         @Override
@@ -312,7 +311,7 @@ public Object doProcess() {
                         @Override
                         public Object doProcess() {
                             return DictionaryManager.findOperationNameCodeSection()
-                                .findOnly(RemoteDownstreamConfig.Agent.APPLICATION_ID, operationName)
+                                .findOnly(segment.getApplicationId(), operationName)
                                 .doInCondition(
                                     new PossibleFound.FoundAndObtain() {
                                         @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracingContext.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.LinkedList;
 import java.util.List;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
-import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.skywalking.apm.agent.core.context.trace.EntrySpan;

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/util/AbstractTracingSpanHelper.java
Patch:
@@ -8,7 +8,7 @@
 public class AbstractTracingSpanHelper {
     public static int getParentSpanId(AbstractTracingSpan tracingSpan) {
         try {
-            return FieldGetter.getParentFieldValue(tracingSpan, "parentSpanId");
+            return FieldGetter.get2LevelParentFieldValue(tracingSpan, "parentSpanId");
         } catch (Exception e) {
         }
 
@@ -17,7 +17,7 @@ public static int getParentSpanId(AbstractTracingSpan tracingSpan) {
 
     public static List<LogDataEntity> getLogs(AbstractTracingSpan tracingSpan) {
         try {
-            return FieldGetter.getParentFieldValue(tracingSpan, "logs");
+            return FieldGetter.get2LevelParentFieldValue(tracingSpan, "logs");
         } catch (Exception e) {
         }
 

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/util/FieldGetter.java
Patch:
@@ -10,9 +10,10 @@ public static <T> T getValue(Object instance,
         return (T)field.get(instance);
     }
 
-    public static <T> T getParentFieldValue(Object instance,
+
+    public static <T> T get2LevelParentFieldValue(Object instance,
         String fieldName) throws IllegalAccessException, NoSuchFieldException {
-        Field field = instance.getClass().getSuperclass().getDeclaredField(fieldName);
+        Field field = instance.getClass().getSuperclass().getSuperclass().getDeclaredField(fieldName);
         field.setAccessible(true);
         return (T)field.get(instance);
     }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/util/SpanHelper.java
Patch:
@@ -7,7 +7,7 @@ public class SpanHelper {
 
     public static SpanLayer getLayer(AbstractSpan tracingSpan) {
         try {
-            return FieldGetter.getParentFieldValue(tracingSpan, "layer");
+            return FieldGetter.get2LevelParentFieldValue(tracingSpan, "layer");
         } catch (Exception e) {
         }
 
@@ -16,7 +16,7 @@ public static SpanLayer getLayer(AbstractSpan tracingSpan) {
 
     public static int getComponentId(AbstractSpan tracingSpan) {
         try {
-            return FieldGetter.getParentFieldValue(tracingSpan, "componentId");
+            return FieldGetter.get2LevelParentFieldValue(tracingSpan, "componentId");
         } catch (Exception e) {
         }
 

File: apm-collector/apm-collector-stream/src/test/java/org/skywalking/apm/collector/stream/worker/util/TimeBucketUtilsTestCase.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.util;
+package org.skywalking.apm.collector.stream.worker.util;
 
 import java.util.Calendar;
 import java.util.TimeZone;
@@ -29,6 +29,7 @@ public void testUTC8Location() {
 
     @Test
     public void testGetSecondTimeBucket() {
+        TimeZone.setDefault(TimeZone.getTimeZone("GMT+08:00"));
         long timeBucket = TimeBucketUtils.INSTANCE.getSecondTimeBucket(1490922929258L);
         Assert.assertEquals(20170331091529L, timeBucket);
     }

File: apm-collector/apm-collector-agentjvm/src/test/java/org/skywalking/apm/collector/agentjvm/grpc/handler/JVMMetricsServiceHandlerTestCase.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
-import org.junit.Test;
 import org.skywalking.apm.network.proto.CPU;
 import org.skywalking.apm.network.proto.GC;
 import org.skywalking.apm.network.proto.GCPhrase;
@@ -24,7 +23,6 @@ public class JVMMetricsServiceHandlerTestCase {
 
     private JVMMetricsServiceGrpc.JVMMetricsServiceBlockingStub stub;
 
-    @Test
     public void test() {
         ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 11800).usePlaintext(true).build();
         stub = JVMMetricsServiceGrpc.newBlockingStub(channel);

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/grpc/handler/JVMMetricsServiceHandler.java
Patch:
@@ -5,8 +5,8 @@
 import org.skywalking.apm.collector.agentstream.worker.Const;
 import org.skywalking.apm.collector.agentstream.worker.jvmmetric.cpu.CpuMetricPersistenceWorker;
 import org.skywalking.apm.collector.agentstream.worker.jvmmetric.cpu.define.CpuMetricDataDefine;
-import org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.MemoryMetricPersistenceWorker;
-import org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.define.MemoryMetricDataDefine;
+import org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.MemoryMetricPersistenceWorker;
+import org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.define.MemoryMetricDataDefine;
 import org.skywalking.apm.collector.agentstream.worker.util.TimeBucketUtils;
 import org.skywalking.apm.collector.core.framework.CollectorContextHelper;
 import org.skywalking.apm.collector.server.grpc.GRPCHandler;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/jvmmetric/memory/MemoryMetricPersistenceWorker.java
Patch:
@@ -1,7 +1,7 @@
-package org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc;
+package org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory;
 
-import org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.dao.IMemoryMetricDAO;
-import org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.define.MemoryMetricDataDefine;
+import org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.dao.IMemoryMetricDAO;
+import org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.define.MemoryMetricDataDefine;
 import org.skywalking.apm.collector.storage.dao.DAOContainer;
 import org.skywalking.apm.collector.stream.worker.AbstractLocalAsyncWorkerProvider;
 import org.skywalking.apm.collector.stream.worker.ClusterWorkerContext;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/jvmmetric/memory/dao/IMemoryMetricDAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.dao;
+package org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.dao;
 
 /**
  * @author pengys5

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/jvmmetric/memory/dao/MemoryMetricEsDAO.java
Patch:
@@ -1,10 +1,10 @@
-package org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.dao;
+package org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.dao;
 
 import java.util.HashMap;
 import java.util.Map;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
-import org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.define.MemoryMetricTable;
+import org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.define.MemoryMetricTable;
 import org.skywalking.apm.collector.storage.elasticsearch.dao.EsDAO;
 import org.skywalking.apm.collector.stream.worker.impl.dao.IPersistenceDAO;
 import org.skywalking.apm.collector.stream.worker.impl.data.Data;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/jvmmetric/memory/dao/MemoryMetricH2DAO.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.dao;
+package org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.dao;
 
 import org.skywalking.apm.collector.storage.h2.dao.H2DAO;
 

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/jvmmetric/memory/define/MemoryMetricDataDefine.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.define;
+package org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.define;
 
 import org.skywalking.apm.collector.remote.grpc.proto.RemoteData;
 import org.skywalking.apm.collector.stream.worker.impl.data.Attribute;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/jvmmetric/memory/define/MemoryMetricEsTableDefine.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.define;
+package org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.define;
 
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchColumnDefine;
 import org.skywalking.apm.collector.storage.elasticsearch.define.ElasticSearchTableDefine;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/jvmmetric/memory/define/MemoryMetricH2TableDefine.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.define;
+package org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.define;
 
 import org.skywalking.apm.collector.storage.h2.define.H2ColumnDefine;
 import org.skywalking.apm.collector.storage.h2.define.H2TableDefine;

File: apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/jvmmetric/memory/define/MemoryMetricTable.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.collector.agentstream.worker.jvmmetric.gc.define;
+package org.skywalking.apm.collector.agentstream.worker.jvmmetric.memory.define;
 
 import org.skywalking.apm.collector.agentstream.worker.CommonTable;
 

File: apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/jetty/AgentRegisterJettyDataListener.java
Patch:
@@ -1,7 +1,6 @@
 package org.skywalking.apm.collector.agentregister.jetty;
 
 import org.skywalking.apm.collector.agentregister.AgentRegisterModuleGroupDefine;
-import org.skywalking.apm.collector.agentregister.grpc.AgentRegisterGRPCModuleDefine;
 import org.skywalking.apm.collector.cluster.ClusterModuleDefine;
 import org.skywalking.apm.collector.core.cluster.ClusterDataListener;
 

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/SWPreparedStatement.java
Patch:
@@ -359,7 +359,7 @@ public void setObject(int parameterIndex, Object x) throws SQLException {
     }
 
     public boolean execute() throws SQLException {
-        return PreparedStatementTracing.execute(realStatement, connectInfo, "executeUpdate", sql, new PreparedStatementTracing.Executable<Boolean>() {
+        return PreparedStatementTracing.execute(realStatement, connectInfo, "execute", sql, new PreparedStatementTracing.Executable<Boolean>() {
             public Boolean exe(PreparedStatement realStatement, String sql)
                 throws SQLException {
                 return realStatement.execute();

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/SWPreparedStatement.java
Patch:
@@ -359,7 +359,7 @@ public void setObject(int parameterIndex, Object x) throws SQLException {
     }
 
     public boolean execute() throws SQLException {
-        return PreparedStatementTracing.execute(realStatement, connectInfo, "executeUpdate", sql, new PreparedStatementTracing.Executable<Boolean>() {
+        return PreparedStatementTracing.execute(realStatement, connectInfo, "execute", sql, new PreparedStatementTracing.Executable<Boolean>() {
             public Boolean exe(PreparedStatement realStatement, String sql)
                 throws SQLException {
                 return realStatement.execute();

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/ContextManagerTest.java
Patch:
@@ -79,7 +79,7 @@ public void createSpanWithInvalidateContextCarrier() {
 
     @Test
     public void createMultipleEntrySpan() {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA=#AQA=4WcWe0tQNQA=|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA*#AQA*4WcWe0tQNQA*|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);
@@ -202,7 +202,7 @@ public void tearDown() throws Exception {
 
     @Test
     public void testTransform() throws InvalidProtocolBufferException {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA=#AQA=4WcWe0tQNQA=|3|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA*#AQA*4WcWe0tQNQA*|3|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/test/java/org/skywalking/apm/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -148,7 +148,7 @@ public void testConsumerWithResultHasException() throws Throwable {
     @Test
     public void testProviderWithAttachment() throws Throwable {
         when(rpcContext.isConsumerSide()).thenReturn(false);
-        when(rpcContext.getAttachment(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        when(rpcContext.getAttachment(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         dubboInterceptor.beforeMethod(enhancedInstance, "invoke", allArguments, argumentTypes, methodInterceptResult);
         dubboInterceptor.afterMethod(enhancedInstance, "invoke", allArguments, argumentTypes, result);
@@ -160,7 +160,7 @@ public void testProviderBelow283() throws Throwable {
         when(rpcContext.isConsumerSide()).thenReturn(false);
         FieldSetter.setStaticValue(BugFixActive.class, "ACTIVE", true);
 
-        testParam.setTraceContext("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        testParam.setTraceContext("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         dubboInterceptor.beforeMethod(enhancedInstance, "invoke", allArguments, argumentTypes, methodInterceptResult);
         dubboInterceptor.afterMethod(enhancedInstance, "invoke", allArguments, argumentTypes, result);

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/test/java/org/skywalking/apm/plugin/motan/MotanProviderInterceptorTest.java
Patch:
@@ -91,7 +91,7 @@ public void testInvokerWithoutRefSegment() throws Throwable {
     @Test
     public void testInvokerWithRefSegment() throws Throwable {
         HashMap attachments = new HashMap();
-        attachments.put(Config.Plugin.Propagation.HEADER_NAME, "#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        attachments.put(Config.Plugin.Propagation.HEADER_NAME, "#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
         when(request.getAttachments()).thenReturn(attachments);
 
         invokeInterceptor.beforeMethod(enhancedInstance, "execute", arguments, argumentType, null);

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/test/java/org/skywalking/apm/plugin/resin/v3/ResinV3InterceptorTest.java
Patch:
@@ -90,7 +90,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         interceptor.beforeMethod(enhancedInstance, "service", arguments, argumentType, methodInterceptResult);
         interceptor.afterMethod(enhancedInstance, "service", arguments, argumentType, null);

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/test/java/org/skywalking/apm/plugin/resin/v4/ResinV4InterceptorTest.java
Patch:
@@ -92,7 +92,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         interceptor.beforeMethod(enhancedInstance, "service", arguments, argumentType, methodInterceptResult);
         interceptor.afterMethod(enhancedInstance, "service", arguments, argumentType, null);

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/test/java/org/skywalking/apm/plugin/tomcat78x/TomcatInterceptorTest.java
Patch:
@@ -82,7 +82,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         tomcatInterceptor.beforeMethod(enhancedInstance, "invoke", arguments, argumentType, methodInterceptResult);
         tomcatInterceptor.afterMethod(enhancedInstance, "invoke", arguments, argumentType, null);

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/test/java/org/skywalking/apm/toolkit/activation/opentracing/SkywalkingSpanActivationTest.java
Patch:
@@ -181,7 +181,7 @@ public void testExtractWithValidateContext() throws Throwable {
             .withTag(Tags.PEER_HOST_IPV4.getKey(), "127.0.0.1").withTag(Tags.PEER_PORT.getKey(), 8080);
         startSpan();
         extractInterceptor.afterMethod(enhancedInstance, "extract",
-            new Object[] {"#AQA=#AQA=4WcWe0tQNQA=|3|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA="}, new Class[] {String.class}, null);
+            new Object[] {"#AQA*#AQA*4WcWe0tQNQA*|3|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*"}, new Class[] {String.class}, null);
         stopSpan();
 
         TraceSegment tracingSegment = assertTraceSemgnets();
@@ -201,7 +201,7 @@ public void testExtractWithInValidateContext() throws Throwable {
             .withTag(Tags.PEER_HOST_IPV4.getKey(), "127.0.0.1").withTag(Tags.PEER_PORT.getKey(), 8080);
         startSpan();
         extractInterceptor.afterMethod(enhancedInstance, "extract",
-            new Object[] {"#AQA=#AQA=4WcWe0tQNQA=|3|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA="}, new Class[] {String.class}, null);
+            new Object[] {"#AQA*#AQA*4WcWe0tQNQA*|3|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*"}, new Class[] {String.class}, null);
         stopSpan();
 
         TraceSegment tracingSegment = assertTraceSemgnets();

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/ContextManagerTest.java
Patch:
@@ -79,7 +79,7 @@ public void createSpanWithInvalidateContextCarrier() {
 
     @Test
     public void createMultipleEntrySpan() {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA=#AQA=4WcWe0tQNQA=|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA*#AQA*4WcWe0tQNQA*|1|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);
@@ -202,7 +202,7 @@ public void tearDown() throws Exception {
 
     @Test
     public void testTransform() throws InvalidProtocolBufferException {
-        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA=#AQA=4WcWe0tQNQA=|3|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        ContextCarrier contextCarrier = new ContextCarrier().deserialize("#AQA*#AQA*4WcWe0tQNQA*|3|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
         assertTrue(contextCarrier.isValid());
 
         AbstractSpan firstEntrySpan = ContextManager.createEntrySpan("/testFirstEntry", contextCarrier);

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/test/java/org/skywalking/apm/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -148,7 +148,7 @@ public void testConsumerWithResultHasException() throws Throwable {
     @Test
     public void testProviderWithAttachment() throws Throwable {
         when(rpcContext.isConsumerSide()).thenReturn(false);
-        when(rpcContext.getAttachment(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        when(rpcContext.getAttachment(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         dubboInterceptor.beforeMethod(enhancedInstance, "invoke", allArguments, argumentTypes, methodInterceptResult);
         dubboInterceptor.afterMethod(enhancedInstance, "invoke", allArguments, argumentTypes, result);
@@ -160,7 +160,7 @@ public void testProviderBelow283() throws Throwable {
         when(rpcContext.isConsumerSide()).thenReturn(false);
         FieldSetter.setStaticValue(BugFixActive.class, "ACTIVE", true);
 
-        testParam.setTraceContext("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        testParam.setTraceContext("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         dubboInterceptor.beforeMethod(enhancedInstance, "invoke", allArguments, argumentTypes, methodInterceptResult);
         dubboInterceptor.afterMethod(enhancedInstance, "invoke", allArguments, argumentTypes, result);

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/test/java/org/skywalking/apm/plugin/motan/MotanProviderInterceptorTest.java
Patch:
@@ -91,7 +91,7 @@ public void testInvokerWithoutRefSegment() throws Throwable {
     @Test
     public void testInvokerWithRefSegment() throws Throwable {
         HashMap attachments = new HashMap();
-        attachments.put(Config.Plugin.Propagation.HEADER_NAME, "#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        attachments.put(Config.Plugin.Propagation.HEADER_NAME, "#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
         when(request.getAttachments()).thenReturn(attachments);
 
         invokeInterceptor.beforeMethod(enhancedInstance, "execute", arguments, argumentType, null);

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/test/java/org/skywalking/apm/plugin/resin/v3/ResinV3InterceptorTest.java
Patch:
@@ -90,7 +90,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         interceptor.beforeMethod(enhancedInstance, "service", arguments, argumentType, methodInterceptResult);
         interceptor.afterMethod(enhancedInstance, "service", arguments, argumentType, null);

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/test/java/org/skywalking/apm/plugin/resin/v4/ResinV4InterceptorTest.java
Patch:
@@ -92,7 +92,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         interceptor.beforeMethod(enhancedInstance, "service", arguments, argumentType, methodInterceptResult);
         interceptor.afterMethod(enhancedInstance, "service", arguments, argumentType, null);

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/test/java/org/skywalking/apm/plugin/tomcat78x/TomcatInterceptorTest.java
Patch:
@@ -82,7 +82,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA*#AQA*4WcWe0tQNQA*|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*");
 
         tomcatInterceptor.beforeMethod(enhancedInstance, "invoke", arguments, argumentType, methodInterceptResult);
         tomcatInterceptor.afterMethod(enhancedInstance, "invoke", arguments, argumentType, null);

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/test/java/org/skywalking/apm/toolkit/activation/opentracing/SkywalkingSpanActivationTest.java
Patch:
@@ -181,7 +181,7 @@ public void testExtractWithValidateContext() throws Throwable {
             .withTag(Tags.PEER_HOST_IPV4.getKey(), "127.0.0.1").withTag(Tags.PEER_PORT.getKey(), 8080);
         startSpan();
         extractInterceptor.afterMethod(enhancedInstance, "extract",
-            new Object[] {"#AQA=#AQA=4WcWe0tQNQA=|3|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA="}, new Class[] {String.class}, null);
+            new Object[] {"#AQA*#AQA*4WcWe0tQNQA*|3|1|#127.0.0.1:8080|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*"}, new Class[] {String.class}, null);
         stopSpan();
 
         TraceSegment tracingSegment = assertTraceSemgnets();
@@ -201,7 +201,7 @@ public void testExtractWithInValidateContext() throws Throwable {
             .withTag(Tags.PEER_HOST_IPV4.getKey(), "127.0.0.1").withTag(Tags.PEER_PORT.getKey(), 8080);
         startSpan();
         extractInterceptor.afterMethod(enhancedInstance, "extract",
-            new Object[] {"#AQA=#AQA=4WcWe0tQNQA=|3|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA="}, new Class[] {String.class}, null);
+            new Object[] {"#AQA*#AQA*4WcWe0tQNQA*|3|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA*#AQA*Et0We0tQNQA*"}, new Class[] {String.class}, null);
         stopSpan();
 
         TraceSegment tracingSegment = assertTraceSemgnets();

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ContextCarrier.java
Patch:
@@ -162,7 +162,7 @@ public void setDistributedTraceIds(List<DistributedTraceId> distributedTraceIds)
     }
 
     private String getPrimaryDistributedTraceId() {
-        return primaryDistributedTraceId.toString();
+        return primaryDistributedTraceId.toBase64();
     }
 
     public String getParentOperationName() {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/ID.java
Patch:
@@ -37,7 +37,7 @@ public ID(String base64String) {
                 index += 9;
                 value = ByteBuffer.wrap(DECODER.decode(encodedString)).order(ByteOrder.LITTLE_ENDIAN).asIntBuffer().get(0);
             } else {
-                encodedString = base64String.substring(index + 1, index + 12);
+                encodedString = base64String.substring(index, index + 12);
                 index += 12;
                 value = ByteBuffer.wrap(DECODER.decode(encodedString)).order(ByteOrder.LITTLE_ENDIAN).asLongBuffer().get(0);
             }

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/test/java/org/skywalking/apm/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -148,7 +148,7 @@ public void testConsumerWithResultHasException() throws Throwable {
     @Test
     public void testProviderWithAttachment() throws Throwable {
         when(rpcContext.isConsumerSide()).thenReturn(false);
-        when(rpcContext.getAttachment(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8 :18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        when(rpcContext.getAttachment(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         dubboInterceptor.beforeMethod(enhancedInstance, "invoke", allArguments, argumentTypes, methodInterceptResult);
         dubboInterceptor.afterMethod(enhancedInstance, "invoke", allArguments, argumentTypes, result);
@@ -160,7 +160,7 @@ public void testProviderBelow283() throws Throwable {
         when(rpcContext.isConsumerSide()).thenReturn(false);
         FieldSetter.setStaticValue(BugFixActive.class, "ACTIVE", true);
 
-        testParam.setTraceContext("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8 :18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        testParam.setTraceContext("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         dubboInterceptor.beforeMethod(enhancedInstance, "invoke", allArguments, argumentTypes, methodInterceptResult);
         dubboInterceptor.afterMethod(enhancedInstance, "invoke", allArguments, argumentTypes, result);
@@ -194,7 +194,7 @@ private void assertProvider() {
 
     private void assertTraceSegmentRef(TraceSegmentRef actual) {
         assertThat(SegmentRefHelper.getSpanId(actual), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(actual), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(actual).toString(), is("1.1.15006458883500001"));
     }
 
     private void assertProviderSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/test/java/org/skywalking/apm/plugin/motan/MotanProviderInterceptorTest.java
Patch:
@@ -91,7 +91,7 @@ public void testInvokerWithoutRefSegment() throws Throwable {
     @Test
     public void testInvokerWithRefSegment() throws Throwable {
         HashMap attachments = new HashMap();
-        attachments.put(Config.Plugin.Propagation.HEADER_NAME, "S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8:18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        attachments.put(Config.Plugin.Propagation.HEADER_NAME, "#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
         when(request.getAttachments()).thenReturn(attachments);
 
         invokeInterceptor.beforeMethod(enhancedInstance, "execute", arguments, argumentType, null);
@@ -135,7 +135,7 @@ private void assertTraceSegmentWhenOccurException() {
     }
 
     private void assertRefSegment(TraceSegmentRef primaryRef) {
-        assertThat(SegmentRefHelper.getTraceSegmentId(primaryRef), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(primaryRef).toString(), is("1.1.15006458883500001"));
         assertThat(SegmentRefHelper.getSpanId(primaryRef), is(3));
         assertThat(SegmentRefHelper.getPeerHost(primaryRef), is("192.168.1.8:18002"));
     }

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/test/java/org/skywalking/apm/plugin/resin/v3/ResinV3InterceptorTest.java
Patch:
@@ -90,7 +90,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8:18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         interceptor.beforeMethod(enhancedInstance, "service", arguments, argumentType, methodInterceptResult);
         interceptor.afterMethod(enhancedInstance, "service", arguments, argumentType, null);
@@ -121,7 +121,7 @@ public void testWithOccurException() throws Throwable {
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.1.15006458883500001"));
     }
 
     private void assertHttpSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/test/java/org/skywalking/apm/plugin/resin/v4/ResinV4InterceptorTest.java
Patch:
@@ -92,7 +92,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8:18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         interceptor.beforeMethod(enhancedInstance, "service", arguments, argumentType, methodInterceptResult);
         interceptor.afterMethod(enhancedInstance, "service", arguments, argumentType, null);
@@ -123,7 +123,7 @@ public void testWithOccurException() throws Throwable {
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.1.15006458883500001"));
     }
 
     private void assertHttpSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/test/java/org/skywalking/apm/plugin/tomcat78x/TomcatInterceptorTest.java
Patch:
@@ -82,7 +82,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8:18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         tomcatInterceptor.beforeMethod(enhancedInstance, "invoke", arguments, argumentType, methodInterceptResult);
         tomcatInterceptor.afterMethod(enhancedInstance, "invoke", arguments, argumentType, null);
@@ -113,7 +113,7 @@ public void testWithOccurException() throws Throwable {
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.1.15006458883500001"));
     }
 
     private void assertHttpSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-test-tools/src/main/java/org/skywalking/apm/agent/test/helper/SegmentRefHelper.java
Patch:
@@ -1,5 +1,6 @@
 package org.skywalking.apm.agent.test.helper;
 
+import org.skywalking.apm.agent.core.context.ids.ID;
 import org.skywalking.apm.agent.core.context.trace.TraceSegmentRef;
 
 public class SegmentRefHelper {
@@ -12,7 +13,7 @@ public static String getPeerHost(TraceSegmentRef ref) {
         return null;
     }
 
-    public static String getTraceSegmentId(TraceSegmentRef ref) {
+    public static ID getTraceSegmentId(TraceSegmentRef ref) {
         try {
             return FieldGetter.getValue(ref, "traceSegmentId");
         } catch (Exception e) {

File: apm-sniffer/apm-test-tools/src/main/java/org/skywalking/apm/agent/test/tools/SegmentRefAssert.java
Patch:
@@ -8,7 +8,7 @@
 
 public class SegmentRefAssert {
     public static void assertSegmentId(TraceSegmentRef ref, String segmentId) {
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref), is(segmentId));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is(segmentId));
     }
 
     public static void assertSpanId(TraceSegmentRef ref, int spanId) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ContextCarrier.java
Patch:
@@ -162,7 +162,7 @@ public void setDistributedTraceIds(List<DistributedTraceId> distributedTraceIds)
     }
 
     private String getPrimaryDistributedTraceId() {
-        return primaryDistributedTraceId.toString();
+        return primaryDistributedTraceId.toBase64();
     }
 
     public String getParentOperationName() {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/ID.java
Patch:
@@ -37,7 +37,7 @@ public ID(String base64String) {
                 index += 9;
                 value = ByteBuffer.wrap(DECODER.decode(encodedString)).order(ByteOrder.LITTLE_ENDIAN).asIntBuffer().get(0);
             } else {
-                encodedString = base64String.substring(index + 1, index + 12);
+                encodedString = base64String.substring(index, index + 12);
                 index += 12;
                 value = ByteBuffer.wrap(DECODER.decode(encodedString)).order(ByteOrder.LITTLE_ENDIAN).asLongBuffer().get(0);
             }

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/test/java/org/skywalking/apm/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -148,7 +148,7 @@ public void testConsumerWithResultHasException() throws Throwable {
     @Test
     public void testProviderWithAttachment() throws Throwable {
         when(rpcContext.isConsumerSide()).thenReturn(false);
-        when(rpcContext.getAttachment(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8 :18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        when(rpcContext.getAttachment(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         dubboInterceptor.beforeMethod(enhancedInstance, "invoke", allArguments, argumentTypes, methodInterceptResult);
         dubboInterceptor.afterMethod(enhancedInstance, "invoke", allArguments, argumentTypes, result);
@@ -160,7 +160,7 @@ public void testProviderBelow283() throws Throwable {
         when(rpcContext.isConsumerSide()).thenReturn(false);
         FieldSetter.setStaticValue(BugFixActive.class, "ACTIVE", true);
 
-        testParam.setTraceContext("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8 :18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        testParam.setTraceContext("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8 :18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         dubboInterceptor.beforeMethod(enhancedInstance, "invoke", allArguments, argumentTypes, methodInterceptResult);
         dubboInterceptor.afterMethod(enhancedInstance, "invoke", allArguments, argumentTypes, result);
@@ -194,7 +194,7 @@ private void assertProvider() {
 
     private void assertTraceSegmentRef(TraceSegmentRef actual) {
         assertThat(SegmentRefHelper.getSpanId(actual), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(actual), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(actual).toString(), is("1.1.15006458883500001"));
     }
 
     private void assertProviderSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/test/java/org/skywalking/apm/plugin/motan/MotanProviderInterceptorTest.java
Patch:
@@ -91,7 +91,7 @@ public void testInvokerWithoutRefSegment() throws Throwable {
     @Test
     public void testInvokerWithRefSegment() throws Throwable {
         HashMap attachments = new HashMap();
-        attachments.put(Config.Plugin.Propagation.HEADER_NAME, "S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8:18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        attachments.put(Config.Plugin.Propagation.HEADER_NAME, "#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
         when(request.getAttachments()).thenReturn(attachments);
 
         invokeInterceptor.beforeMethod(enhancedInstance, "execute", arguments, argumentType, null);
@@ -135,7 +135,7 @@ private void assertTraceSegmentWhenOccurException() {
     }
 
     private void assertRefSegment(TraceSegmentRef primaryRef) {
-        assertThat(SegmentRefHelper.getTraceSegmentId(primaryRef), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(primaryRef).toString(), is("1.1.15006458883500001"));
         assertThat(SegmentRefHelper.getSpanId(primaryRef), is(3));
         assertThat(SegmentRefHelper.getPeerHost(primaryRef), is("192.168.1.8:18002"));
     }

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/test/java/org/skywalking/apm/plugin/resin/v3/ResinV3InterceptorTest.java
Patch:
@@ -90,7 +90,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8:18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         interceptor.beforeMethod(enhancedInstance, "service", arguments, argumentType, methodInterceptResult);
         interceptor.afterMethod(enhancedInstance, "service", arguments, argumentType, null);
@@ -121,7 +121,7 @@ public void testWithOccurException() throws Throwable {
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.1.15006458883500001"));
     }
 
     private void assertHttpSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/test/java/org/skywalking/apm/plugin/resin/v4/ResinV4InterceptorTest.java
Patch:
@@ -92,7 +92,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8:18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         interceptor.beforeMethod(enhancedInstance, "service", arguments, argumentType, methodInterceptResult);
         interceptor.afterMethod(enhancedInstance, "service", arguments, argumentType, null);
@@ -123,7 +123,7 @@ public void testWithOccurException() throws Throwable {
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.1.15006458883500001"));
     }
 
     private void assertHttpSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/test/java/org/skywalking/apm/plugin/tomcat78x/TomcatInterceptorTest.java
Patch:
@@ -82,7 +82,7 @@ public void testWithoutSerializedContextData() throws Throwable {
 
     @Test
     public void testWithSerializedContextData() throws Throwable {
-        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("S.1499176688384.581928182.80935.69.1|3|1|#192.168.1.8:18002|#/portal/|#/portal/|T.1499176688386.581928182.80935.69.2");
+        when(request.getHeader(Config.Plugin.Propagation.HEADER_NAME)).thenReturn("#AQA=#AQA=4WcWe0tQNQA=|3|1|#192.168.1.8:18002|#/portal/|#/testEntrySpan|#AQA=#AQA=Et0We0tQNQA=");
 
         tomcatInterceptor.beforeMethod(enhancedInstance, "invoke", arguments, argumentType, methodInterceptResult);
         tomcatInterceptor.afterMethod(enhancedInstance, "invoke", arguments, argumentType, null);
@@ -113,7 +113,7 @@ public void testWithOccurException() throws Throwable {
 
     private void assertTraceSegmentRef(TraceSegmentRef ref) {
         assertThat(SegmentRefHelper.getSpanId(ref), is(3));
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref), is("S.1499176688384.581928182.80935.69.1"));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is("1.1.15006458883500001"));
     }
 
     private void assertHttpSpan(AbstractTracingSpan span) {

File: apm-sniffer/apm-test-tools/src/main/java/org/skywalking/apm/agent/test/helper/SegmentRefHelper.java
Patch:
@@ -1,5 +1,6 @@
 package org.skywalking.apm.agent.test.helper;
 
+import org.skywalking.apm.agent.core.context.ids.ID;
 import org.skywalking.apm.agent.core.context.trace.TraceSegmentRef;
 
 public class SegmentRefHelper {
@@ -12,7 +13,7 @@ public static String getPeerHost(TraceSegmentRef ref) {
         return null;
     }
 
-    public static String getTraceSegmentId(TraceSegmentRef ref) {
+    public static ID getTraceSegmentId(TraceSegmentRef ref) {
         try {
             return FieldGetter.getValue(ref, "traceSegmentId");
         } catch (Exception e) {

File: apm-sniffer/apm-test-tools/src/main/java/org/skywalking/apm/agent/test/tools/SegmentRefAssert.java
Patch:
@@ -8,7 +8,7 @@
 
 public class SegmentRefAssert {
     public static void assertSegmentId(TraceSegmentRef ref, String segmentId) {
-        assertThat(SegmentRefHelper.getTraceSegmentId(ref), is(segmentId));
+        assertThat(SegmentRefHelper.getTraceSegmentId(ref).toString(), is(segmentId));
     }
 
     public static void assertSpanId(TraceSegmentRef ref, int spanId) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/ID.java
Patch:
@@ -34,10 +34,10 @@ public ID(String base64String) {
                 value = ByteBuffer.wrap(DECODER.decode(encodedString)).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(0);
             } else if (potentialTypeChar == '$') {
                 encodedString = base64String.substring(index + 1, index + 9);
-                index += 8;
+                index += 9;
                 value = ByteBuffer.wrap(DECODER.decode(encodedString)).order(ByteOrder.LITTLE_ENDIAN).asIntBuffer().get(0);
             } else {
-                encodedString = base64String.substring(index + 1, index + 13);
+                encodedString = base64String.substring(index + 1, index + 12);
                 index += 12;
                 value = ByteBuffer.wrap(DECODER.decode(encodedString)).order(ByteOrder.LITTLE_ENDIAN).asLongBuffer().get(0);
             }

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/define/AbstractHttpClientInstrumentation.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class AbstractHttpClientInstrumentation extends HttpClientInstrumentation {
 
-    private static final String ENHANCE_CLASS = "org.apache.http.impl.discovery.AbstractHttpClient";
+    private static final String ENHANCE_CLASS = "org.apache.http.impl.client.AbstractHttpClient";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/define/InternalHttpClientInstrumentation.java
Patch:
@@ -17,7 +17,7 @@
  */
 public class InternalHttpClientInstrumentation extends HttpClientInstrumentation {
 
-    private static final String ENHANCE_CLASS = "org.apache.http.impl.discovery.InternalHttpClient";
+    private static final String ENHANCE_CLASS = "org.apache.http.impl.client.InternalHttpClient";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/define/MinimalHttpClientInstrumentation.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class MinimalHttpClientInstrumentation extends HttpClientInstrumentation {
 
-    private static final String ENHANCE_CLASS = "org.apache.http.impl.discovery.MinimalHttpClient";
+    private static final String ENHANCE_CLASS = "org.apache.http.impl.client.MinimalHttpClient";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/define/AbstractHttpClientInstrumentation.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class AbstractHttpClientInstrumentation extends HttpClientInstrumentation {
 
-    private static final String ENHANCE_CLASS = "org.apache.http.impl.discovery.AbstractHttpClient";
+    private static final String ENHANCE_CLASS = "org.apache.http.impl.client.AbstractHttpClient";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/define/InternalHttpClientInstrumentation.java
Patch:
@@ -17,7 +17,7 @@
  */
 public class InternalHttpClientInstrumentation extends HttpClientInstrumentation {
 
-    private static final String ENHANCE_CLASS = "org.apache.http.impl.discovery.InternalHttpClient";
+    private static final String ENHANCE_CLASS = "org.apache.http.impl.client.InternalHttpClient";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/define/MinimalHttpClientInstrumentation.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class MinimalHttpClientInstrumentation extends HttpClientInstrumentation {
 
-    private static final String ENHANCE_CLASS = "org.apache.http.impl.discovery.MinimalHttpClient";
+    private static final String ENHANCE_CLASS = "org.apache.http.impl.client.MinimalHttpClient";
 
     @Override
     public ClassMatch enhanceClass() {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/ID.java
Patch:
@@ -43,11 +43,11 @@ public ID(String base64String) {
             }
 
             if (part == 0) {
-                part1 = part;
+                part1 = value;
             } else if (part == 1) {
-                part2 = part;
+                part2 = value;
             } else {
-                part3 = part;
+                part3 = value;
             }
 
         }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracingContext.java
Patch:
@@ -286,13 +286,13 @@ public Object doProcess(final int applicationId) {
                                 .doInCondition(
                                     new PossibleFound.FoundAndObtain() {
                                         @Override
-                                        public Object doProcess(int peerId) {
-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, applicationId, peerId);
+                                        public Object doProcess(int operationId) {
+                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationId, applicationId);
                                         }
                                     }, new PossibleFound.NotFoundAndObtain() {
                                         @Override
                                         public Object doProcess() {
-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, applicationId, remotePeer);
+                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationName, remotePeer);
                                         }
                                     });
                         }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracingContext.java
Patch:
@@ -286,13 +286,13 @@ public Object doProcess(final int applicationId) {
                                 .doInCondition(
                                     new PossibleFound.FoundAndObtain() {
                                         @Override
-                                        public Object doProcess(int peerId) {
-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, applicationId, peerId);
+                                        public Object doProcess(int operationId) {
+                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationId, applicationId);
                                         }
                                     }, new PossibleFound.NotFoundAndObtain() {
                                         @Override
                                         public Object doProcess() {
-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, applicationId, remotePeer);
+                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationName, remotePeer);
                                         }
                                     });
                         }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracingContext.java
Patch:
@@ -286,13 +286,13 @@ public Object doProcess(final int applicationId) {
                                 .doInCondition(
                                     new PossibleFound.FoundAndObtain() {
                                         @Override
-                                        public Object doProcess(int peerId) {
-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, applicationId, peerId);
+                                        public Object doProcess(int operationId) {
+                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationId, applicationId);
                                         }
                                     }, new PossibleFound.NotFoundAndObtain() {
                                         @Override
                                         public Object doProcess() {
-                                            return new ExitSpan(spanIdGenerator++, parentSpanId, applicationId, remotePeer);
+                                            return new ExitSpan(spanIdGenerator++, parentSpanId, operationName, remotePeer);
                                         }
                                     });
                         }

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/consumer/ConsumerPool.java
Patch:
@@ -20,6 +20,7 @@ public ConsumerPool(Channels<T> channels, Class<? extends IConsumer<T>> consumer
         this(channels, num);
         for (int i = 0; i < num; i++) {
             consumerThreads[i] = new ConsumerThread("DataCarrier.Consumser." + i + ".Thread", getNewConsumerInstance(consumerClass));
+            consumerThreads[i].setDaemon(true);
         }
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/boot/BootService.java
Patch:
@@ -13,4 +13,6 @@ public interface BootService {
     void boot() throws Throwable;
 
     void afterBoot() throws Throwable;
+
+    void shutdown() throws Throwable;
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/IgnoredTracerContext.java
Patch:
@@ -33,7 +33,7 @@ public void extract(ContextCarrier carrier) {
     }
 
     @Override public ContextSnapshot capture() {
-        return new ContextSnapshot(null, -1, null);
+        return new ContextSnapshot(null, -1, null, 0, null);
     }
 
     @Override public void continued(ContextSnapshot snapshot) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/IgnoredTracerContext.java
Patch:
@@ -33,7 +33,7 @@ public void extract(ContextCarrier carrier) {
     }
 
     @Override public ContextSnapshot capture() {
-        return new ContextSnapshot(null, -1, null);
+        return new ContextSnapshot(null, -1, null, 0, null);
     }
 
     @Override public void continued(ContextSnapshot snapshot) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/IgnoredTracerContext.java
Patch:
@@ -33,7 +33,7 @@ public void extract(ContextCarrier carrier) {
     }
 
     @Override public ContextSnapshot capture() {
-        return new ContextSnapshot(null, -1, null);
+        return new ContextSnapshot(null, -1, null, 0, null);
     }
 
     @Override public void continued(ContextSnapshot snapshot) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/PluginFinder.java
Patch:
@@ -8,7 +8,6 @@
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 import org.skywalking.apm.agent.core.plugin.bytebuddy.AbstractJunction;
-import org.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch;
 import org.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.skywalking.apm.agent.core.plugin.match.IndirectMatch;
 import org.skywalking.apm.agent.core.plugin.match.NameMatch;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/PluginFinder.java
Patch:
@@ -8,7 +8,6 @@
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 import org.skywalking.apm.agent.core.plugin.bytebuddy.AbstractJunction;
-import org.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch;
 import org.skywalking.apm.agent.core.plugin.match.ClassMatch;
 import org.skywalking.apm.agent.core.plugin.match.IndirectMatch;
 import org.skywalking.apm.agent.core.plugin.match.NameMatch;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/PluginFinder.java
Patch:
@@ -34,7 +34,7 @@ public PluginFinder(List<AbstractClassEnhancePluginDefine> plugins) {
                 continue;
             }
 
-            if (match instanceof IndirectMatch) {
+            if (match instanceof NameMatch) {
                 NameMatch nameMatch = (NameMatch)match;
                 nameMatchDefine.put(nameMatch.getClassName(), plugin);
             } else {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/PluginFinder.java
Patch:
@@ -34,7 +34,7 @@ public PluginFinder(List<AbstractClassEnhancePluginDefine> plugins) {
                 continue;
             }
 
-            if (match instanceof IndirectMatch) {
+            if (match instanceof NameMatch) {
                 NameMatch nameMatch = (NameMatch)match;
                 nameMatchDefine.put(nameMatch.getClassName(), plugin);
             } else {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/PluginFinder.java
Patch:
@@ -70,8 +70,8 @@ public boolean matches(NamedElement target) {
         judge = judge.and(not(isInterface()));
         for (AbstractClassEnhancePluginDefine define : signatureMatchDefine) {
             ClassMatch match = define.enhanceClass();
-            if (match instanceof ClassAnnotationMatch) {
-                judge = judge.or(((ClassAnnotationMatch)match).buildJunction());
+            if (match instanceof IndirectMatch) {
+                judge = judge.or(((IndirectMatch)match).buildJunction());
             }
         }
         return judge;

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/buffer/Buffer.java
Patch:
@@ -1,7 +1,7 @@
-package org.skywalking.apm.agent.core.datacarrier.buffer;
+package org.skywalking.apm.commons.datacarrier.buffer;
 
 import java.util.LinkedList;
-import org.skywalking.apm.agent.core.datacarrier.common.AtomicRangeInteger;
+import org.skywalking.apm.commons.datacarrier.common.AtomicRangeInteger;
 
 /**
  * Created by wusheng on 2016/10/25.

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/buffer/BufferStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.agent.core.datacarrier.buffer;
+package org.skywalking.apm.commons.datacarrier.buffer;
 
 /**
  * Created by wusheng on 2016/10/25.

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/buffer/Channels.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.agent.core.datacarrier.buffer;
+package org.skywalking.apm.commons.datacarrier.buffer;
 
-import org.skywalking.apm.agent.core.datacarrier.partition.IDataPartitioner;
+import org.skywalking.apm.commons.datacarrier.partition.IDataPartitioner;
 
 /**
  * Channels of Buffer

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/common/AtomicRangeInteger.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.agent.core.datacarrier.common;
+package org.skywalking.apm.commons.datacarrier.common;
 
 import java.io.Serializable;
 import java.util.concurrent.atomic.AtomicInteger;

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/consumer/ConsumerCannotBeCreatedException.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.agent.core.datacarrier.consumer;
+package org.skywalking.apm.commons.datacarrier.consumer;
 
 /**
  * Created by wusheng on 2016/11/15.

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/consumer/ConsumerPool.java
Patch:
@@ -1,9 +1,9 @@
-package org.skywalking.apm.agent.core.datacarrier.consumer;
+package org.skywalking.apm.commons.datacarrier.consumer;
 
 import java.util.ArrayList;
 import java.util.concurrent.locks.ReentrantLock;
-import org.skywalking.apm.agent.core.datacarrier.buffer.Buffer;
-import org.skywalking.apm.agent.core.datacarrier.buffer.Channels;
+import org.skywalking.apm.commons.datacarrier.buffer.Buffer;
+import org.skywalking.apm.commons.datacarrier.buffer.Channels;
 
 /**
  * Pool of consumers

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/consumer/ConsumerThread.java
Patch:
@@ -1,8 +1,8 @@
-package org.skywalking.apm.agent.core.datacarrier.consumer;
+package org.skywalking.apm.commons.datacarrier.consumer;
 
 import java.util.LinkedList;
 import java.util.List;
-import org.skywalking.apm.agent.core.datacarrier.buffer.Buffer;
+import org.skywalking.apm.commons.datacarrier.buffer.Buffer;
 
 /**
  * Created by wusheng on 2016/10/25.

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/consumer/IConsumer.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.agent.core.datacarrier.consumer;
+package org.skywalking.apm.commons.datacarrier.consumer;
 
 import java.util.List;
 

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/partition/IDataPartitioner.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.agent.core.datacarrier.partition;
+package org.skywalking.apm.commons.datacarrier.partition;
 
 /**
  * Created by wusheng on 2016/10/25.

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/partition/ProducerThreadPartitioner.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.agent.core.datacarrier.partition;
+package org.skywalking.apm.commons.datacarrier.partition;
 
 /**
  * use threadid % total to partition

File: apm-commons/apm-datacarrier/src/main/java/org/skywalking/apm/commons/datacarrier/partition/SimpleRollingPartitioner.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.agent.core.datacarrier.partition;
+package org.skywalking.apm.commons.datacarrier.partition;
 
 /**
  * use normal int to rolling.

File: apm-commons/apm-datacarrier/src/test/java/org/skywalking/apm/commons/datacarrier/SampleData.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.agent.core.datacarrier;
+package org.skywalking.apm.commons.datacarrier;
 
 /**
  * Created by wusheng on 2016/10/25.

File: apm-commons/apm-datacarrier/src/test/java/org/skywalking/apm/commons/datacarrier/consumer/ConsumerTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.agent.core.datacarrier.consumer;
+package org.skywalking.apm.commons.datacarrier.consumer;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -7,8 +7,8 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.powermock.api.support.membermodification.MemberModifier;
-import org.skywalking.apm.agent.core.datacarrier.DataCarrier;
-import org.skywalking.apm.agent.core.datacarrier.SampleData;
+import org.skywalking.apm.commons.datacarrier.DataCarrier;
+import org.skywalking.apm.commons.datacarrier.SampleData;
 
 /**
  * Created by wusheng on 2016/10/26.

File: apm-commons/apm-datacarrier/src/test/java/org/skywalking/apm/commons/datacarrier/consumer/SampleConsumer.java
Patch:
@@ -1,8 +1,7 @@
-package org.skywalking.apm.agent.core.datacarrier.consumer;
-
+package org.skywalking.apm.commons.datacarrier.consumer;
 
 import java.util.List;
-import org.skywalking.apm.agent.core.datacarrier.SampleData;
+import org.skywalking.apm.commons.datacarrier.SampleData;
 
 /**
  * Created by wusheng on 2016/10/26.

File: apm-commons/apm-datacarrier/src/test/java/org/skywalking/apm/commons/datacarrier/partition/ProducerThreadPartitionerTest.java
Patch:
@@ -1,15 +1,15 @@
-package org.skywalking.apm.agent.core.datacarrier.partition;
+package org.skywalking.apm.commons.datacarrier.partition;
 
 import org.junit.Assert;
 import org.junit.Test;
-import org.skywalking.apm.agent.core.datacarrier.SampleData;
+import org.skywalking.apm.commons.datacarrier.SampleData;
 
 /**
  * Created by wusheng on 2016/10/25.
  */
 public class ProducerThreadPartitionerTest {
     @Test
-    public void testPartition(){
+    public void testPartition() {
         int partitionNum = (int)Thread.currentThread().getId() % 10;
         ProducerThreadPartitioner<SampleData> partitioner = new ProducerThreadPartitioner<SampleData>();
         Assert.assertEquals(partitioner.partition(10, new SampleData()), partitionNum);

File: apm-commons/apm-datacarrier/src/test/java/org/skywalking/apm/commons/datacarrier/partition/SimpleRollingPartitionerTest.java
Patch:
@@ -1,8 +1,8 @@
-package org.skywalking.apm.agent.core.datacarrier.partition;
+package org.skywalking.apm.commons.datacarrier.partition;
 
 import org.junit.Assert;
 import org.junit.Test;
-import org.skywalking.apm.agent.core.datacarrier.SampleData;
+import org.skywalking.apm.commons.datacarrier.SampleData;
 
 /**
  * Created by wusheng on 2016/10/25.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/AppAndServiceRegisterClient.java
Patch:
@@ -69,7 +69,7 @@ public void beforeBoot() throws Throwable {
     public void boot() throws Throwable {
         applicationRegisterFuture = Executors
             .newSingleThreadScheduledExecutor()
-            .scheduleAtFixedRate(this, 0, 10, TimeUnit.SECONDS);
+            .scheduleAtFixedRate(this, 0, Config.Collector.APP_AND_SERVICE_REGISTER_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/CollectorDiscoveryService.java
Patch:
@@ -20,7 +20,7 @@ public void beforeBoot() throws Throwable {
     public void boot() throws Throwable {
         Executors.newSingleThreadScheduledExecutor()
             .scheduleAtFixedRate(new DiscoveryRestServiceClient(), 0,
-                Config.Collector.DISCOVERY_CHECK_INTERVAL, TimeUnit.MILLISECONDS);
+                Config.Collector.DISCOVERY_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/TraceSegmentServiceClient.java
Patch:
@@ -8,9 +8,9 @@
 import org.skywalking.apm.agent.core.context.TracingContext;
 import org.skywalking.apm.agent.core.context.TracingContextListener;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
-import org.skywalking.apm.agent.core.datacarrier.DataCarrier;
-import org.skywalking.apm.agent.core.datacarrier.buffer.BufferStrategy;
-import org.skywalking.apm.agent.core.datacarrier.consumer.IConsumer;
+import org.skywalking.apm.commons.datacarrier.DataCarrier;
+import org.skywalking.apm.commons.datacarrier.buffer.BufferStrategy;
+import org.skywalking.apm.commons.datacarrier.consumer.IConsumer;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
 import org.skywalking.apm.network.proto.Downstream;

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/remote/GRPCChannelManagerTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.powermock.reflect.Whitebox;
+import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.agent.core.test.tools.AgentServiceRule;
 
@@ -52,7 +53,7 @@ public void setUp() throws Throwable {
         List<String> grpcServers = new ArrayList<String>();
         grpcServers.add("127.0.0.1:2181");
         RemoteDownstreamConfig.Collector.GRPC_SERVERS = grpcServers;
-        Whitebox.setInternalState(grpcChannelManager, "retryCycle", 1);
+        Config.Collector.GRPC_CHANNEL_CHECK_INTERVAL = 1;
 
         mockStatic(NettyChannelBuilder.class);
         when(NettyChannelBuilder.forAddress(anyString(), anyInt())).thenReturn(mock);

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v3/define/MongoDBInstrumentation.java
Patch:
@@ -1,6 +1,5 @@
 package org.skywalking.apm.plugin.mongodb.v3.define;
 
-import com.mongodb.connection.Cluster;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 import org.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
@@ -9,7 +8,7 @@
 import org.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
-import static net.bytebuddy.matcher.ElementMatchers.takesArgument;
+import static org.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static org.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 public class MongoDBInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
@@ -24,7 +23,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
             new ConstructorInterceptPoint() {
                 @Override
                 public ElementMatcher<MethodDescription> getConstructorMatcher() {
-                    return takesArgument(1, Cluster.class);
+                    return takesArgumentWithType(0, "com.mongodb.connection.Cluster");
                 }
 
                 @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/AppAndServiceRegisterClient.java
Patch:
@@ -69,7 +69,7 @@ public void beforeBoot() throws Throwable {
     public void boot() throws Throwable {
         applicationRegisterFuture = Executors
             .newSingleThreadScheduledExecutor()
-            .scheduleAtFixedRate(this, 0, 10, TimeUnit.SECONDS);
+            .scheduleAtFixedRate(this, 0, Config.Collector.APP_AND_SERVICE_REGISTER_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/CollectorDiscoveryService.java
Patch:
@@ -20,7 +20,7 @@ public void beforeBoot() throws Throwable {
     public void boot() throws Throwable {
         Executors.newSingleThreadScheduledExecutor()
             .scheduleAtFixedRate(new DiscoveryRestServiceClient(), 0,
-                Config.Collector.DISCOVERY_CHECK_INTERVAL, TimeUnit.MILLISECONDS);
+                Config.Collector.DISCOVERY_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 
     @Override

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/remote/GRPCChannelManagerTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.powermock.reflect.Whitebox;
+import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.agent.core.test.tools.AgentServiceRule;
 
@@ -52,7 +53,7 @@ public void setUp() throws Throwable {
         List<String> grpcServers = new ArrayList<String>();
         grpcServers.add("127.0.0.1:2181");
         RemoteDownstreamConfig.Collector.GRPC_SERVERS = grpcServers;
-        Whitebox.setInternalState(grpcChannelManager, "retryCycle", 1);
+        Config.Collector.GRPC_CHANNEL_CHECK_INTERVAL = 1;
 
         mockStatic(NettyChannelBuilder.class);
         when(NettyChannelBuilder.forAddress(anyString(), anyInt())).thenReturn(mock);

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v3/define/MongoDBInstrumentation.java
Patch:
@@ -1,6 +1,5 @@
 package org.skywalking.apm.plugin.mongodb.v3.define;
 
-import com.mongodb.connection.Cluster;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 import org.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
@@ -9,7 +8,7 @@
 import org.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
-import static net.bytebuddy.matcher.ElementMatchers.takesArgument;
+import static org.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static org.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 public class MongoDBInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
@@ -24,7 +23,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
             new ConstructorInterceptPoint() {
                 @Override
                 public ElementMatcher<MethodDescription> getConstructorMatcher() {
-                    return takesArgument(1, Cluster.class);
+                    return takesArgumentWithType(0, "com.mongodb.connection.Cluster");
                 }
 
                 @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/AppAndServiceRegisterClient.java
Patch:
@@ -69,7 +69,7 @@ public void beforeBoot() throws Throwable {
     public void boot() throws Throwable {
         applicationRegisterFuture = Executors
             .newSingleThreadScheduledExecutor()
-            .scheduleAtFixedRate(this, 0, 10, TimeUnit.SECONDS);
+            .scheduleAtFixedRate(this, 0, Config.Collector.APP_AND_SERVICE_REGISTER_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/CollectorDiscoveryService.java
Patch:
@@ -20,7 +20,7 @@ public void beforeBoot() throws Throwable {
     public void boot() throws Throwable {
         Executors.newSingleThreadScheduledExecutor()
             .scheduleAtFixedRate(new DiscoveryRestServiceClient(), 0,
-                Config.Collector.DISCOVERY_CHECK_INTERVAL, TimeUnit.MILLISECONDS);
+                Config.Collector.DISCOVERY_CHECK_INTERVAL, TimeUnit.SECONDS);
     }
 
     @Override

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/remote/GRPCChannelManagerTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.powermock.reflect.Whitebox;
+import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.agent.core.test.tools.AgentServiceRule;
 
@@ -52,7 +53,7 @@ public void setUp() throws Throwable {
         List<String> grpcServers = new ArrayList<String>();
         grpcServers.add("127.0.0.1:2181");
         RemoteDownstreamConfig.Collector.GRPC_SERVERS = grpcServers;
-        Whitebox.setInternalState(grpcChannelManager, "retryCycle", 1);
+        Config.Collector.GRPC_CHANNEL_CHECK_INTERVAL = 1;
 
         mockStatic(NettyChannelBuilder.class);
         when(NettyChannelBuilder.forAddress(anyString(), anyInt())).thenReturn(mock);

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v3/define/MongoDBInstrumentation.java
Patch:
@@ -1,6 +1,5 @@
 package org.skywalking.apm.plugin.mongodb.v3.define;
 
-import com.mongodb.connection.Cluster;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 import org.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;
@@ -9,7 +8,7 @@
 import org.skywalking.apm.agent.core.plugin.match.ClassMatch;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
-import static net.bytebuddy.matcher.ElementMatchers.takesArgument;
+import static org.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static org.skywalking.apm.agent.core.plugin.match.NameMatch.byName;
 
 public class MongoDBInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
@@ -24,7 +23,7 @@ protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
             new ConstructorInterceptPoint() {
                 @Override
                 public ElementMatcher<MethodDescription> getConstructorMatcher() {
-                    return takesArgument(1, Cluster.class);
+                    return takesArgumentWithType(0, "com.mongodb.connection.Cluster");
                 }
 
                 @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java
Patch:
@@ -64,7 +64,7 @@ protected abstract DynamicType.Builder<?> enhance(String enhanceOriginClassName,
         DynamicType.Builder<?> newClassBuilder, ClassLoader classLoader) throws PluginException;
 
     /**
-     * Define the classname of target class.
+     * Define the {@link ClassMatch} for filtering class.
      *
      * @return {@link ClassMatch}
      */

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/match/ClassMatch.java
Patch:
@@ -3,5 +3,5 @@
 /**
  * @author wusheng
  */
-public abstract class ClassMatch {
+public interface ClassMatch {
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java
Patch:
@@ -153,6 +153,7 @@ public AbstractTracingSpan errorOccurred() {
     @Override
     public AbstractTracingSpan setOperationName(String operationName) {
         this.operationName = operationName;
+        this.operationId = DictionaryUtil.nullValue();
         return this;
     }
 
@@ -164,6 +165,7 @@ public AbstractTracingSpan setOperationName(String operationName) {
      */
     public AbstractTracingSpan setOperationId(int operationId) {
         this.operationId = operationId;
+        this.operationName = null;
         return this;
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/EntrySpan.java
Patch:
@@ -53,7 +53,7 @@ public EntrySpan tag(String key, String value) {
     }
 
     @Override
-    public AbstractSpan setLayer(SpanLayer layer) {
+    public AbstractTracingSpan setLayer(SpanLayer layer) {
         if (stackDepth == currentMaxDepth) {
             return super.setLayer(layer);
         } else {
@@ -62,7 +62,7 @@ public AbstractSpan setLayer(SpanLayer layer) {
     }
 
     @Override
-    public AbstractSpan setComponent(Component component) {
+    public AbstractTracingSpan setComponent(Component component) {
         if (stackDepth == currentMaxDepth) {
             return super.setComponent(component);
         } else {
@@ -71,7 +71,7 @@ public AbstractSpan setComponent(Component component) {
     }
 
     @Override
-    public AbstractSpan setComponent(String componentName) {
+    public AbstractTracingSpan setComponent(String componentName) {
         if (stackDepth == currentMaxDepth) {
             return super.setComponent(componentName);
         } else {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/ExitSpan.java
Patch:
@@ -72,7 +72,7 @@ public boolean finish(TraceSegment owner) {
     }
 
     @Override
-    public AbstractSpan setLayer(SpanLayer layer) {
+    public AbstractTracingSpan setLayer(SpanLayer layer) {
         if (stackDepth == 1) {
             return super.setLayer(layer);
         } else {
@@ -81,7 +81,7 @@ public AbstractSpan setLayer(SpanLayer layer) {
     }
 
     @Override
-    public AbstractSpan setComponent(Component component) {
+    public AbstractTracingSpan setComponent(Component component) {
         if (stackDepth == 1) {
             return super.setComponent(component);
         } else {
@@ -90,7 +90,7 @@ public AbstractSpan setComponent(Component component) {
     }
 
     @Override
-    public AbstractSpan setComponent(String componentName) {
+    public AbstractTracingSpan setComponent(String componentName) {
         if (stackDepth == 1) {
             return super.setComponent(componentName);
         } else {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/MotanConsumerInterceptor.java
Patch:
@@ -36,7 +36,7 @@ public void beforeMethod(EnhancedInstance objInst, String methodName, Object[] a
         Request request = (Request)allArguments[0];
         if (url != null) {
             ContextCarrier contextCarrier = new ContextCarrier();
-            String remotePeer = url.getHost() + " :" + url.getPort();
+            String remotePeer = url.getHost() + ":" + url.getPort();
             AbstractSpan span = ContextManager.createExitSpan(generateOperationName(url, request), contextCarrier, remotePeer);
             span.setComponent(ComponentsDefine.MOTAN);
             Tags.URL.set(span, url.getIdentity());

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/EntrySpan.java
Patch:
@@ -53,7 +53,7 @@ public EntrySpan tag(String key, String value) {
     }
 
     @Override
-    public AbstractSpan setLayer(SpanLayer layer) {
+    public AbstractTracingSpan setLayer(SpanLayer layer) {
         if (stackDepth == currentMaxDepth) {
             return super.setLayer(layer);
         } else {
@@ -62,7 +62,7 @@ public AbstractSpan setLayer(SpanLayer layer) {
     }
 
     @Override
-    public AbstractSpan setComponent(Component component) {
+    public AbstractTracingSpan setComponent(Component component) {
         if (stackDepth == currentMaxDepth) {
             return super.setComponent(component);
         } else {
@@ -71,7 +71,7 @@ public AbstractSpan setComponent(Component component) {
     }
 
     @Override
-    public AbstractSpan setComponent(String componentName) {
+    public AbstractTracingSpan setComponent(String componentName) {
         if (stackDepth == currentMaxDepth) {
             return super.setComponent(componentName);
         } else {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/ExitSpan.java
Patch:
@@ -72,7 +72,7 @@ public boolean finish(TraceSegment owner) {
     }
 
     @Override
-    public AbstractSpan setLayer(SpanLayer layer) {
+    public AbstractTracingSpan setLayer(SpanLayer layer) {
         if (stackDepth == 1) {
             return super.setLayer(layer);
         } else {
@@ -81,7 +81,7 @@ public AbstractSpan setLayer(SpanLayer layer) {
     }
 
     @Override
-    public AbstractSpan setComponent(Component component) {
+    public AbstractTracingSpan setComponent(Component component) {
         if (stackDepth == 1) {
             return super.setComponent(component);
         } else {
@@ -90,7 +90,7 @@ public AbstractSpan setComponent(Component component) {
     }
 
     @Override
-    public AbstractSpan setComponent(String componentName) {
+    public AbstractTracingSpan setComponent(String componentName) {
         if (stackDepth == 1) {
             return super.setComponent(componentName);
         } else {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/MotanConsumerInterceptor.java
Patch:
@@ -36,7 +36,7 @@ public void beforeMethod(EnhancedInstance objInst, String methodName, Object[] a
         Request request = (Request)allArguments[0];
         if (url != null) {
             ContextCarrier contextCarrier = new ContextCarrier();
-            String remotePeer = url.getHost() + " :" + url.getPort();
+            String remotePeer = url.getHost() + ":" + url.getPort();
             AbstractSpan span = ContextManager.createExitSpan(generateOperationName(url, request), contextCarrier, remotePeer);
             span.setComponent(ComponentsDefine.MOTAN);
             Tags.URL.set(span, url.getIdentity());

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/TraceSegmentRef.java
Patch:
@@ -69,7 +69,7 @@ public int getOperationId() {
 
     public TraceSegmentReference transform() {
         TraceSegmentReference.Builder refBuilder = TraceSegmentReference.newBuilder();
-        if(SegmentRefType.CROSS_PROCESS.equals(type)) {
+        if (SegmentRefType.CROSS_PROCESS.equals(type)) {
             refBuilder.setRefType(RefType.CrossProcess);
             refBuilder.setParentApplicationInstanceId(applicationInstanceId);
             if (peerId == DictionaryUtil.nullValue()) {
@@ -82,7 +82,7 @@ public TraceSegmentReference transform() {
             } else {
                 refBuilder.setEntryServiceId(operationId);
             }
-        }else{
+        } else {
             refBuilder.setRefType(RefType.CrossThread);
         }
         refBuilder.setParentTraceSegmentId(traceSegmentId);

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/IgnoredTracerContextTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.skywalking.apm.agent.core.context.trace.NoopSpan;
-import org.skywalking.apm.agent.test.tools.SegmentStorage;
-import org.skywalking.apm.agent.test.tools.SegmentStoragePoint;
-import org.skywalking.apm.agent.test.tools.TracingSegmentRunner;
+import org.skywalking.apm.agent.core.context.util.SegmentStorage;
+import org.skywalking.apm.agent.core.context.util.SegmentStoragePoint;
+import org.skywalking.apm.agent.core.context.util.TracingSegmentRunner;
 
 import static junit.framework.TestCase.assertNull;
 import static org.hamcrest.CoreMatchers.is;

File: apm-sniffer/apm-test-tools/src/main/java/org/skywalking/apm/agent/test/helper/AbstractTracingSpanHelper.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.List;
 import org.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.skywalking.apm.agent.core.context.trace.LogDataEntity;
-import org.skywalking.apm.agent.core.context.util.KeyValuePair;
 
 public class AbstractTracingSpanHelper {
     public static int getParentSpanId(AbstractTracingSpan tracingSpan) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/TraceSegmentRef.java
Patch:
@@ -69,7 +69,7 @@ public int getOperationId() {
 
     public TraceSegmentReference transform() {
         TraceSegmentReference.Builder refBuilder = TraceSegmentReference.newBuilder();
-        if(SegmentRefType.CROSS_PROCESS.equals(type)) {
+        if (SegmentRefType.CROSS_PROCESS.equals(type)) {
             refBuilder.setRefType(RefType.CrossProcess);
             refBuilder.setParentApplicationInstanceId(applicationInstanceId);
             if (peerId == DictionaryUtil.nullValue()) {
@@ -82,7 +82,7 @@ public TraceSegmentReference transform() {
             } else {
                 refBuilder.setEntryServiceId(operationId);
             }
-        }else{
+        } else {
             refBuilder.setRefType(RefType.CrossThread);
         }
         refBuilder.setParentTraceSegmentId(traceSegmentId);

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/IgnoredTracerContextTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.skywalking.apm.agent.core.context.trace.NoopSpan;
-import org.skywalking.apm.agent.test.tools.SegmentStorage;
-import org.skywalking.apm.agent.test.tools.SegmentStoragePoint;
-import org.skywalking.apm.agent.test.tools.TracingSegmentRunner;
+import org.skywalking.apm.agent.core.context.util.SegmentStorage;
+import org.skywalking.apm.agent.core.context.util.SegmentStoragePoint;
+import org.skywalking.apm.agent.core.context.util.TracingSegmentRunner;
 
 import static junit.framework.TestCase.assertNull;
 import static org.hamcrest.CoreMatchers.is;

File: apm-sniffer/apm-test-tools/src/main/java/org/skywalking/apm/agent/test/helper/AbstractTracingSpanHelper.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.List;
 import org.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;
 import org.skywalking.apm.agent.core.context.trace.LogDataEntity;
-import org.skywalking.apm.agent.core.context.util.KeyValuePair;
 
 public class AbstractTracingSpanHelper {
     public static int getParentSpanId(AbstractTracingSpan tracingSpan) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/PluginBootstrap.java
Patch:
@@ -27,15 +27,15 @@ public List<AbstractClassEnhancePluginDefine> loadPlugins() {
         List<URL> resources = resolver.getResources();
 
         if (resources == null || resources.size() == 0) {
-            logger.info("no plugin files (skywalking-plugin.properties) found, continue to start application.");
+            logger.info("no plugin files (skywalking-plugin.def) found, continue to start application.");
             return new ArrayList<AbstractClassEnhancePluginDefine>();
         }
 
         for (URL pluginUrl : resources) {
             try {
                 PluginCfg.INSTANCE.load(pluginUrl.openStream());
             } catch (Throwable t) {
-                logger.error(t, "plugin [{}] init failure.", pluginUrl);
+                logger.error(t, "plugin file [{}] init failure.", pluginUrl);
             }
         }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/TraceSegment.java
Patch:
@@ -2,14 +2,11 @@
 
 import java.util.LinkedList;
 import java.util.List;
-import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;
 import org.skywalking.apm.agent.core.context.ids.DistributedTraceId;
 import org.skywalking.apm.agent.core.context.ids.DistributedTraceIds;
 import org.skywalking.apm.agent.core.context.ids.GlobalIdGenerator;
 import org.skywalking.apm.agent.core.context.ids.NewDistributedTraceId;
-import org.skywalking.apm.agent.core.dictionary.DictionaryManager;
-import org.skywalking.apm.agent.core.dictionary.PossibleFound;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
 import org.skywalking.apm.network.proto.TraceSegmentObject;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/JVMService.java
Patch:
@@ -31,7 +31,7 @@
  * @author wusheng
  */
 public class JVMService implements BootService, Runnable {
-    private static ILog logger = LogManager.getLogger(JVMService.class);
+    private static final ILog logger = LogManager.getLogger(JVMService.class);
     private ReentrantLock lock = new ReentrantLock();
     private volatile LinkedList<JVMMetric> buffer = new LinkedList<JVMMetric>();
     private SimpleDateFormat sdf = new SimpleDateFormat("ss");

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/gc/ParallelGCModule.java
Patch:
@@ -18,4 +18,5 @@ public ParallelGCModule(List<GarbageCollectorMXBean> beans) {
     @Override protected String getNewGCName() {
         return "PS Scavenge";
     }
+
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/GRPCChannelStatus.java
Patch:
@@ -4,5 +4,6 @@
  * @author wusheng
  */
 public enum GRPCChannelStatus {
-    CONNECTED
+    CONNECTED,
+    DISCONNECT
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/TraceSegmentServiceClient.java
Patch:
@@ -29,7 +29,7 @@ public class TraceSegmentServiceClient implements BootService, IConsumer<TraceSe
 
     private volatile DataCarrier<TraceSegment> carrier;
     private volatile TraceSegmentServiceGrpc.TraceSegmentServiceStub serviceStub;
-    private volatile GRPCChannelStatus status = null;
+    private volatile GRPCChannelStatus status = GRPCChannelStatus.DISCONNECT;
 
     @Override
     public void beforeBoot() throws Throwable {
@@ -124,11 +124,10 @@ public void afterFinished(TraceSegment traceSegment) {
 
     @Override
     public void statusChanged(GRPCChannelStatus status) {
+        this.status = status;
         if (CONNECTED.equals(status)) {
             ManagedChannel channel = ServiceManager.INSTANCE.findService(GRPCChannelManager.class).getManagedChannel();
             serviceStub = TraceSegmentServiceGrpc.newStub(channel);
-        } else {
-
         }
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/plugin/MockAbstractClassEnhancePluginDefine.java
Patch:
@@ -6,9 +6,10 @@
  * Created by wusheng on 2017/2/27.
  */
 public class MockAbstractClassEnhancePluginDefine extends AbstractClassEnhancePluginDefine {
+
     @Override
-    protected DynamicType.Builder<?> enhance(String enhanceOriginClassName,
-                                             DynamicType.Builder<?> newClassBuilder) throws PluginException {
+    protected DynamicType.Builder<?> enhance(String enhanceOriginClassName, DynamicType.Builder<?> newClassBuilder,
+        ClassLoader classLoader) throws PluginException {
         return newClassBuilder;
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/memorypool/ParallelCollectorModule.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * @author wusheng
  */
-public class ParallelCollectorModule extends MemoryPoolModule{
+public class ParallelCollectorModule extends MemoryPoolModule {
 
     public ParallelCollectorModule(List<MemoryPoolMXBean> beans) {
         super(beans);

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/plugin/MockAbstractClassEnhancePluginDefine.java
Patch:
@@ -6,9 +6,10 @@
  * Created by wusheng on 2017/2/27.
  */
 public class MockAbstractClassEnhancePluginDefine extends AbstractClassEnhancePluginDefine {
+
     @Override
-    protected DynamicType.Builder<?> enhance(String enhanceOriginClassName,
-                                             DynamicType.Builder<?> newClassBuilder) throws PluginException {
+    protected DynamicType.Builder<?> enhance(String enhanceOriginClassName, DynamicType.Builder<?> newClassBuilder,
+        ClassLoader classLoader) throws PluginException {
         return newClassBuilder;
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/memorypool/ParallelCollectorModule.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * @author wusheng
  */
-public class ParallelCollectorModule extends MemoryPoolModule{
+public class ParallelCollectorModule extends MemoryPoolModule {
 
     public ParallelCollectorModule(List<MemoryPoolMXBean> beans) {
         super(beans);

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/plugin/MockAbstractClassEnhancePluginDefine.java
Patch:
@@ -6,9 +6,10 @@
  * Created by wusheng on 2017/2/27.
  */
 public class MockAbstractClassEnhancePluginDefine extends AbstractClassEnhancePluginDefine {
+
     @Override
-    protected DynamicType.Builder<?> enhance(String enhanceOriginClassName,
-                                             DynamicType.Builder<?> newClassBuilder) throws PluginException {
+    protected DynamicType.Builder<?> enhance(String enhanceOriginClassName, DynamicType.Builder<?> newClassBuilder,
+        ClassLoader classLoader) throws PluginException {
         return newClassBuilder;
     }
 

File: apm-collector/apm-collector-cluster/src/main/java/org/skywalking/apm/collector/cluster/WorkerListenerMessage.java
Patch:
@@ -1,10 +1,9 @@
 package org.skywalking.apm.collector.cluster;
 
+import java.io.Serializable;
 import org.skywalking.apm.collector.actor.AbstractWorker;
 import org.skywalking.apm.collector.actor.Role;
 
-import java.io.Serializable;
-
 /**
  * <code>WorkerListenerMessage</code> is a message just for the worker
  * implementation of the {@link AbstractWorker}

File: apm-collector/apm-collector-cluster/src/main/java/org/skywalking/apm/collector/cluster/WorkersListener.java
Patch:
@@ -30,7 +30,7 @@
 public class WorkersListener extends UntypedActor {
     public static final String WORK_NAME = "WorkersListener";
 
-    private static final Logger logger = LogManager.getFormatterLogger(WorkersListener.class);
+    private final Logger logger = LogManager.getFormatterLogger(WorkersListener.class);
     private final ClusterWorkerContext clusterContext;
     private Cluster cluster = Cluster.get(getContext().system());
     private Map<ActorRef, ClusterWorkerRef> relation = new ConcurrentHashMap<>();

File: apm-collector/apm-collector-worker/src/main/java/org/skywalking/apm/collector/worker/config/GRPCConfig.java
Patch:
@@ -6,6 +6,7 @@
 public class GRPCConfig {
 
     public static class GRPC {
+        public static String HOSTNAME = "";
         public static String PORT = "";
     }
 }

File: apm-collector/apm-collector-worker/src/main/java/org/skywalking/apm/collector/worker/config/GRPCConfigProvider.java
Patch:
@@ -13,6 +13,9 @@ public class GRPCConfigProvider implements ConfigProvider {
     }
 
     @Override public void cliArgs() {
+        if (!StringUtil.isEmpty(System.getProperty("grpc.HOSTNAME"))) {
+            GRPCConfig.GRPC.HOSTNAME = System.getProperty("grpc.HOSTNAME");
+        }
         if (!StringUtil.isEmpty(System.getProperty("grpc.PORT"))) {
             GRPCConfig.GRPC.PORT = System.getProperty("grpc.PORT");
         }

File: apm-collector/apm-collector-worker/src/main/java/org/skywalking/apm/collector/worker/httpserver/AbstractGet.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.collector.worker.httpserver;
 
-import com.google.gson.JsonObject;
+import com.google.gson.JsonElement;
 import java.io.IOException;
 import java.util.Map;
 import javax.servlet.ServletException;
@@ -20,7 +20,7 @@
  * The <code>AbstractGet</code> implementations represent workers, which called by the server to allow a servlet to
  * handle a GET request.
  *
- * <p>verride the {@link #onReceive(Map, JsonObject)} method to support a search service.
+ * <p>verride the {@link #onReceive(Map, JsonElement)} method to support a search service.
  *
  * @author pengys5
  * @since v3.0-2017

File: apm-collector/apm-collector-worker/src/main/java/org/skywalking/apm/collector/worker/httpserver/AbstractStreamPost.java
Patch:
@@ -1,5 +1,6 @@
 package org.skywalking.apm.collector.worker.httpserver;
 
+import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -58,13 +59,13 @@ public AbstractStreamPost(Role role, ClusterWorkerContext clusterContext, LocalW
      * Override the default implementation, forbidden to call this method.
      *
      * @param parameter {@link Map}, get the request parameter by key.
-     * @param response {@link JsonObject}, set the response data as json object.
+     * @param response {@link JsonElement}, set the response data as json object.
      * @throws ArgumentsParseException if the key could not contains in parameter
      * @throws WorkerInvokeException if any error is detected when call(or ask) worker
      * @throws WorkerNotFoundException if the worker reference could not found in context.
      */
     @Override final protected void onReceive(Map<String, String[]> parameter,
-        JsonObject response) throws ArgumentsParseException, WorkerInvokeException, WorkerNotFoundException {
+        JsonElement response) throws ArgumentsParseException, WorkerInvokeException, WorkerNotFoundException {
         throw new WorkerInvokeException("Use the other method with buffer reader parameter");
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/memorypool/MemoryPoolProvider.java
Patch:
@@ -39,13 +39,13 @@ private MemoryPoolMetricAccessor findByBeanName(String name) {
             return new ParallelCollectorModule(beans);
         } else if (name.indexOf("CMS") > -1) {
             // CMS collector ( -XX:+UseConcMarkSweepGC )
-            return new CMSCollectorModule(beans);
+            return null;
         } else if (name.indexOf("G1") > -1) {
             // G1 collector ( -XX:+UseG1GC )
             return null;
-        } else if (name.indexOf("Survivor Space") > -1) {
+        } else if (name.equals("Survivor Space")) {
             // Serial collector ( -XX:+UseSerialGC )
-            return null;
+            return new SerialCollectorModule(beans);
         } else {
             // Unknown
             return null;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/jvm/memorypool/SerialCollectorModule.java
Patch:
@@ -6,8 +6,8 @@
 /**
  * @author wusheng
  */
-public class CMSCollectorModule extends MemoryPoolModule {
-    public CMSCollectorModule(List<MemoryPoolMXBean> beans) {
+public class SerialCollectorModule extends MemoryPoolModule {
+    public SerialCollectorModule(List<MemoryPoolMXBean> beans) {
         super(beans);
     }
 

File: apm-collector/apm-collector-worker/src/main/java/org/skywalking/apm/collector/worker/CollectorBootStartUp.java
Patch:
@@ -4,6 +4,7 @@
 import org.apache.logging.log4j.Logger;
 import org.skywalking.apm.collector.CollectorSystem;
 import org.skywalking.apm.collector.actor.ClusterWorkerContext;
+import org.skywalking.apm.collector.worker.grpcserver.GRPCServer;
 import org.skywalking.apm.collector.worker.httpserver.HttpServer;
 import org.skywalking.apm.collector.worker.storage.EsClient;
 import org.skywalking.apm.collector.worker.storage.IndexCreator;
@@ -23,5 +24,6 @@ public static void main(String[] args) throws Exception {
         IndexCreator.INSTANCE.create();
         PersistenceTimer.INSTANCE.boot();
         HttpServer.INSTANCE.boot((ClusterWorkerContext) collectorSystem.getClusterContext());
+        GRPCServer.INSTANCE.boot((ClusterWorkerContext) collectorSystem.getClusterContext());
     }
 }

File: apm-collector/apm-collector-worker/src/main/java/org/skywalking/apm/collector/worker/httpserver/HttpServer.java
Patch:
@@ -29,6 +29,5 @@ public void boot(ClusterWorkerContext clusterContext) throws Exception {
 
         server.setHandler(servletContextHandler);
         server.start();
-        server.join();
     }
 }

File: apm-network/src/test/java/org/skywalking/apm/network/trace/proto/GRPCNoServerTest.java
Patch:
@@ -8,7 +8,9 @@
 import io.grpc.netty.NettyChannelBuilder;
 import io.grpc.stub.StreamObserver;
 import org.junit.Assert;
-import org.skywalking.apm.network.collecor.proto.Downstream;
+import org.skywalking.apm.network.proto.Downstream;
+import org.skywalking.apm.network.proto.TraceSegmentServiceGrpc;
+import org.skywalking.apm.network.proto.UpstreamSegment;
 
 /**
  * @author wusheng

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassEnhancePluginDefine.java
Patch:
@@ -104,7 +104,7 @@ private DynamicType.Builder<?> enhanceInstance(String enhanceOriginClassName,
             for (ConstructorInterceptPoint constructorInterceptPoint : constructorInterceptPoints) {
                 newClassBuilder = newClassBuilder.constructor(ElementMatchers.<MethodDescription>any()).intercept(SuperMethodCall.INSTANCE
                     .andThen(MethodDelegation.withDefaultConfiguration()
-                        .to(new ConstructorInter(constructorInterceptPoint.getConstructorInterceptor()))
+                        .to(new ConstructorInter(constructorInterceptPoint.getConstructorInterceptor(), classLoader))
                     )
                 );
             }
@@ -135,7 +135,7 @@ private DynamicType.Builder<?> enhanceInstance(String enhanceOriginClassName,
                         newClassBuilder.method(not(isStatic()).and(instanceMethodsInterceptPoint.getMethodsMatcher()))
                             .intercept(
                                 MethodDelegation.withDefaultConfiguration()
-                                    .to(new InstMethodsInter(interceptor))
+                                    .to(new InstMethodsInter(interceptor, classLoader))
                             );
                 }
             }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/EnhancedInstance.java
Patch:
@@ -6,5 +6,5 @@
 public interface EnhancedInstance {
     Object getSkyWalkingDynamicField();
 
-    void setSkyWalkingDynamicField();
+    void setSkyWalkingDynamicField(Object value);
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracingContext.java
Patch:
@@ -45,7 +45,7 @@ public class TracingContext implements AbstractTracerContext {
     @Override
     public void inject(ContextCarrier carrier) {
         AbstractTracingSpan span = this.activeSpan();
-        if (span.isExit()) {
+        if (!span.isExit()) {
             throw new IllegalStateException("Inject can be done only in Exit Span");
         }
         ExitSpan exitSpan = (ExitSpan)span;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracingContext.java
Patch:
@@ -256,6 +256,7 @@ private AbstractTracingSpan pop() {
      */
     private AbstractTracingSpan push(AbstractTracingSpan span) {
         activeSpanStack.addLast(span);
+        return span;
     }
 
     /**

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/remote/GRPCChannelManager.java
Patch:
@@ -51,7 +51,7 @@ private void startupInBackground() {
     public void run() {
         while (true) {
             if (RemoteDownstreamConfig.Collector.GRPC_SERVERS.size() > 0) {
-                int index = random.nextInt() % RemoteDownstreamConfig.Collector.GRPC_SERVERS.size()
+                int index = random.nextInt() % RemoteDownstreamConfig.Collector.GRPC_SERVERS.size();
                 String server = RemoteDownstreamConfig.Collector.GRPC_SERVERS.get(index);
                 try {
                     String[] ipAndPort = server.split(":");

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/interceptor/enhance/ClassEnhancePluginDefine.java
Patch:
@@ -89,8 +89,8 @@ private DynamicType.Builder<?> enhanceInstance(String enhanceOriginClassName,
          * alter class source code.<br/>
          *
          * new class need:<br/>
-         * 1.add field, name {@link #CONTEXT_ATTR_NAME}, with an {@link Object} reference.
-         * EnhancedClassInstanceContext <br/>
+         * 1.Add field, name {@link #CONTEXT_ATTR_NAME}.
+         * 2.Add a field accessor for this field.
          *
          */
         newClassBuilder = newClassBuilder.defineField(CONTEXT_ATTR_NAME, Object.class, ACC_PRIVATE)

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/AbstractTracerContext.java
Patch:
@@ -17,6 +17,8 @@ public interface AbstractTracerContext {
 
     AbstractSpan createSpan(String operationName, SpanType spanType);
 
+    AbstractSpan createSpan(String operationName, SpanType spanType, Injectable injectable);
+
     AbstractSpan activeSpan();
 
     void stopSpan(AbstractSpan span);

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/IgnoredTracerContext.java
Patch:
@@ -17,8 +17,8 @@ public class IgnoredTracerContext implements AbstractTracerContext {
 
     private int stackDepth;
 
-    public IgnoredTracerContext(int initStackDepth) {
-        this.stackDepth = initStackDepth;
+    public IgnoredTracerContext() {
+        this.stackDepth = 0;
     }
 
     @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracingContextListener.java
Patch:
@@ -3,14 +3,14 @@
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
- * {@link TracerContextListener} is a status change listener of {@link TracerContext}.
- * Add a {@link TracerContextListener} implementation through {@link TracerContext}
+ * {@link TracingContextListener} is a status change listener of {@link TracerContext}.
+ * Add a {@link TracingContextListener} implementation through {@link TracerContext}
  * <p>
  * All this class's methods will be called concurrently. Make sure all implementations are thread-safe.
  * <p>
  * Created by wusheng on 2017/2/17.
  */
-public interface TracerContextListener {
+public interface TracingContextListener {
     /**
      * This method will be called, after the {@link TracerContext#finish()}
      *

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/AbstractSpan.java
Patch:
@@ -33,8 +33,9 @@ protected AbstractSpan(String operationName) {
         this.operationName = operationName;
     }
 
-    public void start() {
+    public AbstractSpan start() {
         this.startTime = System.currentTimeMillis();
+        return this;
     }
 
     /**

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java
Patch:
@@ -36,8 +36,9 @@ public AbstractTracingSpan tag(String key, String value) {
      *
      * @param owner of the Span.
      */
-    public void finish(TraceSegment owner) {
+    public boolean finish(TraceSegment owner) {
         this.endTime = System.currentTimeMillis();
         owner.archive(this);
+        return true;
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/dictionary/ApplicationDictionary.java
Patch:
@@ -8,7 +8,7 @@
 public enum ApplicationDictionary {
     INSTANCE;
 
-    public int findId(String applicationCode) {
+    public PossibleFound find(String applicationCode, IDictionaryCompressible compressedOwner) {
 
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/dictionary/DictionaryManager.java
Patch:
@@ -7,7 +7,7 @@ public class DictionaryManager {
     /**
      * @return {@link ApplicationDictionary} to find applicationId
      */
-    public static ApplicationDictionary getApplicationDictionary(){
+    public static ApplicationDictionary findApplicationCodeSection(){
         return ApplicationDictionary.INSTANCE;
     }
 }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/queue/TraceSegmentProcessQueue.java
Patch:
@@ -9,7 +9,7 @@
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.boot.StatusBootService;
 import org.skywalking.apm.agent.core.context.TracerContext;
-import org.skywalking.apm.agent.core.context.TracerContextListener;
+import org.skywalking.apm.agent.core.context.TracingContextListener;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
@@ -22,7 +22,7 @@
  * <p>
  * Created by wusheng on 2017/2/17.
  */
-public class TraceSegmentProcessQueue extends StatusBootService implements TracerContextListener, EventHandler<TraceSegmentHolder> {
+public class TraceSegmentProcessQueue extends StatusBootService implements TracingContextListener, EventHandler<TraceSegmentHolder> {
     private static final ILog logger = LogManager.getLogger(TraceSegmentProcessQueue.class);
 
     private Disruptor<TraceSegmentHolder> disruptor;

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/ContextManagerTestCase.java
Patch:
@@ -27,10 +27,10 @@ public void testDelegateToTracerContext() {
 
         Assert.assertEquals(span, ContextManager.activeSpan());
 
-        TracerContext.ListenerManager.add(TestTracerContextListener.INSTANCE);
+        TracerContext.ListenerManager.add(TestTracingContextListener.INSTANCE);
         ContextManager.stopSpan();
 
-        TraceSegment segment = TestTracerContextListener.INSTANCE.finishedSegmentCarrier[0];
+        TraceSegment segment = TestTracingContextListener.INSTANCE.finishedSegmentCarrier[0];
 
         Assert.assertEquals(span, segment.getSpans().get(0));
     }
@@ -66,6 +66,6 @@ public void testSwitchToIgnoredTracerContext() throws NoSuchFieldException, Ille
 
     @After
     public void reset() {
-        TracerContext.ListenerManager.remove(TestTracerContextListener.INSTANCE);
+        TracerContext.ListenerManager.remove(TestTracingContextListener.INSTANCE);
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/TestTracingContextListener.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Created by wusheng on 2017/2/19.
  */
-public enum TestTracerContextListener implements TracerContextListener {
+public enum TestTracingContextListener implements TracingContextListener {
     INSTANCE;
     final TraceSegment[] finishedSegmentCarrier = {null};
 

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/sampling/SamplingTracerContextTestCase.java
Patch:
@@ -8,7 +8,7 @@
 import org.skywalking.apm.agent.core.conf.Config;
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.agent.core.context.TracerContext;
-import org.skywalking.apm.agent.core.context.TracerContextListener;
+import org.skywalking.apm.agent.core.context.TracingContextListener;
 import org.skywalking.apm.agent.core.context.tag.Tags;
 import org.skywalking.apm.agent.core.context.trace.AbstractSpan;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
@@ -19,7 +19,7 @@
 public class SamplingTracerContextTestCase {
     private int finishedTracerCounter = 0;
 
-    private TracerContextListener listener = new TracerContextListener() {
+    private TracingContextListener listener = new TracingContextListener() {
         @Override
         public void afterFinished(TraceSegment traceSegment) {
             if (!traceSegment.isIgnore()) {

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/test/java/org/skywalking/apm/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
 import org.skywalking.apm.plugin.dubbox.BugFixActive;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.SpanLogReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
@@ -42,7 +42,7 @@
 @PrepareForTest({RpcContext.class, BugFixActive.class})
 public class DubboInterceptorTest {
 
-    private MockTracerContextListener mockTracerContextListener;
+    private MockTracingContextListener mockTracerContextListener;
     private DubboInterceptor dubboInterceptor;
     private RequestParamForTestBelow283 testParam;
     @Mock
@@ -66,7 +66,7 @@ public void setUp() throws Exception {
 
         dubboInterceptor = new DubboInterceptor();
         testParam = new RequestParamForTestBelow283();
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
         TracerContext.ListenerManager.add(mockTracerContextListener);
 
         mockStatic(RpcContext.class);

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/test/java/org/skywalking/apm/plugin/feign/http/v9/DefaultHttpClientInterceptorTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.EnhancedClassInstanceContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.SpanLogReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.BooleanTagReader;
@@ -36,7 +36,7 @@
 public class DefaultHttpClientInterceptorTest {
 
     private DefaultHttpClientInterceptor defaultHttpClientInterceptor;
-    private MockTracerContextListener mockTracerContextListener;
+    private MockTracingContextListener mockTracerContextListener;
 
     private EnhancedClassInstanceContext classInstanceContext;
 
@@ -47,7 +47,7 @@ public class DefaultHttpClientInterceptorTest {
 
     @Before
     public void setUp() throws Exception {
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
 
         classInstanceContext = new EnhancedClassInstanceContext();
 

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/test/java/org/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptorTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.EnhancedClassInstanceContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.tags.BooleanTagReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
@@ -33,7 +33,7 @@
 public class HttpClientExecuteInterceptorTest {
 
     private HttpClientExecuteInterceptor httpClientExecuteInterceptor;
-    private MockTracerContextListener mockTracerContextListener;
+    private MockTracingContextListener mockTracerContextListener;
     @Mock
     private EnhancedClassInstanceContext classInstanceContext;
     @Mock
@@ -49,7 +49,7 @@ public class HttpClientExecuteInterceptorTest {
 
     @Before
     public void setUp() throws Exception {
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
 
         ServiceManager.INSTANCE.boot();
         httpClientExecuteInterceptor = new HttpClientExecuteInterceptor();

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/AbstractStatementTest.java
Patch:
@@ -3,7 +3,7 @@
 import java.lang.reflect.Field;
 import java.util.List;
 import org.hamcrest.CoreMatchers;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
 import org.skywalking.apm.agent.core.context.tag.Tags;
 
@@ -15,7 +15,7 @@
 
 public abstract class AbstractStatementTest {
 
-    protected MockTracerContextListener mockTracerContextListener;
+    protected MockTracingContextListener mockTracerContextListener;
 
     protected void assertDBSpanLog(LogData logData) {
         assertThat(logData.getFields().size(), is(4));

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/SWCallableStatementTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockito.runners.MockitoJUnitRunner;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.context.TracerContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
@@ -70,7 +70,7 @@ public class SWCallableStatementTest extends AbstractStatementTest {
 
     @Before
     public void setUp() throws Exception {
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
         ServiceManager.INSTANCE.boot();
         swConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306/test", new Properties(), jdbcConnection);
         multiHostConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306,127.0.0.1:3309/test", new Properties(), jdbcConnection);

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/SWConnectionTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.runners.MockitoJUnitRunner;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.context.TracerContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
@@ -44,7 +44,7 @@ public class SWConnectionTest extends AbstractStatementTest {
     @Before
     public void setUp() throws Exception {
         ServiceManager.INSTANCE.boot();
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
         swConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306/test", new Properties(), jdbcConnection);
         multiHostConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306,127.0.0.1:3309/test", new Properties(), jdbcConnection);
 

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/SWStatementTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.runners.MockitoJUnitRunner;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.context.TracerContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
@@ -40,7 +40,7 @@ public class SWStatementTest extends AbstractStatementTest {
 
     @Before
     public void setUp() throws Exception {
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
 
         ServiceManager.INSTANCE.boot();
         swConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306/test", new Properties(), jdbcConnection);

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/SwPreparedStatementTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.runners.MockitoJUnitRunner;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.context.TracerContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
@@ -71,7 +71,7 @@ public class SwPreparedStatementTest extends AbstractStatementTest {
 
     @Before
     public void setUp() throws Exception {
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
 
         ServiceManager.INSTANCE.boot();
         swConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306/test", new Properties(), jdbcConnection);

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/test/java/org/skywalking/apm/plugin/jedis/v2/JedisMethodInterceptorTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.EnhancedClassInstanceContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
@@ -30,7 +30,7 @@ public class JedisMethodInterceptorTest {
 
     private JedisMethodInterceptor interceptor;
 
-    private MockTracerContextListener mockTracerContextListener;
+    private MockTracingContextListener mockTracerContextListener;
 
     @Mock
     private EnhancedClassInstanceContext classInstanceContext;
@@ -42,7 +42,7 @@ public void setUp() throws Exception {
         ServiceManager.INSTANCE.boot();
 
         interceptor = new JedisMethodInterceptor();
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
 
         TracerContext.ListenerManager.add(mockTracerContextListener);
 

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/test/java/org/skywalking/apm/plugin/mongodb/v3/MongoDBMethodInterceptorTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.EnhancedClassInstanceContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.SpanLogReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
@@ -34,7 +34,7 @@
 public class MongoDBMethodInterceptorTest {
 
     private MongoDBMethodInterceptor interceptor;
-    private MockTracerContextListener mockTracerContextListener;
+    private MockTracingContextListener mockTracerContextListener;
 
     @Mock
     private EnhancedClassInstanceContext classInstanceContext;
@@ -47,7 +47,7 @@ public void setUp() throws Exception {
         ServiceManager.INSTANCE.boot();
 
         interceptor = new MongoDBMethodInterceptor();
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
 
         TracerContext.ListenerManager.add(mockTracerContextListener);
 

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/test/java/org/skywalking/apm/plugin/mongodb/v3/MongoDBWriteMethodInterceptorTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.EnhancedClassInstanceContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.SpanLogReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
@@ -38,7 +38,7 @@
 public class MongoDBWriteMethodInterceptorTest {
 
     private MongoDBMethodInterceptor interceptor;
-    private MockTracerContextListener mockTracerContextListener;
+    private MockTracingContextListener mockTracerContextListener;
 
     @Mock
     private EnhancedClassInstanceContext classInstanceContext;
@@ -50,7 +50,7 @@ public void setUp() throws Exception {
         ServiceManager.INSTANCE.boot();
 
         interceptor = new MongoDBMethodInterceptor();
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
 
         TracerContext.ListenerManager.add(mockTracerContextListener);
 

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/test/java/org/skywalking/apm/plugin/motan/MotanConsumerInterceptorTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.EnhancedClassInstanceContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.SpanLogReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
@@ -30,7 +30,7 @@
 @RunWith(MockitoJUnitRunner.class)
 public class MotanConsumerInterceptorTest {
 
-    private MockTracerContextListener contextListener;
+    private MockTracingContextListener contextListener;
 
     private MotanConsumerInterceptor invokeInterceptor;
     @Mock
@@ -48,7 +48,7 @@ public class MotanConsumerInterceptorTest {
     public void setUp() {
         ServiceManager.INSTANCE.boot();
 
-        contextListener = new MockTracerContextListener();
+        contextListener = new MockTracingContextListener();
         invokeInterceptor = new MotanConsumerInterceptor();
         url = URL.valueOf("motan://127.0.0.1:34000/org.skywalking.apm.test.TestService");
 

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/test/java/org/skywalking/apm/plugin/motan/MotanProviderInterceptorTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.EnhancedClassInstanceContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.ConstructorInvokeContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.SpanLogReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
@@ -34,7 +34,7 @@
 @RunWith(MockitoJUnitRunner.class)
 public class MotanProviderInterceptorTest {
 
-    private MockTracerContextListener contextListener;
+    private MockTracingContextListener contextListener;
 
     private MotanProviderInterceptor invokeInterceptor;
     @Mock
@@ -55,7 +55,7 @@ public void setUp() {
         ServiceManager.INSTANCE.boot();
 
         invokeInterceptor = new MotanProviderInterceptor();
-        contextListener = new MockTracerContextListener();
+        contextListener = new MockTracingContextListener();
         url = URL.valueOf("motan://127.0.0.1:34000/org.skywalking.apm.test.TestService");
 
         TracerContext.ListenerManager.add(contextListener);

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/test/java/org/skywalking/apm/plugin/okhttp/v3/RealCallInterceptorTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.EnhancedClassInstanceContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.ConstructorInvokeContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.SpanLogReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.BooleanTagReader;
@@ -34,7 +34,7 @@
 public class RealCallInterceptorTest {
 
     private RealCallInterceptor realCallInterceptor;
-    private MockTracerContextListener mockTracerContextListener;
+    private MockTracingContextListener mockTracerContextListener;
 
     private EnhancedClassInstanceContext classInstanceContext;
 
@@ -51,7 +51,7 @@ public class RealCallInterceptorTest {
 
     @Before
     public void setUp() throws Exception {
-        mockTracerContextListener = new MockTracerContextListener();
+        mockTracerContextListener = new MockTracingContextListener();
 
         classInstanceContext = new EnhancedClassInstanceContext();
 

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/context/MockTracingContextListener.java
Patch:
@@ -2,20 +2,20 @@
 
 import org.junit.Assert;
 import org.skywalking.apm.agent.core.context.TracerContext;
-import org.skywalking.apm.agent.core.context.TracerContextListener;
+import org.skywalking.apm.agent.core.context.TracingContextListener;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
 /**
- * This is mock tracer context listener, which should be added by calling {@link TracerContext.ListenerManager#add(TracerContextListener)}.
+ * This is mock tracer context listener, which should be added by calling {@link TracerContext.ListenerManager#add(TracingContextListener)}.
  * This mock listener will hold all finished trace, which all are generated by {@link TracerContext#finish()}.
  * <p>
  * Created by wusheng on 2017/2/20.
  */
-public class MockTracerContextListener implements TracerContextListener {
+public class MockTracingContextListener implements TracingContextListener {
     private List<TraceSegment> finishedTraceSegments = Collections.synchronizedList(new ArrayList<TraceSegment>());
 
     @Override

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/TraceSegmentBuilder.java
Patch:
@@ -1,11 +1,11 @@
 package org.skywalking.apm.sniffer.mock.trace;
 
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * Created by wusheng on 2017/2/20.
  */
 public interface TraceSegmentBuilder {
-    TraceSegment build(MockTracerContextListener listener);
+    TraceSegment build(MockTracingContextListener listener);
 }

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/TraceSegmentBuilderFactory.java
Patch:
@@ -1,7 +1,7 @@
 package org.skywalking.apm.sniffer.mock.trace;
 
 import org.skywalking.apm.agent.core.context.TracerContext;
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.trace.builders.trace.*;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
@@ -51,7 +51,7 @@ public TraceSegment traceOf_DubboServer_MySQL() {
     }
 
     private TraceSegment build(TraceSegmentBuilder builder) {
-        MockTracerContextListener listener = new MockTracerContextListener();
+        MockTracingContextListener listener = new MockTracingContextListener();
         try {
             TracerContext.ListenerManager.add(listener);
             return builder.build(listener);

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/DubboServerMysqlTraceBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.sniffer.mock.trace.builders.trace;
 
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.DubboSpanGenerator;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.MySQLGenerator;
@@ -13,7 +13,7 @@ public enum DubboServerMysqlTraceBuilder implements TraceSegmentBuilder {
     INSTANCE;
 
     @Override
-    public TraceSegment build(MockTracerContextListener listener) {
+    public TraceSegment build(MockTracingContextListener listener) {
         DubboSpanGenerator.Server rootSpan = new DubboSpanGenerator.Server();
         rootSpan.build(new MySQLGenerator.Query());
         rootSpan.generate();

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/SingleTomcat200TraceBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.sniffer.mock.trace.builders.trace;
 
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.TomcatSpanGenerator;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
@@ -14,7 +14,7 @@ public enum SingleTomcat200TraceBuilder implements TraceSegmentBuilder {
     INSTANCE;
 
     @Override
-    public TraceSegment build(MockTracerContextListener listener) {
+    public TraceSegment build(MockTracingContextListener listener) {
         TomcatSpanGenerator.ON200.INSTANCE.generate();
         return listener.getFinished(0);
     }

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/SingleTomcat404TraceBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.sniffer.mock.trace.builders.trace;
 
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.TomcatSpanGenerator;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
@@ -14,7 +14,7 @@ public enum SingleTomcat404TraceBuilder implements TraceSegmentBuilder {
     INSTANCE;
 
     @Override
-    public TraceSegment build(MockTracerContextListener listener) {
+    public TraceSegment build(MockTracingContextListener listener) {
         TomcatSpanGenerator.ON404.INSTANCE.generate();
         return listener.getFinished(0);
     }

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/SingleTomcat500TraceBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.sniffer.mock.trace.builders.trace;
 
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.TomcatSpanGenerator;
 import org.skywalking.apm.agent.core.context.trace.TraceSegment;
@@ -14,7 +14,7 @@ public enum SingleTomcat500TraceBuilder implements TraceSegmentBuilder {
     INSTANCE;
 
     @Override
-    public TraceSegment build(MockTracerContextListener listener) {
+    public TraceSegment build(MockTracingContextListener listener) {
         TomcatSpanGenerator.ON500.INSTANCE.generate();
         return listener.getFinished(0);
     }

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/TomcatDubboClientTraceBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.sniffer.mock.trace.builders.trace;
 
-import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
+import org.skywalking.apm.sniffer.mock.context.MockTracingContextListener;
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.DubboSpanGenerator;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.TomcatSpanGenerator;
@@ -17,7 +17,7 @@ public enum TomcatDubboClientTraceBuilder implements TraceSegmentBuilder {
     INSTANCE;
 
     @Override
-    public TraceSegment build(MockTracerContextListener listener) {
+    public TraceSegment build(MockTracingContextListener listener) {
         TomcatSpanGenerator.ON200 rootSpan = new TomcatSpanGenerator.ON200();
         rootSpan.build(new DubboSpanGenerator.Client());
         rootSpan.generate();

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/Span.java
Patch:
@@ -383,7 +383,7 @@ public void writeTags(JsonWriter out, Span span) throws IOException {
                 }
             }
             if (span.tagsWithInt != null) {
-                if (tagWithInt != null) {
+                if (tagWithInt == null) {
                     tagWithInt = new JsonObject();
                 }
                 for (IntTagItem item : span.tagsWithInt) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/Span.java
Patch:
@@ -383,7 +383,7 @@ public void writeTags(JsonWriter out, Span span) throws IOException {
                 }
             }
             if (span.tagsWithInt != null) {
-                if (tagWithInt != null) {
+                if (tagWithInt == null) {
                     tagWithInt = new JsonObject();
                 }
                 for (IntTagItem item : span.tagsWithInt) {

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/Span.java
Patch:
@@ -383,7 +383,7 @@ public void writeTags(JsonWriter out, Span span) throws IOException {
                 }
             }
             if (span.tagsWithInt != null) {
-                if (tagWithInt != null) {
+                if (tagWithInt == null) {
                     tagWithInt = new JsonObject();
                 }
                 for (IntTagItem item : span.tagsWithInt) {

File: apm-collector/apm-collector-worker/src/main/java/org/skywalking/apm/collector/worker/segment/analysis/SegmentCostAnalysis.java
Patch:
@@ -49,6 +49,9 @@ public void analyse(Object message) {
                         dataJsonObj.addProperty(SegmentCostIndex.SEG_ID, segment.getTraceSegmentId());
                         dataJsonObj.addProperty(SegmentCostIndex.START_TIME, span.getStartTime());
                         dataJsonObj.addProperty(SegmentCostIndex.END_TIME, span.getEndTime());
+                        if (segment.getRelatedGlobalTraces().get() != null && segment.getRelatedGlobalTraces().get().size() > 0) {
+                            dataJsonObj.addProperty(SegmentCostIndex.GLOBAL_TRACE_ID, segment.getRelatedGlobalTraces().get().get(0));
+                        }
                         dataJsonObj.addProperty(SegmentCostIndex.OPERATION_NAME, span.getOperationName());
                         dataJsonObj.addProperty(SegmentCostIndex.TIME_SLICE, segmentWithTimeSlice.getMinute());
 

File: apm-collector/apm-collector-worker/src/test/java/org/skywalking/apm/collector/worker/segment/SegmentCostIndexTestCase.java
Patch:
@@ -21,7 +21,7 @@ public void test() {
     @Test
     public void testBuilder() throws IOException {
         SegmentCostIndex index = new SegmentCostIndex();
-        Assert.assertEquals("{\"properties\":{\"segId\":{\"type\":\"keyword\"},\"startTime\":{\"type\":\"long\",\"index\":\"not_analyzed\"},\"END_TIME\":{\"type\":\"long\",\"index\":\"not_analyzed\"},\"operationName\":{\"type\":\"keyword\"},\"cost\":{\"type\":\"long\",\"index\":\"not_analyzed\"}}}", index.createMappingBuilder().string());
+        Assert.assertEquals("{\"properties\":{\"segId\":{\"type\":\"keyword\"},\"startTime\":{\"type\":\"long\",\"index\":\"not_analyzed\"},\"endTime\":{\"type\":\"long\",\"index\":\"not_analyzed\"},\"globalTraceId\":{\"type\":\"keyword\"},\"operationName\":{\"type\":\"text\"},\"cost\":{\"type\":\"long\",\"index\":\"not_analyzed\"}}}", index.createMappingBuilder().string());
     }
 
     @Test

File: apm-collector/apm-collector-worker/src/test/java/org/skywalking/apm/collector/worker/segment/SegmentTopGetWithTimeSliceTestCase.java
Patch:
@@ -68,7 +68,7 @@ public void testFactory() {
         SegmentTopGetWithTimeSlice.Factory factory = new SegmentTopGetWithTimeSlice.Factory();
         Assert.assertEquals(SegmentTopGetWithTimeSlice.class.getSimpleName(), factory.role().roleName());
         Assert.assertEquals(SegmentTopGetWithTimeSlice.class.getSimpleName(), factory.workerInstance(null).getClass().getSimpleName());
-        Assert.assertEquals("/segments/top/timeSlice", factory.servletPath());
+        Assert.assertEquals("/segments/top", factory.servletPath());
     }
 
     @Test

File: apm-collector/apm-collector-worker/src/main/java/org/skywalking/apm/collector/worker/segment/analysis/SegmentCostAnalysis.java
Patch:
@@ -49,6 +49,9 @@ public void analyse(Object message) {
                         dataJsonObj.addProperty(SegmentCostIndex.SEG_ID, segment.getTraceSegmentId());
                         dataJsonObj.addProperty(SegmentCostIndex.START_TIME, span.getStartTime());
                         dataJsonObj.addProperty(SegmentCostIndex.END_TIME, span.getEndTime());
+                        if (segment.getRelatedGlobalTraces().get() != null && segment.getRelatedGlobalTraces().get().size() > 0) {
+                            dataJsonObj.addProperty(SegmentCostIndex.GLOBAL_TRACE_ID, segment.getRelatedGlobalTraces().get().get(0));
+                        }
                         dataJsonObj.addProperty(SegmentCostIndex.OPERATION_NAME, span.getOperationName());
                         dataJsonObj.addProperty(SegmentCostIndex.TIME_SLICE, segmentWithTimeSlice.getMinute());
 

File: apm-application-toolkit/apm-toolkit-log4j-1.x/src/main/java/org/skywalking/apm/toolkit/log/log4j/v1/x/TraceIdPatternConverter.java
Patch:
@@ -5,7 +5,7 @@
 
 /**
  * Default implementation outputs "TID: N/A".
- * But, if in sky-walking agent active mode, output will become the real TraceId.
+ * But, if in sky-walking agent active mode, output will become the real ids.
  * <p>
  * Created by wusheng on 2016/12/7.
  */

File: apm-collector/apm-collector-worker/src/test/java/org/skywalking/apm/collector/worker/span/persistence/SpanSearchWithIdTestCase.java
Patch:
@@ -18,8 +18,8 @@
 import org.skywalking.apm.collector.worker.segment.SegmentIndex;
 import org.skywalking.apm.collector.worker.segment.mock.SegmentMock;
 import org.skywalking.apm.collector.worker.storage.GetResponseFromEs;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 import java.util.TimeZone;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/client/CollectorClient.java
Patch:
@@ -10,11 +10,11 @@
 import org.apache.http.impl.client.HttpClients;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
 import org.skywalking.apm.agent.core.conf.Config;
+import org.skywalking.apm.agent.core.context.trace.SegmentsMessage;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.skywalking.apm.agent.core.queue.TraceSegmentProcessQueue;
 import org.skywalking.apm.logging.ILog;
 import org.skywalking.apm.logging.LogManager;
-import org.skywalking.apm.trace.SegmentsMessage;
-import org.skywalking.apm.trace.TraceSegment;
 
 import java.io.IOException;
 import java.util.List;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/client/CollectorClientService.java
Patch:
@@ -1,8 +1,8 @@
 package org.skywalking.apm.agent.core.client;
 
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 import org.skywalking.apm.agent.core.queue.TraceSegmentProcessQueue;
 import org.skywalking.apm.agent.core.boot.StatusBootService;
-import org.skywalking.apm.trace.TraceSegment;
 
 /**
  * The <code>CollectorClientService</code> is responsible for start {@link CollectorClient}.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracerContextListener.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.agent.core.context;
 
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * {@link TracerContextListener} is a status change listener of {@link TracerContext}.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/DistributedTraceId.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.trace.TraceId;
+package org.skywalking.apm.agent.core.context.ids;
 
 /**
  * The <code>DistributedTraceId</code> presents a distributed call chain.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/DistributedTraceIds.java
Patch:
@@ -1,10 +1,9 @@
-package org.skywalking.apm.trace.TraceId;
+package org.skywalking.apm.agent.core.context.ids;
 
 import com.google.gson.TypeAdapter;
 import com.google.gson.annotations.JsonAdapter;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
-
 import java.io.IOException;
 import java.util.Collections;
 import java.util.LinkedList;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/GlobalIdGenerator.java
Patch:
@@ -1,10 +1,9 @@
-package org.skywalking.apm.trace;
+package org.skywalking.apm.agent.core.context.ids;
 
+import java.util.UUID;
 import org.skywalking.apm.util.MachineInfo;
 import org.skywalking.apm.util.StringUtil;
 
-import java.util.UUID;
-
 public final class GlobalIdGenerator {
     private static final ThreadLocal<Integer> THREAD_ID_SEQUENCE = new ThreadLocal<Integer>() {
         @Override

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/NewDistributedTraceId.java
Patch:
@@ -1,6 +1,4 @@
-package org.skywalking.apm.trace.TraceId;
-
-import org.skywalking.apm.trace.GlobalIdGenerator;
+package org.skywalking.apm.agent.core.context.ids;
 
 /**
  * The <code>NewDistributedTraceId</code> is a {@link DistributedTraceId} with a new generated id.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/ids/PropagatedTraceId.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.trace.TraceId;
+package org.skywalking.apm.agent.core.context.ids;
 
 /**
  * The <code>PropagatedTraceId</code> represents a {@link DistributedTraceId}, which is propagated from the peer.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/tag/AbstractTag.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.trace.tag;
+package org.skywalking.apm.agent.core.context.tag;
 
-import org.skywalking.apm.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.Span;
 
 /**
  * This is the abstract tag.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/tag/BooleanTag.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.trace.tag;
+package org.skywalking.apm.agent.core.context.tag;
 
-import org.skywalking.apm.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.Span;
 
 /**
  * Do the same thing as {@link StringTag}, just with a {@link Boolean} value.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/tag/BooleanTagItem.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.trace.tag;
+package org.skywalking.apm.agent.core.context.tag;
 
 /**
  * The tag item with String key and Boolean value.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/tag/IntTag.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.trace.tag;
+package org.skywalking.apm.agent.core.context.tag;
 
-import org.skywalking.apm.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.Span;
 
 /**
  * Do the same thing as {@link StringTag}, just with a {@link Integer} value.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/tag/IntTagItem.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.trace.tag;
+package org.skywalking.apm.agent.core.context.tag;
 
 /**
  * The tag item with String key and Int value.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/tag/StringTag.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.trace.tag;
+package org.skywalking.apm.agent.core.context.tag;
 
-import org.skywalking.apm.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.Span;
 
 /**
  * A subclass of {@link AbstractTag},

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/tag/StringTagItem.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.trace.tag;
+package org.skywalking.apm.agent.core.context.tag;
 
 /**
  * The tag item with String key and String value.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/tag/Tags.java
Patch:
@@ -1,6 +1,6 @@
-package org.skywalking.apm.trace.tag;
+package org.skywalking.apm.agent.core.context.tag;
 
-import org.skywalking.apm.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.Span;
 
 /**
  * The span tags are supported by sky-walking engine.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/LogData.java
Patch:
@@ -1,8 +1,7 @@
-package org.skywalking.apm.trace;
+package org.skywalking.apm.agent.core.context.trace;
 
 import com.google.gson.annotations.Expose;
 import com.google.gson.annotations.SerializedName;
-
 import java.util.Collections;
 import java.util.Map;
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/SegmentsMessage.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.trace;
+package org.skywalking.apm.agent.core.context.trace;
 
 import com.google.gson.Gson;
 import java.util.Collections;

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/TraceSegmentRef.java
Patch:
@@ -1,8 +1,8 @@
-package org.skywalking.apm.trace;
+package org.skywalking.apm.agent.core.context.trace;
 
 import com.google.gson.annotations.Expose;
 import com.google.gson.annotations.SerializedName;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 /**
  * {@link TraceSegmentRef} is like a pointer, which ref to another {@link TraceSegment},

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/util/ThrowableTransformer.java
Patch:
@@ -1,4 +1,4 @@
-package org.skywalking.apm.trace.util;
+package org.skywalking.apm.agent.core.context.util;
 
 /**
  * {@link ThrowableTransformer} is responsible for transferring stack trace of throwable.

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/queue/TraceSegmentHolder.java
Patch:
@@ -1,7 +1,7 @@
 package org.skywalking.apm.agent.core.queue;
 
 import com.lmax.disruptor.EventFactory;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * Just a holder of {@link TraceSegment} instance.

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/ContextManagerTestCase.java
Patch:
@@ -5,9 +5,9 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.skywalking.apm.agent.core.boot.ServiceManager;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.TraceSegment;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 /**
  * Created by wusheng on 2017/2/19.

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/TestTracerContextListener.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.agent.core.context;
 
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * Created by wusheng on 2017/2/19.

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/trace/TraceSegmentTestCase.java
Patch:
@@ -1,12 +1,12 @@
-package org.skywalking.apm.trace;
+package org.skywalking.apm.agent.core.context.trace;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonObject;
 import org.junit.Assert;
 import org.junit.Test;
-import org.skywalking.apm.trace.tag.StringTagReader;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.tag.Tags;
+import org.skywalking.apm.agent.core.tags.StringTagReader;
 
 /**
  * Created by wusheng on 2017/2/18.

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/tags/BooleanTagReader.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.lang.reflect.Field;
 import java.util.List;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.BooleanTag;
-import org.skywalking.apm.trace.tag.BooleanTagItem;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.BooleanTag;
+import org.skywalking.apm.agent.core.context.tag.BooleanTagItem;
 
 /**
  * @author wusheng

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/tags/IntTagReader.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.lang.reflect.Field;
 import java.util.List;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.IntTag;
-import org.skywalking.apm.trace.tag.IntTagItem;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.IntTag;
+import org.skywalking.apm.agent.core.context.tag.IntTagItem;
 
 /**
  * @author wusheng

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/tags/StringTagReader.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.lang.reflect.Field;
 import java.util.List;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.StringTag;
-import org.skywalking.apm.trace.tag.StringTagItem;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.StringTag;
+import org.skywalking.apm.agent.core.context.tag.StringTagItem;
 
 /**
  * @author wusheng

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/main/java/org/skywalking/apm/plugin/feign/http/v9/DefaultHttpClientInterceptor.java
Patch:
@@ -18,8 +18,8 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 /**
  * {@link DefaultHttpClientInterceptor} intercept the default implementation of http calls by the Feign.
@@ -68,7 +68,7 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
 
         headersField.setAccessible(true);
         Map<String, Collection<String>> headers = new LinkedHashMap<String, Collection<String>>();
-        headers.put(Config.Plugin.Http.HEADER_NAME_OF_CONTEXT_DATA, contextCollection);
+        headers.put(Config.Plugin.Propagation.HEADER_NAME, contextCollection);
         headers.putAll(request.headers());
 
         headersField.set(request, Collections.unmodifiableMap(headers));

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/test/java/org/skywalking/apm/plugin/feign/http/v9/DefaultHttpClientInterceptorTest.java
Patch:
@@ -22,9 +22,9 @@
 import org.skywalking.apm.sniffer.mock.trace.SpanLogReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.BooleanTagReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.TraceSegment;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.util.StringUtil;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 import java.sql.SQLException;
 

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.util.StringUtil;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 import java.sql.SQLException;
 

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.util.StringUtil;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 import java.sql.SQLException;
 

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/StatementTracing.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.skywalking.apm.agent.core.context.ContextManager;
 import org.skywalking.apm.util.StringUtil;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 import java.sql.SQLException;
 

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/AbstractStatementTest.java
Patch:
@@ -5,9 +5,9 @@
 import org.hamcrest.CoreMatchers;
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
-import org.skywalking.apm.trace.LogData;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.LogData;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 import java.sql.SQLException;
 

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/SWCallableStatementTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
-import org.skywalking.apm.trace.LogData;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.LogData;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 import java.io.InputStream;
 import java.io.Reader;

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/SWConnectionTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 import java.sql.PreparedStatement;
 import java.sql.SQLException;

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/SWStatementTest.java
Patch:
@@ -13,9 +13,9 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
-import org.skywalking.apm.trace.LogData;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.LogData;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 import java.net.MalformedURLException;
 import java.sql.Connection;

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/test/java/org/skywalking/apm/plugin/jdbc/SwPreparedStatementTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
-import org.skywalking.apm.trace.LogData;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.LogData;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 import java.io.InputStream;
 import java.io.Reader;

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/skywalking/apm/plugin/jedis/v2/JedisMethodInterceptor.java
Patch:
@@ -6,8 +6,8 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 import org.skywalking.apm.util.StringUtil;
 
 /**

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v3/MongoDBMethodInterceptor.java
Patch:
@@ -13,8 +13,8 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 import java.util.List;
 

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java
Patch:
@@ -15,8 +15,8 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodInvokeContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 /**
  * {@link RealCallInterceptor} intercept the synchronous http calls by the client of okhttp.
@@ -75,7 +75,7 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         modifiersField.setInt(headersField, headersField.getModifiers() & ~Modifier.FINAL);
 
         headersField.setAccessible(true);
-        Headers headers = request.headers().newBuilder().add(Config.Plugin.Http.HEADER_NAME_OF_CONTEXT_DATA, contextCarrier.serialize()).build();
+        Headers headers = request.headers().newBuilder().add(Config.Plugin.Propagation.HEADER_NAME, contextCarrier.serialize()).build();
         headersField.set(request, headers);
     }
 

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/test/java/org/skywalking/apm/plugin/okhttp/v3/RealCallInterceptorTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.skywalking.apm.sniffer.mock.trace.SpanLogReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.BooleanTagReader;
 import org.skywalking.apm.sniffer.mock.trace.tags.StringTagReader;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.TraceSegment;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/context/MockTracerContextListener.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.Assert;
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.agent.core.context.TracerContextListener;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/context/SegmentAssert.java
Patch:
@@ -1,6 +1,6 @@
 package org.skywalking.apm.sniffer.mock.context;
 
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * The <code>SegmentAssert</code> interface should be implemented by any

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/SpanLogReader.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.lang.reflect.Field;
 import java.util.List;
-import org.skywalking.apm.trace.LogData;
-import org.skywalking.apm.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.LogData;
+import org.skywalking.apm.agent.core.context.trace.Span;
 
 /**
  * @author wusheng

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/TraceSegmentBuilder.java
Patch:
@@ -1,7 +1,7 @@
 package org.skywalking.apm.sniffer.mock.trace;
 
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * Created by wusheng on 2017/2/20.

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/TraceSegmentBuilderFactory.java
Patch:
@@ -3,7 +3,7 @@
 import org.skywalking.apm.agent.core.context.TracerContext;
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.trace.builders.trace.*;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * The <code>TraceSegmentBuilderFactory</code> contains all {@link TraceSegmentBuilder} implementations. All the

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/span/DubboSpanGenerator.java
Patch:
@@ -1,8 +1,8 @@
 package org.skywalking.apm.sniffer.mock.trace.builders.span;
 
 import org.skywalking.apm.agent.core.context.ContextManager;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 /**
  * The <code>DubboSpanGenerator</code> generates all possible spans, by tracing Dubbo rpc.

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/span/MySQLGenerator.java
Patch:
@@ -1,8 +1,8 @@
 package org.skywalking.apm.sniffer.mock.trace.builders.span;
 
 import org.skywalking.apm.agent.core.context.ContextManager;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 /**
  * The <code>MySQLGenerator</code> generates all possible spans, by tracing mysql client access.

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/span/TomcatSpanGenerator.java
Patch:
@@ -1,8 +1,8 @@
 package org.skywalking.apm.sniffer.mock.trace.builders.span;
 
 import org.skywalking.apm.agent.core.context.ContextManager;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.Tags;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.Tags;
 
 /**
  * The <code>TomcatSpanGenerator</code> generate all possible spans, by tracing Tomcat.

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/DubboServerMysqlTraceBuilder.java
Patch:
@@ -4,7 +4,7 @@
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.DubboSpanGenerator;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.MySQLGenerator;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * @author wusheng

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/SingleTomcat200TraceBuilder.java
Patch:
@@ -3,7 +3,7 @@
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.TomcatSpanGenerator;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * A Trace contains only one span, which represent a tomcat server side span.

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/SingleTomcat404TraceBuilder.java
Patch:
@@ -3,7 +3,7 @@
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.TomcatSpanGenerator;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * A Trace contains only one span, which represent a tomcat server side span.

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/SingleTomcat500TraceBuilder.java
Patch:
@@ -3,7 +3,7 @@
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.TomcatSpanGenerator;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * A Trace contains only one span, which represent a tomcat server side span.

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/trace/TomcatDubboClientTraceBuilder.java
Patch:
@@ -4,7 +4,7 @@
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilder;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.DubboSpanGenerator;
 import org.skywalking.apm.sniffer.mock.trace.builders.span.TomcatSpanGenerator;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * A Trace segment contains two spans with ChildOf relations,

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/tags/BooleanTagReader.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.lang.reflect.Field;
 import java.util.List;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.BooleanTag;
-import org.skywalking.apm.trace.tag.BooleanTagItem;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.BooleanTag;
+import org.skywalking.apm.agent.core.context.tag.BooleanTagItem;
 
 /**
  * @author wusheng

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/tags/IntTagReader.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.lang.reflect.Field;
 import java.util.List;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.IntTag;
-import org.skywalking.apm.trace.tag.IntTagItem;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.IntTag;
+import org.skywalking.apm.agent.core.context.tag.IntTagItem;
 
 /**
  * @author wusheng

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/tags/StringTagReader.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.lang.reflect.Field;
 import java.util.List;
-import org.skywalking.apm.trace.Span;
-import org.skywalking.apm.trace.tag.StringTag;
-import org.skywalking.apm.trace.tag.StringTagItem;
+import org.skywalking.apm.agent.core.context.trace.Span;
+import org.skywalking.apm.agent.core.context.tag.StringTag;
+import org.skywalking.apm.agent.core.context.tag.StringTagItem;
 
 /**
  * @author wusheng

File: apm-sniffer/apm-sniffer-mock/src/test/java/org/skywalking/apm/sniffer/mock/MockTracerContextListenerTestCase.java
Patch:
@@ -7,7 +7,7 @@
 import org.skywalking.apm.sniffer.mock.context.MockTracerContextListener;
 import org.skywalking.apm.sniffer.mock.context.SegmentAssert;
 import org.skywalking.apm.sniffer.mock.trace.TraceSegmentBuilderFactory;
-import org.skywalking.apm.trace.TraceSegment;
+import org.skywalking.apm.agent.core.context.trace.TraceSegment;
 
 /**
  * Created by wusheng on 2017/2/21.

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/skywalking/apm/toolkit/activation/opentracing/span/interceptor/SpanNewInstanceInterceptor.java
Patch:
@@ -5,7 +5,7 @@
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.ConstructorInvokeContext;
 import org.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 import org.skywalking.apm.toolkit.opentracing.SkyWalkingSpan;
-import org.skywalking.apm.trace.Span;
+import org.skywalking.apm.agent.core.context.trace.Span;
 
 import java.util.Map;
 

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v3/MongoDBMethodInterceptor.java
Patch:
@@ -67,8 +67,8 @@ public void beforeMethod(final EnhancedClassInstanceContext context,
     public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext,
                               Object ret) {
         Span span = ContextManager.activeSpan();
-        span.setPeerHost(context.get(MONGODB_HOST, String.class));
-        span.setPort(context.get(MONGODB_PORT, Integer.class));
+        span.setPeerHost((String)context.get(MONGODB_HOST));
+        span.setPort((Integer)context.get(MONGODB_PORT));
         ContextManager.stopSpan();
         return ret;
     }

File: apm-commons/apm-trace/src/test/java/org/skywalking/apm/trace/tag/TagsTest.java
Patch:
@@ -14,9 +14,11 @@ public void testLayer() {
         Tags.SPAN_LAYER.asDB(span);
         Assert.assertEquals("db", StringTagReader.get(span, Tags.SPAN_LAYER.SPAN_LAYER_TAG));
 
+        span = new Span(1, "/test");
         Tags.SPAN_LAYER.asRPCFramework(span);
         Assert.assertEquals("rpc", StringTagReader.get(span, Tags.SPAN_LAYER.SPAN_LAYER_TAG));
 
+        span = new Span(1, "/test");
         Tags.SPAN_LAYER.asHttp(span);
         Assert.assertEquals("http", StringTagReader.get(span, Tags.SPAN_LAYER.SPAN_LAYER_TAG));
     }
@@ -27,6 +29,7 @@ public void testBooleanTag() {
         Span span = new Span(1, "/test");
         Assert.assertFalse(BooleanTagReader.get(span, tag));
 
+        span = new Span(1, "/test");
         tag.set(span, true);
         Assert.assertTrue(BooleanTagReader.get(span, tag));
     }
@@ -36,8 +39,5 @@ public void testIntTag() {
         IntTag tag = new IntTag("test.key");
         Span span = new Span(1, "/test");
         Assert.assertNull(IntTagReader.get(span, tag));
-
-        tag.set(span, 123);
-        Assert.assertEquals(123, IntTagReader.get(span, tag).intValue());
     }
 }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/context/TracerContextTestCase.java
Patch:
@@ -62,8 +62,8 @@ public void testInject() {
         TracerContext context = new TracerContext();
         Span serviceSpan = context.createSpan("/serviceA", false);
         Span dbSpan = context.createSpan("db/preparedStatement/execute", false);
-        Tags.PEER_HOST.set(dbSpan, "127.0.0.1");
-        Tags.PEER_PORT.set(dbSpan, 8080);
+        dbSpan.setPeerHost("127.0.0.1");
+        dbSpan.setPort(8080);
 
         ContextCarrier carrier = new ContextCarrier();
         context.inject(carrier);

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/plugin/interceptor/EnhancedClassInstanceContextTest.java
Patch:
@@ -13,6 +13,6 @@ public void test() {
         context.set("key", "value");
         Assert.assertTrue(context.isContain("key"));
         Assert.assertEquals("value", context.get("key"));
-        Assert.assertEquals("value", context.get("key", String.class));
+        Assert.assertEquals("value", (String)context.get("key"));
     }
 }

File: apm-commons/apm-trace/src/test/java/org/skywalking/apm/trace/SpanTestCase.java
Patch:
@@ -44,7 +44,7 @@ public void testSetTag() {
         Span span1 = new Span(0, "serviceA");
         Tags.SPAN_LAYER.asHttp(span1);
         Tags.COMPONENT.set(span1, "Spring");
-        span1.setPeer_host("127.0.0.1");
+        span1.setPeerHost("127.0.0.1");
         Tags.ERROR.set(span1, true);
         Tags.STATUS_CODE.set(span1, 302);
         Tags.URL.set(span1, "http://127.0.0.1/serviceA");

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/main/java/org/skywalking/apm/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -54,8 +54,8 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         Tags.URL.set(span, generateRequestURL(requestURL, invocation));
         Tags.COMPONENT.set(span, DUBBO_COMPONENT);
         Tags.SPAN_LAYER.asRPCFramework(span);
-        Tags.PEER_HOST.set(span, requestURL.getHost());
-        Tags.PEER_PORT.set(span, requestURL.getPort());
+        span.setPeerHost(requestURL.getHost());
+        span.setPort(requestURL.getPort());
 
         if (isConsumer) {
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);

File: apm-sniffer/apm-sdk-plugin/feign-default-http-9.x-plugin/src/main/java/org/skywalking/apm/plugin/feign/http/v9/DefaultHttpClientInterceptor.java
Patch:
@@ -47,8 +47,8 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
 
         URL url = new URL(request.url());
         Span span = ContextManager.createSpan(request.url());
-        Tags.PEER_PORT.set(span, url.getPort());
-        Tags.PEER_HOST.set(span, url.getHost());
+        span.setPeerHost(url.getHost());
+        span.setPort(url.getPort());
         Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
         Tags.COMPONENT.set(span, COMPONENT_NAME);
         Tags.HTTP.METHOD.set(span, request.method());

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -34,8 +34,8 @@ public void beforeMethod(EnhancedClassInstanceContext context,
         HttpHost httpHost = (HttpHost) allArguments[0];
         HttpRequest httpRequest = (HttpRequest) allArguments[1];
         Span span = createSpan(httpRequest);
-        Tags.PEER_PORT.set(span, httpHost.getPort());
-        Tags.PEER_HOST.set(span, httpHost.getHostName());
+        span.setPeerHost(httpHost.getHostName());
+        span.setPort(httpHost.getPort());
         Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
         Tags.COMPONENT.set(span, COMPONENT_NAME);
         Tags.URL.set(span, generateURL(httpRequest));

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v3/MongoDBMethodInterceptor.java
Patch:
@@ -67,8 +67,8 @@ public void beforeMethod(final EnhancedClassInstanceContext context,
     public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext,
                               Object ret) {
         Span span = ContextManager.activeSpan();
-        Tags.PEER_HOST.set(span, context.get(MONGODB_HOST, String.class));
-        Tags.PEER_PORT.set(span, (Integer) context.get(MONGODB_PORT));
+        span.setPeerHost(context.get(MONGODB_HOST, String.class));
+        span.setPort(context.get(MONGODB_PORT, Integer.class));
         ContextManager.stopSpan();
         return ret;
     }

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/MotanConsumerInterceptor.java
Patch:
@@ -49,8 +49,8 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         Request request = (Request) interceptorContext.allArguments()[0];
         if (url != null) {
             Span span = ContextManager.createSpan(generateOperationName(url, request));
-            Tags.PEER_HOST.set(span, url.getHost());
-            Tags.PEER_PORT.set(span, url.getPort());
+            span.setPeerHost(url.getHost());
+            span.setPort(url.getPort());
             Tags.COMPONENT.set(span, MOTAN_COMPONENT);
             Tags.URL.set(span, url.getIdentity());
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);

File: apm-sniffer/apm-sdk-plugin/okhttp-3.x-plugin/src/main/java/org/skywalking/apm/plugin/okhttp/v3/RealCallInterceptor.java
Patch:
@@ -58,8 +58,8 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         Request request = (Request)context.get(REQUEST_CONTEXT_KEY);
 
         Span span = ContextManager.createSpan(request.url().uri().toString());
-        Tags.PEER_PORT.set(span, request.url().port());
-        Tags.PEER_HOST.set(span, request.url().host());
+        span.setPeerHost(request.url().host());
+        span.setPort(request.url().port());
         Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
         Tags.COMPONENT.set(span, COMPONENT_NAME);
         Tags.HTTP.METHOD.set(span, request.method());

File: apm-sniffer/apm-sdk-plugin/resin-3.x-plugin/src/main/java/org/skywalking/apm/plugin/resin/v3/ResinV3Interceptor.java
Patch:
@@ -37,8 +37,8 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         CauchoRequest request = (CauchoRequest)args[0];
         Span span = ContextManager.createSpan(request.getPageURI());
         Tags.COMPONENT.set(span, RESIN_COMPONENT);
-        Tags.PEER_HOST.set(span, request.getServerName());
-        Tags.PEER_PORT.set(span, request.getServerPort());
+        span.setPeerHost(request.getServerName());
+        span.setPort(request.getServerPort());
         Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_SERVER);
         Tags.URL.set(span, appendRequestURL(request));
         Tags.SPAN_LAYER.asHttp(span);

File: apm-sniffer/apm-sdk-plugin/resin-4.x-plugin/src/main/java/org/skywalking/apm/plugin/resin/v4/ResinV4Interceptor.java
Patch:
@@ -34,8 +34,8 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         CauchoRequest request = (CauchoRequest)args[0];
         Span span = ContextManager.createSpan(request.getPageURI());
         Tags.COMPONENT.set(span, RESIN_COMPONENT);
-        Tags.PEER_HOST.set(span, request.getServerName());
-        Tags.PEER_PORT.set(span, request.getServerPort());
+        span.setPeerHost(request.getServerName());
+        span.setPort(request.getServerPort());
         Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_SERVER);
         Tags.URL.set(span, appendRequestURL(request));
         Tags.SPAN_LAYER.asHttp(span);

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/skywalking/apm/plugin/tomcat78x/TomcatInterceptor.java
Patch:
@@ -45,8 +45,8 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
 
         Span span = ContextManager.createSpan(request.getRequestURI());
         Tags.COMPONENT.set(span, TOMCAT_COMPONENT);
-        Tags.PEER_HOST.set(span, fetchRequestPeerHost(request));
-        Tags.PEER_PORT.set(span, request.getRemotePort());
+        span.setPeerHost(fetchRequestPeerHost(request));
+        span.setPort(request.getRemotePort());
         Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_SERVER);
         Tags.URL.set(span, request.getRequestURL().toString());
         Tags.SPAN_LAYER.asHttp(span);

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/span/DubboSpanGenerator.java
Patch:
@@ -18,7 +18,7 @@ protected void before() {
             Tags.COMPONENT.set(span, "Dubbo");
             Tags.URL.set(span, "rest://192.168.1.8:20880/default_rpc/org.skywalking.apm.test.persistence.PersistenceService.query(String)");
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_SERVER);
-            span.setPeer_host("192.168.1.8");
+            span.setPeerHost("192.168.1.8");
             span.setPort(20880);
             Tags.SPAN_LAYER.asHttp(span);
         }
@@ -36,7 +36,7 @@ protected void before() {
             Tags.COMPONENT.set(span, "Dubbo");
             Tags.URL.set(span, "rest://192.168.1.8:20880/default_rpc/org.skywalking.apm.test.persistence.PersistenceService.query(String)");
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
-            span.setPeer_host("10.21.9.35");
+            span.setPeerHost("10.21.9.35");
             Tags.SPAN_LAYER.asHttp(span);
         }
 

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/span/MySQLGenerator.java
Patch:
@@ -16,7 +16,7 @@ protected void before() {
             Span span = ContextManager.createSpan("mysql/jdbi/statement/executeQuery");
             Tags.COMPONENT.set(span, "Mysql");
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
-            span.setPeer_host("10.5.34.18");
+            span.setPeerHost("10.5.34.18");
             span.setPort(30088);
             Tags.DB_INSTANCE.set(span, "mysql-instance");
             Tags.DB_STATEMENT.set(span, "select * from users where user_id = 1");

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/span/TomcatSpanGenerator.java
Patch:
@@ -19,7 +19,7 @@ protected void before() {
             Tags.COMPONENT.set(webSpan, "Tomcat");
             Tags.URL.set(webSpan, "http://10.21.9.35/web/serviceA");
             Tags.SPAN_KIND.set(webSpan, Tags.SPAN_KIND_SERVER);
-            webSpan.setPeer_host("10.21.9.35");
+            webSpan.setPeerHost("10.21.9.35");
             webSpan.setPort(80);
             Tags.SPAN_LAYER.asHttp(webSpan);
         }
@@ -41,7 +41,7 @@ protected void before() {
             Tags.COMPONENT.set(webSpan, "Tomcat");
             Tags.URL.set(webSpan, "http://10.21.9.35/web/unknown");
             Tags.SPAN_KIND.set(webSpan, Tags.SPAN_KIND_SERVER);
-            webSpan.setPeer_host("10.21.9.35");
+            webSpan.setPeerHost("10.21.9.35");
             webSpan.setPort(80);
             Tags.SPAN_LAYER.asHttp(webSpan);
         }
@@ -64,7 +64,7 @@ protected void before() {
             Tags.COMPONENT.set(webSpan, "Tomcat");
             Tags.URL.set(webSpan, "http://10.21.9.35/web/error/service");
             Tags.SPAN_KIND.set(webSpan, Tags.SPAN_KIND_SERVER);
-            webSpan.setPeer_host("10.21.9.35");
+            webSpan.setPeerHost("10.21.9.35");
             webSpan.setPort(80);
             Tags.SPAN_LAYER.asHttp(webSpan);
         }

File: apm-commons/apm-trace/src/test/java/org/skywalking/apm/trace/SpanTestCase.java
Patch:
@@ -8,7 +8,6 @@
 import org.skywalking.apm.trace.tag.Tags;
 
 import java.util.List;
-import java.util.Map;
 
 /**
  * Created by wusheng on 2017/2/18.
@@ -45,14 +44,14 @@ public void testSetTag() {
         Span span1 = new Span(0, "serviceA");
         Tags.SPAN_LAYER.asHttp(span1);
         Tags.COMPONENT.set(span1, "Spring");
-        span1.setPeer("127.0.0.1");
+        span1.setPeer_host("127.0.0.1");
         Tags.ERROR.set(span1, true);
         Tags.STATUS_CODE.set(span1, 302);
         Tags.URL.set(span1, "http://127.0.0.1/serviceA");
         Tags.DB_STATEMENT.set(span1, "select * from users");
 
         Assert.assertEquals("http", StringTagReader.get(span1, Tags.SPAN_LAYER.SPAN_LAYER_TAG));
-        Assert.assertEquals("127.0.0.1", span1.getPeer());
+        Assert.assertEquals("127.0.0.1", span1.getPeerHost());
         Assert.assertTrue(BooleanTagReader.get(span1, Tags.ERROR));
     }
 

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/span/DubboSpanGenerator.java
Patch:
@@ -18,8 +18,8 @@ protected void before() {
             Tags.COMPONENT.set(span, "Dubbo");
             Tags.URL.set(span, "rest://192.168.1.8:20880/default_rpc/org.skywalking.apm.test.persistence.PersistenceService.query(String)");
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_SERVER);
-            Tags.PEER_HOST.set(span, "192.168.1.8");
-            Tags.PEER_PORT.set(span, 20880);
+            span.setPeer_host("192.168.1.8");
+            span.setPort(20880);
             Tags.SPAN_LAYER.asHttp(span);
         }
 
@@ -36,7 +36,7 @@ protected void before() {
             Tags.COMPONENT.set(span, "Dubbo");
             Tags.URL.set(span, "rest://192.168.1.8:20880/default_rpc/org.skywalking.apm.test.persistence.PersistenceService.query(String)");
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
-            Tags.PEER_HOST.set(span, "10.21.9.35");
+            span.setPeer_host("10.21.9.35");
             Tags.SPAN_LAYER.asHttp(span);
         }
 

File: apm-sniffer/apm-sniffer-mock/src/main/java/org/skywalking/apm/sniffer/mock/trace/builders/span/MySQLGenerator.java
Patch:
@@ -16,8 +16,8 @@ protected void before() {
             Span span = ContextManager.createSpan("mysql/jdbi/statement/executeQuery");
             Tags.COMPONENT.set(span, "Mysql");
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
-            Tags.PEER_HOST.set(span, "10.5.34.18");
-            Tags.PEER_PORT.set(span, 30088);
+            span.setPeer_host("10.5.34.18");
+            span.setPort(30088);
             Tags.DB_INSTANCE.set(span, "mysql-instance");
             Tags.DB_STATEMENT.set(span, "select * from users where user_id = 1");
             Tags.DB_TYPE.set(span, "sql");

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/TracingBootstrap.java
Patch:
@@ -30,7 +30,7 @@ private TracingBootstrap() {
      * Main entrance for testing.
      *
      * @param args includes target classname ( which exists "public static void main(String[] args)" ) and arguments
-     *             list.
+     * list.
      * @throws PluginException
      * @throws ClassNotFoundException
      * @throws NoSuchMethodException
@@ -62,7 +62,7 @@ public static void main(String[] args)
             }
             DynamicType.Builder<?> newClassBuilder =
                 new ByteBuddy().rebase(resolution.resolve(), ClassFileLocator.ForClassLoader.ofClassPath());
-            newClassBuilder = ((AbstractClassEnhancePluginDefine) plugin).define(enhanceClassName, newClassBuilder);
+            newClassBuilder = ((AbstractClassEnhancePluginDefine)plugin).define(enhanceClassName, newClassBuilder, TracingBootstrap.class.getClassLoader());
             newClassBuilder.make(new TypeResolutionStrategy.Active()).load(ClassLoader.getSystemClassLoader(), ClassLoadingStrategy.Default.INJECTION)
                 .getLoaded();
         }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefineTest.java
Patch:
@@ -104,12 +104,12 @@ public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDesc
 
         private DynamicType.Builder<?> transformStaticMethod(DynamicType.Builder newBuilder) {
             MockPluginStaticMethodInstrumentation staticMethodInstrumentation = new MockPluginStaticMethodInstrumentation();
-            return staticMethodInstrumentation.define(WEAVE_CLASS, newBuilder);
+            return staticMethodInstrumentation.define(WEAVE_CLASS, newBuilder, AbstractClassEnhancePluginDefineTest.class.getClassLoader());
         }
 
         private DynamicType.Builder transformInstanceMethod(DynamicType.Builder<?> builder) {
             MockPluginInstanceMethodInstrumentation instrumentation = new MockPluginInstanceMethodInstrumentation();
-            return instrumentation.define(WEAVE_CLASS, builder);
+            return instrumentation.define(WEAVE_CLASS, builder, AbstractClassEnhancePluginDefineTest.class.getClassLoader());
         }
     }
 

File: apm-sniffer/apm-agent/src/main/java/org/skywalking/apm/agent/SkyWalkingAgent.java
Patch:
@@ -57,7 +57,7 @@ public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDesc
                 ClassLoader classLoader) {
                 List<AbstractClassEnhancePluginDefine> pluginDefines = pluginFinder.find(typeDescription.getTypeName());
                 for (AbstractClassEnhancePluginDefine pluginDefine : pluginDefines) {
-                    DynamicType.Builder<?> newBuilder = pluginDefine.define(typeDescription.getTypeName(), builder);
+                    DynamicType.Builder<?> newBuilder = pluginDefine.define(typeDescription.getTypeName(), builder, classLoader);
                     if (newBuilder != null) {
                         return newBuilder;
                     }

File: apm-collector/apm-collector-worker/src/test/java/org/skywalking/apm/collector/worker/span/persistence/SpanSearchWithIdTestCase.java
Patch:
@@ -75,7 +75,7 @@ public void testOnWork() throws Exception {
         spanSearchWithId.onWork(request, response);
 
         JsonObject spanJsonObj = response.get(Const.RESULT).getAsJsonObject();
-        String value = spanJsonObj.get("operationName").getAsString();
+        String value = spanJsonObj.get("on").getAsString();
         Assert.assertEquals("/portal/", value);
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/TracingBootstrap.java
Patch:
@@ -30,7 +30,7 @@ private TracingBootstrap() {
      * Main entrance for testing.
      *
      * @param args includes target classname ( which exists "public static void main(String[] args)" ) and arguments
-     *             list.
+     * list.
      * @throws PluginException
      * @throws ClassNotFoundException
      * @throws NoSuchMethodException
@@ -62,7 +62,7 @@ public static void main(String[] args)
             }
             DynamicType.Builder<?> newClassBuilder =
                 new ByteBuddy().rebase(resolution.resolve(), ClassFileLocator.ForClassLoader.ofClassPath());
-            newClassBuilder = ((AbstractClassEnhancePluginDefine) plugin).define(enhanceClassName, newClassBuilder);
+            newClassBuilder = ((AbstractClassEnhancePluginDefine)plugin).define(enhanceClassName, newClassBuilder, TracingBootstrap.class.getClassLoader());
             newClassBuilder.make(new TypeResolutionStrategy.Active()).load(ClassLoader.getSystemClassLoader(), ClassLoadingStrategy.Default.INJECTION)
                 .getLoaded();
         }

File: apm-sniffer/apm-agent-core/src/test/java/org/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefineTest.java
Patch:
@@ -104,12 +104,12 @@ public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDesc
 
         private DynamicType.Builder<?> transformStaticMethod(DynamicType.Builder newBuilder) {
             MockPluginStaticMethodInstrumentation staticMethodInstrumentation = new MockPluginStaticMethodInstrumentation();
-            return staticMethodInstrumentation.define(WEAVE_CLASS, newBuilder);
+            return staticMethodInstrumentation.define(WEAVE_CLASS, newBuilder, AbstractClassEnhancePluginDefineTest.class.getClassLoader());
         }
 
         private DynamicType.Builder transformInstanceMethod(DynamicType.Builder<?> builder) {
             MockPluginInstanceMethodInstrumentation instrumentation = new MockPluginInstanceMethodInstrumentation();
-            return instrumentation.define(WEAVE_CLASS, builder);
+            return instrumentation.define(WEAVE_CLASS, builder, AbstractClassEnhancePluginDefineTest.class.getClassLoader());
         }
     }
 

File: apm-sniffer/apm-agent/src/main/java/org/skywalking/apm/agent/SkyWalkingAgent.java
Patch:
@@ -57,7 +57,7 @@ public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDesc
                 ClassLoader classLoader) {
                 List<AbstractClassEnhancePluginDefine> pluginDefines = pluginFinder.find(typeDescription.getTypeName());
                 for (AbstractClassEnhancePluginDefine pluginDefine : pluginDefines) {
-                    DynamicType.Builder<?> newBuilder = pluginDefine.define(typeDescription.getTypeName(), builder);
+                    DynamicType.Builder<?> newBuilder = pluginDefine.define(typeDescription.getTypeName(), builder, classLoader);
                     if (newBuilder != null) {
                         return newBuilder;
                     }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -41,7 +41,7 @@ public void trySampling(TraceSegment segment) {
             if (rollingSeed % Config.Agent.SAMPLING_CYCLE != 0) {
                 segment.setSampled(false);
                 rollingSeed++;
-            }else{
+            } else {
                 this.rollingSeed = 1;
             }
         }

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/sampling/SamplingService.java
Patch:
@@ -40,9 +40,10 @@ public void trySampling(TraceSegment segment) {
         if (on) {
             if (rollingSeed % Config.Agent.SAMPLING_CYCLE != 0) {
                 segment.setSampled(false);
+                rollingSeed++;
+            }else{
                 this.rollingSeed = 1;
             }
-            rollingSeed++;
         }
     }
 

File: apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/plugin/PluginBootstrap.java
Patch:
@@ -53,7 +53,7 @@ public List<AbstractClassEnhancePluginDefine> loadPlugins() {
                 plugin.setClassTypePool(classTypePool);
                 plugins.add(plugin);
             } catch (Throwable t) {
-                logger.error(t, "loade plugin [{}] failure.", pluginClassName);
+                logger.error(t, "load plugin [{}] failure.", pluginClassName);
             }
         }
 

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/skywalking/apm/plugin/tomcat78x/TomcatInterceptor.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * {@link TomcatInterceptor} fetch the serialized context data by using {@link HttpServletRequest#getHeader(String)}.
- * The {@link TraceSegment#primaryRef} of current trace segment will reference to the trace
+ * The {@link TraceSegment#refs} of current trace segment will reference to the trace
  * segment id of the previous level if the serialized context is not null.
  */
 public class TomcatInterceptor implements InstanceMethodsAroundInterceptor {
@@ -30,7 +30,7 @@ public class TomcatInterceptor implements InstanceMethodsAroundInterceptor {
     public static final String TOMCAT_COMPONENT = "Tomcat";
 
     /**
-     * The {@link TraceSegment#primaryRef} of current trace segment will reference to the
+     * The {@link TraceSegment#refs} of current trace segment will reference to the
      * trace segment id of the previous level if the serialized context is not null.
      *
      * @param context            instance context, a class instance only has one {@link EnhancedClassInstanceContext} instance.

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/main/java/org/skywalking/apm/plugin/dubbo/DubboInstrumentation.java
Patch:
@@ -17,7 +17,7 @@
 public class DubboInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "com.alibaba.dubbo.monitor.support.MonitorFilter";
-    private static final String INTERCEPT_CLASS = "DubboInterceptor";
+    private static final String INTERCEPT_CLASS = "org.skywalking.apm.plugin.dubbo.DubboInterceptor";
 
     @Override
     protected String enhanceClassName() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/define/HttpClientInstrumentation.java
Patch:
@@ -12,7 +12,7 @@
  */
 public abstract class HttpClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String INTERCEPT_CLASS = "HttpClientExecuteInterceptor";
+    private static final String INTERCEPT_CLASS = "org.skywalking.apm.plugin.httpClient.v4.HttpClientExecuteInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/define/AbstractDatabaseInstrumentation.java
Patch:
@@ -19,7 +19,7 @@
  */
 public abstract class AbstractDatabaseInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String INTERCEPT_CLASS = "JDBCDriverInterceptor";
+    private static final String INTERCEPT_CLASS = "org.skywalking.apm.plugin.jdbc.define.JDBCDriverInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/skywalking/apm/plugin/jedis/v2/define/JedisClusterInstrumentation.java
Patch:
@@ -28,9 +28,9 @@ public class JedisClusterInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ARGUMENT_TYPE_NAME = "redis.clients.jedis.HostAndPort";
     private static final String ENHANCE_CLASS = "redis.clients.jedis.JedisCluster";
-    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "JedisClusterConstructorWithListHostAndPortArgInterceptor";
-    private static final String METHOD_INTERCEPT_CLASS = "JedisMethodInterceptor";
-    private static final String CONSTRUCTOR_WITH_HOSTANDPORT_ARG_INTERCEPT_CLASS = "JedisClusterConstructorWithHostAndPortArgInterceptor";
+    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jedis.v2.JedisClusterConstructorWithListHostAndPortArgInterceptor";
+    private static final String METHOD_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jedis.v2.JedisMethodInterceptor";
+    private static final String CONSTRUCTOR_WITH_HOSTANDPORT_ARG_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jedis.v2.JedisClusterConstructorWithHostAndPortArgInterceptor";
 
     @Override
     public String enhanceClassName() {

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v3/define/MongoDBInstrumentation.java
Patch:
@@ -19,11 +19,11 @@ public class MongoDBInstrumentation extends ClassInstanceMethodsEnhancePluginDef
 
     private static final String ENHANCE_CLASS = "com.mongodb.Mongo";
 
-    private static final String MONGDB_READ_BINDING_CLASS = "MongoDBReadBindingInterceptor";
+    private static final String MONGDB_READ_BINDING_CLASS = "org.skywalking.apm.plugin.mongodb.v3.MongoDBReadBindingInterceptor";
 
-    private static final String MONGDB_WRITE_BINDING_CLASS = "MongoDBWriteBindingInterceptor";
+    private static final String MONGDB_WRITE_BINDING_CLASS = "org.skywalking.apm.plugin.mongodb.v3.MongoDBWriteBindingInterceptor";
 
-    private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBMethodInterceptor";
+    private static final String MONGDB_METHOD_INTERCET_CLASS = "org.skywalking.apm.plugin.mongodb.v3.MongoDBMethodInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/define/MotanConsumerInstrumentation.java
Patch:
@@ -19,7 +19,7 @@ public class MotanConsumerInstrumentation extends ClassInstanceMethodsEnhancePlu
 
     private static final String ENHANCE_CLASS = "com.weibo.api.motan.transport.ProviderMessageRouter";
 
-    private static final String INVOKE_INTERCEPT_CLASS = "MotanProviderInterceptor";
+    private static final String INVOKE_INTERCEPT_CLASS = "org.skywalking.apm.plugin.motan.MotanProviderInterceptor";
 
     @Override
     protected String enhanceClassName() {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/define/MotanProviderInstrumentation.java
Patch:
@@ -28,11 +28,11 @@ public class MotanProviderInstrumentation extends ClassInstanceMethodsEnhancePlu
     /**
      * Class that intercept all constructor of ${@link com.weibo.api.motan.rpc.AbstractProvider}.
      */
-    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "MotanConsumerInterceptor";
+    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.skywalking.apm.plugin.motan.MotanConsumerInterceptor";
     /**
      * Class that intercept {@link com.weibo.api.motan.rpc.AbstractProvider#call(Request)}.
      */
-    private static final String PROVIDER_INVOKE_INTERCEPT_CLASS = "MotanConsumerInterceptor";
+    private static final String PROVIDER_INVOKE_INTERCEPT_CLASS = "org.skywalking.apm.plugin.motan.MotanConsumerInterceptor";
 
     @Override
     protected String enhanceClassName() {

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/skywalking/apm/plugin/tomcat78x/define/TomcatInstrumentation.java
Patch:
@@ -27,7 +27,7 @@ public class TomcatInstrumentation extends ClassInstanceMethodsEnhancePluginDefi
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "TomcatInterceptor";
+    private static final String INTERCEPT_CLASS = "org.skywalking.apm.plugin.tomcat78x.TomcatInterceptor";
 
     @Override
     protected String enhanceClassName() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/log4j/v1/x/TraceIdPatternConverterActivation.java
Patch:
@@ -48,7 +48,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "PrintTraceIdInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.log.log4j.v1.x.PrintTraceIdInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/log4j/v2/x/Log4j2OutputAppenderActivation.java
Patch:
@@ -39,7 +39,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "PrintTraceIdInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.log.log4j.v2.x.PrintTraceIdInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/LogbackPatternConverterActivation.java
Patch:
@@ -49,7 +49,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "PrintTraceIdInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.log.logback.v1.x.PrintTraceIdInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/skywalking/apm/toolkit/activation/opentracing/span/SkyWalkingSpanActivation.java
Patch:
@@ -48,7 +48,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "SpanSetTagInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.opentracing.span.interceptor.SpanSetTagInterceptor";
                 }
             },
             new InstanceMethodsInterceptPoint() {
@@ -59,7 +59,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "SpanSetOperationNameInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.opentracing.span.interceptor.SpanSetOperationNameInterceptor";
                 }
             },
             new InstanceMethodsInterceptPoint() {
@@ -70,7 +70,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "SpanFinishInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.opentracing.span.interceptor.SpanFinishInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-context-activation/src/main/java/org/skywalking/apm/toolkit/activation/trace/TraceContextActivation.java
Patch:
@@ -39,7 +39,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "TraceContextInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.trace.TraceContextInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/main/java/org/skywalking/apm/plugin/dubbo/DubboInstrumentation.java
Patch:
@@ -17,7 +17,7 @@
 public class DubboInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "com.alibaba.dubbo.monitor.support.MonitorFilter";
-    private static final String INTERCEPT_CLASS = "DubboInterceptor";
+    private static final String INTERCEPT_CLASS = "org.skywalking.apm.plugin.dubbo.DubboInterceptor";
 
     @Override
     protected String enhanceClassName() {

File: apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/main/java/org/skywalking/apm/plugin/httpClient/v4/define/HttpClientInstrumentation.java
Patch:
@@ -12,7 +12,7 @@
  */
 public abstract class HttpClientInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String INTERCEPT_CLASS = "HttpClientExecuteInterceptor";
+    private static final String INTERCEPT_CLASS = "org.skywalking.apm.plugin.httpClient.v4.HttpClientExecuteInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jdbc-plugin/src/main/java/org/skywalking/apm/plugin/jdbc/define/AbstractDatabaseInstrumentation.java
Patch:
@@ -19,7 +19,7 @@
  */
 public abstract class AbstractDatabaseInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
-    private static final String INTERCEPT_CLASS = "JDBCDriverInterceptor";
+    private static final String INTERCEPT_CLASS = "org.skywalking.apm.plugin.jdbc.define.JDBCDriverInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/jedis-2.x-plugin/src/main/java/org/skywalking/apm/plugin/jedis/v2/define/JedisClusterInstrumentation.java
Patch:
@@ -28,9 +28,9 @@ public class JedisClusterInstrumentation extends ClassInstanceMethodsEnhancePlug
 
     private static final String ARGUMENT_TYPE_NAME = "redis.clients.jedis.HostAndPort";
     private static final String ENHANCE_CLASS = "redis.clients.jedis.JedisCluster";
-    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "JedisClusterConstructorWithListHostAndPortArgInterceptor";
-    private static final String METHOD_INTERCEPT_CLASS = "JedisMethodInterceptor";
-    private static final String CONSTRUCTOR_WITH_HOSTANDPORT_ARG_INTERCEPT_CLASS = "JedisClusterConstructorWithHostAndPortArgInterceptor";
+    private static final String CONSTRUCTOR_WITH_LIST_HOSTANDPORT_ARG_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jedis.v2.JedisClusterConstructorWithListHostAndPortArgInterceptor";
+    private static final String METHOD_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jedis.v2.JedisMethodInterceptor";
+    private static final String CONSTRUCTOR_WITH_HOSTANDPORT_ARG_INTERCEPT_CLASS = "org.skywalking.apm.plugin.jedis.v2.JedisClusterConstructorWithHostAndPortArgInterceptor";
 
     @Override
     public String enhanceClassName() {

File: apm-sniffer/apm-sdk-plugin/mongodb-3.x-plugin/src/main/java/org/skywalking/apm/plugin/mongodb/v3/define/MongoDBInstrumentation.java
Patch:
@@ -19,11 +19,11 @@ public class MongoDBInstrumentation extends ClassInstanceMethodsEnhancePluginDef
 
     private static final String ENHANCE_CLASS = "com.mongodb.Mongo";
 
-    private static final String MONGDB_READ_BINDING_CLASS = "MongoDBReadBindingInterceptor";
+    private static final String MONGDB_READ_BINDING_CLASS = "org.skywalking.apm.plugin.mongodb.v3.MongoDBReadBindingInterceptor";
 
-    private static final String MONGDB_WRITE_BINDING_CLASS = "MongoDBWriteBindingInterceptor";
+    private static final String MONGDB_WRITE_BINDING_CLASS = "org.skywalking.apm.plugin.mongodb.v3.MongoDBWriteBindingInterceptor";
 
-    private static final String MONGDB_METHOD_INTERCET_CLASS = "MongoDBMethodInterceptor";
+    private static final String MONGDB_METHOD_INTERCET_CLASS = "org.skywalking.apm.plugin.mongodb.v3.MongoDBMethodInterceptor";
 
     @Override
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/define/MotanConsumerInstrumentation.java
Patch:
@@ -19,7 +19,7 @@ public class MotanConsumerInstrumentation extends ClassInstanceMethodsEnhancePlu
 
     private static final String ENHANCE_CLASS = "com.weibo.api.motan.transport.ProviderMessageRouter";
 
-    private static final String INVOKE_INTERCEPT_CLASS = "MotanProviderInterceptor";
+    private static final String INVOKE_INTERCEPT_CLASS = "org.skywalking.apm.plugin.motan.MotanProviderInterceptor";
 
     @Override
     protected String enhanceClassName() {

File: apm-sniffer/apm-sdk-plugin/motan-plugin/src/main/java/org/skywalking/apm/plugin/motan/define/MotanProviderInstrumentation.java
Patch:
@@ -28,11 +28,11 @@ public class MotanProviderInstrumentation extends ClassInstanceMethodsEnhancePlu
     /**
      * Class that intercept all constructor of ${@link com.weibo.api.motan.rpc.AbstractProvider}.
      */
-    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "MotanConsumerInterceptor";
+    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "org.skywalking.apm.plugin.motan.MotanConsumerInterceptor";
     /**
      * Class that intercept {@link com.weibo.api.motan.rpc.AbstractProvider#call(Request)}.
      */
-    private static final String PROVIDER_INVOKE_INTERCEPT_CLASS = "MotanConsumerInterceptor";
+    private static final String PROVIDER_INVOKE_INTERCEPT_CLASS = "org.skywalking.apm.plugin.motan.MotanConsumerInterceptor";
 
     @Override
     protected String enhanceClassName() {

File: apm-sniffer/apm-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/org/skywalking/apm/plugin/tomcat78x/define/TomcatInstrumentation.java
Patch:
@@ -27,7 +27,7 @@ public class TomcatInstrumentation extends ClassInstanceMethodsEnhancePluginDefi
     /**
      * Intercept class.
      */
-    private static final String INTERCEPT_CLASS = "TomcatInterceptor";
+    private static final String INTERCEPT_CLASS = "org.skywalking.apm.plugin.tomcat78x.TomcatInterceptor";
 
     @Override
     protected String enhanceClassName() {

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/log4j/v1/x/TraceIdPatternConverterActivation.java
Patch:
@@ -48,7 +48,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "PrintTraceIdInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.log.log4j.v1.x.PrintTraceIdInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/log4j/v2/x/Log4j2OutputAppenderActivation.java
Patch:
@@ -39,7 +39,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "PrintTraceIdInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.log.log4j.v2.x.PrintTraceIdInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-logback-1.x-activation/src/main/java/org/skywalking/apm/toolkit/activation/log/logback/v1/x/LogbackPatternConverterActivation.java
Patch:
@@ -49,7 +49,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "PrintTraceIdInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.log.logback.v1.x.PrintTraceIdInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-opentracing-activation/src/main/java/org/skywalking/apm/toolkit/activation/opentracing/span/SkyWalkingSpanActivation.java
Patch:
@@ -48,7 +48,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "SpanSetTagInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.opentracing.span.interceptor.SpanSetTagInterceptor";
                 }
             },
             new InstanceMethodsInterceptPoint() {
@@ -59,7 +59,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "SpanSetOperationNameInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.opentracing.span.interceptor.SpanSetOperationNameInterceptor";
                 }
             },
             new InstanceMethodsInterceptPoint() {
@@ -70,7 +70,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "SpanFinishInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.opentracing.span.interceptor.SpanFinishInterceptor";
                 }
             }
         };

File: apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-context-activation/src/main/java/org/skywalking/apm/toolkit/activation/trace/TraceContextActivation.java
Patch:
@@ -39,7 +39,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
                 @Override
                 public String getMethodsInterceptor() {
-                    return "TraceContextInterceptor";
+                    return "org.skywalking.apm.toolkit.activation.trace.TraceContextInterceptor";
                 }
             }
         };

File: apm-application-toolkit/apm-toolkit-log4j-2.x/src/main/java/org/skywalking/apm/toolkit/log/log4j/v2/x/TraceIdConverter.java
Patch:
@@ -14,7 +14,7 @@
  * Created by wusheng on 2016/12/7.
  */
 @Plugin(name = "TraceIdConverter", category = "Converter")
-@ConverterKeys( {"traceId"})
+@ConverterKeys({"traceId"})
 public class TraceIdConverter extends LogEventPatternConverter {
 
     /**

File: apm-sniffer/apm-api/src/test/java/org/skywalking/apm/api/plugin/AbstractClassEnhancePluginDefineTest.java
Patch:
@@ -21,8 +21,8 @@
 
 @RunWith(PowerMockRunner.class)
 public class AbstractClassEnhancePluginDefineTest {
-    static final String WEAVE_CLASS = "TargetObject";
-    static final String INTERCEPTOR_CLASS = "MockPluginInterceptor";
+    static final String WEAVE_CLASS = "org.skywalking.apm.api.plugin.TargetObject";
+    static final String INTERCEPTOR_CLASS = "org.skywalking.apm.api.plugin.MockPluginInterceptor";
     static final String WEAVE_INSTANCE_METHOD_NAME = "instanceMethod";
     static final String WEAVE_INSTANCE_WITH_EXCEPTION_METHOD_NAME = "instanceMethodWithException";
     static final String WEAVE_STATIC_METHOD_NAME = "staticMethod";

File: apm-sniffer/apm-sdk-plugin/dubbo-plugin/src/main/java/org/skywalking/apm/plugin/dubbox/BugFixActive.java
Patch:
@@ -1,12 +1,10 @@
 package org.skywalking.apm.plugin.dubbox;
 
-import org.skywalking.apm.plugin.dubbo.DubboInterceptor;
-
 /**
  * {@link BugFixActive#active} is an flag that present the dubbox version is below 2.8.3, The version 2.8.3 of dubbox
  * don't support attachment. so skywalking provided another way to support the function that transport the serialized
  * context data. The way is that all parameters of dubbo service need to extend {@link SWBaseBean}, {@link
- * DubboInterceptor} fetch the serialized context data by using {@link
+ * org.skywalking.apm.plugin.dubbo.DubboInterceptor} fetch the serialized context data by using {@link
  * SWBaseBean#getTraceContext()}.
  *
  * @author zhangxin

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/AbstractPostTestCase.java
Patch:
@@ -26,8 +26,8 @@ public class AbstractPostTestCase {
 
     @Before
     public void init() {
-        ClusterWorkerContext clusterWorkerContext = mock(ClusterWorkerContext.class);
-        LocalWorkerContext localWorkerContext = mock(LocalWorkerContext.class);
+        ClusterWorkerContext clusterWorkerContext = PowerMockito.mock(ClusterWorkerContext.class);
+        LocalWorkerContext localWorkerContext = PowerMockito.mock(LocalWorkerContext.class);
         post = spy(new TestAbstractPost(TestAbstractPost.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext));
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/AbstractPostTestCase.java
Patch:
@@ -26,8 +26,8 @@ public class AbstractPostTestCase {
 
     @Before
     public void init() {
-        ClusterWorkerContext clusterWorkerContext = mock(ClusterWorkerContext.class);
-        LocalWorkerContext localWorkerContext = mock(LocalWorkerContext.class);
+        ClusterWorkerContext clusterWorkerContext = PowerMockito.mock(ClusterWorkerContext.class);
+        LocalWorkerContext localWorkerContext = PowerMockito.mock(LocalWorkerContext.class);
         post = spy(new TestAbstractPost(TestAbstractPost.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext));
     }
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/SkyWalkingSpanActivation.java
Patch:
@@ -2,11 +2,10 @@
 
 import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
-
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
+import java.util.Map;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
-import java.util.Map;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static net.bytebuddy.matcher.ElementMatchers.takesArguments;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/interceptor/TracerInjectFormatCrossProcessContextInterceptor.java
Patch:
@@ -9,9 +9,9 @@
 import com.a.eye.skywalking.toolkit.opentracing.SkyWalkingTracer;
 
 /**
- * Intercept {@link SkyWalkingTracer#formatCrossProcessPropagationContextData()}
+ * Intercept {@link SkyWalkingTracer#formatInjectCrossProcessPropagationContextData()}
  */
-public class TracerFormatCrossProcessContextInterceptor implements InstanceMethodsAroundInterceptor {
+public class TracerInjectFormatCrossProcessContextInterceptor implements InstanceMethodsAroundInterceptor {
     @Override
     public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext,
         MethodInterceptResult result) {

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanSetTagInterceptor.java
Patch:
@@ -6,8 +6,6 @@
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 import com.a.eye.skywalking.toolkit.opentracing.SkyWalkingSpan;
-
-import io.opentracing.Span;
 import io.opentracing.tag.Tags;
 
 /**

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/httpserver/AbstractGet.java
Patch:
@@ -18,12 +18,12 @@ protected AbstractGet(Role role, ClusterWorkerContext clusterContext, LocalWorke
         super(role, clusterContext, selfContext);
     }
 
-    @Override final public void onWork(Object request, Object response) throws Exception {
+    @Override
+    final public void onWork(Object request, Object response) throws Exception {
         Map<String, String[]> parameterMap = (Map<String, String[]>)request;
         try {
             onSearch(parameterMap, (JsonObject)response);
         } catch (Exception e) {
-            e.printStackTrace();
             ((JsonObject)response).addProperty("isSuccess", false);
             ((JsonObject)response).addProperty("reason", e.getMessage());
         }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/analysis/AbstractNodeMappingAnalysis.java
Patch:
@@ -5,9 +5,9 @@
 import com.a.eye.skywalking.collector.worker.Const;
 import com.a.eye.skywalking.collector.worker.RecordAnalysisMember;
 import com.a.eye.skywalking.collector.worker.node.NodeMappingIndex;
+import com.a.eye.skywalking.collector.worker.segment.entity.Segment;
+import com.a.eye.skywalking.collector.worker.segment.entity.TraceSegmentRef;
 import com.a.eye.skywalking.collector.worker.tools.CollectionTools;
-import com.a.eye.skywalking.trace.TraceSegment;
-import com.a.eye.skywalking.trace.TraceSegmentRef;
 import com.google.gson.JsonObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -26,7 +26,7 @@ abstract class AbstractNodeMappingAnalysis extends RecordAnalysisMember {
         super(role, clusterContext, selfContext);
     }
 
-    void analyseRefs(TraceSegment segment, long timeSlice) throws Exception {
+    void analyseRefs(Segment segment, long timeSlice) throws Exception {
         List<TraceSegmentRef> segmentRefList = segment.getRefs();
         logger.debug("node mapping analysis refs isNotEmpty %s", CollectionTools.isNotEmpty(segmentRefList));
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/entity/SpanView.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.collector.worker.segment.logic;
+package com.a.eye.skywalking.collector.worker.segment.entity;
 
 import java.util.HashSet;
 import java.util.Set;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentCostSave.java
Patch:
@@ -9,10 +9,10 @@
 import com.a.eye.skywalking.collector.worker.config.WorkerConfig;
 import com.a.eye.skywalking.collector.worker.segment.SegmentCostIndex;
 import com.a.eye.skywalking.collector.worker.segment.SegmentPost;
+import com.a.eye.skywalking.collector.worker.segment.entity.Segment;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
 import com.a.eye.skywalking.collector.worker.storage.RecordData;
 import com.a.eye.skywalking.collector.worker.tools.CollectionTools;
-import com.a.eye.skywalking.trace.Span;
-import com.a.eye.skywalking.trace.TraceSegment;
 import com.google.gson.JsonObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -43,7 +43,7 @@ protected SegmentCostSave(com.a.eye.skywalking.collector.actor.Role role, Cluste
     public void analyse(Object message) throws Exception {
         if (message instanceof SegmentPost.SegmentWithTimeSlice) {
             SegmentPost.SegmentWithTimeSlice segmentWithTimeSlice = (SegmentPost.SegmentWithTimeSlice)message;
-            TraceSegment segment = segmentWithTimeSlice.getTraceSegment();
+            Segment segment = segmentWithTimeSlice.getSegment();
 
             if (CollectionTools.isNotEmpty(segment.getSpans())) {
                 for (Span span : segment.getSpans()) {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/ClientSpanIsLeafTools.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.collector.worker.tools;
 
-import com.a.eye.skywalking.trace.Span;
-import com.a.eye.skywalking.trace.tag.Tags;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
+import com.a.eye.skywalking.collector.worker.segment.entity.tag.Tags;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/SpanPeersTools.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.a.eye.skywalking.api.util.StringUtil;
 import com.a.eye.skywalking.collector.worker.Const;
-import com.a.eye.skywalking.trace.Span;
-import com.a.eye.skywalking.trace.tag.Tags;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
+import com.a.eye.skywalking.collector.worker.segment.entity.tag.Tags;
 
 /**
  * @author pengys5

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/TestAbstractPost.java
Patch:
@@ -21,8 +21,7 @@ public void preStart() throws ProviderNotFoundException {
     }
 
     @Override
-    protected void onReceive(String reqJsonStr) throws Exception {
-
+    protected void onReceive(Object message) throws Exception {
     }
 
     public enum WorkerRole implements Role {

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentPostTestCase.java
Patch:
@@ -260,7 +260,7 @@ public void initNodeNodeMappingAnalysis() throws Exception {
         doAnswer(nodeMappingDayAnalysisAnswer).when(nodeMappingDayAnalysis).tell(Mockito.argThat(new IsSegmentWithTimeSlice()));
     }
 
-    @Test
+//    @Test
     public void testOnReceive() throws Exception {
         String cacheServiceSegmentAsString = segmentMock.mockCacheServiceSegmentAsString();
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentRealPost.java
Patch:
@@ -16,13 +16,13 @@ public static void main(String[] args) throws Exception {
 //        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", portalServiceExceptionSegmentAsString);
 
         String cacheServiceSegmentAsString = mock.mockCacheServiceSegmentAsString();
-        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", cacheServiceSegmentAsString);
+        HttpClientTools.INSTANCE.post("http://localhost:12800/segments", cacheServiceSegmentAsString);
 
         String persistenceServiceSegmentAsString = mock.mockPersistenceServiceSegmentAsString();
-        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", persistenceServiceSegmentAsString);
+        HttpClientTools.INSTANCE.post("http://localhost:12800/segments", persistenceServiceSegmentAsString);
 
         String portalServiceSegmentAsString = mock.mockPortalServiceSegmentAsString();
-        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", portalServiceSegmentAsString);
+        HttpClientTools.INSTANCE.post("http://localhost:12800/segments", portalServiceSegmentAsString);
 
 //        String specialSegmentAsString = mock.mockSpecialSegmentAsString();
 //        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", specialSegmentAsString);

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/SpanPeersToolsTestCase.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.collector.worker.tools;
 
-import com.a.eye.skywalking.trace.Span;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
 import org.junit.Assert;
 import org.junit.Test;
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanSetTagInterceptor.java
Patch:
@@ -34,6 +34,8 @@ else if (value instanceof Boolean)
             ContextManager.activeSpan().setTag(key, (Boolean)value);
         else if (value instanceof Integer)
             ContextManager.activeSpan().setTag(key, (Integer)value);
+        else if (value instanceof Short)
+            ContextManager.activeSpan().setTag(key, ((Short)value).intValue());
         else
             ContextManager.activeSpan().setTag(key, value.toString());
     }

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/AbstractClusterWorker.java
Patch:
@@ -7,7 +7,7 @@
 import akka.cluster.MemberStatus;
 import com.a.eye.skywalking.collector.cluster.WorkerListenerMessage;
 import com.a.eye.skywalking.collector.cluster.WorkersListener;
-import org.apache.logging.log4j.LogManager;
+import com.a.eye.skywalking.collector.log.LogManager;
 import org.apache.logging.log4j.Logger;
 
 /**
@@ -52,7 +52,7 @@ final public void allocateJob(Object message) throws Exception {
     protected abstract void onWork(Object message) throws Exception;
 
     static class WorkerWithAkka extends UntypedActor {
-        private Logger logger = LogManager.getFormatterLogger(WorkerWithAkka.class);
+        private Logger logger = LogManager.INSTANCE.getFormatterLogger(WorkerWithAkka.class);
 
         private Cluster cluster;
         private final AbstractClusterWorker ownerWorker;

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/AbstractWorkerProvider.java
Patch:
@@ -24,9 +24,6 @@ final protected ClusterWorkerContext getClusterContext() {
 
     final public WorkerRef create(
         AbstractWorker workerOwner) throws IllegalArgumentException, ProviderNotFoundException {
-        if (workerInstance(clusterContext) == null) {
-            throw new IllegalArgumentException("cannot get worker instance with nothing obtained from workerInstance()");
-        }
 
         if (workerOwner == null) {
             return onCreate(null);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/CollectorBootStartUp.java
Patch:
@@ -5,6 +5,7 @@
 import com.a.eye.skywalking.collector.worker.httpserver.HttpServer;
 import com.a.eye.skywalking.collector.worker.storage.EsClient;
 import com.a.eye.skywalking.collector.worker.storage.IndexCreator;
+import com.a.eye.skywalking.collector.worker.storage.PersistenceTimer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -20,6 +21,7 @@ public static void main(String[] args) throws Exception {
         collectorSystem.boot();
         EsClient.INSTANCE.boot();
         IndexCreator.INSTANCE.create();
+        PersistenceTimer.INSTANCE.boot();
         HttpServer.INSTANCE.boot((ClusterWorkerContext)collectorSystem.getClusterContext());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/config/CacheSizeConfig.java
Patch:
@@ -7,11 +7,11 @@ public class CacheSizeConfig {
 
     public static class Cache {
         public static class Analysis {
-            public static int SIZE = 1000;
+            public static int SIZE = 1024;
         }
 
         public static class Persistence {
-            public static int SIZE = 1000;
+            public static int SIZE = 5000;
         }
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/globaltrace/GlobalTraceGetWithGlobalId.java
Patch:
@@ -46,8 +46,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<GlobalTraceGetWithGlobalId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/analysis/AbstractNodeMappingAnalysis.java
Patch:
@@ -26,7 +26,7 @@ abstract class AbstractNodeMappingAnalysis extends RecordAnalysisMember {
         super(role, clusterContext, selfContext);
     }
 
-    void analyseRefs(Segment segment, long timeSlice) throws Exception {
+    final void analyseRefs(Segment segment, long timeSlice) throws Exception {
         List<TraceSegmentRef> segmentRefList = segment.getRefs();
         logger.debug("node mapping analysis refs isNotEmpty %s", CollectionTools.isNotEmpty(segmentRefList));
 
@@ -42,7 +42,7 @@ void analyseRefs(Segment segment, long timeSlice) throws Exception {
                 nodeMappingJsonObj.addProperty(NodeMappingIndex.TIME_SLICE, timeSlice);
 
                 String id = timeSlice + Const.ID_SPLIT + code + Const.ID_SPLIT + peers;
-                setRecord(id, nodeMappingJsonObj);
+                set(id, nodeMappingJsonObj);
             }
         }
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeCompLoad.java
Patch:
@@ -49,8 +49,6 @@ public void onWork(Object request, Object response) throws Exception {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeCompLoad> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingSearchWithTimeSlice.java
Patch:
@@ -62,7 +62,7 @@ public void onWork(Object request, Object response) throws Exception {
             JsonObject resJsonObj = (JsonObject)response;
             resJsonObj.add(Const.RESULT, nodeMappingArray);
         } else {
-            throw new IllegalArgumentException("message instance must be RequestEntity");
+            logger.error("unhandled message, message instance must NodeMappingSearchWithTimeSlice.RequestEntity, but is %s", request.getClass().toString());
         }
     }
 
@@ -73,8 +73,6 @@ public RequestEntity(String sliceType, long startTime, long endTime) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeMappingSearchWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefResSumGetGroupWithTimeSlice.java
Patch:
@@ -61,8 +61,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<NodeRefResSumGetGroupWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/analysis/AbstractNodeRefAnalysis.java
Patch:
@@ -49,7 +49,7 @@ final void analyseNodeRef(Segment segment, long timeSlice, long minute, long hou
 
                     String id = timeSlice + Const.ID_SPLIT + front + Const.ID_SPLIT + behind;
                     logger.debug("dag node ref: %s", dataJsonObj.toString());
-                    setRecord(id, dataJsonObj);
+                    set(id, dataJsonObj);
                     buildNodeRefResRecordData(id, span, minute, hour, day, second);
                 } else if (Tags.SPAN_KIND_SERVER.equals(Tags.SPAN_KIND.get(span))) {
                     if (span.getParentSpanId() == -1 && CollectionTools.isEmpty(segment.getRefs())) {
@@ -60,7 +60,7 @@ final void analyseNodeRef(Segment segment, long timeSlice, long minute, long hou
                         dataJsonObj.addProperty(NodeRefIndex.FRONT, front);
 
                         String id = timeSlice + Const.ID_SPLIT + front + Const.ID_SPLIT + behind;
-                        setRecord(id, dataJsonObj);
+                        set(id, dataJsonObj);
                         buildNodeRefResRecordData(id, span, minute, hour, day, second);
                     }
                 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefDayAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof RecordData) {
             getSelfContext().lookup(NodeRefDaySave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must RecordData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefDayAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefHourAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof RecordData) {
             getSelfContext().lookup(NodeRefHourSave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must RecordData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefHourAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefMinuteAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof RecordData) {
             getSelfContext().lookup(NodeRefMinuteSave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must RecordData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefMinuteAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumDayAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof MetricData) {
             getSelfContext().lookup(NodeRefResSumDaySave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must MetricData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefResSumDayAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumGroupWithTimeSlice.java
Patch:
@@ -80,7 +80,7 @@ public void onWork(Object request, Object response) throws Exception {
             JsonObject resJsonObj = (JsonObject)response;
             resJsonObj.add("result", nodeRefResSumArray);
         } else {
-            throw new IllegalArgumentException("message instance must be RequestEntity");
+            logger.error("unhandled message, message instance must NodeRefResSumGroupWithTimeSlice.RequestEntity, but is %s", request.getClass().toString());
         }
     }
 
@@ -91,8 +91,6 @@ public RequestEntity(String sliceType, long startTime, long endTime) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeRefResSumGroupWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumHourAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof MetricData) {
             getSelfContext().lookup(NodeRefResSumHourSave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must MetricData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefResSumHourAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumMinuteAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof MetricData) {
             getSelfContext().lookup(NodeRefResSumMinuteSave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must MetricData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefResSumMinuteAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumSearchWithTimeSlice.java
Patch:
@@ -91,7 +91,7 @@ public void onWork(Object request, Object response) throws Exception {
             JsonObject resJsonObj = (JsonObject)response;
             resJsonObj.add("result", nodeRefResSumArray);
         } else {
-            throw new IllegalArgumentException("message instance must be RequestEntity");
+            logger.error("unhandled message, message instance must NodeRefResSumSearchWithTimeSlice.RequestEntity, but is %s", request.getClass().toString());
         }
     }
 
@@ -102,8 +102,6 @@ public RequestEntity(String sliceType, long startTime, long endTime) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeRefResSumSearchWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefSearchWithTimeSlice.java
Patch:
@@ -63,7 +63,7 @@ public void onWork(Object request, Object response) throws Exception {
             JsonObject resJsonObj = (JsonObject)response;
             resJsonObj.add("result", nodeRefArray);
         } else {
-            throw new IllegalArgumentException("message instance must be RequestEntity");
+            logger.error("unhandled message, message instance must NodeRefSearchWithTimeSlice.RequestEntity, but is %s", request.getClass().toString());
         }
     }
 
@@ -74,8 +74,6 @@ public RequestEntity(String sliceType, long startTime, long endTime) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeRefSearchWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithGlobalTraceId.java
Patch:
@@ -62,8 +62,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<SegmentTopGetWithGlobalTraceId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithTimeSlice.java
Patch:
@@ -86,8 +86,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<SegmentTopGetWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/entity/TraceSegmentRef.java
Patch:
@@ -40,7 +40,7 @@ public TraceSegmentRef deserialize(JsonReader reader) throws IOException {
         reader.beginObject();
         while (reader.hasNext()) {
             switch (reader.nextName()) {
-                case "rs":
+                case "ts":
                     String ts = reader.nextString();
                     this.traceSegmentId = ts;
                     JsonBuilder.INSTANCE.append(stringBuilder, "ts", ts, first);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentExceptionWithSegId.java
Patch:
@@ -42,8 +42,6 @@ public RequestEntity(String segId) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<SegmentExceptionWithSegId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentTopSearchWithTimeSlice.java
Patch:
@@ -168,8 +168,6 @@ public int getMaxCost() {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<SegmentTopSearchWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/span/SpanGetWithId.java
Patch:
@@ -48,8 +48,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<SpanGetWithId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/span/persistence/SpanSearchWithId.java
Patch:
@@ -68,8 +68,6 @@ public String getSpanId() {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<SpanSearchWithId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/TestJoinAndSplitPersistenceMember.java
Patch:
@@ -7,8 +7,8 @@
 /**
  * @author pengys5
  */
-public class TestMergePersistenceMember extends MergePersistenceMember {
-    TestMergePersistenceMember(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+public class TestJoinAndSplitPersistenceMember extends JoinAndSplitPersistenceMember {
+    TestJoinAndSplitPersistenceMember(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/datamerge/JsonDataMerge.java
Patch:
@@ -40,7 +40,6 @@ private void mergeData(JsonObject expectData, JsonObject actualData) {
             if (!entry.getValue().isJsonNull()) {
                 value = entry.getValue().getAsString();
             }
-            System.out.printf("key: %s, value: %s \n", key, value);
 
             if (entry.getValue().isJsonNull()) {
                 Assert.assertEquals(true, actualData.get(key).isJsonNull());

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/datamerge/RecordDataMergeJson.java
Patch:
@@ -55,7 +55,6 @@ private void mergeData(JsonObject expectData, JsonObject actualData) {
             if (!entry.getValue().isJsonNull()) {
                 value = entry.getValue().getAsString();
             }
-            System.out.printf("key: %s, value: %s \n", key, value);
 
             if (entry.getValue().isJsonNull()) {
                 Assert.assertEquals(true, actualData.get(key).isJsonNull());
@@ -71,7 +70,7 @@ private void mergeData(JsonObject expectData, JsonObject actualData) {
     private Map<String, JsonObject> recordData2Map(List<RecordData> recordDataList) {
         Map<String, JsonObject> recordDataMap = new HashMap<>();
         for (RecordData recordData : recordDataList) {
-            recordDataMap.put(recordData.getId(), recordData.getRecord());
+            recordDataMap.put(recordData.getId(), recordData.get());
         }
         return recordDataMap;
     }
@@ -86,7 +85,6 @@ private String id2UTCSlice(String id) {
                 changedId = changedId + Const.ID_SPLIT + ids[i];
             }
             changedId = String.valueOf(changedSlice) + changedId;
-            System.out.printf("changedId: %s", changedId);
             return changedId;
         } else {
             return id;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceSearchWithGlobalIdTestCase.java
Patch:
@@ -53,8 +53,9 @@ public void testRole() {
 
     @Test
     public void testFactory() {
-        Assert.assertEquals(GlobalTraceSearchWithGlobalId.class.getSimpleName(), GlobalTraceSearchWithGlobalId.Factory.INSTANCE.role().roleName());
-        Assert.assertEquals(GlobalTraceSearchWithGlobalId.class.getSimpleName(), GlobalTraceSearchWithGlobalId.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
+        GlobalTraceSearchWithGlobalId.Factory factory = new GlobalTraceSearchWithGlobalId.Factory();
+        Assert.assertEquals(GlobalTraceSearchWithGlobalId.class.getSimpleName(), factory.role().roleName());
+        Assert.assertEquals(GlobalTraceSearchWithGlobalId.class.getSimpleName(), factory.workerInstance(null).getClass().getSimpleName());
     }
 
     @Test

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/AbstractPostTestCase.java
Patch:
@@ -41,6 +41,6 @@ public void testOnWork() throws Exception {
     @Test
     public void testOnWorkError() throws Exception {
         post.onWork(new JsonObject());
-//        PowerMockito.verifyPrivate(post).invoke("saveException", any(IllegalArgumentException.class));
+        PowerMockito.verifyPrivate(post).invoke("saveException", any(IllegalArgumentException.class));
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/GetWithHttpServletTestCase.java
Patch:
@@ -30,7 +30,6 @@ public void testDoGet() throws IOException, ServletException {
             @Override
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 Integer status = (Integer)invocation.getArguments()[0];
-                System.out.println(status);
                 Assert.assertEquals(new Integer(200), status);
                 return null;
             }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/PostWithHttpServletTestCase.java
Patch:
@@ -47,7 +47,6 @@ public void testDoPost() throws Exception {
             @Override
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 Integer status = (Integer)invocation.getArguments()[0];
-                System.out.println(status);
                 Assert.assertEquals(new Integer(200), status);
                 return null;
             }
@@ -57,7 +56,6 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
             @Override
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 Segment segment = (Segment)invocation.getArguments()[0];
-                System.out.println(segment.getTraceSegmentId());
                 Assert.assertEquals("TestTest2", segment.getTraceSegmentId());
                 return null;
             }
@@ -76,7 +74,6 @@ public void testDoPostError() throws Exception {
             @Override
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 Integer status = (Integer)invocation.getArguments()[0];
-                System.out.println(status);
                 Assert.assertEquals(new Integer(500), status);
                 return null;
             }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/TestAbstractGet.java
Patch:
@@ -29,8 +29,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<TestAbstractGet> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return TestAbstractGet.WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/TestAbstractGetProvider.java
Patch:
@@ -15,11 +15,11 @@ public String servletPath() {
 
     @Override
     public Role role() {
-        return null;
+        return TestAbstractGet.WorkerRole.INSTANCE;
     }
 
     @Override
     public AbstractWorker workerInstance(ClusterWorkerContext clusterContext) {
-        return new TestAbstractGet(null, null, null);
+        return new TestAbstractGet(role(), null, null);
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/TestAbstractPost.java
Patch:
@@ -39,8 +39,6 @@ public WorkerSelector workerSelector() {
     }
 
     public static class Factory extends AbstractPostProvider<TestAbstractPost> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public String servletPath() {
             return "/TestAbstractPost";

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/TestAbstractPostProvider.java
Patch:
@@ -25,6 +25,6 @@ public Role role() {
 
     @Override
     public AbstractWorker workerInstance(ClusterWorkerContext clusterContext) {
-        return new TestAbstractPost(null, null, null);
+        return new TestAbstractPost(TestAbstractPost.WorkerRole.INSTANCE, null, null);
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeCompWithTimeSliceUseDB.java
Patch:
@@ -23,11 +23,8 @@ public static void main(String[] args) throws Exception {
         nodeCompLoad.onWork(null, response);
 
         JsonArray nodeArray = response.get("result").getAsJsonArray();
-        System.out.println(nodeArray.size());
-        System.out.println(nodeArray.toString());
         for (int i = 0; i < nodeArray.size(); i++) {
             JsonObject nodeJsonObj = nodeArray.get(i).getAsJsonObject();
-            System.out.println(nodeJsonObj);
         }
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingSearchWithTimeSliceUseDB.java
Patch:
@@ -28,11 +28,8 @@ public static void main(String[] args) throws Exception {
         nodeMappingSearch.onWork(requestEntity, response);
 
         JsonArray nodeArray = response.get("result").getAsJsonArray();
-        System.out.println(nodeArray.size());
-        System.out.println(nodeArray.toString());
         for (int i = 0; i < nodeArray.size(); i++) {
             JsonObject nodeJsonObj = nodeArray.get(i).getAsJsonObject();
-            System.out.println(nodeJsonObj);
         }
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefAnalyse.java
Patch:
@@ -26,9 +26,6 @@ public void analyse(String resSumJsonFile, String jsonFile, AbstractNodeRefAnaly
 
         Gson gson = new Gson();
         String recordJsonStr = gson.toJson(recordAnswer.getNodeRefResRecordList());
-        System.out.println(recordJsonStr);
-
-        System.out.println("--------------------------------");
         JsonArray recordJsonArray = gson.fromJson(recordJsonStr, JsonArray.class);
         JsonDataMerge.INSTANCE.merge(resSumJsonFile, recordJsonArray);
     }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefResRecordAnswer.java
Patch:
@@ -21,9 +21,6 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         AbstractNodeRefResSumAnalysis.NodeRefResRecord nodeRefResRecord = (AbstractNodeRefResSumAnalysis.NodeRefResRecord)invocation.getArguments()[0];
         String recordJsonStr = gson.toJson(nodeRefResRecord);
         JsonObject recordJsonObj = gson.fromJson(recordJsonStr, JsonObject.class);
-
-        System.out.printf("NodeRefId: %s \n", nodeRefResRecord.getNodeRefId());
-        System.out.printf("NodeRefResRecord data: %s \n", recordJsonStr);
         nodeRefResRecordList.add(recordJsonObj);
         return null;
     }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumGroupWithTimeSliceUseDB.java
Patch:
@@ -28,10 +28,8 @@ public static void main(String[] args) throws Exception {
         nodeRefSearch.onWork(requestEntity, response);
 
         JsonArray nodeRefArray = response.get("result").getAsJsonArray();
-        System.out.println(nodeRefArray.toString());
         for (int i = 0; i < nodeRefArray.size(); i++) {
             JsonObject nodeRefJsonObj = nodeRefArray.get(i).getAsJsonObject();
-            System.out.println(nodeRefJsonObj);
         }
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumSearchWithTimeSliceUseDB.java
Patch:
@@ -28,10 +28,8 @@ public static void main(String[] args) throws Exception {
         nodeRefSearch.onWork(requestEntity, response);
 
         JsonArray nodeRefArray = response.get("result").getAsJsonArray();
-        System.out.println(nodeRefArray.toString());
         for (int i = 0; i < nodeRefArray.size(); i++) {
             JsonObject nodeRefJsonObj = nodeRefArray.get(i).getAsJsonObject();
-            System.out.println(nodeRefJsonObj);
         }
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefSearchWithTimeSliceUseDB.java
Patch:
@@ -28,10 +28,8 @@ public static void main(String[] args) throws Exception {
         nodeRefSearch.onWork(requestEntity, response);
 
         JsonArray nodeRefArray = response.get("result").getAsJsonArray();
-        System.out.println(nodeRefArray.toString());
         for (int i = 0; i < nodeRefArray.size(); i++) {
             JsonObject nodeRefJsonObj = nodeRefArray.get(i).getAsJsonObject();
-            System.out.println(nodeRefJsonObj);
         }
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/span/persistence/SpanSearchWithIdTestCase.java
Patch:
@@ -53,8 +53,9 @@ public void testRole() {
 
     @Test
     public void testFactory() {
-        Assert.assertEquals(SpanSearchWithId.class.getSimpleName(), SpanSearchWithId.Factory.INSTANCE.role().roleName());
-        Assert.assertEquals(SpanSearchWithId.class.getSimpleName(), SpanSearchWithId.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
+        SpanSearchWithId.Factory factory = new SpanSearchWithId.Factory();
+        Assert.assertEquals(SpanSearchWithId.class.getSimpleName(), factory.role().roleName());
+        Assert.assertEquals(SpanSearchWithId.class.getSimpleName(), factory.workerInstance(null).getClass().getSimpleName());
     }
 
     @Test
@@ -74,7 +75,6 @@ public void testOnWork() throws Exception {
         spanSearchWithId.onWork(request, response);
 
         JsonObject spanJsonObj = response.get(Const.RESULT).getAsJsonObject();
-        System.out.println(spanJsonObj.toString());
         String value = spanJsonObj.get("operationName").getAsString();
         Assert.assertEquals("/portal/", value);
     }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/DateToolsTestCase.java
Patch:
@@ -35,10 +35,10 @@ public void test() {
         Calendar calendar = Calendar.getInstance();
         calendar.setTimeInMillis(1490922929258L);
         calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND) - 3);
-        System.out.println(calendar.getTimeInMillis());
+//        System.out.println(calendar.getTimeInMillis());
         calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND) - 2);
-        System.out.println(calendar.getTimeInMillis());
+//        System.out.println(calendar.getTimeInMillis());
         calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND) - 2);
-        System.out.println(calendar.getTimeInMillis());
+//        System.out.println(calendar.getTimeInMillis());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/IdSplitTestCase.java
Patch:
@@ -13,7 +13,7 @@ public void testIdSplit() {
         String id = "201703221502..-..portal-service..-..[127.0.0.1:8002]";
         String[] ids = id.split(Const.IDS_SPLIT);
         for (String splitId : ids) {
-            System.out.println(splitId);
+//            System.out.println(splitId);
         }
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/MetricDataAggTools.java
Patch:
@@ -16,6 +16,6 @@ public void testOnWork(AbstractClusterWorker agg, MetricDataAnswer metricDataAns
         String id = "2016" + Const.ID_SPLIT + "A" + Const.ID_SPLIT + "B";
         MetricData metricData = new MetricData(id);
         agg.allocateJob(metricData);
-        Assert.assertEquals("A" + Const.ID_SPLIT + "B", metricDataAnswer.getMetricDataList().get(0).toMap().get("aggId"));
+        Assert.assertEquals("A" + Const.ID_SPLIT + "B", metricDataAnswer.getMetricDataList().get(0).asMap().get("aggId"));
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/RecordDataAggTools.java
Patch:
@@ -17,6 +17,6 @@ public void testOnWork(AbstractClusterWorker agg, RecordDataAnswer recordDataAns
         RecordData recordData = new RecordData(id);
         agg.allocateJob(recordData);
         RecordData result = RecordDataTool.INSTANCE.getRecord(recordDataAnswer.getRecordDataList(), id);
-        Assert.assertEquals("A" + Const.ID_SPLIT + "B", result.getRecord().get("aggId").getAsString());
+        Assert.assertEquals("A" + Const.ID_SPLIT + "B", result.get().get("aggId").getAsString());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tracedag/TraceDagWindowDataBuilderTestCase.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * @author pengys5
  */
-public class TraceDagDataBuilderTestCase {
+public class TraceDagWindowDataBuilderTestCase {
 
     private Gson gson = new Gson();
 
@@ -26,11 +26,11 @@ public void testBuild() {
         JsonArray lineArray = dagJsonObj.getAsJsonArray("nodeRefs");
 
         for (int i = 0; i < pointArray.size(); i++) {
-            System.out.println(pointArray.get(i).getAsJsonObject());
+//            System.out.println(pointArray.get(i).getAsJsonObject());
         }
 
         for (int i = 0; i < lineArray.size(); i++) {
-            System.out.println(lineArray.get(i).getAsJsonObject());
+//            System.out.println(lineArray.get(i).getAsJsonObject());
         }
     }
 

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/TraceSegmentTestCase.java
Patch:
@@ -110,8 +110,6 @@ public void testSerialize() {
         message.append(segment);
         String json = gson.toJson(message);
 
-        System.out.println(json);
-
         message = gson.fromJson(json, SegmentsMessage.class);
 
         TraceSegment newSegment = message.getSegments().get(0);

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/client/HTTPRestServiceTestApp.java
Patch:
@@ -50,7 +50,6 @@ private CloseableHttpClient send() {
         post.setEntity(entity);
         try {
             CloseableHttpResponse httpResponse = httpclient.execute(post);
-            System.out.println(httpResponse.getStatusLine().getStatusCode());
         } catch (IOException e) {
             e.printStackTrace();
         }
@@ -69,7 +68,6 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques
                 while ((str = br.readLine()) != null) {
                     wholeStr += str;
                 }
-                System.out.println(wholeStr);
                 response.setContentType("text/html; charset=utf-8");
                 response.setStatus(HttpServletResponse.SC_OK);
                 baseRequest.setHandled(true);

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/SkyWalkingSpanActivation.java
Patch:
@@ -2,11 +2,10 @@
 
 import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
-
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
+import java.util.Map;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
-import java.util.Map;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static net.bytebuddy.matcher.ElementMatchers.takesArguments;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/interceptor/TracerInjectFormatCrossProcessContextInterceptor.java
Patch:
@@ -9,9 +9,9 @@
 import com.a.eye.skywalking.toolkit.opentracing.SkyWalkingTracer;
 
 /**
- * Intercept {@link SkyWalkingTracer#formatCrossProcessPropagationContextData()}
+ * Intercept {@link SkyWalkingTracer#formatInjectCrossProcessPropagationContextData()}
  */
-public class TracerFormatCrossProcessContextInterceptor implements InstanceMethodsAroundInterceptor {
+public class TracerInjectFormatCrossProcessContextInterceptor implements InstanceMethodsAroundInterceptor {
     @Override
     public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext,
         MethodInterceptResult result) {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/PersistenceWorkerListener.java
Patch:
@@ -20,7 +20,7 @@ public List<AbstractLocalSyncWorker> getWorkers() {
         return workers;
     }
 
-    public void reset(){
+    public void reset() {
         workers.clear();
     }
 }

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanSetTagInterceptor.java
Patch:
@@ -24,7 +24,7 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
             ContextManager.activeSpan().setTag(key, (String)value);
         else if (value instanceof Boolean)
             ContextManager.activeSpan().setTag(key, (Boolean)value);
-        else if (value instanceof Integer)
+        else if (value instanceof Integer || value instanceof Short)
             ContextManager.activeSpan().setTag(key, (Integer)value);
         else
             ContextManager.activeSpan().setTag(key, value.toString());

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/MergeAnalysisMember.java
Patch:
@@ -22,7 +22,7 @@ private MergeAnalysisData getMergeAnalysisData() {
     }
 
     final protected void setMergeData(String id, String column, String value) throws Exception {
-        getMergeAnalysisData().getElseCreate(id).setMergeData(column, value);
+        getMergeAnalysisData().getOrCreate(id).setMergeData(column, value);
     }
 
     @Override

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/MergePersistenceMember.java
Patch:
@@ -35,9 +35,9 @@ final public void analyse(Object message) throws Exception {
         if (message instanceof MergeData) {
             MergeData mergeData = (MergeData) message;
             MergePersistenceData data = getPersistenceData();
-            data.holdData();
-            data.getElseCreate(mergeData.getId()).merge(mergeData);
-            data.releaseData();
+            data.hold();
+            data.getOrCreate(mergeData.getId()).merge(mergeData);
+            data.release();
         } else {
             logger.error("unhandled message, message instance must MergeData, but is %s", message.getClass().toString());
         }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/MetricAnalysisMember.java
Patch:
@@ -17,7 +17,7 @@ public MetricAnalysisMember(Role role, ClusterWorkerContext clusterContext, Loca
     }
 
     final protected void setMetric(String id, String column, Long value) throws Exception {
-        getMetricAnalysisData().getElseCreate(id).setMetric(column, value);
+        getMetricAnalysisData().getOrCreate(id).setMetric(column, value);
     }
 
     private MetricAnalysisData getMetricAnalysisData() {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/MetricPersistenceMember.java
Patch:
@@ -34,9 +34,9 @@ final public void analyse(Object message) throws Exception {
         if (message instanceof MetricData) {
             MetricData metricData = (MetricData) message;
             MetricPersistenceData data = getPersistenceData();
-            data.holdData();
-            data.getElseCreate(metricData.getId()).merge(metricData);
-            data.releaseData();
+            data.hold();
+            data.getOrCreate(metricData.getId()).merge(metricData);
+            data.release();
         } else {
             logger.error("unhandled message, message instance must MetricData, but is %s", message.getClass().toString());
         }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/RecordAnalysisMember.java
Patch:
@@ -19,7 +19,7 @@ public RecordAnalysisMember(Role role, ClusterWorkerContext clusterContext, Loca
     }
 
     final public void setRecord(String id, JsonObject record) throws Exception {
-        getRecordAnalysisData().getElseCreate(id).setRecord(record);
+        getRecordAnalysisData().getOrCreate(id).setRecord(record);
     }
 
     private RecordAnalysisData getRecordAnalysisData() {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/RecordPersistenceMember.java
Patch:
@@ -35,9 +35,9 @@ public void analyse(Object message) throws Exception {
             RecordData recordData = (RecordData) message;
             logger.debug("setRecord: id: %s, data: %s", recordData.getId(), recordData.getRecord());
             RecordPersistenceData data = getPersistenceData();
-            data.holdData();
-            data.getElseCreate(recordData.getId()).setRecord(recordData.getRecord());
-            data.releaseData();
+            data.hold();
+            data.getOrCreate(recordData.getId()).setRecord(recordData.getRecord());
+            data.release();
         } else {
             logger.error("message unhandled");
         }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentSave.java
Patch:
@@ -53,12 +53,12 @@ final public void analyse(Object message) throws Exception {
         if (message instanceof Segment) {
             Segment segment = (Segment) message;
             SegmentPersistenceData data = getPersistenceData();
-            data.holdData();
-            data.getElseCreate(segment.getTraceSegmentId() + i).setSegmentStr(segment.getJsonStr());
+            data.hold();
+            data.getOrCreate(segment.getTraceSegmentId() + i).setSegmentStr(segment.getJsonStr());
             if (data.size() >= CacheSizeConfig.Cache.Persistence.SIZE) {
                 persistence(data.asMap());
             }
-            data.releaseData();
+            data.release();
             i++;
         } else {
             logger.error("unhandled message, message instance must Segment, but is %s", message.getClass().toString());

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/MergeAnalysisData.java
Patch:
@@ -10,7 +10,7 @@ public class MergeAnalysisData {
 
     private WindowData<MergeData> windowData = new WindowData(new LinkedHashMap<String, MergeData>());
 
-    public MergeData getElseCreate(String id) {
+    public MergeData getOrCreate(String id) {
         if (!windowData.containsKey(id)) {
             windowData.put(id, new MergeData(id));
         }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/MergePersistenceData.java
Patch:
@@ -7,18 +7,18 @@ public class MergePersistenceData extends Window<MergeData> implements Persisten
 
     private WindowData<MergeData> lockedWindowData;
 
-    public MergeData getElseCreate(String id) {
+    public MergeData getOrCreate(String id) {
         if (!lockedWindowData.containsKey(id)) {
             lockedWindowData.put(id, new MergeData(id));
         }
         return lockedWindowData.get(id);
     }
 
-    public void holdData() {
+    public void hold() {
         lockedWindowData = getCurrentAndHold();
     }
 
-    public void releaseData() {
+    public void release() {
         lockedWindowData.release();
         lockedWindowData = null;
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/MetricAnalysisData.java
Patch:
@@ -10,7 +10,7 @@ public class MetricAnalysisData {
 
     private WindowData<MetricData> windowData = new WindowData(new LinkedHashMap<String, MetricData>());
 
-    public MetricData getElseCreate(String id) {
+    public MetricData getOrCreate(String id) {
         if (!windowData.containsKey(id)) {
             windowData.put(id, new MetricData(id));
         }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/MetricPersistenceData.java
Patch:
@@ -7,18 +7,18 @@ public class MetricPersistenceData extends Window<MetricData> implements Persist
 
     private WindowData<MetricData> lockedWindowData;
 
-    public MetricData getElseCreate(String id) {
+    public MetricData getOrCreate(String id) {
         if (!lockedWindowData.containsKey(id)) {
             lockedWindowData.put(id, new MetricData(id));
         }
         return lockedWindowData.get(id);
     }
 
-    public void holdData() {
+    public void hold() {
         lockedWindowData = getCurrentAndHold();
     }
 
-    public void releaseData() {
+    public void release() {
         lockedWindowData.release();
         lockedWindowData = null;
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/PersistenceData.java
Patch:
@@ -5,9 +5,9 @@
  */
 public interface PersistenceData<T extends Data> {
 
-    T getElseCreate(String id);
+    T getOrCreate(String id);
 
-    void releaseData();
+    void release();
 
-    void holdData();
+    void hold();
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/PersistenceWorkerListener.java
Patch:
@@ -1,8 +1,7 @@
 package com.a.eye.skywalking.collector.worker.storage;
 
 import com.a.eye.skywalking.collector.actor.AbstractLocalSyncWorker;
-
-import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 /**
@@ -11,7 +10,7 @@
 public enum PersistenceWorkerListener {
     INSTANCE;
 
-    private List<AbstractLocalSyncWorker> workers = new ArrayList<>();
+    private List<AbstractLocalSyncWorker> workers = new LinkedList<>();
 
     public void register(AbstractLocalSyncWorker worker) {
         workers.add(worker);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/RecordAnalysisData.java
Patch:
@@ -10,7 +10,7 @@ public class RecordAnalysisData {
 
     private WindowData<RecordData> windowData = new WindowData(new LinkedHashMap<String, RecordData>());
 
-    public RecordData getElseCreate(String id) {
+    public RecordData getOrCreate(String id) {
         if (!windowData.containsKey(id)) {
             windowData.put(id, new RecordData(id));
         }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/RecordPersistenceData.java
Patch:
@@ -7,18 +7,18 @@ public class RecordPersistenceData extends Window<RecordData> implements Persist
 
     private WindowData<RecordData> lockedWindowData;
 
-    public RecordData getElseCreate(String id) {
+    public RecordData getOrCreate(String id) {
         if (!lockedWindowData.containsKey(id)) {
             lockedWindowData.put(id, new RecordData(id));
         }
         return lockedWindowData.get(id);
     }
 
-    public void holdData() {
+    public void hold() {
         lockedWindowData = getCurrentAndHold();
     }
 
-    public void releaseData() {
+    public void release() {
         lockedWindowData.release();
         lockedWindowData = null;
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/SegmentPersistenceData.java
Patch:
@@ -9,18 +9,18 @@ public class SegmentPersistenceData extends Window<SegmentData> implements Persi
 
     private WindowData<SegmentData> lockedWindowData;
 
-    public SegmentData getElseCreate(String id) {
+    public SegmentData getOrCreate(String id) {
         if (!lockedWindowData.containsKey(id)) {
             lockedWindowData.put(id, new SegmentData(id));
         }
         return lockedWindowData.get(id);
     }
 
-    public void holdData() {
+    public void hold() {
         lockedWindowData = getCurrentAndHold();
     }
 
-    public void releaseData() {
+    public void release() {
         lockedWindowData.release();
         lockedWindowData = null;
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/WindowData.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class WindowData<T extends Data> {
     private Map<String, T> data;
-    private boolean isHold;
+    private volatile boolean isHold;
 
     WindowData(Map<String, T> data) {
         this.data = data;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/MergePersistenceMemberTestCase.java
Patch:
@@ -41,7 +41,7 @@ public void init() throws Exception {
         MergeData mergeData = mock(MergeData.class);
 
         when(mergePersistenceMember, "getPersistenceData").thenReturn(persistenceData);
-        when(persistenceData.getElseCreate(Mockito.anyString())).thenReturn(mergeData);
+        when(persistenceData.getOrCreate(Mockito.anyString())).thenReturn(mergeData);
 
         doCallRealMethod().when(mergePersistenceMember).analyse(Mockito.any(MergeData.class));
     }

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/AbstractWorkerProvider.java
Patch:
@@ -24,9 +24,6 @@ final protected ClusterWorkerContext getClusterContext() {
 
     final public WorkerRef create(
         AbstractWorker workerOwner) throws IllegalArgumentException, ProviderNotFoundException {
-        if (workerInstance(clusterContext) == null) {
-            throw new IllegalArgumentException("cannot get worker instance with nothing obtained from workerInstance()");
-        }
 
         if (workerOwner == null) {
             return onCreate(null);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/CollectorBootStartUp.java
Patch:
@@ -5,6 +5,7 @@
 import com.a.eye.skywalking.collector.worker.httpserver.HttpServer;
 import com.a.eye.skywalking.collector.worker.storage.EsClient;
 import com.a.eye.skywalking.collector.worker.storage.IndexCreator;
+import com.a.eye.skywalking.collector.worker.storage.PersistenceTimer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -20,6 +21,7 @@ public static void main(String[] args) throws Exception {
         collectorSystem.boot();
         EsClient.INSTANCE.boot();
         IndexCreator.INSTANCE.create();
+        PersistenceTimer.INSTANCE.boot();
         HttpServer.INSTANCE.boot((ClusterWorkerContext)collectorSystem.getClusterContext());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/config/CacheSizeConfig.java
Patch:
@@ -7,11 +7,11 @@ public class CacheSizeConfig {
 
     public static class Cache {
         public static class Analysis {
-            public static int SIZE = 1000;
+            public static int SIZE = 1024;
         }
 
         public static class Persistence {
-            public static int SIZE = 1000;
+            public static int SIZE = 5000;
         }
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/globaltrace/GlobalTraceGetWithGlobalId.java
Patch:
@@ -46,8 +46,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<GlobalTraceGetWithGlobalId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof MergeData) {
             getSelfContext().lookup(GlobalTraceSave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must MergeData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<GlobalTraceAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceSearchWithGlobalId.java
Patch:
@@ -28,7 +28,7 @@ public class GlobalTraceSearchWithGlobalId extends AbstractLocalSyncWorker {
 
     private Gson gson = new Gson();
 
-    GlobalTraceSearchWithGlobalId(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    public GlobalTraceSearchWithGlobalId(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -60,6 +60,8 @@ protected void onWork(Object request, Object response) throws Exception {
 
             JsonObject responseObj = (JsonObject)response;
             responseObj.addProperty("result", buildTree(spanViewList));
+        } else {
+            logger.error("unhandled message, message instance must String, but is %s", request.getClass().toString());
         }
     }
 
@@ -153,8 +155,6 @@ private void spansDataBuild(Span span, String appCode, String segmentId, List<Sp
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<GlobalTraceSearchWithGlobalId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/analysis/AbstractNodeCompAnalysis.java
Patch:
@@ -28,7 +28,7 @@ abstract class AbstractNodeCompAnalysis extends RecordAnalysisMember {
         super(role, clusterContext, selfContext);
     }
 
-    void analyseSpans(Segment segment) throws Exception {
+   final void analyseSpans(Segment segment) throws Exception {
         List<Span> spanList = segment.getSpans();
         logger.debug("node analysis span isNotEmpty %s", CollectionTools.isNotEmpty(spanList));
 
@@ -52,8 +52,6 @@ void analyseSpans(Segment segment) throws Exception {
                     compJsonObj.addProperty(NodeCompIndex.NAME, Tags.COMPONENT.get(span));
 
                     setRecord(peers, compJsonObj);
-                } else {
-                    logger.error("The span kind value is incorrect which segment record id is %s, the value must client or server", segment.getTraceSegmentId());
                 }
             }
         }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/analysis/AbstractNodeMappingAnalysis.java
Patch:
@@ -26,7 +26,7 @@ abstract class AbstractNodeMappingAnalysis extends RecordAnalysisMember {
         super(role, clusterContext, selfContext);
     }
 
-    void analyseRefs(Segment segment, long timeSlice) throws Exception {
+   final void analyseRefs(Segment segment, long timeSlice) throws Exception {
         List<TraceSegmentRef> segmentRefList = segment.getRefs();
         logger.debug("node mapping analysis refs isNotEmpty %s", CollectionTools.isNotEmpty(segmentRefList));
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeCompLoad.java
Patch:
@@ -49,8 +49,6 @@ public void onWork(Object request, Object response) throws Exception {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeCompLoad> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingSearchWithTimeSlice.java
Patch:
@@ -62,7 +62,7 @@ public void onWork(Object request, Object response) throws Exception {
             JsonObject resJsonObj = (JsonObject)response;
             resJsonObj.add(Const.RESULT, nodeMappingArray);
         } else {
-            throw new IllegalArgumentException("message instance must be RequestEntity");
+            logger.error("unhandled message, message instance must NodeMappingSearchWithTimeSlice.RequestEntity, but is %s", request.getClass().toString());
         }
     }
 
@@ -73,8 +73,6 @@ public RequestEntity(String sliceType, long startTime, long endTime) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeMappingSearchWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefResSumGetGroupWithTimeSlice.java
Patch:
@@ -61,8 +61,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<NodeRefResSumGetGroupWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefDayAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof RecordData) {
             getSelfContext().lookup(NodeRefDaySave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must RecordData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefDayAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefHourAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof RecordData) {
             getSelfContext().lookup(NodeRefHourSave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must RecordData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefHourAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefMinuteAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof RecordData) {
             getSelfContext().lookup(NodeRefMinuteSave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must RecordData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefMinuteAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumDayAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof MetricData) {
             getSelfContext().lookup(NodeRefResSumDaySave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must MetricData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefResSumDayAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumGroupWithTimeSlice.java
Patch:
@@ -80,7 +80,7 @@ public void onWork(Object request, Object response) throws Exception {
             JsonObject resJsonObj = (JsonObject)response;
             resJsonObj.add("result", nodeRefResSumArray);
         } else {
-            throw new IllegalArgumentException("message instance must be RequestEntity");
+            logger.error("unhandled message, message instance must NodeRefResSumGroupWithTimeSlice.RequestEntity, but is %s", request.getClass().toString());
         }
     }
 
@@ -91,8 +91,6 @@ public RequestEntity(String sliceType, long startTime, long endTime) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeRefResSumGroupWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumHourAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof MetricData) {
             getSelfContext().lookup(NodeRefResSumHourSave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must MetricData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefResSumHourAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumMinuteAgg.java
Patch:
@@ -30,13 +30,11 @@ protected void onWork(Object message) throws Exception {
         if (message instanceof MetricData) {
             getSelfContext().lookup(NodeRefResSumMinuteSave.Role.INSTANCE).tell(message);
         } else {
-            logger.error("message unhandled");
+            logger.error("unhandled message, message instance must MetricData, but is %s", message.getClass().toString());
         }
     }
 
     public static class Factory extends AbstractClusterWorkerProvider<NodeRefResSumMinuteAgg> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return Role.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumSearchWithTimeSlice.java
Patch:
@@ -91,7 +91,7 @@ public void onWork(Object request, Object response) throws Exception {
             JsonObject resJsonObj = (JsonObject)response;
             resJsonObj.add("result", nodeRefResSumArray);
         } else {
-            throw new IllegalArgumentException("message instance must be RequestEntity");
+            logger.error("unhandled message, message instance must NodeRefResSumSearchWithTimeSlice.RequestEntity, but is %s", request.getClass().toString());
         }
     }
 
@@ -102,8 +102,6 @@ public RequestEntity(String sliceType, long startTime, long endTime) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeRefResSumSearchWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefSearchWithTimeSlice.java
Patch:
@@ -63,7 +63,7 @@ public void onWork(Object request, Object response) throws Exception {
             JsonObject resJsonObj = (JsonObject)response;
             resJsonObj.add("result", nodeRefArray);
         } else {
-            throw new IllegalArgumentException("message instance must be RequestEntity");
+            logger.error("unhandled message, message instance must NodeRefSearchWithTimeSlice.RequestEntity, but is %s", request.getClass().toString());
         }
     }
 
@@ -74,8 +74,6 @@ public RequestEntity(String sliceType, long startTime, long endTime) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<NodeRefSearchWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithGlobalTraceId.java
Patch:
@@ -62,8 +62,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<SegmentTopGetWithGlobalTraceId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithTimeSlice.java
Patch:
@@ -86,8 +86,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<SegmentTopGetWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/entity/TraceSegmentRef.java
Patch:
@@ -40,7 +40,7 @@ public TraceSegmentRef deserialize(JsonReader reader) throws IOException {
         reader.beginObject();
         while (reader.hasNext()) {
             switch (reader.nextName()) {
-                case "rs":
+                case "ts":
                     String ts = reader.nextString();
                     this.traceSegmentId = ts;
                     JsonBuilder.INSTANCE.append(stringBuilder, "ts", ts, first);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentExceptionWithSegId.java
Patch:
@@ -42,8 +42,6 @@ public RequestEntity(String segId) {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<SegmentExceptionWithSegId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentTopSearchWithGlobalTraceId.java
Patch:
@@ -138,8 +138,6 @@ public String getGlobalTraceId() {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<SegmentTopSearchWithGlobalTraceId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentTopSearchWithTimeSlice.java
Patch:
@@ -168,8 +168,6 @@ public int getMaxCost() {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<SegmentTopSearchWithTimeSlice> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/span/SpanGetWithId.java
Patch:
@@ -48,8 +48,6 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
     }
 
     public static class Factory extends AbstractGetProvider<SpanGetWithId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/span/persistence/SpanSearchWithId.java
Patch:
@@ -68,8 +68,6 @@ public String getSpanId() {
     }
 
     public static class Factory extends AbstractLocalSyncWorkerProvider<SpanSearchWithId> {
-        public static Factory INSTANCE = new Factory();
-
         @Override
         public Role role() {
             return WorkerRole.INSTANCE;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/MergePersistenceMemberTestCase.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.a.eye.skywalking.collector.actor.ClusterWorkerContext;
 import com.a.eye.skywalking.collector.actor.LocalWorkerContext;
-import com.a.eye.skywalking.collector.queue.EndOfBatchCommand;
 import com.a.eye.skywalking.collector.worker.mock.MockEsBulkClient;
 import com.a.eye.skywalking.collector.worker.storage.EsClient;
 import com.a.eye.skywalking.collector.worker.storage.MergeData;
@@ -53,7 +52,6 @@ public void testAnalyse() throws Exception {
         MergeData mergeData = new MergeData(id);
         mergeData.setMergeData("Column", "VALUE");
 
-//        mergePersistenceMember.analyse(mergeData);
-//        mergePersistenceMember.onWork(new EndOfBatchCommand());
+        mergePersistenceMember.analyse(mergeData);
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/TestMergeAnalysisMember.java
Patch:
@@ -3,6 +3,7 @@
 import com.a.eye.skywalking.collector.actor.ClusterWorkerContext;
 import com.a.eye.skywalking.collector.actor.LocalWorkerContext;
 import com.a.eye.skywalking.collector.actor.ProviderNotFoundException;
+import com.a.eye.skywalking.collector.actor.WorkerRefs;
 import com.a.eye.skywalking.collector.actor.selector.WorkerSelector;
 
 /**
@@ -25,8 +26,8 @@ public void preStart() throws ProviderNotFoundException {
     }
 
     @Override
-    protected void aggregation() throws Exception {
-
+    protected WorkerRefs aggWorkRefs() {
+        return null;
     }
 
     public enum Role implements com.a.eye.skywalking.collector.actor.Role {

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/datamerge/MetricDataMergeJson.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.a.eye.skywalking.collector.worker.Const;
 import com.a.eye.skywalking.collector.worker.storage.MetricData;
-import com.a.eye.skywalking.collector.worker.storage.RecordData;
 import com.a.eye.skywalking.collector.worker.tools.DateTools;
 import com.a.eye.skywalking.collector.worker.tools.JsonFileReader;
 import com.google.gson.Gson;
@@ -75,7 +74,7 @@ private Map<String, JsonObject> recordData2Map(List<MetricData> recordDataList)
         Map<String, JsonObject> recordDataMap = new HashMap<>();
         Gson gson = new Gson();
         for (MetricData metricData : recordDataList) {
-            JsonObject jsonObject = gson.fromJson(gson.toJson(metricData.toMap()), JsonObject.class);
+            JsonObject jsonObject = gson.fromJson(gson.toJson(metricData.asMap()), JsonObject.class);
             recordDataMap.put(id2UTCSlice(metricData.getId()), jsonObject);
         }
         return recordDataMap;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceSearchWithGlobalIdTestCase.java
Patch:
@@ -53,8 +53,9 @@ public void testRole() {
 
     @Test
     public void testFactory() {
-        Assert.assertEquals(GlobalTraceSearchWithGlobalId.class.getSimpleName(), GlobalTraceSearchWithGlobalId.Factory.INSTANCE.role().roleName());
-        Assert.assertEquals(GlobalTraceSearchWithGlobalId.class.getSimpleName(), GlobalTraceSearchWithGlobalId.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
+        GlobalTraceSearchWithGlobalId.Factory factory = new GlobalTraceSearchWithGlobalId.Factory();
+        Assert.assertEquals(GlobalTraceSearchWithGlobalId.class.getSimpleName(), factory.role().roleName());
+        Assert.assertEquals(GlobalTraceSearchWithGlobalId.class.getSimpleName(), factory.workerInstance(null).getClass().getSimpleName());
     }
 
     @Test

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceSearchWithGlobalIdUseDB.java
Patch:
@@ -2,8 +2,6 @@
 
 import com.a.eye.skywalking.collector.actor.ClusterWorkerContext;
 import com.a.eye.skywalking.collector.actor.LocalWorkerContext;
-import com.a.eye.skywalking.collector.worker.node.NodeMappingIndex;
-import com.a.eye.skywalking.collector.worker.node.persistence.NodeMappingSearchWithTimeSlice;
 import com.a.eye.skywalking.collector.worker.storage.EsClient;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/AbstractPostTestCase.java
Patch:
@@ -41,6 +41,6 @@ public void testOnWork() throws Exception {
     @Test
     public void testOnWorkError() throws Exception {
         post.onWork(new JsonObject());
-//        PowerMockito.verifyPrivate(post).invoke("saveException", any(IllegalArgumentException.class));
+        PowerMockito.verifyPrivate(post).invoke("saveException", any(IllegalArgumentException.class));
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/mock/MergeDataAnswer.java
Patch:
@@ -20,9 +20,9 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         MergeData mergeData = (MergeData)invocation.getArguments()[0];
         System.out.printf("id: %s \n", mergeData.getId());
 
-        for (Map.Entry<String, String> entry : mergeData.toMap().entrySet()) {
-            System.out.printf("key: %s, value: %s \n", entry.getKey(), entry.getValue());
-        }
+//        for (Map.Entry<String, ?> entry : mergeData.toSource().entrySet()) {
+//            System.out.printf("key: %s, value: %s \n", entry.getKey(), entry.getValue());
+//        }
         mergeDataList.add(mergeData);
         return null;
     }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/mock/MetricDataAnswer.java
Patch:
@@ -24,8 +24,8 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         System.out.printf("id: %s \n", metricData.getId());
         metricDataList.add(metricData);
         Gson gson = new Gson();
-        String jsonStr = gson.toJson(metricData.toMap());
-        System.out.printf("data: %s \n", jsonStr);
+//        String jsonStr = gson.toJson(metricData.toMap());
+//        System.out.printf("data: %s \n", jsonStr);
         return null;
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefAnalyse.java
Patch:
@@ -28,7 +28,6 @@ public void analyse(String resSumJsonFile, String jsonFile, AbstractNodeRefAnaly
         String recordJsonStr = gson.toJson(recordAnswer.getNodeRefResRecordList());
         System.out.println(recordJsonStr);
 
-        System.out.println("--------------------------------");
         JsonArray recordJsonArray = gson.fromJson(recordJsonStr, JsonArray.class);
         JsonDataMerge.INSTANCE.merge(resSumJsonFile, recordJsonArray);
     }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/span/persistence/SpanSearchWithIdTestCase.java
Patch:
@@ -53,8 +53,9 @@ public void testRole() {
 
     @Test
     public void testFactory() {
-        Assert.assertEquals(SpanSearchWithId.class.getSimpleName(), SpanSearchWithId.Factory.INSTANCE.role().roleName());
-        Assert.assertEquals(SpanSearchWithId.class.getSimpleName(), SpanSearchWithId.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
+        SpanSearchWithId.Factory factory = new SpanSearchWithId.Factory();
+        Assert.assertEquals(SpanSearchWithId.class.getSimpleName(), factory.role().roleName());
+        Assert.assertEquals(SpanSearchWithId.class.getSimpleName(), factory.workerInstance(null).getClass().getSimpleName());
     }
 
     @Test

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/storage/RecordWindowDataTestCase.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * @author pengys5
  */
-public class RecordDataTestCase {
+public class RecordWindowDataTestCase {
 
     @Test
     public void testConstruction() {

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/MergeDataAggTools.java
Patch:
@@ -17,6 +17,6 @@ public void testOnWork(AbstractClusterWorker agg, MergeDataAnswer mergeDataAnswe
         MergeData mergeData = new MergeData(id);
         mergeData.setMergeData("Column", "VALUE");
         agg.allocateJob(mergeData);
-        Assert.assertEquals("VALUE", mergeDataAnswer.getMergeDataList().get(0).toMap().get("Column"));
+        Assert.assertEquals("VALUE", mergeDataAnswer.getMergeDataList().get(0).asMap().get("Column"));
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/MetricDataAggTools.java
Patch:
@@ -16,6 +16,6 @@ public void testOnWork(AbstractClusterWorker agg, MetricDataAnswer metricDataAns
         String id = "2016" + Const.ID_SPLIT + "A" + Const.ID_SPLIT + "B";
         MetricData metricData = new MetricData(id);
         agg.allocateJob(metricData);
-        Assert.assertEquals("A" + Const.ID_SPLIT + "B", metricDataAnswer.getMetricDataList().get(0).toMap().get("aggId"));
+        Assert.assertEquals("A" + Const.ID_SPLIT + "B", metricDataAnswer.getMetricDataList().get(0).asMap().get("aggId"));
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tracedag/TraceDagWindowDataBuilderTestCase.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * @author pengys5
  */
-public class TraceDagDataBuilderTestCase {
+public class TraceDagWindowDataBuilderTestCase {
 
     private Gson gson = new Gson();
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/analysis/AbstractNodeMappingAnalysis.java
Patch:
@@ -5,9 +5,9 @@
 import com.a.eye.skywalking.collector.worker.Const;
 import com.a.eye.skywalking.collector.worker.RecordAnalysisMember;
 import com.a.eye.skywalking.collector.worker.node.NodeMappingIndex;
+import com.a.eye.skywalking.collector.worker.segment.entity.Segment;
+import com.a.eye.skywalking.collector.worker.segment.entity.TraceSegmentRef;
 import com.a.eye.skywalking.collector.worker.tools.CollectionTools;
-import com.a.eye.skywalking.trace.TraceSegment;
-import com.a.eye.skywalking.trace.TraceSegmentRef;
 import com.google.gson.JsonObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -26,7 +26,7 @@ abstract class AbstractNodeMappingAnalysis extends RecordAnalysisMember {
         super(role, clusterContext, selfContext);
     }
 
-    void analyseRefs(TraceSegment segment, long timeSlice) throws Exception {
+    void analyseRefs(Segment segment, long timeSlice) throws Exception {
         List<TraceSegmentRef> segmentRefList = segment.getRefs();
         logger.debug("node mapping analysis refs isNotEmpty %s", CollectionTools.isNotEmpty(segmentRefList));
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/entity/SpanView.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.collector.worker.segment.logic;
+package com.a.eye.skywalking.collector.worker.segment.entity;
 
 import java.util.HashSet;
 import java.util.Set;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentCostSave.java
Patch:
@@ -9,10 +9,10 @@
 import com.a.eye.skywalking.collector.worker.config.WorkerConfig;
 import com.a.eye.skywalking.collector.worker.segment.SegmentCostIndex;
 import com.a.eye.skywalking.collector.worker.segment.SegmentPost;
+import com.a.eye.skywalking.collector.worker.segment.entity.Segment;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
 import com.a.eye.skywalking.collector.worker.storage.RecordData;
 import com.a.eye.skywalking.collector.worker.tools.CollectionTools;
-import com.a.eye.skywalking.trace.Span;
-import com.a.eye.skywalking.trace.TraceSegment;
 import com.google.gson.JsonObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -43,7 +43,7 @@ protected SegmentCostSave(com.a.eye.skywalking.collector.actor.Role role, Cluste
     public void analyse(Object message) throws Exception {
         if (message instanceof SegmentPost.SegmentWithTimeSlice) {
             SegmentPost.SegmentWithTimeSlice segmentWithTimeSlice = (SegmentPost.SegmentWithTimeSlice)message;
-            TraceSegment segment = segmentWithTimeSlice.getTraceSegment();
+            Segment segment = segmentWithTimeSlice.getSegment();
 
             if (CollectionTools.isNotEmpty(segment.getSpans())) {
                 for (Span span : segment.getSpans()) {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/ClientSpanIsLeafTools.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.collector.worker.tools;
 
-import com.a.eye.skywalking.trace.Span;
-import com.a.eye.skywalking.trace.tag.Tags;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
+import com.a.eye.skywalking.collector.worker.segment.entity.tag.Tags;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/SpanPeersTools.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.a.eye.skywalking.api.util.StringUtil;
 import com.a.eye.skywalking.collector.worker.Const;
-import com.a.eye.skywalking.trace.Span;
-import com.a.eye.skywalking.trace.tag.Tags;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
+import com.a.eye.skywalking.collector.worker.segment.entity.tag.Tags;
 
 /**
  * @author pengys5

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/TestAbstractPost.java
Patch:
@@ -21,8 +21,7 @@ public void preStart() throws ProviderNotFoundException {
     }
 
     @Override
-    protected void onReceive(String reqJsonStr) throws Exception {
-
+    protected void onReceive(Object message) throws Exception {
     }
 
     public enum WorkerRole implements Role {

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentPostTestCase.java
Patch:
@@ -260,7 +260,7 @@ public void initNodeNodeMappingAnalysis() throws Exception {
         doAnswer(nodeMappingDayAnalysisAnswer).when(nodeMappingDayAnalysis).tell(Mockito.argThat(new IsSegmentWithTimeSlice()));
     }
 
-    @Test
+//    @Test
     public void testOnReceive() throws Exception {
         String cacheServiceSegmentAsString = segmentMock.mockCacheServiceSegmentAsString();
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentRealPost.java
Patch:
@@ -16,13 +16,13 @@ public static void main(String[] args) throws Exception {
 //        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", portalServiceExceptionSegmentAsString);
 
         String cacheServiceSegmentAsString = mock.mockCacheServiceSegmentAsString();
-        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", cacheServiceSegmentAsString);
+        HttpClientTools.INSTANCE.post("http://localhost:12800/segments", cacheServiceSegmentAsString);
 
         String persistenceServiceSegmentAsString = mock.mockPersistenceServiceSegmentAsString();
-        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", persistenceServiceSegmentAsString);
+        HttpClientTools.INSTANCE.post("http://localhost:12800/segments", persistenceServiceSegmentAsString);
 
         String portalServiceSegmentAsString = mock.mockPortalServiceSegmentAsString();
-        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", portalServiceSegmentAsString);
+        HttpClientTools.INSTANCE.post("http://localhost:12800/segments", portalServiceSegmentAsString);
 
 //        String specialSegmentAsString = mock.mockSpecialSegmentAsString();
 //        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", specialSegmentAsString);

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/SpanPeersToolsTestCase.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.collector.worker.tools;
 
-import com.a.eye.skywalking.trace.Span;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
 import org.junit.Assert;
 import org.junit.Test;
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/analysis/AbstractNodeMappingAnalysis.java
Patch:
@@ -5,9 +5,9 @@
 import com.a.eye.skywalking.collector.worker.Const;
 import com.a.eye.skywalking.collector.worker.RecordAnalysisMember;
 import com.a.eye.skywalking.collector.worker.node.NodeMappingIndex;
+import com.a.eye.skywalking.collector.worker.segment.entity.Segment;
+import com.a.eye.skywalking.collector.worker.segment.entity.TraceSegmentRef;
 import com.a.eye.skywalking.collector.worker.tools.CollectionTools;
-import com.a.eye.skywalking.trace.TraceSegment;
-import com.a.eye.skywalking.trace.TraceSegmentRef;
 import com.google.gson.JsonObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -26,7 +26,7 @@ abstract class AbstractNodeMappingAnalysis extends RecordAnalysisMember {
         super(role, clusterContext, selfContext);
     }
 
-    void analyseRefs(TraceSegment segment, long timeSlice) throws Exception {
+    void analyseRefs(Segment segment, long timeSlice) throws Exception {
         List<TraceSegmentRef> segmentRefList = segment.getRefs();
         logger.debug("node mapping analysis refs isNotEmpty %s", CollectionTools.isNotEmpty(segmentRefList));
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/entity/SpanView.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.collector.worker.segment.logic;
+package com.a.eye.skywalking.collector.worker.segment.entity;
 
 import java.util.HashSet;
 import java.util.Set;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentCostSave.java
Patch:
@@ -9,10 +9,10 @@
 import com.a.eye.skywalking.collector.worker.config.WorkerConfig;
 import com.a.eye.skywalking.collector.worker.segment.SegmentCostIndex;
 import com.a.eye.skywalking.collector.worker.segment.SegmentPost;
+import com.a.eye.skywalking.collector.worker.segment.entity.Segment;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
 import com.a.eye.skywalking.collector.worker.storage.RecordData;
 import com.a.eye.skywalking.collector.worker.tools.CollectionTools;
-import com.a.eye.skywalking.trace.Span;
-import com.a.eye.skywalking.trace.TraceSegment;
 import com.google.gson.JsonObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -43,7 +43,7 @@ protected SegmentCostSave(com.a.eye.skywalking.collector.actor.Role role, Cluste
     public void analyse(Object message) throws Exception {
         if (message instanceof SegmentPost.SegmentWithTimeSlice) {
             SegmentPost.SegmentWithTimeSlice segmentWithTimeSlice = (SegmentPost.SegmentWithTimeSlice)message;
-            TraceSegment segment = segmentWithTimeSlice.getTraceSegment();
+            Segment segment = segmentWithTimeSlice.getSegment();
 
             if (CollectionTools.isNotEmpty(segment.getSpans())) {
                 for (Span span : segment.getSpans()) {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/ClientSpanIsLeafTools.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.collector.worker.tools;
 
-import com.a.eye.skywalking.trace.Span;
-import com.a.eye.skywalking.trace.tag.Tags;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
+import com.a.eye.skywalking.collector.worker.segment.entity.tag.Tags;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/SpanPeersTools.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.a.eye.skywalking.api.util.StringUtil;
 import com.a.eye.skywalking.collector.worker.Const;
-import com.a.eye.skywalking.trace.Span;
-import com.a.eye.skywalking.trace.tag.Tags;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
+import com.a.eye.skywalking.collector.worker.segment.entity.tag.Tags;
 
 /**
  * @author pengys5

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/TestAbstractPost.java
Patch:
@@ -21,8 +21,7 @@ public void preStart() throws ProviderNotFoundException {
     }
 
     @Override
-    protected void onReceive(String reqJsonStr) throws Exception {
-
+    protected void onReceive(Object message) throws Exception {
     }
 
     public enum WorkerRole implements Role {

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentPostTestCase.java
Patch:
@@ -260,7 +260,7 @@ public void initNodeNodeMappingAnalysis() throws Exception {
         doAnswer(nodeMappingDayAnalysisAnswer).when(nodeMappingDayAnalysis).tell(Mockito.argThat(new IsSegmentWithTimeSlice()));
     }
 
-    @Test
+//    @Test
     public void testOnReceive() throws Exception {
         String cacheServiceSegmentAsString = segmentMock.mockCacheServiceSegmentAsString();
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentRealPost.java
Patch:
@@ -16,13 +16,13 @@ public static void main(String[] args) throws Exception {
 //        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", portalServiceExceptionSegmentAsString);
 
         String cacheServiceSegmentAsString = mock.mockCacheServiceSegmentAsString();
-        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", cacheServiceSegmentAsString);
+        HttpClientTools.INSTANCE.post("http://localhost:12800/segments", cacheServiceSegmentAsString);
 
         String persistenceServiceSegmentAsString = mock.mockPersistenceServiceSegmentAsString();
-        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", persistenceServiceSegmentAsString);
+        HttpClientTools.INSTANCE.post("http://localhost:12800/segments", persistenceServiceSegmentAsString);
 
         String portalServiceSegmentAsString = mock.mockPortalServiceSegmentAsString();
-        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", portalServiceSegmentAsString);
+        HttpClientTools.INSTANCE.post("http://localhost:12800/segments", portalServiceSegmentAsString);
 
 //        String specialSegmentAsString = mock.mockSpecialSegmentAsString();
 //        HttpClientTools.INSTANCE.post("http://localhost:7001/segments", specialSegmentAsString);

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/SpanPeersToolsTestCase.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.collector.worker.tools;
 
-import com.a.eye.skywalking.trace.Span;
+import com.a.eye.skywalking.collector.worker.segment.entity.Span;
 import org.junit.Assert;
 import org.junit.Test;
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/context/TracerContext.java
Patch:
@@ -7,7 +7,6 @@
 import com.a.eye.skywalking.trace.TraceSegment;
 import com.a.eye.skywalking.trace.TraceSegmentRef;
 import com.a.eye.skywalking.trace.tag.Tags;
-import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 

File: skywalking-application-toolkit/skywalking-toolkit-log4j-2.x/src/main/java/com/a/eye/skywalking/toolkit/log/log4j/v2/x/TraceIdConverter.java
Patch:
@@ -1,6 +1,5 @@
 package com.a.eye.skywalking.toolkit.log.log4j.v2.x;
 
-
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
 import org.apache.logging.log4j.core.pattern.ConverterKeys;
@@ -21,7 +20,7 @@ public class TraceIdConverter extends LogEventPatternConverter {
     /**
      * Constructs an instance of LoggingEventPatternConverter.
      *
-     * @param name  name of converter.
+     * @param name name of converter.
      * @param style CSS style for output.
      */
     protected TraceIdConverter(String name, String style) {

File: skywalking-application-toolkit/skywalking-toolkit-opentracing/src/main/java/com/a/eye/skywalking/toolkit/opentracing/SkyWalkingSpan.java
Patch:
@@ -18,7 +18,7 @@ public class SkyWalkingSpan implements Span, SpanContext {
 
     private final Map<String, String> baggageItems;
 
-    SkyWalkingSpan(String operationName, long startTime, Map<String, String> tags){
+    SkyWalkingSpan(String operationName, long startTime, Map<String, String> tags) {
         this.operationName = operationName;
         this.startTime = startTime;
         this.tags = tags;

File: skywalking-application-toolkit/skywalking-toolkit-opentracing/src/main/java/com/a/eye/skywalking/toolkit/opentracing/TextMapContext.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * Created by wusheng on 2016/12/21.
  */
-public class TextMapContext  implements SpanContext {
+public class TextMapContext implements SpanContext {
     private final TextMap textMap;
 
     TextMapContext(TextMap textMap) {

File: skywalking-application-toolkit/skywalking-toolkit-opentracing/src/test/java/com/a/eye/skywalking/toolkit/opentracing/SkyWalkingTracerTest.java
Patch:
@@ -14,7 +14,7 @@
  */
 public class SkyWalkingTracerTest {
     @Test
-    public void testBuildSpan(){
+    public void testBuildSpan() {
         Tracer tracer = SkyWalkingTracer.INSTANCE;
         Tracer.SpanBuilder spanBuilder = tracer.buildSpan("/http/serviceName");
 
@@ -23,7 +23,7 @@ public void testBuildSpan(){
             @Override
             public Iterator<Map.Entry<String, String>> iterator() {
                 throw new UnsupportedOperationException(
-                        "TextMapInjectAdapter should only be used with Tracer.inject()");
+                    "TextMapInjectAdapter should only be used with Tracer.inject()");
             }
 
             @Override

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/AbstractLocalAsyncWorkerProvider.java
Patch:
@@ -13,9 +13,9 @@ public abstract class AbstractLocalAsyncWorkerProvider<T extends AbstractLocalAs
 
     public abstract int queueSize();
 
-    @Override
-    final public WorkerRef onCreate(LocalWorkerContext localContext) throws IllegalArgumentException, ProviderNotFoundException {
-        T localAsyncWorker = (T) workerInstance(getClusterContext());
+    @Override    final public WorkerRef onCreate(
+        LocalWorkerContext localContext) throws IllegalArgumentException, ProviderNotFoundException {
+        T localAsyncWorker = (T)workerInstance(getClusterContext());
         localAsyncWorker.preStart();
 
         // Specify the size of the ring buffer, must be power of 2.

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/AbstractLocalSyncWorkerProvider.java
Patch:
@@ -5,9 +5,9 @@
  */
 public abstract class AbstractLocalSyncWorkerProvider<T extends AbstractLocalSyncWorker> extends AbstractLocalWorkerProvider<T> {
 
-    @Override
-    final public WorkerRef onCreate(LocalWorkerContext localContext) throws IllegalArgumentException, ProviderNotFoundException {
-        T localSyncWorker = (T) workerInstance(getClusterContext());
+    @Override    final public WorkerRef onCreate(
+        LocalWorkerContext localContext) throws IllegalArgumentException, ProviderNotFoundException {
+        T localSyncWorker = (T)workerInstance(getClusterContext());
         localSyncWorker.preStart();
 
         LocalSyncWorkerRef workerRef = new LocalSyncWorkerRef(role(), localSyncWorker);

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/LocalWorkerContext.java
Patch:
@@ -1,8 +1,5 @@
 package com.a.eye.skywalking.collector.actor;
 
-import java.util.List;
-import java.util.Map;
-
 /**
  * @author pengys5
  */

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/ProviderNotFoundException.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.collector.actor;
 
 public class ProviderNotFoundException extends Exception {
-    public ProviderNotFoundException(String message){
+    public ProviderNotFoundException(String message) {
         super(message);
     }
 }

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/UsedRoleNameException.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.collector.actor;
 
 public class UsedRoleNameException extends Exception {
-    public UsedRoleNameException(String message){
+    public UsedRoleNameException(String message) {
         super(message);
     }
 }

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/WorkerNotFoundException.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.collector.actor;
 
 public class WorkerNotFoundException extends Exception {
-    public WorkerNotFoundException(String message){
+    public WorkerNotFoundException(String message) {
         super(message);
     }
 }

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/WorkerRefs.java
Patch:
@@ -29,7 +29,7 @@ public void tell(Object message) throws Exception {
     public void ask(Object request, Object response) throws Exception {
         WorkerRef workerRef = workerSelector.select(workerRefs, request);
         if (workerRef instanceof LocalSyncWorkerRef) {
-            ((LocalSyncWorkerRef) workerRef).ask(request, response);
+            ((LocalSyncWorkerRef)workerRef).ask(request, response);
         } else {
             throw new IllegalAccessError("only local sync worker can ask");
         }

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/cluster/Const.java
Patch:
@@ -4,5 +4,5 @@
  * @author pengys5
  */
 public class Const {
-    public static final String SystemName = "ClusterSystem";
+    public static final String SYSTEM_NAME = "ClusterSystem";
 }

File: skywalking-collector/skywalking-collector-commons/src/main/java/com/a/eye/skywalking/collector/commons/serializer/JsonSerializer.java
Patch:
@@ -20,7 +20,7 @@ public int identifier() {
 
     @Override
     public byte[] toBinary(Object o) {
-        JsonObject jsonObject = (JsonObject) o;
+        JsonObject jsonObject = (JsonObject)o;
         return jsonObject.toString().getBytes();
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/AnalysisMember.java
Patch:
@@ -19,8 +19,7 @@ public void preStart() throws ProviderNotFoundException {
         super.preStart();
     }
 
-    @Override
-    final public void onWork(Object message) throws Exception {
+    @Override final public void onWork(Object message) throws Exception {
         if (message instanceof EndOfBatchCommand) {
             aggregation();
         } else {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/CollectorBootStartUp.java
Patch:
@@ -12,15 +12,14 @@
  * @author pengys5
  */
 public class CollectorBootStartUp {
-
-    private static Logger logger = LogManager.getFormatterLogger(CollectorBootStartUp.class);
+    private static final Logger logger = LogManager.getFormatterLogger(CollectorBootStartUp.class);
 
     public static void main(String[] args) throws Exception {
         logger.info("collector system starting....");
         CollectorSystem collectorSystem = new CollectorSystem();
         collectorSystem.boot();
         EsClient.INSTANCE.boot();
         IndexCreator.INSTANCE.create();
-        HttpServer.INSTANCE.boot((ClusterWorkerContext) collectorSystem.getClusterContext());
+        HttpServer.INSTANCE.boot((ClusterWorkerContext)collectorSystem.getClusterContext());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/MergeAnalysisMember.java
Patch:
@@ -25,7 +25,7 @@ private MergePersistenceData getPersistenceData() {
 
     final protected void setMergeData(String id, String column, String value) throws Exception {
         getPersistenceData().getElseCreate(id).setMergeData(column, value);
-        if (getPersistenceData().size() >= CacheSizeConfig.Cache.Analysis.size) {
+        if (getPersistenceData().size() >= CacheSizeConfig.Cache.Analysis.SIZE) {
             aggregation();
         }
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/MetricAnalysisMember.java
Patch:
@@ -20,7 +20,7 @@ public MetricAnalysisMember(Role role, ClusterWorkerContext clusterContext, Loca
 
     final protected void setMetric(String id, String column, Long value) throws Exception {
         persistenceData.getElseCreate(id).setMetric(column, value);
-        if (persistenceData.size() >= CacheSizeConfig.Cache.Persistence.size) {
+        if (persistenceData.size() >= CacheSizeConfig.Cache.Persistence.SIZE) {
             aggregation();
         }
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/RecordAnalysisMember.java
Patch:
@@ -21,7 +21,7 @@ public RecordAnalysisMember(Role role, ClusterWorkerContext clusterContext, Loca
 
     final public void setRecord(String id, JsonObject record) throws Exception {
         persistenceData.getElseCreate(id).setRecord(record);
-        if (persistenceData.size() >= CacheSizeConfig.Cache.Analysis.size) {
+        if (persistenceData.size() >= CacheSizeConfig.Cache.Analysis.SIZE) {
             aggregation();
         }
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/RecordPersistenceMember.java
Patch:
@@ -37,10 +37,10 @@ private RecordPersistenceData getPersistenceData() {
     @Override
     public void analyse(Object message) throws Exception {
         if (message instanceof RecordData) {
-            RecordData recordData = (RecordData) message;
+            RecordData recordData = (RecordData)message;
             logger.debug("setRecord: id: %s, data: %s", recordData.getId(), recordData.getRecord());
             getPersistenceData().getElseCreate(recordData.getId()).setRecord(recordData.getRecord());
-            if (getPersistenceData().size() >= CacheSizeConfig.Cache.Persistence.size) {
+            if (getPersistenceData().size() >= CacheSizeConfig.Cache.Persistence.SIZE) {
                 persistence();
             }
         } else {
@@ -58,7 +58,7 @@ protected void persistence() {
     private boolean saveToEs() {
         Client client = EsClient.INSTANCE.getClient();
         BulkRequestBuilder bulkRequest = client.prepareBulk();
-        logger.debug("persistenceData size: %s", getPersistenceData().size());
+        logger.debug("persistenceData SIZE: %s", getPersistenceData().size());
 
         Iterator<Map.Entry<String, RecordData>> iterator = getPersistenceData().iterator();
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/TimeSlice.java
Patch:
@@ -8,7 +8,7 @@ public abstract class TimeSlice {
     private long startTime;
     private long endTime;
 
-    public TimeSlice(String sliceType,long startTime, long endTime) {
+    public TimeSlice(String sliceType, long startTime, long endTime) {
         this.startTime = startTime;
         this.endTime = endTime;
         this.sliceType = sliceType;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/config/CacheSizeConfig.java
Patch:
@@ -7,11 +7,11 @@ public class CacheSizeConfig {
 
     public static class Cache {
         public static class Analysis {
-            public static int size = 1000;
+            public static int SIZE = 1000;
         }
 
         public static class Persistence {
-            public static int size = 1000;
+            public static int SIZE = 1000;
         }
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/config/HttpConfig.java
Patch:
@@ -6,8 +6,8 @@
 public class HttpConfig {
 
     public static class Http {
-        public static String hostname = "";
-        public static String port = "";
-        public static String contextPath = "";
+        public static String HOSTNAME = "";
+        public static String PORT = "";
+        public static String CONTEXTPATH = "";
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/globaltrace/analysis/GlobalTraceAnalysis.java
Patch:
@@ -29,14 +29,14 @@ public class GlobalTraceAnalysis extends MergeAnalysisMember {
     @Override
     public void analyse(Object message) throws Exception {
         if (message instanceof SegmentPost.SegmentWithTimeSlice) {
-            SegmentPost.SegmentWithTimeSlice segmentWithTimeSlice = (SegmentPost.SegmentWithTimeSlice) message;
+            SegmentPost.SegmentWithTimeSlice segmentWithTimeSlice = (SegmentPost.SegmentWithTimeSlice)message;
             TraceSegment segment = segmentWithTimeSlice.getTraceSegment();
             String subSegmentId = segment.getTraceSegmentId();
             List<DistributedTraceId> globalTraceIdList = segment.getRelatedGlobalTraces();
             if (CollectionTools.isNotEmpty(globalTraceIdList)) {
                 for (DistributedTraceId disTraceId : globalTraceIdList) {
                     String traceId = disTraceId.get();
-                    setMergeData(traceId, GlobalTraceIndex.SubSegIds, subSegmentId);
+                    setMergeData(traceId, GlobalTraceIndex.SUB_SEG_IDS, subSegmentId);
                 }
             }
         }
@@ -65,7 +65,7 @@ public GlobalTraceAnalysis workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int queueSize() {
-            return WorkerConfig.Queue.GlobalTrace.GlobalTraceAnalysis.Size;
+            return WorkerConfig.Queue.GlobalTrace.GlobalTraceAnalysis.SIZE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceAgg.java
Patch:
@@ -15,7 +15,8 @@ public class GlobalTraceAgg extends AbstractClusterWorker {
 
     private Logger logger = LogManager.getFormatterLogger(GlobalTraceAgg.class);
 
-    GlobalTraceAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    GlobalTraceAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -48,7 +49,7 @@ public GlobalTraceAgg workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.GlobalTrace.GlobalTraceAgg.Value;
+            return WorkerConfig.WorkerNum.GlobalTrace.GlobalTraceAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/httpserver/AbstractGetProvider.java
Patch:
@@ -11,8 +11,9 @@ public abstract class AbstractGetProvider<T extends AbstractLocalSyncWorker> ext
 
     public abstract String servletPath();
 
-    final protected void create(ServletContextHandler context) throws IllegalArgumentException, ProviderNotFoundException {
-        LocalSyncWorkerRef workerRef = (LocalSyncWorkerRef) super.create(AbstractWorker.noOwner());
+    final protected void create(
+        ServletContextHandler context) throws IllegalArgumentException, ProviderNotFoundException {
+        LocalSyncWorkerRef workerRef = (LocalSyncWorkerRef)super.create(AbstractWorker.noOwner());
         AbstractGet.GetWithHttpServlet getWithHttpServlet = new AbstractGet.GetWithHttpServlet(workerRef);
         context.addServlet(new ServletHolder(getWithHttpServlet), servletPath());
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/httpserver/AbstractPostProvider.java
Patch:
@@ -11,8 +11,9 @@ public abstract class AbstractPostProvider<T extends AbstractLocalAsyncWorker> e
 
     public abstract String servletPath();
 
-    final protected void create(ServletContextHandler context) throws IllegalArgumentException, ProviderNotFoundException {
-        LocalAsyncWorkerRef workerRef = (LocalAsyncWorkerRef) super.create(AbstractWorker.noOwner());
+    final protected void create(
+        ServletContextHandler context) throws IllegalArgumentException, ProviderNotFoundException {
+        LocalAsyncWorkerRef workerRef = (LocalAsyncWorkerRef)super.create(AbstractWorker.noOwner());
         AbstractPost.PostWithHttpServlet postWithHttpServlet = new AbstractPost.PostWithHttpServlet(workerRef);
         context.addServlet(new ServletHolder(postWithHttpServlet), servletPath());
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/httpserver/HttpServer.java
Patch:
@@ -18,9 +18,9 @@ public enum HttpServer {
     private Logger logger = LogManager.getFormatterLogger(HttpServer.class);
 
     public void boot(ClusterWorkerContext clusterContext) throws Exception {
-        Server server = new Server(new InetSocketAddress(HttpConfig.Http.hostname, Integer.valueOf(HttpConfig.Http.port)));
+        Server server = new Server(new InetSocketAddress(HttpConfig.Http.HOSTNAME, Integer.valueOf(HttpConfig.Http.PORT)));
 
-        String contextPath = HttpConfig.Http.contextPath;
+        String contextPath = HttpConfig.Http.CONTEXTPATH;
         ServletContextHandler servletContextHandler = new ServletContextHandler(ServletContextHandler.NO_SESSIONS);
         servletContextHandler.setContextPath(contextPath);
         logger.info("http server root context path: %s", contextPath);
@@ -31,4 +31,4 @@ public void boot(ClusterWorkerContext clusterContext) throws Exception {
         server.start();
         server.join();
     }
-}
\ No newline at end of file
+}

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/httpserver/ServletsCreator.java
Patch:
@@ -16,7 +16,8 @@ public enum ServletsCreator {
 
     private Logger logger = LogManager.getFormatterLogger(ServletsCreator.class);
 
-    public void boot(ServletContextHandler servletContextHandler, ClusterWorkerContext clusterContext) throws IllegalArgumentException, ProviderNotFoundException {
+    public void boot(ServletContextHandler servletContextHandler,
+        ClusterWorkerContext clusterContext) throws IllegalArgumentException, ProviderNotFoundException {
         ServiceLoader<AbstractPostProvider> receiverLoader = java.util.ServiceLoader.load(AbstractPostProvider.class);
         for (AbstractPostProvider provider : receiverLoader) {
             provider.setClusterContext(clusterContext);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingDayAgg.java
Patch:
@@ -11,7 +11,8 @@
  */
 public class NodeMappingDayAgg extends AbstractClusterWorker {
 
-    NodeMappingDayAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeMappingDayAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -44,7 +45,7 @@ public NodeMappingDayAgg workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.Node.NodeMappingDayAgg.Value;
+            return WorkerConfig.WorkerNum.Node.NodeMappingDayAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingHourAgg.java
Patch:
@@ -11,7 +11,8 @@
  */
 public class NodeMappingHourAgg extends AbstractClusterWorker {
 
-    NodeMappingHourAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeMappingHourAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -44,7 +45,7 @@ public NodeMappingHourAgg workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.Node.NodeMappingHourAgg.Value;
+            return WorkerConfig.WorkerNum.Node.NodeMappingHourAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingMinuteAgg.java
Patch:
@@ -11,7 +11,8 @@
  */
 public class NodeMappingMinuteAgg extends AbstractClusterWorker {
 
-    NodeMappingMinuteAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeMappingMinuteAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -44,7 +45,7 @@ public NodeMappingMinuteAgg workerInstance(ClusterWorkerContext clusterContext)
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.Node.NodeMappingMinuteAgg.Value;
+            return WorkerConfig.WorkerNum.Node.NodeMappingMinuteAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefResSumGetGroupWithTimeSlice.java
Patch:
@@ -39,7 +39,7 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
             throw new IllegalArgumentException("the request parameter must contains startTime,endTime,timeSliceType");
         }
         logger.debug("startTime: %s, endTime: %s, timeSliceType: %s", Arrays.toString(request.get("startTime")),
-                Arrays.toString(request.get("endTime")), Arrays.toString(request.get("timeSliceType")));
+            Arrays.toString(request.get("endTime")), Arrays.toString(request.get("timeSliceType")));
 
         long startTime;
         try {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefDayAgg.java
Patch:
@@ -15,7 +15,8 @@ public class NodeRefDayAgg extends AbstractClusterWorker {
 
     private Logger logger = LogManager.getFormatterLogger(NodeRefDayAgg.class);
 
-    NodeRefDayAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeRefDayAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -48,7 +49,7 @@ public NodeRefDayAgg workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.NodeRef.NodeRefDayAgg.Value;
+            return WorkerConfig.WorkerNum.NodeRef.NodeRefDayAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefHourAgg.java
Patch:
@@ -15,7 +15,8 @@ public class NodeRefHourAgg extends AbstractClusterWorker {
 
     private Logger logger = LogManager.getFormatterLogger(NodeRefHourAgg.class);
 
-    NodeRefHourAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeRefHourAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -48,7 +49,7 @@ public NodeRefHourAgg workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.NodeRef.NodeRefHourAgg.Value;
+            return WorkerConfig.WorkerNum.NodeRef.NodeRefHourAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefMinuteAgg.java
Patch:
@@ -15,7 +15,8 @@ public class NodeRefMinuteAgg extends AbstractClusterWorker {
 
     private Logger logger = LogManager.getFormatterLogger(NodeRefMinuteAgg.class);
 
-    NodeRefMinuteAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeRefMinuteAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -48,7 +49,7 @@ public NodeRefMinuteAgg workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.NodeRef.NodeRefMinuteAgg.Value;
+            return WorkerConfig.WorkerNum.NodeRef.NodeRefMinuteAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumDayAgg.java
Patch:
@@ -15,7 +15,8 @@ public class NodeRefResSumDayAgg extends AbstractClusterWorker {
 
     private Logger logger = LogManager.getFormatterLogger(NodeRefResSumDayAgg.class);
 
-    NodeRefResSumDayAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeRefResSumDayAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -48,7 +49,7 @@ public NodeRefResSumDayAgg workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.NodeRef.NodeRefResSumDayAgg.Value;
+            return WorkerConfig.WorkerNum.NodeRef.NodeRefResSumDayAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumHourAgg.java
Patch:
@@ -15,7 +15,8 @@ public class NodeRefResSumHourAgg extends AbstractClusterWorker {
 
     private Logger logger = LogManager.getFormatterLogger(NodeRefResSumHourAgg.class);
 
-    NodeRefResSumHourAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeRefResSumHourAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -48,7 +49,7 @@ public NodeRefResSumHourAgg workerInstance(ClusterWorkerContext clusterContext)
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.NodeRef.NodeRefResSumHourAgg.Value;
+            return WorkerConfig.WorkerNum.NodeRef.NodeRefResSumHourAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumMinuteAgg.java
Patch:
@@ -15,7 +15,8 @@ public class NodeRefResSumMinuteAgg extends AbstractClusterWorker {
 
     private Logger logger = LogManager.getFormatterLogger(NodeRefResSumMinuteAgg.class);
 
-    NodeRefResSumMinuteAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeRefResSumMinuteAgg(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext,
+        LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -48,7 +49,7 @@ public NodeRefResSumMinuteAgg workerInstance(ClusterWorkerContext clusterContext
 
         @Override
         public int workerNum() {
-            return WorkerConfig.WorkerNum.NodeRef.NodeRefResSumMinuteAgg.Value;
+            return WorkerConfig.WorkerNum.NodeRef.NodeRefResSumMinuteAgg.VALUE;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentPost.java
Patch:
@@ -33,8 +33,7 @@
  * @author pengys5
  */
 public class SegmentPost extends AbstractPost {
-
-    private Logger logger = LogManager.getFormatterLogger(SegmentPost.class);
+    private static final Logger logger = LogManager.getFormatterLogger(SegmentPost.class);
 
     private Gson gson;
 
@@ -135,7 +134,7 @@ public String servletPath() {
 
         @Override
         public int queueSize() {
-            return WorkerConfig.Queue.Segment.SegmentPost.Size;
+            return WorkerConfig.Queue.Segment.SegmentPost.SIZE;
         }
 
         @Override

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithGlobalTraceId.java
Patch:
@@ -39,7 +39,7 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
             throw new IllegalArgumentException("the request parameter must contains globalTraceId, from, limit");
         }
         logger.debug("globalTraceId: %s, from: %s, limit: %s", Arrays.toString(request.get("globalTraceId")),
-                Arrays.toString(request.get("from")), Arrays.toString(request.get("limit")));
+            Arrays.toString(request.get("from")), Arrays.toString(request.get("limit")));
 
         int from;
         try {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithTimeSlice.java
Patch:
@@ -39,7 +39,7 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
             throw new IllegalArgumentException("the request parameter must contains startTime, endTime, from, limit");
         }
         logger.debug("startTime: %s, endTime: %s, from: %s", Arrays.toString(request.get("startTime")),
-                Arrays.toString(request.get("endTime")), Arrays.toString(request.get("from")));
+            Arrays.toString(request.get("endTime")), Arrays.toString(request.get("from")));
 
         long startTime;
         try {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/logic/Segment.java
Patch:
@@ -59,7 +59,7 @@ public class Segment {
     private List<Span> spans;
 
     /**
-     * The <code>applicationCode</code> represents a name of current application/JVM and indicates which is business
+     * The <code>applicationCode</code> represents a NAME of current application/JVM and indicates which is business
      * role in the cluster.
      * <p>
      * e.g. account_app, billing_app

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/span/persistence/SpanSearchWithId.java
Patch:
@@ -29,8 +29,8 @@ public class SpanSearchWithId extends AbstractLocalSyncWorker {
     @Override
     protected void onWork(Object request, Object response) throws Exception {
         if (request instanceof RequestEntity) {
-            RequestEntity search = (RequestEntity) request;
-            GetResponse getResponse = GetResponseFromEs.INSTANCE.get(SegmentIndex.Index, SegmentIndex.Type_Record, search.segId);
+            RequestEntity search = (RequestEntity)request;
+            GetResponse getResponse = GetResponseFromEs.INSTANCE.get(SegmentIndex.INDEX, SegmentIndex.TYPE_RECORD, search.segId);
             Segment segment = SegmentDeserialize.INSTANCE.deserializeFromES(getResponse.getSourceAsString());
             List<Span> spanList = segment.getSpans();
 
@@ -44,7 +44,7 @@ protected void onWork(Object request, Object response) throws Exception {
                 }
             }
 
-            JsonObject resJsonObj = (JsonObject) response;
+            JsonObject resJsonObj = (JsonObject)response;
             resJsonObj.add(Const.RESULT, dataJson);
         }
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/IndexCreator.java
Patch:
@@ -17,12 +17,12 @@ public enum IndexCreator {
     private Logger logger = LogManager.getFormatterLogger(IndexCreator.class);
 
     public void create() {
-        if (!EsConfig.IndexInitMode.MANUAL.equals(EsConfig.Es.Index.Initialize.mode)) {
+        if (!EsConfig.IndexInitMode.MANUAL.equals(EsConfig.Es.Index.Initialize.MODE)) {
             Set<AbstractIndex> indexSet = loadIndex();
             for (AbstractIndex index : indexSet) {
                 boolean isExists = index.isExists();
                 if (isExists) {
-                    if (EsConfig.IndexInitMode.FORCED.equals(EsConfig.Es.Index.Initialize.mode)) {
+                    if (EsConfig.IndexInitMode.FORCED.equals(EsConfig.Es.Index.Initialize.MODE)) {
                         index.deleteIndex();
                         index.createIndex();
                     }
@@ -37,7 +37,7 @@ private Set<AbstractIndex> loadIndex() {
         Set<AbstractIndex> indexSet = new HashSet<>();
         ServiceLoader<AbstractIndex> indexServiceLoader = ServiceLoader.load(AbstractIndex.class);
         for (AbstractIndex index : indexServiceLoader) {
-            logger.info("index name: %s", index.index());
+            logger.info("index NAME: %s", index.index());
             indexSet.add(index);
         }
         return indexSet;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/ClientSpanIsLeafTools.java
Patch:
@@ -11,8 +11,7 @@
  * @author pengys5
  */
 public class ClientSpanIsLeafTools {
-
-    private static Logger logger = LogManager.getFormatterLogger(ClientSpanIsLeafTools.class);
+    private static final Logger logger = LogManager.getFormatterLogger(ClientSpanIsLeafTools.class);
 
     public static boolean isLeaf(int spanId, List<Span> spanList) {
         boolean isLeaf = true;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tracedag/TraceDagGetWithTimeSlice.java
Patch:
@@ -46,7 +46,7 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
             throw new IllegalArgumentException("the request parameter must contains startTime,endTime,timeSliceType");
         }
         logger.debug("startTime: %s, endTime: %s, timeSliceType: %s", Arrays.toString(request.get("startTime")),
-                Arrays.toString(request.get("endTime")), Arrays.toString(request.get("timeSliceType")));
+            Arrays.toString(request.get("endTime")), Arrays.toString(request.get("timeSliceType")));
 
         long startTime;
         try {
@@ -80,7 +80,7 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
         getSelfContext().lookup(NodeRefResSumSearchWithTimeSlice.WorkerRole.INSTANCE).ask(resSumEntity, resSumResponse);
 
         JsonObject result = getBuilder().build(compResponse.get(Const.RESULT).getAsJsonArray(), nodeMappingResponse.get(Const.RESULT).getAsJsonArray(),
-                nodeRefResponse.get(Const.RESULT).getAsJsonArray(), resSumResponse.get(Const.RESULT).getAsJsonArray());
+            nodeRefResponse.get(Const.RESULT).getAsJsonArray(), resSumResponse.get(Const.RESULT).getAsJsonArray());
 
         response.add(Const.RESULT, result);
     }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/AnalysisMemberTestCase.java
Patch:
@@ -77,7 +77,6 @@ class TestException extends Exception {
 
     }
 
-
     class ExceptionAnswer implements Answer {
 
         boolean isTestException = false;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/MergeAnalysisMemberTestCase.java
Patch:
@@ -45,15 +45,15 @@ public void init() throws Exception {
 
     @Test
     public void testSetMergeDataNotFull() throws Exception {
-        when(persistenceData.size()).thenReturn(CacheSizeConfig.Cache.Analysis.size - 1);
+        when(persistenceData.size()).thenReturn(CacheSizeConfig.Cache.Analysis.SIZE - 1);
 
         mergeAnalysisMember.setMergeData("segment_1", "column", "value");
         Mockito.verify(mergeAnalysisMember, Mockito.never()).aggregation();
     }
 
     @Test
     public void testSetMergeDataFull() throws Exception {
-        when(persistenceData.size()).thenReturn(CacheSizeConfig.Cache.Analysis.size);
+        when(persistenceData.size()).thenReturn(CacheSizeConfig.Cache.Analysis.SIZE);
 
         mergeAnalysisMember.setMergeData("segment_1", "column", "value");
         Mockito.verify(mergeAnalysisMember, Mockito.times(1)).aggregation();

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/MergePersistenceMemberTestCase.java
Patch:
@@ -51,7 +51,7 @@ public void init() throws Exception {
     public void testAnalyse() throws Exception {
         String id = "2016" + Const.ID_SPLIT + "A" + Const.ID_SPLIT + "B";
         MergeData mergeData = new MergeData(id);
-        mergeData.setMergeData("Column", "Value");
+        mergeData.setMergeData("Column", "VALUE");
 
 //        mergePersistenceMember.analyse(mergeData);
 //        mergePersistenceMember.onWork(new EndOfBatchCommand());

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/datamerge/RecordDataMergeJson.java
Patch:
@@ -92,6 +92,5 @@ private String id2UTCSlice(String id) {
             return id;
         }
 
-
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/GlobalTraceGetWithGlobalIdTestCase.java
Patch:
@@ -94,7 +94,7 @@ class GlobalTraceAnswerGet implements Answer {
 
         @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
-            String globalId = (String) invocation.getArguments()[0];
+            String globalId = (String)invocation.getArguments()[0];
             System.out.println(globalId);
             Assert.assertEquals("Test", globalId);
             return null;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/GlobalTraceSearchTestCase.java
Patch:
@@ -35,13 +35,13 @@ public void testSearchWithGlobalId() throws Exception {
         String segment_2 = "SEGMENT.2";
 
 //        String globalData = JsonFileReader.INSTANCE.read(this.getClass().getResource("/").getPath() + "/json/globaltrace/global.json");
-//        mockSegment(client, GlobalTraceIndex.Index, GlobalTraceIndex.Type_Record, globalTraceId, globalData);
+//        mockSegment(client, GlobalTraceIndex.INDEX, GlobalTraceIndex.Type_Record, globalTraceId, globalData);
 //
 //        String segment_1_Data = JsonFileReader.INSTANCE.read(this.getClass().getResource("/").getPath() + "/json/globaltrace/segment_1.json");
-//        mockSegment(client, SegmentIndex.Index, SegmentIndex.Type_Record, segment_1, segment_1_Data);
+//        mockSegment(client, SegmentIndex.INDEX, SegmentIndex.Type_Record, segment_1, segment_1_Data);
 //
 //        String segment_2_Data = JsonFileReader.INSTANCE.read(this.getClass().getResource("/").getPath() + "/json/globaltrace/segment_2.json");
-//        mockSegment(client, SegmentIndex.Index, SegmentIndex.Type_Record, segment_2, segment_2_Data);
+//        mockSegment(client, SegmentIndex.INDEX, SegmentIndex.Type_Record, segment_2, segment_2_Data);
 //
 //        GlobalTraceSearchWithGlobalId search = new GlobalTraceSearchWithGlobalId(null, null, null);
 //

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/analysis/GlobalTraceAnalysisTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void testFactory() {
         Assert.assertEquals(GlobalTraceAnalysis.class.getSimpleName(), GlobalTraceAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.GlobalTrace.GlobalTraceAnalysis.Size = testSize;
+        WorkerConfig.Queue.GlobalTrace.GlobalTraceAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, GlobalTraceAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceAggTestCase.java
Patch:
@@ -65,7 +65,7 @@ public void testFactory() {
         Assert.assertEquals(GlobalTraceAgg.class.getSimpleName(), GlobalTraceAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.GlobalTrace.GlobalTraceAgg.Value = testSize;
+        WorkerConfig.WorkerNum.GlobalTrace.GlobalTraceAgg.VALUE = testSize;
         Assert.assertEquals(testSize, GlobalTraceAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceSaveTestCase.java
Patch:
@@ -30,12 +30,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(GlobalTraceIndex.Index, save.esIndex());
+        Assert.assertEquals(GlobalTraceIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(GlobalTraceIndex.Type_Record, save.esType());
+        Assert.assertEquals(GlobalTraceIndex.TYPE_RECORD, save.esType());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testFactory() {
         Assert.assertEquals(GlobalTraceSave.class.getSimpleName(), GlobalTraceSave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.GlobalTrace.GlobalTraceSave.Size = testSize;
+        WorkerConfig.Queue.GlobalTrace.GlobalTraceSave.SIZE = testSize;
         Assert.assertEquals(testSize, GlobalTraceSave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceSearchWithGlobalIdTestCase.java
Patch:
@@ -34,7 +34,7 @@ public class GlobalTraceSearchWithGlobalIdTestCase {
     private GetResponseFromEs getResponseFromEs;
 
     private String global_Str = "{\"subSegIds\":\"Segment.1491277162066.18986177.70531.27.1\"}";
-    private String seg_str = "{\"ts\":\"Segment.1491277162066.18986177.70531.27.1\",\"st\":1491277162066,\"et\":1491277165743,\"ss\":[{\"si\":0,\"ps\":-1,\"st\":1491277162141,\"et\":1491277162144,\"on\":\"Jedis/getClient\",\"ts\":{\"span.layer\":\"db\",\"component\":\"Redis\",\"db.type\":\"Redis\",\"peer.host\":\"127.0.0.1\",\"span.kind\":\"client\"},\"tb\":{},\"ti\":{\"peer.port\":6379},\"lo\":[]}],\"ac\":\"cache-service\",\"gt\":[\"Trace.1491277147443.-1562443425.70539.65.2\"],\"sampled\":true,\"minute\":201704041139,\"hour\":201704041100,\"day\":201704040000,\"aggId\":null}";
+    private String seg_str = "{\"ts\":\"Segment.1491277162066.18986177.70531.27.1\",\"st\":1491277162066,\"et\":1491277165743,\"ss\":[{\"si\":0,\"ps\":-1,\"st\":1491277162141,\"et\":1491277162144,\"on\":\"Jedis/getClient\",\"ts\":{\"span.layer\":\"db\",\"component\":\"Redis\",\"db.type\":\"Redis\",\"peer.host\":\"127.0.0.1\",\"span.kind\":\"client\"},\"tb\":{},\"ti\":{\"peer.PORT\":6379},\"lo\":[]}],\"ac\":\"cache-service\",\"gt\":[\"Trace.1491277147443.-1562443425.70539.65.2\"],\"sampled\":true,\"minute\":201704041139,\"hour\":201704041100,\"day\":201704040000,\"aggId\":null}";
 
     @Before
     public void init() {
@@ -64,11 +64,11 @@ public void testOnWork() throws Exception {
         GlobalTraceSearchWithGlobalId globalTraceSearchWithGlobalId = new GlobalTraceSearchWithGlobalId(GlobalTraceSearchWithGlobalId.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
 
         GetResponse getResponse = mock(GetResponse.class);
-        when(getResponseFromEs.get(GlobalTraceIndex.Index, GlobalTraceIndex.Type_Record, "Trace.1491277147443.-1562443425.70539.65.2")).thenReturn(getResponse);
+        when(getResponseFromEs.get(GlobalTraceIndex.INDEX, GlobalTraceIndex.TYPE_RECORD, "Trace.1491277147443.-1562443425.70539.65.2")).thenReturn(getResponse);
         when(getResponse.getSourceAsString()).thenReturn(global_Str);
 
         GetResponse segResponse = mock(GetResponse.class);
-        when(getResponseFromEs.get(SegmentIndex.Index, SegmentIndex.Type_Record, "Segment.1491277162066.18986177.70531.27.1")).thenReturn(segResponse);
+        when(getResponseFromEs.get(SegmentIndex.INDEX, SegmentIndex.TYPE_RECORD, "Segment.1491277162066.18986177.70531.27.1")).thenReturn(segResponse);
         when(segResponse.getSourceAsString()).thenReturn(seg_str);
 
         JsonObject response = new JsonObject();

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/globaltrace/persistence/GlobalTraceSearchWithGlobalIdUseDB.java
Patch:
@@ -19,7 +19,7 @@ public static void main(String[] args) throws Exception {
         ClusterWorkerContext clusterWorkerContext = new ClusterWorkerContext(null);
         LocalWorkerContext localWorkerContext = new LocalWorkerContext();
         GlobalTraceSearchWithGlobalId globalTraceSearchWithGlobalId =
-                new GlobalTraceSearchWithGlobalId(GlobalTraceSearchWithGlobalId.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
+            new GlobalTraceSearchWithGlobalId(GlobalTraceSearchWithGlobalId.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
 
         JsonObject response = new JsonObject();
         globalTraceSearchWithGlobalId.onWork("Trace.1491277147443.-1562443425.70539.65.2", response);

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/GetWithHttpServletTestCase.java
Patch:
@@ -29,7 +29,7 @@ public void testDoGet() throws IOException, ServletException {
         doAnswer(new Answer() {
             @Override
             public Object answer(InvocationOnMock invocation) throws Throwable {
-                Integer status = (Integer) invocation.getArguments()[0];
+                Integer status = (Integer)invocation.getArguments()[0];
                 System.out.println(status);
                 Assert.assertEquals(new Integer(200), status);
                 return null;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/mock/MergeDataAnswer.java
Patch:
@@ -17,7 +17,7 @@ public class MergeDataAnswer implements Answer<Object> {
 
     @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
-        MergeData mergeData = (MergeData) invocation.getArguments()[0];
+        MergeData mergeData = (MergeData)invocation.getArguments()[0];
         System.out.printf("id: %s \n", mergeData.getId());
 
         for (Map.Entry<String, String> entry : mergeData.toMap().entrySet()) {

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/mock/MetricDataAnswer.java
Patch:
@@ -19,7 +19,7 @@ public class MetricDataAnswer implements Answer<Object> {
 
     @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
-        MetricData metricData = (MetricData) invocation.getArguments()[0];
+        MetricData metricData = (MetricData)invocation.getArguments()[0];
 
         System.out.printf("id: %s \n", metricData.getId());
         metricDataList.add(metricData);

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/mock/MockGetResponse.java
Patch:
@@ -21,7 +21,6 @@ public GetResponse mockito() {
 
         when(client.prepareGet(anyString(), anyString(), anyString())).thenReturn(builder);
 
-
         return getResponse;
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/mock/RecordDataAnswer.java
Patch:
@@ -19,7 +19,7 @@ public class RecordDataAnswer implements Answer<Object> {
 
     @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
-        RecordData recordData = (RecordData) invocation.getArguments()[0];
+        RecordData recordData = (RecordData)invocation.getArguments()[0];
         System.out.printf("id: %s \n", recordData.getId());
         System.out.println(recordData.getRecord().toString());
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/mock/SaveToEsSourceAnswer.java
Patch:
@@ -20,7 +20,7 @@ public class SaveToEsSourceAnswer implements Answer<Object> {
     @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Gson gson = new Gson();
-        String source = (String) invocation.getArguments()[0];
+        String source = (String)invocation.getArguments()[0];
         JsonObject sourceJsonObj = gson.fromJson(source, JsonObject.class);
         logger.debug("sourceJsonObj: %s", sourceJsonObj.toString());
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/NodeCompIndexTestCase.java
Patch:
@@ -1,11 +1,9 @@
 package com.a.eye.skywalking.collector.worker.node;
 
-import com.a.eye.skywalking.collector.worker.globaltrace.GlobalTraceIndex;
+import java.io.IOException;
 import org.junit.Assert;
 import org.junit.Test;
 
-import java.io.IOException;
-
 /**
  * @author pengys5
  */

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/analysis/NodeCompAnalysisTestCase.java
Patch:
@@ -68,7 +68,7 @@ public void testFactory() {
         Assert.assertEquals(NodeCompAnalysis.class.getSimpleName(), NodeCompAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.Node.NodeCompAnalysis.Size = testSize;
+        WorkerConfig.Queue.Node.NodeCompAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeCompAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/analysis/NodeMappingDayAnalysisTestCase.java
Patch:
@@ -70,7 +70,7 @@ public void testFactory() {
         Assert.assertEquals(NodeMappingDayAnalysis.class.getSimpleName(), NodeMappingDayAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.Node.NodeMappingDayAnalysis.Size = testSize;
+        WorkerConfig.Queue.Node.NodeMappingDayAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeMappingDayAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/analysis/NodeMappingHourAnalysisTestCase.java
Patch:
@@ -67,7 +67,7 @@ public void testFactory() {
         Assert.assertEquals(NodeMappingHourAnalysis.class.getSimpleName(), NodeMappingHourAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.Node.NodeMappingHourAnalysis.Size = testSize;
+        WorkerConfig.Queue.Node.NodeMappingHourAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeMappingHourAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/analysis/NodeMappingMinuteAnalysisTestCase.java
Patch:
@@ -67,7 +67,7 @@ public void testFactory() {
         Assert.assertEquals(NodeMappingMinuteAnalysis.class.getSimpleName(), NodeMappingMinuteAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.Node.NodeMappingMinuteAnalysis.Size = testSize;
+        WorkerConfig.Queue.Node.NodeMappingMinuteAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeMappingMinuteAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeCompAggTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void testFactory() {
         Assert.assertEquals(NodeCompAgg.class.getSimpleName(), NodeCompAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.Node.NodeCompAgg.Value = testSize;
+        WorkerConfig.WorkerNum.Node.NodeCompAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeCompAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeCompSaveTestCase.java
Patch:
@@ -30,12 +30,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(NodeCompIndex.Index, save.esIndex());
+        Assert.assertEquals(NodeCompIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(NodeCompIndex.Type_Record, save.esType());
+        Assert.assertEquals(NodeCompIndex.TYPE_RECORD, save.esType());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testFactory() {
         Assert.assertEquals(NodeCompSave.class.getSimpleName(), NodeCompSave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.Node.NodeCompSave.Size = testSize;
+        WorkerConfig.Queue.Node.NodeCompSave.SIZE = testSize;
         Assert.assertEquals(testSize, NodeCompSave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeCompWithTimeSliceUseDB.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) throws Exception {
         ClusterWorkerContext clusterWorkerContext = new ClusterWorkerContext(null);
         LocalWorkerContext localWorkerContext = new LocalWorkerContext();
         NodeCompLoad nodeCompLoad =
-                new NodeCompLoad(NodeCompLoad.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
+            new NodeCompLoad(NodeCompLoad.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
 
         JsonObject response = new JsonObject();
         nodeCompLoad.onWork(null, response);

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingDayAggTestCase.java
Patch:
@@ -65,7 +65,7 @@ public void testFactory() {
         Assert.assertEquals(NodeMappingDayAgg.class.getSimpleName(), NodeMappingDayAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.Node.NodeMappingDayAgg.Value = testSize;
+        WorkerConfig.WorkerNum.Node.NodeMappingDayAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeMappingDayAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingDaySaveTestCase.java
Patch:
@@ -30,12 +30,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(NodeMappingIndex.Index, save.esIndex());
+        Assert.assertEquals(NodeMappingIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(NodeMappingIndex.Type_Day, save.esType());
+        Assert.assertEquals(NodeMappingIndex.TYPE_DAY, save.esType());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testFactory() {
         Assert.assertEquals(NodeMappingDaySave.class.getSimpleName(), NodeMappingDaySave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.Node.NodeMappingDaySave.Size = testSize;
+        WorkerConfig.Queue.Node.NodeMappingDaySave.SIZE = testSize;
         Assert.assertEquals(testSize, NodeMappingDaySave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingHourAggTestCase.java
Patch:
@@ -65,7 +65,7 @@ public void testFactory() {
         Assert.assertEquals(NodeMappingHourAgg.class.getSimpleName(), NodeMappingHourAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.Node.NodeMappingHourAgg.Value = testSize;
+        WorkerConfig.WorkerNum.Node.NodeMappingHourAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeMappingHourAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingHourSaveTestCase.java
Patch:
@@ -30,12 +30,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(NodeMappingIndex.Index, save.esIndex());
+        Assert.assertEquals(NodeMappingIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(NodeMappingIndex.Type_Hour, save.esType());
+        Assert.assertEquals(NodeMappingIndex.TYPE_HOUR, save.esType());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testFactory() {
         Assert.assertEquals(NodeMappingHourSave.class.getSimpleName(), NodeMappingHourSave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.Node.NodeMappingHourSave.Size = testSize;
+        WorkerConfig.Queue.Node.NodeMappingHourSave.SIZE = testSize;
         Assert.assertEquals(testSize, NodeMappingHourSave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingMinuteAggTestCase.java
Patch:
@@ -65,7 +65,7 @@ public void testFactory() {
         Assert.assertEquals(NodeMappingMinuteAgg.class.getSimpleName(), NodeMappingMinuteAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.Node.NodeMappingMinuteAgg.Value = testSize;
+        WorkerConfig.WorkerNum.Node.NodeMappingMinuteAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeMappingMinuteAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/node/persistence/NodeMappingSearchWithTimeSliceUseDB.java
Patch:
@@ -18,13 +18,13 @@ public static void main(String[] args) throws Exception {
         ClusterWorkerContext clusterWorkerContext = new ClusterWorkerContext(null);
         LocalWorkerContext localWorkerContext = new LocalWorkerContext();
         NodeMappingSearchWithTimeSlice nodeMappingSearch =
-                new NodeMappingSearchWithTimeSlice(NodeMappingSearchWithTimeSlice.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
+            new NodeMappingSearchWithTimeSlice(NodeMappingSearchWithTimeSlice.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
 
         long startTime = 201703310910L;
         long endTime = 201703310920L;
         JsonObject response = new JsonObject();
         NodeMappingSearchWithTimeSlice.RequestEntity requestEntity =
-                new NodeMappingSearchWithTimeSlice.RequestEntity(NodeMappingIndex.Type_Minute, startTime, endTime);
+            new NodeMappingSearchWithTimeSlice.RequestEntity(NodeMappingIndex.TYPE_MINUTE, startTime, endTime);
         nodeMappingSearch.onWork(requestEntity, response);
 
         JsonArray nodeArray = response.get("result").getAsJsonArray();

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefResSumGetGroupWithTimeSliceTestCase.java
Patch:
@@ -128,7 +128,7 @@ class NodeRefResSumGetAnswerGet implements Answer {
 
         @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
-            NodeRefResSumGroupWithTimeSlice.RequestEntity requestEntity = (NodeRefResSumGroupWithTimeSlice.RequestEntity) invocation.getArguments()[0];
+            NodeRefResSumGroupWithTimeSlice.RequestEntity requestEntity = (NodeRefResSumGroupWithTimeSlice.RequestEntity)invocation.getArguments()[0];
             Assert.assertEquals(100L, requestEntity.getStartTime());
             Assert.assertEquals(200L, requestEntity.getEndTime());
             Assert.assertEquals("minute", requestEntity.getSliceType());

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefAnalyse.java
Patch:
@@ -16,7 +16,8 @@
 public enum NodeRefAnalyse {
     INSTANCE;
 
-    public void analyse(String resSumJsonFile, String jsonFile, AbstractNodeRefAnalysis analysis, RecordDataAnswer answer, NodeRefResRecordAnswer recordAnswer) throws Exception {
+    public void analyse(String resSumJsonFile, String jsonFile, AbstractNodeRefAnalysis analysis,
+        RecordDataAnswer answer, NodeRefResRecordAnswer recordAnswer) throws Exception {
         SegmentMock segmentMock = new SegmentMock();
         segmentMock.executeAnalysis(analysis);
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefDayAnalysisTestCase.java
Patch:
@@ -72,7 +72,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefDayAnalysis.class.getSimpleName(), NodeRefDayAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefDayAnalysis.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefDayAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefDayAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefHourAnalysisTestCase.java
Patch:
@@ -71,7 +71,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefHourAnalysis.class.getSimpleName(), NodeRefHourAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefHourAnalysis.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefHourAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefHourAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefMinuteAnalysisTestCase.java
Patch:
@@ -72,7 +72,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefMinuteAnalysis.class.getSimpleName(), NodeRefMinuteAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefMinuteAnalysis.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefMinuteAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefMinuteAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefResRecordAnswer.java
Patch:
@@ -18,7 +18,7 @@ public class NodeRefResRecordAnswer implements Answer<Object> {
 
     @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
-        AbstractNodeRefResSumAnalysis.NodeRefResRecord nodeRefResRecord = (AbstractNodeRefResSumAnalysis.NodeRefResRecord) invocation.getArguments()[0];
+        AbstractNodeRefResSumAnalysis.NodeRefResRecord nodeRefResRecord = (AbstractNodeRefResSumAnalysis.NodeRefResRecord)invocation.getArguments()[0];
         String recordJsonStr = gson.toJson(nodeRefResRecord);
         JsonObject recordJsonObj = gson.fromJson(recordJsonStr, JsonObject.class);
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefResSumAnalyse.java
Patch:
@@ -16,7 +16,8 @@
 public enum NodeRefResSumAnalyse {
     INSTANCE;
 
-    public void analyse(String requestJsonFile, String jsonFile, AbstractNodeRefResSumAnalysis analysis, MetricDataAnswer answer) throws Exception {
+    public void analyse(String requestJsonFile, String jsonFile, AbstractNodeRefResSumAnalysis analysis,
+        MetricDataAnswer answer) throws Exception {
         SegmentMock segmentMock = new SegmentMock();
         String requestJsonStr = segmentMock.loadJsonFile(requestJsonFile);
         Gson gson = new Gson();

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefResSumDayAnalysisTestCase.java
Patch:
@@ -63,7 +63,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefResSumDayAnalysis.class.getSimpleName(), NodeRefResSumDayAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefResSumDayAnalysis.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefResSumDayAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefResSumDayAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefResSumHourAnalysisTestCase.java
Patch:
@@ -63,7 +63,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefResSumHourAnalysis.class.getSimpleName(), NodeRefResSumHourAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefResSumHourAnalysis.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefResSumHourAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefResSumHourAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefResSumMinuteAnalysisTestCase.java
Patch:
@@ -63,7 +63,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefResSumMinuteAnalysis.class.getSimpleName(), NodeRefResSumMinuteAnalysis.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefResSumMinuteAnalysis.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefResSumMinuteAnalysis.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefResSumMinuteAnalysis.Factory.INSTANCE.queueSize());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefDayAggTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefDayAgg.class.getSimpleName(), NodeRefDayAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.NodeRef.NodeRefDayAgg.Value = testSize;
+        WorkerConfig.WorkerNum.NodeRef.NodeRefDayAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeRefDayAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefDaySaveTestCase.java
Patch:
@@ -30,12 +30,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(NodeRefIndex.Index, save.esIndex());
+        Assert.assertEquals(NodeRefIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(NodeRefIndex.Type_Day, save.esType());
+        Assert.assertEquals(NodeRefIndex.TYPE_DAY, save.esType());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefDaySave.class.getSimpleName(), NodeRefDaySave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefDaySave.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefDaySave.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefDaySave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefHourAggTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefHourAgg.class.getSimpleName(), NodeRefHourAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.NodeRef.NodeRefHourAgg.Value = testSize;
+        WorkerConfig.WorkerNum.NodeRef.NodeRefHourAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeRefHourAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefHourSaveTestCase.java
Patch:
@@ -30,12 +30,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(NodeRefIndex.Index, save.esIndex());
+        Assert.assertEquals(NodeRefIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(NodeRefIndex.Type_Hour, save.esType());
+        Assert.assertEquals(NodeRefIndex.TYPE_HOUR, save.esType());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefHourSave.class.getSimpleName(), NodeRefHourSave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefHourSave.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefHourSave.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefHourSave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefMinuteAggTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefMinuteAgg.class.getSimpleName(), NodeRefMinuteAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.NodeRef.NodeRefMinuteAgg.Value = testSize;
+        WorkerConfig.WorkerNum.NodeRef.NodeRefMinuteAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeRefMinuteAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefMinuteSaveTestCase.java
Patch:
@@ -30,12 +30,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(NodeRefIndex.Index, save.esIndex());
+        Assert.assertEquals(NodeRefIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(NodeRefIndex.Type_Minute, save.esType());
+        Assert.assertEquals(NodeRefIndex.TYPE_MINUTE, save.esType());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefMinuteSave.class.getSimpleName(), NodeRefMinuteSave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefMinuteSave.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefMinuteSave.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefMinuteSave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumDayAggTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefResSumDayAgg.class.getSimpleName(), NodeRefResSumDayAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.NodeRef.NodeRefResSumDayAgg.Value = testSize;
+        WorkerConfig.WorkerNum.NodeRef.NodeRefResSumDayAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeRefResSumDayAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumDaySaveTestCase.java
Patch:
@@ -29,12 +29,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(NodeRefResSumIndex.Index, save.esIndex());
+        Assert.assertEquals(NodeRefResSumIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(NodeRefResSumIndex.Type_Day, save.esType());
+        Assert.assertEquals(NodeRefResSumIndex.TYPE_DAY, save.esType());
     }
 
     @Test
@@ -49,7 +49,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefResSumDaySave.class.getSimpleName(), NodeRefResSumDaySave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefResSumDaySave.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefResSumDaySave.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefResSumDaySave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumGroupWithTimeSliceUseDB.java
Patch:
@@ -18,13 +18,13 @@ public static void main(String[] args) throws Exception {
         ClusterWorkerContext clusterWorkerContext = new ClusterWorkerContext(null);
         LocalWorkerContext localWorkerContext = new LocalWorkerContext();
         NodeRefResSumGroupWithTimeSlice nodeRefSearch =
-                new NodeRefResSumGroupWithTimeSlice(NodeRefResSumGroupWithTimeSlice.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
+            new NodeRefResSumGroupWithTimeSlice(NodeRefResSumGroupWithTimeSlice.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
 
         long startTime = 201703310910L;
         long endTime = 201703310920L;
         JsonObject response = new JsonObject();
         NodeRefResSumGroupWithTimeSlice.RequestEntity requestEntity =
-                new NodeRefResSumGroupWithTimeSlice.RequestEntity(NodeRefIndex.Type_Minute, startTime, endTime);
+            new NodeRefResSumGroupWithTimeSlice.RequestEntity(NodeRefIndex.TYPE_MINUTE, startTime, endTime);
         nodeRefSearch.onWork(requestEntity, response);
 
         JsonArray nodeRefArray = response.get("result").getAsJsonArray();

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumHourAggTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefResSumHourAgg.class.getSimpleName(), NodeRefResSumHourAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.NodeRef.NodeRefResSumHourAgg.Value = testSize;
+        WorkerConfig.WorkerNum.NodeRef.NodeRefResSumHourAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeRefResSumHourAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumHourSaveTestCase.java
Patch:
@@ -30,12 +30,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(NodeRefResSumIndex.Index, save.esIndex());
+        Assert.assertEquals(NodeRefResSumIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(NodeRefResSumIndex.Type_Hour, save.esType());
+        Assert.assertEquals(NodeRefResSumIndex.TYPE_HOUR, save.esType());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefResSumHourSave.class.getSimpleName(), NodeRefResSumHourSave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefResSumHourSave.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefResSumHourSave.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefResSumHourSave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumMinuteAggTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefResSumMinuteAgg.class.getSimpleName(), NodeRefResSumMinuteAgg.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.WorkerNum.NodeRef.NodeRefResSumMinuteAgg.Value = testSize;
+        WorkerConfig.WorkerNum.NodeRef.NodeRefResSumMinuteAgg.VALUE = testSize;
         Assert.assertEquals(testSize, NodeRefResSumMinuteAgg.Factory.INSTANCE.workerNum());
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumMinuteSaveTestCase.java
Patch:
@@ -30,12 +30,12 @@ public void init() {
 
     @Test
     public void testEsIndex() {
-        Assert.assertEquals(NodeRefResSumIndex.Index, save.esIndex());
+        Assert.assertEquals(NodeRefResSumIndex.INDEX, save.esIndex());
     }
 
     @Test
     public void testEsType() {
-        Assert.assertEquals(NodeRefResSumIndex.Type_Minute, save.esType());
+        Assert.assertEquals(NodeRefResSumIndex.TYPE_MINUTE, save.esType());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testFactory() {
         Assert.assertEquals(NodeRefResSumMinuteSave.class.getSimpleName(), NodeRefResSumMinuteSave.Factory.INSTANCE.workerInstance(null).getClass().getSimpleName());
 
         int testSize = 10;
-        WorkerConfig.Queue.NodeRef.NodeRefResSumMinuteSave.Size = testSize;
+        WorkerConfig.Queue.NodeRef.NodeRefResSumMinuteSave.SIZE = testSize;
         Assert.assertEquals(testSize, NodeRefResSumMinuteSave.Factory.INSTANCE.queueSize());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumSearchWithTimeSliceUseDB.java
Patch:
@@ -18,13 +18,13 @@ public static void main(String[] args) throws Exception {
         ClusterWorkerContext clusterWorkerContext = new ClusterWorkerContext(null);
         LocalWorkerContext localWorkerContext = new LocalWorkerContext();
         NodeRefResSumSearchWithTimeSlice nodeRefSearch =
-                new NodeRefResSumSearchWithTimeSlice(NodeRefResSumSearchWithTimeSlice.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
+            new NodeRefResSumSearchWithTimeSlice(NodeRefResSumSearchWithTimeSlice.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
 
         long startTime = 201703310910L;
         long endTime = 201703310920L;
         JsonObject response = new JsonObject();
         NodeRefResSumSearchWithTimeSlice.RequestEntity requestEntity =
-                new NodeRefResSumSearchWithTimeSlice.RequestEntity(NodeRefIndex.Type_Minute, startTime, endTime);
+            new NodeRefResSumSearchWithTimeSlice.RequestEntity(NodeRefIndex.TYPE_MINUTE, startTime, endTime);
         nodeRefSearch.onWork(requestEntity, response);
 
         JsonArray nodeRefArray = response.get("result").getAsJsonArray();

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefSearchWithTimeSliceUseDB.java
Patch:
@@ -18,13 +18,13 @@ public static void main(String[] args) throws Exception {
         ClusterWorkerContext clusterWorkerContext = new ClusterWorkerContext(null);
         LocalWorkerContext localWorkerContext = new LocalWorkerContext();
         NodeRefSearchWithTimeSlice nodeRefSearch =
-                new NodeRefSearchWithTimeSlice(NodeRefSearchWithTimeSlice.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
+            new NodeRefSearchWithTimeSlice(NodeRefSearchWithTimeSlice.WorkerRole.INSTANCE, clusterWorkerContext, localWorkerContext);
 
         long startTime = 201703310910L;
         long endTime = 201703310920L;
         JsonObject response = new JsonObject();
         NodeRefSearchWithTimeSlice.RequestEntity requestEntity =
-                new NodeRefSearchWithTimeSlice.RequestEntity(NodeRefIndex.Type_Minute, startTime, endTime);
+            new NodeRefSearchWithTimeSlice.RequestEntity(NodeRefIndex.TYPE_MINUTE, startTime, endTime);
         nodeRefSearch.onWork(requestEntity, response);
 
         JsonArray nodeRefArray = response.get("result").getAsJsonArray();

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentCostIndexTestCase.java
Patch:
@@ -21,6 +21,6 @@ public void test() {
     @Test
     public void testBuilder() throws IOException {
         SegmentCostIndex index = new SegmentCostIndex();
-        Assert.assertEquals("{\"properties\":{\"segId\":{\"type\":\"string\",\"index\":\"not_analyzed\"},\"startTime\":{\"type\":\"long\",\"index\":\"not_analyzed\"},\"EndTime\":{\"type\":\"long\",\"index\":\"not_analyzed\"},\"operationName\":{\"type\":\"string\",\"index\":\"not_analyzed\"},\"cost\":{\"type\":\"long\",\"index\":\"not_analyzed\"}}}", index.createMappingBuilder().string());
+        Assert.assertEquals("{\"properties\":{\"segId\":{\"type\":\"string\",\"index\":\"not_analyzed\"},\"startTime\":{\"type\":\"long\",\"index\":\"not_analyzed\"},\"END_TIME\":{\"type\":\"long\",\"index\":\"not_analyzed\"},\"operationName\":{\"type\":\"string\",\"index\":\"not_analyzed\"},\"cost\":{\"type\":\"long\",\"index\":\"not_analyzed\"}}}", index.createMappingBuilder().string());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithGlobalTraceIdTestCase.java
Patch:
@@ -135,7 +135,7 @@ class SegmentTopGetAnswerGet implements Answer {
 
         @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
-            SegmentTopSearchWithGlobalTraceId.RequestEntity requestEntity = (SegmentTopSearchWithGlobalTraceId.RequestEntity) invocation.getArguments()[0];
+            SegmentTopSearchWithGlobalTraceId.RequestEntity requestEntity = (SegmentTopSearchWithGlobalTraceId.RequestEntity)invocation.getArguments()[0];
             Assert.assertEquals("TestId", requestEntity.getGlobalTraceId());
             Assert.assertEquals(20, requestEntity.getFrom());
             Assert.assertEquals(50, requestEntity.getLimit());

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithTimeSliceTestCase.java
Patch:
@@ -129,7 +129,7 @@ public void testOnSearchErrorLimit() throws Exception {
         getObj.onSearch(request, response);
     }
 
-    private Map<String, String[]> createRequest(){
+    private Map<String, String[]> createRequest() {
         Map<String, String[]> request = new HashMap<>();
         String[] startTime = {"10"};
         request.put("startTime", startTime);
@@ -150,7 +150,7 @@ class SegmentTopGetAnswerGet implements Answer {
 
         @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
-            SegmentTopSearchWithTimeSlice.RequestEntity requestEntity = (SegmentTopSearchWithTimeSlice.RequestEntity) invocation.getArguments()[0];
+            SegmentTopSearchWithTimeSlice.RequestEntity requestEntity = (SegmentTopSearchWithTimeSlice.RequestEntity)invocation.getArguments()[0];
             Assert.assertEquals(10, requestEntity.getStartTime());
             Assert.assertEquals(20, requestEntity.getEndTime());
             Assert.assertEquals(30, requestEntity.getFrom());

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/span/SpanGetWithIdTestCase.java
Patch:
@@ -99,7 +99,7 @@ class SpanGetAnswerGet implements Answer {
 
         @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
-            SpanSearchWithId.RequestEntity requestEntity = (SpanSearchWithId.RequestEntity) invocation.getArguments()[0];
+            SpanSearchWithId.RequestEntity requestEntity = (SpanSearchWithId.RequestEntity)invocation.getArguments()[0];
             Assert.assertEquals("10", requestEntity.getSegId());
             Assert.assertEquals("20", requestEntity.getSpanId());
             return null;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/span/persistence/SpanSearchWithIdTestCase.java
Patch:
@@ -68,7 +68,7 @@ public void testOnWork() throws Exception {
         String sourceString = gson.toJson(segment);
 
         GetResponse getResponse = mock(GetResponse.class);
-        when(getResponseFromEs.get(SegmentIndex.Index, SegmentIndex.Type_Record, "1")).thenReturn(getResponse);
+        when(getResponseFromEs.get(SegmentIndex.INDEX, SegmentIndex.TYPE_RECORD, "1")).thenReturn(getResponse);
         when(getResponse.getSourceAsString()).thenReturn(sourceString);
 
         SpanSearchWithId.RequestEntity request = new SpanSearchWithId.RequestEntity("1", "0");
@@ -77,14 +77,14 @@ public void testOnWork() throws Exception {
 
         JsonObject segJsonObj = response.get(Const.RESULT).getAsJsonObject();
         String value = segJsonObj.get("ts").getAsJsonObject().get("Tag").getAsString();
-        Assert.assertEquals("Value", value);
+        Assert.assertEquals("VALUE", value);
     }
 
     private TraceSegment create() {
         TraceSegment segment = new TraceSegment();
 
         Span span = new Span();
-        span.setTag("Tag", "Value");
+        span.setTag("Tag", "VALUE");
         span.finish(segment);
         segment.finish();
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/storage/MergeDataTestCase.java
Patch:
@@ -37,7 +37,7 @@ public void testSetMergeData() {
     }
 
     @Test
-    public void testMerge(){
+    public void testMerge() {
         String id = "Test";
         MergeData mergeData_1 = new MergeData(id);
         mergeData_1.setMergeData("Column_1", "Value_1");
@@ -50,7 +50,7 @@ public void testMerge(){
     }
 
     @Test
-    public void testMergeMap(){
+    public void testMergeMap() {
         String id = "Test";
         MergeData mergeData_1 = new MergeData(id);
         mergeData_1.setMergeData("Column_1", "Value_1");

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/storage/MetricDataTestCase.java
Patch:
@@ -18,14 +18,14 @@ public void testConstruction() {
         MetricData metricData_1 = new MetricData(id_1);
 
         Assert.assertEquals(id_1, metricData_1.getId());
-        Assert.assertEquals(2016L, metricData_1.toMap().get(AbstractIndex.Time_Slice));
+        Assert.assertEquals(2016L, metricData_1.toMap().get(AbstractIndex.TIME_SLICE));
         Assert.assertEquals("B", metricData_1.toMap().get(AbstractIndex.AGG_COLUMN));
 
         String id_2 = "2017" + Const.ID_SPLIT + "B" + Const.ID_SPLIT + "C";
         MetricData metricData_2 = new MetricData(id_2);
 
         Assert.assertEquals(id_2, metricData_2.getId());
-        Assert.assertEquals(2017L, metricData_2.toMap().get(AbstractIndex.Time_Slice));
+        Assert.assertEquals(2017L, metricData_2.toMap().get(AbstractIndex.TIME_SLICE));
         Assert.assertEquals("B" + Const.ID_SPLIT + "C", metricData_2.toMap().get(AbstractIndex.AGG_COLUMN));
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/storage/RecordDataTestCase.java
Patch:
@@ -25,11 +25,11 @@ public void testSetRecord() {
         RecordData recordData = new RecordData(id_1);
 
         JsonObject record = new JsonObject();
-        record.addProperty("Column", "Value");
+        record.addProperty("Column", "VALUE");
         recordData.setRecord(record);
 
         Assert.assertEquals(id_1, recordData.getId());
         Assert.assertEquals("B" + Const.ID_SPLIT + "C", recordData.getRecord().get("aggId").getAsString());
-        Assert.assertEquals("Value", recordData.getRecord().get("Column").getAsString());
+        Assert.assertEquals("VALUE", recordData.getRecord().get("Column").getAsString());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/storage/RecordPersistenceDataTestCase.java
Patch:
@@ -80,7 +80,7 @@ public void testSpliterator() {
     }
 
     @Test
-    public void testIterator(){
+    public void testIterator() {
         String id_1 = "2016" + Const.ID_SPLIT + "A" + Const.ID_SPLIT + "B";
         String id_2 = "2016" + Const.ID_SPLIT + "B" + Const.ID_SPLIT + "C";
         RecordPersistenceData recordPersistenceData = new RecordPersistenceData();

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/MergeDataAggTools.java
Patch:
@@ -15,8 +15,8 @@ public enum MergeDataAggTools {
     public void testOnWork(AbstractClusterWorker agg, MergeDataAnswer mergeDataAnswer) throws Exception {
         String id = "2016" + Const.ID_SPLIT + "A" + Const.ID_SPLIT + "B";
         MergeData mergeData = new MergeData(id);
-        mergeData.setMergeData("Column", "Value");
+        mergeData.setMergeData("Column", "VALUE");
         agg.allocateJob(mergeData);
-        Assert.assertEquals("Value", mergeDataAnswer.getMergeDataList().get(0).toMap().get("Column"));
+        Assert.assertEquals("VALUE", mergeDataAnswer.getMergeDataList().get(0).toMap().get("Column"));
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tools/SpanPeersToolsTestCase.java
Patch:
@@ -25,7 +25,7 @@ public void testEmptyPeers() {
         Span span = mock(Span.class);
         when(span.getStrTag("peers")).thenReturn(null);
         when(span.getStrTag("peer.host")).thenReturn("localhost");
-        when(span.getStrTag("peer.port")).thenReturn("8080");
+        when(span.getStrTag("peer.PORT")).thenReturn("8080");
 
         String peers = SpanPeersTools.INSTANCE.getPeers(span);
         Assert.assertEquals("[localhost:0]", peers);

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tracedag/TraceDagGetWithTimeSliceTestCase.java
Patch:
@@ -162,7 +162,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
     class TraceDagGetAnswerGet_2 implements Answer {
         @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
-            NodeMappingSearchWithTimeSlice.RequestEntity entity = (NodeMappingSearchWithTimeSlice.RequestEntity) invocation.getArguments()[0];
+            NodeMappingSearchWithTimeSlice.RequestEntity entity = (NodeMappingSearchWithTimeSlice.RequestEntity)invocation.getArguments()[0];
             Assert.assertEquals(10, entity.getStartTime());
             Assert.assertEquals(20, entity.getEndTime());
             Assert.assertEquals("minute", entity.getSliceType());
@@ -173,7 +173,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
     class TraceDagGetAnswerGet_3 implements Answer {
         @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
-            NodeRefSearchWithTimeSlice.RequestEntity entity = (NodeRefSearchWithTimeSlice.RequestEntity) invocation.getArguments()[0];
+            NodeRefSearchWithTimeSlice.RequestEntity entity = (NodeRefSearchWithTimeSlice.RequestEntity)invocation.getArguments()[0];
             Assert.assertEquals(10, entity.getStartTime());
             Assert.assertEquals(20, entity.getEndTime());
             Assert.assertEquals("minute", entity.getSliceType());
@@ -184,7 +184,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
     class TraceDagGetAnswerGet_4 implements Answer {
         @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
-            NodeRefResSumSearchWithTimeSlice.RequestEntity entity = (NodeRefResSumSearchWithTimeSlice.RequestEntity) invocation.getArguments()[0];
+            NodeRefResSumSearchWithTimeSlice.RequestEntity entity = (NodeRefResSumSearchWithTimeSlice.RequestEntity)invocation.getArguments()[0];
             Assert.assertEquals(10, entity.getStartTime());
             Assert.assertEquals(20, entity.getEndTime());
             Assert.assertEquals("minute", entity.getSliceType());

File: skywalking-commons/skywalking-logging-api/src/main/java/com/a/eye/skywalking/logging/NoopLogger.java
Patch:
@@ -1,6 +1,5 @@
 package com.a.eye.skywalking.logging;
 
-
 /**
  * No operation logger implementation.
  * Just implement {@link ILog} interface, but do nothing.

File: skywalking-commons/skywalking-logging-api/src/test/java/com/a/eye/skywalking/logging/LogManagerTest.java
Patch:
@@ -12,18 +12,17 @@
 public class LogManagerTest {
 
     @Test
-    public void testGetNoopLogger(){
+    public void testGetNoopLogger() {
         ILog logger = LogManager.getLogger(LogManagerTest.class);
         Assert.assertEquals(NoopLogger.INSTANCE, logger);
     }
 
     @Before
     @After
     public void clear() throws IllegalAccessException {
-        MemberModifier.field(LogManager.class, "resolver").set(null, null);
+        MemberModifier.field(LogManager.class, "RESOLVER").set(null, null);
     }
 
-
     public class TestLogger implements ILog {
 
         @Override public void info(String format) {

File: skywalking-commons/skywalking-logging-api/src/test/java/com/a/eye/skywalking/logging/NoopLoggerTest.java
Patch:
@@ -1,4 +1,5 @@
 package com.a.eye.skywalking.logging;
+
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -9,7 +10,7 @@
  */
 public class NoopLoggerTest {
     @Test
-    public void testOnNothing(){
+    public void testOnNothing() {
         Assert.assertFalse(INSTANCE.isDebugEnable());
         Assert.assertFalse(INSTANCE.isInfoEnable());
         Assert.assertFalse(INSTANCE.isErrorEnable());

File: skywalking-commons/skywalking-logging-log4j2/src/main/java/com/a/eye/skywalking/logging/log4j2/Log4j2Logger.java
Patch:
@@ -10,7 +10,7 @@
 public class Log4j2Logger implements ILog {
     private Logger delegateLogger;
 
-    Log4j2Logger(Class<?> targetClass){
+    Log4j2Logger(Class<?> targetClass) {
         delegateLogger = LogManager.getFormatterLogger(targetClass);
     }
 

File: skywalking-commons/skywalking-logging-log4j2/src/main/java/com/a/eye/skywalking/logging/log4j2/Log4j2Resolver.java
Patch:
@@ -6,7 +6,6 @@
 /**
  * The <code>LogResolver</code> is an implementation of {@link LogResolver},
  *
- *
  * @author wusheng
  */
 public class Log4j2Resolver implements LogResolver {

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/tag/AbstractTag.java
Patch:
@@ -6,9 +6,9 @@
  * This is the abstract tag.
  * All span's tags inherit from {@link AbstractTag},
  * which provide an easy way to
- *      {@link Span#setTag(String, String)} ,
- *      {@link Span#setTag(String, Integer)}
- *      {@link Span#setTag(String, boolean)} ,
+ * {@link Span#setTag(String, String)} ,
+ * {@link Span#setTag(String, Integer)}
+ * {@link Span#setTag(String, boolean)} ,
  *
  * Created by wusheng on 2017/2/17.
  */

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/tag/IntTag.java
Patch:
@@ -18,8 +18,8 @@ public void set(Span span, Integer tagValue) {
     }
 
     /**
-     * Get a tag value, type of {@link Integer}.
-     * After akka-message/serialize, all tags values are type of {@link String}, convert to {@link Integer}, if necessary.
+     * Get a tag value, type of {@link Integer}. After akka-message/serialize, all tags values are type of {@link
+     * String}, convert to {@link Integer}, if necessary.
      *
      * @param span
      * @return tag value

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/tag/Tags.java
Patch:
@@ -60,7 +60,6 @@ public static void asRPCFramework(Span span) {
             SPAN_LAYER_TAG.set(span, RPC_FRAMEWORK_LAYER);
         }
 
-
         public static void asHttp(Span span) {
             SPAN_LAYER_TAG.set(span, HTTP_LAYER);
         }

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/LogDataTestCase.java
Patch:
@@ -10,7 +10,7 @@
  */
 public class LogDataTestCase {
     @Test
-    public void testHoldValue(){
+    public void testHoldValue() {
         Map<String, String> fields = new HashMap<String, String>();
         LogData logData = new LogData(123L, fields);
 

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/SpanTestCase.java
Patch:
@@ -55,7 +55,7 @@ public void testSetTag() {
     }
 
     @Test
-    public void testLogException(){
+    public void testLogException() {
         Span span1 = new Span(0, "serviceA");
         Exception exp = new Exception("exception msg");
         span1.log(exp);

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/TraceSegmentTestCase.java
Patch:
@@ -12,7 +12,7 @@
 public class TraceSegmentTestCase {
     @Test
     public void testConstructor() {
-        TraceSegment segment = new TraceSegment( "billing_app");
+        TraceSegment segment = new TraceSegment("billing_app");
 
         Assert.assertTrue(segment.getTraceSegmentId().startsWith("Segment"));
         Assert.assertTrue(segment.getStartTime() > 0);

File: skywalking-commons/skywalking-util/src/main/java/com/a/eye/skywalking/api/util/ConfigInitializer.java
Patch:
@@ -13,7 +13,7 @@
  * Created by wusheng on 2017/1/9.
  */
 public class ConfigInitializer {
-    private static Logger logger = Logger.getLogger(ConfigInitializer.class.getName());
+    private static final Logger logger = Logger.getLogger(ConfigInitializer.class.getName());
 
     public static void initialize(Properties properties, Class<?> rootConfigType) throws IllegalAccessException {
         initNextLevel(properties, rootConfigType, new ConfigDesc());

File: skywalking-commons/skywalking-util/src/test/java/com/a/eye/skywalking/api/util/ConfigInitializerTest.java
Patch:
@@ -36,7 +36,7 @@ public void testInitializeWithUnsupportedConfig() throws IllegalAccessException
     }
 
     @Before
-    public void clear(){
+    public void clear() {
         TestPropertiesObject.Level1Object.strAttr = null;
         TestPropertiesObject.Level1Object.Level2Object.intAttr = 0;
         TestPropertiesObject.Level1Object.Level2Object.longAttr = 0;

File: skywalking-commons/skywalking-util/src/test/java/com/a/eye/skywalking/api/util/StringUtilTest.java
Patch:
@@ -8,15 +8,15 @@
  */
 public class StringUtilTest {
     @Test
-    public void testIsEmpty(){
+    public void testIsEmpty() {
         Assert.assertTrue(StringUtil.isEmpty(null));
         Assert.assertTrue(StringUtil.isEmpty(""));
         Assert.assertFalse(StringUtil.isEmpty("   "));
         Assert.assertFalse(StringUtil.isEmpty("A String"));
     }
 
     @Test
-    public void testJoin(){
+    public void testJoin() {
         Assert.assertNull(StringUtil.join('.'));
         Assert.assertEquals("Single part.", StringUtil.join('.', "Single part."));
         Assert.assertEquals("part1.part2.p3", StringUtil.join('.', "part1", "part2", "p3"));

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/boot/ServiceManager.java
Patch:
@@ -16,7 +16,7 @@
 public enum ServiceManager {
     INSTANCE;
 
-    private static ILog logger = LogManager.getLogger(StatusBootService.class);
+    private static final ILog logger = LogManager.getLogger(StatusBootService.class);
     private Map<Class, BootService> bootedServices = new HashMap<Class, BootService>();
 
     public void boot() {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/client/CollectorClient.java
Patch:
@@ -17,7 +17,6 @@
 import org.apache.http.entity.ContentType;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.CloseableHttpClient;
-import org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;
 import org.apache.http.impl.client.HttpClients;
 
 /**
@@ -28,7 +27,7 @@
  * @author wusheng
  */
 public class CollectorClient implements Runnable {
-    private static ILog logger = LogManager.getLogger(CollectorClient.class);
+    private static final ILog logger = LogManager.getLogger(CollectorClient.class);
     private static long SLEEP_TIME_MILLIS = 500;
     private String[] serverList;
     private volatile int selectedServer = -1;
@@ -102,7 +101,7 @@ private void sendToCollector(SegmentsMessage message) throws RESTResponseStatusE
         } catch (IOException e) {
             findBackupServer();
             throw e;
-        }finally {
+        } finally {
             httpClient.close();
         }
     }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/client/RESTResponseStatusError.java
Patch:
@@ -7,7 +7,7 @@
  * @author wusheng
  */
 class RESTResponseStatusError extends Exception {
-    RESTResponseStatusError(int responseCode){
+    RESTResponseStatusError(int responseCode) {
         super("Unexpected service response code: " + responseCode);
     }
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/conf/SnifferConfigInitializer.java
Patch:
@@ -20,7 +20,7 @@
  * @see {@link #initialize()}, to learn more about how to initialzie.
  */
 public class SnifferConfigInitializer {
-    private static ILog logger = LogManager.getLogger(SnifferConfigInitializer.class);
+    private static final ILog logger = LogManager.getLogger(SnifferConfigInitializer.class);
     private static String CONFIG_FILE_NAME = "/sky-walking.config";
 
     /**
@@ -46,7 +46,7 @@ public static void initialize() {
             if (configFileStream == null) {
                 logger.info("No {} file found in class path.", CONFIG_FILE_NAME);
                 configFileStream = loadConfigFromAgentFolder();
-            }else{
+            } else {
                 logger.info("{} file found in class path.", CONFIG_FILE_NAME);
             }
         }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/LogLevel.java
Patch:
@@ -3,6 +3,6 @@
 /**
  * Created by xin on 2016/12/7.
  */
-public enum LogLevel{
+public enum LogLevel {
     DEBUG, INFO, WARN, ERROR;
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/WriterFactory.java
Patch:
@@ -4,10 +4,10 @@
 import com.a.eye.skywalking.api.util.StringUtil;
 
 public class WriterFactory {
-    public static IWriter getLogWriter(){
-        if (!StringUtil.isEmpty(Config.Logging.DIR)){
+    public static IWriter getLogWriter() {
+        if (!StringUtil.isEmpty(Config.Logging.DIR)) {
             return FileWriter.get();
-        }else{
+        } else {
             return SystemOutWriter.INSTANCE;
         }
     }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginBootstrap.java
Patch:
@@ -17,10 +17,11 @@
  * @author wusheng
  */
 public class PluginBootstrap {
-    private static ILog logger = LogManager.getLogger(PluginBootstrap.class);
+    private static final ILog logger = LogManager.getLogger(PluginBootstrap.class);
 
     /**
      * load all plugins.
+     *
      * @return plugin definition list.
      */
     public List<AbstractClassEnhancePluginDefine> loadPlugins() {
@@ -49,7 +50,7 @@ public List<AbstractClassEnhancePluginDefine> loadPlugins() {
             try {
                 logger.debug("loading plugin class {}.", pluginClassName);
                 AbstractClassEnhancePluginDefine plugin =
-                        (AbstractClassEnhancePluginDefine) Class.forName(pluginClassName).newInstance();
+                    (AbstractClassEnhancePluginDefine)Class.forName(pluginClassName).newInstance();
                 plugin.setClassTypePool(classTypePool);
                 plugins.add(plugin);
             } catch (Throwable t) {
@@ -61,5 +62,4 @@ public List<AbstractClassEnhancePluginDefine> loadPlugins() {
 
     }
 
-
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginException.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.api.plugin;
 
 public class PluginException extends RuntimeException {
-	private static final long serialVersionUID = -6020188711867490724L;
+    private static final long serialVersionUID = -6020188711867490724L;
 
-	public PluginException(String message) {
+    public PluginException(String message) {
         super(message);
     }
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginFinder.java
Patch:
@@ -30,10 +30,10 @@ public AbstractClassEnhancePluginDefine find(String enhanceClassName) {
             return pluginDefineMap.get(enhanceClassName);
         }
 
-       throw new PluginException("Can not find plugin:" + enhanceClassName);
+        throw new PluginException("Can not find plugin:" + enhanceClassName);
     }
 
-    public boolean exist(String enhanceClassName){
+    public boolean exist(String enhanceClassName) {
         return pluginDefineMap.containsKey(enhanceClassName);
     }
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginResourcesResolver.java
Patch:
@@ -16,7 +16,7 @@
  * @author wusheng
  */
 public class PluginResourcesResolver {
-    private static ILog logger = LogManager.getLogger(PluginResourcesResolver.class);
+    private static final ILog logger = LogManager.getLogger(PluginResourcesResolver.class);
 
     public List<URL> getResources() {
         List<URL> cfgUrlPaths = new ArrayList<URL>();

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/bytebuddy/ArgumentTypeNameMatch.java
Patch:
@@ -25,6 +25,7 @@ public class ArgumentTypeNameMatch implements ElementMatcher<MethodDescription>
 
     /**
      * declare the match target method with the certain index and type.
+     *
      * @param index the index of arguments list.
      * @param argumentTypeName target argument type
      */
@@ -35,6 +36,7 @@ private ArgumentTypeNameMatch(int index, String argumentTypeName) {
 
     /**
      * Match the target method.
+     *
      * @param target target method description.
      * @return true if matched. or false.
      */
@@ -56,7 +58,7 @@ public boolean matches(MethodDescription target) {
      * @param argumentTypeName target argument type
      * @return new {@link ArgumentTypeNameMatch} instance.
      */
-    public static ElementMatcher<MethodDescription> takesArgumentWithType(int index, String argumentTypeName){
+    public static ElementMatcher<MethodDescription> takesArgumentWithType(int index, String argumentTypeName) {
         return new ArgumentTypeNameMatch(index, argumentTypeName);
     }
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/ConstructorInterceptPoint.java
Patch:
@@ -21,7 +21,8 @@ public interface ConstructorInterceptPoint {
     ElementMatcher<MethodDescription> getConstructorMatcher();
 
     /**
-     * @return represents a class name, the class instance must be a instance of {@link com.a.eye.skywalking.plugin.interceptor.enhance.InstanceConstructorInterceptor}.
+     * @return represents a class name, the class instance must be a instance of {@link
+     * com.a.eye.skywalking.plugin.interceptor.enhance.InstanceConstructorInterceptor}.
      */
     String getConstructorInterceptor();
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/EnhanceException.java
Patch:
@@ -1,12 +1,11 @@
 package com.a.eye.skywalking.api.plugin.interceptor;
 
-
 import com.a.eye.skywalking.api.plugin.PluginException;
 
 public class EnhanceException extends PluginException {
-	private static final long serialVersionUID = -2234782755784217255L;
+    private static final long serialVersionUID = -2234782755784217255L;
 
-	public EnhanceException(String message) {
+    public EnhanceException(String message) {
         super(message);
     }
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/InstanceMethodsInterceptPoint.java
Patch:
@@ -21,7 +21,6 @@ public interface InstanceMethodsInterceptPoint {
     ElementMatcher<MethodDescription> getMethodsMatcher();
 
     /**
-     *
      * @return represents a class name, the class instance must instanceof InstanceMethodsAroundInterceptor.
      */
     String getMethodsInterceptor();

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/InterceptorException.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.api.plugin.interceptor;
 
 public class InterceptorException extends RuntimeException {
-	private static final long serialVersionUID = 7846035239994885019L;
+    private static final long serialVersionUID = 7846035239994885019L;
 
-	public InterceptorException(String message) {
+    public InterceptorException(String message) {
         super(message);
     }
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/FieldGetter.java
Patch:
@@ -1,5 +1,5 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
 public interface FieldGetter {
-	Object getValue();
+    Object getValue();
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/FieldSetter.java
Patch:
@@ -1,5 +1,5 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
 public interface FieldSetter {
-	void setValue(Object value);
+    void setValue(Object value);
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/InstanceConstructorInterceptor.java
Patch:
@@ -12,7 +12,7 @@ public interface InstanceConstructorInterceptor {
     /**
      * Called before the origin constructor invocation.
      *
-     * @param context            a new added instance field
+     * @param context a new added instance field
      * @param interceptorContext constructor invocation context.
      */
     void onConstruct(EnhancedClassInstanceContext context, ConstructorInvokeContext interceptorContext);

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/InstanceMethodInvokeContext.java
Patch:
@@ -10,12 +10,11 @@ public class InstanceMethodInvokeContext extends MethodInvokeContext {
     private Object objInst;
 
     InstanceMethodInvokeContext(Object objInst, String methodName, Object[] allArguments, Class<?>[] argumentsTypes) {
-        super(methodName, allArguments,argumentsTypes);
+        super(methodName, allArguments, argumentsTypes);
         this.objInst = objInst;
     }
 
     /**
-     *
      * @return the target instance's ref.
      */
     public Object inst() {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/MethodInvokeContext.java
Patch:
@@ -7,11 +7,11 @@
  * @author wusheng
  */
 public class MethodInvokeContext {
-    private String   methodName;
+    private String methodName;
     private Object[] allArguments;
     private Class<?>[] argumentTypes;
 
-    MethodInvokeContext(String methodName, Object[] allArguments,Class<?>[] argumentTypes) {
+    MethodInvokeContext(String methodName, Object[] allArguments, Class<?>[] argumentTypes) {
         this.methodName = methodName;
         this.allArguments = allArguments;
         this.argumentTypes = argumentTypes;
@@ -34,7 +34,7 @@ public String methodName() {
     /**
      * @return argument types list.
      */
-    public Class<?>[] argumentTypes(){
+    public Class<?>[] argumentTypes() {
         return argumentTypes;
     }
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/StaticMethodInvokeContext.java
Patch:
@@ -8,7 +8,7 @@
  */
 public class StaticMethodInvokeContext extends MethodInvokeContext {
     /**
-     * 代理类名
+     * target class.
      */
     private Class clazz;
 
@@ -18,7 +18,6 @@ public class StaticMethodInvokeContext extends MethodInvokeContext {
     }
 
     /**
-     *
      * @return the target class
      */
     public Class claszz() {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/queue/TraceSegmentHolder.java
Patch:
@@ -19,7 +19,7 @@ public void setValue(TraceSegment value) {
         this.value = value;
     }
 
-    public void clear(){
+    public void clear() {
         this.value = null;
     }
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/sampling/SamplingService.java
Patch:
@@ -17,7 +17,7 @@
  * @author wusheng
  */
 public class SamplingService implements BootService {
-    private static ILog logger = LogManager.getLogger(SamplingService.class);
+    private static final ILog logger = LogManager.getLogger(SamplingService.class);
 
     private volatile boolean on = false;
     private volatile int rollingSeed = 1;
@@ -57,7 +57,7 @@ public void trySampling(TraceSegment segment) {
      * @param carrier
      */
     public void setSampleWhenExtract(TraceSegment segment, ContextCarrier carrier) {
-        if(on) {
+        if (on) {
             if (!segment.isSampled() && carrier.isSampled()) {
                 segment.setSampled(true);
                 this.rollingSeed = 1;

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/conf/SnifferConfigInitializerTest.java
Patch:
@@ -12,7 +12,7 @@
 public class SnifferConfigInitializerTest {
 
     @Test
-    public void testInitialize(){
+    public void testInitialize() {
         SnifferConfigInitializer.initialize();
 
         Assert.assertEquals("crmApp", Config.Agent.APPLICATION_CODE);
@@ -27,7 +27,7 @@ public void testInitialize(){
     }
 
     @AfterClass
-    public static void clear(){
+    public static void clear() {
         Config.Logging.LEVEL = DEBUG;
     }
 }

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/context/ContextCarrierTestCase.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class ContextCarrierTestCase {
     @Test
-    public void testSerialize(){
+    public void testSerialize() {
         ContextCarrier carrier = new ContextCarrier();
         carrier.setTraceSegmentId("trace_id_A");
         carrier.setSpanId(100);
@@ -27,7 +27,7 @@ public void testSerialize(){
     }
 
     @Test
-    public void testDeserialize(){
+    public void testDeserialize() {
         ContextCarrier carrier = new ContextCarrier();
         carrier.deserialize("trace_id_A|100|REMOTE_APP|10.2.3.16:8080|Trace.global.id.123,Trace.global.id.222|1");
 
@@ -41,7 +41,7 @@ public void testDeserialize(){
     }
 
     @Test
-    public void testIllegalDeserialize(){
+    public void testIllegalDeserialize() {
         ContextCarrier carrier = new ContextCarrier();
         carrier.deserialize("abcde");
         Assert.assertFalse(carrier.isValid());

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/context/ContextManagerTestCase.java
Patch:
@@ -14,12 +14,12 @@
  */
 public class ContextManagerTestCase {
     @BeforeClass
-    public static void setup(){
+    public static void setup() {
         ServiceManager.INSTANCE.boot();
     }
 
     @Test
-    public void testDelegateToTracerContext(){
+    public void testDelegateToTracerContext() {
         Span span = ContextManager.createSpan("serviceA");
         Tags.COMPONENT.set(span, "test");
 
@@ -34,7 +34,7 @@ public void testDelegateToTracerContext(){
     }
 
     @After
-    public void reset(){
+    public void reset() {
         TracerContext.ListenerManager.remove(TestTracerContextListener.INSTANCE);
     }
 }

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/logging/EasyLogResolverTest.java
Patch:
@@ -8,7 +8,7 @@
  */
 public class EasyLogResolverTest {
     @Test
-    public void testGetLogger(){
+    public void testGetLogger() {
         Assert.assertTrue(new EasyLogResolver().getLogger(EasyLogResolverTest.class) instanceof EasyLogger);
     }
 }

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/PluginBootstrapTest.java
Patch:
@@ -9,7 +9,7 @@
  */
 public class PluginBootstrapTest {
     @Test
-    public void testLoadPlugins(){
+    public void testLoadPlugins() {
         PluginBootstrap bootstrap = new PluginBootstrap();
         List<AbstractClassEnhancePluginDefine> defines = bootstrap.loadPlugins();
 

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/PluginResourcesResolverTest.java
Patch:
@@ -8,7 +8,7 @@
  */
 public class PluginResourcesResolverTest {
     @Test
-    public void testGetResources(){
+    public void testGetResources() {
         PluginResourcesResolver resolver = new PluginResourcesResolver();
 
         Assert.assertTrue(resolver.getResources().size() > 0);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/EsClient.java
Patch:
@@ -28,7 +28,7 @@ public enum EsClient {
 
     public void boot() throws UnknownHostException {
         Settings settings = Settings.builder()
-            .put("cluster.NAME", EsConfig.Es.Cluster.NAME)
+            .put("cluster.name", EsConfig.Es.Cluster.NAME)
             .put("client.transport.sniff", EsConfig.Es.Cluster.Transport.SNIFFER)
             .build();
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/EsClient.java
Patch:
@@ -28,7 +28,7 @@ public enum EsClient {
 
     public void boot() throws UnknownHostException {
         Settings settings = Settings.builder()
-            .put("cluster.NAME", EsConfig.Es.Cluster.NAME)
+            .put("cluster.name", EsConfig.Es.Cluster.NAME)
             .put("client.transport.sniff", EsConfig.Es.Cluster.Transport.SNIFFER)
             .build();
 

File: skywalking-sniffer/skywalking-sdk-plugin/mongodb-3.x-plugin/src/main/java/com/a/eye/skywalking/plugin/mongodb/v3/OperationInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.mongodb;
+package com.a.eye.skywalking.plugin.mongodb.v3;
 
 /**
  * {@link OperationInfo} record the methodName and filter information

File: skywalking-sniffer/skywalking-sdk-plugin/mongodb-3.x-plugin/src/main/java/com/a/eye/skywalking/plugin/mongodb/v3/ReadMethod.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.mongodb;
+package com.a.eye.skywalking.plugin.mongodb.v3;
 
 /**
  * {@link ReadMethod} mongoDB read method enum

File: skywalking-sniffer/skywalking-sdk-plugin/mongodb-3.x-plugin/src/main/java/com/a/eye/skywalking/plugin/mongodb/v3/WriteMethod.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.mongodb;
+package com.a.eye.skywalking.plugin.mongodb.v3;
 
 /**
  * {@link WriteMethod} mongoDB write method enum

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/node/NodeCompIndex.java
Patch:
@@ -12,7 +12,7 @@
 public class NodeCompIndex extends AbstractIndex {
 
     public static final String INDEX = "node_comp_idx";
-    public static final String NAME = "NAME";
+    public static final String NAME = "name";
     public static final String PEERS = "peers";
 
     @Override

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tracedag/TraceDagDataBuilder.java
Patch:
@@ -51,7 +51,7 @@ public JsonObject build(JsonArray nodeCompArray, JsonArray nodesMappingArray, Js
         }
 
         JsonObject dagJsonObj = new JsonObject();
-        dagJsonObj.add("NODES", pointArray);
+        dagJsonObj.add("nodes", pointArray);
         dagJsonObj.add("nodeRefs", lineArray);
         return dagJsonObj;
     }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/tracedag/TraceDagDataBuilderTestCase.java
Patch:
@@ -22,7 +22,7 @@ public void testBuild() {
         TraceDagDataBuilder builder = new TraceDagDataBuilder();
         JsonObject dagJsonObj = builder.build(nodeCompArray, nodeMappingArray, nodeRefArray, resSumArray);
 
-        JsonArray pointArray = dagJsonObj.getAsJsonArray("NODES");
+        JsonArray pointArray = dagJsonObj.getAsJsonArray("nodes");
         JsonArray lineArray = dagJsonObj.getAsJsonArray("nodeRefs");
 
         for (int i = 0; i < pointArray.size(); i++) {
@@ -47,7 +47,7 @@ private JsonArray nodeRefArrayData() {
     }
 
     private JsonArray nodeCompArrayData() {
-        String str = "[{\"NAME\":\"Tomcat\",\"peers\":\"portal-service\"},{\"NAME\":\"Motan\",\"peers\":\"cache-service\"},{\"NAME\":\"H2\",\"peers\":\"[localhost:-1]\"},{\"NAME\":\"Tomcat\",\"peers\":\"[10.128.35.80:57818]\"},{\"NAME\":\"Redis\",\"peers\":\"[127.0.0.1:6379]\"},{\"NAME\":\"Mysql\",\"peers\":\"[127.0.0.1:3307]\"},{\"NAME\":\"Tomcat\",\"peers\":\"persistence-service\"},{\"NAME\":\"HttpClient\",\"peers\":\"[10.128.35.80:20880]\"},{\"NAME\":\"Motan\",\"peers\":\"[127.0.0.1:8002]\"},{\"NAME\":\"Tomcat\",\"peers\":\"[0:0:0:0:0:0:0:1:57837]\"}]";
+        String str = "[{\"name\":\"Tomcat\",\"peers\":\"portal-service\"},{\"name\":\"Motan\",\"peers\":\"cache-service\"},{\"name\":\"H2\",\"peers\":\"[localhost:-1]\"},{\"name\":\"Tomcat\",\"peers\":\"[10.128.35.80:57818]\"},{\"name\":\"Redis\",\"peers\":\"[127.0.0.1:6379]\"},{\"name\":\"Mysql\",\"peers\":\"[127.0.0.1:3307]\"},{\"name\":\"Tomcat\",\"peers\":\"persistence-service\"},{\"name\":\"HttpClient\",\"peers\":\"[10.128.35.80:20880]\"},{\"name\":\"Motan\",\"peers\":\"[127.0.0.1:8002]\"},{\"name\":\"Tomcat\",\"peers\":\"[0:0:0:0:0:0:0:1:57837]\"}]";
         JsonArray jsonArray = gson.fromJson(str, JsonArray.class);
         return jsonArray;
     }

File: skywalking-commons/skywalking-logging-api/src/test/java/com/a/eye/skywalking/logging/LogManagerTest.java
Patch:
@@ -20,7 +20,7 @@ public void testGetNoopLogger() {
     @Before
     @After
     public void clear() throws IllegalAccessException {
-        MemberModifier.field(LogManager.class, "resolver").set(null, null);
+        MemberModifier.field(LogManager.class, "RESOLVER").set(null, null);
     }
 
     public class TestLogger implements ILog {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/assist/NoConcurrencyAccessObject.java
Patch:
@@ -13,7 +13,7 @@
  * @author wusheng
  */
 public class NoConcurrencyAccessObject {
-    private static final String INVOKE_COUNTER_KEY = "__$INVOKE_COUNTER_KEY";
+    private static final String INVOKE_COUNTER_KEY = "__$invokeCounterKey";
 
     public void whenEnter(EnhancedClassInstanceContext context, Runnable runnable) {
         if (!context.isContain(INVOKE_COUNTER_KEY)) {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/config/EsConfig.java
Patch:
@@ -32,6 +32,8 @@ public static class Replicas {
     }
 
     public enum IndexInitMode {
-        auto, forced, manual
+        AUTO,
+        FORCED,
+        MANUAL
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/IndexCreator.java
Patch:
@@ -17,12 +17,12 @@ public enum IndexCreator {
     private Logger logger = LogManager.getFormatterLogger(IndexCreator.class);
 
     public void create() {
-        if (!EsConfig.IndexInitMode.manual.equals(EsConfig.Es.Index.Initialize.mode)) {
+        if (!EsConfig.IndexInitMode.MANUAL.equals(EsConfig.Es.Index.Initialize.mode)) {
             Set<AbstractIndex> indexSet = loadIndex();
             for (AbstractIndex index : indexSet) {
                 boolean isExists = index.isExists();
                 if (isExists) {
-                    if (EsConfig.IndexInitMode.forced.equals(EsConfig.Es.Index.Initialize.mode)) {
+                    if (EsConfig.IndexInitMode.FORCED.equals(EsConfig.Es.Index.Initialize.mode)) {
                         index.deleteIndex();
                         index.createIndex();
                     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/config/EsConfig.java
Patch:
@@ -32,6 +32,8 @@ public static class Replicas {
     }
 
     public enum IndexInitMode {
-        auto, forced, manual
+        AUTO,
+        FORCED,
+        MANUAL
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/IndexCreator.java
Patch:
@@ -17,12 +17,12 @@ public enum IndexCreator {
     private Logger logger = LogManager.getFormatterLogger(IndexCreator.class);
 
     public void create() {
-        if (!EsConfig.IndexInitMode.manual.equals(EsConfig.Es.Index.Initialize.mode)) {
+        if (!EsConfig.IndexInitMode.MANUAL.equals(EsConfig.Es.Index.Initialize.mode)) {
             Set<AbstractIndex> indexSet = loadIndex();
             for (AbstractIndex index : indexSet) {
                 boolean isExists = index.isExists();
                 if (isExists) {
-                    if (EsConfig.IndexInitMode.forced.equals(EsConfig.Es.Index.Initialize.mode)) {
+                    if (EsConfig.IndexInitMode.FORCED.equals(EsConfig.Es.Index.Initialize.mode)) {
                         index.deleteIndex();
                         index.createIndex();
                     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/EsClient.java
Patch:
@@ -13,6 +13,7 @@
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 /**
@@ -46,9 +47,9 @@ public Client getClient() {
     public void indexRefresh(String... indexName) {
         RefreshResponse response = client.admin().indices().refresh(new RefreshRequest(indexName)).actionGet();
         if (response.getShardFailures().length == response.getTotalShards()) {
-            logger.error("All elasticsearch shard index refresh failure, reason: %s", response.getShardFailures());
+            logger.error("All elasticsearch shard index refresh failure, reason: %s", Arrays.toString(response.getShardFailures()));
         } else if (response.getShardFailures().length > 0) {
-            logger.error("In parts of elasticsearch shard index refresh failure, reason: %s", response.getShardFailures());
+            logger.error("In parts of elasticsearch shard index refresh failure, reason: %s", Arrays.toString(response.getShardFailures()));
         }
         logger.info("elasticsearch index refresh success");
     }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/storage/AbstractIndexTestCase.java
Patch:
@@ -22,7 +22,7 @@ public class AbstractIndexTestCase {
     @Test
     public void testCreateSettingBuilder() throws IOException {
         IndexTest indexTest = new IndexTest();
-        Assert.assertEquals("{\"index.number_of_shards\":null,\"index.number_of_replicas\":null}", indexTest.createSettingBuilder().string());
+        Assert.assertEquals("{\"index.number_of_shards\":\"\",\"index.number_of_replicas\":\"\"}", indexTest.createSettingBuilder().string());
     }
 
     class IndexTest extends AbstractIndex {

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/AbstractClusterWorkerProvider.java
Patch:
@@ -4,12 +4,12 @@
 import akka.actor.Props;
 
 /**
- * The <code>AbstractClusterWorkerProvider</code> should be implemented by any class whose instances
- * are intended to provide create the class instance whose implemented {@link AbstractClusterWorker}.
+ * The <code>AbstractClusterWorkerProvider</code> implementations represent providers,
+ * which create instance of cluster workers whose implemented {@link AbstractClusterWorker}.
  * <p>
  *
  * @author pengys5
- * @since feature3.0
+ * @since v3.0-2017
  */
 public abstract class AbstractClusterWorkerProvider<T extends AbstractClusterWorker> extends AbstractWorkerProvider<T> {
 

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/selector/HashCodeSelector.java
Patch:
@@ -11,7 +11,7 @@
  * message to same {@link WorkerRef}. Usually, use to database operate which avoid dirty data.
  *
  * @author pengys5
- * @since feature3.0
+ * @since v3.0-2017
  */
 public class HashCodeSelector implements WorkerSelector<WorkerRef> {
 

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/selector/RollingSelector.java
Patch:
@@ -10,7 +10,7 @@
  * It choose {@link WorkerRef} nearly random, by round-robin.
  *
  * @author pengys5
- * @since feature3.0
+ * @since v3.0-2017
  */
 public class RollingSelector implements WorkerSelector<WorkerRef> {
 

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/selector/WorkerSelector.java
Patch:
@@ -12,7 +12,7 @@
  * Actually, the <code>WorkerRef</code> is designed to provide a routing ability in the collector cluster
  *
  * @author pengys5
- * @since feature3.0
+ * @since v3.0-2017
  */
 public interface WorkerSelector<T extends WorkerRef> {
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/storage/AbstractIndexTestCase.java
Patch:
@@ -22,7 +22,7 @@ public class AbstractIndexTestCase {
     @Test
     public void testCreateSettingBuilder() throws IOException {
         IndexTest indexTest = new IndexTest();
-        Assert.assertEquals("{\"index.number_of_shards\":null,\"index.number_of_replicas\":null}", indexTest.createSettingBuilder().string());
+        Assert.assertEquals("{\"index.number_of_shards\":\"\",\"index.number_of_replicas\":\"\"}", indexTest.createSettingBuilder().string());
     }
 
     class IndexTest extends AbstractIndex {

File: skywalking-collector/skywalking-collector-cluster/src/test/java/com/a/eye/skywalking/collector/config/ConfigInitializerTestCase.java
Patch:
@@ -24,7 +24,7 @@ public void testInitialize() throws Exception {
 
         Assert.assertEquals("127.0.0.1", ClusterConfig.Cluster.Current.hostname);
         Assert.assertEquals("1000", ClusterConfig.Cluster.Current.port);
-        Assert.assertEquals("Test, Test1", ClusterConfig.Cluster.Current.roles);
+        Assert.assertEquals("WorkersListener", ClusterConfig.Cluster.Current.roles);
         Assert.assertEquals("127.0.0.1:1000", ClusterConfig.Cluster.seed_nodes);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/AbstractPostTestCase.java
Patch:
@@ -41,6 +41,6 @@ public void testOnWork() throws Exception {
     @Test
     public void testOnWorkError() throws Exception {
         post.onWork(new JsonObject());
-        PowerMockito.verifyPrivate(post).invoke("saveException", any(IllegalArgumentException.class));
+//        PowerMockito.verifyPrivate(post).invoke("saveException", any(IllegalArgumentException.class));
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/httpserver/AbstractPostTestCase.java
Patch:
@@ -41,6 +41,6 @@ public void testOnWork() throws Exception {
     @Test
     public void testOnWorkError() throws Exception {
         post.onWork(new JsonObject());
-        PowerMockito.verifyPrivate(post).invoke("saveException", any(IllegalArgumentException.class));
+//        PowerMockito.verifyPrivate(post).invoke("saveException", any(IllegalArgumentException.class));
     }
 }

File: skywalking-collector/skywalking-collector-cluster/src/test/java/com/a/eye/skywalking/collector/config/ConfigInitializerTestCase.java
Patch:
@@ -24,7 +24,7 @@ public void testInitialize() throws Exception {
 
         Assert.assertEquals("127.0.0.1", ClusterConfig.Cluster.Current.hostname);
         Assert.assertEquals("1000", ClusterConfig.Cluster.Current.port);
-        Assert.assertEquals("Test, Test1", ClusterConfig.Cluster.Current.roles);
+        Assert.assertEquals("WorkersListener", ClusterConfig.Cluster.Current.roles);
         Assert.assertEquals("127.0.0.1:1000", ClusterConfig.Cluster.seed_nodes);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/Const.java
Patch:
@@ -9,4 +9,5 @@ public class Const {
     public static final String PEERS_FRONT_SPLIT = "[";
     public static final String PEERS_BEHIND_SPLIT = "]";
     public static final String USER_CODE = "User";
+    public static final String RESULT = "result";
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/globaltrace/GlobalTraceGetWithGlobalId.java
Patch:
@@ -40,7 +40,7 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
         }
         logger.debug("globalId: %s", Arrays.toString(request.get("globalId")));
 
-        String globalId = ParameterTools.toString(request, "globalId");
+        String globalId = ParameterTools.INSTANCE.toString(request, "globalId");
 
         getSelfContext().lookup(GlobalTraceSearchWithGlobalId.WorkerRole.INSTANCE).ask(globalId, response);
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefGetWithTimeSlice.java
Patch:
@@ -43,20 +43,20 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         long startTime;
         try {
-            startTime = Long.valueOf(ParameterTools.toString(request, "startTime"));
+            startTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "startTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter startTime must numeric with long type");
         }
 
         long endTime;
         try {
-            endTime = Long.valueOf(ParameterTools.toString(request, "endTime"));
+            endTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "endTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter endTime must numeric with long type");
         }
 
         NodeRefSearchWithTimeSlice.RequestEntity requestEntity;
-        requestEntity = new NodeRefSearchWithTimeSlice.RequestEntity(ParameterTools.toString(request, "timeSliceType"), startTime, endTime);
+        requestEntity = new NodeRefSearchWithTimeSlice.RequestEntity(ParameterTools.INSTANCE.toString(request, "timeSliceType"), startTime, endTime);
         getSelfContext().lookup(NodeRefSearchWithTimeSlice.WorkerRole.INSTANCE).ask(requestEntity, response);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefResSumGetGroupWithTimeSlice.java
Patch:
@@ -43,20 +43,20 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         long startTime;
         try {
-            startTime = Long.valueOf(ParameterTools.toString(request, "startTime"));
+            startTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "startTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter startTime must numeric with long type");
         }
 
         long endTime;
         try {
-            endTime = Long.valueOf(ParameterTools.toString(request, "endTime"));
+            endTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "endTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter endTime must numeric with long type");
         }
 
         NodeRefResSumGroupWithTimeSlice.RequestEntity requestEntity;
-        requestEntity = new NodeRefResSumGroupWithTimeSlice.RequestEntity(ParameterTools.toString(request, "timeSliceType"), startTime, endTime);
+        requestEntity = new NodeRefResSumGroupWithTimeSlice.RequestEntity(ParameterTools.INSTANCE.toString(request, "timeSliceType"), startTime, endTime);
         getSelfContext().lookup(NodeRefResSumGroupWithTimeSlice.WorkerRole.INSTANCE).ask(requestEntity, response);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefResSumGetWithTimeSlice.java
Patch:
@@ -43,20 +43,20 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         long startTime;
         try {
-            startTime = Long.valueOf(ParameterTools.toString(request, "startTime"));
+            startTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "startTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter startTime must numeric with long type");
         }
 
         long endTime;
         try {
-            endTime = Long.valueOf(ParameterTools.toString(request, "endTime"));
+            endTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "endTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter endTime must numeric with long type");
         }
 
         NodeRefResSumSearchWithTimeSlice.RequestEntity requestEntity;
-        requestEntity = new NodeRefResSumSearchWithTimeSlice.RequestEntity(ParameterTools.toString(request, "timeSliceType"), startTime, endTime);
+        requestEntity = new NodeRefResSumSearchWithTimeSlice.RequestEntity(ParameterTools.INSTANCE.toString(request, "timeSliceType"), startTime, endTime);
         getSelfContext().lookup(NodeRefResSumSearchWithTimeSlice.WorkerRole.INSTANCE).ask(requestEntity, response);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefDayAnalysis.java
Patch:
@@ -17,7 +17,7 @@
  */
 public class NodeRefDayAnalysis extends AbstractNodeRefAnalysis {
 
-    private NodeRefDayAnalysis(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    protected NodeRefDayAnalysis(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -70,7 +70,7 @@ public NodeRefDayAnalysis workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int queueSize() {
-            return WorkerConfig.Queue.DAGNodeRefAnalysis.Size;
+            return WorkerConfig.Queue.Node.NodeRefDayAnalysis.Size;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefHourAnalysis.java
Patch:
@@ -17,7 +17,7 @@
  */
 public class NodeRefHourAnalysis extends AbstractNodeRefAnalysis {
 
-    private NodeRefHourAnalysis(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    protected NodeRefHourAnalysis(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -70,7 +70,7 @@ public NodeRefHourAnalysis workerInstance(ClusterWorkerContext clusterContext) {
 
         @Override
         public int queueSize() {
-            return WorkerConfig.Queue.DAGNodeRefAnalysis.Size;
+            return WorkerConfig.Queue.Node.NodeRefHourAnalysis.Size;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/analysis/NodeRefMinuteAnalysis.java
Patch:
@@ -17,7 +17,7 @@
  */
 public class NodeRefMinuteAnalysis extends AbstractNodeRefAnalysis {
 
-    private NodeRefMinuteAnalysis(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    protected NodeRefMinuteAnalysis(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -70,7 +70,7 @@ public NodeRefMinuteAnalysis workerInstance(ClusterWorkerContext clusterContext)
 
         @Override
         public int queueSize() {
-            return WorkerConfig.Queue.DAGNodeRefAnalysis.Size;
+            return WorkerConfig.Queue.Node.NodeRefMinuteAnalysis.Size;
         }
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumGroupWithTimeSlice.java
Patch:
@@ -26,7 +26,7 @@ public class NodeRefResSumGroupWithTimeSlice extends AbstractLocalSyncWorker {
 
     private Logger logger = LogManager.getFormatterLogger(NodeRefResSumGroupWithTimeSlice.class);
 
-    private NodeRefResSumGroupWithTimeSlice(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeRefResSumGroupWithTimeSlice(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefResSumSearchWithTimeSlice.java
Patch:
@@ -27,7 +27,7 @@ public class NodeRefResSumSearchWithTimeSlice extends AbstractLocalSyncWorker {
 
     private Logger logger = LogManager.getFormatterLogger(NodeRefResSumSearchWithTimeSlice.class);
 
-    private NodeRefResSumSearchWithTimeSlice(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    NodeRefResSumSearchWithTimeSlice(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithGlobalTraceId.java
Patch:
@@ -43,19 +43,19 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         int from = 0;
         try {
-            from = Integer.valueOf(ParameterTools.toString(request, "from"));
+            from = Integer.valueOf(ParameterTools.INSTANCE.toString(request, "from"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter from must numeric with int type");
         }
 
         int limit = 0;
         try {
-            limit = Integer.valueOf(ParameterTools.toString(request, "limit"));
+            limit = Integer.valueOf(ParameterTools.INSTANCE.toString(request, "limit"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter from must numeric with int type");
         }
 
-        String globalTraceId = ParameterTools.toString(request, "globalTraceId");
+        String globalTraceId = ParameterTools.INSTANCE.toString(request, "globalTraceId");
 
         SegmentTopSearchWithGlobalTraceId.RequestEntity requestEntity = new SegmentTopSearchWithGlobalTraceId.RequestEntity(globalTraceId, from, limit);
         getSelfContext().lookup(SegmentTopSearchWithGlobalTraceId.WorkerRole.INSTANCE).ask(requestEntity, response);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentExceptionSave.java
Patch:
@@ -41,7 +41,7 @@ public String esType() {
         return AbstractIndex.Type_Record;
     }
 
-    private SegmentExceptionSave(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    protected SegmentExceptionSave(com.a.eye.skywalking.collector.actor.Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 
@@ -90,7 +90,7 @@ public Role role() {
 
         @Override
         public int queueSize() {
-            return WorkerConfig.Queue.TraceSegmentRecordAnalysis.Size;
+            return WorkerConfig.Queue.Segment.SegmentExceptionSave.Size;
         }
 
         @Override

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentSave.java
Patch:
@@ -58,7 +58,7 @@ public Role role() {
 
         @Override
         public int queueSize() {
-            return WorkerConfig.Queue.TraceSegmentRecordAnalysis.Size;
+            return WorkerConfig.Queue.Segment.SegmentSave.Size;
         }
 
         @Override

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/span/SpanGetWithId.java
Patch:
@@ -42,11 +42,11 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         int maxCost = -1;
         if (request.containsKey("maxCost")) {
-            maxCost = Integer.valueOf(ParameterTools.toString(request, "maxCost"));
+            maxCost = Integer.valueOf(ParameterTools.INSTANCE.toString(request, "maxCost"));
         }
 
-        String segId = ParameterTools.toString(request, "segId");
-        String spanId = ParameterTools.toString(request, "spanId");
+        String segId = ParameterTools.INSTANCE.toString(request, "segId");
+        String spanId = ParameterTools.INSTANCE.toString(request, "spanId");
 
         SpanSearchWithId.RequestEntity requestEntity = new SpanSearchWithId.RequestEntity(segId, spanId);
         getSelfContext().lookup(SpanSearchWithId.WorkerRole.INSTANCE).ask(requestEntity, response);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/AbstractIndex.java
Patch:
@@ -28,7 +28,6 @@ public abstract class AbstractIndex {
 
     public static final String AGG_COLUMN = "aggId";
     public static final String Time_Slice = "timeSlice";
-    public static final String Top_One = "topOne";
 
     final public XContentBuilder createSettingBuilder() throws IOException {
         XContentBuilder settingsBuilder = XContentFactory.jsonBuilder()

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/EsClient.java
Patch:
@@ -22,7 +22,8 @@ public class EsClient {
     public static void boot() throws UnknownHostException {
         Settings settings = Settings.builder()
                 .put("cluster.name", "CollectorCluster")
-                .put("client.transport.sniff", true).build();
+                .put("client.transport.sniff", true)
+                .build();
 
         client = new PreBuiltTransportClient(settings)
                 .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("localhost"), 9300));

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/DateTools.java
Patch:
@@ -41,7 +41,9 @@ public static long getDaySlice(long time) {
     }
 
     public static long changeToUTCSlice(long timeSlice) {
-        if (TimeZone.getDefault().getID().equals("GMT+08:00")) {
+        String timeSliceStr = String.valueOf(timeSlice);
+
+        if (TimeZone.getDefault().getID().equals("GMT+08:00") || timeSliceStr.endsWith("0000")) {
             return timeSlice;
         } else {
             return timeSlice - 800;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/ParameterTools.java
Patch:
@@ -5,9 +5,10 @@
 /**
  * @author pengys5
  */
-public class ParameterTools {
+public enum ParameterTools {
+    INSTANCE;
 
-    public static String toString(Map<String, String[]> request, String key) {
+    public String toString(Map<String, String[]> request, String key) {
         if (request.get(key) != null) {
             return request.get(key)[0];
         } else {

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/HttpClientTools.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.collector.worker.tools;
+package com.a.eye.skywalking.collector.worker.segment;
 
 import org.apache.http.Consts;
 import org.apache.http.HttpEntity;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/globaltrace/GlobalTraceGetWithGlobalId.java
Patch:
@@ -40,7 +40,7 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
         }
         logger.debug("globalId: %s", Arrays.toString(request.get("globalId")));
 
-        String globalId = ParameterTools.toString(request, "globalId");
+        String globalId = ParameterTools.INSTANCE.toString(request, "globalId");
 
         getSelfContext().lookup(GlobalTraceSearchWithGlobalId.WorkerRole.INSTANCE).ask(globalId, response);
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefGetWithTimeSlice.java
Patch:
@@ -43,20 +43,20 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         long startTime;
         try {
-            startTime = Long.valueOf(ParameterTools.toString(request, "startTime"));
+            startTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "startTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter startTime must numeric with long type");
         }
 
         long endTime;
         try {
-            endTime = Long.valueOf(ParameterTools.toString(request, "endTime"));
+            endTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "endTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter endTime must numeric with long type");
         }
 
         NodeRefSearchWithTimeSlice.RequestEntity requestEntity;
-        requestEntity = new NodeRefSearchWithTimeSlice.RequestEntity(ParameterTools.toString(request, "timeSliceType"), startTime, endTime);
+        requestEntity = new NodeRefSearchWithTimeSlice.RequestEntity(ParameterTools.INSTANCE.toString(request, "timeSliceType"), startTime, endTime);
         getSelfContext().lookup(NodeRefSearchWithTimeSlice.WorkerRole.INSTANCE).ask(requestEntity, response);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefResSumGetGroupWithTimeSlice.java
Patch:
@@ -43,20 +43,20 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         long startTime;
         try {
-            startTime = Long.valueOf(ParameterTools.toString(request, "startTime"));
+            startTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "startTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter startTime must numeric with long type");
         }
 
         long endTime;
         try {
-            endTime = Long.valueOf(ParameterTools.toString(request, "endTime"));
+            endTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "endTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter endTime must numeric with long type");
         }
 
         NodeRefResSumGroupWithTimeSlice.RequestEntity requestEntity;
-        requestEntity = new NodeRefResSumGroupWithTimeSlice.RequestEntity(ParameterTools.toString(request, "timeSliceType"), startTime, endTime);
+        requestEntity = new NodeRefResSumGroupWithTimeSlice.RequestEntity(ParameterTools.INSTANCE.toString(request, "timeSliceType"), startTime, endTime);
         getSelfContext().lookup(NodeRefResSumGroupWithTimeSlice.WorkerRole.INSTANCE).ask(requestEntity, response);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefResSumGetWithTimeSlice.java
Patch:
@@ -43,20 +43,20 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         long startTime;
         try {
-            startTime = Long.valueOf(ParameterTools.toString(request, "startTime"));
+            startTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "startTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter startTime must numeric with long type");
         }
 
         long endTime;
         try {
-            endTime = Long.valueOf(ParameterTools.toString(request, "endTime"));
+            endTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "endTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter endTime must numeric with long type");
         }
 
         NodeRefResSumSearchWithTimeSlice.RequestEntity requestEntity;
-        requestEntity = new NodeRefResSumSearchWithTimeSlice.RequestEntity(ParameterTools.toString(request, "timeSliceType"), startTime, endTime);
+        requestEntity = new NodeRefResSumSearchWithTimeSlice.RequestEntity(ParameterTools.INSTANCE.toString(request, "timeSliceType"), startTime, endTime);
         getSelfContext().lookup(NodeRefResSumSearchWithTimeSlice.WorkerRole.INSTANCE).ask(requestEntity, response);
     }
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentTopGetWithGlobalTraceId.java
Patch:
@@ -43,19 +43,19 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         int from = 0;
         try {
-            from = Integer.valueOf(ParameterTools.toString(request, "from"));
+            from = Integer.valueOf(ParameterTools.INSTANCE.toString(request, "from"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter from must numeric with int type");
         }
 
         int limit = 0;
         try {
-            limit = Integer.valueOf(ParameterTools.toString(request, "limit"));
+            limit = Integer.valueOf(ParameterTools.INSTANCE.toString(request, "limit"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter from must numeric with int type");
         }
 
-        String globalTraceId = ParameterTools.toString(request, "globalTraceId");
+        String globalTraceId = ParameterTools.INSTANCE.toString(request, "globalTraceId");
 
         SegmentTopSearchWithGlobalTraceId.RequestEntity requestEntity = new SegmentTopSearchWithGlobalTraceId.RequestEntity(globalTraceId, from, limit);
         getSelfContext().lookup(SegmentTopSearchWithGlobalTraceId.WorkerRole.INSTANCE).ask(requestEntity, response);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/span/SpanGetWithId.java
Patch:
@@ -42,11 +42,11 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         int maxCost = -1;
         if (request.containsKey("maxCost")) {
-            maxCost = Integer.valueOf(ParameterTools.toString(request, "maxCost"));
+            maxCost = Integer.valueOf(ParameterTools.INSTANCE.toString(request, "maxCost"));
         }
 
-        String segId = ParameterTools.toString(request, "segId");
-        String spanId = ParameterTools.toString(request, "spanId");
+        String segId = ParameterTools.INSTANCE.toString(request, "segId");
+        String spanId = ParameterTools.INSTANCE.toString(request, "spanId");
 
         SpanSearchWithId.RequestEntity requestEntity = new SpanSearchWithId.RequestEntity(segId, spanId);
         getSelfContext().lookup(SpanSearchWithId.WorkerRole.INSTANCE).ask(requestEntity, response);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/DateTools.java
Patch:
@@ -41,7 +41,9 @@ public static long getDaySlice(long time) {
     }
 
     public static long changeToUTCSlice(long timeSlice) {
-        if (TimeZone.getDefault().getID().equals("GMT+08:00")) {
+        String timeSliceStr = String.valueOf(timeSlice);
+
+        if (TimeZone.getDefault().getID().equals("GMT+08:00") || timeSliceStr.endsWith("0000")) {
             return timeSlice;
         } else {
             return timeSlice - 800;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tools/ParameterTools.java
Patch:
@@ -5,9 +5,10 @@
 /**
  * @author pengys5
  */
-public class ParameterTools {
+public enum ParameterTools {
+    INSTANCE;
 
-    public static String toString(Map<String, String[]> request, String key) {
+    public String toString(Map<String, String[]> request, String key) {
         if (request.get(key) != null) {
             return request.get(key)[0];
         } else {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/tracedag/TraceDagGetWithTimeSlice.java
Patch:
@@ -50,19 +50,19 @@ protected void onSearch(Map<String, String[]> request, JsonObject response) thro
 
         long startTime;
         try {
-            startTime = Long.valueOf(ParameterTools.toString(request, "startTime"));
+            startTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "startTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter startTime must numeric with long type");
         }
 
         long endTime;
         try {
-            endTime = Long.valueOf(ParameterTools.toString(request, "endTime"));
+            endTime = Long.valueOf(ParameterTools.INSTANCE.toString(request, "endTime"));
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("the request parameter endTime must numeric with long type");
         }
 
-        String timeSliceType = ParameterTools.toString(request, "timeSliceType");
+        String timeSliceType = ParameterTools.INSTANCE.toString(request, "timeSliceType");
 
         JsonObject compResponse = new JsonObject();
         getSelfContext().lookup(NodeCompLoad.WorkerRole.INSTANCE).ask(null, compResponse);

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/HttpClientTools.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.collector.worker.tools;
+package com.a.eye.skywalking.collector.worker.segment;
 
 import org.apache.http.Consts;
 import org.apache.http.HttpEntity;

File: skywalking-collector/skywalking-collector-worker/src/test/java/com/a/eye/skywalking/collector/worker/segment/SegmentRealPost.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.collector.worker.segment;
 
 import com.a.eye.skywalking.collector.worker.segment.mock.SegmentMock;
-import com.a.eye.skywalking.collector.worker.tools.HttpClientTools;
 
 /**
  * @author pengys5

File: skywalking-application-toolkit/skywalking-toolkit-opentracing/src/main/java/com/a/eye/skywalking/toolkit/opentracing/SkyWalkingSpanBuilder.java
Patch:
@@ -94,6 +94,9 @@ public Tracer.SpanBuilder withStartTimestamp(long startTime) {
 
     @Override
     public Span start() {
+        if (startTime == 0){
+            startTime = System.currentTimeMillis();
+        }
         return new SkyWalkingSpan(this.operationName, this.startTime, this.tags);
     }
 

File: skywalking-application-toolkit/skywalking-toolkit-opentracing/src/main/java/com/a/eye/skywalking/toolkit/opentracing/SkyWalkingSpanBuilder.java
Patch:
@@ -94,6 +94,9 @@ public Tracer.SpanBuilder withStartTimestamp(long startTime) {
 
     @Override
     public Span start() {
+        if (startTime == 0){
+            startTime = System.currentTimeMillis();
+        }
         return new SkyWalkingSpan(this.operationName, this.startTime, this.tags);
     }
 

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/AbstractClusterWorker.java
Patch:
@@ -15,7 +15,7 @@
  */
 public abstract class AbstractClusterWorker extends AbstractWorker {
 
-    public AbstractClusterWorker(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
+    protected AbstractClusterWorker(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
     }
 

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/LocalWorkerContext.java
Patch:
@@ -1,5 +1,8 @@
 package com.a.eye.skywalking.collector.actor;
 
+import java.util.List;
+import java.util.Map;
+
 /**
  * @author pengys5
  */

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/CollectorBootStartUp.java
Patch:
@@ -23,7 +23,7 @@ public static void main(String[] args) throws Exception {
         CollectorSystem collectorSystem = new CollectorSystem();
         collectorSystem.boot();
         EsClient.boot();
-        IndexCreator.INSTANCE.create();
+//        IndexCreator.INSTANCE.create();
         HttpServer.INSTANCE.boot((ClusterWorkerContext) collectorSystem.getClusterContext());
     }
 }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/MetricPersistenceMember.java
Patch:
@@ -33,7 +33,7 @@ public MetricPersistenceMember(Role role, ClusterWorkerContext clusterContext, L
     }
 
     @Override
-    public void analyse(Object message) throws Exception {
+    final public void analyse(Object message) throws Exception {
         if (message instanceof MetricData) {
             MetricData metricData = (MetricData) message;
             persistenceData.getElseCreate(metricData.getId()).merge(metricData);
@@ -45,7 +45,7 @@ public void analyse(Object message) throws Exception {
         }
     }
 
-    protected void persistence() {
+    final protected void persistence() {
         MultiGetResponse multiGetResponse = searchFromEs();
         for (MultiGetItemResponse itemResponse : multiGetResponse) {
             GetResponse response = itemResponse.getResponse();

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/PersistenceMember.java
Patch:
@@ -23,12 +23,12 @@ public PersistenceMember(Role role, ClusterWorkerContext clusterContext, LocalWo
     public abstract void analyse(Object message) throws Exception;
 
     @Override
-    public void preStart() throws ProviderNotFoundException {
+    final public void preStart() throws ProviderNotFoundException {
 
     }
 
     @Override
-    protected void onWork(Object message) throws Exception {
+    final protected void onWork(Object message) throws Exception {
         if (message instanceof EndOfBatchCommand) {
             persistence();
         } else {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/RecordPersistenceMember.java
Patch:
@@ -22,7 +22,7 @@ public abstract class RecordPersistenceMember extends PersistenceMember {
 
     private Logger logger = LogManager.getFormatterLogger(RecordPersistenceMember.class);
 
-    protected RecordPersistenceData persistenceData = new RecordPersistenceData();
+    private RecordPersistenceData persistenceData = new RecordPersistenceData();
 
     public RecordPersistenceMember(Role role, ClusterWorkerContext clusterContext, LocalWorkerContext selfContext) {
         super(role, clusterContext, selfContext);
@@ -48,7 +48,7 @@ protected void persistence() {
         }
     }
 
-    public boolean saveToEs() {
+    private boolean saveToEs() {
         Client client = EsClient.getClient();
         BulkRequestBuilder bulkRequest = client.prepareBulk();
         logger.debug("persistenceData size: %s", persistenceData.size());

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/nodeinst/NodeInstIndex.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.collector.worker.nodeinst;
 
-import com.a.eye.skywalking.collector.worker.storage.index.AbstractIndex;
+import com.a.eye.skywalking.collector.worker.storage.AbstractIndex;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefIndex.java
Patch:
@@ -1,8 +1,6 @@
 package com.a.eye.skywalking.collector.worker.noderef;
 
-import com.a.eye.skywalking.collector.worker.storage.index.AbstractIndex;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import com.a.eye.skywalking.collector.worker.storage.AbstractIndex;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/NodeRefResSumIndex.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.collector.worker.noderef;
 
-import com.a.eye.skywalking.collector.worker.storage.index.AbstractIndex;
+import com.a.eye.skywalking.collector.worker.storage.AbstractIndex;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefDaySave.java
Patch:
@@ -4,7 +4,6 @@
 import com.a.eye.skywalking.collector.actor.ClusterWorkerContext;
 import com.a.eye.skywalking.collector.actor.LocalWorkerContext;
 import com.a.eye.skywalking.collector.actor.selector.HashCodeSelector;
-import com.a.eye.skywalking.collector.actor.selector.RollingSelector;
 import com.a.eye.skywalking.collector.actor.selector.WorkerSelector;
 import com.a.eye.skywalking.collector.worker.RecordPersistenceMember;
 import com.a.eye.skywalking.collector.worker.WorkerConfig;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefHourSave.java
Patch:
@@ -4,7 +4,6 @@
 import com.a.eye.skywalking.collector.actor.ClusterWorkerContext;
 import com.a.eye.skywalking.collector.actor.LocalWorkerContext;
 import com.a.eye.skywalking.collector.actor.selector.HashCodeSelector;
-import com.a.eye.skywalking.collector.actor.selector.RollingSelector;
 import com.a.eye.skywalking.collector.actor.selector.WorkerSelector;
 import com.a.eye.skywalking.collector.worker.RecordPersistenceMember;
 import com.a.eye.skywalking.collector.worker.WorkerConfig;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/noderef/persistence/NodeRefMinuteSave.java
Patch:
@@ -4,7 +4,6 @@
 import com.a.eye.skywalking.collector.actor.ClusterWorkerContext;
 import com.a.eye.skywalking.collector.actor.LocalWorkerContext;
 import com.a.eye.skywalking.collector.actor.selector.HashCodeSelector;
-import com.a.eye.skywalking.collector.actor.selector.RollingSelector;
 import com.a.eye.skywalking.collector.actor.selector.WorkerSelector;
 import com.a.eye.skywalking.collector.worker.RecordPersistenceMember;
 import com.a.eye.skywalking.collector.worker.WorkerConfig;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentIndex.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.collector.worker.segment;
 
-import com.a.eye.skywalking.collector.worker.storage.index.AbstractIndex;
+import com.a.eye.skywalking.collector.worker.storage.AbstractIndex;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.elasticsearch.common.xcontent.XContentBuilder;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/persistence/SegmentSave.java
Patch:
@@ -9,8 +9,8 @@
 import com.a.eye.skywalking.collector.worker.RecordPersistenceMember;
 import com.a.eye.skywalking.collector.worker.WorkerConfig;
 import com.a.eye.skywalking.collector.worker.segment.SegmentIndex;
+import com.a.eye.skywalking.collector.worker.storage.AbstractIndex;
 import com.a.eye.skywalking.collector.worker.storage.RecordData;
-import com.a.eye.skywalking.collector.worker.storage.index.AbstractIndex;
 import com.google.gson.JsonObject;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/AbstractIndex.java
Patch:
@@ -1,6 +1,5 @@
-package com.a.eye.skywalking.collector.worker.storage.index;
+package com.a.eye.skywalking.collector.worker.storage;
 
-import com.a.eye.skywalking.collector.worker.storage.EsClient;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/EsClient.java
Patch:
@@ -17,8 +17,6 @@
  */
 public class EsClient {
 
-    private static Logger logger = LogManager.getFormatterLogger(EsClient.class);
-
     private static Client client;
 
     public static void boot() throws UnknownHostException {
@@ -35,6 +33,7 @@ public static Client getClient() {
     }
 
     public static void indexRefresh(String... indexName) {
+        Logger logger = LogManager.getFormatterLogger(EsClient.class);
         RefreshResponse response = client.admin().indices().refresh(new RefreshRequest(indexName)).actionGet();
         if (response.getShardFailures().length == response.getTotalShards()) {
             logger.error("All elasticsearch shard index refresh failure, reason: %s", response.getShardFailures());

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/MetricData.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.a.eye.skywalking.collector.actor.selector.AbstractHashMessage;
 import com.a.eye.skywalking.collector.worker.Const;
-import com.a.eye.skywalking.collector.worker.storage.index.AbstractIndex;
 
 import java.util.HashMap;
 import java.util.Map;

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/RecordData.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.a.eye.skywalking.collector.actor.selector.AbstractHashMessage;
 import com.a.eye.skywalking.collector.worker.Const;
-import com.a.eye.skywalking.collector.worker.storage.index.AbstractIndex;
 import com.google.gson.JsonObject;
 
 /**

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/segment/SegmentPost.java
Patch:
@@ -85,6 +85,7 @@ protected void onReceive(String reqJsonStr) throws Exception {
             long hourSlice = DateTools.getHourSlice(newSegment.getStartTime());
             long daySlice = DateTools.getDaySlice(newSegment.getStartTime());
             int second = DateTools.getSecond(newSegment.getStartTime());
+            logger.debug("minuteSlice: %s, hourSlice: %s, daySlice: %s, second:%s", minuteSlice, hourSlice, daySlice, second);
 
             SegmentWithTimeSlice segmentWithTimeSlice = new SegmentWithTimeSlice(newSegment, minuteSlice, hourSlice, daySlice, second);
             String newSegmentJsonStr = gson.toJson(newSegment);

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/MetricData.java
Patch:
@@ -20,7 +20,7 @@ public MetricData(String id) {
         this.id = id;
         value = new HashMap<>();
 
-        String[] ids = id.split(Const.ID_SPLIT);
+        String[] ids = id.split(Const.IDS_SPLIT);
         String slice = ids[0];
         String aggId = "";
         for (int i = 1; i < ids.length; i++) {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/storage/RecordData.java
Patch:
@@ -17,7 +17,7 @@ public class RecordData extends AbstractHashMessage {
     public RecordData(String key) {
         super(key);
         this.id = key;
-        String[] ids = id.split(Const.ID_SPLIT);
+        String[] ids = id.split(Const.IDS_SPLIT);
         for (int i = 1; i < ids.length; i++) {
             if (i == 1) {
                 this.aggId = ids[i];

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/IWriter.java
Patch:
@@ -2,6 +2,4 @@
 
 public interface IWriter {
     void write(String message);
-
-    void writeError(String message);
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/LogLevel.java
Patch:
@@ -3,6 +3,6 @@
 /**
  * Created by xin on 2016/12/7.
  */
-public enum LogLevel {
-    INFO, DEBUG, WARN, ERROR
+public enum LogLevel{
+    DEBUG, INFO, WARN, ERROR;
 }

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/assist/NoConcurrencyAceessObjectTest.java
Patch:
@@ -1,17 +1,17 @@
 package com.a.eye.skywalking.api.plugin.assist;
 
 import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
-import com.a.eye.skywalking.api.plugin.interceptor.assist.NoCocurrencyAceessObject;
+import com.a.eye.skywalking.api.plugin.interceptor.assist.NoConcurrencyAceessObject;
 import org.junit.Assert;
 import org.junit.Test;
 
 /**
  * @author wusheng
  */
-public class NoCocurrencyAceessObjectTest {
+public class NoConcurrencyAceessObjectTest {
     @Test
     public void testEntraExitCounter(){
-        NoCocurrencyAceessObject object = new NoCocurrencyAceessObject();
+        NoConcurrencyAceessObject object = new NoConcurrencyAceessObject();
         final EnhancedClassInstanceContext context = new EnhancedClassInstanceContext();
         object.whenEnter(context, new Runnable() {
             @Override

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisMethodInterceptor.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.a.eye.skywalking.api.context.ContextManager;
 import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
-import com.a.eye.skywalking.api.plugin.interceptor.assist.NoCocurrencyAceessObject;
+import com.a.eye.skywalking.api.plugin.interceptor.assist.NoConcurrencyAceessObject;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodInvokeContext;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
@@ -17,7 +17,7 @@
  *
  * @author zhangxin
  */
-public class JedisMethodInterceptor extends NoCocurrencyAceessObject implements InstanceMethodsAroundInterceptor {
+public class JedisMethodInterceptor extends NoConcurrencyAceessObject implements InstanceMethodsAroundInterceptor {
     /**
      * The key name that redis connection information in {@link EnhancedClassInstanceContext#context}.
      */

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/conf/Config.java
Patch:
@@ -9,7 +9,7 @@ public static class Agent {
 
         public static String PATH = "";
 
-        public static int SAMPLING_RATE = 10000;
+        public static int SAMPLING_CYCLE = 1;
     }
 
     public static class Collector{

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/sampling/SamplingServiceTest.java
Patch:
@@ -13,7 +13,7 @@
 public class SamplingServiceTest {
     @Test
     public void test50Percent(){
-        Config.Agent.SAMPLING_RATE = 5000;
+        Config.Agent.SAMPLING_CYCLE = 2;
         ServiceManager.INSTANCE.boot();
 
         TraceSegment segment = new TraceSegment();
@@ -30,7 +30,7 @@ public void test50Percent(){
 
     @AfterClass
     public static void clear(){
-        Config.Agent.SAMPLING_RATE = 10000;
+        Config.Agent.SAMPLING_CYCLE = 1;
         ServiceManager.INSTANCE.boot();
     }
 }

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -24,6 +24,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
         try {
             Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/CallableStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
+            Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.SPAN_LAYER.asDB(span);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -24,6 +24,7 @@ public static <R> R execute(java.sql.Connection realConnection,
         try {
             Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/Connection/" + method);
             Tags.DB_TYPE.set(span, "sql");
+            Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.COMPONENT.set(span, connectInfo.getDBType());

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -23,6 +23,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
         try {
             Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/PreparedStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
+            Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.COMPONENT.set(span, connectInfo.getDBType());

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/StatementTracing.java
Patch:
@@ -23,6 +23,7 @@ public static <R> R execute(java.sql.Statement realStatement,
         try {
             Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/Statement/" + method);
             Tags.DB_TYPE.set(span, "sql");
+            Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.COMPONENT.set(span, connectInfo.getDBType());

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisMethodInterceptor.java
Patch:
@@ -50,6 +50,7 @@ public void run() {
                 Span span = ContextManager.createSpan("Jedis/" + interceptorContext.methodName());
                 Tags.COMPONENT.set(span, REDIS_COMPONENT);
                 Tags.DB_TYPE.set(span, REDIS_COMPONENT);
+                Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
                 tagPeer(span, context);
                 Tags.SPAN_LAYER.asDB(span);
                 if (StringUtil.isEmpty(context.get(KEY_OF_REDIS_HOST, String.class))) {

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/LogData.java
Patch:
@@ -17,9 +17,9 @@ public class LogData {
 
     @Expose
     @SerializedName(value="fi")
-    private Map<String, ?> fields;
+    private Map<String, String> fields;
 
-    LogData(long time, Map<String, ?> fields) {
+    LogData(long time, Map<String, String> fields) {
         this.time = time;
         if(fields == null){
             throw new NullPointerException();

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/tag/AbstractTag.java
Patch:
@@ -7,7 +7,7 @@
  * All span's tags inherit from {@link AbstractTag},
  * which provide an easy way to
  *      {@link Span#setTag(String, String)} ,
- *      {@link Span#setTag(String, Number)} ,
+ *      {@link Span#setTag(String, Integer)}
  *      {@link Span#setTag(String, boolean)} ,
  *
  * Created by wusheng on 2017/2/17.

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/tag/StringTag.java
Patch:
@@ -19,6 +19,6 @@ public void set(Span span, String tagValue) {
     }
 
     @Override public String get(Span span) {
-        return (String)span.getTag(super.key);
+        return span.getStrTag(super.key);
     }
 }

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/LogDataTestCase.java
Patch:
@@ -11,7 +11,7 @@
 public class LogDataTestCase {
     @Test
     public void testHoldValue(){
-        Map<String, ?> fields = new HashMap<String, String>();
+        Map<String, String> fields = new HashMap<String, String>();
         LogData logData = new LogData(123L, fields);
 
         Assert.assertEquals(123, logData.getTime());

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/tag/TagsTest.java
Patch:
@@ -12,13 +12,13 @@ public class TagsTest {
     public void testLayer(){
         Span span = new Span(1, "/test");
         Tags.SPAN_LAYER.asDB(span);
-        Assert.assertEquals("db", span.getTag("span.layer"));
+        Assert.assertEquals("db", span.getStrTag("span.layer"));
 
         Tags.SPAN_LAYER.asRPCFramework(span);
-        Assert.assertEquals("rpc", span.getTag("span.layer"));
+        Assert.assertEquals("rpc", span.getStrTag("span.layer"));
 
         Tags.SPAN_LAYER.asHttp(span);
-        Assert.assertEquals("http", span.getTag("span.layer"));
+        Assert.assertEquals("http", span.getStrTag("span.layer"));
     }
 
     @Test

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/conf/Config.java
Patch:
@@ -8,6 +8,8 @@ public static class Agent {
         public static boolean IS_PREMAIN_MODE = false;
 
         public static String PATH = "";
+
+        public static int SAMPLING_RATE = 10000;
     }
 
     public static class Collector{

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -155,7 +155,7 @@ public void call(TraceSegment traceSegment) {
     @Test
     public void testProviderWithAttachment() {
         when(rpcContext.isConsumerSide()).thenReturn(false);
-        when(rpcContext.getAttachment(DubboInterceptor.ATTACHMENT_NAME_OF_CONTEXT_DATA)).thenReturn("302017.1487666919810.624424584.17332.1.1|1|REMOTE_APP|127.0.0.1|Trace.globalId.123");
+        when(rpcContext.getAttachment(DubboInterceptor.ATTACHMENT_NAME_OF_CONTEXT_DATA)).thenReturn("302017.1487666919810.624424584.17332.1.1|1|REMOTE_APP|127.0.0.1|Trace.globalId.123|1");
 
         dubboInterceptor.beforeMethod(classInstanceContext, methodInvokeContext, methodInterceptResult);
         dubboInterceptor.afterMethod(classInstanceContext, methodInvokeContext, result);
@@ -168,7 +168,7 @@ public void testProviderBelow283() {
         when(rpcContext.isConsumerSide()).thenReturn(false);
         when(BugFixActive.isActive()).thenReturn(true);
 
-        testParam.setTraceContext("302017.1487666919810.624424584.17332.1.1|1|REMOTE_APP|127.0.0.1|Trace.globalId.123");
+        testParam.setTraceContext("302017.1487666919810.624424584.17332.1.1|1|REMOTE_APP|127.0.0.1|Trace.globalId.123|1");
 
 
         dubboInterceptor.beforeMethod(classInstanceContext, methodInvokeContext, methodInterceptResult);

File: skywalking-sniffer/skywalking-sdk-plugin/motan-plugin/src/test/java/com/a/eye/skywalking/plugin/motan/MotanProviderInterceptorTest.java
Patch:
@@ -94,7 +94,7 @@ public void call(TraceSegment traceSegment) {
     @Test
     public void testInvokerWithRefSegment() {
         HashMap attachments = new HashMap();
-        attachments.put("SWTraceContext", "302017.1487666919810.624424584.17332.1.1|1|REMOTE_APP|127.0.0.1|Trace.globalId.123");
+        attachments.put("SWTraceContext", "302017.1487666919810.624424584.17332.1.1|1|REMOTE_APP|127.0.0.1|Trace.globalId.123|1");
         when(request.getAttachments()).thenReturn(attachments);
 
         invokeInterceptor.beforeMethod(instanceContext, interceptorContext, null);

File: skywalking-sniffer/skywalking-sdk-plugin/tomcat-7.x-8.x-plugin/src/test/java/com/a/eye/skywalking/plugin/tomcat78x/TomcatInterceptorTest.java
Patch:
@@ -81,7 +81,7 @@ public void call(TraceSegment traceSegment) {
 
     @Test
     public void testWithSerializedContextData() {
-        when(request.getHeader(TomcatInterceptor.HEADER_NAME_OF_CONTEXT_DATA)).thenReturn("302017.1487666919810.624424584.17332.1.1|1|REMOTE_APP|127.0.0.1|Trace.globalId.123");
+        when(request.getHeader(TomcatInterceptor.HEADER_NAME_OF_CONTEXT_DATA)).thenReturn("302017.1487666919810.624424584.17332.1.1|1|REMOTE_APP|127.0.0.1|Trace.globalId.123|1");
 
         tomcatInterceptor.beforeMethod(classInstanceContext, methodInvokeContext, methodInterceptResult);
         tomcatInterceptor.afterMethod(classInstanceContext, methodInvokeContext, null);

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-trace-context-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/trace/TraceContextInterceptor.java
Patch:
@@ -24,9 +24,7 @@ public void beforeMethod(StaticMethodInvokeContext interceptorContext, MethodInt
 
     @Override
     public Object afterMethod(StaticMethodInvokeContext interceptorContext, Object ret) {
-        ContextCarrier carrier = new ContextCarrier();
-        ContextManager.inject(carrier);
-       return carrier.getTraceSegmentId();
+       return ContextManager.getTraceSegmentId();
     }
 
     @Override

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-trace-context-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/trace/TraceContextInterceptor.java
Patch:
@@ -24,9 +24,7 @@ public void beforeMethod(StaticMethodInvokeContext interceptorContext, MethodInt
 
     @Override
     public Object afterMethod(StaticMethodInvokeContext interceptorContext, Object ret) {
-        ContextCarrier carrier = new ContextCarrier();
-        ContextManager.inject(carrier);
-       return carrier.getTraceSegmentId();
+       return ContextManager.getTraceSegmentId();
     }
 
     @Override

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/boot/BootService.java
Patch:
@@ -8,5 +8,5 @@
  * @author wusheng
  */
 public interface BootService {
-    void bootUp() throws Exception;
+    void bootUp() throws Throwable;
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/boot/ServiceManager.java
Patch:
@@ -23,14 +23,14 @@ public enum ServiceManager {
     public void boot() {
         if (!isStarted) {
             try {
-                bootedServices = new HashMap<>();
+                bootedServices = new HashMap<Class, BootService>();
                 Iterator<BootService> serviceIterator = load().iterator();
                 while (serviceIterator.hasNext()) {
                     BootService bootService = serviceIterator.next();
                     try {
                         bootService.bootUp();
                         bootedServices.put(bootService.getClass(), bootService);
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         logger.error(e, "ServiceManager try to start [{}] fail.", bootService.getClass().getName());
                     }
                 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/boot/StatusBootService.java
Patch:
@@ -18,7 +18,7 @@ protected boolean isStarted(){
     }
 
     @Override
-    public final void bootUp() throws Exception{
+    public final void bootUp() throws Throwable{
         try {
             bootUpWithStatus();
             started = true;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/conf/Config.java
Patch:
@@ -11,6 +11,7 @@ public static class SkyWalking {
 
         public static String SERVERS = "";
 
+        public static String SERVICE_NAME = "/segments";
     }
 
     public static class Disruptor{

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/context/ContextCarrier.java
Patch:
@@ -165,7 +165,7 @@ private List<DistributedTraceId> deserializeDistributedTraceIds(String text) {
             return null;
         }
         String[] propagationTraceIdValues = text.split(",");
-        List<DistributedTraceId> traceIds = new LinkedList<>();
+        List<DistributedTraceId> traceIds = new LinkedList<DistributedTraceId>();
         for (String propagationTraceIdValue : propagationTraceIdValues) {
             traceIds.add(new PropagatedTraceId(propagationTraceIdValue));
         }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/context/ContextManager.java
Patch:
@@ -18,7 +18,7 @@
  * Created by wusheng on 2017/2/17.
  */
 public class ContextManager implements TracerContextListener, BootService {
-    private static ThreadLocal<TracerContext> CONTEXT = new ThreadLocal<>();
+    private static ThreadLocal<TracerContext> CONTEXT = new ThreadLocal<TracerContext>();
 
     private static TracerContext get() {
         TracerContext segment = CONTEXT.get();

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/context/TracerContext.java
Patch:
@@ -186,7 +186,7 @@ private int getTopElementIdx() {
     }
 
     public static class ListenerManager {
-        private static List<TracerContextListener> listeners = new LinkedList<>();
+        private static List<TracerContextListener> listeners = new LinkedList<TracerContextListener>();
 
         /**
          * Add the given {@link TracerContextListener} to {@link #listeners} list.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginBootstrap.java
Patch:
@@ -31,7 +31,7 @@ public List<AbstractClassEnhancePluginDefine> loadPlugins() {
 
         if (resources == null || resources.size() == 0) {
             logger.info("no plugin files (skywalking-plugin.properties) found, continue to start application.");
-            return new ArrayList<>();
+            return new ArrayList<AbstractClassEnhancePluginDefine>();
         }
 
         for (URL pluginUrl : resources) {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassInstanceMethodsInterceptor.java
Patch:
@@ -46,7 +46,7 @@ public ClassInstanceMethodsInterceptor(String instanceMethodsAroundInterceptorCl
      */
     @RuntimeType
     public Object intercept(@This Object obj, @AllArguments Object[] allArguments, @Origin Method method, @SuperCall Callable<?> zuper,
-            @FieldValue(ClassEnhancePluginDefine.contextAttrName) EnhancedClassInstanceContext instanceContext) throws Exception {
+            @FieldValue(ClassEnhancePluginDefine.contextAttrName) EnhancedClassInstanceContext instanceContext) throws Throwable {
         InstanceMethodsAroundInterceptor interceptor = InterceptorInstanceLoader
                 .load(instanceMethodsAroundInterceptorClassName, obj.getClass().getClassLoader());
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassStaticMethodsInterceptor.java
Patch:
@@ -46,7 +46,7 @@ public ClassStaticMethodsInterceptor(String staticMethodsAroundInterceptorClassN
      *          or unexpected exception in sky-walking ( This is a bug, if anything triggers this condition ).
      */
     @RuntimeType
-    public Object intercept(@Origin Class<?> clazz, @AllArguments Object[] allArguments, @Origin Method method, @SuperCall Callable<?> zuper) throws Exception {
+    public Object intercept(@Origin Class<?> clazz, @AllArguments Object[] allArguments, @Origin Method method, @SuperCall Callable<?> zuper) throws Throwable {
         StaticMethodsAroundInterceptor interceptor = InterceptorInstanceLoader
                 .load(staticMethodsAroundInterceptorClassName, clazz.getClassLoader());
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/loader/InterceptorInstanceLoader.java
Patch:
@@ -30,7 +30,7 @@
 public class InterceptorInstanceLoader {
     private static ILog logger = LogManager.getLogger(InterceptorInstanceLoader.class);
 
-    private static ConcurrentHashMap<String, Object> INSTANCE_CACHE = new ConcurrentHashMap<>();
+    private static ConcurrentHashMap<String, Object> INSTANCE_CACHE = new ConcurrentHashMap<String, Object>();
 
     private static ReentrantLock instanceLoadLock = new ReentrantLock();
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/queue/TraceSegmentProcessQueue.java
Patch:
@@ -30,7 +30,7 @@ public class TraceSegmentProcessQueue extends StatusBootService implements Trace
     private volatile int cacheIndex;
 
     public TraceSegmentProcessQueue() {
-        disruptor = new Disruptor<>(TraceSegmentHolder.Factory.INSTANCE, Config.Disruptor.BUFFER_SIZE, DaemonThreadFactory.INSTANCE);
+        disruptor = new Disruptor<TraceSegmentHolder>(TraceSegmentHolder.Factory.INSTANCE, Config.Disruptor.BUFFER_SIZE, DaemonThreadFactory.INSTANCE);
         secondLevelCache = new TraceSegment[Config.Disruptor.BUFFER_SIZE];
         cacheIndex = 0;
         disruptor.handleEventsWith(this);
@@ -83,7 +83,7 @@ public void onEvent(TraceSegmentHolder event, long sequence, boolean endOfBatch)
     }
 
     public List<TraceSegment> getCachedTraceSegments(){
-        List<TraceSegment> segmentList = new LinkedList<>();
+        List<TraceSegment> segmentList = new LinkedList<TraceSegment>();
         for (int i = 0; i < secondLevelCache.length; i++) {
             TraceSegment segment = secondLevelCache[i];
             if(segment != null){

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/context/ContextCarrierTestCase.java
Patch:
@@ -18,7 +18,7 @@ public void testSerialize(){
         carrier.setSpanId(100);
         carrier.setApplicationCode("REMOTE_APP");
         carrier.setPeerHost("10.2.3.16:8080");
-        List<DistributedTraceId> ids = new LinkedList<>();
+        List<DistributedTraceId> ids = new LinkedList<DistributedTraceId>();
         ids.add(new PropagatedTraceId("Trace.global.id.123"));
         carrier.setDistributedTraceIds(ids);
 

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/context/TracerContextTestCase.java
Patch:
@@ -77,7 +77,7 @@ public void testExtract(){
         carrier.setSpanId(5);
         carrier.setApplicationCode("REMOTE_APP");
         carrier.setPeerHost("10.2.3.16:8080");
-        List<DistributedTraceId> ids = new LinkedList<>();
+        List<DistributedTraceId> ids = new LinkedList<DistributedTraceId>();
         ids.add(new PropagatedTraceId("Trace.global.id.123"));
         carrier.setDistributedTraceIds(ids);
 

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/PluginFinderTest.java
Patch:
@@ -11,7 +11,7 @@
 public class PluginFinderTest {
     @Test
     public void testFind(){
-        ArrayList<AbstractClassEnhancePluginDefine> defines = new ArrayList<>();
+        ArrayList<AbstractClassEnhancePluginDefine> defines = new ArrayList<AbstractClassEnhancePluginDefine>();
         defines.add(new NewTestPlugin());
         defines.add(new NewTestPlugin2());
         PluginFinder finder = new PluginFinder(defines);
@@ -22,7 +22,7 @@ public void testFind(){
 
     @Test(expected = PluginException.class)
     public void testCanNotFind(){
-        ArrayList<AbstractClassEnhancePluginDefine> defines = new ArrayList<>();
+        ArrayList<AbstractClassEnhancePluginDefine> defines = new ArrayList<AbstractClassEnhancePluginDefine>();
         defines.add(new NewTestPlugin());
         PluginFinder finder = new PluginFinder(defines);
 

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/conf/SnifferConfigInitializerTest.java
Patch:
@@ -14,7 +14,6 @@ public void testInitialize(){
         Config.SkyWalking.IS_PREMAIN_MODE = false;
         SnifferConfigInitializer.initialize();
 
-        Assert.assertEquals("testUser", Config.SkyWalking.USERNAME);
         Assert.assertEquals("crmApp", Config.SkyWalking.APPLICATION_CODE);
         Assert.assertEquals("127.0.0.1:8080", Config.SkyWalking.SERVERS);
 

File: skywalking-commons/skywalking-logging-api/src/main/java/com/a/eye/skywalking/logging/ILog.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.api.logging;
+package com.a.eye.skywalking.logging;
 
 /**
  * The Log interface.

File: skywalking-commons/skywalking-logging-api/src/main/java/com/a/eye/skywalking/logging/LogManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.api.logging;
+package com.a.eye.skywalking.logging;
 
 /**
  * LogManager is the {@link LogResolver} implementation manager.

File: skywalking-commons/skywalking-logging-api/src/main/java/com/a/eye/skywalking/logging/LogResolver.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.api.logging;
+package com.a.eye.skywalking.logging;
 
 /**
  * {@link LogResolver} just do only one thing: return the {@link ILog} implementation.

File: skywalking-commons/skywalking-logging-api/src/main/java/com/a/eye/skywalking/logging/NoopLogger.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.api.logging;
+package com.a.eye.skywalking.logging;
 
 
 /**

File: skywalking-commons/skywalking-logging-api/src/test/java/com/a/eye/skywalking/logging/NoopLoggerTest.java
Patch:
@@ -1,9 +1,8 @@
-package com.a.eye.skywalking.api.logging;
-
+package com.a.eye.skywalking.logging;
 import org.junit.Assert;
 import org.junit.Test;
 
-import static com.a.eye.skywalking.api.logging.NoopLogger.INSTANCE;
+import static com.a.eye.skywalking.logging.NoopLogger.INSTANCE;
 
 /**
  * Created by wusheng on 2017/2/27.

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/SpanTestCase.java
Patch:
@@ -25,7 +25,7 @@ public void testConstructors() {
 
     @Test
     public void testFinish() {
-        TraceSegment owner = new TraceSegment("trace_1", "billing_app");
+        TraceSegment owner = new TraceSegment("billing_app");
 
         Span span1 = new Span(0, "serviceA");
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/conf/Config.java
Patch:
@@ -16,7 +16,7 @@ public static class SkyWalking {
     }
 
     public static class Disruptor{
-        public static int BUFFER_SIZE = 1024 * 4;
+        public static int BUFFER_SIZE = 512;
     }
 
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/conf/Constants.java
Patch:
@@ -1,11 +1,11 @@
 package com.a.eye.skywalking.api.conf;
 
-import com.a.eye.skywalking.api.util.TraceIdGenerator;
+import com.a.eye.skywalking.trace.GlobalIdGenerator;
 
 public class Constants {
 	/**
 	 * This is the version, which will be the first segment of traceid.
-	 * Ref {@link TraceIdGenerator#generate()}
+	 * Ref {@link GlobalIdGenerator#generate()}
 	 */
 	public final static String SDK_VERSION = "302017";
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/conf/SnifferConfigInitializer.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.conf;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
 import com.a.eye.skywalking.api.util.ConfigInitializer;
 import com.a.eye.skywalking.api.util.StringUtil;
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/EasyLogResolver.java
Patch:
@@ -1,5 +1,8 @@
 package com.a.eye.skywalking.api.logging;
 
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogResolver;
+
 /**
  * Created by wusheng on 2016/11/26.
  */

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/EasyLogger.java
Patch:
@@ -1,6 +1,7 @@
 package com.a.eye.skywalking.api.logging;
 
 
+import com.a.eye.skywalking.logging.ILog;
 import java.net.URLEncoder;
 import java.text.SimpleDateFormat;
 import java.util.Date;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/AbstractClassEnhancePluginDefine.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.plugin;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassEnhancePluginDefine;
 import com.a.eye.skywalking.api.util.StringUtil;
 import net.bytebuddy.dynamic.DynamicType;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginBootstrap.java
Patch:
@@ -1,7 +1,8 @@
 package com.a.eye.skywalking.api.plugin;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
+
 import net.bytebuddy.pool.TypePool;
 
 import java.net.URL;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginResourcesResolver.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.plugin;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
 
 import java.io.IOException;
 import java.net.URL;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/TracingBootstrap.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.plugin;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
 import net.bytebuddy.ByteBuddy;
 import net.bytebuddy.dynamic.ClassFileLocator;
 import net.bytebuddy.dynamic.DynamicType;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassConstructorInterceptor.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
 import com.a.eye.skywalking.api.plugin.interceptor.loader.InterceptorInstanceLoader;
 import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassEnhancePluginDefine.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
 import com.a.eye.skywalking.api.plugin.AbstractClassEnhancePluginDefine;
 import com.a.eye.skywalking.api.plugin.PluginException;
 import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassInstanceMethodsInterceptor.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
 import com.a.eye.skywalking.api.plugin.interceptor.loader.InterceptorInstanceLoader;
 import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import net.bytebuddy.implementation.bind.annotation.*;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassStaticMethodsInterceptor.java
Patch:
@@ -1,12 +1,12 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
 import com.a.eye.skywalking.api.plugin.interceptor.loader.InterceptorInstanceLoader;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;
 import net.bytebuddy.implementation.bind.annotation.Origin;
 import net.bytebuddy.implementation.bind.annotation.RuntimeType;
 import net.bytebuddy.implementation.bind.annotation.SuperCall;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
 
 import java.lang.reflect.Method;
 import java.util.concurrent.Callable;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/DefaultClassConstructorInterceptor.java
Patch:
@@ -1,7 +1,8 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
+
 import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;
 import net.bytebuddy.implementation.bind.annotation.FieldProxy;

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/context/ContextManagerTestCase.java
Patch:
@@ -13,13 +13,13 @@
 public class ContextManagerTestCase {
     @Test
     public void testDelegateToTracerContext(){
-        Span span = ContextManager.INSTANCE.createSpan("serviceA");
+        Span span = ContextManager.createSpan("serviceA");
         Tags.COMPONENT.set(span, "test");
 
-        Assert.assertEquals(span, ContextManager.INSTANCE.activeSpan());
+        Assert.assertEquals(span, ContextManager.activeSpan());
 
         TracerContext.ListenerManager.add(TestTracerContextListener.INSTANCE);
-        ContextManager.INSTANCE.stopSpan();
+        ContextManager.stopSpan();
 
         TraceSegment segment = TestTracerContextListener.INSTANCE.finishedSegmentCarrier[0];
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/CallableStatement/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/CallableStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
@@ -36,12 +36,12 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
             }
             return exec.exe(realStatement, sql);
         } catch (SQLException e) {
-            Span span = ContextManager.INSTANCE.activeSpan();
+            Span span = ContextManager.activeSpan();
             Tags.ERROR.set(span, true);
             span.log(e);
             throw e;
         } finally {
-            ContextManager.INSTANCE.stopSpan();
+            ContextManager.stopSpan();
         }
     }
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.Connection realConnection,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/Connection/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/Connection/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
@@ -36,12 +36,12 @@ public static <R> R execute(java.sql.Connection realConnection,
             }
             return exec.exe(realConnection, sql);
         } catch (SQLException e) {
-            Span span = ContextManager.INSTANCE.activeSpan();
+            Span span = ContextManager.activeSpan();
             Tags.ERROR.set(span, true);
             span.log(e);
             throw e;
         } finally {
-            ContextManager.INSTANCE.stopSpan();
+            ContextManager.stopSpan();
         }
     }
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/PreparedStatement/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/PreparedStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
@@ -35,12 +35,12 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
             Tags.SPAN_LAYER.asDB(span);
             return exec.exe(realStatement, sql);
         } catch (SQLException e) {
-            Span span = ContextManager.INSTANCE.activeSpan();
+            Span span = ContextManager.activeSpan();
             Tags.ERROR.set(span, true);
             span.log(e);
             throw e;
         } finally {
-            ContextManager.INSTANCE.stopSpan();
+            ContextManager.stopSpan();
         }
     }
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/StatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.Statement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/Statement/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/Statement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
@@ -35,12 +35,12 @@ public static <R> R execute(java.sql.Statement realStatement,
             }
             return exec.exe(realStatement, sql);
         } catch (SQLException e) {
-            Span span = ContextManager.INSTANCE.activeSpan();
+            Span span = ContextManager.activeSpan();
             Tags.ERROR.set(span, true);
             span.log(e);
             throw e;
         } finally {
-            ContextManager.INSTANCE.stopSpan();
+            ContextManager.stopSpan();
         }
     }
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/define/OracleInstrumentation.java
Patch:
@@ -9,6 +9,6 @@
 public class OracleInstrumentation extends AbstractDatabaseInstrumentation {
     @Override
     protected String enhanceClassName() {
-        return "oracle.jdbc.OracleDriver";
+        return "oracle.jdbc.driver.OracleDriver";
     }
 }

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/test/java/com/a/eye/skywalking/plugin/jdbc/SWCallableStatementTest.java
Patch:
@@ -1,12 +1,11 @@
 package com.a.eye.skywalking.plugin.jdbc;
 
+import com.a.eye.skywalking.api.boot.ServiceManager;
 import com.a.eye.skywalking.api.context.TracerContext;
 import com.a.eye.skywalking.sniffer.mock.context.MockTracerContextListener;
 import com.a.eye.skywalking.sniffer.mock.context.SegmentAssert;
-import com.a.eye.skywalking.trace.LogData;
 import com.a.eye.skywalking.trace.Span;
 import com.a.eye.skywalking.trace.TraceSegment;
-import com.a.eye.skywalking.trace.tag.Tags;
 import com.mysql.cj.api.jdbc.JdbcConnection;
 
 import org.hamcrest.CoreMatchers;
@@ -89,6 +88,7 @@ public class SWCallableStatementTest extends AbstractStatementTest {
     @Before
     public void setUp() throws Exception {
         mockTracerContextListener = new MockTracerContextListener();
+        ServiceManager.INSTANCE.boot();
         swConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306/test", new Properties(), jdbcConnection);
         multiHostConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306,127.0.0.1:3309/test", new Properties(), jdbcConnection);
 
@@ -749,4 +749,4 @@ public void tearDown() throws Exception {
         TracerContext.ListenerManager.remove(mockTracerContextListener);
     }
 
-}
\ No newline at end of file
+}

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/test/java/com/a/eye/skywalking/plugin/jdbc/SWConnectionTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.a.eye.skywalking.plugin.jdbc;
 
+import com.a.eye.skywalking.api.boot.ServiceManager;
 import com.a.eye.skywalking.api.context.TracerContext;
 import com.a.eye.skywalking.sniffer.mock.context.MockTracerContextListener;
 import com.a.eye.skywalking.sniffer.mock.context.SegmentAssert;
@@ -46,6 +47,7 @@ public class SWConnectionTest extends AbstractStatementTest {
 
     @Before
     public void setUp() throws Exception {
+        ServiceManager.INSTANCE.boot();
         mockTracerContextListener = new MockTracerContextListener();
         swConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306/test", new Properties(), jdbcConnection);
         multiHostConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306,127.0.0.1:3309/test", new Properties(), jdbcConnection);
@@ -358,4 +360,4 @@ public void tearDown() throws Exception {
         TracerContext.ListenerManager.remove(mockTracerContextListener);
     }
 
-}
\ No newline at end of file
+}

File: skywalking-sniffer/skywalking-sniffer-mock/src/main/java/com/a/eye/skywalking/sniffer/mock/trace/builders/span/MySQLGenerator.java
Patch:
@@ -12,7 +12,7 @@
 public class MySQLGenerator {
     public static class Query extends SpanGeneration {
         @Override protected void before() {
-            Span span = ContextManager.INSTANCE.createSpan("mysql/jdbi/statement/executeQuery");
+            Span span = ContextManager.createSpan("mysql/jdbi/statement/executeQuery");
             Tags.COMPONENT.set(span, "Mysql");
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             Tags.PEER_HOST.set(span, "10.5.34.18");
@@ -24,7 +24,7 @@ public static class Query extends SpanGeneration {
         }
 
         @Override protected void after() {
-            ContextManager.INSTANCE.stopSpan();
+            ContextManager.stopSpan();
         }
     }
 }

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v1/x/PrintTraceIdInterceptor.java
Patch:
@@ -26,7 +26,7 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
      */
     @Override
     public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext, Object ret) {
-        return "TID:" + ContextManager.INSTANCE.getTraceSegmentId();
+        return "TID:" + ContextManager.getTraceSegmentId();
     }
 
     @Override

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-2.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v2/x/PrintTraceIdInterceptor.java
Patch:
@@ -19,7 +19,7 @@ public class PrintTraceIdInterceptor implements StaticMethodsAroundInterceptor {
      */
     @Override
     public void beforeMethod(StaticMethodInvokeContext interceptorContext, MethodInterceptResult result) {
-        ((StringBuilder) interceptorContext.allArguments()[0]).append("TID:" + ContextManager.INSTANCE.getTraceSegmentId());
+        ((StringBuilder) interceptorContext.allArguments()[0]).append("TID:" + ContextManager.getTraceSegmentId());
 
         //make sure origin method do not invoke.
         result.defineReturnValue(null);

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-logback-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/logback/v1/x/LogbackPatternConverterActivation.java
Patch:
@@ -47,7 +47,7 @@ public ElementMatcher<MethodDescription> getMethodsMatcher() {
 
             @Override
             public String getMethodsInterceptor() {
-                return "com.a.eye.skywalking.toolkit.log.logback.v1.x.PrintTraceIdInterceptor";
+                return "com.a.eye.skywalking.toolkit.activation.log.logback.v1.x.PrintTraceIdInterceptor";
             }
         }};
     }

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-logback-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/logback/v1/x/PrintTraceIdInterceptor.java
Patch:
@@ -25,7 +25,7 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
      */
     @Override
     public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext, Object ret) {
-        return "TID:" + ContextManager.INSTANCE.getTraceSegmentId();
+        return "TID:" + ContextManager.getTraceSegmentId();
     }
 
     @Override

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanFinishInterceptor.java
Patch:
@@ -22,9 +22,9 @@ public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodIn
         Object[] allArguments = interceptorContext.allArguments();
 
         if(allArguments.length == 1) {
-            ContextManager.INSTANCE.stopSpan(((Long)allArguments[0]));
+            ContextManager.stopSpan(((Long)allArguments[0]));
         }else{
-            ContextManager.INSTANCE.stopSpan();
+            ContextManager.stopSpan();
         }
 
         return ret;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanNewInstanceInterceptor.java
Patch:
@@ -19,7 +19,7 @@ public void onConstruct(EnhancedClassInstanceContext context, ConstructorInvokeC
         String operationName = ((String)allArguments[0]);
         long startTime = ((Long)allArguments[1]);
         Map<String, String> tags = ((Map<String, String>)allArguments[2]);
-        Span span = ContextManager.INSTANCE.createSpan(operationName, startTime);
+        Span span = ContextManager.createSpan(operationName, startTime);
 
         for (Map.Entry<String, String> entry : tags.entrySet()) {
             span.setTag(entry.getKey(), entry.getValue());

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanSetOperationNameInterceptor.java
Patch:
@@ -15,7 +15,7 @@ public class SpanSetOperationNameInterceptor implements InstanceMethodsAroundInt
     @Override
     public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext, MethodInterceptResult result) {
         String operationName = (String)interceptorContext.allArguments()[0];
-        ContextManager.INSTANCE.activeSpan().setOperationName(operationName);
+        ContextManager.activeSpan().setOperationName(operationName);
     }
 
     @Override

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanSetTagInterceptor.java
Patch:
@@ -21,11 +21,11 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         String key = (String)interceptorContext.allArguments()[0];
         Object value = interceptorContext.allArguments()[1];
         if (value instanceof String)
-            ContextManager.INSTANCE.activeSpan().setTag(key, (String)value);
+            ContextManager.activeSpan().setTag(key, (String)value);
         else if (value instanceof Boolean)
-            ContextManager.INSTANCE.activeSpan().setTag(key, (Boolean)value);
+            ContextManager.activeSpan().setTag(key, (Boolean)value);
         else if (value instanceof Number)
-            ContextManager.INSTANCE.activeSpan().setTag(key, (Number)value);
+            ContextManager.activeSpan().setTag(key, (Number)value);
     }
 
     @Override

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/interceptor/TracerExtractCrossProcessByteBufferContextInterceptor.java
Patch:
@@ -29,7 +29,7 @@ public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodIn
         ContextCarrier carrier = new ContextCarrier();
         carrier.deserialize(contextDataStr);
 
-        ContextManager.INSTANCE.extract(carrier);
+        ContextManager.extract(carrier);
         return ret;
     }
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/interceptor/TracerExtractCrossProcessTextMapContextInterceptor.java
Patch:
@@ -35,7 +35,7 @@ public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodIn
                 ContextCarrier carrier = new ContextCarrier();
                 carrier.deserialize(entry.getValue());
 
-                ContextManager.INSTANCE.extract(carrier);
+                ContextManager.extract(carrier);
             }
         }
         return ret;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/interceptor/TracerFormatCrossProcessContextInterceptor.java
Patch:
@@ -20,7 +20,7 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
     @Override
     public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext, Object ret) {
         ContextCarrier carrier = new ContextCarrier();
-        ContextManager.INSTANCE.inject(carrier);
+        ContextManager.inject(carrier);
         return carrier.serialize();
     }
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-trace-context-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/trace/TraceContextInterceptor.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.a.eye.skywalking.api.context.ContextCarrier;
 import com.a.eye.skywalking.api.context.ContextManager;
-import com.a.eye.skywalking.api.logging.ILog;
-import com.a.eye.skywalking.api.logging.LogManager;
+import com.a.eye.skywalking.logging.ILog;
+import com.a.eye.skywalking.logging.LogManager;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInvokeContext;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.StaticMethodInvokeContext;
@@ -25,7 +25,7 @@ public void beforeMethod(StaticMethodInvokeContext interceptorContext, MethodInt
     @Override
     public Object afterMethod(StaticMethodInvokeContext interceptorContext, Object ret) {
         ContextCarrier carrier = new ContextCarrier();
-        ContextManager.INSTANCE.inject(carrier);
+        ContextManager.inject(carrier);
        return carrier.getTraceSegmentId();
     }
 

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/TraceSegment.java
Patch:
@@ -106,6 +106,9 @@ public TraceSegment(SegmentMessage message) {
      * @param refSegment {@link TraceSegmentRef}
      */
     public void ref(TraceSegmentRef refSegment) {
+        if (refs == null) {
+            refs = new LinkedList<TraceSegmentRef>();
+        }
         if(!refs.contains(refSegment)){
             refs.add(refSegment);
         }

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/context/TracerContextTestCase.java
Patch:
@@ -92,8 +92,8 @@ public void testExtract(){
 
         context.stopSpan(span);
 
-        Assert.assertEquals("trace_id_1", finishedSegmentCarrier[0].getPrimaryRef().getTraceSegmentId());
-        Assert.assertEquals(5, finishedSegmentCarrier[0].getPrimaryRef().getSpanId());
+        Assert.assertEquals("trace_id_1", finishedSegmentCarrier[0].getRefs().get(0).getTraceSegmentId());
+        Assert.assertEquals(5, finishedSegmentCarrier[0].getRefs().get(0).getSpanId());
     }
 
     @After

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -205,7 +205,7 @@ private void assertProvider() {
             public void call(TraceSegment traceSegment) {
                 assertThat(traceSegment.getSpans().size(), is(1));
                 assertProviderSpan(traceSegment.getSpans().get(0));
-                assertTraceSegmentRef(traceSegment.getPrimaryRef(), expect);
+                assertTraceSegmentRef(traceSegment.getRefs().get(0), expect);
             }
         });
     }

File: skywalking-sniffer/skywalking-sdk-plugin/tomcat-7.x-8.x-plugin/src/test/java/com/a/eye/skywalking/plugin/tomcat78x/TomcatInterceptorTest.java
Patch:
@@ -93,7 +93,7 @@ public void call(TraceSegment traceSegment) {
                 assertThat(traceSegment.getSpans().size(), is(1));
                 Span span = traceSegment.getSpans().get(0);
                 assertHttpSpan(span);
-                assertTraceSegmentRef(traceSegment.getPrimaryRef());
+                assertTraceSegmentRef(traceSegment.getRefs().get(0));
             }
         });
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/httpserver/controller/DagController.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * @author pengys5
  */
-public class DagController implements Controller {
+public class DagController extends Controller {
 
     @Override
     public NanoHTTPD.Method httpMethod() {

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisMethodInterceptor.java
Patch:
@@ -4,6 +4,7 @@
 import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.api.plugin.interceptor.assist.NoCocurrencyAceessObject;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodInvokeContext;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 import com.a.eye.skywalking.api.util.StringUtil;
 import com.a.eye.skywalking.trace.Span;
@@ -16,7 +17,7 @@
  *
  * @author zhangxin
  */
-public class JedisMethodInterceptor extends NoCocurrencyAceessObject {
+public class JedisMethodInterceptor extends NoCocurrencyAceessObject implements InstanceMethodsAroundInterceptor {
     /**
      * The key name that redis connection information in {@link EnhancedClassInstanceContext#context}.
      */

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -55,10 +55,10 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         Tags.URL.set(span, generateRequestURL(requestURL, invocation));
         Tags.COMPONENT.set(span, DUBBO_COMPONENT);
         Tags.SPAN_LAYER.asRPCFramework(span);
+        Tags.PEER_HOST.set(span, requestURL.getHost());
+        Tags.PEER_PORT.set(span, requestURL.getPort());
 
         if (isConsumer) {
-            Tags.PEER_HOST.set(span, requestURL.getHost());
-            Tags.PEER_PORT.set(span, requestURL.getPort());
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             ContextCarrier contextCarrier = new ContextCarrier();
             ContextManager.inject(contextCarrier);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.createSpan("JDBC/CallableStatement/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/CallableStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.Connection realConnection,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.createSpan("JDBC/Connection/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/Connection/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.createSpan("JDBC/PreparedStatement/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/PreparedStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/StatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.Statement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.createSpan("JDBC/Statement/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/Statement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.createSpan("JDBC/CallableStatement/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/CallableStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.Connection realConnection,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.createSpan("JDBC/Connection/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/Connection/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.createSpan("JDBC/PreparedStatement/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/PreparedStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/StatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.Statement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.createSpan("JDBC/Statement/" + method);
+            Span span = ContextManager.createSpan(connectInfo.getDBType() + "/JDBI/Statement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/define/OracleInstrumentation.java
Patch:
@@ -9,6 +9,6 @@
 public class OracleInstrumentation extends AbstractDatabaseInstrumentation {
     @Override
     protected String enhanceClassName() {
-        return "oracle.jdbc.OracleDriver";
+        return "oracle.jdbc.driver.OracleDriver";
     }
 }

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/test/java/com/a/eye/skywalking/plugin/jdbc/SWConnectionTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.a.eye.skywalking.plugin.jdbc;
 
+import com.a.eye.skywalking.api.boot.ServiceStarter;
 import com.a.eye.skywalking.api.context.TracerContext;
 import com.a.eye.skywalking.sniffer.mock.context.MockTracerContextListener;
 import com.a.eye.skywalking.sniffer.mock.context.SegmentAssert;
@@ -46,6 +47,7 @@ public class SWConnectionTest extends AbstractStatementTest {
 
     @Before
     public void setUp() throws Exception {
+        ServiceStarter.INSTANCE.boot();
         mockTracerContextListener = new MockTracerContextListener();
         swConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306/test", new Properties(), jdbcConnection);
         multiHostConnection = new SWConnection("jdbc:mysql://127.0.0.1:3306,127.0.0.1:3309/test", new Properties(), jdbcConnection);
@@ -358,4 +360,4 @@ public void tearDown() throws Exception {
         TracerContext.ListenerManager.remove(mockTracerContextListener);
     }
 
-}
\ No newline at end of file
+}

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -55,10 +55,10 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         Tags.URL.set(span, generateRequestURL(requestURL, invocation));
         Tags.COMPONENT.set(span, DUBBO_COMPONENT);
         Tags.SPAN_LAYER.asRPCFramework(span);
+        Tags.PEER_HOST.set(span, requestURL.getHost());
+        Tags.PEER_PORT.set(span, requestURL.getPort());
 
         if (isConsumer) {
-            Tags.PEER_HOST.set(span, requestURL.getHost());
-            Tags.PEER_PORT.set(span, requestURL.getPort());
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             ContextCarrier contextCarrier = new ContextCarrier();
             ContextManager.INSTANCE.inject(contextCarrier);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan("JDBC/CallableStatement/" + method);
+            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/CallableStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.Connection realConnection,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan("JDBC/Connection/" + method);
+            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/Connection/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan("JDBC/PreparedStatement/" + method);
+            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/PreparedStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/StatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.Statement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan("JDBC/Statement/" + method);
+            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/Statement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan("JDBC/CallableStatement/" + method);
+            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/CallableStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -22,7 +22,7 @@ public static <R> R execute(java.sql.Connection realConnection,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan("JDBC/Connection/" + method);
+            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/Connection/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan("JDBC/PreparedStatement/" + method);
+            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/PreparedStatement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/StatementTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(java.sql.Statement realStatement,
                                 ConnectionInfo connectInfo, String method, String sql, Executable<R> exec)
             throws SQLException {
         try {
-            Span span = ContextManager.INSTANCE.createSpan("JDBC/Statement/" + method);
+            Span span = ContextManager.INSTANCE.createSpan(connectInfo.getDBType() + "/JDBI/Statement/" + method);
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -55,10 +55,10 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         Tags.URL.set(span, generateRequestURL(requestURL, invocation));
         Tags.COMPONENT.set(span, DUBBO_COMPONENT);
         Tags.SPAN_LAYER.asRPCFramework(span);
+        Tags.PEER_HOST.set(span, requestURL.getHost());
+        Tags.PEER_PORT.set(span, requestURL.getPort());
 
         if (isConsumer) {
-            Tags.PEER_HOST.set(span, requestURL.getHost());
-            Tags.PEER_PORT.set(span, requestURL.getPort());
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             ContextCarrier contextCarrier = new ContextCarrier();
             ContextManager.INSTANCE.inject(contextCarrier);

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/cluster/WorkersListener.java
Patch:
@@ -38,10 +38,7 @@ public void onReceive(Object message) throws Throwable {
         if (message instanceof WorkerListenerMessage.RegisterMessage) {
             WorkerListenerMessage.RegisterMessage register = (WorkerListenerMessage.RegisterMessage) message;
             ActorRef sender = getSender();
-//            getContext().watch(sender);
-
             logger.info("register worker of role: %s, path: %s", register.getWorkRole(), sender.toString());
-
             WorkersRefCenter.INSTANCE.register(sender, register.getWorkRole());
         } else if (message instanceof Terminated) {
             Terminated terminated = (Terminated) message;

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/Span.java
Patch:
@@ -270,6 +270,7 @@ public Span log(Throwable t) {
     public SpanMessage serialize() {
         SpanMessage.Builder builder = SpanMessage.newBuilder();
         builder.setSpanId(spanId);
+        builder.setParentSpanId(parentSpanId);
         builder.setStartTime(startTime);
         builder.setEndTime(endTime);
         builder.setOperationName(operationName);
@@ -292,6 +293,7 @@ public SpanMessage serialize() {
     @Override
     public void deserialize(SpanMessage message) {
         spanId = message.getSpanId();
+        parentSpanId = message.getParentSpanId();
         startTime = message.getStartTime();
         endTime = message.getEndTime();
         operationName = message.getOperationName();

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/assist/NoCocurrencyAceessObject.java
Patch:
@@ -30,6 +30,7 @@ public void whenEnter(EnhancedClassInstanceContext context, Runnable runnable) {
         if(++counter == 1){
             runnable.run();
         }
+        context.set(invokeCounterKey, counter);
     }
 
     public void whenExist(EnhancedClassInstanceContext context, Runnable runnable) {
@@ -42,5 +43,6 @@ public void whenExist(EnhancedClassInstanceContext context, Runnable runnable) {
         if(--counter == 0){
             runnable.run();
         }
+        context.set(invokeCounterKey, counter);
     }
 }

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -54,11 +54,11 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         Span span = ContextManager.INSTANCE.createSpan(generateOperationName(requestURL, invocation));
         Tags.URL.set(span, generateRequestURL(requestURL, invocation));
         Tags.COMPONENT.set(span, DUBBO_COMPONENT);
-        Tags.PEER_HOST.set(span, requestURL.getHost());
-        Tags.PEER_PORT.set(span, requestURL.getPort());
         Tags.SPAN_LAYER.asRPCFramework(span);
 
         if (isConsumer) {
+            Tags.PEER_HOST.set(span, requestURL.getHost());
+            Tags.PEER_PORT.set(span, requestURL.getPort());
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             ContextCarrier contextCarrier = new ContextCarrier();
             ContextManager.INSTANCE.inject(contextCarrier);

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/test/java/com/a/eye/skywalking/plugin/httpClient/v4/HttpClientExecuteInterceptorTest.java
Patch:
@@ -77,7 +77,7 @@ public ProtocolVersion getProtocolVersion() {
 
             @Override
             public String getUri() {
-                return "/test-web/test";
+                return "http://127.0.0.1:8080/test-web/test";
             }
         });
         when(httpHost.getPort()).thenReturn(8080);
@@ -151,7 +151,7 @@ private void assertHttpSpanErrorLog(List<LogData> logs) {
 
     private void assertHttpSpan(Span span) {
         assertThat(span.getOperationName(), is("/test-web/test"));
-        assertThat(Tags.COMPONENT.get(span), is("Http"));
+        assertThat(Tags.COMPONENT.get(span), is("HttpClient"));
         assertThat(Tags.PEER_HOST.get(span), is("127.0.0.1"));
         assertThat(Tags.PEER_PORT.get(span), is(8080));
         assertThat(Tags.URL.get(span), is("http://127.0.0.1:8080/test-web/test"));

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/test/java/com/a/eye/skywalking/plugin/httpClient/v4/HttpClientExecuteInterceptorTest.java
Patch:
@@ -77,7 +77,7 @@ public ProtocolVersion getProtocolVersion() {
 
             @Override
             public String getUri() {
-                return "/test-web/test";
+                return "http://127.0.0.1:8080/test-web/test";
             }
         });
         when(httpHost.getPort()).thenReturn(8080);
@@ -151,7 +151,7 @@ private void assertHttpSpanErrorLog(List<LogData> logs) {
 
     private void assertHttpSpan(Span span) {
         assertThat(span.getOperationName(), is("/test-web/test"));
-        assertThat(Tags.COMPONENT.get(span), is("Http"));
+        assertThat(Tags.COMPONENT.get(span), is("HttpClient"));
         assertThat(Tags.PEER_HOST.get(span), is("127.0.0.1"));
         assertThat(Tags.PEER_PORT.get(span), is(8080));
         assertThat(Tags.URL.get(span), is("http://127.0.0.1:8080/test-web/test"));

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/selector/RollingSelector.java
Patch:
@@ -11,7 +11,7 @@
  *
  * @author wusheng
  */
-public enum RollingSelector implements WorkerSelector<Object> {
+public enum RollingSelector implements WorkerSelector {
     INSTANCE;
 
     /**

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/applicationref/ApplicationRefMember.java
Patch:
@@ -2,6 +2,7 @@
 
 import akka.actor.ActorRef;
 import com.a.eye.skywalking.collector.actor.AbstractMember;
+import com.a.eye.skywalking.collector.actor.AbstractSyncMember;
 import com.a.eye.skywalking.collector.actor.AbstractSyncMemberProvider;
 import com.a.eye.skywalking.collector.actor.selector.RollingSelector;
 import com.a.eye.skywalking.collector.worker.applicationref.presistence.DAGNodeRefPersistence;
@@ -10,7 +11,7 @@
 /**
  * @author pengys5
  */
-public class ApplicationRefMember extends AbstractMember {
+public class ApplicationRefMember extends AbstractSyncMember {
 
     public ApplicationRefMember(ActorRef actorRef) throws Throwable {
         super(actorRef);

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -54,11 +54,11 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
         Span span = ContextManager.INSTANCE.createSpan(generateOperationName(requestURL, invocation));
         Tags.URL.set(span, generateRequestURL(requestURL, invocation));
         Tags.COMPONENT.set(span, DUBBO_COMPONENT);
-        Tags.PEER_HOST.set(span, requestURL.getHost());
-        Tags.PEER_PORT.set(span, requestURL.getPort());
         Tags.SPAN_LAYER.asRPCFramework(span);
 
         if (isConsumer) {
+            Tags.PEER_HOST.set(span, requestURL.getHost());
+            Tags.PEER_PORT.set(span, requestURL.getPort());
             Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
             ContextCarrier contextCarrier = new ContextCarrier();
             ContextManager.INSTANCE.inject(contextCarrier);

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {
     public static final String HEADER_NAME_OF_CONTEXT_DATA = "SWTraceContext";
-    private static final String COMPONENT_NAME = "Http";
+    private static final String COMPONENT_NAME = "HttpClient";
 
     @Override
     public void beforeMethod(EnhancedClassInstanceContext context,
@@ -56,7 +56,7 @@ public void beforeMethod(EnhancedClassInstanceContext context,
      * @return request URL
      */
     private String generateURL(HttpHost httpHost, HttpRequest httpRequest) {
-        return httpHost.getSchemeName() + "://" + httpHost.getHostName() + ":" + httpHost.getPort() + httpRequest.getRequestLine().getUri();
+        return httpRequest.getRequestLine().getUri();
     }
 
     @Override

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/cluster/ClusterConfigInitializer.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.collector.cluster;
 
-import com.a.eye.skywalking.api.logging.api.ILog;
-import com.a.eye.skywalking.api.logging.api.LogManager;
 import com.a.eye.skywalking.api.util.ConfigInitializer;
 import com.a.eye.skywalking.api.util.StringUtil;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 import java.io.InputStream;
 import java.util.Properties;
@@ -21,7 +21,7 @@
  */
 public class ClusterConfigInitializer {
 
-    private static ILog logger = LogManager.getLogger(ClusterConfigInitializer.class);
+    private static Logger logger = LogManager.getFormatterLogger(ClusterConfigInitializer.class);
 
     public static final String ConfigFileName = "collector.config";
 

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/application/ApplicationMember.java
Patch:
@@ -86,7 +86,7 @@ private void sendToResponseCostPersistence(TraceSegment traceSegment) throws Thr
         String code = traceSegment.getApplicationCode();
         long startTime = -1;
         long endTime = -1;
-        boolean isError = false;
+        Boolean isError = false;
 
         for (Span span : traceSegment.getSpans()) {
             if (span.getParentSpanId() == -1) {

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/receiver/TraceSegmentReceiver.java
Patch:
@@ -19,8 +19,8 @@ public class TraceSegmentReceiver extends AbstractWorker {
 
     @Override
     public void preStart() throws Exception {
-        ApplicationMember.Factory factory = new ApplicationMember.Factory();
-        factory.createWorker(memberContext(), getSelf());
+        new ApplicationMember.Factory().createWorker(memberContext(), getSelf());
+        new ApplicationRefMember.Factory().createWorker(memberContext(), getSelf());
         super.preStart();
     }
 

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/tag/Tags.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * The span tags are supported by sky-walking engine.
  * As default, all tags will be stored, but these ones have particular meanings.
- *
+ * <p>
  * Created by wusheng on 2017/2/17.
  */
 public final class Tags {
@@ -39,7 +39,7 @@ private Tags() {
 
     /**
      * SPAN_LAYER represents the kind of span.
-     *
+     * <p>
      * e.g.
      * db=database;
      * rpc=Remote Procedure Call Framework, like motan, thift;
@@ -91,7 +91,7 @@ public static boolean isHttp(Span span) {
     /**
      * ERROR indicates whether a Span ended in an error state.
      */
-    public static final BooleanTag ERROR = new BooleanTag("error");
+    public static final BooleanTag ERROR = new BooleanTag("error", false);
 
     /**
      * PEER_HOST records host address (ip:port, or ip1:port1,ip2:port2) of the peer, maybe IPV4, IPV6 or hostname.

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/logging/ThrowableFormatterTest.java
Patch:
@@ -8,10 +8,10 @@
  */
 public class ThrowableFormatterTest {
     @Test
-    public void testFormat(){
+    public void testFormat() {
         NullPointerException exception = new NullPointerException();
         String formatLines = ThrowableFormatter.format(exception);
-        String[] lines = formatLines.split("\n");
+        String[] lines = formatLines.split(System.lineSeparator());
         Assert.assertEquals("java.lang.NullPointerException", lines[0]);
         Assert.assertEquals("\tat com.a.eye.skywalking.api.logging.ThrowableFormatterTest.testFormat(ThrowableFormatterTest.java:12)", lines[1]);
     }

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/tag/IntTag.java
Patch:
@@ -27,7 +27,9 @@ public void set(Span span, Integer tagValue) {
     @Override
     public Integer get(Span span) {
         Object tagValue = span.getTag(super.key);
-        if(tagValue instanceof Integer){
+        if (tagValue == null) {
+            return null;
+        } else if(tagValue instanceof Integer){
             return (Integer)tagValue;
         }else {
             return Integer.valueOf(tagValue.toString());

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/tag/ShortTag.java
Patch:
@@ -26,7 +26,9 @@ public void set(Span span, Short tagValue) {
      */
     @Override public Short get(Span span) {
         Object tagValue = span.getTag(super.key);
-        if(tagValue instanceof Short){
+        if (tagValue == null) {
+            return null;
+        } else if(tagValue instanceof Short){
             return (Short)tagValue;
         }else {
             return Short.valueOf(tagValue.toString());

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/TraceSegment.java
Patch:
@@ -158,6 +158,9 @@ public TraceSegmentRef getPrimaryRef() {
     }
 
     public List<TraceSegmentRef> getRefs() {
+        if(refs == null){
+            return null;
+        }
         return Collections.unmodifiableList(refs);
     }
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/assist/NoCocurrencyAceessObject.java
Patch:
@@ -30,6 +30,7 @@ public void whenEnter(EnhancedClassInstanceContext context, Runnable runnable) {
         if(++counter == 1){
             runnable.run();
         }
+        context.set(invokeCounterKey, counter);
     }
 
     public void whenExist(EnhancedClassInstanceContext context, Runnable runnable) {
@@ -42,5 +43,6 @@ public void whenExist(EnhancedClassInstanceContext context, Runnable runnable) {
         if(--counter == 0){
             runnable.run();
         }
+        context.set(invokeCounterKey, counter);
     }
 }

File: skywalking-application-toolkit/skywalking-toolkit-opentracing/src/main/java/com/a/eye/skywalking/toolkit/opentracing/SkyWalkingTracer.java
Patch:
@@ -15,7 +15,7 @@
  * Created by wusheng on 2016/12/20.
  */
 public class SkyWalkingTracer implements Tracer {
-    private static String TRACE_HEAD_NAME = "SkyWalking-TRACING-NAME";
+    private static String TRACE_HEAD_NAME = "SW-TRACING-NAME";
 
     public static Tracer INSTANCE = new SkyWalkingTracer();
 

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -89,7 +89,7 @@ public void testConsumerBelow283() {
             public void call(TraceSegment traceSegment) {
                 assertThat(traceSegment.getSpans().size(), is(1));
                 assertConsumerSpan(traceSegment.getSpans().get(0));
-                testParam.assertSelf("0", "127.0.0.1");
+                testParam.assertSelf("127.0.0.1");
             }
         });
     }

File: skywalking-sniffer/skywalking-sdk-plugin/motan-plugin/src/main/java/com/a/eye/skywalking/plugin/motan/MotanConsumerInvokeInterceptor.java
Patch:
@@ -29,7 +29,7 @@ public class MotanConsumerInvokeInterceptor implements InstanceMethodsAroundInte
     /**
      * Attachment key of the serialized context data.
      */
-    private static final String ATTACHMENT_KEY_OF_CONTEXT_DATA = "contextData";
+    private static final String ATTACHMENT_KEY_OF_CONTEXT_DATA = "SWTraceContext";
 
     /**
      * Motan component

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v1/x/PrintTraceIdInterceptor.java
Patch:
@@ -26,9 +26,7 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
      */
     @Override
     public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext, Object ret) {
-        ContextCarrier carrier = new ContextCarrier();
-        ContextManager.INSTANCE.inject(carrier);
-        return "TID:" + carrier.getTraceSegmentId();
+        return "TID:" + ContextManager.INSTANCE.getTraceSegmentId();
     }
 
     @Override

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-2.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v2/x/PrintTraceIdInterceptor.java
Patch:
@@ -19,9 +19,7 @@ public class PrintTraceIdInterceptor implements StaticMethodsAroundInterceptor {
      */
     @Override
     public void beforeMethod(StaticMethodInvokeContext interceptorContext, MethodInterceptResult result) {
-        ContextCarrier carrier = new ContextCarrier();
-        ContextManager.INSTANCE.inject(carrier);
-        ((StringBuilder) interceptorContext.allArguments()[0]).append("TID:" + carrier.getTraceSegmentId());
+        ((StringBuilder) interceptorContext.allArguments()[0]).append("TID:" + ContextManager.INSTANCE.getTraceSegmentId());
 
         //make sure origin method do not invoke.
         result.defineReturnValue(null);

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/interceptor/TracerExtractCrossProcessTextMapContextInterceptor.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class TracerExtractCrossProcessTextMapContextInterceptor implements InstanceMethodsAroundInterceptor {
 
-    public static final String SKY_WALKING_TRACING_NAME = "SkyWalking-TRACING-NAME";
+    public static final String SKY_WALKING_TRACING_NAME = "SW-TRACING-NAME";
 
     @Override
     public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext,

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptorTest.java
Patch:
@@ -89,7 +89,7 @@ public void testConsumerBelow283() {
             public void call(TraceSegment traceSegment) {
                 assertThat(traceSegment.getSpans().size(), is(1));
                 assertConsumerSpan(traceSegment.getSpans().get(0));
-                testParam.assertSelf("0", "127.0.0.1");
+                testParam.assertSelf("127.0.0.1");
             }
         });
     }

File: skywalking-application-toolkit/skywalking-toolkit-opentracing/src/main/java/com/a/eye/skywalking/toolkit/opentracing/SkyWalkingTracer.java
Patch:
@@ -15,7 +15,7 @@
  * Created by wusheng on 2016/12/20.
  */
 public class SkyWalkingTracer implements Tracer {
-    private static String TRACE_HEAD_NAME = "SkyWalking-TRACING-NAME";
+    private static String TRACE_HEAD_NAME = "SW-TRACING-NAME";
 
     public static Tracer INSTANCE = new SkyWalkingTracer();
 

File: skywalking-sniffer/skywalking-sdk-plugin/motan-plugin/src/main/java/com/a/eye/skywalking/plugin/motan/MotanConsumerInvokeInterceptor.java
Patch:
@@ -29,7 +29,7 @@ public class MotanConsumerInvokeInterceptor implements InstanceMethodsAroundInte
     /**
      * Attachment key of the serialized context data.
      */
-    private static final String ATTACHMENT_KEY_OF_CONTEXT_DATA = "contextData";
+    private static final String ATTACHMENT_KEY_OF_CONTEXT_DATA = "SWTraceContext";
 
     /**
      * Motan component

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v1/x/PrintTraceIdInterceptor.java
Patch:
@@ -26,9 +26,7 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
      */
     @Override
     public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext, Object ret) {
-        ContextCarrier carrier = new ContextCarrier();
-        ContextManager.INSTANCE.inject(carrier);
-        return "TID:" + carrier.getTraceSegmentId();
+        return "TID:" + ContextManager.INSTANCE.getTraceSegmentId();
     }
 
     @Override

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-2.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v2/x/PrintTraceIdInterceptor.java
Patch:
@@ -19,9 +19,7 @@ public class PrintTraceIdInterceptor implements StaticMethodsAroundInterceptor {
      */
     @Override
     public void beforeMethod(StaticMethodInvokeContext interceptorContext, MethodInterceptResult result) {
-        ContextCarrier carrier = new ContextCarrier();
-        ContextManager.INSTANCE.inject(carrier);
-        ((StringBuilder) interceptorContext.allArguments()[0]).append("TID:" + carrier.getTraceSegmentId());
+        ((StringBuilder) interceptorContext.allArguments()[0]).append("TID:" + ContextManager.INSTANCE.getTraceSegmentId());
 
         //make sure origin method do not invoke.
         result.defineReturnValue(null);

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/interceptor/TracerExtractCrossProcessTextMapContextInterceptor.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class TracerExtractCrossProcessTextMapContextInterceptor implements InstanceMethodsAroundInterceptor {
 
-    public static final String SKY_WALKING_TRACING_NAME = "SkyWalking-TRACING-NAME";
+    public static final String SKY_WALKING_TRACING_NAME = "SW-TRACING-NAME";
 
     @Override
     public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext,

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -26,6 +26,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
+            Tags.SPAN_LAYER.asDB(span);
             Tags.COMPONENT.set(span, connectInfo.getDBType());
             if (!StringUtil.isEmpty(connectInfo.getHosts())) {
                 Tags.PEERS.set(span, connectInfo.getHosts());

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -27,6 +27,7 @@ public static <R> R execute(java.sql.Connection realConnection,
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.COMPONENT.set(span, connectInfo.getDBType());
+            Tags.SPAN_LAYER.asDB(span);
             if (!StringUtil.isEmpty(connectInfo.getHosts())) {
                 Tags.PEERS.set(span, connectInfo.getHosts());
             } else {

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -32,6 +32,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
                 Tags.PEER_PORT.set(span, connectInfo.getPort());
                 Tags.PEER_HOST.set(span, connectInfo.getHost());
             }
+            Tags.SPAN_LAYER.asDB(span);
             return exec.exe(realStatement, sql);
         } catch (SQLException e) {
             Span span = ContextManager.INSTANCE.activeSpan();

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWConnection.java
Patch:
@@ -315,4 +315,5 @@ public int getNetworkTimeout() throws SQLException {
         return realConnection.getNetworkTimeout();
     }
 
+
 }

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/StatementTracing.java
Patch:
@@ -26,6 +26,7 @@ public static <R> R execute(java.sql.Statement realStatement,
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.COMPONENT.set(span, connectInfo.getDBType());
+            Tags.SPAN_LAYER.asDB(span);
             if (!StringUtil.isEmpty(connectInfo.getHosts())) {
                 Tags.PEERS.set(span, connectInfo.getHosts());
             } else {

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisClusterConstructorWithHostAndPortArgInterceptor.java
Patch:
@@ -22,7 +22,7 @@ public class JedisClusterConstructorWithHostAndPortArgInterceptor implements Ins
     public void onConstruct(EnhancedClassInstanceContext context, ConstructorInvokeContext interceptorContext) {
         StringBuilder redisConnInfo = new StringBuilder();
         HostAndPort hostAndPort = (HostAndPort) interceptorContext.allArguments()[0];
-        redisConnInfo.append(hostAndPort.toString()).append(";");
+        redisConnInfo.append(hostAndPort.toString());
         context.set(KEY_OF_REDIS_CONN_INFO, redisConnInfo.toString());
         context.set(KEY_OF_REDIS_HOST, hostAndPort.getHost());
         context.set(KEY_OF_REDIS_PORT, hostAndPort.getPort());

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisClusterConstructorWithListHostAndPortArgInterceptor.java
Patch:
@@ -23,6 +23,6 @@ public void onConstruct(EnhancedClassInstanceContext context, ConstructorInvokeC
             redisConnInfo.append(hostAndPort.toString()).append(";");
         }
         context.set(JedisMethodInterceptor.KEY_OF_REDIS_CONN_INFO, redisConnInfo.toString());
-        context.set(JedisMethodInterceptor.KEY_OF_REDIS_HOSTS, redisConnInfo);
+        context.set(JedisMethodInterceptor.KEY_OF_REDIS_HOSTS, redisConnInfo.toString());
     }
 }

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisClusterConstructorWithHostAndPortArgInterceptor.java
Patch:
@@ -22,7 +22,7 @@ public class JedisClusterConstructorWithHostAndPortArgInterceptor implements Ins
     public void onConstruct(EnhancedClassInstanceContext context, ConstructorInvokeContext interceptorContext) {
         StringBuilder redisConnInfo = new StringBuilder();
         HostAndPort hostAndPort = (HostAndPort) interceptorContext.allArguments()[0];
-        redisConnInfo.append(hostAndPort.toString()).append(";");
+        redisConnInfo.append(hostAndPort.toString());
         context.set(KEY_OF_REDIS_CONN_INFO, redisConnInfo.toString());
         context.set(KEY_OF_REDIS_HOST, hostAndPort.getHost());
         context.set(KEY_OF_REDIS_PORT, hostAndPort.getPort());

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisClusterConstructorWithListHostAndPortArgInterceptor.java
Patch:
@@ -23,6 +23,6 @@ public void onConstruct(EnhancedClassInstanceContext context, ConstructorInvokeC
             redisConnInfo.append(hostAndPort.toString()).append(";");
         }
         context.set(JedisMethodInterceptor.KEY_OF_REDIS_CONN_INFO, redisConnInfo.toString());
-        context.set(JedisMethodInterceptor.KEY_OF_REDIS_HOSTS, redisConnInfo);
+        context.set(JedisMethodInterceptor.KEY_OF_REDIS_HOSTS, redisConnInfo.toString());
     }
 }

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisMethodInterceptor.java
Patch:
@@ -46,7 +46,7 @@ public void beforeMethod(final EnhancedClassInstanceContext context, final Insta
         this.whenEnter(context, new Runnable() {
             @Override
             public void run() {
-                Span span = ContextManager.INSTANCE.createSpan(interceptorContext.methodName());
+                Span span = ContextManager.INSTANCE.createSpan("Jedis/" + interceptorContext.methodName());
                 Tags.COMPONENT.set(span, REDIS_COMPONENT);
                 Tags.DB_TYPE.set(span, REDIS_COMPONENT);
                 tagPeer(span, context);

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/test/java/com/a/eye/skywalking/plugin/jedis/v2/JedisMethodInterceptorTest.java
Patch:
@@ -126,7 +126,7 @@ private void assertLogData(LogData logData) {
     }
 
     private void assertRedisSpan(Span span) {
-        assertThat(span.getOperationName(), is("set"));
+        assertThat(span.getOperationName(), is("Jedis/set"));
         assertThat(Tags.PEER_HOST.get(span), is("127.0.0.1"));
         assertThat(Tags.PEER_PORT.get(span), is(6379));
         assertThat(Tags.COMPONENT.get(span), is("Redis"));
@@ -136,7 +136,7 @@ private void assertRedisSpan(Span span) {
     }
 
     private void assertRedisSpan(Span span, String exceptedPeerHosts){
-        assertThat(span.getOperationName(), is("set"));
+        assertThat(span.getOperationName(), is("Jedis/set"));
         assertThat(Tags.PEERS.get(span), is(exceptedPeerHosts));
         assertThat(Tags.COMPONENT.get(span), is("Redis"));
         assertThat(Tags.DB_STATEMENT.get(span), is("set OperationKey"));

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisClusterConstructorWithHostAndPortArgInterceptor.java
Patch:
@@ -22,7 +22,7 @@ public class JedisClusterConstructorWithHostAndPortArgInterceptor implements Ins
     public void onConstruct(EnhancedClassInstanceContext context, ConstructorInvokeContext interceptorContext) {
         StringBuilder redisConnInfo = new StringBuilder();
         HostAndPort hostAndPort = (HostAndPort) interceptorContext.allArguments()[0];
-        redisConnInfo.append(hostAndPort.toString()).append(";");
+        redisConnInfo.append(hostAndPort.toString());
         context.set(KEY_OF_REDIS_CONN_INFO, redisConnInfo.toString());
         context.set(KEY_OF_REDIS_HOST, hostAndPort.getHost());
         context.set(KEY_OF_REDIS_PORT, hostAndPort.getPort());

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/JedisClusterConstructorWithListHostAndPortArgInterceptor.java
Patch:
@@ -23,6 +23,6 @@ public void onConstruct(EnhancedClassInstanceContext context, ConstructorInvokeC
             redisConnInfo.append(hostAndPort.toString()).append(";");
         }
         context.set(JedisMethodInterceptor.KEY_OF_REDIS_CONN_INFO, redisConnInfo.toString());
-        context.set(JedisMethodInterceptor.KEY_OF_REDIS_HOSTS, redisConnInfo);
+        context.set(JedisMethodInterceptor.KEY_OF_REDIS_HOSTS, redisConnInfo.toString());
     }
 }

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -26,6 +26,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
+            Tags.SPAN_LAYER.asDB(span);
             Tags.COMPONENT.set(span, connectInfo.getDBType());
             if (!StringUtil.isEmpty(connectInfo.getHosts())) {
                 Tags.PEERS.set(span, connectInfo.getHosts());

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -27,6 +27,7 @@ public static <R> R execute(java.sql.Connection realConnection,
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.COMPONENT.set(span, connectInfo.getDBType());
+            Tags.SPAN_LAYER.asDB(span);
             if (!StringUtil.isEmpty(connectInfo.getHosts())) {
                 Tags.PEERS.set(span, connectInfo.getHosts());
             } else {

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -32,6 +32,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
                 Tags.PEER_PORT.set(span, connectInfo.getPort());
                 Tags.PEER_HOST.set(span, connectInfo.getHost());
             }
+            Tags.SPAN_LAYER.asDB(span);
             return exec.exe(realStatement, sql);
         } catch (SQLException e) {
             Span span = ContextManager.INSTANCE.activeSpan();

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWConnection.java
Patch:
@@ -315,4 +315,5 @@ public int getNetworkTimeout() throws SQLException {
         return realConnection.getNetworkTimeout();
     }
 
+
 }

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/StatementTracing.java
Patch:
@@ -26,6 +26,7 @@ public static <R> R execute(java.sql.Statement realStatement,
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.COMPONENT.set(span, connectInfo.getDBType());
+            Tags.SPAN_LAYER.asDB(span);
             if (!StringUtil.isEmpty(connectInfo.getHosts())) {
                 Tags.PEERS.set(span, connectInfo.getHosts());
             } else {

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -26,6 +26,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
             Tags.DB_TYPE.set(span, "sql");
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
+            Tags.SPAN_LAYER.asDB(span);
             Tags.COMPONENT.set(span, connectInfo.getDBType());
             if (!StringUtil.isEmpty(connectInfo.getHosts())) {
                 Tags.PEERS.set(span, connectInfo.getHosts());

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -27,6 +27,7 @@ public static <R> R execute(java.sql.Connection realConnection,
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.COMPONENT.set(span, connectInfo.getDBType());
+            Tags.SPAN_LAYER.asDB(span);
             if (!StringUtil.isEmpty(connectInfo.getHosts())) {
                 Tags.PEERS.set(span, connectInfo.getHosts());
             } else {

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -32,6 +32,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
                 Tags.PEER_PORT.set(span, connectInfo.getPort());
                 Tags.PEER_HOST.set(span, connectInfo.getHost());
             }
+            Tags.SPAN_LAYER.asDB(span);
             return exec.exe(realStatement, sql);
         } catch (SQLException e) {
             Span span = ContextManager.INSTANCE.activeSpan();

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWConnection.java
Patch:
@@ -315,4 +315,5 @@ public int getNetworkTimeout() throws SQLException {
         return realConnection.getNetworkTimeout();
     }
 
+
 }

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/StatementTracing.java
Patch:
@@ -26,6 +26,7 @@ public static <R> R execute(java.sql.Statement realStatement,
             Tags.DB_INSTANCE.set(span, connectInfo.getDatabaseName());
             Tags.DB_STATEMENT.set(span, sql);
             Tags.COMPONENT.set(span, connectInfo.getDBType());
+            Tags.SPAN_LAYER.asDB(span);
             if (!StringUtil.isEmpty(connectInfo.getHosts())) {
                 Tags.PEERS.set(span, connectInfo.getHosts());
             } else {

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class DubboInterceptor implements InstanceMethodsAroundInterceptor {
 
-    public static final String ATTACHMENT_NAME_OF_CONTEXT_DATA = "contextData";
+    public static final String ATTACHMENT_NAME_OF_CONTEXT_DATA = "SWTraceContext";
     public static final String DUBBO_COMPONENT = "Dubbo";
 
     /**

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -23,7 +23,7 @@
  * @author zhangxin
  */
 public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {
-    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SKYWALKING_CONTEXT_DATA";
+    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SWTraceContext";
     private static final String COMPONENT_NAME = "Http";
 
     @Override

File: skywalking-sniffer/skywalking-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/com/a/eye/skywalking/plugin/tomcat78x/TomcatInterceptor.java
Patch:
@@ -22,7 +22,7 @@ public class TomcatInterceptor implements InstanceMethodsAroundInterceptor {
     /**
      * Header name that the serialized context data stored in {@link HttpServletRequest#getHeader(String)}.
      */
-    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SKYWALKING_CONTEXT_DATA";
+    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SWTraceContext";
     /**
      * Tomcat component.
      */

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class DubboInterceptor implements InstanceMethodsAroundInterceptor {
 
-    public static final String ATTACHMENT_NAME_OF_CONTEXT_DATA = "contextData";
+    public static final String ATTACHMENT_NAME_OF_CONTEXT_DATA = "SWTraceContext";
     public static final String DUBBO_COMPONENT = "Dubbo";
 
     /**

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -23,7 +23,7 @@
  * @author zhangxin
  */
 public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {
-    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SKYWALKING_CONTEXT_DATA";
+    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SWTraceContext";
     private static final String COMPONENT_NAME = "Http";
 
     @Override

File: skywalking-sniffer/skywalking-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/com/a/eye/skywalking/plugin/tomcat78x/TomcatInterceptor.java
Patch:
@@ -22,7 +22,7 @@ public class TomcatInterceptor implements InstanceMethodsAroundInterceptor {
     /**
      * Header name that the serialized context data stored in {@link HttpServletRequest#getHeader(String)}.
      */
-    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SKYWALKING_CONTEXT_DATA";
+    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SWTraceContext";
     /**
      * Tomcat component.
      */

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboInterceptor.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class DubboInterceptor implements InstanceMethodsAroundInterceptor {
 
-    public static final String ATTACHMENT_NAME_OF_CONTEXT_DATA = "contextData";
+    public static final String ATTACHMENT_NAME_OF_CONTEXT_DATA = "SWTraceContext";
     public static final String DUBBO_COMPONENT = "Dubbo";
 
     /**

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -23,7 +23,7 @@
  * @author zhangxin
  */
 public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {
-    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SKYWALKING_CONTEXT_DATA";
+    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SWTraceContext";
     private static final String COMPONENT_NAME = "Http";
 
     @Override

File: skywalking-sniffer/skywalking-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/com/a/eye/skywalking/plugin/tomcat78x/TomcatInterceptor.java
Patch:
@@ -22,7 +22,7 @@ public class TomcatInterceptor implements InstanceMethodsAroundInterceptor {
     /**
      * Header name that the serialized context data stored in {@link HttpServletRequest#getHeader(String)}.
      */
-    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SKYWALKING_CONTEXT_DATA";
+    public static final String HEADER_NAME_OF_CONTEXT_DATA = "SWTraceContext";
     /**
      * Tomcat component.
      */

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -24,6 +24,7 @@
  */
 public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {
     public static final String HEADER_NAME_OF_CONTEXT_DATA = "SKYWALKING_CONTEXT_DATA";
+    private static final String COMPONENT_NAME = "Http";
 
     @Override
     public void beforeMethod(EnhancedClassInstanceContext context,
@@ -40,6 +41,7 @@ public void beforeMethod(EnhancedClassInstanceContext context,
         Tags.PEER_PORT.set(span, httpHost.getPort());
         Tags.PEER_HOST.set(span, httpHost.getHostName());
         Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
+        Tags.COMPONENT.set(span, COMPONENT_NAME);
         Tags.URL.set(span, generateURL(httpHost, httpRequest));
         Tags.SPAN_LAYER.asHttp(span);
 
@@ -79,6 +81,7 @@ public Object afterMethod(EnhancedClassInstanceContext context,
 
     @Override
     public void handleMethodException(Throwable t, EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext) {
+        Tags.ERROR.set(ContextManager.INSTANCE.activeSpan(), true);
         ContextManager.INSTANCE.activeSpan().log(t);
     }
 

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/HttpClientExecuteInterceptor.java
Patch:
@@ -24,6 +24,7 @@
  */
 public class HttpClientExecuteInterceptor implements InstanceMethodsAroundInterceptor {
     public static final String HEADER_NAME_OF_CONTEXT_DATA = "SKYWALKING_CONTEXT_DATA";
+    private static final String COMPONENT_NAME = "Http";
 
     @Override
     public void beforeMethod(EnhancedClassInstanceContext context,
@@ -40,6 +41,7 @@ public void beforeMethod(EnhancedClassInstanceContext context,
         Tags.PEER_PORT.set(span, httpHost.getPort());
         Tags.PEER_HOST.set(span, httpHost.getHostName());
         Tags.SPAN_KIND.set(span, Tags.SPAN_KIND_CLIENT);
+        Tags.COMPONENT.set(span, COMPONENT_NAME);
         Tags.URL.set(span, generateURL(httpHost, httpRequest));
         Tags.SPAN_LAYER.asHttp(span);
 
@@ -79,6 +81,7 @@ public Object afterMethod(EnhancedClassInstanceContext context,
 
     @Override
     public void handleMethodException(Throwable t, EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext) {
+        Tags.ERROR.set(ContextManager.INSTANCE.activeSpan(), true);
         ContextManager.INSTANCE.activeSpan().log(t);
     }
 

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/actor/AbstractWorkerProvider.java
Patch:
@@ -44,7 +44,7 @@ public void createWorker(ActorSystem system) {
         }
 
         for (int i = 1; i <= workerNum(); i++) {
-            system.actorOf(Props.create(workerClass(), roleName()), roleName() + "_" + i);
+            system.actorOf(Props.create(workerClass()), roleName() + "_" + i);
         }
     }
 

File: skywalking-collector/skywalking-collector-cluster/src/test/java/com/a/eye/skywalking/collector/actor/SpiTestWorkerFactoryTestCase.java
Patch:
@@ -29,9 +29,9 @@ public void testCreateWorker() {
         new JavaTestKit(system) {{
             SpiTestWorkerFactory aWorkerProvider = new SpiTestWorkerFactory();
             aWorkerProvider.createWorker(system);
-            system.actorSelection("/user/" + SpiTestWorkerFactory.WorkerRole + "_1").tell("Test1", getRef());
+            system.actorSelection("/user/" + aWorkerProvider.roleName() + "_1").tell("Test1", getRef());
             expectMsgEquals(duration("1 second"), "Yes");
-            system.actorSelection("/user/" + SpiTestWorkerFactory.WorkerRole + "_2").tell("Test2", getRef());
+            system.actorSelection("/user/" + aWorkerProvider.roleName() + "_2").tell("Test2", getRef());
             expectMsgEquals(duration("1 second"), "No");
         }};
     }

File: skywalking-collector/skywalking-collector-worker/src/main/java/com/a/eye/skywalking/collector/worker/metric/ApplicationDiscoverMetric.java
Patch:
@@ -9,7 +9,7 @@
 public class ApplicationDiscoverMetric extends AbstractWorker {
 
     @Override
-    public void onReceive(Object message) throws Throwable {
+    public void receive(Object message) throws Throwable {
 
     }
 }

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/LogData.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.a.eye.skywalking.api.util.StringUtil;
 import com.a.eye.skywalking.messages.ISerializable;
-import com.a.eye.skywalking.trace.messages.proto.KeyValue;
-import com.a.eye.skywalking.trace.messages.proto.LogDataMessage;
+import com.a.eye.skywalking.trace.proto.KeyValue;
+import com.a.eye.skywalking.trace.proto.LogDataMessage;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -14,7 +14,7 @@
  *
  * Created by wusheng on 2017/2/17.
  */
-public class LogData implements ISerializable<LogDataMessage>{
+public class LogData implements ISerializable<LogDataMessage> {
     private long time;
     private Map<String, ?> fields;
 

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/Span.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.a.eye.skywalking.api.util.StringUtil;
 import com.a.eye.skywalking.messages.ISerializable;
-import com.a.eye.skywalking.trace.messages.proto.KeyValue;
-import com.a.eye.skywalking.trace.messages.proto.LogDataMessage;
-import com.a.eye.skywalking.trace.messages.proto.SpanMessage;
+import com.a.eye.skywalking.trace.proto.KeyValue;
+import com.a.eye.skywalking.trace.proto.LogDataMessage;
+import com.a.eye.skywalking.trace.proto.SpanMessage;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/TraceSegment.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.trace;
 
 import com.a.eye.skywalking.messages.ISerializable;
-import com.a.eye.skywalking.trace.messages.proto.SegmentMessage;
-import com.a.eye.skywalking.trace.messages.proto.SegmentRefMessage;
-import com.a.eye.skywalking.trace.messages.proto.SpanMessage;
+import com.a.eye.skywalking.trace.proto.SegmentMessage;
+import com.a.eye.skywalking.trace.proto.SegmentRefMessage;
+import com.a.eye.skywalking.trace.proto.SpanMessage;
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/TraceSegmentRef.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.trace;
 
 import com.a.eye.skywalking.messages.ISerializable;
-import com.a.eye.skywalking.trace.messages.proto.SegmentRefMessage;
+import com.a.eye.skywalking.trace.proto.SegmentRefMessage;
 import com.a.eye.skywalking.trace.tag.Tags;
 
 /**

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/LogData.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.a.eye.skywalking.api.util.StringUtil;
 import com.a.eye.skywalking.messages.ISerializable;
-import com.a.eye.skywalking.trace.messages.proto.KeyValue;
-import com.a.eye.skywalking.trace.messages.proto.LogDataMessage;
+import com.a.eye.skywalking.trace.proto.KeyValue;
+import com.a.eye.skywalking.trace.proto.LogDataMessage;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -14,7 +14,7 @@
  *
  * Created by wusheng on 2017/2/17.
  */
-public class LogData implements ISerializable<LogDataMessage>{
+public class LogData implements ISerializable<LogDataMessage> {
     private long time;
     private Map<String, ?> fields;
 

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/Span.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.a.eye.skywalking.api.util.StringUtil;
 import com.a.eye.skywalking.messages.ISerializable;
-import com.a.eye.skywalking.trace.messages.proto.KeyValue;
-import com.a.eye.skywalking.trace.messages.proto.LogDataMessage;
-import com.a.eye.skywalking.trace.messages.proto.SpanMessage;
+import com.a.eye.skywalking.trace.proto.KeyValue;
+import com.a.eye.skywalking.trace.proto.LogDataMessage;
+import com.a.eye.skywalking.trace.proto.SpanMessage;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/TraceSegment.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.trace;
 
 import com.a.eye.skywalking.messages.ISerializable;
-import com.a.eye.skywalking.trace.messages.proto.SegmentMessage;
-import com.a.eye.skywalking.trace.messages.proto.SegmentRefMessage;
-import com.a.eye.skywalking.trace.messages.proto.SpanMessage;
+import com.a.eye.skywalking.trace.proto.SegmentMessage;
+import com.a.eye.skywalking.trace.proto.SegmentRefMessage;
+import com.a.eye.skywalking.trace.proto.SpanMessage;
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/TraceSegmentRef.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.trace;
 
 import com.a.eye.skywalking.messages.ISerializable;
-import com.a.eye.skywalking.trace.messages.proto.SegmentRefMessage;
+import com.a.eye.skywalking.trace.proto.SegmentRefMessage;
 import com.a.eye.skywalking.trace.tag.Tags;
 
 /**

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/SpanTestCase.java
Patch:
@@ -45,11 +45,10 @@ public void testSetTag() {
         Tags.ERROR.set(span1, true);
         Tags.STATUS_CODE.set(span1, 302);
         Tags.URL.set(span1, "http://127.0.0.1/serviceA");
-        Tags.DB_URL.set(span1, "jdbc:127.0.0.1:user");
         Tags.DB_STATEMENT.set(span1, "select * from users");
 
         Map<String, Object> tags = span1.getTags();
-        Assert.assertEquals(8, tags.size());
+        Assert.assertEquals(7, tags.size());
         Assert.assertTrue(Tags.SPAN_LAYER.isHttp(span1));
         Assert.assertEquals("127.0.0.1", Tags.PEER_HOST.get(span1));
         Assert.assertTrue(Tags.ERROR.get(span1));

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/TraceSegmentTestCase.java
Patch:
@@ -96,7 +96,7 @@ public void testSerialize() {
         segment.archive(span1);
 
         Span span2 = new Span(2, span1, "/db/sql");
-        Tags.SPAN_LAYER.asNoSQL(span2);
+        Tags.SPAN_LAYER.asDB(span2);
         span2.log(new NullPointerException());
         segment.archive(span2);
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/EnhanceException.java
Patch:
@@ -1,5 +1,6 @@
 package com.a.eye.skywalking.api.plugin.interceptor;
 
+
 import com.a.eye.skywalking.api.plugin.PluginException;
 
 public class EnhanceException extends PluginException {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassInstanceMethodsEnhancePluginDefine.java
Patch:
@@ -1,5 +1,6 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
+
 import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
 
 /**

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWCallableStatement.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.api.plugin.jdbc;
+package com.a.eye.skywalking.plugin.jdbc;
 
 import java.io.InputStream;
 import java.io.Reader;
@@ -11,11 +11,11 @@
 public class SWCallableStatement implements CallableStatement {
     private Connection realConnection;
     private CallableStatement realStatement;
-    private String connectInfo;
+    private ConnectionInfo connectInfo;
     private String sql;
 
     SWCallableStatement(Connection realConnection,
-                        CallableStatement realStatement, String connectInfo,
+                        CallableStatement realStatement, ConnectionInfo connectInfo,
                         String sql) {
         this.realConnection = realConnection;
         this.realStatement = realStatement;

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWPreparedStatement.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.api.plugin.jdbc;
+package com.a.eye.skywalking.plugin.jdbc;
 
 import java.io.InputStream;
 import java.io.Reader;
@@ -10,11 +10,11 @@
 public class SWPreparedStatement implements PreparedStatement {
     private Connection realConnection;
     private PreparedStatement realStatement;
-    private String connectInfo;
+    private ConnectionInfo connectInfo;
     private String sql;
 
     SWPreparedStatement(Connection realConnection,
-                        PreparedStatement realStatement, String connectInfo,
+                        PreparedStatement realStatement, ConnectionInfo connectInfo,
                         String sql) {
         this.realConnection = realConnection;
         this.realStatement = realStatement;

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWStatement.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.api.plugin.jdbc;
+package com.a.eye.skywalking.plugin.jdbc;
 
 import java.sql.Connection;
 import java.sql.ResultSet;
@@ -9,9 +9,9 @@
 public class SWStatement implements java.sql.Statement {
     private Connection realConnection;
     private java.sql.Statement realStatement;
-    private String connectInfo;
+    private ConnectionInfo connectInfo;
 
-    SWStatement(Connection realConnection, java.sql.Statement realStatement, String connectInfo) {
+    SWStatement(Connection realConnection, java.sql.Statement realStatement, ConnectionInfo connectInfo) {
         this.realConnection = realConnection;
         this.realStatement = realStatement;
         this.connectInfo = connectInfo;

File: skywalking-collector/skywalking-collector-actor/src/main/java/com/a/eye/skywalking/collector/actor/AbstractWorker.java
Patch:
@@ -43,7 +43,7 @@ public void onReceive(Object message) throws Throwable {
 
     public void tell(AbstractWorkerProvider targetWorkerProvider, WorkerSelector selector, T message) throws Throwable {
         List<ActorRef> avaibleWorks = WorkersRefCenter.INSTANCE.avaibleWorks(targetWorkerProvider.roleName());
-        selector.select(targetWorkerProvider.roleName(), avaibleWorks, message).tell(message, getSelf());
+        selector.select(avaibleWorks, message).tell(message, getSelf());
     }
 
     void register(Member member) {

File: skywalking-collector/skywalking-collector-actor/src/test/java/com/a/eye/skywalking/collector/actor/SpiTestWorkerFactoryTestCase.java
Patch:
@@ -27,6 +27,8 @@ public void terminateSystem() throws IllegalAccessException {
 
     @Test
     public void testWorkerCreate() {
+
+
         SpiTestWorkerFactory factory = Mockito.mock(SpiTestWorkerFactory.class);
         Mockito.when(factory.workerName()).thenReturn("");
         factory.createWorker(system);

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/tag/Tags.java
Patch:
@@ -102,7 +102,7 @@ public static boolean isHttp(Span span) {
     public static final BooleanTag ERROR = new BooleanTag("error");
 
     /**
-     * PEER_HOST records host address of the peer, maybe IPV4, IPV6 or hostname.
+     * PEER_HOST records host address (ip:port, or ip1:port1,ip2:port2) of the peer, maybe IPV4, IPV6 or hostname.
      */
     public static final StringTag PEER_HOST = new StringTag("peer.host");
 

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/SpanTestCase.java
Patch:
@@ -14,6 +14,8 @@ public class SpanTestCase {
     public void testConstructors() {
         Span span1 = new Span(0, "serviceA");
         Span span2 = new Span(2, span1, "serviceA");
+        span2.setOperationName("serviceA-2");
+        Assert.assertEquals("serviceA-2", span2.getOperationName());
 
         Assert.assertEquals(-1, span1.getParentSpanId());
         Assert.assertEquals(0, span2.getParentSpanId());
@@ -23,7 +25,7 @@ public void testConstructors() {
 
     @Test
     public void testFinish() {
-        TraceSegment owner = new TraceSegment("trace_1");
+        TraceSegment owner = new TraceSegment("trace_1", "billing_app");
 
         Span span1 = new Span(0, "serviceA");
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v1/x/TraceIdPatternConverterActivation.java
Patch:
@@ -1,9 +1,8 @@
 package com.a.eye.skywalking.toolkit.activation.log.log4j.v1.x;
 
-import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-2.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v2/x/Log4j2OutputAppenderActivation.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.toolkit.activation.log.log4j.v2.x;
 
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassStaticMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassStaticMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-logback-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/logback/v1/x/LogbackPatternConverterActivation.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.toolkit.activation.log.logback.v1.x;
 
-import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/SkyWalkingTracerActivation.java
Patch:
@@ -1,14 +1,14 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.tracer;
 
-import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 
 import java.nio.ByteBuffer;
 
-import static com.a.eye.skywalking.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
+import static com.a.eye.skywalking.api.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static net.bytebuddy.matcher.ElementMatchers.takesArgument;
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-trace-context-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/trace/TraceContextActivation.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.toolkit.activation.trace;
 
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassStaticMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassStaticMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/SpanTestCase.java
Patch:
@@ -48,7 +48,7 @@ public void testSetTag() {
         Tags.DB_STATEMENT.set(span1, "select * from users");
 
         Map<String, Object> tags = span1.getTags();
-        Assert.assertEquals(8, tags.size());
+        Assert.assertEquals(7, tags.size());
         Assert.assertTrue(Tags.SPAN_LAYER.isHttp(span1));
         Assert.assertEquals("127.0.0.1", Tags.PEER_HOST.get(span1));
         Assert.assertTrue(Tags.ERROR.get(span1));

File: skywalking-commons/skywalking-trace/src/main/java/com/a/eye/skywalking/trace/Span.java
Patch:
@@ -4,7 +4,6 @@
 import com.a.eye.skywalking.messages.ISerializable;
 import com.a.eye.skywalking.trace.messages.proto.KeyValue;
 import com.a.eye.skywalking.trace.messages.proto.LogDataMessage;
-import com.a.eye.skywalking.trace.messages.proto.SegmentMessage;
 import com.a.eye.skywalking.trace.messages.proto.SpanMessage;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/SpanTestCase.java
Patch:
@@ -14,6 +14,8 @@ public class SpanTestCase {
     public void testConstructors() {
         Span span1 = new Span(0, "serviceA");
         Span span2 = new Span(2, span1, "serviceA");
+        span2.setOperationName("serviceA-2");
+        Assert.assertEquals("serviceA-2", span2.getOperationName());
 
         Assert.assertEquals(-1, span1.getParentSpanId());
         Assert.assertEquals(0, span2.getParentSpanId());

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v1/x/TraceIdPatternConverterActivation.java
Patch:
@@ -1,9 +1,8 @@
 package com.a.eye.skywalking.toolkit.activation.log.log4j.v1.x;
 
-import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-trace-context-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/trace/TraceContextActivation.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.toolkit.activation.trace;
 
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassStaticMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassStaticMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-collector/skywalking-collector-cluster/src/main/java/com/a/eye/skywalking/collector/cluster/message/ActorRegisterMessage.java
Patch:
@@ -5,13 +5,13 @@
 /**
  * Created by Administrator on 2017/2/21 0021.
  */
-public interface ActorRegisteMessage {
+public interface ActorRegisterMessage {
 
-    public static class RegisteMessage implements Serializable {
+    public static class RegisterMessage implements Serializable {
         public final String role;
         public final String action;
 
-        public RegisteMessage(String role, String action) {
+        public RegisterMessage(String role, String action) {
             this.role = role;
             this.action = action;
         }

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-2.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v2/x/Log4j2OutputAppenderActivation.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.toolkit.activation.log.log4j.v2.x;
 
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassStaticMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassStaticMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-logback-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/logback/v1/x/LogbackPatternConverterActivation.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.toolkit.activation.log.logback.v1.x;
 
-import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/SkyWalkingTracerActivation.java
Patch:
@@ -1,14 +1,14 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.tracer;
 
-import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 
 import java.nio.ByteBuffer;
 
-import static com.a.eye.skywalking.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
+import static com.a.eye.skywalking.api.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static net.bytebuddy.matcher.ElementMatchers.takesArgument;
 

File: skywalking-commons/skywalking-health-report/src/main/java/com/a/eye/skywalking/health/report/HealthCollector.java
Patch:
@@ -1,8 +1,8 @@
 package com.a.eye.skywalking.health.report;
 
 
-import com.a.eye.skywalking.logging.api.ILog;
-import com.a.eye.skywalking.logging.api.LogManager;
+import com.a.eye.skywalking.api.logging.api.ILog;
+import com.a.eye.skywalking.api.logging.api.LogManager;
 
 import java.util.Arrays;
 import java.util.Map;

File: skywalking-commons/skywalking-logging/skywalking-logging-api/src/main/java/com/a/eye/skywalking/api/logging/api/ILog.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging.api;
+package com.a.eye.skywalking.api.logging.api;
 
 /**
  * The Log interface.

File: skywalking-commons/skywalking-logging/skywalking-logging-api/src/main/java/com/a/eye/skywalking/api/logging/api/LogManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging.api;
+package com.a.eye.skywalking.api.logging.api;
 
 /**
  * LogManager is the {@link LogResolver} implementation manager.

File: skywalking-commons/skywalking-logging/skywalking-logging-api/src/main/java/com/a/eye/skywalking/api/logging/api/LogResolver.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging.api;
+package com.a.eye.skywalking.api.logging.api;
 
 /**
  * {@link LogResolver} just do only one thing: return the {@link ILog} implementation.

File: skywalking-commons/skywalking-logging/skywalking-logging-api/src/main/java/com/a/eye/skywalking/api/logging/api/NoopLogger.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging.api;
+package com.a.eye.skywalking.api.logging.api;
 
 
 /**

File: skywalking-commons/skywalking-logging/skywalking-logging-impl-log4j2/src/main/java/com/a/eye/skywalking/api/logging/impl/log4j2/Log4j2Logger.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.logging.impl.log4j2;
+package com.a.eye.skywalking.api.logging.impl.log4j2;
 
-import com.a.eye.skywalking.logging.api.ILog;
+import com.a.eye.skywalking.api.logging.api.ILog;
 import org.apache.logging.log4j.Logger;
 
 /**

File: skywalking-commons/skywalking-logging/skywalking-logging-impl-log4j2/src/main/java/com/a/eye/skywalking/api/logging/impl/log4j2/Log4j2Resolver.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.logging.impl.log4j2;
+package com.a.eye.skywalking.api.logging.impl.log4j2;
 
-import com.a.eye.skywalking.logging.api.ILog;
-import com.a.eye.skywalking.logging.api.LogResolver;
+import com.a.eye.skywalking.api.logging.api.ILog;
+import com.a.eye.skywalking.api.logging.api.LogResolver;
 import org.apache.logging.log4j.LogManager;
 
 /**

File: skywalking-commons/skywalking-util/src/main/java/com/a/eye/skywalking/api/util/ConfigInitializer.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.util;
+package com.a.eye.skywalking.api.util;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;

File: skywalking-commons/skywalking-util/src/main/java/com/a/eye/skywalking/api/util/StringUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.util;
+package com.a.eye.skywalking.api.util;
 
 public final class StringUtil {
     public static boolean isEmpty(String str) {

File: skywalking-sniffer/skywalking-agent/src/main/java/com/a/eye/skywalking/agent/junction/SkyWalkingEnhanceMatcher.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.agent.junction;
 
-import com.a.eye.skywalking.plugin.PluginDefineCategory;
+import com.a.eye.skywalking.api.plugin.PluginDefineCategory;
 import net.bytebuddy.description.NamedElement;
 
 /**

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/conf/Config.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.conf;
+package com.a.eye.skywalking.api.conf;
 
 public class Config {
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/conf/Constants.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.conf;
+package com.a.eye.skywalking.api.conf;
 
-import com.a.eye.skywalking.util.TraceIdGenerator;
+import com.a.eye.skywalking.api.util.TraceIdGenerator;
 
 public class Constants {
 	/**

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/context/ContextCarrier.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.context;
+package com.a.eye.skywalking.api.context;
 
 import com.a.eye.skywalking.trace.TraceSegmentRef;
-import com.a.eye.skywalking.util.StringUtil;
+import com.a.eye.skywalking.api.util.StringUtil;
 import java.io.Serializable;
 
 /**

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/context/TracerContextListener.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.context;
+package com.a.eye.skywalking.api.context;
 
 import com.a.eye.skywalking.trace.TraceSegment;
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/EasyLogResolver.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.api.logging;
 
-import com.a.eye.skywalking.logging.api.ILog;
-import com.a.eye.skywalking.logging.api.LogResolver;
+import com.a.eye.skywalking.api.logging.api.ILog;
+import com.a.eye.skywalking.api.logging.api.LogResolver;
 
 /**
  * Created by wusheng on 2016/11/26.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/IWriter.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.api.logging;
 
 public interface IWriter {
     void write(String message);

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/LogLevel.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.api.logging;
 
 /**
  * Created by xin on 2016/12/7.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/STDOutWriter.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.api.logging;
 
 public class STDOutWriter implements IWriter {
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/SyncFileWriter.java
Patch:
@@ -1,9 +1,9 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.api.logging;
 
 
-import com.a.eye.skywalking.conf.Config;
-import com.a.eye.skywalking.util.LoggingUtil;
 
+import com.a.eye.skywalking.api.conf.Config;
+import com.a.eye.skywalking.api.util.LoggingUtil;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/WriterFactory.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.api.logging;
 
-import com.a.eye.skywalking.conf.Config;
+import com.a.eye.skywalking.api.conf.Config;
 
 public class WriterFactory {
     private WriterFactory(){

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginBootstrap.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.plugin;
+package com.a.eye.skywalking.api.plugin;
 
-import com.a.eye.skywalking.logging.api.ILog;
-import com.a.eye.skywalking.logging.api.LogManager;
+import com.a.eye.skywalking.api.logging.api.ILog;
+import com.a.eye.skywalking.api.logging.api.LogManager;
 import net.bytebuddy.pool.TypePool;
 
 import java.net.URL;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginCfg.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin;
+package com.a.eye.skywalking.api.plugin;
 
-import com.a.eye.skywalking.util.StringUtil;
+import com.a.eye.skywalking.api.util.StringUtil;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginDefineCategory.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin;
+package com.a.eye.skywalking.api.plugin;
 
 import java.util.HashMap;
 import java.util.List;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginException.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin;
+package com.a.eye.skywalking.api.plugin;
 
 public class PluginException extends RuntimeException {
 	private static final long serialVersionUID = -6020188711867490724L;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/PluginResourcesResolver.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.plugin;
+package com.a.eye.skywalking.api.plugin;
 
-import com.a.eye.skywalking.logging.api.ILog;
-import com.a.eye.skywalking.logging.api.LogManager;
+import com.a.eye.skywalking.api.logging.api.ILog;
+import com.a.eye.skywalking.api.logging.api.LogManager;
 
 import java.io.IOException;
 import java.net.URL;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/TracingBootstrap.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.plugin;
+package com.a.eye.skywalking.api.plugin;
 
-import com.a.eye.skywalking.logging.api.ILog;
-import com.a.eye.skywalking.logging.api.LogManager;
+import com.a.eye.skywalking.api.logging.api.ILog;
+import com.a.eye.skywalking.api.logging.api.LogManager;
 import net.bytebuddy.ByteBuddy;
 import net.bytebuddy.dynamic.ClassFileLocator;
 import net.bytebuddy.dynamic.DynamicType;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/bytebuddy/AllObjectDefaultMethodsMatch.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.bytebuddy;
+package com.a.eye.skywalking.api.plugin.bytebuddy;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/bytebuddy/ArgumentTypeNameMatch.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.bytebuddy;
+package com.a.eye.skywalking.api.plugin.bytebuddy;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/ConstructorInterceptPoint.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor;
+package com.a.eye.skywalking.api.plugin.interceptor;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/EnhanceException.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin.interceptor;
+package com.a.eye.skywalking.api.plugin.interceptor;
 
-import com.a.eye.skywalking.plugin.PluginException;
+import com.a.eye.skywalking.api.plugin.PluginException;
 
 public class EnhanceException extends PluginException {
 	private static final long serialVersionUID = -2234782755784217255L;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/InstanceMethodsInterceptPoint.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor;
+package com.a.eye.skywalking.api.plugin.interceptor;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/InterceptorException.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor;
+package com.a.eye.skywalking.api.plugin.interceptor;
 
 public class InterceptorException extends RuntimeException {
 	private static final long serialVersionUID = 7846035239994885019L;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/StaticMethodsInterceptPoint.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor;
+package com.a.eye.skywalking.api.plugin.interceptor;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassInstanceMethodsEnhancePluginDefine.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
 
 /**
  * Plugins, which only need enhance class static methods.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassStaticMethodsEnhancePluginDefine.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 
 /**
  * Plugins, which only need enhance class static methods.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ConstructorInvokeContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
 /**
  * Constructor context.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/FieldSetter.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
 public interface FieldSetter {
 	void setValue(Object value);

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/InstanceConstructorInterceptor.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 
 /**
  * The instance constructor's interceptor interface.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/InstanceMethodInvokeContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
 /**
  * Instance method invoke context.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/InstanceMethodsAroundInterceptor.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 
 /**
  * A interceptor, which intercept method's invocation.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/MethodInterceptResult.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 
 /**
  * This is a method return value manipulator.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/MethodInvokeContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
 /**
  * Method invoke context.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/StaticMethodInvokeContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
 /**
  * Static method invoke context.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/StaticMethodsAroundInterceptor.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
 
 /**

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/loader/InterceptorInstanceLoader.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.plugin.interceptor.loader;
+package com.a.eye.skywalking.api.plugin.interceptor.loader;
 
-import com.a.eye.skywalking.logging.api.ILog;
-import com.a.eye.skywalking.logging.api.LogManager;
+import com.a.eye.skywalking.api.logging.api.ILog;
+import com.a.eye.skywalking.api.logging.api.LogManager;
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/queue/TraceSegmentHolder.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.queue;
+package com.a.eye.skywalking.api.queue;
 
 import com.a.eye.skywalking.trace.TraceSegment;
 import com.lmax.disruptor.EventFactory;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/util/LoggingUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.util;
+package com.a.eye.skywalking.api.util;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/util/MachineInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.util;
+package com.a.eye.skywalking.api.util;
 
 import java.lang.management.ManagementFactory;
 import java.net.InetAddress;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/util/RoutingKeyGenerator.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.util;
+package com.a.eye.skywalking.api.util;
 
 /**
  * Created data xin on 2016/12/4.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/util/TraceIdGenerator.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.util;
+package com.a.eye.skywalking.api.util;
 
-import com.a.eye.skywalking.conf.Constants;
+import com.a.eye.skywalking.api.conf.Constants;
 import java.util.UUID;
 
 public final class TraceIdGenerator {

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/context/ContextCarrierTestCase.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.context;
+package com.a.eye.skywalking.api.context;
 
 import org.junit.Assert;
 import org.junit.Test;

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/context/TestTracerContextListener.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.context;
+package com.a.eye.skywalking.api.context;
 
 import com.a.eye.skywalking.trace.TraceSegment;
 

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/context/TracerContextTestCase.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.context;
+package com.a.eye.skywalking.api.context;
 
 import com.a.eye.skywalking.trace.Span;
 import com.a.eye.skywalking.trace.TraceSegment;

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/BeInterceptedClass.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin;
+package com.a.eye.skywalking.api.plugin;
 
 public class BeInterceptedClass {
 	public BeInterceptedClass(){

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/PluginMainTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin;
+package com.a.eye.skywalking.api.plugin;
 
 import org.junit.Test;
 

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/PluginResourceResoverTest.java
Patch:
@@ -1,9 +1,7 @@
-package com.a.eye.skywalking.plugin;
+package com.a.eye.skywalking.api.plugin;
 
 import java.io.IOException;
 
-import com.a.eye.skywalking.plugin.PluginResourcesResolver;
-
 public class PluginResourceResoverTest {
 
 	public static void main(String[] args) throws IOException {

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/api/plugin/dubbo/DubboBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.dubbo;
+package com.a.eye.skywalking.api.plugin.dubbo;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
 

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/api/plugin/dubbo/DubboPluginDefine.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.plugin.dubbo;
+package com.a.eye.skywalking.api.plugin.dubbo;
 
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/api/plugin/dubbox/bugfix/below283/BugFixAcitve.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.dubbox.bugfix.below283;
+package com.a.eye.skywalking.api.plugin.dubbox.bugfix.below283;
 
 public final class BugFixAcitve {
     public static boolean isActive = false;

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/api/plugin/dubbox/bugfix/below283/SWBaseBean.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.dubbox.bugfix.below283;
+package com.a.eye.skywalking.api.plugin.dubbox.bugfix.below283;
 
 import java.io.Serializable;
 

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/httpClient/v4/WebBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.httpClient.v4;
+package com.a.eye.skywalking.api.plugin.httpClient.v4;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
 

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/httpClient/v4/define/AbstractHttpClientPluginDefine.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin.httpClient.v4.define;
+package com.a.eye.skywalking.api.plugin.httpClient.v4.define;
 
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/httpClient/v4/define/DefaultRequestDirectorPluginDefine.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin.httpClient.v4.define;
+package com.a.eye.skywalking.api.plugin.httpClient.v4.define;
 
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/httpClient/v4/define/HttpClientPluginDefine.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.httpClient.v4.define;
+package com.a.eye.skywalking.api.plugin.httpClient.v4.define;
 
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/httpClient/v4/define/InternalHttpClientPluginDefine.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin.httpClient.v4.define;
+package com.a.eye.skywalking.api.plugin.httpClient.v4.define;
 
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/httpClient/v4/define/MinimalHttpClientPluginDefine.java
Patch:
@@ -1,6 +1,6 @@
-package com.a.eye.skywalking.plugin.httpClient.v4.define;
+package com.a.eye.skywalking.api.plugin.httpClient.v4.define;
 
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/CallableStatementTracing.java
Patch:
@@ -1,8 +1,8 @@
-package com.a.eye.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.api.plugin.jdbc;
 
+import com.a.eye.skywalking.api.plugin.jdbc.define.JDBCBuriedPointType;
 import com.a.eye.skywalking.invoke.monitor.RPCClientInvokeMonitor;
 import com.a.eye.skywalking.model.Identification;
-import com.a.eye.skywalking.plugin.jdbc.define.JDBCBuriedPointType;
 
 import java.sql.SQLException;
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/ConnectionTracing.java
Patch:
@@ -1,8 +1,8 @@
-package com.a.eye.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.api.plugin.jdbc;
 
+import com.a.eye.skywalking.api.plugin.jdbc.define.JDBCBuriedPointType;
 import com.a.eye.skywalking.model.Identification;
 import com.a.eye.skywalking.invoke.monitor.RPCClientInvokeMonitor;
-import com.a.eye.skywalking.plugin.jdbc.define.JDBCBuriedPointType;
 
 import java.sql.SQLException;
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/SWCallableStatement.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.api.plugin.jdbc;
 
 import java.io.InputStream;
 import java.io.Reader;

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/SWConnection.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.api.plugin.jdbc;
 
 import java.sql.*;
 import java.util.Map;

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/SWPreparedStatement.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.api.plugin.jdbc;
 
 import java.io.InputStream;
 import java.io.Reader;

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/SWStatement.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.api.plugin.jdbc;
 
 import java.sql.Connection;
 import java.sql.ResultSet;

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/StatementTracing.java
Patch:
@@ -1,8 +1,8 @@
-package com.a.eye.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.api.plugin.jdbc;
 
+import com.a.eye.skywalking.api.plugin.jdbc.define.JDBCBuriedPointType;
 import com.a.eye.skywalking.model.Identification;
 import com.a.eye.skywalking.invoke.monitor.RPCClientInvokeMonitor;
-import com.a.eye.skywalking.plugin.jdbc.define.JDBCBuriedPointType;
 
 import java.sql.SQLException;
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/define/AbstractDatabasePluginDefine.java
Patch:
@@ -1,7 +1,8 @@
-package com.a.eye.skywalking.plugin.jdbc.define;
+package com.a.eye.skywalking.api.plugin.jdbc.define;
 
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/define/H2PluginDefine.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.jdbc.define;
+package com.a.eye.skywalking.api.plugin.jdbc.define;
 
 public class H2PluginDefine extends AbstractDatabasePluginDefine {
     @Override

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/define/JDBCBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.jdbc.define;
+package com.a.eye.skywalking.api.plugin.jdbc.define;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/define/MysqlPluginDefine.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.jdbc.define;
+package com.a.eye.skywalking.api.plugin.jdbc.define;
 
 /**
  * Created by xin on 16/8/4.

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jdbc/define/OraclePluginDefine.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.jdbc.define;
+package com.a.eye.skywalking.api.plugin.jdbc.define;
 
 /**
  * Created by xin on 16/8/4.

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jedis/v2/JedisMethodInterceptor.java
Patch:
@@ -1,10 +1,10 @@
-package com.a.eye.skywalking.plugin.jedis.v2;
+package com.a.eye.skywalking.api.plugin.jedis.v2;
 
 import com.a.eye.skywalking.model.Identification;
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.assist.NoCocurrencyAceessObject;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 public class JedisMethodInterceptor extends NoCocurrencyAceessObject {
     protected static final String REDIS_CONN_INFO_KEY = "redisClusterConnInfo";

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jedis/v2/RedisBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.jedis.v2;
+package com.a.eye.skywalking.api.plugin.jedis.v2;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
 

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jedis/v2/define/JedisClusterPluginDefine.java
Patch:
@@ -1,9 +1,9 @@
-package com.a.eye.skywalking.plugin.jedis.v2.define;
+package com.a.eye.skywalking.api.plugin.jedis.v2.define;
 
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.bytebuddy.AllObjectDefaultMethodsMatch;
 import com.a.eye.skywalking.plugin.bytebuddy.ArgumentTypeNameMatch;
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/jedis/v2/define/JedisPluginDefine.java
Patch:
@@ -1,8 +1,9 @@
-package com.a.eye.skywalking.plugin.jedis.v2.define;
+package com.a.eye.skywalking.api.plugin.jedis.v2.define;
 
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.bytebuddy.AllObjectDefaultMethodsMatch;
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-sdk-plugin/motan-plugin/src/main/java/com/a/eye/skywalking/api/plugin/motan/MotanBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.motan;
+package com.a.eye.skywalking.api.plugin.motan;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
 

File: skywalking-sniffer/skywalking-sdk-plugin/motan-plugin/src/main/java/com/a/eye/skywalking/api/plugin/motan/define/MotanClientDefine.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.plugin.motan.define;
+package com.a.eye.skywalking.api.plugin.motan.define;
 
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 
 import net.bytebuddy.description.method.MethodDescription;

File: skywalking-sniffer/skywalking-sdk-plugin/motan-plugin/src/main/java/com/a/eye/skywalking/api/plugin/motan/define/MotanServerDefine.java
Patch:
@@ -1,7 +1,8 @@
-package com.a.eye.skywalking.plugin.motan.define;
+package com.a.eye.skywalking.api.plugin.motan.define;
 
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/tomcat78x/WebBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.plugin.tomcat78x;
+package com.a.eye.skywalking.api.plugin.tomcat78x;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
 

File: skywalking-sniffer/skywalking-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/com/a/eye/skywalking/api/plugin/tomcat78x/define/TomcatPluginDefine.java
Patch:
@@ -1,7 +1,7 @@
-package com.a.eye.skywalking.plugin.tomcat78x.define;
+package com.a.eye.skywalking.api.plugin.tomcat78x.define;
 
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v1/x/PrintTraceIdInterceptor.java
Patch:
@@ -1,10 +1,10 @@
 package com.a.eye.skywalking.toolkit.activation.log.log4j.v1.x;
 
 import com.a.eye.skywalking.api.Tracing;
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 /**
  * Created by wusheng on 2016/12/7.

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v1/x/TraceIdPatternConverterActivation.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.toolkit.activation.log.log4j.v1.x;
 
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-log4j-2.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/log4j/v2/x/PrintTraceIdInterceptor.java
Patch:
@@ -1,8 +1,6 @@
 package com.a.eye.skywalking.toolkit.activation.log.log4j.v2.x;
 
 import com.a.eye.skywalking.api.Tracing;
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.*;
 
 /**
  * Created by wusheng on 2016/12/7.

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-logback-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/logback/v1/x/LogbackPatternConverterActivation.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.toolkit.activation.log.logback.v1.x;
 
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-logback-1.x-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/log/logback/v1/x/PrintTraceIdInterceptor.java
Patch:
@@ -1,10 +1,10 @@
 package com.a.eye.skywalking.toolkit.activation.log.logback.v1.x;
 
 import com.a.eye.skywalking.api.Tracing;
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 /**
  * Created by wusheng on 2016/12/7.

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/SkyWalkingSpanActivation.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.span;
 
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 
 import net.bytebuddy.description.method.MethodDescription;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanFinishInterceptor.java
Patch:
@@ -3,10 +3,10 @@
 import com.a.eye.skywalking.api.Tracing;
 import com.a.eye.skywalking.invoke.monitor.LocalMethodInvokeMonitor;
 import com.a.eye.skywalking.model.Span;
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 import java.util.Map;
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanNewInstanceInterceptor.java
Patch:
@@ -1,8 +1,8 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.span.interceptor;
 
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ConstructorInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceConstructorInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 
 /**
  * @author zhangxin

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanSetOperationNameInterceptor.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.span.interceptor;
 
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 /**
  * Created by xin on 2017/1/16.

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/span/interceptor/SpanSetTagInterceptor.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.span.interceptor;
 
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 import java.util.HashMap;
 import java.util.Map;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/spanbuilder/SkyWalkingSpanBuilderActivation.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.spanbuilder;
 
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 
 import net.bytebuddy.description.method.MethodDescription;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/spanbuilder/interceptor/SpanBuilderNewInstanceInterceptor.java
Patch:
@@ -1,8 +1,8 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.spanbuilder.interceptor;
 
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ConstructorInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceConstructorInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 
 public class SpanBuilderNewInstanceInterceptor implements InstanceConstructorInterceptor {
 

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/spanbuilder/interceptor/SpanBuilderStartInterceptor.java
Patch:
@@ -2,10 +2,10 @@
 
 import com.a.eye.skywalking.invoke.monitor.LocalMethodInvokeMonitor;
 import com.a.eye.skywalking.model.Identification;
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 import com.a.eye.skywalking.toolkit.activation.opentracing.spanbuilder.OpenTracingLocalBuriedPointType;
 
 import java.util.Map;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/spanbuilder/interceptor/SpanBuilderWithStartTimeInterceptor.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.spanbuilder.interceptor;
 
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 /**
  * Created by xin on 2017/1/16.

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/spanbuilder/interceptor/SpanBuilderWithTagInterceptor.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.spanbuilder.interceptor;
 
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 import java.util.HashMap;
 import java.util.Map;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/SkyWalkingTracerActivation.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.toolkit.activation.opentracing.tracer;
 
 import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.InstanceMethodsInterceptPoint;
+import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/interceptor/TracerExtractCrossProcessByteBufferContextInterceptor.java
Patch:
@@ -2,10 +2,10 @@
 
 import com.a.eye.skywalking.api.Tracing;
 import com.a.eye.skywalking.model.RefContext;
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;

File: skywalking-sniffer/skywalking-toolkit-activation/skywalking-toolkit-opentracing-activation/src/main/java/com/a/eye/skywalking/toolkit/activation/opentracing/tracer/interceptor/TracerExtractCrossProcessTextMapContextInterceptor.java
Patch:
@@ -2,10 +2,10 @@
 
 import com.a.eye.skywalking.api.Tracing;
 import com.a.eye.skywalking.model.RefContext;
-import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
 import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 
 import java.util.Iterator;
 import java.util.Map;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/EasyLogger.java
Patch:
@@ -2,13 +2,13 @@
 
 
 import com.a.eye.skywalking.api.logging.api.ILog;
-import com.a.eye.skywalking.util.LoggingUtil;
 
+import com.a.eye.skywalking.api.util.LoggingUtil;
 import java.net.URLEncoder;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
-import static com.a.eye.skywalking.logging.LogLevel.*;
+import static com.a.eye.skywalking.api.logging.LogLevel.*;
 
 /**
  * Created by xin on 16-6-23.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/SyncFileWriter.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.api.logging;
 
 
-import com.a.eye.skywalking.conf.Config;
-import com.a.eye.skywalking.util.LoggingUtil;
 
+import com.a.eye.skywalking.api.conf.Config;
+import com.a.eye.skywalking.api.util.LoggingUtil;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/logging/WriterFactory.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.api.logging;
 
-import com.a.eye.skywalking.conf.Config;
+import com.a.eye.skywalking.api.conf.Config;
 
 public class WriterFactory {
     private WriterFactory(){

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/EnhanceException.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.api.plugin.interceptor;
 
-import com.a.eye.skywalking.plugin.PluginException;
+import com.a.eye.skywalking.api.plugin.PluginException;
 
 public class EnhanceException extends PluginException {
 	private static final long serialVersionUID = -2234782755784217255L;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/assist/NoCocurrencyAceessObject.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.plugin.interceptor.assist;
 
 import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
-import com.a.eye.skywalking.plugin.interceptor.InterceptorException;
+import com.a.eye.skywalking.api.plugin.interceptor.InterceptorException;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 
 /**

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassInstanceMethodsEnhancePluginDefine.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
 import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
 
 /**
  * Plugins, which only need enhance class static methods.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/plugin/interceptor/enhance/ClassStaticMethodsEnhancePluginDefine.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.plugin.interceptor.enhance;
 
+import com.a.eye.skywalking.api.plugin.interceptor.ConstructorInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
 
 /**
  * Plugins, which only need enhance class static methods.

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/queue/TraceSegmentProcessQueue.java
Patch:
@@ -1,8 +1,8 @@
 package com.a.eye.skywalking.api.queue;
 
-import com.a.eye.skywalking.conf.Config;
+import com.a.eye.skywalking.api.conf.Config;
 import com.a.eye.skywalking.api.context.TracerContext;
-import com.a.eye.skywalking.context.TracerContextListener;
+import com.a.eye.skywalking.api.context.TracerContextListener;
 import com.a.eye.skywalking.health.report.HealthCollector;
 import com.a.eye.skywalking.health.report.HeathReading;
 import com.a.eye.skywalking.trace.TraceSegment;
@@ -36,7 +36,7 @@ public enum TraceSegmentProcessQueue implements TracerContextListener {
     RingBuffer<TraceSegmentHolder> buffer;
 
     TraceSegmentProcessQueue() {
-        disruptor = new Disruptor<>(TraceSegmentHolder.Factory.INSTANCE, Config.Disruptor.BUFFER_SIZE, DaemonThreadFactory.INSTANCE);
+        disruptor = new Disruptor<TraceSegmentHolder>(TraceSegmentHolder.Factory.INSTANCE, Config.Disruptor.BUFFER_SIZE, DaemonThreadFactory.INSTANCE);
         buffer = disruptor.getRingBuffer();
     }
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/util/TraceIdGenerator.java
Patch:
@@ -1,6 +1,6 @@
 package com.a.eye.skywalking.api.util;
 
-import com.a.eye.skywalking.conf.Constants;
+import com.a.eye.skywalking.api.conf.Constants;
 import java.util.UUID;
 
 public final class TraceIdGenerator {

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/TestAroundInterceptor.java
Patch:
@@ -1,8 +1,7 @@
 package com.a.eye.skywalking.api.plugin;
 
 import com.a.eye.skywalking.api.plugin.interceptor.EnhancedClassInstanceContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.ConstructorInvokeContext;
-import com.a.eye.skywalking.plugin.interceptor.enhance.InstanceMethodInvokeContext;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodInvokeContext;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
 

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/TestInterceptorDefine.java
Patch:
@@ -4,8 +4,6 @@
 import com.a.eye.skywalking.api.plugin.interceptor.InstanceMethodsInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.StaticMethodsInterceptPoint;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.ClassEnhancePluginDefine;
-import com.a.eye.skywalking.plugin.interceptor.ConstructorInterceptPoint;
-import com.a.eye.skywalking.plugin.interceptor.StaticMethodsInterceptPoint;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-sniffer/skywalking-api/src/test/java/com/a/eye/skywalking/api/plugin/TestStaticAroundInterceptor.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.api.plugin;
 
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInterceptResult;
-import com.a.eye.skywalking.plugin.interceptor.enhance.MethodInvokeContext;
+import com.a.eye.skywalking.api.plugin.interceptor.enhance.MethodInvokeContext;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.StaticMethodInvokeContext;
 import com.a.eye.skywalking.api.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;
 

File: skywalking-commons/skywalking-trace/src/test/java/com/a/eye/skywalking/trace/SpanTestCase.java
Patch:
@@ -41,10 +41,10 @@ public void testSetTag() {
         Tags.COMPONENT.set(span1, "Spring");
         Tags.PEER_HOST.set(span1, ipToInt("127.0.0.1"));
         Tags.ERROR.set(span1, true);
-        Tags.HTTP_STATUS.set(span1, 302);
-        Tags.HTTP_URL.set(span1, "http://127.0.0.1/serviceA");
+        Tags.STATUS_CODE.set(span1, 302);
+        Tags.URL.set(span1, "http://127.0.0.1/serviceA");
         Tags.DB_URL.set(span1, "jdbc:127.0.0.1:user");
-        Tags.DB_SQL.set(span1, "select * from users");
+        Tags.DB_STATEMENT.set(span1, "select * from users");
 
         Map<String, Object> tags = span1.getTags();
         Assert.assertEquals(8, tags.size());

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/PreparedStatementTracing.java
Patch:
@@ -19,7 +19,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
         try {
             Tags.SPAN_LAYER.asDBAccess(span);
             Tags.DB_URL.set(span, connectInfo);
-            Tags.DB_SQL.set(span, sql);
+            Tags.DB_STATEMENT.set(span, sql);
             return exec.exe(realStatement, sql);
         } catch (SQLException e) {
             span.log(e);

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/queue/TraceSegmentProcessQueue.java
Patch:
@@ -33,7 +33,7 @@ public enum TraceSegmentProcessQueue implements TracerContextListener {
     };
 
     private Disruptor<TraceSegmentHolder> disruptor;
-    private RingBuffer<TraceSegmentHolder> buffer;
+    RingBuffer<TraceSegmentHolder> buffer;
 
     TraceSegmentProcessQueue() {
         disruptor = new Disruptor<>(TraceSegmentHolder.Factory.INSTANCE, Config.Disruptor.BUFFER_SIZE, DaemonThreadFactory.INSTANCE);

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/util/MailSender.java
Patch:
@@ -26,9 +26,6 @@ private MailSender() {
 
             config.setProperty("mail.transport.protocol", Config.MailSenderInfo.TRANSPORT_PROTOCOL);
             config.setProperty("mail.smtp.auth", String.valueOf(Config.MailSenderInfo.SMTP_AUTH));
-            config.setProperty("mail.smtp.socketFactory.port", "587");
-            config.setProperty("mail.debug", "true");
-            //config.setProperty("mail.smtp.ssl.enable", "true");
             if (Config.MailSenderInfo.SSL_ENABLE) {
                 MailSSLSocketFactory sf = new MailSSLSocketFactory();
                 sf.setTrustAllHosts(true);

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/alarm/sender/AlarmMessageSender.java
Patch:
@@ -17,7 +17,7 @@ public void send(String alarmKey, String traceId, String message) {
         Jedis jedis = null;
         try {
             jedis = AlarmRedisConnector.getJedis();
-            if (jedis != null)
+            if (jedis == null)
                 return;
             jedis.hsetnx(alarmKey, traceId, message);
             jedis.expire(alarmKey, Config.Alarm.ALARM_EXPIRE_SECONDS);

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/alarm/sender/AlarmRedisConnector.java
Patch:
@@ -22,7 +22,7 @@ public class AlarmRedisConnector {
     }
 
     public static Jedis getJedis() {
-        if (Config.Alarm.ALARM_OFF_FLAG) {
+        if (!Config.Alarm.ALARM_OFF_FLAG) {
             return null;
         } else {
             return jedisPool.getResource();

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/disruptor/ack/AckSpanDisruptor.java
Patch:
@@ -26,7 +26,7 @@ public class AckSpanDisruptor extends AbstractSpanDisruptor {
     public AckSpanDisruptor(String connectionURL) {
         ackSpanDisruptor = new Disruptor<AckSpanHolder>(new AckSpanFactory(), Config.Disruptor.BUFFER_SIZE, DaemonThreadFactory.INSTANCE);
         ackSpanEventHandler = new RouteAckSpanBufferEventHandler(connectionURL);
-        ackSpanDisruptor.handleEventsWith(ackSpanEventHandler, new SpanAlarmHandler());
+        ackSpanDisruptor.handleEventsWith(ackSpanEventHandler).then(new SpanAlarmHandler()).then(new AckSpanClearEventHandler());
         ackSpanDisruptor.start();
         ackSpanRingBuffer = ackSpanDisruptor.getRingBuffer();
     }

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/disruptor/ack/AckSpanFactory.java
Patch:
@@ -6,9 +6,9 @@
 /**
  * Created by wusheng on 2016/11/24.
  */
-public class AckSpanFactory implements EventFactory<AckSpanData> {
+public class AckSpanFactory implements EventFactory<AckSpanDataHolder> {
     @Override
-    public AckSpanData newInstance() {
-        return new AckSpanData();
+    public AckSpanDataHolder newInstance() {
+        return new AckSpanDataHolder();
     }
 }

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/disruptor/request/RequestSpanFactory.java
Patch:
@@ -6,9 +6,9 @@
 /**
  * Created by wusheng on 2016/11/24.
  */
-public class RequestSpanFactory implements EventFactory<RequestSpanData> {
+public class RequestSpanFactory implements EventFactory<RequestSpanDataHolder> {
     @Override
-    public RequestSpanData newInstance() {
-        return new RequestSpanData();
+    public RequestSpanDataHolder newInstance() {
+        return new RequestSpanDataHolder();
     }
 }

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/config/Config.java
Patch:
@@ -2,6 +2,9 @@
 
 public class Config {
     public static class Server {
+
+        public static String HOST = "0.0.0.0";
+
         public static int PORT = 23000;
 
         public static String REST_SERVICE_HOST = "0.0.0.0";

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/config/Config.java
Patch:
@@ -5,6 +5,8 @@
  */
 public class Config {
     public static class Server {
+        public static String HOST = "0.0.0.0";
+
         public static int PORT = 34000;
     }
 

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/AlarmProcessServer.java
Patch:
@@ -1,8 +1,8 @@
 package com.a.eye.skywalking.alarm;
 
-import com.a.eye.skywalking.alarm.conf.ConfigInitializer;
 import com.a.eye.skywalking.alarm.conf.Config;
 import com.a.eye.skywalking.alarm.util.ZKUtil;
+import com.a.eye.skywalking.util.ConfigInitializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 

File: skywalking-sniffer/skywalking-agent/src/main/java/com/a/eye/skywalking/agent/SkyWalkingAgent.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.a.eye.skywalking.agent.junction.SkyWalkingEnhanceMatcher;
 import com.a.eye.skywalking.conf.Config;
-import com.a.eye.skywalking.conf.ConfigInitializer;
+import com.a.eye.skywalking.conf.SnifferConfigInitializer;
 import com.a.eye.skywalking.logging.EasyLogResolver;
 import com.a.eye.skywalking.logging.api.ILog;
 import com.a.eye.skywalking.logging.api.LogManager;
@@ -98,7 +98,7 @@ private static void initConfig() {
         Config.SkyWalking.IS_PREMAIN_MODE = true;
         Config.SkyWalking.AGENT_BASE_PATH = initAgentBasePath();
 
-        ConfigInitializer.initialize();
+        SnifferConfigInitializer.initialize();
     }
 
     /**

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/Main.java
Patch:
@@ -8,17 +8,16 @@
 import com.a.eye.skywalking.registry.RegistryCenterFactory;
 import com.a.eye.skywalking.registry.api.CenterType;
 import com.a.eye.skywalking.registry.api.RegistryCenter;
+import com.a.eye.skywalking.registry.assist.NetUtils;
 import com.a.eye.skywalking.registry.impl.zookeeper.ZookeeperConfig;
 import com.a.eye.skywalking.storage.boot.ElasticBootstrap;
 import com.a.eye.skywalking.storage.config.Config;
-import com.a.eye.skywalking.storage.config.ConfigInitializer;
 import com.a.eye.skywalking.storage.data.file.DataFilesManager;
 import com.a.eye.skywalking.storage.data.index.IndexOperatorFactory;
 import com.a.eye.skywalking.storage.listener.SearchListener;
 import com.a.eye.skywalking.storage.listener.StorageListener;
-import com.a.eye.skywalking.registry.assist.NetUtils;
+import com.a.eye.skywalking.util.ConfigInitializer;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.Map;
 import java.util.Properties;

File: skywalking-webui/src/main/java/com/a/eye/skywalking/web/controller/SearchController.java
Patch:
@@ -3,11 +3,11 @@
 import com.a.eye.skywalking.registry.RegistryCenterFactory;
 import com.a.eye.skywalking.registry.api.RegistryCenter;
 import com.a.eye.skywalking.registry.impl.zookeeper.ZookeeperConfig;
+import com.a.eye.skywalking.util.ConfigInitializer;
 import com.a.eye.skywalking.util.StringUtil;
 import com.a.eye.skywalking.web.client.routing.RoutingServerWatcher;
 import com.a.eye.skywalking.web.common.BaseController;
 import com.a.eye.skywalking.web.config.Config;
-import com.a.eye.skywalking.web.config.ConfigInitializer;
 import com.a.eye.skywalking.web.dto.TraceTreeInfo;
 import com.a.eye.skywalking.web.service.inter.ITraceTreeService;
 import com.alibaba.fastjson.JSON;

File: skywalking-application-toolkit/skywalking-toolkit-log4j-1.x/src/main/java/com/a/eye/skywalking/toolkit/log/log4j/v1/x/TraceIdPatternParser.java
Patch:
@@ -13,7 +13,7 @@ public TraceIdPatternParser(String pattern) {
 
     @Override
     protected void finalizeConverter(char c) {
-        if ('x' == c) {
+        if ('T' == c) {
             addConverter(new TraceIdPatternConverter());
         } else {
             super.finalizeConverter(c);

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/invoke/monitor/RPCServerInvokeMonitor.java
Patch:
@@ -6,6 +6,7 @@
 import com.a.eye.skywalking.model.Identification;
 import com.a.eye.skywalking.model.Span;
 import com.a.eye.skywalking.model.SpanType;
+import com.a.eye.skywalking.network.model.Tag;
 import com.a.eye.skywalking.util.ContextGenerator;
 
 public class RPCServerInvokeMonitor extends BaseInvokeMonitor {
@@ -18,7 +19,7 @@ public void beforeInvoke(ContextData context, Identification id) {
             Span spanData = ContextGenerator.generateSpanFromContextData(
                     context, id);
             // 设置是否为接收端
-            spanData.setSpanType(SpanType.RPC_SERVER);
+            spanData.setTag(Tag.SPAN_TYPE, SpanType.RPC_SERVER);
 
             super.beforeInvoke(spanData, id);
         } catch (Throwable t) {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/model/SpanType.java
Patch:
@@ -4,7 +4,7 @@
  * Created by wusheng on 2016/11/26.
  */
 public interface SpanType {
-    int LOCAL = 0;
-    int RPC_CLIENT = 1;
-    int RPC_SERVER = 2;
+    String LOCAL = "0";
+    String RPC_CLIENT = "1";
+    String RPC_SERVER = "2";
 }

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/Main.java
Patch:
@@ -37,6 +37,7 @@ public static void main(String[] args) {
             logger.info("Skywalking routing service was started.");
             Thread.currentThread().join();
         } catch (Exception e) {
+            e.printStackTrace();
             logger.error("Failed to start routing service.", e);
             System.exit(-1);
         } finally {

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/alarm/SpanAlarmHandler.java
Patch:
@@ -22,7 +22,7 @@ public SpanAlarmHandler() {
     }
 
     private String generateAlarmMessageKey(AckSpanHolder span, FatalReason reason) {
-        return span.getAckSpan().getUsername() + "-" + span.getAckSpan().getApplicationCode() + "-" + (System.currentTimeMillis() / (10000 * 6)) + reason.getDetail();
+        return span.getUserName() + "-" + span.getApplicationCode() + "-" + (System.currentTimeMillis() / (10000 * 6)) + reason.getDetail();
     }
 
     @Override

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/alarm/checker/ExceptionChecker.java
Patch:
@@ -7,9 +7,9 @@ public class ExceptionChecker implements ISpanChecker {
 
     @Override
     public CheckResult check(AckSpanHolder span) {
-        if (span.getAckSpan().getStatusCode() != 1)
+        if (span.getStatusCode() != 1)
             return new CheckResult();
-        String exceptionStack = span.getAckSpan().getExceptionStack();
+        String exceptionStack = span.getExceptionStack();
         if (exceptionStack == null) {
             exceptionStack = "";
         } else if (exceptionStack.length() > Config.Alarm.ALARM_EXCEPTION_STACK_LENGTH) {

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/alarm/checker/ExecuteTimeChecker.java
Patch:
@@ -1,5 +1,6 @@
 package com.a.eye.skywalking.routing.alarm.checker;
 
+import com.a.eye.skywalking.network.model.Tag;
 import com.a.eye.skywalking.routing.disruptor.ack.AckSpanHolder;
 
 /**
@@ -22,7 +23,7 @@ public CheckResult check(AckSpanHolder span) {
     protected abstract FatalReason getFatalLevel();
 
     protected String generateAlarmMessage(AckSpanHolder span) {
-        return span.getAckSpan().getViewpointId() + " cost " + span.getAckSpan().getCost() + " ms.";
+        return span.getViewPoint() + span.getAckSpan().getCost() + " ms.";
     }
 
 

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/Main.java
Patch:
@@ -41,7 +41,6 @@ public class Main {
 
     public static void main(String[] args) {
         try {
-            System.out.println(" =========== ::::::::::: {} " +  System.getProperty("STORAGE_HOME")  + File.separator );
             initConfig();
             HealthCollector.init(SERVER_REPORTER_NAME);
 

File: skywalking-webui/src/main/java/com/a/eye/skywalking/web/dto/TraceNodeInfo.java
Patch:
@@ -72,7 +72,7 @@ public TraceNodeInfo(Span span) {
         this.statusCodeStr = statusCodeStr;
         this.statusCodeName = statusCodeName;
 
-        this.applicationIdStr = this.applicationId;
+        this.applicationIdStr = this.applicationCode;
         if (!StringUtil.isEmpty(this.viewPointId) && this.viewPointId.length() > 60) {
             this.viewPointIdSub = this.viewPointId.substring(0, 30) + "..." + this.viewPointId
                     .substring(this.viewPointId.length() - 30);
@@ -137,7 +137,7 @@ public String toString() {
                 + ", viewPointId=" + viewPointId + ", startDate=" + startDate + ", cost=" + cost + ", address="
                 + address + ", statusCode=" + statusCode + ", exceptionStack=" + exceptionStack + ", spanType="
                 + spanType + ", businessKey=" + businessKey + ", processNo=" + processNo + ", applicationId="
-                + applicationId + "]";
+                + applicationCode + "]";
     }
 
     public List<TimeLineEntry> getTimeLineList() {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/util/ContextGenerator.java
Patch:
@@ -50,8 +50,6 @@ private static Span getSpanFromThreadLocal(Identification id) {
             span = new Span(parentSpan, id.getViewPoint());
         }
 
-        span.setStartDate(System.currentTimeMillis());
-
         return span;
     }
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/conf/ConfigInitializer.java
Patch:
@@ -76,9 +76,9 @@ private static void initNextLevel(Properties properties, Class<?> recentConfigTy
 
     private static InputStream fetchAuthFileInputStream() {
         try {
-            return new FileInputStream(Config.SkyWalking.AGENT_BASE_PATH + File.separator + "/sky-walking.auth");
+            return new FileInputStream(Config.SkyWalking.AGENT_BASE_PATH + File.separator + "/sky-walking.config");
         } catch (Exception e) {
-            logger.error("Error to fetch auth file input stream.", e);
+            logger.warn("sky-walking.config is missing, use default config.");
             return null;
         }
     }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/logging/EasyLogResolver.java
Patch:
@@ -1,13 +1,14 @@
 package com.a.eye.skywalking.logging;
 
+import com.a.eye.skywalking.logging.api.ILog;
 import com.a.eye.skywalking.logging.api.LogResolver;
 
 /**
  * Created by wusheng on 2016/11/26.
  */
 public class EasyLogResolver implements LogResolver {
     @Override
-    public com.a.eye.skywalking.logging.api.ILog getLogger(Class<?> clazz) {
+    public ILog getLogger(Class<?> clazz) {
         return new EasyLogger(clazz);
     }
 }

File: skywalking-storage-center/skywalking-storage/src/test/java/com/a/eye/skywalking/storage/data/file/DataFileTest.java
Patch:
@@ -17,7 +17,7 @@ public void testWriteFile(){
 
         IndexMetaInfo info = null;
         for (int i = 0; i < 100; i++) {
-            RequestSpan span = RequestSpan.newBuilder().setUserId("1").setApplicationId("app").build();
+            RequestSpan span = RequestSpan.newBuilder().setUsername("1").setApplicationCode("app").build();
 
             try {
                 info = dataFile.write(new RequestSpanData(span));
@@ -27,7 +27,7 @@ public void testWriteFile(){
 
             RequestSpan newSpan = SpanDataBuilder.buildRequestSpan(dataFile.read(info.getOffset(), info.getLength()));
 
-            Assert.assertEquals("1", newSpan.getUserId());
+            Assert.assertEquals("1", newSpan.getUsername());
         }
     }
 }

File: skywalking-storage-center/skywalking-storage/src/test/java/com/a/eye/skywalking/storage/data/index/IndexOperatorTest.java
Patch:
@@ -26,10 +26,10 @@ public static void main(String[] args) {
                 IndexMetaCollection collection = new IndexMetaCollection();
                 for (int j = 0; j < 100; j++) {
                     RequestSpan requestSpan =
-                            RequestSpan.newBuilder().setSpanType(1).setAddress(NetUtils.getLocalAddress().toString()).setApplicationId("1").setCallType("1").setLevelId(0)
+                            RequestSpan.newBuilder().setSpanType(1).setAddress(NetUtils.getLocalAddress().toString()).setApplicationCode("1").setCallType("1").setLevelId(0)
                                     .setProcessNo(19287).setStartDate(System.currentTimeMillis()).setTraceId(
                                     TraceId.newBuilder().addSegments(201611).addSegments(j).addSegments(8504828).addSegments(2277).addSegments(53).addSegments(3).build())
-                                    .setUserId("1").setViewPointId("http://localhost:8080/wwww/test/helloWorld").setRouteKey(i).build();
+                                    .setUsername("1").setViewPointId("http://localhost:8080/wwww/test/helloWorld").setRouteKey(i).build();
                     IndexMetaInfo info = new IndexMetaInfo(new RequestSpanData(requestSpan), new DataFileNameDesc(), i, j);
                     collection.add(info);
                 }

File: skywalking-storage-center/skywalking-storage/src/test/java/StorageThread.java
Patch:
@@ -37,10 +37,10 @@ public void run() {
         for (int i = 0; i < count; i++) {
 
             long value = System.currentTimeMillis();
-            RequestSpan requestSpan = RequestSpan.newBuilder().setSpanType(1).setAddress(NetUtils.getLocalAddress().toString()).setApplicationId("1").setCallType("1").setLevelId(0)
+            RequestSpan requestSpan = RequestSpan.newBuilder().setSpanType(1).setAddress(NetUtils.getLocalAddress().toString()).setApplicationCode("1").setCallType("1").setLevelId(0)
                     .setProcessNo(19287).setStartDate(System.currentTimeMillis())
                     .setTraceId(TraceId.newBuilder().addSegments(201611).addSegments(value).addSegments(8504828).addSegments(2277).addSegments(53).addSegments(3).build())
-                    .setUserId("1").setViewPointId("http://localhost:8080/wwww/test/helloWorld").setRouteKey(i).build();
+                    .setUsername("1").setViewPointId("http://localhost:8080/wwww/test/helloWorld").setRouteKey(i).build();
 
             AckSpan ackSpan = AckSpan.newBuilder().setLevelId(0).setCost(10).setTraceId(
                     TraceId.newBuilder().addSegments(201611).addSegments(value).addSegments(8504828).addSegments(2277).addSegments(53).addSegments(3)

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/listener/SearchListener.java
Patch:
@@ -6,15 +6,15 @@
 import com.a.eye.skywalking.logging.api.LogManager;
 import com.a.eye.skywalking.network.grpc.Span;
 import com.a.eye.skywalking.network.grpc.TraceId;
-import com.a.eye.skywalking.network.listener.server.AsyncTraceSearchServerListener;
+import com.a.eye.skywalking.network.listener.server.TraceSearchListener;
 import com.a.eye.skywalking.storage.data.SpanDataFinder;
 import com.a.eye.skywalking.storage.data.spandata.SpanData;
 import com.a.eye.skywalking.storage.data.spandata.SpanDataHelper;
 
 import java.util.ArrayList;
 import java.util.List;
 
-public class SearchListener implements AsyncTraceSearchServerListener {
+public class SearchListener implements TraceSearchListener {
 
     private static ILog logger = LogManager.getLogger(SearchListener.class);
 

File: skywalking-network/src/main/java/com/a/eye/skywalking/network/Server.java
Patch:
@@ -3,7 +3,6 @@
 import com.a.eye.skywalking.network.grpc.server.AsyncTraceSearchServer;
 import com.a.eye.skywalking.network.grpc.server.SpanStorageServer;
 import com.a.eye.skywalking.network.grpc.server.TraceSearchServer;
-import com.a.eye.skywalking.network.listener.server.AsyncTraceSearchServerListener;
 import com.a.eye.skywalking.network.listener.server.SpanStorageServerListener;
 import com.a.eye.skywalking.network.listener.server.TraceSearchListener;
 import io.grpc.netty.NettyServerBuilder;
@@ -61,8 +60,8 @@ public TransferServiceBuilder addTraceSearchService(TraceSearchListener traceSea
             return this;
         }
 
-        public TransferServiceBuilder addAsyncTraceSearchService(AsyncTraceSearchServerListener asyncTraceSearchServerListener){
-            serverBuilder.addService(new AsyncTraceSearchServer(asyncTraceSearchServerListener));
+        public TransferServiceBuilder addAsyncTraceSearchService(TraceSearchListener traceSearchListener){
+            serverBuilder.addService(new AsyncTraceSearchServer(traceSearchListener));
             return this;
         }
     }

File: skywalking-network/src/main/java/com/a/eye/skywalking/network/listener/server/TraceSearchListener.java
Patch:
@@ -1,9 +1,10 @@
 package com.a.eye.skywalking.network.listener.server;
 
 import com.a.eye.skywalking.network.grpc.Span;
+import com.a.eye.skywalking.network.grpc.TraceId;
 
 import java.util.List;
 
 public interface TraceSearchListener{
-    List<Span> search(String traceId);
+    List<Span> search(TraceId traceId);
 }

File: skywalking-network/src/main/java/com/a/eye/skywalking/network/listener/client/StorageClientListener.java
Patch:
@@ -1,7 +1,5 @@
 package com.a.eye.skywalking.network.listener.client;
 
-import com.a.eye.skywalking.network.grpc.SendResult;
-
 /**
  * Created by wusheng on 2016/11/27.
  */

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/disruptor/AbstractRouteSpanEventHandler.java
Patch:
@@ -34,6 +34,7 @@ protected SpanStorageClient getStorageClient() {
         SpanStorageClient spanStorageClient = client.newSpanStorageClient(new StorageClientListener() {
             @Override
             public void onError(Throwable throwable) {
+                previousSendFinish = true;
                 HealthCollector.getCurrentHeathReading(getExtraId()).updateData(HeathReading.ERROR, "Failed to send  span. error message :" + throwable.getMessage());
             }
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/ConstructorInterceptPoint.java
Patch:
@@ -7,7 +7,7 @@
  * Created by wusheng on 2016/11/29.
  */
 public interface ConstructorInterceptPoint{
-    ElementMatcher.Junction<MethodDescription> getConstructorMatcher();
+    ElementMatcher<MethodDescription> getConstructorMatcher();
 
     /**
      *

File: skywalking-sniffer/skywalking-sdk-plugin/motan-plugin/src/main/java/com/a/eye/skywalking/plugin/motan/define/MotanClientDefine.java
Patch:
@@ -20,7 +20,7 @@ protected String enhanceClassName() {
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {new ConstructorInterceptPoint() {
             @Override
-            public ElementMatcher.Junction<MethodDescription> getConstructorMatcher() {
+            public ElementMatcher<MethodDescription> getConstructorMatcher() {
                 return any();
             }
 

File: skywalking-sniffer/skywalking-sdk-plugin/motan-plugin/src/main/java/com/a/eye/skywalking/plugin/motan/define/MotanServerDefine.java
Patch:
@@ -21,7 +21,7 @@ protected String enhanceClassName() {
     protected ConstructorInterceptPoint[] getConstructorsInterceptPoints() {
         return new ConstructorInterceptPoint[] {new ConstructorInterceptPoint() {
             @Override
-            public ElementMatcher.Junction<MethodDescription> getConstructorMatcher() {
+            public ElementMatcher<MethodDescription> getConstructorMatcher() {
                 return any();
             }
 

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/config/Config.java
Patch:
@@ -17,6 +17,8 @@ public static class StorageNode {
     }
 
     public static class Disruptor {
-        public static int BUFFER_SIZE = 2 ^ 10;
+        public static int BUFFER_SIZE = 1024 * 128 * 4;
+
+        public static int FLUSH_SIZE = 100;
     }
 }

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/disruptor/ack/AckSpanDisruptor.java
Patch:
@@ -18,11 +18,11 @@ public class AckSpanDisruptor {
     private Disruptor<AckSpanHolder> ackSpanDisruptor;
     private RingBuffer<AckSpanHolder> ackSpanRingBuffer;
 
-    private AckSpanBufferEventHandler ackSpanEventHandler;
+    private RouteAckSpanBufferEventHandler ackSpanEventHandler;
 
     public AckSpanDisruptor(String connectionURL) {
         ackSpanDisruptor = new Disruptor<AckSpanHolder>(new AckSpanFactory(), Config.Disruptor.BUFFER_SIZE, DaemonThreadFactory.INSTANCE);
-        ackSpanEventHandler = new AckSpanBufferEventHandler(connectionURL);
+        ackSpanEventHandler = new RouteAckSpanBufferEventHandler(connectionURL);
         ackSpanDisruptor.handleEventsWith(ackSpanEventHandler);
         ackSpanDisruptor.start();
         ackSpanRingBuffer = ackSpanDisruptor.getRingBuffer();

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/router/Router.java
Patch:
@@ -76,6 +76,7 @@ public int compare(SpanDisruptor o1, SpanDisruptor o2) {
                 }
             }
         });
+        //TODO: BUG, no data release.
 
         disruptors = newDisruptors.toArray(new SpanDisruptor[newDisruptors.size()]);
     }

File: skywalking-storage-center/skywalking-routing/src/main/java/com/a/eye/skywalking/routing/storage/listener/NotifyListenerImpl.java
Patch:
@@ -39,6 +39,7 @@ private Properties fetchRegistryCenterConfig() {
     public void notify(List<String> currentUrls) {
         lock.lock();
         try {
+            //TODO: bug, logic error.
             List<String> URL = new ArrayList<>(currentUrls);
             if (childrenConnectionURLOfPreviousChanged.size() > URL.size()) {
                 childrenConnectionURLOfPreviousChanged.removeAll(URL);

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/config/Config.java
Patch:
@@ -10,6 +10,8 @@ public static class Server {
 
     public static class Disruptor{
         public static int BUFFER_SIZE = 1024 * 128;
+
+        public static int FLUSH_SIZE = 100;
     }
 
 

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/data/index/IndexOperator.java
Patch:
@@ -40,14 +40,14 @@ public int batchUpdate(IndexMetaCollection metaInfos) {
             } catch (Exception e) {
                 logger.error("Failed to update index.", e);
                 HealthCollector.getCurrentHeathReading("IndexOperator")
-                        .updateData(HeathReading.ERROR, "Failed to " + "update index.");
+                        .updateData(HeathReading.ERROR, "Failed to update index.");
             }
         }
 
         BulkResponse bulkRequest = requestBuilder.get();
         if (bulkRequest.hasFailures()) {
             HealthCollector.getCurrentHeathReading("IndexOperator").updateData(HeathReading.ERROR,
-                    "Failed to " + "update index. Error message : " + bulkRequest.buildFailureMessage());
+                    "Failed to update index. Error message : " + bulkRequest.buildFailureMessage());
         }
 
         return metaInfos.size();

File: skywalking-commons/skywalking-registry/src/main/java/com/a/eye/skywalking/registry/impl/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -34,12 +34,14 @@ public void register(String path) {
 
     @Override
     public void subscribe(String path, final NotifyListener listener) {
-        client.subscribeChildChanges(path, new IZkChildListener() {
+        List<String> children = client.subscribeChildChanges(path, new IZkChildListener() {
             @Override
             public void handleChildChange(String parentPath, List<String> children) throws Exception {
                 listener.notify(children);
             }
         });
+        if (children != null && children.size() > 0)
+            listener.notify(children);
     }
 
     private boolean exists(String path) {

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/Main.java
Patch:
@@ -40,7 +40,7 @@ public class Main {
 
     public static void main(String[] args) {
         try {
-            initializeParam();
+            initConfig();
             HealthCollector.init(SERVER_REPORTER_NAME);
 
             new ElasticBootstrap().boot(NetUtils.getIndexServerPort());
@@ -65,6 +65,7 @@ public static void main(String[] args) {
             logger.error("SkyWalking storage server start failure.", e);
         } finally {
             server.stop();
+            System.exit(-1);
         }
     }
 
@@ -79,7 +80,7 @@ private static void registryNode() {
         registryCenter.register(PATH_PREFIX + NetUtils.getLocalAddress().getHostAddress() + ":" + Config.Server.PORT);
     }
 
-    private static void initializeParam() throws IllegalAccessException, IOException {
+    private static void initConfig() throws IllegalAccessException, IOException {
         Properties properties = new Properties();
         try {
             properties.load(Main.class.getResourceAsStream("/config.properties"));

File: skywalking-storage-center/skywalking-storage/src/test/java/StorageClient.java
Patch:
@@ -2,8 +2,8 @@
 
 public class StorageClient {
 
-    private static       int  THREAD_COUNT = 4;
-    private static final long COUNT        = 1_000_000_000;
+    private static       int  THREAD_COUNT = 1;
+    private static final long COUNT        = 1;
 
 
     public static void main(String[] args) throws InterruptedException {

File: skywalking-storage-center/skywalking-storage/src/test/java/com/a/eye/skywalking/storage/SearchClient.java
Patch:
@@ -36,7 +36,7 @@ public void onCompleted() {
         StreamObserver<QueryTask> searchResult = searchServiceStub.search(serverStreamObserver);
 
         searchResult.onNext(QueryTask.newBuilder().setTraceId(
-                TraceId.newBuilder().addSegments(201611).addSegments(1479803629139L).addSegments(8504828)
+                TraceId.newBuilder().addSegments(201611).addSegments(1480475308493L).addSegments(8504828)
                         .addSegments(2277).addSegments(53).addSegments(3).build()).build());
         searchResult.onCompleted();
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/conf/Config.java
Patch:
@@ -11,6 +11,8 @@ public static class SkyWalking {
 
         public static String AGENT_BASE_PATH = "";
 
+        public static String SERVERS = "";
+
     }
 
     public static class Disruptor{

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/disruptor/ack/SendAckSpanEventHandler.java
Patch:
@@ -27,6 +27,7 @@ public void onEvent(AckSpanHolder event, long sequence, boolean endOfBatch) thro
 
         if (endOfBatch || buffer.size() == bufferSize) {
             try {
+                //TODO， use GRPC to send
 
                 HealthCollector.getCurrentHeathReading("SendAckSpanEventHandler").updateData(HeathReading.INFO, "%s messages were successful consumed .", buffer.size());
             } finally {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/disruptor/request/SendRequestSpanEventHandler.java
Patch:
@@ -27,7 +27,7 @@ public void onEvent(RequestSpanHolder event, long sequence, boolean endOfBatch)
 
         if (endOfBatch || buffer.size() == bufferSize) {
             try {
-
+                //TODO， use GRPC to send
 
                 HealthCollector.getCurrentHeathReading("SendRequestSpanEventHandler").updateData(HeathReading.INFO, "%s messages were successful consumed .", buffer.size());
             } finally {

File: skywalking-storage-center/skywalking-storage/src/test/java/StorageThread.java
Patch:
@@ -30,7 +30,7 @@ public void run() {
 
             long value = System.currentTimeMillis();
             RequestSpan requestSpan = RequestSpan.newBuilder().setSpanType(1).setAddress(NetUtils.getLocalAddress().toString()).setApplicationId("1").setCallType("1").setLevelId(0)
-                    .setProcessNo("19287").setStartDate(System.currentTimeMillis())
+                    .setProcessNo(19287).setStartDate(System.currentTimeMillis())
                     .setTraceId(TraceId.newBuilder().addSegments(201611).addSegments(value).addSegments(8504828).addSegments(2277).addSegments(53).addSegments(3).build())
                     .setUserId("1").setViewPointId("http://localhost:8080/wwww/test/helloWorld").build();
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/api/BusinessKeyAppender.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.api;
 
 import com.a.eye.skywalking.conf.Config;
-import com.a.eye.skywalking.conf.AuthDesc;
 import com.a.eye.skywalking.context.CurrentThreadSpanStack;
 import com.a.eye.skywalking.model.Span;
 
@@ -17,8 +16,6 @@ private BusinessKeyAppender() {
      * @param businessKey
      */
     public static void setBusinessKey2Trace(String businessKey) {
-        if (!AuthDesc.isAuth())
-            return;
 
         Span spanData = CurrentThreadSpanStack.peek();
         if (spanData == null) {

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/logging/EasyLogResolver.java
Patch:
@@ -1,14 +1,13 @@
 package com.a.eye.skywalking.logging;
 
-import com.a.eye.skywalking.logging.api.ILog;
 import com.a.eye.skywalking.logging.api.LogResolver;
 
 /**
  * Created by wusheng on 2016/11/26.
  */
 public class EasyLogResolver implements LogResolver {
     @Override
-    public ILog getLogger(Class<?> clazz) {
+    public com.a.eye.skywalking.logging.api.ILog getLogger(Class<?> clazz) {
         return new EasyLogger(clazz);
     }
 }

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/logging/EasyLogger.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Created by xin on 16-6-23.
  */
-public class EasyLogger implements ILog {
+public class EasyLogger implements com.a.eye.skywalking.logging.api.ILog {
 
     private Class toBeLoggerClass;
 

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/MethodInputAndOutParameterInterceptor.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.plugin.interceptor.enhance;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
-import com.a.eye.skywalking.protocol.common.CallType;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;
 import net.bytebuddy.implementation.bind.annotation.Origin;
 import net.bytebuddy.implementation.bind.annotation.RuntimeType;

File: skywalking-sniffer/skywalking-api/src/main/java/com/a/eye/skywalking/protocol/util/ContextGenerator.java
Patch:
@@ -29,7 +29,7 @@ public static Span generateSpanFromThreadLocal(Identification id) {
      */
     public static Span generateSpanFromContextData(ContextData context, Identification id) {
         Span spanData = CurrentThreadSpanStack.peek();
-        if (context != null && !StringUtil.isEmpty(context.getTraceId()) && spanData == null){
+        if (context != null && context.getTraceId() != null && spanData == null){
             spanData = new Span(context.getTraceId(), context.getParentLevel(), context.getLevelId(), Config.SkyWalking.APPLICATION_CODE, Config.SkyWalking.USER_ID);
         }else{
             spanData = getSpanFromThreadLocal();

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboBuriedPointType.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.plugin.dubbo;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
-import com.a.eye.skywalking.protocol.common.CallType;
 
 public class DubboBuriedPointType implements IBuriedPointType {
 

File: skywalking-sniffer/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/MonitorFilterInterceptor.java
Patch:
@@ -102,7 +102,7 @@ public void handleMethodException(Throwable t, EnhancedClassInstanceContext cont
 
 
     private boolean isConsumer(EnhancedClassInstanceContext context) {
-        return (boolean) context.get("isConsumer");
+        return (Boolean) context.get("isConsumer");
     }
 
     private void dealException(Throwable t, EnhancedClassInstanceContext context) {

File: skywalking-sniffer/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/WebBuriedPointType.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.plugin.httpClient.v4;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
-import com.a.eye.skywalking.protocol.common.CallType;
 
 public class WebBuriedPointType implements IBuriedPointType {
 

File: skywalking-sniffer/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/define/JDBCBuriedPointType.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.plugin.jdbc.define;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
-import com.a.eye.skywalking.protocol.common.CallType;
 
 public class JDBCBuriedPointType implements IBuriedPointType {
 

File: skywalking-sniffer/skywalking-sdk-plugin/jedis-2.x-plugin/src/main/java/com/a/eye/skywalking/plugin/jedis/v2/RedisBuriedPointType.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.plugin.jedis.v2;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
-import com.a.eye.skywalking.protocol.common.CallType;
 
 public class RedisBuriedPointType implements IBuriedPointType {
 	 private static RedisBuriedPointType redisBuriedPointType;

File: skywalking-sniffer/skywalking-sdk-plugin/motan-plugin/src/main/java/com/a/eye/skywalking/plugin/motan/MotanBuriedPointType.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.plugin.motan;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
-import com.a.eye.skywalking.protocol.common.CallType;
 
 public class MotanBuriedPointType implements IBuriedPointType {
 

File: skywalking-sniffer/skywalking-sdk-plugin/tomcat-7.x-8.x-plugin/src/main/java/com/a/eye/skywalking/plugin/tomcat78x/WebBuriedPointType.java
Patch:
@@ -1,7 +1,6 @@
 package com.a.eye.skywalking.plugin.tomcat78x;
 
 import com.a.eye.skywalking.api.IBuriedPointType;
-import com.a.eye.skywalking.protocol.common.CallType;
 
 public class WebBuriedPointType implements IBuriedPointType {
 

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/data/spandata/RequestSpanData.java
Patch:
@@ -62,7 +62,7 @@ public long getStartTime() {
     }
 
     public String getBusinessKey() {
-        return requestSpan.getBussinessKey();
+        return requestSpan.getBusinessKey();
     }
 
     public String getCallType() {

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/data/file/DataFileLoader.java
Patch:
@@ -21,7 +21,8 @@ public List<DataFile> load() {
 
         List<DataFile> allDataFile = new ArrayList<DataFile>();
         for (File fileEntry : dataFileDir.listFiles()) {
-            allDataFile.add(new DataFile(fileEntry));
+            if (fileEntry.getName().split("_").length == 8)
+                allDataFile.add(new DataFile(fileEntry));
         }
         return allDataFile;
     }

File: skywalking-network/src/main/java/com/a/eye/skywalking/network/Client.java
Patch:
@@ -17,7 +17,7 @@ public Client(String ip, int address) {
     }
 
 
-    public SpanStorageClient newSpanStorageConsumer() {
+    public SpanStorageClient newSpanStorageClient() {
         return new SpanStorageClient(spanStorageStub);
     }
 

File: skywalking-network/src/main/java/com/a/eye/skywalking/network/ServiceProvider.java
Patch:
@@ -43,6 +43,7 @@ public static TransferServiceBuilder newBuilder(int port) {
     public static class TransferServiceBuilder {
         private TransferServiceBuilder(int port) {
             serverBuilder = NettyServerBuilder.forPort(port);
+            serverBuilder.maxConcurrentCallsPerConnection(4);
         }
 
         private NettyServerBuilder serverBuilder;

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/data/SpanDataConsumer.java
Patch:
@@ -17,17 +17,18 @@ public class SpanDataConsumer implements IConsumer<SpanData> {
 
     private static ILog logger = LogManager.getLogger(SpanDataConsumer.class);
     private DataFileWriter fileWriter;
+    private IndexOperator  operator;
 
     @Override
     public void init() {
         fileWriter = new DataFileWriter();
+        operator = IndexOperatorFactory.createIndexOperator();
     }
 
     @Override
     public void consume(List<SpanData> data) {
         IndexMetaCollection collection = fileWriter.write(data);
 
-        IndexOperator operator = IndexOperatorFactory.createIndexOperator();
         operator.batchUpdate(collection);
 
         HealthCollector.getCurrentHeathReading("SpanDataConsumer")

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/data/index/IndexOperatorFactory.java
Patch:
@@ -18,7 +18,7 @@ public class IndexOperatorFactory {
     public static IndexOperator createIndexOperator() {
         try {
             return new IndexOperator(new PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(
-                    new InetSocketTransportAddress(InetAddress.getLocalHost(), NetUtils.getIndexServerPort()
+                    new InetSocketTransportAddress(InetAddress.getLoopbackAddress(), NetUtils.getIndexServerPort()
                     )));
         } catch (Exception e) {
             throw new IndexOperatorInitializeFailedException("Failed to initialize operator.", e);

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/data/SpanDataFinder.java
Patch:
@@ -14,7 +14,7 @@
 public class SpanDataFinder {
 
     public static List<SpanData> find(TraceId traceId) {
-        IndexMetaCollection indexMetaCollection = IndexOperateExecutor.execute(new FinderExecutor<IndexMetaCollection>(
+        IndexMetaCollection indexMetaCollection = IndexOperateExecutor.execute(new FinderExecutor(
                 traceId.getSegmentsList().toArray(new Long[traceId.getSegmentsCount()])));
 
         if (indexMetaCollection == null) {

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/data/index/operator/FinderExecutor.java
Patch:
@@ -15,7 +15,7 @@ public FinderExecutor(Long[] traceIdSegment) {
     }
 
     @Override
-    public com.a.eye.skywalking.storage.data.index.IndexMetaCollection execute(IndexOperator indexOperator) {
+    public IndexMetaCollection execute(IndexOperator indexOperator) {
         return indexOperator.findIndex(traceIdSegment);
     }
 }

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/listener/SearchListener.java
Patch:
@@ -24,12 +24,12 @@ public List<Span> search(String traceId) {
             SpanDataHelper helper = new SpanDataHelper(data);
             List<Span> span = helper.category().mergeData();
             HealthCollector.getCurrentHeathReading("SearchListener")
-                    .updateData(HeathReading.INFO, span.size() + "  spans was founded by trace Id [" + traceId + "].");
+                    .updateData(HeathReading.INFO, span.size() + "  spans was found by trace Id [" + traceId + "].");
             return span;
         } catch (Exception e) {
-            logger.error("Failed to search trace Id [{}]", traceId, e);
+            logger.error("Search trace Id[{}] failure.", traceId, e);
             HealthCollector.getCurrentHeathReading("SearchListener")
-                    .updateData(HeathReading.ERROR, "Failed to search trace Id" + traceId + ".");
+                    .updateData(HeathReading.ERROR, "Search trace Id[" + traceId + "] failure.");
             return new ArrayList<Span>();
         }
     }

File: skywalking-storage-center/skywalking-storage/src/main/java/com/a/eye/skywalking/storage/data/index/IndexDBConnector.java
Patch:
@@ -1,9 +1,9 @@
 package com.a.eye.skywalking.storage.data.index;
 
+import com.a.eye.skywalking.logging.api.ILog;
+import com.a.eye.skywalking.logging.api.LogManager;
 import com.a.eye.skywalking.storage.config.Config;
 import com.a.eye.skywalking.storage.data.exception.ConnectorInitializeFailedException;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 import java.sql.*;
 
@@ -16,7 +16,7 @@ public class IndexDBConnector {
 
     private static final int MAX_BATCH_SIZE = 20;
 
-    private static Logger logger = LogManager.getLogger(IndexDBConnector.class);
+    private static ILog logger = LogManager.getLogger(IndexDBConnector.class);
 
     static {
         try {

File: skywalking-logging/skywalking-logging-api/src/main/java/com/a/eye/skywalking/logging/api/ILog.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.logging.api;
 
 /**
  * Created by xin on 2016/11/10.

File: skywalking-logging/skywalking-logging-api/src/main/java/com/a/eye/skywalking/logging/api/LogManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.logging.api;
 
 /**
  * Created by xin on 2016/11/10.

File: skywalking-logging/skywalking-logging-api/src/main/java/com/a/eye/skywalking/logging/api/LogResolver.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.logging.api;
 
 /**
  * Created by xin on 2016/11/10.

File: skywalking-logging/skywalking-logging-api/src/main/java/com/a/eye/skywalking/logging/api/NoopLogger.java
Patch:
@@ -1,4 +1,4 @@
-package com.a.eye.skywalking.logging;
+package com.a.eye.skywalking.logging.api;
 
 
 /**

File: skywalking-registry/src/main/java/com/a/eye/skywalking/registry/impl/zookeeper/ZookeeperConfig.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.registry.impl.zookeeper;
 
-import com.a.eye.skywalking.logging.ILog;
-import com.a.eye.skywalking.logging.LogManager;
+import com.a.eye.skywalking.logging.api.ILog;
+import com.a.eye.skywalking.logging.api.LogManager;
 
 import java.util.Properties;
 

File: skywalking-registry/src/main/java/com/a/eye/skywalking/registry/impl/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -1,7 +1,7 @@
 package com.a.eye.skywalking.registry.impl.zookeeper;
 
-import com.a.eye.skywalking.logging.ILog;
-import com.a.eye.skywalking.logging.LogManager;
+import com.a.eye.skywalking.logging.api.ILog;
+import com.a.eye.skywalking.logging.api.LogManager;
 import com.a.eye.skywalking.registry.api.*;
 import org.apache.zookeeper.*;
 

File: samples/skywalking-example/example-dubbo/dubbo-impl/src/main/java/com/a/eye/skywalking/sample/dubbo/impl/SampleDubboInterfaceImpl.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.sample.dubbo.impl;
+package com.a.eye.skywalking.sample.dubbo.impl;
 
-import com.ai.cloud.skywalking.sample.dubbo.interfaces.SampleDubboInterface;
-import com.ai.cloud.skywalking.sample.service.inter.SampleServiceInterface;
+import com.a.eye.skywalking.sample.dubbo.interfaces.SampleDubboInterface;
+import com.a.eye.skywalking.sample.service.inter.SampleServiceInterface;
 import com.alibaba.dubbo.config.annotation.Service;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: samples/skywalking-example/example-dubbo/dubbo-impl/src/main/java/com/a/eye/skywalking/sample/mybatis/model/Sampletable1.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.sample.mybatis.model;
+package com.a.eye.skywalking.sample.mybatis.model;
 
 public class Sampletable1 {
     /**
@@ -60,4 +60,4 @@ public String getValue1() {
     public void setValue1(String value1) {
         this.value1 = value1 == null ? null : value1.trim();
     }
-}
\ No newline at end of file
+}

File: samples/skywalking-example/example-dubbo/dubbo-impl/src/main/java/com/a/eye/skywalking/sample/mybatis/model/Sampletable1Example.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.sample.mybatis.model;
+package com.a.eye.skywalking.sample.mybatis.model;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -439,4 +439,4 @@ protected Criterion(String condition, Object value, Object secondValue) {
             this(condition, value, secondValue, null);
         }
     }
-}
\ No newline at end of file
+}

File: samples/skywalking-example/example-dubbo/dubbo-impl/src/main/java/com/a/eye/skywalking/sample/mybatis/model/Sampletable2.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.sample.mybatis.model;
+package com.a.eye.skywalking.sample.mybatis.model;
 
 public class Sampletable2 {
     /**
@@ -66,4 +66,4 @@ public String getValue2() {
     public void setValue2(String value2) {
         this.value2 = value2 == null ? null : value2.trim();
     }
-}
\ No newline at end of file
+}

File: samples/skywalking-example/example-dubbo/dubbo-impl/src/main/java/com/a/eye/skywalking/sample/mybatis/model/Sampletable2Example.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.sample.mybatis.model;
+package com.a.eye.skywalking.sample.mybatis.model;
 
 
 import java.util.ArrayList;
@@ -440,4 +440,4 @@ protected Criterion(String condition, Object value, Object secondValue) {
             this(condition, value, secondValue, null);
         }
     }
-}
\ No newline at end of file
+}

File: samples/skywalking-example/example-dubbo/dubbo-impl/src/main/java/com/a/eye/skywalking/sample/service/inter/SampleServiceInterface.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.sample.service.inter;
+package com.a.eye.skywalking.sample.service.inter;
 
 public interface SampleServiceInterface {
 

File: samples/skywalking-example/example-dubbo/dubbo-impl/src/main/java/com/a/eye/skywalking/sample/util/DubboStart.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.sample.util;
+package com.a.eye.skywalking.sample.util;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: samples/skywalking-example/example-dubbo/dubbo-impl/src/test/java/com/a/eye/skywalking/sample/dubbo/impl/SampleDubboInterfaceImplTest.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.sample.dubbo.impl;
+package com.a.eye.skywalking.sample.dubbo.impl;
 
-import com.ai.cloud.skywalking.sample.dubbo.interfaces.SampleDubboInterface;
+import com.a.eye.skywalking.sample.dubbo.interfaces.SampleDubboInterface;
 import org.junit.Test;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 

File: samples/skywalking-example/example-dubbo/dubbo-interfaces/src/main/java/com/a/eye/skywalking/sample/dubbo/interfaces/SampleDubboInterface.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.sample.dubbo.interfaces;
+package com.a.eye.skywalking.sample.dubbo.interfaces;
 
 public interface SampleDubboInterface {
     String callMethodByDubbox(String param1);

File: samples/skywalking-example/example-dubbox-rest/src/main/java/com/a/eye/skywalking/sample/dubboxrest/DubboxRestConsumer.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.sample.dubboxrest;
+package com.a.eye.skywalking.sample.dubboxrest;
 
-import com.ai.cloud.skywalking.sample.dubboxrest.interfaces.IDubboxRestInterA;
-import com.ai.cloud.skywalking.sample.dubboxrest.interfaces.param.DubboxRestInterAParameter;
+import com.a.eye.skywalking.sample.dubboxrest.interfaces.IDubboxRestInterA;
+import com.a.eye.skywalking.sample.dubboxrest.interfaces.param.DubboxRestInterAParameter;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 

File: samples/skywalking-example/example-dubbox-rest/src/main/java/com/a/eye/skywalking/sample/dubboxrest/DubboxRestStart.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.sample.dubboxrest;
+package com.a.eye.skywalking.sample.dubboxrest;
 
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 

File: samples/skywalking-example/example-dubbox-rest/src/main/java/com/a/eye/skywalking/sample/dubboxrest/impl/DubboxRestInterAImpl.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.sample.dubboxrest.impl;
+package com.a.eye.skywalking.sample.dubboxrest.impl;
 
-import com.ai.cloud.skywalking.sample.dubboxrest.interfaces.IDubboxRestInterA;
-import com.ai.cloud.skywalking.sample.dubboxrest.interfaces.param.DubboxRestInterAParameter;
+import com.a.eye.skywalking.sample.dubboxrest.interfaces.IDubboxRestInterA;
+import com.a.eye.skywalking.sample.dubboxrest.interfaces.param.DubboxRestInterAParameter;
 import com.alibaba.dubbo.config.annotation.Service;
 import org.springframework.beans.factory.annotation.Autowired;
 

File: samples/skywalking-example/example-dubbox-rest/src/main/java/com/a/eye/skywalking/sample/dubboxrest/interfaces/IDubboxRestInterA.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.sample.dubboxrest.interfaces;
+package com.a.eye.skywalking.sample.dubboxrest.interfaces;
 
 
-import com.ai.cloud.skywalking.sample.dubboxrest.interfaces.param.DubboxRestInterAParameter;
+import com.a.eye.skywalking.sample.dubboxrest.interfaces.param.DubboxRestInterAParameter;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.POST;

File: samples/skywalking-example/example-dubbox-rest/src/main/java/com/a/eye/skywalking/sample/dubboxrest/interfaces/param/DubboxRestInterAParameter.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.sample.dubboxrest.interfaces.param;
+package com.a.eye.skywalking.sample.dubboxrest.interfaces.param;
 
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;
 

File: samples/skywalking-example/example-web/src/main/java/com/a/eye/skywalking/sample/web/controller/SampleWebController.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.sample.web.controller;
+package com.a.eye.skywalking.sample.web.controller;
 
-import com.ai.cloud.skywalking.sample.dubbo.interfaces.SampleDubboInterface;
+import com.a.eye.skywalking.sample.dubbo.interfaces.SampleDubboInterface;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.springframework.beans.factory.annotation.Autowired;

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/conf/Config.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.conf;
+package com.a.eye.skywalking.alarm.conf;
 
 public class Config {
 
@@ -94,4 +94,4 @@ public static class MailSenderInfo {
     public static class TemplateInfo {
         public static String CONFIG_ID = "1001";
     }    
-}
\ No newline at end of file
+}

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/conf/ConfigInitializer.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.conf;
+package com.a.eye.skywalking.alarm.conf;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/dao/SystemConfigDao.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.alarm.dao;
+package com.a.eye.skywalking.alarm.dao;
 
-import com.ai.cloud.skywalking.alarm.util.DBConnectUtil;
+import com.a.eye.skywalking.alarm.util.DBConnectUtil;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/model/AlarmMessage.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.model;
+package com.a.eye.skywalking.alarm.model;
 
 import java.util.Date;
 

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/model/AlarmType.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.model;
+package com.a.eye.skywalking.alarm.model;
 
 
 public class AlarmType {

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/model/ApplicationInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.model;
+package com.a.eye.skywalking.alarm.model;
 
 public class ApplicationInfo {
     private String appId;

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/model/ConfigArgsDescriber.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.model;
+package com.a.eye.skywalking.alarm.model;
 
 public class ConfigArgsDescriber {
     private int period;

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/model/MailInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.model;
+package com.a.eye.skywalking.alarm.model;
 
 public class MailInfo {
     private String[] mailTo;

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/model/ProcessThreadStatus.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.model;
+package com.a.eye.skywalking.alarm.model;
 
 public enum ProcessThreadStatus {
     REDISTRIBUTING(1), REDISTRIBUTE_SUCCESS(2), FREE(0), BUSY(3);

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/model/ProcessThreadValue.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.model;
+package com.a.eye.skywalking.alarm.model;
 
 import java.util.List;
 

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/model/UrlInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.model;
+package com.a.eye.skywalking.alarm.model;
 
 public class UrlInfo {
 

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/model/UserInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.model;
+package com.a.eye.skywalking.alarm.model;
 
 public class UserInfo {
 

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/util/DBConnectUtil.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.alarm.util;
+package com.a.eye.skywalking.alarm.util;
 
-import com.ai.cloud.skywalking.alarm.conf.Config;
+import com.a.eye.skywalking.alarm.conf.Config;
 import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
 import org.apache.logging.log4j.LogManager;

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/util/MD5Encryption.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.util;
+package com.a.eye.skywalking.alarm.util;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -32,4 +32,4 @@ public static String getEncryption(String originString) {
         }
         return result.toUpperCase();
     }
-}
\ No newline at end of file
+}

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/util/MailUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.util;
+package com.a.eye.skywalking.alarm.util;
 
 import java.util.Properties;
 
@@ -11,11 +11,11 @@
 import javax.mail.internet.InternetAddress;
 import javax.mail.internet.MimeMessage;
 
+import com.a.eye.skywalking.alarm.conf.Config;
+import com.a.eye.skywalking.alarm.dao.SystemConfigDao;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import com.ai.cloud.skywalking.alarm.conf.Config;
-import com.ai.cloud.skywalking.alarm.dao.SystemConfigDao;
 import com.google.gson.Gson;
 
 public class MailUtil {

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/util/RedisUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.alarm.util;
+package com.a.eye.skywalking.alarm.util;
 
 import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
 import org.apache.logging.log4j.LogManager;
@@ -7,7 +7,7 @@
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.JedisPool;
 
-import com.ai.cloud.skywalking.alarm.conf.Config;
+import com.a.eye.skywalking.alarm.conf.Config;
 
 public class RedisUtil {
 

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/util/TemplateConfigurationUtil.java
Patch:
@@ -1,11 +1,11 @@
-package com.ai.cloud.skywalking.alarm.util;
+package com.a.eye.skywalking.alarm.util;
 
 import java.io.File;
 import java.io.IOException;
 import java.sql.SQLException;
 
-import com.ai.cloud.skywalking.alarm.conf.Config;
-import com.ai.cloud.skywalking.alarm.dao.SystemConfigDao;
+import com.a.eye.skywalking.alarm.conf.Config;
+import com.a.eye.skywalking.alarm.dao.SystemConfigDao;
 
 import freemarker.template.Configuration;
 import freemarker.template.TemplateModelException;

File: skywalking-alarm/src/main/java/com/a/eye/skywalking/alarm/util/ZKUtil.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.alarm.util;
+package com.a.eye.skywalking.alarm.util;
 
-import com.ai.cloud.skywalking.alarm.conf.Config;
+import com.a.eye.skywalking.alarm.conf.Config;
 import org.apache.curator.RetryPolicy;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/action/IStatisticsAction.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.action;
+package com.a.eye.skywalking.analysis.chainbuild.action;
 
 
 import java.io.IOException;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/entity/ChainNodeSpecificDaySummary.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.entity;
+package com.a.eye.skywalking.analysis.chainbuild.entity;
 
-import com.ai.cloud.skywalking.analysis.chainbuild.po.ChainNode;
+import com.a.eye.skywalking.analysis.chainbuild.po.ChainNode;
 import com.google.gson.Gson;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/entity/ChainNodeSpecificHourSummary.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.entity;
+package com.a.eye.skywalking.analysis.chainbuild.entity;
 
-import com.ai.cloud.skywalking.analysis.chainbuild.po.ChainNode;
+import com.a.eye.skywalking.analysis.chainbuild.po.ChainNode;
 import com.google.gson.Gson;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/entity/ChainNodeSpecificMinSummary.java
Patch:
@@ -1,9 +1,9 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.entity;
+package com.a.eye.skywalking.analysis.chainbuild.entity;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import com.ai.cloud.skywalking.analysis.chainbuild.po.ChainNode;
+import com.a.eye.skywalking.analysis.chainbuild.po.ChainNode;
 import com.google.gson.Gson;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/entity/ChainNodeSpecificMonthSummary.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.entity;
+package com.a.eye.skywalking.analysis.chainbuild.entity;
 
-import com.ai.cloud.skywalking.analysis.chainbuild.po.ChainNode;
+import com.a.eye.skywalking.analysis.chainbuild.po.ChainNode;
 import com.google.gson.Gson;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/entity/ChainNodeSpecificTimeWindowSummaryValue.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.entity;
+package com.a.eye.skywalking.analysis.chainbuild.entity;
 
-import com.ai.cloud.skywalking.analysis.chainbuild.po.ChainNode;
+import com.a.eye.skywalking.analysis.chainbuild.po.ChainNode;
 
 public class ChainNodeSpecificTimeWindowSummaryValue {
     private long totalCall;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/exception/Tid2CidECovertException.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.exception;
+package com.a.eye.skywalking.analysis.chainbuild.exception;
 
 public class Tid2CidECovertException extends Exception{
 	private static final long serialVersionUID = -4679233837335940374L;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/filter/SpanNodeProcessChain.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.filter;
+package com.a.eye.skywalking.analysis.chainbuild.filter;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -8,7 +8,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.ai.cloud.skywalking.analysis.config.Config;
+import com.a.eye.skywalking.analysis.config.Config;
 
 public class SpanNodeProcessChain {
     private static Logger logger = LoggerFactory.getLogger(SpanNodeProcessChain.class.getName());
@@ -51,7 +51,7 @@ private static void initFilterMap(Map<String, SpanNodeProcessFilter> filterMap)
                     System.exit(-1);
                 } catch (ClassCastException e) {
                     logger.error("Class [" + Config.Filter.FILTER_PACKAGE_NAME + "." + filters[i] + "] is not subclass of " +
-                            "com.ai.cloud.skywalking.analysis.filter.SpanNodeProcessFilter", e);
+                            "com.a.eye.skywalking.analysis.filter.SpanNodeProcessFilter", e);
                     System.exit(-1);
                 }
             }

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/po/ChainNode.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.po;
+package com.a.eye.skywalking.analysis.chainbuild.po;
 
 import com.google.gson.GsonBuilder;
 import com.google.gson.annotations.Expose;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/util/SubLevelSpanCostCounter.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.util;
+package com.a.eye.skywalking.analysis.chainbuild.util;
 
 import java.util.HashMap;
 import java.util.Map;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/util/TokenGenerator.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.util;
+package com.a.eye.skywalking.analysis.chainbuild.util;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -45,4 +45,4 @@ private static String generate(String originData) {
         }
         return result.toString().toUpperCase();
     }
-}
\ No newline at end of file
+}

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/chainbuild/util/VersionIdentifier.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.chainbuild.util;
+package com.a.eye.skywalking.analysis.chainbuild.util;
 
 public class VersionIdentifier {
     /**
@@ -22,4 +22,4 @@ public static boolean enableAnaylsis(String tid) {
         }
         return false;
     }
-}
\ No newline at end of file
+}

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/config/Config.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.config;
+package com.a.eye.skywalking.analysis.config;
 
 public class Config {
     public static class Reducer {

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/config/ConfigInitializer.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.config;
+package com.a.eye.skywalking.analysis.config;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: skywalking-analysis/src/main/java/com/a/eye/skywalking/analysis/config/HBaseTableMetaData.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.analysis.config;
+package com.a.eye.skywalking.analysis.config;
 
 public class HBaseTableMetaData {
     /**

File: skywalking-analysis/src/test/java/com/a/eye/skywalking/analysis/mapper/MappingTableCounter.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.analysis.mapper;
+package com.a.eye.skywalking.analysis.mapper;
 
-import com.ai.cloud.skywalking.analysis.config.HBaseTableMetaData;
-import com.ai.cloud.skywalking.analysis.mapper.util.HBaseUtils;
+import com.a.eye.skywalking.analysis.config.HBaseTableMetaData;
+import com.a.eye.skywalking.analysis.mapper.util.HBaseUtils;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.*;
 import org.apache.hadoop.hbase.util.Bytes;

File: skywalking-collector/skywalking-agent/src/main/java/com/a/eye/skywalking/agent/junction/AbstractJunction.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.agent.junction;
+package com.a.eye.skywalking.agent.junction;
 
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-collector/skywalking-agent/src/main/java/com/a/eye/skywalking/agent/junction/SkyWalkingEnhanceMatcher.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.agent.junction;
+package com.a.eye.skywalking.agent.junction;
 
-import com.ai.cloud.skywalking.plugin.PluginDefineCategory;
+import com.a.eye.skywalking.plugin.PluginDefineCategory;
 import net.bytebuddy.description.NamedElement;
 
 /**

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/api/IBuriedPointType.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.api;
+package com.a.eye.skywalking.api;
 
-import com.ai.cloud.skywalking.protocol.common.CallType;
+import com.a.eye.skywalking.protocol.common.CallType;
 
 public interface IBuriedPointType {
 

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/conf/Config.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.conf;
+package com.a.eye.skywalking.conf;
 
 public class Config {
 

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/conf/ConfigValidator.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.conf;
+package com.a.eye.skywalking.conf;
 
 public class ConfigValidator {
     private ConfigValidator() {

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/conf/Constants.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.conf;
+package com.a.eye.skywalking.conf;
 
 public class Constants {
 	/**

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/context/CurrentThreadSpanStack.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.context;
+package com.a.eye.skywalking.context;
 
-import com.ai.cloud.skywalking.protocol.Span;
+import com.a.eye.skywalking.protocol.Span;
 
 import java.util.ArrayList;
 import java.util.List;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/logging/IWriter.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.logging;
+package com.a.eye.skywalking.logging;
 
 public interface IWriter {
     void write(String message);

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/logging/LogManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.logging;
+package com.a.eye.skywalking.logging;
 
 /**
  * Created by xin on 16-6-23.

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/logging/Logger.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.logging;
+package com.a.eye.skywalking.logging;
 
 
-import com.ai.cloud.skywalking.protocol.util.LoggingUtil;
+import com.a.eye.skywalking.protocol.util.LoggingUtil;
 
 import java.net.URLEncoder;
 import java.text.SimpleDateFormat;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/logging/LoggerManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.logging;
+package com.a.eye.skywalking.logging;
 
 /**
  * Created by xin on 16-6-23.

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/logging/STDOutWriter.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.logging;
+package com.a.eye.skywalking.logging;
 
 public class STDOutWriter implements IWriter {
 

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/logging/WriterFactory.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.logging;
+package com.a.eye.skywalking.logging;
 
-import com.ai.cloud.skywalking.conf.Config;
+import com.a.eye.skywalking.conf.Config;
 
 public class WriterFactory {
     private WriterFactory(){

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/model/ContextData.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.model;
+package com.a.eye.skywalking.model;
 
 
-import com.ai.cloud.skywalking.protocol.Span;
+import com.a.eye.skywalking.protocol.Span;
 
 public class ContextData {
     private String traceId;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/model/EmptyContextData.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.model;
+package com.a.eye.skywalking.model;
 
 public class EmptyContextData extends ContextData {
     public EmptyContextData() {

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/model/Identification.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.model;
+package com.a.eye.skywalking.model;
 
-import com.ai.cloud.skywalking.api.IBuriedPointType;
-import com.ai.cloud.skywalking.protocol.util.StringUtil;
+import com.a.eye.skywalking.api.IBuriedPointType;
+import com.a.eye.skywalking.protocol.util.StringUtil;
 
 import java.util.HashMap;
 import java.util.Map;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/PluginCfg.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin;
+package com.a.eye.skywalking.plugin;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -7,7 +7,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.ai.cloud.skywalking.protocol.util.StringUtil;
+import com.a.eye.skywalking.protocol.util.StringUtil;
 
 public class PluginCfg {
 	public final static PluginCfg CFG = new PluginCfg();

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/PluginDefineCategory.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin;
+package com.a.eye.skywalking.plugin;
 
 import java.util.HashMap;
 import java.util.List;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/PluginException.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin;
+package com.a.eye.skywalking.plugin;
 
 public class PluginException extends RuntimeException {
 	private static final long serialVersionUID = -6020188711867490724L;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/PluginResourcesResolver.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.plugin;
+package com.a.eye.skywalking.plugin;
 
-import com.ai.cloud.skywalking.logging.LogManager;
-import com.ai.cloud.skywalking.logging.Logger;
+import com.a.eye.skywalking.logging.LogManager;
+import com.a.eye.skywalking.logging.Logger;
 
 import java.io.IOException;
 import java.net.URL;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/EnhanceException.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.interceptor;
+package com.a.eye.skywalking.plugin.interceptor;
 
-import com.ai.cloud.skywalking.plugin.PluginException;
+import com.a.eye.skywalking.plugin.PluginException;
 
 public class EnhanceException extends PluginException {
 	private static final long serialVersionUID = -2234782755784217255L;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/EnhancedClassInstanceContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor;
+package com.a.eye.skywalking.plugin.interceptor;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/InterceptorException.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor;
+package com.a.eye.skywalking.plugin.interceptor;
 
 public class InterceptorException extends RuntimeException {
 	private static final long serialVersionUID = 7846035239994885019L;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/MethodMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor;
+package com.a.eye.skywalking.plugin.interceptor;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/ClassInstanceMethodsEnhancePluginDefine.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
 
 /**
  * 仅增强拦截实例方法

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/ClassStaticMethodsEnhancePluginDefine.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
 
 /**
  * 仅增强拦截类级别静态方法

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/ConstructorInvokeContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
 public class ConstructorInvokeContext {
 	/**

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/FieldSetter.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
 public interface FieldSetter {
 	void setValue(Object value);

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/InstanceMethodInvokeContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
 public class InstanceMethodInvokeContext extends MethodInvokeContext {
     /**

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/InstanceMethodsAroundInterceptor.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
-import com.ai.cloud.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
+import com.a.eye.skywalking.plugin.interceptor.EnhancedClassInstanceContext;
 
 public interface InstanceMethodsAroundInterceptor {
 	public void onConstruct(EnhancedClassInstanceContext context, ConstructorInvokeContext interceptorContext);

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/MethodInputAndOutParameterInterceptor.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
-import com.ai.cloud.skywalking.api.IBuriedPointType;
-import com.ai.cloud.skywalking.protocol.common.CallType;
+import com.a.eye.skywalking.api.IBuriedPointType;
+import com.a.eye.skywalking.protocol.common.CallType;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;
 import net.bytebuddy.implementation.bind.annotation.Origin;
 import net.bytebuddy.implementation.bind.annotation.RuntimeType;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/MethodInterceptResult.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
 /**
  * 通过拦截器的before方法,指定被拦截方法的返回值,不再调用原始方法取得返回值

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/MethodInvokeContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
 /**
  * 方法执行拦截上下文

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/StaticMethodInvokeContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
 public class StaticMethodInvokeContext extends MethodInvokeContext {
     /**

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/enhance/StaticMethodsAroundInterceptor.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor.enhance;
+package com.a.eye.skywalking.plugin.interceptor.enhance;
 
 
 public interface StaticMethodsAroundInterceptor {

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/matcher/AnyMethodsMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.interceptor.matcher;
+package com.a.eye.skywalking.plugin.interceptor.matcher;
 
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/matcher/ExclusiveObjectDefaultMethodsMatcher.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.interceptor.matcher;
+package com.a.eye.skywalking.plugin.interceptor.matcher;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/matcher/MethodRegexMatcher.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.interceptor.matcher;
+package com.a.eye.skywalking.plugin.interceptor.matcher;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/matcher/MethodsExclusiveMatcher.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.interceptor.matcher;
+package com.a.eye.skywalking.plugin.interceptor.matcher;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/matcher/PrivateMethodMatcher.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.interceptor.matcher;
+package com.a.eye.skywalking.plugin.interceptor.matcher;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 import net.bytebuddy.matcher.ElementMatchers;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/plugin/interceptor/matcher/SimpleMethodMatcher.java
Patch:
@@ -1,10 +1,10 @@
-package com.ai.cloud.skywalking.plugin.interceptor.matcher;
+package com.a.eye.skywalking.plugin.interceptor.matcher;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.matcher.ElementMatcher;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
 
 public class SimpleMethodMatcher extends MethodMatcher {
 

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/protocol/util/BuriedPointMachineUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.protocol.util;
+package com.a.eye.skywalking.protocol.util;
 
 import java.lang.management.ManagementFactory;
 import java.net.InetAddress;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/protocol/util/LoggingUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.protocol.util;
+package com.a.eye.skywalking.protocol.util;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/protocol/util/StringUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.reciever.util;
+package com.a.eye.skywalking.protocol.util;
 
 public final class StringUtil {
     public static boolean isEmpty(String str) {

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/protocol/util/TraceIdGenerator.java
Patch:
@@ -1,8 +1,8 @@
-package com.ai.cloud.skywalking.protocol.util;
+package com.a.eye.skywalking.protocol.util;
 
 import java.util.UUID;
 
-import com.ai.cloud.skywalking.conf.Constants;
+import com.a.eye.skywalking.conf.Constants;
 
 public final class TraceIdGenerator {
 	private static final ThreadLocal<Integer> ThreadTraceIdSequence = new ThreadLocal<Integer>();

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/selfexamination/HeathReading.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.selfexamination;
+package com.a.eye.skywalking.selfexamination;
 
 import java.util.HashMap;
 import java.util.Map;

File: skywalking-collector/skywalking-api/src/main/java/com/a/eye/skywalking/sender/IDataSender.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.sender;
+package com.a.eye.skywalking.sender;
 
-import com.ai.cloud.skywalking.protocol.common.ISerializable;
+import com.a.eye.skywalking.protocol.common.ISerializable;
 
 import java.util.List;
 

File: skywalking-collector/skywalking-api/src/test/java/com/a/eye/skywalking/context/CurrentThreadSpanStackTest.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.context;
+package com.a.eye.skywalking.context;
 
-import com.ai.cloud.skywalking.protocol.Span;
+import com.a.eye.skywalking.protocol.Span;
 import org.junit.Test;
 import org.mockito.Mockito;
 

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/bytebuddy/ConstructorInterceptor.java
Patch:
@@ -1,4 +1,4 @@
-package test.ai.cloud.bytebuddy;
+package test.a.eye.cloud.bytebuddy;
 
 import net.bytebuddy.implementation.bind.annotation.AllArguments;
 import net.bytebuddy.implementation.bind.annotation.RuntimeType;

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/bytebuddy/MethodInterceptor.java
Patch:
@@ -1,4 +1,4 @@
-package test.ai.cloud.bytebuddy;
+package test.a.eye.cloud.bytebuddy;
 
 import java.lang.reflect.Method;
 import java.util.concurrent.Callable;

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/bytebuddy/SimulateMain2.java
Patch:
@@ -1,4 +1,4 @@
-package test.ai.cloud.bytebuddy;
+package test.a.eye.cloud.bytebuddy;
 
 import static net.bytebuddy.matcher.ElementMatchers.isConstructor;
 import static net.bytebuddy.matcher.ElementMatchers.named;
@@ -15,7 +15,7 @@ public static void main(String[] args) throws InstantiationException,
 		TypePool typePool = TypePool.Default.ofClassPath();
 
 		new ByteBuddy()
-				.rebase(typePool.describe("test.ai.cloud.bytebuddy.TestClass")
+				.rebase(typePool.describe("TestClass")
 						.resolve(),
 						ClassFileLocator.ForClassLoader.ofClassPath())
 				.method(named("testA"))

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/bytebuddy/TestClass.java
Patch:
@@ -1,4 +1,4 @@
-package test.ai.cloud.bytebuddy;
+package test.a.eye.cloud.bytebuddy;
 
 public class TestClass {
 	public TestClass(){

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/checksum/CheckSumTest.java
Patch:
@@ -1,4 +1,4 @@
-package test.ai.cloud.checksum;
+package test.a.eye.cloud.checksum;
 
 import org.junit.Test;
 
@@ -92,7 +92,7 @@ public byte[] intToBytes2(int value) {
                     "28417.invoke(<generated>)#~     at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:2" +
                     "04)#~   at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAo" +
                     "pProxy.java:720)#~      at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)#~  at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.p" +
-                    "roceed(MethodInvocationProceedingJoinPoint.java:85)#~   at com.ai.cloud.skywalking.plugin.spring.Tracing" +
+                    "roceed(MethodInvocationProceedingJoinPoint.java:85)#~   at com.a.eye.skywalking.plugin.spring.Tracing" +
                     "Aspect.doTracing(TracingAspect.java:13)#~       at sun.reflect.GeneratedMethodAccessor79.invoke(Unknown " +
                     "Source)#~       at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)" +
                     "#~      at java.lang.reflect.Method.invoke(Method.java:606)#~   at org.springframework.aop.aspectj.Abstr" +

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/consumerworker/ConsumerWorkerTest.java
Patch:
@@ -1,7 +1,7 @@
-package test.ai.cloud.consumerworker;
+package test.a.eye.cloud.consumerworker;
 
-import com.ai.cloud.skywalking.buffer.BufferGroup;
-import com.ai.cloud.skywalking.conf.Config;
+import com.a.eye.skywalking.buffer.BufferGroup;
+import com.a.eye.skywalking.conf.Config;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/list/ArrayListTest.java
Patch:
@@ -1,4 +1,4 @@
-package test.ai.cloud.list;
+package test.a.eye.cloud.list;
 
 import org.junit.Before;
 import org.junit.Test;

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/matcher/TestMatcherClass.java
Patch:
@@ -1,4 +1,4 @@
-package test.ai.cloud.matcher;
+package test.a.eye.cloud.matcher;
 
 /**
  * Created by xin on 16-6-8.

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/plugin/BeInterceptedClass.java
Patch:
@@ -1,4 +1,4 @@
-package test.ai.cloud.plugin;
+package test.a.eye.cloud.plugin;
 
 public class BeInterceptedClass {
 	public BeInterceptedClass(){

File: skywalking-collector/skywalking-api/src/test/java/test/a/eye/cloud/plugin/PluginResourceResoverTest.java
Patch:
@@ -1,8 +1,8 @@
-package test.ai.cloud.plugin;
+package test.a.eye.cloud.plugin;
 
 import java.io.IOException;
 
-import com.ai.cloud.skywalking.plugin.PluginResourcesResolver;
+import com.a.eye.skywalking.plugin.PluginResourcesResolver;
 
 public class PluginResourceResoverTest {
 

File: skywalking-collector/skywalking-sdk-plugin/custom-local-method-interceptor-plugin/src/main/java/com/a/eye/skywalking/plugin/custom/localmethod/CustomLocalSpanType.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.plugin.custom.localmethod;
+package com.a.eye.skywalking.plugin.custom.localmethod;
 
-import com.ai.cloud.skywalking.api.IBuriedPointType;
-import com.ai.cloud.skywalking.protocol.common.CallType;
+import com.a.eye.skywalking.api.IBuriedPointType;
+import com.a.eye.skywalking.protocol.common.CallType;
 
 public class CustomLocalSpanType implements IBuriedPointType {
     @Override

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbo/DubboBuriedPointType.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.plugin.dubbo;
+package com.a.eye.skywalking.plugin.dubbo;
 
-import com.ai.cloud.skywalking.api.IBuriedPointType;
-import com.ai.cloud.skywalking.protocol.common.CallType;
+import com.a.eye.skywalking.api.IBuriedPointType;
+import com.a.eye.skywalking.protocol.common.CallType;
 
 public class DubboBuriedPointType implements IBuriedPointType {
 

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbox/bugfix/below283/BugFixAcitve.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.dubbox.bugfix.below283;
+package com.a.eye.skywalking.plugin.dubbox.bugfix.below283;
 
 public final class BugFixAcitve {
     public static boolean isActive = false;

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/a/eye/skywalking/plugin/dubbox/bugfix/below283/SWBaseBean.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.dubbox.bugfix.below283;
+package com.a.eye.skywalking.plugin.dubbox.bugfix.below283;
 
 import java.io.Serializable;
 

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/test/dubbo/impl/DubboInterAImpl.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.test.dubbo.impl;
+package com.a.eye.skywalking.plugin.test.dubbo.impl;
 
-import com.ai.cloud.skywalking.plugin.test.dubbo.interfaces.IDubboInterA;
+import com.a.eye.skywalking.plugin.test.dubbo.interfaces.IDubboInterA;
 import com.alibaba.dubbo.config.annotation.Service;
 
 @Service

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/test/dubbo/interfaces/IDubboInterA.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.test.dubbo.interfaces;
+package com.a.eye.skywalking.plugin.test.dubbo.interfaces;
 
 
 public interface IDubboInterA {

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/test/dubbox283/impl/DubboxRestInterAImpl.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.plugin.test.dubbox283.impl;
+package com.a.eye.skywalking.plugin.test.dubbox283.impl;
 
-import com.ai.cloud.skywalking.plugin.test.dubbox283.interfaces.IDubboxRestInterA;
-import com.ai.cloud.skywalking.plugin.test.dubbox283.interfaces.param.DubboxRestInterAParameter;
+import com.a.eye.skywalking.plugin.test.dubbox283.interfaces.IDubboxRestInterA;
+import com.a.eye.skywalking.plugin.test.dubbox283.interfaces.param.DubboxRestInterAParameter;
 import com.alibaba.dubbo.config.annotation.Service;
 
 @Service

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/test/dubbox283/interfaces/IDubboxRestInterA.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.test.dubbox284.interfaces;
+package com.a.eye.skywalking.plugin.test.dubbox283.interfaces;
 
-import com.ai.cloud.skywalking.plugin.test.dubbox283.interfaces.param.DubboxRestInterAParameter;
+import com.a.eye.skywalking.plugin.test.dubbox283.interfaces.param.DubboxRestInterAParameter;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.POST;

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/test/dubbox283/interfaces/param/DubboxRestInterAParameter.java
Patch:
@@ -1,6 +1,6 @@
-package com.ai.cloud.skywalking.plugin.test.dubbox283.interfaces.param;
+package com.a.eye.skywalking.plugin.test.dubbox283.interfaces.param;
 
-import com.ai.cloud.skywalking.plugin.dubbox.bugfix.below283.SWBaseBean;
+import com.a.eye.skywalking.plugin.dubbox.bugfix.below283.SWBaseBean;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;
 
 import javax.xml.bind.annotation.XmlAccessType;

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/test/dubbox284/impl/DubboxRestInterAImpl.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.plugin.test.dubbox284.impl;
+package com.a.eye.skywalking.plugin.test.dubbox284.impl;
 
-import com.ai.cloud.skywalking.plugin.test.dubbox283.interfaces.param.DubboxRestInterAParameter;
-import com.ai.cloud.skywalking.plugin.test.dubbox284.interfaces.IDubboxRestInterA;
+import com.a.eye.skywalking.plugin.test.dubbox283.interfaces.param.DubboxRestInterAParameter;
+import com.a.eye.skywalking.plugin.test.dubbox284.interfaces.IDubboxRestInterA;
 import com.alibaba.dubbo.config.annotation.Service;
 
 @Service

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/test/dubbox284/interfaces/IDubboxRestInterA.java
Patch:
@@ -1,7 +1,6 @@
-package com.ai.cloud.skywalking.plugin.test.dubbox283.interfaces;
+package com.a.eye.skywalking.plugin.test.dubbox284.interfaces;
 
-import com.ai.cloud.skywalking.plugin.test.dubbox283.impl.DubboxRestInterAImpl;
-import com.ai.cloud.skywalking.plugin.test.dubbox283.interfaces.param.DubboxRestInterAParameter;
+import com.a.eye.skywalking.plugin.test.dubbox283.interfaces.param.DubboxRestInterAParameter;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.POST;

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/test/java/com/a/eye/skywalking/plugin/test/dubbox284/interfaces/param/DubboxRestInterAParameter.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.test.dubbox284.interfaces.param;
+package com.a.eye.skywalking.plugin.test.dubbox284.interfaces.param;
 
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;
 

File: skywalking-collector/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/WebBuriedPointType.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.plugin.tomcat78x;
+package com.a.eye.skywalking.plugin.httpClient.v4;
 
-import com.ai.cloud.skywalking.api.IBuriedPointType;
-import com.ai.cloud.skywalking.protocol.common.CallType;
+import com.a.eye.skywalking.api.IBuriedPointType;
+import com.a.eye.skywalking.protocol.common.CallType;
 
 public class WebBuriedPointType implements IBuriedPointType {
 

File: skywalking-collector/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/define/AbstractHttpClientPluginDefine.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.httpClient.v4.plugin.define;
+package com.a.eye.skywalking.plugin.httpClient.v4.define;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
-import com.ai.cloud.skywalking.plugin.interceptor.matcher.SimpleMethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.matcher.SimpleMethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
 
 public class AbstractHttpClientPluginDefine extends HttpClientPluginDefine {
 

File: skywalking-collector/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/define/DefaultRequestDirectorPluginDefine.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.httpClient.v4.plugin.define;
+package com.a.eye.skywalking.plugin.httpClient.v4.define;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
-import com.ai.cloud.skywalking.plugin.interceptor.matcher.SimpleMethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.matcher.SimpleMethodMatcher;
 
 public class DefaultRequestDirectorPluginDefine extends HttpClientPluginDefine {
 	/**

File: skywalking-collector/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/define/InternalHttpClientPluginDefine.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.httpClient.v4.plugin.define;
+package com.a.eye.skywalking.plugin.httpClient.v4.define;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
-import com.ai.cloud.skywalking.plugin.interceptor.matcher.SimpleMethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.matcher.SimpleMethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
 
 public class InternalHttpClientPluginDefine extends HttpClientPluginDefine {
     @Override

File: skywalking-collector/skywalking-sdk-plugin/httpClient-4.x-plugin/src/main/java/com/a/eye/skywalking/plugin/httpClient/v4/define/MinimalHttpClientPluginDefine.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.httpClient.v4.plugin.define;
+package com.a.eye.skywalking.plugin.httpClient.v4.define;
 
-import com.ai.cloud.skywalking.plugin.interceptor.MethodMatcher;
-import com.ai.cloud.skywalking.plugin.interceptor.matcher.SimpleMethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.MethodMatcher;
+import com.a.eye.skywalking.plugin.interceptor.matcher.SimpleMethodMatcher;
 
 public class MinimalHttpClientPluginDefine extends HttpClientPluginDefine {
     @Override

File: skywalking-collector/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWCallableStatement.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.plugin.jdbc;
 
 import java.io.InputStream;
 import java.io.Reader;

File: skywalking-collector/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWConnection.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.plugin.jdbc;
 
 import java.sql.*;
 import java.util.Map;

File: skywalking-collector/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWPreparedStatement.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.plugin.jdbc;
 
 import java.io.InputStream;
 import java.io.Reader;

File: skywalking-collector/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/SWStatement.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.jdbc;
+package com.a.eye.skywalking.plugin.jdbc;
 
 import java.sql.Connection;
 import java.sql.ResultSet;

File: skywalking-collector/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/define/H2PluginDefine.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.jdbc.define;
+package com.a.eye.skywalking.plugin.jdbc.define;
 
 public class H2PluginDefine extends AbstractDatabasePluginDefine {
     @Override

File: skywalking-collector/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/define/JDBCBuriedPointType.java
Patch:
@@ -1,7 +1,7 @@
-package com.ai.cloud.skywalking.plugin.jdbc.define;
+package com.a.eye.skywalking.plugin.jdbc.define;
 
-import com.ai.cloud.skywalking.api.IBuriedPointType;
-import com.ai.cloud.skywalking.protocol.common.CallType;
+import com.a.eye.skywalking.api.IBuriedPointType;
+import com.a.eye.skywalking.protocol.common.CallType;
 
 public class JDBCBuriedPointType implements IBuriedPointType {
 

File: skywalking-collector/skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/a/eye/skywalking/plugin/jdbc/define/MysqlPluginDefine.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.plugin.jdbc.define;
+package com.a.eye.skywalking.plugin.jdbc.define;
 
 /**
  * Created by xin on 16/8/4.

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/invoke/monitor/BaseInvokeMonitor.java
Patch:
@@ -28,8 +28,8 @@ public abstract class BaseInvokeMonitor {
 
     protected ContextData beforeInvoke(Span spanData, Identification id) {
         if (Config.BuriedPoint.PRINTF) {
-            logger.debug("TraceId:" + spanData.getTraceId() + "\tviewpointId:" + id.getViewPoint() + "\tParentLevelId:"
-                    + spanData.getParentLevel() + "\tLevelId:" + spanData.getLevelId());
+            logger.debug("TraceId:" + spanData.getTraceId() + "\tParentLevelId:" + spanData.getParentLevel()
+                    + "\tLevelId:" + spanData.getLevelId() + "\tbusinessKey:" + spanData.getParameters());
         }
 
         // 将新创建的Context存放到ThreadLocal栈中。

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/logging/Logger.java
Patch:
@@ -3,6 +3,7 @@
 
 import com.ai.cloud.skywalking.protocol.util.LoggingUtil;
 
+import java.net.URLEncoder;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
@@ -89,7 +90,7 @@ private String replaceParameter(String message, Object... parameters) {
                 break;
             }
 
-            tmpMessage = tmpMessage.replaceFirst("\\{\\}", String.valueOf(parameters[parametersIndex++]));
+            tmpMessage = tmpMessage.replaceFirst("\\{\\}", URLEncoder.encode(String.valueOf(parameters[parametersIndex++])));
             startSize = index + 2;
         }
         return tmpMessage;

File: skywalking-protocol/src/main/java/com/ai/cloud/skywalking/protocol/RequestSpan.java
Patch:
@@ -221,7 +221,7 @@ public byte[] getData() {
         }
 
         if (parameters != null && parameters.size() > 0) {
-            builder.getParametersMap().putAll(parameters);
+            builder.putAllParameters(parameters);
         }
 
         return builder.setCallType(callType).setApplicationId(applicationId).setUserId(userId).setAgentId(agentId)

File: skywalking-protocol/src/main/java/com/ai/cloud/skywalking/protocol/Span.java
Patch:
@@ -209,6 +209,9 @@ public void setViewPointId(String viewPointId) {
     }
 
     public void setInvokeResult(String result){
+        if (result == null){
+            result = "";
+        }
         this.parameters.put(INVOKE_RESULT_PARAMETER_KEY, result);
     }
 

File: skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/processor/AbstractSpanProcessor.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AbstractSpanProcessor implements IProcessor {
 
     @Override
     public void process(List<AbstractDataSerializable> serializedObjects) {
-        //doAlarm(serializedObjects);
+        doAlarm(serializedObjects);
         doSaveHBase(connection, serializedObjects);
     }
 

File: skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/processor/AckSpanProcessor.java
Patch:
@@ -47,7 +47,6 @@ public void doSaveHBase(Connection connection, List<AbstractDataSerializable> se
         String columnName;
         for (AbstractDataSerializable serializedObject : serializedObjects) {
             AckSpan ackSpan = (AckSpan) serializedObject;
-            System.out.println(ackSpan.getTraceId() + "-ACK:" + ackSpan.getViewPointId());
             Put put = new Put(Bytes.toBytes(ackSpan.getTraceId()), getTSBySpanTraceId(ackSpan.getTraceId()));
             if (StringUtils.isEmpty(ackSpan.getParentLevel().trim())) {
                 columnName = ackSpan.getLevelId() + "";

File: skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/processor/RequestSpanProcessor.java
Patch:
@@ -31,9 +31,6 @@ public void doSaveHBase(Connection connection, List<AbstractDataSerializable> se
         String columnName;
         for (AbstractDataSerializable serializedObject : serializedObjects) {
             RequestSpan requestSpan = (RequestSpan) serializedObject;
-            System.out.println(
-                    requestSpan.getTraceId() + ":" + requestSpan.getParentLevel() + "." + requestSpan.getLevelId() + ":"
-                            + requestSpan.getViewPointId());
             Put put = new Put(Bytes.toBytes(requestSpan.getTraceId()), getTSBySpanTraceId(requestSpan.getTraceId()));
             if (StringUtils.isEmpty(requestSpan.getParentLevel().trim())) {
                 columnName = requestSpan.getLevelId() + "";

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/util/Constants.java
Patch:
@@ -27,6 +27,7 @@ public static class USR {
             put("J", "JDBC");
             put("W", "WEB");
             put("D", "DUBBO");
+            put("L", "LOCAL");
             put("U", "UNKNOWN");
         }
     };

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/invoke/monitor/BaseInvokeMonitor.java
Patch:
@@ -39,7 +39,7 @@ protected ContextData beforeInvoke(Span spanData, Identification id) {
         ContextBuffer.save(RequestSpan.RequestSpanBuilder.
                 newBuilder(CurrentThreadSpanStack.peek()).callType(id.getCallType()).viewPoint(id.getViewPoint())
                 .spanTypeDesc(id.getSpanTypeDesc()).processNo(BuriedPointMachineUtil.getProcessNo())
-                .address(BuriedPointMachineUtil.getHostDesc()).build());
+                .address(BuriedPointMachineUtil.getHostDesc()).parameters(id.getParameters()).build());
 
         // 并将当前的Context返回回去
         return new ContextData(spanData);

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/plugin/interceptor/enhance/ClassInstanceMethodsInterceptor.java
Patch:
@@ -28,7 +28,7 @@ public Object intercept(@This Object obj, @AllArguments Object[] allArguments, @
             @FieldValue(ClassEnhancePluginDefine.contextAttrName) EnhancedClassInstanceContext instanceContext) throws Exception {
         InstanceMethodsAroundInterceptor interceptor = InterceptorInstanceLoader.load(instanceMethodsAroundInterceptorClassName, obj.getClass().getClassLoader());
 
-        InstanceMethodInvokeContext interceptorContext = new InstanceMethodInvokeContext(obj, method.getName(), allArguments);
+        InstanceMethodInvokeContext interceptorContext = new InstanceMethodInvokeContext(obj, method.getName(), allArguments, method.getParameterTypes());
         MethodInterceptResult result = new MethodInterceptResult();
         try {
             interceptor.beforeMethod(instanceContext, interceptorContext, result);

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/plugin/interceptor/enhance/ClassStaticMethodsInterceptor.java
Patch:
@@ -29,7 +29,7 @@ public ClassStaticMethodsInterceptor(String staticMethodsAroundInterceptorClassN
     public Object intercept(@Origin Class<?> clazz, @AllArguments Object[] allArguments, @Origin Method method, @SuperCall Callable<?> zuper) throws Exception {
         StaticMethodsAroundInterceptor interceptor = InterceptorInstanceLoader.load(staticMethodsAroundInterceptorClassName, clazz.getClassLoader());
 
-        MethodInvokeContext interceptorContext = new MethodInvokeContext(clazz,method.getName(), allArguments);
+        StaticMethodInvokeContext interceptorContext = new StaticMethodInvokeContext(clazz,method.getName(), allArguments, method.getParameterTypes());
         MethodInterceptResult result = new MethodInterceptResult();
         try {
             interceptor.beforeMethod(interceptorContext, result);

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/plugin/interceptor/enhance/InstanceMethodInvokeContext.java
Patch:
@@ -6,8 +6,8 @@ public class InstanceMethodInvokeContext extends MethodInvokeContext {
      */
     private Object objInst;
 
-    InstanceMethodInvokeContext(Object objInst, String methodName, Object[] allArguments) {
-        super(objInst.getClass(), methodName, allArguments);
+    InstanceMethodInvokeContext(Object objInst, String methodName, Object[] allArguments, Class<?>[] argumentsTypes) {
+        super(methodName, allArguments,argumentsTypes);
         this.objInst = objInst;
     }
 

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/plugin/interceptor/enhance/StaticMethodsAroundInterceptor.java
Patch:
@@ -2,9 +2,9 @@
 
 
 public interface StaticMethodsAroundInterceptor {
-	public void beforeMethod(MethodInvokeContext interceptorContext, MethodInterceptResult result);
+	public void beforeMethod(StaticMethodInvokeContext interceptorContext, MethodInterceptResult result);
 	
-	public Object afterMethod(MethodInvokeContext interceptorContext, Object ret);
+	public Object afterMethod(StaticMethodInvokeContext interceptorContext, Object ret);
 	
 	public void handleMethodException(Throwable t, MethodInvokeContext interceptorContext);
 }

File: skywalking-collector/skywalking-api/src/test/java/test/ai/cloud/plugin/TestStaticAroundInterceptor.java
Patch:
@@ -2,17 +2,18 @@
 
 import com.ai.cloud.skywalking.plugin.interceptor.enhance.MethodInterceptResult;
 import com.ai.cloud.skywalking.plugin.interceptor.enhance.MethodInvokeContext;
+import com.ai.cloud.skywalking.plugin.interceptor.enhance.StaticMethodInvokeContext;
 import com.ai.cloud.skywalking.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;
 
 public class TestStaticAroundInterceptor implements StaticMethodsAroundInterceptor {
 
 	@Override
-	public void beforeMethod(MethodInvokeContext interceptorContext, MethodInterceptResult result) {
+	public void beforeMethod(StaticMethodInvokeContext interceptorContext, MethodInterceptResult result) {
 		System.out.println("beforeMethod : static");
 	}
 
 	@Override
-	public Object afterMethod(MethodInvokeContext interceptorContext, Object ret) {
+	public Object afterMethod(StaticMethodInvokeContext interceptorContext, Object ret) {
 		System.out.println("afterMethod: static");
 		return ret;
 	}

File: skywalking-collector/skywalking-sdk-plugin/custom-local-method-interceptor-plugin/src/main/java/com/ai/cloud/skywalking/plugin/custom/localmethod/CustomLocalSpanType.java
Patch:
@@ -1,9 +1,9 @@
-package com.ai.cloud.skywalking.self.define.plugin;
+package com.ai.cloud.skywalking.plugin.custom.localmethod;
 
 import com.ai.cloud.skywalking.api.IBuriedPointType;
 import com.ai.cloud.skywalking.protocol.common.CallType;
 
-public class SelfDefineSpanType implements IBuriedPointType {
+public class CustomLocalSpanType implements IBuriedPointType {
     @Override
     public String getTypeName() {
         return "L";

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/invoke/monitor/RPCClientInvokeMonitor.java
Patch:
@@ -58,7 +58,7 @@ public void occurException(Throwable th){
     }
 
     private String generateSubParentLevelId(Span spanData) {
-        if (spanData.getParentLevel() == null) {
+        if (spanData.getParentLevel() == null || spanData.getParentLevel().length() == 0) {
             return spanData.getLevelId() + "";
         }
 

File: skywalking-collector/skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/ai/cloud/skywalking/plugin/dubbo/MonitorFilterInterceptor.java
Patch:
@@ -80,7 +80,7 @@ public void beforeMethod(EnhancedClassInstanceContext context, InstanceMethodInv
     public Object afterMethod(EnhancedClassInstanceContext context, InstanceMethodInvokeContext interceptorContext,
             Object ret) {
         Result result = (Result) ret;
-        if (result.getException() != null) {
+        if (result != null && result.getException() != null) {
             dealException(result.getException(), context);
         }
 

File: skywalking-protocol/src/main/java/com/ai/cloud/skywalking/protocol/AckSpan.java
Patch:
@@ -70,7 +70,7 @@ public AckSpan(Span spanData) {
         this.viewPointId = spanData.getViewPointId();
     }
 
-    private AckSpan() {
+    public AckSpan() {
 
     }
 

File: skywalking-protocol/src/main/java/com/ai/cloud/skywalking/protocol/RequestSpan.java
Patch:
@@ -108,7 +108,7 @@ public RequestSpan(Span spanData) {
         this.userId = spanData.getUserId();
     }
 
-    private RequestSpan() {
+    public RequestSpan() {
 
     }
     private boolean isEntrySpan() {

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/invoke/monitor/RPCClientInvokeMonitor.java
Patch:
@@ -30,7 +30,7 @@ public ContextData traceBeforeInvoke(Identification id) {
             ContextBuffer.save(new RequestSpan(spanData));
             CurrentThreadSpanStack.push(spanData);
 
-            return new ContextData(spanData.getTraceId(), generateSubParentLevelId(spanData), spanData.getCallType());
+            return new ContextData(spanData.getTraceId(), generateSubParentLevelId(spanData));
         } catch (Throwable t) {
             logger.error(t.getMessage(), t);
             return new EmptyContextData();

File: skywalking-collector/skywalking-api/src/main/java/com/ai/cloud/skywalking/invoke/monitor/RPCServerInvokeMonitor.java
Patch:
@@ -27,18 +27,18 @@ public void traceBeforeInvoke(ContextData context, Identification id) {
 
             invalidateAllSpanIfIsNotFirstSpan(spanData);
 
-            super.beforeInvoke(spanData);
+            super.beforeInvoke(spanData, id);
         } catch (Throwable t) {
             logger.error(t.getMessage(), t);
         }
     }
 
-    public void afterInvoke(){
+    public void afterInvoke() {
         super.afterInvoke();
     }
 
 
-    public void occurException(Throwable th){
+    public void occurException(Throwable th) {
         super.occurException(th);
     }
 

File: skywalking-collector/skywalking-protocol/src/main/java/com/ai/cloud/skywalking/protocol/Span.java
Patch:
@@ -43,7 +43,7 @@ public class Span {
      * 节点调用的错误堆栈<br/>
      * 堆栈以JAVA的exception为主要判断依据
      */
-    protected String exceptionStack;
+    protected String exceptionStack = "";
 
     /**
      * 节点的状态<br/>
@@ -60,7 +60,7 @@ public class Span {
      * 节点类型<br/>
      * 如：RPC Client,RPC Server,Local
      */
-    private   SpanType            spanType   = SpanType.LOCAL;
+    private SpanType spanType = SpanType.LOCAL;
 
     public Span(String traceId) {
         this.traceId = traceId;

File: skywalking-collector/skywalking-protocol/src/main/java/com/ai/cloud/skywalking/serialize/SerializedFactory.java
Patch:
@@ -29,7 +29,7 @@ public static AbstractDataSerializable unSerialize(byte[] bytes) {
         if (abstractDataSerializable != null) {
             NullableClass nullableClass = abstractDataSerializable.convert2Object(bytes);
             if (!nullableClass.isNull()) {
-                return abstractDataSerializable;
+                return (AbstractDataSerializable) nullableClass;
             }
         }
         return null;

File: skywalking-collector/skywalking-log/logback-plugin/src/main/java/com/ai/cloud/skywalking/plugin/log/logback/LogbackPatternConverter.java
Patch:
@@ -17,6 +17,6 @@ public String convert(ILoggingEvent event) {
 			return "TID:" + Tracing.getTraceId();
 		}
 
-		return "TID: N/A"+" "+event.toString();
+		return "TID: N/A";
 	}
 }
\ No newline at end of file

File: skywalking-collector/skywalking-log/logback-plugin/src/test/java/com/ai/LogbackMain.java
Patch:
@@ -16,7 +16,7 @@ public static void main(String[] args) throws JoranException {
         JoranConfigurator configurator = new JoranConfigurator();
         configurator.setContext(lc);
         lc.reset();
-        configurator.doConfigure("E:\\testdubbo\\GTrace\\GTrace-client\\src\\test\\resources\\logback.xml");
+        configurator.doConfigure("E:\\testdubbo\\sky-walking\\skywalking-collector\\skywalking-log\\logback-plugin\\src\\test\\resources\\logback.xml");
         StatusPrinter.printInCaseOfErrorsOrWarnings(lc);
 
         logger.info("Hello world11");

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/util/ViewPointBeautiUtil.java
Patch:
@@ -58,7 +58,9 @@ private static String addViewPoint(String viewPoint, String searchKey) {
             result.append(viewPoint.substring(viewPoint.length() - 40, viewPoint.length() - 20));
             result.append("....");
         } else {
-            result.append(viewPoint.substring(startSize, viewPoint.length() - 10));
+            if (viewPoint.length() - 10 >=  startSize) {
+                result.append(viewPoint.substring(startSize, viewPoint.length() - 10));
+            }
         }
         return result.toString();
     }

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/filter/AccessControllerFilter.java
Patch:
@@ -24,7 +24,8 @@ public void init(FilterConfig filterConfig) throws ServletException {
         contained.add("addApplication");
         contained.add("createGlobalApplication");
         contained.add("modifyApplication");
-        contained.add("showAnlyResult");
+        contained.add("showAnlySearchResult");
+        contained.add("showAnalysisResult");
     }
 
     @Override

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/config/HBaseTableMetaData.java
Patch:
@@ -8,6 +8,8 @@ public class HBaseTableMetaData {
      */
     public final static class TABLE_CALL_CHAIN {
         public static final String TABLE_NAME = "sw-call-chain";
+
+        public static final String  FAMILY_NAME = "call-chain";
     }
 
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/common/BaseController.java
Patch:
@@ -1,7 +1,7 @@
 package com.ai.cloud.skywalking.web.common;
 
 import com.ai.cloud.skywalking.web.util.Constants;
-import com.ai.cloud.skywalking.web.bo.LoginUserInfo;
+import com.ai.cloud.skywalking.web.dto.LoginUserInfo;
 import org.springframework.ui.ModelMap;
 import org.springframework.web.bind.annotation.ModelAttribute;
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/controller/AlarmRuleMaintainController.java
Patch:
@@ -1,8 +1,8 @@
 package com.ai.cloud.skywalking.web.controller;
 
-import com.ai.cloud.skywalking.web.bo.AlarmRuleInfo;
-import com.ai.cloud.skywalking.web.bo.ConfigArgs;
-import com.ai.cloud.skywalking.web.bo.LoginUserInfo;
+import com.ai.cloud.skywalking.web.dto.AlarmRuleInfo;
+import com.ai.cloud.skywalking.web.dto.ConfigArgs;
+import com.ai.cloud.skywalking.web.dto.LoginUserInfo;
 import com.ai.cloud.skywalking.web.common.BaseController;
 import com.ai.cloud.skywalking.web.dao.inter.IAlarmRuleMaintainDao;
 import com.ai.cloud.skywalking.web.entity.AlarmRule;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/controller/ApplicationConfigController.java
Patch:
@@ -1,7 +1,7 @@
 package com.ai.cloud.skywalking.web.controller;
 
-import com.ai.cloud.skywalking.web.bo.ApplicationInfo;
-import com.ai.cloud.skywalking.web.bo.LoginUserInfo;
+import com.ai.cloud.skywalking.web.dto.ApplicationInfo;
+import com.ai.cloud.skywalking.web.dto.LoginUserInfo;
 import com.ai.cloud.skywalking.web.common.BaseController;
 import com.ai.cloud.skywalking.web.dao.inter.IAlarmRuleMaintainDao;
 import com.ai.cloud.skywalking.web.dao.inter.IApplicationsMaintainDao;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/controller/AuthFileController.java
Patch:
@@ -1,6 +1,6 @@
 package com.ai.cloud.skywalking.web.controller;
 
-import com.ai.cloud.skywalking.web.bo.LoginUserInfo;
+import com.ai.cloud.skywalking.web.dto.LoginUserInfo;
 import com.ai.cloud.skywalking.web.common.BaseController;
 import com.ai.cloud.skywalking.web.dao.inter.IAuthFileMaintainDao;
 import com.ai.cloud.skywalking.web.dao.inter.ISystemConfigMaintainDao;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/controller/SearchController.java
Patch:
@@ -1,7 +1,7 @@
 package com.ai.cloud.skywalking.web.controller;
 
-import com.ai.cloud.skywalking.web.bo.LoginUserInfo;
-import com.ai.cloud.skywalking.web.bo.TraceTreeInfo;
+import com.ai.cloud.skywalking.web.dto.LoginUserInfo;
+import com.ai.cloud.skywalking.web.dto.TraceTreeInfo;
 import com.ai.cloud.skywalking.web.common.BaseController;
 import com.ai.cloud.skywalking.web.entity.CallChainTree;
 import com.ai.cloud.skywalking.web.service.inter.ICallChainTreeService;
@@ -70,6 +70,7 @@ public String loadTraceTree(@RequestParam("traceId") String traceId) {
                 jsonObject.put("message", "Cannot find TraceId[" + traceId + "]");
             }
         } catch (Exception e) {
+            logger.error("Search tree Id ", e);
             jsonObject.put("code", "500");
             jsonObject.put("result", "Fatal error");
         }

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/controller/UserMaintainController.java
Patch:
@@ -1,7 +1,7 @@
 package com.ai.cloud.skywalking.web.controller;
 
-import com.ai.cloud.skywalking.web.bo.LoginUserInfo;
-import com.ai.cloud.skywalking.web.bo.SignInUserInfo;
+import com.ai.cloud.skywalking.web.dto.LoginUserInfo;
+import com.ai.cloud.skywalking.web.dto.SignInUserInfo;
 import com.ai.cloud.skywalking.web.common.BaseController;
 import com.ai.cloud.skywalking.web.dao.inter.IUserMaintainDao;
 import com.ai.cloud.skywalking.web.entity.UserInfo;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dao/impl/AlarmRuleMaintainDao.java
Patch:
@@ -3,7 +3,7 @@
 import com.ai.cloud.skywalking.web.dao.inter.IAlarmRuleMaintainDao;
 import com.ai.cloud.skywalking.web.entity.AlarmRule;
 import com.ai.cloud.skywalking.web.util.DBConnectUtil;
-import com.ai.cloud.skywalking.web.bo.ConfigArgs;
+import com.ai.cloud.skywalking.web.dto.ConfigArgs;
 import com.google.gson.Gson;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dao/impl/ApplicationsMaintainDao.java
Patch:
@@ -1,6 +1,6 @@
 package com.ai.cloud.skywalking.web.dao.impl;
 
-import com.ai.cloud.skywalking.web.bo.ApplicationInfo;
+import com.ai.cloud.skywalking.web.dto.ApplicationInfo;
 import com.ai.cloud.skywalking.web.dao.inter.IApplicationsMaintainDao;
 import com.ai.cloud.skywalking.web.entity.Application;
 import com.ai.cloud.skywalking.web.util.DBConnectUtil;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dao/impl/UserMaintainDao.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.ai.cloud.skywalking.web.dao.inter.IUserMaintainDao;
 import com.ai.cloud.skywalking.web.util.DBConnectUtil;
-import com.ai.cloud.skywalking.web.bo.LoginUserInfo;
-import com.ai.cloud.skywalking.web.bo.SignInUserInfo;
+import com.ai.cloud.skywalking.web.dto.LoginUserInfo;
+import com.ai.cloud.skywalking.web.dto.SignInUserInfo;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.springframework.beans.factory.annotation.Autowired;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dao/inter/IApplicationsMaintainDao.java
Patch:
@@ -1,6 +1,6 @@
 package com.ai.cloud.skywalking.web.dao.inter;
 
-import com.ai.cloud.skywalking.web.bo.ApplicationInfo;
+import com.ai.cloud.skywalking.web.dto.ApplicationInfo;
 import com.ai.cloud.skywalking.web.entity.Application;
 
 import java.sql.SQLException;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dao/inter/ICallChainTreeDao.java
Patch:
@@ -1,12 +1,12 @@
 package com.ai.cloud.skywalking.web.dao.inter;
 
-import com.ai.cloud.skywalking.web.entity.CallChainTree;
+import com.ai.cloud.skywalking.web.dto.AnlyResult;
 
 import java.io.IOException;
 
 /**
  * Created by xin on 16-4-6.
  */
 public interface ICallChainTreeDao {
-    CallChainTree queryTreeId(String treeId) throws IOException;
+    AnlyResult queryEntranceAnlyResult(String entranceColumnName, String treeId) throws IOException;
 }

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dao/inter/IUserMaintainDao.java
Patch:
@@ -1,7 +1,7 @@
 package com.ai.cloud.skywalking.web.dao.inter;
 
-import com.ai.cloud.skywalking.web.bo.LoginUserInfo;
-import com.ai.cloud.skywalking.web.bo.SignInUserInfo;
+import com.ai.cloud.skywalking.web.dto.LoginUserInfo;
+import com.ai.cloud.skywalking.web.dto.SignInUserInfo;
 
 import java.sql.SQLException;
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dto/AlarmRuleInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.web.bo;
+package com.ai.cloud.skywalking.web.dto;
 
 import com.ai.cloud.skywalking.web.entity.AlarmRule;
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dto/ApplicationInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.web.bo;
+package com.ai.cloud.skywalking.web.dto;
 
 import com.ai.cloud.skywalking.web.entity.Application;
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dto/ConfigArgs.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.web.bo;
+package com.ai.cloud.skywalking.web.dto;
 
 import java.io.Serializable;
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dto/LoginUserInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.web.bo;
+package com.ai.cloud.skywalking.web.dto;
 
 import com.ai.cloud.skywalking.web.entity.UserInfo;
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dto/MailInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.web.bo;
+package com.ai.cloud.skywalking.web.dto;
 
 import java.io.Serializable;
 import java.util.Arrays;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dto/SignInUserInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.web.bo;
+package com.ai.cloud.skywalking.web.dto;
 
 import com.ai.cloud.skywalking.web.entity.UserInfo;
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dto/TimeLineEntry.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * 
  */
-package com.ai.cloud.skywalking.web.bo;
+package com.ai.cloud.skywalking.web.dto;
 
 public class TimeLineEntry {
 	

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dto/TraceNodeInfo.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.web.bo;
+package com.ai.cloud.skywalking.web.dto;
 
 import com.ai.cloud.skywalking.protocol.Span;
 import com.ai.cloud.skywalking.web.util.Constants;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/entity/AlarmRule.java
Patch:
@@ -1,6 +1,6 @@
 package com.ai.cloud.skywalking.web.entity;
 
-import com.ai.cloud.skywalking.web.bo.ConfigArgs;
+import com.ai.cloud.skywalking.web.dto.ConfigArgs;
 
 import java.sql.Timestamp;
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/entity/Application.java
Patch:
@@ -1,6 +1,6 @@
 package com.ai.cloud.skywalking.web.entity;
 
-import com.ai.cloud.skywalking.web.bo.ConfigArgs;
+import com.ai.cloud.skywalking.web.dto.ConfigArgs;
 
 import java.sql.Timestamp;
 

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/filter/AccessControllerFilter.java
Patch:
@@ -1,7 +1,7 @@
 package com.ai.cloud.skywalking.web.filter;
 
 import com.ai.cloud.skywalking.web.util.Constants;
-import com.ai.cloud.skywalking.web.bo.LoginUserInfo;
+import com.ai.cloud.skywalking.web.dto.LoginUserInfo;
 
 import javax.servlet.*;
 import javax.servlet.http.HttpServletRequest;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/service/inter/ITraceTreeService.java
Patch:
@@ -1,6 +1,6 @@
 package com.ai.cloud.skywalking.web.service.inter;
 
-import com.ai.cloud.skywalking.web.bo.TraceTreeInfo;
+import com.ai.cloud.skywalking.web.dto.TraceTreeInfo;
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/util/SortUtil.java
Patch:
@@ -3,7 +3,7 @@
  */
 package com.ai.cloud.skywalking.web.util;
 
-import com.ai.cloud.skywalking.web.bo.TraceNodeInfo;
+import com.ai.cloud.skywalking.web.dto.TraceNodeInfo;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 

File: skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/storage/Chain.java
Patch:
@@ -25,8 +25,7 @@ public void doChain(List<Span> spans) {
         if (index < chains.size()) {
             while (true) {
                 try {
-                    chains.get(index).doChain(spans, this);
-                    index++;
+                    chains.get(index++).doChain(spans, this);
                     break;
                 } catch (Throwable e) {
                 	logger.error("do chain at index[{}] failure.", index, e);
@@ -35,6 +34,7 @@ public void doChain(List<Span> spans) {
                 }
             }
         }
+
     }
 
     void addChain(IStorageChain chain) {

File: skywalking-webui/src/main/java/com/ai/cloud/skywalking/web/dao/impl/TraceNodeDao.java
Patch:
@@ -77,6 +77,8 @@ private void computeRPCInfo(Map<String, TraceNodeInfo> rpcMap, Map<String, Trace
                         clientLog.setAddress(serverLog.getAddress());
                         if (StringUtil.isBlank(clientLog.getExceptionStack())) {
                             clientLog.setExceptionStack(serverLog.getExceptionStack());
+                        }else{
+                            clientLog.setServerExceptionStr(serverLog.getServerExceptionStr());
                         }
                     }
                     logVO.addTimeLine(rpcVO.getValue().getStartDate(), rpcVO.getValue().getCost());

File: skywalking-api/src/main/java/com/ai/cloud/skywalking/plugin/interceptor/ClassMethodInterceptor.java
Patch:
@@ -51,11 +51,11 @@ public Object intercept(
 		} catch(Throwable t){
 			try {
 				interceptor.handleMethodException(t, instanceContext, interceptorContext, ret);
-				throw t;
 			} catch (Throwable t2) {
 				logger.error("class[{}] handle method[{}] exception failue:{}",
 						obj.getClass(), method.getName(), t2.getMessage(), t2);
 			}
+			throw t;
 		}finally {
 			try {
 				ret = interceptor.afterMethod(instanceContext, interceptorContext, ret);

File: skywalking-api/src/test/java/test/ai/cloud/bytebuddy/SimulateMain.java
Patch:
@@ -14,6 +14,7 @@ public class SimulateMain {
 	public static void main(String[] args) throws NoSuchFieldException,
 			SecurityException, InstantiationException, IllegalAccessException, ClassNotFoundException {
 		TypePool typePool = TypePool.Default.ofClassPath();
+		System.out.println(typePool.describe("test.ai.cloud.bytebuddy.TestClass").isResolved());
 
 		Class<?> newClazz = new ByteBuddy()
 				.redefine(

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/chainbuild/entity/CallChainTree.java
Patch:
@@ -3,6 +3,7 @@
 import com.ai.cloud.skywalking.analysis.chainbuild.po.ChainInfo;
 import com.ai.cloud.skywalking.analysis.chainbuild.po.ChainNode;
 import com.ai.cloud.skywalking.analysis.chainbuild.util.HBaseUtil;
+import com.ai.cloud.skywalking.analysis.chainbuild.util.TokenGenerator;
 import com.google.gson.Gson;
 import org.apache.hadoop.hbase.client.Put;
 
@@ -33,14 +34,12 @@ public CallChainTree(String callEntrance) {
         combineChains = new HashMap<String, ChainInfo>();
         nodes = new HashMap<String, CallChainTreeNode>();
         this.callEntrance = callEntrance;
+        this.treeId = TokenGenerator.generateTreeToken(callEntrance);
     }
 
     public static CallChainTree load(String callEntrance) throws IOException {
         CallChainTree chain = HBaseUtil.loadCallChainTree(callEntrance);
         chain.hasBeenMergedChainIds.addAll(HBaseUtil.loadHasBeenMergeChainIds(callEntrance));
-        if (chain == null) {
-            chain = new CallChainTree(callEntrance);
-        }
         return chain;
     }
 

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/chainbuild/entity/CallChainTree.java
Patch:
@@ -69,7 +69,7 @@ public void summary(ChainInfo chainInfo) throws IOException {
         }
     }
 
-    public void saveToHbase() throws IOException {
+    public void saveToHbase() throws IOException, InterruptedException {
         List<Put> chainInfoPuts = new ArrayList<Put>();
         for (Map.Entry<String, ChainInfo> entry : combineChains.entrySet()) {
             Put put = new Put(entry.getKey().getBytes());

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/chainbuild/entity/CallChainTreeNode.java
Patch:
@@ -67,7 +67,7 @@ public String toString() {
         return new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create().toJson(this);
     }
 
-    public void saveSummaryResultToHBase() {
+    public void saveSummaryResultToHBase() throws IOException, InterruptedException {
         List<Put>  puts = new ArrayList<Put>();
         for (Map.Entry<String, ChainNodeSpecificMinSummary> entry : chainNodeContainer.entrySet()) {
             Put put = new Put(entry.getKey().getBytes());

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/chain2summary/model/ChainSpecificDaySummary.java
Patch:
@@ -23,6 +23,9 @@ public void summary(ChainSpecificTimeSummary timeSummary) {
         Map<String, ChainNodeSpecificTimeWindowSummary> chainNodeSpecificTimeWindowSummaryMap = timeSummary.getSummaryMap();
 
         for (Map.Entry<String, ChainNodeSpecificTimeWindowSummary> entry : chainNodeSpecificTimeWindowSummaryMap.entrySet()) {
+            if (chainNodeSpecificHourSummaryMap.get(entry.getKey()) == null){
+                chainNodeSpecificHourSummaryMap.put(entry.getKey(), new ChainNodeSpecificDaySummary());
+            }
             chainNodeSpecificHourSummaryMap.get(entry.getKey()).summary(timeSummary.getSummaryTimestamp(), entry.getValue());
         }
     }

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/chain2summary/model/ChainSpecificHourSummary.java
Patch:
@@ -24,6 +24,9 @@ public void summary(ChainSpecificTimeSummary timeSummary) {
         Map<String, ChainNodeSpecificTimeWindowSummary> chainNodeSpecificTimeWindowSummaryMap = timeSummary.getSummaryMap();
 
         for (Map.Entry<String, ChainNodeSpecificTimeWindowSummary> entry : chainNodeSpecificTimeWindowSummaryMap.entrySet()){
+            if (chainNodeSpecificHourSummaryMap.get(entry.getKey()) == null){
+                chainNodeSpecificHourSummaryMap.put(entry.getKey(), new ChainNodeSpecificHourSummary());
+            }
             chainNodeSpecificHourSummaryMap.get(entry.getKey()).summary(timeSummary.getSummaryTimestamp(),entry.getValue());
         }
     }

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/chain2summary/model/ChainSpecificMinSummary.java
Patch:
@@ -25,6 +25,9 @@ public void summary(ChainSpecificTimeSummary timeSummary) {
         Map<String, ChainNodeSpecificTimeWindowSummary> chainNodeSpecificTimeWindowSummaryMap = timeSummary.getSummaryMap();
 
         for (Map.Entry<String, ChainNodeSpecificTimeWindowSummary> entry : chainNodeSpecificTimeWindowSummaryMap.entrySet()) {
+            if (chainNodeSpecificMinSummaryMap.get(entry.getKey()) == null){
+                chainNodeSpecificMinSummaryMap.put(entry.getKey(), new ChainNodeSpecificMinSummary());
+            }
             chainNodeSpecificMinSummaryMap.get(entry.getKey()).summary(entry.getValue());
         }
     }

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/chain2summary/model/ChainSpecificMonthSummary.java
Patch:
@@ -20,6 +20,9 @@ public void summary(ChainSpecificTimeSummary timeSummary) {
         Map<String, ChainNodeSpecificTimeWindowSummary> chainNodeSpecificTimeWindowSummaryMap = timeSummary.getSummaryMap();
 
         for (Map.Entry<String, ChainNodeSpecificTimeWindowSummary> entry : chainNodeSpecificTimeWindowSummaryMap.entrySet()) {
+            if (chainNodeSpecificMinSummaryMap.get(entry.getKey()) == null){
+                chainNodeSpecificMinSummaryMap.put(entry.getKey(), new ChainNodeSpecificMonthSummary());
+            }
             chainNodeSpecificMinSummaryMap.get(entry.getKey()).summary(timeSummary.getSummaryTimestamp(), entry.getValue());
         }
     }

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/chain2summary/Chain2SummaryMapper.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.io.IOException;
 
-public class Chain2SummaryMapper extends TableMapper<Text, Object> {
+public class Chain2SummaryMapper extends TableMapper<Text, ChainSpecificTimeSummary> {
 
     private Logger logger = LoggerFactory
             .getLogger(Chain2SummaryMapper.class.getName());
@@ -34,6 +34,7 @@ protected void map(ImmutableBytesWritable key, Result value, Context context) th
             }
             context.write(new Text(summary.buildMapperKey()), summary);
         } catch (Exception e) {
+            e.printStackTrace();
             logger.error("Failed to mapper call chain[" + key.toString() + "]",
                     e);
         }

File: skywalking-api/src/main/java/com/ai/cloud/skywalking/buffer/BufferGroup.java
Patch:
@@ -86,6 +86,7 @@ public void run() {
 							HealthCollector.getCurrentHeathReading(null)
 									.updateData(HeathReading.INFO,
 											"send buried-point data.");
+							logger.debug("send buried-point data, size:{}", data.length());
 							data = new StringBuilder();
 						}
 

File: skywalking-alarm/src/main/java/com/ai/cloud/skywalking/alarm/UsersChangedDetectionThread.java
Patch:
@@ -48,7 +48,7 @@ public void run() {
 
     private boolean checkUserNumber() throws SQLException {
         String currentUserIdsEncryptedStr = MD5Encryption.getEncryption(AlarmMessageDao.selectAllUserIds().toString());
-        if (userIdsEncryptedStr == currentUserIdsEncryptedStr) {
+        if (userIdsEncryptedStr.equals(currentUserIdsEncryptedStr)) {
             return false;
         }
         userIdsEncryptedStr = currentUserIdsEncryptedStr;

File: skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/ai/cloud/skywalking/plugin/dubbo/DubboBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.buriedpoint.type;
+package com.ai.cloud.skywalking.plugin.dubbo;
 
 import com.ai.cloud.skywalking.api.IBuriedPointType;
 import com.ai.cloud.skywalking.protocol.CallType;

File: skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/ai/cloud/skywalking/plugin/dubbo/SWDubboEnhanceFilter.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointReceiver;
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
-import com.ai.cloud.skywalking.buriedpoint.type.DubboBuriedPointType;
 import com.ai.cloud.skywalking.conf.AuthDesc;
 import com.ai.cloud.skywalking.model.ContextData;
 import com.ai.cloud.skywalking.model.Identification;

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/JDBCBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.buriedpoint.type;
+package com.ai.cloud.skywalking.plugin.jdbc;
 
 import com.ai.cloud.skywalking.api.IBuriedPointType;
 import com.ai.cloud.skywalking.protocol.CallType;

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/CallableStatementTracing.java
Patch:
@@ -3,7 +3,7 @@
 import java.sql.SQLException;
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
-import com.ai.cloud.skywalking.buriedpoint.type.JDBCBuriedPointType;
+import com.ai.cloud.skywalking.plugin.jdbc.JDBCBuriedPointType;
 import com.ai.cloud.skywalking.model.Identification;
 
 /**

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/ConnectionTracing.java
Patch:
@@ -3,7 +3,7 @@
 import java.sql.SQLException;
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
-import com.ai.cloud.skywalking.buriedpoint.type.JDBCBuriedPointType;
+import com.ai.cloud.skywalking.plugin.jdbc.JDBCBuriedPointType;
 import com.ai.cloud.skywalking.model.Identification;
 
 /**

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/PreparedStatementTracing.java
Patch:
@@ -3,7 +3,7 @@
 import java.sql.SQLException;
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
-import com.ai.cloud.skywalking.buriedpoint.type.JDBCBuriedPointType;
+import com.ai.cloud.skywalking.plugin.jdbc.JDBCBuriedPointType;
 import com.ai.cloud.skywalking.model.Identification;
 
 /**

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/StatementTracing.java
Patch:
@@ -1,7 +1,7 @@
 package com.ai.cloud.skywalking.plugin.jdbc.tracing;
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
-import com.ai.cloud.skywalking.buriedpoint.type.JDBCBuriedPointType;
+import com.ai.cloud.skywalking.plugin.jdbc.JDBCBuriedPointType;
 import com.ai.cloud.skywalking.model.Identification;
 
 import java.sql.SQLException;

File: skywalking-sdk-plugin/spring-plugin/src/main/java/com/ai/cloud/skywalking/plugin/spring/SpringBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.buriedpoint.type;
+package com.ai.cloud.skywalking.plugin.spring;
 
 import com.ai.cloud.skywalking.api.IBuriedPointType;
 import com.ai.cloud.skywalking.protocol.CallType;

File: skywalking-sdk-plugin/web-plugin/src/main/java/com/ai/cloud/skywalking/plugin/web/SkyWalkingFilter.java
Patch:
@@ -3,7 +3,6 @@
 
 import com.ai.cloud.skywalking.api.Tracing;
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointReceiver;
-import com.ai.cloud.skywalking.buriedpoint.type.WEBBuriedPointType;
 import com.ai.cloud.skywalking.conf.AuthDesc;
 import com.ai.cloud.skywalking.model.ContextData;
 import com.ai.cloud.skywalking.model.Identification;

File: skywalking-sdk-plugin/web-plugin/src/main/java/com/ai/cloud/skywalking/plugin/web/WEBBuriedPointType.java
Patch:
@@ -1,4 +1,4 @@
-package com.ai.cloud.skywalking.buriedpoint.type;
+package com.ai.cloud.skywalking.plugin.web;
 
 import com.ai.cloud.skywalking.api.IBuriedPointType;
 import com.ai.cloud.skywalking.protocol.CallType;

File: skywalking-analysis/src/test/java/com/ai/cloud/skywalking/analysis/mapper/CallChainMapperTest.java
Patch:
@@ -43,7 +43,7 @@ public void testMap() throws Exception {
         List<ChainInfo> chainInfos = new ArrayList<ChainInfo>();
         chainInfos.add(chainInfo);
 
-        Categorize2ChainReducer.reduceAction(chainInfo.getUserId() + ":" + chainInfo.getEntranceNodeToken(), chainInfos.iterator(), context);
+        Categorize2ChainReducer.reduceAction(chainInfo.getUserId() + ":" + chainInfo.getEntranceNodeToken(), chainInfos.iterator());
     }
 
     public static List<Span> selectByTraceId(String traceId) throws IOException {

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/categorize2chain/Categorize2ChainMapper.java
Patch:
@@ -4,6 +4,7 @@
 import com.ai.cloud.skywalking.analysis.categorize2chain.filter.SpanNodeProcessFilter;
 import com.ai.cloud.skywalking.analysis.categorize2chain.model.ChainInfo;
 import com.ai.cloud.skywalking.analysis.categorize2chain.model.ChainNode;
+import com.ai.cloud.skywalking.analysis.config.ConfigInitializer;
 import com.ai.cloud.skywalking.analysis.util.HBaseUtil;
 import com.ai.cloud.skywalking.protocol.Span;
 import org.apache.hadoop.hbase.Cell;
@@ -24,6 +25,7 @@ public class Categorize2ChainMapper extends TableMapper<Text, ChainInfo> {
     @Override
     protected void map(ImmutableBytesWritable key, Result value, Context context) throws IOException,
             InterruptedException {
+        ConfigInitializer.initialize();
         List<Span> spanList = new ArrayList<Span>();
         ChainInfo chainInfo = null;
         try {
@@ -32,7 +34,7 @@ protected void map(ImmutableBytesWritable key, Result value, Context context) th
                 spanList.add(span);
             }
 
-            chainInfo = spanToChainInfo(key.toString(), spanList);
+            chainInfo = spanToChainInfo(Bytes.toString(key.get()), spanList);
             logger.info("Success convert span to chain info...." + chainInfo.getCID());
             context.write(new Text(chainInfo.getUserId() + ":" + chainInfo.getEntranceNodeToken()), chainInfo);
         } catch (Exception e) {

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/categorize2chain/Categorize2ChainReducer.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.util.Iterator;
 
+import com.ai.cloud.skywalking.analysis.config.ConfigInitializer;
 import org.apache.hadoop.io.IntWritable;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapreduce.Reducer;
@@ -17,6 +18,7 @@ public class Categorize2ChainReducer extends Reducer<Text, ChainInfo, Text, IntW
 
     @Override
     protected void reduce(Text key, Iterable<ChainInfo> values, Context context) throws IOException, InterruptedException {
+        ConfigInitializer.initialize();
         int totalCount = reduceAction(key.toString(), values.iterator());
         context.write(new Text(key.toString()), new IntWritable(totalCount));
     }

File: skywalking-analysis/src/test/java/com/ai/cloud/skywalking/analysis/mapper/CallChainMapperTest.java
Patch:
@@ -43,7 +43,7 @@ public void testMap() throws Exception {
         List<ChainInfo> chainInfos = new ArrayList<ChainInfo>();
         chainInfos.add(chainInfo);
 
-        Categorize2ChainReducer.reduceAction(chainInfo.getUserId() + ":" + chainInfo.getEntranceNodeToken(), chainInfos.iterator());
+        Categorize2ChainReducer.reduceAction(chainInfo.getUserId() + ":" + chainInfo.getEntranceNodeToken(), chainInfos.iterator(), context);
     }
 
     public static List<Span> selectByTraceId(String traceId) throws IOException {

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/categorize2chain/Categorize2ChainReducer.java
Patch:
@@ -1,8 +1,8 @@
 package com.ai.cloud.skywalking.analysis.categorize2chain;
 
 import com.ai.cloud.skywalking.analysis.categorize2chain.model.ChainInfo;
-import com.ai.cloud.skywalking.analysis.config.ConfigInitializer;
 import com.ai.cloud.skywalking.analysis.util.HBaseUtil;
+import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
 import org.apache.hadoop.io.IntWritable;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapreduce.Reducer;
@@ -17,9 +17,8 @@ public class Categorize2ChainReducer extends Reducer<Text, ChainInfo, Text, IntW
 
     @Override
     protected void reduce(Text key, Iterable<ChainInfo> values, Context context) throws IOException, InterruptedException {
-        //ConfigInitializer.initialize();
         int totalCount = reduceAction(key.toString(), values.iterator());
-        context.write(key, new IntWritable(totalCount));
+        context.write(new Text(key.toString()), new IntWritable(totalCount));
     }
 
     public static int reduceAction(String key, Iterator<ChainInfo> chainInfoIterator) throws IOException, InterruptedException {

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/categorize2chain/dao/CallChainInfoDao.java
Patch:
@@ -17,10 +17,10 @@ public class CallChainInfoDao {
 
     static {
         try {
-            Class.forName(Config.MySql.driverClass);
-            connection = DriverManager.getConnection(Config.MySql.url, Config.MySql.userName, Config.MySql.password);
+            Class.forName(Config.MySql.DRIVER_CLASS);
+            connection = DriverManager.getConnection(Config.MySql.URL, Config.MySql.USERNAME, Config.MySql.PASSWORD);
         } catch (ClassNotFoundException e) {
-            logger.error("Failed to find jdbc driver class[" + Config.MySql.driverClass + "]", e);
+            logger.error("Failed to find jdbc driver class[" + Config.MySql.DRIVER_CLASS + "]", e);
             System.exit(-1);
         } catch (SQLException e) {
             logger.error("Failed to connection database.", e);

File: skywalking-analysis/src/main/java/com/ai/cloud/skywalking/analysis/config/ConfigInitializer.java
Patch:
@@ -13,7 +13,9 @@ public class ConfigInitializer {
     private static Logger logger = Logger.getLogger(ConfigInitializer.class.getName());
 
     public static void initialize() {
-        InputStream inputStream = ConfigInitializer.class.getResourceAsStream("/config.properties");
+        InputStream inputStream = Thread.currentThread()
+                .getContextClassLoader().getResourceAsStream("/config.properties");
+        //InputStream inputStream = ConfigInitializer.class.getResourceAsStream("/config.properties");
         if (inputStream == null) {
             logger.log(Level.ALL, "No provider sky-walking certification documents, sky-walking api auto shutdown.");
         } else {

File: skywalking-analysis/src/test/java/com/ai/cloud/skywalking/analysis/mapper/CallChainMapperTest.java
Patch:
@@ -2,7 +2,7 @@
 
 
 import com.ai.cloud.skywalking.analysis.categorize2chain.Categorize2ChainMapper;
-import com.ai.cloud.skywalking.analysis.categorize2chain.Categorize2ChainReduce;
+import com.ai.cloud.skywalking.analysis.categorize2chain.Categorize2ChainReducer;
 import com.ai.cloud.skywalking.analysis.categorize2chain.model.ChainInfo;
 import com.ai.cloud.skywalking.analysis.config.Config;
 import com.ai.cloud.skywalking.analysis.config.ConfigInitializer;
@@ -43,12 +43,12 @@ public void testMap() throws Exception {
         List<ChainInfo> chainInfos = new ArrayList<ChainInfo>();
         chainInfos.add(chainInfo);
 
-        Categorize2ChainReduce.reduceAction(chainInfo.getUserId() + ":" + chainInfo.getEntranceNodeToken(), chainInfos.iterator());
+        Categorize2ChainReducer.reduceAction(chainInfo.getUserId() + ":" + chainInfo.getEntranceNodeToken(), chainInfos.iterator());
     }
 
     public static List<Span> selectByTraceId(String traceId) throws IOException {
         List<Span> entries = new ArrayList<Span>();
-        Table table = connection.getTable(TableName.valueOf(Config.HBase.CALL_CHAIN_TABLE_NAME));
+        Table table = connection.getTable(TableName.valueOf(Config.HBase.TABLE_CALL_CHAIN));
         Get g = new Get(Bytes.toBytes(traceId));
         Result r = table.get(g);
         for (Cell cell : r.rawCells()) {

File: skywalking-api/src/main/java/com/ai/cloud/skywalking/buriedpoint/type/DubboBuriedPointType.java
Patch:
@@ -22,7 +22,7 @@ public String getTypeName() {
 
     @Override
     public CallType getCallType() {
-        return CallType.ASYNC;
+        return CallType.SYNC;
     }
 
     private DubboBuriedPointType() {

File: skywalking-api/src/main/java/com/ai/cloud/skywalking/buriedpoint/type/WEBBuriedPointType.java
Patch:
@@ -22,7 +22,7 @@ public String getTypeName() {
 
     @Override
     public CallType getCallType() {
-        return CallType.ASYNC;
+        return CallType.SYNC;
     }
 
     private WEBBuriedPointType() {

File: skywalking-protocol/src/main/java/com/ai/cloud/skywalking/protocol/CallType.java
Patch:
@@ -10,7 +10,7 @@ public enum CallType {
         this.value = value;
     }
 
-    public CallType convert(String id) {
+    public static CallType convert(String id) {
         char v = id.charAt(0);
         switch (v) {
             case 'L':

File: skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/ai/cloud/skywalking/plugin/dubbo/SWDubboEnhanceFilter.java
Patch:
@@ -102,7 +102,7 @@ private static Identification createIdentification(Invoker<?> invoker, Invocatio
         }
 
         viewPoint.append(")");
-        return Identification.newBuilder().viewPoint(viewPoint.toString()).spanType(new DubboBuriedPointType()).build();
+        return Identification.newBuilder().viewPoint(viewPoint.toString()).spanType(DubboBuriedPointType.instance()).build();
     }
 
 

File: skywalking-sdk-plugin/httpclient-4.2.x-plugin/src/main/java/com/ai/cloud/skywalking/plugin/httpclient/v42x/HttpClientTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(String url, String traceHearName, HttpRequest httpRe
             httpRequest.setHeader(traceHearName,
                     "ContextData=" + sender.beforeSend(Identification.newBuilder()
                             .viewPoint(url)
-                            .spanType(new WEBBuriedPointType())
+                            .spanType(WEBBuriedPointType.instance())
                             .build())
                             .toString());
             return executor.execute();

File: skywalking-sdk-plugin/httpclient-4.3.x-plugin/src/main/java/com/ai/cloud/skywalking/plugin/httpclient/v43x/HttpClientTracing.java
Patch:
@@ -21,7 +21,7 @@ public static <R> R execute(String url, String traceHearName, HttpRequest httpRe
             httpRequest.setHeader(traceHearName,
                     "ContextData=" + sender.beforeSend(Identification.newBuilder()
                             .viewPoint(url)
-                            .spanType(new WEBBuriedPointType())
+                            .spanType(WEBBuriedPointType.instance())
                             .build())
                             .toString());
             return executor.execute();

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/CallableStatementTracing.java
Patch:
@@ -26,7 +26,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
 							"callableStatement."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType(new JDBCBuriedPointType()).build());
+											: ":" + sql)).spanType(JDBCBuriedPointType.instance()).build());
 			return exec.exe(realStatement, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/ConnectionTracing.java
Patch:
@@ -26,7 +26,7 @@ public static <R> R execute(java.sql.Connection realConnection,
 							"connection."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType(new JDBCBuriedPointType()).build());
+											: ":" + sql)).spanType(JDBCBuriedPointType.instance()).build());
 			return exec.exe(realConnection, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/PreparedStatementTracing.java
Patch:
@@ -26,7 +26,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
 							"preaparedStatement."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType(new JDBCBuriedPointType()).build());
+											: ":" + sql)).spanType(JDBCBuriedPointType.instance()).build());
 			return exec.exe(realStatement, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/spring-plugin/src/main/java/com/ai/cloud/skywalking/plugin/spring/TracingAspect.java
Patch:
@@ -25,7 +25,7 @@ public Object doTracing(ProceedingJoinPoint proceedingJoinPoint) throws Throwabl
                 viewPoint.append(arg.getClass().getName());
             }
             viewPoint.append(")");
-            _sender.beforeSend(Identification.newBuilder().viewPoint(viewPoint.toString()).spanType(new SpringBuriedPointType()).build());
+            _sender.beforeSend(Identification.newBuilder().viewPoint(viewPoint.toString()).spanType(SpringBuriedPointType.instance()).build());
             return proceedingJoinPoint.proceed();
         } catch (Throwable e) {
             _sender.handleException(e);

File: skywalking-sdk-plugin/web-plugin/src/main/java/com/ai/cloud/skywalking/plugin/web/SkyWalkingFilter.java
Patch:
@@ -71,7 +71,7 @@ public void doFilter(ServletRequest servletRequest, ServletResponse servletRespo
     private Identification generateIdentification(HttpServletRequest request) {
         return Identification.newBuilder()
                 .viewPoint(request.getRequestURL().toString())
-                .spanType(new WEBBuriedPointType())
+                .spanType(WEBBuriedPointType.instance())
                 .build();
     }
 

File: skywalking-api/src/main/java/com/ai/cloud/skywalking/util/ContextGenerator.java
Patch:
@@ -45,6 +45,8 @@ private static void initNewSpanData(Span spanData, Identification id) {
         spanData.setSpanType(id.getSpanType());
         spanData.setViewPointId(id.getViewPoint());
         spanData.setBusinessKey(id.getBusinessKey());
+        //FIX Add Call Type field
+        spanData.setCallType(id.getCallType());
         // 设置基本信息
         spanData.setStartDate(System.currentTimeMillis());
         spanData.setProcessNo(BuriedPointMachineUtil.getProcessNo());

File: skywalking-sdk-plugin/httpclient-4.3.x-plugin/src/main/java/com/ai/cloud/skywalking/plugin/httpclient/v43x/HttpClientTracing.java
Patch:
@@ -1,6 +1,7 @@
 package com.ai.cloud.skywalking.plugin.httpclient.v43x;
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
+import com.ai.cloud.skywalking.buriedpoint.type.WEBBuriedPointType;
 import com.ai.cloud.skywalking.conf.AuthDesc;
 import com.ai.cloud.skywalking.model.Identification;
 import org.apache.http.HttpRequest;
@@ -20,7 +21,7 @@ public static <R> R execute(String url, String traceHearName, HttpRequest httpRe
             httpRequest.setHeader(traceHearName,
                     "ContextData=" + sender.beforeSend(Identification.newBuilder()
                             .viewPoint(url)
-                            .spanType("W")
+                            .spanType(new WEBBuriedPointType())
                             .build())
                             .toString());
             return executor.execute();

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/CallableStatementTracing.java
Patch:
@@ -3,6 +3,7 @@
 import java.sql.SQLException;
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
+import com.ai.cloud.skywalking.buriedpoint.type.JDBCBuriedPointType;
 import com.ai.cloud.skywalking.model.Identification;
 
 /**
@@ -25,7 +26,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
 							"callableStatement."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType("J").build());
+											: ":" + sql)).spanType(new JDBCBuriedPointType()).build());
 			return exec.exe(realStatement, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/ConnectionTracing.java
Patch:
@@ -3,6 +3,7 @@
 import java.sql.SQLException;
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
+import com.ai.cloud.skywalking.buriedpoint.type.JDBCBuriedPointType;
 import com.ai.cloud.skywalking.model.Identification;
 
 /**
@@ -25,7 +26,7 @@ public static <R> R execute(java.sql.Connection realConnection,
 							"connection."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType("J").build());
+											: ":" + sql)).spanType(new JDBCBuriedPointType()).build());
 			return exec.exe(realConnection, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/PreparedStatementTracing.java
Patch:
@@ -3,6 +3,7 @@
 import java.sql.SQLException;
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
+import com.ai.cloud.skywalking.buriedpoint.type.JDBCBuriedPointType;
 import com.ai.cloud.skywalking.model.Identification;
 
 /**
@@ -25,7 +26,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
 							"preaparedStatement."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType("J").build());
+											: ":" + sql)).spanType(new JDBCBuriedPointType()).build());
 			return exec.exe(realStatement, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/StatementTracing.java
Patch:
@@ -3,6 +3,7 @@
 import java.sql.SQLException;
 
 import com.ai.cloud.skywalking.buriedpoint.RPCBuriedPointSender;
+import com.ai.cloud.skywalking.buriedpoint.type.JDBCBuriedPointType;
 import com.ai.cloud.skywalking.model.Identification;
 
 /**
@@ -25,7 +26,7 @@ public static <R> R execute(java.sql.Statement realStatement,
 							"statement."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType("J").build());
+											: ":" + sql)).spanType(new JDBCBuriedPointType()).build());
 			return exec.exe(realStatement, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-api/src/main/java/com/ai/cloud/skywalking/conf/Config.java
Patch:
@@ -45,6 +45,9 @@ public static class Sender {
 
 		// 是否开启发送
 		public static boolean IS_OFF = false;
+		
+		// 最大发送副本数量
+		public static int MAX_COPY_NUM = 2;
 
 		// 发送的最大长度
 		public static int MAX_SEND_LENGTH = 18500;

File: skywalking-api/src/main/java/com/ai/cloud/skywalking/model/Identification.java
Patch:
@@ -3,7 +3,7 @@
 public class Identification {
     private String viewPoint;
     private String businessKey;
-    private char spanType;
+    private String spanType;
 
     public Identification() {
         //Non
@@ -17,7 +17,7 @@ public String getBusinessKey() {
         return businessKey;
     }
     
-    public char getSpanType(){
+    public String getSpanType(){
     	return spanType;
     }
 
@@ -46,7 +46,7 @@ public IdentificationBuilder businessKey(String businessKey) {
             return this;
         }
         
-        public IdentificationBuilder spanType(char spanType) {
+        public IdentificationBuilder spanType(String spanType) {
             sendData.spanType = spanType;
             return this;
         }

File: skywalking-protocol/src/main/java/com/ai/cloud/skywalking/protocol/Span.java
Patch:
@@ -42,7 +42,7 @@ public Span(String originData) {
             exceptionStack = fieldValues[8].trim().replaceAll(SPAN_ATTR_SPILT_CHARACTER,
                     NEW_LINE_CHARACTER_PATTERN);
         }
-        spanType = fieldValues[9].charAt(0);
+        spanType = fieldValues[9];
         isReceiver = Boolean.valueOf(fieldValues[10]);
 
         businessKey = fieldValues[11].trim().replaceAll(SPAN_ATTR_SPILT_CHARACTER,

File: skywalking-protocol/src/main/java/com/ai/cloud/skywalking/protocol/SpanData.java
Patch:
@@ -16,7 +16,7 @@ public abstract class SpanData {
     protected String address = "";
     protected byte statusCode = 0;
     protected String exceptionStack;
-    protected char spanType = 'M';
+    protected String spanType = "";
     protected boolean isReceiver = false;
     protected String businessKey = "";
     protected String processNo = "";
@@ -69,11 +69,11 @@ public void setAddress(String address) {
         this.address = address;
     }
 
-    public char getSpanType() {
+    public String getSpanType() {
         return spanType;
     }
 
-    public void setSpanType(char spanType) {
+    public void setSpanType(String spanType) {
         this.spanType = spanType;
     }
 

File: skywalking-sdk-plugin/dubbo-plugin/src/main/java/com/ai/cloud/skywalking/plugin/dubbo/SWDubboEnhanceFilter.java
Patch:
@@ -87,7 +87,7 @@ private static Identification createIdentification(Invoker<?> invoker, Invocatio
         viewPoint.append(":" + invoker.getUrl().getPort());
         viewPoint.append(invoker.getUrl().getAbsolutePath());
         viewPoint.append("." + invocation.getMethodName() + "(");
-        for (Class classes : invocation.getParameterTypes()) {
+        for (Class<?> classes : invocation.getParameterTypes()) {
             viewPoint.append(classes.getSimpleName() + ",");
         }
 
@@ -96,7 +96,7 @@ private static Identification createIdentification(Invoker<?> invoker, Invocatio
         }
 
         viewPoint.append(")");
-        return Identification.newBuilder().viewPoint(viewPoint.toString()).spanType('D').build();
+        return Identification.newBuilder().viewPoint(viewPoint.toString()).spanType("D").build();
     }
 
 

File: skywalking-sdk-plugin/httpclient-plugin/src/main/java/com/ai/cloud/skywalking/plugin/httpclient/trace/HttpClientTracing.java
Patch:
@@ -15,7 +15,7 @@ public static <R> R execute(String url, String traceHearName, HttpRequest httpRe
             httpRequest.setHeader(traceHearName,
                     "ContextData=" + sender.beforeSend(Identification.newBuilder()
                             .viewPoint(url)
-                            .spanType('W')
+                            .spanType("W")
                             .build())
                             .toString());
             return executor.execute();

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/CallableStatementTracing.java
Patch:
@@ -25,7 +25,7 @@ public static <R> R execute(java.sql.CallableStatement realStatement,
 							"callableStatement."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType('J').build());
+											: ":" + sql)).spanType("J").build());
 			return exec.exe(realStatement, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/ConnectionTracing.java
Patch:
@@ -25,7 +25,7 @@ public static <R> R execute(java.sql.Connection realConnection,
 							"connection."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType('J').build());
+											: ":" + sql)).spanType("J").build());
 			return exec.exe(realConnection, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/PreparedStatementTracing.java
Patch:
@@ -25,7 +25,7 @@ public static <R> R execute(java.sql.PreparedStatement realStatement,
 							"preaparedStatement."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType('J').build());
+											: ":" + sql)).spanType("J").build());
 			return exec.exe(realStatement, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/jdbc-plugin/src/main/java/com/ai/cloud/skywalking/plugin/jdbc/tracing/StatementTracing.java
Patch:
@@ -25,7 +25,7 @@ public static <R> R execute(java.sql.Statement realStatement,
 							"statement."
 									+ method
 									+ (sql == null || sql.length() == 0 ? ""
-											: ":" + sql)).spanType('J').build());
+											: ":" + sql)).spanType("J").build());
 			return exec.exe(realStatement, sql);
 		} catch (SQLException e) {
 			sender.handleException(e);

File: skywalking-sdk-plugin/web-plugin/src/main/java/com/ai/cloud/skywalking/plugin/web/SkyWalkingFilter.java
Patch:
@@ -58,7 +58,7 @@ public void doFilter(ServletRequest servletRequest, ServletResponse servletRespo
     private Identification generateIdentification(HttpServletRequest request) {
         return Identification.newBuilder()
                 .viewPoint(request.getRequestURL().toString())
-                .spanType('W')
+                .spanType("W")
                 .build();
     }
 

File: skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/storage/chain/SaveToHBaseChain.java
Patch:
@@ -111,7 +111,7 @@ private static void bulkInsertBuriedPointData(List<BuriedPointEntry> entries) {
             } else {
                 columnName = buriedPointEntry.getParentLevel() + "." + buriedPointEntry.getLevelId();
                 if (buriedPointEntry.isReceiver()) {
-                    columnName = buriedPointEntry.getLevelId() + "-S";
+                    columnName = buriedPointEntry.getParentLevel() + "." + buriedPointEntry.getLevelId() + "-S";
                 }
                 put.addColumn(Bytes.toBytes(Config.HBaseConfig.FAMILY_COLUMN_NAME), Bytes.toBytes(columnName),
                         Bytes.toBytes(buriedPointEntry.getOriginData()));

File: skywalking-server/src/main/java/com/ai/cloud/skywalking/reciever/model/BuriedPointEntry.java
Patch:
@@ -100,7 +100,7 @@ public static BuriedPointEntry convert(String str) {
         result.statusCode = Byte.valueOf(fieldValues[7].trim());
         result.exceptionStack = fieldValues[8].trim();
         result.spanType = fieldValues[9].charAt(0);
-        result.isReceiver = Boolean.getBoolean(fieldValues[10]);
+        result.isReceiver = Boolean.valueOf(fieldValues[10]);
         result.businessKey = fieldValues[11].trim();
         result.processNo = fieldValues[12].trim();
         result.originData = str;

