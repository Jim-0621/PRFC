File: butterknife-reflect/src/main/java/butterknife/ButterKnife.java
Patch:
@@ -944,7 +944,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onTouch.value(), isRequired(method), method.getName(), View.class);
 
     ViewCollections.set(views, ON_TOUCH, (v, event) -> {
-      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v, event));
       //noinspection SimplifiableConditionalExpression
       return propagateReturn
           ? (boolean) returnValue

File: butterknife-reflect/src/main/java/butterknife/ButterKnife.java
Patch:
@@ -944,7 +944,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         findViews(source, onTouch.value(), isRequired(method), method.getName(), View.class);
 
     ViewCollections.set(views, ON_TOUCH, (v, event) -> {
-      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v, event));
       //noinspection SimplifiableConditionalExpression
       return propagateReturn
           ? (boolean) returnValue

File: butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
Patch:
@@ -23,7 +23,7 @@ public final class SimpleActivityTest {
   }
 
   protected static void verifySimpleActivityBound(SimpleActivity activity) {
-    assertThat(activity.title.getId()).isEqualTo(R.id.title);
+    assertThat(activity.title.getId()).isEqualTo(R.id.titleTv);
     assertThat(activity.subtitle.getId()).isEqualTo(R.id.subtitle);
     assertThat(activity.hello.getId()).isEqualTo(R.id.hello);
     assertThat(activity.listOfThings.getId()).isEqualTo(R.id.list_of_things);

File: butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
Patch:
@@ -18,6 +18,7 @@
 import butterknife.OnLongClick;
 import butterknife.ViewCollections;
 import com.example.butterknife.R;
+import static com.example.butterknife.R.id.titleTv;
 import java.util.List;
 
 import static android.widget.Toast.LENGTH_SHORT;
@@ -31,7 +32,7 @@ public class SimpleActivity extends Activity {
     view.startAnimation(alphaAnimation);
   };
 
-  @BindView(R.id.title) TextView title;
+  @BindView(titleTv) TextView title;
   @BindView(R.id.subtitle) TextView subtitle;
   @BindView(R.id.hello) Button hello;
   @BindView(R.id.list_of_things) ListView listOfThings;
@@ -41,7 +42,7 @@ public class SimpleActivity extends Activity {
   @BindString(R.string.by_jake_wharton) String byJakeWharton;
   @BindString(R.string.say_hello) String sayHello;
 
-  @BindViews({ R.id.title, R.id.subtitle, R.id.hello }) List<View> headerViews;
+  @BindViews({ titleTv, R.id.subtitle, R.id.hello }) List<View> headerViews;
 
   private SimpleAdapter adapter;
 

File: butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
Patch:
@@ -6,10 +6,11 @@
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
+import static android.R.color.darker_gray;
 
 public class G extends E {
 
-  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
+  @BindColor(darker_gray) @ColorInt int grayColor;
   @BindView(android.R.id.button2) View button2;
 
   public G(View view) {

File: butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
Patch:
@@ -23,6 +23,8 @@
  * Any number of parameters from
  * {@link OnEditorActionListener#onEditorAction(android.widget.TextView, int, android.view.KeyEvent)
  * onEditorAction} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnEditorActionListener
  */
@@ -40,7 +42,7 @@
             "android.view.KeyEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnEditorAction {

File: butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
Patch:
@@ -23,6 +23,8 @@
  * Any number of parameters from
  * {@link OnItemLongClickListener#onItemLongClick(android.widget.AdapterView, android.view.View,
  * int, long) onItemLongClick} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnItemLongClickListener
  */
@@ -41,7 +43,7 @@
             "long"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnItemLongClick {

File: butterknife-annotations/src/main/java/butterknife/OnLongClick.java
Patch:
@@ -22,6 +22,8 @@
  * </code></pre>
  * Any number of parameters from {@link OnLongClickListener#onLongClick(android.view.View)} may be
  * used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnLongClickListener
  */
@@ -37,7 +39,7 @@
             "android.view.View"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnLongClick {

File: butterknife-annotations/src/main/java/butterknife/OnTouch.java
Patch:
@@ -22,6 +22,8 @@
  * Any number of parameters from
  * {@link OnTouchListener#onTouch(android.view.View, android.view.MotionEvent) onTouch} may be used
  * on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnTouchListener
  */
@@ -38,7 +40,7 @@
             "android.view.MotionEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnTouch {

File: butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
Patch:
@@ -23,6 +23,8 @@
  * Any number of parameters from
  * {@link OnEditorActionListener#onEditorAction(android.widget.TextView, int, android.view.KeyEvent)
  * onEditorAction} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnEditorActionListener
  */
@@ -40,7 +42,7 @@
             "android.view.KeyEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnEditorAction {

File: butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
Patch:
@@ -23,6 +23,8 @@
  * Any number of parameters from
  * {@link OnItemLongClickListener#onItemLongClick(android.widget.AdapterView, android.view.View,
  * int, long) onItemLongClick} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnItemLongClickListener
  */
@@ -41,7 +43,7 @@
             "long"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnItemLongClick {

File: butterknife-annotations/src/main/java/butterknife/OnLongClick.java
Patch:
@@ -22,6 +22,8 @@
  * </code></pre>
  * Any number of parameters from {@link OnLongClickListener#onLongClick(android.view.View)} may be
  * used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnLongClickListener
  */
@@ -37,7 +39,7 @@
             "android.view.View"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnLongClick {

File: butterknife-annotations/src/main/java/butterknife/OnTouch.java
Patch:
@@ -22,6 +22,8 @@
  * Any number of parameters from
  * {@link OnTouchListener#onTouch(android.view.View, android.view.MotionEvent) onTouch} may be used
  * on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnTouchListener
  */
@@ -38,7 +40,7 @@
             "android.view.MotionEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnTouch {

File: butterknife-annotations/src/main/java/butterknife/BindArray.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified array resource ID. The type of array will be inferred from the
@@ -31,7 +31,7 @@
  * {@literal @}BindArray(R.array.icons) TypedArray icons;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindArray {
   /** Array resource ID to which the field will be bound. */
   @ArrayRes int value();

File: butterknife-compiler/src/main/java/butterknife/compiler/Id.java
Patch:
@@ -1,5 +1,6 @@
 package butterknife.compiler;
 
+import android.support.annotation.Nullable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.sun.tools.javac.code.Symbol;
@@ -19,7 +20,7 @@ final class Id {
     this(value, null);
   }
 
-  Id(int value, Symbol rSymbol) {
+  Id(int value, @Nullable Symbol rSymbol) {
     this.value = value;
     if (rSymbol != null) {
       ClassName className = ClassName.get(rSymbol.packge().getQualifiedName().toString(), R,

File: butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.test.InstrumentationRegistry;
 import android.util.Property;
 import android.view.View;
@@ -24,7 +25,7 @@ public class ViewCollectionsTest {
       };
   private static final Setter<View, Boolean> SETTER_ENABLED =
       new Setter<View, Boolean>() {
-        @Override public void set(@NonNull View view, Boolean value, int index) {
+        @Override public void set(@NonNull View view, @Nullable Boolean value, int index) {
           view.setEnabled(value);
         }
       };

File: butterknife-runtime/src/main/java/butterknife/Setter.java
Patch:
@@ -1,11 +1,12 @@
 package butterknife;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.annotation.UiThread;
 import android.view.View;
 
 /** A setter that can apply a value to a list of views. */
 public interface Setter<T extends View, V> {
   /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
-  @UiThread void set(@NonNull T view, V value, int index);
+  @UiThread void set(@NonNull T view, @Nullable V value, int index);
 }

File: butterknife-compiler/src/main/java/butterknife/compiler/Id.java
Patch:
@@ -1,5 +1,6 @@
 package butterknife.compiler;
 
+import android.support.annotation.Nullable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.sun.tools.javac.code.Symbol;
@@ -19,7 +20,7 @@ final class Id {
     this(value, null);
   }
 
-  Id(int value, Symbol rSymbol) {
+  Id(int value, @Nullable Symbol rSymbol) {
     this.value = value;
     if (rSymbol != null) {
       ClassName className = ClassName.get(rSymbol.packge().getQualifiedName().toString(), R,

File: butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.test.InstrumentationRegistry;
 import android.util.Property;
 import android.view.View;
@@ -24,7 +25,7 @@ public class ViewCollectionsTest {
       };
   private static final Setter<View, Boolean> SETTER_ENABLED =
       new Setter<View, Boolean>() {
-        @Override public void set(@NonNull View view, Boolean value, int index) {
+        @Override public void set(@NonNull View view, @Nullable Boolean value, int index) {
           view.setEnabled(value);
         }
       };

File: butterknife-runtime/src/main/java/butterknife/Setter.java
Patch:
@@ -1,11 +1,12 @@
 package butterknife;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.annotation.UiThread;
 import android.view.View;
 
 /** A setter that can apply a value to a list of views. */
 public interface Setter<T extends View, V> {
   /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
-  @UiThread void set(@NonNull T view, V value, int index);
+  @UiThread void set(@NonNull T view, @Nullable V value, int index);
 }

File: butterknife-annotations/src/main/java/butterknife/BindArray.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified array resource ID. The type of array will be inferred from the
@@ -31,7 +31,7 @@
  * {@literal @}BindArray(R.array.icons) TypedArray icons;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindArray {
   /** Array resource ID to which the field will be bound. */
   @ArrayRes int value();

File: butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
Patch:
@@ -12,7 +12,7 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a method to an {@link TextWatcher TextWatcher} on the view for each ID specified.
+ * Bind a method to a {@link TextWatcher TextWatcher} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTextChanged(R.id.example) void onTextChanged(CharSequence text) {
  *   Toast.makeText(this, "Text changed: " + text, Toast.LENGTH_SHORT).show();

File: butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
Patch:
@@ -12,7 +12,7 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a method to an {@link TextWatcher TextWatcher} on the view for each ID specified.
+ * Bind a method to a {@link TextWatcher TextWatcher} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTextChanged(R.id.example) void onTextChanged(CharSequence text) {
  *   Toast.makeText(this, "Text changed: " + text, Toast.LENGTH_SHORT).show();

File: butterknife-annotations/src/main/java/butterknife/BindDrawable.java
Patch:
@@ -5,6 +5,8 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import static butterknife.internal.Constants.NO_RES_ID;
+
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
@@ -23,5 +25,5 @@
   @DrawableRes int value();
 
   /** Color attribute resource ID that is used to tint the drawable. */
-  @AttrRes int tint() default 0;
+  @AttrRes int tint() default NO_RES_ID;
 }

File: butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
Patch:
@@ -4,6 +4,7 @@
 
 import static butterknife.compiler.BindingSet.CONTEXT_COMPAT;
 import static butterknife.compiler.BindingSet.UTILS;
+import static butterknife.internal.Constants.NO_RES_ID;
 
 final class FieldDrawableBinding implements ResourceBinding {
   private final Id id;
@@ -25,7 +26,7 @@ final class FieldDrawableBinding implements ResourceBinding {
   }
 
   @Override public CodeBlock render(int sdk) {
-    if (tintAttributeId.value != 0) {
+    if (tintAttributeId.value != NO_RES_ID) {
       return CodeBlock.of("target.$L = $T.getTintedDrawable(context, $L, $L)", name, UTILS, id.code,
           tintAttributeId.code);
     }

File: butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
Patch:
@@ -47,13 +47,13 @@ enum TypefaceStyles {
   }
 
   @Override public boolean requiresResources(int sdk) {
-    return true;
+    return sdk >= 26;
   }
 
   @Override public CodeBlock render(int sdk) {
     CodeBlock typeface = sdk >= 26
         ? CodeBlock.of("res.getFont($L)", id.code)
-        : CodeBlock.of("$T.getFont(res, $L)", RESOURCES_COMPAT, id.code);
+        : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);
     if (style != TypefaceStyles.NORMAL) {
       typeface = CodeBlock.of("$1T.create($2L, $1T.$3L)", TYPEFACE, typeface, style);
     }

File: butterknife/src/test/java/butterknife/BindFontTest.java
Patch:
@@ -10,7 +10,6 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class BindFontTest {
-  @Ignore("Won't compile until we depend on support library 26.0.0")
   @Test public void simpleTypeface() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -116,7 +115,6 @@ public class BindFontTest {
         .generatesSources(bindingSource);
   }
 
-  @Ignore("Won't compile until we depend on support library 26.0.0")
   @Test public void style() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -153,7 +151,7 @@ public class BindFontTest {
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
         + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = ResourcesCompat.getFont(context, Typeface.BOLD);\n"
+        + "    target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"

File: butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
Patch:
@@ -52,8 +52,6 @@ final class BindingSet {
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
-  static final ClassName RESOURCES_COMPAT =
-      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
 

File: butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
Patch:
@@ -20,8 +20,6 @@ enum Type {
     DIMEN_AS_INT("getDimensionPixelSize"),
     DIMEN_AS_FLOAT("getDimension"),
     FLOAT(new ResourceMethod(BindingSet.UTILS, "getFloat", false, 1)),
-    FONT(new ResourceMethod(BindingSet.RESOURCES_COMPAT, "getFont", false, 1),
-        new ResourceMethod(null, "getFont", true, 26)),
     INT("getInteger"),
     INT_ARRAY("getIntArray"),
     STRING("getString"),

File: butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
Patch:
@@ -52,8 +52,6 @@ final class BindingSet {
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
-  static final ClassName RESOURCES_COMPAT =
-      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
 

File: butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
Patch:
@@ -20,8 +20,6 @@ enum Type {
     DIMEN_AS_INT("getDimensionPixelSize"),
     DIMEN_AS_FLOAT("getDimension"),
     FLOAT(new ResourceMethod(BindingSet.UTILS, "getFloat", false, 1)),
-    FONT(new ResourceMethod(BindingSet.RESOURCES_COMPAT, "getFont", false, 1),
-        new ResourceMethod(null, "getFont", true, 26)),
     INT("getInteger"),
     INT_ARRAY("getIntArray"),
     STRING("getString"),

File: butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
Patch:
@@ -52,6 +52,8 @@ final class BindingSet {
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
+  static final ClassName RESOURCES_COMPAT =
+      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
 

File: butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
Patch:
@@ -20,6 +20,8 @@ enum Type {
     DIMEN_AS_INT("getDimensionPixelSize"),
     DIMEN_AS_FLOAT("getDimension"),
     FLOAT(new ResourceMethod(BindingSet.UTILS, "getFloat", false, 1)),
+    FONT(new ResourceMethod(BindingSet.RESOURCES_COMPAT, "getFont", false, 1),
+        new ResourceMethod(null, "getFont", true, 26)),
     INT("getInteger"),
     INT_ARRAY("getIntArray"),
     STRING("getString"),

File: butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
Patch:
@@ -52,6 +52,8 @@ final class BindingSet {
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
+  static final ClassName RESOURCES_COMPAT =
+      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
 

File: butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
Patch:
@@ -20,6 +20,8 @@ enum Type {
     DIMEN_AS_INT("getDimensionPixelSize"),
     DIMEN_AS_FLOAT("getDimension"),
     FLOAT(new ResourceMethod(BindingSet.UTILS, "getFloat", false, 1)),
+    FONT(new ResourceMethod(BindingSet.RESOURCES_COMPAT, "getFont", false, 1),
+        new ResourceMethod(null, "getFont", true, 26)),
     INT("getInteger"),
     INT_ARRAY("getIntArray"),
     STRING("getString"),

File: butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
Patch:
@@ -464,8 +464,9 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
               int listenerPosition = parameter.getListenerPosition();
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),
-                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);
+                builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)",
+                    UTILS, listenerPosition, method.name(), listenerPosition,
+                    methodBinding.getName(), i, parameter.getType());
               } else {
                 builder.add("p$L", listenerPosition);
               }

File: butterknife/src/main/java/butterknife/internal/Utils.java
Patch:
@@ -120,10 +120,10 @@ public static <T> T castView(View view, @IdRes int id, String who, Class<T> cls)
     }
   }
 
-  @SuppressWarnings("unchecked") // That's the point.
-  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {
+  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos,
+      Class<T> cls) {
     try {
-      return (T) value;
+      return cls.cast(value);
     } catch (ClassCastException e) {
       throw new IllegalStateException("Parameter #"
           + (fromPos + 1)

File: butterknife/src/test/java/butterknife/OnClickTest.java
Patch:
@@ -324,23 +324,23 @@ public class OnClickTest {
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n"
+        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
         + "    view3 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n"
+        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
         + "    view4 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n"
+        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"

File: butterknife/src/test/java/butterknife/OnItemClickTest.java
Patch:
@@ -162,7 +162,7 @@ public class OnItemClickTest {
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class), p2);\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
@@ -222,7 +222,7 @@ public class OnItemClickTest {
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class)\n"
         + "        , p2);\n"
         + "      }\n"
         + "    });\n"

File: butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
Patch:
@@ -81,7 +81,7 @@ private static void addResourceType(List<String> supportedTypes, TypeSpec.Builde
   }
 
   private static boolean isInt(FieldDeclaration field) {
-    Type type = field.getElementType();
+    Type type = field.getCommonType();
     return type instanceof PrimitiveType
         && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.INT;
   }

File: butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
Patch:
@@ -464,9 +464,8 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
               int listenerPosition = parameter.getListenerPosition();
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)",
-                    UTILS, listenerPosition, method.name(), listenerPosition,
-                    methodBinding.getName(), i, parameter.getType());
+                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),
+                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);
               } else {
                 builder.add("p$L", listenerPosition);
               }

File: butterknife/src/main/java/butterknife/internal/Utils.java
Patch:
@@ -120,10 +120,10 @@ public static <T> T castView(View view, @IdRes int id, String who, Class<T> cls)
     }
   }
 
-  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos,
-      Class<T> cls) {
+  @SuppressWarnings("unchecked") // That's the point.
+  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {
     try {
-      return cls.cast(value);
+      return (T) value;
     } catch (ClassCastException e) {
       throw new IllegalStateException("Parameter #"
           + (fromPos + 1)

File: butterknife/src/test/java/butterknife/OnClickTest.java
Patch:
@@ -324,23 +324,23 @@ public class OnClickTest {
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
+        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
         + "    view3 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
+        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
         + "    view4 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
+        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"

File: butterknife/src/test/java/butterknife/OnItemClickTest.java
Patch:
@@ -162,7 +162,7 @@ public class OnItemClickTest {
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class), p2);\n"
+        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
@@ -222,7 +222,7 @@ public class OnItemClickTest {
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class)\n"
+        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n"
         + "        , p2);\n"
         + "      }\n"
         + "    });\n"

File: butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
Patch:
@@ -464,8 +464,9 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
               int listenerPosition = parameter.getListenerPosition();
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),
-                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);
+                builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)",
+                    UTILS, listenerPosition, method.name(), listenerPosition,
+                    methodBinding.getName(), i, parameter.getType());
               } else {
                 builder.add("p$L", listenerPosition);
               }

File: butterknife/src/main/java/butterknife/internal/Utils.java
Patch:
@@ -120,10 +120,10 @@ public static <T> T castView(View view, @IdRes int id, String who, Class<T> cls)
     }
   }
 
-  @SuppressWarnings("unchecked") // That's the point.
-  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {
+  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos,
+      Class<T> cls) {
     try {
-      return (T) value;
+      return cls.cast(value);
     } catch (ClassCastException e) {
       throw new IllegalStateException("Parameter #"
           + (fromPos + 1)

File: butterknife/src/test/java/butterknife/OnClickTest.java
Patch:
@@ -324,23 +324,23 @@ public class OnClickTest {
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n"
+        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
         + "    view3 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n"
+        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
         + "    view4 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n"
+        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"

File: butterknife/src/test/java/butterknife/OnItemClickTest.java
Patch:
@@ -162,7 +162,7 @@ public class OnItemClickTest {
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class), p2);\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
@@ -222,7 +222,7 @@ public class OnItemClickTest {
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class)\n"
         + "        , p2);\n"
         + "      }\n"
         + "    });\n"

File: butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
Patch:
@@ -462,8 +462,9 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
               int listenerPosition = parameter.getListenerPosition();
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),
-                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);
+                builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)",
+                    UTILS, listenerPosition, method.name(), listenerPosition,
+                    methodBinding.getName(), i, parameter.getType());
               } else {
                 builder.add("p$L", listenerPosition);
               }

File: butterknife/src/main/java/butterknife/internal/Utils.java
Patch:
@@ -120,10 +120,10 @@ public static <T> T castView(View view, @IdRes int id, String who, Class<T> cls)
     }
   }
 
-  @SuppressWarnings("unchecked") // That's the point.
-  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {
+  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos,
+      Class<T> cls) {
     try {
-      return (T) value;
+      return cls.cast(value);
     } catch (ClassCastException e) {
       throw new IllegalStateException("Parameter #"
           + (fromPos + 1)

File: butterknife/src/test/java/butterknife/OnClickTest.java
Patch:
@@ -324,23 +324,23 @@ public class OnClickTest {
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n"
+        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
         + "    view3 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n"
+        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
         + "    view4 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n"
+        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"

File: butterknife/src/test/java/butterknife/OnItemClickTest.java
Patch:
@@ -162,7 +162,7 @@ public class OnItemClickTest {
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class), p2);\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
@@ -222,7 +222,7 @@ public class OnItemClickTest {
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class)\n"
         + "        , p2);\n"
         + "      }\n"
         + "    });\n"

File: butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
Patch:
@@ -703,7 +703,7 @@ private void parseResourceDrawable(Element element,
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     FieldDrawableBinding binding = new FieldDrawableBinding(getId(id), name, getId(tint));
-    builder.addDrawable(binding);
+    builder.addResource(binding);
 
     erasedTargetNames.add(enclosingElement);
   }

File: butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
Patch:
@@ -703,7 +703,7 @@ private void parseResourceDrawable(Element element,
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     FieldDrawableBinding binding = new FieldDrawableBinding(getId(id), name, getId(tint));
-    builder.addDrawable(binding);
+    builder.addResource(binding);
 
     erasedTargetNames.add(enclosingElement);
   }

File: butterknife-annotations/src/main/java/butterknife/BindFloat.java
Patch:
@@ -12,7 +12,7 @@
  * <p>
  * This is different than simply reading a normal dimension as a float value which
  * {@link BindDimen @BindDimen} supports. The resource must be defined as a float like
- * {@code <item name="whatever" type="float">1.1</item>}.
+ * {@code <item name="whatever" format="float" type="dimen">1.1</item>}.
  * <pre><code>
  * {@literal @}BindFloat(R.dimen.image_ratio) float imageRatio;
  * </code></pre>

File: butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
+import com.example.butterknife.R;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;

File: butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
Patch:
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
+import com.example.butterknife.R;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricGradleTestRunner;

File: butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
Patch:
@@ -1162,7 +1162,9 @@ private void scanForRClasses(RoundEnvironment env) {
     for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
       for (Element element : env.getElementsAnnotatedWith(annotation)) {
         JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
-        tree.accept(scanner);
+        if (tree != null) { // tree can be null if the references are compiled types and not source
+          tree.accept(scanner);
+        }
       }
     }
 

File: butterknife-compiler/src/test/java/butterknife/RClassTest.java
Patch:
@@ -111,7 +111,7 @@ public class RClassTest {
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
         + "  protected static void bindToTarget(Test target, Resources res) {\n"
-        + "    target.one = res.getInteger(test.R.integer.res);\n"
+        + "    target.one = res.getInteger(R.integer.res);\n"
         + "  }\n"
         + "}"
     );
@@ -153,7 +153,7 @@ public class RClassTest {
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
         + "  protected static void bindToTarget(Test target, Resources res) {\n"
-        + "    target.bool = res.getBoolean(test.R.bool.res);\n"
+        + "    target.bool = res.getBoolean(R.bool.res);\n"
         + "  }\n"
         + "}"
     );

File: butterknife-compiler/src/test/java/butterknife/RClassTest.java
Patch:
@@ -111,7 +111,7 @@ public class RClassTest {
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
         + "  protected static void bindToTarget(Test target, Resources res) {\n"
-        + "    target.one = res.getInteger(test.R.integer.res);\n"
+        + "    target.one = res.getInteger(R.integer.res);\n"
         + "  }\n"
         + "}"
     );
@@ -153,7 +153,7 @@ public class RClassTest {
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
         + "  protected static void bindToTarget(Test target, Resources res) {\n"
-        + "    target.bool = res.getBoolean(test.R.bool.res);\n"
+        + "    target.bool = res.getBoolean(R.bool.res);\n"
         + "  }\n"
         + "}"
     );

File: butterknife/src/main/java/butterknife/ButterKnife.java
Patch:
@@ -152,7 +152,7 @@ public static Unbinder bind(@NonNull Dialog target) {
    * @param source Activity on which IDs will be looked up.
    */
   public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
-    return getViewBinder(target).bind(Finder.VIEW, target, source);
+    return getViewBinder(target).bind(Finder.ACTIVITY, target, source);
   }
 
   /**

File: butterknife/src/main/java/butterknife/ButterKnife.java
Patch:
@@ -152,7 +152,7 @@ public static Unbinder bind(@NonNull Dialog target) {
    * @param source Activity on which IDs will be looked up.
    */
   public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
-    return getViewBinder(target).bind(Finder.VIEW, target, source);
+    return getViewBinder(target).bind(Finder.ACTIVITY, target, source);
   }
 
   /**

File: butterknife-compiler/src/test/java/butterknife/OnClickTest.java
Patch:
@@ -327,7 +327,7 @@ public class OnClickTest {
         + "    private View view2;\n"
         + "    private View view3;\n"
         + "    private View view4;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "    protected InnerUnbinder(final T target, final Finder finder, Object source) {\n"
         + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 0, \"method 'click0'\");\n"

File: butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
Patch:
@@ -171,7 +171,7 @@ public class OnItemClickTest {
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
         + "    private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "    protected InnerUnbinder(final T target, final Finder finder, Object source) {\n"
         + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -236,7 +236,7 @@ public class OnItemClickTest {
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
         + "    private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "    protected InnerUnbinder(final T target, final Finder finder, Object source) {\n"
         + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"

File: butterknife-compiler/src/test/java/butterknife/OnClickTest.java
Patch:
@@ -327,7 +327,7 @@ public class OnClickTest {
         + "    private View view2;\n"
         + "    private View view3;\n"
         + "    private View view4;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "    protected InnerUnbinder(final T target, final Finder finder, Object source) {\n"
         + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 0, \"method 'click0'\");\n"

File: butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
Patch:
@@ -171,7 +171,7 @@ public class OnItemClickTest {
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
         + "    private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "    protected InnerUnbinder(final T target, final Finder finder, Object source) {\n"
         + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -236,7 +236,7 @@ public class OnItemClickTest {
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
         + "    private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "    protected InnerUnbinder(final T target, final Finder finder, Object source) {\n"
         + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"

File: butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java
Patch:
@@ -33,12 +33,12 @@ public class BindBitmapTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
+        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "    bindToTarget(target, res);\n"
         + "    return Unbinder.EMPTY;\n"
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source) {\n"
-        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "  protected static void bindToTarget(final Test target, Resources res) {\n"
         + "    target.one = BitmapFactory.decodeResource(res, 1);\n"
         + "  }\n"
         + "}"

File: butterknife-compiler/src/test/java/butterknife/BindBoolTest.java
Patch:
@@ -31,12 +31,12 @@ public class BindBoolTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
+        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "    bindToTarget(target, res);\n"
         + "    return Unbinder.EMPTY;\n"
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source) {\n"
-        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "  protected static void bindToTarget(final Test target, Resources res) {\n"
         + "    target.one = res.getBoolean(1);\n"
         + "  }\n"
         + "}"

File: butterknife-compiler/src/test/java/butterknife/BindIntTest.java
Patch:
@@ -31,12 +31,12 @@ public class BindIntTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
+        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "    bindToTarget(target, res);\n"
         + "    return Unbinder.EMPTY;\n"
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source) {\n"
-        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "  protected static void bindToTarget(final Test target, Resources res) {\n"
         + "    target.one = res.getInteger(1);\n"
         + "  }\n"
         + "}"

File: butterknife-compiler/src/test/java/butterknife/BindStringTest.java
Patch:
@@ -31,12 +31,12 @@ public class BindStringTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
+        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "    bindToTarget(target, res);\n"
         + "    return Unbinder.EMPTY;\n"
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source) {\n"
-        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "  protected static void bindToTarget(final Test target, Resources res) {\n"
         + "    target.one = res.getString(1);\n"
         + "  }\n"
         + "}"

File: butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
Patch:
@@ -36,6 +36,7 @@
 @ListenerClass(
     targetType = "android.widget.TextView",
     setter = "addTextChangedListener",
+    remover = "removeTextChangedListener",
     type = "android.text.TextWatcher",
     callbacks = OnTextChanged.Callback.class
 )

File: butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
Patch:
@@ -1109,10 +1109,11 @@ private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targe
     if (bindingClass == null) {
       String targetType = enclosingElement.getQualifiedName().toString();
       String classPackage = getPackageName(enclosingElement);
+      boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
       String className = getClassName(enclosingElement, classPackage) + BINDING_CLASS_SUFFIX;
       String classFqcn = getFqcn(enclosingElement) + BINDING_CLASS_SUFFIX;
 
-      bindingClass = new BindingClass(classPackage, className, targetType, classFqcn);
+      bindingClass = new BindingClass(classPackage, className, isFinal, targetType, classFqcn);
       targetClassMap.put(enclosingElement, bindingClass);
     }
     return bindingClass;

File: butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
Patch:
@@ -1109,10 +1109,11 @@ private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targe
     if (bindingClass == null) {
       String targetType = enclosingElement.getQualifiedName().toString();
       String classPackage = getPackageName(enclosingElement);
+      boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
       String className = getClassName(enclosingElement, classPackage) + BINDING_CLASS_SUFFIX;
       String classFqcn = getFqcn(enclosingElement) + BINDING_CLASS_SUFFIX;
 
-      bindingClass = new BindingClass(classPackage, className, targetType, classFqcn);
+      bindingClass = new BindingClass(classPackage, className, isFinal, targetType, classFqcn);
       targetClassMap.put(enclosingElement, bindingClass);
     }
     return bindingClass;

File: butterknife-compiler/src/test/java/butterknife/internal/ViewBinder.java
Patch:
@@ -1,5 +1,7 @@
 package butterknife.internal;
 
+import butterknife.Unbinder;
+
 public interface ViewBinder<T> {
-  void bind(Finder finder, T target, Object source);
+  Unbinder bind(Finder finder, T target, Object source);
 }

File: butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
Patch:
@@ -10,12 +10,10 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import butterknife.Unbinder;
 import java.util.List;
 
 import butterknife.Bind;
 import butterknife.ButterKnife;
-import butterknife.ButterKnife.ViewUnbinder;
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
@@ -38,7 +36,6 @@ public class SimpleActivity extends Activity {
   @Bind(R.id.hello) Button hello;
   @Bind(R.id.list_of_things) ListView listOfThings;
   @Bind(R.id.footer) TextView footer;
-  @Unbinder ViewUnbinder unbinder;
 
   @Bind({ R.id.title, R.id.subtitle, R.id.hello })
   List<View> headerViews;

File: butterknife/src/main/java/butterknife/internal/Utils.java
Patch:
@@ -22,6 +22,8 @@ private static boolean hasSupportV4() {
       return true;
     } catch (ClassNotFoundException ignored) {
       return false;
+    } catch (VerifyError ignored) {
+      return false;
     }
   }
 

File: butterknife/src/main/java/butterknife/internal/ViewBinder.java
Patch:
@@ -1,5 +1,7 @@
 package butterknife.internal;
 
+import butterknife.Unbinder;
+
 public interface ViewBinder<T> {
-  void bind(Finder finder, T target, Object source);
+  Unbinder bind(Finder finder, T target, Object source);
 }

File: butterknife-compiler/src/test/java/butterknife/BindTest.java
Patch:
@@ -527,9 +527,9 @@ public class BindTest {
             "import android.content.Context;",
             "import android.view.View;",
             "import butterknife.OnClick;",
+            "import butterknife.Optional;",
             "public class Test extends View {",
-            "  @interface Nullable {}",
-            "  @Nullable @OnClick void doStuff() {}",
+            "  @Optional @OnClick void doStuff() {}",
             "  public Test(Context context) {",
             "    super(context);",
             "  }",
@@ -540,7 +540,7 @@ public class BindTest {
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
-            ("ID-free binding must not be annotated with @Nullable. (test.Test.doStuff)"))
+            ("ID-free binding must not be annotated with @Optional. (test.Test.doStuff)"))
         .in(source)
         .onLine(7);
   }

File: butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
Patch:
@@ -196,11 +196,11 @@ public class UnbinderTest {
               "import android.support.v4.app.Fragment;",
               "import butterknife.ButterKnife;",
               "import butterknife.OnClick;",
+              "import butterknife.Optional;",
               "import butterknife.Unbinder;",
               "public class Test extends Fragment {",
-              "  @interface Nullable {}",
               "  @Unbinder ButterKnife.Unbinder unbinder;",
-              "  @Nullable @OnClick(1) void doStuff() {",
+              "  @Optional @OnClick(1) void doStuff() {",
               "  }",
               "}"
           ));

File: butterknife/src/main/java/butterknife/ButterKnife.java
Patch:
@@ -65,8 +65,9 @@
  * </code></pre>
  * <p>
  * Be default, views are required to be present in the layout for both field and method bindings.
- * If a view is optional add a {@code @Nullable} annotation such as the one in the
- * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library.
+ * If a view is optional add a {@code @Nullable} annotation for fields (such as the one in the
+ * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library)
+ * or the {@code @Optional} annotation for methods.
  * <pre><code>
  * {@literal @}Nullable @Bind(R.id.title) TextView subtitleView;
  * </code></pre>

File: butterknife/src/main/java/butterknife/internal/Finder.java
Patch:
@@ -54,7 +54,8 @@ public <T> T findRequiredView(Object source, int id, String who) {
           + id
           + " for "
           + who
-          + " was not found. If this view is optional add '@Nullable' annotation.");
+          + " was not found. If this view is optional add '@Nullable' (fields) or '@Optional'"
+          + " (methods) annotation.");
     }
     return view;
   }

File: butterknife/src/test/java/butterknife/internal/FinderTest.java
Patch:
@@ -22,7 +22,7 @@ public final class FinderTest {
     } catch (IllegalStateException e) {
       assertThat(e).hasMessage("Required view 'button1' with ID "
           + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
     }
   }
 
@@ -35,7 +35,7 @@ public final class FinderTest {
     } catch (IllegalStateException e) {
       assertThat(e).hasMessage("Required view '<unavailable while editing>' "
           + "with ID " + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
     }
   }
 }

File: butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
Patch:
@@ -771,7 +771,7 @@ private void parseBindUnbinder(Element element, Map<TypeElement, BindingClass> t
 
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass != null) {
-      if (bindingClass.hasRequestedUnbinder()) {
+      if (bindingClass.hasUnbinder()) {
         error(element,
             "Only one filed should be annotated with @%s. (%s.%s)",
             Unbinder.class.getSimpleName(), enclosingElement.getQualifiedName(),

File: butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
Patch:
@@ -771,7 +771,7 @@ private void parseBindUnbinder(Element element, Map<TypeElement, BindingClass> t
 
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass != null) {
-      if (bindingClass.hasRequestedUnbinder()) {
+      if (bindingClass.hasUnbinder()) {
         error(element,
             "Only one filed should be annotated with @%s. (%s.%s)",
             Unbinder.class.getSimpleName(), enclosingElement.getQualifiedName(),

File: butterknife/src/main/java/butterknife/ButterKnife.java
Patch:
@@ -73,9 +73,9 @@
  * </code></pre>
  * Resources can also be bound to fields to simplify programmatically working with views:
  * <pre><code>
- * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;
- * {@literal @}ResourceInt(R.int.columns) int columns;
- * {@literal @}ResourceColor(R.color.error_red) int errorRed;
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindInt(R.integer.columns) int columns;
+ * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
  */
 public final class ButterKnife {

File: butterknife/src/main/java/butterknife/ButterKnife.java
Patch:
@@ -73,9 +73,9 @@
  * </code></pre>
  * Resources can also be bound to fields to simplify programmatically working with views:
  * <pre><code>
- * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;
- * {@literal @}ResourceInt(R.int.columns) int columns;
- * {@literal @}ResourceColor(R.color.error_red) int errorRed;
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindInt(R.integer.columns) int columns;
+ * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
  */
 public final class ButterKnife {

File: butterknife/src/main/java/butterknife/OnCheckedChanged.java
Patch:
@@ -15,7 +15,7 @@
  * each ID specified.
  * <pre><code>
  * {@literal @}OnCheckedChanged(R.id.example) void onChecked(boolean checked) {
- *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from

File: butterknife/src/main/java/butterknife/OnClick.java
Patch:
@@ -14,7 +14,7 @@
  * Bind a method to an {@link OnClickListener OnClickListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnClick(R.id.example) void onClick() {
- *   Toast.makeText(this, "Clicked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Clicked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from

File: butterknife/src/main/java/butterknife/OnEditorAction.java
Patch:
@@ -15,7 +15,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnEditorAction(R.id.example) boolean onEditorAction(KeyEvent key) {
- *   Toast.makeText(this, "Pressed: " + key, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Pressed: " + key, Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>

File: butterknife/src/main/java/butterknife/OnFocusChange.java
Patch:
@@ -15,7 +15,7 @@
  * specified.
  * <pre><code>
  * {@literal @}OnFocusChange(R.id.example) void onFocusChanged(boolean focused) {
- *   Toast.makeText(this, focused ? "Gained focus" : "Lost focus", LENGTH_SHORT).show();
+ *   Toast.makeText(this, focused ? "Gained focus" : "Lost focus", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link OnFocusChangeListener#onFocusChange(android.view.View,

File: butterknife/src/main/java/butterknife/OnItemClick.java
Patch:
@@ -15,7 +15,7 @@
  * specified.
  * <pre><code>
  * {@literal @}OnItemClick(R.id.example_list) void onItemClick(int position) {
- *   Toast.makeText(this, "Clicked position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link OnItemClickListener#onItemClick(android.widget.AdapterView,

File: butterknife/src/main/java/butterknife/OnItemLongClick.java
Patch:
@@ -15,7 +15,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnItemLongClick(R.id.example_list) boolean onItemLongClick(int position) {
- *   Toast.makeText(this, "Long clicked position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Long clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>

File: butterknife/src/main/java/butterknife/OnItemSelected.java
Patch:
@@ -15,7 +15,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnItemSelected(R.id.example_list) void onItemSelected(int position) {
- *   Toast.makeText(this, "Selected position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Selected position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
@@ -26,7 +26,7 @@
  * <pre><code>
  * {@literal @}OnItemSelected(value = R.id.example_list, callback = NOTHING_SELECTED)
  * void onNothingSelected() {
- *   Toast.makeText(this, "Nothing selected!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Nothing selected!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  *

File: butterknife/src/main/java/butterknife/OnLongClick.java
Patch:
@@ -15,7 +15,7 @@
  * specified.
  * <pre><code>
  * {@literal @}OnLongClick(R.id.example) boolean onLongClick() {
- *   Toast.makeText(this, "Long clicked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Long clicked!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>

File: butterknife/src/main/java/butterknife/OnPageChange.java
Patch:
@@ -13,7 +13,7 @@
  * Bind a method to an {@code OnPageChangeListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnPageChange(R.id.example_pager) void onPageSelected(int position) {
- *   Toast.makeText(this, "Selected " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Selected " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@code onPageSelected} may be used on the method.
@@ -22,7 +22,7 @@
  * <pre><code>
  * {@literal @}OnPageChange(value = R.id.example_pager, callback = PAGE_SCROLL_STATE_CHANGED)
  * void onPageStateChanged(int state) {
- *   Toast.makeText(this, "State changed: " + state + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "State changed: " + state + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  */

File: butterknife/src/main/java/butterknife/OnTextChanged.java
Patch:
@@ -14,7 +14,7 @@
  * Bind a method to an {@link TextWatcher TextWatcher} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTextChanged(R.id.example) void onTextChanged(CharSequence text) {
- *   Toast.makeText(this, "Text changed: " + text, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Text changed: " + text, Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link TextWatcher#onTextChanged(CharSequence, int, int, int)
@@ -24,7 +24,7 @@
  * <pre><code>
  * {@literal @}OnTextChanged(value = R.id.example, callback = BEFORE_TEXT_CHANGED)
  * void onBeforeTextChanged(CharSequence text) {
- *   Toast.makeText(this, "Before text changed: " + text, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Before text changed: " + text, Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  *

File: butterknife/src/main/java/butterknife/OnTouch.java
Patch:
@@ -14,7 +14,7 @@
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTouch(R.id.example) boolean onTouch() {
- *   Toast.makeText(this, "Touched!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Touched!", Toast.LENGTH_SHORT).show();
  *   return false;
  * }
  * </code></pre>

File: butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
Patch:
@@ -1,6 +1,6 @@
 package butterknife.internal;
 
-final class FieldCollectionBinding implements Binding {
+final class FieldCollectionViewBinding implements ViewBinding {
   enum Kind {
     ARRAY,
     LIST
@@ -11,7 +11,7 @@ enum Kind {
   private final Kind kind;
   private final boolean required;
 
-  FieldCollectionBinding(String name, String type, Kind kind, boolean required) {
+  FieldCollectionViewBinding(String name, String type, Kind kind, boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;

File: butterknife/src/main/java/butterknife/internal/FieldViewBinding.java
Patch:
@@ -2,12 +2,12 @@
 
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
 
-final class FieldBinding implements Binding {
+final class FieldViewBinding implements ViewBinding {
   private final String name;
   private final String type;
   private final boolean required;
 
-  FieldBinding(String name, String type, boolean required) {
+  FieldViewBinding(String name, String type, boolean required) {
     this.name = name;
     this.type = type;
     this.required = required;

File: butterknife/src/main/java/butterknife/internal/MethodViewBinding.java
Patch:
@@ -4,12 +4,12 @@
 import java.util.Collections;
 import java.util.List;
 
-final class MethodBinding implements Binding {
+final class MethodViewBinding implements ViewBinding {
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
 
-  MethodBinding(String name, List<Parameter> parameters, boolean required) {
+  MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<Parameter>(parameters));
     this.required = required;

File: butterknife/src/main/java/butterknife/internal/ViewBinding.java
Patch:
@@ -1,7 +1,7 @@
 package butterknife.internal;
 
 /** A field or method view binding. */
-interface Binding {
+interface ViewBinding {
   /** A description of the binding in human readable form (e.g., "field 'foo'"). */
   String getDescription();
 }

File: butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
Patch:
@@ -1,6 +1,6 @@
 package butterknife.internal;
 
-final class FieldCollectionBinding implements Binding {
+final class FieldCollectionViewBinding implements ViewBinding {
   enum Kind {
     ARRAY,
     LIST
@@ -11,7 +11,7 @@ enum Kind {
   private final Kind kind;
   private final boolean required;
 
-  FieldCollectionBinding(String name, String type, Kind kind, boolean required) {
+  FieldCollectionViewBinding(String name, String type, Kind kind, boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;

File: butterknife/src/main/java/butterknife/internal/FieldViewBinding.java
Patch:
@@ -2,12 +2,12 @@
 
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
 
-final class FieldBinding implements Binding {
+final class FieldViewBinding implements ViewBinding {
   private final String name;
   private final String type;
   private final boolean required;
 
-  FieldBinding(String name, String type, boolean required) {
+  FieldViewBinding(String name, String type, boolean required) {
     this.name = name;
     this.type = type;
     this.required = required;

File: butterknife/src/main/java/butterknife/internal/MethodViewBinding.java
Patch:
@@ -4,12 +4,12 @@
 import java.util.Collections;
 import java.util.List;
 
-final class MethodBinding implements Binding {
+final class MethodViewBinding implements ViewBinding {
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
 
-  MethodBinding(String name, List<Parameter> parameters, boolean required) {
+  MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<Parameter>(parameters));
     this.required = required;

File: butterknife/src/main/java/butterknife/internal/ViewBinding.java
Patch:
@@ -1,7 +1,7 @@
 package butterknife.internal;
 
 /** A field or method view binding. */
-interface Binding {
+interface ViewBinding {
   /** A description of the binding in human readable form (e.g., "field 'foo'"). */
   String getDescription();
 }

File: butterknife/src/main/java/butterknife/OnTouch.java
Patch:
@@ -13,8 +13,9 @@
 /**
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
  * <pre><code>
- * {@literal @}OnTouch(R.id.example) void onTouch() {
+ * {@literal @}OnTouch(R.id.example) boolean onTouch() {
  *   Toast.makeText(this, "Touched!", LENGTH_SHORT).show();
+ *   return false;
  * }
  * </code></pre>
  * Any number of parameters from

File: butterknife/src/main/java/butterknife/OnTouch.java
Patch:
@@ -13,8 +13,9 @@
 /**
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
  * <pre><code>
- * {@literal @}OnTouch(R.id.example) void onTouch() {
+ * {@literal @}OnTouch(R.id.example) boolean onTouch() {
  *   Toast.makeText(this, "Touched!", LENGTH_SHORT).show();
+ *   return false;
  * }
  * </code></pre>
  * Any number of parameters from

File: butterknife/src/main/java/butterknife/OnTextChanged.java
Patch:
@@ -23,7 +23,7 @@
  * To bind to methods other than {@code onTextChanged}, specify a different {@code callback}.
  * <pre><code>
  * {@literal @}OnTextChanged(value = R.id.example, callback = BEFORE_TEXT_CHANGED)
- * void onBeforeTextChanged(CharSequence text {
+ * void onBeforeTextChanged(CharSequence text) {
  *   Toast.makeText(this, "Before text changed: " + text, LENGTH_SHORT).show();
  * }
  * </code></pre>

File: butterknife/src/main/java/butterknife/OnTextChanged.java
Patch:
@@ -23,7 +23,7 @@
  * To bind to methods other than {@code onTextChanged}, specify a different {@code callback}.
  * <pre><code>
  * {@literal @}OnTextChanged(value = R.id.example, callback = BEFORE_TEXT_CHANGED)
- * void onBeforeTextChanged(CharSequence text {
+ * void onBeforeTextChanged(CharSequence text) {
  *   Toast.makeText(this, "Before text changed: " + text, LENGTH_SHORT).show();
  * }
  * </code></pre>

File: butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnCheckedChangedTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.CompoundButton) view).setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {",

File: butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnEditorActionTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.TextView) view).setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {",

File: butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnFocusChangeTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener() {",

File: butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnItemLongClickTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener() {",

File: butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
Patch:
@@ -30,7 +30,7 @@ public class OnLongClickTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnLongClickListener(",

File: butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnPageChangeTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.support.v4.view.ViewPager) view).setOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() {",

File: butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnTextChangedTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.TextView) view).addTextChangedListener(new android.text.TextWatcher() {",

File: butterknife/src/test/java/butterknife/internal/OnTouchTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnTouchTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnTouchListener(new android.view.View.OnTouchListener() {",

File: butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnCheckedChangedTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.CompoundButton) view).setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {",

File: butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnEditorActionTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.TextView) view).setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {",

File: butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnFocusChangeTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener() {",

File: butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnItemLongClickTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener() {",

File: butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
Patch:
@@ -30,7 +30,7 @@ public class OnLongClickTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnLongClickListener(",

File: butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnPageChangeTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.support.v4.view.ViewPager) view).setOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() {",

File: butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnTextChangedTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.TextView) view).addTextChangedListener(new android.text.TextWatcher() {",

File: butterknife/src/test/java/butterknife/internal/OnTouchTest.java
Patch:
@@ -28,7 +28,7 @@ public class OnTouchTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnTouchListener(new android.view.View.OnTouchListener() {",

File: butterknife/src/main/java/butterknife/internal/ViewInjector.java
Patch:
@@ -51,8 +51,8 @@ void setParentInjector(String parentInjector) {
     this.parentInjector = parentInjector;
   }
 
-  boolean viewIdMapContains(int id) {
-    return viewIdMap.containsKey(id);
+  ViewInjection getViewInjection(int id) {
+    return viewIdMap.get(id);
   }
 
   private ViewInjection getOrCreateViewInjection(int id) {

File: butterknife/src/test/java/butterknife/internal/InjectViewTest.java
Patch:
@@ -465,7 +465,7 @@ public class InjectViewTest {
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "Attempt to use @InjectView for an already injected ID (1). (test.Test.thing2)")
+            "Attempt to use @InjectView for an already injected ID 1 on 'thing1'. (test.Test.thing2)")
         .in(source).onLine(7);
   }
 

File: butterknife/src/main/java/butterknife/internal/ViewInjector.java
Patch:
@@ -50,8 +50,8 @@ void setParentInjector(String parentInjector) {
     this.parentInjector = parentInjector;
   }
 
-  boolean viewIdMapContains(int id) {
-    return viewIdMap.containsKey(id);
+  ViewInjection getViewInjection(int id) {
+    return viewIdMap.get(id);
   }
 
   private ViewInjection getOrCreateViewInjection(int id) {

File: butterknife/src/test/java/butterknife/internal/InjectViewTest.java
Patch:
@@ -466,7 +466,7 @@ public class InjectViewTest {
         .processedWith(butterknifeProcessors())
         .failsToCompile()
         .withErrorContaining(
-            "Attempt to use @InjectView for an already injected ID (1). (test.Test.thing2)")
+            "Attempt to use @InjectView for an already injected ID 1 on 'thing1'. (test.Test.thing2)")
         .in(source).onLine(7);
   }
 }

File: butterknife/src/test/java/butterknife/internal/OnClickTest.java
Patch:
@@ -306,7 +306,6 @@ public class OnClickTest {
         .generatesSources(expectedSource);
   }
 
-
   @Test public void optionalAndRequiredSkipsNullCheck() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
@@ -349,7 +348,6 @@ public class OnClickTest {
         .generatesSources(expectedSource);
   }
 
-
   @Test public void failsInJavaPackage() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package java.test;",

File: butterknife/src/test/java/butterknife/internal/OnClickTest.java
Patch:
@@ -257,7 +257,6 @@ public class OnClickTest {
         .generatesSources(expectedSource);
   }
 
-
   @Test public void optionalAndRequiredSkipsNullCheck() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
@@ -300,7 +299,6 @@ public class OnClickTest {
         .generatesSources(expectedSource);
   }
 
-
   @Test public void failsInJavaPackage() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package java.test;",

File: butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
Patch:
@@ -9,6 +9,7 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static org.truth0.Truth.ASSERT;
 
+/** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
 public class OnItemClickTest {
   @Test public void onClickInjection() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(

File: butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
Patch:
@@ -31,7 +31,7 @@ public class OnItemClickTest {
             "    if (view == null) {",
             "      throw new IllegalStateException(\"Required view with id '1' for method 'doStuff' was not found. If this view is optional add '@Optional' annotation.\");",
             "    }",
-            "    ((android.widget.AdapterView) view).setOnItemClickListener(",
+            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
             "      new android.widget.AdapterView.OnItemClickListener() {",
             "        @Override public void onItemClick(",
             "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
@@ -79,7 +79,7 @@ public class OnItemClickTest {
             "    if (view == null) {",
             "      throw new IllegalStateException(\"Required view with id '1' for method 'doStuff' was not found. If this view is optional add '@Optional' annotation.\");",
             "    }",
-            "    ((android.widget.AdapterView) view).setOnItemClickListener(",
+            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
             "      new android.widget.AdapterView.OnItemClickListener() {",
             "        @Override public void onItemClick(",
             "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
@@ -125,7 +125,7 @@ public class OnItemClickTest {
             "    if (view == null) {",
             "      throw new IllegalStateException(\"Required view with id '1' for method 'doStuff' was not found. If this view is optional add '@Optional' annotation.\");",
             "    }",
-            "    ((android.widget.AdapterView) view).setOnItemClickListener(",
+            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
             "      new android.widget.AdapterView.OnItemClickListener() {",
             "        @Override public void onItemClick(",
             "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",

File: butterknife/src/main/java/butterknife/OnCheckedChanged.java
Patch:
@@ -23,7 +23,7 @@
  * @see Optional
  */
 @Retention(CLASS) @Target(METHOD)
-@ListenerClass(OnCheckedChangeListener.class)
+@ListenerClass("android.widget.CompoundButton.OnCheckedChangeListener")
 public @interface OnCheckedChanged {
   int[] value();
 }

File: butterknife/src/main/java/butterknife/OnClick.java
Patch:
@@ -22,7 +22,7 @@
  * @see Optional
  */
 @Retention(CLASS) @Target(METHOD)
-@ListenerClass(OnClickListener.class)
+@ListenerClass("android.view.View.OnClickListener")
 public @interface OnClick {
   int[] value();
 }

File: butterknife/src/main/java/butterknife/OnEditorAction.java
Patch:
@@ -24,7 +24,7 @@
  * @see Optional
  */
 @Retention(CLASS) @Target(METHOD)
-@ListenerClass(OnEditorActionListener.class)
+@ListenerClass("android.widget.TextView.OnEditorActionListener")
 public @interface OnEditorAction {
   int[] value();
 }

File: butterknife/src/main/java/butterknife/OnFocusChanged.java
Patch:
@@ -22,7 +22,7 @@
  * @see Optional
  */
 @Retention(CLASS) @Target(METHOD)
-@ListenerClass(OnFocusChangeListener.class)
+@ListenerClass("android.view.View.OnFocusChangeListener")
 public @interface OnFocusChanged {
   int[] value();
 }

File: butterknife/src/main/java/butterknife/OnItemClick.java
Patch:
@@ -22,7 +22,7 @@
  * @see Optional
  */
 @Retention(CLASS) @Target(METHOD)
-@ListenerClass(OnItemClickListener.class)
+@ListenerClass("android.widget.AdapterView.OnItemClickListener")
 public @interface OnItemClick {
   int[] value();
 }

File: butterknife/src/main/java/butterknife/OnItemLongClick.java
Patch:
@@ -24,7 +24,7 @@
  * @see Optional
  */
 @Retention(CLASS) @Target(METHOD)
-@ListenerClass(OnItemLongClickListener.class)
+@ListenerClass("android.widget.AdapterView.OnItemLongClickListener")
 public @interface OnItemLongClick {
   int[] value();
 }

File: butterknife/src/main/java/butterknife/OnLongClick.java
Patch:
@@ -23,7 +23,7 @@
  * @see Optional
  */
 @Retention(CLASS) @Target(METHOD)
-@ListenerClass(OnLongClickListener.class)
+@ListenerClass("android.view.View.OnLongClickListener")
 public @interface OnLongClick {
   int[] value();
 }

File: butterknife/src/main/java/butterknife/internal/ListenerClass.java
Patch:
@@ -10,5 +10,5 @@
 @Documented
 @Retention(RUNTIME) @Target(ANNOTATION_TYPE)
 public @interface ListenerClass {
-  Class<?> value();
+  String value();
 }

File: butterknife/src/main/java/butterknife/internal/InjectViewProcessor.java
Patch:
@@ -39,6 +39,7 @@
     "butterknife.OnClick" //
 })
 public class InjectViewProcessor extends AbstractProcessor {
+  static final String VIEW_TYPE = "android.view.View";
   public static final String SUFFIX = "$$ViewInjector";
 
   private Elements elementUtils;
@@ -243,7 +244,7 @@ private boolean isSubtypeOfView(TypeMirror typeMirror) {
       return false;
     }
     DeclaredType declaredType = (DeclaredType) typeMirror;
-    if ("android.view.View".equals(declaredType.toString())) {
+    if (VIEW_TYPE.equals(declaredType.toString())) {
       return true;
     } else {
       Element element = declaredType.asElement();

File: butterknife/src/main/java/butterknife/internal/InjectViewProcessor.java
Patch:
@@ -39,6 +39,7 @@
     "butterknife.OnClick" //
 })
 public class InjectViewProcessor extends AbstractProcessor {
+  static final String VIEW_TYPE = "android.view.View";
   public static final String SUFFIX = "$$ViewInjector";
 
   private Elements elementUtils;
@@ -243,7 +244,7 @@ private boolean isSubtypeOfView(TypeMirror typeMirror) {
       return false;
     }
     DeclaredType declaredType = (DeclaredType) typeMirror;
-    if ("android.view.View".equals(declaredType.toString())) {
+    if (VIEW_TYPE.equals(declaredType.toString())) {
       return true;
     } else {
       Element element = declaredType.asElement();

File: butterknife/src/main/java/butterknife/Views.java
Patch:
@@ -158,7 +158,8 @@ private void error(String message, Object... args) {
 
         String targetType = type.getQualifiedName().toString();
         String sourceType = resolveSourceType(type);
-        String packageName = processingEnv.getElementUtils().getPackageOf(type).toString();
+        String packageName =
+            processingEnv.getElementUtils().getPackageOf(type).getQualifiedName().toString();
         String className =
             type.getQualifiedName().toString().substring(packageName.length() + 1).replace('.', '$')
                 + SUFFIX;

File: butterknife/src/main/java/butterknife/Views.java
Patch:
@@ -158,7 +158,8 @@ private void error(String message, Object... args) {
 
         String targetType = type.getQualifiedName().toString();
         String sourceType = resolveSourceType(type);
-        String packageName = processingEnv.getElementUtils().getPackageOf(type).toString();
+        String packageName =
+            processingEnv.getElementUtils().getPackageOf(type).getQualifiedName().toString();
         String className =
             type.getQualifiedName().toString().substring(packageName.length() + 1).replace('.', '$')
                 + SUFFIX;

File: butterknife/src/main/java/butterknife/Views.java
Patch:
@@ -47,13 +47,13 @@ public static void inject(Activity activity) {
 
   /** Simpler version of {@link View#findViewById(int)} which infers the target type. */
   @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast, helper method.
-  public static <T> T findById(View view, int id) {
+  public static <T extends View> T findById(View view, int id) {
     return (T) view.findViewById(id);
   }
 
   /** Simpler version of {@link Activity#findViewById(int)} which infers the target type. */
   @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast, helper method.
-  public static <T> T findById(Activity activity, int id) {
+  public static <T extends View> T findById(Activity activity, int id) {
     return (T) activity.findViewById(id);
   }
 

