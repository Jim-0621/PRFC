File: lectures/17-oop/code/src/com/kunal/enumExamples/Basic.java
Patch:
@@ -5,7 +5,7 @@ enum Week implements A{
         Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday;
         // these are enum constants
         // public, static and final
-        // since its final you can create child enums
+        // since its final you cannot create child enums
         // type is Week
 
         void display() {

File: lectures/16-math/code/src/com/kunal/maths/BinarySearchSQRT.java
Patch:
@@ -26,6 +26,7 @@ static double sqrt(int n, int p) {
                 e = m - 1;
             } else {
                 s = m + 1;
+                root = m;
             }
         }
         double incr = 0.1;

File: lectures/08-arrays/code/src/com/kunal/Max.java
Patch:
@@ -9,7 +9,7 @@ public static void main(String[] args) {
     // work on edge cases here, like array being null
     static int maxRange(int[] arr, int start, int end) {
 
-        if (end > start) {
+        if (start > end) {
             return -1;
         }
 

File: lectures/08-arrays/code/src/com/kunal/Max.java
Patch:
@@ -9,7 +9,7 @@ public static void main(String[] args) {
     // work on edge cases here, like array being null
     static int maxRange(int[] arr, int start, int end) {
 
-        if (end > start) {
+        if (start > end) {
             return -1;
         }
 

File: lectures/10-binary search/code/src/com/kunal/RBS.java
Patch:
@@ -85,13 +85,13 @@ static int findPivotWithDuplicates(int[] arr) {
                 // skip the duplicates
                 // NOTE: what if these elements at start and end were the pivot??
                 // check if start is pivot
-                if (arr[start] > arr[start + 1]) {
+                if (start < end && arr[start] > arr[start + 1]) {
                     return start;
                 }
                 start++;
 
                 // check whether end is pivot
-                if (arr[end] < arr[end - 1]) {
+                if (end > start && arr[end] < arr[end - 1]) {
                     return end - 1;
                 }
                 end--;

File: lectures/10-binary search/code/src/com/kunal/RBS.java
Patch:
@@ -85,13 +85,13 @@ static int findPivotWithDuplicates(int[] arr) {
                 // skip the duplicates
                 // NOTE: what if these elements at start and end were the pivot??
                 // check if start is pivot
-                if (arr[start] > arr[start + 1]) {
+                if (start < end && arr[start] > arr[start + 1]) {
                     return start;
                 }
                 start++;
 
                 // check whether end is pivot
-                if (arr[end] < arr[end - 1]) {
+                if (end > start && arr[end] < arr[end - 1]) {
                     return end - 1;
                 }
                 end--;

File: lectures/5-first-java-program/first-idea-program/src/com/kunal/Prime.java
Patch:
@@ -15,7 +15,7 @@ public static void main(String[] args) {
         if (n == 4) {
             System.out.println("Not prime");
         } else {
-            while (c * c < n) {
+            while (c * c <= n) {
                 if (n % c == 0) {
                     System.out.println("Not Prime");
                     return;

