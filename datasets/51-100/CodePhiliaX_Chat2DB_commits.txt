File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/ChatController.java
Patch:
@@ -235,6 +235,7 @@ public SseEmitter distributeAISql(ChatQueryRequest queryRequest, SseEmitter sseE
             case CHAT2DBAI:
                 return chatWithChat2dbAi(queryRequest, sseEmitter, uid);
             case RESTAI :
+                return chatWithRestAi(queryRequest, sseEmitter);
             case FASTCHATAI:
                 return chatWithFastChatAi(queryRequest, sseEmitter, uid);
             case AZUREAI :

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/builder/HiveSqlBuilder.java
Patch:
@@ -10,7 +10,9 @@
 import org.apache.commons.lang3.StringUtils;
 
 
-public class HiveSqlBuilder extends DefaultSqlBuilder {
+
+public class HiveSqlBuilder extends DefaultSqlBuilder implements SqlBuilder<Table> {
+
     @Override
     public String buildCreateTableSql(Table table) {
         StringBuilder script = new StringBuilder();

File: chat2db-server/chat2db-plugins/chat2db-clickhouse/src/main/java/ai/chat2db/plugin/clickhouse/type/ClickHouseColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -67,7 +68,7 @@ public enum ClickHouseColumnTypeEnum implements ColumnBuilder {
     }
 
     public static ClickHouseColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType);
+       return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public static List<ColumnType> getTypes() {

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/DB2MetaData.java
Patch:
@@ -115,15 +115,15 @@ public Table view(Connection connection, String databaseName, String schemaName,
         return table;
     }
 
-    private static String ROUTINE_DDL_SQL="select TEXT from syscat.routines where ROUTINESCHEMA='%s' and ROUTINENAME='%s';";
+    private static String ROUTINE_DDL_SQL="select TEXT from syscat.routines where ROUTINESCHEMA='%s' and ROUTINENAME='%s' and ROUTINETYPE='%s';";
 
     @Override
     public Function function(Connection connection, String databaseName, String schemaName, String functionName) {
         Function function = new Function();
        function.setDatabaseName(databaseName);
        function.setSchemaName(schemaName);
        function.setFunctionName(functionName);
-        String sql = String.format(ROUTINE_DDL_SQL, schemaName, functionName);
+        String sql = String.format(ROUTINE_DDL_SQL, schemaName, functionName,'F');
         SQLExecutor.getInstance().execute(connection, sql, resultSet -> {
             if (resultSet.next()) {
                 function.setFunctionBody(resultSet.getString("TEXT")+";");
@@ -138,7 +138,7 @@ public Procedure procedure(Connection connection, String databaseName, String sc
         procedure.setDatabaseName(databaseName);
         procedure.setSchemaName(schemaName);
         procedure.setProcedureName(procedureName);
-        String sql = String.format(ROUTINE_DDL_SQL, schemaName, procedureName);
+        String sql = String.format(ROUTINE_DDL_SQL, schemaName, procedureName,'P');
         SQLExecutor.getInstance().execute(connection, sql, resultSet -> {
             if (resultSet.next()) {
                 procedure.setProcedureBody(resultSet.getString("TEXT")+";");

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/type/DB2ColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -133,7 +134,7 @@ public enum DB2ColumnTypeEnum implements ColumnBuilder {
     private ColumnType columnType;
 
     public static DB2ColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+       return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     private static Map<String, DB2ColumnTypeEnum> COLUMN_TYPE_MAP = Maps.newHashMap();

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/HiveCommandExecutor.java
Patch:
@@ -1,6 +1,5 @@
 package ai.chat2db.plugin.hive;
 
-import ai.chat2db.spi.ValueHandler;
 import ai.chat2db.spi.model.Command;
 import ai.chat2db.spi.model.ExecuteResult;
 import ai.chat2db.spi.model.Header;
@@ -51,9 +50,9 @@ public ExecuteResult executeUpdate(String sql, Connection connection, int n) thr
      */
     @Override
     public ExecuteResult execute(final String sql, Connection connection, boolean limitRowSize, Integer offset,
-                                 Integer count, ValueHandler valueHandler)
+                                 Integer count)
             throws SQLException {
-        return super.execute(sql, connection, limitRowSize, offset, count, valueHandler);
+        return super.execute(sql, connection, limitRowSize, offset, count);
     }
 
     public static String formatTableName(String tableName) {

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/HiveMetaData.java
Patch:
@@ -68,7 +68,7 @@ public String tableDDL(Connection connection, @NotEmpty String databaseName, Str
 
     @Override
     public String getMetaDataName(String... names) {
-        return Arrays.stream(names).filter(name -> StringUtils.isNotBlank(name)).map(name -> "`" + name + "`").collect(Collectors.joining("."));
+        return Arrays.stream(names).skip(1).filter(name -> StringUtils.isNotBlank(name)).map(name -> "`" + name + "`").collect(Collectors.joining("."));
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/type/HiveColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -71,7 +72,7 @@ public enum HiveColumnTypeEnum implements ColumnBuilder {
     private ColumnType columnType;
 
     public static HiveColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+        return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public ColumnType getColumnType() {
@@ -150,7 +151,7 @@ public String buildModifyColumn(TableColumn tableColumn) {
             if (!StringUtils.equalsIgnoreCase(tableColumn.getOldName(), tableColumn.getName())) {
                 return StringUtils.join("CHANGE COLUMN `", tableColumn.getOldName(), "` ", buildCreateColumnSql(tableColumn));
             } else {
-                return StringUtils.join("MODIFY COLUMN ", buildCreateColumnSql(tableColumn));
+                return StringUtils.join("CHANGE `", tableColumn.getOldName(), "` ", buildCreateColumnSql(tableColumn));
             }
         }
         return "";

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/type/KingBaseColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -87,7 +88,7 @@ public enum KingBaseColumnTypeEnum implements ColumnBuilder {
     }
 
     public static KingBaseColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+        return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public static List<ColumnType> getTypes() {

File: chat2db-server/chat2db-plugins/chat2db-oceanbase/src/main/java/ai/chat2db/plugin/oceanbase/OceanBaseMetaData.java
Patch:
@@ -1,9 +1,10 @@
 package ai.chat2db.plugin.oceanbase;
 
+import ai.chat2db.plugin.mysql.MysqlMetaData;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.jdbc.DefaultMetaService;
 
-public class OceanBaseMetaData extends DefaultMetaService implements MetaData {
+public class OceanBaseMetaData extends MysqlMetaData implements MetaData {
 
 
 }

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/type/SqliteColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -27,7 +28,7 @@ public enum SqliteColumnTypeEnum implements ColumnBuilder {
     private ColumnType columnType;
 
     public static SqliteColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+        return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public ColumnType getColumnType() {

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/SqlServerCommandExecutor.java
Patch:
@@ -1,6 +1,5 @@
 package ai.chat2db.plugin.sqlserver;
 
-import ai.chat2db.spi.ValueHandler;
 import ai.chat2db.spi.model.Command;
 import ai.chat2db.spi.model.ExecuteResult;
 import ai.chat2db.spi.sql.SQLExecutor;
@@ -45,8 +44,8 @@ public ExecuteResult executeUpdate(String sql, Connection connection, int n) thr
      *
      */
     public ExecuteResult execute(final String sql, Connection connection, boolean limitRowSize, Integer offset,
-                                 Integer count, ValueHandler valueHandler)
+                                 Integer count)
             throws SQLException {
-        return super.execute(removeSpecialGO(sql), connection, limitRowSize, offset, count, valueHandler);
+        return super.execute(removeSpecialGO(sql), connection, limitRowSize, offset, count);
     }
 }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/enums/ExportFileSuffix.java
Patch:
@@ -14,6 +14,7 @@ public enum ExportFileSuffix {
     WORD(".docx"),
     //excel
     EXCEL(".xlsx"),
+    XLS(".xls"),
     //markdown
     MARKDOWN(".md"),
     //html

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/enums/RoleCodeEnum.java
Patch:
@@ -18,7 +18,8 @@ public enum RoleCodeEnum implements BaseEnum<String> {
     /**
      * ADMIN
      */
-    ADMIN("ADMIN", 2L, "chat2db", "chat2db"),
+    ADMIN("ADMIN", 2L, System.getenv().getOrDefault("ADMIN_NAME","chat2db"),
+            System.getenv().getOrDefault("ADMIN_PASSWORD","chat2db")),
 
     /**
      * USER

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/param/dashboard/DashboardCreateParam.java
Patch:
@@ -39,7 +39,7 @@ public class DashboardCreateParam {
     private String schema;
 
     /**
-     * Whether it has been deleted, y means deleted, n means not deleted
+     * Whether it has been deleted, 'Y' means deleted, 'N' means not deleted
      */
     private String deleted;
 

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/param/datasource/DatabaseCreateParam.java
Patch:
@@ -20,6 +20,8 @@ public class DatabaseCreateParam {
 
     private String name;
 
+    private String newName;
+
     private String comment;
 
     private String charset;

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/service/ChartService.java
Patch:
@@ -20,7 +20,7 @@
  */
 public interface ChartService {
     /**
-     * Save report
+     * Create report
      *
      * @param param
      * @return

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/ConfigServiceImpl.java
Patch:
@@ -9,7 +9,6 @@
 import ai.chat2db.server.domain.core.converter.ConfigConverter;
 import ai.chat2db.server.domain.repository.Dbutils;
 import ai.chat2db.server.domain.repository.entity.SystemConfigDO;
-import ai.chat2db.server.domain.repository.mapper.ChartMapper;
 import ai.chat2db.server.domain.repository.mapper.SystemConfigMapper;
 import ai.chat2db.server.tools.base.wrapper.result.ActionResult;
 import ai.chat2db.server.tools.base.wrapper.result.DataResult;

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/TableServiceImpl.java
Patch:
@@ -476,7 +476,7 @@ private Long getLock(Long dataSourceId, String databaseName, String schemaName,
                 getVersionMapper().insert(versionDO);
                 return 0L;
             } catch (Exception e) {
-                e.printStackTrace();
+                log.error("getLock error", e);
                 return -1L;
             }
         } else {

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/TaskServiceImpl.java
Patch:
@@ -44,6 +44,7 @@ public ActionResult updateStatus(TaskUpdateParam param) {
         taskDO.setId(param.getId());
         taskDO.setTaskStatus(param.getTaskStatus());
         taskDO.setContent(param.getContent());
+        taskDO.setDownloadUrl(param.getDownloadUrl());
         MapperUtils.getTaskMapper().updateById(taskDO);
         return ActionResult.isSuccess();
     }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/util/DesUtil.java
Patch:
@@ -230,7 +230,7 @@ public int encryptFile(String file, String destFile, String encryptType) {
         } catch (FileNotFoundException e) {
             result = 5;
         } catch (Exception e) {
-            e.printStackTrace();
+            throw new RuntimeException(e);
         }
         return result;
     }
@@ -263,7 +263,7 @@ public int decryptFile(String file, String destFile, String decryptType) {
         }catch (FileNotFoundException e) {
             result = 5;
         }  catch (Exception e) {
-            e.printStackTrace();
+            throw new RuntimeException(e);
         }
         return result;
     }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/util/H2Triggers.java
Patch:
@@ -20,7 +20,7 @@ public void fire(Connection conn, Object[] oldRow, Object[] newRow)
         // This method is called when the trigger is executed.
         // In this example, let's simply print the new values when a row is inserted.
         if (newRow != null) {
-            System.out.println("New Row Inserted: " + Arrays.toString(newRow));
+//            System.out.println("New Row Inserted: " + Arrays.toString(newRow));
         }
     }
 

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/util/PermissionUtils.java
Patch:
@@ -13,7 +13,7 @@
 public class PermissionUtils {
 
     /**
-     * Verify whether the currently logged in user has permission to operate on the current content
+     * Verify whether the currently logged-in user has permission to operate on the current content
      *
      * @param createUserId The creator of the current content
      */

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-repository/src/main/java/ai/chat2db/server/domain/repository/entity/ChartDO.java
Patch:
@@ -73,12 +73,12 @@ public class ChartDO implements Serializable {
     private String schemaName;
 
     /**
-     * ddl content
+     * DDL content
      */
     private String ddl;
 
     /**
-     * Whether it has been deleted, y means deleted, n means not deleted
+     * Whether it has been deleted, 'Y' means deleted, 'N' means not deleted
      */
     private String deleted;
 

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/config/config/Chat2dbWebMvcConfigurer.java
Patch:
@@ -75,12 +75,12 @@ public boolean preHandle(@NotNull HttpServletRequest request, @NotNull HttpServl
                         if (user == null) {
                             return null;
                         }
-                        boolean admin = RoleCodeEnum.ADMIN.getCode().equals(user.getRoleCode());
+                        boolean iaAdmin = RoleCodeEnum.ADMIN.getCode().equals(user.getRoleCode());
 
                         return LoginUser.builder()
                             .id(user.getId())
                             .nickName(user.getNickName())
-                            .admin(admin)
+                            .admin(iaAdmin)
                             .roleCode(user.getRoleCode())
                             .build();
                     });

File: chat2db-server/chat2db-server-start/src/test/java/ai/chat2db/server/start/test/druid/SqlUtilsTest.java
Patch:
@@ -190,7 +190,7 @@ public void coment() {
                 DbType.h2, SQLParserFeature.PrintSQLWhileParsingFailed);
             log.info("Parse sql:{}", sqlStatement);
         } catch (Exception e) {
-            e.printStackTrace();
+            log.error("error", e);
         }
     }
 

File: chat2db-server/chat2db-server-web-start/src/main/java/ai/chat2db/server/web/start/config/config/Chat2dbWebMvcConfigurer.java
Patch:
@@ -190,10 +190,10 @@ private String buildHeaderString(HttpServletRequest request) {
         StringBuilder stringBuilder = new StringBuilder();
         Enumeration<String> headerNames = request.getHeaderNames();
         while (headerNames.hasMoreElements()) {
-            String headName = headerNames.nextElement();
-            stringBuilder.append(headName);
+            String headerName = headerNames.nextElement();
+            stringBuilder.append(headerName);
             stringBuilder.append(SymbolConstant.COLON);
-            stringBuilder.append(request.getHeader(headName));
+            stringBuilder.append(request.getHeader(headerName));
             stringBuilder.append(SymbolConstant.COMMA);
         }
         return stringBuilder.toString();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/ChatController.java
Patch:
@@ -539,7 +539,7 @@ private SseEmitter buildSseEmitter(SseEmitter sseEmitter, String uid) throws IOE
                     sseEmitter.send(SseEmitter.event().id("765431").name("An exception occurs!").data(throwable.getMessage())
                         .reconnectTime(3000));
                 } catch (IOException e) {
-                    e.printStackTrace();
+                    log.error("An exception occurs!{}", e.getMessage(), e);
                 }
             }
         );

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/tongyi/model/TongyiChatCompletions.java
Patch:
@@ -35,7 +35,7 @@ public class TongyiChatCompletions {
      */
     @JsonCreator
     private TongyiChatCompletions(
-        @JsonProperty(value = "id") String id,
+        @JsonProperty(value = "request_id") String id,
         @JsonProperty(value = "output") TongyiChatOutput choices,
         @JsonProperty(value = "usage") TongyiChatCompletionsUsage usage) {
         this.id = id;

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/zhipu/client/ZhipuChatAIClient.java
Patch:
@@ -58,8 +58,8 @@ private static ZhipuChatAIStreamClient singleton() {
 
     public static void refresh() {
         String apiKey = "";
-        String apiHost = "https://open.bigmodel.cn/api/paas/v3/model-api/";
-        String model = "chatglm_turbo";
+        String apiHost = "";
+        String model = "";
         ConfigService configService = ApplicationContextUtil.getBean(ConfigService.class);
         Config apiHostConfig = configService.find(ZHIPU_HOST).getData();
         if (apiHostConfig != null && StringUtils.isNotBlank(apiHostConfig.getContent())) {

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/zhipu/client/ZhipuChatAIStreamClient.java
Patch:
@@ -204,11 +204,10 @@ public void streamCompletions(List<FastChatMessage> chatMessages, EventSourceLis
             ObjectMapper mapper = new ObjectMapper();
             mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
             String requestBody = mapper.writeValueAsString(completionsOptions);
-
-            String url = this.apiHost + "/" + this.model + "/" + "sse-invoke";
+            log.info("使用的model:{}", this.model);
             EventSource.Factory factory = EventSources.createFactory(this.okHttpClient);
             Request request = new Request.Builder()
-                .url(url)
+                .url(apiHost)
                 .post(RequestBody.create(MediaType.parse(ContentType.JSON.getValue()), requestBody))
                 .build();
             //Create event

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/zhipu/model/ZhipuChatCompletionsOptions.java
Patch:
@@ -20,7 +20,7 @@ public final class ZhipuChatCompletionsOptions {
     private String requestId;
 
     // sse-params
-    @JsonProperty(value = "incremental")
+    @JsonProperty(value = "stream")
     private Boolean stream = true;
 
     @JsonProperty(value = "sseFormat")
@@ -33,7 +33,7 @@ public final class ZhipuChatCompletionsOptions {
      * the behavior of the assistant, followed by alternating messages between the User and
      * Assistant roles.
      */
-    @JsonProperty(value = "prompt")
+    @JsonProperty(value = "messages")
     private List<FastChatMessage> prompt;
 
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/request/DataExportRequest.java
Patch:
@@ -23,6 +23,9 @@ public class DataExportRequest extends DataSourceBaseRequest {
      */
     private String originalSql;
 
+    private Integer pageNo;
+    private Integer pageSize;
+
     /**
      * export type
      *

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/ws/WsServer.java
Patch:
@@ -209,7 +209,6 @@ private String connectInfoKey(Long dataSourceId, String databaseName, String sch
     @OnError
     public void onError(Session session, Throwable error) {
         log.error("An error occurred:{}，Session ID： {}", error.getMessage(), session.getId(), error);
-        error.printStackTrace();
     }
 
     /**
@@ -244,7 +243,6 @@ public static void SendMessage(Session session, WsResult wsResult) {
             }
         } catch (IOException e) {
             log.error("Error sending message：{}", e.getMessage());
-            e.printStackTrace();
         }
     }
 }

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/CommandExecutor.java
Patch:
@@ -38,6 +38,6 @@ public interface CommandExecutor {
      *
      */
      ExecuteResult execute(final String sql, Connection connection, boolean limitRowSize, Integer offset,
-                                 Integer count, ValueHandler valueHandler)
+                           Integer count)
             throws SQLException;
 }

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/MetaData.java
Patch:
@@ -5,7 +5,6 @@
 
 import ai.chat2db.server.tools.base.wrapper.result.PageResult;
 import ai.chat2db.spi.model.*;
-import cn.hutool.db.Page;
 import jakarta.validation.constraints.NotEmpty;
 
 /**
@@ -242,7 +241,7 @@ List<TableIndex> indexes(Connection connection, @NotEmpty String databaseName, S
      * Get column builder.
      *
      */
-    ValueHandler getValueHandler();
+    ValueProcessor getValueProcessor();
 
 
     /**

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/Function.java
Patch:
@@ -20,7 +20,7 @@
 public class Function  implements Serializable {
     private static final long serialVersionUID = 1L;
     //FUNCTION_CAT String => function catalog (may be null)
-    //FUNCTION_SCHEM String => function schema (may be null)
+    //FUNCTION_SCHEME String => function schema (may be null)
     //FUNCTION_NAME String => function name. This is the name used to invoke the function
     //REMARKS String => explanatory comment on the function
     //FUNCTION_TYPE short => kind of function:

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/Procedure.java
Patch:
@@ -20,7 +20,7 @@
 public class Procedure implements Serializable {
     private static final long serialVersionUID = 1L;
     //PROCEDURE_CAT String => procedure catalog (may be null)
-    //PROCEDURE_SCHEM String => procedure schema (may be null)
+    //PROCEDURE_SCHEME String => procedure schema (may be null)
     //PROCEDURE_NAME String => procedure name
     //REMARKS String => explanatory comment on the procedure
     //PROCEDURE_TYPE short => kind of procedure:
@@ -34,7 +34,6 @@ public class Procedure implements Serializable {
     private String databaseName;
 
     @JsonAlias({"PROCEDURE_SCHEM"})
-
     private String schemaName;
 
     @JsonAlias({"PROCEDURE_NAME"})
@@ -44,7 +43,6 @@ public class Procedure implements Serializable {
     private String remarks;
 
     @JsonAlias({"PROCEDURE_TYPE"})
-
     private Short procedureType;
 
     @JsonAlias({"SPECIFIC_NAME"})

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/TableColumn.java
Patch:
@@ -1,5 +1,6 @@
 package ai.chat2db.spi.model;
 
+import com.alibaba.fastjson2.annotation.JSONField;
 import com.fasterxml.jackson.annotation.JsonAlias;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -169,7 +170,8 @@ public class TableColumn  implements Serializable {
      * ISO rules are used to determine the nullability for a column.
      */
 
-    @JsonAlias({"NULLABLE","nullable"})
+    @JsonAlias({"nullable","NULLABLE"})
+    @JSONField(name = "nullable")
     private Integer nullable;
 
     /**

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/type/PostgreSQLColumnTypeEnum.java
Patch:
@@ -23,7 +23,7 @@ public enum PostgreSQLColumnTypeEnum implements ColumnBuilder {
     CIDR("CIDR", false, false, true, false, false, false, true, true, false, false),
     CIRCLE("CIRCLE", false, false, true, false, false, false, true, true, false, false),
     DATE("DATE", false, false, true, false, false, false, true, true, false, false),
-    DECIMAL("DECIMAL", true, false, true, false, false, false, true, true, false, false),
+    DECIMAL("DECIMAL", true, true, true, false, false, false, true, true, false, false),
     FLOAT4("FLOAT4", false, false, true, false, false, false, true, true, false, false),
     FLOAT8("FLOAT8", false, false, true, false, false, false, true, true, false, false),
     INET("INET", false, false, true, false, false, false, true, true, false, false),
@@ -37,7 +37,7 @@ public enum PostgreSQLColumnTypeEnum implements ColumnBuilder {
     LSEG("LSEG", false, false, true, false, false, false, true, true, false, false),
     MACADDR("MACADDR", false, false, true, false, false, false, true, true, false, false),
     MONEY("MONEY", false, false, true, false, false, false, true, true, false, false),
-    NUMERIC("NUMERIC", true, false, true, false, false, false, true, true, false, false),
+    NUMERIC("NUMERIC", true, true, true, false, false, false, true, true, false, false),
     PATH("PATH", false, false, true, false, false, false, true, true, false, false),
     POINT("POINT", false, false, true, false, false, false, true, true, false, false),
     POLYGON("POLYGON", false, false, true, false, false, false, true, true, false, false),

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultSqlBuilder.java
Patch:
@@ -389,6 +389,7 @@ private String getInsertSql(String tableName, List<Header> headerList, List<Stri
             //if (newValue != null) {
             Header header = headerList.get(i);
             SQLDataValue sqlDataValue =  new SQLDataValue();
+            sqlDataValue.setValue(newValue);
             String value =  valueProcessor.getSqlValueString(sqlDataValue);
             script.append(value)
                     .append(",");

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/value/factory/MysqlValueProcessorFactory.java
Patch:
@@ -52,7 +52,6 @@ public class MysqlValueProcessorFactory {
     }
 
     public static DefaultValueProcessor getValueProcessor(String type) {
-        DefaultValueProcessor processor = PROCESSOR_MAP.get(type);
-        return processor == null ? new DefaultValueProcessor() : processor;
+        return PROCESSOR_MAP.get(type);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/value/factory/OracleValueProcessorFactory.java
Patch:
@@ -49,7 +49,7 @@ public class OracleValueProcessorFactory {
     }
 
     public static DefaultValueProcessor getValueProcessor(String type) {
-        return PROCESSOR_MAP.getOrDefault(type, new DefaultValueProcessor());
+        return PROCESSOR_MAP.get(type);
     }
 
 }

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/value/sub/MysqlTimestampProcessor.java
Patch:
@@ -19,12 +19,12 @@ public String convertSQLValueByType(SQLDataValue dataValue) {
 
     @Override
     public String convertJDBCValueByType(JDBCDataValue dataValue) {
-        return new String(dataValue.getBytes());
+        return dataValue.getStringValue();
     }
 
 
     @Override
     public String convertJDBCValueStrByType(JDBCDataValue dataValue) {
-        return EasyStringUtils.quoteString(new String(dataValue.getBytes()));
+        return EasyStringUtils.quoteString(dataValue.getStringValue());
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-clickhouse/src/main/java/ai/chat2db/plugin/clickhouse/type/ClickHouseColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -67,7 +68,7 @@ public enum ClickHouseColumnTypeEnum implements ColumnBuilder {
     }
 
     public static ClickHouseColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType);
+       return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public static List<ColumnType> getTypes() {

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/type/DB2ColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -133,7 +134,7 @@ public enum DB2ColumnTypeEnum implements ColumnBuilder {
     private ColumnType columnType;
 
     public static DB2ColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+       return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     private static Map<String, DB2ColumnTypeEnum> COLUMN_TYPE_MAP = Maps.newHashMap();

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/type/HiveColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -71,7 +72,7 @@ public enum HiveColumnTypeEnum implements ColumnBuilder {
     private ColumnType columnType;
 
     public static HiveColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+        return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public ColumnType getColumnType() {

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/type/KingBaseColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -87,7 +88,7 @@ public enum KingBaseColumnTypeEnum implements ColumnBuilder {
     }
 
     public static KingBaseColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+        return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public static List<ColumnType> getTypes() {

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/type/MysqlColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -116,7 +117,7 @@ public enum MysqlColumnTypeEnum implements ColumnBuilder {
     private ColumnType columnType;
 
     public static MysqlColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+        return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public ColumnType getColumnType() {

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/value/MysqlValueProcessor.java
Patch:
@@ -42,7 +42,7 @@ public String getJdbcValue(JDBCDataValue dataValue) {
 
 
     @Override
-    public String getJdbcValueString(JDBCDataValue dataValue) {
+    public String getJdbcSqlValueString(JDBCDataValue dataValue) {
         Object value = dataValue.getObject();
         if (Objects.isNull(value)) {
             // mysql -> example: [date]->0000-00-00

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/value/OracleValueProcessor.java
Patch:
@@ -36,7 +36,7 @@ public String getJdbcValue(JDBCDataValue dataValue) {
 
 
     @Override
-    public String getJdbcValueString(JDBCDataValue dataValue) {
+    public String getJdbcSqlValueString(JDBCDataValue dataValue) {
         if (OracleColumnTypeEnum.LONG_RAW.getColumnType().getTypeName().equalsIgnoreCase(dataValue.getType())) {
             return convertJDBCValueStrByType(dataValue);
         }

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/type/PostgreSQLColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -76,7 +77,7 @@ public enum PostgreSQLColumnTypeEnum implements ColumnBuilder {
     }
 
     public static PostgreSQLColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+        return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public static List<ColumnType> getTypes() {

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/type/SqliteColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -27,7 +28,7 @@ public enum SqliteColumnTypeEnum implements ColumnBuilder {
     private ColumnType columnType;
 
     public static SqliteColumnTypeEnum getByType(String dataType) {
-        return COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+        return COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
     }
 
     public ColumnType getColumnType() {

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/SqlServerDBManage.java
Patch:
@@ -16,7 +16,6 @@
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Objects;
 
 public class SqlServerDBManage extends DefaultDBManage implements DBManage {
     private String tableDDLFunction
@@ -108,7 +107,7 @@ public void exportTableData(Connection connection, String databaseName, String s
                 for (int i = 1; i <= metaData.getColumnCount(); i++) {
                     ValueProcessor valueProcessor = Chat2DBContext.getMetaData().getValueProcessor();
                     JDBCDataValue jdbcDataValue = new JDBCDataValue(resultSet, metaData, i, false);
-                    String valueString = valueProcessor.getJdbcValueString(jdbcDataValue);
+                    String valueString = valueProcessor.getJdbcSqlValueString(jdbcDataValue);
                     valueList.add(valueString);
                 }
                 String insertSql = sqlBuilder.buildSingleInsertSql(databaseName, schemaName, tableName, columnList, valueList);

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/type/SqlServerColumnTypeEnum.java
Patch:
@@ -4,6 +4,7 @@
 import ai.chat2db.spi.enums.EditStatus;
 import ai.chat2db.spi.model.ColumnType;
 import ai.chat2db.spi.model.TableColumn;
+import ai.chat2db.spi.util.SqlUtils;
 import com.google.common.collect.Maps;
 import org.apache.commons.lang3.StringUtils;
 
@@ -103,7 +104,7 @@ public enum SqlServerColumnTypeEnum implements ColumnBuilder {
     private ColumnType columnType;
 
     public static SqlServerColumnTypeEnum getByType(String dataType) {
-        SqlServerColumnTypeEnum typeEnum = COLUMN_TYPE_MAP.get(dataType.toUpperCase());
+        SqlServerColumnTypeEnum typeEnum = COLUMN_TYPE_MAP.get(SqlUtils.removeDigits(dataType.toUpperCase()));
         if (typeEnum == null) {
             return OTHER;
         }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/data/sql/SqlDataExporter.java
Patch:
@@ -146,7 +146,7 @@ private List<String> extractRowData(ResultSet resultSet, ValueProcessor valuePro
         List<String> rowData = new ArrayList<>(metaData.getColumnCount());
         for (int i = 1; i <= metaData.getColumnCount(); i++) {
             JDBCDataValue jdbcDataValue = new JDBCDataValue(resultSet, metaData, i, false);
-            rowData.add(valueProcessor.getJdbcValueString(jdbcDataValue));
+            rowData.add(valueProcessor.getJdbcSqlValueString(jdbcDataValue));
         }
         return rowData;
     }
@@ -158,7 +158,7 @@ private Map<String, String> extractRowDataAsMap(ResultSet resultSet, ValueProces
         for (int i = 1; i <= metaData.getColumnCount(); i++) {
             JDBCDataValue jdbcDataValue = new JDBCDataValue(resultSet, metaData, i, false);
             String columnName = metaData.getColumnName(i);
-            String jdbcValueString = valueProcessor.getJdbcValueString(jdbcDataValue);
+            String jdbcValueString = valueProcessor.getJdbcSqlValueString(jdbcDataValue);
             if (primaryKeyMap.containsKey(columnName)) {
                 primaryKeyMap.put(columnName, jdbcValueString);
             } else {

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/ValueProcessor.java
Patch:
@@ -36,5 +36,5 @@ public interface ValueProcessor {
      *
      * @return 一个格式化后的字符串，可以直接用于DML语句中，确保数据的正确插入或更新。
      */
-    String getJdbcValueString(JDBCDataValue dataValue);
+    String getJdbcSqlValueString(JDBCDataValue dataValue);
 }

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultDBManage.java
Patch:
@@ -219,7 +219,7 @@ public void exportTableData(Connection connection, String databaseName, String s
                 for (int i = 1; i <= metaData.getColumnCount(); i++) {
                     ValueProcessor valueProcessor = Chat2DBContext.getMetaData().getValueProcessor();
                     JDBCDataValue jdbcDataValue = new JDBCDataValue(resultSet, metaData, i, false);
-                    String valueString = valueProcessor.getJdbcValueString(jdbcDataValue);
+                    String valueString = valueProcessor.getJdbcSqlValueString(jdbcDataValue);
                     valueList.add(valueString);
                 }
                 String insertSql = sqlBuilder.buildSingleInsertSql(null, null, tableName, columnList, valueList);

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultValueProcessor.java
Patch:
@@ -41,7 +41,7 @@ public String getJdbcValue(JDBCDataValue dataValue) {
 
 
     @Override
-    public String getJdbcValueString(JDBCDataValue dataValue) {
+    public String getJdbcSqlValueString(JDBCDataValue dataValue) {
 //        Object value = dataValue.getObject();
 //        if (Objects.isNull(value)) {
 //            return "NULL";

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/type/OracleColumnTypeEnum.java
Patch:
@@ -105,6 +105,8 @@ public enum OracleColumnTypeEnum implements ColumnBuilder {
 
     VARCHAR2("VARCHAR2", true, false, true, false, false, false, true, true, false, true),
 
+    XMLTYPE("XMLTYPE", false, false, true, false, false, false, true, true, false, false),
+
     ;
     private ColumnType columnType;
 

File: chat2db-server/chat2db-server-tools/chat2db-server-tools-common/src/main/java/ai/chat2db/server/tools/common/util/EasyStringUtils.java
Patch:
@@ -252,4 +252,6 @@ public static String sqlEscape(String str) {
         }
         return str;
     }
+
+
 }

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/JDBCDataValue.java
Patch:
@@ -97,7 +97,7 @@ public Blob getBlob() {
     public String getBlobHexString() {
         byte[] bytes = getBytes();
         if (Objects.isNull(bytes)) {
-            return "NULL";
+            return null;
         }
         return BaseEncoding.base16().encode(bytes);
     }

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/OracleDBManage.java
Patch:
@@ -1,11 +1,13 @@
 package ai.chat2db.plugin.oracle;
 
+import ai.chat2db.server.tools.common.util.EasyStringUtils;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.jdbc.DefaultDBManage;
 import ai.chat2db.spi.model.AsyncContext;
 import ai.chat2db.spi.sql.Chat2DBContext;
 import ai.chat2db.spi.sql.ConnectInfo;
 import ai.chat2db.spi.sql.SQLExecutor;
+import ai.chat2db.spi.util.SqlUtils;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.ObjectUtils;
 import org.apache.commons.lang3.StringUtils;
@@ -48,7 +50,7 @@ private void exportTables(Connection connection, String databaseName, String sch
     public void exportTable(Connection connection, String databaseName, String schemaName, String tableName, AsyncContext asyncContext) throws SQLException {
         String tableDDL = Chat2DBContext.getMetaData().tableDDL(connection, databaseName, schemaName, tableName);
         StringBuilder sqlBuilder = new StringBuilder();
-        sqlBuilder.append("DROP TABLE ").append(schemaName).append(".").append(tableName).append(";")
+        sqlBuilder.append("DROP TABLE ").append(SqlUtils.quoteObjectName(tableName)).append(";")
                 .append(tableDDL).append(";").append("\n");
         asyncContext.write(sqlBuilder.toString());
 

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultSqlBuilder.java
Patch:
@@ -258,7 +258,7 @@ protected void buildTableName(String databaseName, String schemaName, String tab
      */
     public String buildSingleInsertSql(String databaseName, String schemaName, String tableName, List<String> columnList, List<String> valueList) {
         String baseSql = buildBaseInsertSql(databaseName, schemaName, tableName, columnList);
-        List<String> list = valueList.stream().map(EasyStringUtils::escapeString).toList();
+        List<String> list = valueList.stream().map(EasyStringUtils::escapeLineString).toList();
         return baseSql + "(" + String.join(",", list) + ");";
     }
 
@@ -274,7 +274,7 @@ public String buildSingleInsertSql(String databaseName, String schemaName, Strin
     public String buildMultiInsertSql(String databaseName, String schemaName, String tableName, List<String> columnList, List<List<String>> valueLists) {
         String baseSql = buildBaseInsertSql(databaseName, schemaName, tableName, columnList);
         String valuesPart = valueLists.stream()
-                .map(values -> "(" + String.join(",", values.stream().map(EasyStringUtils::escapeString).toList()) + ")")
+                .map(values -> "(" + String.join(",", values.stream().map(EasyStringUtils::escapeLineString).toList()) + ")")
                 .collect(Collectors.joining(",\n"));
         return baseSql + valuesPart + ";";
     }

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/value/sub/MysqlTimestampProcessor.java
Patch:
@@ -13,7 +13,7 @@ public class MysqlTimestampProcessor extends DefaultValueProcessor {
 
     @Override
     public String convertSQLValueByType(SQLDataValue dataValue) {
-        return dataValue.getValue();
+        return EasyStringUtils.quoteString(dataValue.getValue());
     }
 
 

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/value/factory/OracleValueProcessorFactory.java
Patch:
@@ -28,7 +28,7 @@ public class OracleValueProcessorFactory {
                 Map.entry(OracleColumnTypeEnum.DATE.name(), new OracleDateProcessor()),
                 //timestamp
                 Map.entry(OracleColumnTypeEnum.TIMESTAMP.name(), oracleTimeStampProcessor),
-                Map.entry(OracleColumnTypeEnum.TIMESTAMP_WITH_LOCAL_TIME_ZONE.getColumnType().getTypeName(), oracleTimeStampProcessor),
+                Map.entry(OracleColumnTypeEnum.TIMESTAMP_WITH_LOCAL_TIME_ZONE.getColumnType().getTypeName(), new OracleTimeStampLTZProcessor()),
                 Map.entry(OracleColumnTypeEnum.TIMESTAMP_WITH_TIME_ZONE.getColumnType().getTypeName(), new OracleTimeStampTZProcessor()),
                 //INTERVAL
                 Map.entry("INTERVALDS", new OracleIntervalDSProcessor()),

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/sql/SQLExecutor.java
Patch:
@@ -259,7 +259,7 @@ private int getChat2dbAutoRowIdIndex(List<Header> headerList) {
             Header header = headerList.get(i);
             if ("CAHT2DB_AUTO_ROW_ID".equals(header.getName())) {
                 headerList.remove(i);
-                return i;
+                return i+1;
             }
         }
         return -1;

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/enums/RoleCodeEnum.java
Patch:
@@ -18,7 +18,8 @@ public enum RoleCodeEnum implements BaseEnum<String> {
     /**
      * ADMIN
      */
-    ADMIN("ADMIN", 2L, "chat2db", "chat2db"),
+    ADMIN("ADMIN", 2L, System.getenv().getOrDefault("ADMIN_NAME","chat2db"),
+            System.getenv().getOrDefault("ADMIN_PASSWORD","chat2db")),
 
     /**
      * USER

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/enums/RoleCodeEnum.java
Patch:
@@ -18,7 +18,8 @@ public enum RoleCodeEnum implements BaseEnum<String> {
     /**
      * ADMIN
      */
-    ADMIN("ADMIN", 2L, "chat2db", "chat2db"),
+    ADMIN("ADMIN", 2L, System.getenv().getOrDefault("ADMIN_NAME","chat2db"),
+            System.getenv().getOrDefault("ADMIN_PASSWORD","chat2db")),
 
     /**
      * USER

File: chat2db-server/chat2db-plugins/chat2db-clickhouse/src/main/java/ai/chat2db/plugin/clickhouse/ClickHouseDBManage.java
Patch:
@@ -55,7 +55,7 @@ private void exportTablesOrViewsOrDictionaries(Connection connection,String data
                             .append(";").append("\n").append(ddl).append(";").append("\n");
                     asyncContext.write(sqlBuilder.toString());
                     if (asyncContext.isContainsData() && dataFlag) {
-                        exportTableData(connection,schemaName, tableOrViewName, asyncContext);
+                        exportTableData(connection, databaseName,schemaName, tableOrViewName, asyncContext);
                     }
                 }
             }

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/SqliteDBManage.java
Patch:
@@ -20,13 +20,13 @@ public void exportDatabase(Connection connection, String databaseName, String sc
     private void exportTables(Connection connection, String databaseName, String schemaName, AsyncContext asyncContext) throws SQLException {
         try (ResultSet resultSet = connection.getMetaData().getTables(databaseName, null, null, new String[]{"TABLE", "SYSTEM TABLE"})) {
             while (resultSet.next()) {
-                exportTable(connection,schemaName, resultSet.getString("TABLE_NAME"), asyncContext);
+                exportTable(connection, databaseName,schemaName, resultSet.getString("TABLE_NAME"), asyncContext);
             }
         }
     }
 
 
-    private void exportTable(Connection connection, String schemaName, String tableName, AsyncContext asyncContext) throws SQLException {
+    private void exportTable(Connection connection, String databaseName, String schemaName, String tableName, AsyncContext asyncContext) throws SQLException {
         String sql = String.format("SELECT sql FROM sqlite_master WHERE type='table' AND name='%s'", tableName);
         try (ResultSet resultSet = connection.createStatement().executeQuery(sql)) {
             if (resultSet.next()) {
@@ -35,7 +35,7 @@ private void exportTable(Connection connection, String schemaName, String tableN
                         .append(resultSet.getString("sql")).append(";").append("\n");
                 asyncContext.write(sqlBuilder.toString());
                 if (asyncContext.isContainsData()) {
-                    exportTableData(connection,schemaName, tableName, asyncContext);
+                    exportTableData(connection, databaseName,schemaName, tableName, asyncContext);
                 }
             }
         }

File: chat2db-server/chat2db-plugins/chat2db-clickhouse/src/main/java/ai/chat2db/plugin/clickhouse/ClickHouseDBManage.java
Patch:
@@ -55,7 +55,7 @@ private void exportTablesOrViewsOrDictionaries(Connection connection,String data
                             .append(";").append("\n").append(ddl).append(";").append("\n");
                     asyncContext.write(sqlBuilder.toString());
                     if (asyncContext.isContainsData() && dataFlag) {
-                        exportTableData(connection,schemaName, tableOrViewName, asyncContext);
+                        exportTableData(connection, databaseName,schemaName, tableOrViewName, asyncContext);
                     }
                 }
             }

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/SqliteDBManage.java
Patch:
@@ -20,13 +20,13 @@ public void exportDatabase(Connection connection, String databaseName, String sc
     private void exportTables(Connection connection, String databaseName, String schemaName, AsyncContext asyncContext) throws SQLException {
         try (ResultSet resultSet = connection.getMetaData().getTables(databaseName, null, null, new String[]{"TABLE", "SYSTEM TABLE"})) {
             while (resultSet.next()) {
-                exportTable(connection,schemaName, resultSet.getString("TABLE_NAME"), asyncContext);
+                exportTable(connection, databaseName,schemaName, resultSet.getString("TABLE_NAME"), asyncContext);
             }
         }
     }
 
 
-    private void exportTable(Connection connection, String schemaName, String tableName, AsyncContext asyncContext) throws SQLException {
+    private void exportTable(Connection connection, String databaseName, String schemaName, String tableName, AsyncContext asyncContext) throws SQLException {
         String sql = String.format("SELECT sql FROM sqlite_master WHERE type='table' AND name='%s'", tableName);
         try (ResultSet resultSet = connection.createStatement().executeQuery(sql)) {
             if (resultSet.next()) {
@@ -35,7 +35,7 @@ private void exportTable(Connection connection, String schemaName, String tableN
                         .append(resultSet.getString("sql")).append(";").append("\n");
                 asyncContext.write(sqlBuilder.toString());
                 if (asyncContext.isContainsData()) {
-                    exportTableData(connection,schemaName, tableName, asyncContext);
+                    exportTableData(connection, databaseName,schemaName, tableName, asyncContext);
                 }
             }
         }

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/PostgreSQLMetaData.java
Patch:
@@ -54,7 +54,7 @@ public List<Database> databases(Connection connection) {
 
     private List<String> systemSchemas = Arrays.asList("pg_toast", "pg_temp_1", "pg_toast_temp_1", "pg_catalog", "information_schema");
 
-    @Override
+/*    @Override
     public List<Schema> schemas(Connection connection, String databaseName) {
         List<Schema> schemas = SQLExecutor.getInstance().execute(connection,
                                                                  "SELECT catalog_name, schema_name FROM information_schema.schemata;", resultSet -> {
@@ -70,7 +70,7 @@ public List<Schema> schemas(Connection connection, String databaseName) {
                     return databases;
                 });
         return SortUtils.sortSchema(schemas, systemSchemas);
-    }
+    }*/
 
 
     private static final String SELECT_TABLE_INDEX = "SELECT tmp.INDISPRIMARY AS Index_primary, tmp.TABLE_SCHEM, tmp.TABLE_NAME, tmp.NON_UNIQUE, tmp.INDEX_QUALIFIER, tmp.INDEX_NAME AS Key_name, tmp.indisclustered, tmp.ORDINAL_POSITION AS Seq_in_index, TRIM ( BOTH '\"' FROM pg_get_indexdef ( tmp.CI_OID, tmp.ORDINAL_POSITION, FALSE ) ) AS Column_name,CASE  tmp.AM_NAME   WHEN 'btree' THEN CASE   tmp.I_INDOPTION [ tmp.ORDINAL_POSITION - 1 ] & 1 :: SMALLINT   WHEN 1 THEN  'D' ELSE'A'  END ELSE NULL  END AS Collation, tmp.CARDINALITY, tmp.PAGES, tmp.FILTER_CONDITION , tmp.AM_NAME AS Index_method, tmp.DESCRIPTION AS Index_comment FROM ( SELECT  n.nspname AS TABLE_SCHEM,  ct.relname AS TABLE_NAME,  NOT i.indisunique AS NON_UNIQUE, NULL AS INDEX_QUALIFIER,  ci.relname AS INDEX_NAME,i.INDISPRIMARY , i.indisclustered ,  ( information_schema._pg_expandarray ( i.indkey ) ).n AS ORDINAL_POSITION,  ci.reltuples AS CARDINALITY,   ci.relpages AS PAGES,  pg_get_expr ( i.indpred, i.indrelid ) AS FILTER_CONDITION,  ci.OID AS CI_OID, i.indoption AS I_INDOPTION,  am.amname AS AM_NAME , d.description  FROM   pg_class ct   JOIN pg_namespace n ON ( ct.relnamespace = n.OID )   JOIN pg_index i ON ( ct.OID = i.indrelid )   JOIN pg_class ci ON ( ci.OID = i.indexrelid )  JOIN pg_am am ON ( ci.relam = am.OID )      left outer join pg_description d on i.indexrelid = d.objoid  WHERE  n.nspname = '%s'   AND ct.relname = '%s'   ) AS tmp ;";

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultValueHandler.java
Patch:
@@ -37,6 +37,8 @@ public String getString(ResultSet rs, int index, boolean limitSize) throws SQLEx
                 return largeStringBlob(blob, limitSize);
             } else if (obj instanceof Timestamp || obj instanceof LocalDateTime) {
                 return largeTime(obj);
+            } else if (obj instanceof SQLXML){
+                return ((SQLXML) obj).getString();
             } else {
                 return obj.toString();
             }

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/type/DMColumnTypeEnum.java
Patch:
@@ -89,7 +89,7 @@ public enum DMColumnTypeEnum implements ColumnBuilder {
     TEXT("TEXT", false, false, true, false, false, false, true, true, false, false),
 
 
-    NUMBERIC("NUMBERIC", true, true, true, false, false, false, true, true, false, false),
+    NUMERIC("NUMERIC", true, true, true, false, false, false, true, true, false, false),
 
 
     NUMBER("NUMBER", true, true, true, false, false, false, true, true, false, false),
@@ -222,7 +222,7 @@ private String buildDataType(TableColumn column, DMColumnTypeEnum type) {
             return script.toString();
         }
 
-        if (Arrays.asList(DECIMAL,DEC, FLOAT, NUMBER, TIMESTAMP, NUMBERIC).contains(type)) {
+        if (Arrays.asList(DECIMAL, DEC, FLOAT, NUMBER, TIMESTAMP, NUMERIC).contains(type)) {
             StringBuilder script = new StringBuilder();
             script.append(columnType);
             if (column.getColumnSize() != null && column.getDecimalDigits() == null) {

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/type/DMColumnTypeEnum.java
Patch:
@@ -89,7 +89,7 @@ public enum DMColumnTypeEnum implements ColumnBuilder {
     TEXT("TEXT", false, false, true, false, false, false, true, true, false, false),
 
 
-    NUMBERIC("NUMBERIC", true, true, true, false, false, false, true, true, false, false),
+    NUMERIC("NUMERIC", true, true, true, false, false, false, true, true, false, false),
 
 
     NUMBER("NUMBER", true, true, true, false, false, false, true, true, false, false),
@@ -222,7 +222,7 @@ private String buildDataType(TableColumn column, DMColumnTypeEnum type) {
             return script.toString();
         }
 
-        if (Arrays.asList(DECIMAL,DEC, FLOAT, NUMBER, TIMESTAMP, NUMBERIC).contains(type)) {
+        if (Arrays.asList(DECIMAL, DEC, FLOAT, NUMBER, TIMESTAMP, NUMERIC).contains(type)) {
             StringBuilder script = new StringBuilder();
             script.append(columnType);
             if (column.getColumnSize() != null && column.getDecimalDigits() == null) {

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/sql/ConnectionPool.java
Patch:
@@ -42,9 +42,9 @@ public class ConnectionPool {
 
     }
 
-    public static synchronized void removeConnection(String key) {
+    public static synchronized void removeConnection(Long datasourceId) {
         CONNECTION_MAP.forEach((k, v) -> {
-            if (k.startsWith(key)) {
+            if (k.contains(String.valueOf(datasourceId))) {
                 try {
                     Connection connection = v.getConnection();
                     if (connection != null) {

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/SqlServerMetaData.java
Patch:
@@ -91,7 +91,7 @@ public String tableDDL(Connection connection, String databaseName, String schema
         });
     }
 
-    private static String SELECT_TABLES_SQL = "SELECT t.name AS TableName, mm.value as comment FROM sys.tables t LEFT JOIN(SELECT * from sys.extended_properties ep where ep.minor_id = 0 AND ep.name = 'MS_Description') mm ON t.object_id = mm.major_id WHERE t.schema_id= SCHEMA_ID('%S')";
+    private static String SELECT_TABLES_SQL = "SELECT t.name AS TableName, mm.value as comment FROM sys.tables t LEFT JOIN(SELECT * from sys.extended_properties ep where ep.minor_id = 0 AND ep.name = 'MS_Description') mm ON t.object_id = mm.major_id WHERE t.schema_id= SCHEMA_ID('%s')";
 
     @Override
     public List<Table> tables(Connection connection, String databaseName, String schemaName, String tableName) {
@@ -412,4 +412,5 @@ public List<String> getSystemDatabases() {
     public List<String> getSystemSchemas() {
         return systemSchemas;
     }
+
 }

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/MysqlDBManage.java
Patch:
@@ -134,6 +134,8 @@ public void updateProcedure(Connection connection, String databaseName, String s
         } catch (Exception e) {
             connection.rollback();
             throw new RuntimeException(e);
+        }finally {
+            connection.setAutoCommit(true);
         }
 
     }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DlTemplateServiceImpl.java
Patch:
@@ -100,13 +100,13 @@ public DataResult<ExecuteResult> executeUpdate(DlExecuteParam param) {
         List<String> sqlList = SqlUtils.parse(param.getSql(), dbType);
         Connection connection = Chat2DBContext.getConnection();
         try {
-            connection.setAutoCommit(false);
+//            connection.setAutoCommit(false);
             for (String originalSql : sqlList) {
                 ExecuteResult executeResult = executor.executeUpdate(originalSql, connection, 1);
                 dataResult.setData(executeResult);
                 addOperationLog(executeResult);
             }
-            connection.commit();
+//            connection.commit();
         } catch (Exception e) {
             log.error("executeUpdate error", e);
             dataResult.setSuccess(false);

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultDBManage.java
Patch:
@@ -67,13 +67,13 @@ private void close(Connection connection,Session session,SSHInfo ssh){
         if (connection != null) {
             try {
                 connection.close();
-            } catch (SQLException e) {
+            } catch (Exception e) {
             }
         }
         if (session != null) {
             try {
                 session.delPortForwardingL(Integer.parseInt(ssh.getLocalPort()));
-            } catch (JSchException e) {
+            } catch (Exception e) {
             }
             try {
                 session.disconnect();

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/ssh/SSHManager.java
Patch:
@@ -45,6 +45,7 @@ public static Session getSSHSession(SSHInfo ssh) {
             }
 
         } catch (Exception e) {
+            log.info("getSSHSession error,sshinfo:{}",ssh.toString(), e);
             throw new ConnectionException("connection.ssh.error", null, e);
         }
         if (session != null && StringUtils.isNotBlank(ssh.getRHost()) && StringUtils.isNotBlank(ssh.getRPort())) {
@@ -59,6 +60,7 @@ public static Session getSSHSession(SSHInfo ssh) {
                 session.setPortForwardingL(localPort, ssh.getRHost(),
                     Integer.parseInt(ssh.getRPort()));
             } catch (Exception e) {
+                log.info("getSSHSession setPortForwardingL error,sshinfo:{}",ssh.toString(), e);
                 if (session != null && session.isConnected()) {
                     session.disconnect();
                 }

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultSQLValueProcessor.java
Patch:
@@ -50,15 +50,15 @@ public String getSqlValueString(ResultSet rs, int index) throws SQLException {
         return "'" + escapeString(object) + "'";
     }
 
-    private String escapeString(Object object) {
+    public static String escapeString(Object object) {
         String s = (String) object;
         if (StringUtils.isBlank(s)) {
             return "";
         }
         return s.replace("\\", "\\\\").replace("'", "''");
     }
 
-    private String converterClob2Str(Clob c) {
+    public static String converterClob2Str(Clob c) {
         StringBuilder stringBuilder = new StringBuilder();
         try (Reader reader = c.getCharacterStream()) {
             BufferedReader bufferedReader = new BufferedReader(reader);
@@ -72,7 +72,7 @@ private String converterClob2Str(Clob c) {
         }
     }
 
-    private String converterByteArray2Str(byte[] bytes) {
+    public static String converterByteArray2Str(byte[] bytes) {
         return "0x" + BaseEncoding.base16().encode(bytes);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/value/MysqlValueProcessor.java
Patch:
@@ -22,7 +22,7 @@ public class MysqlValueProcessor extends DefaultSQLValueProcessor {
     public String getSqlValueString(ResultSet rs, int index) throws SQLException {
         Object obj = rs.getObject(index);
         if (obj == null) {
-            return null;
+            return "NULL";
         }
         String columnTypeName = rs.getMetaData().getColumnTypeName(index);
         if (MysqlColumnTypeEnum.GEOMETRY.name().equalsIgnoreCase(columnTypeName)

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DatabaseServiceImpl.java
Patch:
@@ -118,9 +118,10 @@ public DataResult<MetaSchema> queryDatabaseSchema(MetaDataQueryParam param) {
                             ThreadUtil.execute(() -> {
                                 try {
                                     database.setSchemas(metaData.schemas(connection, database.getName()));
-                                    countDownLatch.countDown();
                                 } catch (Exception e) {
                                     log.error("queryDatabaseSchema error", e);
+                                } finally{
+                                    countDownLatch.countDown();
                                 }
                             });
                         }

File: chat2db-server/chat2db-server-tools/chat2db-server-tools-common/src/main/java/ai/chat2db/server/tools/common/util/EasyStringUtils.java
Patch:
@@ -26,7 +26,7 @@ public class EasyStringUtils {
      * @return modified job number
      */
     public static String cutUserId(String userId) {
-        if (!org.apache.commons.lang3.StringUtils.isNumeric(userId)) {
+        if (!StringUtils.isNumeric(userId)) {
             return userId;
         }
         int startIndex = 0;

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/SqlServerMetaData.java
Patch:
@@ -91,7 +91,7 @@ public String tableDDL(Connection connection, String databaseName, String schema
         });
     }
 
-    private static String SELECT_TABLES_SQL = "SELECT t.name AS TableName, mm.value as comment FROM sys.tables t LEFT JOIN(SELECT * from sys.extended_properties ep where ep.minor_id = 0 AND ep.name = 'MS_Description') mm ON t.object_id = mm.major_id WHERE t.schema_id= SCHEMA_ID('%S') ";
+    private static String SELECT_TABLES_SQL = "SELECT t.name AS TableName, mm.value as comment FROM sys.tables t LEFT JOIN(SELECT * from sys.extended_properties ep where ep.minor_id = 0 AND ep.name = 'MS_Description') mm ON t.object_id = mm.major_id WHERE t.schema_id= SCHEMA_ID('%S') ORDER by t.name";
 
     @Override
     public List<Table> tables(Connection connection, String databaseName, String schemaName, String tableName) {

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/builder/HiveSqlBuilder.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.Map;
 
 
-public class HiveSqlBuilder extends DefaultSqlBuilder implements SqlBuilder {
+public class HiveSqlBuilder extends DefaultSqlBuilder implements SqlBuilder<Table> {
     @Override
     public String buildCreateTableSql(Table table) {
         StringBuilder script = new StringBuilder();

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/DB2MetaData.java
Patch:
@@ -115,15 +115,15 @@ public Table view(Connection connection, String databaseName, String schemaName,
         return table;
     }
 
-    private static String ROUTINE_DDL_SQL="select TEXT from syscat.routines where ROUTINESCHEMA='%s' and ROUTINENAME='%s';";
+    private static String ROUTINE_DDL_SQL="select TEXT from syscat.routines where ROUTINESCHEMA='%s' and ROUTINENAME='%s' and ROUTINETYPE='%s';";
 
     @Override
     public Function function(Connection connection, String databaseName, String schemaName, String functionName) {
         Function function = new Function();
        function.setDatabaseName(databaseName);
        function.setSchemaName(schemaName);
        function.setFunctionName(functionName);
-        String sql = String.format(ROUTINE_DDL_SQL, schemaName, functionName);
+        String sql = String.format(ROUTINE_DDL_SQL, schemaName, functionName,'F');
         SQLExecutor.getInstance().execute(connection, sql, resultSet -> {
             if (resultSet.next()) {
                 function.setFunctionBody(resultSet.getString("TEXT")+";");
@@ -138,7 +138,7 @@ public Procedure procedure(Connection connection, String databaseName, String sc
         procedure.setDatabaseName(databaseName);
         procedure.setSchemaName(schemaName);
         procedure.setProcedureName(procedureName);
-        String sql = String.format(ROUTINE_DDL_SQL, schemaName, procedureName);
+        String sql = String.format(ROUTINE_DDL_SQL, schemaName, procedureName,'P');
         SQLExecutor.getInstance().execute(connection, sql, resultSet -> {
             if (resultSet.next()) {
                 procedure.setProcedureBody(resultSet.getString("TEXT")+";");

File: chat2db-server/chat2db-plugins/chat2db-clickhouse/src/main/java/ai/chat2db/plugin/clickhouse/ClickHouseMetaData.java
Patch:
@@ -225,7 +225,7 @@ public Table view(Connection connection, String databaseName, String schemaName,
             table.setSchemaName(schemaName);
             table.setName(viewName);
             if (resultSet.next()) {
-                table.setDdl(resultSet.getString(1));
+                table.setDdl(resultSet.getString("create_table_query"));
             }
             return table;
         });

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/DB2MetaData.java
Patch:
@@ -115,15 +115,15 @@ public Table view(Connection connection, String databaseName, String schemaName,
         return table;
     }
 
-    private static String ROUTINE_DDL_SQL="select TEXT from syscat.routines where ROUTINESCHEMA='%s' and ROUTINENAME='%s';";
+    private static String ROUTINE_DDL_SQL="select TEXT from syscat.routines where ROUTINESCHEMA='%s' and ROUTINENAME='%s' and ROUTINETYPE='%s';";
 
     @Override
     public Function function(Connection connection, String databaseName, String schemaName, String functionName) {
         Function function = new Function();
        function.setDatabaseName(databaseName);
        function.setSchemaName(schemaName);
        function.setFunctionName(functionName);
-        String sql = String.format(ROUTINE_DDL_SQL, schemaName, functionName);
+        String sql = String.format(ROUTINE_DDL_SQL, schemaName, functionName,'F');
         SQLExecutor.getInstance().execute(connection, sql, resultSet -> {
             if (resultSet.next()) {
                 function.setFunctionBody(resultSet.getString("TEXT")+";");
@@ -138,7 +138,7 @@ public Procedure procedure(Connection connection, String databaseName, String sc
         procedure.setDatabaseName(databaseName);
         procedure.setSchemaName(schemaName);
         procedure.setProcedureName(procedureName);
-        String sql = String.format(ROUTINE_DDL_SQL, schemaName, procedureName);
+        String sql = String.format(ROUTINE_DDL_SQL, schemaName, procedureName,'P');
         SQLExecutor.getInstance().execute(connection, sql, resultSet -> {
             if (resultSet.next()) {
                 procedure.setProcedureBody(resultSet.getString("TEXT")+";");

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/consts/SQLConst.java
Patch:
@@ -558,6 +558,7 @@ SELECT indexdef, COALESCE(tablespace, 'pg_default') as tablespace, indexname FRO
                   if bSkip THEN CONTINUE; END IF;
                  
                   v_indexrec.indexdef := REPLACE(v_indexrec.indexdef, 'CREATE INDEX', 'CREATE INDEX IF NOT EXISTS');
+                  v_indexrec.indexdef := REPLACE(v_indexrec.indexdef, 'CREATE UNIQUE INDEX', 'CREATE UNIQUE INDEX IF NOT EXISTS');
                   IF v_partition_key IS NOT NULL AND v_partition_key <> '' THEN
                       v_table_ddl := v_table_ddl || v_indexrec.indexdef || ';' || E'\\n';
                   ELSE

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/PostgreSQLMetaData.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
+import static ai.chat2db.plugin.postgresql.consts.SQLConst.DROP_TYPE_SQL;
 import static ai.chat2db.plugin.postgresql.consts.SQLConst.TABLE_DEF_FUNCTION_SQL;
 import static ai.chat2db.spi.util.SortUtils.sortDatabase;
 
@@ -103,6 +104,7 @@ public List<Trigger> triggers(Connection connection, String databaseName, String
 
     @Override
     public String tableDDL(Connection connection, String databaseName, String schemaName, String tableName) {
+        SQLExecutor.getInstance().execute(connection, String.format(DROP_TYPE_SQL,schemaName,"tabledefs"), resultSet -> null);
         SQLExecutor.getInstance().execute(connection, TABLE_DEF_FUNCTION_SQL, resultSet -> null);
         String ddlSql = String.format("select * from pg_get_tabledef('%s','%s',false,'COMMENTS') as ddl;", schemaName, tableName);
         return SQLExecutor.getInstance().execute(connection, ddlSql, resultSet -> {

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/MysqlMetaData.java
Patch:
@@ -125,8 +125,8 @@ public List<Procedure> procedures(Connection connection, String databaseName, St
         String sql = "SHOW PROCEDURE STATUS WHERE Db = DATABASE()";
        return SQLExecutor.getInstance().execute(connection, sql, resultSet -> {
            ArrayList<Procedure> procedures = new ArrayList<>();
-           Procedure procedure = new Procedure();
            while (resultSet.next()){
+               Procedure procedure = new Procedure();
                procedure.setProcedureName(resultSet.getString("Name"));
                procedures.add(procedure);
            }

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/MysqlMetaData.java
Patch:
@@ -125,8 +125,8 @@ public List<Procedure> procedures(Connection connection, String databaseName, St
         String sql = "SHOW PROCEDURE STATUS WHERE Db = DATABASE()";
        return SQLExecutor.getInstance().execute(connection, sql, resultSet -> {
            ArrayList<Procedure> procedures = new ArrayList<>();
-           Procedure procedure = new Procedure();
            while (resultSet.next()){
+               Procedure procedure = new Procedure();
                procedure.setProcedureName(resultSet.getString("Name"));
                procedures.add(procedure);
            }

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/OracleMetaData.java
Patch:
@@ -242,8 +242,9 @@ public List<Trigger> triggers(Connection connection, String databaseName, String
         return SQLExecutor.getInstance().execute(connection, String.format(TRIGGER_SQL_LIST, schemaName),
                 resultSet -> {
                     while (resultSet.next()) {
+                        String triggerName = resultSet.getString("TRIGGER_NAME");
                         Trigger trigger = new Trigger();
-                        trigger.setTriggerName(resultSet.getString("TRIGGER_NAME"));
+                        trigger.setTriggerName(triggerName==null?"":triggerName.trim());
                         trigger.setSchemaName(schemaName);
                         trigger.setDatabaseName(databaseName);
                         triggers.add(trigger);
@@ -255,7 +256,6 @@ public List<Trigger> triggers(Connection connection, String databaseName, String
     @Override
     public Trigger trigger(Connection connection, @NotEmpty String databaseName, String schemaName,
                            String triggerName) {
-
         String sql = String.format(ROUTINES_SQL, "TRIGGER", triggerName);
         return SQLExecutor.getInstance().execute(connection, sql, resultSet -> {
             StringBuilder sb = new StringBuilder();

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/OracleMetaData.java
Patch:
@@ -266,7 +266,7 @@ public Trigger trigger(Connection connection, @NotEmpty String databaseName, Str
             trigger.setDatabaseName(databaseName);
             trigger.setSchemaName(schemaName);
             trigger.setTriggerName(triggerName);
-            trigger.setTriggerBody(resultSet.getString(sb.toString()));
+            trigger.setTriggerBody(sb.toString());
             return trigger;
         });
     }

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/type/DMColumnTypeEnum.java
Patch:
@@ -41,6 +41,7 @@ public enum DMColumnTypeEnum implements ColumnBuilder {
     DATE("DATE", false, false, true, false, false, false, true, true, false, false),
 
     DECIMAL("DECIMAL", true, true, true, false, false, false, true, true, false, false),
+    DEC("DEC", true, true, true, false, false, false, true, true, false, false),
 
     DOUBLE("DOUBLE", false, false, true, false, false, false, true, true, false, false),
 
@@ -221,7 +222,7 @@ private String buildDataType(TableColumn column, DMColumnTypeEnum type) {
             return script.toString();
         }
 
-        if (Arrays.asList(DECIMAL, FLOAT, NUMBER, TIMESTAMP, NUMBERIC).contains(type)) {
+        if (Arrays.asList(DECIMAL,DEC, FLOAT, NUMBER, TIMESTAMP, NUMBERIC).contains(type)) {
             StringBuilder script = new StringBuilder();
             script.append(columnType);
             if (column.getColumnSize() != null && column.getDecimalDigits() == null) {

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/type/DMColumnTypeEnum.java
Patch:
@@ -84,7 +84,8 @@ public enum DMColumnTypeEnum implements ColumnBuilder {
     LONGVARBINARY("LONGVARBINARY", false, false, true, false, false, false, true, true, false, false),
 
 
-    LONGVARCHAR("LONGVARCHAR", true, false, true, false, false, false, true, true, false, false),
+    LONGVARCHAR("LONGVARCHAR", false, false, true, false, false, false, true, true, false, false),
+    TEXT("TEXT", false, false, true, false, false, false, true, true, false, false),
 
 
     NUMBERIC("NUMBERIC", true, true, true, false, false, false, true, true, false, false),
@@ -209,7 +210,7 @@ private String buildDefaultValue(TableColumn column, DMColumnTypeEnum type) {
 
     private String buildDataType(TableColumn column, DMColumnTypeEnum type) {
         String columnType = type.columnType.getTypeName();
-        if (Arrays.asList(CHAR, VARCHAR, VARCHAR2, LONGVARCHAR).contains(type)) {
+        if (Arrays.asList(CHAR, VARCHAR, VARCHAR2, LONGVARCHAR,TEXT).contains(type)) {
             StringBuilder script = new StringBuilder();
             script.append(columnType);
             if (column.getColumnSize() != null && StringUtils.isEmpty(column.getUnit())) {

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/type/DMColumnTypeEnum.java
Patch:
@@ -84,7 +84,8 @@ public enum DMColumnTypeEnum implements ColumnBuilder {
     LONGVARBINARY("LONGVARBINARY", false, false, true, false, false, false, true, true, false, false),
 
 
-    LONGVARCHAR("LONGVARCHAR", true, false, true, false, false, false, true, true, false, false),
+    LONGVARCHAR("LONGVARCHAR", false, false, true, false, false, false, true, true, false, false),
+    TEXT("TEXT", false, false, true, false, false, false, true, true, false, false),
 
 
     NUMBERIC("NUMBERIC", true, true, true, false, false, false, true, true, false, false),
@@ -209,7 +210,7 @@ private String buildDefaultValue(TableColumn column, DMColumnTypeEnum type) {
 
     private String buildDataType(TableColumn column, DMColumnTypeEnum type) {
         String columnType = type.columnType.getTypeName();
-        if (Arrays.asList(CHAR, VARCHAR, VARCHAR2, LONGVARCHAR).contains(type)) {
+        if (Arrays.asList(CHAR, VARCHAR, VARCHAR2, LONGVARCHAR,TEXT).contains(type)) {
             StringBuilder script = new StringBuilder();
             script.append(columnType);
             if (column.getColumnSize() != null && StringUtils.isEmpty(column.getUnit())) {

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/type/DMColumnTypeEnum.java
Patch:
@@ -41,6 +41,7 @@ public enum DMColumnTypeEnum implements ColumnBuilder {
     DATE("DATE", false, false, true, false, false, false, true, true, false, false),
 
     DECIMAL("DECIMAL", true, true, true, false, false, false, true, true, false, false),
+    DEC("DEC", true, true, true, false, false, false, true, true, false, false),
 
     DOUBLE("DOUBLE", false, false, true, false, false, false, true, true, false, false),
 
@@ -220,7 +221,7 @@ private String buildDataType(TableColumn column, DMColumnTypeEnum type) {
             return script.toString();
         }
 
-        if (Arrays.asList(DECIMAL, FLOAT, NUMBER, TIMESTAMP, NUMBERIC).contains(type)) {
+        if (Arrays.asList(DECIMAL,DEC, FLOAT, NUMBER, TIMESTAMP, NUMBERIC).contains(type)) {
             StringBuilder script = new StringBuilder();
             script.append(columnType);
             if (column.getColumnSize() != null && column.getDecimalDigits() == null) {

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/OracleMetaData.java
Patch:
@@ -103,7 +103,7 @@ public List<TableColumn> columns(Connection connection, String databaseName, Str
                 tableColumn.setName(resultSet.getString("COLUMN_NAME"));
                 tableColumn.setColumnType(resultSet.getString("DATA_TYPE"));
                 Integer dataPrecision = resultSet.getInt("DATA_PRECISION");
-                if(dataPrecision!=null) {
+                if(resultSet.getString("DATA_PRECISION") != null) {
                     tableColumn.setColumnSize(dataPrecision);
                 }else {
                     tableColumn.setColumnSize(resultSet.getInt("DATA_LENGTH"));

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/OracleMetaData.java
Patch:
@@ -103,7 +103,7 @@ public List<TableColumn> columns(Connection connection, String databaseName, Str
                 tableColumn.setName(resultSet.getString("COLUMN_NAME"));
                 tableColumn.setColumnType(resultSet.getString("DATA_TYPE"));
                 Integer dataPrecision = resultSet.getInt("DATA_PRECISION");
-                if(dataPrecision!=null) {
+                if(resultSet.getString("DATA_PRECISION") != null) {
                     tableColumn.setColumnSize(dataPrecision);
                 }else {
                     tableColumn.setColumnSize(resultSet.getInt("DATA_LENGTH"));

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/DMMetaData.java
Patch:
@@ -90,7 +90,7 @@ public Procedure procedure(Connection connection, @NotEmpty String databaseName,
     }
 
     private static String TRIGGER_SQL
-        = "SELECT OWNER, TRIGGER_NAME, TABLE_OWNER, TABLE_NAME, TRIGGER_TYPE, TRIGGERING_EVENT, STATUS, TRIGGER_BODY "
+        = "SELECT OWNER, TRIGGER_NAME, TABLE_OWNER, TABLE_NAME, TRIGGERING_TYPE, TRIGGERING_EVENT, STATUS, TRIGGER_BODY "
         + "FROM ALL_TRIGGERS WHERE OWNER = '%s' AND TRIGGER_NAME = '%s'";
 
     private static String TRIGGER_SQL_LIST = "SELECT OWNER, TRIGGER_NAME FROM ALL_TRIGGERS WHERE OWNER = '%s'";

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/DMMetaData.java
Patch:
@@ -90,7 +90,7 @@ public Procedure procedure(Connection connection, @NotEmpty String databaseName,
     }
 
     private static String TRIGGER_SQL
-        = "SELECT OWNER, TRIGGER_NAME, TABLE_OWNER, TABLE_NAME, TRIGGER_TYPE, TRIGGERING_EVENT, STATUS, TRIGGER_BODY "
+        = "SELECT OWNER, TRIGGER_NAME, TABLE_OWNER, TABLE_NAME, TRIGGERING_TYPE, TRIGGERING_EVENT, STATUS, TRIGGER_BODY "
         + "FROM ALL_TRIGGERS WHERE OWNER = '%s' AND TRIGGER_NAME = '%s'";
 
     private static String TRIGGER_SQL_LIST = "SELECT OWNER, TRIGGER_NAME FROM ALL_TRIGGERS WHERE OWNER = '%s'";

File: chat2db-server/chat2db-plugins/chat2db-clickhouse/src/main/java/ai/chat2db/plugin/clickhouse/ClickHouseMetaData.java
Patch:
@@ -38,8 +38,7 @@ public class ClickHouseMetaData extends DefaultMetaService implements MetaData {
             = "SELECT TRIGGER_NAME FROM INFORMATION_SCHEMA.TRIGGERS where TRIGGER_SCHEMA = '%s';";
     private static String SELECT_TABLE_COLUMNS = "select * from `system`.columns where table ='%s' and database='%s';";
     private static String VIEW_SQL
-            = "SELECT TABLE_SCHEMA AS DatabaseName, TABLE_NAME AS ViewName, VIEW_DEFINITION AS definition, CHECK_OPTION, "
-            + "IS_UPDATABLE FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = '%s' AND TABLE_NAME = '%s';";
+            = "SELECT create_table_query from system.`tables` WHERE `database`='%s' and name='%s'";
     private List<String> systemDatabases = Arrays.asList("information_schema", "system");
 
     public static String format(String tableName) {
@@ -214,7 +213,7 @@ public Table view(Connection connection, String databaseName, String schemaName,
             table.setSchemaName(schemaName);
             table.setName(viewName);
             if (resultSet.next()) {
-                table.setDdl(resultSet.getString("definition"));
+                table.setDdl(resultSet.getString(1));
             }
             return table;
         });

File: chat2db-server/chat2db-plugins/chat2db-clickhouse/src/main/java/ai/chat2db/plugin/clickhouse/ClickHouseMetaData.java
Patch:
@@ -38,8 +38,7 @@ public class ClickHouseMetaData extends DefaultMetaService implements MetaData {
             = "SELECT TRIGGER_NAME FROM INFORMATION_SCHEMA.TRIGGERS where TRIGGER_SCHEMA = '%s';";
     private static String SELECT_TABLE_COLUMNS = "select * from `system`.columns where table ='%s' and database='%s';";
     private static String VIEW_SQL
-            = "SELECT TABLE_SCHEMA AS DatabaseName, TABLE_NAME AS ViewName, VIEW_DEFINITION AS definition, CHECK_OPTION, "
-            + "IS_UPDATABLE FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = '%s' AND TABLE_NAME = '%s';";
+            = "SELECT create_table_query from system.`tables` WHERE `database`='%s' and name='%s'";
     private List<String> systemDatabases = Arrays.asList("information_schema", "system");
 
     public static String format(String tableName) {
@@ -214,7 +213,7 @@ public Table view(Connection connection, String databaseName, String schemaName,
             table.setSchemaName(schemaName);
             table.setName(viewName);
             if (resultSet.next()) {
-                table.setDdl(resultSet.getString("definition"));
+                table.setDdl(resultSet.getString(1));
             }
             return table;
         });

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/DBManage.java
Patch:
@@ -1,6 +1,5 @@
 package ai.chat2db.spi;
 
-import ai.chat2db.server.tools.base.wrapper.result.ActionResult;
 import ai.chat2db.spi.model.Procedure;
 import ai.chat2db.spi.sql.ConnectInfo;
 import jakarta.validation.constraints.NotEmpty;
@@ -121,4 +120,6 @@ void dropProcedure(Connection connection, @NotEmpty String databaseName, String
      * @param procedure
      */
     void updateProcedure(Connection connection, @NotEmpty String databaseName, String schemaName, @NotNull Procedure procedure) throws SQLException;
+
+    String exportDatabase(Connection connection, String databaseName, String schemaName,boolean containData) throws SQLException;
 }
\ No newline at end of file

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/service/ProcedureService.java
Patch:
@@ -6,6 +6,8 @@
 import ai.chat2db.spi.model.Procedure;
 import jakarta.validation.constraints.NotEmpty;
 
+import java.sql.SQLException;
+
 public interface ProcedureService {
 
     /**
@@ -31,5 +33,5 @@ public interface ProcedureService {
      * @param procedure
      * @return
      */
-    ActionResult update(String databaseName, String schemaName, Procedure procedure);
+    ActionResult update(String databaseName, String schemaName, Procedure procedure) throws SQLException;
 }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/ProcedureServiceImpl.java
Patch:
@@ -8,6 +8,8 @@
 import ai.chat2db.spi.sql.Chat2DBContext;
 import org.springframework.stereotype.Service;
 
+import java.sql.SQLException;
+
 @Service
 public class ProcedureServiceImpl implements ProcedureService {
 
@@ -21,7 +23,7 @@ public DataResult<Procedure> detail(String databaseName, String schemaName, Stri
         return DataResult.of(Chat2DBContext.getMetaData().procedure(Chat2DBContext.getConnection(), databaseName, schemaName, procedureName));
     }
     @Override
-    public ActionResult update(String databaseName, String schemaName, Procedure procedure) {
+    public ActionResult update(String databaseName, String schemaName, Procedure procedure) throws SQLException {
         Chat2DBContext.getDBManage().updateProcedure(Chat2DBContext.getConnection(), databaseName, schemaName, procedure);
         return ActionResult.isSuccess();
     }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/ProcedureController.java
Patch:
@@ -15,6 +15,8 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.*;
 
+import java.sql.SQLException;
+
 @ConnectionInfoAspect
 @RequestMapping("/api/rdb/procedure")
 @RestController
@@ -39,7 +41,7 @@ public DataResult<Procedure> detail(@Valid ProcedureDetailRequest request) {
     }
 
     @PostMapping("/update")
-    public ActionResult update(@Valid @RequestBody ProcedureUpdateRequest request) {
+    public ActionResult update(@Valid @RequestBody ProcedureUpdateRequest request) throws SQLException {
         Procedure procedure = procedureConverter.request2param(request);
         return procedureService.update(request.getDatabaseName(), request.getSchemaName(), procedure);
     }

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/DBManage.java
Patch:
@@ -7,6 +7,7 @@
 import jakarta.validation.constraints.NotNull;
 
 import java.sql.Connection;
+import java.sql.SQLException;
 
 /**
  * @author jipengfei
@@ -119,5 +120,5 @@ void dropProcedure(Connection connection, @NotEmpty String databaseName, String
      * @param schemaName
      * @param procedure
      */
-    void updateProcedure(Connection connection, @NotEmpty String databaseName, String schemaName, @NotNull Procedure procedure);
+    void updateProcedure(Connection connection, @NotEmpty String databaseName, String schemaName, @NotNull Procedure procedure) throws SQLException;
 }
\ No newline at end of file

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultDBManage.java
Patch:
@@ -135,7 +135,7 @@ public void dropProcedure(Connection connection, String databaseName, String sch
     }
 
     @Override
-    public void updateProcedure(Connection connection, String databaseName, String schemaName, Procedure procedure) {
+    public void updateProcedure(Connection connection, String databaseName, String schemaName, Procedure procedure) throws SQLException {
 
     }
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/ws/WsServer.java
Patch:
@@ -186,7 +186,7 @@ public void onMessage(String message, Session session) {
                 wsResult.setMessage(actionResult);
                 SendMessage(session, wsResult);
             } finally {
-                Chat2DBContext.remove();
+                Chat2DBContext.removeContext();
                 ContextUtils.removeContext();
                 Dbutils.removeSession();
             }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/aspect/ConnectionInfoHandler.java
Patch:
@@ -6,6 +6,7 @@
 import ai.chat2db.server.domain.api.service.DataSourceService;
 import ai.chat2db.server.tools.base.wrapper.result.DataResult;
 import ai.chat2db.server.tools.common.exception.ParamBusinessException;
+import ai.chat2db.server.tools.common.util.ContextUtils;
 import ai.chat2db.server.web.api.controller.data.source.request.DataSourceBaseRequest;
 import ai.chat2db.server.web.api.controller.data.source.request.DataSourceBaseRequestInfo;
 import ai.chat2db.server.web.api.controller.data.source.request.DataSourceConsoleRequestInfo;
@@ -94,6 +95,7 @@ public ConnectInfo toInfo(Long dataSourceId, String database, Long consoleId, St
         connectInfo.setUrl(dataSource.getUrl());
         connectInfo.setPort(StringUtils.isNotBlank(dataSource.getPort()) ? Integer.parseInt(dataSource.getPort()) : null);
         connectInfo.setHost(dataSource.getHost());
+        connectInfo.setLoginUser(ContextUtils.getLoginUser().getId()+"");
         DriverConfig driverConfig = dataSource.getDriverConfig();
         if (driverConfig != null && driverConfig.notEmpty()) {
             connectInfo.setDriverConfig(driverConfig);

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/type/MysqlColumnTypeEnum.java
Patch:
@@ -327,6 +327,9 @@ public String buildColumn(TableColumn column) {
 
         script.append("`").append(column.getName()).append("`").append(" ");
         script.append(buildDataType(column, type)).append(" ");
+        if (StringUtils.isNoneBlank(column.getComment())) {
+            script.append("COMMENT").append(" ").append("'").append(column.getComment()).append("'").append(" ");
+        }
         return script.toString();
     }
 

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/SqlUtils.java
Patch:
@@ -132,7 +132,7 @@ public static List<String> parse(String sql, DbType dbType) {
     private static final String DEFAULT_VALUE = "CHAT2DB_UPDATE_TABLE_DATA_USER_FILLED_DEFAULT";
 
     public static String getSqlValue(String value, String dataType) {
-        if (value == null) {
+        if (value == null || value == "") {
             return null;
         }
         if (DEFAULT_VALUE.equals(value)) {

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/builder/MysqlSqlBuilder.java
Patch:
@@ -155,7 +155,7 @@ public String buildCreateDatabaseSql(Database database) {
     public String buildGenerateReorderColumnSql(Table oldTable, Table newTable) {
         StringBuilder sql = new StringBuilder();
         int n = 0;
-        for (int i = 0; i < oldTable.getColumnList().size(); i++) {
+        for (int i = 0; i < newTable.getColumnList().size(); i++) {
             TableColumn column = newTable.getColumnList().get(i);
             //String columnName = newTable.getColumnList().get(i).getName();
             // 获取oldTable.getColumnList()中name属性的list

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/builder/MysqlSqlBuilder.java
Patch:
@@ -155,7 +155,7 @@ public String buildCreateDatabaseSql(Database database) {
     public String buildGenerateReorderColumnSql(Table oldTable, Table newTable) {
         StringBuilder sql = new StringBuilder();
         int n = 0;
-        for (int i = 0; i < newTable.getColumnList().size(); i++) {
+        for (int i = 0; i < oldTable.getColumnList().size(); i++) {
             TableColumn column = newTable.getColumnList().get(i);
             //String columnName = newTable.getColumnList().get(i).getName();
             // 获取oldTable.getColumnList()中name属性的list

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/SqlUtils.java
Patch:
@@ -132,7 +132,7 @@ public static List<String> parse(String sql, DbType dbType) {
     private static final String DEFAULT_VALUE = "CHAT2DB_UPDATE_TABLE_DATA_USER_FILLED_DEFAULT";
 
     public static String getSqlValue(String value, String dataType) {
-        if (value == null) {
+        if (value == null || value == "") {
             return null;
         }
         if (DEFAULT_VALUE.equals(value)) {

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/type/MysqlColumnTypeEnum.java
Patch:
@@ -327,6 +327,9 @@ public String buildColumn(TableColumn column) {
 
         script.append("`").append(column.getName()).append("`").append(" ");
         script.append(buildDataType(column, type)).append(" ");
+        if (StringUtils.isNoneBlank(column.getComment())) {
+            script.append("COMMENT").append(" ").append("'").append(column.getComment()).append("'").append(" ");
+        }
         return script.toString();
     }
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/fastchat/listener/FastChatAIEventSourceListener.java
Patch:
@@ -66,7 +66,7 @@ public void onEvent(EventSource eventSource, String id, String type, String data
         log.info("Model={} is created at {}.", chatCompletions.getId(),
             chatCompletions.getCreated());
         for (FastChatChoice choice : chatCompletions.getChoices()) {
-            FastChatMessage message = choice.getMessage();
+            FastChatMessage message = choice.getDelta();
             if (message != null) {
                 log.info("Index: {}, Chat Role: {}", choice.getIndex(), message.getRole());
                 if (message.getContent() != null) {

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/builder/MysqlSqlBuilder.java
Patch:
@@ -111,7 +111,7 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
         }
 
         // append reorder column
-        script.append("\t").append(buildGenerateReorderColumnSql(oldTable, newTable));
+        script.append(buildGenerateReorderColumnSql(oldTable, newTable));
 
         if (script.length() > 2) {
             script = new StringBuilder(script.substring(0, script.length() - 2));

File: chat2db-server/chat2db-plugins/chat2db-oceanbase/src/main/java/ai/chat2db/plugin/oceanbase/OceanBaseMetaData.java
Patch:
@@ -4,4 +4,6 @@
 import ai.chat2db.spi.jdbc.DefaultMetaService;
 
 public class OceanBaseMetaData extends DefaultMetaService implements MetaData {
+
+
 }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/sql/SqlController.java
Patch:
@@ -3,7 +3,7 @@
 import ai.chat2db.server.tools.base.wrapper.result.DataResult;
 import ai.chat2db.server.web.api.aspect.ConnectionInfoAspect;
 import ai.chat2db.server.web.api.controller.sql.request.SqlFormatRequest;
-import com.manticore.jsqlformatter.JSQLFormatter;
+import com.github.vertical_blank.sqlformatter.SqlFormatter;
 import jakarta.validation.Valid;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -27,7 +27,7 @@ public class SqlController {
     public DataResult<String> list(@Valid SqlFormatRequest sqlFormatRequest) {
         String sql = sqlFormatRequest.getSql();
         try {
-            sql = JSQLFormatter.format(sql);
+            sql = SqlFormatter.format(sql);
         } catch (Exception e) {
             // ignore
         }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/TriggerController.java
Patch:
@@ -27,8 +27,8 @@ public class TriggerController {
     public WebPageResult<Trigger> list(@Valid TriggerPageRequest request) {
         ListResult<Trigger> listResult = triggerService.triggers(request.getDatabaseName(), request.getSchemaName());
         Long total = CollectionUtils.isNotEmpty(listResult.getData()) ? Long.valueOf(listResult.getData().size()) : 0L;
-        return WebPageResult.of(listResult.getData(), total, 1,
-                listResult.getData().size());
+        Integer pageSize = listResult.getData() != null ? listResult.getData().size() : 0;
+        return WebPageResult.of(listResult.getData(), total, 1, pageSize);
     }
 
     @GetMapping("/detail")

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/ViewController.java
Patch:
@@ -43,7 +43,8 @@ public class ViewController {
     public WebPageResult<TableVO> list(@Valid TableBriefQueryRequest request) {
         ListResult<Table> tableDTOPageResult = viewService.views(request.getDatabaseName(), request.getSchemaName());
         List<TableVO> tableVOS = rdbWebConverter.tableDto2vo(tableDTOPageResult.getData());
-        return WebPageResult.of(tableVOS, Long.valueOf(tableVOS.size()), 1, tableVOS.size());
+        Integer pageSize = tableDTOPageResult.getData() != null ? tableDTOPageResult.getData().size() : 0;
+        return WebPageResult.of(tableVOS, Long.valueOf(tableVOS.size()), 1, pageSize);
     }
 
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/RdbDmlController.java
Patch:
@@ -126,8 +126,7 @@ public ListResult<ExecuteResultVO> executeTable(@RequestBody DmlTableRequest req
         if (DataSourceTypeEnum.MONGODB.getCode().equals(type)) {
             param.setSql("db." + request.getTableName() + ".find()");
         } else {
-            // 拼接`tableName`，避免关键字被占用问题
-            param.setSql("select * from " +"`"+ request.getTableName()+"`");
+            param.setSql("select * from " + request.getTableName());
         }
         return dlTemplateService.execute(param)
             .map(rdbWebConverter::dto2vo);

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/RdbDmlController.java
Patch:
@@ -126,8 +126,7 @@ public ListResult<ExecuteResultVO> executeTable(@RequestBody DmlTableRequest req
         if (DataSourceTypeEnum.MONGODB.getCode().equals(type)) {
             param.setSql("db." + request.getTableName() + ".find()");
         } else {
-            // 拼接`tableName`，避免关键字被占用问题
-            param.setSql("select * from " +"`"+ request.getTableName()+"`");
+            param.setSql("select * from " + request.getTableName());
         }
         return dlTemplateService.execute(param)
             .map(rdbWebConverter::dto2vo);

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/RdbDmlController.java
Patch:
@@ -126,7 +126,8 @@ public ListResult<ExecuteResultVO> executeTable(@RequestBody DmlTableRequest req
         if (DataSourceTypeEnum.MONGODB.getCode().equals(type)) {
             param.setSql("db." + request.getTableName() + ".find()");
         } else {
-            param.setSql("select * from " + request.getTableName());
+            // 拼接`tableName`，避免关键字被占用问题
+            param.setSql("select * from " +"`"+ request.getTableName()+"`");
         }
         return dlTemplateService.execute(param)
             .map(rdbWebConverter::dto2vo);

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultValueHandler.java
Patch:
@@ -36,7 +36,7 @@ public String getString(ResultSet rs, int index, boolean limitSize) throws SQLEx
             } else if (obj instanceof Blob blob) {
                 return largeStringBlob(blob, limitSize);
             }
-            return rs.getString(index);
+            return obj.toString();
         } catch (Exception e) {
             log.warn("解析数失败:{},{}", index, obj, e);
             return obj.toString();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/RdbDmlController.java
Patch:
@@ -71,7 +71,8 @@ public ListResult<ExecuteResultVO> executeTable(@RequestBody DmlTableRequest req
         if (DataSourceTypeEnum.MONGODB.getCode().equals(type)) {
             param.setSql("db." + request.getTableName() + ".find()");
         } else {
-            param.setSql("select * from " + request.getTableName());
+            // 拼接`tableName`，避免关键字被占用问题
+            param.setSql("select * from " +"`"+ request.getTableName()+"`");
         }
         return dlTemplateService.execute(param)
             .map(rdbWebConverter::dto2vo);

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/DB2MetaData.java
Patch:
@@ -8,6 +8,7 @@
 
 import ai.chat2db.plugin.db2.builder.DB2SqlBuilder;
 import ai.chat2db.plugin.db2.type.DB2ColumnTypeEnum;
+import ai.chat2db.plugin.db2.type.DB2DefaultValueEnum;
 import ai.chat2db.plugin.db2.type.DB2IndexTypeEnum;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.SqlBuilder;
@@ -152,6 +153,7 @@ public TableMeta getTableMeta(String databaseName, String schemaName, String tab
                 .charsets(Lists.newArrayList())
                 .collations(Lists.newArrayList())
                 .indexTypes(DB2IndexTypeEnum.getIndexTypes())
+                .defaultValues(DB2DefaultValueEnum.getDefaultValues())
                 .build();
     }
 

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/DMMetaData.java
Patch:
@@ -8,6 +8,7 @@
 
 import ai.chat2db.plugin.dm.builder.DMSqlBuilder;
 import ai.chat2db.plugin.dm.type.DMColumnTypeEnum;
+import ai.chat2db.plugin.dm.type.DMDefaultValueEnum;
 import ai.chat2db.plugin.dm.type.DMIndexTypeEnum;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.SqlBuilder;
@@ -218,6 +219,7 @@ public TableMeta getTableMeta(String databaseName, String schemaName, String tab
                 .charsets(Lists.newArrayList())
                 .collations(Lists.newArrayList())
                 .indexTypes(DMIndexTypeEnum.getIndexTypes())
+                .defaultValues(DMDefaultValueEnum.getDefaultValues())
                 .build();
     }
 

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/KingBaseMetaData.java
Patch:
@@ -2,6 +2,7 @@
 
 import ai.chat2db.plugin.kingbase.builder.KingBaseSqlBuilder;
 import ai.chat2db.plugin.kingbase.type.KingBaseColumnTypeEnum;
+import ai.chat2db.plugin.kingbase.type.KingBaseDefaultValueEnum;
 import ai.chat2db.plugin.kingbase.type.KingBaseIndexTypeEnum;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.SqlBuilder;
@@ -196,6 +197,7 @@ public TableMeta getTableMeta(String databaseName, String schemaName, String tab
                 //.charsets(PostgreSQLCharsetEnum.getCharsets())
                 //.collations(PostgreSQLCollationEnum.getCollations())
                 .indexTypes(KingBaseIndexTypeEnum.getIndexTypes())
+                .defaultValues(KingBaseDefaultValueEnum.getDefaultValues())
                 .build();
     }
     @Override

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/OracleMetaData.java
Patch:
@@ -8,6 +8,7 @@
 
 import ai.chat2db.plugin.oracle.builder.OracleSqlBuilder;
 import ai.chat2db.plugin.oracle.type.OracleColumnTypeEnum;
+import ai.chat2db.plugin.oracle.type.OracleDefaultValueEnum;
 import ai.chat2db.plugin.oracle.type.OracleIndexTypeEnum;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.SqlBuilder;
@@ -290,6 +291,7 @@ public TableMeta getTableMeta(String databaseName, String schemaName, String tab
                 .charsets(Lists.newArrayList())
                 .collations(Lists.newArrayList())
                 .indexTypes(OracleIndexTypeEnum.getIndexTypes())
+                .defaultValues(OracleDefaultValueEnum.getDefaultValues())
                 .build();
     }
 

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/SqliteMetaData.java
Patch:
@@ -9,6 +9,7 @@
 import ai.chat2db.plugin.sqlite.builder.SqliteBuilder;
 import ai.chat2db.plugin.sqlite.type.SqliteCollationEnum;
 import ai.chat2db.plugin.sqlite.type.SqliteColumnTypeEnum;
+import ai.chat2db.plugin.sqlite.type.SqliteDefaultValueEnum;
 import ai.chat2db.plugin.sqlite.type.SqliteIndexTypeEnum;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.SqlBuilder;
@@ -56,6 +57,7 @@ public TableMeta getTableMeta(String databaseName, String schemaName, String tab
                 .charsets(null)
                 .collations(SqliteCollationEnum.getCollations())
                 .indexTypes(SqliteIndexTypeEnum.getIndexTypes())
+                .defaultValues(SqliteDefaultValueEnum.getDefaultValues())
                 .build();
     }
 

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/SqlServerMetaData.java
Patch:
@@ -8,6 +8,7 @@
 
 import ai.chat2db.plugin.sqlserver.builder.SqlServerSqlBuilder;
 import ai.chat2db.plugin.sqlserver.type.SqlServerColumnTypeEnum;
+import ai.chat2db.plugin.sqlserver.type.SqlServerDefaultValueEnum;
 import ai.chat2db.plugin.sqlserver.type.SqlServerIndexTypeEnum;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.SqlBuilder;
@@ -382,6 +383,7 @@ public TableMeta getTableMeta(String databaseName, String schemaName, String tab
                 .charsets(null)
                 .collations(null)
                 .indexTypes(SqlServerIndexTypeEnum.getIndexTypes())
+                .defaultValues(SqlServerDefaultValueEnum.getDefaultValues())
                 .build();
     }
 

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/TableMeta.java
Patch:
@@ -19,4 +19,6 @@ public class TableMeta {
 
 
     private List<IndexType> indexTypes;
+
+    private List<DefaultValue> defaultValues;
 }

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/builder/MysqlSqlBuilder.java
Patch:
@@ -17,7 +17,7 @@ public String buildCreateTableSql(Table table) {
         StringBuilder script = new StringBuilder();
         script.append("CREATE TABLE ");
         if(StringUtils.isNotBlank(table.getDatabaseName())) {
-            script.append("`").append(table.getName()).append("`").append(".");
+            script.append("`").append(table.getDatabaseName()).append("`").append(".");
         }
         script.append("`").append(table.getName()).append("`").append(" (").append("\n");
 

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/DMMetaData.java
Patch:
@@ -145,7 +145,7 @@ public Table view(Connection connection, String databaseName, String schemaName,
         });
     }
 
-    private static String INDEX_SQL = "SELECT i.TABLE_NAME, i.INDEX_TYPE, i.INDEX_NAME, i.UNIQUENESS ,c.COLUMN_NAME, c.COLUMN_POSITION, c.DESCEND, cons.CONSTRAINT_TYPE FROM ALL_INDEXES i JOIN ALL_IND_COLUMNS c ON i.INDEX_NAME = c.INDEX_NAME AND i.TABLE_NAME = c.TABLE_NAME AND i.TABLE_OWNER = c.TABLE_OWNER LEFT JOIN ALL_CONSTRAINTS cons ON i.INDEX_NAME = cons.INDEX_NAME AND i.TABLE_NAME = cons.TABLE_NAME AND i.TABLE_OWNER = cons.OWNER WHERE i.TABLE_NAME = '%s' ORDER BY i.INDEX_NAME, c.COLUMN_POSITION;";
+    private static String INDEX_SQL = "SELECT i.TABLE_NAME, i.INDEX_TYPE, i.INDEX_NAME, i.UNIQUENESS ,c.COLUMN_NAME, c.COLUMN_POSITION, c.DESCEND, cons.CONSTRAINT_TYPE FROM ALL_INDEXES i JOIN ALL_IND_COLUMNS c ON i.INDEX_NAME = c.INDEX_NAME AND i.TABLE_NAME = c.TABLE_NAME AND i.TABLE_OWNER = c.TABLE_OWNER LEFT JOIN ALL_CONSTRAINTS cons ON i.INDEX_NAME = cons.INDEX_NAME AND i.TABLE_NAME = cons.TABLE_NAME AND i.TABLE_OWNER = cons.OWNER WHERE i.TABLE_OWNER = '%s' AND i.TABLE_NAME = '%s' ORDER BY i.INDEX_NAME, c.COLUMN_POSITION;";
 
     @Override
     public List<TableIndex> indexes(Connection connection, String databaseName, String schemaName, String tableName) {

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/operation/saved/OperationSavedController.java
Patch:
@@ -73,8 +73,7 @@ public DataResult<OperationVO> get(@PathVariable("id") Long id) {
         OperationQueryParam param = new OperationQueryParam();
         param.setId(id);
         param.setUserId(ContextUtils.getUserId());
-        return operationService.queryExistent(param)
-            .map(operationWebConverter::dto2vo);
+        return operationService.queryExistent(param).map(operationWebConverter::dto2vo);
     }
 
     /**

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/sql/IDriverManager.java
Patch:
@@ -85,8 +85,9 @@ public static Connection getConnection(String url, Properties info, DriverConfig
         if (Objects.isNull(driverEntry)) {
             driverEntry = getJDBCDriver(driver);
         }
-
-        try (Connection connection = driverEntry.getDriver().connect(url, info)) {
+        Connection connection;
+        try  {
+            connection = driverEntry.getDriver().connect(url, info);
             if (Objects.isNull(connection)) {
                 throw new SQLException(String.format("driver.connect return null , No suitable driver found for url %s", url), SQL_STATE_CODE);
 

File: chat2db-server/chat2db-plugins/chat2db-clickhouse/src/main/java/ai/chat2db/plugin/clickhouse/ClickHousePlugin.java
Patch:
@@ -1,16 +1,16 @@
 package ai.chat2db.plugin.clickhouse;
 
 
-import ai.chat2db.plugin.clickhouse.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class ClickHousePlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"clickhouse.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/DB2Plugin.java
Patch:
@@ -1,15 +1,16 @@
 package ai.chat2db.plugin.db2;
 
-import ai.chat2db.plugin.db2.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class DB2Plugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"db2.json", DBConfig.class);
+
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/DMPlugin.java
Patch:
@@ -1,15 +1,16 @@
 package ai.chat2db.plugin.dm;
 
-import ai.chat2db.plugin.dm.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class DMPlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"dm.json", DBConfig.class);
+
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-h2/src/main/java/ai/chat2db/plugin/h2/H2Plugin.java
Patch:
@@ -1,16 +1,16 @@
 package ai.chat2db.plugin.h2;
 
-import ai.chat2db.plugin.h2.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
 import ai.chat2db.spi.jdbc.DefaultMetaService;
+import ai.chat2db.spi.util.FileUtils;
 
 public class H2Plugin extends DefaultMetaService implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"h2.json", DBConfig.class);
     }
 
     @Override
@@ -22,4 +22,5 @@ public MetaData getMetaData() {
     public DBManage getDBManage() {
         return new H2DBManage();
     }
+
 }

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/HivePlugin.java
Patch:
@@ -1,15 +1,15 @@
 package ai.chat2db.plugin.hive;
 
-import ai.chat2db.plugin.hive.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class HivePlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"hive.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/KingBasePlugin.java
Patch:
@@ -1,15 +1,15 @@
 package ai.chat2db.plugin.kingbase;
 
-import ai.chat2db.plugin.kingbase.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class KingBasePlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"kingbase.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-mariadb/src/main/java/ai/chat2db/plugin/mariadb/MariaDBPlugin.java
Patch:
@@ -1,15 +1,15 @@
 package ai.chat2db.plugin.mariadb;
 
-import ai.chat2db.plugin.mariadb.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class MariaDBPlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"mariadb.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-mongodb/src/main/java/ai/chat2db/plugin/mongodb/MongodbPlugin.java
Patch:
@@ -1,15 +1,16 @@
 package ai.chat2db.plugin.mongodb;
 
-import ai.chat2db.plugin.mongodb.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class MongodbPlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"mongodb.json", DBConfig.class);
+
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/MysqlPlugin.java
Patch:
@@ -1,16 +1,16 @@
 package ai.chat2db.plugin.mysql;
 
-import ai.chat2db.plugin.mysql.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class MysqlPlugin implements Plugin {
 
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"mysql.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-oceanbase/src/main/java/ai/chat2db/plugin/oceanbase/OceanBasePlugin.java
Patch:
@@ -1,16 +1,15 @@
 package ai.chat2db.plugin.oceanbase;
 
-import ai.chat2db.plugin.oceanbase.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
-import ai.chat2db.spi.jdbc.DefaultMetaService;
+import ai.chat2db.spi.util.FileUtils;
 
 public class OceanBasePlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"oceanbase.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/OraclePlugin.java
Patch:
@@ -1,16 +1,17 @@
 package ai.chat2db.plugin.oracle;
 
 
-import ai.chat2db.plugin.oracle.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class OraclePlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"oracle.json", DBConfig.class);
+
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/PostgreSQLPlugin.java
Patch:
@@ -1,15 +1,15 @@
 package ai.chat2db.plugin.postgresql;
 
-import ai.chat2db.plugin.postgresql.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class PostgreSQLPlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"pg.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/type/PostgreSQLColumnTypeEnum.java
Patch:
@@ -122,7 +122,7 @@ private String buildCollation(TableColumn column, PostgreSQLColumnTypeEnum type)
     public String buildModifyColumn(TableColumn column) {
 
         if (EditStatus.DELETE.name().equals(column.getEditStatus())) {
-            return StringUtils.join("DROP COLUMN `", column.getName() + "`");
+            return StringUtils.join("DROP COLUMN \"", column.getName() + "\"");
         }
         if (EditStatus.ADD.name().equals(column.getEditStatus())) {
             return StringUtils.join("ADD COLUMN ", buildCreateColumnSql(column));

File: chat2db-server/chat2db-plugins/chat2db-presto/src/main/java/ai/chat2db/plugin/presto/PrestoPlugin.java
Patch:
@@ -1,16 +1,16 @@
 package ai.chat2db.plugin.presto;
 
 
-import ai.chat2db.plugin.presto.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class PrestoPlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"presto.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-redis/src/main/java/ai/chat2db/plugin/redis/RedisPlugin.java
Patch:
@@ -1,17 +1,18 @@
 package ai.chat2db.plugin.redis;
 
 
-import ai.chat2db.plugin.redis.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class RedisPlugin implements Plugin {
 
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"redis.json", DBConfig.class);
+
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/SqlitePlugin.java
Patch:
@@ -1,15 +1,15 @@
 package ai.chat2db.plugin.sqlite;
 
-import ai.chat2db.plugin.sqlite.builder.DBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class SqlitePlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return DBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"sqlite.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/SqlServerPlugin.java
Patch:
@@ -1,16 +1,16 @@
 package ai.chat2db.plugin.sqlserver;
 
 
-import ai.chat2db.plugin.sqlserver.builder.SqlServerDBConfigBuilder;
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.MetaData;
 import ai.chat2db.spi.Plugin;
 import ai.chat2db.spi.config.DBConfig;
+import ai.chat2db.spi.util.FileUtils;
 
 public class SqlServerPlugin implements Plugin {
     @Override
     public DBConfig getDBConfig() {
-        return SqlServerDBConfigBuilder.buildDBConfig();
+        return FileUtils.readJsonValue(this.getClass(),"sqlserver.json", DBConfig.class);
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/builder/SqlServerSqlBuilder.java
Patch:
@@ -130,6 +130,9 @@ public String pageLimit(String sql, int offset, int pageNo, int pageSize) {
             if (versions.length > 0 && Integer.parseInt(versions[0]) >= 11) {
                 StringBuilder sqlBuilder = new StringBuilder(sql.length() + 14);
                 sqlBuilder.append(sql);
+                if(!sql.toLowerCase().contains("order by")){
+                    sqlBuilder.append("\n ORDER BY (SELECT NULL)");
+                }
                 sqlBuilder.append("\n OFFSET ");
                 sqlBuilder.append(offset);
                 sqlBuilder.append(" ROWS ");

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DatabaseServiceImpl.java
Patch:
@@ -89,7 +89,8 @@ private void sortSchema(List<Schema> schemas, Connection connection) {
         // If the database name contains the name of the current database, the current database is placed in the first place
         int num = -1;
         for (int i = 0; i < schemas.size(); i++) {
-            if (StringUtils.isNotBlank(ulr) && ulr.contains(schemas.get(i).getName())) {
+            String schema = schemas.get(i).getName();
+            if (StringUtils.isNotBlank(ulr) && schema!=null && ulr.contains(schema)) {
                 num = i;
                 break;
             }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/aspect/ConnectionInfoHandler.java
Patch:
@@ -14,6 +14,7 @@
 import ai.chat2db.spi.sql.ConnectInfo;
 import jakarta.annotation.Resource;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.StringUtils;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.aspectj.lang.annotation.Around;
 import org.aspectj.lang.annotation.Aspect;
@@ -91,7 +92,7 @@ public ConnectInfo toInfo(Long dataSourceId, String database, Long consoleId, St
         connectInfo.setJdbc(dataSource.getJdbc());
         connectInfo.setExtendInfo(dataSource.getExtendInfo());
         connectInfo.setUrl(dataSource.getUrl());
-        connectInfo.setPort(dataSource.getPort() != null ? Integer.parseInt(dataSource.getPort()) : null);
+        connectInfo.setPort(StringUtils.isNotBlank(dataSource.getPort()) ? Integer.parseInt(dataSource.getPort()) : null);
         connectInfo.setHost(dataSource.getHost());
         DriverConfig driverConfig = dataSource.getDriverConfig();
         if (driverConfig != null && driverConfig.notEmpty()) {

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/ChatController.java
Patch:
@@ -480,6 +480,9 @@ private List<FastChatMessage> getFastChatMessage(String uid, String prompt) {
     private SseEmitter chatWithWenxinAi(ChatQueryRequest queryRequest, SseEmitter sseEmitter, String uid) throws IOException {
         String prompt = buildPrompt(queryRequest);
         List<FastChatMessage> messages = getFastChatMessage(uid, prompt);
+        if (messages.size() >= 2 && messages.size() % 2 == 0) {
+            messages.remove(messages.size() - 1);
+        }
 
         buildSseEmitter(sseEmitter, uid);
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/RdbDmlExportController.java
Patch:
@@ -7,6 +7,7 @@
 import java.time.LocalDateTime;
 import java.util.List;
 
+import ai.chat2db.spi.jdbc.DefaultValueHandler;
 import com.alibaba.druid.DbType;
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.SQLUtils.FormatOption;
@@ -130,7 +131,7 @@ private void doExportCsv(String sql, HttpServletResponse response, String fileNa
                 List<List<String>> writeDataList = Lists.newArrayList();
                 writeDataList.add(dataList);
                 excelWrapper.getExcelWriter().write(writeDataList, excelWrapper.getWriteSheet());
-            }, false);
+            }, false,new DefaultValueHandler());
         } finally {
             if (excelWrapper.getExcelWriter() != null) {
                 excelWrapper.getExcelWriter().finish();
@@ -161,7 +162,7 @@ private void doExportInsert(String sql, HttpServletResponse response, String fil
                     sqlInsertStatement.setValues(valuesClause);
 
                     printWriter.println(SQLUtils.toSQLString(sqlInsertStatement, dbType, INSERT_FORMAT_OPTION) + ";");
-                }, false);
+                }, false,new DefaultValueHandler());
         }
     }
 

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/Schema.java
Patch:
@@ -24,12 +24,12 @@ public class Schema implements Serializable {
     /**
      * databaseName
      */
-    @JsonAlias({"TABLE_CATALOG"})
+    @JsonAlias({"TABLE_CATALOG","table_catalog"})
     private String databaseName;
     /**
      * 数据名字
      */
-    @JsonAlias({"TABLE_SCHEM"})
+    @JsonAlias({"TABLE_SCHEM","table_schem"})
     private String name;
 
 

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/ResultSetUtils.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Map;
 
 import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies;
 import com.google.common.collect.Lists;
@@ -55,6 +56,7 @@ public static <T> List<T> toObjectList(ResultSet rs, Class<T> clazz) {
             ObjectMapper mapper = new ObjectMapper();
             mapper.setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE);
             mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
+            mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);
             while (rs.next()) {
                 Map<String, Object> map = new HashMap<>();
                 for (int i = 1; i <= col; i++) {

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DatabaseServiceImpl.java
Patch:
@@ -89,7 +89,8 @@ private void sortSchema(List<Schema> schemas, Connection connection) {
         // If the database name contains the name of the current database, the current database is placed in the first place
         int num = -1;
         for (int i = 0; i < schemas.size(); i++) {
-            if (StringUtils.isNotBlank(ulr) && ulr.contains(schemas.get(i).getName())) {
+            String schema = schemas.get(i).getName();
+            if (StringUtils.isNotBlank(ulr) && schema!=null && ulr.contains(schema)) {
                 num = i;
                 break;
             }

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/Schema.java
Patch:
@@ -24,12 +24,12 @@ public class Schema implements Serializable {
     /**
      * databaseName
      */
-    @JsonAlias({"TABLE_CATALOG"})
+    @JsonAlias({"TABLE_CATALOG","table_catalog"})
     private String databaseName;
     /**
      * 数据名字
      */
-    @JsonAlias({"TABLE_SCHEM"})
+    @JsonAlias({"TABLE_SCHEM","table_schem"})
     private String name;
 
 

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/sql/SQLExecutor.java
Patch:
@@ -461,7 +461,6 @@ public String getDbVersion(Connection connection) {
             return dbVersion;
         } catch (Exception e) {
             log.error("get db version error", e);
-            //throw new RuntimeException(e);
         }
         return "";
     }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DlTemplateServiceImpl.java
Patch:
@@ -11,6 +11,7 @@
 import ai.chat2db.server.domain.api.service.TableService;
 import ai.chat2db.server.domain.core.util.MetaNameUtils;
 import ai.chat2db.spi.MetaData;
+import ai.chat2db.spi.ValueHandler;
 import ai.chat2db.spi.model.*;
 import ai.chat2db.spi.sql.ConnectInfo;
 import com.alibaba.druid.DbType;
@@ -36,7 +37,6 @@
 import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections4.CollectionUtils;
-import org.apache.commons.collections4.ListUtils;
 import org.apache.commons.lang3.ObjectUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -436,7 +436,8 @@ private List<Header> setColumnInfo(List<Header> headers, String tableName, Strin
     private ExecuteResult execute(String sql, Integer offset, Integer count) {
         ExecuteResult executeResult;
         try {
-            executeResult = SQLExecutor.getInstance().execute(sql, Chat2DBContext.getConnection(), true, offset, count);
+            ValueHandler valueHandler = Chat2DBContext.getMetaData().getValueHandler();
+            executeResult = SQLExecutor.getInstance().execute(sql, Chat2DBContext.getConnection(), true, offset, count,valueHandler);
         } catch (SQLException e) {
             log.warn("执行sql:{}异常", sql, e);
             executeResult = ExecuteResult.builder()

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/RdbDmlExportController.java
Patch:
@@ -7,6 +7,7 @@
 import java.time.LocalDateTime;
 import java.util.List;
 
+import ai.chat2db.spi.jdbc.DefaultValueHandler;
 import com.alibaba.druid.DbType;
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.SQLUtils.FormatOption;
@@ -130,7 +131,7 @@ private void doExportCsv(String sql, HttpServletResponse response, String fileNa
                 List<List<String>> writeDataList = Lists.newArrayList();
                 writeDataList.add(dataList);
                 excelWrapper.getExcelWriter().write(writeDataList, excelWrapper.getWriteSheet());
-            }, false);
+            }, false,new DefaultValueHandler());
         } finally {
             if (excelWrapper.getExcelWriter() != null) {
                 excelWrapper.getExcelWriter().finish();
@@ -161,7 +162,7 @@ private void doExportInsert(String sql, HttpServletResponse response, String fil
                     sqlInsertStatement.setValues(valuesClause);
 
                     printWriter.println(SQLUtils.toSQLString(sqlInsertStatement, dbType, INSERT_FORMAT_OPTION) + ";");
-                }, false);
+                }, false,new DefaultValueHandler());
         }
     }
 

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/type/MysqlColumnTypeEnum.java
Patch:
@@ -271,7 +271,7 @@ private String buildDataType(TableColumn column, MysqlColumnTypeEnum type) {
             return StringUtils.join(columnType, "(", column.getColumnSize(), ")");
         }
 
-        if (Arrays.asList(BIT, TINYINT).contains(type)) {
+        if (Arrays.asList(BIT).contains(type)) {
             return StringUtils.join(columnType, "(", column.getColumnSize(), ")");
         }
 

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/type/MysqlColumnTypeEnum.java
Patch:
@@ -271,7 +271,7 @@ private String buildDataType(TableColumn column, MysqlColumnTypeEnum type) {
             return StringUtils.join(columnType, "(", column.getColumnSize(), ")");
         }
 
-        if (BIT.equals(type)) {
+        if (Arrays.asList(BIT, TINYINT).contains(type)) {
             return StringUtils.join(columnType, "(", column.getColumnSize(), ")");
         }
 

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/type/MysqlColumnTypeEnum.java
Patch:
@@ -15,7 +15,7 @@ public enum MysqlColumnTypeEnum implements ColumnBuilder {
 
     BIT("BIT", true, false, true, false, false, false, true, true, false, false),
 
-    TINYINT("TINYINT", false, false, true, true, false, false, true, true, false, false),
+    TINYINT("TINYINT", true, false, true, true, false, false, true, true, false, false),
 
     TINYINT_UNSIGNED("TINYINT UNSIGNED", false, false, true, true, false, false, true, true, false, false),
 
@@ -271,7 +271,7 @@ private String buildDataType(TableColumn column, MysqlColumnTypeEnum type) {
             return StringUtils.join(columnType, "(", column.getColumnSize(), ")");
         }
 
-        if (BIT.equals(type)) {
+        if (Arrays.asList(BIT, TINYINT).contains(type)) {
             return StringUtils.join(columnType, "(", column.getColumnSize(), ")");
         }
 

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/builder/SqlServerSqlBuilder.java
Patch:
@@ -130,6 +130,9 @@ public String pageLimit(String sql, int offset, int pageNo, int pageSize) {
             if (versions.length > 0 && Integer.parseInt(versions[0]) >= 11) {
                 StringBuilder sqlBuilder = new StringBuilder(sql.length() + 14);
                 sqlBuilder.append(sql);
+                if(!sql.toLowerCase().contains("order by")){
+                    sqlBuilder.append("\n ORDER BY (SELECT NULL)");
+                }
                 sqlBuilder.append("\n OFFSET ");
                 sqlBuilder.append(offset);
                 sqlBuilder.append(" ROWS ");

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/consts/SQLConst.java
Patch:
@@ -42,7 +42,7 @@ public class SQLConst {
             + "        -- 约束\n"
             + "        tableScript:= tableScript || chr(13)||chr(10) || array_to_string(\n"
             + "        array(\n"
-            + "        select concat(' CONSTRAINT ',conname ,c ,u,p,f) from (\n"
+            + "        select concat(' CONSTRAINT ', conname || '_' || tablename ,c ,u,p,f) from (\n"
             + "        select conname,\n"
             + "        case when contype='c' then ' CHECK('|| ( select findattname(namespace,tablename,'c') ) ||')' "
             + "end "
@@ -109,13 +109,13 @@ public class SQLConst {
             + "        -- COMMENT COMMENT ON COLUMN sys_activity.id IS '主键';\n"
             + "        tableScript:= tableScript || chr(13)||chr(10) || chr(13)||chr(10) || array_to_string(\n"
             + "        array(\n"
-            + "        SELECT 'COMMENT ON COLUMN ' || tablename || '.' || a.attname ||' IS '|| ''''|| d.description "
+            + "        SELECT 'COMMENT ON COLUMN ' || 'namespace.tablename' || '.' || a.attname ||' IS '|| ''''|| d.description "
             + "||''''\n"
             + "        FROM pg_class c\n"
             + "        JOIN pg_description d ON c.oid=d.objoid\n"
             + "        JOIN pg_attribute a ON c.oid = a.attrelid\n"
             + "        WHERE c.relname=tablename\n"
-            + "        AND a.attnum = d.objsubid),','|| chr(13)||chr(10)) ;\n"
+            + "        AND a.attnum = d.objsubid),';'|| chr(13)||chr(10)) ;\n"
             + "\n"
             + "        return tableScript;\n"
             + "\n"

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/type/PostgreSQLColumnTypeEnum.java
Patch:
@@ -122,7 +122,7 @@ private String buildCollation(TableColumn column, PostgreSQLColumnTypeEnum type)
     public String buildModifyColumn(TableColumn column) {
 
         if (EditStatus.DELETE.name().equals(column.getEditStatus())) {
-            return StringUtils.join("DROP COLUMN `", column.getName() + "`");
+            return StringUtils.join("DROP COLUMN \"", column.getName() + "\"");
         }
         if (EditStatus.ADD.name().equals(column.getEditStatus())) {
             return StringUtils.join("ADD COLUMN ", buildCreateColumnSql(column));

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/aspect/ConnectionInfoHandler.java
Patch:
@@ -14,6 +14,7 @@
 import ai.chat2db.spi.sql.ConnectInfo;
 import jakarta.annotation.Resource;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.StringUtils;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.aspectj.lang.annotation.Around;
 import org.aspectj.lang.annotation.Aspect;
@@ -91,7 +92,7 @@ public ConnectInfo toInfo(Long dataSourceId, String database, Long consoleId, St
         connectInfo.setJdbc(dataSource.getJdbc());
         connectInfo.setExtendInfo(dataSource.getExtendInfo());
         connectInfo.setUrl(dataSource.getUrl());
-        connectInfo.setPort(dataSource.getPort() != null ? Integer.parseInt(dataSource.getPort()) : null);
+        connectInfo.setPort(StringUtils.isNotBlank(dataSource.getPort()) ? Integer.parseInt(dataSource.getPort()) : null);
         connectInfo.setHost(dataSource.getHost());
         DriverConfig driverConfig = dataSource.getDriverConfig();
         if (driverConfig != null && driverConfig.notEmpty()) {

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/TableServiceImpl.java
Patch:
@@ -206,6 +206,7 @@ public PageResult<Table> pageQuery(TablePageQueryParam param, TableSelector sele
                 tables.add(t);
             }
         }
+        tables = pinTable(tables, param);
         return PageResult.of(tables, total, param);
     }
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/doc/constant/CommonConstant.java
Patch:
@@ -1,13 +1,10 @@
 package ai.chat2db.server.web.api.controller.rdb.doc.constant;
 
-import lombok.extern.java.Log;
-
 /**
  * CommonConstant
  *
  * @author lzy
  **/
-@Log
 public final class CommonConstant {
     /**
      * 表head

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/doc/export/ExportHtmlService.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.BufferedWriter;
 import java.io.ByteArrayOutputStream;
-import java.io.FileInputStream;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.nio.charset.StandardCharsets;
@@ -86,8 +86,7 @@ public void export(OutputStream outputStream, ExportOptions exportOptions) {
             }
             catalogue.append("</li>");
 
-            String filePath = GlobalDict.templateDir + GlobalDict.TEMPLATE_FILE.get(0);
-            try (FileInputStream inputStream = new FileInputStream(filePath);
+            try (InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("template/" + GlobalDict.TEMPLATE_FILE.get(0));
                  ByteArrayOutputStream result = new ByteArrayOutputStream()) {
                 byte[] buffer = new byte[1024];
                 int length;

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/factory/ExportServiceFactory.java
Patch:
@@ -28,7 +28,6 @@ public class ExportServiceFactory {
         REPORT_POOL.put(ExportTypeEnum.MARKDOWN.name(), ExportMarkdownService.class);
         REPORT_POOL.put(ExportTypeEnum.HTML.name(), ExportHtmlService.class);
         REPORT_POOL.put(ExportTypeEnum.PDF.name(), ExportPdfService.class);
-        CopyTemplate.copyTemplateFile();
     }
 
     /**

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/operation/log/vo/OperationLogVO.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.server.web.api.controller.operation.log.vo;
 
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import lombok.Data;
 
 import java.time.LocalDateTime;
@@ -21,11 +22,13 @@ public class OperationLogVO {
     /**
      * 创建时间
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
     private LocalDateTime gmtCreate;
 
     /**
      * 修改时间
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
     private LocalDateTime gmtModified;
 
     /**

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DlTemplateServiceImpl.java
Patch:
@@ -282,7 +282,7 @@ private List<String> getPrimaryColumns(UpdateSelectResultParam param) {
                 keyColumns.add(header.getName());
             }
         }
-        return Lists.newArrayList();
+        return keyColumns;
     }
 
     private String getDeleteSql(UpdateSelectResultParam param, List<String> row, MetaData metaSchema, List<String> keyColumns) {

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/sql/SQLExecutor.java
Patch:
@@ -186,7 +186,7 @@ public ExecuteResult execute(final String sql, Connection connection, boolean li
         ExecuteResult executeResult = ExecuteResult.builder().sql(sql).success(Boolean.TRUE).build();
         try (Statement stmt = connection.createStatement()) {
             stmt.setFetchSize(EasyToolsConstant.MAX_PAGE_SIZE);
-            stmt.setQueryTimeout(30);
+            //stmt.setQueryTimeout(30);
             if (offset != null && count != null) {
                 stmt.setMaxRows(offset + count);
             }

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/builder/DB2SqlBuilder.java
Patch:
@@ -7,6 +7,7 @@
 import ai.chat2db.spi.model.Table;
 import ai.chat2db.spi.model.TableColumn;
 import ai.chat2db.spi.model.TableIndex;
+import ai.chat2db.spi.util.TableUtils;
 import org.apache.commons.lang3.StringUtils;
 
 public class DB2SqlBuilder extends DefaultSqlBuilder {
@@ -84,7 +85,7 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
         for (TableColumn tableColumn : newTable.getColumnList()) {
             if (StringUtils.isNotBlank(tableColumn.getEditStatus())) {
                 DB2ColumnTypeEnum typeEnum = DB2ColumnTypeEnum.getByType(tableColumn.getColumnType());
-                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn)).append(";\n");
+                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn, TableUtils.getTableColumn(oldTable,tableColumn.getOldName()))).append(";\n");
                 if (StringUtils.isNotBlank(tableColumn.getComment())) {
                     script.append("\n").append(buildComment(tableColumn)).append(";\n");
                 }

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/type/DB2ColumnTypeEnum.java
Patch:
@@ -229,7 +229,7 @@ private String buildDataType(TableColumn column, DB2ColumnTypeEnum type) {
 
 
     @Override
-    public String buildModifyColumn(TableColumn tableColumn) {
+    public String buildModifyColumn(TableColumn tableColumn, TableColumn oldColumn) {
 
         if (EditStatus.DELETE.name().equals(tableColumn.getEditStatus())) {
             StringBuilder script = new StringBuilder();

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/builder/DMSqlBuilder.java
Patch:
@@ -7,6 +7,7 @@
 import ai.chat2db.spi.model.Table;
 import ai.chat2db.spi.model.TableColumn;
 import ai.chat2db.spi.model.TableIndex;
+import ai.chat2db.spi.util.TableUtils;
 import org.apache.commons.lang3.StringUtils;
 
 public class DMSqlBuilder  extends DefaultSqlBuilder {
@@ -81,7 +82,7 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
         for (TableColumn tableColumn : newTable.getColumnList()) {
             if (StringUtils.isNotBlank(tableColumn.getEditStatus())) {
                 DMColumnTypeEnum typeEnum = DMColumnTypeEnum.getByType(tableColumn.getColumnType());
-                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn)).append(";\n");
+                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn, TableUtils.getTableColumn(oldTable,tableColumn.getOldName()))).append(";\n");
                 if (StringUtils.isNotBlank(tableColumn.getComment())) {
                     script.append("\n").append(buildComment(tableColumn)).append(";\n");
                 }

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/type/DMColumnTypeEnum.java
Patch:
@@ -250,7 +250,7 @@ private String buildDataType(TableColumn column, DMColumnTypeEnum type) {
 
 
     @Override
-    public String buildModifyColumn(TableColumn tableColumn) {
+    public String buildModifyColumn(TableColumn tableColumn, TableColumn oldColumn) {
 
         if (EditStatus.DELETE.name().equals(tableColumn.getEditStatus())) {
             StringBuilder script = new StringBuilder();

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/builder/KingBaseSqlBuilder.java
Patch:
@@ -5,6 +5,7 @@
 import ai.chat2db.spi.SqlBuilder;
 import ai.chat2db.spi.jdbc.DefaultSqlBuilder;
 import ai.chat2db.spi.model.*;
+import ai.chat2db.spi.util.TableUtils;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.BooleanUtils;
 import org.apache.commons.lang3.StringUtils;
@@ -109,7 +110,7 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
         // append modify column
         for (TableColumn tableColumn : newTable.getColumnList()) {
             KingBaseColumnTypeEnum typeEnum = KingBaseColumnTypeEnum.getByType(tableColumn.getColumnType());
-            scriptModify.append("\t").append(typeEnum.buildModifyColumn(tableColumn)).append(",\n");
+            scriptModify.append("\t").append(typeEnum.buildModifyColumn(tableColumn, TableUtils.getTableColumn(oldTable,tableColumn.getOldName()))).append(",\n");
             modify = true;
 
         }

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/type/KingBaseColumnTypeEnum.java
Patch:
@@ -130,7 +130,7 @@ private String buildCollation(TableColumn column, KingBaseColumnTypeEnum type) {
     }
 
     @Override
-    public String buildModifyColumn(TableColumn column) {
+    public String buildModifyColumn(TableColumn column, TableColumn oldColumn) {
 
         if (EditStatus.DELETE.name().equals(column.getEditStatus())) {
             return StringUtils.join("DROP COLUMN `", column.getName() + "`");

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/builder/MysqlSqlBuilder.java
Patch:
@@ -8,6 +8,7 @@
 import ai.chat2db.spi.model.Table;
 import ai.chat2db.spi.model.TableColumn;
 import ai.chat2db.spi.model.TableIndex;
+import ai.chat2db.spi.util.TableUtils;
 import org.apache.commons.lang3.StringUtils;
 
 
@@ -86,7 +87,7 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
         for (TableColumn tableColumn : newTable.getColumnList()) {
             if (StringUtils.isNotBlank(tableColumn.getEditStatus()) &&  StringUtils.isNotBlank(tableColumn.getColumnType())&& StringUtils.isNotBlank(tableColumn.getName())){
                 MysqlColumnTypeEnum typeEnum = MysqlColumnTypeEnum.getByType(tableColumn.getColumnType());
-                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn)).append(",\n");
+                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn, TableUtils.getTableColumn(oldTable,tableColumn.getOldName()))).append(",\n");
             }
         }
 

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/type/MysqlColumnTypeEnum.java
Patch:
@@ -181,7 +181,7 @@ private String buildCollation(TableColumn column, MysqlColumnTypeEnum type) {
     }
 
     @Override
-    public String buildModifyColumn(TableColumn tableColumn) {
+    public String buildModifyColumn(TableColumn tableColumn, TableColumn oldColumn) {
 
         if (EditStatus.DELETE.name().equals(tableColumn.getEditStatus())) {
             return StringUtils.join("DROP COLUMN `", tableColumn.getName() + "`");

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/builder/OracleSqlBuilder.java
Patch:
@@ -9,6 +9,7 @@
 import ai.chat2db.spi.model.TableColumn;
 import ai.chat2db.spi.model.TableIndex;
 import ai.chat2db.spi.sql.Chat2DBContext;
+import ai.chat2db.spi.util.TableUtils;
 import org.apache.commons.lang3.StringUtils;
 
 public class OracleSqlBuilder extends DefaultSqlBuilder implements SqlBuilder {
@@ -81,7 +82,7 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
         for (TableColumn tableColumn : newTable.getColumnList()) {
             if (StringUtils.isNotBlank(tableColumn.getEditStatus())) {
                 OracleColumnTypeEnum typeEnum = OracleColumnTypeEnum.getByType(tableColumn.getColumnType());
-                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn)).append(";\n");
+                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn, TableUtils.getTableColumn(oldTable,tableColumn.getOldName()))).append(";\n");
                 if (StringUtils.isNotBlank(tableColumn.getComment())) {
                     script.append("\n").append(buildComment(tableColumn)).append(";\n");
                 }

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/builder/PostgreSQLSqlBuilder.java
Patch:
@@ -5,6 +5,7 @@
 import ai.chat2db.spi.SqlBuilder;
 import ai.chat2db.spi.jdbc.DefaultSqlBuilder;
 import ai.chat2db.spi.model.*;
+import ai.chat2db.spi.util.TableUtils;
 import com.google.common.collect.Lists;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.BooleanUtils;
@@ -107,7 +108,7 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
         // append modify column
         for (TableColumn tableColumn : newTable.getColumnList()) {
             PostgreSQLColumnTypeEnum typeEnum = PostgreSQLColumnTypeEnum.getByType(tableColumn.getColumnType());
-            scriptModify.append("\t").append(typeEnum.buildModifyColumn(tableColumn)).append(",\n");
+            scriptModify.append("\t").append(typeEnum.buildModifyColumn(tableColumn, TableUtils.getTableColumn(oldTable,tableColumn.getOldName()))).append(",\n");
             modify = true;
 
         }

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/type/PostgreSQLColumnTypeEnum.java
Patch:
@@ -119,7 +119,7 @@ private String buildCollation(TableColumn column, PostgreSQLColumnTypeEnum type)
     }
 
     @Override
-    public String buildModifyColumn(TableColumn column) {
+    public String buildModifyColumn(TableColumn column, TableColumn oldColumn) {
 
         if (EditStatus.DELETE.name().equals(column.getEditStatus())) {
             return StringUtils.join("DROP COLUMN `", column.getName() + "`");

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/builder/SqliteBuilder.java
Patch:
@@ -7,6 +7,7 @@
 import ai.chat2db.spi.model.Table;
 import ai.chat2db.spi.model.TableColumn;
 import ai.chat2db.spi.model.TableIndex;
+import ai.chat2db.spi.util.TableUtils;
 import org.apache.commons.lang3.StringUtils;
 
 
@@ -57,7 +58,7 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
             if (StringUtils.isNotBlank(tableColumn.getEditStatus()) && StringUtils.isNotBlank(tableColumn.getColumnType()) && StringUtils.isNotBlank(tableColumn.getName())) {
                 script.append("ALTER TABLE ").append("\"").append(newTable.getDatabaseName()).append("\".\"").append(newTable.getName()).append("\"").append("\n");
                 SqliteColumnTypeEnum typeEnum = SqliteColumnTypeEnum.getByType(tableColumn.getColumnType());
-                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn)).append(";\n");
+                script.append("\t").append(typeEnum.buildModifyColumn(tableColumn, TableUtils.getTableColumn(oldTable,tableColumn.getOldName()))).append(";\n");
             }
         }
 

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/type/SqliteColumnTypeEnum.java
Patch:
@@ -92,7 +92,7 @@ private String buildCollation(TableColumn column, SqliteColumnTypeEnum type) {
     }
 
     @Override
-    public String buildModifyColumn(TableColumn tableColumn) {
+    public String buildModifyColumn(TableColumn tableColumn, TableColumn oldColumn) {
 
 //        if (EditStatus.DELETE.name().equals(tableColumn.getEditStatus())) {
 //            return StringUtils.join("DROP COLUMN \"", tableColumn.getName() + "\"");

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/builder/SqlServerSqlBuilder.java
Patch:
@@ -6,6 +6,7 @@
 import ai.chat2db.spi.jdbc.DefaultSqlBuilder;
 import ai.chat2db.spi.model.*;
 import ai.chat2db.spi.sql.Chat2DBContext;
+import ai.chat2db.spi.util.TableUtils;
 import org.apache.commons.lang3.StringUtils;
 
 public class SqlServerSqlBuilder extends DefaultSqlBuilder implements SqlBuilder {
@@ -92,7 +93,7 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
         for (TableColumn tableColumn : newTable.getColumnList()) {
             if (StringUtils.isNotBlank(tableColumn.getEditStatus())) {
                 SqlServerColumnTypeEnum typeEnum = SqlServerColumnTypeEnum.getByType(tableColumn.getColumnType());
-                script.append(typeEnum.buildModifyColumn(tableColumn)).append("\n");
+                script.append(typeEnum.buildModifyColumn(tableColumn, TableUtils.getTableColumn(oldTable,tableColumn.getOldName()))).append("\n");
             }
         }
 

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/type/SqlServerColumnTypeEnum.java
Patch:
@@ -267,7 +267,7 @@ private String renameColumn(TableColumn tableColumn) {
 
 
     @Override
-    public String buildModifyColumn(TableColumn tableColumn) {
+    public String buildModifyColumn(TableColumn tableColumn, TableColumn oldColumn) {
 
         if (EditStatus.DELETE.name().equals(tableColumn.getEditStatus())) {
             StringBuilder script = new StringBuilder();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/RdbDmlController.java
Patch:
@@ -110,7 +110,7 @@ public DataResult<ExecuteResultVO> executeDDL(@RequestBody DmlRequest request) {
                     //connection.commit();
                     return DataResult.of(resultVOS.get(0));
                 }else {
-                    connection.rollback();
+                    //connection.rollback();
                     return DataResult.of(executeResult);
                 }
             } catch (Exception e) {

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/ColumnBuilder.java
Patch:
@@ -15,7 +15,8 @@ public interface ColumnBuilder {
     /**
      * Build modify column sql
      * @param tableColumn
+     * @param oldColumn
      * @return
      */
-    String buildModifyColumn(TableColumn tableColumn);
+    String buildModifyColumn(TableColumn tableColumn, TableColumn oldColumn);
 }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/TableServiceImpl.java
Patch:
@@ -206,6 +206,7 @@ public PageResult<Table> pageQuery(TablePageQueryParam param, TableSelector sele
                 tables.add(t);
             }
         }
+        tables = pinTable(tables, param);
         return PageResult.of(tables, total, param);
     }
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/doc/constant/CommonConstant.java
Patch:
@@ -1,13 +1,10 @@
 package ai.chat2db.server.web.api.controller.rdb.doc.constant;
 
-import lombok.extern.java.Log;
-
 /**
  * CommonConstant
  *
  * @author lzy
  **/
-@Log
 public final class CommonConstant {
     /**
      * 表head

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/doc/export/ExportHtmlService.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.BufferedWriter;
 import java.io.ByteArrayOutputStream;
-import java.io.FileInputStream;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.nio.charset.StandardCharsets;
@@ -86,8 +86,7 @@ public void export(OutputStream outputStream, ExportOptions exportOptions) {
             }
             catalogue.append("</li>");
 
-            String filePath = GlobalDict.templateDir + GlobalDict.TEMPLATE_FILE.get(0);
-            try (FileInputStream inputStream = new FileInputStream(filePath);
+            try (InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("template/" + GlobalDict.TEMPLATE_FILE.get(0));
                  ByteArrayOutputStream result = new ByteArrayOutputStream()) {
                 byte[] buffer = new byte[1024];
                 int length;

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/factory/ExportServiceFactory.java
Patch:
@@ -28,7 +28,6 @@ public class ExportServiceFactory {
         REPORT_POOL.put(ExportTypeEnum.MARKDOWN.name(), ExportMarkdownService.class);
         REPORT_POOL.put(ExportTypeEnum.HTML.name(), ExportHtmlService.class);
         REPORT_POOL.put(ExportTypeEnum.PDF.name(), ExportPdfService.class);
-        CopyTemplate.copyTemplateFile();
     }
 
     /**

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/zhipu/client/ZhipuChatAIClient.java
Patch:
@@ -58,8 +58,8 @@ private static ZhipuChatAIStreamClient singleton() {
 
     public static void refresh() {
         String apiKey = "";
-        String apiHost = "";
-        String model = "";
+        String apiHost = "https://open.bigmodel.cn/api/paas/v3/model-api/";
+        String model = "chatglm_turbo";
         ConfigService configService = ApplicationContextUtil.getBean(ConfigService.class);
         Config apiHostConfig = configService.find(ZHIPU_HOST).getData();
         if (apiHostConfig != null && StringUtils.isNotBlank(apiHostConfig.getContent())) {

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/zhipu/client/ZhipuChatAIStreamClient.java
Patch:
@@ -211,7 +211,7 @@ public void streamCompletions(List<FastChatMessage> chatMessages, EventSourceLis
                 .build();
             //创建事件
             EventSource eventSource = factory.newEventSource(request, eventSourceListener);
-            log.info("finish invoking fast chat ai");
+            log.info("finish invoking zhipu chat ai");
         } catch (Exception e) {
             log.error("fast chat ai error", e);
             eventSourceListener.onFailure(null, e, null);

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/zhipu/model/ZhipuChatCompletions.java
Patch:
@@ -14,6 +14,8 @@ public class ZhipuChatCompletions {
 
     private int statusCode;
 
+    private String data;
+
     /*
      * The collection of completions choices associated with this completions response.
      * Generally, `n` choices are generated per provided prompt with a default value of 1.

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/zhipu/client/ZhipuChatAIStreamClient.java
Patch:
@@ -6,9 +6,6 @@
 import ai.chat2db.server.web.api.controller.ai.zhipu.model.ZhipuChatCompletionsOptions;
 import cn.hutool.http.ContentType;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.gson.Gson;
-import com.zhipu.oapi.core.response.RawResponse;
-import com.zhipu.oapi.service.v3.*;
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
 import okhttp3.MediaType;

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/zhipu/model/ZhipuChatCompletionsOptions.java
Patch:
@@ -5,12 +5,9 @@
 
 import ai.chat2db.server.web.api.controller.ai.fastchat.model.FastChatMessage;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import com.zhipu.oapi.service.v3.ModelConstants;
 import lombok.Data;
 
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 /**
  * The configuration information for a chat completions request. Completions support a wide variety of tasks and

File: chat2db-server/chat2db-plugins/chat2db-clickhouse/src/main/java/ai/chat2db/plugin/clickhouse/builder/DBConfigBuilder.java
Patch:
@@ -13,7 +13,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("clickhouse-jdbc-0.3.2-patch8-http.jar");
         driverConfig.setJdbcDriverClass("com.clickhouse.jdbc.ClickHouseDriver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/clickhouse-jdbc-0.3.2-patch8-http.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/clickhouse-jdbc-0.3.2-patch8-http.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
 
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/builder/DBConfigBuilder.java
Patch:
@@ -13,7 +13,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("db2jcc4_4.26.14.jar");
         driverConfig.setJdbcDriverClass("com.ibm.db2.jcc.DB2Driver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/db2jcc4_4.26.14.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/db2jcc4_4.26.14.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
 
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/builder/DBConfigBuilder.java
Patch:
@@ -14,7 +14,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("DmJdbcDriver18-8.1.2.141.jar");
         driverConfig.setJdbcDriverClass("dm.jdbc.driver.DmDriver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/DmJdbcDriver18-8.1.2.141.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/DmJdbcDriver18-8.1.2.141.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
 
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));

File: chat2db-server/chat2db-plugins/chat2db-h2/src/main/java/ai/chat2db/plugin/h2/builder/DBConfigBuilder.java
Patch:
@@ -14,7 +14,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("h2-2.1.214.jar");
         driverConfig.setJdbcDriverClass("org.h2.Driver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/h2-2.1.214.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/h2-2.1.214.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
 
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/builder/DBConfigBuilder.java
Patch:
@@ -12,7 +12,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("hive-jdbc-3.1.2-standalone.jar");
         driverConfig.setJdbcDriverClass("org.apache.hive.jdbc.HiveDriver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/hive-jdbc-3.1.2-standalone.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/hive-jdbc-3.1.2-standalone.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/builder/DBConfigBuilder.java
Patch:
@@ -12,7 +12,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("kingbase8-8.6.0.jar");
         driverConfig.setJdbcDriverClass("com.kingbase8.Driver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/kingbase8-8.6.0.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/kingbase8-8.6.0.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-mariadb/src/main/java/ai/chat2db/plugin/mariadb/builder/DBConfigBuilder.java
Patch:
@@ -12,7 +12,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("mariadb-java-client-3.0.8.jar");
         driverConfig.setJdbcDriverClass("org.mariadb.jdbc.Driver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/mariadb-java-client-3.0.8.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/mariadb-java-client-3.0.8.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-mongodb/src/main/java/ai/chat2db/plugin/mongodb/builder/DBConfigBuilder.java
Patch:
@@ -12,7 +12,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("mongo-jdbc-standalone-1.18.jar");
         driverConfig.setJdbcDriverClass("com.dbschema.MongoJdbcDriver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/mongo-jdbc-standalone-1.18.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/mongo-jdbc-standalone-1.18.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-mysql/src/main/java/ai/chat2db/plugin/mysql/builder/DBConfigBuilder.java
Patch:
@@ -14,14 +14,14 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("mysql-connector-java-8.0.30.jar");
         driverConfig.setJdbcDriverClass("com.mysql.cj.jdbc.Driver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/mysql-connector-java-8.0.30.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/mysql-connector-java-8.0.30.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
 
 
         DriverConfig driverConfig2 = new DriverConfig();
         driverConfig2.setJdbcDriver("mysql-connector-java-5.1.47.jar");
         driverConfig2.setJdbcDriverClass("com.mysql.jdbc.Driver");
-        driverConfig2.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/mysql-connector-java-5.1.47.jar"));
+        driverConfig2.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/mysql-connector-java-5.1.47.jar"));
 
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig,driverConfig2));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-oceanbase/src/main/java/ai/chat2db/plugin/oceanbase/builder/DBConfigBuilder.java
Patch:
@@ -12,7 +12,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("oceanbase-client-2.4.2.jar");
         driverConfig.setJdbcDriverClass("com.oceanbase.jdbc.Driver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/oceanbase-client-2.4.2.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/oceanbase-client-2.4.2.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/builder/DBConfigBuilder.java
Patch:
@@ -14,7 +14,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("ojdbc8-19.3.0.0.jar,orai18n-19.3.0.0.jar");
         driverConfig.setJdbcDriverClass("oracle.jdbc.driver.OracleDriver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/ojdbc8-19.3.0.0.jar", "https://oss-chat2db.alibaba.com/lib/orai18n-19.3.0.0.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/ojdbc8-19.3.0.0.jar", "https://oss.sqlgpt.cn/lib/orai18n-19.3.0.0.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
 
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));

File: chat2db-server/chat2db-plugins/chat2db-postgresql/src/main/java/ai/chat2db/plugin/postgresql/builder/DBConfigBuilder.java
Patch:
@@ -13,7 +13,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("postgresql-42.5.1.jar");
         driverConfig.setJdbcDriverClass("org.postgresql.Driver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/postgresql-42.5.1.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/postgresql-42.5.1.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-presto/src/main/java/ai/chat2db/plugin/presto/builder/DBConfigBuilder.java
Patch:
@@ -12,7 +12,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("presto-jdbc-0.245.1.jar");
         driverConfig.setJdbcDriverClass("com.facebook.presto.jdbc.PrestoDriver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/presto-jdbc-0.245.1.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/presto-jdbc-0.245.1.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-redis/src/main/java/ai/chat2db/plugin/redis/builder/DBConfigBuilder.java
Patch:
@@ -12,7 +12,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("redis-jdbc-driver-1.3.jar");
         driverConfig.setJdbcDriverClass("jdbc.RedisDriver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/redis-jdbc-driver-1.3.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/redis-jdbc-driver-1.3.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/builder/DBConfigBuilder.java
Patch:
@@ -13,7 +13,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("sqlite-jdbc-3.39.3.0.jar");
         driverConfig.setJdbcDriverClass("org.sqlite.JDBC");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/sqlite-jdbc-3.39.3.0.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/sqlite-jdbc-3.39.3.0.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-sqlite/src/main/java/ai/chat2db/plugin/sqlite/builder/SqliteBuilder.java
Patch:
@@ -78,6 +78,6 @@ public String buildModifyTaleSql(Table oldTable, Table newTable) {
 
     @Override
     public String pageLimit(String sql, int offset, int pageNo, int pageSize) {
-        return "select * from(" + sql + ") t LIMIT " + pageNo + " OFFSET " + offset + "";
+        return "select * from(" + sql + ") t LIMIT " + pageSize + " OFFSET " + offset + "";
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/builder/SqlServerDBConfigBuilder.java
Patch:
@@ -13,7 +13,7 @@ public static DBConfig buildDBConfig() {
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("mssql-jdbc-11.2.1.jre17.jar");
         driverConfig.setJdbcDriverClass("com.microsoft.sqlserver.jdbc.SQLServerDriver");
-        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/mssql-jdbc-11.2.1.jre17.jar"));
+        driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss.sqlgpt.cn/lib/mssql-jdbc-11.2.1.jre17.jar"));
         dbConfig.setDefaultDriverConfig(driverConfig);
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig));
         return dbConfig;

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/JdbcJarUtils.java
Patch:
@@ -133,7 +133,7 @@ public static String getFullPath(String jarPath) {
         return path;
     }
 
-    public static final String DOWNLOAD_URL_HOST = "https://oss-chat2db.alibaba.com/lib/";
+    public static final String DOWNLOAD_URL_HOST = "https://oss.sqlgpt.cn/lib/";
     private static String getDownloadUrl(String jarPath) {
        return   DOWNLOAD_URL_HOST+jarPath;
     }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/RdbDocController.java
Patch:
@@ -50,8 +50,6 @@ public class RdbDocController {
     @Autowired
     private RdbWebConverter rdbWebConverter;
 
-    @Autowired
-    private ApplicationContext applicationContext;
 
     /**
      * export data
@@ -61,7 +59,6 @@ public class RdbDocController {
     @PostMapping("/export")
     public void export(@Valid @RequestBody DataExportRequest request, HttpServletResponse response) throws Exception {
         //复制模板
-        applicationContext.publishEvent(new TemplateEvent("copy"));
         ExportTypeEnum exportType = EasyEnumUtils.getEnum(ExportTypeEnum.class, request.getExportType());
         response.setCharacterEncoding("utf-8");
         String fileName = URLEncoder.encode(

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/doc/DatabaseExportService.java
Patch:
@@ -108,7 +108,7 @@ public void generate(String databaseName, OutputStream outputStream, ExportOptio
         try {
             export(outputStream, exportOptions);
         } catch (Exception e) {
-            throw new RuntimeException("导出失败！请联系开发者，邮箱：963565242@qq.com" + e);
+            throw new RuntimeException("导出失败！请联系开发者" + e);
         }
         init();
     }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/doc/DatabaseExportService.java
Patch:
@@ -108,7 +108,7 @@ public void generate(String databaseName, OutputStream outputStream, ExportOptio
         try {
             export(outputStream, exportOptions);
         } catch (Exception e) {
-            throw new RuntimeException("导出失败！请联系开发者，邮箱：963565242@qq.com" + e);
+            throw new RuntimeException("导出失败！请联系开发者" + e);
         }
         init();
     }

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/config/config/Chat2dbWebMvcConfigurer.java
Patch:
@@ -56,7 +56,7 @@ public class Chat2dbWebMvcConfigurer implements WebMvcConfigurer {
      * 全局放行的url
      */
     private static final String[] FRONT_PERMIT_ALL = new String[] {"/favicon.ico", "/error", "/static/**",
-        "/api/system", "/login"};
+        "/api/system", "/login", "/api/system/get_latest_version"};
 
     @Resource
     private UserService userService;

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/config/config/Chat2dbWebMvcConfigurer.java
Patch:
@@ -56,7 +56,7 @@ public class Chat2dbWebMvcConfigurer implements WebMvcConfigurer {
      * 全局放行的url
      */
     private static final String[] FRONT_PERMIT_ALL = new String[] {"/favicon.ico", "/error", "/static/**",
-        "/api/system", "/login"};
+        "/api/system", "/login", "/api/system/get_latest_version"};
 
     @Resource
     private UserService userService;

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/type/SqlServerIndexTypeEnum.java
Patch:
@@ -92,7 +92,7 @@ private String buildIndexColumn(TableIndex tableIndex) {
         for (TableIndexColumn column : tableIndex.getColumnList()) {
             if (StringUtils.isNotBlank(column.getColumnName())) {
                 script.append("[").append(column.getColumnName()).append("]");
-                if (!StringUtils.isBlank(column.getAscOrDesc())) {
+                if (!StringUtils.isBlank(column.getAscOrDesc()) && !PRIMARY_KEY.equals(this)) {
                     script.append(" ").append(column.getAscOrDesc());
                 }
                 script.append(",");

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/TableServiceImpl.java
Patch:
@@ -252,7 +252,7 @@ private long addDBCache(Long dataSourceId, String databaseName, String schemaNam
         Connection connection = Chat2DBContext.getConnection();
         long n = 0;
         try (ResultSet resultSet = connection.getMetaData().getTables(databaseName, schemaName, null,
-                new String[]{"TABLE"})) {
+                new String[]{"TABLE","SYSTEM TABLE"})) {
             List<TableCacheDO> cacheDOS = new ArrayList<>();
             while (resultSet.next()) {
                 TableCacheDO tableCacheDO = new TableCacheDO();

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultMetaService.java
Patch:
@@ -34,7 +34,7 @@ public String tableDDL(Connection connection, String databaseName, String schema
 
     @Override
     public List<Table> tables(Connection connection, String databaseName, String schemaName, String tableName) {
-        return SQLExecutor.getInstance().tables(connection, StringUtils.isEmpty(databaseName) ? null : databaseName, StringUtils.isEmpty(schemaName) ? null : schemaName, tableName, new String[]{"TABLE"});
+        return SQLExecutor.getInstance().tables(connection, StringUtils.isEmpty(databaseName) ? null : databaseName, StringUtils.isEmpty(schemaName) ? null : schemaName, tableName, new String[]{"TABLE","SYSTEM TABLE"});
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/type/SqlServerIndexTypeEnum.java
Patch:
@@ -92,7 +92,7 @@ private String buildIndexColumn(TableIndex tableIndex) {
         for (TableIndexColumn column : tableIndex.getColumnList()) {
             if (StringUtils.isNotBlank(column.getColumnName())) {
                 script.append("[").append(column.getColumnName()).append("]");
-                if (!StringUtils.isBlank(column.getAscOrDesc())) {
+                if (!StringUtils.isBlank(column.getAscOrDesc()) && !PRIMARY_KEY.equals(this)) {
                     script.append(" ").append(column.getAscOrDesc());
                 }
                 script.append(",");

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/TableServiceImpl.java
Patch:
@@ -252,7 +252,7 @@ private long addDBCache(Long dataSourceId, String databaseName, String schemaNam
         Connection connection = Chat2DBContext.getConnection();
         long n = 0;
         try (ResultSet resultSet = connection.getMetaData().getTables(databaseName, schemaName, null,
-                new String[]{"TABLE"})) {
+                new String[]{"TABLE","SYSTEM TABLE"})) {
             List<TableCacheDO> cacheDOS = new ArrayList<>();
             while (resultSet.next()) {
                 TableCacheDO tableCacheDO = new TableCacheDO();

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/jdbc/DefaultMetaService.java
Patch:
@@ -34,7 +34,7 @@ public String tableDDL(Connection connection, String databaseName, String schema
 
     @Override
     public List<Table> tables(Connection connection, String databaseName, String schemaName, String tableName) {
-        return SQLExecutor.getInstance().tables(connection, StringUtils.isEmpty(databaseName) ? null : databaseName, StringUtils.isEmpty(schemaName) ? null : schemaName, tableName, new String[]{"TABLE"});
+        return SQLExecutor.getInstance().tables(connection, StringUtils.isEmpty(databaseName) ? null : databaseName, StringUtils.isEmpty(schemaName) ? null : schemaName, tableName, new String[]{"TABLE","SYSTEM TABLE"});
     }
 
     @Override

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/OracleDBManage.java
Patch:
@@ -21,9 +21,9 @@ public void connectDatabase(Connection connection, String database) {
         }
         String schemaName = connectInfo.getSchemaName();
         try {
-            SQLExecutor.getInstance().execute(connection, "ALTER SESSION SET CURRENT_SCHEMA = \"" + schemaName + "\";");
+            SQLExecutor.getInstance().execute(connection, "ALTER SESSION SET CURRENT_SCHEMA = \"" + schemaName + "\"");
         } catch (SQLException e) {
-
+            e.printStackTrace();
         }
     }
 

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/type/OracleIndexTypeEnum.java
Patch:
@@ -81,7 +81,7 @@ private String buildIndexColumn(TableIndex tableIndex) {
         for (TableIndexColumn column : tableIndex.getColumnList()) {
             if (StringUtils.isNotBlank(column.getColumnName())) {
                 script.append("\"").append(column.getColumnName()).append("\"");
-                if (!StringUtils.isBlank(column.getAscOrDesc())) {
+                if (!StringUtils.isBlank(column.getAscOrDesc()) && !PRIMARY_KEY.equals(this)) {
                     script.append(" ").append(column.getAscOrDesc());
                 }
                 script.append(",");
@@ -111,7 +111,8 @@ public String buildModifyIndex(TableIndex tableIndex) {
 
     private String buildDropIndex(TableIndex tableIndex) {
         if (OracleIndexTypeEnum.PRIMARY_KEY.getName().equals(tableIndex.getType())) {
-            return StringUtils.join("DROP PRIMARY KEY");
+            String tableName = "\"" + tableIndex.getSchemaName() + "\"." + "\"" + tableIndex.getTableName() + "\"";
+            return StringUtils.join("ALTER TABLE ",tableName," DROP PRIMARY KEY");
         }
         StringBuilder script = new StringBuilder();
         script.append("DROP INDEX ");

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/OracleDBManage.java
Patch:
@@ -21,9 +21,9 @@ public void connectDatabase(Connection connection, String database) {
         }
         String schemaName = connectInfo.getSchemaName();
         try {
-            SQLExecutor.getInstance().execute(connection, "ALTER SESSION SET CURRENT_SCHEMA = \"" + schemaName + "\";");
+            SQLExecutor.getInstance().execute(connection, "ALTER SESSION SET CURRENT_SCHEMA = \"" + schemaName + "\"");
         } catch (SQLException e) {
-
+            e.printStackTrace();
         }
     }
 

File: chat2db-server/chat2db-plugins/chat2db-oracle/src/main/java/ai/chat2db/plugin/oracle/type/OracleIndexTypeEnum.java
Patch:
@@ -81,7 +81,7 @@ private String buildIndexColumn(TableIndex tableIndex) {
         for (TableIndexColumn column : tableIndex.getColumnList()) {
             if (StringUtils.isNotBlank(column.getColumnName())) {
                 script.append("\"").append(column.getColumnName()).append("\"");
-                if (!StringUtils.isBlank(column.getAscOrDesc())) {
+                if (!StringUtils.isBlank(column.getAscOrDesc()) && !PRIMARY_KEY.equals(this)) {
                     script.append(" ").append(column.getAscOrDesc());
                 }
                 script.append(",");
@@ -111,7 +111,8 @@ public String buildModifyIndex(TableIndex tableIndex) {
 
     private String buildDropIndex(TableIndex tableIndex) {
         if (OracleIndexTypeEnum.PRIMARY_KEY.getName().equals(tableIndex.getType())) {
-            return StringUtils.join("DROP PRIMARY KEY");
+            String tableName = "\"" + tableIndex.getSchemaName() + "\"." + "\"" + tableIndex.getTableName() + "\"";
+            return StringUtils.join("ALTER TABLE ",tableName," DROP PRIMARY KEY");
         }
         StringBuilder script = new StringBuilder();
         script.append("DROP INDEX ");

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/controller/thymeleaf/ThymeleafController.java
Patch:
@@ -22,7 +22,7 @@ public class ThymeleafController {
      *
      * @return
      */
-    @GetMapping(value = {"/", "/web/", "/web/**","login-a"})
+    @GetMapping(value = {"/", "/web/", "/web/**","/login"})
     public String index() {
         return "index";
     }

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/controller/thymeleaf/ThymeleafController.java
Patch:
@@ -22,7 +22,7 @@ public class ThymeleafController {
      *
      * @return
      */
-    @GetMapping(value = {"/", "/web/", "/web/**","login-a"})
+    @GetMapping(value = {"/", "/web/", "/web/**","/login"})
     public String index() {
         return "index";
     }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/TableController.java
Patch:
@@ -66,7 +66,7 @@ public WebPageResult<TableVO> list(@Valid TableBriefQueryRequest request) {
         return WebPageResult.of(tableVOS, tableDTOPageResult.getTotal(), request.getPageNo(),
                 request.getPageSize());
     }
-
+    
 
     /**
      * 查询当前DB下的表columns

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/vo/ColumnVO.java
Patch:
@@ -1,8 +1,5 @@
 package ai.chat2db.server.web.api.controller.rdb.vo;
 
-import ai.chat2db.spi.enums.ColumnTypeEnum;
-
-import com.fasterxml.jackson.annotation.JsonAlias;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/TableController.java
Patch:
@@ -66,7 +66,7 @@ public WebPageResult<TableVO> list(@Valid TableBriefQueryRequest request) {
         return WebPageResult.of(tableVOS, tableDTOPageResult.getTotal(), request.getPageNo(),
                 request.getPageSize());
     }
-
+    
 
     /**
      * 查询当前DB下的表columns

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/vo/ColumnVO.java
Patch:
@@ -1,8 +1,5 @@
 package ai.chat2db.server.web.api.controller.rdb.vo;
 
-import ai.chat2db.spi.enums.ColumnTypeEnum;
-
-import com.fasterxml.jackson.annotation.JsonAlias;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/TableController.java
Patch:
@@ -166,7 +166,7 @@ public DataResult<TableVO> query(@Valid TableDetailQueryRequest request) {
      * @param request
      * @return
      */
-    @GetMapping("/modify/sql")
+    @PostMapping("/modify/sql")
     public ListResult<SqlVO> modifySql(@Valid TableModifySqlRequest request) {
         return tableService.buildSql(
                         rdbWebConverter.tableRequest2param(request.getOldTable()),

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/vo/IndexVO.java
Patch:
@@ -39,5 +39,5 @@ public class IndexVO {
     /**
      * 索引包含的列
      */
-    private List<ColumnVO> columnList;
+    private List<IndexColumnVO> columnList;
 }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/TableController.java
Patch:
@@ -166,7 +166,7 @@ public DataResult<TableVO> query(@Valid TableDetailQueryRequest request) {
      * @param request
      * @return
      */
-    @GetMapping("/modify/sql")
+    @PostMapping("/modify/sql")
     public ListResult<SqlVO> modifySql(@Valid TableModifySqlRequest request) {
         return tableService.buildSql(
                         rdbWebConverter.tableRequest2param(request.getOldTable()),

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/vo/IndexVO.java
Patch:
@@ -39,5 +39,5 @@ public class IndexVO {
     /**
      * 索引包含的列
      */
-    private List<ColumnVO> columnList;
+    private List<IndexColumnVO> columnList;
 }

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/config/config/AutomaticUpgrade.java
Patch:
@@ -112,6 +112,9 @@ private boolean needUpdate(Upgrade upgrade, String localVersion) {
         String[] versionArray = upgrade.getVersion().split("\\.");
         String[] localVersionArray = localVersion.split("\\.");
         for (int i = 0; i < versionArray.length; i++) {
+            if (Long.parseLong(versionArray[i]) < Long.parseLong(localVersionArray[i])) {
+                return false;
+            }
             if (Long.parseLong(versionArray[i]) > Long.parseLong(localVersionArray[i])) {
                 return true;
             }

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/config/config/AutomaticUpgrade.java
Patch:
@@ -112,6 +112,9 @@ private boolean needUpdate(Upgrade upgrade, String localVersion) {
         String[] versionArray = upgrade.getVersion().split("\\.");
         String[] localVersionArray = localVersion.split("\\.");
         for (int i = 0; i < versionArray.length; i++) {
+            if (Long.parseLong(versionArray[i]) < Long.parseLong(localVersionArray[i])) {
+                return false;
+            }
             if (Long.parseLong(versionArray[i]) > Long.parseLong(localVersionArray[i])) {
                 return true;
             }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/data/source/request/DataSourceQueryRequest.java
Patch:
@@ -1,7 +1,6 @@
 package ai.chat2db.server.web.api.controller.data.source.request;
 
 import ai.chat2db.server.tools.base.wrapper.request.PageQueryRequest;
-
 import lombok.Data;
 
 /**

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/data/source/request/DataSourceQueryRequest.java
Patch:
@@ -1,7 +1,6 @@
 package ai.chat2db.server.web.api.controller.data.source.request;
 
 import ai.chat2db.server.tools.base.wrapper.request.PageQueryRequest;
-
 import lombok.Data;
 
 /**

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/service/DataSourceAccessBusinessService.java
Patch:
@@ -1,5 +1,6 @@
 package ai.chat2db.server.domain.api.service;
 
+import ai.chat2db.server.domain.api.model.DataSource;
 import ai.chat2db.server.tools.base.wrapper.result.ActionResult;
 import jakarta.validation.constraints.NotNull;
 
@@ -12,8 +13,8 @@ public interface DataSourceAccessBusinessService {
     /**
      * delete
      *
-     * @param dataSourceId
+     * @param dataSource
      * @return
      */
-    ActionResult checkPermission(@NotNull Long dataSourceId);
+    ActionResult checkPermission(@NotNull DataSource dataSource);
 }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/aspect/ConnectionInfoHandler.java
Patch:
@@ -72,7 +72,7 @@ public ConnectInfo toInfo(Long dataSourceId, String database, Long consoleId, St
         }
 
         // Verify permissions
-        dataSourceAccessBusinessService.checkPermission(dataSourceId);
+        dataSourceAccessBusinessService.checkPermission(dataSource);
 
         ConnectInfo connectInfo = new ConnectInfo();
         connectInfo.setAlias(dataSource.getAlias());

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/service/DataSourceAccessBusinessService.java
Patch:
@@ -1,5 +1,6 @@
 package ai.chat2db.server.domain.api.service;
 
+import ai.chat2db.server.domain.api.model.DataSource;
 import ai.chat2db.server.tools.base.wrapper.result.ActionResult;
 import jakarta.validation.constraints.NotNull;
 
@@ -12,8 +13,8 @@ public interface DataSourceAccessBusinessService {
     /**
      * delete
      *
-     * @param dataSourceId
+     * @param dataSource
      * @return
      */
-    ActionResult checkPermission(@NotNull Long dataSourceId);
+    ActionResult checkPermission(@NotNull DataSource dataSource);
 }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/aspect/ConnectionInfoHandler.java
Patch:
@@ -72,7 +72,7 @@ public ConnectInfo toInfo(Long dataSourceId, String database, Long consoleId, St
         }
 
         // Verify permissions
-        dataSourceAccessBusinessService.checkPermission(dataSourceId);
+        dataSourceAccessBusinessService.checkPermission(dataSource);
 
         ConnectInfo connectInfo = new ConnectInfo();
         connectInfo.setAlias(dataSource.getAlias());

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/config/config/Chat2dbWebMvcConfigurer.java
Patch:
@@ -101,6 +101,7 @@ public boolean preHandle(@NotNull HttpServletRequest request, @NotNull HttpServl
                             .id(user.getId())
                             .nickName(user.getNickName())
                             .admin(admin)
+                            .roleCode(user.getRoleCode())
                             .build();
                     });
 

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/config/config/Chat2dbWebMvcConfigurer.java
Patch:
@@ -101,6 +101,7 @@ public boolean preHandle(@NotNull HttpServletRequest request, @NotNull HttpServl
                             .id(user.getId())
                             .nickName(user.getNickName())
                             .admin(admin)
+                            .roleCode(user.getRoleCode())
                             .build();
                     });
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/operation/log/OperationLogController.java
Patch:
@@ -9,6 +9,7 @@
 import ai.chat2db.server.tools.base.wrapper.result.DataResult;
 import ai.chat2db.server.tools.base.wrapper.result.PageResult;
 import ai.chat2db.server.tools.base.wrapper.result.web.WebPageResult;
+import ai.chat2db.server.tools.common.util.ContextUtils;
 import ai.chat2db.server.web.api.controller.operation.log.converter.OperationLogWebConverter;
 import ai.chat2db.server.web.api.controller.operation.log.request.OperationLogCreateRequest;
 import ai.chat2db.server.web.api.controller.operation.log.request.OperationLogQueryRequest;
@@ -47,6 +48,7 @@ public class OperationLogController {
     @GetMapping("/list")
     public WebPageResult<OperationLogVO> list(OperationLogQueryRequest request) {
         OperationLogPageQueryParam param = operationLogWebConverter.req2param(request);
+        param.setUserId(ContextUtils.getUserId());
         PageResult<OperationLog> result = operationLogService.queryPage(param);
         List<OperationLogVO> operationLogVOList = operationLogWebConverter.dto2vo(result.getData());
         return WebPageResult.of(operationLogVOList, result.getTotal(), result.getPageNo(), result.getPageSize());

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/operation/log/OperationLogController.java
Patch:
@@ -9,6 +9,7 @@
 import ai.chat2db.server.tools.base.wrapper.result.DataResult;
 import ai.chat2db.server.tools.base.wrapper.result.PageResult;
 import ai.chat2db.server.tools.base.wrapper.result.web.WebPageResult;
+import ai.chat2db.server.tools.common.util.ContextUtils;
 import ai.chat2db.server.web.api.controller.operation.log.converter.OperationLogWebConverter;
 import ai.chat2db.server.web.api.controller.operation.log.request.OperationLogCreateRequest;
 import ai.chat2db.server.web.api.controller.operation.log.request.OperationLogQueryRequest;
@@ -47,6 +48,7 @@ public class OperationLogController {
     @GetMapping("/list")
     public WebPageResult<OperationLogVO> list(OperationLogQueryRequest request) {
         OperationLogPageQueryParam param = operationLogWebConverter.req2param(request);
+        param.setUserId(ContextUtils.getUserId());
         PageResult<OperationLog> result = operationLogService.queryPage(param);
         List<OperationLogVO> operationLogVOList = operationLogWebConverter.dto2vo(result.getData());
         return WebPageResult.of(operationLogVOList, result.getTotal(), result.getPageNo(), result.getPageSize());

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-repository/src/main/java/ai/chat2db/server/domain/repository/entity/EnvironmentDO.java
Patch:
@@ -14,7 +14,7 @@
  * </p>
  *
  * @author chat2db
- * @since 2023-08-26
+ * @since 2023-09-09
  */
 @Getter
 @Setter
@@ -60,7 +60,7 @@ public class EnvironmentDO implements Serializable {
     private String shortName;
 
     /**
-     * 样式类型
+     * 颜色
      */
-    private String style;
+    private String color;
 }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-repository/src/main/java/ai/chat2db/server/domain/repository/mapper/EnvironmentMapper.java
Patch:
@@ -9,7 +9,7 @@
  * </p>
  *
  * @author chat2db
- * @since 2023-08-26
+ * @since 2023-09-09
  */
 public interface EnvironmentMapper extends BaseMapper<EnvironmentDO> {
 

File: chat2db-server/chat2db-server-start/src/test/java/ai/chat2db/server/start/test/mybatis/MybatisGeneratorTest.java
Patch:
@@ -35,7 +35,7 @@ public void coreGenerator() {
         //doGenerator(Lists.newArrayList("operation_saved"));
         //doGenerator(Lists.newArrayList("environment","data_source","team","team_dbhub_user","data_source_access",
         // "dbhub_user"));
-        doGenerator(Lists.newArrayList("chart"));
+        doGenerator(Lists.newArrayList("environment"));
     }
 
     private void doGenerator(List<String> tableList) {

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-repository/src/main/java/ai/chat2db/server/domain/repository/entity/EnvironmentDO.java
Patch:
@@ -14,7 +14,7 @@
  * </p>
  *
  * @author chat2db
- * @since 2023-08-26
+ * @since 2023-09-09
  */
 @Getter
 @Setter
@@ -60,7 +60,7 @@ public class EnvironmentDO implements Serializable {
     private String shortName;
 
     /**
-     * 样式类型
+     * 颜色
      */
-    private String style;
+    private String color;
 }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-repository/src/main/java/ai/chat2db/server/domain/repository/mapper/EnvironmentMapper.java
Patch:
@@ -9,7 +9,7 @@
  * </p>
  *
  * @author chat2db
- * @since 2023-08-26
+ * @since 2023-09-09
  */
 public interface EnvironmentMapper extends BaseMapper<EnvironmentDO> {
 

File: chat2db-server/chat2db-server-start/src/test/java/ai/chat2db/server/start/test/mybatis/MybatisGeneratorTest.java
Patch:
@@ -35,7 +35,7 @@ public void coreGenerator() {
         //doGenerator(Lists.newArrayList("operation_saved"));
         //doGenerator(Lists.newArrayList("environment","data_source","team","team_dbhub_user","data_source_access",
         // "dbhub_user"));
-        doGenerator(Lists.newArrayList("chart"));
+        doGenerator(Lists.newArrayList("environment"));
     }
 
     private void doGenerator(List<String> tableList) {

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/service/DashboardService.java
Patch:
@@ -45,6 +45,7 @@ public interface DashboardService {
      * 查询一条数据
      *
      * @param param
+     * @param selector
      * @return
      */
     DataResult<Dashboard> queryExistent(@NotNull DashboardQueryParam param);

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/service/DashboardService.java
Patch:
@@ -45,6 +45,7 @@ public interface DashboardService {
      * 查询一条数据
      *
      * @param param
+     * @param selector
      * @return
      */
     DataResult<Dashboard> queryExistent(@NotNull DashboardQueryParam param);

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/dashboard/request/ChartCreateRequest.java
Patch:
@@ -1,6 +1,5 @@
 package ai.chat2db.server.web.api.controller.dashboard.request;
 
-import jakarta.validation.constraints.NotNull;
 import lombok.Data;
 
 /**
@@ -25,13 +24,11 @@ public class ChartCreateRequest {
     /**
      * 图表信息
      */
-    @NotNull
     private String schema;
 
     /**
      * 数据源连接ID
      */
-    @NotNull
     private Long dataSourceId;
 
     /**

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/dashboard/request/ChartCreateRequest.java
Patch:
@@ -1,6 +1,5 @@
 package ai.chat2db.server.web.api.controller.dashboard.request;
 
-import jakarta.validation.constraints.NotNull;
 import lombok.Data;
 
 /**
@@ -25,13 +24,11 @@ public class ChartCreateRequest {
     /**
      * 图表信息
      */
-    @NotNull
     private String schema;
 
     /**
      * 数据源连接ID
      */
-    @NotNull
     private Long dataSourceId;
 
     /**

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/config/config/Chat2dbWebMvcConfigurer.java
Patch:
@@ -92,6 +92,7 @@ public boolean preHandle(@NotNull HttpServletRequest request, @NotNull HttpServl
                             return null;
                         }
                         if (!ValidStatusEnum.VALID.getCode().equals(user.getStatus())) {
+                            StpUtil.logout();
                             throw new BusinessException("oauth.invalidUserName");
                         }
                         boolean admin = RoleCodeEnum.ADMIN.getCode().equals(user.getRoleCode());

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/config/config/Chat2dbWebMvcConfigurer.java
Patch:
@@ -92,6 +92,7 @@ public boolean preHandle(@NotNull HttpServletRequest request, @NotNull HttpServl
                             return null;
                         }
                         if (!ValidStatusEnum.VALID.getCode().equals(user.getStatus())) {
+                            StpUtil.logout();
                             throw new BusinessException("oauth.invalidUserName");
                         }
                         boolean admin = RoleCodeEnum.ADMIN.getCode().equals(user.getRoleCode());

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/model/Chart.java
Patch:
@@ -1,6 +1,6 @@
 package ai.chat2db.server.domain.api.model;
 
-import java.time.LocalDateTime;
+import java.util.Date;
 
 import lombok.Data;
 
@@ -20,12 +20,12 @@ public class Chart {
     /**
      * 创建时间
      */
-    private LocalDateTime gmtCreate;
+    private Date gmtCreate;
 
     /**
      * 修改时间
      */
-    private LocalDateTime gmtModified;
+    private Date gmtModified;
 
     /**
      * 图表名称

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-repository/src/main/java/ai/chat2db/server/domain/repository/mapper/ChartMapper.java
Patch:
@@ -8,8 +8,8 @@
  * 自定义报表表 Mapper 接口
  * </p>
  *
- * @author ali-dbhub
- * @since 2023-06-09
+ * @author chat2db
+ * @since 2023-09-09
  */
 public interface ChartMapper extends BaseMapper<ChartDO> {
 

File: chat2db-server/chat2db-server-start/src/test/java/ai/chat2db/server/start/test/mybatis/MybatisGeneratorTest.java
Patch:
@@ -35,7 +35,7 @@ public void coreGenerator() {
         //doGenerator(Lists.newArrayList("operation_saved"));
         //doGenerator(Lists.newArrayList("environment","data_source","team","team_dbhub_user","data_source_access",
         // "dbhub_user"));
-        doGenerator(Lists.newArrayList("dashboard"));
+        doGenerator(Lists.newArrayList("chart"));
     }
 
     private void doGenerator(List<String> tableList) {

File: chat2db-server/chat2db-server-web/chat2db-server-admin-api/src/main/java/ai/chat2db/server/admin/api/controller/datasource/converter/DataSourceAdminConverter.java
Patch:
@@ -29,6 +29,7 @@ public abstract class DataSourceAdminConverter {
      */
     @Mappings({
         @Mapping(target = "enableReturnCount", expression = "java(true)"),
+        @Mapping(target = "kind", expression = "java(DataSourceKindEnum.SHARED.getCode())"),
     })
     public abstract DataSourcePageQueryParam request2param(CommonPageQueryRequest request);
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/dashboard/ChartController.java
Patch:
@@ -14,6 +14,7 @@
 import ai.chat2db.server.web.api.controller.dashboard.request.ChartQueryRequest;
 import ai.chat2db.server.web.api.controller.dashboard.request.ChartUpdateRequest;
 import ai.chat2db.server.web.api.controller.dashboard.vo.ChartVO;
+import jakarta.validation.Valid;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -78,7 +79,7 @@ public ListResult<ChartVO> list(ChartQueryRequest request) {
      * @return
      */
     @PostMapping("/create")
-    public DataResult<Long> create(@RequestBody ChartCreateRequest request) {
+    public DataResult<Long> create(@Valid @RequestBody ChartCreateRequest request) {
         ChartCreateParam chartCreateParam = chartWebConverter.req2param(request);
         return chartService.createWithPermission(chartCreateParam);
     }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/dashboard/request/ChartCreateRequest.java
Patch:
@@ -1,6 +1,6 @@
 package ai.chat2db.server.web.api.controller.dashboard.request;
 
-
+import jakarta.validation.constraints.NotNull;
 import lombok.Data;
 
 /**
@@ -25,11 +25,13 @@ public class ChartCreateRequest {
     /**
      * 图表信息
      */
+    @NotNull
     private String schema;
 
     /**
      * 数据源连接ID
      */
+    @NotNull
     private Long dataSourceId;
 
     /**

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/dashboard/vo/ChartVO.java
Patch:
@@ -1,6 +1,6 @@
 package ai.chat2db.server.web.api.controller.dashboard.vo;
 
-import java.time.LocalDateTime;
+import java.util.Date;
 
 import lombok.Data;
 
@@ -20,12 +20,12 @@ public class ChartVO {
     /**
      * 创建时间
      */
-    private LocalDateTime gmtCreate;
+    private Date gmtCreate;
 
     /**
      * 修改时间
      */
-    private LocalDateTime gmtModified;
+    private Date gmtModified;
 
     /**
      * 图表名称

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/model/Chart.java
Patch:
@@ -1,6 +1,6 @@
 package ai.chat2db.server.domain.api.model;
 
-import java.time.LocalDateTime;
+import java.util.Date;
 
 import lombok.Data;
 
@@ -20,12 +20,12 @@ public class Chart {
     /**
      * 创建时间
      */
-    private LocalDateTime gmtCreate;
+    private Date gmtCreate;
 
     /**
      * 修改时间
      */
-    private LocalDateTime gmtModified;
+    private Date gmtModified;
 
     /**
      * 图表名称

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-repository/src/main/java/ai/chat2db/server/domain/repository/mapper/ChartMapper.java
Patch:
@@ -8,8 +8,8 @@
  * 自定义报表表 Mapper 接口
  * </p>
  *
- * @author ali-dbhub
- * @since 2023-06-09
+ * @author chat2db
+ * @since 2023-09-09
  */
 public interface ChartMapper extends BaseMapper<ChartDO> {
 

File: chat2db-server/chat2db-server-start/src/test/java/ai/chat2db/server/start/test/mybatis/MybatisGeneratorTest.java
Patch:
@@ -35,7 +35,7 @@ public void coreGenerator() {
         //doGenerator(Lists.newArrayList("operation_saved"));
         //doGenerator(Lists.newArrayList("environment","data_source","team","team_dbhub_user","data_source_access",
         // "dbhub_user"));
-        doGenerator(Lists.newArrayList("dashboard"));
+        doGenerator(Lists.newArrayList("chart"));
     }
 
     private void doGenerator(List<String> tableList) {

File: chat2db-server/chat2db-server-web/chat2db-server-admin-api/src/main/java/ai/chat2db/server/admin/api/controller/datasource/converter/DataSourceAdminConverter.java
Patch:
@@ -29,6 +29,7 @@ public abstract class DataSourceAdminConverter {
      */
     @Mappings({
         @Mapping(target = "enableReturnCount", expression = "java(true)"),
+        @Mapping(target = "kind", expression = "java(DataSourceKindEnum.SHARED.getCode())"),
     })
     public abstract DataSourcePageQueryParam request2param(CommonPageQueryRequest request);
 

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/dashboard/ChartController.java
Patch:
@@ -14,6 +14,7 @@
 import ai.chat2db.server.web.api.controller.dashboard.request.ChartQueryRequest;
 import ai.chat2db.server.web.api.controller.dashboard.request.ChartUpdateRequest;
 import ai.chat2db.server.web.api.controller.dashboard.vo.ChartVO;
+import jakarta.validation.Valid;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -78,7 +79,7 @@ public ListResult<ChartVO> list(ChartQueryRequest request) {
      * @return
      */
     @PostMapping("/create")
-    public DataResult<Long> create(@RequestBody ChartCreateRequest request) {
+    public DataResult<Long> create(@Valid @RequestBody ChartCreateRequest request) {
         ChartCreateParam chartCreateParam = chartWebConverter.req2param(request);
         return chartService.createWithPermission(chartCreateParam);
     }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/dashboard/request/ChartCreateRequest.java
Patch:
@@ -1,6 +1,6 @@
 package ai.chat2db.server.web.api.controller.dashboard.request;
 
-
+import jakarta.validation.constraints.NotNull;
 import lombok.Data;
 
 /**
@@ -25,11 +25,13 @@ public class ChartCreateRequest {
     /**
      * 图表信息
      */
+    @NotNull
     private String schema;
 
     /**
      * 数据源连接ID
      */
+    @NotNull
     private Long dataSourceId;
 
     /**

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/dashboard/vo/ChartVO.java
Patch:
@@ -1,6 +1,6 @@
 package ai.chat2db.server.web.api.controller.dashboard.vo;
 
-import java.time.LocalDateTime;
+import java.util.Date;
 
 import lombok.Data;
 
@@ -20,12 +20,12 @@ public class ChartVO {
     /**
      * 创建时间
      */
-    private LocalDateTime gmtCreate;
+    private Date gmtCreate;
 
     /**
      * 修改时间
      */
-    private LocalDateTime gmtModified;
+    private Date gmtModified;
 
     /**
      * 图表名称

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/TableController.java
Patch:
@@ -176,7 +176,7 @@ public ListResult<SqlVO> modifySql(@Valid TableModifySqlRequest request) {
 
 
     /**
-     * 获取修改表的sql语句
+     * 数据库支持的数据类型
      *
      * @param request
      * @return

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/TableController.java
Patch:
@@ -176,7 +176,7 @@ public ListResult<SqlVO> modifySql(@Valid TableModifySqlRequest request) {
 
 
     /**
-     * 获取修改表的sql语句
+     * 数据库支持的数据类型
      *
      * @param request
      * @return

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/TableColumn.java
Patch:
@@ -31,6 +31,7 @@ public class TableColumn {
     /**
      * 表名
      */
+    @JsonAlias({"TABLE_NAME"})
     private String tableName;
 
     /**

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/TableColumn.java
Patch:
@@ -31,6 +31,7 @@ public class TableColumn {
     /**
      * 表名
      */
+    @JsonAlias({"TABLE_NAME"})
     private String tableName;
 
     /**

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/listener/RestAIEventSourceListener.java
Patch:
@@ -102,7 +102,7 @@ public void onFailure(EventSource eventSource, Throwable t, Response response) {
                 eventSource.cancel();
             }
             Message message = new Message();
-            message.setContent("出现异常,请在帮助中查看详细日志：" + bodyString);
+            message.setContent("Rest AI Error:" + bodyString);
             sseEmitter.send(SseEmitter.event()
                 .id("[ERROR]")
                 .data(message));

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/listener/RestAIEventSourceListener.java
Patch:
@@ -102,7 +102,7 @@ public void onFailure(EventSource eventSource, Throwable t, Response response) {
                 eventSource.cancel();
             }
             Message message = new Message();
-            message.setContent("出现异常,请在帮助中查看详细日志：" + bodyString);
+            message.setContent("Rest AI Error:" + bodyString);
             sseEmitter.send(SseEmitter.event()
                 .id("[ERROR]")
                 .data(message));

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/listener/RestAIEventSourceListener.java
Patch:
@@ -54,7 +54,7 @@ public void onEvent(EventSource eventSource, String id, String type, String data
         }
         Message message = new Message();
         if (StringUtils.isNotBlank(data)) {
-            message.setContent(data);
+            message.setContent(data.replace("\"", ""));
             sseEmitter.send(SseEmitter.event()
                 .id(id)
                 .data(message)

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/listener/RestAIEventSourceListener.java
Patch:
@@ -54,7 +54,7 @@ public void onEvent(EventSource eventSource, String id, String type, String data
         }
         Message message = new Message();
         if (StringUtils.isNotBlank(data)) {
-            message.setContent(data);
+            message.setContent(data.replace("\"", ""));
             sseEmitter.send(SseEmitter.event()
                 .id(id)
                 .data(message)

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/sql/IDriverManager.java
Patch:
@@ -85,7 +85,7 @@ public static Connection getConnection(String url, Properties info, DriverConfig
         try {
             Connection connection = driverEntry.getDriver().connect(url, info);
             if(connection == null){
-                throw new ConnectionException("driverEntry.getDriver().connect return null",null);
+                throw new SQLException("driver.connect return null , No suitable driver found for url " +url ,"08001");
             }
             return connection;
         } catch (SQLException var7) {

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/sql/IDriverManager.java
Patch:
@@ -85,7 +85,7 @@ public static Connection getConnection(String url, Properties info, DriverConfig
         try {
             Connection connection = driverEntry.getDriver().connect(url, info);
             if(connection == null){
-                throw new ConnectionException("driverEntry.getDriver().connect return null",null);
+                throw new SQLException("driver.connect return null , No suitable driver found for url " +url ,"08001");
             }
             return connection;
         } catch (SQLException var7) {

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/service/DataSourceService.java
Patch:
@@ -64,7 +64,7 @@ public interface DataSourceService {
      * @return
      * @throws ai.chat2db.server.tools.common.exception.DataNotFoundException
      */
-    DataResult<DataSource> queryExistent(@NotNull Long id);
+    DataResult<DataSource> queryExistent(@NotNull Long id, DataSourceSelector selector);
 
     /**
      * 克隆连接

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-api/src/main/java/ai/chat2db/server/domain/api/service/DataSourceService.java
Patch:
@@ -64,7 +64,7 @@ public interface DataSourceService {
      * @return
      * @throws ai.chat2db.server.tools.common.exception.DataNotFoundException
      */
-    DataResult<DataSource> queryExistent(@NotNull Long id);
+    DataResult<DataSource> queryExistent(@NotNull Long id, DataSourceSelector selector);
 
     /**
      * 克隆连接

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/request/ColumnRequest.java
Patch:
@@ -35,7 +35,7 @@ public class ColumnRequest {
     /**
      * 是否为空
      */
-    private Boolean nullable;
+    private Integer nullable;
 
     /**
      * 是否主键

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/vo/ColumnVO.java
Patch:
@@ -38,7 +38,7 @@ public class ColumnVO {
     /**
      * 是否为空
      */
-    private Boolean nullable;
+    private Integer nullable;
 
     /**
      * 是否主键

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/Database.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.List;
 
 import ai.chat2db.server.tools.base.constant.EasyToolsConstant;
+import com.fasterxml.jackson.annotation.JsonAlias;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
@@ -23,6 +24,7 @@ public class Database implements Serializable {
     /**
      * 数据库名字
      */
+    @JsonAlias({"TABLE_CAT"})
     private String name;
 
     /**

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/Schema.java
Patch:
@@ -4,6 +4,7 @@
 import java.io.Serializable;
 
 import ai.chat2db.server.tools.base.constant.EasyToolsConstant;
+import com.fasterxml.jackson.annotation.JsonAlias;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
@@ -23,9 +24,11 @@ public class Schema implements Serializable {
     /**
      * databaseName
      */
+    @JsonAlias({"TABLE_CATALOG"})
     private String databaseName;
     /**
      * 数据名字
      */
+    @JsonAlias({"TABLE_SCHEM"})
     private String name;
 }
\ No newline at end of file

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/request/ColumnRequest.java
Patch:
@@ -35,7 +35,7 @@ public class ColumnRequest {
     /**
      * 是否为空
      */
-    private Boolean nullable;
+    private Integer nullable;
 
     /**
      * 是否主键

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/vo/ColumnVO.java
Patch:
@@ -38,7 +38,7 @@ public class ColumnVO {
     /**
      * 是否为空
      */
-    private Boolean nullable;
+    private Integer nullable;
 
     /**
      * 是否主键

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/Database.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.List;
 
 import ai.chat2db.server.tools.base.constant.EasyToolsConstant;
+import com.fasterxml.jackson.annotation.JsonAlias;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
@@ -23,6 +24,7 @@ public class Database implements Serializable {
     /**
      * 数据库名字
      */
+    @JsonAlias({"TABLE_CAT"})
     private String name;
 
     /**

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/model/Schema.java
Patch:
@@ -4,6 +4,7 @@
 import java.io.Serializable;
 
 import ai.chat2db.server.tools.base.constant.EasyToolsConstant;
+import com.fasterxml.jackson.annotation.JsonAlias;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
@@ -23,9 +24,11 @@ public class Schema implements Serializable {
     /**
      * databaseName
      */
+    @JsonAlias({"TABLE_CATALOG"})
     private String databaseName;
     /**
      * 数据名字
      */
+    @JsonAlias({"TABLE_SCHEM"})
     private String name;
 }
\ No newline at end of file

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/DMMetaData.java
Patch:
@@ -34,7 +34,7 @@ public String tableDDL(Connection connection, String databaseName, String schema
     }
 
     private static String ROUTINES_SQL
-        = "SELECT OWNER, NAME, TEXT FROM ALL_SOURCE WHERE TYPE = '%s' AND NAME = '%s' AND NAME = '%s' ORDER BY LINE";
+        = "SELECT OWNER, NAME, TEXT FROM ALL_SOURCE WHERE TYPE = '%s' AND OWNER = '%s' AND NAME = '%s' ORDER BY LINE";
 
     @Override
     public Function function(Connection connection, @NotEmpty String databaseName, String schemaName,

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/DMMetaData.java
Patch:
@@ -34,7 +34,7 @@ public String tableDDL(Connection connection, String databaseName, String schema
     }
 
     private static String ROUTINES_SQL
-        = "SELECT OWNER, NAME, TEXT FROM ALL_SOURCE WHERE TYPE = '%s' AND NAME = '%s' AND NAME = '%s' ORDER BY LINE";
+        = "SELECT OWNER, NAME, TEXT FROM ALL_SOURCE WHERE TYPE = '%s' AND OWNER = '%s' AND NAME = '%s' ORDER BY LINE";
 
     @Override
     public Function function(Connection connection, @NotEmpty String databaseName, String schemaName,

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/data/source/DataSourceController.java
Patch:
@@ -166,6 +166,7 @@ public ActionResult closeConsole(@Valid @NotNull ConsoleCloseRequest request) {
      *
      * @param request
      * @return
+     * @version 2.1.0
      */
     @GetMapping("/datasource/list")
     public WebPageResult<DataSourceVO> list(DataSourceQueryRequest request) {

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/data/source/DataSourceController.java
Patch:
@@ -166,6 +166,7 @@ public ActionResult closeConsole(@Valid @NotNull ConsoleCloseRequest request) {
      *
      * @param request
      * @return
+     * @version 2.1.0
      */
     @GetMapping("/datasource/list")
     public WebPageResult<DataSourceVO> list(DataSourceQueryRequest request) {

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DataSourceServiceImpl.java
Patch:
@@ -189,7 +189,7 @@ public PageResult<DataSource> queryPageWithPermission(DataSourcePageQueryParam p
         LoginUser loginUser = ContextUtils.getLoginUser();
         IPage<DataSourceDO> iPage = dataSourceCustomMapper.selectPageWithPermission(
             new Page<>(param.getPageNo(), param.getPageSize()),
-            BooleanUtils.isTrue(loginUser.getAdmin()), loginUser.getId(), param.getSearchKey());
+            BooleanUtils.isTrue(loginUser.getAdmin()), loginUser.getId(), param.getSearchKey(),param.getKind());
         List<DataSource> dataSources = dataSourceConverter.do2dto(iPage.getRecords());
 
         fillData(dataSources, selector);

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-repository/src/main/java/ai/chat2db/server/domain/repository/mapper/DataSourceCustomMapper.java
Patch:
@@ -12,7 +12,6 @@
  */
 public interface DataSourceCustomMapper extends Mapper<DataSourceDO> {
     IPage<DataSourceDO> selectPageWithPermission(IPage<DataSourceDO> page, @Param("admin") Boolean admin,
-        @Param("userId") Long userId,
-        @Param("searchKey") String searchKey);
+        @Param("userId") Long userId, @Param("searchKey") String searchKey, @Param("kind") String kind);
 
 }

File: chat2db-server/chat2db-server-web/chat2db-server-admin-api/src/main/java/ai/chat2db/server/admin/api/controller/common/converter/CommonAdminConverter.java
Patch:
@@ -6,6 +6,7 @@
 import ai.chat2db.server.admin.api.controller.user.vo.SimpleUserVO;
 import ai.chat2db.server.common.api.controller.request.CommonQueryRequest;
 import ai.chat2db.server.domain.api.enums.AccessObjectTypeEnum;
+import ai.chat2db.server.domain.api.enums.DataSourceKindEnum;
 import ai.chat2db.server.domain.api.model.DataSource;
 import ai.chat2db.server.domain.api.model.Team;
 import ai.chat2db.server.domain.api.model.User;
@@ -21,7 +22,7 @@
  *
  * @author Jiaju Zhuang
  */
-@Mapper(componentModel = "spring", imports = {AccessObjectTypeEnum.class})
+@Mapper(componentModel = "spring", imports = {AccessObjectTypeEnum.class, DataSourceKindEnum.class})
 public abstract class CommonAdminConverter {
 
     /**
@@ -54,6 +55,7 @@ public abstract class CommonAdminConverter {
      */
     @Mappings({
         @Mapping(target = "pageSize", expression = "java(10)"),
+        @Mapping(target = "kind", expression = "java(DataSourceKindEnum.SHARED.getCode())"),
     })
     public abstract DataSourcePageQueryParam request2paramDataSource(CommonQueryRequest request);
 

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DataSourceServiceImpl.java
Patch:
@@ -189,7 +189,7 @@ public PageResult<DataSource> queryPageWithPermission(DataSourcePageQueryParam p
         LoginUser loginUser = ContextUtils.getLoginUser();
         IPage<DataSourceDO> iPage = dataSourceCustomMapper.selectPageWithPermission(
             new Page<>(param.getPageNo(), param.getPageSize()),
-            BooleanUtils.isTrue(loginUser.getAdmin()), loginUser.getId(), param.getSearchKey());
+            BooleanUtils.isTrue(loginUser.getAdmin()), loginUser.getId(), param.getSearchKey(),param.getKind());
         List<DataSource> dataSources = dataSourceConverter.do2dto(iPage.getRecords());
 
         fillData(dataSources, selector);

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-repository/src/main/java/ai/chat2db/server/domain/repository/mapper/DataSourceCustomMapper.java
Patch:
@@ -12,7 +12,6 @@
  */
 public interface DataSourceCustomMapper extends Mapper<DataSourceDO> {
     IPage<DataSourceDO> selectPageWithPermission(IPage<DataSourceDO> page, @Param("admin") Boolean admin,
-        @Param("userId") Long userId,
-        @Param("searchKey") String searchKey);
+        @Param("userId") Long userId, @Param("searchKey") String searchKey, @Param("kind") String kind);
 
 }

File: chat2db-server/chat2db-server-web/chat2db-server-admin-api/src/main/java/ai/chat2db/server/admin/api/controller/common/converter/CommonAdminConverter.java
Patch:
@@ -6,6 +6,7 @@
 import ai.chat2db.server.admin.api.controller.user.vo.SimpleUserVO;
 import ai.chat2db.server.common.api.controller.request.CommonQueryRequest;
 import ai.chat2db.server.domain.api.enums.AccessObjectTypeEnum;
+import ai.chat2db.server.domain.api.enums.DataSourceKindEnum;
 import ai.chat2db.server.domain.api.model.DataSource;
 import ai.chat2db.server.domain.api.model.Team;
 import ai.chat2db.server.domain.api.model.User;
@@ -21,7 +22,7 @@
  *
  * @author Jiaju Zhuang
  */
-@Mapper(componentModel = "spring", imports = {AccessObjectTypeEnum.class})
+@Mapper(componentModel = "spring", imports = {AccessObjectTypeEnum.class, DataSourceKindEnum.class})
 public abstract class CommonAdminConverter {
 
     /**
@@ -54,6 +55,7 @@ public abstract class CommonAdminConverter {
      */
     @Mappings({
         @Mapping(target = "pageSize", expression = "java(10)"),
+        @Mapping(target = "kind", expression = "java(DataSourceKindEnum.SHARED.getCode())"),
     })
     public abstract DataSourcePageQueryParam request2paramDataSource(CommonQueryRequest request);
 

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/JdbcUtils.java
Patch:
@@ -151,7 +151,7 @@ public static String getResultSetValue(ResultSet rs, int index) throws SQLExcept
             return "(BLOB " + blob.length() + ")";
         }
         if (obj instanceof Clob clob) {
-            return "(CLOB " + clob.length() + ")";
+            return clob.getSubString(1, Math.toIntExact(clob.length()));
         }
         if (obj instanceof Timestamp timestamp) {
             return Objects.toString(timestamp);

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/JdbcUtils.java
Patch:
@@ -151,7 +151,7 @@ public static String getResultSetValue(ResultSet rs, int index) throws SQLExcept
             return "(BLOB " + blob.length() + ")";
         }
         if (obj instanceof Clob clob) {
-            return "(CLOB " + clob.length() + ")";
+            return clob.getSubString(1, Math.toIntExact(clob.length()));
         }
         if (obj instanceof Timestamp timestamp) {
             return Objects.toString(timestamp);

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/OperationServiceImpl.java
Patch:
@@ -101,6 +101,9 @@ public PageResult<Operation> queryPage(OperationPageQueryParam param) {
         if (StringUtils.isNotBlank(param.getTabOpened())) {
             queryWrapper.eq("tab_opened", param.getTabOpened());
         }
+        if (StringUtils.isNotBlank(param.getOperationType())) {
+            queryWrapper.eq("operation_type", param.getOperationType());
+        }
         Integer start = param.getPageNo();
         Integer offset = param.getPageSize();
         Page<OperationSavedDO> page = new Page<>(start, offset);

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/OperationServiceImpl.java
Patch:
@@ -101,6 +101,9 @@ public PageResult<Operation> queryPage(OperationPageQueryParam param) {
         if (StringUtils.isNotBlank(param.getTabOpened())) {
             queryWrapper.eq("tab_opened", param.getTabOpened());
         }
+        if (StringUtils.isNotBlank(param.getOperationType())) {
+            queryWrapper.eq("operation_type", param.getOperationType());
+        }
         Integer start = param.getPageNo();
         Integer offset = param.getPageSize();
         Page<OperationSavedDO> page = new Page<>(start, offset);

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/ResultSetUtils.java
Patch:
@@ -70,7 +70,7 @@ public static TableColumn buildColumn(ResultSet resultSet) throws SQLException {
         tableColumn.setName(getString(resultSet, "COLUMN_NAME"));
         tableColumn.setComment(getString(resultSet, "REMARKS"));
         tableColumn.setDefaultValue(getString(resultSet, "COLUMN_DEF"));
-        tableColumn.setTypeName(getString(resultSet, "TYPE_NAME"));
+        tableColumn.setColumnType(getString(resultSet, "TYPE_NAME"));
         tableColumn.setColumnSize(resultSet.getInt("COLUMN_SIZE"));
         tableColumn.setDataType(resultSet.getInt("DATA_TYPE"));
         tableColumn.setNullable(resultSet.getInt("NULLABLE") == 1);

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/ResultSetUtils.java
Patch:
@@ -70,7 +70,7 @@ public static TableColumn buildColumn(ResultSet resultSet) throws SQLException {
         tableColumn.setName(getString(resultSet, "COLUMN_NAME"));
         tableColumn.setComment(getString(resultSet, "REMARKS"));
         tableColumn.setDefaultValue(getString(resultSet, "COLUMN_DEF"));
-        tableColumn.setTypeName(getString(resultSet, "TYPE_NAME"));
+        tableColumn.setColumnType(getString(resultSet, "TYPE_NAME"));
         tableColumn.setColumnSize(resultSet.getInt("COLUMN_SIZE"));
         tableColumn.setDataType(resultSet.getInt("DATA_TYPE"));
         tableColumn.setNullable(resultSet.getInt("NULLABLE") == 1);

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/AiConfigController.java
Patch:
@@ -87,7 +87,6 @@ public DataResult<ApiKeyResponse> remaininguses() {
         String apiKey = getApiKey();
         if (StringUtils.isBlank(apiKey)) {
             return DataResult.of(ApiKeyResponse.builder()
-                .remainingUses(0L)
                 .build());
         }
         return gatewayClientService.remaininguses(apiKey);

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/AiConfigController.java
Patch:
@@ -87,7 +87,6 @@ public DataResult<ApiKeyResponse> remaininguses() {
         String apiKey = getApiKey();
         if (StringUtils.isBlank(apiKey)) {
             return DataResult.of(ApiKeyResponse.builder()
-                .remainingUses(0L)
                 .build());
         }
         return gatewayClientService.remaininguses(apiKey);

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/SqlServerDBManage.java
Patch:
@@ -1,15 +1,15 @@
 package ai.chat2db.plugin.sqlserver;
 
+import java.sql.SQLException;
+
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.sql.SQLExecutor;
 
-import java.sql.SQLException;
-
 public class SqlServerDBManage implements DBManage {
     @Override
     public void connectDatabase(String database) {
         try {
-            SQLExecutor.getInstance().execute("use " + database + ";");
+            SQLExecutor.getInstance().execute("use [" + database + "];");
         } catch (SQLException e) {
             throw new RuntimeException(e);
         }

File: chat2db-server/chat2db-plugins/chat2db-sqlserver/src/main/java/ai/chat2db/plugin/sqlserver/SqlServerDBManage.java
Patch:
@@ -1,15 +1,15 @@
 package ai.chat2db.plugin.sqlserver;
 
+import java.sql.SQLException;
+
 import ai.chat2db.spi.DBManage;
 import ai.chat2db.spi.sql.SQLExecutor;
 
-import java.sql.SQLException;
-
 public class SqlServerDBManage implements DBManage {
     @Override
     public void connectDatabase(String database) {
         try {
-            SQLExecutor.getInstance().execute("use " + database + ";");
+            SQLExecutor.getInstance().execute("use [" + database + "];");
         } catch (SQLException e) {
             throw new RuntimeException(e);
         }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/listener/OpenAIEventSourceListener.java
Patch:
@@ -98,9 +98,9 @@ public void onFailure(EventSource eventSource, Throwable t, Response response) {
             String bodyString = null;
             if (Objects.nonNull(body)) {
                 bodyString = body.string();
-                log.error("OpenAI  sse连接异常data：{}，异常：{}", bodyString, t);
+                log.error("OpenAI  sse连接异常data：{}", bodyString, t);
             } else {
-                log.error("OpenAI  sse连接异常data：{}，异常：{}", response, t);
+                log.error("OpenAI  sse连接异常data：{}", response, t);
             }
             eventSource.cancel();
             Message message = new Message();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/listener/OpenAIEventSourceListener.java
Patch:
@@ -98,9 +98,9 @@ public void onFailure(EventSource eventSource, Throwable t, Response response) {
             String bodyString = null;
             if (Objects.nonNull(body)) {
                 bodyString = body.string();
-                log.error("OpenAI  sse连接异常data：{}，异常：{}", bodyString, t);
+                log.error("OpenAI  sse连接异常data：{}", bodyString, t);
             } else {
-                log.error("OpenAI  sse连接异常data：{}，异常：{}", response, t);
+                log.error("OpenAI  sse连接异常data：{}", response, t);
             }
             eventSource.cancel();
             Message message = new Message();

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/ExceptionUtils.java
Patch:
@@ -20,7 +20,7 @@ public static String getErrorInfoFromException(Throwable throwable) {
             StringWriter sw = new StringWriter();
             PrintWriter pw = new PrintWriter(sw);
             throwable.printStackTrace(pw);
-            errorDetail = "\r\n" + sw.toString() + "\r\n";
+            errorDetail = " \r\n " + sw.toString() + " \r\n ";
             sw.close();
             pw.close();
         } catch (Exception e2) {

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/ExceptionUtils.java
Patch:
@@ -20,7 +20,7 @@ public static String getErrorInfoFromException(Throwable throwable) {
             StringWriter sw = new StringWriter();
             PrintWriter pw = new PrintWriter(sw);
             throwable.printStackTrace(pw);
-            errorDetail = "\r\n" + sw.toString() + "\r\n";
+            errorDetail = " \r\n " + sw.toString() + " \r\n ";
             sw.close();
             pw.close();
         } catch (Exception e2) {

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/exception/EasyControllerExceptionHandler.java
Patch:
@@ -170,7 +170,6 @@ public ActionResult handledException(HttpServletRequest request, Exception excep
     public ActionResult convert(Throwable exception) {
         ExceptionConvertor exceptionConvertor = EXCEPTION_CONVERTOR_MAP.get(exception.getClass());
         if (exceptionConvertor == null) {
-            // 尝试获取bussienss异常
             if (exception instanceof BusinessException) {
                 exceptionConvertor = EXCEPTION_CONVERTOR_MAP.get(BusinessException.class);
             } else if (exception instanceof SystemException) {

File: chat2db-server/chat2db-server-start/src/main/java/ai/chat2db/server/start/exception/EasyControllerExceptionHandler.java
Patch:
@@ -170,7 +170,6 @@ public ActionResult handledException(HttpServletRequest request, Exception excep
     public ActionResult convert(Throwable exception) {
         ExceptionConvertor exceptionConvertor = EXCEPTION_CONVERTOR_MAP.get(exception.getClass());
         if (exceptionConvertor == null) {
-            // 尝试获取bussienss异常
             if (exception instanceof BusinessException) {
                 exceptionConvertor = EXCEPTION_CONVERTOR_MAP.get(BusinessException.class);
             } else if (exception instanceof SystemException) {

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/data/source/DataSourceController.java
Patch:
@@ -12,6 +12,7 @@
 import ai.chat2db.server.domain.api.param.DataSourceUpdateParam;
 import ai.chat2db.server.domain.api.service.ConsoleService;
 import ai.chat2db.server.domain.api.service.DataSourceService;
+import ai.chat2db.server.tools.common.exception.ConnectionException;
 import ai.chat2db.spi.model.Database;
 import ai.chat2db.spi.ssh.SSHManager;
 import ai.chat2db.server.tools.base.wrapper.result.ActionResult;
@@ -99,7 +100,7 @@ public ActionResult sshConnect(@RequestBody SSHTestRequest request) {
             session = SSHManager.getSSHSession(sshWebConverter.toInfo(request));
         } catch (Exception e) {
             log.error("sshConnect error", e);
-            throw new RuntimeException(e);
+            throw new ConnectionException("connection.ssh.error",null,e);
         } finally {
             if (session != null) {
                 session.disconnect();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/data/source/DataSourceController.java
Patch:
@@ -12,6 +12,7 @@
 import ai.chat2db.server.domain.api.param.DataSourceUpdateParam;
 import ai.chat2db.server.domain.api.service.ConsoleService;
 import ai.chat2db.server.domain.api.service.DataSourceService;
+import ai.chat2db.server.tools.common.exception.ConnectionException;
 import ai.chat2db.spi.model.Database;
 import ai.chat2db.spi.ssh.SSHManager;
 import ai.chat2db.server.tools.base.wrapper.result.ActionResult;
@@ -99,7 +100,7 @@ public ActionResult sshConnect(@RequestBody SSHTestRequest request) {
             session = SSHManager.getSSHSession(sshWebConverter.toInfo(request));
         } catch (Exception e) {
             log.error("sshConnect error", e);
-            throw new RuntimeException(e);
+            throw new ConnectionException("connection.ssh.error",null,e);
         } finally {
             if (session != null) {
                 session.disconnect();

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/builder/DBConfigBuilder.java
Patch:
@@ -11,7 +11,7 @@ public static DBConfig buildDBConfig() {
         dbConfig.setDbType("KINGBASE");
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("kingbase8-8.6.0.jar");
-        driverConfig.setJdbcDriverClass("om.kingbase8.Driver");
+        driverConfig.setJdbcDriverClass("com.kingbase8.Driver");
         driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/kingbase8-8.6.0.jar"));
         driverConfig.setName(driverConfig.getJdbcDriver() + ":" + driverConfig.getJdbcDriverClass());
         dbConfig.setDefaultDriverConfig(driverConfig);

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/builder/DBConfigBuilder.java
Patch:
@@ -11,7 +11,7 @@ public static DBConfig buildDBConfig() {
         dbConfig.setDbType("KINGBASE");
         DriverConfig driverConfig = new DriverConfig();
         driverConfig.setJdbcDriver("kingbase8-8.6.0.jar");
-        driverConfig.setJdbcDriverClass("om.kingbase8.Driver");
+        driverConfig.setJdbcDriverClass("com.kingbase8.Driver");
         driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/kingbase8-8.6.0.jar"));
         driverConfig.setName(driverConfig.getJdbcDriver() + ":" + driverConfig.getJdbcDriverClass());
         dbConfig.setDefaultDriverConfig(driverConfig);

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/azure/client/AzureOpenAiStreamClient.java
Patch:
@@ -84,7 +84,7 @@ public void streamCompletions(List<ChatMessage> chatMessages, EventSourceListene
                         text = message.getContent();
                     }
                 }
-                if (StringUtils.isNotBlank(text)) {
+                if (Objects.nonNull(text)) {
                     eventSourceListener.onEvent(null, "[DATA]", null, text);
                 }
                 CompletionsUsage usage = chatCompletions.getUsage();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/azure/client/AzureOpenAiStreamClient.java
Patch:
@@ -84,7 +84,7 @@ public void streamCompletions(List<ChatMessage> chatMessages, EventSourceListene
                         text = message.getContent();
                     }
                 }
-                if (StringUtils.isNotBlank(text)) {
+                if (Objects.nonNull(text)) {
                     eventSourceListener.onEvent(null, "[DATA]", null, text);
                 }
                 CompletionsUsage usage = chatCompletions.getUsage();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/azure/client/AzureOpenAiStreamClient.java
Patch:
@@ -84,7 +84,7 @@ public void streamCompletions(List<ChatMessage> chatMessages, EventSourceListene
                         text = message.getContent();
                     }
                 }
-                if (StringUtils.isNotBlank(text)) {
+                if (Objects.nonNull(text)) {
                     eventSourceListener.onEvent(null, "[DATA]", null, text);
                 }
                 CompletionsUsage usage = chatCompletions.getUsage();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/azure/client/AzureOpenAiStreamClient.java
Patch:
@@ -84,7 +84,7 @@ public void streamCompletions(List<ChatMessage> chatMessages, EventSourceListene
                         text = message.getContent();
                     }
                 }
-                if (StringUtils.isNotBlank(text)) {
+                if (Objects.nonNull(text)) {
                     eventSourceListener.onEvent(null, "[DATA]", null, text);
                 }
                 CompletionsUsage usage = chatCompletions.getUsage();

File: chat2db-server/chat2db-plugins/chat2b-mysql/src/main/java/ai/chat2db/plugin/mysql/builder/DBConfigBuilder.java
Patch:
@@ -23,7 +23,7 @@ public static DBConfig buildDBConfig() {
         driverConfig2.setJdbcDriver("mysql-connector-java-5.1.47.jar");
         driverConfig2.setJdbcDriverClass("com.mysql.jdbc.Driver");
         driverConfig2.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/mysql-connector-java-5.1.47.jar"));
-        driverConfig2.setName(driverConfig.getJdbcDriver() + ":" + driverConfig.getJdbcDriverClass());
+        driverConfig2.setName(driverConfig2.getJdbcDriver() + ":" + driverConfig2.getJdbcDriverClass());
 
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig,driverConfig2));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2b-mysql/src/main/java/ai/chat2db/plugin/mysql/builder/DBConfigBuilder.java
Patch:
@@ -23,7 +23,7 @@ public static DBConfig buildDBConfig() {
         driverConfig2.setJdbcDriver("mysql-connector-java-5.1.47.jar");
         driverConfig2.setJdbcDriverClass("com.mysql.jdbc.Driver");
         driverConfig2.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/mysql-connector-java-5.1.47.jar"));
-        driverConfig2.setName(driverConfig.getJdbcDriver() + ":" + driverConfig.getJdbcDriverClass());
+        driverConfig2.setName(driverConfig2.getJdbcDriver() + ":" + driverConfig2.getJdbcDriverClass());
 
         dbConfig.setDriverConfigList(Lists.newArrayList(driverConfig,driverConfig2));
         return dbConfig;

File: chat2db-server/chat2db-plugins/chat2db-redis/src/main/java/ai/chat2db/plugin/redis/builder/DBConfigBuilder.java
Patch:
@@ -10,7 +10,7 @@ public static DBConfig buildDBConfig() {
         dbConfig.setName("Redis");
         dbConfig.setDbType("REDIS");
         DriverConfig driverConfig = new DriverConfig();
-        driverConfig.setJdbcDriver("sredis-jdbc-driver-1.3.jar");
+        driverConfig.setJdbcDriver("redis-jdbc-driver-1.3.jar");
         driverConfig.setJdbcDriverClass("jdbc.RedisDriver");
         driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/redis-jdbc-driver-1.3.jar"));
         driverConfig.setName(driverConfig.getJdbcDriver() + ":" + driverConfig.getJdbcDriverClass());

File: chat2db-server/chat2db-plugins/chat2db-redis/src/main/java/ai/chat2db/plugin/redis/builder/DBConfigBuilder.java
Patch:
@@ -10,7 +10,7 @@ public static DBConfig buildDBConfig() {
         dbConfig.setName("Redis");
         dbConfig.setDbType("REDIS");
         DriverConfig driverConfig = new DriverConfig();
-        driverConfig.setJdbcDriver("sredis-jdbc-driver-1.3.jar");
+        driverConfig.setJdbcDriver("redis-jdbc-driver-1.3.jar");
         driverConfig.setJdbcDriverClass("jdbc.RedisDriver");
         driverConfig.setDownloadJdbcDriverUrls(Lists.newArrayList("https://oss-chat2db.alibaba.com/lib/redis-jdbc-driver-1.3.jar"));
         driverConfig.setName(driverConfig.getJdbcDriver() + ":" + driverConfig.getJdbcDriverClass());

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/JdbcUtils.java
Patch:
@@ -206,6 +206,8 @@ public static DataSourceConnect testConnect(String url, String host, String port
         // 加载驱动
         try {
             if (ssh.isUse()) {
+                ssh.setRHost(host);
+                ssh.setRPort(port);
                 session = SSHManager.getSSHSession(ssh);
                 url = url.replace(host, "127.0.0.1").replace(port, ssh.getLocalPort());
             }

File: chat2db-server/chat2db-spi/src/main/java/ai/chat2db/spi/util/JdbcUtils.java
Patch:
@@ -206,6 +206,8 @@ public static DataSourceConnect testConnect(String url, String host, String port
         // 加载驱动
         try {
             if (ssh.isUse()) {
+                ssh.setRHost(host);
+                ssh.setRPort(port);
                 session = SSHManager.getSSHSession(ssh);
                 url = url.replace(host, "127.0.0.1").replace(port, ssh.getLocalPort());
             }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DashboardServiceImpl.java
Patch:
@@ -60,6 +60,9 @@ public ActionResult update(DashboardUpdateParam param) {
         param.setGmtModified(LocalDateTime.now());
         DashboardDO dashboardDO = dashboardConverter.updateParam2do(param);
         dashboardMapper.updateById(dashboardDO);
+        if (CollectionUtils.isEmpty(param.getChartIds())) {
+            return ActionResult.isSuccess();
+        }
         deleteDashboardRelation(dashboardDO.getId());
         insertDashboardRelation(dashboardDO.getId(), param.getChartIds());
         return ActionResult.isSuccess();

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/DashboardServiceImpl.java
Patch:
@@ -60,6 +60,9 @@ public ActionResult update(DashboardUpdateParam param) {
         param.setGmtModified(LocalDateTime.now());
         DashboardDO dashboardDO = dashboardConverter.updateParam2do(param);
         dashboardMapper.updateById(dashboardDO);
+        if (CollectionUtils.isEmpty(param.getChartIds())) {
+            return ActionResult.isSuccess();
+        }
         deleteDashboardRelation(dashboardDO.getId());
         insertDashboardRelation(dashboardDO.getId(), param.getChartIds());
         return ActionResult.isSuccess();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/aspect/ConnectionInfoHandler.java
Patch:
@@ -60,7 +60,7 @@ public Object connectionInfoHandler(ProceedingJoinPoint proceedingJoinPoint) thr
     public ConnectInfo toInfo(Long dataSourceId, String database, Long consoleId) {
         DataResult<DataSource> result = dataSourceService.queryById(dataSourceId);
         DataSource dataSource = result.getData();
-        if (!result.success() && dataSource == null) {
+        if (!result.success() || dataSource == null) {
             throw new ParamBusinessException("dataSourceId");
         }
         ConnectInfo connectInfo = new ConnectInfo();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/request/TableBriefQueryRequest.java
Patch:
@@ -27,7 +27,6 @@ public class TableBriefQueryRequest extends PageQueryRequest implements DataSour
     /**
      * DB名称
      */
-    @NotNull
     private String databaseName;
 
     /**

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/aspect/ConnectionInfoHandler.java
Patch:
@@ -60,7 +60,7 @@ public Object connectionInfoHandler(ProceedingJoinPoint proceedingJoinPoint) thr
     public ConnectInfo toInfo(Long dataSourceId, String database, Long consoleId) {
         DataResult<DataSource> result = dataSourceService.queryById(dataSourceId);
         DataSource dataSource = result.getData();
-        if (!result.success() && dataSource == null) {
+        if (!result.success() || dataSource == null) {
             throw new ParamBusinessException("dataSourceId");
         }
         ConnectInfo connectInfo = new ConnectInfo();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/request/TableBriefQueryRequest.java
Patch:
@@ -27,7 +27,6 @@ public class TableBriefQueryRequest extends PageQueryRequest implements DataSour
     /**
      * DB名称
      */
-    @NotNull
     private String databaseName;
 
     /**

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/DB2DBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.db2;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class DB2DBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "DROP TABLE " + tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/DMDBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.dm;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class DMDBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "DROP TABLE IF EXISTS " +tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-h2/src/main/java/ai/chat2db/plugin/h2/H2DBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.h2;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class H2DBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "DROP TABLE " +tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/HiveDBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.hive;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class HiveDBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "drop table if exists " +tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/KingBaseDBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.kingbase;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class KingBaseDBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "drop table if exists " +tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-mariadb/src/main/java/ai/chat2db/plugin/mariadb/MariaDBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.mariadb;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class MariaDBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "DROP TABLE " +tableName ;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/azure/client/AzureOpenAiStreamClient.java
Patch:
@@ -44,6 +44,9 @@ public class AzureOpenAiStreamClient {
      */
     public AzureOpenAiStreamClient(String apiKey, String endpoint, String deployId) {
         this.deployId = deployId;
+        if (StringUtils.isBlank(apiKey)) {
+            return;
+        }
         this.client = new OpenAIClientBuilder()
             .credential(new AzureKeyCredential(apiKey))
             .endpoint(endpoint)

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/vo/TableVO.java
Patch:
@@ -32,6 +32,8 @@ public class TableVO {
      */
     private List<IndexVO> indexList;
 
-
+    /**
+     * 是否已经被固定
+     */
     private boolean pinned;
 }

File: chat2db-server/chat2db-plugins/chat2db-db2/src/main/java/ai/chat2db/plugin/db2/DB2DBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.db2;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class DB2DBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "DROP TABLE " + tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-dm/src/main/java/ai/chat2db/plugin/dm/DMDBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.dm;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class DMDBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "DROP TABLE IF EXISTS " +tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-h2/src/main/java/ai/chat2db/plugin/h2/H2DBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.h2;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class H2DBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "DROP TABLE " +tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-hive/src/main/java/ai/chat2db/plugin/hive/HiveDBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.hive;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class HiveDBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "drop table if exists " +tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-kingbase/src/main/java/ai/chat2db/plugin/kingbase/KingBaseDBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.kingbase;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class KingBaseDBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "drop table if exists " +tableName;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-plugins/chat2db-mariadb/src/main/java/ai/chat2db/plugin/mariadb/MariaDBManage.java
Patch:
@@ -1,6 +1,7 @@
 package ai.chat2db.plugin.mariadb;
 
 import ai.chat2db.spi.DBManage;
+import ai.chat2db.spi.sql.SQLExecutor;
 
 public class MariaDBManage implements DBManage {
     @Override
@@ -40,6 +41,7 @@ public void modifySchema(String databaseName, String schemaName, String newSchem
 
     @Override
     public void dropTable(String databaseName, String schemaName, String tableName) {
-
+        String sql = "DROP TABLE " +tableName ;
+        SQLExecutor.getInstance().executeSql(sql, resultSet -> null);
     }
 }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/ai/azure/client/AzureOpenAiStreamClient.java
Patch:
@@ -44,6 +44,9 @@ public class AzureOpenAiStreamClient {
      */
     public AzureOpenAiStreamClient(String apiKey, String endpoint, String deployId) {
         this.deployId = deployId;
+        if (StringUtils.isBlank(apiKey)) {
+            return;
+        }
         this.client = new OpenAIClientBuilder()
             .credential(new AzureKeyCredential(apiKey))
             .endpoint(endpoint)

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/controller/rdb/vo/TableVO.java
Patch:
@@ -32,6 +32,8 @@ public class TableVO {
      */
     private List<IndexVO> indexList;
 
-
+    /**
+     * 是否已经被固定
+     */
     private boolean pinned;
 }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/PinServiceImpl.java
Patch:
@@ -38,6 +38,7 @@ public ActionResult pinTable(PinTableParam param) {
 
     @Override
     public ActionResult deletePinTable(PinTableParam param) {
+        param.setUserId(ContextUtils.getUserId());
         LambdaUpdateWrapper<PinTableDO> updateWrapper = new LambdaUpdateWrapper<>();
         updateWrapper.eq(PinTableDO::getUserId, param.getUserId());
         updateWrapper.eq(PinTableDO::getDataSourceId, param.getDataSourceId());

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/PinServiceImpl.java
Patch:
@@ -38,6 +38,7 @@ public ActionResult pinTable(PinTableParam param) {
 
     @Override
     public ActionResult deletePinTable(PinTableParam param) {
+        param.setUserId(ContextUtils.getUserId());
         LambdaUpdateWrapper<PinTableDO> updateWrapper = new LambdaUpdateWrapper<>();
         updateWrapper.eq(PinTableDO::getUserId, param.getUserId());
         updateWrapper.eq(PinTableDO::getDataSourceId, param.getDataSourceId());

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/PinServiceImpl.java
Patch:
@@ -7,6 +7,7 @@
 import ai.chat2db.server.domain.repository.mapper.PinTableMapper;
 import ai.chat2db.server.tools.base.wrapper.result.ActionResult;
 import ai.chat2db.server.tools.base.wrapper.result.ListResult;
+import ai.chat2db.server.tools.common.util.ContextUtils;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
 import org.apache.commons.lang3.StringUtils;
@@ -30,6 +31,7 @@ public class PinServiceImpl implements PinService {
     @Override
     public ActionResult pinTable(PinTableParam param) {
         PinTableDO entity = pinTableConverter.param2do(param);
+        entity.setUserId(ContextUtils.getUserId());
         pinTableMapper.insert(entity);
         return ActionResult.isSuccess();
     }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-core/src/main/java/ai/chat2db/server/domain/core/impl/PinServiceImpl.java
Patch:
@@ -7,6 +7,7 @@
 import ai.chat2db.server.domain.repository.mapper.PinTableMapper;
 import ai.chat2db.server.tools.base.wrapper.result.ActionResult;
 import ai.chat2db.server.tools.base.wrapper.result.ListResult;
+import ai.chat2db.server.tools.common.util.ContextUtils;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
 import org.apache.commons.lang3.StringUtils;
@@ -30,6 +31,7 @@ public class PinServiceImpl implements PinService {
     @Override
     public ActionResult pinTable(PinTableParam param) {
         PinTableDO entity = pinTableConverter.param2do(param);
+        entity.setUserId(ContextUtils.getUserId());
         pinTableMapper.insert(entity);
         return ActionResult.isSuccess();
     }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-support/src/main/java/ai/chat2db/server/domain/support/sql/SQLExecutor.java
Patch:
@@ -215,7 +215,7 @@ public void connectDatabase(String database) {
             }
             case REDIS -> {
                 try {
-                    execute("select " + database, null);
+                    execute("select " + database);
                 } catch (SQLException e) {
                     throw new RuntimeException(e);
                 }

File: chat2db-server/chat2db-server-domain/chat2db-server-domain-support/src/main/java/ai/chat2db/server/domain/support/sql/SQLExecutor.java
Patch:
@@ -215,7 +215,7 @@ public void connectDatabase(String database) {
             }
             case REDIS -> {
                 try {
-                    execute("select " + database, null);
+                    execute("select " + database);
                 } catch (SQLException e) {
                     throw new RuntimeException(e);
                 }

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/aspect/ConnectionInfoHandler.java
Patch:
@@ -60,7 +60,7 @@ public Object connectionInfoHandler(ProceedingJoinPoint proceedingJoinPoint) thr
     public ConnectInfo toInfo(Long dataSourceId, String database, Long consoleId) {
         DataResult<DataSource> result = dataSourceService.queryById(dataSourceId);
         DataSource dataSource = result.getData();
-        if (!result.success() && dataSource != null) {
+        if (!result.success() && dataSource == null) {
             throw new ParamBusinessException("dataSourceId");
         }
         ConnectInfo connectInfo = new ConnectInfo();

File: chat2db-server/chat2db-server-web/chat2db-server-web-api/src/main/java/ai/chat2db/server/web/api/aspect/ConnectionInfoHandler.java
Patch:
@@ -60,7 +60,7 @@ public Object connectionInfoHandler(ProceedingJoinPoint proceedingJoinPoint) thr
     public ConnectInfo toInfo(Long dataSourceId, String database, Long consoleId) {
         DataResult<DataSource> result = dataSourceService.queryById(dataSourceId);
         DataSource dataSource = result.getData();
-        if (!result.success() && dataSource != null) {
+        if (!result.success() && dataSource == null) {
             throw new ParamBusinessException("dataSourceId");
         }
         ConnectInfo connectInfo = new ConnectInfo();

