File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatDropShadowBorder.java
Patch:
@@ -74,7 +74,7 @@ public FlatDropShadowBorder( Color shadowColor, Insets shadowInsets, float shado
 
 		this.shadowColor = shadowColor;
 		this.shadowInsets = shadowInsets;
-		this.shadowOpacity = shadowOpacity;
+		this.shadowOpacity = Math.min( Math.max( shadowOpacity, 0f ), 1f );
 
 		shadowSize = maxInset( shadowInsets );
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatNativeLibrary.java
Patch:
@@ -90,10 +90,10 @@ else if( SystemInfo.isX86_64 )
 			classifier = SystemInfo.isAARCH64 ? "macos-arm64" : "macos-x86_64";
 			ext = "dylib";
 
-		} else if( SystemInfo.isLinux && SystemInfo.isX86_64 ) {
-			// Linux: requires x86_64
+		} else if( SystemInfo.isLinux && (SystemInfo.isX86_64 || SystemInfo.isAARCH64)) {
+			// Linux: requires x86_64 or aarch64
 
-			classifier = "linux-x86_64";
+			classifier = SystemInfo.isAARCH64 ? "linux-arm64" : "linux-x86_64";
 			ext = "so";
 
 			// Load libjawt.so (part of JRE) explicitly because it is not found

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatWindowCloseIcon.java
Patch:
@@ -63,7 +63,7 @@ protected void paintIconAt1x( Graphics2D g, int x, int y, int width, int height,
 		int iy = y + ((height - iwh) / 2);
 		int ix2 = ix + iwh - 1;
 		int iy2 = iy + iwh - 1;
-		float thickness = SystemInfo.isWindows_11_orLater ? (float) scaleFactor : (int) scaleFactor;
+		float thickness = Math.max( SystemInfo.isWindows_11_orLater ? (float) scaleFactor : (int) scaleFactor, 1 );
 
 		Path2D path = new Path2D.Float( Path2D.WIND_EVEN_ODD, 4 );
 		path.moveTo( ix, iy );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatWindowIconifyIcon.java
Patch:
@@ -38,7 +38,7 @@ public FlatWindowIconifyIcon( String windowStyle ) {
 	@Override
 	protected void paintIconAt1x( Graphics2D g, int x, int y, int width, int height, double scaleFactor ) {
 		int iw = (int) (getSymbolHeight() * scaleFactor);
-		int ih = (int) scaleFactor;
+		int ih = Math.max( (int) scaleFactor, 1 );
 		int ix = x + ((width - iw) / 2);
 		int iy = y + ((height - ih) / 2);
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatWindowMaximizeIcon.java
Patch:
@@ -42,7 +42,7 @@ protected void paintIconAt1x( Graphics2D g, int x, int y, int width, int height,
 		int iwh = (int) (getSymbolHeight() * scaleFactor);
 		int ix = x + ((width - iwh) / 2);
 		int iy = y + ((height - iwh) / 2);
-		float thickness = SystemInfo.isWindows_11_orLater ? (float) scaleFactor : (int) scaleFactor;
+		float thickness = Math.max( SystemInfo.isWindows_11_orLater ? (float) scaleFactor : (int) scaleFactor, 1 );
 		int arc = Math.max( (int) (1.5 * scaleFactor), 2 );
 
 		g.fill( SystemInfo.isWindows_11_orLater

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatWindowRestoreIcon.java
Patch:
@@ -45,7 +45,7 @@ protected void paintIconAt1x( Graphics2D g, int x, int y, int width, int height,
 		int iwh = (int) (getSymbolHeight() * scaleFactor);
 		int ix = x + ((width - iwh) / 2);
 		int iy = y + ((height - iwh) / 2);
-		float thickness = SystemInfo.isWindows_11_orLater ? (float) scaleFactor : (int) scaleFactor;
+		float thickness = Math.max( SystemInfo.isWindows_11_orLater ? (float) scaleFactor : (int) scaleFactor, 1 );
 		int arc = Math.max( (int) (1.5 * scaleFactor), 2 );
 		int arcOuter = (int) (arc + (1.5 * scaleFactor));
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -138,7 +138,7 @@ public Popup getPopup( Component owner, Component contents, int x, int y )
 
 		// create drop shadow popup
 		Popup popupForScreenOfOwner = getPopupForScreenOfOwner( owner, contents, x, y, forceHeavyWeight );
-		GraphicsConfiguration gc = owner.getGraphicsConfiguration();
+		GraphicsConfiguration gc = (owner != null) ? owner.getGraphicsConfiguration() : null;
 		return (gc != null && gc.isTranslucencyCapable())
 			? new DropShadowPopup( popupForScreenOfOwner, owner, contents )
 			: new NonFlashingPopup( popupForScreenOfOwner, owner, contents );
@@ -306,7 +306,7 @@ private Point fixToolTipLocation( Component owner, Component contents, int x, in
 				break;
 			}
 		}
-		if( gc == null )
+		if( gc == null && owner != null )
 			gc = owner.getGraphicsConfiguration();
 		if( gc == null )
 			return null;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListUI.java
Patch:
@@ -324,8 +324,8 @@ protected void paintCell( Graphics g, int row, Rectangle rowBounds, ListCellRend
 			cw = rowBounds.width;
 		}
 		
-		// filelist/combobox does not support alternate row color
-		if( !isFileList && !(dataModel instanceof DefaultComboBoxModel) ) {
+		// combobox does not support alternate row color
+		if ( !"ComboBox.list".equals( list.getName() ) ) {
 			if( alternateRowColor != null && row % 2 != 0 ) {
 				g.setColor( alternateRowColor );
 				

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemePreviewSwitches.java
Patch:
@@ -672,7 +672,7 @@ public boolean isPressed() {
 				}
 				@Override
 				public boolean isSelected() {
-					return isStateSelected();
+					return isStateSelected() || isStateIndeterminate();
 				}
 			} );
 

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -969,6 +969,7 @@ void tree() {
 			"selectionInsets", Insets.class,
 			"selectionArc", int.class,
 			"wideSelection", boolean.class,
+			"wideCellRenderer", boolean.class,
 			"showCellFocusIndicator", boolean.class,
 
 			"paintSelection", boolean.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableValue.java
Patch:
@@ -942,6 +942,7 @@ void tree() {
 		testInsets( c, ui, "selectionInsets", 1,2,3,4 );
 		testInteger( c, ui, "selectionArc", 123 );
 		testBoolean( c, ui, "wideSelection", true );
+		testBoolean( c, ui, "wideCellRenderer", true );
 		testBoolean( c, ui, "showCellFocusIndicator", true );
 
 		testBoolean( c, ui, "paintSelection", false );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -1191,6 +1191,7 @@ void tree() {
 		ui.applyStyle( "selectionInsets: 1,2,3,4" );
 		ui.applyStyle( "selectionArc: 8" );
 		ui.applyStyle( "wideSelection: true" );
+		ui.applyStyle( "wideCellRenderer: true" );
 		ui.applyStyle( "showCellFocusIndicator: true" );
 
 		ui.applyStyle( "paintSelection: false" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatWindowResizer.java
Patch:
@@ -272,7 +272,8 @@ public void uninstall() {
 		public void doLayout() {
 			super.doLayout();
 
-			centerComp.setBounds( 0, 0, resizeComp.getWidth(), resizeComp.getHeight() );
+			if( centerComp != null && centerComp.isVisible() )
+				centerComp.setBounds( 0, 0, resizeComp.getWidth(), resizeComp.getHeight() );
 		}
 
 		@Override
@@ -376,6 +377,7 @@ public void windowStateChanged( WindowEvent e ) {
 
 		@Override
 		protected void beginResizing( int resizeDir ) {
+			centerComp.setBounds( 0, 0, resizeComp.getWidth(), resizeComp.getHeight() );
 			centerComp.setCursor( getPredefinedCursor( resizeDir ) );
 			centerComp.setVisible( true );
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -585,7 +585,7 @@ public void update( Graphics g, JComponent c ) {
 			FlatUIUtils.paintComponentBackground( g2, 0, 0, width, height, focusWidth, arc );
 
 			// paint arrow button background
-			if( enabled && !isCellRenderer ) {
+			if( enabled && !isCellRenderer && arrowButton.isVisible() ) {
 				Color buttonColor = paintButton
 					? buttonEditableBackground
 					: (buttonFocusedBackground != null || focusedBackground != null) && isPermanentFocusOwner( comboBox )
@@ -612,7 +612,7 @@ public void update( Graphics g, JComponent c ) {
 			}
 
 			// paint vertical line between value and arrow button
-			if( paintButton ) {
+			if( paintButton && arrowButton.isVisible() ) {
 				Color separatorColor = enabled ? buttonSeparatorColor : buttonDisabledSeparatorColor;
 				if( separatorColor != null && buttonSeparatorWidth > 0 ) {
 					g2.setColor( separatorColor );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatSystemProperties.java
Patch:
@@ -138,7 +138,7 @@ public interface FlatSystemProperties
 	/**
 	 * Specifies whether native rounded popup borders should be used (if supported by operating system).
 	 * <p>
-	 * (requires Window 11 or macOS)
+	 * (requires Windows 11 or macOS)
 	 * <p>
 	 * <strong>Allowed Values</strong> {@code false} and {@code true}<br>
 	 * <strong>Default</strong> {@code true}; except on macOS 14.4+ where it is {@code false}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -138,7 +138,8 @@ public Popup getPopup( Component owner, Component contents, int x, int y )
 
 		// create drop shadow popup
 		Popup popupForScreenOfOwner = getPopupForScreenOfOwner( owner, contents, x, y, forceHeavyWeight );
-		return owner.getGraphicsConfiguration().isTranslucencyCapable()
+		GraphicsConfiguration gc = owner.getGraphicsConfiguration();
+		return (gc != null && gc.isTranslucencyCapable())
 			? new DropShadowPopup( popupForScreenOfOwner, owner, contents )
 			: new NonFlashingPopup( popupForScreenOfOwner, owner, contents );
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -824,7 +824,8 @@ protected void updateMaximizedBounds() {
 		Rectangle oldMaximizedBounds = frame.getMaximizedBounds();
 		if( !hasNativeCustomDecoration() &&
 			(oldMaximizedBounds == null ||
-			 Objects.equals( oldMaximizedBounds, rootPane.getClientProperty( "_flatlaf.maximizedBounds" ) )) )
+			 Objects.equals( oldMaximizedBounds, rootPane.getClientProperty( "_flatlaf.maximizedBounds" ) )) &&
+			window.getGraphicsConfiguration() != null )
 		{
 			GraphicsConfiguration gc = window.getGraphicsConfiguration();
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTreeUI.java
Patch:
@@ -577,7 +577,7 @@ protected void paintRow( Graphics g, Rectangle clipBounds, Insets insets, Rectan
 		
 		if( alternateRowColor != null && row % 2 != 0 ) {
 			g.setColor( alternateRowColor );
-			FlatUIUtils.paintComponentBackground((Graphics2D) g, bounds.x, bounds.y, tree.getWidth(), bounds.height, 0, 0);
+			FlatUIUtils.paintComponentBackground((Graphics2D) g, 0, bounds.y, tree.getWidth(), bounds.height, 0, 0);
 		}
 
 		// do not paint row if editing

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -965,6 +965,7 @@ void tree() {
 			"selectionInactiveBackground", Color.class,
 			"selectionInactiveForeground", Color.class,
 			"selectionBorderColor", Color.class,
+			"alternateRowColor", Color.class,
 			"selectionInsets", Insets.class,
 			"selectionArc", int.class,
 			"wideSelection", boolean.class,

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatScrollPaneUI.java
Patch:
@@ -210,7 +210,7 @@ private void mouseWheelMovedSmooth( MouseWheelEvent e ) {
 
 			// Use (0, 0) view position to obtain a constant unit increment of first item.
 			// Unit increment may be different for each item.
-			Rectangle visibleRect = new Rectangle( viewport.getViewSize() );
+			Rectangle visibleRect = new Rectangle( viewport.getExtentSize() );
 			unitIncrement = scrollable.getScrollableUnitIncrement( visibleRect, orientation, 1 );
 
 			if( unitIncrement > 0 ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/HiDPIUtils.java
Patch:
@@ -521,12 +521,12 @@ public static void addDirtyRegion( JComponent c, int x, int y, int width, int he
 			int x2 = x + c.getX();
 			int y2 = y + c.getY();
 			for( Component p = c.getParent(); p != null; p = p.getParent() ) {
-				x2 += p.getX();
-				y2 += p.getY();
 				if( x2 + width < p.getWidth() && y2 + height < p.getHeight() && p instanceof JComponent ) {
 					callback.addDirtyRegion( (JComponent) p, x2, y2, width, height );
 					return;
 				}
+				x2 += p.getX();
+				y2 += p.getY();
 			}
 		}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTabbedPaneUI.java
Patch:
@@ -1685,7 +1685,7 @@ protected void paintContentBorder( Graphics g, int tabPlacement, int selectedInd
 			w - (ci.left / 100f) - (ci.right / 100f), h - (ci.top / 100f) - (ci.bottom / 100f) ), false );
 
 		// add gap for selected tab to path
-		if( getTabType() == TAB_TYPE_CARD ) {
+		if( getTabType() == TAB_TYPE_CARD && selectedIndex >= 0 ) {
 			float csh = scale( (float) contentSeparatorHeight );
 
 			Rectangle tabRect = getTabBounds( tabPane, selectedIndex );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/HiDPIUtils.java
Patch:
@@ -495,7 +495,7 @@ private static boolean needsSpecialRepaint( Component c, int x, int y, int width
 	 * but only if default repaint manager is currently installed.
 	 * <p>
 	 * Invoke once on application startup.
-	 * Compatible with all/other L&Fs.
+	 * Compatible with all/other LaFs.
 	 *
 	 * @since 3.5
 	 */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatEditorPaneUI.java
Patch:
@@ -171,7 +171,7 @@ static void propertyChange( JTextComponent c, PropertyChangeEvent e, Runnable in
 			case FlatClientProperties.STYLE_CLASS:
 				installStyle.run();
 				c.revalidate();
-				c.repaint();
+				HiDPIUtils.repaint( c );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatLabelUI.java
Patch:
@@ -124,7 +124,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 			} else
 				installStyle( label );
 			label.revalidate();
-			label.repaint();
+			HiDPIUtils.repaint( label );
 		}
 
 		super.propertyChange( e );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListUI.java
Patch:
@@ -43,6 +43,7 @@
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
 import com.formdev.flatlaf.util.Graphics2DProxy;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -182,7 +183,7 @@ protected PropertyChangeListener createPropertyChangeListener() {
 				case FlatClientProperties.STYLE_CLASS:
 					installStyle();
 					list.revalidate();
-					list.repaint();
+					HiDPIUtils.repaint( list );
 					break;
 			}
 		};
@@ -205,7 +206,7 @@ protected ListSelectionListener createListSelectionListener() {
 				Rectangle r = getCellBounds( list, firstIndex, lastIndex );
 				if( r != null ) {
 					int arc = (int) Math.ceil( UIScale.scale( selectionArc / 2f ) );
-					list.repaint( r.x - arc, r.y - arc, r.width + (arc * 2), r.height + (arc * 2) );
+					HiDPIUtils.repaint( list, r.x - arc, r.y - arc, r.width + (arc * 2), r.height + (arc * 2) );
 				}
 			}
 		};

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuUI.java
Patch:
@@ -47,6 +47,7 @@
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableField;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableLookupProvider;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 
 /**
@@ -167,7 +168,7 @@ private void rollover( MouseEvent e, boolean rollover ) {
 				JMenu menu = (JMenu) e.getSource();
 				if( menu.isTopLevelMenu() && menu.isRolloverEnabled() ) {
 					menu.getModel().setRollover( rollover );
-					menu.repaint();
+					HiDPIUtils.repaint( menu );
 				}
 			}
 		};

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPanelUI.java
Patch:
@@ -31,6 +31,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -111,7 +112,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 				} else
 					installStyle( c );
 				c.revalidate();
-				c.repaint();
+				HiDPIUtils.repaint( c );
 				break;
 
 			case FlatClientProperties.FULL_WINDOW_CONTENT_BUTTONS_PLACEHOLDER:

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPasswordFieldUI.java
Patch:
@@ -43,6 +43,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.icons.FlatCapsLockIcon;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.UIScale;
 
 /**
@@ -163,7 +164,7 @@ public void keyReleased( KeyEvent e ) {
 			}
 			private void repaint( KeyEvent e ) {
 				if( e.getKeyCode() == KeyEvent.VK_CAPS_LOCK ) {
-					e.getComponent().repaint();
+					HiDPIUtils.repaint( e.getComponent() );
 					scrollCaretToVisible();
 				}
 			}
@@ -326,7 +327,7 @@ protected void updateRevealButton() {
 		if( visible != revealButton.isVisible() ) {
 			revealButton.setVisible( visible );
 			c.revalidate();
-			c.repaint();
+			HiDPIUtils.repaint( c );
 
 			if( !visible ) {
 				revealButton.setSelected( false );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatProgressBarUI.java
Patch:
@@ -133,14 +133,14 @@ protected void installListeners() {
 				case PROGRESS_BAR_LARGE_HEIGHT:
 				case PROGRESS_BAR_SQUARE:
 					progressBar.revalidate();
-					progressBar.repaint();
+					HiDPIUtils.repaint( progressBar );
 					break;
 
 				case STYLE:
 				case STYLE_CLASS:
 					installStyle();
 					progressBar.revalidate();
-					progressBar.repaint();
+					HiDPIUtils.repaint( progressBar );
 					break;
 			}
 		};
@@ -294,6 +294,6 @@ protected void setAnimationIndex( int newValue ) {
 		// Only solution is to repaint whole progress bar.
 		double systemScaleFactor = UIScale.getSystemScaleFactor( progressBar.getGraphicsConfiguration() );
 		if( (int) systemScaleFactor != systemScaleFactor )
-			progressBar.repaint();
+			HiDPIUtils.repaint( progressBar );
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -47,6 +47,7 @@
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
 import com.formdev.flatlaf.ui.FlatStylingSupport.UnknownStyleException;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -173,7 +174,7 @@ protected void propertyChange( AbstractButton b, PropertyChangeEvent e ) {
 				} else
 					installStyle( b );
 				b.revalidate();
-				b.repaint();
+				HiDPIUtils.repaint( b );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSeparatorUI.java
Patch:
@@ -32,6 +32,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 
 /**
@@ -134,7 +135,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 				} else
 					installStyle( s );
 				s.revalidate();
-				s.repaint();
+				HiDPIUtils.repaint( s );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatStylingSupport.java
Patch:
@@ -40,6 +40,7 @@
 import javax.swing.border.Border;
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.FlatLaf;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.StringUtils;
 import com.formdev.flatlaf.util.SystemInfo;
 
@@ -709,7 +710,7 @@ static PropertyChangeListener createPropertyChangeListener( JComponent c,
 				case FlatClientProperties.STYLE_CLASS:
 					installStyle.run();
 					c.revalidate();
-					c.repaint();
+					HiDPIUtils.repaint( c );
 					break;
 			}
 		};

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableHeaderUI.java
Patch:
@@ -45,6 +45,7 @@
 import javax.swing.table.TableColumnModel;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -234,8 +235,8 @@ public int getRolloverColumn() {
 
 	@Override
 	protected void rolloverColumnUpdated( int oldColumn, int newColumn ) {
-		header.repaint( header.getHeaderRect( oldColumn ) );
-		header.repaint( header.getHeaderRect( newColumn ) );
+		HiDPIUtils.repaint( header, header.getHeaderRect( oldColumn ) );
+		HiDPIUtils.repaint( header, header.getHeaderRect( newColumn ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToggleButtonUI.java
Patch:
@@ -26,6 +26,7 @@
 import javax.swing.plaf.ComponentUI;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.UnknownStyleException;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.UIScale;
 
 /**
@@ -159,14 +160,14 @@ protected void propertyChange( AbstractButton b, PropertyChangeEvent e ) {
 					b.revalidate();
 				}
 
-				b.repaint();
+				HiDPIUtils.repaint( b );
 				break;
 
 			case TAB_BUTTON_UNDERLINE_PLACEMENT:
 			case TAB_BUTTON_UNDERLINE_HEIGHT:
 			case TAB_BUTTON_UNDERLINE_COLOR:
 			case TAB_BUTTON_SELECTED_BACKGROUND:
-				b.repaint();
+				HiDPIUtils.repaint( b );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolBarSeparatorUI.java
Patch:
@@ -36,6 +36,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 
 /**
@@ -131,7 +132,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 				} else
 					installStyle( s );
 				s.revalidate();
-				s.repaint();
+				HiDPIUtils.repaint( s );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolBarUI.java
Patch:
@@ -47,6 +47,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -443,7 +444,7 @@ protected void repaintButtonGroup( AbstractButton b ) {
 
 		// repaint button group
 		if( gr != null )
-			toolBar.repaint( gr );
+			HiDPIUtils.repaint(toolBar, gr );
 	}
 
 	private ButtonGroup getButtonGroup( AbstractButton b ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -1347,13 +1347,13 @@ public RepaintFocusListener( Component repaintComponent, Predicate<Component> re
 		@Override
 		public void focusGained( FocusEvent e ) {
 			if( repaintCondition == null || repaintCondition.test( repaintComponent ) )
-				repaintComponent.repaint();
+				HiDPIUtils.repaint( repaintComponent );
 		}
 
 		@Override
 		public void focusLost( FocusEvent e ) {
 			if( repaintCondition == null || repaintCondition.test( repaintComponent ) )
-				repaintComponent.repaint();
+				HiDPIUtils.repaint( repaintComponent );
 		}
 	}
 

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/FlatLafDemo.java
Patch:
@@ -96,6 +96,9 @@ public static void main( String[] args ) {
 			// use Roboto Mono font
 //			FlatLaf.setPreferredMonospacedFontFamily( FlatRobotoMonoFont.FAMILY );
 
+			// install own repaint manager to fix repaint issues at 125%, 175%, 225%, ... on Windows
+//			HiDPIUtils.installHiDPIRepaintManager();
+
 			// application specific UI defaults
 			FlatLaf.registerCustomDefaultsSource( "com.formdev.flatlaf.demo" );
 

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/FlatLafDemo.java
Patch:
@@ -96,6 +96,9 @@ public static void main( String[] args ) {
 			// use Roboto Mono font
 //			FlatLaf.setPreferredMonospacedFontFamily( FlatRobotoMonoFont.FAMILY );
 
+			// install own repaint manager to fix repaint issues at 125%, 175%, 225%, ... on Windows
+//			HiDPIUtils.installHiDPIRepaintManager();
+
 			// application specific UI defaults
 			FlatLaf.registerCustomDefaultsSource( "com.formdev.flatlaf.demo" );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatEditorPaneUI.java
Patch:
@@ -171,7 +171,7 @@ static void propertyChange( JTextComponent c, PropertyChangeEvent e, Runnable in
 			case FlatClientProperties.STYLE_CLASS:
 				installStyle.run();
 				c.revalidate();
-				c.repaint();
+				HiDPIUtils.repaint( c );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatLabelUI.java
Patch:
@@ -124,7 +124,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 			} else
 				installStyle( label );
 			label.revalidate();
-			label.repaint();
+			HiDPIUtils.repaint( label );
 		}
 
 		super.propertyChange( e );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListUI.java
Patch:
@@ -43,6 +43,7 @@
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
 import com.formdev.flatlaf.util.Graphics2DProxy;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -182,7 +183,7 @@ protected PropertyChangeListener createPropertyChangeListener() {
 				case FlatClientProperties.STYLE_CLASS:
 					installStyle();
 					list.revalidate();
-					list.repaint();
+					HiDPIUtils.repaint( list );
 					break;
 			}
 		};
@@ -205,7 +206,7 @@ protected ListSelectionListener createListSelectionListener() {
 				Rectangle r = getCellBounds( list, firstIndex, lastIndex );
 				if( r != null ) {
 					int arc = (int) Math.ceil( UIScale.scale( selectionArc / 2f ) );
-					list.repaint( r.x - arc, r.y - arc, r.width + (arc * 2), r.height + (arc * 2) );
+					HiDPIUtils.repaint( list, r.x - arc, r.y - arc, r.width + (arc * 2), r.height + (arc * 2) );
 				}
 			}
 		};

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuUI.java
Patch:
@@ -47,6 +47,7 @@
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableField;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableLookupProvider;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 
 /**
@@ -167,7 +168,7 @@ private void rollover( MouseEvent e, boolean rollover ) {
 				JMenu menu = (JMenu) e.getSource();
 				if( menu.isTopLevelMenu() && menu.isRolloverEnabled() ) {
 					menu.getModel().setRollover( rollover );
-					menu.repaint();
+					HiDPIUtils.repaint( menu );
 				}
 			}
 		};

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPanelUI.java
Patch:
@@ -31,6 +31,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -111,7 +112,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 				} else
 					installStyle( c );
 				c.revalidate();
-				c.repaint();
+				HiDPIUtils.repaint( c );
 				break;
 
 			case FlatClientProperties.FULL_WINDOW_CONTENT_BUTTONS_PLACEHOLDER:

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPasswordFieldUI.java
Patch:
@@ -43,6 +43,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.icons.FlatCapsLockIcon;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.UIScale;
 
 /**
@@ -163,7 +164,7 @@ public void keyReleased( KeyEvent e ) {
 			}
 			private void repaint( KeyEvent e ) {
 				if( e.getKeyCode() == KeyEvent.VK_CAPS_LOCK ) {
-					e.getComponent().repaint();
+					HiDPIUtils.repaint( e.getComponent() );
 					scrollCaretToVisible();
 				}
 			}
@@ -326,7 +327,7 @@ protected void updateRevealButton() {
 		if( visible != revealButton.isVisible() ) {
 			revealButton.setVisible( visible );
 			c.revalidate();
-			c.repaint();
+			HiDPIUtils.repaint( c );
 
 			if( !visible ) {
 				revealButton.setSelected( false );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatProgressBarUI.java
Patch:
@@ -133,14 +133,14 @@ protected void installListeners() {
 				case PROGRESS_BAR_LARGE_HEIGHT:
 				case PROGRESS_BAR_SQUARE:
 					progressBar.revalidate();
-					progressBar.repaint();
+					HiDPIUtils.repaint( progressBar );
 					break;
 
 				case STYLE:
 				case STYLE_CLASS:
 					installStyle();
 					progressBar.revalidate();
-					progressBar.repaint();
+					HiDPIUtils.repaint( progressBar );
 					break;
 			}
 		};
@@ -294,6 +294,6 @@ protected void setAnimationIndex( int newValue ) {
 		// Only solution is to repaint whole progress bar.
 		double systemScaleFactor = UIScale.getSystemScaleFactor( progressBar.getGraphicsConfiguration() );
 		if( (int) systemScaleFactor != systemScaleFactor )
-			progressBar.repaint();
+			HiDPIUtils.repaint( progressBar );
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -47,6 +47,7 @@
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
 import com.formdev.flatlaf.ui.FlatStylingSupport.UnknownStyleException;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -173,7 +174,7 @@ protected void propertyChange( AbstractButton b, PropertyChangeEvent e ) {
 				} else
 					installStyle( b );
 				b.revalidate();
-				b.repaint();
+				HiDPIUtils.repaint( b );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSeparatorUI.java
Patch:
@@ -32,6 +32,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 
 /**
@@ -134,7 +135,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 				} else
 					installStyle( s );
 				s.revalidate();
-				s.repaint();
+				HiDPIUtils.repaint( s );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatStylingSupport.java
Patch:
@@ -40,6 +40,7 @@
 import javax.swing.border.Border;
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.FlatLaf;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.StringUtils;
 import com.formdev.flatlaf.util.SystemInfo;
 
@@ -709,7 +710,7 @@ static PropertyChangeListener createPropertyChangeListener( JComponent c,
 				case FlatClientProperties.STYLE_CLASS:
 					installStyle.run();
 					c.revalidate();
-					c.repaint();
+					HiDPIUtils.repaint( c );
 					break;
 			}
 		};

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableHeaderUI.java
Patch:
@@ -45,6 +45,7 @@
 import javax.swing.table.TableColumnModel;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -234,8 +235,8 @@ public int getRolloverColumn() {
 
 	@Override
 	protected void rolloverColumnUpdated( int oldColumn, int newColumn ) {
-		header.repaint( header.getHeaderRect( oldColumn ) );
-		header.repaint( header.getHeaderRect( newColumn ) );
+		HiDPIUtils.repaint( header, header.getHeaderRect( oldColumn ) );
+		HiDPIUtils.repaint( header, header.getHeaderRect( newColumn ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToggleButtonUI.java
Patch:
@@ -26,6 +26,7 @@
 import javax.swing.plaf.ComponentUI;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.UnknownStyleException;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.UIScale;
 
 /**
@@ -159,14 +160,14 @@ protected void propertyChange( AbstractButton b, PropertyChangeEvent e ) {
 					b.revalidate();
 				}
 
-				b.repaint();
+				HiDPIUtils.repaint( b );
 				break;
 
 			case TAB_BUTTON_UNDERLINE_PLACEMENT:
 			case TAB_BUTTON_UNDERLINE_HEIGHT:
 			case TAB_BUTTON_UNDERLINE_COLOR:
 			case TAB_BUTTON_SELECTED_BACKGROUND:
-				b.repaint();
+				HiDPIUtils.repaint( b );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolBarSeparatorUI.java
Patch:
@@ -36,6 +36,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 
 /**
@@ -131,7 +132,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 				} else
 					installStyle( s );
 				s.revalidate();
-				s.repaint();
+				HiDPIUtils.repaint( s );
 				break;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolBarUI.java
Patch:
@@ -47,6 +47,7 @@
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;
 import com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.UIScale;
 
@@ -443,7 +444,7 @@ protected void repaintButtonGroup( AbstractButton b ) {
 
 		// repaint button group
 		if( gr != null )
-			toolBar.repaint( gr );
+			HiDPIUtils.repaint(toolBar, gr );
 	}
 
 	private ButtonGroup getButtonGroup( AbstractButton b ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -1342,13 +1342,13 @@ public RepaintFocusListener( Component repaintComponent, Predicate<Component> re
 		@Override
 		public void focusGained( FocusEvent e ) {
 			if( repaintCondition == null || repaintCondition.test( repaintComponent ) )
-				repaintComponent.repaint();
+				HiDPIUtils.repaint( repaintComponent );
 		}
 
 		@Override
 		public void focusLost( FocusEvent e ) {
 			if( repaintCondition == null || repaintCondition.test( repaintComponent ) )
-				repaintComponent.repaint();
+				HiDPIUtils.repaint( repaintComponent );
 		}
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableUI.java
Patch:
@@ -421,6 +421,7 @@ public void paint( Graphics g, JComponent c ) {
 
 			double systemScaleFactor = UIScale.getSystemScaleFactor( (Graphics2D) g );
 			double lineThickness = (1. / systemScaleFactor) * (int) systemScaleFactor;
+			double lineOffset = (1. - lineThickness) + 0.05; // adding 0.05 to fix line location in some cases
 
 			// Java 8 uses drawLine() to paint grid lines
 			// Java 9+ uses fillRect() to paint grid lines (except for dragged column)
@@ -463,11 +464,11 @@ public void fillRect( int x, int y, int width, int height ) {
 					// reduce line thickness to avoid unstable painted line thickness
 					if( lineThickness != 1 ) {
 						if( horizontalLines && height == 1 && wasInvokedFromPaintGrid() ) {
-							super.fill( new Rectangle2D.Double( x, y, width, lineThickness ) );
+							super.fill( new Rectangle2D.Double( x, y + lineOffset, width, lineThickness ) );
 							return;
 						}
 						if( verticalLines && width == 1 && y == 0 && wasInvokedFromPaintGrid() ) {
-							super.fill( new Rectangle2D.Double( x, y, lineThickness, height ) );
+							super.fill( new Rectangle2D.Double( x + lineOffset, y, lineThickness, height ) );
 							return;
 						}
 					}

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -800,6 +800,8 @@ void table() {
 			"selectionForeground", Color.class,
 			"selectionInactiveBackground", Color.class,
 			"selectionInactiveForeground", Color.class,
+			"selectionInsets", Insets.class,
+			"selectionArc", int.class,
 
 			// FlatTableCellBorder
 			"cellMargins", Insets.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -987,6 +987,8 @@ void table() {
 		ui.applyStyle( "selectionForeground: #fff" );
 		ui.applyStyle( "selectionInactiveBackground: #fff" );
 		ui.applyStyle( "selectionInactiveForeground: #fff" );
+		ui.applyStyle( "selectionInsets: 1,2,3,4" );
+		ui.applyStyle( "selectionArc: 8" );
 
 		// FlatTableCellBorder
 		ui.applyStyle( "cellMargins: 1,2,3,4" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatBorder.java
Patch:
@@ -135,7 +135,7 @@ public void paintBorder( Component c, Graphics g, int x, int y, int width, int h
 			Paint borderColor = (outlineColor != null) ? outlineColor : getBorderColor( c );
 			FlatUIUtils.paintOutlinedComponent( g2, x, y, width, height,
 				focusWidth, 1, focusInnerWidth, borderWidth, arc,
-				focusColor, borderColor, null );
+				focusColor, borderColor, null, c instanceof JScrollPane );
 		} finally {
 			g2.dispose();
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSliderUI.java
Patch:
@@ -422,7 +422,7 @@ public static void paintThumb( Graphics g, JSlider slider, Rectangle thumbRect,
 		Color thumbColor, Color thumbBorderColor, Color focusedColor, float thumbBorderWidth, int focusWidth )
 	{
 		double systemScaleFactor = UIScale.getSystemScaleFactor( (Graphics2D) g );
-		if( systemScaleFactor != 1 && systemScaleFactor != 2 ) {
+		if( systemScaleFactor != (int) systemScaleFactor ) {
 			// paint at scale 1x to avoid clipping on right and bottom edges at 125%, 150% or 175%
 			HiDPIUtils.paintAtScale1x( (Graphics2D) g, thumbRect.x, thumbRect.y, thumbRect.width, thumbRect.height,
 				(g2d, x2, y2, width2, height2, scaleFactor) -> {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatHTML.java
Patch:
@@ -75,7 +75,7 @@ public static void updateRendererCSSFontBaseSize( JComponent c ) {
 
 	/**
 	 * Updates foreground in style sheet of the HTML view.
-	 * Adds "body { color: #<foreground-hex>; }"
+	 * Adds "body { color: #&lt;foreground-hex&gt;; }"
 	 */
 	public static void updateRendererCSSForeground( View view, Color foreground ) {
 		Document doc = view.getDocument();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -646,7 +646,7 @@ private static Object parseBorder( String value, Function<String, String> resolv
 				: 1f;
 			int arc = (parts.size() >= 7) && !parts.get( 6 ).isEmpty()
 				? parseInteger( parts.get( 6 ) )
-				: 0;
+				: -1;
 
 			return (LazyValue) t -> {
 				return (lineColor != null || arc > 0)

File: flatlaf-core/src/test/java/com/formdev/flatlaf/TestUIDefaultsLoader.java
Patch:
@@ -86,7 +86,7 @@ void parseBorders() {
 		assertBorderEquals( new FlatEmptyBorder( insets ), "1,2,3,4" );
 		assertBorderEquals( new FlatEmptyBorder( insets ), "1,2,3,4,,," );
 		assertBorderEquals( new FlatLineBorder( insets, Color.red ), "1,2,3,4,#f00" );
-		assertBorderEquals( new FlatLineBorder( insets, Color.red, 2.5f, 0 ), "1,2,3,4,#f00,2.5" );
+		assertBorderEquals( new FlatLineBorder( insets, Color.red, 2.5f, -1 ), "1,2,3,4,#f00,2.5" );
 		assertBorderEquals( new FlatLineBorder( insets, Color.red, 2.5f, 6 ), "1,2,3,4,#f00,2.5,6" );
 		assertBorderEquals( new FlatLineBorder( insets, Color.red, 1, 6 ), "1,2,3,4,#f00,,6" );
 		assertBorderEquals( new FlatLineBorder( insets, null, 1, 6 ), "1,2,3,4,,,6" );

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/MoreComponentsPanel.java
Patch:
@@ -553,7 +553,7 @@ private void initComponents() {
 
 		//---- label10 ----
 		label10.setText("rounded border");
-		label10.putClientProperty("FlatLaf.style", "border: 2,10,2,10,#135b76,1,999");
+		label10.putClientProperty("FlatLaf.style", "arc: 999; border: 2,10,2,10,#135b76");
 		label10.setBackground(new Color(0xb8e4f3));
 		label10.setForeground(new Color(0x135b76));
 		add(label10, "cell 1 13 4 1");

File: flatlaf-jide-oss/src/main/java/com/formdev/flatlaf/jideoss/ui/FlatJideButtonUI.java
Patch:
@@ -51,7 +51,7 @@ protected BasicButtonListener createButtonListener( AbstractButton b ) {
 	//---- class FlatJideButtonListener ---------------------------------------
 
 	/** @since 3.5 */
-	protected class FlatJideButtonListener
+	protected static class FlatJideButtonListener
 		extends BasicJideButtonListener
 	{
 		protected FlatJideButtonListener( AbstractButton b ) {

File: flatlaf-swingx/src/main/java/com/formdev/flatlaf/swingx/ui/FlatHyperlinkUI.java
Patch:
@@ -91,7 +91,7 @@ private void paintUnderline( Graphics g, Rectangle rect ) {
 	//---- class FlatHyperlinkListener ----------------------------------------
 
 	/** @since 3.5 */
-	protected class FlatHyperlinkListener
+	protected static class FlatHyperlinkListener
 		extends BasicHyperlinkListener
 	{
 		protected FlatHyperlinkListener( AbstractButton b ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatBorder.java
Patch:
@@ -277,7 +277,7 @@ protected float getBorderWidth( Component c ) {
 	}
 
 	/**
-	 * Returns the (unscaled) arc diameter of the border.
+	 * Returns the (unscaled) arc diameter of the border corners.
 	 */
 	protected int getArc( Component c ) {
 		return 0;

File: flatlaf-core/src/test/java/com/formdev/flatlaf/TestUIDefaultsLoader.java
Patch:
@@ -84,10 +84,12 @@ void parseValueWithJavaType() {
 	void parseBorders() {
 		Insets insets = new Insets( 1,2,3,4 );
 		assertBorderEquals( new FlatEmptyBorder( insets ), "1,2,3,4" );
+		assertBorderEquals( new FlatEmptyBorder( insets ), "1,2,3,4,,," );
 		assertBorderEquals( new FlatLineBorder( insets, Color.red ), "1,2,3,4,#f00" );
 		assertBorderEquals( new FlatLineBorder( insets, Color.red, 2.5f, 0 ), "1,2,3,4,#f00,2.5" );
 		assertBorderEquals( new FlatLineBorder( insets, Color.red, 2.5f, 6 ), "1,2,3,4,#f00,2.5,6" );
 		assertBorderEquals( new FlatLineBorder( insets, Color.red, 1, 6 ), "1,2,3,4,#f00,,6" );
+		assertBorderEquals( new FlatLineBorder( insets, null, 1, 6 ), "1,2,3,4,,,6" );
 	}
 
 	private void assertBorderEquals( Border expected, String actualStyle ) {

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -253,7 +253,8 @@ void label() {
 		FlatLabelUI ui = (FlatLabelUI) c.getUI();
 
 		Map<String, Class<?>> expected = expectedMap(
-			"disabledForeground", Color.class
+			"disabledForeground", Color.class,
+			"arc", int.class
 		);
 
 		assertMapEquals( expected, ui.getStyleableInfos( c ) );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableValue.java
Patch:
@@ -355,6 +355,7 @@ void label() {
 		FlatLabelUI ui = (FlatLabelUI) c.getUI();
 
 		testColor( c, ui, "disabledForeground", 0x123456 );
+		testInteger( c, ui, "arc", 123 );
 	}
 
 	@Test

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -412,6 +412,7 @@ void label() {
 		FlatLabelUI ui = (FlatLabelUI) c.getUI();
 
 		ui.applyStyle( c, "disabledForeground: #fff" );
+		ui.applyStyle( c, "arc: 8" );
 
 		// JComponent properties
 		ui.applyStyle( c, "background: #fff" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatDefaultsAddon.java
Patch:
@@ -48,7 +48,7 @@ public abstract class FlatDefaultsAddon
 	public InputStream getDefaults( Class<?> lafClass ) {
 		Class<?> addonClass = this.getClass();
 		String propertiesName = '/' + addonClass.getPackage().getName().replace( '.', '/' )
-			+ '/' + lafClass.getSimpleName() + ".properties";
+			+ '/' + UIDefaultsLoader.simpleClassName( lafClass ) + ".properties";
 		return addonClass.getResourceAsStream( propertiesName );
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatClientProperties.java
Patch:
@@ -1276,8 +1276,8 @@ public interface FlatClientProperties
 	 * <strong>Component</strong> {@link javax.swing.JRootPane}<br>
 	 * <strong>Value type</strong> {@link java.lang.String} or {@link java.lang.Boolean}<br>
 	 * <strong>Allowed Values</strong>
-	 *     {@link #MACOS_WINDOW_TITLE_BAR_STYLE_MEDIUM},
-	 *     {@link #MACOS_WINDOW_TITLE_BAR_STYLE_LARGE} (requires macOS 11+) or
+	 *     {@link #MACOS_WINDOW_BUTTON_STYLE_MEDIUM},
+	 *     {@link #MACOS_WINDOW_BUTTON_STYLE_LARGE} (requires macOS 11+) or
 	 *     {@code true} (equal to 'large')
 	 *
 	 * @since 3.3

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatNativeMacLibrary.java
Patch:
@@ -54,7 +54,7 @@ public static boolean isLoaded() {
 
 	public native static boolean setWindowRoundedBorder( Window window, float radius, float borderWidth, int borderColor );
 
-	public native static void setWindowToolbar( Window window, boolean hasToolbar );
+	public native static boolean setWindowToolbar( Window window, boolean hasToolbar );
 	public native static int getWindowButtonAreaWidth( Window window );
 	public native static int getWindowTitleBarHeight( Window window );
 	public native static boolean isWindowFullScreen( Window window );

File: buildSrc/src/main/java/ReorderJarEntries.java
Patch:
@@ -45,7 +45,7 @@ public static void reorderJarEntries( File jarFile )
 			// 1st pass: copy .properties files
 			copyFiles( zipOutStream, jarFile, name -> name.endsWith( ".properties" ) );
 
-			// 2st pass: copy other files
+			// 2nd pass: copy other files
 			copyFiles( zipOutStream, jarFile, name -> !name.endsWith( ".properties" ) );
 		}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatInputMaps.java
Patch:
@@ -71,7 +71,7 @@ private static void initBasicInputMaps( UIDefaults defaults ) {
 			);
 		}
 
-		// join ltr and rtl bindings to fix up/down/etc keys in right-to-left component orientation
+		// join ltr and rtl bindings to fix up/down/etc. keys in right-to-left component orientation
 		Object[] bindings = (Object[]) defaults.get( "PopupMenu.selectedWindowInputMapBindings" );
 		Object[] rtlBindings = (Object[]) defaults.get( "PopupMenu.selectedWindowInputMapBindings.RightToLeft" );
 		if( bindings != null && rtlBindings != null ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatSystemProperties.java
Patch:
@@ -183,7 +183,7 @@ public interface FlatSystemProperties
 	 * in system properties {@code sun.boot.library.path} and {@code java.library.path}.
 	 * (supported since FlatLaf 2.6)
 	 * <p>
-	 * If the native library can not loaded from the given path (or via {@link System#loadLibrary(String)}),
+	 * If the native library can not be loaded from the given path (or via {@link System#loadLibrary(String)}),
 	 * then the embedded native library is extracted to the temporary directory and loaded from there.
 	 *
 	 * @since 2

File: flatlaf-core/src/main/java/com/formdev/flatlaf/LinuxFontPolicy.java
Patch:
@@ -203,7 +203,7 @@ private static String mapFcName( String name ) {
 	 * Gets the default font for KDE from KDE configuration files.
 	 *
 	 * The Swing fonts are not updated when the user changes system font size
-	 * (System Settings > Fonts > Force Font DPI). A application restart is necessary.
+	 * (System Settings > Fonts > Force Font DPI). An application restart is necessary.
 	 * This is the same behavior as in native KDE applications.
 	 *
 	 * The "display scale factor" (kdeglobals: [KScreen] > ScaleFactor) is not used

File: flatlaf-core/src/main/java/com/formdev/flatlaf/SubMenuUsabilityHelper.java
Patch:
@@ -172,7 +172,7 @@ private void menuSelectionChanged() {
 		targetTopY = popupLocation.y;
 		targetBottomY = popupLocation.y + popupSize.height;
 
-		// install own event queue to supress mouse events when mouse is moved within safe triangle
+		// install own event queue to suppress mouse events when mouse is moved within safe triangle
 		if( subMenuEventQueue == null )
 			subMenuEventQueue = new SubMenuEventQueue();
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatTabbedPaneCloseIcon.java
Patch:
@@ -90,7 +90,7 @@ protected void paintIcon( Component c, Graphics2D g ) {
 				closeSize.width, closeSize.height, closeArc, closeArc );
 		}
 
-		// set cross color
+		// set color of cross
 		Color fg = FlatButtonUI.buttonStateColor( c, closeForeground, null, null, closeHoverForeground, closePressedForeground );
 		g.setColor( FlatUIUtils.deriveColor( fg, c.getForeground() ) );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatTreeOpenIcon.java
Patch:
@@ -57,11 +57,11 @@ protected void paintIcon( Component c, Graphics2D g ) {
 			double arc = 1.5;
 			double arc2 = 0.5;
 			path = FlatUIUtils.createPath( false,
-				// bottom-left of opend part
+				// bottom-left of opened part
 				2,13.5,
-				// top-left of opend part
+				// top-left of opened part
 				FlatUIUtils.ROUNDED, 4.5,7.5, arc,
-				// top-right of opend part
+				// top-right of opened part
 				FlatUIUtils.ROUNDED, 15.5,7.5, arc2,
 
 				// bottom-right

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatWindowAbstractIcon.java
Patch:
@@ -71,7 +71,7 @@ protected void paintIcon( Component c, Graphics2D g ) {
 	protected void paintBackground( Component c, Graphics2D g ) {
 		Color background = FlatButtonUI.buttonStateColor( c, null, null, null, hoverBackground, pressedBackground );
 		if( background != null ) {
-			// disable antialiasing for background rectangle painting to avoid blury edges when scaled (e.g. at 125% or 175%)
+			// disable antialiasing for background rectangle painting to avoid blurry edges when scaled (e.g. at 125% or 175%)
 			Object oldHint = g.getRenderingHint( RenderingHints.KEY_ANTIALIASING );
 			g.setRenderingHint( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListUI.java
Patch:
@@ -411,7 +411,7 @@ protected void paintCellSelection( Graphics g, int row, int x, int y, int width,
 				int leftIndex = locationToIndex( list, new Point( r.x - 1, r.y ) );
 				int rightIndex = locationToIndex( list, new Point( r.x + r.width, r.y ) );
 
-				// special handling for the case that last column contains less cells than the other columns
+				// special handling for the case that last column contains fewer cells than the other columns
 				boolean ltr = list.getComponentOrientation().isLeftToRight();
 				if( !ltr && leftIndex >= 0 && leftIndex != row && leftIndex == locationToIndex( list, new Point( r.x - 1, r.y - 1 ) ) )
 					leftIndex = -1;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatNativeLibrary.java
Patch:
@@ -78,7 +78,7 @@ else if( SystemInfo.isX86_64 )
 			//
 			// To avoid this, flatlaf.dll is not linked to jawt.dll,
 			// which avoids loading jawt.dll when flatlaf.dll is loaded.
-			// Instead flatlaf.dll dynamically loads jawt.dll when first used,
+			// Instead, flatlaf.dll dynamically loads jawt.dll when first used,
 			// which is guaranteed after AWT initialization.
 
 		} else if( SystemInfo.isMacOS_10_14_Mojave_orLater && (SystemInfo.isAARCH64 || SystemInfo.isX86_64) ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -263,7 +263,7 @@ public Dimension getPreferredSize( JComponent c ) {
 
 	@Override
 	public void paint( Graphics g, JComponent c ) {
-		// fill background even if not opaque if
+		// fill background even if not opaque and if:
 		// - contentAreaFilled is true and
 		// - if background color is different to default background color
 		// (this paints selection if using the component as cell renderer)

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatScrollBarUI.java
Patch:
@@ -245,7 +245,7 @@ protected PropertyChangeListener createPropertyChangeListener() {
 								// because scroll bars do not receive mouse exited event.
 								// The scroll pane, including its scroll bars, is not part
 								// of the component hierarchy and does not receive mouse events
-								// directly. Instead LWComponentPeer receives mouse events
+								// directly. Instead, LWComponentPeer receives mouse events
 								// and delegates them to peers, but entered/exited events
 								// are sent only for the whole scroll pane.
 								// Exited event is only sent when mouse leaves scroll pane.

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTabbedPaneUI.java
Patch:
@@ -484,7 +484,7 @@ protected void installHiddenTabsNavigation() {
 
 		// At this point, BasicTabbedPaneUI already has installed
 		// TabbedPaneScrollLayout (in super.createLayoutManager()) and
-		// ScrollableTabSupport, ScrollableTabViewport, ScrollableTabPanel, etc
+		// ScrollableTabSupport, ScrollableTabViewport, ScrollableTabPanel, etc.
 		// (in super.installComponents()).
 
 		// install own layout manager that delegates to original layout manager

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -1264,7 +1264,7 @@ public void windowStateChanged( WindowEvent e ) {
 		public void mouseClicked( MouseEvent e ) {
 			// on Linux, when using native library, the mouse clicked event
 			// is usually not sent and maximize/restore is done in mouse pressed event
-			// this check is here for the case that a mouse clicked event comes thru for some reason
+			// this check is here for the case that a mouse clicked event comes through for some reason
 			if( linuxNativeMove && SystemInfo.isLinux && FlatNativeLinuxLibrary.isWMUtilsSupported( window ) ) {
 				// see comment in mousePressed()
 				if( lastSingleClickWhen != 0 && (e.getWhen() - lastSingleClickWhen) <= getMultiClickInterval() ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -729,7 +729,7 @@ public static void paintOutline( Graphics2D g, float x, float y, float w, float
 	}
 
 	/**
-	 * Creates a (rounded) rectangle used to paint components (border, background, etc).
+	 * Creates a (rounded) rectangle used to paint components (border, background, etc.).
 	 * The given arc diameter is limited to min(width,height).
 	 */
 	public static Shape createComponentRectangle( float x, float y, float w, float h, float arc ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/FontUtils.java
Patch:
@@ -80,7 +80,7 @@ public static void registerFontFamilyLoader( String family, Runnable loader ) {
 
 	/**
 	 * Loads a font family previously registered via {@link #registerFontFamilyLoader(String, Runnable)}.
-	 * If the family is already loaded or no londer is registered for that family, nothing happens.
+	 * If the family is already loaded or no loader is registered for that family, nothing happens.
 	 */
 	public static void loadFontFamily( String family ) {
 		if( !hasLoaders() )
@@ -109,7 +109,7 @@ public static boolean installFont( URL url ) {
 	}
 
 	/**
-	 * Returns all font familiy names available in the graphics environment.
+	 * Returns all font family names available in the graphics environment.
 	 * This invokes {@link GraphicsEnvironment#getAvailableFontFamilyNames()} and
 	 * appends families registered for lazy loading via {@link #registerFontFamilyLoader(String, Runnable)}
 	 * to the result.

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/UIScale.java
Patch:
@@ -204,7 +204,7 @@ public static float computeFontScaleFactor( Font font ) {
 		if( SystemInfo.isWindows ) {
 			// Special handling for Windows to be compatible with OS scaling,
 			// which distinguish between "screen scaling" and "text scaling".
-			//  - Windows "screen scaling" scales everything (text, icon, gaps, etc)
+			//  - Windows "screen scaling" scales everything (text, icon, gaps, etc.)
 			//    and may have different scaling factors for each screen.
 			//  - Windows "text scaling" increases only the font size, but on all screens.
 			//

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/TabsPanel.java
Patch:
@@ -204,7 +204,7 @@ private void addDefaultTabsNoContent( JTabbedPane tabbedPane, int count ) {
 	private void closeButtonStyleChanged() {
 		// WARNING:
 		//   Do not use this trick to style individual tabbed panes in own code.
-		//   Instead use one styling for all tabbed panes in your application.
+		//   Instead, use one styling for all tabbed panes in your application.
 		if( circleCloseButton.isSelected() ) {
 			UIManager.put( "TabbedPane.closeArc", 999 );
 			UIManager.put( "TabbedPane.closeCrossFilledSize", 5.5f );

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatAnimatedLafChange.java
Patch:
@@ -133,8 +133,8 @@ public void removeNotify() {
 	}
 
 	/**
-	 * Starts an animation that shows the snapshot (created by {@link #showSnapshot()}
-	 * with an decreasing alpha. At the end, the snapshot is removed and the new UI is shown.
+	 * Starts an animation that shows the snapshot (created by {@link #showSnapshot()})
+	 * with a decreasing alpha. At the end, the snapshot is removed and the new UI is shown.
 	 * Invoke after updating UI.
 	 */
 	public static void hideSnapshotWithAnimation() {

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatDesktop.java
Patch:
@@ -119,7 +119,7 @@ private static void setHandler( String setHandlerMethodName, String handlerClass
 				(proxy, method, args) -> {
 					// Use invokeLater to release the listener firing for the case
 					// that the action listener shows a modal dialog.
-					// This (hopefully) prevents application hunging.
+					// This (hopefully) prevents application hanging.
 					EventQueue.invokeLater( () -> {
 						handler.run();
 					} );

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatButton.java
Patch:
@@ -33,14 +33,14 @@ public class FlatButton
 	public enum ButtonType { none, square, roundRect, tab, help, toolBarButton, borderless }
 
 	/**
-	 * Returns type of a button.
+	 * Returns type of button.
 	 */
 	public ButtonType getButtonType() {
 		return getClientPropertyEnumString( BUTTON_TYPE, ButtonType.class, null, ButtonType.none );
 	}
 
 	/**
-	 * Specifies type of a button.
+	 * Specifies type of button.
 	 */
 	public void setButtonType( ButtonType buttonType ) {
 		if( buttonType == ButtonType.none )

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatFormattedTextField.java
Patch:
@@ -106,7 +106,7 @@ public JComponent getLeadingComponent() {
 	 * The component should be not opaque because the text field border is painted
 	 * slightly inside the usually visible border in some cases.
 	 * E.g. when focused (in some themes) or when an outline color is specified
-	 * (see {@link #setOutline(Object)}.
+	 * (see {@link #setOutline(Object)}).
 	 *
 	 * @since 2
 	 */
@@ -135,7 +135,7 @@ public JComponent getTrailingComponent() {
 	 * The component should be not opaque because the text field border is painted
 	 * slightly inside the usually visible border in some cases.
 	 * E.g. when focused (in some themes) or when an outline color is specified
-	 * (see {@link #setOutline(Object)}.
+	 * (see {@link #setOutline(Object)}).
 	 *
 	 * @since 2
 	 */

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatPasswordField.java
Patch:
@@ -106,7 +106,7 @@ public JComponent getLeadingComponent() {
 	 * The component should be not opaque because the text field border is painted
 	 * slightly inside the usually visible border in some cases.
 	 * E.g. when focused (in some themes) or when an outline color is specified
-	 * (see {@link #setOutline(Object)}.
+	 * (see {@link #setOutline(Object)}).
 	 *
 	 * @since 2
 	 */
@@ -135,7 +135,7 @@ public JComponent getTrailingComponent() {
 	 * The component should be not opaque because the text field border is painted
 	 * slightly inside the usually visible border in some cases.
 	 * E.g. when focused (in some themes) or when an outline color is specified
-	 * (see {@link #setOutline(Object)}.
+	 * (see {@link #setOutline(Object)}).
 	 *
 	 * @since 2
 	 */

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatTextField.java
Patch:
@@ -105,7 +105,7 @@ public JComponent getLeadingComponent() {
 	 * The component should be not opaque because the text field border is painted
 	 * slightly inside the usually visible border in some cases.
 	 * E.g. when focused (in some themes) or when an outline color is specified
-	 * (see {@link #setOutline(Object)}.
+	 * (see {@link #setOutline(Object)}).
 	 *
 	 * @since 2
 	 */
@@ -134,7 +134,7 @@ public JComponent getTrailingComponent() {
 	 * The component should be not opaque because the text field border is painted
 	 * slightly inside the usually visible border in some cases.
 	 * E.g. when focused (in some themes) or when an outline color is specified
-	 * (see {@link #setOutline(Object)}.
+	 * (see {@link #setOutline(Object)}).
 	 *
 	 * @since 2
 	 */

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatToggleButton.java
Patch:
@@ -31,14 +31,14 @@ public class FlatToggleButton
 	implements FlatComponentExtension, FlatStyleableComponent
 {
 	/**
-	 * Returns type of a button.
+	 * Returns type of button.
 	 */
 	public ButtonType getButtonType() {
 		return getClientPropertyEnumString( BUTTON_TYPE, ButtonType.class, null, ButtonType.none );
 	}
 
 	/**
-	 * Specifies type of a button.
+	 * Specifies type of button.
 	 */
 	public void setButtonType( ButtonType buttonType ) {
 		if( buttonType == ButtonType.none )

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatTriStateCheckBox.java
Patch:
@@ -30,8 +30,8 @@
  * <p>
  * The initial state is {@link State#INDETERMINATE}.
  * <p>
- * By default the third state is allowed and clicking on the checkbox cycles thru all
- * three states. If you want that the user can cycle only thru two states, disallow
+ * By default, the third state is allowed and clicking on the checkbox cycles through all
+ * three states. If you want that the user can cycle only through two states, disallow
  * intermediate state using {@link #setAllowIndeterminate(boolean)}. Then you can still
  * set the indeterminate state via API if necessary, but the user can not.
  * <p>

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/resources/EmptyPackage.java
Patch:
@@ -18,8 +18,8 @@
 
 /**
  * The only purpose of this file is to add a .class file to this package to make it non-empty.
- * Otherwise the compiler outputs a warning because this package is opend in module-info.java.
- * Also when using --patch-module (e.g. from an IDE), an error would occur for empty packages.
+ * Otherwise, the compiler outputs a warning because this package is opened in module-info.java.
+ * Also, when using --patch-module (e.g. from an IDE), an error would occur for empty packages.
  *
  * @author Karl Tauber
  */

File: flatlaf-jide-oss/src/main/java/com/formdev/flatlaf/jideoss/ui/FlatJideTabbedPaneUI.java
Patch:
@@ -477,7 +477,7 @@ protected void paintTabSelection( Graphics g, int tabPlacement,  int x, int y, i
 	}
 
 	/**
-	 * Actually does the nearly the same as super.paintContentBorder() but
+	 * Actually does nearly the same as super.paintContentBorder() but
 	 *   - not invoking paintContentBorder*Edge() methods
 	 *   - repaint selection
 	 */

File: flatlaf-natives/flatlaf-natives-jna/src/main/java/com/formdev/flatlaf/natives/jna/windows/FlatWindowsNativeWindowBorder.java
Patch:
@@ -122,7 +122,7 @@ public boolean hasCustomDecoration( Window window ) {
 	}
 
 	/**
-	 * Tell the window whether the application wants use custom decorations.
+	 * Tell the window whether the application wants to use custom decorations.
 	 * If {@code true}, the Windows 10 title bar is hidden (including minimize,
 	 * maximize and close buttons), but not the resize borders (including drop shadow).
 	 */

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatDisabledIconsTest.java
Patch:
@@ -837,7 +837,7 @@ public int filterRGB(int x, int y, int rgb) {
 
 			// Calculate the average.
 			// Sun's formula: Math.min(1.0f, (1f - avg) / (100.0f / 35.0f) + avg);
-			// The following formula uses less operations and hence is faster.
+			// The following formula uses fewer operations and hence is faster.
 			avg = Math.min(1.0f, 0.35f + 0.65f * avg);
 			// Convert back into RGB.
 			return (int) (alpha * 255f) << 24 |

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatFindReplaceBar.java
Patch:
@@ -217,7 +217,7 @@ private void replaceAll() {
 		context.setReplaceWith( replaceField.getText() );
 
 		// make sure that search wrap is disabled because otherwise it is easy
-		// to have endeless loop when replacing e.g. "a" with "aa"
+		// to have endless loop when replacing e.g. "a" with "aa"
 		boolean oldSearchWrap = context.getSearchWrap();
 		context.setSearchWrap( false );
 

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeFileEditor.java
Patch:
@@ -401,7 +401,7 @@ private File[] getPropertiesFiles( File dir ) {
 		if( !themesDir.isDirectory() )
 			return propertiesFiles;
 
-		// get files from "themes" sub-directory
+		// get files from "themes" subdirectory
 		File[] themesFiles = getPropertiesFiles( themesDir );
 		File[] allFiles = new File[propertiesFiles.length + themesFiles.length];
 		System.arraycopy( propertiesFiles, 0, allFiles, 0, propertiesFiles.length );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableValue.java
Patch:
@@ -699,6 +699,9 @@ void splitPane() {
 		FlatSplitPaneUI ui = (FlatSplitPaneUI) c.getUI();
 
 		testString( c, ui, "arrowType", "chevron" );
+		testColor( c, ui, "draggingColor", 0x123456 );
+		testColor( c, ui, "hoverColor", 0x123456 );
+		testColor( c, ui, "pressedColor", 0x123456 );
 		testColor( c, ui, "oneTouchArrowColor", 0x123456 );
 		testColor( c, ui, "oneTouchHoverArrowColor", 0x123456 );
 		testColor( c, ui, "oneTouchPressedArrowColor", 0x123456 );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -870,6 +870,9 @@ void splitPane() {
 		FlatSplitPaneUI ui = (FlatSplitPaneUI) c.getUI();
 
 		ui.applyStyle( "arrowType: chevron" );
+		ui.applyStyle( "draggingColor: #fff" );
+		ui.applyStyle( "hoverColor: #fff" );
+		ui.applyStyle( "pressedColor: #fff" );
 		ui.applyStyle( "oneTouchArrowColor: #fff" );
 		ui.applyStyle( "oneTouchHoverArrowColor: #fff" );
 		ui.applyStyle( "oneTouchPressedArrowColor: #fff" );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -692,7 +692,9 @@ void splitPane() {
 			"oneTouchArrowColor", Color.class,
 			"oneTouchHoverArrowColor", Color.class,
 			"oneTouchPressedArrowColor", Color.class,
-
+			
+			"hoverColor", Color.class,
+			"showHover", boolean.class,
 			"style", String.class,
 			"gripColor", Color.class,
 			"gripDotCount", int.class,

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -499,7 +499,7 @@ public void layoutContainer( Container parent ) {
 		@Override
 		public void invalidateLayout( Container parent ) {
 			if( titlePane != null )
-				titlePane.menuBarChanged();
+				titlePane.menuBarInvalidate();
 		}
 
 		@Override

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -752,6 +752,7 @@ void tabbedPane() {
 			"tabAreaAlignment", String.class,
 			"tabAlignment", String.class,
 			"tabWidthMode", String.class,
+			"tabRotation", String.class,
 
 			"arrowType", String.class,
 			"buttonInsets", Insets.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableValue.java
Patch:
@@ -758,6 +758,7 @@ void tabbedPane() {
 		testString( c, ui, "tabAreaAlignment", "leading" );
 		testString( c, ui, "tabAlignment", "center" );
 		testString( c, ui, "tabWidthMode", "preferred" );
+		testString( c, ui, "tabRotation", "none" );
 
 		testString( c, ui, "arrowType", "chevron" );
 		testInsets( c, ui, "buttonInsets", 1,2,3,4 );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -937,6 +937,7 @@ void tabbedPane() {
 		ui.applyStyle( "tabAreaAlignment: leading" );
 		ui.applyStyle( "tabAlignment: center" );
 		ui.applyStyle( "tabWidthMode: preferred" );
+		ui.applyStyle( "tabRotation: none" );
 
 		ui.applyStyle( "arrowType: chevron" );
 		ui.applyStyle( "buttonInsets: 1,2,3,4" );

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/ScrollablePanel.java
Patch:
@@ -34,7 +34,7 @@ public class ScrollablePanel
 {
 	@Override
 	public Dimension getPreferredScrollableViewportSize() {
-		return UIScale.scale( new Dimension( 400, 400 ) );
+		return new Dimension( getPreferredSize().width, UIScale.scale( 400 ) );
 	}
 
 	@Override
@@ -49,7 +49,7 @@ public int getScrollableBlockIncrement( Rectangle visibleRect, int orientation,
 
 	@Override
 	public boolean getScrollableTracksViewportWidth() {
-		return false;
+		return true;
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -397,6 +397,9 @@ private static void resetWindows11Border( Window popupWindow ) {
 	}
 
 	private static boolean overlapsHeavyWeightComponent( Component owner, Component contents, int x, int y ) {
+		if( owner == null )
+			return false;
+
 		Window window = SwingUtilities.getWindowAncestor( owner );
 		if( window == null )
 			return false;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -438,7 +438,7 @@ private static boolean overlapsHeavyWeightComponent( Component parent, Rectangle
 	 */
 	private static void fixLinuxWaylandJava21focusIssue( Component owner ) {
 		// only necessary on Linux when running in Java 21+
-		if( !SystemInfo.isLinux || SystemInfo.javaVersion < SystemInfo.toVersion( 21, 0, 0, 0 ) )
+		if( owner == null || !SystemInfo.isLinux || SystemInfo.javaVersion < SystemInfo.toVersion( 21, 0, 0, 0 ) )
 			return;
 
 		// get window

File: flatlaf-core/src/main/java9/com/formdev/flatlaf/util/MultiResolutionImageSupport.java
Patch:
@@ -23,6 +23,7 @@
 import java.awt.image.MultiResolutionImage;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.IdentityHashMap;
 import java.util.List;
 import java.util.function.Function;
@@ -134,7 +135,7 @@ private static class ProducerMultiResolutionImage
 	{
 		private final Dimension[] dimensions;
 		private final Function<Dimension, Image> producer;
-		private final IdentityHashMap<Dimension, Image> cache = new IdentityHashMap<>();
+		private final HashMap<Dimension, Image> cache = new HashMap<>();
 
 		ProducerMultiResolutionImage( Dimension[] dimensions, Function<Dimension, Image> producer ) {
 			this.dimensions = dimensions;

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeFileEditor.java
Patch:
@@ -1052,13 +1052,15 @@ public void windowDeactivated(WindowEvent e) {
 				newPropertiesFileMenuItem.setText("New Properties File...");
 				newPropertiesFileMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 				newPropertiesFileMenuItem.setMnemonic('N');
+				newPropertiesFileMenuItem.setIcon(new FlatSVGIcon("com/formdev/flatlaf/themeeditor/icons/add.svg"));
 				newPropertiesFileMenuItem.addActionListener(e -> newPropertiesFile());
 				fileMenu.add(newPropertiesFileMenuItem);
 
 				//---- saveAllMenuItem ----
 				saveAllMenuItem.setText("Save All");
 				saveAllMenuItem.setMnemonic('S');
 				saveAllMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
+				saveAllMenuItem.setIcon(new FlatSVGIcon("com/formdev/flatlaf/themeeditor/icons/menu-saveall.svg"));
 				saveAllMenuItem.addActionListener(e -> saveAll());
 				fileMenu.add(saveAllMenuItem);
 				fileMenu.addSeparator();
@@ -1230,6 +1232,7 @@ public void windowDeactivated(WindowEvent e) {
 
 			//---- openDirectoryButton ----
 			openDirectoryButton.setFocusable(false);
+			openDirectoryButton.setIcon(new FlatSVGIcon("com/formdev/flatlaf/themeeditor/icons/menu-open.svg"));
 			openDirectoryButton.addActionListener(e -> openDirectory());
 			controlPanel.add(openDirectoryButton, "cell 2 0");
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -272,7 +272,7 @@ private void applyProperties( UIDefaults defaults ) {
 
 		// override UI defaults with theme specific wildcard replacements
 		if( !wildcards.isEmpty() ) {
-			for( Object key : defaults.keySet() ) {
+			for( Object key : defaults.keySet().toArray() ) {
 				int dot;
 				if( !(key instanceof String) ||
 					(dot = ((String)key).lastIndexOf( '.' )) < 0 )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -673,6 +673,7 @@ private void copyIfNotSet( UIDefaults defaults, String destKey, String srcKey, S
 
 		// ComboBox
 		uiKeyMapping.put( "ComboBox.background",                        "" ); // ignore
+		uiKeyMapping.put( "ComboBox.buttonBackground",                  "" ); // ignore
 		uiKeyMapping.put( "ComboBox.nonEditableBackground",             "ComboBox.background" );
 		uiKeyMapping.put( "ComboBox.ArrowButton.background",            "ComboBox.buttonEditableBackground" );
 		uiKeyMapping.put( "ComboBox.ArrowButton.disabledIconColor",     "ComboBox.buttonDisabledArrowColor" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatFormattedTextFieldUI.java
Patch:
@@ -40,7 +40,6 @@
  * <!-- FlatTextFieldUI -->
  *
  * @uiDefault Component.minimumWidth					int
- * @uiDefault Component.isIntelliJTheme					boolean
  * @uiDefault FormattedTextField.placeholderForeground	Color
  * @uiDefault FormattedTextField.focusedBackground		Color	optional
  * @uiDefault FormattedTextField.iconTextGap			int		optional, default is 4

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPasswordFieldUI.java
Patch:
@@ -66,7 +66,6 @@
  * <!-- FlatTextFieldUI -->
  *
  * @uiDefault Component.minimumWidth				int
- * @uiDefault Component.isIntelliJTheme				boolean
  * @uiDefault PasswordField.placeholderForeground	Color
  * @uiDefault PasswordField.focusedBackground		Color	optional
  * @uiDefault PasswordField.iconTextGap				int		optional, default is 4

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatInputMaps.java
Patch:
@@ -50,7 +50,8 @@ private static void initBasicInputMaps( UIDefaults defaults ) {
 		}
 
 		modifyInputMap( defaults, "ComboBox.ancestorInputMap",
-			"SPACE", "spacePopup",
+// Space key still shows popup, but from FlatComboBoxUI.FlatKeySelectionManager
+//			"SPACE", "spacePopup",
 
 			"UP", mac( "selectPrevious2", "selectPrevious" ),
 			"DOWN", mac( "selectNext2", "selectNext" ),

File: flatlaf-core/src/test/java/com/formdev/flatlaf/TestUIDefaultsLoader.java
Patch:
@@ -180,6 +180,7 @@ private void assertInstanceEquals( TestInstance expected, String params ) {
 
 	//---- class TestInstance -------------------------------------------------
 
+	@SuppressWarnings( "EqualsHashCode" ) // Error Prone
 	public static class TestInstance
 	{
 		private String s;

File: flatlaf-testing/flatlaf-testing-modular-app/src/main/module-info/module-info.java
Patch:
@@ -22,7 +22,7 @@
 	requires com.formdev.flatlaf;
 	requires com.formdev.flatlaf.extras;
 	requires com.formdev.flatlaf.fonts.inter;
-	requires com.kitfox.svg;
+	requires com.github.weisj.jsvg;
 
 	exports com.formdev.flatlaf.testing.modular.app.plaf;
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -395,7 +395,8 @@ else if( key.endsWith( ".border" ) || key.endsWith( "Border" ) ) {
 				// replace all values in UI defaults that match the wildcard key
 				for( Object k : defaultsKeysCache ) {
 					if( k.equals( "Desktop.background" ) ||
-						k.equals( "DesktopIcon.background" ) )
+						k.equals( "DesktopIcon.background" ) ||
+						k.equals( "TabbedPane.focusColor" ) )
 					  continue;
 
 					if( k instanceof String ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -362,6 +362,9 @@ protected Object applyStyleProperty( AbstractButton b, String key, Object value
 			return ((FlatHelpButtonIcon)helpButtonIcon).applyStyleProperty( key, value );
 		}
 
+		if( "iconTextGap".equals( key ) && value instanceof Integer )
+			value = UIScale.scale( (Integer) value );
+
 		if( borderShared == null )
 			borderShared = new AtomicBoolean( true );
 		return FlatStylingSupport.applyToAnnotatedObjectOrBorder( this, key, value, b, borderShared );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -208,6 +208,9 @@ protected Object applyStyleProperty( AbstractButton b, String key, Object value
 			return ((FlatCheckBoxIcon)icon).applyStyleProperty( key, value );
 		}
 
+		if( "iconTextGap".equals( key ) && value instanceof Integer )
+			value = UIScale.scale( (Integer) value );
+
 		return FlatStylingSupport.applyToAnnotatedObjectOrComponent( this, b, key, value );
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableUI.java
Patch:
@@ -277,6 +277,9 @@ else if( selFg == oldSelectionInactiveForeground )
 
 	/** @since 2 */
 	protected Object applyStyleProperty( String key, Object value ) {
+		if( "rowHeight".equals( key ) && value instanceof Integer )
+			value = UIScale.scale( (Integer) value );
+
 		return FlatStylingSupport.applyToAnnotatedObjectOrComponent( this, table, key, value );
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTreeUI.java
Patch:
@@ -420,6 +420,9 @@ protected void applyStyle( Object style ) {
 
 	/** @since 2 */
 	protected Object applyStyleProperty( String key, Object value ) {
+		if( "rowHeight".equals( key ) && value instanceof Integer )
+			value = UIScale.scale( (Integer) value );
+
 		return FlatStylingSupport.applyToAnnotatedObjectOrComponent( this, tree, key, value );
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/SubMenuUsabilityHelper.java
Patch:
@@ -153,7 +153,7 @@ private void menuSelectionChanged() {
 
 		// get invoker screen bounds
 		Component invoker = popup.getInvoker();
-		invokerBounds = (invoker != null)
+		invokerBounds = (invoker != null && invoker.isShowing())
 			? new Rectangle( invoker.getLocationOnScreen(), invoker.getSize() )
 			: null;
 

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatSyntaxTextAreaActions.java
Patch:
@@ -376,7 +376,7 @@ public void actionPerformedImpl( ActionEvent e, RTextArea textArea ) {
 				dialog.setVisible( true );
 
 				lastLocation = dialog.getLocation();
-			} catch( BadLocationException | IndexOutOfBoundsException | NumberFormatException ex ) {
+			} catch( BadLocationException | IndexOutOfBoundsException | IllegalArgumentException ex ) {
 				ex.printStackTrace();
 			}
 		}

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemePropertiesSupport.java
Patch:
@@ -82,7 +82,9 @@ void setBasePropertyProvider( BasePropertyProvider basePropertyProvider ) {
 		this.basePropertyProvider = basePropertyProvider;
 	}
 
-	private String resolveValue( String value ) {
+	private String resolveValue( String value )
+		throws IllegalArgumentException
+	{
 		return UIDefaultsLoaderAccessor.resolveValue( value, propertiesGetter );
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatPropertiesLaf.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
+import java.util.Locale;
 import java.util.Properties;
 
 /**
@@ -96,7 +97,7 @@ public Properties getProperties() {
 	protected ArrayList<Class<?>> getLafClassesForDefaultsLoading() {
 		ArrayList<Class<?>> lafClasses = new ArrayList<>();
 		lafClasses.add( FlatLaf.class );
-		switch( baseTheme.toLowerCase() ) {
+		switch( baseTheme.toLowerCase( Locale.ENGLISH ) ) {
 			default:
 			case "light":
 				lafClasses.add( FlatLightLaf.class );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatInternalFrameCloseIcon.java
Patch:
@@ -53,8 +53,8 @@ protected void paintIcon( Component c, Graphics2D g ) {
 
 		g.setColor( FlatButtonUI.buttonStateColor( c, c.getForeground(), null, null, hoverForeground, pressedForeground ) );
 
-		float mx = width / 2;
-		float my = height / 2;
+		float mx = width / 2f;
+		float my = height / 2f;
 		float r = 3.25f;
 
 		Path2D path = new Path2D.Float( Path2D.WIND_EVEN_ODD, 4 );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatTabbedPaneCloseIcon.java
Patch:
@@ -94,8 +94,8 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		Color fg = FlatButtonUI.buttonStateColor( c, closeForeground, null, null, closeHoverForeground, closePressedForeground );
 		g.setColor( FlatUIUtils.deriveColor( fg, c.getForeground() ) );
 
-		float mx = width / 2;
-		float my = height / 2;
+		float mx = width / 2f;
+		float my = height / 2f;
 		float r = ((bg != null) ? closeCrossFilledSize : closeCrossPlainSize) / 2;
 
 		// paint cross

File: flatlaf-core/src/main/java/com/formdev/flatlaf/json/JsonParser.java
Patch:
@@ -502,9 +502,9 @@ private boolean isDigit() {
   }
 
   private boolean isHexDigit() {
-    return current >= '0' && current <= '9'
-        || current >= 'a' && current <= 'f'
-        || current >= 'A' && current <= 'F';
+    return (current >= '0' && current <= '9')
+        || (current >= 'a' && current <= 'f')
+        || (current >= 'A' && current <= 'F');
   }
 
   private boolean isEndOfText() {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/json/Location.java
Patch:
@@ -69,7 +69,7 @@ public boolean equals(Object obj) {
     if (obj == null) {
       return false;
     }
-    if (getClass() != obj.getClass()) {
+    if (!(obj instanceof Location)) {
       return false;
     }
     Location other = (Location)obj;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatLabelUI.java
Patch:
@@ -24,6 +24,7 @@
 import java.beans.PropertyChangeEvent;
 import java.util.Arrays;
 import java.util.HashSet;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import javax.swing.Icon;
@@ -179,7 +180,7 @@ static void updateHTMLRenderer( JComponent c, String text, boolean always ) {
 			// BASE_SIZE rule is parsed in javax.swing.text.html.StyleSheet.addRule()
 			String style = "<style>BASE_SIZE " + c.getFont().getSize() + "</style>";
 
-			String lowerText = text.toLowerCase();
+			String lowerText = text.toLowerCase( Locale.ENGLISH );
 			int headIndex;
 			int styleIndex;
 
@@ -228,7 +229,7 @@ private static boolean needsFontBaseSize( String text ) {
 						int tagBegin = i + 1;
 						for( i += 2; i < textLength; i++ ) {
 							if( !Character.isLetterOrDigit( text.charAt( i ) ) ) {
-								String tag = text.substring( tagBegin, i ).toLowerCase();
+								String tag = text.substring( tagBegin, i ).toLowerCase( Locale.ENGLISH );
 								if( tagsUseFontSizeSet.contains( tag ) )
 									return true;
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -391,7 +391,7 @@ private static void resetWindows11Border( Window popupWindow ) {
 
 	//---- class NonFlashingPopup ---------------------------------------------
 
-	private class NonFlashingPopup
+	private static class NonFlashingPopup
 		extends Popup
 	{
 		private Popup delegate;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatScrollPaneUI.java
Patch:
@@ -360,8 +360,8 @@ public Object getStyleableValue( JComponent c, String key ) {
 	protected void updateViewport( PropertyChangeEvent e ) {
 		super.updateViewport( e );
 
-		JViewport oldViewport = (JViewport) (e.getOldValue());
-		JViewport newViewport = (JViewport) (e.getNewValue());
+		JViewport oldViewport = (JViewport) e.getOldValue();
+		JViewport newViewport = (JViewport) e.getNewValue();
 
 		removeViewportListeners( oldViewport );
 		addViewportListeners( newViewport );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatStylingSupport.java
Patch:
@@ -278,6 +278,7 @@ public static String concatStyles( String style1, String style2 ) {
 	 * @throws IllegalArgumentException on syntax errors
 	 * @throws ClassCastException if value type does not fit to expected type
 	 */
+	@SuppressWarnings( "ReturnValueIgnored" ) // Error Prone
 	public static Map<String, Object> parseAndApply( Map<String, Object> oldStyleValues,
 		Object style, BiFunction<String, Object, Object> applyProperty )
 			throws UnknownStyleException, IllegalArgumentException

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -682,7 +682,7 @@ protected void maximize() {
 				// Seems to be a bug in sun.awt.X11.XNETProtocol.requestState(),
 				// which does some strange state XOR-ing...
 				if( (oldState & Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_VERT )
-					newState = oldState & ~Frame.MAXIMIZED_BOTH | Frame.MAXIMIZED_HORIZ;
+					newState = (oldState & ~Frame.MAXIMIZED_BOTH) | Frame.MAXIMIZED_HORIZ;
 			}
 
 			frame.setExtendedState( newState );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -725,7 +725,7 @@ public static void paintGrip( Graphics g, int x, int y, int width, int height,
 	{
 		dotSize = UIScale.scale( dotSize );
 		gap = UIScale.scale( gap );
-		int gripSize = (dotSize * dotCount) + ((gap * (dotCount - 1)));
+		int gripSize = (dotSize * dotCount) + (gap * (dotCount - 1));
 
 		// calculate grip position
 		float gx;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/Graphics2DProxy.java
Patch:
@@ -28,7 +28,6 @@
 import java.awt.Polygon;
 import java.awt.Rectangle;
 import java.awt.RenderingHints;
-import java.awt.RenderingHints.Key;
 import java.awt.Shape;
 import java.awt.Stroke;
 import java.awt.font.FontRenderContext;
@@ -368,12 +367,12 @@ public void setStroke( Stroke s ) {
 	}
 
 	@Override
-	public void setRenderingHint( Key hintKey, Object hintValue ) {
+	public void setRenderingHint( RenderingHints.Key hintKey, Object hintValue ) {
 		delegate.setRenderingHint( hintKey, hintValue );
 	}
 
 	@Override
-	public Object getRenderingHint( Key hintKey ) {
+	public Object getRenderingHint( RenderingHints.Key hintKey ) {
 		return delegate.getRenderingHint( hintKey );
 	}
 

File: flatlaf-core/src/main/module-info/module-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/**
+/*
  * @author Karl Tauber
  */
 module com.formdev.flatlaf {

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableValue.java
Patch:
@@ -1214,6 +1214,7 @@ private void flatSearchIcon( FlatSearchIcon icon ) {
 
 	//---- class TestIcon -----------------------------------------------------
 
+	@SuppressWarnings( "EqualsHashCode" ) // Error Prone
 	public static class TestIcon
 		implements Icon
 	{

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestUtils.java
Patch:
@@ -30,6 +30,7 @@
  */
 public class TestUtils
 {
+	@SuppressWarnings( "MutablePublicArray" ) // Error Prone
 	public static final float[] FACTORS = { 1f, 1.25f, 1.5f, 1.75f, 2f, 2.25f, 2.5f, 2.75f, 3f, 3.25f, 3.5f, 3.75f, 4f, 5f, 6f };
 
 	public static void setup( boolean withFocus ) {

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoFrame.java
Patch:
@@ -440,9 +440,9 @@ private void accentColorChanged( ActionEvent e ) {
 
 		Class<? extends LookAndFeel> lafClass = UIManager.getLookAndFeel().getClass();
 		try {
-			FlatLaf.setup( lafClass.newInstance() );
+			FlatLaf.setup( lafClass.getDeclaredConstructor().newInstance() );
 			FlatLaf.updateUI();
-		} catch( InstantiationException | IllegalAccessException ex ) {
+		} catch( Exception ex ) {
 			LoggingFacade.INSTANCE.logSevere( null, ex );
 		}
 	}

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatSVGIcon.java
Patch:
@@ -279,7 +279,7 @@ public FlatSVGIcon( InputStream in ) throws IOException {
 
 	private static synchronized URI loadFromStream( InputStream in ) throws IOException {
 		try( InputStream in2 = in ) {
-			return svgUniverse.loadSVG( in2, "/flatlaf-stream-" + (streamNumber++) );
+			return svgUniverse.loadSVG( in2, "/flatlaf-stream-" + streamNumber++ );
 		}
 	}
 
@@ -474,7 +474,7 @@ private void update() {
 		URI uri = this.uri;
 		if( uri == null ) {
 			URL url = getIconURL( name, dark );
-			if( url == null & dark )
+			if( url == null && dark )
 				url = getIconURL( name, false );
 
 			if( url == null ) {

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatUIDefaultsInspector.java
Patch:
@@ -770,6 +770,7 @@ else if( value instanceof int[] )
 				return String.valueOf( value );
 		}
 
+		@SuppressWarnings( "FormatString" ) // Error Prone
 		private static String color2hex( Color color ) {
 			int rgb = color.getRGB();
 			boolean hasAlpha = color.getAlpha() != 255;

File: flatlaf-extras/src/main/module-info/module-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/**
+/*
  * @author Karl Tauber
  */
 module com.formdev.flatlaf.extras {

File: flatlaf-fonts/flatlaf-fonts-inter/src/main/module-info/module-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/**
+/*
  * @author Karl Tauber
  */
 module com.formdev.flatlaf.fonts.inter {

File: flatlaf-fonts/flatlaf-fonts-jetbrains-mono/src/main/module-info/module-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/**
+/*
  * @author Karl Tauber
  */
 module com.formdev.flatlaf.fonts.jetbrains_mono {

File: flatlaf-fonts/flatlaf-fonts-roboto-mono/src/main/module-info/module-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/**
+/*
  * @author Karl Tauber
  */
 module com.formdev.flatlaf.fonts.roboto_mono {

File: flatlaf-fonts/flatlaf-fonts-roboto/src/main/module-info/module-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/**
+/*
  * @author Karl Tauber
  */
 module com.formdev.flatlaf.fonts.roboto {

File: flatlaf-intellij-themes/src/main/module-info/module-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/**
+/*
  * @author Karl Tauber
  */
 module com.formdev.flatlaf.intellijthemes {

File: flatlaf-natives/flatlaf-natives-jna/src/main/java/com/formdev/flatlaf/natives/jna/windows/FlatWindowsNativeWindowBorder.java
Patch:
@@ -869,7 +869,6 @@ private interface User32Ex
 		int GetSystemMetricsForDpi( int nIndex, int dpi );
 
 		boolean IsZoomed( HWND hWnd );
-		HANDLE GetProp( HWND hWnd, String lpString );
 
 		HMENU GetSystemMenu( HWND hWnd, boolean bRevert );
 		boolean SetMenuItemInfo( HMENU hmenu, int item, boolean fByPositon, MENUITEMINFO lpmii );

File: flatlaf-swingx/src/main/java/com/formdev/flatlaf/swingx/ui/FlatTaskPaneUI.java
Patch:
@@ -229,7 +229,7 @@ protected void paintChevronControls( JXTaskPane group, Graphics g, int x, int y,
 
 			// compute chevron position
 			int cx = (int) (x + width / 2 - cw / 2);
-			int cy = (int) (y + (height / 2 - ch));
+			int cy = (int) (y + height / 2 - ch);
 			float offset = ch + UIScale.scale( 1f );
 
 			// set stroke with scaled width

File: flatlaf-swingx/src/main/module-info/module-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/**
+/*
  * @author Karl Tauber
  */
 module com.formdev.flatlaf.swingx {

File: flatlaf-testing/flatlaf-testing-modular-app/src/main/module-info/module-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-/**
+/*
  * @author Karl Tauber
  */
 module com.formdev.flatlaf.testing.modular.app {

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponents2Test.java
Patch:
@@ -1456,7 +1456,7 @@ public void setValueAt( Object value, int rowIndex, int columnIndex ) {
 
 	//---- TestTableRowHeaderModel --------------------------------------------
 
-	private class TestTableRowHeaderModel
+	private static class TestTableRowHeaderModel
 		extends AbstractTableModel
 		implements TableModelListener
 	{

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatDisabledIconsTest.java
Patch:
@@ -932,7 +932,7 @@ private static class NetBeansDisabledButtonFilter
 		@Override
 		public int filterRGB(int x, int y, int rgb) {
 			// Reduce the color bandwidth in quarter (>> 2) and Shift 0x88.
-			return (rgb & 0xff000000) + 0x888888 + ((((rgb >> 16) & 0xff) >> 2) << 16) + ((((rgb >> 8) & 0xff) >> 2) << 8) + (((rgb) & 0xff) >> 2);
+			return (rgb & 0xff000000) + 0x888888 + ((((rgb >> 16) & 0xff) >> 2) << 16) + ((((rgb >> 8) & 0xff) >> 2) << 8) + ((rgb & 0xff) >> 2);
 		}
 	}
 }

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatMenusTest.java
Patch:
@@ -937,7 +937,7 @@ protected void paintIcon( Component c, Graphics2D g2 ) {
 
 	//---- class PopupMenu ----------------------------------------------------
 
-	private class PopupMenu extends JPopupMenu {
+	private static class PopupMenu extends JPopupMenu {
 		private PopupMenu() {
 			initComponents();
 		}

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatSubMenusTest.java
Patch:
@@ -398,7 +398,7 @@ private void initComponents() {
 
 	//---- class PopupMenu ----------------------------------------------------
 
-	private class PopupMenu extends JPopupMenu {
+	private static class PopupMenu extends JPopupMenu {
 		private PopupMenu() {
 			initComponents();
 		}

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatLafThemeEditor.java
Patch:
@@ -46,6 +46,6 @@ public static void main( String[] args ) {
 			System.setProperty( "apple.awt.application.appearance", "system" );
 		}
 
-		FlatThemeFileEditor.main( args );
+		FlatThemeFileEditor.launch( args );
 	}
 }

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeEditorOverlay.java
Patch:
@@ -52,6 +52,7 @@ class FlatThemeEditorOverlay
 	private Font font;
 	private Font baseFont;
 
+	@SuppressWarnings( "FormatString" ) // Error Prone
 	@Override
 	public void paint( Graphics g, JComponent c ) {
 		// paint the syntax text area

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeFileEditor.java
Patch:
@@ -102,7 +102,7 @@ class FlatThemeFileEditor
 	private final FlatThemePropertiesBaseManager propertiesBaseManager = new FlatThemePropertiesBaseManager();
 	private final JButton newButton;
 
-	static void main( String[] args ) {
+	static void launch( String[] args ) {
 		File dir = (args.length > 0)
 			? new File( args[0] )
 			: null;
@@ -1306,7 +1306,7 @@ public void addElement( E obj ) {
 				super.addElement( obj );
 			} else {
 				int index = binarySearch( this, obj, comparator );
-				insertElementAt( obj, (index < 0) ? ((-index)-1) : index );
+				insertElementAt( obj, (index < 0) ? (-index - 1) : index );
 			}
 		}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -1233,7 +1233,7 @@ public void mouseClicked( MouseEvent e ) {
 			// on Linux, when using native library, the mouse clicked event
 			// is usually not sent and maximize/restore is done in mouse pressed event
 			// this check is here for the case that a mouse clicked event comes thru for some reason
-			if( SystemInfo.isLinux && FlatNativeLinuxLibrary.isWMUtilsSupported( window ) ) {
+			if( linuxNativeMove && SystemInfo.isLinux && FlatNativeLinuxLibrary.isWMUtilsSupported( window ) ) {
 				// see comment in mousePressed()
 				if( lastSingleClickWhen != 0 && (e.getWhen() - lastSingleClickWhen) <= getMultiClickInterval() ) {
 					lastSingleClickWhen = 0;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -551,7 +551,7 @@ private void paintImpl( Graphics2D g, int x, int y, int width, int height, doubl
 
 		protected boolean isWindowMaximized( Component c ) {
 			Container parent = c.getParent();
-			return parent instanceof Frame && (((Frame)parent).getExtendedState() & Frame.MAXIMIZED_BOTH) != 0;
+			return parent instanceof Frame && (((Frame)parent).getExtendedState() & Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH;
 		}
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatNativeLinuxLibrary.java
Patch:
@@ -23,6 +23,7 @@
 import java.awt.geom.AffineTransform;
 import javax.swing.JDialog;
 import javax.swing.JFrame;
+import com.formdev.flatlaf.util.SystemInfo;
 
 /**
  * Native methods for Linux.
@@ -35,7 +36,7 @@
 class FlatNativeLinuxLibrary
 {
 	static boolean isLoaded() {
-		return FlatNativeLibrary.isLoaded();
+		return SystemInfo.isLinux && FlatNativeLibrary.isLoaded();
 	}
 
 	// direction for _NET_WM_MOVERESIZE message

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatNativeWindowsLibrary.java
Patch:
@@ -17,6 +17,7 @@
 package com.formdev.flatlaf.ui;
 
 import java.awt.Window;
+import com.formdev.flatlaf.util.SystemInfo;
 
 /**
  * Native methods for Windows.
@@ -31,7 +32,7 @@ public class FlatNativeWindowsLibrary
 	private static long osBuildNumber = Long.MIN_VALUE;
 
 	public static boolean isLoaded() {
-		return FlatNativeLibrary.isLoaded();
+		return SystemInfo.isWindows && FlatNativeLibrary.isLoaded();
 	}
 
 	/**

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -126,9 +126,9 @@ public class SystemInfo
 		// For older Java versions, use native library to get OS build number.
 		boolean isWin_11_orLater = false;
 		try {
-			isWin_11_orLater = (isWindows_10_orLater &&
-				(scanVersion( StringUtils.removeLeading( osName, "windows " ) ) >= toVersion( 11, 0, 0, 0 )) ||
-				(FlatNativeWindowsLibrary.isLoaded() && FlatNativeWindowsLibrary.getOSBuildNumber() >= 22000));
+			isWin_11_orLater = isWindows_10_orLater &&
+				(scanVersion( StringUtils.removeLeading( osName, "windows " ) ) >= toVersion( 11, 0, 0, 0 ) ||
+				 (FlatNativeWindowsLibrary.isLoaded() && FlatNativeWindowsLibrary.getOSBuildNumber() >= 22000));
 		} catch( Throwable ex ) {
 			// catch to avoid that application can not start if native library is not up-to-date
 			LoggingFacade.INSTANCE.logSevere( null, ex );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -721,7 +721,9 @@ void tabbedPane() {
 			"inactiveUnderlineColor", Color.class,
 			"disabledUnderlineColor", Color.class,
 			"hoverColor", Color.class,
+			"hoverForeground", Color.class,
 			"focusColor", Color.class,
+			"focusForeground", Color.class,
 			"tabSeparatorColor", Color.class,
 			"contentAreaColor", Color.class,
 

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableValue.java
Patch:
@@ -727,7 +727,9 @@ void tabbedPane() {
 		testColor( c, ui, "inactiveUnderlineColor", 0x123456 );
 		testColor( c, ui, "disabledUnderlineColor", 0x123456 );
 		testColor( c, ui, "hoverColor", 0x123456 );
+		testColor( c, ui, "hoverForeground", 0x123456 );
 		testColor( c, ui, "focusColor", 0x123456 );
+		testColor( c, ui, "focusForeground", 0x123456 );
 		testColor( c, ui, "tabSeparatorColor", 0x123456 );
 		testColor( c, ui, "contentAreaColor", 0x123456 );
 

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -906,7 +906,9 @@ void tabbedPane() {
 		ui.applyStyle( "inactiveUnderlineColor: #fff" );
 		ui.applyStyle( "disabledUnderlineColor: #fff" );
 		ui.applyStyle( "hoverColor: #fff" );
+		ui.applyStyle( "hoverForeground: #fff" );
 		ui.applyStyle( "focusColor: #fff" );
+		ui.applyStyle( "focusForeground: #fff" );
 		ui.applyStyle( "tabSeparatorColor: #fff" );
 		ui.applyStyle( "contentAreaColor: #fff" );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemRenderer.java
Patch:
@@ -456,10 +456,11 @@ protected static void paintIcon( Graphics g, JMenuItem menuItem, Icon icon, Rect
 			return;
 
 		// center because the real icon may be smaller than dimension in iconRect
+		int x = iconRect.x + centerOffset( iconRect.width, icon.getIconWidth() );
 		int y = iconRect.y + centerOffset( iconRect.height, icon.getIconHeight() );
 
 		// paint
-		icon.paintIcon( menuItem, g, iconRect.x, y );
+		icon.paintIcon( menuItem, g, x, y );
 	}
 
 	protected static void paintText( Graphics g, JMenuItem menuItem,

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -334,7 +334,7 @@ static String resolveValueFromUIManager( String value ) {
 			if( newValue == null )
 				throw new IllegalArgumentException( "variable '" + value + "' not found" );
 
-			return newValue;
+			return resolveValueFromUIManager( newValue );
 		}
 
 		if( !value.startsWith( PROPERTY_PREFIX ) )

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatFontsTest.java
Patch:
@@ -25,6 +25,7 @@
 import com.formdev.flatlaf.fonts.inter.FlatInterFont;
 import com.formdev.flatlaf.fonts.jetbrains_mono.FlatJetBrainsMonoFont;
 import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
+import com.formdev.flatlaf.fonts.roboto_mono.FlatRobotoMonoFont;
 import com.formdev.flatlaf.util.FontUtils;
 import com.formdev.flatlaf.util.UIScale;
 import net.miginfocom.swing.*;
@@ -40,6 +41,7 @@ public static void main( String[] args ) {
 			FlatInterFont.installLazy();
 			FlatJetBrainsMonoFont.installLazy();
 			FlatRobotoFont.installLazy();
+			FlatRobotoMonoFont.installLazy();
 
 			FlatTestFrame frame = FlatTestFrame.create( args, "FlatFontsTest" );
 			frame.showFrame( FlatFontsTest::new );

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeFileEditor.java
Patch:
@@ -66,6 +66,7 @@
 import com.formdev.flatlaf.fonts.inter.FlatInterFont;
 import com.formdev.flatlaf.fonts.jetbrains_mono.FlatJetBrainsMonoFont;
 import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
+import com.formdev.flatlaf.fonts.roboto_mono.FlatRobotoMonoFont;
 import com.formdev.flatlaf.icons.FlatClearIcon;
 import com.formdev.flatlaf.ui.FlatUIUtils;
 import com.formdev.flatlaf.util.StringUtils;
@@ -111,6 +112,7 @@ static void main( String[] args ) {
 			FlatInterFont.installLazy();
 			FlatJetBrainsMonoFont.installLazy();
 			FlatRobotoFont.installLazy();
+			FlatRobotoMonoFont.installLazy();
 
 			FlatLaf.registerCustomDefaultsSource( "com.formdev.flatlaf.themeeditor" );
 

File: flatlaf-fonts/flatlaf-fonts-inter/src/main/java/com/formdev/flatlaf/fonts/inter/FlatInterFont.java
Patch:
@@ -146,8 +146,8 @@ private FlatInterFont() {}
 	 * This is the preferred method (when using FlatLaf) to avoid unnecessary loading of maybe unused fonts.
 	 * <p>
 	 * <strong>Note</strong>: When using '{@code new Font(...)}', you need to first invoke
-	 * {@link FontUtils#loadFontFamily(family)} to ensure that the font family is loaded.
-	 * When FlatLaf loads a font, or when using {@link FontUtils#getCompositeFont(family, style, size)},
+	 * {@link FontUtils#loadFontFamily(String)} to ensure that the font family is loaded.
+	 * When FlatLaf loads a font, or when using {@link FontUtils#getCompositeFont(String, int, int)},
 	 * this is done automatically.
 	 */
 	public static void installLazy() {

File: flatlaf-fonts/flatlaf-fonts-jetbrains-mono/src/main/java/com/formdev/flatlaf/fonts/jetbrains_mono/FlatJetBrainsMonoFont.java
Patch:
@@ -101,8 +101,8 @@ private FlatJetBrainsMonoFont() {}
 	 * This is the preferred method (when using FlatLaf) to avoid unnecessary loading of maybe unused fonts.
 	 * <p>
 	 * <strong>Note</strong>: When using '{@code new Font(...)}', you need to first invoke
-	 * {@link FontUtils#loadFontFamily(family)} to ensure that the font family is loaded.
-	 * When FlatLaf loads a font, or when using {@link FontUtils#getCompositeFont(family, style, size)},
+	 * {@link FontUtils#loadFontFamily(String)} to ensure that the font family is loaded.
+	 * When FlatLaf loads a font, or when using {@link FontUtils#getCompositeFont(String, int, int)},
 	 * this is done automatically.
 	 */
 	public static void installLazy() {

File: flatlaf-fonts/flatlaf-fonts-roboto/src/main/java/com/formdev/flatlaf/fonts/roboto/FlatRobotoFont.java
Patch:
@@ -143,8 +143,8 @@ private FlatRobotoFont() {}
 	 * This is the preferred method (when using FlatLaf) to avoid unnecessary loading of maybe unused fonts.
 	 * <p>
 	 * <strong>Note</strong>: When using '{@code new Font(...)}', you need to first invoke
-	 * {@link FontUtils#loadFontFamily(family)} to ensure that the font family is loaded.
-	 * When FlatLaf loads a font, or when using {@link FontUtils#getCompositeFont(family, style, size)},
+	 * {@link FontUtils#loadFontFamily(String)} to ensure that the font family is loaded.
+	 * When FlatLaf loads a font, or when using {@link FontUtils#getCompositeFont(String, int, int)},
 	 * this is done automatically.
 	 */
 	public static void installLazy() {

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatNativeWindowBorderTest.java
Patch:
@@ -57,6 +57,7 @@ public static void main( String[] args ) {
 		SwingUtilities.invokeLater( () -> {
 			FlatLightLaf.setup();
 			FlatInspector.install( "ctrl shift alt X" );
+			UIManager.put( "FlatLaf.debug.titlebar.showRectangles", true );
 
 			mainFrame = showFrame();
 		} );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatWindowDecorationsTest.java
Patch:
@@ -49,6 +49,7 @@ public static void main( String[] args ) {
 
 			FlatTestFrame frame = FlatTestFrame.create( args, "FlatWindowDecorationsTest" );
 			frame.applyComponentOrientationToFrame = true;
+			UIManager.put( "FlatLaf.debug.titlebar.showRectangles", true );
 
 			Class<?> cls = FlatWindowDecorationsTest.class;
 			List<Image> images = Arrays.asList(

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeTokenMaker.java
Patch:
@@ -56,6 +56,7 @@ public FlatThemeTokenMaker() {
 		tokenMap.put( "lazy", TOKEN_FUNCTION );
 
 		// color functions
+		tokenMap.put( "systemColor", TOKEN_FUNCTION );
 		tokenMap.put( "rgb", TOKEN_FUNCTION );
 		tokenMap.put( "rgba", TOKEN_FUNCTION );
 		tokenMap.put( "hsl", TOKEN_FUNCTION );

File: flatlaf-core/src/main/module-info/module-info.java
Patch:
@@ -22,6 +22,7 @@
 
 	exports com.formdev.flatlaf;
 	exports com.formdev.flatlaf.icons;
+	exports com.formdev.flatlaf.themes;
 	exports com.formdev.flatlaf.ui;
 	exports com.formdev.flatlaf.util;
 

File: flatlaf-jide-oss/src/main/java/com/formdev/flatlaf/jideoss/ui/FlatJideSplitButtonUI.java
Patch:
@@ -121,7 +121,7 @@ protected void paintArrow( JMenuItem menuItem, Graphics g ) {
 
 		Object[] oldRenderingHints = FlatUIUtils.setRenderingHints( g );
 		FlatUIUtils.paintArrow( (Graphics2D) g, r.x, r.y, r.width, r.height,
-			SwingConstants.SOUTH, FlatUIUtils.isChevron( arrowType ), 6, 0, 0 );
+			SwingConstants.SOUTH, FlatUIUtils.isChevron( arrowType ), 6, 1, 0, 0 );
 		FlatUIUtils.resetRenderingHints( g, oldRenderingHints );
 	}
 }

File: flatlaf-jide-oss/src/main/java/com/formdev/flatlaf/jideoss/ui/FlatJideTabbedPaneUI.java
Patch:
@@ -891,7 +891,7 @@ public void paintIcon( Component c, Graphics g, int x, int y ) {
 			g.setColor( button.isEnabled() ? foreground : disabledForeground );
 			FlatUIUtils.paintArrow( (Graphics2D) g,
 				0, 0, button.getWidth(), button.getHeight(),
-				direction, FlatUIUtils.isChevron( arrowType ), 10, 0, 0 );
+				direction, FlatUIUtils.isChevron( arrowType ), 10, 1, 0, 0 );
 
 			FlatUIUtils.resetRenderingHints( g, oldRenderingHints );
 		}

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatPaintingTest.java
Patch:
@@ -1077,7 +1077,7 @@ protected void paintComponent( Graphics g ) {
 
 		private void paintArrow( Graphics2D g, int width, int height ) {
 			FlatUIUtils.paintArrow( g, 0, 0, width, height,
-				direction, chevron, arrowSize, xOffset, yOffset );
+				direction, chevron, arrowSize, 1, xOffset, yOffset );
 
 			if( button ) {
 				FlatArrowButton arrowButton = new FlatArrowButton( direction,

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatFileChooserUI.java
Patch:
@@ -243,11 +243,13 @@ private void patchUI( JFileChooser fc ) {
 			borderLayout.setHgap( 8 );
 
 			Component north = borderLayout.getLayoutComponent( BorderLayout.NORTH );
+			Component lineEnd = borderLayout.getLayoutComponent( BorderLayout.LINE_END );
 			Component center = borderLayout.getLayoutComponent( BorderLayout.CENTER );
 			Component south = borderLayout.getLayoutComponent( BorderLayout.SOUTH );
-			if( north != null && center != null && south != null ) {
+			if( north != null && lineEnd != null && center != null && south != null ) {
 				JPanel p = new JPanel( new BorderLayout( 0, 11 ) );
 				p.add( north, BorderLayout.NORTH );
+				p.add( lineEnd, BorderLayout.LINE_END );
 				p.add( center, BorderLayout.CENTER );
 				p.add( south, BorderLayout.SOUTH );
 				fc.add( p, BorderLayout.CENTER );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -210,6 +210,9 @@ public static int minimumHeight( JComponent c, int minimumHeight ) {
 	}
 
 	public static boolean isCellEditor( Component c ) {
+		if( c == null )
+			return false;
+
 		// check whether used in cell editor (check 3 levels up)
 		Component c2 = c;
 		for( int i = 0; i <= 2 && c2 != null; i++ ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -483,9 +483,10 @@ public void layoutContainer( Container parent ) {
 			// limit buttons width to height of a raw spinner (without insets)
 			FontMetrics fm = spinner.getFontMetrics( spinner.getFont() );
 			int maxButtonWidth = fm.getHeight() + scale( padding.top ) + scale( padding.bottom );
+			int minButtonWidth = (maxButtonWidth * 3) / 4;
 
-			// make button area square (if spinner has preferred height)
-			int buttonsWidth = Math.min( parent.getPreferredSize().height - insets.top - insets.bottom, maxButtonWidth );
+			// make button area square (except if width is limited)
+			int buttonsWidth = Math.min( Math.max( buttonsRect.height, minButtonWidth ), maxButtonWidth );
 			buttonsRect.width = buttonsWidth;
 
 			if( parent.getComponentOrientation().isLeftToRight() ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -581,6 +581,7 @@ private void initFonts( UIDefaults defaults ) {
 
 		// add fonts that are not set in BasicLookAndFeel
 		defaults.put( "RootPane.font", activeFont );
+		defaults.put( "TitlePane.font", activeFont );
 	}
 
 	private void initDefaultFont( UIDefaults defaults ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatClientProperties.java
Patch:
@@ -254,7 +254,7 @@ public interface FlatClientProperties
 	String COMPONENT_FOCUS_OWNER = "JComponent.focusOwner";
 
 	/**
-	 * Specifies whether a component in a embedded menu bar should behave as caption
+	 * Specifies whether a component in an embedded menu bar should behave as caption
 	 * (left-click allows moving window, right-click shows window system menu).
 	 * The component does not receive mouse pressed/released/clicked/dragged events,
 	 * but it gets mouse entered/exited/moved events.

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatFileChooserUI.java
Patch:
@@ -151,9 +151,9 @@
  *
  * @uiDefault FileChooser.shortcuts.buttonSize					Dimension	optional; default is 84,64
  * @uiDefault FileChooser.shortcuts.iconSize					Dimension	optional; default is 32,32
- * @uiDefault FileChooser.shortcuts.filesFunction				Function&lt;File[], File[]>
- * @uiDefault FileChooser.shortcuts.displayNameFunction			Function&lt;File, String>
- * @uiDefault FileChooser.shortcuts.iconFunction				Function&lt;File, Icon>
+ * @uiDefault FileChooser.shortcuts.filesFunction				Function&lt;File[], File[]&gt;
+ * @uiDefault FileChooser.shortcuts.displayNameFunction			Function&lt;File, String&gt;
+ * @uiDefault FileChooser.shortcuts.iconFunction				Function&lt;File, Icon&gt;
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuBarUI.java
Patch:
@@ -76,6 +76,8 @@ public class FlatMenuBarUI
 
 	// used in FlatMenuUI
 	/** @since 2 */ @Styleable protected Color hoverBackground;
+	/** @since 2.5 */ @Styleable protected Color selectionBackground;
+	/** @since 2.5 */ @Styleable protected Color selectionForeground;
 	/** @since 2 */ @Styleable protected Color underlineSelectionBackground;
 	/** @since 2 */ @Styleable protected Color underlineSelectionColor;
 	/** @since 2 */ @Styleable protected int underlineSelectionHeight = -1;

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -284,6 +284,8 @@ void menuBar() {
 		Map<String, Class<?>> expected = expectedMap(
 			"itemMargins", Insets.class,
 			"hoverBackground", Color.class,
+			"selectionBackground", Color.class,
+			"selectionForeground", Color.class,
 			"underlineSelectionBackground", Color.class,
 			"underlineSelectionColor", Color.class,
 			"underlineSelectionHeight", int.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableValue.java
Patch:
@@ -380,6 +380,8 @@ void menuBar() {
 
 		testInsets( c, ui, "itemMargins", 1,2,3,4 );
 		testColor( c, ui, "hoverBackground", 0x123456 );
+		testColor( c, ui, "selectionBackground", 0x123456 );
+		testColor( c, ui, "selectionForeground", 0x123456 );
 		testColor( c, ui, "underlineSelectionBackground", 0x123456 );
 		testColor( c, ui, "underlineSelectionColor", 0x123456 );
 		testInteger( c, ui, "underlineSelectionHeight", 123 );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -436,6 +436,8 @@ void menuBar() {
 
 		ui.applyStyle( "itemMargins: 1,2,3,4" );
 		ui.applyStyle( "hoverBackground: #fff" );
+		ui.applyStyle( "selectionBackground: #fff" );
+		ui.applyStyle( "selectionForeground: #fff" );
 		ui.applyStyle( "underlineSelectionBackground: #fff" );
 		ui.applyStyle( "underlineSelectionColor: #fff" );
 		ui.applyStyle( "underlineSelectionHeight: 3" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatCheckBoxUI.java
Patch:
@@ -43,7 +43,7 @@ public class FlatCheckBoxUI
 	extends FlatRadioButtonUI
 {
 	public static ComponentUI createUI( JComponent c ) {
-		return FlatUIUtils.canUseSharedUI( c )
+		return FlatUIUtils.canUseSharedUI( c ) && !FlatUIUtils.needsLightAWTPeer( c )
 			? FlatUIUtils.createSharedUI( FlatCheckBoxUI.class, () -> new FlatCheckBoxUI( true ) )
 			: new FlatCheckBoxUI( false );
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -629,6 +629,9 @@ protected Color getBackground( JComponent c ) {
 	}
 
 	protected Color getBackgroundBase( JComponent c, boolean def ) {
+		if( FlatUIUtils.isAWTPeer( c ) )
+			return background;
+
 		// use component background if explicitly set
 		Color bg = c.getBackground();
 		if( isCustomBackground( bg ) )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -631,6 +631,9 @@ public void paintCurrentValueBackground( Graphics g, Rectangle bounds, boolean h
 
 	protected Color getBackground( boolean enabled ) {
 		if( enabled ) {
+			if( FlatUIUtils.isAWTPeer( comboBox ) )
+				return UIManager.getColor( "ComboBox.background" );
+
 			Color background = comboBox.getBackground();
 
 			// always use explicitly set color

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -276,6 +276,9 @@ public void initialize() {
 		}
 		if( desktopPropertyName != null ) {
 			desktopPropertyListener = e -> {
+				if( !FlatSystemProperties.getBoolean( FlatSystemProperties.UPDATE_UI_ON_SYSTEM_FONT_CHANGE, true ) )
+					return;
+
 				String propertyName = e.getPropertyName();
 				if( desktopPropertyName.equals( propertyName ) || propertyName.equals( desktopPropertyName2 ) )
 					reSetLookAndFeel();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/NativeLibrary.java
Patch:
@@ -138,7 +138,7 @@ private boolean loadLibraryFromFile( File libraryFile ) {
 			System.load( libraryFile.getAbsolutePath() );
 			return true;
 		} catch( Throwable ex ) {
-			log( null, ex );
+			log( ex.getMessage(), ex );
 			return false;
 		}
 	}

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -722,6 +722,7 @@ void tabbedPane() {
 			"tabSeparatorsFullHeight", boolean.class,
 			"hasFullBorder", boolean.class,
 			"tabsOpaque", boolean.class,
+			"rotateTabRuns", boolean.class,
 
 			"tabType", String.class,
 			"tabsPopupPolicy", String.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableValue.java
Patch:
@@ -739,6 +739,7 @@ void tabbedPane() {
 		testBoolean( c, ui, "tabSeparatorsFullHeight", false );
 		testBoolean( c, ui, "hasFullBorder", false );
 		testBoolean( c, ui, "tabsOpaque", false );
+		testBoolean( c, ui, "rotateTabRuns", false );
 
 		testString( c, ui, "tabType", "card" );
 		testString( c, ui, "tabsPopupPolicy", "asNeeded" );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -891,6 +891,7 @@ void tabbedPane() {
 		ui.applyStyle( "tabSeparatorsFullHeight: false" );
 		ui.applyStyle( "hasFullBorder: false" );
 		ui.applyStyle( "tabsOpaque: false" );
+		ui.applyStyle( "rotateTabRuns: false" );
 
 		ui.applyStyle( "tabType: card" );
 		ui.applyStyle( "tabsPopupPolicy: asNeeded" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -1052,7 +1052,7 @@ private static Object parseColorContrast( List<String> params, Function<String,
 	 *                 the alpha of this color is used as weight to mix the two colors
 	 *   - background: a background color (e.g. #f00) or a color function
 	 */
-	private static Object parseColorOver( List<String> params, Function<String, String> resolver, boolean reportError ) {
+	private static ColorUIResource parseColorOver( List<String> params, Function<String, String> resolver, boolean reportError ) {
 		String foregroundStr = params.get( 0 );
 		String backgroundStr = params.get( 1 );
 
@@ -1061,7 +1061,8 @@ private static Object parseColorOver( List<String> params, Function<String, Stri
 		if( foreground == null || foreground.getAlpha() == 255 )
 			return foreground;
 
-		Color foreground2 = new Color( foreground.getRGB() );
+		// foreground color without alpha
+		ColorUIResource foreground2 = new ColorUIResource( foreground.getRGB() );
 
 		// parse background color
 		ColorUIResource background = (ColorUIResource) parseColorOrFunction( resolver.apply( backgroundStr ), resolver, reportError );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/SubMenuUsabilityHelper.java
Patch:
@@ -312,7 +312,7 @@ private class SafeTrianglePainter
 			if( window instanceof RootPaneContainer ) {
 				JLayeredPane layeredPane = ((RootPaneContainer)window).getLayeredPane();
 				setSize( layeredPane.getSize() );
-				layeredPane.add( this, new Integer( JLayeredPane.POPUP_LAYER + 1 ) );
+				layeredPane.add( this, Integer.valueOf( JLayeredPane.POPUP_LAYER + 1 ) );
 			}
 		}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatFileChooserUI.java
Patch:
@@ -151,9 +151,9 @@
  *
  * @uiDefault FileChooser.shortcuts.buttonSize					Dimension	optional; default is 84,64
  * @uiDefault FileChooser.shortcuts.iconSize					Dimension	optional; default is 32,32
- * @uiDefault FileChooser.shortcuts.filesFunction				Function<File[], File[]>
- * @uiDefault FileChooser.shortcuts.displayNameFunction			Function<File, String>
- * @uiDefault FileChooser.shortcuts.iconFunction				Function<File, Icon>
+ * @uiDefault FileChooser.shortcuts.filesFunction				Function&lt;File[], File[]>
+ * @uiDefault FileChooser.shortcuts.displayNameFunction			Function&lt;File, String>
+ * @uiDefault FileChooser.shortcuts.iconFunction				Function&lt;File, Icon>
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableValue.java
Patch:
@@ -25,6 +25,7 @@
 import java.awt.Graphics;
 import java.awt.Insets;
 import java.lang.reflect.Method;
+import java.util.Locale;
 import javax.swing.AbstractButton;
 import javax.swing.Icon;
 import javax.swing.JButton;
@@ -108,7 +109,7 @@ private void testInteger( JComponent c, StyleableUI ui, String key, int value )
 	}
 
 	private void testFloat( JComponent c, StyleableUI ui, String key, float value ) {
-		applyStyle( c, ui, String.format( "%s: %f", key, value ) );
+		applyStyle( c, ui, String.format( Locale.ENGLISH, "%s: %f", key, value ) );
 		assertEquals( value, ui.getStyleableValue( c, key ) );
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/MigLayoutVisualPadding.java
Patch:
@@ -143,8 +143,8 @@ public static void uninstall( JComponent c ) {
 	//---- class FlatMigInsets ------------------------------------------------
 
 	/**
-	 * Marker class to identify our visual paddings and leaf paddings,
-	 * which were set from outside, untouched.
+	 * Marker class to identify our visual paddings and leave paddings
+	 * set from outside untouched.
 	 */
 	private static class FlatMigInsets
 		extends Insets

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatNativeWindowBorder.java
Patch:
@@ -42,11 +42,13 @@
 public class FlatNativeWindowBorder
 {
 	// can use window decorations if:
-	// - on Windows 10
+	// - on Windows 10 or later
+	// - not if system property "sun.java2d.opengl" is true on Windows 10
 	// - not when running in JetBrains Projector, Webswing or WinPE
 	// - not disabled via system property
 	private static final boolean canUseWindowDecorations =
 		SystemInfo.isWindows_10_orLater &&
+		(SystemInfo.isWindows_11_orLater || !FlatSystemProperties.getBoolean( "sun.java2d.opengl", false )) &&
 		!SystemInfo.isProjector &&
 		!SystemInfo.isWebswing &&
 		!SystemInfo.isWinPE &&

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatEmptyBorder.java
Patch:
@@ -56,7 +56,7 @@ public Insets getBorderInsets( Component c, Insets insets ) {
 	protected static Insets scaleInsets( Component c, Insets insets,
 		int top, int left, int bottom, int right )
 	{
-		boolean leftToRight = left == right || c.getComponentOrientation().isLeftToRight();
+		boolean leftToRight = left == right || c == null || c.getComponentOrientation().isLeftToRight();
 		insets.left = scale( leftToRight ? left : right );
 		insets.top = scale( top );
 		insets.right = scale( leftToRight ? right : left );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableUI.java
Patch:
@@ -314,6 +314,8 @@ private void toggleSelectionColors() {
 
 	@Override
 	public void paint( Graphics g, JComponent c ) {
+		FlatTableHeaderUI.fixDraggedAndResizingColumns( table.getTableHeader() );
+
 		boolean horizontalLines = table.getShowHorizontalLines();
 		boolean verticalLines = table.getShowVerticalLines();
 		if( horizontalLines || verticalLines ) {

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -1085,8 +1085,11 @@ void toggleButton() {
 		ui.applyStyle( b, "tab.underlineColor: #fff" );
 		ui.applyStyle( b, "tab.disabledUnderlineColor: #fff" );
 		ui.applyStyle( b, "tab.selectedBackground: #fff" );
+		ui.applyStyle( b, "tab.selectedForeground: #fff" );
 		ui.applyStyle( b, "tab.hoverBackground: #fff" );
+		ui.applyStyle( b, "tab.hoverForeground: #fff" );
 		ui.applyStyle( b, "tab.focusBackground: #fff" );
+		ui.applyStyle( b, "tab.focusForeground: #fff" );
 	}
 
 	@Test

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuBarUI.java
Patch:
@@ -74,6 +74,8 @@ public class FlatMenuBarUI
 	/** @since 3 */ @Styleable protected Insets selectionEmbeddedInsets;
 	/** @since 3 */ @Styleable protected int selectionArc = -1;
 	/** @since 2 */ @Styleable protected Color hoverBackground;
+	/** @since 3 */ @Styleable protected Color selectionBackground;
+	/** @since 3 */ @Styleable protected Color selectionForeground;
 	/** @since 2 */ @Styleable protected Color underlineSelectionBackground;
 	/** @since 2 */ @Styleable protected Color underlineSelectionColor;
 	/** @since 2 */ @Styleable protected int underlineSelectionHeight = -1;

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -275,6 +275,8 @@ void menuBar() {
 			"selectionEmbeddedInsets", Insets.class,
 			"selectionArc", int.class,
 			"hoverBackground", Color.class,
+			"selectionBackground", Color.class,
+			"selectionForeground", Color.class,
 			"underlineSelectionBackground", Color.class,
 			"underlineSelectionColor", Color.class,
 			"underlineSelectionHeight", int.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -427,6 +427,8 @@ void menuBar() {
 		ui.applyStyle( "selectionEmbeddedInsets: 1,2,3,4" );
 		ui.applyStyle( "selectionArc: 8" );
 		ui.applyStyle( "hoverBackground: #fff" );
+		ui.applyStyle( "selectionBackground: #fff" );
+		ui.applyStyle( "selectionForeground: #fff" );
 		ui.applyStyle( "underlineSelectionBackground: #fff" );
 		ui.applyStyle( "underlineSelectionColor: #fff" );
 		ui.applyStyle( "underlineSelectionHeight: 3" );

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeTokenMaker.java
Patch:
@@ -76,6 +76,7 @@ public FlatThemeTokenMaker() {
 		tokenMap.put( "tint", TOKEN_FUNCTION );
 		tokenMap.put( "shade", TOKEN_FUNCTION );
 		tokenMap.put( "contrast", TOKEN_FUNCTION );
+		tokenMap.put( "over", TOKEN_FUNCTION );
 
 		// function options
 		tokenMap.put( "relative", Token.RESERVED_WORD );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -50,6 +50,7 @@ public class SystemInfo
 	public static final long javaVersion;
 	public static final boolean isJava_9_orLater;
 	public static final boolean isJava_11_orLater;
+	/** @since 2.3 */ public static final boolean isJava_12_orLater;
 	public static final boolean isJava_15_orLater;
 	/** @since 2 */ public static final boolean isJava_17_orLater;
 	/** @since 2 */ public static final boolean isJava_18_orLater;
@@ -92,6 +93,7 @@ public class SystemInfo
 		javaVersion = scanVersion( System.getProperty( "java.version" ) );
 		isJava_9_orLater = (javaVersion >= toVersion( 9, 0, 0, 0 ));
 		isJava_11_orLater = (javaVersion >= toVersion( 11, 0, 0, 0 ));
+		isJava_12_orLater = (javaVersion >= toVersion( 12, 0, 0, 0 ));
 		isJava_15_orLater = (javaVersion >= toVersion( 15, 0, 0, 0 ));
 		isJava_17_orLater = (javaVersion >= toVersion( 17, 0, 0, 0 ));
 		isJava_18_orLater = (javaVersion >= toVersion( 18, 0, 0, 0 ));

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -618,6 +618,7 @@ private void copyIfNotSet( UIDefaults defaults, String destKey, String srcKey, S
 		// TabbedPane
 		uiKeyCopying.put( "TabbedPane.selectedBackground",     "DefaultTabs.underlinedTabBackground" );
 		uiKeyCopying.put( "TabbedPane.selectedForeground",     "DefaultTabs.underlinedTabForeground" );
+		uiKeyCopying.put( "TabbedPane.inactiveUnderlineColor", "DefaultTabs.inactiveUnderlineColor" );
 
 		// TitlePane
 		uiKeyCopying.put( "TitlePane.inactiveBackground",     "TitlePane.background" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -245,7 +245,7 @@ public static boolean isPermanentFocusOwner( Component c ) {
 			isInActiveWindow( c, keyboardFocusManager.getActiveWindow() );
 	}
 
-	private static boolean isInActiveWindow( Component c, Window activeWindow ) {
+	static boolean isInActiveWindow( Component c, Window activeWindow ) {
 		Window window = SwingUtilities.windowForComponent( c );
 		return window == activeWindow ||
 			(window != null && window.getType() == Window.Type.POPUP && window.getOwner() == activeWindow);

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -693,6 +693,7 @@ void tabbedPane() {
 			"selectedBackground", Color.class,
 			"selectedForeground", Color.class,
 			"underlineColor", Color.class,
+			"inactiveUnderlineColor", Color.class,
 			"disabledUnderlineColor", Color.class,
 			"hoverColor", Color.class,
 			"focusColor", Color.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -862,6 +862,7 @@ void tabbedPane() {
 		ui.applyStyle( "selectedBackground: #fff" );
 		ui.applyStyle( "selectedForeground: #fff" );
 		ui.applyStyle( "underlineColor: #fff" );
+		ui.applyStyle( "inactiveUnderlineColor: #fff" );
 		ui.applyStyle( "disabledUnderlineColor: #fff" );
 		ui.applyStyle( "hoverColor: #fff" );
 		ui.applyStyle( "focusColor: #fff" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSplitPaneUI.java
Patch:
@@ -235,7 +235,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 			switch( e.getPropertyName() ) {
 				case JSplitPane.DIVIDER_LOCATION_PROPERTY:
 					// necessary to show/hide one-touch buttons on expand/collapse
-					revalidate();
+					doLayout();
 					break;
 			}
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatCaret.java
Patch:
@@ -236,7 +236,7 @@ protected void selectAllOnFocusGained() {
 		if( selectAllOnFocusPolicy == null )
 			selectAllOnFocusPolicy = this.selectAllOnFocusPolicy;
 
-		if( SELECT_ALL_ON_FOCUS_POLICY_NEVER.equals( selectAllOnFocusPolicy ) )
+		if( selectAllOnFocusPolicy == null || SELECT_ALL_ON_FOCUS_POLICY_NEVER.equals( selectAllOnFocusPolicy ) )
 			return;
 
 		if( !SELECT_ALL_ON_FOCUS_POLICY_ALWAYS.equals( selectAllOnFocusPolicy ) ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToggleButtonUI.java
Patch:
@@ -21,7 +21,6 @@
 import java.awt.Component;
 import java.awt.Graphics;
 import java.beans.PropertyChangeEvent;
-import java.util.Iterator;
 import java.util.Map;
 import javax.swing.AbstractButton;
 import javax.swing.JComponent;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatArrowButton.java
Patch:
@@ -37,7 +37,7 @@ public class FlatArrowButton
 	extends BasicArrowButton
 	implements UIResource
 {
-	public static final int DEFAULT_ARROW_WIDTH = 8;
+	public static final int DEFAULT_ARROW_WIDTH = 9;
 
 	protected boolean chevron;
 	protected Color foreground;
@@ -211,6 +211,6 @@ protected void paintArrow( Graphics2D g ) {
 		if( vert && parent instanceof JComponent && FlatUIUtils.hasRoundBorder( (JComponent) parent ) )
 			x -= scale( parent.getComponentOrientation().isLeftToRight() ? 1 : -1 );
 
-		FlatUIUtils.paintArrow( g, x, 0, getWidth(), getHeight(), getDirection(), chevron, arrowWidth, xOffset, yOffset );
+		FlatUIUtils.paintArrow( g, x, 0, getWidth(), getHeight(), getDirection(), chevron, getArrowWidth(), getXOffset(), getYOffset() );
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTabbedPaneUI.java
Patch:
@@ -1841,7 +1841,7 @@ public FlatTabAreaButton( int direction ) {
 			super( direction, arrowType,
 				FlatTabbedPaneUI.this.foreground, FlatTabbedPaneUI.this.disabledForeground,
 				null, buttonHoverBackground, null, buttonPressedBackground );
-			setArrowWidth( 10 );
+			setArrowWidth( 11 );
 		}
 
 		protected void updateStyle() {

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -539,6 +539,7 @@ void scrollBar() {
 			"maximumThumbSize", Dimension.class,
 			"allowsAbsolutePositioning", boolean.class,
 
+			"minimumButtonSize", Dimension.class,
 			"trackInsets", Insets.class,
 			"thumbInsets", Insets.class,
 			"trackArc", int.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -684,6 +684,7 @@ void scrollBar() {
 		ui.applyStyle( "maximumThumbSize: 1,2" );
 		ui.applyStyle( "allowsAbsolutePositioning: true" );
 
+		ui.applyStyle( "minimumButtonSize: 1,2" );
 		ui.applyStyle( "trackInsets: 1,2,3,4" );
 		ui.applyStyle( "thumbInsets: 1,2,3,4" );
 		ui.applyStyle( "trackArc: 5" );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatPaintingTest.java
Patch:
@@ -673,7 +673,7 @@ private void initComponents() {
 					panel5.add(arrowSizeLabel, "cell 0 2");
 
 					//---- arrowSizeSpinner ----
-					arrowSizeSpinner.setModel(new SpinnerNumberModel(8, 2, null, 1));
+					arrowSizeSpinner.setModel(new SpinnerNumberModel(9, 2, null, 1));
 					arrowSizeSpinner.addChangeListener(e -> arrowSizeChanged());
 					panel5.add(arrowSizeSpinner, "cell 1 2");
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuBarUI.java
Patch:
@@ -210,15 +210,15 @@ static boolean useUnifiedBackground( Component c ) {
 		// check whether:
 		// - TitlePane.unifiedBackground is true and
 		// - menu bar is the "main" menu bar and
-		// - window has custom decorations enabled
+		// - window root pane has custom decoration style
 
 		JRootPane rootPane;
 		// (not storing value of "TitlePane.unifiedBackground" in class to allow changing at runtime)
 		return UIManager.getBoolean( "TitlePane.unifiedBackground" ) &&
 			(rootPane = SwingUtilities.getRootPane( c )) != null &&
 			rootPane.getParent() instanceof Window &&
 			rootPane.getJMenuBar() == c &&
-			FlatNativeWindowBorder.hasCustomDecoration( (Window) rootPane.getParent() );
+			rootPane.getWindowDecorationStyle() != JRootPane.NONE;
 	}
 
 	//---- class TakeFocus ----------------------------------------------------

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -615,7 +615,7 @@ protected void updateMaximizedBounds() {
 			int maximizedWidth = screenBounds.width;
 			int maximizedHeight = screenBounds.height;
 
-			if( !isMaximizedBoundsFixed() ) {
+			if( SystemInfo.isWindows && !isMaximizedBoundsFixed() ) {
 				// on Java 8 to 14, maximized x,y are 0,0 based on all screens in a multi-screen environment
 				maximizedX = 0;
 				maximizedY = 0;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatDefaultsAddon.java
Patch:
@@ -26,7 +26,7 @@
  * Allows loading of additional .properties files from addon JARs.
  * {@link java.util.ServiceLoader} is used to load extensions of this class from addon JARs.
  * <p>
- * If you extend this class in a addon JAR, you also have to add a text file named
+ * If you extend this class in an addon JAR, you also have to add a text file named
  * {@code META-INF/services/com.formdev.flatlaf.FlatDefaultsAddon}
  * to the addon JAR. The file must contain a single line with the class name.
  * <p>
@@ -61,7 +61,7 @@ public void afterDefaultsLoading( LookAndFeel laf, UIDefaults defaults ) {
 
 	/**
 	 * Returns the priority used to sort addon loading.
-	 * The order is only important if you want overwrite UI defaults of other addons.
+	 * The order is only important if you want to overwrite UI defaults of other addons.
 	 * Lower numbers mean higher priority.
 	 * Returns 10000 by default.
 	 */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatIconColors.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Default color palette for action icons and object icons.
  * <p>
- * The idea is to use only this well defined set of colors in SVG icons and
+ * The idea is to use only this well-defined set of colors in SVG icons, and
  * then they are replaced at runtime to dark variants or to other theme colors.
  * Then a single SVG icon (light variant) can be used for dark themes too.
  * IntelliJ Platform uses this mechanism to allow themes to change IntelliJ Platform icons.
@@ -35,7 +35,7 @@
  * <p>
  * You may use these colors also in your application (outside of SVG icons), but do
  * not use the RGB values defined in this enum.<br>
- * Instead use {@code UIManager.getColor( FlatIconColors.ACTIONS_GREY.key )}.
+ * Instead, use {@code UIManager.getColor( FlatIconColors.ACTIONS_GREY.key )}.
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatInputMaps.java
Patch:
@@ -596,7 +596,7 @@ private static <T> T mac( T value, T macValue ) {
 	//---- class LazyInputMapEx -----------------------------------------------
 
 	/**
-	 * Lazily creates a input map.
+	 * Lazily creates an input map.
 	 * Similar to {@link UIDefaults.LazyInputMap}, but can use multiple bindings arrays.
 	 */
 	private static class LazyInputMapEx

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatSystemProperties.java
Patch:
@@ -34,7 +34,7 @@ public interface FlatSystemProperties
 	 * To replace the Java 9+ system scale factor, use system property "sun.java2d.uiScale",
 	 * which has the same syntax as this one.
 	 * <p>
-	 * Since FlatLaf 1.1.2: Scale factors less then 100% are allowed.
+	 * Since FlatLaf 1.1.2: Scale factors less than 100% are allowed.
 	 * <p>
 	 * <strong>Allowed Values</strong> e.g. {@code 1.5}, {@code 1.5x}, {@code 150%} or {@code 144dpi} (96dpi is 100%)<br>
 	 */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -175,7 +175,7 @@ private void applyProperties( UIDefaults defaults ) {
 		defaults.put( "Button.hoverBorderColor", defaults.get( "Button.focusedBorderColor" ) );
 		defaults.put( "HelpButton.hoverBorderColor", defaults.get( "Button.focusedBorderColor" ) );
 
-		// IDEA uses a SVG icon for the help button, but paints the background with Button.startBackground and Button.endBackground
+		// IDEA uses an SVG icon for the help button, but paints the background with Button.startBackground and Button.endBackground
 		Object helpButtonBackground = defaults.get( "Button.startBackground" );
 		Object helpButtonBorderColor = defaults.get( "Button.startBorderColor" );
 		if( helpButtonBackground == null )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/LinuxFontPolicy.java
Patch:
@@ -197,7 +197,7 @@ private static String mapFcName( String name ) {
 	}
 
 	/**
-	 * Gets the default font for KDE for KDE configuration files.
+	 * Gets the default font for KDE from KDE configuration files.
 	 *
 	 * The Swing fonts are not updated when the user changes system font size
 	 * (System Settings > Fonts > Force Font DPI). A application restart is necessary.

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -792,7 +792,7 @@ private static Object parseColorFunctions( String value, Function<String, String
 	 * Syntax: if(condition,trueValue,falseValue)
 	 * <p>
 	 * This "if" function is only used if the "if" is passed as parameter to another
-	 * color function. Otherwise the general "if" function is used.
+	 * color function. Otherwise, the general "if" function is used.
 	 */
 	private static Object parseColorIf( String value, List<String> params, Function<String, String> resolver, boolean reportError ) {
 		if( params.size() != 3 )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatAnimatedIcon.java
Patch:
@@ -23,13 +23,13 @@
 import com.formdev.flatlaf.util.AnimatedIcon;
 
 /**
- * Base class for animated icons that scales width and height, creates and initializes
+ * Base class for animated icons that scale width and height, creates and initializes
  * a scaled graphics context for icon painting.
  * <p>
  * Subclasses do not need to scale icon painting.
  * <p>
  * This class does not store any state information (needed for animation) in its instance.
- * Instead a client property is set on the painted component.
+ * Instead, a client property is set on the painted component.
  * This makes it possible to use a share icon instance for multiple components.
  *
  * @author Karl Tauber

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatAscendingSortIcon.java
Patch:
@@ -51,7 +51,7 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		boolean chevron = this.chevron;
 		Color sortIconColor = this.sortIconColor;
 
-		// Because this icons are always shared for all table headers,
+		// Because this icon is always shared for all table headers,
 		// get icon specific style from FlatTableHeaderUI.
 		JTableHeader tableHeader = (JTableHeader) SwingUtilities.getAncestorOfClass( JTableHeader.class, c );
 		if( tableHeader != null ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatTreeCollapsedIcon.java
Patch:
@@ -76,7 +76,7 @@ void rotate( Component c, Graphics2D g ) {
 	}
 
 	/**
-	 * Because this icons are always shared for all trees,
+	 * Because this icon is always shared for all trees,
 	 * get icon specific style from FlatTreeUI.
 	 */
 	static <T> T getStyleFromTreeUI( Component c, Function<FlatTreeUI, T> f ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/resources/EmptyPackage.java
Patch:
@@ -18,8 +18,8 @@
 
 /**
  * The only purpose of this file is to add a .class file to this package to make it non-empty.
- * Otherwise the compiler outputs a warning because this package is opend in module-info.java.
- * Also when using --patch-module (e.g. from an IDE), an error would occur for empty packages.
+ * Otherwise, the compiler outputs a warning because this package is opened in module-info.java.
+ * Also, when using --patch-module (e.g. from an IDE), an error would occur for empty packages.
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonBorder.java
Patch:
@@ -159,7 +159,7 @@ protected Paint getBorderColor( Component c ) {
 	public Insets getBorderInsets( Component c, Insets insets ) {
 		if( FlatButtonUI.isToolBarButton( c ) ) {
 			// In toolbars, use button margin only if explicitly set.
-			// Otherwise use toolbar margin specified in UI defaults.
+			// Otherwise, use toolbar margin specified in UI defaults.
 			Insets margin = (c instanceof AbstractButton)
 				? ((AbstractButton)c).getMargin()
 				: null;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -343,7 +343,7 @@ static boolean isDefaultButton( Component c ) {
 
 	/**
 	 * Returns true if the button has an icon but no text,
-	 * or it it does not have an icon and the text is either "..." or one character.
+	 * or it does not have an icon and the text is either "..." or one character.
 	 */
 	static boolean isIconOnlyOrSingleCharacterButton( Component c ) {
 		if( !(c instanceof JButton) && !(c instanceof JToggleButton) )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatCaret.java
Patch:
@@ -96,7 +96,7 @@ public void install( JTextComponent c ) {
 
 			// if text component is focused, then caret and selection are visible,
 			// but when switching theme, the component does not yet have
-			// an highlighter and the selection is not painted
+			// a highlighter and the selection is not painted
 			// --> make selection temporary invisible later, then the caret
 			//     adds selection highlights to the text component highlighter
 			if( isSelectionVisible() ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListCellBorder.java
Patch:
@@ -72,7 +72,7 @@ public void paintBorder( Component c, Graphics g, int x, int y, int width, int h
 	}
 
 	/**
-	 * Because this borders are always shared for all lists,
+	 * Because this border is always shared for all lists,
 	 * get border specific style from FlatListUI.
 	 */
 	static <T> T getStyleFromListUI( Component c, Function<FlatListUI, T> f ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListUI.java
Patch:
@@ -212,7 +212,7 @@ public Map<String, Class<?>> getStyleableInfos( JComponent c ) {
 	/**
 	 * Toggle selection colors from focused to inactive and vice versa.
 	 *
-	 * This is not a optimal solution but much easier than rewriting the whole paint methods.
+	 * This is not an optimal solution but much easier than rewriting the whole paint methods.
 	 *
 	 * Using a LaF specific renderer was avoided because often a custom renderer is
 	 * already used in applications. Then either the inactive colors are not used,

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemBorder.java
Patch:
@@ -35,7 +35,7 @@
 public class FlatMenuItemBorder
 	extends FlatMarginBorder
 {
-	// only used if parent menubar is not a instance of FlatMenuBarUI
+	// only used if parent menubar is not an instance of FlatMenuBarUI
 	private final Insets menuBarItemMargins = UIManager.getInsets( "MenuBar.itemMargins" );
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -143,7 +143,7 @@ private Popup getPopupForScreenOfOwner( Component owner, Component contents, int
 	 * <p>
 	 * On a dual screen setup, where screens use different scale factors, it may happen
 	 * that the window location changes when showing a heavy weight popup window.
-	 * E.g. when opening an dialog on the secondary screen and making combobox popup visible.
+	 * E.g. when opening a dialog on the secondary screen and making combobox popup visible.
 	 * <p>
 	 * This is a workaround for https://bugs.openjdk.java.net/browse/JDK-8224608
 	 */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -212,7 +212,7 @@ public Dimension getPreferredSize( JComponent c ) {
 		if( focusWidth > 0 ) {
 			// Increase preferred width and height if insets were explicitly reduced (e.g. with
 			// an EmptyBorder) and icon has a focus width, which is not included in icon size.
-			// Otherwise the component may be too small and outer focus border may be cut off.
+			// Otherwise, the component may be too small and outer focus border may be cut off.
 			Insets insets = c.getInsets( tempInsets );
 			size.width += Math.max( focusWidth - insets.left, 0 ) + Math.max( focusWidth - insets.right, 0 );
 			size.height += Math.max( focusWidth - insets.top, 0 ) + Math.max( focusWidth - insets.bottom, 0 );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -179,8 +179,8 @@ protected void installListeners( JRootPane root ) {
 		super.installListeners( root );
 
 		if( SystemInfo.isJava_9_orLater ) {
-			// On HiDPI screens, where scaling is used, there may be white lines at the
-			// bottom and at the right side of the window when it is initially shown.
+			// On HiDPI screens, where scaling is used, there may be white lines on the
+			// bottom and on the right side of the window when it is initially shown.
 			// This is very disturbing in dark themes, but hard to notice in light themes.
 			// Seems to be a rounding issue when Swing adds dirty region of window
 			// using RepaintManager.nativeAddDirtyRegion().

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSliderUI.java
Patch:
@@ -234,7 +234,7 @@ public int getBaseline( JComponent c, int width, int height ) {
 			return -1;
 
 		// use default font (instead of slider font) because the slider font size
-		// may be different to label font size, but we want align the track/thumb with labels
+		// may be different to label font size, but we want to align the track/thumb with labels
 		Font font = UIManager.getFont( "defaultFont" );
 		if( font == null )
 			font = slider.getFont();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -447,7 +447,7 @@ public Dimension preferredLayoutSize( Container parent ) {
 			Insets padding = scale( FlatSpinnerUI.this.padding );
 			Dimension editorSize = (editor != null) ? editor.getPreferredSize() : new Dimension( 0, 0 );
 
-			// the arrows width is the same as the inner height so that the arrows area is square
+			// the arrow buttons width is the same as the inner height so that the arrow buttons area is square
 			int minimumWidth = FlatUIUtils.minimumWidth( spinner, FlatSpinnerUI.this.minimumWidth );
 			int innerHeight = editorSize.height + padding.top + padding.bottom;
 			float focusWidth = FlatUIUtils.getBorderFocusWidth( spinner );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatStylingSupport.java
Patch:
@@ -359,7 +359,7 @@ private static Object parseValue( String key, String value ) {
 	 * @param key the name of the field
 	 * @param value the new value
 	 * @return the old value of the field
-	 * @throws UnknownStyleException if object does not have a annotated field with given name
+	 * @throws UnknownStyleException if object does not have an annotated field with given name
 	 * @throws IllegalArgumentException if value type does not fit to expected type
 	 */
 	public static Object applyToAnnotatedObject( Object obj, String key, Object value )
@@ -517,7 +517,7 @@ private static Object convertToEnum( Object value, Class<?> type )
 	 * @param key the name of the field
 	 * @param value the new value
 	 * @return the old value of the field
-	 * @throws UnknownStyleException if object does not have a annotated field with given name
+	 * @throws UnknownStyleException if object does not have an annotated field with given name
 	 * @throws IllegalArgumentException if value type does not fit to expected type
 	 */
 	public static Object applyToAnnotatedObjectOrComponent( Object obj, Object comp, String key, Object value )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTabbedPaneUI.java
Patch:
@@ -1983,7 +1983,7 @@ public void actionPerformed( ActionEvent e ) {
 		}
 
 		protected JMenuItem createTabMenuItem( int tabIndex ) {
-			// search for tab name in this places
+			// search for tab name in these places
 			//   1. tab title
 			//   2. text of label or text component in custom tab component (including children)
 			//   3. accessible name of tab

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableCellBorder.java
Patch:
@@ -72,7 +72,7 @@ public void paintBorder( Component c, Graphics g, int x, int y, int width, int h
 	}
 
 	/**
-	 * Because this borders are always shared for all tables,
+	 * Because this border is always shared for all tables,
 	 * get border specific style from FlatTableUI.
 	 */
 	static <T> T getStyleFromTableUI( Component c, Function<FlatTableUI, T> f ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableUI.java
Patch:
@@ -288,7 +288,7 @@ public Map<String, Class<?>> getStyleableInfos( JComponent c ) {
 	/**
 	 * Toggle selection colors from focused to inactive and vice versa.
 	 *
-	 * This is not a optimal solution but much easier than rewriting the whole paint methods.
+	 * This is not an optimal solution but much easier than rewriting the whole paint methods.
 	 *
 	 * Using a LaF specific renderer was avoided because often a custom renderer is
 	 * already used in applications. Then either the inactive colors are not used,

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTextFieldUI.java
Patch:
@@ -369,7 +369,7 @@ static void updateBackground( JTextComponent c, Color background,
 		if( !(oldBackground instanceof UIResource) )
 			return;
 
-		// do not update background if it currently has a unknown color (assigned from outside)
+		// do not update background if it currently has an unknown color (assigned from outside)
 		if( oldBackground != background &&
 			oldBackground != disabledBackground &&
 			oldBackground != inactiveBackground &&
@@ -610,7 +610,7 @@ protected Rectangle getVisibleEditorRect() {
 	 * Returns the rectangle used to paint leading and trailing icons.
 	 * It invokes {@code super.getVisibleEditorRect()} and reduces left and/or
 	 * right margin if the text field has leading or trailing icons or components.
-	 * Also the preferred widths of leading and trailing components are removed.
+	 * Also, the preferred widths of leading and trailing components are removed.
 	 *
 	 * @since 2
 	 */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolBarUI.java
Patch:
@@ -282,7 +282,7 @@ private static boolean canBeFocusOwner( Component c ) {
 			return comboBox.getUI().isFocusTraversable( comboBox );
 		}
 
-		// check whether component has a empty input map to skip components that
+		// check whether component has an empty input map to skip components that
 		// are focusable, but do nothing when focused (e.g. JLabel)
 		// see LayoutFocusTraversalPolicy.accept()
 		if( c instanceof JComponent ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatWindowsNativeWindowBorder.java
Patch:
@@ -155,7 +155,7 @@ public boolean hasCustomDecoration( Window window ) {
 	}
 
 	/**
-	 * Tell the window whether the application wants use custom decorations.
+	 * Tell the window whether the application wants to use custom decorations.
 	 * If {@code true}, the Windows 10 title bar is hidden (including minimize,
 	 * maximize and close buttons), but not the resize borders (including drop shadow).
 	 */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/AnimatedIcon.java
Patch:
@@ -59,7 +59,7 @@
  * </pre>
  *
  * Animation works only if the component passed to {@link #paintIcon(Component, Graphics, int, int)}
- * is a instance of {@link JComponent}.
+ * is an instance of {@link JComponent}.
  * A client property is set on the component to store the animation state.
  *
  * @author Karl Tauber

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/DerivedColor.java
Patch:
@@ -47,7 +47,7 @@ public Color derive( Color baseColor ) {
 		Color result = ColorFunctions.applyFunctions( baseColor, functions );
 
 		// if the result is equal to the default color, then the original base color
-		// was passed and we can cache this to avoid color calculations
+		// was passed, and we can cache this to avoid color calculations
 		if( !hasBaseOfDefaultColor && result.getRGB() == this.getRGB() ) {
 			hasBaseOfDefaultColor = true;
 			baseOfDefaultColorRGB = baseColor.getRGB();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/HSLColor.java
Patch:
@@ -76,7 +76,7 @@ public HSLColor(float h, float s, float l, float alpha)
 	}
 
 	/**
-	 *  Create a HSLColor object using an an array containing the
+	 *  Create a HSLColor object using an array containing the
 	 *  individual HSL values and with a default alpha value of 1.
 	 *
 	 *  @param hsl  array containing HSL values
@@ -87,7 +87,7 @@ public HSLColor(float[] hsl)
 	}
 
 	/**
-	 *  Create a HSLColor object using an an array containing the
+	 *  Create a HSLColor object using an array containing the
 	 *  individual HSL values.
 	 *
 	 *  @param hsl  array containing HSL values

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/HiDPIUtils.java
Patch:
@@ -114,7 +114,7 @@ private static boolean useTextYCorrection() {
 	 * painted too far down on some operating systems.
 	 * The higher the system scale factor is, the more.
 	 * <p>
-	 * This methods computes a correction value for the Y position.
+	 * This method computes a correction value for the Y position.
 	 */
 	public static float computeTextYCorrection( Graphics2D g ) {
 		if( !useTextYCorrection() || !SystemInfo.isWindows )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/NativeLibrary.java
Patch:
@@ -195,7 +195,7 @@ private static Path getTempDir() throws IOException {
 			// for loaded native libraries, they will be deleted on next application startup.
 			// The default temporary directory may contain hundreds or thousands of files.
 			// To make searching for "marked for deletion" files as fast as possible,
-			// use a sub directory that contains only our temporary native libraries.
+			// use a subdirectory that contains only our temporary native libraries.
 			tmpdir += "\\flatlaf.temp";
 		}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/UIScale.java
Patch:
@@ -103,7 +103,7 @@ public static boolean isSystemScalingEnabled() {
 			// Java 9 and later supports per-monitor scaling
 			jreHiDPI = true;
 		} else if( SystemInfo.isJetBrainsJVM ) {
-			// IntelliJ IDEA ships its own JetBrains Java 8 JRE that may supports per-monitor scaling
+			// IntelliJ IDEA ships its own JetBrains Java 8 JRE that may support per-monitor scaling
 			// see com.intellij.ui.JreHiDpiUtil.isJreHiDPIEnabled()
 			try {
 				GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
@@ -411,7 +411,7 @@ public static void scaleGraphics( Graphics2D g ) {
 	 * Scales the given dimension with the user scale factor.
 	 * <p>
 	 * If user scale factor is 1, then the given dimension is simply returned.
-	 * Otherwise a new instance of {@link Dimension} or {@link DimensionUIResource}
+	 * Otherwise, a new instance of {@link Dimension} or {@link DimensionUIResource}
 	 * is returned, depending on whether the passed dimension implements {@link UIResource}.
 	 */
 	public static Dimension scale( Dimension dimension ) {
@@ -427,7 +427,7 @@ public static Dimension scale( Dimension dimension ) {
 	 * Scales the given insets with the user scale factor.
 	 * <p>
 	 * If user scale factor is 1, then the given insets is simply returned.
-	 * Otherwise a new instance of {@link Insets} or {@link InsetsUIResource}
+	 * Otherwise, a new instance of {@link Insets} or {@link InsetsUIResource}
 	 * is returned, depending on whether the passed dimension implements {@link UIResource}.
 	 */
 	public static Insets scale( Insets insets ) {

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatSVGIcon.java
Patch:
@@ -480,7 +480,7 @@ private void update() {
 
 			if( url == null ) {
 				loadFailed = true;
-				LoggingFacade.INSTANCE.logSevere( "FlatSVGIcon: resource '" + name + "' not found (if using Java modules, check whether icon package is opened in module-info.java)", null );
+				LoggingFacade.INSTANCE.logConfig( "FlatSVGIcon: resource '" + name + "' not found (if using Java modules, check whether icon package is opened in module-info.java)", null );
 				return;
 			}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatHelpButtonIcon.java
Patch:
@@ -96,8 +96,8 @@ protected void paintIcon( Component c, Graphics2D g2 ) {
 			</svg>
 		*/
 
-		boolean enabled = c.isEnabled();
-		boolean focused = FlatUIUtils.isPermanentFocusOwner( c );
+		boolean enabled = c == null || c.isEnabled();
+		boolean focused = c != null && FlatUIUtils.isPermanentFocusOwner( c );
 
 		float xy = 0.5f;
 		float wh = iconSize() - 1;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatMenuArrowIcon.java
Patch:
@@ -63,7 +63,7 @@ public Map<String, Class<?>> getStyleableInfos() {
 
 	@Override
 	protected void paintIcon( Component c, Graphics2D g ) {
-		if( !c.getComponentOrientation().isLeftToRight() )
+		if( c != null && !c.getComponentOrientation().isLeftToRight() )
 			g.rotate( Math.toRadians( 180 ), width / 2., height / 2. );
 
 		g.setColor( getArrowColor( c ) );
@@ -82,7 +82,7 @@ protected Color getArrowColor( Component c ) {
 		if( c instanceof JMenu && ((JMenu)c).isSelected() && !isUnderlineSelection() )
 			return selectionForeground;
 
-		return c.isEnabled() ? arrowColor : disabledArrowColor;
+		return c == null || c.isEnabled() ? arrowColor : disabledArrowColor;
 	}
 
 	protected boolean isUnderlineSelection() {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -573,6 +573,9 @@ protected boolean isCustomBackground( Color bg ) {
 	public static Color buttonStateColor( Component c, Color enabledColor, Color disabledColor,
 		Color focusedColor, Color hoverColor, Color pressedColor )
 	{
+		if( c == null )
+			return enabledColor;
+
 		if( !c.isEnabled() )
 			return disabledColor;
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -354,6 +354,7 @@ protected PropertyChangeListener createPropertyChangeListener() {
 						break;
 
 					case COMPONENT_ROUND_RECT:
+					case OUTLINE:
 						comboBox.repaint();
 						break;
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -538,6 +538,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 					break;
 
 				case FlatClientProperties.COMPONENT_ROUND_RECT:
+				case FlatClientProperties.OUTLINE:
 					spinner.repaint();
 					break;
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTextFieldUI.java
Patch:
@@ -232,6 +232,7 @@ protected void propertyChange( PropertyChangeEvent e ) {
 		switch( e.getPropertyName() ) {
 			case PLACEHOLDER_TEXT:
 			case COMPONENT_ROUND_RECT:
+			case OUTLINE:
 			case TEXT_FIELD_PADDING:
 				c.repaint();
 				break;

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponentsTest.java
Patch:
@@ -162,7 +162,6 @@ private void outlineChanged() {
 				((JComponent)c).putClientProperty( FlatClientProperties.OUTLINE, outline );
 		} );
 
-		repaint();
 		textField1.requestFocusInWindow();
 	}
 

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatInspector.java
Patch:
@@ -475,7 +475,7 @@ else if( c instanceof JToolBar )
 			appendRow( buf, "Border", toString( ((JComponent)c).getBorder(), classHierarchy ) );
 
 		appendRow( buf, "Background", toString( c.getBackground() ) + (c.isBackgroundSet() ? "" : "  NOT SET") );
-		appendRow( buf, "Foreground", toString( c.getForeground() ) + (c.isBackgroundSet() ? "" : "  NOT SET") );
+		appendRow( buf, "Foreground", toString( c.getForeground() ) + (c.isForegroundSet() ? "" : "  NOT SET") );
 		appendRow( buf, "Font", toString( c.getFont() ) + (c.isFontSet() ? "" : "  NOT SET") );
 
 		if( c instanceof JComponent ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPasswordFieldUI.java
Patch:
@@ -291,7 +291,9 @@ protected void installRevealButton() {
 	/** @since 2 */
 	protected JToggleButton createRevealButton() {
 		JToggleButton button = new JToggleButton( revealIcon );
+		button.setName( "PasswordField.revealButton" );
 		prepareLeadingOrTrailingComponent( button );
+		button.putClientProperty( FlatClientProperties.STYLE_CLASS, "inTextField revealButton" );
 		if( FlatClientProperties.clientPropertyBoolean( getComponent(), KEY_REVEAL_SELECTED, false ) ) {
 			button.setSelected( true );
 			updateEchoChar( true );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTextFieldUI.java
Patch:
@@ -764,6 +764,7 @@ protected void uninstallClearButton() {
 	/** @since 2 */
 	protected JComponent createClearButton() {
 		JButton button = new JButton();
+		button.setName( "TextField.clearButton" );
 		button.putClientProperty( STYLE_CLASS, "clearButton" );
 		button.putClientProperty( BUTTON_TYPE, BUTTON_TYPE_TOOLBAR_BUTTON );
 		button.setCursor( Cursor.getDefaultCursor() );
@@ -937,6 +938,7 @@ public void invalidateLayout( Container target ) {
 				((LayoutManager2)delegate).invalidateLayout( target );
 		}
 	}
+
 	//---- class FlatDocumentListener -----------------------------------------
 
 	private class FlatDocumentListener

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -52,6 +52,7 @@ public class SystemInfo
 	public static final boolean isJava_11_orLater;
 	public static final boolean isJava_15_orLater;
 	/** @since 2 */ public static final boolean isJava_17_orLater;
+	/** @since 2 */ public static final boolean isJava_18_orLater;
 
 	// Java VMs
 	public static final boolean isJetBrainsJVM;
@@ -93,6 +94,7 @@ public class SystemInfo
 		isJava_11_orLater = (javaVersion >= toVersion( 11, 0, 0, 0 ));
 		isJava_15_orLater = (javaVersion >= toVersion( 15, 0, 0, 0 ));
 		isJava_17_orLater = (javaVersion >= toVersion( 17, 0, 0, 0 ));
+		isJava_18_orLater = (javaVersion >= toVersion( 18, 0, 0, 0 ));
 
 		// Java VMs
 		isJetBrainsJVM = System.getProperty( "java.vm.vendor", "Unknown" )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/JBRCustomDecorations.java
Patch:
@@ -298,7 +298,7 @@ public void paintBorder( Component c, Graphics g, int x, int y, int width, int h
 		}
 
 		private void paintImpl( Graphics2D g, int x, int y, int width, int height, double scaleFactor ) {
-			g.drawRect( x, y, width - 1, 0 );
+			g.fillRect( x, y, width, 1 );
 		}
 
 		void repaintBorder( Component c ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatNativeWindowBorder.java
Patch:
@@ -56,7 +56,7 @@ public class FlatNativeWindowBorder
 	private static final boolean canUseJBRCustomDecorations =
 		canUseWindowDecorations &&
 		SystemInfo.isJetBrainsJVM_11_orLater &&
-		FlatSystemProperties.getBoolean( FlatSystemProperties.USE_JETBRAINS_CUSTOM_DECORATIONS, true );
+		FlatSystemProperties.getBoolean( FlatSystemProperties.USE_JETBRAINS_CUSTOM_DECORATIONS, false );
 
 	private static Boolean supported;
 	private static Provider nativeProvider;

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatFindReplaceBar.java
Patch:
@@ -304,6 +304,7 @@ private void initComponents() {
 		//---- findField ----
 		findField.setColumns(16);
 		findField.setSelectAllOnFocusPolicy(FlatTextField.SelectAllOnFocusPolicy.always);
+		findField.setShowClearButton(true);
 		findField.addActionListener(e -> find());
 		add(findField, "cell 1 0");
 
@@ -365,6 +366,7 @@ private void initComponents() {
 		//---- replaceField ----
 		replaceField.setColumns(16);
 		replaceField.setSelectAllOnFocusPolicy(FlatTextField.SelectAllOnFocusPolicy.always);
+		replaceField.setShowClearButton(true);
 		add(replaceField, "cell 1 1");
 
 		//======== toolBar1 ========

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -398,7 +398,8 @@ void passwordField() {
 
 		Map<String, Class<?>> expected = new LinkedHashMap<>();
 		expectedMap( expected,
-			"showCapsLock", boolean.class
+			"showCapsLock", boolean.class,
+			"showRevealButton", boolean.class
 		);
 
 		// FlatPasswordFieldUI extends FlatTextFieldUI

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -551,6 +551,7 @@ void passwordField() {
 		textField( ui );
 
 		ui.applyStyle( "showCapsLock: true" );
+		ui.applyStyle( "showRevealButton: true" );
 
 		// capsLockIcon
 		ui.applyStyle( "capsLockIconColor: #fff" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatEditorPaneUI.java
Patch:
@@ -44,8 +44,8 @@
  * <!-- BasicEditorPaneUI -->
  *
  * @uiDefault EditorPane.font					Font
- * @uiDefault EditorPane.background				Color	also used if not editable
- * @uiDefault EditorPane.foreground				Color
+ * @uiDefault EditorPane.background				Color
+ * @uiDefault EditorPane.foreground				Color	also used if not editable
  * @uiDefault EditorPane.caretForeground		Color
  * @uiDefault EditorPane.selectionBackground	Color
  * @uiDefault EditorPane.selectionForeground	Color

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListCellBorder.java
Patch:
@@ -37,7 +37,7 @@
 public class FlatListCellBorder
 	extends FlatLineBorder
 {
-	protected boolean showCellFocusIndicator = UIManager.getBoolean( "List.showCellFocusIndicator" );
+	/** @since 2 */ protected boolean showCellFocusIndicator = UIManager.getBoolean( "List.showCellFocusIndicator" );
 
 	private Component c;
 
@@ -113,7 +113,7 @@ public static class Focused
 
 	/**
 	 * Border for selected cell that uses margins and paints focus indicator border
-	 * if enabled (List.showCellFocusIndicator=true) and exactly one item is selected.
+	 * if enabled (List.showCellFocusIndicator=true) and multiple items are selected.
 	 */
 	public static class Selected
 		extends FlatListCellBorder
@@ -125,7 +125,7 @@ public void paintBorder( Component c, Graphics g, int x, int y, int width, int h
 			if( !showCellFocusIndicator )
 				return;
 
-			// paint focus indicator border only if exactly one item is selected
+			// paint focus indicator border only if multiple items are selected
 			JList<?> list = (JList<?>) SwingUtilities.getAncestorOfClass( JList.class, c );
 			if( list != null && list.getMinSelectionIndex() == list.getMaxSelectionIndex() )
 				return;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListUI.java
Patch:
@@ -78,9 +78,9 @@ public class FlatListUI
 	@Styleable protected Color selectionInactiveForeground;
 
 	// for FlatListCellBorder
-	@Styleable protected Insets cellMargins;
-	@Styleable protected Color cellFocusColor;
-	@Styleable protected boolean showCellFocusIndicator;
+	/** @since 2 */ @Styleable protected Insets cellMargins;
+	/** @since 2 */ @Styleable protected Color cellFocusColor;
+	/** @since 2 */ @Styleable protected Boolean showCellFocusIndicator;
 
 	private Map<String, Object> oldStyleValues;
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemRenderer.java
Patch:
@@ -62,6 +62,8 @@
  * @uiDefault MenuItem.textNoAcceleratorGap							int
  * @uiDefault MenuItem.acceleratorArrowGap							int
  * @uiDefault MenuItem.checkBackground								Color
+ * @uiDefault MenuItem.checkMargins									Insets
+ * @uiDefault MenuItem.selectionType								String	null (default) or underline
  * @uiDefault MenuItem.underlineSelectionBackground					Color
  * @uiDefault MenuItem.underlineSelectionCheckBackground			Color
  * @uiDefault MenuItem.underlineSelectionColor						Color

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatScrollBarUI.java
Patch:
@@ -47,7 +47,7 @@
  * <!-- BasicScrollBarUI -->
  *
  * @uiDefault ScrollBar.background			Color
- * @uiDefault ScrollBar.foreground			Color
+ * @uiDefault ScrollBar.foreground			Color	unused
  * @uiDefault ScrollBar.track				Color
  * @uiDefault ScrollBar.thumb				Color
  * @uiDefault ScrollBar.width				int

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableCellBorder.java
Patch:
@@ -37,7 +37,7 @@
 public class FlatTableCellBorder
 	extends FlatLineBorder
 {
-	protected boolean showCellFocusIndicator = UIManager.getBoolean( "Table.showCellFocusIndicator" );
+	/** @since 2 */ protected boolean showCellFocusIndicator = UIManager.getBoolean( "Table.showCellFocusIndicator" );
 
 	private Component c;
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableHeaderBorder.java
Patch:
@@ -141,8 +141,8 @@ protected boolean isDraggedColumn( JTableHeader header, int x ) {
 	protected boolean hideTrailingVerticalLine( JTableHeader header ) {
 		if( header.getUI() instanceof FlatTableHeaderUI ) {
 			FlatTableHeaderUI ui = (FlatTableHeaderUI) header.getUI();
-			if( ui.showTrailingVerticalLine )
-				return false;
+			if( ui.showTrailingVerticalLine != null )
+				return !ui.showTrailingVerticalLine;
 		}
 
 		if( showTrailingVerticalLine )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableUI.java
Patch:
@@ -108,9 +108,9 @@ public class FlatTableUI
 	@Styleable protected Color selectionInactiveForeground;
 
 	// for FlatTableCellBorder
-	@Styleable protected Insets cellMargins;
-	@Styleable protected Color cellFocusColor;
-	@Styleable protected boolean showCellFocusIndicator;
+	/** @since 2 */ @Styleable protected Insets cellMargins;
+	/** @since 2 */ @Styleable protected Color cellFocusColor;
+	/** @since 2 */ @Styleable protected Boolean showCellFocusIndicator;
 
 	private boolean oldShowHorizontalLines;
 	private boolean oldShowVerticalLines;

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -257,7 +257,7 @@ void list() {
 			// FlatListCellBorder
 			"cellMargins", Insets.class,
 			"cellFocusColor", Color.class,
-			"showCellFocusIndicator", boolean.class
+			"showCellFocusIndicator", Boolean.class
 		);
 
 		assertMapEquals( expected, ui.getStyleableInfos( c ) );
@@ -760,7 +760,7 @@ void table() {
 			// FlatTableCellBorder
 			"cellMargins", Insets.class,
 			"cellFocusColor", Color.class,
-			"showCellFocusIndicator", boolean.class
+			"showCellFocusIndicator", Boolean.class
 		);
 
 		assertMapEquals( expected, ui.getStyleableInfos( c ) );
@@ -779,7 +779,7 @@ void tableHeader() {
 			// FlatTableHeaderBorder
 			"cellMargins", Insets.class,
 			"separatorColor", Color.class,
-			"showTrailingVerticalLine", boolean.class,
+			"showTrailingVerticalLine", Boolean.class,
 
 			// FlatAscendingSortIcon and FlatDescendingSortIcon
 			"arrowType", String.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -386,6 +386,7 @@ void panel() {
 		FlatPanelUI ui = (FlatPanelUI) c.getUI();
 
 		Map<String, Class<?>> expected = expectedMap(
+			"arc", int.class
 		);
 
 		assertMapEquals( expected, ui.getStyleableInfos( c ) );

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -529,6 +529,8 @@ void panel() {
 		JPanel c = new JPanel();
 		FlatPanelUI ui = (FlatPanelUI) c.getUI();
 
+		ui.applyStyle( c, "arc: 8" );
+
 		// JComponent properties
 		ui.applyStyle( c, "background: #fff" );
 		ui.applyStyle( c, "foreground: #fff" );

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatColorPipette.java
Patch:
@@ -194,7 +194,7 @@ public Magnifier( Window owner, Robot robot ) {
 
 			zoom = UIScale.scale( 16 );
 
-			getRootPane().setBorder( new FlatLineBorder( new Insets( 2, 2, 2, 2 ), Color.red, 2 ) );
+			getRootPane().setBorder( new FlatLineBorder( new Insets( 2, 2, 2, 2 ), Color.red, 2, 0 ) );
 
 			view = new MagnifierView();
 			view.setPreferredSize( new Dimension( pixels * zoom, pixels * zoom ) );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatCheckBoxMenuItemUI.java
Patch:
@@ -89,6 +89,7 @@ protected void installDefaults() {
 	protected void uninstallDefaults() {
 		super.uninstallDefaults();
 
+		FlatMenuItemRenderer.clearClientProperties( menuItem.getParent() );
 		renderer = null;
 		oldStyleValues = null;
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemUI.java
Patch:
@@ -89,6 +89,7 @@ protected void installDefaults() {
 	protected void uninstallDefaults() {
 		super.uninstallDefaults();
 
+		FlatMenuItemRenderer.clearClientProperties( menuItem.getParent() );
 		renderer = null;
 		oldStyleValues = null;
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuUI.java
Patch:
@@ -111,6 +111,7 @@ protected void installDefaults() {
 	protected void uninstallDefaults() {
 		super.uninstallDefaults();
 
+		FlatMenuItemRenderer.clearClientProperties( menuItem.getParent() );
 		renderer = null;
 		oldStyleValues = null;
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonMenuItemUI.java
Patch:
@@ -89,6 +89,7 @@ protected void installDefaults() {
 	protected void uninstallDefaults() {
 		super.uninstallDefaults();
 
+		FlatMenuItemRenderer.clearClientProperties( menuItem.getParent() );
 		renderer = null;
 		oldStyleValues = null;
 	}

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -346,6 +346,7 @@ private void menuItem( Map<String, Class<?>> expected ) {
 
 	private void menuItemRenderer( Map<String, Class<?>> expected ) {
 		expectedMap( expected,
+			"verticallyAlignText", boolean.class,
 			"minimumWidth", int.class,
 			"minimumIconSize", Dimension.class,
 			"textAcceleratorGap", int.class,

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -495,6 +495,7 @@ private void menuItem( Consumer<String> applyStyle ) {
 	}
 
 	private void menuItemRenderer( Consumer<String> applyStyle ) {
+		applyStyle.accept( "verticallyAlignText: false" );
 		applyStyle.accept( "minimumWidth: 10" );
 		applyStyle.accept( "minimumIconSize: 16,16" );
 		applyStyle.accept( "textAcceleratorGap: 28" );

File: flatlaf-swingx/src/main/module-info/module-info.java
Patch:
@@ -23,6 +23,7 @@
 	requires com.formdev.flatlaf;
 
 	exports com.formdev.flatlaf.swingx;
+	exports com.formdev.flatlaf.swingx.icons;
 	exports com.formdev.flatlaf.swingx.ui;
 
 	// this allows com.formdev.flatlaf.FlatDefaultsAddon to read .properties files

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponents2Test.java
Patch:
@@ -117,6 +117,7 @@ public static void main( String[] args ) {
 		ColorHighlighter rollover = new ColorHighlighter( HighlightPredicate.ROLLOVER_ROW, Color.cyan, null );
 		Highlighter shading = new ShadingColorHighlighter( new HighlightPredicate.ColumnHighlightPredicate( 1 ) );
 		xTable1.setHighlighters( simpleStriping, magenta, rollover, shading );
+		xTable1.setColumnControlVisible( true );
 
 		// JXTreeTable
 		xTreeTable1.setTreeTableModel( new FileSystemModel( new File( "." ) ) );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -263,7 +263,7 @@ protected void propertyChange( AbstractButton b, PropertyChangeEvent e ) {
 			case STYLE_CLASS:
 				if( shared && FlatStylingSupport.hasStyleProperty( b ) ) {
 					// unshare component UI if necessary
-					// updateUI() invokes applyStyle() from installUI()
+					// updateUI() invokes installStyle() from installUI()
 					b.updateUI();
 				} else
 					installStyle( b );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatLabelUI.java
Patch:
@@ -122,7 +122,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 			JLabel label = (JLabel) e.getSource();
 			if( shared && FlatStylingSupport.hasStyleProperty( label ) ) {
 				// unshare component UI if necessary
-				// updateUI() invokes applyStyle() from installUI()
+				// updateUI() invokes installStyle() from installUI()
 				label.updateUI();
 			} else
 				installStyle( label );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -139,7 +139,7 @@ protected void propertyChange( AbstractButton b, PropertyChangeEvent e ) {
 			case FlatClientProperties.STYLE_CLASS:
 				if( shared && FlatStylingSupport.hasStyleProperty( b ) ) {
 					// unshare component UI if necessary
-					// updateUI() invokes applyStyle() from installUI()
+					// updateUI() invokes installStyle() from installUI()
 					b.updateUI();
 				} else
 					installStyle( b );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSeparatorUI.java
Patch:
@@ -125,7 +125,7 @@ protected void uninstallListeners( JSeparator s ) {
 	private void stylePropertyChange( JSeparator s ) {
 		if( shared && FlatStylingSupport.hasStyleProperty( s ) ) {
 			// unshare component UI if necessary
-			// updateUI() invokes applyStyle() from installUI()
+			// updateUI() invokes installStyle() from installUI()
 			s.updateUI();
 		} else
 			installStyle( s );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolBarSeparatorUI.java
Patch:
@@ -121,7 +121,7 @@ protected void uninstallListeners( JSeparator s ) {
 	private void stylePropertyChange( JSeparator s ) {
 		if( shared && FlatStylingSupport.hasStyleProperty( s ) ) {
 			// unshare component UI if necessary
-			// updateUI() invokes applyStyle() from installUI()
+			// updateUI() invokes installStyle() from installUI()
 			s.updateUI();
 		} else
 			installStyle( s );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatFontsTest.java
Patch:
@@ -86,6 +86,7 @@ private void familyChanged() {
 		for( Map.Entry<String, Font> e : info.fonts.entrySet() ) {
 			JLabel label = new JLabel( e.getKey() );
 			label.setFont( e.getValue().deriveFont( (float) UIScale.scale( 36 ) ) );
+			label.setToolTipText( e.getValue().toString() );
 			previewPanel.add( label, "wrap" );
 		}
 

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponentsTest.java
Patch:
@@ -1621,6 +1621,7 @@ private void initComponents() {
 //		customRenderer.setBorder( new LineBorder( Color.red ) );
 //		comboBox1.setRenderer( customRenderer );
 //		comboBox3.setRenderer( customRenderer );
+//		comboBox5.setRenderer( new DefaultListCellRenderer() );
 
 		// for testing issue #382
 //		spinner1.setModel( new SpinnerNumberModel( 0, null, 100, 1 ) );

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatInspector.java
Patch:
@@ -474,9 +474,9 @@ else if( c instanceof JToolBar )
 		if( c instanceof JComponent )
 			appendRow( buf, "Border", toString( ((JComponent)c).getBorder(), classHierarchy ) );
 
-		appendRow( buf, "Background", toString( c.getBackground() ) );
-		appendRow( buf, "Foreground", toString( c.getForeground() ) );
-		appendRow( buf, "Font", toString( c.getFont() ) );
+		appendRow( buf, "Background", toString( c.getBackground() ) + (c.isBackgroundSet() ? "" : "  NOT SET") );
+		appendRow( buf, "Foreground", toString( c.getForeground() ) + (c.isBackgroundSet() ? "" : "  NOT SET") );
+		appendRow( buf, "Font", toString( c.getFont() ) + (c.isFontSet() ? "" : "  NOT SET") );
 
 		if( c instanceof JComponent ) {
 			try {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuBarBorder.java
Patch:
@@ -53,7 +53,7 @@ public Map<String, Class<?>> getStyleableInfos() {
 
 	@Override
 	public void paintBorder( Component c, Graphics g, int x, int y, int width, int height ) {
-		if( !showBottomSeparator() )
+		if( !showBottomSeparator( c ) )
 			return;
 
 		float lineHeight = scale( (float) 1 );
@@ -73,7 +73,7 @@ public Insets getBorderInsets( Component c, Insets insets ) {
 	}
 
 	/** @since 2 */
-	protected boolean showBottomSeparator() {
-		return !UIManager.getBoolean( "TitlePane.unifiedBackground" );
+	protected boolean showBottomSeparator( Component c ) {
+		return !FlatMenuBarUI.useUnifiedBackground( c );
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -870,7 +870,7 @@ public void paintBorder( Component c, Graphics g, int x, int y, int width, int h
 			Border menuBarBorder = getMenuBarBorder();
 			if( menuBarBorder != null ) {
 				// if menu bar is embedded, paint menu bar border
-				menuBarBorder.paintBorder( c, g, x, y, width, height );
+				menuBarBorder.paintBorder( rootPane.getJMenuBar(), g, x, y, width, height );
 			} else if( borderColor != null && (rootPane.getJMenuBar() == null || !rootPane.getJMenuBar().isVisible()) ) {
 				// paint border between title pane and content if border color is specified
 				float lineHeight = UIScale.scale( (float) 1 );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -421,7 +421,7 @@ public UIDefaults getDefaults() {
 		// (using defaults.remove() to avoid that lazy value is resolved and icon loaded here)
 		Object icon = defaults.remove( "InternalFrame.icon" );
 		defaults.put( "InternalFrame.icon", icon );
-		defaults.put( "TitlePane.icon", icon );
+		defaults.put( "TitlePane.icon", icon ); // no longer used, but keep for compatibility
 
 		// get addons and sort them by priority
 		ServiceLoader<FlatDefaultsAddon> addonLoader = ServiceLoader.load( FlatDefaultsAddon.class );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -751,6 +751,8 @@ static List<Object> getCustomDefaultsSources() {
 	 * and can therefore override all UI defaults.
 	 * <p>
 	 * Invoke this method before setting the look and feel.
+	 * <p>
+	 * If using Java modules, the package must be opened in {@code module-info.java}.
 	 *
 	 * @param packageName a package name (e.g. "com.myapp.resources")
 	 */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -508,7 +508,7 @@ protected void menuBarChanged() {
 
 	protected void menuBarLayouted() {
 		updateNativeTitleBarHeightAndHitTestSpotsLater();
-		revalidate();
+		doLayout();
 	}
 
 /*debug

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -46,6 +46,7 @@ public class SystemInfo
 	public static final boolean isJava_9_orLater;
 	public static final boolean isJava_11_orLater;
 	public static final boolean isJava_15_orLater;
+	/** @since 2 */ public static final boolean isJava_17_orLater;
 
 	// Java VMs
 	public static final boolean isJetBrainsJVM;
@@ -82,6 +83,7 @@ public class SystemInfo
 		isJava_9_orLater = (javaVersion >= toVersion( 9, 0, 0, 0 ));
 		isJava_11_orLater = (javaVersion >= toVersion( 11, 0, 0, 0 ));
 		isJava_15_orLater = (javaVersion >= toVersion( 15, 0, 0, 0 ));
+		isJava_17_orLater = (javaVersion >= toVersion( 17, 0, 0, 0 ));
 
 		// Java VMs
 		isJetBrainsJVM = System.getProperty( "java.vm.vendor", "Unknown" )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -835,7 +835,7 @@ void install( Component c ) {
 
 			// remember old border and replace it
 			rendererBorder = jc.getBorder();
-			rendererComponent.setBorder( this );
+			jc.setBorder( this );
 		}
 
 		/**

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatCaret.java
Patch:
@@ -108,7 +108,7 @@ public void mouseReleased( MouseEvent e ) {
 	protected void selectAllOnFocusGained() {
 		JTextComponent c = getComponent();
 		Document doc = c.getDocument();
-		if( doc == null || !c.isEnabled() || !c.isEditable() )
+		if( doc == null || !c.isEnabled() || !c.isEditable() || FlatUIUtils.isCellEditor( c ) )
 			return;
 
 		Object selectAllOnFocusPolicy = c.getClientProperty( SELECT_ALL_ON_FOCUS_POLICY );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -508,7 +508,7 @@ protected void menuBarChanged() {
 
 	protected void menuBarLayouted() {
 		updateNativeTitleBarHeightAndHitTestSpotsLater();
-		revalidate();
+		doLayout();
 	}
 
 /*debug

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -46,7 +46,7 @@ public class SystemInfo
 	public static final boolean isJava_9_orLater;
 	public static final boolean isJava_11_orLater;
 	public static final boolean isJava_15_orLater;
-	public static final boolean isJava_17_orLater;
+	/** @since 2 */ public static final boolean isJava_17_orLater;
 
 	// Java VMs
 	public static final boolean isJetBrainsJVM;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -46,6 +46,7 @@ public class SystemInfo
 	public static final boolean isJava_9_orLater;
 	public static final boolean isJava_11_orLater;
 	public static final boolean isJava_15_orLater;
+	public static final boolean isJava_17_orLater;
 
 	// Java VMs
 	public static final boolean isJetBrainsJVM;
@@ -82,6 +83,7 @@ public class SystemInfo
 		isJava_9_orLater = (javaVersion >= toVersion( 9, 0, 0, 0 ));
 		isJava_11_orLater = (javaVersion >= toVersion( 11, 0, 0, 0 ));
 		isJava_15_orLater = (javaVersion >= toVersion( 15, 0, 0, 0 ));
+		isJava_17_orLater = (javaVersion >= toVersion( 17, 0, 0, 0 ));
 
 		// Java VMs
 		isJetBrainsJVM = System.getProperty( "java.vm.vendor", "Unknown" )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -355,7 +355,7 @@ static Object parseValue( String key, String value, Class<?> javaValueType, Valu
 		value = value.trim();
 
 		// null
-		if( value.equals( "null" ) ) {
+		if( value.equals( "null" ) || value.isEmpty() ) {
 			resultValueType[0] = ValueType.NULL;
 			return null;
 		}

File: flatlaf-core/src/test/java/com/formdev/flatlaf/TestUIDefaultsLoader.java
Patch:
@@ -79,7 +79,6 @@ void parseValueWithJavaType() {
 	void parseFonts() {
 		// style
 		UIManager.put( "defaultFont", new Font( Font.DIALOG, Font.PLAIN, 10 ) );
-		assertFontEquals( Font.DIALOG, Font.PLAIN, 10, "" );
 		assertFontEquals( Font.DIALOG, Font.PLAIN, 10, "normal" );
 		assertFontEquals( Font.DIALOG, Font.BOLD, 10, "bold" );
 		assertFontEquals( Font.DIALOG, Font.ITALIC, 10, "italic" );

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatDesktop.java
Patch:
@@ -57,7 +57,7 @@ public static boolean isSupported( Action action ) {
 	/**
 	 * Sets a handler to show a custom About dialog.
 	 * <p>
-	 * Useful for macOS to enable menu item "MyApp > About".
+	 * Useful for macOS to enable menu item "MyApp &gt; About".
 	 * <p>
 	 * Uses:
 	 * <ul>
@@ -83,7 +83,7 @@ else if( SystemInfo.isMacOS )
 	/**
 	 * Sets a handler to show a custom Preferences dialog.
 	 * <p>
-	 * Useful for macOS to enable menu item "MyApp > Preferences".
+	 * Useful for macOS to enable menu item "MyApp &gt; Preferences".
 	 * <p>
 	 * Uses:
 	 * <ul>
@@ -135,7 +135,7 @@ private static void setHandler( String setHandlerMethodName, String handlerClass
 	 * The handler must invoke either {@link QuitResponse#performQuit} or
 	 * {@link QuitResponse#cancelQuit}.
 	 * <p>
-	 * Useful for macOS to get notified when user clicks menu item "MyApp > Quit".
+	 * Useful for macOS to get notified when user clicks menu item "MyApp &gt; Quit".
 	 * <p>
 	 * Uses:
 	 * <ul>

File: flatlaf-jide-oss/src/main/java/com/formdev/flatlaf/jideoss/ui/FlatRangeSliderUI.java
Patch:
@@ -48,6 +48,7 @@ public class FlatRangeSliderUI
 	protected int trackWidth;
 	protected Dimension thumbSize;
 	protected int focusWidth;
+	/** @since 2 */ protected float thumbBorderWidth;
 
 	protected Color trackValueColor;
 	protected Color trackColor;
@@ -120,6 +121,7 @@ protected void installDefaults( JSlider slider ) {
 		trackWidth = UIManager.getInt( "Slider.trackWidth" );
 		thumbSize = UIManager.getDimension( "Slider.thumbSize" );
 		focusWidth = FlatUIUtils.getUIInt( "Slider.focusWidth", 4 );
+		thumbBorderWidth = FlatUIUtils.getUIFloat( "Slider.thumbBorderWidth", 1 );
 
 		trackValueColor = FlatUIUtils.getUIColor( "Slider.trackValueColor", "Slider.thumbColor" );
 		trackColor = UIManager.getColor( "Slider.trackColor" );
@@ -324,7 +326,7 @@ public void paintThumb( Graphics g ) {
 		Color focusedColor = FlatUIUtils.deriveColor( this.focusedColor,
 			(foreground != defaultForeground) ? foreground : focusBaseColor );
 
-		FlatSliderUI.paintThumb( g, slider, thumbRect, isRoundThumb(), color, borderColor, focusedColor, focusWidth );
+		FlatSliderUI.paintThumb( g, slider, thumbRect, isRoundThumb(), color, borderColor, focusedColor, thumbBorderWidth, focusWidth );
 	}
 
 	protected Color getTrackValueColor() {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -938,7 +938,7 @@ void install( Component c ) {
 
 			// remember old border and replace it
 			rendererBorder = jc.getBorder();
-			rendererComponent.setBorder( this );
+			jc.setBorder( this );
 		}
 
 		/**

File: flatlaf-core/src/test/java/com/formdev/flatlaf/TestUIDefaultsLoader.java
Patch:
@@ -56,7 +56,7 @@ void parseValue() {
 		assertEquals( 123, UIDefaultsLoader.parseValue( "dummy", "123", null ) );
 		assertEquals( 123, UIDefaultsLoader.parseValue( "dummyWidth", "123", null ) );
 		assertEquals( 1.23f, UIDefaultsLoader.parseValue( "dummy", "1.23", null ) );
-		assertEquals( 1.23f, UIDefaultsLoader.parseValue( "dummyWidth", "{float}1.23", null ) );
+		assertEquals( 1.23f, UIDefaultsLoader.parseValue( "dummyWidth", "1.23", null ) );
 
 		assertEquals( new Insets( 2,2,2,2 ), UIDefaultsLoader.parseValue( "dummyInsets", "2,2,2,2", null ) );
 		assertEquals( new Dimension( 2,2 ), UIDefaultsLoader.parseValue( "dummySize", "2,2", null ) );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -199,6 +199,8 @@ private static void dump( File dir, String nameSuffix,
 				? "-linux"
 				: "");
 		String javaVersion = System.getProperty( "java.version" );
+		if( javaVersion.startsWith( "1.8.0_" ) && lookAndFeel instanceof FlatLaf )
+			javaVersion = "1.8.0";
 		File file = new File( dir, name + nameSuffix + "_"
 			+ javaVersion + osSuffix + ".txt" );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -80,7 +80,7 @@ class UIDefaultsLoader
 	private static final String OPTIONAL_PREFIX = "?";
 	private static final String WILDCARD_PREFIX = "*.";
 
-	private static final String FLATLAF_VARIABLES = "FlatLaf.variables";
+	private static final String KEY_VARIABLES = "FlatLaf.internal.variables";
 
 	private static int parseColorDepth;
 
@@ -263,7 +263,7 @@ static void loadDefaultsFromProperties( List<Class<?>> lafClasses, List<FlatDefa
 			}
 
 			// remember variables in defaults to allow using them in styles
-			defaults.put( FLATLAF_VARIABLES, variables );
+			defaults.put( KEY_VARIABLES, variables );
 		} catch( IOException ex ) {
 			LoggingFacade.INSTANCE.logSevere( "FlatLaf: Failed to load properties files.", ex );
 		}
@@ -309,7 +309,7 @@ else if( !value.startsWith( VARIABLE_PREFIX ) )
 	static String resolveValueFromUIManager( String value ) {
 		if( value.startsWith( VARIABLE_PREFIX ) ) {
 			@SuppressWarnings( "unchecked" )
-			Map<String, String> variables = (Map<String, String>) UIManager.get( FLATLAF_VARIABLES );
+			Map<String, String> variables = (Map<String, String>) UIManager.get( KEY_VARIABLES );
 			String newValue = (variables != null) ? variables.get( value ) : null;
 			if( newValue == null )
 				throw new IllegalArgumentException( "variable '" + value + "' not found" );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -373,7 +373,7 @@ private void dump( PrintWriter out, Predicate<String> keyFilter ) {
 				Object value = entry.getValue();
 
 				String strKey = String.valueOf( key );
-				if( !keyFilter.test( strKey ) )
+				if( !keyFilter.test( strKey ) || strKey.startsWith( "FlatLaf.internal." ) )
 					return;
 
 				String prefix = keyPrefix( strKey );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsKeysDump.java
Patch:
@@ -87,7 +87,7 @@ private static void collectKeys( String lookAndFeelClassName, HashSet<String> ke
 		UIDefaults defaults = UIManager.getLookAndFeel().getDefaults();
 
 		for( Object key : defaults.keySet() ) {
-			if( key instanceof String )
+			if( key instanceof String && !((String)key).startsWith( "FlatLaf.internal." ) )
 				keys.add( (String) key );
 		}
 	}

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -199,6 +199,8 @@ private static void dump( File dir, String nameSuffix,
 				? "-linux"
 				: "");
 		String javaVersion = System.getProperty( "java.version" );
+		if( javaVersion.startsWith( "1.8.0_" ) )
+			javaVersion = "1.8.0_202";
 		File file = new File( dir, name + nameSuffix + "_"
 			+ javaVersion + osSuffix + ".txt" );
 

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemePreviewFonts.java
Patch:
@@ -177,7 +177,7 @@ private FontPreview() {
 
 			updateDescription( previewLabel.getFont() );
 			previewLabel.addPropertyChangeListener( "font", e -> {
-				updateDescription( (Font) e.getNewValue() );
+				updateDescription( previewLabel.getFont() );
 			} );
 		}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatCaret.java
Patch:
@@ -108,7 +108,7 @@ public void mouseReleased( MouseEvent e ) {
 	protected void selectAllOnFocusGained() {
 		JTextComponent c = getComponent();
 		Document doc = c.getDocument();
-		if( doc == null || !c.isEnabled() || !c.isEditable() )
+		if( doc == null || !c.isEnabled() || !c.isEditable() || FlatUIUtils.isCellEditor( c ) )
 			return;
 
 		Object selectAllOnFocusPolicy = c.getClientProperty( SELECT_ALL_ON_FOCUS_POLICY );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -249,7 +249,7 @@ private Map<Object, Object> removeThemeSpecificDefaults( UIDefaults defaults ) {
 		// search for theme specific UI defaults keys
 		ArrayList<String> themeSpecificKeys = new ArrayList<>();
 		for( Object key : defaults.keySet() ) {
-			if( key instanceof String && ((String)key).startsWith( "[" ) )
+			if( key instanceof String && ((String)key).startsWith( "[" ) && !((String)key).startsWith( "[style]" ) )
 				themeSpecificKeys.add( (String) key );
 		}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -410,7 +410,7 @@ static Object parseValue( String key, String value, Class<?> javaValueType, Valu
 			// check whether value type is specified in the value
 			if( value.startsWith( "#" ) )
 				valueType = ValueType.COLOR;
-			else if( value.startsWith( "\"" ) && value.endsWith( "\"" ) ) {
+			else if( value.startsWith( "\"" ) && value.indexOf( '"', 1 ) == value.length() - 1 ) {
 				valueType = ValueType.STRING;
 				value = value.substring( 1, value.length() - 1 );
 			} else if( value.startsWith( TYPE_PREFIX ) ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToggleButtonUI.java
Patch:
@@ -173,7 +173,7 @@ public Map<String, Class<?>> getStyleableInfos( JComponent c ) {
 	}
 
 	static boolean isTabButton( Component c ) {
-		return c instanceof JToggleButton && clientPropertyEquals( (JToggleButton) c, BUTTON_TYPE, BUTTON_TYPE_TAB );
+		return c instanceof JToggleButton && BUTTON_TYPE_TAB.equals( getButtonTypeStr( (JToggleButton) c ) );
 	}
 
 	@Override

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemePreviewButtons.java
Patch:
@@ -82,7 +82,7 @@ private void buttonTypeChanged() {
 				continue;
 
 			AbstractButton b = (AbstractButton) c;
-			if( !Objects.equals( b.getClientProperty( BUTTON_TYPE ), BUTTON_TYPE_HELP ) )
+			if( !BUTTON_TYPE_HELP.equals( b.getClientProperty( BUTTON_TYPE ) ) )
 				b.putClientProperty( BUTTON_TYPE, buttonType );
 		}
 

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyleableInfo.java
Patch:
@@ -830,6 +830,7 @@ void toolBar() {
 
 		Map<String, Class<?>> expected = expectedMap(
 			"focusableButtons", boolean.class,
+			"arrowKeysOnlyNavigation", boolean.class,
 
 			"borderMargins", Insets.class,
 			"gripColor", Color.class

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -995,6 +995,7 @@ void toolBar() {
 		FlatToolBarUI ui = (FlatToolBarUI) c.getUI();
 
 		ui.applyStyle( "focusableButtons: true" );
+		ui.applyStyle( "arrowKeysOnlyNavigation: true" );
 
 		ui.applyStyle( "borderMargins: 1,2,3,4" );
 		ui.applyStyle( "gripColor: #fff" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -514,7 +514,7 @@ private static boolean parseCondition( String condition,
 	private static Object parseBorder( String value, Function<String, String> resolver, List<ClassLoader> addonClassLoaders ) {
 		if( value.indexOf( ',' ) >= 0 ) {
 			// top,left,bottom,right[,lineColor[,lineThickness]]
-			List<String> parts = StringUtils.split( value, ',', true, false );
+			List<String> parts = splitFunctionParams( value, ',' );
 			Insets insets = parseInsets( value );
 			ColorUIResource lineColor = (parts.size() >= 5)
 				? (ColorUIResource) parseColorOrFunction( resolver.apply( parts.get( 4 ) ), resolver, true )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -42,7 +42,6 @@
 import java.awt.event.MouseListener;
 import java.awt.geom.Rectangle2D;
 import java.beans.PropertyChangeListener;
-import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 import javax.swing.AbstractAction;
@@ -495,7 +494,7 @@ protected Object applyStyleProperty( String key, Object value ) {
 	/** @since 2 */
 	@Override
 	public Map<String, Class<?>> getStyleableInfos( JComponent c ) {
-		Map<String, Class<?>> infos = new LinkedHashMap<>();
+		Map<String, Class<?>> infos = new FlatStylingSupport.StyleableInfosMap<>();
 		infos.put( "padding", Insets.class );
 		FlatStylingSupport.collectAnnotatedStyleableInfos( this, infos );
 		FlatStylingSupport.collectStyleableInfos( comboBox.getBorder(), infos );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatInternalFrameUI.java
Patch:
@@ -25,7 +25,6 @@
 import java.awt.Rectangle;
 import java.awt.event.MouseEvent;
 import java.beans.PropertyChangeListener;
-import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 import javax.swing.JComponent;
@@ -222,7 +221,7 @@ public Object applyStyleProperty( String key, Object value ) {
 
 		@Override
 		public Map<String, Class<?>> getStyleableInfos() {
-			Map<String, Class<?>> infos = new LinkedHashMap<>();
+			Map<String, Class<?>> infos = new FlatStylingSupport.StyleableInfosMap<>();
 			FlatStylingSupport.collectAnnotatedStyleableInfos( this, infos );
 			infos.put( "borderMargins", Insets.class );
 			infos.put( "activeDropShadowColor", Color.class );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemRenderer.java
Patch:
@@ -153,6 +153,7 @@ public Map<String, Class<?>> getStyleableInfos() {
 		Map<String, Class<?>> infos = FlatStylingSupport.getAnnotatedStyleableInfos( this );
 		if( checkIcon instanceof FlatCheckBoxMenuItemIcon )
 			FlatStylingSupport.putAllPrefixKey( infos, "icon.", ((FlatCheckBoxMenuItemIcon)checkIcon).getStyleableInfos() );
+		infos.remove( "icon.selectionForeground" );
 		if( arrowIcon instanceof FlatMenuArrowIcon )
 			FlatStylingSupport.putAllPrefixKey( infos, "icon.", ((FlatMenuArrowIcon)arrowIcon).getStyleableInfos() );
 		infos.remove( "icon.selectionForeground" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemUI.java
Patch:
@@ -20,7 +20,6 @@
 import java.awt.Dimension;
 import java.awt.Graphics;
 import java.beans.PropertyChangeListener;
-import java.util.LinkedHashMap;
 import java.util.Map;
 import javax.swing.Icon;
 import javax.swing.JComponent;
@@ -145,7 +144,7 @@ public Map<String, Class<?>> getStyleableInfos( JComponent c ) {
 	}
 
 	static Map<String, Class<?>> getStyleableInfos( FlatMenuItemRenderer renderer ) {
-		Map<String, Class<?>> infos = new LinkedHashMap<>();
+		Map<String, Class<?>> infos = new FlatStylingSupport.StyleableInfosMap<>();
 		infos.put( "selectionBackground", Color.class );
 		infos.put( "selectionForeground", Color.class );
 		infos.put( "disabledForeground", Color.class );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupMenuBorder.java
Patch:
@@ -20,7 +20,6 @@
 import java.awt.Component;
 import java.awt.Container;
 import java.awt.Insets;
-import java.util.LinkedHashMap;
 import java.util.Map;
 import javax.swing.JScrollPane;
 import javax.swing.UIManager;
@@ -61,7 +60,7 @@ public Object applyStyleProperty( String key, Object value ) {
 	/** @since 2 */
 	@Override
 	public Map<String, Class<?>> getStyleableInfos() {
-		Map<String, Class<?>> infos = new LinkedHashMap<>();
+		Map<String, Class<?>> infos = new FlatStylingSupport.StyleableInfosMap<>();
 		infos.put( "borderInsets", Insets.class );
 		infos.put( "borderColor", Color.class );
 		return infos;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatScrollBarUI.java
Patch:
@@ -24,7 +24,6 @@
 import java.awt.event.MouseAdapter;
 import java.awt.event.MouseEvent;
 import java.beans.PropertyChangeListener;
-import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
 import javax.swing.InputMap;
@@ -259,7 +258,7 @@ protected Object applyStyleProperty( String key, Object value ) {
 	/** @since 2 */
 	@Override
 	public Map<String, Class<?>> getStyleableInfos( JComponent c ) {
-		Map<String, Class<?>> infos = new LinkedHashMap<>();
+		Map<String, Class<?>> infos = new FlatStylingSupport.StyleableInfosMap<>();
 		infos.put( "track", Color.class );
 		infos.put( "thumb", Color.class );
 		infos.put( "width", int.class );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTabbedPaneUI.java
Patch:
@@ -52,7 +52,6 @@
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 import java.util.Collections;
-import java.util.LinkedHashMap;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -638,7 +637,7 @@ protected Object applyStyleProperty( String key, Object value ) {
 	/** @since 2 */
 	@Override
 	public Map<String, Class<?>> getStyleableInfos( JComponent c ) {
-		Map<String, Class<?>> infos = new LinkedHashMap<>();
+		Map<String, Class<?>> infos = new FlatStylingSupport.StyleableInfosMap<>();
 		infos.put( "tabInsets", Insets.class );
 		infos.put( "tabAreaInsets", Insets.class );
 		infos.put( "textIconGap", int.class );

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatUIDefaultsInspector.java
Patch:
@@ -381,7 +381,8 @@ private Properties loadDerivedColorKeys() {
 		String name = "/com/formdev/flatlaf/extras/resources/DerivedColorKeys.properties";
 		Properties properties = new Properties();
 		try( InputStream in = getClass().getResourceAsStream( name ) ) {
-			properties.load( in );
+			if( in != null )
+				properties.load( in );
 		} catch( IOException ex ) {
 			LoggingFacade.INSTANCE.logSevere( "FlatLaf: Failed to load '" + name + "'.", ex );
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableHeaderBorder.java
Patch:
@@ -45,7 +45,7 @@ public class FlatTableHeaderBorder
 {
 	protected Color separatorColor = UIManager.getColor( "TableHeader.separatorColor" );
 	protected Color bottomSeparatorColor = UIManager.getColor( "TableHeader.bottomSeparatorColor" );
-	protected boolean showLastVerticalLine = UIManager.getBoolean( "TableHeader.showLastVerticalLine" );
+	/** @since 1.6 */ protected boolean showTrailingVerticalLine = UIManager.getBoolean( "TableHeader.showTrailingVerticalLine" );
 
 	public FlatTableHeaderBorder() {
 		super( UIManager.getInsets( "TableHeader.cellMargins" ) );
@@ -110,7 +110,7 @@ protected boolean isDraggedColumn( JTableHeader header, int x ) {
 	}
 
 	protected boolean hideTrailingVerticalLine( JTableHeader header ) {
-		if( showLastVerticalLine )
+		if( showTrailingVerticalLine )
 			return false;
 
 		// do not hide if table header is not a child of a scroll pane

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableHeaderUI.java
Patch:
@@ -62,7 +62,7 @@
  * @uiDefault TableHeader.cellMargins			Insets
  * @uiDefault TableHeader.separatorColor		Color
  * @uiDefault TableHeader.bottomSeparatorColor	Color
- * @uiDefault TableHeader.showLastVerticalLine	boolean
+ * @uiDefault TableHeader.showTrailingVerticalLine	boolean
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -695,6 +695,9 @@ protected Rectangle computePopupBounds( int px, int py, int pw, int ph ) {
 		protected void configurePopup() {
 			super.configurePopup();
 
+			// make opaque to avoid that background shines thru border (e.g. at 150% scaling)
+			setOpaque( true );
+
 			Border border = UIManager.getBorder( "PopupMenu.border" );
 			if( border != null )
 				setBorder( border );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableUI.java
Patch:
@@ -321,6 +321,7 @@ protected boolean hideLastVerticalLine() {
 		if( showLastVerticalLine )
 			return false;
 
+		// do not hide if table is not a child of a scroll pane
 		Container viewport = SwingUtilities.getUnwrappedParent( table );
 		Container viewportParent = (viewport != null) ? viewport.getParent() : null;
 		if( !(viewportParent instanceof JScrollPane) )

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeFileEditor.java
Patch:
@@ -826,14 +826,14 @@ private void saveWindowBounds() {
 		state.put( KEY_WINDOW_BOUNDS, x + "," + y + ',' + width + ',' + height );
 	}
 
-	private static void putPrefsBoolean( Preferences prefs, String key, boolean value, boolean defaultValue ) {
+	static void putPrefsBoolean( Preferences prefs, String key, boolean value, boolean defaultValue ) {
 		if( value != defaultValue )
 			prefs.putBoolean( key, value );
 		else
 			prefs.remove( key );
 	}
 
-	private static void putPrefsString( Preferences prefs, String key, String value ) {
+	static void putPrefsString( Preferences prefs, String key, String value ) {
 		if( !StringUtils.isEmpty( value ) )
 			prefs.put( key, value );
 		else

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemePreviewAll.java
Patch:
@@ -59,9 +59,9 @@ class FlatThemePreviewAll
 
 		list1.setSelectedIndex( 1 );
 		tree1.setSelectionRow( 1 );
-		table1.setRowSelectionInterval( 1, 1 );
 		table1.setRowSorter( new TableRowSorter<>( table1.getModel() ) );
 		table1.getRowSorter().toggleSortOrder( 0 );
+		table1.setRowSelectionInterval( 1, 1 );
 		table1.uiDefaultsGetter = preview::getUIDefaultProperty;
 
 		EventQueue.invokeLater( () -> {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableHeaderUI.java
Patch:
@@ -62,6 +62,7 @@
  * @uiDefault TableHeader.cellMargins			Insets
  * @uiDefault TableHeader.separatorColor		Color
  * @uiDefault TableHeader.bottomSeparatorColor	Color
+ * @uiDefault TableHeader.showLastVerticalLine	boolean
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatBorder.java
Patch:
@@ -45,6 +45,7 @@
  *
  * @uiDefault Component.focusWidth						int
  * @uiDefault Component.innerFocusWidth					int or float
+ * @uiDefault Component.innerOutlineWidth				int or float
  * @uiDefault Component.focusColor						Color
  * @uiDefault Component.borderColor						Color
  * @uiDefault Component.disabledBorderColor				Color

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupMenuSeparatorUI.java
Patch:
@@ -24,8 +24,8 @@
  *
  * <!-- BasicSeparatorUI -->
  *
- * @uiDefault PopupMenuSeparator.background		Color	unused
- * @uiDefault PopupMenuSeparator.foreground		Color
+ * @uiDefault Separator.background				Color	unused
+ * @uiDefault Separator.foreground				Color
  *
  * <!-- FlatSeparatorUI -->
  *

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeFileEditor.java
Patch:
@@ -280,7 +280,9 @@ private void loadDirectory( File dir ) {
 		for( File file : getPropertiesFiles( dir ) )
 			openFile( file, file.getName().equals( recentFile ) );
 
-		activateEditor();
+		SwingUtilities.invokeLater( () -> {
+			activateEditor();
+		} );
 		saveState();
 		enableDisableActions();
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatFormattedTextFieldUI.java
Patch:
@@ -43,6 +43,7 @@
  * @uiDefault Component.isIntelliJTheme					boolean
  * @uiDefault FormattedTextField.placeholderForeground	Color
  * @uiDefault FormattedTextField.focusedBackground		Color	optional
+ * @uiDefault FormattedTextField.iconTextGap			int		optional, default is 4
  * @uiDefault TextComponent.selectAllOnFocusPolicy		String	never, once (default) or always
  * @uiDefault TextComponent.selectAllOnMouseClick		boolean
  *

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTextFieldUI.java
Patch:
@@ -237,12 +237,13 @@ protected void paintPlaceholder( Graphics g ) {
 		// compute placeholder location
 		Rectangle r = getVisibleEditorRect();
 		FontMetrics fm = c.getFontMetrics( c.getFont() );
+		String clippedPlaceholder = JavaCompatibility.getClippedString( c, fm, (String) placeholder, r.width );
+		int x = r.x + (c.getComponentOrientation().isLeftToRight() ? 0 : r.width - fm.stringWidth( clippedPlaceholder ));
 		int y = r.y + fm.getAscent() + ((r.height - fm.getHeight()) / 2);
 
 		// paint placeholder
 		g.setColor( placeholderForeground );
-		String clippedPlaceholder = JavaCompatibility.getClippedString( c, fm, (String) placeholder, r.width );
-		FlatUIUtils.drawString( c, g, clippedPlaceholder, r.x, y );
+		FlatUIUtils.drawString( c, g, clippedPlaceholder, x, y );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -338,7 +338,7 @@ else if( key.endsWith( ".border" ) || key.endsWith( "Border" ) ) {
 
 				// parse value
 				try {
-					uiValue = UIDefaultsLoader.parseValue( key, valueStr );
+					uiValue = UIDefaultsLoader.parseValue( key, valueStr, null );
 				} catch( RuntimeException ex ) {
 					UIDefaultsLoader.logParseError( key, valueStr, ex, false );
 					return; // ignore invalid value

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatStyleSupport.java
Patch:
@@ -198,7 +198,7 @@ private static Object parseValue( String key, String value ) {
 		if( key.startsWith( "[" ) )
 			key = key.substring( key.indexOf( ']' ) + 1 );
 
-		return FlatLaf.parseDefaultsValue( key, value );
+		return FlatLaf.parseDefaultsValue( key, value, null );
 	}
 
 	/**

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/UIDefaultsLoaderAccessor.java
Patch:
@@ -56,7 +56,8 @@ public static Object parseValue( String key, String value, Object[] resultValueT
 		Function<String, String> resolver )
 	{
 		ValueType[] resultValueType2 = new ValueType[1];
-		Object result = UIDefaultsLoader.parseValue( key, value, resultValueType2, resolver, Collections.emptyList() );
+		Object result = UIDefaultsLoader.parseValue( key, value, null,
+			resultValueType2, resolver, Collections.emptyList() );
 		resultValueType[0] = resultValueType2[0];
 		return result;
 	}

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeTokenMaker.java
Patch:
@@ -71,6 +71,7 @@ public FlatThemeTokenMaker() {
 		tokenMap.put( "mix", TOKEN_FUNCTION );
 		tokenMap.put( "tint", TOKEN_FUNCTION );
 		tokenMap.put( "shade", TOKEN_FUNCTION );
+		tokenMap.put( "contrast", TOKEN_FUNCTION );
 		tokenMap.put( "lazy", TOKEN_FUNCTION );
 
 		// function options

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeEditorPane.java
Patch:
@@ -35,7 +35,6 @@
 import javax.swing.KeyStroke;
 import javax.swing.SwingUtilities;
 import javax.swing.UIManager;
-import javax.swing.border.MatteBorder;
 import org.fife.rsta.ui.CollapsibleSectionPanel;
 import org.fife.ui.autocomplete.AutoCompletion;
 import org.fife.ui.autocomplete.CompletionProvider;
@@ -262,8 +261,6 @@ private String getWindowTitle() {
 	void showFindReplaceBar() {
 		if( findReplaceBar == null ) {
 			findReplaceBar = new FlatFindReplaceBar( textArea );
-			findReplaceBar.setBorder( new MatteBorder( 1, 0, 0, 0,
-				UIManager.getColor( "Component.borderColor" ) ) );
 			collapsiblePanel.addBottomComponent( findReplaceBar );
 		}
 

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemePreview.java
Patch:
@@ -271,7 +271,7 @@ private void enableDisable( Component comp, boolean enabled ) {
 		if( comp != previewLabel && comp != enabledCheckBox )
 			comp.setEnabled( enabled );
 
-		if( !(comp instanceof Container) )
+		if( !(comp instanceof Container) || comp instanceof JInternalFrame )
 			return;
 
 		for( Component c : ((Container)comp).getComponents() ) {

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeFileEditor.java
Patch:
@@ -889,7 +889,7 @@ public void windowDeactivated(WindowEvent e) {
 				fileMenu.add(openDirectoryMenuItem);
 
 				//---- newPropertiesFileMenuItem ----
-				newPropertiesFileMenuItem.setText("New Properties File");
+				newPropertiesFileMenuItem.setText("New Properties File...");
 				newPropertiesFileMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK));
 				newPropertiesFileMenuItem.setMnemonic('N');
 				newPropertiesFileMenuItem.addActionListener(e -> newPropertiesFile());
@@ -918,7 +918,7 @@ public void windowDeactivated(WindowEvent e) {
 				editMenu.setMnemonic('E');
 
 				//---- findMenuItem ----
-				findMenuItem.setText("Find/Replace...");
+				findMenuItem.setText("Find/Replace");
 				findMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 				findMenuItem.setMnemonic('F');
 				findMenuItem.addActionListener(e -> find());

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemePropertiesBaseManager.java
Patch:
@@ -130,7 +130,7 @@ private static List<String> baseFiles( String name, String baseTheme ) {
 
 				case "darcula":
 					result.add( "FlatDarculaLaf" );
-					result.add( "FlatLightLaf" );
+					result.add( "FlatDarkLaf" );
 					result.add( "FlatLaf" );
 					break;
 			}

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeTokenMaker.java
Patch:
@@ -69,6 +69,8 @@ public FlatThemeTokenMaker() {
 		tokenMap.put( "changeLightness", TOKEN_FUNCTION );
 		tokenMap.put( "changeAlpha", TOKEN_FUNCTION );
 		tokenMap.put( "mix", TOKEN_FUNCTION );
+		tokenMap.put( "tint", TOKEN_FUNCTION );
+		tokenMap.put( "shade", TOKEN_FUNCTION );
 		tokenMap.put( "lazy", TOKEN_FUNCTION );
 
 		// function options

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeTokenMaker.java
Patch:
@@ -68,6 +68,7 @@ public FlatThemeTokenMaker() {
 		tokenMap.put( "changeSaturation", TOKEN_FUNCTION );
 		tokenMap.put( "changeLightness", TOKEN_FUNCTION );
 		tokenMap.put( "changeAlpha", TOKEN_FUNCTION );
+		tokenMap.put( "mix", TOKEN_FUNCTION );
 		tokenMap.put( "lazy", TOKEN_FUNCTION );
 
 		// function options

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoFrame.java
Patch:
@@ -34,6 +34,7 @@
 import com.formdev.flatlaf.extras.components.FlatButton;
 import com.formdev.flatlaf.extras.components.FlatButton.ButtonType;
 import com.formdev.flatlaf.extras.FlatSVGUtils;
+import com.formdev.flatlaf.ui.FlatUIUtils;
 import com.formdev.flatlaf.ui.JBRCustomDecorations;
 import com.formdev.flatlaf.util.SystemInfo;
 import net.miginfocom.layout.ConstraintParser;
@@ -185,6 +186,8 @@ private void fontFamilyChanged( ActionEvent e ) {
 
 		Font font = UIManager.getFont( "defaultFont" );
 		Font newFont = StyleContext.getDefaultStyleContext().getFont( fontFamily, font.getStyle(), font.getSize() );
+		// StyleContext.getFont() may return a UIResource, which would cause loosing user scale factor on Windows
+		newFont = FlatUIUtils.nonUIResource( newFont );
 		UIManager.put( "defaultFont", newFont );
 
 		FlatLaf.updateUI();

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsKeysDump.java
Patch:
@@ -29,6 +29,7 @@
 import javax.swing.UIDefaults;
 import javax.swing.UIManager;
 import com.formdev.flatlaf.*;
+import com.formdev.flatlaf.testing.FlatTestLaf;
 
 /**
  * Collects all FlatLaf UI defaults keys and dumps them to a file.
@@ -60,6 +61,7 @@ public static void main( String[] args ) {
 		collectKeys( FlatDarkLaf.class.getName(), keys );
 		collectKeys( FlatIntelliJLaf.class.getName(), keys );
 		collectKeys( FlatDarculaLaf.class.getName(), keys );
+		collectKeys( FlatTestLaf.class.getName(), keys );
 
 		// write key file
 		try( Writer fileWriter = new BufferedWriter( new FileWriter( keysFile ) ) ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -342,7 +342,7 @@ private Dimension computeLayoutSize( Container parent, Function<Component, Dimen
 				? getSizeFunc.apply( rootPane.getContentPane() )
 				: rootPane.getSize();
 
-			int width = Math.max( titlePaneSize.width, contentSize.width );
+			int width = contentSize.width; // title pane width is not considered here
 			int height = titlePaneSize.height + contentSize.height;
 			if( titlePane == null || !titlePane.isMenuBarEmbedded() ) {
 				JMenuBar menuBar = rootPane.getJMenuBar();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatOptionPaneUI.java
Patch:
@@ -165,7 +165,7 @@ protected void addMessageComponents( Container container, GridBagConstraints con
 
 	private void updateChildPanels( Container c ) {
 		for( Component child : c.getComponents() ) {
-			if( child instanceof JPanel ) {
+			if( child.getClass() == JPanel.class ) {
 				JPanel panel = (JPanel)child;
 
 				// make sub-panel non-opaque for OptionPane.background
@@ -177,9 +177,8 @@ private void updateChildPanels( Container c ) {
 					panel.setBorder( new NonUIResourceBorder( border ) );
 			}
 
-			if( child instanceof Container ) {
+			if( child instanceof Container )
 				updateChildPanels( (Container) child );
-			}
 		}
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -192,6 +192,7 @@ private Handler getHandler() {
 	 */
 	protected void applyStyle( Object style ) {
 		oldStyleValues = FlatStyleSupport.parseAndApply( oldStyleValues, style, this::applyStyleProperty );
+		updateEditorPadding();
 		updateArrowButtonsStyle();
 	}
 
@@ -442,7 +443,6 @@ public Dimension minimumLayoutSize( Container parent ) {
 		public void layoutContainer( Container parent ) {
 			Dimension size = parent.getSize();
 			Insets insets = parent.getInsets();
-			Insets padding = scale( FlatSpinnerUI.this.padding );
 			Rectangle r = FlatUIUtils.subtractInsets( new Rectangle( size ), insets );
 
 			if( nextButton == null && previousButton == null ) {

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestFlatStyling.java
Patch:
@@ -149,6 +149,8 @@ void comboBox() {
 		JComboBox<Object> c = new JComboBox<>();
 		FlatComboBoxUI ui = (FlatComboBoxUI) c.getUI();
 
+		ui.applyStyle( "padding: 1,2,3,4" );
+
 		ui.applyStyle( "minimumWidth: 100" );
 		ui.applyStyle( "editorColumns: 10" );
 		ui.applyStyle( "buttonStyle: auto" );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatCustomBordersTest.java
Patch:
@@ -132,7 +132,7 @@ private void applyCustomOutsideBorder( JComponent c, String uiKey ) {
 	}
 
 	private void applyCustomComboBoxEditorBorder( JComboBox<String> comboBox ) {
-		applyCustomComboBoxEditorBorder( comboBox, new LineBorder( ORANGE, UIScale.scale( 3 ) ) );
+		applyCustomComboBoxEditorBorder( comboBox, new LineBorder( ORANGE, UIScale.scale( 6 ) ) );
 	}
 
 	private void applyCustomComboBoxEditorBorderWithIcon( JComboBox<String> comboBox ) {
@@ -152,7 +152,7 @@ protected JTextField createEditorComponent() {
 	}
 
 	private void applyCustomComboBoxRendererBorder( JComboBox<String> comboBox ) {
-		applyCustomComboBoxRendererBorder( comboBox, new LineBorder( ORANGE, UIScale.scale( 3 ) ) );
+		applyCustomComboBoxRendererBorder( comboBox, new LineBorder( ORANGE, UIScale.scale( 6 ) ) );
 	}
 
 	private void applyCustomComboBoxRendererBorderWithIcon( JComboBox<String> comboBox ) {

File: flatlaf-core/src/test/java/com/formdev/flatlaf/ui/TestUtils.java
Patch:
@@ -27,6 +27,8 @@
  */
 public class TestUtils
 {
+	public static final float[] FACTORS = new float[] { 1f, 1.25f, 1.5f, 1.75f, 2f, 2.25f, 2.5f, 2.75f, 3f, 3.25f, 3.5f, 3.75f, 4f, 5f, 6f };
+
 	public static void setup( boolean withFocus ) {
 		System.setProperty( FlatSystemProperties.UI_SCALE, "1x" );
 		if( withFocus )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/LinuxFontPolicy.java
Patch:
@@ -309,6 +309,9 @@ private static String getConfigEntry( List<String> config, String group, String
 	 *   - running on JetBrains Runtime 11 or later and scaling is enabled in system Settings
 	 */
 	private static boolean isSystemScaling() {
+		if( GraphicsEnvironment.isHeadless() )
+			return true;
+
 		GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()
 			.getDefaultScreenDevice().getDefaultConfiguration();
 		return UIScale.getSystemScaleFactor( gc ) > 1;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -501,9 +501,9 @@ public Dimension getPreferredSize( JComponent c ) {
 			prefSize.width = Math.max( prefSize.width, prefSize.height );
 		} else if( !isIconOnlyOrSingleCharacter && !isToolBarButton( c ) && c.getBorder() instanceof FlatButtonBorder ) {
 			// apply minimum width/height
-			float focusWidth = FlatUIUtils.getBorderFocusWidth( c );
-			prefSize.width = Math.max( prefSize.width, scale( FlatUIUtils.minimumWidth( c, minimumWidth ) ) + Math.round( focusWidth * 2 ) );
-			prefSize.height = Math.max( prefSize.height, scale( FlatUIUtils.minimumHeight( c, 0 ) ) + Math.round( focusWidth * 2 ) );
+			int fw = Math.round( FlatUIUtils.getBorderFocusWidth( c ) * 2 );
+			prefSize.width = Math.max( prefSize.width, scale( FlatUIUtils.minimumWidth( c, minimumWidth ) ) + fw );
+			prefSize.height = Math.max( prefSize.height, scale( FlatUIUtils.minimumHeight( c, 0 ) ) + fw );
 		}
 
 		return prefSize;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -534,7 +534,8 @@ protected Color getForeground( boolean enabled ) {
 	@Override
 	public Dimension getMinimumSize( JComponent c ) {
 		Dimension minimumSize = super.getMinimumSize( c );
-		minimumSize.width = Math.max( minimumSize.width, scale( FlatUIUtils.minimumWidth( c, minimumWidth ) ) );
+		int fw = Math.round( FlatUIUtils.getBorderFocusWidth( c ) * 2 );
+		minimumSize.width = Math.max( minimumSize.width, scale( FlatUIUtils.minimumWidth( c, minimumWidth ) ) + fw );
 		return minimumSize;
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -276,7 +276,7 @@ private Component createArrowButton( int direction, String name ) {
 		FlatArrowButton button = new FlatArrowButton( direction, arrowType, buttonArrowColor,
 			buttonDisabledArrowColor, buttonHoverArrowColor, null, buttonPressedArrowColor, null );
 		button.setName( name );
-		button.setYOffset( (direction == SwingConstants.NORTH) ? 1 : -1 );
+		button.setYOffset( (direction == SwingConstants.NORTH) ? 1.25f : -1.25f );
 		if( direction == SwingConstants.NORTH )
 			installNextButtonListeners( button );
 		else

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -660,7 +660,7 @@ public static Shape createRoundRectanglePath( float x, float y, float width, flo
 	 * @since 1.1
 	 */
 	public static void paintArrow( Graphics2D g, int x, int y, int width, int height,
-		int direction, boolean chevron, int arrowSize, int xOffset, int yOffset )
+		int direction, boolean chevron, int arrowSize, float xOffset, float yOffset )
 	{
 		// compute arrow width/height
 		int aw = UIScale.scale( arrowSize + (chevron ? 0 : 1) );
@@ -679,8 +679,8 @@ public static void paintArrow( Graphics2D g, int x, int y, int width, int height
 		int extra = chevron ? 1 : 0;
 
 		// compute arrow location
-		float ox = ((width - (aw + extra)) / 2f) + UIScale.scale( (float) xOffset );
-		float oy = ((height - (ah + extra)) / 2f) + UIScale.scale( (float) yOffset );
+		float ox = ((width - (aw + extra)) / 2f) + UIScale.scale( xOffset );
+		float oy = ((height - (ah + extra)) / 2f) + UIScale.scale( yOffset );
 		int ax = x + ((direction == SwingConstants.WEST) ? -Math.round( -ox ) : Math.round( ox ));
 		int ay = y + ((direction == SwingConstants.NORTH) ? -Math.round( -oy ) : Math.round( oy ));
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatStyleSupport.java
Patch:
@@ -166,7 +166,7 @@ private static Object parseValue( String key, String value ) {
 	 * Applies the given value to an annotated field of the given object.
 	 * The field must be annotated with {@link Styleable}.
 	 *
-	 * @param object the object
+	 * @param obj the object
 	 * @param key the name of the field
 	 * @param value the new value
 	 * @return the old value of the field

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatFormattedTextFieldUI.java
Patch:
@@ -44,6 +44,7 @@
  * @uiDefault Component.minimumWidth					int
  * @uiDefault Component.isIntelliJTheme					boolean
  * @uiDefault FormattedTextField.placeholderForeground	Color
+ * @uiDefault FormattedTextField.focusedBackground		Color	optional
  * @uiDefault TextComponent.selectAllOnFocusPolicy		String	never, once (default) or always
  * @uiDefault TextComponent.selectAllOnMouseClick		boolean
  *

File: flatlaf-swingx/src/main/java/com/formdev/flatlaf/swingx/ui/FlatDatePickerUI.java
Patch:
@@ -156,7 +156,7 @@ protected JFormattedTextField createEditor() {
 		editor.setName( "dateField" );
 		editor.setBorder( BorderFactory.createEmptyBorder() );
 		editor.setOpaque( false );
-		editor.addFocusListener( new FlatUIUtils.RepaintFocusListener( datePicker ) );
+		editor.addFocusListener( new FlatUIUtils.RepaintFocusListener( datePicker, null ) );
 		return editor;
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatFormattedTextFieldUI.java
Patch:
@@ -44,6 +44,7 @@
  * @uiDefault Component.minimumWidth					int
  * @uiDefault Component.isIntelliJTheme					boolean
  * @uiDefault FormattedTextField.placeholderForeground	Color
+ * @uiDefault FormattedTextField.focusedBackground		Color	optional
  * @uiDefault TextComponent.selectAllOnFocusPolicy		String	never, once (default) or always
  * @uiDefault TextComponent.selectAllOnMouseClick		boolean
  *

File: flatlaf-swingx/src/main/java/com/formdev/flatlaf/swingx/ui/FlatDatePickerUI.java
Patch:
@@ -156,7 +156,7 @@ protected JFormattedTextField createEditor() {
 		editor.setName( "dateField" );
 		editor.setBorder( BorderFactory.createEmptyBorder() );
 		editor.setOpaque( false );
-		editor.addFocusListener( new FlatUIUtils.RepaintFocusListener( datePicker ) );
+		editor.addFocusListener( new FlatUIUtils.RepaintFocusListener( datePicker, null ) );
 		return editor;
 	}
 

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatSVGUtils.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.List;
 import javax.swing.JWindow;
 import com.formdev.flatlaf.util.MultiResolutionImageSupport;
+import com.formdev.flatlaf.util.SystemInfo;
 import com.kitfox.svg.SVGCache;
 import com.kitfox.svg.SVGDiagram;
 import com.kitfox.svg.SVGException;
@@ -44,7 +45,7 @@ public class FlatSVGUtils
 	 * can be used for windows headers. The SVG should have a size of 16x16,
 	 * otherwise it is scaled.
 	 * <p>
-	 * If running on Java 9 or later and multi-resolution image support is available,
+	 * If running on Windows in Java 9 or later and multi-resolution image support is available,
 	 * then a single multi-resolution image is returned that creates images on demand
 	 * for requested sizes from SVG.
 	 * This has the advantage that only images for used sizes are created.
@@ -58,7 +59,7 @@ public class FlatSVGUtils
 	public static List<Image> createWindowIconImages( String svgName ) {
 		SVGDiagram diagram = loadSVG( svgName );
 
-		if( MultiResolutionImageSupport.isAvailable() ) {
+		if( SystemInfo.isWindows && MultiResolutionImageSupport.isAvailable() ) {
 			// use a multi-resolution image that creates images on demand for requested sizes
 			return Collections.singletonList( MultiResolutionImageSupport.create( 0,
 				new Dimension[] {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -351,7 +351,7 @@ protected void updateIcon() {
 
 		// set icon
 		if( !images.isEmpty() )
-			iconLabel.setIcon( FlatTitlePaneIcon.create( images, iconSize ) );
+			iconLabel.setIcon( new FlatTitlePaneIcon( images, iconSize ) );
 		else {
 			// no icon set on window --> use default icon
 			Icon defaultIcon = UIManager.getIcon( "TitlePane.icon" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/ScaledImageIcon.java
Patch:
@@ -77,7 +77,7 @@ public void paintIcon( Component c, Graphics g, int x, int y ) {
 		double scaleFactor = systemScaleFactor * userScaleFactor;
 
 		// paint input image icon if not necessary to scale
-		if( scaleFactor == 1 && iconWidth == imageIcon.getIconWidth() && iconHeight == imageIcon.getIconHeight() ) {
+		if( scaleFactor == 1 && imageIcon != null && iconWidth == imageIcon.getIconWidth() && iconHeight == imageIcon.getIconHeight() ) {
 			imageIcon.paintIcon( c, g, x, y );
 			return;
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatWindowsNativeWindowBorder.java
Patch:
@@ -308,6 +308,8 @@ private class WndProc
 			this.window = window;
 
 			hwnd = installImpl( window );
+			if( hwnd == 0 )
+				return;
 
 			// remove the OS window title bar
 			if( window instanceof JFrame && ((JFrame)window).getExtendedState() != 0 ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/UIScale.java
Patch:
@@ -43,7 +43,7 @@
  * <p>
  * Two scaling modes are supported by FlatLaf for HiDPI displays:
  *
- * <h3>1) system scaling mode</h3>
+ * <h2>1) system scaling mode</h2>
  *
  * This mode is supported since Java 9 on all platforms and in some Java 8 VMs
  * (e.g. Apple and JetBrains). The JRE determines the scale factor per-display and
@@ -54,7 +54,7 @@
  * The scale factor may be different for each connected display.
  * The scale factor may change for a window when moving the window from one display to another one.
  *
- * <h3>2) user scaling mode</h3>
+ * <h2>2) user scaling mode</h2>
  *
  * This mode is mainly for Java 8 compatibility, but is also used on Linux
  * or if the default font is changed.

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -326,7 +326,7 @@ private void initializeAqua() {
 				Method m = UIManager.class.getMethod( "createLookAndFeel", String.class );
 				aquaLaf = (BasicLookAndFeel) m.invoke( null, "Mac OS X" );
 			} else
-				aquaLaf = (BasicLookAndFeel) Class.forName( aquaLafClassName ).newInstance();
+				aquaLaf = (BasicLookAndFeel) Class.forName( aquaLafClassName ).getDeclaredConstructor().newInstance();
 		} catch( Exception ex ) {
 			LoggingFacade.INSTANCE.logSevere( "FlatLaf: Failed to initialize Aqua look and feel '" + aquaLafClassName + "'.", ex );
 			throw new IllegalStateException();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -442,8 +442,8 @@ private static Object parseBorder( String value, Function<String, String> resolv
 	private static Object parseInstance( String value, List<ClassLoader> addonClassLoaders ) {
 		return (LazyValue) t -> {
 			try {
-				return findClass( value, addonClassLoaders ).newInstance();
-			} catch( InstantiationException | IllegalAccessException | ClassNotFoundException ex ) {
+				return findClass( value, addonClassLoaders ).getDeclaredConstructor().newInstance();
+			} catch( Exception ex ) {
 				LoggingFacade.INSTANCE.logSevere( "FlatLaf: Failed to instantiate '" + value + "'.", ex );
 				return null;
 			}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTabbedPaneUI.java
Patch:
@@ -327,7 +327,7 @@ protected void installDefaults() {
 		// the default also includes Ctrl+TAB/Ctrl+Shift+TAB, which we need to switch tabs
 		if( focusForwardTraversalKeys == null ) {
 			focusForwardTraversalKeys = Collections.singleton( KeyStroke.getKeyStroke( KeyEvent.VK_TAB, 0 ) );
-			focusBackwardTraversalKeys = Collections.singleton( KeyStroke.getKeyStroke( KeyEvent.VK_TAB, InputEvent.SHIFT_MASK ) );
+			focusBackwardTraversalKeys = Collections.singleton( KeyStroke.getKeyStroke( KeyEvent.VK_TAB, InputEvent.SHIFT_DOWN_MASK ) );
 		}
 		// Ideally we should use `LookAndFeel.installProperty( tabPane, "focusTraversalKeysForward", keys )` here
 		// instead of `tabPane.setFocusTraversalKeys()`, but WindowsTabbedPaneUI also uses later method

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatMenusTest.java
Patch:
@@ -124,11 +124,11 @@ private KeyStroke getRandomKeyStroke() {
 	private int randomKeyStrokeIndex = 0;
 	private final KeyStroke[] randomKeyStrokes = {
 		KeyStroke.getKeyStroke( KeyEvent.VK_F2, 0 ),
-		KeyStroke.getKeyStroke( KeyEvent.VK_A, KeyEvent.CTRL_MASK ),
-		KeyStroke.getKeyStroke( KeyEvent.VK_B, KeyEvent.CTRL_MASK | KeyEvent.SHIFT_MASK ),
+		KeyStroke.getKeyStroke( KeyEvent.VK_A, KeyEvent.CTRL_DOWN_MASK ),
+		KeyStroke.getKeyStroke( KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK ),
 		KeyStroke.getKeyStroke( KeyEvent.VK_BACK_SPACE, 0 ),
 		KeyStroke.getKeyStroke( KeyEvent.VK_PAGE_UP, 0 ),
-		KeyStroke.getKeyStroke( KeyEvent.VK_C, KeyEvent.ALT_MASK ),
+		KeyStroke.getKeyStroke( KeyEvent.VK_C, KeyEvent.ALT_DOWN_MASK ),
 		KeyStroke.getKeyStroke( KeyEvent.VK_ENTER, 0 ),
 		KeyStroke.getKeyStroke( KeyEvent.VK_F10, 0 ),
 		KeyStroke.getKeyStroke( KeyEvent.VK_0, 0 ),

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -241,9 +241,10 @@ private Map<Object, Object> removeThemeSpecificDefaults( UIDefaults defaults ) {
 		// remove theme specific UI defaults and remember only those for current theme
 		Map<Object, Object> themeSpecificDefaults = new HashMap<>();
 		String currentThemePrefix = '[' + name.replace( ' ', '_' ) + ']';
+		String currentThemeAndAuthorPrefix = '[' + name.replace( ' ', '_' ) + "---" + author.replace( ' ', '_' ) + ']';
 		String currentAuthorPrefix = "[author-" + author.replace( ' ', '_' ) + ']';
 		String allThemesPrefix = "[*]";
-		String[] prefixes = { currentThemePrefix, currentAuthorPrefix, allThemesPrefix };
+		String[] prefixes = { currentThemePrefix, currentThemeAndAuthorPrefix, currentAuthorPrefix, allThemesPrefix };
 		for( String key : themeSpecificKeys ) {
 			Object value = defaults.remove( key );
 			for( String prefix : prefixes ) {

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatSVGIcon.java
Patch:
@@ -581,7 +581,7 @@ protected Color filterMappings( Color color ) {
 		 * @see GrayFilter
 		 */
 		public static Function<Color, Color> createGrayFilterFunction(int brightness, int contrast, int alpha) {
-			return color -> new Color(new GrayFilter().filterRGB( 0, 0, color.getRGB() ));
+			return color -> new Color(new GrayFilter(brightness, contrast, alpha).filterRGB( 0, 0, color.getRGB() ));
 		}
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonBorder.java
Patch:
@@ -75,6 +75,7 @@ public class FlatButtonBorder
 	public void paintBorder( Component c, Graphics g, int x, int y, int width, int height ) {
 		if( FlatButtonUI.isContentAreaFilled( c ) &&
 			!FlatButtonUI.isToolBarButton( c ) &&
+			(!FlatButtonUI.isBorderlessButton( c ) || FlatUIUtils.isPermanentFocusOwner( c )) &&
 			!FlatButtonUI.isHelpButton( c ) &&
 			!FlatToggleButtonUI.isTabButton( c ) )
 		  super.paintBorder( c, g, x, y, width, height );

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatButton.java
Patch:
@@ -30,7 +30,7 @@ public class FlatButton
 	implements FlatComponentExtension
 {
 	// NOTE: enum names must be equal to allowed strings
-	public enum ButtonType { none, square, roundRect, tab, help, toolBarButton };
+	public enum ButtonType { none, square, roundRect, tab, help, toolBarButton, borderless }
 
 	/**
 	 * Returns type of a button.

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatSystemProperties.java
Patch:
@@ -101,7 +101,7 @@ public interface FlatSystemProperties
 	 * (requires Window 10)
 	 * <p>
 	 * <strong>Allowed Values</strong> {@code false} and {@code true}<br>
-	 * <strong>Default</strong> true
+	 * <strong>Default</strong> {@code true}
 	 */
 	String USE_JETBRAINS_CUSTOM_DECORATIONS = "flatlaf.useJetBrainsCustomDecorations";
 

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatTextComponentsTest.java
Patch:
@@ -76,8 +76,8 @@ private void initComponents() {
 		JSpinner spinner1 = new JSpinner();
 		JSpinner spinner2 = new JSpinner();
 		JSpinner spinner3 = new JSpinner();
-		JComboBox comboBox2 = new JComboBox();
-		JComboBox comboBox4 = new JComboBox();
+		JComboBox<String> comboBox2 = new JComboBox<>();
+		JComboBox<String> comboBox4 = new JComboBox<>();
 		JPopupMenu popupMenu1 = new JPopupMenu();
 		JMenuItem cutMenuItem = new JMenuItem();
 		JMenuItem copyMenuItem = new JMenuItem();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -375,8 +375,8 @@ public void layoutContainer( Container parent ) {
 			Rectangle editorRect = new Rectangle( r );
 			Rectangle buttonsRect = new Rectangle( r );
 
-			// make button area square
-			int buttonsWidth = r.height;
+			// make button area square (if spinner has preferred height)
+			int buttonsWidth = parent.getPreferredSize().height - insets.top - insets.bottom;
 			buttonsRect.width = buttonsWidth;
 
 			if( parent.getComponentOrientation().isLeftToRight() ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatWindowsNativeWindowBorder.java
Patch:
@@ -103,8 +103,7 @@ static FlatNativeWindowBorder.Provider getInstance() {
 			if( SystemInfo.isX86_64 )
 				libraryName += "_64";
 
-			nativeLibrary = new NativeLibrary( libraryName,
-				FlatWindowsNativeWindowBorder.class.getClassLoader(), true );
+			nativeLibrary = new NativeLibrary( libraryName, null, true );
 		}
 
 		// check whether native library was successfully loaded

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -157,7 +157,7 @@ public static boolean isLafDark() {
 	 */
 	@Override
 	public boolean getSupportsWindowDecorations() {
-		if( SystemInfo.isProjector || SystemInfo.isWinPE )
+		if( SystemInfo.isProjector || SystemInfo.isWebswing || SystemInfo.isWinPE )
 			return false;
 
 		if( SystemInfo.isWindows_10_orLater &&

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatNativeWindowBorder.java
Patch:
@@ -242,8 +242,8 @@ private static void initialize() {
 		if( !SystemInfo.isWindows_10_orLater )
 			return;
 
-		// do not use when running in JetBrains Projector or WinPE
-		if( SystemInfo.isProjector || SystemInfo.isWinPE )
+		// do not use when running in JetBrains Projector, Webswing or WinPE
+		if( SystemInfo.isProjector || SystemInfo.isWebswing || SystemInfo.isWinPE )
 			return;
 
 		// check whether disabled via system property

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -70,7 +70,7 @@ public Popup getPopup( Component owner, Component contents, int x, int y )
 
 		boolean forceHeavyWeight = isOptionEnabled( owner, contents, FlatClientProperties.POPUP_FORCE_HEAVY_WEIGHT, "Popup.forceHeavyWeight" );
 
-		if( !isOptionEnabled( owner, contents, FlatClientProperties.POPUP_DROP_SHADOW_PAINTED, "Popup.dropShadowPainted" ) || SystemInfo.isProjector )
+		if( !isOptionEnabled( owner, contents, FlatClientProperties.POPUP_DROP_SHADOW_PAINTED, "Popup.dropShadowPainted" ) || SystemInfo.isProjector || SystemInfo.isWebswing )
 			return new NonFlashingPopup( getPopupForScreenOfOwner( owner, contents, x, y, forceHeavyWeight ), contents );
 
 		// macOS and Linux adds drop shadow to heavy weight popups

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -56,6 +56,7 @@ public class SystemInfo
 
 	// other
 	/** @since 1.1 */ public static final boolean isProjector;
+	/** @since 1.1.2 */ public static final boolean isWebswing;
 	/** @since 1.1.1 */ public static final boolean isWinPE;
 
 	static {
@@ -92,6 +93,7 @@ public class SystemInfo
 
 		// other
 		isProjector = Boolean.getBoolean( "org.jetbrains.projector.server.enable" );
+		isWebswing = (System.getProperty( "webswing.rootDir" ) != null);
 		isWinPE = isWindows && "X:\\Windows\\System32".equalsIgnoreCase( System.getProperty( "user.dir" ) );
 	}
 

File: flatlaf-jide-oss/src/main/java/com/formdev/flatlaf/jideoss/ui/FlatJideTabbedPaneUI.java
Patch:
@@ -584,12 +584,15 @@ private void updateCloseButtons() {
 			if( !scrollableTabLayoutEnabled() || !isShowCloseButton() || !isShowCloseButtonOnTab() )
 				return;
 
+			Color background = _tabPane.getBackground();
+
 			for( int i = 0; i < _closeButtons.length; i++ ) {
 				JButton closeButton = _closeButtons[i];
 				if( closeButton.getWidth() == 0 || closeButton.getHeight() == 0 )
 					continue; // not visible
 
 				closeButton.setBounds( getTabCloseBounds( i ) );
+				closeButton.setBackground( background );
 			}
 		}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatNativeWindowBorder.java
Patch:
@@ -242,8 +242,8 @@ private static void initialize() {
 		if( !SystemInfo.isWindows_10_orLater )
 			return;
 
-		// do not use when running in JetBrains Projector
-		if( SystemInfo.isProjector )
+		// do not use when running in JetBrains Projector or WinPE
+		if( SystemInfo.isProjector || SystemInfo.isWinPE )
 			return;
 
 		// check whether disabled via system property

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -56,6 +56,7 @@ public class SystemInfo
 
 	// other
 	/** @since 1.1 */ public static final boolean isProjector;
+	/** @since 1.1.1 */ public static final boolean isWinPE;
 
 	static {
 		// platforms
@@ -91,6 +92,7 @@ public class SystemInfo
 
 		// other
 		isProjector = Boolean.getBoolean( "org.jetbrains.projector.server.enable" );
+		isWinPE = isWindows && "X:\\Windows\\System32".equalsIgnoreCase( System.getProperty( "user.dir" ) );
 	}
 
 	public static long scanVersion( String version ) {

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatInspector.java
Patch:
@@ -475,7 +475,7 @@ else if( c instanceof JToolBar )
 				f.setAccessible( true );
 				Object ui = f.get( c );
 				appendRow( buf, "UI", (ui != null ? ui.getClass().getName() : "null") );
-			} catch( NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex ) {
+			} catch( Exception ex ) {
 				// ignore
 			}
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -87,6 +87,7 @@
  * @uiDefault TitlePane.centerTitle							boolean
  * @uiDefault TitlePane.centerTitleIfMenuBarEmbedded		boolean
  * @uiDefault TitlePane.menuBarTitleGap						int
+ * @uiDefault TitlePane.icon								Icon
  * @uiDefault TitlePane.closeIcon							Icon
  * @uiDefault TitlePane.iconifyIcon							Icon
  * @uiDefault TitlePane.maximizeIcon						Icon
@@ -346,7 +347,7 @@ protected void updateIcon() {
 			iconLabel.setIcon( FlatTitlePaneIcon.create( images, iconSize ) );
 		else {
 			// no icon set on window --> use default icon
-			Icon defaultIcon = UIManager.getIcon( "InternalFrame.icon" );
+			Icon defaultIcon = UIManager.getIcon( "TitlePane.icon" );
 			if( defaultIcon != null && (defaultIcon.getIconWidth() == 0 || defaultIcon.getIconHeight() == 0) )
 				defaultIcon = null;
 			if( defaultIcon != null ) {

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatNativeWindowBorderTest.java
Patch:
@@ -71,7 +71,7 @@ private static JFrame showFrame() {
 			frame.dispose();
 		}, KeyStroke.getKeyStroke( KeyEvent.VK_ESCAPE, 0, false ), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT );
 
-		frame.pack();
+		frame.setSize( new Dimension( 800, 600 ) );
 		frame.setLocationRelativeTo( null );
 		int offset = 20 * Window.getWindows().length;
 		frame.setLocation( frame.getX() + offset, frame.getY() + offset );
@@ -88,7 +88,7 @@ private static void showDialog( Window owner ) {
 			dialog.dispose();
 		}, KeyStroke.getKeyStroke( KeyEvent.VK_ESCAPE, 0, false ), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT );
 
-		dialog.pack();
+		dialog.setSize( new Dimension( 800, 600 ) );
 		dialog.setLocationRelativeTo( owner );
 		dialog.setLocation( dialog.getX() + 20, dialog.getY() + 20 );
 		dialog.setVisible( true );
@@ -104,7 +104,6 @@ private FlatNativeWindowBorderTest( Window window ) {
 			hideWindowButton.setEnabled( false );
 
 		setBorder( new FlatLineBorder( new Insets( 0, 0, 0, 0 ), Color.red ) );
-		setPreferredSize( new Dimension( 800, 600 ) );
 
 		updateInfo();
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonBorder.java
Patch:
@@ -75,6 +75,7 @@ public class FlatButtonBorder
 	public void paintBorder( Component c, Graphics g, int x, int y, int width, int height ) {
 		if( FlatButtonUI.isContentAreaFilled( c ) &&
 			!FlatButtonUI.isToolBarButton( c ) &&
+			( !FlatButtonUI.isBorderLessButton( c ) || FlatUIUtils.isPermanentFocusOwner( c ) ) &&
 			!FlatButtonUI.isHelpButton( c ) &&
 			!FlatToggleButtonUI.isTabButton( c ) )
 		  super.paintBorder( c, g, x, y, width, height );

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatButton.java
Patch:
@@ -30,7 +30,7 @@ public class FlatButton
 	implements FlatComponentExtension
 {
 	// NOTE: enum names must be equal to allowed strings
-	public enum ButtonType { none, square, roundRect, tab, help, toolBarButton };
+	public enum ButtonType { none, square, roundRect, tab, help, toolBarButton, borderLess }
 
 	/**
 	 * Returns type of a button.

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatInspector.java
Patch:
@@ -435,7 +435,8 @@ private static String buildToolTipText( Component c, int parentLevel ) {
 
 		String name = c.getClass().getName();
 		name = name.substring( name.lastIndexOf( '.' ) + 1 );
-		appendRow( buf, "Class", name + " (" + c.getClass().getPackage().getName() + ")" );
+		Package pkg = c.getClass().getPackage();
+		appendRow( buf, "Class", name + " (" + (pkg != null ? pkg.getName() : "-") + ")" );
 		appendRow( buf, "Size", c.getWidth() + ", " + c.getHeight() + "&nbsp;&nbsp; @ " + c.getX() + ", " + c.getY() );
 
 		if( c instanceof Container )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/JBRCustomDecorations.java
Patch:
@@ -166,6 +166,7 @@ private static void initialize() {
 		if( !SystemInfo.isJetBrainsJVM_11_orLater || !SystemInfo.isWindows_10_orLater )
 			return;
 
+		// check whether disabled via system property
 		if( !FlatSystemProperties.getBoolean( FlatSystemProperties.USE_JETBRAINS_CUSTOM_DECORATIONS, true ) )
 			return;
 

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoFrame.java
Patch:
@@ -155,8 +155,7 @@ private void windowDecorationsChanged() {
 		menuBarEmbeddedCheckBoxMenuItem.setEnabled( windowDecorations );
 
 		// enable/disable window decoration for later created frames/dialogs
-		JFrame.setDefaultLookAndFeelDecorated( windowDecorations );
-		JDialog.setDefaultLookAndFeelDecorated( windowDecorations );
+		UIManager.put( "TitlePane.useWindowDecorations", windowDecorations );
 	}
 
 	private void menuBarEmbeddedChanged() {

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatNativeWindowBorderTest.java
Patch:
@@ -50,9 +50,6 @@ public static void main( String[] args ) {
 			FlatLightLaf.install();
 			FlatInspector.install( "ctrl shift alt X" );
 
-			JFrame.setDefaultLookAndFeelDecorated( true );
-			JDialog.setDefaultLookAndFeelDecorated( true );
-
 			mainFrame = showFrame();
 		} );
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -60,6 +60,7 @@
 import com.formdev.flatlaf.ui.FlatPopupFactory;
 import com.formdev.flatlaf.ui.JBRCustomDecorations;
 import com.formdev.flatlaf.util.GrayFilter;
+import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.MultiResolutionImageSupport;
 import com.formdev.flatlaf.util.SystemInfo;
 import com.formdev.flatlaf.util.UIScale;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -34,6 +34,7 @@
 import javax.swing.plaf.ColorUIResource;
 import com.formdev.flatlaf.json.Json;
 import com.formdev.flatlaf.json.ParseException;
+import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.StringUtils;
 
 /**

File: flatlaf-core/src/main/java/com/formdev/flatlaf/LinuxFontPolicy.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.StringTokenizer;
+
+import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.StringUtils;
 import com.formdev.flatlaf.util.SystemInfo;
 import com.formdev.flatlaf.util.UIScale;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -47,6 +47,7 @@
 import com.formdev.flatlaf.util.DerivedColor;
 import com.formdev.flatlaf.util.GrayFilter;
 import com.formdev.flatlaf.util.HSLColor;
+import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.StringUtils;
 import com.formdev.flatlaf.util.SystemInfo;
 import com.formdev.flatlaf.util.UIScale;
@@ -932,7 +933,7 @@ private static Object lazyUIManagerGet( String uiKey ) {
 
 		Object value = UIManager.get( uiKey );
 		if( value == null && !optional )
-			LoggingFacade.logSevere( "FlatLaf: '" + uiKey + "' not found in UI defaults." );
+			LoggingFacade.logSevere( "FlatLaf: '" + uiKey + "' not found in UI defaults.", null );
 		return value;
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/JBRCustomDecorations.java
Patch:
@@ -38,7 +38,7 @@
 import javax.swing.plaf.BorderUIResource;
 import com.formdev.flatlaf.FlatLaf;
 import com.formdev.flatlaf.FlatSystemProperties;
-import com.formdev.flatlaf.LoggingFacade;
+import com.formdev.flatlaf.util.LoggingFacade;
 import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.SystemInfo;
 

File: flatlaf-intellij-themes/src/main/java/com/formdev/flatlaf/intellijthemes/Utils.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.io.IOException;
 import com.formdev.flatlaf.IntelliJTheme;
-import com.formdev.flatlaf.LoggingFacade;
+import com.formdev.flatlaf.util.LoggingFacade;
 
 /**
  * @author Karl Tauber

File: flatlaf-intellij-themes/src/main/java/com/formdev/flatlaf/intellijthemes/materialthemeuilite/Utils.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.io.IOException;
 import com.formdev.flatlaf.IntelliJTheme;
-import com.formdev.flatlaf.LoggingFacade;
+import com.formdev.flatlaf.util.LoggingFacade;
 
 /**
  * @author Karl Tauber

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatInspector.java
Patch:
@@ -249,12 +249,10 @@ public void setEnabled( boolean enabled ) {
 
 		// add/remove window listener
 		if( enabled ) {
-			System.out.println( "add "+window );
 			window = SwingUtilities.windowForComponent( rootPane );
 			if( window != null )
 				window.addWindowListener( windowListener );
 		} else {
-			System.out.println( "rem" );
 			if( window != null ) {
 				window.removeWindowListener( windowListener );
 				window = null;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTabbedPaneUI.java
Patch:
@@ -893,7 +893,7 @@ protected void paintText( Graphics g, int tabPlacement, Font font, FontMetrics m
 			Color color;
 			if( tabPane.isEnabled() && tabPane.isEnabledAt( tabIndex ) ) {
 				color = tabPane.getForegroundAt( tabIndex );
-				if( isSelected && (color instanceof UIResource) && selectedForeground != null )
+				if( isSelected && selectedForeground != null && color == tabPane.getForeground() )
 					color = selectedForeground;
 			} else
 				color = disabledForeground;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatClientProperties.java
Patch:
@@ -187,7 +187,7 @@ public interface FlatClientProperties
 	 * }</pre>
 	 * <p>
 	 * <strong>Component</strong> {@link javax.swing.JComponent}<br>
-	 * <strong>Value type</strong> {@link java.util.function.Predicate&lt;javax.swing.JComponent&gt;
+	 * <strong>Value type</strong> {@link java.util.function.Predicate}&lt;javax.swing.JComponent&gt;
 	 */
 	String COMPONENT_FOCUS_OWNER = "JComponent.focusOwner";
 

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemePropertiesSupport.java
Patch:
@@ -179,6 +179,9 @@ Set<String> getAllKeys() {
 		for( Object key : getProperties().keySet() )
 			allKeysCache.add( (String) key );
 
+		if( baseFiles == null )
+			return allKeysCache;
+
 		for( int i = 0; i < baseFiles.length; i++ ) {
 			for( Object key : getBaseProperties( i ).keySet() )
 				allKeysCache.add( (String) key );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -123,7 +123,7 @@ public void paint( Graphics g, JComponent c ) {
 		// - if background was explicitly set to a non-UIResource color
 		if( !c.isOpaque() &&
 			((AbstractButton)c).isContentAreaFilled() &&
-			(c.getBackground() != defaultBackground) )
+			!defaultBackground.equals( c.getBackground() ) )
 		{
 			g.setColor( c.getBackground() );
 			g.fillRect( 0, 0, c.getWidth(), c.getHeight() );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -416,8 +416,9 @@ private void dumpColor( PrintWriter out, String key, Color color ) {
 
 	private String dumpColorHex( Color color ) {
 		boolean hasAlpha = (color.getAlpha() != 255);
-		return String.format( hasAlpha ? "#%08x" : "#%06x",
-			hasAlpha ? color.getRGB() : (color.getRGB() & 0xffffff) );
+		return hasAlpha
+			? String.format( "#%06x%02x  %d%%", color.getRGB() & 0xffffff, (color.getRGB() >> 24) & 0xff, Math.round( color.getAlpha() / 2.55f ) )
+			: String.format( "#%06x", color.getRGB() & 0xffffff );
 	}
 
 	private void dumpColorFunction( PrintWriter out, ColorFunction function ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -262,7 +262,7 @@ else if( DESKTOPFONTHINTS.equals( propertyName ) ) {
 			Color linkColor = defaults.getColor( "Component.linkColor" );
 			if( linkColor != null ) {
 				new HTMLEditorKit().getStyleSheet().addRule(
-					String.format( "a { color: #%06x; }", linkColor.getRGB() & 0xffffff ) );
+					String.format( "a, address { color: #%06x; }", linkColor.getRGB() & 0xffffff ) );
 			}
 		};
 
@@ -304,7 +304,7 @@ public void uninitialize() {
 		}
 
 		// restore default link color
-		new HTMLEditorKit().getStyleSheet().addRule( "a { color: blue; }" );
+		new HTMLEditorKit().getStyleSheet().addRule( "a, address { color: blue; }" );
 		postInitialization = null;
 
 		// restore enable/disable window decorations

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolTipUI.java
Patch:
@@ -71,7 +71,7 @@ protected void installListeners( JComponent c ) {
 		if( sharedPropertyChangedListener == null ) {
 			sharedPropertyChangedListener = e -> {
 				String name = e.getPropertyName();
-				if( name == "text" || name == "font" || name == "foreground" ) {
+				if( name == "tiptext" || name == "font" || name == "foreground" ) {
 					JToolTip toolTip = (JToolTip) e.getSource();
 					FlatLabelUI.updateHTMLRenderer( toolTip, toolTip.getTipText(), false );
 				}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -345,7 +345,7 @@ private static void paintComponentOuterBorderImpl( Graphics2D g, int x, int y, i
 		float innerArc = arc - (lineWidth * 2);
 
 		// reduce outer arc slightly for small arcs to make the curve slightly wider
-		if( arc > 0 && arc < UIScale.scale( 10 ) )
+		if( focusWidth > 0 && arc > 0 && arc < UIScale.scale( 10 ) )
 			outerArc -= UIScale.scale( 2f );
 
 		Path2D path = new Path2D.Float( Path2D.WIND_EVEN_ODD );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponentStateTest.java
Patch:
@@ -163,7 +163,7 @@ private void initComponents() {
 
 		//======== this ========
 		setLayout(new MigLayout(
-			"hidemode 3",
+			"insets dialog,hidemode 3",
 			// columns
 			"[fill]" +
 			"[fill]" +

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatClientProperties.java
Patch:
@@ -234,7 +234,7 @@ public interface FlatClientProperties
 	/**
 	 * Specifies whether the scroll pane uses smooth scrolling.
 	 * <p>
-	 * <strong>Component</strong> {{@link javax.swing.JScrollPane}<br>
+	 * <strong>Component</strong> {@link javax.swing.JScrollPane}<br>
 	 * <strong>Value type</strong> {@link java.lang.Boolean}
 	 */
 	String SCROLL_PANE_SMOOTH_SCROLLING = "JScrollPane.smoothScrolling";
@@ -679,7 +679,7 @@ public interface FlatClientProperties
 	//---- JTree --------------------------------------------------------------
 
 	/**
-	 * Override if a tree shows a wide selection.
+	 * Override if a tree shows a wide selection. Default is {@code true}.
 	 * <p>
 	 * <strong>Component</strong> {@link javax.swing.JTree}<br>
 	 * <strong>Value type</strong> {@link java.lang.Boolean}

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/NewDialog.java
Patch:
@@ -44,10 +44,12 @@ class NewDialog
 	}
 
 	private void okActionPerformed() {
+		System.out.println( "ok" );
 		dispose();
 	}
 
 	private void cancelActionPerformed() {
+		System.out.println( "cancel" );
 		dispose();
 	}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -119,7 +119,7 @@ static void loadDefaultsFromProperties( List<Class<?>> lafClasses, List<FlatDefa
 					addonClassLoaders.add( addonClassLoader );
 			}
 
-			// load custom properties files (usually provides by applications)
+			// load custom properties files (usually provided by applications)
 			List<Object> customDefaultsSources = FlatLaf.getCustomDefaultsSources();
 			int size = (customDefaultsSources != null) ? customDefaultsSources.size() : 0;
 			for( int i = 0; i < size; i++ ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/HiDPIUtils.java
Patch:
@@ -134,7 +134,7 @@ public static float computeTextYCorrection( Graphics2D g ) {
 		// - fractional scale factors result in fractional component Y device coordinates
 		// - fractional text Y device coordinates are rounded for horizontal lines of characters
 		// - maybe different rounding methods for drawing primitives (e.g. rectangle) and text
-		// - Java adds 0.5 to X/Y positions in before drawing string in BufferedTextPipe.enqueueGlyphList()
+		// - Java adds 0.5 to X/Y positions before drawing string in BufferedTextPipe.enqueueGlyphList()
 
 		// this is not the optimal solution, but works very good in most cases
 		// (tested with class FlatPaintingStringTest on Windows 10 with font "Segoe UI")

File: flatlaf-extras/src/main/module-info/module-info.java
Patch:
@@ -25,4 +25,6 @@
 
 	exports com.formdev.flatlaf.extras;
 	exports com.formdev.flatlaf.extras.components;
+
+	opens com.formdev.flatlaf.extras.resources;
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -546,7 +546,7 @@ public static void initIconColors( UIDefaults defaults, boolean dark ) {
 	}
 
 	private void putAATextInfo( UIDefaults defaults ) {
-		if ( SystemInfo.isJetBrainsJVM ) {
+		if ( SystemInfo.isMacOS && SystemInfo.isJetBrainsJVM ) {
 			// The awt.font.desktophints property suggests sub-pixel anti-aliasing
 			// which renders text with too much weight on macOS in the JetBrains JRE.
 			// Use greyscale anti-aliasing instead.

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -546,7 +546,7 @@ public static void initIconColors( UIDefaults defaults, boolean dark ) {
 	}
 
 	private void putAATextInfo( UIDefaults defaults ) {
-		if ( SystemInfo.isJetBrainsJVM ) {
+		if ( SystemInfo.isMacOS && SystemInfo.isJetBrainsJVM ) {
 			// The awt.font.desktophints property suggests sub-pixel anti-aliasing
 			// which renders text with too much weight on macOS in the JetBrains JRE.
 			// Use greyscale anti-aliasing instead.

File: flatlaf-jide-oss/src/main/java/com/formdev/flatlaf/jideoss/ui/FlatJideTabbedPaneUI.java
Patch:
@@ -39,6 +39,7 @@
 import javax.swing.plaf.ComponentUI;
 import com.formdev.flatlaf.FlatClientProperties;
 import com.formdev.flatlaf.ui.FlatUIUtils;
+import com.jidesoft.plaf.LookAndFeelFactory;
 import com.jidesoft.plaf.UIDefaultsLookup;
 import com.jidesoft.plaf.basic.BasicJideTabbedPaneUI;
 import com.jidesoft.swing.JideTabbedPane;
@@ -66,6 +67,7 @@ public class FlatJideTabbedPaneUI
 	private Object[] oldRenderingHints;
 
 	public static ComponentUI createUI( JComponent c ) {
+		LookAndFeelFactory.installJideExtension();
 		return new FlatJideTabbedPaneUI();
 	}
 

File: flatlaf-jide-oss/src/main/java/com/formdev/flatlaf/jideoss/ui/FlatRangeSliderUI.java
Patch:
@@ -36,6 +36,7 @@
 import com.formdev.flatlaf.ui.FlatSliderUI;
 import com.formdev.flatlaf.ui.FlatUIUtils;
 import com.formdev.flatlaf.util.UIScale;
+import com.jidesoft.plaf.LookAndFeelFactory;
 import com.jidesoft.plaf.basic.BasicRangeSliderUI;
 
 /**
@@ -65,6 +66,7 @@ public class FlatRangeSliderUI
 	private Object[] oldRenderingHints;
 
 	public static ComponentUI createUI( JComponent c ) {
+		LookAndFeelFactory.installJideExtension();
 		return new FlatRangeSliderUI();
 	}
 

File: flatlaf-extras/src/main/module-info/module-info.java
Patch:
@@ -24,4 +24,5 @@
 	requires com.formdev.flatlaf;
 
 	exports com.formdev.flatlaf.extras;
+	exports com.formdev.flatlaf.extras.components;
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -255,7 +255,7 @@ public static Object[] setRenderingHints( Graphics g ) {
 	}
 
 	/**
-	 * Resets rendering hints previously set with {@link #setRenderingHints(Graphics2D)}.
+	 * Resets rendering hints previously set with {@link #setRenderingHints}.
 	 */
 	public static void resetRenderingHints( Graphics g, Object[] oldRenderingHints ) {
 		Graphics2D g2 = (Graphics2D) g;
@@ -264,7 +264,7 @@ public static void resetRenderingHints( Graphics g, Object[] oldRenderingHints )
 	}
 
 	/**
-	 * Temporary resets rendering hints set with {@link #setRenderingHints(Graphics2D)}
+	 * Temporary resets rendering hints set with {@link #setRenderingHints}
 	 * and runs the given runnable.
 	 * <p>
 	 * This is intended for painting text while rendering hints are set.

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolTipUI.java
Patch:
@@ -116,7 +116,6 @@ public void paint( Graphics g, JComponent c ) {
 			FontMetrics fm = c.getFontMetrics( c.getFont() );
 			Insets insets = c.getInsets();
 
-			FlatUIUtils.setRenderingHints( (Graphics2D) g );
 			g.setColor( c.getForeground() );
 
 			List<String> lines = StringUtils.split( ((JToolTip)c).getTipText(), '\n' );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatTestFrame.java
Patch:
@@ -68,6 +68,9 @@ public class FlatTestFrame
 	public boolean applyComponentOrientationToFrame;
 
 	public static FlatTestFrame create( String[] args, String title ) {
+		// disable text antialiasing
+//		System.setProperty( "awt.useSystemAAFontSettings", "off" );
+
 		DemoPrefs.init( PREFS_ROOT_PATH );
 
 		// set scale factor

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/UIScale.java
Patch:
@@ -113,7 +113,7 @@ public static boolean isSystemScalingEnabled() {
 	}
 
 	public static double getSystemScaleFactor( Graphics2D g ) {
-		return isSystemScalingEnabled() ? g.getDeviceConfiguration().getDefaultTransform().getScaleX() : 1;
+		return isSystemScalingEnabled() ? getSystemScaleFactor( g.getDeviceConfiguration() ) : 1;
 	}
 
 	public static double getSystemScaleFactor( GraphicsConfiguration gc ) {

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponentsTest.java
Patch:
@@ -487,6 +487,7 @@ private void initComponents() {
 
 		//---- toggleButton1 ----
 		toggleButton1.setText("Enabled");
+		toggleButton1.setToolTipText("LOOOOOOOOOOOOOONG TEXT");
 		add(toggleButton1, "cell 1 2");
 
 		//---- toggleButton9 ----

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatClientProperties.java
Patch:
@@ -264,7 +264,7 @@ public interface FlatClientProperties
 	String TABBED_PANE_HAS_FULL_BORDER = "JTabbedPane.hasFullBorder";
 
 	/**
-	 * Specifies whether the tab area should be hidded if it contains only one tab.
+	 * Specifies whether the tab area should be hidden if it contains only one tab.
 	 * <p>
 	 * <strong>Component</strong> {@link javax.swing.JTabbedPane}<br>
 	 * <strong>Value type</strong> {@link java.lang.Boolean}
@@ -349,15 +349,15 @@ public interface FlatClientProperties
 	 * Specifies the callback that is invoked when a tab close button is clicked.
 	 * The callback is responsible for closing the tab.
 	 * <p>
-	 * Either use a {@link java.util.function.IntConsumer} that received the tab index as parameter:
+	 * Either use a {@link java.util.function.IntConsumer} that receives the tab index as parameter:
 	 * <pre>{@code
 	 * myTabbedPane.putClientProperty( "JTabbedPane.tabCloseCallback",
 	 *     (IntConsumer) tabIndex -> {
 	 *         // close tab here
 	 *     } );
 	 * }</pre>
 	 * Or use a {@link java.util.function.BiConsumer}&lt;javax.swing.JTabbedPane, Integer&gt;
-	 * that received the tabbed pane and the tab index as parameters:
+	 * that receives the tabbed pane and the tab index as parameters:
 	 * <pre>{@code
 	 * myTabbedPane.putClientProperty( "JTabbedPane.tabCloseCallback",
 	 *     (BiConsumer<JTabbedPane, Integer>) (tabbedPane, tabIndex) -> {

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatFormattedTextField.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.formdev.flatlaf.FlatClientProperties.*;
 import javax.swing.JFormattedTextField;
+import com.formdev.flatlaf.extras.components.FlatTextField.SelectAllOnFocusPolicy;
 
 /**
  * Subclass of {@link JFormattedTextField} that provides easy access to FlatLaf specific client properties.
@@ -43,9 +44,6 @@ public void setPlaceholderText( String placeholderText ) {
 	}
 
 
-	// NOTE: enum names must be equal to allowed strings
-	public enum SelectAllOnFocusPolicy { never, once, always };
-
 	/**
 	 * Returns whether all text is selected when the text component gains focus.
 	 */

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatPasswordField.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.formdev.flatlaf.FlatClientProperties.*;
 import javax.swing.JPasswordField;
+import com.formdev.flatlaf.extras.components.FlatTextField.SelectAllOnFocusPolicy;
 
 /**
  * Subclass of {@link JPasswordField} that provides easy access to FlatLaf specific client properties.
@@ -43,9 +44,6 @@ public void setPlaceholderText( String placeholderText ) {
 	}
 
 
-	// NOTE: enum names must be equal to allowed strings
-	public enum SelectAllOnFocusPolicy { never, once, always };
-
 	/**
 	 * Returns whether all text is selected when the text component gains focus.
 	 */

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatFormattedTextField.java
Patch:
@@ -44,7 +44,7 @@ public void setPlaceholderText( String placeholderText ) {
 
 
 	// NOTE: enum names must be equal to allowed strings
-	enum SelectAllOnFocusPolicy { never, once, always };
+	public enum SelectAllOnFocusPolicy { never, once, always };
 
 	/**
 	 * Returns whether all text is selected when the text component gains focus.

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatPasswordField.java
Patch:
@@ -44,7 +44,7 @@ public void setPlaceholderText( String placeholderText ) {
 
 
 	// NOTE: enum names must be equal to allowed strings
-	enum SelectAllOnFocusPolicy { never, once, always };
+	public enum SelectAllOnFocusPolicy { never, once, always };
 
 	/**
 	 * Returns whether all text is selected when the text component gains focus.

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatTextField.java
Patch:
@@ -44,7 +44,7 @@ public void setPlaceholderText( String placeholderText ) {
 
 
 	// NOTE: enum names must be equal to allowed strings
-	enum SelectAllOnFocusPolicy { never, once, always };
+	public enum SelectAllOnFocusPolicy { never, once, always };
 
 	/**
 	 * Returns whether all text is selected when the text component gains focus.

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/components/FlatComponentExtension.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.formdev.flatlaf.extras.components.extensions;
+package com.formdev.flatlaf.extras.components;
 
 import javax.swing.JComponent;
 import javax.swing.UIManager;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -357,7 +357,7 @@ public FlatWindowBorder() {
 
 		@Override
 		public Insets getBorderInsets( Component c, Insets insets ) {
-			if( isWindowMaximized( c ) ) {
+			if( isWindowMaximized( c ) || FlatUIUtils.isFullScreen( c ) ) {
 				// hide border if window is maximized
 				insets.top = insets.left = insets.bottom = insets.right = 0;
 				return insets;
@@ -367,7 +367,7 @@ public Insets getBorderInsets( Component c, Insets insets ) {
 
 		@Override
 		public void paintBorder( Component c, Graphics g, int x, int y, int width, int height ) {
-			if( isWindowMaximized( c ) )
+			if( isWindowMaximized( c ) || FlatUIUtils.isFullScreen( c ) )
 				return;
 
 			Container parent = c.getParent();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -285,6 +285,7 @@ private Dimension computeLayoutSize( Container parent, Function<Component, Dimen
 		@Override
 		public void layoutContainer( Container parent ) {
 			JRootPane rootPane = (JRootPane) parent;
+			boolean isFullScreen = FlatUIUtils.isFullScreen( rootPane );
 
 			Insets insets = rootPane.getInsets();
 			int x = insets.left;
@@ -298,15 +299,15 @@ public void layoutContainer( Container parent ) {
 				rootPane.getGlassPane().setBounds( x, y, width, height );
 
 			int nextY = 0;
-			if( titlePane != null ) {
+			if( !isFullScreen && titlePane != null ) {
 				Dimension prefSize = titlePane.getPreferredSize();
 				titlePane.setBounds( 0, 0, width, prefSize.height );
 				nextY += prefSize.height;
 			}
 
 			JMenuBar menuBar = rootPane.getJMenuBar();
 			if( menuBar != null && menuBar.isVisible() ) {
-				if( titlePane != null && titlePane.isMenuBarEmbedded() ) {
+				if( !isFullScreen && titlePane != null && titlePane.isMenuBarEmbedded() ) {
 					titlePane.validate();
 					menuBar.setBounds( titlePane.getMenuBarBounds() );
 				} else {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatClientProperties.java
Patch:
@@ -387,7 +387,7 @@ public interface FlatClientProperties
 	 *     {@link #TABBED_PANE_POLICY_AS_NEEDED} or
 	 *     {@link #TABBED_PANE_POLICY_AS_NEEDED_SINGLE}
 	 */
-	String TABBED_PANE_SCROLL_BUTTONS_POLICY = "JTabbedPane.scrollButtondPolicy";
+	String TABBED_PANE_SCROLL_BUTTONS_POLICY = "JTabbedPane.scrollButtonsPolicy";
 
 	/**
 	 * Display never.

File: flatlaf-jide-oss/src/main/java/com/formdev/flatlaf/jideoss/FlatJideOssDefaultsAddon.java
Patch:
@@ -72,8 +72,8 @@ public void initialize( UIDefaults defaults ) {
 				if( key instanceof String &&
 					(
 						((String)key).startsWith( "Jide" ) ||
-						((String)key).equals( "RangeSliderUI" ) ||
-					 ((String)key).equals( "Resizable.resizeBorder" ))
+						key.equals( "RangeSliderUI" ) ||
+						key.equals( "Resizable.resizeBorder" ))
 				)
 				{
 					jideDefaults.put( key, e.getValue() );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -583,7 +583,7 @@ public String getName() {
 
 		@Override
 		public String getDescription() {
-			return theme.name;
+			return getName();
 		}
 
 		@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatTabbedPaneCloseIcon.java
Patch:
@@ -68,13 +68,14 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		// paint background
 		Color bg = FlatButtonUI.buttonStateColor( c, background, null, null, hoverBackground, pressedBackground );
 		if( bg != null ) {
-			g.setColor( bg );
+			g.setColor( FlatUIUtils.deriveColor( bg, c.getBackground() ) );
 			g.fillRoundRect( (width - size.width) / 2, (height - size.height) / 2,
 				size.width, size.height, arc, arc );
 		}
 
 		// set cross color
-		g.setColor( FlatButtonUI.buttonStateColor( c, foreground, null, null, hoverForeground, pressedForeground ) );
+		Color fg = FlatButtonUI.buttonStateColor( c, foreground, null, null, hoverForeground, pressedForeground );
+		g.setColor( FlatUIUtils.deriveColor( fg, c.getForeground() ) );
 
 		float mx = width / 2;
 		float my = height / 2;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatAscendingSortIcon.java
Patch:
@@ -27,15 +27,15 @@
 /**
  * "ascendingSort" icon for {@link javax.swing.table.JTableHeader}.
  *
- * @uiDefault Component.arrowType				String	triangle (default) or chevron
+ * @uiDefault Component.arrowType				String	chevron (default) or triangle
  * @uiDefault Table.sortIconColor				Color
  *
  * @author Karl Tauber
  */
 public class FlatAscendingSortIcon
 	extends FlatAbstractIcon
 {
-	protected final boolean chevron = "chevron".equals( UIManager.getString( "Component.arrowType" ) );
+	protected final boolean chevron = FlatUIUtils.isChevron( UIManager.getString( "Component.arrowType" ) );
 	protected final Color sortIconColor = UIManager.getColor( "Table.sortIconColor" );
 
 	public FlatAscendingSortIcon() {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatDescendingSortIcon.java
Patch:
@@ -27,15 +27,15 @@
 /**
  * "descendingSort" icon for {@link javax.swing.table.JTableHeader}.
  *
- * @uiDefault Component.arrowType				String	triangle (default) or chevron
+ * @uiDefault Component.arrowType				String	chevron (default) or triangle
  * @uiDefault Table.sortIconColor				Color
  *
  * @author Karl Tauber
  */
 public class FlatDescendingSortIcon
 	extends FlatAbstractIcon
 {
-	protected final boolean chevron = "chevron".equals( UIManager.getString( "Component.arrowType" ) );
+	protected final boolean chevron = FlatUIUtils.isChevron( UIManager.getString( "Component.arrowType" ) );
 	protected final Color sortIconColor = UIManager.getColor( "Table.sortIconColor" );
 
 	public FlatDescendingSortIcon() {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatMenuArrowIcon.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * "arrow" icon for {@link javax.swing.JMenu}.
  *
- * @uiDefault Component.arrowType				String	triangle (default) or chevron
+ * @uiDefault Component.arrowType				String	chevron (default) or triangle
  * @uiDefault Menu.icon.arrowColor				Color
  * @uiDefault Menu.icon.disabledArrowColor		Color
  * @uiDefault Menu.selectionForeground			Color
@@ -39,7 +39,7 @@
 public class FlatMenuArrowIcon
 	extends FlatAbstractIcon
 {
-	protected final boolean chevron = "chevron".equals( UIManager.getString( "Component.arrowType" ) );
+	protected final boolean chevron = FlatUIUtils.isChevron( UIManager.getString( "Component.arrowType" ) );
 	protected final Color arrowColor = UIManager.getColor( "Menu.icon.arrowColor" );
 	protected final Color disabledArrowColor = UIManager.getColor( "Menu.icon.disabledArrowColor" );
 	protected final Color selectionForeground = UIManager.getColor( "Menu.selectionForeground" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatTreeCollapsedIcon.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * "collapsed" icon for {@link javax.swing.JTree}.
  *
- * @uiDefault Component.arrowType				String	triangle (default) or chevron
+ * @uiDefault Component.arrowType				String	chevron (default) or triangle
  * @uiDefault Tree.icon.collapsedColor			Color
  *
  * @author Karl Tauber
@@ -41,7 +41,7 @@ public FlatTreeCollapsedIcon() {
 
 	FlatTreeCollapsedIcon( Color color ) {
 		super( 11, 11, color );
-		chevron = "chevron".equals( UIManager.getString( "Component.arrowType" ) );
+		chevron = FlatUIUtils.isChevron( UIManager.getString( "Component.arrowType" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatArrowButton.java
Patch:
@@ -67,7 +67,7 @@ public FlatArrowButton( int direction, String type, Color foreground, Color disa
 	{
 		super( direction, Color.WHITE, Color.WHITE, Color.WHITE, Color.WHITE );
 
-		this.chevron = "chevron".equals( type );
+		this.chevron = FlatUIUtils.isChevron( type );
 		this.foreground = foreground;
 		this.disabledForeground = disabledForeground;
 		this.hoverForeground = hoverForeground;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -85,7 +85,7 @@
  * @uiDefault ComboBox.editorColumns			int
  * @uiDefault ComboBox.maximumRowCount			int
  * @uiDefault ComboBox.buttonStyle				String	auto (default), button or none
- * @uiDefault Component.arrowType				String	triangle (default) or chevron
+ * @uiDefault Component.arrowType				String	chevron (default) or triangle
  * @uiDefault Component.isIntelliJTheme			boolean
  * @uiDefault Component.borderColor				Color
  * @uiDefault Component.disabledBorderColor		Color

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatScrollBarUI.java
Patch:
@@ -65,7 +65,7 @@
  * @uiDefault ScrollBar.pressedTrackColor			Color	optional
  * @uiDefault ScrollBar.pressedThumbColor			Color	optional
  * @uiDefault ScrollBar.pressedThumbWithTrack		boolean
- * @uiDefault Component.arrowType					String	triangle (default) or chevron
+ * @uiDefault Component.arrowType					String	chevron (default) or triangle
  * @uiDefault ScrollBar.showButtons					boolean
  * @uiDefault ScrollBar.buttonArrowColor			Color
  * @uiDefault ScrollBar.buttonDisabledArrowColor	Color

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -59,7 +59,7 @@
  *
  * @uiDefault Component.minimumWidth			int
  * @uiDefault Spinner.buttonStyle				String	button (default) or none
- * @uiDefault Component.arrowType				String	triangle (default) or chevron
+ * @uiDefault Component.arrowType				String	chevron (default) or triangle
  * @uiDefault Component.isIntelliJTheme			boolean
  * @uiDefault Component.borderColor				Color
  * @uiDefault Component.disabledBorderColor		Color

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSplitPaneUI.java
Patch:
@@ -49,7 +49,7 @@
  *
  * <!-- FlatSplitPaneUI -->
  *
- * @uiDefault Component.arrowType						String	triangle (default) or chevron
+ * @uiDefault Component.arrowType						String	chevron (default) or triangle
  * @uiDefault SplitPane.continuousLayout				boolean
  * @uiDefault SplitPaneDivider.oneTouchArrowColor		Color
  * @uiDefault SplitPaneDivider.oneTouchHoverArrowColor	Color

File: flatlaf-swingx/src/main/java/com/formdev/flatlaf/swingx/ui/FlatMonthDownIcon.java
Patch:
@@ -25,11 +25,12 @@
 import javax.swing.UIManager;
 import com.formdev.flatlaf.icons.FlatAbstractIcon;
 import com.formdev.flatlaf.ui.FlatArrowButton;
+import com.formdev.flatlaf.ui.FlatUIUtils;
 
 /**
  * "month down" icon for {@link org.jdesktop.swingx.JXMonthView}.
  *
- * @uiDefault Component.arrowType				String	triangle (default) or chevron
+ * @uiDefault Component.arrowType				String	chevron (default) or triangle
  * @uiDefault JXMonthView.arrowColor			Color
  * @uiDefault JXMonthView.disabledArrowColor	Color
  *
@@ -38,7 +39,7 @@
 public class FlatMonthDownIcon
 	extends FlatAbstractIcon
 {
-	protected final boolean chevron = "chevron".equals( UIManager.getString( "Component.arrowType" ) );
+	protected final boolean chevron = FlatUIUtils.isChevron( UIManager.getString( "Component.arrowType" ) );
 	protected final Color arrowColor = UIManager.getColor( "JXMonthView.arrowColor" );
 	protected final Color disabledArrowColor = UIManager.getColor( "JXMonthView.disabledArrowColor" );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTabbedPaneUI.java
Patch:
@@ -1405,7 +1405,8 @@ public void paint( Graphics g ) {
 			if( direction == EAST || direction == WEST ) {
 				int xoffset = (getWidth() / 2) - getHeight();
 				setXOffset( (direction == EAST) ? xoffset : -xoffset );
-			}
+			} else
+				setXOffset( 0 );
 
 			super.paint( g );
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/Animator.java
Patch:
@@ -96,7 +96,7 @@ public int getDuration() {
 	 * Sets the duration of the animation in milliseconds.
 	 *
 	 * @throws IllegalStateException if animation is running
-	 * @throws IllegalArgumentException if duration is <= zero
+	 * @throws IllegalArgumentException if duration is &lt;= zero
 	 */
 	public void setDuration( int duration ) {
 		throwExceptionIfRunning();
@@ -118,7 +118,7 @@ public int getResolution() {
 	 *
 	 * @param resolution the resolution of the animation in milliseconds
 	 * @throws IllegalStateException if animation is running
-	 * @throws IllegalArgumentException if resolution is <= zero
+	 * @throws IllegalArgumentException if resolution is &lt;= zero
 	 */
 	public void setResolution( int resolution ) {
 		throwExceptionIfRunning();

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatUIDefaultsInspector.java
Patch:
@@ -76,6 +76,8 @@ public class FlatUIDefaultsInspector
 	/**
 	 * Installs a key listener into the application that allows enabling and disabling
 	 * the UI inspector with the given keystroke (e.g. "ctrl shift alt Y").
+	 *
+	 * @param activationKeys a keystroke (e.g. "ctrl shift alt Y")
 	 */
 	public static void install( String activationKeys ) {
 		KeyStroke keyStroke = KeyStroke.getKeyStroke( activationKeys );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatContainerTest.java
Patch:
@@ -300,7 +300,7 @@ private void secondTabClosableChanged() {
 	}
 
 	private void smallerTabHeightChanged() {
-		Integer tabHeight = smallerTabHeightCheckBox.isSelected() ? 20 : null;
+		Integer tabHeight = smallerTabHeightCheckBox.isSelected() ? 26 : null;
 		putTabbedPanesClientProperty( TABBED_PANE_TAB_HEIGHT, tabHeight );
 	}
 

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatContainerTest.java
Patch:
@@ -38,6 +38,7 @@ public class FlatContainerTest
 	public static void main( String[] args ) {
 		SwingUtilities.invokeLater( () -> {
 			FlatTestFrame frame = FlatTestFrame.create( args, "FlatContainerTest" );
+			frame.useApplyComponentOrientation = true;
 			frame.showFrame( FlatContainerTest::new );
 		} );
 	}
@@ -115,7 +116,7 @@ private void addRemoveMoreTabs( JTabbedPane tabbedPane ) {
 			for( int i = oldTabCount + 1; i <= newTabCount; i++ )
 				addTab( tabbedPane, "Tab " + i, "tab content " + i );
 		} else if( newTabCount < oldTabCount ) {
-			while( tabbedPane.getTabCount() > 4 )
+			while( tabbedPane.getTabCount() > newTabCount )
 				tabbedPane.removeTabAt( tabbedPane.getTabCount() - 1 );
 		}
 	}
@@ -171,7 +172,7 @@ private void setTabIcons( JTabbedPane tabbedPane, boolean showTabIcons ) {
 
 	private void customBorderChanged() {
 		Border border = customBorderCheckBox.isSelected()
-			? new LineBorder( Color.magenta, 20 )
+			? new MatteBorder( 10, 20, 25, 35, Color.green )
 			: null;
 
 		tabbedPane1.setBorder( border );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -467,9 +467,11 @@ private void initFonts( UIDefaults defaults ) {
 			uiFont = (font instanceof FontUIResource) ? (FontUIResource) font : new FontUIResource( font );
 		}
 
+		// fallback
 		if( uiFont == null )
 			uiFont = createCompositeFont( Font.SANS_SERIF, Font.PLAIN, 12 );
 
+		// increase font size if system property "flatlaf.uiScale" is set
 		uiFont = UIScale.applyCustomScaleFactor( uiFont );
 
 		// use active value for all fonts to allow changing fonts in all components

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatUIDefaultsInspector.java
Patch:
@@ -746,7 +746,8 @@ protected void paintComponent( Graphics g ) {
 
 			int dot = key.indexOf( '.' );
 			if( dot > 0 && !selected ) {
-				g.setColor( UIManager.getColor( "Label.disabledForeground" ) );
+				g.setColor( FlatUIUtils.getUIColor( "Label.disabledForeground",
+					FlatUIUtils.getUIColor( "Label.disabledText", Color.gray ) ) );
 
 				if( dot >= clippedText.length() )
 					FlatUIUtils.drawString( this, g, clippedText, x, y );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -87,7 +87,7 @@ public static void main( String[] args ) {
 		System.setProperty( "sun.java2d.uiScale", "1x" );
 		System.setProperty( FlatSystemProperties.UI_SCALE, "1x" );
 
-		File dir = new File( "src/main/resources/com/formdev/flatlaf/testing/uidefaults" );
+		File dir = new File( "dumps/uidefaults" );
 
 		dump( FlatLightLaf.class.getName(), dir );
 		dump( FlatDarkLaf.class.getName(), dir );

File: flatlaf-extras/src/main/module-info/module-info.java
Patch:
@@ -19,6 +19,7 @@
  */
 module com.formdev.flatlaf.extras {
 	requires java.desktop;
+	requires java.prefs;
 	requires static com.kitfox.svg; // optional at runtime
 	requires com.formdev.flatlaf;
 

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoFrame.java
Patch:
@@ -600,7 +600,7 @@ private void initComponents() {
 				optionsMenu.add(showHintsMenuItem);
 
 				//---- showUIDefaultsInspectorMenuItem ----
-				showUIDefaultsInspectorMenuItem.setText("Show UIDefaults Inspector");
+				showUIDefaultsInspectorMenuItem.setText("Show UI Defaults Inspector");
 				showUIDefaultsInspectorMenuItem.addActionListener(e -> showUIDefaultsInspector());
 				optionsMenu.add(showUIDefaultsInspectorMenuItem);
 			}

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/FlatUIDefaultsInspector.java
Patch:
@@ -408,6 +408,9 @@ public void windowDeactivated(WindowEvent e) {
 					filterPanel.add(flterLabel, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0,
 						GridBagConstraints.CENTER, GridBagConstraints.BOTH,
 						new Insets(0, 0, 0, 10), 0, 0));
+
+					//---- filterField ----
+					filterField.putClientProperty("JTextField.placeholderText", "enter one or more filter strings, separated by space characters");
 					filterPanel.add(filterField, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0,
 						GridBagConstraints.CENTER, GridBagConstraints.BOTH,
 						new Insets(0, 0, 0, 10), 0, 0));

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatThemeFileEditor.java
Patch:
@@ -29,6 +29,7 @@
 import org.fife.ui.rsyntaxtextarea.FileLocation;
 import com.formdev.flatlaf.FlatLightLaf;
 import com.formdev.flatlaf.extras.FlatInspector;
+import com.formdev.flatlaf.extras.FlatUIDefaultsInspector;
 import com.formdev.flatlaf.util.UIScale;
 
 /**
@@ -51,6 +52,7 @@ public static void main( String[] args ) {
 		SwingUtilities.invokeLater( () -> {
 			FlatLightLaf.install();
 			FlatInspector.install( "ctrl alt shift X" );
+			FlatUIDefaultsInspector.install( "ctrl shift alt Y" );
 
 			FlatThemeFileEditor frame = new FlatThemeFileEditor();
 
@@ -85,7 +87,7 @@ private void initComponents() {
 		themeEditorArea = new FlatThemeEditorPane();
 
 		//======== this ========
-		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
 		setTitle("FlatLaf Theme Editor");
 		Container contentPane = getContentPane();
 		contentPane.setLayout(new BorderLayout());

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/FlatLafDemo.java
Patch:
@@ -22,6 +22,7 @@
 import javax.swing.SwingUtilities;
 import com.formdev.flatlaf.FlatLaf;
 import com.formdev.flatlaf.extras.FlatInspector;
+import com.formdev.flatlaf.extras.FlatUIDefaultsInspector;
 import com.formdev.flatlaf.util.SystemInfo;
 
 /**
@@ -52,8 +53,9 @@ public static void main( String[] args ) {
 			// set look and feel
 			DemoPrefs.initLaf( args );
 
-			// install inspector
+			// install inspectors
 			FlatInspector.install( "ctrl shift alt X" );
+			FlatUIDefaultsInspector.install( "ctrl shift alt Y" );
 
 			// create frame
 			DemoFrame frame = new DemoFrame();

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -61,6 +61,7 @@
 import javax.swing.plaf.basic.BasicLookAndFeel;
 import com.formdev.flatlaf.*;
 import com.formdev.flatlaf.intellijthemes.FlatAllIJThemes;
+import com.formdev.flatlaf.testing.FlatTestLaf;
 import com.formdev.flatlaf.ui.FlatLineBorder;
 import com.formdev.flatlaf.util.ColorFunctions.ColorFunction;
 import com.formdev.flatlaf.util.ColorFunctions.HSLIncreaseDecrease;
@@ -96,6 +97,8 @@ public static void main( String[] args ) {
 			dump( FlatDarculaLaf.class.getName(), dir );
 		}
 
+		dump( FlatTestLaf.class.getName(), dir );
+
 //		dump( MyBasicLookAndFeel.class.getName(), dir );
 //		dump( MetalLookAndFeel.class.getName(), dir );
 //		dump( NimbusLookAndFeel.class.getName(), dir );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -172,7 +172,7 @@ protected FlatRootLayout createRootLayout() {
 	}
 
 	protected FlatWindowResizer createWindowResizer() {
-		return new FlatWindowResizer( rootPane );
+		return new FlatWindowResizer.WindowResizer( rootPane );
 	}
 
 	protected FlatTitlePane createTitlePane() {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -531,6 +531,7 @@ private void applyCheckBoxColors( UIDefaults defaults ) {
 		uiKeyMapping.put( "Slider.trackWidth", "" ); // ignore (used in Material Theme UI Lite)
 
 		// TitlePane
+		uiKeyCopying.put( "TitlePane.inactiveBackground",     "TitlePane.background" );
 		uiKeyMapping.put( "TitlePane.infoForeground",         "TitlePane.foreground" );
 		uiKeyMapping.put( "TitlePane.inactiveInfoForeground", "TitlePane.inactiveForeground" );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListUI.java
Patch:
@@ -126,6 +126,9 @@ public void focusLost( FocusEvent e ) {
 	 * or the application has to be changed to extend a FlatLaf renderer.
 	 */
 	private void toggleSelectionColors() {
+		if( list == null )
+			return;
+
 		if( FlatUIUtils.isPermanentFocusOwner( list ) ) {
 			if( list.getSelectionBackground() == selectionInactiveBackground )
 				list.setSelectionBackground( selectionBackground );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableUI.java
Patch:
@@ -188,6 +188,9 @@ public void focusLost( FocusEvent e ) {
 	 * or the application has to be changed to extend a FlatLaf renderer.
 	 */
 	private void toggleSelectionColors() {
+		if( table == null )
+			return;
+
 		if( FlatUIUtils.isPermanentFocusOwner( table ) ) {
 			if( table.getSelectionBackground() == selectionInactiveBackground )
 				table.setSelectionBackground( selectionBackground );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatTestFrame.java
Patch:
@@ -77,6 +77,9 @@ public static FlatTestFrame create( String[] args, String title ) {
 		// disable animated Laf change
 		System.setProperty( "flatlaf.animatedLafChange", "false" );
 
+		// test loading custom defaults from package
+		FlatLaf.registerCustomDefaultsSource( "com.formdev.flatlaf.testing.customdefaults" );
+
 		// set look and feel
 		DemoPrefs.initLaf( args );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableHeaderUI.java
Patch:
@@ -158,7 +158,7 @@ private void paintColumnBorders( Graphics g, JComponent c ) {
 			g2.setColor( separatorColor );
 
 			int sepCount = columnCount;
-			if( header.getTable().getAutoResizeMode() != JTable.AUTO_RESIZE_OFF && !isVerticalScrollBarVisible() )
+			if( header.getTable() != null && header.getTable().getAutoResizeMode() != JTable.AUTO_RESIZE_OFF && !isVerticalScrollBarVisible() )
 				sepCount--;
 
 			if( header.getComponentOrientation().isLeftToRight() ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -263,6 +263,9 @@ private void apply( String key, Object value, UIDefaults defaults, ArrayList<Obj
 			for( Map.Entry<String, Object> e : ((Map<String, Object>)value).entrySet() )
 				apply( key + '.' + e.getKey(), e.getValue(), defaults, defaultsKeysCache, uiKeys );
 		} else {
+			if( "".equals( value ) )
+				return; // ignore empty value
+
 			uiKeys.add( key );
 
 			// fix ComboBox size and Spinner border in all Material UI Lite themes

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonBorder.java
Patch:
@@ -141,6 +141,9 @@ protected int getBorderWidth( Component c ) {
 
 	@Override
 	protected int getArc( Component c ) {
+		if( isCellEditor( c ) )
+			return 0;
+
 		switch( FlatButtonUI.getButtonType( c ) ) {
 			case FlatButtonUI.TYPE_SQUARE: return 0;
 			case FlatButtonUI.TYPE_ROUND_RECT: return Short.MAX_VALUE;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -304,6 +304,9 @@ public void layoutContainer( Container parent ) {
 			Container contentPane = rootPane.getContentPane();
 			if( contentPane != null )
 				contentPane.setBounds( 0, nextY, width, Math.max( height - nextY, 0 ) );
+
+			if( titlePane != null )
+				titlePane.menuBarLayouted();
 		}
 
 		@Override

File: flatlaf-swingx/src/main/java/com/formdev/flatlaf/swingx/ui/FlatDatePickerBorder.java
Patch:
@@ -39,7 +39,7 @@ protected boolean isFocused( Component c ) {
 	}
 
 	@Override
-	protected boolean isTableCellEditor( Component c ) {
+	protected boolean isCellEditor( Component c ) {
 		return c.getParent() instanceof JTable;
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatScrollBarUI.java
Patch:
@@ -284,12 +284,12 @@ protected Color getThumbColor( JComponent c, boolean hover, boolean pressed ) {
 
 	@Override
 	protected Dimension getMinimumThumbSize() {
-		return UIScale.scale( super.getMinimumThumbSize() );
+		return UIScale.scale( FlatUIUtils.addInsets( super.getMinimumThumbSize(), thumbInsets ) );
 	}
 
 	@Override
 	protected Dimension getMaximumThumbSize() {
-		return UIScale.scale( super.getMaximumThumbSize() );
+		return UIScale.scale( FlatUIUtils.addInsets( super.getMaximumThumbSize(), thumbInsets ) );
 	}
 
 	//---- class ScrollBarHoverListener ---------------------------------------

File: flatlaf-core/src/main/java/com/formdev/flatlaf/LinuxFontPolicy.java
Patch:
@@ -39,7 +39,7 @@
 class LinuxFontPolicy
 {
 	static Font getFont() {
-		return SystemInfo.IS_KDE ? getKDEFont() : getGnomeFont();
+		return SystemInfo.isKDE ? getKDEFont() : getGnomeFont();
 	}
 
 	/**
@@ -77,7 +77,7 @@ else if( Character.isDigit( word.charAt( 0 ) ) ) {
 		// Ubuntu font is rendered poorly (except if running in JetBrains VM)
 		// --> use Liberation Sans font
 		if( family.startsWith( "Ubuntu" ) &&
-			!SystemInfo.IS_JETBRAINS_JVM &&
+			!SystemInfo.isJetBrainsJVM &&
 			!FlatSystemProperties.getBoolean( FlatSystemProperties.USE_UBUNTU_FONT, false ) )
 		  family = "Liberation Sans";
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/MnemonicHandler.java
Patch:
@@ -71,13 +71,13 @@ void uninstall() {
 	@Override
 	public boolean postProcessKeyEvent( KeyEvent e ) {
 		int keyCode = e.getKeyCode();
-		if( SystemInfo.IS_MAC ) {
+		if( SystemInfo.isMacOS ) {
 			// Ctrl+Alt keys must be pressed on Mac
 			if( keyCode == KeyEvent.VK_CONTROL || keyCode == KeyEvent.VK_ALT )
 				showMnemonics( shouldShowMnemonics( e ) && e.isControlDown() && e.isAltDown(), e.getComponent() );
 		} else {
 			// Alt key must be pressed on Windows and Linux
-			if( SystemInfo.IS_WINDOWS )
+			if( SystemInfo.isWindows )
 				return processKeyEventOnWindows( e );
 
 			if( keyCode == KeyEvent.VK_ALT )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -144,9 +144,9 @@ static void loadDefaultsFromProperties( List<Class<?>> lafClasses, List<FlatDefa
 
 				// handle platform specific properties
 				String platformPrefix =
-					SystemInfo.IS_WINDOWS ? "[win]" :
-					SystemInfo.IS_MAC ? "[mac]" :
-					SystemInfo.IS_LINUX ? "[linux]" : "[unknown]";
+					SystemInfo.isWindows ? "[win]" :
+					SystemInfo.isMacOS ? "[mac]" :
+					SystemInfo.isLinux ? "[linux]" : "[unknown]";
 				for( String key : platformSpecificKeys ) {
 					Object value = properties.remove( key );
 					if( key.startsWith( platformPrefix ) )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -306,7 +306,7 @@ protected void configureEditor() {
 		updateEditorColors();
 
 		// macOS
-		if( SystemInfo.IS_MAC && editor instanceof JTextComponent ) {
+		if( SystemInfo.isMacOS && editor instanceof JTextComponent ) {
 			// delegate actions from editor text field to combobox, which is necessary
 			// because text field on macOS already handle those keys
 			InputMap inputMap = ((JTextComponent)editor).getInputMap();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuBarUI.java
Patch:
@@ -82,7 +82,7 @@ public void actionPerformed( ActionEvent e ) {
 			JMenuBar menuBar = (JMenuBar) e.getSource();
 			JMenu menu = menuBar.getMenu( 0 );
 			if( menu != null ) {
-				MenuSelectionManager.defaultManager().setSelectedPath( SystemInfo.IS_WINDOWS
+				MenuSelectionManager.defaultManager().setSelectedPath( SystemInfo.isWindows
 					? new MenuElement[] { menuBar, menu }
 					: new MenuElement[] { menuBar, menu, menu.getPopupMenu() } );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -62,7 +62,7 @@ public Popup getPopup( Component owner, Component contents, int x, int y )
 			return new NonFlashingPopup( super.getPopup( owner, contents, x, y ), contents );
 
 		// macOS and Linux adds drop shadow to heavy weight popups
-		if( SystemInfo.IS_MAC || SystemInfo.IS_LINUX ) {
+		if( SystemInfo.isMacOS || SystemInfo.isLinux ) {
 			Popup popup = getHeavyWeightPopup( owner, contents, x, y );
 			if( popup == null )
 				popup = super.getPopup( owner, contents, x, y );
@@ -105,7 +105,7 @@ private Popup getHeavyWeightPopup( Component owner, Component contents, int x, i
 		throws IllegalArgumentException
 	{
 		try {
-			if( SystemInfo.IS_JAVA_9_OR_LATER ) {
+			if( SystemInfo.isJava_9_orLater ) {
 				if( java9getPopupMethod == null ) {
 					java9getPopupMethod = PopupFactory.class.getDeclaredMethod(
 						"getPopup", Component.class, Component.class, int.class, int.class, boolean.class );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -69,7 +69,7 @@ public class FlatRootPaneUI
 {
 	// check this field before using class JBRCustomDecorations to avoid unnecessary loading of that class
 	static final boolean canUseJBRCustomDecorations
-		= SystemInfo.IS_JETBRAINS_JVM_11_OR_LATER && SystemInfo.IS_WINDOWS_10_OR_LATER;
+		= SystemInfo.isJetBrainsJVM_11_orLater && SystemInfo.isWindows_10_orLater;
 
 	protected JRootPane rootPane;
 	protected FlatTitlePane titlePane;
@@ -119,7 +119,7 @@ protected void installDefaults( JRootPane c ) {
 		}
 
 		// enable dark window appearance on macOS when running in JetBrains Runtime
-		if( SystemInfo.IS_JETBRAINS_JVM && SystemInfo.IS_MAC_OS_10_14_MOJAVE ) {
+		if( SystemInfo.isJetBrainsJVM && SystemInfo.isMacOS_10_14_Mojave_orLater ) {
 			LookAndFeel laf = UIManager.getLookAndFeel();
 			boolean isDark = laf instanceof FlatLaf && ((FlatLaf)laf).isDark();
 			c.putClientProperty( "jetbrains.awt.windowDarkAppearance", isDark );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -472,7 +472,7 @@ protected void updateMaximizedBounds() {
 			int maximizedWidth = screenBounds.width;
 			int maximizedHeight = screenBounds.height;
 
-			if( !SystemInfo.IS_JAVA_15_OR_LATER ) {
+			if( !SystemInfo.isJava_15_orLater ) {
 				// on Java 8 to 14, maximized x,y are 0,0 based on all screens in a multi-screen environment
 				maximizedX = 0;
 				maximizedY = 0;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/JBRCustomDecorations.java
Patch:
@@ -191,7 +191,7 @@ private static void initialize() {
 		initialized = true;
 
 		// requires JetBrains Runtime 11 and Windows 10
-		if( !SystemInfo.IS_JETBRAINS_JVM_11_OR_LATER || !SystemInfo.IS_WINDOWS_10_OR_LATER )
+		if( !SystemInfo.isJetBrainsJVM_11_orLater || !SystemInfo.isWindows_10_orLater )
 			return;
 
 		if( !FlatSystemProperties.getBoolean( FlatSystemProperties.USE_JETBRAINS_CUSTOM_DECORATIONS, true ) )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/HiDPIUtils.java
Patch:
@@ -117,10 +117,10 @@ private static boolean useTextYCorrection() {
 	 * This methods computes a correction value for the Y position.
 	 */
 	public static float computeTextYCorrection( Graphics2D g ) {
-		if( !useTextYCorrection() || !SystemInfo.IS_WINDOWS )
+		if( !useTextYCorrection() || !SystemInfo.isWindows )
 			return 0;
 
-		if( !SystemInfo.IS_JAVA_9_OR_LATER )
+		if( !SystemInfo.isJava_9_orLater )
 			return UIScale.getUserScaleFactor() > 1 ? -UIScale.scale( 0.625f ) : 0;
 
 		AffineTransform t = g.getTransform();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/JavaCompatibility.java
Patch:
@@ -48,10 +48,10 @@ public static void drawStringUnderlineCharAt( JComponent c, Graphics g,
 		synchronized( JavaCompatibility.class ) {
 			if( drawStringUnderlineCharAtMethod == null ) {
 				try {
-					Class<?> cls = Class.forName( SystemInfo.IS_JAVA_9_OR_LATER
+					Class<?> cls = Class.forName( SystemInfo.isJava_9_orLater
 						? "javax.swing.plaf.basic.BasicGraphicsUtils"
 						: "sun.swing.SwingUtilities2" );
-					drawStringUnderlineCharAtMethod = cls.getMethod( "drawStringUnderlineCharAt", SystemInfo.IS_JAVA_9_OR_LATER
+					drawStringUnderlineCharAtMethod = cls.getMethod( "drawStringUnderlineCharAt", SystemInfo.isJava_9_orLater
 						? new Class[] { JComponent.class, Graphics2D.class, String.class, int.class, float.class, float.class }
 						: new Class[] { JComponent.class, Graphics.class, String.class, int.class, int.class, int.class } );
 				} catch( Exception ex ) {
@@ -62,7 +62,7 @@ public static void drawStringUnderlineCharAt( JComponent c, Graphics g,
 		}
 
 		try {
-			if( SystemInfo.IS_JAVA_9_OR_LATER )
+			if( SystemInfo.isJava_9_orLater )
 				drawStringUnderlineCharAtMethod.invoke( null, c, g, text, underlinedIndex, (float) x, (float) y );
 			else
 				drawStringUnderlineCharAtMethod.invoke( null, c, g, text, underlinedIndex, x, y );

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/FlatLafDemo.java
Patch:
@@ -32,7 +32,7 @@ public class FlatLafDemo
 
 	public static void main( String[] args ) {
 		// on macOS enable screen menu bar
-		if( SystemInfo.IS_MAC && System.getProperty( "apple.laf.useScreenMenuBar" ) == null )
+		if( SystemInfo.isMacOS && System.getProperty( "apple.laf.useScreenMenuBar" ) == null )
 			System.setProperty( "apple.laf.useScreenMenuBar", "true" );
 
 		SwingUtilities.invokeLater( () -> {

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatDisabledIconsTest.java
Patch:
@@ -585,7 +585,7 @@ private static class LightOrDarkIcon
 		private static ImageIcon loadIcon( String iconName ) {
 			ImageIcon icon = new ImageIcon( LightOrDarkIcon.class.getResource( iconName ) );
 
-			if( SystemInfo.IS_MAC || !MultiResolutionImageSupport.isAvailable() || !iconName.endsWith( ".png" ) )
+			if( SystemInfo.isMacOS || !MultiResolutionImageSupport.isAvailable() || !iconName.endsWith( ".png" ) )
 				return icon;
 
 			String iconName2x = iconName.replace( ".png", "@2x.png" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -639,6 +639,8 @@ private static Object parseColorHSLIncreaseDecrease( int hslIndex, boolean incre
 		// parse base color
 		String resolvedColorStr = resolver.apply( colorStr );
 		ColorUIResource baseColor = (ColorUIResource) parseColorOrFunction( resolvedColorStr, resolver, reportError );
+		if( baseColor == null )
+			return null;
 
 		// apply this function to base color
 		Color newColor = ColorFunctions.applyFunctions( baseColor, function );

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatCompletionProvider.java
Patch:
@@ -78,7 +78,7 @@ protected List<Completion> getCompletionsImpl( JTextComponent comp ) {
 	@Override
 	public boolean isAutoActivateOkay( JTextComponent comp ) {
 		CompletionProvider provider = getProviderFor( comp );
-		return (provider != null) ? provider.isAutoActivateOkay( comp ) : null;
+		return (provider != null) ? provider.isAutoActivateOkay( comp ) : false;
 	}
 
 	private CompletionProvider getProviderFor( JTextComponent comp ) {

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatOccurrenceMarker.java
Patch:
@@ -58,7 +58,7 @@ public void markOccurrences( RSyntaxDocument doc, Token t, RSyntaxTextAreaHighli
 		// make a copy of the token because it is overwritten in getTokenListForLine()
 		Token t2 = new TokenImpl( t );
 
-		// check whether token occurres more than once
+		// check whether token occurs more than once
 		boolean mark = false;
 		for( int i = 0; i < lineCount && !mark; i++ ) {
 			Token temp = doc.getTokenListForLine( i );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/UIDefaultsLoader.java
Patch:
@@ -211,6 +211,8 @@ static void logParseError( Level level, String key, String value, RuntimeExcepti
 	}
 
 	static String resolveValue( String value, Function<String, String> propertiesGetter ) {
+		value = value.trim();
+
 		if( value.startsWith( PROPERTY_PREFIX ) )
 			value = value.substring( PROPERTY_PREFIX.length() );
 		else if( !value.startsWith( VARIABLE_PREFIX ) )

File: flatlaf-theme-editor/src/main/java/com/formdev/flatlaf/themeeditor/FlatSyntaxTextArea.java
Patch:
@@ -34,6 +34,7 @@ class FlatSyntaxTextArea
 {
 	private boolean useColorOfColorTokens;
 
+	final FlatThemePropertiesSupport propertiesSupport = new FlatThemePropertiesSupport( this );
 	private final Map<String, Color> parsedColorsMap = new HashMap<>();
 
 	FlatSyntaxTextArea() {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTitlePane.java
Patch:
@@ -446,7 +446,9 @@ private void close() {
 	}
 
 	private boolean hasJBRCustomDecoration() {
-		return window != null && JBRCustomDecorations.hasCustomDecoration( window );
+		return window != null &&
+			FlatRootPaneUI.canUseJBRCustomDecorations &&
+			JBRCustomDecorations.hasCustomDecoration( window );
 	}
 
 	private void updateJBRHitTestSpotsAndTitleBarHeight() {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuUI.java
Patch:
@@ -151,7 +151,7 @@ protected void paintBackground( Graphics g, Color selectionBackground ) {
 			if( model.isRollover() && !model.isArmed() && !model.isSelected() &&
 				model.isEnabled() && ((JMenu)menuItem).isTopLevelMenu() )
 			{
-				g.setColor( FlatUIUtils.deriveColor( hoverBackground, menuItem.getBackground() ) );
+				g.setColor( deriveBackground( hoverBackground ) );
 				g.fillRect( 0, 0, menuItem.getWidth(), menuItem.getHeight() );
 			} else
 				super.paintBackground( g, selectionBackground );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatCaret.java
Patch:
@@ -31,7 +31,7 @@
  *
  * @author Karl Tauber
  */
-class FlatCaret
+public class FlatCaret
 	extends DefaultCaret
 	implements UIResource
 {
@@ -41,7 +41,7 @@ class FlatCaret
 	private boolean wasTemporaryLost;
 	private boolean isMousePressed;
 
-	FlatCaret( String selectAllOnFocusPolicy ) {
+	public FlatCaret( String selectAllOnFocusPolicy ) {
 		this.selectAllOnFocusPolicy = selectAllOnFocusPolicy;
 	}
 
@@ -87,7 +87,7 @@ public void mouseReleased( MouseEvent e ) {
 		super.mouseReleased( e );
 	}
 
-	private void selectAllOnFocusGained() {
+	protected void selectAllOnFocusGained() {
 		JTextComponent c = getComponent();
 		Document doc = c.getDocument();
 		if( doc == null || !c.isEnabled() || !c.isEditable() )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemRenderer.java
Patch:
@@ -40,6 +40,7 @@
 import javax.swing.text.View;
 import com.formdev.flatlaf.FlatLaf;
 import com.formdev.flatlaf.util.Graphics2DProxy;
+import com.formdev.flatlaf.util.HiDPIUtils;
 
 /**
  * Renderer for menu items.
@@ -360,7 +361,7 @@ protected static void paintHTMLText( Graphics g, JMenuItem menuItem,
 		if( isArmedOrSelected( menuItem ) && selectionForeground != null )
 			g = new GraphicsProxyWithTextColor( (Graphics2D) g, selectionForeground );
 
-		htmlView.paint( g, textRect );
+		htmlView.paint( HiDPIUtils.createGraphicsTextYCorrection( (Graphics2D) g ), textRect );
 	}
 
 	protected static boolean isArmedOrSelected( JMenuItem menuItem ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -153,7 +153,7 @@ public void paint( Graphics g, JComponent c ) {
 			}
 		}
 
-		super.paint( g, c );
+		super.paint( FlatLabelUI.createGraphicsHTMLTextYCorrection( g, c ), c );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTextFieldUI.java
Patch:
@@ -38,6 +38,7 @@
 import javax.swing.text.Caret;
 import javax.swing.text.JTextComponent;
 import com.formdev.flatlaf.FlatClientProperties;
+import com.formdev.flatlaf.util.HiDPIUtils;
 
 /**
  * Provides the Flat LaF UI delegate for {@link javax.swing.JTextField}.
@@ -146,7 +147,8 @@ static void propertyChange( JTextComponent c, PropertyChangeEvent e ) {
 	protected void paintSafely( Graphics g ) {
 		paintBackground( g, getComponent(), isIntelliJTheme );
 		paintPlaceholder( g, getComponent(), placeholderForeground );
-		super.paintSafely( g );
+
+		super.paintSafely( HiDPIUtils.createGraphicsTextYCorrection( (Graphics2D) g ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolTipUI.java
Patch:
@@ -29,6 +29,7 @@
 import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicHTML;
 import javax.swing.plaf.basic.BasicToolTipUI;
+import com.formdev.flatlaf.util.HiDPIUtils;
 import com.formdev.flatlaf.util.StringUtils;
 
 /**
@@ -130,7 +131,7 @@ public void paint( Graphics g, JComponent c ) {
 				FlatUIUtils.drawString( c, g, line, leftToRight ? x : x2 - SwingUtilities.computeStringWidth( fm, line ), y );
 			}
 		} else
-			super.paint( g, c );
+			super.paint( HiDPIUtils.createGraphicsTextYCorrection( (Graphics2D) g ), c );
 	}
 
 	private boolean isMultiLine( JComponent c ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatCheckBoxMenuItemIcon.java
Patch:
@@ -67,14 +67,14 @@ protected void paintCheckmark( Graphics2D g2 ) {
 		g2.draw( path );
 	}
 
-	private Color getCheckmarkColor( Component c ) {
+	protected Color getCheckmarkColor( Component c ) {
 		if( c instanceof JMenuItem && ((JMenuItem)c).isArmed() && !isUnderlineSelection() )
 			return selectionForeground;
 
 		return c.isEnabled() ? checkmarkColor : disabledCheckmarkColor;
 	}
 
-	private boolean isUnderlineSelection() {
+	protected boolean isUnderlineSelection() {
 		// not storing value of "MenuItem.selectionType" in class to allow changing at runtime
 		return "underline".equals( UIManager.getString( "MenuItem.selectionType" ) );
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatMenuArrowIcon.java
Patch:
@@ -65,14 +65,14 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		}
 	}
 
-	private Color getArrowColor( Component c ) {
+	protected Color getArrowColor( Component c ) {
 		if( c instanceof JMenu && ((JMenu)c).isSelected() && !isUnderlineSelection() )
 			return selectionForeground;
 
 		return c.isEnabled() ? arrowColor : disabledArrowColor;
 	}
 
-	private boolean isUnderlineSelection() {
+	protected boolean isUnderlineSelection() {
 		// not storing value of "MenuItem.selectionType" in class to allow changing at runtime
 		return "underline".equals( UIManager.getString( "MenuItem.selectionType" ) );
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatScrollBarUI.java
Patch:
@@ -240,7 +240,7 @@ public Dimension getMaximumSize() {
 		return button;
 	}
 
-	private boolean isShowButtons() {
+	protected boolean isShowButtons() {
 		Object showButtons = scrollbar.getClientProperty( FlatClientProperties.SCROLL_BAR_SHOW_BUTTONS );
 		if( showButtons == null && scrollbar.getParent() instanceof JScrollPane )
 			showButtons = ((JScrollPane)scrollbar.getParent()).getClientProperty( FlatClientProperties.SCROLL_BAR_SHOW_BUTTONS );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableCellBorder.java
Patch:
@@ -86,7 +86,7 @@ public void paintBorder( Component c, Graphics g, int x, int y, int width, int h
 		/**
 		 * Checks whether at least one selected cell is editable.
 		 */
-		private boolean isSelectionEditable( JTable table ) {
+		protected boolean isSelectionEditable( JTable table ) {
 			if( table.getRowSelectionAllowed() ) {
 				int columnCount = table.getColumnCount();
 				int[] selectedRows = table.getSelectedRows();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/ColorFunctions.java
Patch:
@@ -35,7 +35,7 @@ public static Color applyFunctions( Color color, ColorFunction... functions ) {
 		return HSLColor.toRGB( hsl, alpha );
 	}
 
-	private static float clamp( float value ) {
+	public static float clamp( float value ) {
 		return (value < 0)
 			? 0
 			: ((value > 100)

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -68,7 +68,7 @@ public class SystemInfo
 		IS_KDE = (IS_LINUX && System.getenv( "KDE_FULL_SESSION" ) != null);
 	}
 
-	private static long scanVersion( String version ) {
+	public static long scanVersion( String version ) {
 		int major = 1;
 		int minor = 0;
 		int micro = 0;
@@ -86,7 +86,7 @@ private static long scanVersion( String version ) {
 		return toVersion( major, minor, micro, patch );
 	}
 
-	private static long toVersion( int major, int minor, int micro, int patch ) {
+	public static long toVersion( int major, int minor, int micro, int patch ) {
 		return ((long) major << 48) + ((long) minor << 32) + ((long) micro << 16) + patch;
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -284,6 +284,7 @@ public UIDefaults getDefaults() {
 		// initialize some defaults (for overriding) that are used in UI delegates,
 		// but are not set in BasicLookAndFeel
 		putDefaults( defaults, defaults.getColor( "control" ),
+			"Button.disabledBackground",
 			"EditorPane.disabledBackground",
 			"EditorPane.inactiveBackground",
 			"FormattedTextField.disabledBackground",
@@ -293,7 +294,8 @@ public UIDefaults getDefaults() {
 			"TextArea.inactiveBackground",
 			"TextField.disabledBackground",
 			"TextPane.disabledBackground",
-			"TextPane.inactiveBackground" );
+			"TextPane.inactiveBackground",
+			"ToggleButton.disabledBackground" );
 		putDefaults( defaults, defaults.getColor( "textInactiveText" ),
 			"Button.disabledText",
 			"CheckBox.disabledText",

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToggleButtonUI.java
Patch:
@@ -50,6 +50,7 @@
  * @uiDefault ToggleButton.startBackground				Color	optional; if set, a gradient paint is used and ToggleButton.background is ignored
  * @uiDefault ToggleButton.endBackground				Color	optional; if set, a gradient paint is used
  * @uiDefault ToggleButton.pressedBackground			Color
+ * @uiDefault ToggleButton.disabledBackground			Color	optional
  * @uiDefault ToggleButton.disabledText					Color
  * @uiDefault ToggleButton.toolbar.hoverBackground		Color
  * @uiDefault ToggleButton.toolbar.pressedBackground	Color

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/FlatLafDemo.java
Patch:
@@ -28,7 +28,8 @@ public class FlatLafDemo
 	static final String KEY_TAB = "tab";
 
 	public static void main( String[] args ) {
-		if( SystemInfo.IS_MAC )
+		// on macOS enable screen menu bar
+		if( SystemInfo.IS_MAC && System.getProperty( "apple.laf.useScreenMenuBar" ) == null )
 			System.setProperty( "apple.laf.useScreenMenuBar", "true" );
 
 		SwingUtilities.invokeLater( () -> {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -40,6 +40,7 @@ public class SystemInfo
 	// Java versions
 	public static final boolean IS_JAVA_9_OR_LATER;
 	public static final boolean IS_JAVA_11_OR_LATER;
+	public static final boolean IS_JAVA_15_OR_LATER;
 
 	// Java VMs
 	public static final boolean IS_JETBRAINS_JVM;
@@ -66,6 +67,7 @@ public class SystemInfo
 		long javaVersion = scanVersion( System.getProperty( "java.version" ) );
 		IS_JAVA_9_OR_LATER = (javaVersion >= toVersion( 9, 0, 0, 0 ));
 		IS_JAVA_11_OR_LATER = (javaVersion >= toVersion( 11, 0, 0, 0 ));
+		IS_JAVA_15_OR_LATER = (javaVersion >= toVersion( 15, 0, 0, 0 ));
 
 		// Java VMs
 		IS_JETBRAINS_JVM = System.getProperty( "java.vm.vendor", "Unknown" )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRootPaneUI.java
Patch:
@@ -109,7 +109,7 @@ protected void installDefaults( JRootPane c ) {
 
 	private void installClientDecorations() {
 		// install border
-		if( rootPane.getWindowDecorationStyle() != JRootPane.NONE )
+		if( rootPane.getWindowDecorationStyle() != JRootPane.NONE && !JBRCustomDecorations.isSupported() )
 			LookAndFeel.installBorder( rootPane, "RootPane.border" );
 		else
 			LookAndFeel.uninstallBorder( rootPane );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemBorder.java
Patch:
@@ -40,7 +40,7 @@ public Insets getBorderInsets( Component c, Insets insets ) {
 		if( c.getParent() instanceof JMenuBar ) {
 			insets.top = scale( menuBarItemMargins.top );
 			insets.left = scale( menuBarItemMargins.left );
-			insets.bottom = scale( menuBarItemMargins.bottom + 1 );
+			insets.bottom = scale( menuBarItemMargins.bottom );
 			insets.right = scale( menuBarItemMargins.right );
 			return insets;
 		} else

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/SystemInfo.java
Patch:
@@ -34,6 +34,7 @@ public class SystemInfo
 	// OS versions
 	public static final boolean IS_WINDOWS_10_OR_LATER;
 	public static final boolean IS_MAC_OS_10_11_EL_CAPITAN_OR_LATER;
+	public static final boolean IS_MAC_OS_10_14_MOJAVE;
 	public static final boolean IS_MAC_OS_10_15_CATALINA_OR_LATER;
 
 	// Java versions
@@ -58,6 +59,7 @@ public class SystemInfo
 		long osVersion = scanVersion( System.getProperty( "os.version" ) );
 		IS_WINDOWS_10_OR_LATER = (IS_WINDOWS && osVersion >= toVersion( 10, 0, 0, 0 ));
 		IS_MAC_OS_10_11_EL_CAPITAN_OR_LATER = (IS_MAC && osVersion >= toVersion( 10, 11, 0, 0 ));
+		IS_MAC_OS_10_14_MOJAVE = (IS_MAC && osVersion >= toVersion( 10, 14, 0, 0 ));
 		IS_MAC_OS_10_15_CATALINA_OR_LATER = (IS_MAC && osVersion >= toVersion( 10, 15, 0, 0 ));
 
 		// Java versions

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatWindowDecorationsTest.java
Patch:
@@ -114,6 +114,8 @@ private void resizableChanged() {
 		Window window = SwingUtilities.windowForComponent( this );
 		if( window instanceof Frame )
 			((Frame)window).setResizable( resizableCheckBox.isSelected() );
+		else if( window instanceof Dialog )
+			((Dialog)window).setResizable( resizableCheckBox.isSelected() );
 	}
 
 	private void menuItemActionPerformed(ActionEvent e) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonBorder.java
Patch:
@@ -114,8 +114,8 @@ public Insets getBorderInsets( Component c, Insets insets ) {
 		} else {
 			insets = super.getBorderInsets( c, insets );
 
-			// use smaller left and right insets for icon-only buttons (so that they are square)
-			if( FlatButtonUI.isIconOnlyButton( c ) && ((AbstractButton)c).getMargin() instanceof UIResource )
+			// use smaller left and right insets for icon-only or single-character buttons (so that they are square)
+			if( FlatButtonUI.isIconOnlyOrSingleCharacterButton( c ) && ((AbstractButton)c).getMargin() instanceof UIResource )
 				insets.left = insets.right = Math.min( insets.top, insets.bottom );
 		}
 

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatInspector.java
Patch:
@@ -284,8 +284,9 @@ private void highlight( Component c ) {
 		highlightFigure.setVisible( c != null );
 
 		if( c != null ) {
+			Insets insets = rootPane.getInsets();
 			highlightFigure.setBounds( new Rectangle(
-				SwingUtilities.convertPoint( c, 0, 0, rootPane ),
+				SwingUtilities.convertPoint( c, -insets.left, -insets.top, rootPane ),
 				c.getSize() ) );
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatInternalFrameAbstractIcon.java
Patch:
@@ -27,6 +27,7 @@
 /**
  * Base class for internal frame icons.
  *
+ * @uiDefault InternalFrame.buttonSize					Dimension
  * @uiDefault InternalFrame.buttonHoverBackground		Color
  * @uiDefault InternalFrame.buttonPressedBackground		Color
  *

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatInternalFrameRestoreIcon.java
Patch:
@@ -24,14 +24,14 @@
 import com.formdev.flatlaf.ui.FlatUIUtils;
 
 /**
- * "minimize" (actually "restore") icon for {@link javax.swing.JInternalFrame}.
+ * "restore" (or "minimize") icon for {@link javax.swing.JInternalFrame}.
  *
  * @author Karl Tauber
  */
-public class FlatInternalFrameMinimizeIcon
+public class FlatInternalFrameRestoreIcon
 	extends FlatInternalFrameAbstractIcon
 {
-	public FlatInternalFrameMinimizeIcon() {
+	public FlatInternalFrameRestoreIcon() {
 	}
 
 	@Override

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoPrefs.java
Patch:
@@ -82,7 +82,7 @@ else if( theme.startsWith( FILE_PREFIX ) )
 				} else
 					UIManager.setLookAndFeel( lafClassName );
 			}
-		} catch( Exception ex ) {
+		} catch( Throwable ex ) {
 			ex.printStackTrace();
 
 			// fallback

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/DerivedColor.java
Patch:
@@ -41,7 +41,7 @@ public DerivedColor( Color defaultColor, ColorFunction... functions ) {
 	}
 
 	public Color derive( Color baseColor ) {
-		if( hasBaseOfDefaultColor && baseOfDefaultColorRGB == baseColor.getRGB() )
+		if( (hasBaseOfDefaultColor && baseOfDefaultColorRGB == baseColor.getRGB()) || baseColor == this )
 			return this; // return default color
 
 		Color result = ColorFunctions.applyFunctions( baseColor, functions );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -419,7 +419,7 @@ static FontUIResource createCompositeFont( String family, int style, int size )
 		// using StyleContext.getFont() here because it uses
 		// sun.font.FontUtilities.getCompositeFontUIResource()
 		// and creates a composite font that is able to display all Unicode characters
-		Font font = new StyleContext().getFont( family, style, size );
+		Font font = StyleContext.getDefaultStyleContext().getFont( family, style, size );
 		return (font instanceof FontUIResource) ? (FontUIResource) font : new FontUIResource( font );
 	}
 

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoFrame.java
Patch:
@@ -141,7 +141,7 @@ void updateFontMenuItems() {
 		fontMenu.addSeparator();
 		ArrayList<String> families = new ArrayList<>( Arrays.asList(
 			"Arial", "Comic Sans MS", "Courier New", "DejaVu Sans", "Dialog", "Monospaced",
-			"Noto Sans", "Roboto", "SansSerif", "Segoe UI", "Serif", "Tahoma", "Verdana" ) );
+			"Noto Sans", "Roboto", "SansSerif", "Segoe UI", "Serif", "Tahoma", "Ubuntu", "Verdana" ) );
 		if( !families.contains( currentFamily ) )
 			families.add( currentFamily );
 		families.sort( String.CASE_INSENSITIVE_ORDER );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatScrollBarUI.java
Patch:
@@ -73,8 +73,8 @@ public class FlatScrollBarUI
 	protected Color buttonDisabledArrowColor;
 
 	private MouseAdapter hoverListener;
-	private boolean hoverTrack;
-	private boolean hoverThumb;
+	protected boolean hoverTrack;
+	protected boolean hoverThumb;
 
 	public static ComponentUI createUI( JComponent c ) {
 		return new FlatScrollBarUI();

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatTestFrame.java
Patch:
@@ -440,7 +440,7 @@ private void updateSizeVariantComboBox() {
 		sizeVariantComboBox.setVisible( visible );
 	}
 
-	private void updateComponentsRecur( Container container, BiConsumer<Component, String> action ) {
+	void updateComponentsRecur( Container container, BiConsumer<Component, String> action ) {
 		for( Component c : container.getComponents() ) {
 			if( c instanceof JPanel || c instanceof JDesktopPane ) {
 				updateComponentsRecur( (Container) c, action );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolTipUI.java
Patch:
@@ -103,7 +103,7 @@ public Dimension getPreferredSize( JComponent c ) {
 			for( String line : lines )
 				width = Math.max( width, SwingUtilities.computeStringWidth( fm, line ) );
 
-			return new Dimension( insets.left + width + insets.right, insets.top + height + insets.bottom );
+			return new Dimension( insets.left + width + insets.right + 6, insets.top + height + insets.bottom );
 		} else
 			return super.getPreferredSize( c );
 	}
@@ -119,8 +119,8 @@ public void paint( Graphics g, JComponent c ) {
 
 			List<String> lines = StringUtils.split( ((JToolTip)c).getTipText(), '\n' );
 
-			int x = insets.left;
-			int x2 = c.getWidth() - insets.right;
+			int x = insets.left + 3;
+			int x2 = c.getWidth() - insets.right - 3;
 			int y = insets.top - fm.getDescent();
 			int lineHeight = fm.getHeight();
 			JComponent comp = ((JToolTip)c).getComponent();

File: flatlaf-extras/src/main/java/com/formdev/flatlaf/extras/TriStateCheckBox.java
Patch:
@@ -32,7 +32,7 @@
  * value {@code "indeterminate"}.
  * <p>
  * FlatLaf and Mac Aqua LaF support the third state.
- * For other LaFs a magenta rectangle is painted around the component.
+ * For other LaFs a magenta rectangle is painted around the component for the third state.
  *
  * @author Karl Tauber
  */
@@ -115,7 +115,7 @@ public void setSelected( boolean b ) {
 	protected void paintComponent( Graphics g ) {
 		super.paintComponent( g );
 
-		if( !isThirdStateSupported() ) {
+		if( state == State.INDETERMINATE && !isThirdStateSupported() ) {
 			g.setColor( Color.magenta );
 			g.drawRect( 0, 0, getWidth() - 1, getHeight() - 1 );
 		}

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatChooserTest.java
Patch:
@@ -62,7 +62,7 @@ private void initComponents() {
 			"[]",
 			// rows
 			"[top]" +
-			"[top]" +
+			"[grow,top]" +
 			"[]"));
 
 		//---- colorChooserLabel ----
@@ -73,7 +73,7 @@ private void initComponents() {
 		//---- fileChooserLabel ----
 		fileChooserLabel.setText("JFileChooser:");
 		add(fileChooserLabel, "cell 0 1");
-		add(fileChooser1, "cell 1 1");
+		add(fileChooser1, "cell 1 1,growy");
 
 		//---- label1 ----
 		label1.setText("icons:");

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPasswordFieldUI.java
Patch:
@@ -174,11 +174,11 @@ protected void paintBackground( Graphics g ) {
 
 	@Override
 	public Dimension getPreferredSize( JComponent c ) {
-		return FlatTextFieldUI.applyMinimumWidth( super.getPreferredSize( c ), minimumWidth, c );
+		return FlatTextFieldUI.applyMinimumWidth( c, super.getPreferredSize( c ), minimumWidth );
 	}
 
 	@Override
 	public Dimension getMinimumSize( JComponent c ) {
-		return FlatTextFieldUI.applyMinimumWidth( super.getMinimumSize( c ), minimumWidth, c );
+		return FlatTextFieldUI.applyMinimumWidth( c, super.getMinimumSize( c ), minimumWidth );
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTextFieldUI.java
Patch:
@@ -213,15 +213,15 @@ static void paintPlaceholder( Graphics g, JTextComponent c, Color placeholderFor
 
 	@Override
 	public Dimension getPreferredSize( JComponent c ) {
-		return applyMinimumWidth( super.getPreferredSize( c ), minimumWidth, c );
+		return applyMinimumWidth( c, super.getPreferredSize( c ), minimumWidth );
 	}
 
 	@Override
 	public Dimension getMinimumSize( JComponent c ) {
-		return applyMinimumWidth( super.getMinimumSize( c ), minimumWidth, c );
+		return applyMinimumWidth( c, super.getMinimumSize( c ), minimumWidth );
 	}
 
-	static Dimension applyMinimumWidth( Dimension size, int minimumWidth, JComponent c ) {
+	static Dimension applyMinimumWidth( JComponent c, Dimension size, int minimumWidth ) {
 		// do not apply minimum width if JTextField.columns is set
 		if( c instanceof JTextField && ((JTextField)c).getColumns() > 0 )
 			return size;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -268,8 +268,8 @@ private void initializeAqua() {
 	public UIDefaults getDefaults() {
 		UIDefaults defaults = super.getDefaults();
 
-		// add Metal resource bundle, which is required for FlatFileChooserUI
-		defaults.addResourceBundle( "com.sun.swing.internal.plaf.metal.resources.metal" );
+		// add resource bundle for localized texts
+		defaults.addResourceBundle( "com.formdev.flatlaf.resources.Bundle" );
 
 		// initialize some defaults (for overriding) that are used in UI delegates,
 		// but are not set in BasicLookAndFeel

File: flatlaf-core/src/main/module-info/module-info.java
Patch:
@@ -26,5 +26,7 @@
 	exports com.formdev.flatlaf.ui;
 	exports com.formdev.flatlaf.util;
 
+	opens com.formdev.flatlaf.resources;
+
 	uses com.formdev.flatlaf.FlatDefaultsAddon;
 }

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/BasicComponentsPanel.java
Patch:
@@ -179,9 +179,8 @@ private void initComponents() {
 		add(button5, "cell 3 1");
 
 		//---- button6 ----
-		button6.setText("square");
-		button6.setEnabled(false);
-		button6.putClientProperty("JButton.buttonType", "square");
+		button6.setText("round");
+		button6.putClientProperty("JButton.buttonType", "roundRect");
 		add(button6, "cell 4 1");
 
 		//---- button3 ----

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatInspector.java
Patch:
@@ -304,6 +304,8 @@ else if( c instanceof JToolBar )
 		text += "Enabled: " + c.isEnabled() + '\n';
 		text += "Opaque: " + c.isOpaque() + (c instanceof JComponent &&
 			FlatUIUtils.hasOpaqueBeenExplicitlySet( (JComponent) c ) ? " EXPLICIT" : "") + '\n';
+		if( c instanceof AbstractButton )
+			text += "ContentAreaFilled: " + ((AbstractButton)c).isContentAreaFilled() + '\n';
 		text += "Focusable: " + c.isFocusable() + '\n';
 		text += "Left-to-right: " + c.getComponentOrientation().isLeftToRight() + '\n';
 		text += "Parent: " + c.getParent().getClass().getName();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -319,7 +319,7 @@ protected boolean isHover() {
 	@Override
 	public void update( Graphics g, JComponent c ) {
 		// fill background if opaque to avoid garbage if user sets opaque to true
-		if( c.isOpaque() && (focusWidth > 0 || arc != 0) )
+		if( c.isOpaque() && (focusWidth > 0 || arc > 0) )
 			FlatUIUtils.paintParentBackground( g, c );
 
 		Graphics2D g2 = (Graphics2D) g;
@@ -394,8 +394,7 @@ public void paintCurrentValue( Graphics g, Rectangle bounds, boolean hasFocus )
 
 	@Override
 	public void paintCurrentValueBackground( Graphics g, Rectangle bounds, boolean hasFocus ) {
-		g.setColor( comboBox.isEnabled() ? comboBox.getBackground() : getDisabledBackground( comboBox ) );
-		g.fillRect( bounds.x, bounds.y, bounds.width, bounds.height );
+		// not necessary because already painted in update()
 	}
 
 	private Color getDisabledBackground( JComponent c ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -61,8 +61,8 @@ public Popup getPopup( Component owner, Component contents, int x, int y )
 		if( popup == null )
 			return super.getPopup( owner, contents, x, y );
 
-		// macOS adds drop shadow to heavy weight popups
-		if( SystemInfo.IS_MAC )
+		// macOS and Linux adds drop shadow to heavy weight popups
+		if( SystemInfo.IS_MAC || SystemInfo.IS_LINUX )
 			return popup;
 
 		// create drop shadow popup

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPopupFactory.java
Patch:
@@ -61,8 +61,8 @@ public Popup getPopup( Component owner, Component contents, int x, int y )
 		if( popup == null )
 			return super.getPopup( owner, contents, x, y );
 
-		// macOS adds drop shadow to heavy weight popups
-		if( SystemInfo.IS_MAC )
+		// macOS and Linux adds drop shadow to heavy weight popups
+		if( SystemInfo.IS_MAC || SystemInfo.IS_LINUX )
 			return popup;
 
 		// create drop shadow popup

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -29,6 +29,7 @@
 import java.lang.reflect.Field;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Locale;
 import java.util.function.Predicate;
 import javax.swing.Icon;
 import javax.swing.ImageIcon;
@@ -70,6 +71,7 @@ public class UIDefaultsDump
 	private JComponent dummyComponent;
 
 	public static void main( String[] args ) {
+		Locale.setDefault( Locale.ENGLISH );
 		System.setProperty( "sun.java2d.uiScale", "1x" );
 		System.setProperty( "flatlaf.uiScale", "1x" );
 

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoPrefs.java
Patch:
@@ -22,9 +22,9 @@
 import javax.swing.UIManager;
 import com.formdev.flatlaf.FlatLaf;
 import com.formdev.flatlaf.FlatLightLaf;
+import com.formdev.flatlaf.FlatPropertiesLaf;
 import com.formdev.flatlaf.IntelliJTheme;
 import com.formdev.flatlaf.demo.intellijthemes.IJThemesPanel;
-import com.formdev.flatlaf.demo.intellijthemes.IJThemesPanel.PropertiesLaf;
 import com.formdev.flatlaf.util.StringUtils;
 
 /**
@@ -68,12 +68,12 @@ else if( theme.startsWith( FILE_PREFIX ) )
 
 					if( !theme.isEmpty() )
 						UIManager.getLookAndFeelDefaults().put( THEME_UI_KEY, theme );
-				} else if( IJThemesPanel.PropertiesLaf.class.getName().equals( lafClassName ) ) {
+				} else if( FlatPropertiesLaf.class.getName().equals( lafClassName ) ) {
 					String theme = state.get( KEY_LAF_THEME, "" );
 					if( theme.startsWith( FILE_PREFIX ) ) {
 						File themeFile = new File( theme.substring( FILE_PREFIX.length() ) );
 						String themeName = StringUtils.removeTrailing( themeFile.getName(), ".properties" );
-						FlatLaf.install( new PropertiesLaf( themeName, themeFile ) );
+						FlatLaf.install( new FlatPropertiesLaf( themeName, themeFile ) );
 					} else
 						FlatLightLaf.install();
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatCheckBoxMenuItemUI.java
Patch:
@@ -55,8 +55,8 @@
  *
  * @uiDefault MenuItem.minimumIconSize								Dimension
  * @uiDefault MenuItem.textAcceleratorGap							int
+ * @uiDefault MenuItem.textNoAcceleratorGap							int
  * @uiDefault MenuItem.acceleratorArrowGap							int
- * @uiDefault MenuItem.textArrowGap									int
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemUI.java
Patch:
@@ -49,8 +49,8 @@
  *
  * @uiDefault MenuItem.minimumIconSize								Dimension
  * @uiDefault MenuItem.textAcceleratorGap							int
+ * @uiDefault MenuItem.textNoAcceleratorGap							int
  * @uiDefault MenuItem.acceleratorArrowGap							int
- * @uiDefault MenuItem.textArrowGap									int
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuUI.java
Patch:
@@ -64,8 +64,8 @@
  *
  * @uiDefault MenuItem.minimumIconSize								Dimension
  * @uiDefault MenuItem.textAcceleratorGap							int
+ * @uiDefault MenuItem.textNoAcceleratorGap							int
  * @uiDefault MenuItem.acceleratorArrowGap							int
- * @uiDefault MenuItem.textArrowGap									int
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonMenuItemUI.java
Patch:
@@ -55,8 +55,8 @@
  *
  * @uiDefault MenuItem.minimumIconSize								Dimension
  * @uiDefault MenuItem.textAcceleratorGap							int
+ * @uiDefault MenuItem.textNoAcceleratorGap							int
  * @uiDefault MenuItem.acceleratorArrowGap							int
- * @uiDefault MenuItem.textArrowGap									int
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatCheckBoxMenuItemUI.java
Patch:
@@ -46,7 +46,6 @@
  * @uiDefault CheckBoxMenuItem.arrowIcon							Icon
  * @uiDefault CheckBoxMenuItem.checkIcon							Icon
  * @uiDefault CheckBoxMenuItem.opaque								boolean
- * @uiDefault CheckBoxMenuItem.evenHeight							boolean
  *
  * <!-- FlatCheckBoxMenuItemUI -->
  *

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemUI.java
Patch:
@@ -44,7 +44,6 @@
  * @uiDefault MenuItem.arrowIcon									Icon
  * @uiDefault MenuItem.checkIcon									Icon
  * @uiDefault MenuItem.opaque										boolean
- * @uiDefault MenuItem.evenHeight									boolean
  *
  * <!-- FlatMenuItemRenderer -->
  *

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuUI.java
Patch:
@@ -52,7 +52,6 @@
  * @uiDefault Menu.arrowIcon										Icon
  * @uiDefault Menu.checkIcon										Icon
  * @uiDefault Menu.opaque											boolean
- * @uiDefault Menu.evenHeight										boolean
  * @uiDefault Menu.crossMenuMnemonic								boolean	default is false
  * @uiDefault Menu.useMenuBarBackgroundForTopLevel					boolean	default is false
  * @uiDefault MenuBar.background									Color	used if Menu.useMenuBarBackgroundForTopLevel is true

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonMenuItemUI.java
Patch:
@@ -46,7 +46,6 @@
  * @uiDefault RadioButtonMenuItem.arrowIcon							Icon
  * @uiDefault RadioButtonMenuItem.checkIcon							Icon
  * @uiDefault RadioButtonMenuItem.opaque							boolean
- * @uiDefault RadioButtonMenuItem.evenHeight						boolean
  *
  * <!-- FlatRadioButtonMenuItemUI -->
  *

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatMenuItemRenderer.java
Patch:
@@ -55,7 +55,6 @@ public class FlatMenuItemRenderer
 	protected final int textAcceleratorGap;
 	protected final int textArrowGap;
 
-	protected final String selectionType = UIManager.getString( "MenuItem.selectionType" );
 	protected final Color underlineSelectionBackground = UIManager.getColor( "MenuItem.underlineSelectionBackground" );
 	protected final Color underlineSelectionColor = UIManager.getColor( "MenuItem.underlineSelectionColor" );
 	protected final int underlineSelectionHeight = UIManager.getInt( "MenuItem.underlineSelectionHeight" );
@@ -340,7 +339,7 @@ protected static boolean isTopLevelMenu( JMenuItem menuItem ) {
 	}
 
 	private boolean isUnderlineSelection() {
-		return "underline".equals( selectionType );
+		return "underline".equals( UIManager.getString( "MenuItem.selectionType" ) );
 	}
 
 	private Icon getIconForPainting() {

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoFrame.java
Patch:
@@ -61,7 +61,6 @@ private void menuItemActionPerformed( ActionEvent e ) {
 
 	private void underlineMenuSelection() {
 		UIManager.put( "MenuItem.selectionType", underlineMenuSelectionMenuItem.isSelected() ? "underline" : null );
-		FlatLaf.updateUI();
 	}
 
 	private void fontFamilyChanged( ActionEvent e ) {

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatMenusTest.java
Patch:
@@ -64,7 +64,9 @@ private void arm( Container container, boolean armed ) {
 
 	private void underlineChanged() {
 		UIManager.put( "MenuItem.selectionType", underlineCheckBox.isSelected() ? "underline" : null );
-		FlatLaf.updateUI();
+
+		if( armedCheckBox.isSelected() )
+			FlatLaf.updateUI();
 	}
 
 	private void showPopupMenuButtonActionPerformed(ActionEvent e) {

File: flatlaf-intellij-themes/src/main/java/com/formdev/flatlaf/intellijthemes/Utils.java
Patch:
@@ -32,7 +32,8 @@ class Utils
 
 	static IntelliJTheme loadTheme( String name ) {
 		try {
-			return new IntelliJTheme( Utils.class.getResourceAsStream( "themes/" + name ) );
+			return new IntelliJTheme( Utils.class.getResourceAsStream(
+				"/com/formdev/flatlaf/intellijthemes/themes/" + name ) );
 		} catch( ParseException | IOException ex ) {
 			String msg = "FlatLaf: Failed to load IntelliJ theme '" + name + "'";
 			LOG.log( Level.SEVERE, msg, ex );

File: flatlaf-intellij-themes/src/main/java/com/formdev/flatlaf/intellijthemes/materialthemeuilite/Utils.java
Patch:
@@ -32,7 +32,8 @@ class Utils
 
 	static IntelliJTheme loadTheme( String name ) {
 		try {
-			return new IntelliJTheme( Utils.class.getResourceAsStream( "themes/material-theme-ui-lite/" + name ) );
+			return new IntelliJTheme( Utils.class.getResourceAsStream(
+				"/com/formdev/flatlaf/intellijthemes/themes/material-theme-ui-lite/" + name ) );
 		} catch( ParseException | IOException ex ) {
 			String msg = "FlatLaf: Failed to load IntelliJ theme '" + name + "'";
 			LOG.log( Level.SEVERE, msg, ex );

File: flatlaf-intellij-themes/src/main/java/com/formdev/flatlaf/intellijthemes/materialthemeuilite/Utils.java
Patch:
@@ -32,7 +32,7 @@ class Utils
 
 	static IntelliJTheme loadTheme( String name ) {
 		try {
-			return new IntelliJTheme( Utils.class.getResourceAsStream( "../themes/material-theme-ui-lite/" + name ) );
+			return new IntelliJTheme( Utils.class.getResourceAsStream( "themes/material-theme-ui-lite/" + name ) );
 		} catch( ParseException | IOException ex ) {
 			String msg = "FlatLaf: Failed to load IntelliJ theme '" + name + "'";
 			LOG.log( Level.SEVERE, msg, ex );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatMenusTest.java
Patch:
@@ -197,7 +197,7 @@ private void initComponents() {
 			panel1.add(checkBoxMenuItemLabel, "cell 0 2");
 
 			//---- checkBoxMenuItem1 ----
-			checkBoxMenuItem1.setText("enabled");
+			checkBoxMenuItem1.setText("<html>en<b>abl</b>ed</html>");
 			checkBoxMenuItem1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0));
 			checkBoxMenuItem1.setMnemonic('A');
 			panel1.add(checkBoxMenuItem1, "cell 1 2");

File: flatlaf-intellij-themes/src/main/java/com/formdev/flatlaf/intellijthemes/materialthemeuilite/Utils.java
Patch:
@@ -32,7 +32,7 @@ class Utils
 
 	static IntelliJTheme loadTheme( String name ) {
 		try {
-			return new IntelliJTheme( Utils.class.getResourceAsStream( "../themes/material-theme-ui-lite/" + name ) );
+			return new IntelliJTheme( Utils.class.getResourceAsStream( "themes/material-theme-ui-lite/" + name ) );
 		} catch( ParseException | IOException ex ) {
 			String msg = "FlatLaf: Failed to load IntelliJ theme '" + name + "'";
 			LOG.log( Level.SEVERE, msg, ex );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -282,9 +282,9 @@ public UIDefaults getDefaults() {
 		// load defaults from properties
 		List<Class<?>> lafClassesForDefaultsLoading = getLafClassesForDefaultsLoading();
 		if( lafClassesForDefaultsLoading != null )
-			UIDefaultsLoader.loadDefaultsFromProperties( lafClassesForDefaultsLoading, addons, getAdditionalDefaults(), defaults );
+			UIDefaultsLoader.loadDefaultsFromProperties( lafClassesForDefaultsLoading, addons, getAdditionalDefaults(), isDark(), defaults );
 		else
-			UIDefaultsLoader.loadDefaultsFromProperties( getClass(), addons, getAdditionalDefaults(), defaults );
+			UIDefaultsLoader.loadDefaultsFromProperties( getClass(), addons, getAdditionalDefaults(), isDark(), defaults );
 
 		// use Aqua MenuBarUI if Mac screen menubar is enabled
 		if( SystemInfo.IS_MAC && Boolean.getBoolean( "apple.laf.useScreenMenuBar" ) )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/DerivedColor.java
Patch:
@@ -32,8 +32,8 @@ public class DerivedColor
 {
 	private final ColorFunction[] functions;
 
-	public DerivedColor( ColorFunction... functions ) {
-		super( Color.red );
+	public DerivedColor( Color defaultColor, ColorFunction... functions ) {
+		super( (defaultColor != null) ? defaultColor : Color.red );
 		this.functions = functions;
 	}
 

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/BasicComponentsPanel.java
Patch:
@@ -310,14 +310,13 @@ private void initComponents() {
 		add(comboBox4, "cell 4 4,growx");
 
 		//---- comboBox5 ----
-		comboBox5.setPrototypeDisplayValue("12345");
 		comboBox5.setModel(new DefaultComboBoxModel<>(new String[] {
 			"wide popup if text is longer",
 			"aa",
 			"bbb",
 			"cccc"
 		}));
-		add(comboBox5, "cell 5 4,growx");
+		add(comboBox5, "cell 5 4,growx,wmax 100");
 
 		//---- spinnerLabel ----
 		spinnerLabel.setText("JSpinner:");

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponentsTest.java
Patch:
@@ -513,14 +513,13 @@ private void initComponents() {
 		add(comboBox4, "cell 4 5,growx");
 
 		//---- comboBox5 ----
-		comboBox5.setPrototypeDisplayValue("12345");
 		comboBox5.setModel(new DefaultComboBoxModel<>(new String[] {
 			"wide popup if text is longer",
 			"aa",
 			"bbb",
 			"cccc"
 		}));
-		add(comboBox5, "cell 5 5,growx");
+		add(comboBox5, "cell 5 5,growx,wmax 100");
 
 		//---- spinnerLabel ----
 		spinnerLabel.setText("JSpinner:");

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -460,12 +460,12 @@ private void uninstallCellPaddingBorder( Object o ) {
 	//---- class FlatComboPopup -----------------------------------------------
 
 	@SuppressWarnings( { "rawtypes", "unchecked" } )
-	private class FlatComboPopup
+	protected class FlatComboPopup
 		extends BasicComboPopup
 	{
 		private CellPaddingBorder paddingBorder;
 
-		FlatComboPopup( JComboBox combo ) {
+		protected FlatComboPopup( JComboBox combo ) {
 			super( combo );
 
 			// BasicComboPopup listens to JComboBox.componentOrientation and updates

File: flatlaf-core/src/main/java/com/formdev/flatlaf/LinuxFontPolicy.java
Patch:
@@ -103,7 +103,7 @@ private static Font createFont( String family, int style, int size, double dsize
 	private static double getGnomeFontScale() {
 		// do not scale font here if JRE scales
 		if( isSystemScaling() )
-			return 1;
+			return 96. / 72.;
 
 		// see class com.sun.java.swing.plaf.gtk.PangoFonts background information
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/UIScale.java
Patch:
@@ -97,7 +97,7 @@ public static double getSystemScaleFactor( Graphics2D g ) {
 	}
 
 	public static double getSystemScaleFactor( GraphicsConfiguration gc ) {
-		return isSystemScalingEnabled() ? gc.getDefaultTransform().getScaleX() : 1;
+		return (isSystemScalingEnabled() && gc != null) ? gc.getDefaultTransform().getScaleX() : 1;
 	}
 
 	//---- user scaling (Java 8) ----------------------------------------------

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatUIUtils.java
Patch:
@@ -121,7 +121,7 @@ public static Color nonUIResource( Color c ) {
 	}
 
 	public static Font nonUIResource( Font font ) {
-		return (font instanceof UIResource) ? new Font( font.getName(), font.getStyle(), font.getSize() ) : font;
+		return (font instanceof UIResource) ? font.deriveFont( font.getStyle() ) : font;
 	}
 
 	public static int minimumWidth( JComponent c, int minimumWidth ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/UIScale.java
Patch:
@@ -197,15 +197,15 @@ public static FontUIResource applyCustomScaleFactor( FontUIResource font ) {
 			return font;
 
 		int newFontSize = Math.round( (font.getSize() / fontScaleFactor) * scaleFactor );
-		return new FontUIResource( font.getFamily(), font.getStyle(), newFontSize );
+		return new FontUIResource( font.deriveFont( (float) newFontSize ) );
 	}
 
 	/**
 	 * Scales the given font.
 	 */
 	public static FontUIResource scaleFont( FontUIResource font, float scaleFactor ) {
 		int newFontSize = Math.round( font.getSize() * scaleFactor );
-		return new FontUIResource( font.getFamily(), font.getStyle(), newFontSize );
+		return new FontUIResource( font.deriveFont( (float) newFontSize ) );
 	}
 
 	/**

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -106,7 +106,7 @@ public boolean isSupportedLookAndFeel() {
 
 	@Override
 	public Icon getDisabledIcon(JComponent component, Icon icon) {
-		return new IconUIResource(FlatUIUtils.getDisabledIcon(icon));
+		return ( icon == null ) ? null : new IconUIResource( FlatUIUtils.getDisabledIcon( icon ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -226,8 +226,6 @@ private void createAquaLaf() {
 
 	@Override
 	public UIDefaults getDefaults() {
-		createAquaLaf();
-
 		UIDefaults defaults = super.getDefaults();
 
 		// add Metal resource bundle, which is required for FlatFileChooserUI
@@ -261,7 +259,7 @@ public UIDefaults getDefaults() {
 
 		initFonts( defaults );
 		initIconColors( defaults, isDark() );
-		FlatInputMaps.initInputMaps( defaults, (aquaLaf != null) ? aquaLaf.getDefaults() : null );
+		FlatInputMaps.initInputMaps( defaults );
 
 		// load defaults from properties
 		List<Class<?>> lafClassesForDefaultsLoading = getLafClassesForDefaultsLoading();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/util/UIScale.java
Patch:
@@ -156,6 +156,9 @@ private static float computeScaleFactor( Font font ) {
 			// Tahoma 11 is used at 100%
 			if( "Tahoma".equals( font.getFamily() ) )
 				fontSizeDivider = 11f;
+		} else if( SystemInfo.IS_MAC ) {
+			// default font size on macOS is 13
+			fontSizeDivider = 13f;
 		} else if( SystemInfo.IS_LINUX ) {
 			// default font size for Unity and Gnome is 15 and for KDE it is 13
 			fontSizeDivider = SystemInfo.IS_KDE ? 13f : 15f;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -101,6 +101,8 @@ protected void uninstallDefaults( AbstractButton b ) {
 	@Override
 	public Dimension getPreferredSize( JComponent c ) {
 		Dimension size = super.getPreferredSize( c );
+		if( size == null )
+			return null;
 
 		// small insets fix
 		int focusWidth = getIconFocusWidth( c );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -399,6 +399,8 @@ public Dimension getPreferredSize( JComponent c ) {
 			return new Dimension( helpButtonIcon.getIconWidth(), helpButtonIcon.getIconHeight() );
 
 		Dimension prefSize = super.getPreferredSize( c );
+		if ( prefSize == null )
+			return null;
 
 		// make button square if it is a icon-only button
 		// or apply minimum width, if not in toolbar and not a icon-only button

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -398,7 +398,7 @@ public Dimension getPreferredSize( JComponent c ) {
 		if( isHelpButton( c ) )
 			return new Dimension( helpButtonIcon.getIconWidth(), helpButtonIcon.getIconHeight() );
 
-		Dimension prefSize = super.getPreferredSize(c);
+		Dimension prefSize = super.getPreferredSize( c );
 		if ( prefSize == null )
 			return null;
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -398,7 +398,9 @@ public Dimension getPreferredSize( JComponent c ) {
 		if( isHelpButton( c ) )
 			return new Dimension( helpButtonIcon.getIconWidth(), helpButtonIcon.getIconHeight() );
 
-		Dimension prefSize = super.getPreferredSize( c );
+		Dimension prefSize = super.getPreferredSize(c);
+		if ( prefSize == null )
+			return null;
 
 		// make button square if it is a icon-only button
 		// or apply minimum width, if not in toolbar and not a icon-only button

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -314,7 +314,8 @@ private void dumpInputMap( PrintWriter out, InputMap inputMap, String indent ) {
 			} );
 			for( KeyStroke keyStroke : keys ) {
 				Object value = inputMap.get( keyStroke );
-				out.printf( "%n%s%-30s  %s", indent, keyStroke, value );
+				String strKeyStroke = keyStroke.toString().replace( "pressed ", "" );
+				out.printf( "%n%s%-20s  %s", indent, strKeyStroke, value );
 			}
 		}
 

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -94,6 +94,9 @@ private static void dump( String lookAndFeelClassName, File dir ) {
 		LookAndFeel lookAndFeel = UIManager.getLookAndFeel();
 
 		dump( dir, "", lookAndFeel, key -> !key.contains( "InputMap" ) );
+		if( lookAndFeel instanceof FlatDarkLaf )
+			return;
+
 		dump( dir, "_InputMap", lookAndFeel, key -> key.contains( "InputMap" ) );
 	}
 

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/uidefaults/UIDefaultsDump.java
Patch:
@@ -75,6 +75,7 @@ public static void main( String[] args ) {
 
 //		dump( MyBasicLookAndFeel.class.getName(), dir );
 //		dump( MetalLookAndFeel.class.getName(), dir );
+//		dump( NimbusLookAndFeel.class.getName(), dir );
 //
 //		if( SystemInfo.IS_WINDOWS )
 //			dump( "com.sun.java.swing.plaf.windows.WindowsLookAndFeel", dir );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -213,6 +213,7 @@ private BasicLookAndFeel getBase() {
 	@Override
 	public UIDefaults getDefaults() {
 		UIDefaults defaults = getBase().getDefaults();
+		UIDefaultsRemover.removeDefaults( defaults );
 
 		// add Metal resource bundle, which is required for FlatFileChooserUI
 		defaults.addResourceBundle( "com.sun.swing.internal.plaf.metal.resources.metal" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatFormattedTextFieldUI.java
Patch:
@@ -39,6 +39,7 @@
  *
  * <!-- FlatTextFieldUI -->
  *
+ * @uiDefault TextComponent.arc							int
  * @uiDefault Component.focusWidth						int
  * @uiDefault Component.minimumWidth					int
  * @uiDefault Component.isIntelliJTheme					boolean

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -240,7 +240,7 @@ static boolean isHelpButton( Component c ) {
 		return c instanceof JButton && clientPropertyEquals( (JButton) c, BUTTON_TYPE, BUTTON_TYPE_HELP );
 	}
 
-	static boolean isToolBarButton( JComponent c ) {
+	static boolean isToolBarButton( Component c ) {
 		return c.getParent() instanceof JToolBar;
 	}
 
@@ -269,7 +269,7 @@ protected void paintBackground( Graphics g, JComponent c ) {
 				FlatUIUtils.setRenderingHints( g2 );
 
 				Border border = c.getBorder();
-				float focusWidth = (border instanceof FlatBorder) ? scale( (float) getFocusWidth( c ) ) : 0;
+				float focusWidth = (border instanceof FlatBorder && !isToolBarButton( c )) ? scale( (float) getFocusWidth( c ) ) : 0;
 				float arc = ((border instanceof FlatButtonBorder && !isSquareButton( c )) || isToolBarButton( c ))
 					? scale( (float) this.arc ) : 0;
 				boolean def = isDefaultButton( c );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -208,6 +208,7 @@ private BasicLookAndFeel getBase() {
 	@Override
 	public UIDefaults getDefaults() {
 		UIDefaults defaults = getBase().getDefaults();
+		UIDefaultsRemover.removeDefaults( defaults );
 
 		// add Metal resource bundle, which is required for FlatFileChooserUI
 		defaults.addResourceBundle( "com.sun.swing.internal.plaf.metal.resources.metal" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -29,6 +29,7 @@
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 import java.lang.ref.WeakReference;
+import java.lang.reflect.Method;
 import java.util.List;
 import java.util.function.Consumer;
 import java.util.logging.Level;
@@ -194,7 +195,8 @@ private BasicLookAndFeel getBase() {
 				String aquaLafClassName = "com.apple.laf.AquaLookAndFeel";
 				try {
 					if (SystemInfo.IS_JAVA_9_OR_LATER) {
-						base = (BasicLookAndFeel) UIManager.createLookAndFeel("Mac OS X");
+						Method m = UIManager.class.getDeclaredMethod("createLookAndFeel", String.class);
+						base = (BasicLookAndFeel) m.invoke(UIManager.class, "Mac OS X");
 					} else {
 						base = (BasicLookAndFeel) Class.forName( aquaLafClassName ).getDeclaredConstructor().newInstance();
 					}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -199,7 +199,7 @@ private BasicLookAndFeel getBase() {
 					LOG.log( Level.SEVERE, "FlatLaf: Failed to initialize base look and feel '" + aquaLafClassName + "'.", ex );
 					throw new IllegalStateException();
 				}
-			} else
+			} else {
 				base = new MetalLookAndFeel();
 			}
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -194,7 +194,7 @@ private BasicLookAndFeel getBase() {
 				// use Mac Aqua LaF as base
 				String aquaLafClassName = "com.apple.laf.AquaLookAndFeel";
 				try {
-					base = (BasicLookAndFeel) Class.forName( aquaLafClassName ).getDeclaredConstructors()[0].newInstance();
+					base = (BasicLookAndFeel) Class.forName( aquaLafClassName ).getDeclaredConstructor().newInstance();
 				} catch( Exception ex ) {
 					LOG.log( Level.SEVERE, "FlatLaf: Failed to initialize base look and feel '" + aquaLafClassName + "'.", ex );
 					throw new IllegalStateException();

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -288,10 +288,9 @@ private void initFonts( UIDefaults defaults ) {
 
 		// override fonts
 		for( Object key : defaults.keySet() ) {
-			if( key instanceof String && ((String)key).endsWith( ".font" ) )
+			if( key instanceof String && (((String)key).endsWith( ".font" ) || ((String)key).endsWith( "Font" )) )
 				defaults.put( key, uiFont );
 		}
-		defaults.put( "MenuItem.acceleratorFont", uiFont );
 
 		// use smaller font for progress bar
 		defaults.put( "ProgressBar.font", UIScale.scaleFont( uiFont, 0.85f ) );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatAscendingSortIcon.java
Patch:
@@ -47,7 +47,7 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		g.setColor( sortIconColor );
 		if( chevron ) {
 			// chevron arrow
-			Path2D path = FlatUIUtils.createPath( false, 1,5, 5,1, 9,5 );
+			Path2D path = FlatUIUtils.createPath( false, 1,4, 5,0, 9,4 );
 			g.setStroke( new BasicStroke( 1f ) );
 			g.draw( path );
 		} else {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatDescendingSortIcon.java
Patch:
@@ -47,7 +47,7 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		g.setColor( sortIconColor );
 		if( chevron ) {
 			// chevron arrow
-			Path2D path = FlatUIUtils.createPath( false, 1,1, 5,5, 9,1 );
+			Path2D path = FlatUIUtils.createPath( false, 1,0, 5,4, 9,0 );
 			g.setStroke( new BasicStroke( 1f ) );
 			g.draw( path );
 		} else {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatEmptyBorder.java
Patch:
@@ -50,9 +50,10 @@ public Insets getBorderInsets() {
 
 	@Override
 	public Insets getBorderInsets( Component c, Insets insets ) {
-		insets.left = scale( left );
+		boolean leftToRight = left == right || c.getComponentOrientation().isLeftToRight();
+		insets.left = scale( leftToRight ? left : right );
 		insets.top = scale( top );
-		insets.right = scale( right );
+		insets.right = scale( leftToRight ? right : left );
 		insets.bottom = scale( bottom );
 		return insets;
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatFormattedTextFieldUI.java
Patch:
@@ -43,6 +43,7 @@
  * @uiDefault Component.minimumWidth					int
  * @uiDefault Component.isIntelliJTheme					boolean
  * @uiDefault FormattedTextField.placeholderForeground	Color
+ * @uiDefault TextComponent.selectAllOnFocusPolicy		String	never, once (default) or always
  *
  * @author Karl Tauber
  */

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatTestFrame.java
Patch:
@@ -403,8 +403,8 @@ private void updateScaleFactorComboBox() {
 
 	private void updateComponentsRecur( Container container, BiConsumer<Component, String> action ) {
 		for( Component c : container.getComponents() ) {
-			if( c instanceof JPanel ) {
-				updateComponentsRecur( (JPanel) c, action );
+			if( c instanceof JPanel || c instanceof JDesktopPane ) {
+				updateComponentsRecur( (Container) c, action );
 				continue;
 			}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatInternalFrameCloseIcon.java
Patch:
@@ -49,7 +49,7 @@ public FlatInternalFrameCloseIcon() {
 	protected void paintIcon( Component c, Graphics2D g ) {
 		paintBackground( c, g );
 
-		g.setColor( FlatButtonUI.buttonStateColor( c, null, null, null, hoverForeground, pressedForeground ) );
+		g.setColor( FlatButtonUI.buttonStateColor( c, c.getForeground(), null, null, hoverForeground, pressedForeground ) );
 
 		float mx = width / 2;
 		float my = height / 2;

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatRadioButtonUI.java
Patch:
@@ -121,8 +121,9 @@ public void paint( Graphics g, JComponent c ) {
 		// fill background even if opaque if
 		// - used as cell renderer (because of selection background)
 		// - if background was explicitly set to a non-UIResource color
-		if( !c.isOpaque() &&
-			(c.getParent() instanceof CellRendererPane || !(c.getBackground() instanceof UIResource)) )
+		if( ( !c.isOpaque() &&
+			 (c.getParent() instanceof CellRendererPane || !(c.getBackground() instanceof UIResource)))
+			 || c instanceof AbstractButton && ((AbstractButton) c).isContentAreaFilled() )
 		{
 			g.setColor( c.getBackground() );
 			g.fillRect( 0, 0, c.getWidth(), c.getHeight() );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatAscendingSortIcon.java
Patch:
@@ -47,7 +47,7 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		g.setColor( sortIconColor );
 		if( chevron ) {
 			// chevron arrow
-			Path2D path = FlatUIUtils.createPath( false, 1,5, 5,1, 9,5 );
+			Path2D path = FlatUIUtils.createPath( false, 1,4, 5,0, 9,4 );
 			g.setStroke( new BasicStroke( 1f ) );
 			g.draw( path );
 		} else {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatDescendingSortIcon.java
Patch:
@@ -47,7 +47,7 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		g.setColor( sortIconColor );
 		if( chevron ) {
 			// chevron arrow
-			Path2D path = FlatUIUtils.createPath( false, 1,1, 5,5, 9,1 );
+			Path2D path = FlatUIUtils.createPath( false, 1,0, 5,4, 9,0 );
 			g.setStroke( new BasicStroke( 1f ) );
 			g.draw( path );
 		} else {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableHeaderUI.java
Patch:
@@ -307,7 +307,9 @@ public void paintBorder( Component c, Graphics g, int x, int y, int width, int h
 				int xi = x + ((width - sortIcon.getIconWidth()) / 2);
 				int yi = (sortIconPosition == SwingConstants.TOP)
 					? y + UIScale.scale( 1 )
-					: y + height - sortIcon.getIconHeight() - UIScale.scale( 1 );
+					: y + height - sortIcon.getIconHeight()
+						- 1 // for gap
+						- (int) (1 * UIScale.getUserScaleFactor()); // for bottom border
 				sortIcon.paintIcon( c, g, xi, yi );
 			}
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatInternalFrameIconifyIcon.java
Patch:
@@ -35,6 +35,6 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		paintBackground( c, g );
 
 		g.setColor( c.getForeground() );
-		g.fillRect( 4, 8, 8, 1 );
+		g.fillRect( (width / 2) - 4, height / 2, 8, 1 );
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatInternalFrameMaximizeIcon.java
Patch:
@@ -36,6 +36,6 @@ protected void paintIcon( Component c, Graphics2D g ) {
 		paintBackground( c, g );
 
 		g.setColor( c.getForeground() );
-		g.fill( FlatUIUtils.createRectangle( 4, 4, 8, 8, 1 ) );
+		g.fill( FlatUIUtils.createRectangle( (width / 2) - 4, (height / 2) - 4, 8, 8, 1 ) );
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatEmptyBorder.java
Patch:
@@ -50,9 +50,10 @@ public Insets getBorderInsets() {
 
 	@Override
 	public Insets getBorderInsets( Component c, Insets insets ) {
-		insets.left = scale( left );
+		boolean leftToRight = left == right || c.getComponentOrientation().isLeftToRight();
+		insets.left = scale( leftToRight ? left : right );
 		insets.top = scale( top );
-		insets.right = scale( right );
+		insets.right = scale( leftToRight ? right : left );
 		insets.bottom = scale( bottom );
 		return insets;
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -294,10 +294,9 @@ private void initFonts( UIDefaults defaults ) {
 
 		// override fonts
 		for( Object key : defaults.keySet() ) {
-			if( key instanceof String && ((String)key).endsWith( ".font" ) )
+			if( key instanceof String && (((String)key).endsWith( ".font" ) || ((String)key).endsWith( "Font" )) )
 				defaults.put( key, uiFont );
 		}
-		defaults.put( "MenuItem.acceleratorFont", uiFont );
 
 		// use smaller font for progress bar
 		defaults.put( "ProgressBar.font", UIScale.scaleFont( uiFont, 0.85f ) );

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatTestFrame.java
Patch:
@@ -403,8 +403,8 @@ private void updateScaleFactorComboBox() {
 
 	private void updateComponentsRecur( Container container, BiConsumer<Component, String> action ) {
 		for( Component c : container.getComponents() ) {
-			if( c instanceof JPanel ) {
-				updateComponentsRecur( (JPanel) c, action );
+			if( c instanceof JPanel || c instanceof JDesktopPane ) {
+				updateComponentsRecur( (Container) c, action );
 				continue;
 			}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatClientProperties.java
Patch:
@@ -48,7 +48,7 @@ public interface FlatClientProperties
 	 * <p>
 	 * <strong>Components</strong> {@link javax.swing.JToggleButton}
 	 *
-	 * @see #TOGGLE_BUTTON_TYPE
+	 * @see #BUTTON_TYPE
 	 */
 	String BUTTON_TYPE_TAB = "tab";
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatClientProperties.java
Patch:
@@ -43,13 +43,13 @@ public interface FlatClientProperties
 	String BUTTON_TYPE_SQUARE = "square";
 
 	/**
-	 * Paint the toggle button in underline style.
+	 * Paint the toggle button in tab style.
 	 * <p>
 	 * <strong>Components</strong> {@link javax.swing.JToggleButton}
 	 *
 	 * @see #TOGGLE_BUTTON_TYPE
 	 */
-	String BUTTON_TYPE_UNDERLINE = "underline";
+	String BUTTON_TYPE_TAB = "tab";
 
 	/**
 	 * Paint a help button (circle with question mark).

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonBorder.java
Patch:
@@ -65,7 +65,7 @@ public class FlatButtonBorder
 
 	@Override
 	public void paintBorder( Component c, Graphics g, int x, int y, int width, int height ) {
-		if( FlatButtonUI.isContentAreaFilled( c ) && !FlatButtonUI.isHelpButton( c ) && !FlatToggleButtonUI.isUnderlineButton( c ) )
+		if( FlatButtonUI.isContentAreaFilled( c ) && !FlatButtonUI.isHelpButton( c ) && !FlatToggleButtonUI.isTabButton( c ) )
 			super.paintBorder( c, g, x, y, width, height );
 	}
 
@@ -106,7 +106,7 @@ public Insets getBorderInsets( Component c, Insets insets ) {
 
 	@Override
 	protected float getFocusWidth( Component c ) {
-		return FlatToggleButtonUI.isUnderlineButton( c ) ? 0 : super.getFocusWidth(c );
+		return FlatToggleButtonUI.isTabButton( c ) ? 0 : super.getFocusWidth(c );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatBorder.java
Patch:
@@ -78,6 +78,8 @@ public void paintBorder( Component c, Graphics g, int x, int y, int width, int h
 			float arc = isCellEditor ? 0 : getArc( c );
 
 			if( isFocused( c ) ) {
+				float innerFocusWidth = !(c instanceof JScrollPane) ? this.innerFocusWidth : 0;
+
 				g2.setColor( getFocusColor( c ) );
 				FlatUIUtils.paintComponentOuterBorder( g2, x, y, width, height, focusWidth,
 					getLineWidth() + scale( innerFocusWidth ), arc );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTabbedPaneUI.java
Patch:
@@ -181,7 +181,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 	protected JButton createScrollButton( int direction ) {
 		// this method is invoked before installDefaults(), so we can not use color fields here
 		return new FlatArrowButton( direction, UIManager.getString( "Component.arrowType" ),
-			UIManager.getColor( "TabbedPane.shadow" ),
+			UIManager.getColor( "TabbedPane.foreground" ),
 			UIManager.getColor( "TabbedPane.disabledForeground" ), null,
 			UIManager.getColor( "TabbedPane.hoverColor" ) );
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTreeUI.java
Patch:
@@ -232,7 +232,7 @@ protected void paintRow( Graphics g, Rectangle clipBounds, Insets insets, Rectan
 			g.setColor( isDropRow
 				? UIManager.getColor( "Tree.dropCellBackground" )
 				: (hasFocus ? selectionBackground : selectionInactiveBackground) );
-			g.fillRect( 0, bounds.y, clipBounds.width, bounds.height );
+			g.fillRect( 0, bounds.y, tree.getWidth(), bounds.height );
 
 			// paint expand/collapse icon
 			if( shouldPaintExpandControl( path, row, isExpanded, hasBeenExpanded, isLeaf ) ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatListUI.java
Patch:
@@ -56,6 +56,7 @@
  *
  * @uiDefault List.cellMargins						Insets
  * @uiDefault List.cellFocusColor					Color
+ * @uiDefault List.showCellFocusIndicator			boolean
  *
  * @author Karl Tauber
  */

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -245,7 +245,7 @@ else if( key.endsWith( ".border" ) || key.endsWith( "Border" ) ) {
 				try {
 					uiValue = UIDefaultsLoader.parseValue( key, valueStr );
 				} catch( RuntimeException ex ) {
-					UIDefaultsLoader.logParseError( key, valueStr, ex );
+					UIDefaultsLoader.logParseError( Level.CONFIG, key, valueStr, ex );
 					return; // ignore invalid value
 				}
 			}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.logging.Level;
 import javax.swing.UIDefaults;
 import javax.swing.plaf.ColorUIResource;
 import com.formdev.flatlaf.json.Json;
@@ -72,8 +73,7 @@ public static boolean install( InputStream in ) {
 		try {
 		    return FlatLaf.install( createLaf( in ) );
 		} catch( Exception ex ) {
-		    System.err.println( "Failed to load IntelliJ theme" );
-		    ex.printStackTrace();
+			FlatLaf.LOG.log( Level.SEVERE, "FlatLaf: Failed to load IntelliJ theme", ex );
 		    return false;
 		}
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -432,6 +432,9 @@ private void fixCheckBoxColor( UIDefaults defaults, Map<String, Object> colorPal
 		uiKeyMapping.put( "ScrollBar.trackColor", "ScrollBar.track" );
 		uiKeyMapping.put( "ScrollBar.thumbColor", "ScrollBar.thumb" );
 
+		// Separator
+		uiKeyMapping.put( "Separator.separatorColor", "Separator.foreground" );
+
 		// Slider
 		uiKeyMapping.put( "Slider.trackWidth", "" ); // ignore (used in Material Theme UI Lite)
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatCheckBoxIcon.java
Patch:
@@ -62,7 +62,7 @@
 public class FlatCheckBoxIcon
 	extends FlatAbstractIcon
 {
-	protected final int focusWidth = UIManager.getInt( "Component.focusWidth" );
+	public final int focusWidth = UIManager.getInt( "Component.focusWidth" );
 	protected final Color focusColor = FlatUIUtils.getUIColor( "CheckBox.icon.focusedColor",
 		UIManager.getColor( "Component.focusColor" ) );
 	protected final int arc = FlatUIUtils.getUIInt( "CheckBox.arc", 2 );

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/ControlBar.java
Patch:
@@ -77,6 +77,9 @@ else if( className.equals( NimbusLookAndFeel.class.getName() ) )
 				EventQueue.invokeLater( () -> {
 					// update info label because user scale factor may change
 					updateInfoLabel();
+
+					// this is necessary because embedded JOptionPane's "steal" the default button
+					frame.getRootPane().setDefaultButton( closeButton );
 				} );
 			}
 		} );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -283,6 +283,9 @@ private void initFonts( UIDefaults defaults ) {
 				defaults.put( key, uiFont );
 		}
 		defaults.put( "MenuItem.acceleratorFont", uiFont );
+
+		// use smaller font for progress bar
+		defaults.put( "ProgressBar.font", UIScale.scaleFont( uiFont, 0.85f ) );
 	}
 
 	/**

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -335,7 +335,7 @@ public void update( Graphics g, JComponent c ) {
 			g2.setColor( enabled ? borderColor : disabledBorderColor );
 			float lw = scale( 1f );
 			float lx = isLeftToRight ? arrowX : arrowX + arrowWidth - lw;
-			g2.fill( new Rectangle2D.Float( lx, focusWidth, lw, height - (focusWidth * 2) ) );
+			g2.fill( new Rectangle2D.Float( lx, focusWidth, lw, height - 1 - (focusWidth * 2)) );
 		}
 
 		paint( g, c );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -285,7 +285,7 @@ public void update( Graphics g, JComponent c ) {
 		g2.setColor( enabled ? borderColor : disabledBorderColor );
 		float lw = scale( 1f );
 		float lx = isLeftToRight ? arrowX : arrowX + arrowWidth - lw;
-		g2.fill( new Rectangle2D.Float( lx, focusWidth, lw, height - (focusWidth * 2) ) );
+		g2.fill( new Rectangle2D.Float( lx, focusWidth, lw, height - 1 - (focusWidth * 2) ) );
 
 		paint( g, c );
 	}

File: flatlaf-swingx/src/main/java/com/formdev/flatlaf/swingx/ui/FlatDatePickerUI.java
Patch:
@@ -255,7 +255,7 @@ public void update( Graphics g, JComponent c ) {
 		g2.setColor( enabled ? borderColor : disabledBorderColor );
 		float lw = scale( 1f );
 		float lx = isLeftToRight ? arrowX : arrowX + arrowWidth - lw;
-		g2.fill( new Rectangle2D.Float( lx, focusWidth, lw, height - (focusWidth * 2) ) );
+		g2.fill( new Rectangle2D.Float( lx, focusWidth, lw, height - 1 - (focusWidth * 2) ) );
 
 		paint( g, c );
 	}

File: flatlaf-swingx/src/main/java/com/formdev/flatlaf/swingx/ui/FlatTaskPaneUI.java
Patch:
@@ -84,7 +84,7 @@ protected void installDefaults() {
 	public void uninstallUI( JComponent c ) {
 		if( group.getContentPane() instanceof JComponent ) {
 			// uninstall our content border, because it does not implement UIResource,
-			// to alloy other LaF to install its own border
+			// to allow other LaF to install its own border
 			JComponent content = (JComponent) group.getContentPane();
 			if( content.getBorder() instanceof FlatContentPaneBorder )
 				content.setBorder( null );

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/OptionPanePanel.java
Patch:
@@ -296,7 +296,7 @@ private static class ShowDialogLinkLabel
 		private JOptionPane optionPane;
 
 		ShowDialogLinkLabel() {
-			setText( "<html><a href=\"#\" color=\"#589df6\">Show dialog</a></html>" );
+			setText( "<html><a href=\"#\">Show dialog</a></html>" );
 
 			addMouseListener( new MouseAdapter() {
 				@Override

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponentsTest.java
Patch:
@@ -784,15 +784,15 @@ private void initComponents() {
 				"[]"));
 
 			//---- label3 ----
-			label3.setText("<html>JLabel HTML<br>Sample <b>content</b><br> <u>text</u></html>");
+			label3.setText("<html>JLabel HTML<br>Sample <b>content</b><br> <u>text</u> with <a href=\"#\">link</a></html>");
 			panel3.add(label3, "cell 0 0");
 
 			//======== scrollPane15 ========
 			{
 
 				//---- editorPane6 ----
 				editorPane6.setContentType("text/html");
-				editorPane6.setText("JEditorPane HTML<br>Sample <b>content</b><br> <u>text</u>");
+				editorPane6.setText("JEditorPane HTML<br>Sample <b>content</b><br> <u>text</u> with <a href=\"#\">link</a>");
 				scrollPane15.setViewportView(editorPane6);
 			}
 			panel3.add(scrollPane15, "cell 0 1,grow");
@@ -802,7 +802,7 @@ private void initComponents() {
 
 				//---- textPane6 ----
 				textPane6.setContentType("text/html");
-				textPane6.setText("JTextPane HTML<br>Sample <b>content</b><br> <u>text</u>");
+				textPane6.setText("JTextPane HTML<br>Sample <b>content</b><br> <u>text</u> with <a href=\"#\">link</a>");
 				scrollPane16.setViewportView(textPane6);
 			}
 			panel3.add(scrollPane16, "cell 0 2,grow");

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatOptionPaneTest.java
Patch:
@@ -296,7 +296,7 @@ private static class ShowDialogLinkLabel
 		private JOptionPane optionPane;
 
 		ShowDialogLinkLabel() {
-			setText( "<html><a href=\"#\" color=\"#589df6\">Show dialog</a></html>" );
+			setText( "<html><a href=\"#\">Show dialog</a></html>" );
 
 			addMouseListener( new MouseAdapter() {
 				@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/IntelliJTheme.java
Patch:
@@ -371,6 +371,9 @@ private void fixCheckBoxColor( UIDefaults defaults, Map<String, Object> colorPal
 		uiKeyMapping.put( "ProgressBar.trackColor",    "ProgressBar.background" );
 		uiKeyMapping.put( "ProgressBar.progressColor", "ProgressBar.foreground" );
 
+		// Slider
+		uiKeyMapping.put( "Slider.trackWidth", "" ); // ignore (used in Material Theme UI Lite)
+
 		for( Map.Entry<String, String> e : uiKeyMapping.entrySet() )
 			uiKeyInverseMapping.put( e.getValue(), e.getKey() );
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatOptionPaneErrorIcon.java
Patch:
@@ -24,15 +24,16 @@
 /**
  * "Error" icon for {@link javax.swing.JOptionPane}.
  *
- * @uiDefault OptionPane.icon.errorColor			Color
+ * @uiDefault OptionPane.icon.errorColor			Color	optional; defaults to Actions.Red
+ * @uiDefault Actions.Red							Color
  *
  * @author Karl Tauber
  */
 public class FlatOptionPaneErrorIcon
 	extends FlatOptionPaneAbstractIcon
 {
 	public FlatOptionPaneErrorIcon() {
-		super( "OptionPane.icon.errorColor" );
+		super( "OptionPane.icon.errorColor", "Actions.Red" );
 	}
 
 	/*

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatOptionPaneInformationIcon.java
Patch:
@@ -24,15 +24,16 @@
 /**
  * "Information" icon for {@link javax.swing.JOptionPane}.
  *
- * @uiDefault OptionPane.icon.informationColor		Color
+ * @uiDefault OptionPane.icon.informationColor		Color	optional; defaults to Actions.Blue
+ * @uiDefault Actions.Blue							Color
  *
  * @author Karl Tauber
  */
 public class FlatOptionPaneInformationIcon
 	extends FlatOptionPaneAbstractIcon
 {
 	public FlatOptionPaneInformationIcon() {
-		super( "OptionPane.icon.informationColor" );
+		super( "OptionPane.icon.informationColor", "Actions.Blue" );
 	}
 
 	/*

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatOptionPaneQuestionIcon.java
Patch:
@@ -24,15 +24,16 @@
 /**
  * "Question" icon for {@link javax.swing.JOptionPane}.
  *
- * @uiDefault OptionPane.icon.questionColor			Color
+ * @uiDefault OptionPane.icon.questionColor			Color	optional; defaults to Actions.Blue
+ * @uiDefault Actions.Blue							Color
  *
  * @author Karl Tauber
  */
 public class FlatOptionPaneQuestionIcon
 	extends FlatOptionPaneAbstractIcon
 {
 	public FlatOptionPaneQuestionIcon() {
-		super( "OptionPane.icon.questionColor" );
+		super( "OptionPane.icon.questionColor", "Actions.Blue" );
 	}
 
 	/*

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatOptionPaneWarningIcon.java
Patch:
@@ -24,15 +24,16 @@
 /**
  * "Warning" icon for {@link javax.swing.JOptionPane}.
  *
- * @uiDefault OptionPane.icon.warningColor			Color
+ * @uiDefault OptionPane.icon.warningColor			Color	optional; defaults to Actions.Yellow
+ * @uiDefault Actions.Yellow						Color
  *
  * @author Karl Tauber
  */
 public class FlatOptionPaneWarningIcon
 	extends FlatOptionPaneAbstractIcon
 {
 	public FlatOptionPaneWarningIcon() {
-		super( "OptionPane.icon.warningColor" );
+		super( "OptionPane.icon.warningColor", "Actions.Yellow" );
 	}
 
 	/*

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -171,6 +171,9 @@ private BasicLookAndFeel getBase() {
 	public UIDefaults getDefaults() {
 		UIDefaults defaults = getBase().getDefaults();
 
+		// add Metal resource bundle, which is required for FlatFileChooserUI
+		defaults.addResourceBundle( "com.sun.swing.internal.plaf.metal.resources.metal" );
+
 		// initialize some defaults (for overriding) that are used in basic UI delegates,
 		// but are not set in MetalLookAndFeel or BasicLookAndFeel
 		Color control = defaults.getColor( "control" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatFileChooserDetailsViewIcon.java
Patch:
@@ -23,15 +23,15 @@
 /**
  * "details view" icon for {@link javax.swing.JFileChooser}.
  *
- * @uiDefault FileChooser.icon.detailsViewColor		Color
+ * @uiDefault Actions.Grey							Color
  *
  * @author Karl Tauber
  */
 public class FlatFileChooserDetailsViewIcon
 	extends FlatAbstractIcon
 {
 	public FlatFileChooserDetailsViewIcon() {
-		super( 16, 16, UIManager.getColor( "FileChooser.icon.detailsViewColor" ) );
+		super( 16, 16, UIManager.getColor( "Actions.Grey" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatFileChooserHomeFolderIcon.java
Patch:
@@ -24,15 +24,15 @@
 /**
  * "home folder" icon for {@link javax.swing.JFileChooser}.
  *
- * @uiDefault FileChooser.icon.homeFolderColor		Color
+ * @uiDefault Actions.Grey							Color
  *
  * @author Karl Tauber
  */
 public class FlatFileChooserHomeFolderIcon
 	extends FlatAbstractIcon
 {
 	public FlatFileChooserHomeFolderIcon() {
-		super( 16, 16, UIManager.getColor( "FileChooser.icon.homeFolderColor" ) );
+		super( 16, 16, UIManager.getColor( "Actions.Grey" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatFileChooserListViewIcon.java
Patch:
@@ -23,15 +23,15 @@
 /**
  * "list view" icon for {@link javax.swing.JFileChooser}.
  *
- * @uiDefault FileChooser.icon.listViewColor		Color
+ * @uiDefault Actions.Grey							Color
  *
  * @author Karl Tauber
  */
 public class FlatFileChooserListViewIcon
 	extends FlatAbstractIcon
 {
 	public FlatFileChooserListViewIcon() {
-		super( 16, 16, UIManager.getColor( "FileChooser.icon.listViewColor" ) );
+		super( 16, 16, UIManager.getColor( "Actions.Grey" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatFileChooserNewFolderIcon.java
Patch:
@@ -24,15 +24,15 @@
 /**
  * "new folder" icon for {@link javax.swing.JFileChooser}.
  *
- * @uiDefault FileChooser.icon.newFolderColor		Color
+ * @uiDefault Actions.Grey							Color
  *
  * @author Karl Tauber
  */
 public class FlatFileChooserNewFolderIcon
 	extends FlatAbstractIcon
 {
 	public FlatFileChooserNewFolderIcon() {
-		super( 16, 16, UIManager.getColor( "FileChooser.icon.newFolderColor" ) );
+		super( 16, 16, UIManager.getColor( "Actions.Grey" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatFileViewComputerIcon.java
Patch:
@@ -25,15 +25,15 @@
 /**
  * "computer" icon for {@link javax.swing.JFileChooser}.
  *
- * @uiDefault FileView.icon.computerColor		Color
+ * @uiDefault Objects.Grey						Color
  *
  * @author Karl Tauber
  */
 public class FlatFileViewComputerIcon
 	extends FlatAbstractIcon
 {
 	public FlatFileViewComputerIcon() {
-		super( 16, 16, UIManager.getColor( "FileView.icon.computerColor" ) );
+		super( 16, 16, UIManager.getColor( "Objects.Grey" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatFileViewDirectoryIcon.java
Patch:
@@ -24,15 +24,15 @@
 /**
  * "directory" icon for {@link javax.swing.JFileChooser}.
  *
- * @uiDefault FileView.icon.directoryColor		Color
+ * @uiDefault Objects.Grey						Color
  *
  * @author Karl Tauber
  */
 public class FlatFileViewDirectoryIcon
 	extends FlatAbstractIcon
 {
 	public FlatFileViewDirectoryIcon() {
-		super( 16, 16, UIManager.getColor( "FileView.icon.directoryColor" ) );
+		super( 16, 16, UIManager.getColor( "Objects.Grey" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatFileViewFileIcon.java
Patch:
@@ -24,15 +24,15 @@
 /**
  * "file" icon for {@link javax.swing.JFileChooser}.
  *
- * @uiDefault FileView.icon.fileColor			Color
+ * @uiDefault Objects.Grey						Color
  *
  * @author Karl Tauber
  */
 public class FlatFileViewFileIcon
 	extends FlatAbstractIcon
 {
 	public FlatFileViewFileIcon() {
-		super( 16, 16, UIManager.getColor( "FileView.icon.fileColor" ) );
+		super( 16, 16, UIManager.getColor( "Objects.Grey" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatFileViewFloppyDriveIcon.java
Patch:
@@ -25,15 +25,15 @@
 /**
  * "floppy drive" icon for {@link javax.swing.JFileChooser}.
  *
- * @uiDefault FileView.icon.floppyDriveColor		Color
+ * @uiDefault Objects.Grey							Color
  *
  * @author Karl Tauber
  */
 public class FlatFileViewFloppyDriveIcon
 	extends FlatAbstractIcon
 {
 	public FlatFileViewFloppyDriveIcon() {
-		super( 16, 16, UIManager.getColor( "FileView.icon.floppyDriveColor" ) );
+		super( 16, 16, UIManager.getColor( "Objects.Grey" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatFileViewHardDriveIcon.java
Patch:
@@ -25,15 +25,15 @@
 /**
  * "hard drive" icon for {@link javax.swing.JFileChooser}.
  *
- * @uiDefault FileView.icon.hardDriveColor		Color
+ * @uiDefault Objects.Grey						Color
  *
  * @author Karl Tauber
  */
 public class FlatFileViewHardDriveIcon
 	extends FlatAbstractIcon
 {
 	public FlatFileViewHardDriveIcon() {
-		super( 16, 16, UIManager.getColor( "FileView.icon.hardDriveColor" ) );
+		super( 16, 16, UIManager.getColor( "Objects.Grey" ) );
 	}
 
 	@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatCheckBoxIcon.java
Patch:
@@ -38,6 +38,7 @@
  *
  * @uiDefault Component.focusWidth						int
  * @uiDefault Component.focusColor						Color
+ * @uiDefault CheckBox.icon.focusedColor				Color	optional; defaults to Component.focusColor
  * @uiDefault CheckBox.icon.borderColor					Color
  * @uiDefault CheckBox.icon.disabledBorderColor			Color
  * @uiDefault CheckBox.icon.selectedBorderColor			Color
@@ -62,7 +63,8 @@ public class FlatCheckBoxIcon
 	extends FlatAbstractIcon
 {
 	protected final int focusWidth = UIManager.getInt( "Component.focusWidth" );
-	protected final Color focusColor = UIManager.getColor( "Component.focusColor" );
+	protected final Color focusColor = FlatUIUtils.getUIColor( "CheckBox.icon.focusedColor",
+		UIManager.getColor( "Component.focusColor" ) );
 	protected final int arc = FlatUIUtils.getUIInt( "CheckBox.arc", 2 );
 
 	protected final Color borderColor = UIManager.getColor( "CheckBox.icon.borderColor" );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatToolBarSeparatorUI.java
Patch:
@@ -33,6 +33,8 @@
 /**
  * Provides the Flat LaF UI delegate for {@link javax.swing.JToolBar.Separator}.
  *
+ * <!-- FlatToolBarSeparatorUI -->
+ *
  * @uiDefault ToolBar.separatorWidth				int
  * @uiDefault ToolBar.separatorColor				Color
  *

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatCheckBoxIcon.java
Patch:
@@ -109,12 +109,13 @@ protected void paintIcon( Component c, Graphics2D g2 ) {
 		paintBorder( g2 );
 
 		// paint background
-		g2.setColor( FlatButtonUI.buttonStateColor( c,
+		FlatUIUtils.setColor( g2, FlatButtonUI.buttonStateColor( c,
 			selected ? selectedBackground : background,
 			disabledBackground,
 			focusedBackground,
 			selected && selectedHoverBackground != null ? selectedHoverBackground : hoverBackground,
-			selected && selectedPressedBackground != null ? selectedPressedBackground : pressedBackground ) );
+			selected && selectedPressedBackground != null ? selectedPressedBackground : pressedBackground ),
+			background );
 		paintBackground( g2 );
 
 		// paint checkmark

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatHelpButtonIcon.java
Patch:
@@ -24,6 +24,7 @@
 import java.awt.geom.Path2D;
 import javax.swing.UIManager;
 import com.formdev.flatlaf.ui.FlatButtonUI;
+import com.formdev.flatlaf.ui.FlatUIUtils;
 
 /**
  * Help button icon for {@link javax.swing.JButton}.
@@ -99,12 +100,12 @@ protected void paintIcon( Component c, Graphics2D g2 ) {
 		g2.fill( new Ellipse2D.Float( focusWidth + 0.5f, focusWidth + 0.5f, 21, 21 ) );
 
 		// paint background
-		g2.setColor( FlatButtonUI.buttonStateColor( c,
+		FlatUIUtils.setColor( g2, FlatButtonUI.buttonStateColor( c,
 			background,
 			disabledBackground,
 			focusedBackground,
 			hoverBackground,
-			pressedBackground ) );
+			pressedBackground ), background );
 		g2.fill( new Ellipse2D.Float( focusWidth + 1.5f, focusWidth + 1.5f, 19, 19 ) );
 
 		// paint question mark

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -190,7 +190,7 @@ public void update( Graphics g, JComponent c ) {
 					float focusWidth = (border instanceof FlatBorder) ? scale( (float) this.focusWidth ) : 0;
 					float arc = (border instanceof FlatButtonBorder || isToolBarButton( c )) ? scale( (float) this.arc ) : 0;
 
-					g2.setColor( background );
+					FlatUIUtils.setColor( g2, background, isDefaultButton(c) ? defaultBackground : c.getBackground() );
 					FlatUIUtils.fillRoundRectangle( g2, 0, 0, c.getWidth(), c.getHeight(), focusWidth, arc );
 				} finally {
 					g2.dispose();

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatChooserTest.java
Patch:
@@ -56,7 +56,7 @@ private void initComponents() {
 
 		//======== this ========
 		setLayout(new MigLayout(
-			"insets 0,hidemode 3,gap 5 5,ltr",
+			"ltr,insets dialog,hidemode 3",
 			// columns
 			"[]" +
 			"[]",

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponents2Test.java
Patch:
@@ -62,7 +62,7 @@ private void initComponents() {
 
 		//======== this ========
 		setLayout(new MigLayout(
-			"insets 0,hidemode 3,gap 5 5,ltr",
+			"ltr,insets dialog,hidemode 3",
 			// columns
 			"[]" +
 			"[200]" +

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatComponentsTest.java
Patch:
@@ -178,7 +178,7 @@ private void initComponents() {
 
 		//======== this ========
 		setLayout(new MigLayout(
-			"insets 0,hidemode 3,gap 5 5,ltr",
+			"ltr,insets dialog,hidemode 3",
 			// columns
 			"[]" +
 			"[]" +
@@ -760,7 +760,7 @@ private void initComponents() {
 		{
 			panel3.setOpaque(false);
 			panel3.setLayout(new MigLayout(
-				"insets 0,hidemode 3,gap 5 5,ltr",
+				"ltr,insets 0,hidemode 3",
 				// columns
 				"[]",
 				// rows

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatContainerTest.java
Patch:
@@ -104,7 +104,7 @@ private void initComponents() {
 
 		//======== this ========
 		setLayout(new MigLayout(
-			"insets 0,hidemode 3",
+			"insets dialog,hidemode 3",
 			// columns
 			"[grow,fill]",
 			// rows

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatOptionPaneTest.java
Patch:
@@ -90,7 +90,7 @@ private void initComponents() {
 
 		//======== this ========
 		setLayout(new MigLayout(
-			"flowy,ltr,insets 0,hidemode 3,gap 5 5",
+			"flowy,ltr,insets dialog,hidemode 3",
 			// columns
 			"[]" +
 			"[]" +

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/FlatTestFrame.java
Patch:
@@ -465,7 +465,7 @@ private void initComponents() {
 			{
 				Container contentPanelContentPane = contentPanel.getContentPane();
 				contentPanelContentPane.setLayout(new MigLayout(
-					"insets dialog,hidemode 3",
+					"insets 0,hidemode 3",
 					// columns
 					"[grow,fill]",
 					// rows

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/extras/FlatExtrasTest.java
Patch:
@@ -59,7 +59,7 @@ private void initComponents() {
 
 		//======== this ========
 		setLayout(new MigLayout(
-			"hidemode 3,ltr",
+			"ltr,insets dialog,hidemode 3",
 			// columns
 			"[]" +
 			"[]" +

File: flatlaf-testing/src/main/java/com/formdev/flatlaf/testing/swingx/FlatSwingXTest.java
Patch:
@@ -103,7 +103,7 @@ private void initComponents() {
 
 		//======== this ========
 		setLayout(new MigLayout(
-			"hidemode 3,ltr",
+			"ltr,insets dialog,hidemode 3",
 			// columns
 			"[left]" +
 			"[]" +

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatCheckBoxIcon.java
Patch:
@@ -92,7 +92,6 @@ public FlatCheckBoxIcon() {
 	protected void paintIcon( Component c, Graphics2D g2 ) {
 		boolean indeterminate = c instanceof JComponent && clientPropertyEquals( (JComponent) c, SELECTED_STATE, SELECTED_STATE_INDETERMINATE );
 		boolean selected = indeterminate || (c instanceof AbstractButton && ((AbstractButton)c).isSelected());
-		System.out.println( "icon "+indeterminate+" "+selected );
 
 		// paint focused border
 		if( c.hasFocus() && focusWidth > 0 ) {

File: flatlaf-core/src/main/module-info/module-info.java
Patch:
@@ -24,4 +24,6 @@
 	exports com.formdev.flatlaf.icons;
 	exports com.formdev.flatlaf.ui;
 	exports com.formdev.flatlaf.util;
+
+	uses com.formdev.flatlaf.FlatDefaultsAddon;
 }

File: flatlaf-core/src/test/java/com/formdev/flatlaf/FlatInspector.java
Patch:
@@ -239,6 +239,7 @@ else if( c instanceof JToolBar )
 		text += "Enabled: " + c.isEnabled() + '\n';
 		text += "Opaque: " + c.isOpaque() + '\n';
 		text += "Focusable: " + c.isFocusable() + '\n';
+		text += "Left-to-right: " + c.getComponentOrientation().isLeftToRight() + '\n';
 		text += "Parent: " + c.getParent().getClass().getName();
 
 		return text;

File: flatlaf-swingx/src/test/java/com/formdev/flatlaf/swingx/FlatSwingXTest.java
Patch:
@@ -32,6 +32,7 @@ public class FlatSwingXTest
 {
 	public static void main( String[] args ) {
 		FlatTestFrame frame = FlatTestFrame.create( args, "FlatSwingXTest" );
+		frame.useApplyComponentOrientation = true;
 		frame.showFrame( new FlatSwingXTest() );
 	}
 

File: flatlaf-core/src/test/java/com/formdev/flatlaf/FlatComponentsTest.java
Patch:
@@ -230,12 +230,14 @@ private void initComponents() {
 		//---- button1 ----
 		button1.setText("enabled");
 		button1.setDisplayedMnemonicIndex(0);
+		button1.setToolTipText("This button is enabled.");
 		add(button1, "cell 1 1");
 
 		//---- button2 ----
 		button2.setText("disabled");
 		button2.setDisplayedMnemonicIndex(0);
 		button2.setEnabled(false);
+		button2.setToolTipText("This button is disabled.");
 		add(button2, "cell 2 1");
 
 		//---- button5 ----

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatComboBoxUI.java
Patch:
@@ -370,7 +370,6 @@ private class FlatComboPopup
 		extends BasicComboPopup
 	{
 		private CellPaddingBorder paddingBorder;
-		private final ListCellRenderer renderer = new PopupListCellRenderer();
 
 		FlatComboPopup( JComboBox combo ) {
 			super( combo );
@@ -405,7 +404,7 @@ protected void configurePopup() {
 		protected void configureList() {
 			super.configureList();
 
-			list.setCellRenderer( renderer );
+			list.setCellRenderer( new PopupListCellRenderer() );
 		}
 
 		@Override
@@ -416,7 +415,7 @@ public void propertyChange( PropertyChangeEvent e ) {
 					super.propertyChange( e );
 
 					if( e.getPropertyName() == "renderer" )
-						list.setCellRenderer( renderer );
+						list.setCellRenderer( new PopupListCellRenderer() );
 				}
 			};
 		}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTextFieldUI.java
Patch:
@@ -128,6 +128,7 @@ private Dimension applyMinimumWidth( Dimension size, JComponent c ) {
 			(parent != null && parent.getParent() instanceof JSpinner) )
 		  return size;
 
+		int focusWidth = (c.getBorder() instanceof FlatBorder) ? this.focusWidth : 0;
 		size.width = Math.max( size.width, scale( minimumWidth + (focusWidth * 2) ) );
 		return size;
 	}

File: flatlaf-core/src/test/java/com/formdev/flatlaf/FlatOptionPaneTest.java
Patch:
@@ -201,7 +201,7 @@ private void initComponents() {
 			//---- warningOptionPane ----
 			warningOptionPane.setMessageType(JOptionPane.WARNING_MESSAGE);
 			warningOptionPane.setOptionType(JOptionPane.OK_CANCEL_OPTION);
-			warningOptionPane.setMessage("Beware of the dog!");
+			warningOptionPane.setMessage("<html>I like <b>bold</b>,<br> and I like <i>italic</i>,<br> and I like to have<br> many lines.<br> Lots of lines.");
 			panel5.add(warningOptionPane, BorderLayout.CENTER);
 		}
 		add(panel5, "cell 1 4");

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/OptionPanePanel.java
Patch:
@@ -201,7 +201,7 @@ private void initComponents() {
 				//---- warningOptionPane ----
 				warningOptionPane.setMessageType(JOptionPane.WARNING_MESSAGE);
 				warningOptionPane.setOptionType(JOptionPane.OK_CANCEL_OPTION);
-				warningOptionPane.setMessage("Beware of the dog!");
+				warningOptionPane.setMessage("<html>I like <b>bold</b>,<br> and I like <i>italic</i>,<br> and I like to have<br> many lines.<br> Lots of lines.");
 				panel5.add(warningOptionPane, BorderLayout.CENTER);
 			}
 			panel9.add(panel5, "cell 1 4");

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatBorder.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * Border for various components (e.g. {@link javax.swing.JTextField}).
  *
- * There is empty space around the component border, if Component.focusWidth > 0,
+ * There is empty space around the component border, if Component.focusWidth is greater than zero,
  * which is used to paint focus border.
  *
  * Because there is empty space (if focus border is not painted),

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -315,7 +315,7 @@ public Dimension minimumLayoutSize( Container parent ) {
 		public void layoutContainer( Container parent ) {
 			Dimension size = parent.getSize();
 			Insets insets = parent.getInsets();
-			Rectangle r = FlatUIUtils.subtract( new Rectangle( size ), insets );
+			Rectangle r = FlatUIUtils.subtractInsets( new Rectangle( size ), insets );
 
 			if( nextButton == null && previousButton == null ) {
 				if( editor != null )
@@ -339,7 +339,7 @@ public void layoutContainer( Container parent ) {
 			}
 
 			if( editor != null )
-				editor.setBounds( FlatUIUtils.subtract( editorRect, padding ) );
+				editor.setBounds( FlatUIUtils.subtractInsets( editorRect, padding ) );
 
 			int nextHeight = Math.round( buttonsRect.height / 2f );
 			if( nextButton != null )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatCheckBoxIcon.java
Patch:
@@ -128,7 +128,7 @@ protected void paintBorder( Graphics2D g2 ) {
 	}
 
 	protected void paintBackground( Graphics2D g2 ) {
-		g2.fillRoundRect( 2, 1, 12, 12, 4, 4 );
+		g2.fillRoundRect( 2, 1, 12, 12, 3, 3 );
 	}
 
 	protected void paintCheckmark( Graphics2D g2 ) {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -52,6 +52,7 @@ public abstract class FlatLaf
 {
 	private static final String VARIABLE_PREFIX = "@";
 	private static final String REF_PREFIX = VARIABLE_PREFIX + "@";
+	private static final String OPTIONAL_PREFIX = "?";
 	private static final String GLOBAL_PREFIX = "*.";
 
 	private BasicLookAndFeel base;
@@ -244,8 +245,8 @@ private String resolveValue( Properties properties, String value ) {
 			value = value.substring( REF_PREFIX.length() );
 
 		boolean optional = false;
-		if( value.startsWith( "?" ) ) {
-			value = value.substring( 1 );
+		if( value.startsWith( OPTIONAL_PREFIX ) ) {
+			value = value.substring( OPTIONAL_PREFIX.length() );
 			optional = true;
 		}
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableUI.java
Patch:
@@ -50,8 +50,8 @@ public static ComponentUI createUI( JComponent c ) {
 	protected void installDefaults() {
 		super.installDefaults();
 
-		selectionInactiveBackground = UIManager.getColor( "Tree.selectionInactiveBackground" );
-		selectionInactiveForeground = UIManager.getColor( "Tree.selectionInactiveForeground" );
+		selectionInactiveBackground = UIManager.getColor( "Table.selectionInactiveBackground" );
+		selectionInactiveForeground = UIManager.getColor( "Table.selectionInactiveForeground" );
 
 		int rowHeight = FlatUIUtils.getUIInt( "Table.rowHeight", 16 );
 		if( rowHeight > 0 )

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -222,8 +222,10 @@ private String resolveValue( Properties properties, String value ) {
 			value = value.substring( REF_PREFIX.length() );
 
 		String newValue = properties.getProperty( value );
-		if( newValue == null )
+		if( newValue == null ) {
 			System.err.println( "variable or reference '" + value + "' not found" );
+			throw new IllegalArgumentException( value );
+		}
 
 		return resolveValue( properties, newValue );
 	}

File: flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java
Patch:
@@ -225,7 +225,7 @@ private String resolveValue( Properties properties, String value ) {
 		if( newValue == null )
 			System.err.println( "variable or reference '" + value + "' not found" );
 
-		return newValue;
+		return resolveValue( properties, newValue );
 	}
 
 	private Object parseValue( String key, String value, Function<String, String> resolver ) {

File: flatlaf-core/src/test/java/com/formdev/flatlaf/FlatOptionPaneTest.java
Patch:
@@ -294,7 +294,7 @@ private static class ShowDialogLinkLabel
 		private JOptionPane optionPane;
 
 		ShowDialogLinkLabel() {
-			setText( "<html><a href=\"#\">Show dialog</a></html>" );
+			setText( "<html><a href=\"#\" color=\"#589df6\">Show dialog</a></html>" );
 
 			addMouseListener( new MouseAdapter() {
 				@Override

File: flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/OptionPanePanel.java
Patch:
@@ -296,7 +296,7 @@ private static class ShowDialogLinkLabel
 		private JOptionPane optionPane;
 
 		ShowDialogLinkLabel() {
-			setText( "<html><a href=\"#\">Show dialog</a></html>" );
+			setText( "<html><a href=\"#\" color=\"#589df6\">Show dialog</a></html>" );
 
 			addMouseListener( new MouseAdapter() {
 				@Override

File: flatlaf-core/src/main/java/com/formdev/flatlaf/icons/FlatMenuArrowIcon.java
Patch:
@@ -35,8 +35,8 @@
 public class FlatMenuArrowIcon
 	extends FlatAbstractIcon
 {
-	protected final Color checkmarkColor = UIManager.getColor( "Menu.icon.arrowColor" );
-	protected final Color disabledCheckmarkColor = UIManager.getColor( "Menu.icon.disabledArrowColor" );
+	protected final Color arrowColor = UIManager.getColor( "Menu.icon.arrowColor" );
+	protected final Color disabledArrowColor = UIManager.getColor( "Menu.icon.disabledArrowColor" );
 	protected final Color selectionForeground = UIManager.getColor( "Menu.selectionForeground" );
 
 	public FlatMenuArrowIcon() {
@@ -62,6 +62,6 @@ private Color getArrowColor( Component c ) {
 		if( c instanceof JMenu && ((JMenu)c).isSelected() )
 			return selectionForeground;
 
-		return c.isEnabled() ? checkmarkColor : disabledCheckmarkColor;
+		return c.isEnabled() ? arrowColor : disabledArrowColor;
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTableHeaderUI.java
Patch:
@@ -121,7 +121,8 @@ private void paintColumnBorders( Graphics g, JComponent c ) {
 				int x = width;
 				for( int i = 0; i < sepCount; i++ ) {
 					x -= columnModel.getColumn( i ).getWidth();
-					g2.fill( new Rectangle2D.Float( x - lineWidth, topLineIndent, lineWidth, height - bottomLineIndent ) );
+					g2.fill( new Rectangle2D.Float( x - (i < sepCount - 1 ? lineWidth : 0),
+						topLineIndent, lineWidth, height - bottomLineIndent ) );
 				}
 			}
 		} finally {

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSpinnerUI.java
Patch:
@@ -167,8 +167,9 @@ protected Component createPreviousButton() {
 	}
 
 	private Component createArrowButton( int direction, String name ) {
-		Component button = new FlatArrowButton( direction, buttonArrowColor, buttonDisabledArrowColor, null, null );
+		FlatArrowButton button = new FlatArrowButton( direction, buttonArrowColor, buttonDisabledArrowColor, null, null );
 		button.setName( name );
+		button.setYOffset( (direction == SwingConstants.NORTH) ? 1 : -1 );
 		if( direction == SwingConstants.NORTH )
 			installNextButtonListeners( button );
 		else

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatSeparatorUI.java
Patch:
@@ -59,6 +59,6 @@ public Dimension getPreferredSize( JComponent c ) {
 		if( ((JSeparator) c).getOrientation() == JSeparator.VERTICAL )
 			return new Dimension( scale( WIDTH ), 0 );
 		else
-			return new Dimension( 0, WIDTH );
+			return new Dimension( 0, scale( WIDTH ) );
 	}
 }

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatProgressBarUI.java
Patch:
@@ -93,7 +93,8 @@ public void paint( Graphics g, JComponent c ) {
 
 			g.setColor( progressBar.getForeground() );
 			((Graphics2D)g).fill( horizontal
-				? new RoundRectangle2D.Float( x, y, amountFull, height, arc, arc )
+				? new RoundRectangle2D.Float( c.getComponentOrientation().isLeftToRight() ? x : x + (width - amountFull),
+					y, amountFull, height, arc, arc )
 				: new RoundRectangle2D.Float( x, y + (height - amountFull), width, amountFull, arc, arc ) );
 
 			if( progressBar.isStringPainted() )

File: flatlaf-core/src/test/java/com/formdev/flatlaf/FlatTestFrame.java
Patch:
@@ -248,7 +248,7 @@ private void initComponents() {
 
 				//---- explicitColorsCheckBox ----
 				explicitColorsCheckBox.setText("explicit colors");
-				explicitColorsCheckBox.setMnemonic('E');
+				explicitColorsCheckBox.setMnemonic('X');
 				explicitColorsCheckBox.addActionListener(e -> explicitColorsChanged());
 				buttonBar.add(explicitColorsCheckBox, "cell 1 0");
 

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatButtonUI.java
Patch:
@@ -64,8 +64,8 @@ public void update( Graphics g, JComponent c ) {
 				try {
 					FlatUIUtils.setRenderingHints( g2 );
 
-					float focusWidth = FlatUIUtils.getFocusWidth();
-					float arc = FlatUIUtils.getButtonArc();
+					float focusWidth = FlatUIUtils.getFocusWidth( c );
+					float arc = FlatUIUtils.getButtonArc( c );
 
 					g2.setColor( getBackground( c ) );
 					FlatUIUtils.fillRoundRectangle( g2, 0, 0, c.getWidth(), c.getHeight(), focusWidth, arc );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatPasswordFieldUI.java
Patch:
@@ -63,7 +63,7 @@ protected void paintBackground( Graphics g ) {
 		try {
 			FlatUIUtils.setRenderingHints( g2 );
 
-			float focusWidth = FlatUIUtils.getFocusWidth();
+			float focusWidth = FlatUIUtils.getFocusWidth( c );
 
 			g2.setColor( c.getBackground() );
 			FlatUIUtils.fillRoundRectangle( g2, 0, 0, c.getWidth(), c.getHeight(), focusWidth, 0 );

File: flatlaf-core/src/main/java/com/formdev/flatlaf/ui/FlatTextFieldUI.java
Patch:
@@ -63,7 +63,7 @@ protected void paintBackground( Graphics g ) {
 		try {
 			FlatUIUtils.setRenderingHints( g2 );
 
-			float focusWidth = FlatUIUtils.getFocusWidth();
+			float focusWidth = FlatUIUtils.getFocusWidth( c );
 
 			g2.setColor( c.getBackground() );
 			FlatUIUtils.fillRoundRectangle( g2, 0, 0, c.getWidth(), c.getHeight(), focusWidth, 0 );

