File: integrations/oci/authentication/resource/src/main/java/io/helidon/integrations/oci/authentication/resource/ResourcePrincipalBuilderProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2024 Oracle and/or its affiliates.
+ * Copyright (c) 2024, 2025 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,6 +50,8 @@ public ResourcePrincipalAuthenticationDetailsProviderBuilder get() {
         config.imdsBaseUri()
                 .map(URI::toString)
                 .ifPresent(builder::metadataBaseUrl);
+        config.tenantId()
+                .ifPresent(builder::tenancyId);
 
         return builder;
     }

File: microprofile/weld/weld-core-impl/src/main/java/org/jboss/weld/bean/proxy/ProxyFactory.java
Patch:
@@ -98,7 +98,7 @@
  *
  * Helidon changes are under the copyright of:
  *
- * Copyright (c) 2020. 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2025 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -237,7 +237,7 @@ static String getProxyName(String contextId, Class<?> proxiedBeanType, Set<? ext
         if (typeInfo.getSuperClass() == Object.class) {
             // for classes that do not have an enclosing class, we want the super interface to be first
             if (proxiedBeanType.getEnclosingClass() == null) {
-                if (typeInfo.getSuperInterface() == null) {
+                if (typeInfo.getSuperInterface() == null || bean == null) {
                     // abstract decorators fall into this category, let's use the type name
                     return proxiedBeanType.getName() + PROXY_SUFFIX;
                 }

File: common/concurrency/limits/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2024 Oracle and/or its affiliates.
+ * Copyright (c) 2024, 2025 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,6 +25,7 @@
     requires io.helidon.builder.api;
     requires io.helidon.common;
     requires io.helidon.common.config;
+    requires io.helidon.metrics.api;
 
     exports io.helidon.common.concurrency.limits;
     exports io.helidon.common.concurrency.limits.spi;

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerListener.java
Patch:
@@ -130,6 +130,7 @@ class ServerListener implements ListenerContext {
                     .permits(listenerConfig.maxConcurrentRequests())
                     .build();
         }
+        this.requestLimit.init(socketName);
 
         this.connectionProviders = ConnectionProviders.create(selectors);
         this.socketName = socketName;

File: microprofile/server/src/main/java/io/helidon/microprofile/server/JaxRsService.java
Patch:
@@ -41,6 +41,7 @@
 import io.helidon.http.HeaderNames;
 import io.helidon.http.HeaderValues;
 import io.helidon.http.InternalServerException;
+import io.helidon.http.ServerResponseHeaders;
 import io.helidon.http.Status;
 import io.helidon.microprofile.server.HelidonHK2InjectionManagerFactory.InjectionManagerWrapper;
 import io.helidon.webserver.KeyPerformanceIndicatorSupport;
@@ -201,6 +202,7 @@ private void handle(ServerRequest req, ServerResponse res) {
     }
 
     private void doHandle(Context ctx, ServerRequest req, ServerResponse res) {
+        ServerResponseHeaders savedResponseHeaders = ServerResponseHeaders.create(res.headers());
         BaseUriRequestUri uris = BaseUriRequestUri.resolve(req);
         ContainerRequest requestContext = new ContainerRequest(uris.baseUri,
                                                                uris.requestUri,
@@ -250,6 +252,7 @@ private void doHandle(Context ctx, ServerRequest req, ServerResponse res) {
                 if (res instanceof RoutingResponse routing) {
                     if (routing.reset()) {
                         res.status(Status.OK_200);
+                        savedResponseHeaders.forEach(res::header);
                         routing.next();
                     }
                 }

File: metrics/api/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2025 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,4 +46,6 @@
     uses io.helidon.metrics.spi.MetersProvider;
 
     uses io.helidon.metrics.spi.MeterRegistryLifeCycleListener;
+
+    provides io.helidon.metrics.spi.MetricsProgrammaticConfig with io.helidon.metrics.api.SeMetricsProgrammaticConfig;
 }

File: tests/integration/packaging/mp-1/src/main/java/io/helidon/tests/integration/packaging/mp1/Mp1Main.java
Patch:
@@ -218,7 +218,7 @@ private static void testBean(int port, String jwtToken) {
         });
 
         invoke(collector, "Application metric registry", "Timers.size(): 1", aBean::appRegistry);
-        invoke(collector, "Base metric registry", "Timers.size(): 1", aBean::baseRegistry);
+        invoke(collector, "Base metric registry", "Timers.size(): 0", aBean::baseRegistry);
 
         // JWT-Auth
         validateJwtProtectedResource(collector, target, jwtToken);

File: common/media-type/src/main/java/io/helidon/common/media/type/MediaTypeEnum.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2025 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,6 +26,7 @@ enum MediaTypeEnum implements MediaType {
     APPLICATION_XHTML_XML("application", "xhtml+xml"),
     APPLICATION_SVG_XML("application", "svg+xml"),
     APPLICATION_JSON("application", "json"),
+    APPLICATION_JSON_PATCH_JSON("application", "json-patch+json"),
     APPLICATION_STREAM_JSON("application", "stream+json"),
     APPLICATION_FORM_URLENCODED("application", "x-www-form-urlencoded"),
     MULTIPART_FORM_DATA("multipart", "form-data"),

File: lra/coordinator/server/src/main/java/io/helidon/lra/coordinator/CoordinatorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2024 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2025 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -165,15 +165,15 @@ LazyValue<URI> coordinatorURL() {
 
     private void init() {
         lraPersistentRegistry.load(this);
-        recoveryTask = Scheduling.fixedRateBuilder()
+        recoveryTask = Scheduling.fixedRate()
                 .delay(config.get("recovery-interval").asLong().orElse(200L))
                 .initialDelay(200)
                 .timeUnit(TimeUnit.MILLISECONDS)
                 .task(this::tick)
                 .build();
 
         if (config.get("periodical-persist").asBoolean().orElse(false)) {
-            persistTask = Scheduling.fixedRateBuilder()
+            persistTask = Scheduling.fixedRate()
                     .delay(config.get("persist-interval").asLong().orElse(5000L))
                     .initialDelay(200)
                     .timeUnit(TimeUnit.MILLISECONDS)

File: metrics/api/src/main/java/io/helidon/metrics/api/Counter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2025 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package io.helidon.metrics.api;
 
 /**
- * Records a monotonically increasing value.
+ * Records a monotonically increasing value that is updated by invoking methods on the {@code Counter} instance.
  */
 public interface Counter extends Meter {
 

File: metrics/api/src/main/java/io/helidon/metrics/api/Gauge.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2025 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 import java.util.function.ToDoubleFunction;
 
 /**
- * Measures a value that can increase or decrease and is updated by external logic, not by explicit invocations
+ * Exposes as a meter a value that can increase or decrease and is updated by external logic, not by explicit invocations
  * of methods on this type.
  *
  * @param <N> subtype of {@link Number} which a specific gauge reports

File: microprofile/telemetry/src/main/java/io/helidon/microprofile/telemetry/HelidonTelemetryContainerFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2025 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -106,9 +106,9 @@ class HelidonTelemetryContainerFilter implements ContainerRequestFilter, Contain
             LOGGER.log(System.Logger.Level.WARNING,
                        String.format("""
                                Current OpenTelemetry semantic conventions include the HTTP method as part of REST span
-                               names. Your configuration does not set mp.%s to true, so your service uses the legacy span name
+                               names. Your configuration does not set %s to true, so your service uses the legacy span name
                                format which excludes the HTTP method. This feature is deprecated and marked for removal in a
-                               future major release of Helidon. Consider adding a setting of mp.%1$s to 'true' in your
+                               future major release of Helidon. Consider adding a setting of %1$s to 'true' in your
                                configuration to migrate to the current conventions.""",
                                SPAN_NAME_INCLUDES_METHOD));
         }

File: microprofile/testing/junit5/src/main/java/module-info.java
Patch:
@@ -24,14 +24,14 @@
     requires io.helidon.microprofile.cdi;
     requires jakarta.inject;
     requires org.junit.jupiter.api;
-    requires jdk.jfr;
 
     requires transitive jakarta.cdi;
     requires transitive jakarta.ws.rs;
 
     requires static io.helidon.microprofile.server;
     requires static jersey.cdi1x;
     requires static jersey.weld2.se;
+    requires io.helidon.common.testing.vitualthreads;
 
     exports io.helidon.microprofile.testing.junit5;
 

File: webserver/testing/junit5/junit5/src/main/java/module-info.java
Patch:
@@ -24,7 +24,7 @@
 module io.helidon.webserver.testing.junit5 {
 
     requires io.helidon.logging.common;
-    requires jdk.jfr;
+    requires io.helidon.common.testing.vitualthreads;
 
     requires transitive hamcrest.all;
     requires transitive io.helidon.common.testing.http.junit5;

File: tracing/providers/opentelemetry/src/main/java/io/helidon/tracing/providers/opentelemetry/OpenTelemetryTracerProvider.java
Patch:
@@ -129,6 +129,7 @@ public Tracer global() {
     public void global(Tracer tracer) {
         if (tracer instanceof OpenTelemetryTracer ott) {
             globalTracer(ott);
+            return;
         }
         throw new IllegalArgumentException("Tracer must be an instance of Helidon OpenTelemetry tracer. "
                                                    + "Please use HelidonOpenTelemetry to create such instance");

File: docs/src/main/java/io/helidon/docs/mp/restclient/RestclientMetricsSnippets.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.docs.mp;
+package io.helidon.docs.mp.restclient;
 
 import java.net.URI;
 
@@ -33,7 +33,7 @@
 import org.eclipse.microprofile.metrics.annotation.Timed;
 import org.eclipse.microprofile.rest.client.RestClientBuilder;
 
-import static io.helidon.docs.mp.RestclientMetricsSnippets.Snippet1.GreetRestClient;
+import static io.helidon.docs.mp.restclient.RestclientMetricsSnippets.Snippet1.GreetRestClient;
 
 @SuppressWarnings("ALL")
 class RestclientMetricsSnippets {

File: docs/src/main/java/io/helidon/docs/mp/restclient/RestclientSnippets.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.docs.mp;
+package io.helidon.docs.mp.restclient;
 
 import java.io.IOException;
 import java.net.URI;

File: webclient/http2/src/main/java/io/helidon/webclient/http2/Http2ClientProtocolConfigBlueprint.java
Patch:
@@ -89,12 +89,12 @@ default String type() {
     int initialWindowSize();
 
     /**
-     * Timeout for blocking between windows size check iterations.
+     * Timeout for blocking while waiting for window update when window is depleted.
      *
      * @return timeout
      */
     @Option.Configured
-    @Option.Default("PT0.1S")
+    @Option.Default("PT15S")
     Duration flowControlBlockTimeout();
 
     /**

File: webserver/static-content/src/main/java/io/helidon/webserver/staticcontent/CachedHandlerInMemory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -78,7 +78,7 @@ private void send(ServerRequest request, ServerResponse response) {
                                                                    contentLength);
             if (ranges.size() == 1) {
                 // single response
-                ByteRangeRequest range = ranges.get(0);
+                ByteRangeRequest range = ranges.getFirst();
 
                 if (range.offset() > contentLength()) {
                     throw new HttpException("Invalid range offset", Status.REQUESTED_RANGE_NOT_SATISFIABLE_416, true);

File: webserver/static-content/src/test/java/io/helidon/webserver/staticcontent/CachedHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,6 +49,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@SuppressWarnings("removal")
 class CachedHandlerTest {
     private static final MediaType MEDIA_TYPE_ICON = MediaTypes.create("image/x-icon");
     private static final Header ICON_TYPE = HeaderValues.create(HeaderNames.CONTENT_TYPE, MEDIA_TYPE_ICON.text());

File: integrations/cdi/datasource-ucp/src/test/java/io/helidon/integrations/datasource/ucp/cdi/TestDataSourceAcquisition.java
Patch:
@@ -104,7 +104,6 @@ private void onStartup(@Observes @Initialized(ApplicationScoped.class) final Obj
     }
 
     private void configure(@Observes @Named("test") final PoolDataSource pds) throws SQLException {
-        assertThat(pds.getServiceName(), is("fred"));
         assertThat(pds.getDescription(), nullValue());
         assertThat(pds.getClass().isSynthetic(), is(false));
         pds.setDescription("A test datasource");

File: service/inject/api/src/main/java/io/helidon/service/inject/api/LookupBlueprint.java
Patch:
@@ -169,7 +169,8 @@ default boolean matches(InjectServiceInfo serviceInfo) {
         boolean matches = matches(serviceInfo.serviceType(), this.serviceType());
         if (matches && this.serviceType().isEmpty()) {
             matches = serviceInfo.contracts().containsAll(this.contracts())
-                    || this.contracts().contains(ResolvedType.create(serviceInfo.serviceType()));
+                    || this.contracts().contains(ResolvedType.create(serviceInfo.serviceType()))
+                    || serviceInfo.factoryContracts().containsAll(this.contracts());
         }
         return matches
                 && matchesProviderTypes(factoryTypes(), serviceInfo.factoryType())

File: service/tests/inject/inject/src/test/java/io/helidon/service/tests/inject/ParameterizedTypesTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
 
 public class ParameterizedTypesTest {
     private static InjectRegistryManager registryManager;
@@ -59,6 +60,8 @@ void testColorReceiver() {
         var receiver = registry.get(ParameterizedTypes.ColorReceiver.class);
 
         assertThat(receiver.getString(), is("blue-green"));
+        assertThat("Circle<Color> and Circle<?> should receive same values", receiver.allCirclesValid(), is(true));
+        assertThat(receiver.types(), hasSize(2));
     }
 
     @Test

File: webserver/webserver/src/main/java/io/helidon/webserver/http1/Http1ServerResponse.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.BufferedOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.io.UncheckedIOException;
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Objects;
@@ -843,7 +844,7 @@ public void close() {
             closingDelegate.closing();     // inform of imminent call to close for last flush
             try {
                 delegate.close();
-            } catch (IOException e) {
+            } catch (IOException | UncheckedIOException e) {
                 throw new ServerConnectionException("Failed to close server output stream", e);
             }
         }
@@ -856,7 +857,7 @@ void commit() {
             try {
                 flush();
                 closingDelegate.commit();
-            } catch (IOException e) {
+            } catch (IOException | UncheckedIOException e) {
                 throw new ServerConnectionException("Failed to flush server output stream", e);
             }
         }

File: builder/codegen/src/main/java/io/helidon/builder/codegen/GenerateBuilder.java
Patch:
@@ -40,20 +40,21 @@ static void generate(ClassModel.Builder classBuilder,
                          TypeName prototype,
                          TypeName runtimeType,
                          List<TypeArgument> typeArguments,
+                         List<TypeName> typeArgumentNames,
                          boolean isFactory,
                          TypeContext typeContext) {
         classBuilder.addInnerClass(builder -> {
             TypeName builderType = TypeName.builder()
                     .from(TypeName.create(prototype.fqName() + ".Builder"))
-                    .addTypeArguments(typeArguments)
+                    .addTypeArguments(typeArgumentNames)
                     .build();
             typeArguments.forEach(builder::addGenericArgument);
             builder.name("Builder")
                     .accessModifier(AccessModifier.PACKAGE_PRIVATE)
                     .description("Fluent API builder for {@link " + runtimeType.className() + "}.")
                     .superType(TypeName.builder()
                                          .from(TypeName.create(prototype.fqName() + ".BuilderBase"))
-                                         .addTypeArguments(typeArguments)
+                                         .addTypeArguments(typeArgumentNames)
                                          .addTypeArgument(builderType)
                                          .addTypeArgument(prototype)
                                          .build())

File: config/config/src/main/java/module-info.java
Patch:
@@ -51,6 +51,8 @@
             with io.helidon.config.PropertiesConfigParser;
     provides io.helidon.common.config.spi.ConfigProvider
             with io.helidon.config.HelidonConfigProvider;
+    provides io.helidon.config.spi.ConfigMapperProvider
+            with io.helidon.config.EnumMapperProvider;
 
     // needed when running with modules - to make private methods accessible
     opens io.helidon.config to weld.core.impl, io.helidon.microprofile.cdi;

File: integrations/graal/native-image-extension/src/main/java/io/helidon/integrations/graal/nativeimage/extension/HelidonReflectionFeature.java
Patch:
@@ -56,7 +56,7 @@ public class HelidonReflectionFeature implements Feature {
 
     private static final String AT_ENTITY = "jakarta.persistence.Entity";
     private static final String AT_MAPPED_SUPERCLASS = "jakarta.persistence.MappedSuperclass";
-    private static final String REGISTRY_DESCRIPTOR = "io.helidon.service.registry.GeneratedService$Descriptor";
+    private static final String REGISTRY_DESCRIPTOR = "io.helidon.service.registry.ServiceDescriptor";
 
     private final NativeTrace tracer = new NativeTrace();
     private NativeUtil util;

File: service/codegen/src/main/java/io/helidon/service/codegen/DescriptorClassCodeImpl.java
Patch:
@@ -19,10 +19,11 @@
 import java.util.Set;
 
 import io.helidon.codegen.ClassCode;
-import io.helidon.common.types.TypeName;
+import io.helidon.common.types.ResolvedType;
 
 record DescriptorClassCodeImpl(ClassCode classCode,
                                String registryType,
                                double weight,
-                               Set<TypeName> contracts) implements DescriptorClassCode {
+                               Set<ResolvedType> contracts,
+                               Set<ResolvedType> factoryContracts) implements DescriptorClassCode {
 }

File: service/inject/codegen/src/main/java/io/helidon/service/inject/codegen/ParamDefinition.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.service.codegen;
+package io.helidon.service.inject.codegen;
 
 import java.util.List;
 import java.util.Set;

File: openapi/openapi/src/main/java/io/helidon/openapi/OpenApiFeature.java
Patch:
@@ -81,7 +81,7 @@ public final class OpenApiFeature implements Weighted, ServerFeature, RuntimeTyp
             }
             if (defaultContent == null) {
                 defaultContent = "";
-                LOGGER.log(Level.WARNING, "Static OpenAPI file not found, checked: {0}", DEFAULT_FILE_PATHS);
+                LOGGER.log(Level.DEBUG, "Static OpenAPI file not found, checked: {0}", DEFAULT_FILE_PATHS);
             }
         }
         content = defaultContent;

File: microprofile/tests/server/src/test/java/io/helidon/microprofile/tests/server/NoContentWithEntityTest.java
Patch:
@@ -30,6 +30,7 @@
 import jakarta.ws.rs.client.WebTarget;
 import jakarta.ws.rs.core.Response;
 import org.glassfish.jersey.ext.cdi1x.internal.CdiComponentProvider;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -41,6 +42,7 @@
 @AddExtension(ServerCdiExtension.class)
 @AddExtension(JaxRsCdiExtension.class)
 @AddExtension(CdiComponentProvider.class)
+@Disabled
 class NoContentWithEntityTest {
     @Inject
     WebTarget target;
@@ -67,7 +69,7 @@ public static class TestResource {
         @Path("/noContent")
         public Response noContent() {
             return Response.noContent()
-                    .entity("hello")
+                    .entity("hello")        // should be rejected by Jersey
                     .build();
         }
 

File: codegen/apt/src/main/java/io/helidon/codegen/apt/AptContextImpl.java
Patch:
@@ -145,7 +145,7 @@ private static Optional<ModuleInfo> findModule(Filer filer) {
             try (InputStream in = resource.openInputStream()) {
                 return Optional.of(ModuleInfoSourceParser.parse(in));
             }
-        } catch (IOException ignored) {
+        } catch (Exception ignored) {
             // it is not in sources, let's see if it got generated
         }
         // generated

File: common/buffers/src/main/java/io/helidon/common/buffers/DataReader.java
Patch:
@@ -445,6 +445,9 @@ public int findNewLine(int max) throws IncorrectNewLineException {
                     }
                     indexWithinNode = crIndex + 1;
                     idx += indexWithinNode;
+                    if (idx >= max) {
+                        return max;
+                    }
                     continue;
                 }
             }

File: logging/jul/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,12 +20,13 @@
 module io.helidon.logging.jul {
 
     requires io.helidon.common;
+    requires io.helidon.metadata.hson;
     requires java.logging;
 
     requires transitive io.helidon.common.context;
     requires transitive io.helidon.logging.common;
 
-    exports  io.helidon.logging.jul;
+    exports io.helidon.logging.jul;
 
     provides io.helidon.common.context.spi.DataPropagationProvider with io.helidon.logging.jul.JulMdcPropagator;
     provides io.helidon.logging.common.spi.MdcProvider with io.helidon.logging.jul.JulMdcProvider;

File: builder/codegen/src/main/java/io/helidon/builder/codegen/BuilderCodegen.java
Patch:
@@ -255,7 +255,7 @@ private void process(RoundContext roundContext, TypeInfo blueprint) {
         roundContext.addGeneratedType(prototype,
                                       classModel,
                                       blueprint.typeName(),
-                                      blueprint.originatingElement().orElse(blueprint.typeName()));
+                                      blueprint.originatingElementValue());
 
         if (typeContext.typeInfo().supportsServiceRegistry() && typeContext.propertyData().hasProvider()) {
             for (PrototypeProperty property : typeContext.propertyData().properties()) {

File: common/features/features/src/main/java/io/helidon/common/features/FeatureCatalog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -52,7 +52,8 @@ static List<FeatureDescriptor> features(ClassLoader classLoader) {
                 }
                 String module = props.getProperty("m");
                 if (module == null) {
-                    LOGGER.log(Level.WARNING, "Got module descriptor with no module name. Available properties: " + props);
+                    LOGGER.log(Level.WARNING, "Got module descriptor with no module name. Available properties: " + props
+                            + " at " + url);
                     continue;
                 }
                 FeatureDescriptor.Builder builder = FeatureDescriptor.builder();

File: common/types/src/main/java/io/helidon/common/types/Annotated.java
Patch:
@@ -43,6 +43,8 @@ public interface Annotated {
      * <p>
      * The returned list does not contain {@link #annotations()}. If a meta-annotation is present on multiple
      * annotations, it will be returned once for each such declaration.
+     * <p>
+     * This method does not return annotations on super types or interfaces!
      *
      * @return list of all meta annotations of this element
      */

File: config/metadata/codegen/src/main/java/io/helidon/config/metadata/codegen/TypeHandlerBuilderApi.java
Patch:
@@ -157,14 +157,14 @@ private OptionType typeForBlueprintFromSignature(TypedElementInfo element,
         if (!ElementInfoPredicates.hasNoArgs(element)) {
             throw new CodegenException("Method " + element + " is annotated with @Configured, "
                                                + "yet it has a parameter. Interface methods must not have parameters.",
-                                       element.originatingElement().orElse(element.elementName()));
+                                       element.originatingElementValue());
         }
 
         TypeName returnType = element.typeName();
         if (ElementInfoPredicates.isVoid(element)) {
             throw new CodegenException("Method " + element + " is annotated with @Configured, "
                                                + "yet it is void. Interface methods must return the property type.",
-                                       element.originatingElement().orElse(element.elementName()));
+                                       element.originatingElementValue());
         }
 
         if (returnType.isOptional()) {

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/WsRouting.java
Patch:
@@ -52,7 +52,7 @@ public static Builder builder() {
     }
 
     /**
-     * Emtpy WebSocket routing.
+     * Empty WebSocket routing.
      *
      * @return empty routing
      */

File: lra/coordinator/server/src/main/java/io/helidon/lra/coordinator/CoordinatorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -97,15 +97,15 @@ public class CoordinatorService implements HttpService {
 
     private void init() {
         lraPersistentRegistry.load(this);
-        recoveryTask = Scheduling.fixedRateBuilder()
+        recoveryTask = Scheduling.fixedRate()
                 .delay(config.get("recovery-interval").asLong().orElse(200L))
                 .initialDelay(200)
                 .timeUnit(TimeUnit.MILLISECONDS)
                 .task(this::tick)
                 .build();
 
         if (config.get("periodical-persist").asBoolean().orElse(false)) {
-            persistTask = Scheduling.fixedRateBuilder()
+            persistTask = Scheduling.fixedRate()
                     .delay(config.get("persist-interval").asLong().orElse(5000L))
                     .initialDelay(200)
                     .timeUnit(TimeUnit.MILLISECONDS)

File: webserver/webserver/src/main/java/io/helidon/webserver/ListenerConfigBlueprint.java
Patch:
@@ -164,12 +164,12 @@ interface ListenerConfigBlueprint {
 
     /**
      * Initial buffer size in bytes of {@link java.io.BufferedOutputStream} created internally to
-     * write data to a socket connection. Default is {@code 512}.
+     * write data to a socket connection. Default is {@code 4096}.
      *
      * @return initial buffer size used for writing
      */
     @Option.Configured
-    @Option.DefaultInt(512)
+    @Option.DefaultInt(4096)
     int writeBufferSize();
 
     /**

File: webserver/webserver/src/test/java/io/helidon/webserver/ListenerConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ void testListenerConfig() {
         Config config = Config.create();
         var webServerConfig = WebServer.builder().config(config.get("server")).buildPrototype();
         assertThat(webServerConfig.writeQueueLength(), is(0));         // default
-        assertThat(webServerConfig.writeBufferSize(), is(512));        // default
+        assertThat(webServerConfig.writeBufferSize(), is(4096));       // default
         assertThat(webServerConfig.shutdownGracePeriod().toMillis(), is(500L));   // default
         ListenerConfig listenerConfig2 = webServerConfig.sockets().get("other");
         assertThat(listenerConfig2.writeQueueLength(), is(64));

File: codegen/class-model/src/main/java/io/helidon/codegen/classmodel/Annotation.java
Patch:
@@ -97,7 +97,7 @@ void writeComponent(ModelWriter writer, Set<String> declaredTokens, ImportOrgani
             if (parameters.size() == 1) {
                 AnnotationParameter parameter = parameters.get(0);
                 if (parameter.name().equals("value")) {
-                    writer.write(parameter.value());
+                    parameter.writeValue(writer, imports);
                 } else {
                     parameter.writeComponent(writer, declaredTokens, imports, classType);
                 }

File: codegen/class-model/src/main/java/io/helidon/codegen/classmodel/ImportOrganizer.java
Patch:
@@ -59,11 +59,12 @@ String typeName(Type type, boolean includedImport) {
         }
         Type checkedType = type.declaringClass().orElse(type);
         String fullTypeName = checkedType.fqTypeName();
-        String simpleTypeName = checkedType.simpleTypeName();
 
         if (!includedImport) {
             return fullTypeName;
         }
+
+        String simpleTypeName = checkedType.simpleTypeName();
         if (forcedFullImports.contains(fullTypeName)) {
             return type.fqTypeName();
         } else if (noImport.contains(fullTypeName) || imports.contains(fullTypeName)) {

File: codegen/class-model/src/test/java/io/helidon/codegen/classmodel/TypesCodegenTest.java
Patch:
@@ -78,7 +78,7 @@ void testIt() {
                               .putValue("float", 49.0F)
                               .putValue("class", @io.helidon.common.types.TypeName@.create("io.helidon.codegen.classmodel.TypesCodegenTest"))
                               .putValue("type", @io.helidon.common.types.TypeName@.create("io.helidon.codegen.classmodel.TypesCodegenTest"))
-                              .putValue("enum", @java.lang.annotation.ElementType@.FIELD)
+                              .putValue("enum", @io.helidon.common.types.EnumValue@.create(@io.helidon.common.types.TypeName@.create("java.lang.annotation.ElementType"),"FIELD"))
                               .putValue("lstring", @java.util.List@.of("value1","value2"))
                               .putValue("lboolean", @java.util.List@.of(true,false))
                               .putValue("llong", @java.util.List@.of(49L,50L))
@@ -90,7 +90,7 @@ void testIt() {
                               .putValue("lfloat", @java.util.List@.of(49.0F,50.0F))
                               .putValue("lclass", @java.util.List@.of(@io.helidon.common.types.TypeName@.create("io.helidon.codegen.classmodel.TypesCodegenTest"),@io.helidon.common.types.TypeName@.create("io.helidon.codegen.classmodel.TypesCodegenTest")))
                               .putValue("ltype", @java.util.List@.of(@io.helidon.common.types.TypeName@.create("io.helidon.codegen.classmodel.TypesCodegenTest"),@io.helidon.common.types.TypeName@.create("io.helidon.codegen.classmodel.TypesCodegenTest")))
-                              .putValue("lenum", @java.util.List@.of(@java.lang.annotation.ElementType@.FIELD,@java.lang.annotation.ElementType@.MODULE))
+                              .putValue("lenum", @java.util.List@.of(@io.helidon.common.types.EnumValue@.create(@io.helidon.common.types.TypeName@.create("java.lang.annotation.ElementType"),"FIELD"),@io.helidon.common.types.EnumValue@.create(@io.helidon.common.types.TypeName@.create("java.lang.annotation.ElementType"),"MODULE")))
                               .build()"""));
     }
 }

File: webserver/grpc/src/main/java/io/helidon/webserver/grpc/GrpcProtocolHandler.java
Patch:
@@ -80,7 +80,7 @@ class GrpcProtocolHandler<REQ, RES> implements Http2SubProtocolSelector.SubProto
     private final int streamId;
     private final Http2Settings serverSettings;
     private final Http2Settings clientSettings;
-    private final Grpc<REQ, RES> route;
+    private final GrpcRouteHandler<REQ, RES> route;
     private final AtomicInteger numMessages = new AtomicInteger();
     private final LinkedBlockingQueue<REQ> listenerQueue = new LinkedBlockingQueue<>();
     private final StreamFlowControl flowControl;
@@ -99,7 +99,7 @@ class GrpcProtocolHandler<REQ, RES> implements Http2SubProtocolSelector.SubProto
                         Http2Settings clientSettings,
                         StreamFlowControl flowControl,
                         Http2StreamState currentStreamState,
-                        Grpc<REQ, RES> route) {
+                        GrpcRouteHandler<REQ, RES> route) {
         this.prologue = prologue;
         this.headers = headers;
         this.streamWriter = streamWriter;

File: webserver/grpc/src/main/java/io/helidon/webserver/grpc/GrpcProtocolSelector.java
Patch:
@@ -71,7 +71,7 @@ public SubProtocolResult subProtocol(ConnectionContext ctx,
             if (contentType.startsWith("application/grpc")) {
                 GrpcRouting routing = router.routing(GrpcRouting.class, GrpcRouting.empty());
 
-                Grpc<?, ?> route = routing.findRoute(prologue);
+                GrpcRouteHandler<?, ?> route = routing.findRoute(prologue);
 
                 if (route == null) {
                     return new SubProtocolResult(true,

File: codegen/class-model/src/main/java/io/helidon/codegen/classmodel/ContentSupport.java
Patch:
@@ -84,7 +84,7 @@ static void addCreateElement(ContentBuilder<?> contentBuilder, TypedElementInfo
 
         Set<Modifier> modifiers = element.elementModifiers();
         for (Modifier modifier : modifiers) {
-            contentBuilder.addContent(".addModifier(")
+            contentBuilder.addContent(".addElementModifier(")
                     .addContent(MODIFIER)
                     .addContent(".")
                     .addContent(modifier.name())

File: codegen/codegen/src/main/java/io/helidon/codegen/RoundContext.java
Patch:
@@ -44,7 +44,8 @@ public interface RoundContext {
     Collection<TypeInfo> types();
 
     /**
-     * All types annotated with a specific annotation.
+     * All types annotated with a specific annotation (including types that inherit such annotation from super types or
+     * through interfaces).
      *
      * @param annotationType annotation to check
      * @return types that contain the annotation

File: common/types/src/main/java/io/helidon/common/types/Annotation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -163,7 +163,7 @@ protected BuilderBase() {
         }
 
         /**
-         * Update this builder from an existing prototype instance.
+         * Update this builder from an existing prototype instance. This method disables automatic service discovery.
          *
          * @param prototype existing prototype to update this builder from
          * @return updated builder instance

File: dbclient/mongodb/src/main/java/io/helidon/dbclient/mongodb/MongoDbStatementDml.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -63,6 +63,7 @@ public long execute() {
                             "Statement operation not yet supported: %s",
                             type.name()));
                 };
+                future.complete(result);
                 LOGGER.log(System.Logger.Level.DEBUG, () -> String.format(
                         "%s DML %s execution succeeded",
                         type.name(),

File: common/configurable/src/main/java/io/helidon/common/configurable/AllowListConfigBlueprint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -87,7 +87,7 @@ interface AllowListConfigBlueprint extends Prototype.Factory<AllowList> {
     /**
      * Exact strings to deny.
      *
-     * @return exact strings to allow
+     * @return exact strings to deny
      */
     @Option.Configured("deny.exact")
     @Option.Singular

File: common/tls/src/main/java/io/helidon/common/tls/TlsConfigBlueprint.java
Patch:
@@ -240,7 +240,7 @@ static List<X509Certificate> createTrust(Keys config) {
     /**
      * Enabled cipher suites for TLS communication.
      *
-     * @return cipher suits to enable, by default (or if list is empty), all available cipher suites
+     * @return cipher suites to enable, by default (or if list is empty), all available cipher suites
      *         are enabled
      */
     @Option.Configured("cipher-suite")

File: config/metadata/docs/src/main/java/io/helidon/config/metadata/docs/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,6 @@
  */
 
 /**
- * Annotation processor generating JSON metadata for configuration.
+ * Generates config documentation ({@code .adoc} files) from the config metadata JSON files.
  */
-package io.helidon.config.metadata.processor;
+package io.helidon.config.metadata.docs;

File: config/metadata/metadata/src/main/java/io/helidon/config/metadata/Configured.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/metadata/src/main/java/io/helidon/config/metadata/ConfiguredOption.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/metadata/src/main/java/io/helidon/config/metadata/ConfiguredOptions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/metadata/src/main/java/io/helidon/config/metadata/ConfiguredValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/metadata/src/main/java/io/helidon/config/metadata/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/metadata/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/processor/src/main/java/io/helidon/config/metadata/processor/BlueprintUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/processor/src/main/java/io/helidon/config/metadata/processor/ConfiguredAnnotation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/processor/src/main/java/io/helidon/config/metadata/processor/ConfiguredOptionData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/processor/src/main/java/io/helidon/config/metadata/processor/TypeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerMetaApi.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerMetaApiBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerMetaApiBlueprint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/processor/src/main/java/io/helidon/config/metadata/processor/UsedTypes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,6 @@ final class UsedTypes {
     /*
     Using builder API
      */
-    static final TypeName BUILDER = TypeName.create("io.helidon.common.Builder");
     static final TypeName COMMON_CONFIG = TypeName.create("io.helidon.common.config.Config");
     static final TypeName CONFIG = TypeName.create("io.helidon.config.Config");
     static final TypeName PROTOTYPE_FACTORY = TypeName.create("io.helidon.builder.api.Prototype.Factory");

File: config/metadata/processor/src/test/java/io/helidon/config/metadata/processor/ConfigMetadataHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: dbclient/hikari/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,8 @@
     requires transitive io.helidon.dbclient;
     requires transitive io.helidon.dbclient.jdbc;
     requires transitive io.helidon.builder.api;
-    requires transitive io.helidon.config.metadata;
+
+    requires static io.helidon.config.metadata;
 
     exports io.helidon.dbclient.hikari;
     exports io.helidon.dbclient.hikari.spi;

File: dbclient/jdbc/src/main/java/module-info.java
Patch:
@@ -34,9 +34,10 @@
 
     requires transitive io.helidon.builder.api;
     requires transitive io.helidon.common;
-    requires transitive io.helidon.config.metadata;
     requires transitive io.helidon.dbclient;
 
+    requires static io.helidon.config.metadata;
+
     exports io.helidon.dbclient.jdbc;
     exports io.helidon.dbclient.jdbc.spi;
 

File: microprofile/jwt-auth/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,6 +43,7 @@
     requires microprofile.jwt.auth.api;
 
     requires static io.helidon.common.features.api;
+    requires static io.helidon.config.metadata;
 
     requires transitive io.helidon.config;
     requires transitive io.helidon.security.jwt;

File: webserver/service-common/src/main/java/io/helidon/webserver/servicecommon/RestServiceSettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -159,6 +159,7 @@ interface Builder extends io.helidon.common.Builder<Builder, RestServiceSettings
          *
          * @return new {@code RestServiceSettings}
          */
+        @Override
         RestServiceSettings build();
     }
 }

File: config/metadata-processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerBase.java
Patch:
@@ -197,7 +197,7 @@ Optional<TypeElement> toEnum(TypeName type) {
     }
 
     List<ConfiguredOptionData.AllowedValue> allowedValuesEnum(ConfiguredOptionData data, TypeElement typeElement) {
-        if (data.allowedValues().isEmpty()) {
+        if (!data.allowedValues().isEmpty()) {
             // this was already processed due to an explicit type defined in the annotation
             // or allowed values explicitly configured in annotation
             return data.allowedValues();

File: metrics/providers/micrometer/src/main/java/io/helidon/metrics/providers/micrometer/MicrometerMetricsFactory.java
Patch:
@@ -248,7 +248,7 @@ public <T> FunctionalCounter.Builder<T> functionalCounterBuilder(String name,
 
     @Override
     public DistributionStatisticsConfig.Builder distributionStatisticsConfigBuilder() {
-        return MDistributionStatisticsConfig.builder();
+        return MDistributionStatisticsConfig.Unconnected.builder();
     }
 
     @Override

File: metrics/providers/micrometer/src/main/java/io/helidon/metrics/providers/micrometer/MicrometerPrometheusFormatter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -106,7 +106,7 @@ public static String normalizeNameToPrometheus(String name) {
     static Set<String> meterNameSuffixes(Meter.Type meterType) {
         return switch (meterType) {
             case COUNTER -> Set.of("_total");
-            case DISTRIBUTION_SUMMARY, LONG_TASK_TIMER, TIMER -> Set.of("_count", "_sum", "_max");
+            case DISTRIBUTION_SUMMARY, LONG_TASK_TIMER, TIMER -> Set.of("_count", "_sum", "_max", "_bucket");
             case GAUGE, OTHER -> Set.of();
         };
     }

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/Async.java
Patch:
@@ -45,7 +45,7 @@ static Async create() {
      * @return a default async instance
      */
     static Async create(AsyncConfig config) {
-        return new AsyncImpl(config, true);
+        return new AsyncImpl(config);
     }
 
     /**

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/AsyncImpl.java
Patch:
@@ -32,7 +32,7 @@ class AsyncImpl implements Async {
     private final CompletableFuture<Async> onStart;
     private final AsyncConfig config;
 
-    AsyncImpl(AsyncConfig config, boolean internal) {
+    AsyncImpl(AsyncConfig config) {
         this.executor = config.executor().orElseGet(() -> FaultTolerance.executor().get());
         this.onStart = config.onStart().orElseGet(CompletableFuture::new);
         this.config = config;

File: dbclient/dbclient/src/main/java/io/helidon/dbclient/DbClientBuilderBase.java
Patch:
@@ -50,7 +50,6 @@ public abstract class DbClientBuilderBase<T extends DbClientBuilderBase<T>>
      */
     protected DbClientBuilderBase() {
         this.clientServices = new LinkedList<>();
-        this.missingMapParametersAsNull = false;
     }
 
     @Override

File: dbclient/dbclient/src/main/java/io/helidon/dbclient/DbClientContext.java
Patch:
@@ -122,7 +122,6 @@ public abstract static class BuilderBase<B extends BuilderBase<B, T>, T extends
          * Creates an instance of base builder for {@link DbClientContext}.
          */
         protected BuilderBase() {
-            this.missingMapParametersAsNull = false;
         }
 
         /**

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcClient.java
Patch:
@@ -36,6 +36,7 @@ class JdbcClient extends DbClientBase implements DbClient {
      */
     JdbcClient(JdbcClientBuilder builder) {
         super(JdbcClientContext.jdbcBuilder()
+                .missingMapParametersAsNull(builder.missingMapParametersAsNull())
                 .statements(builder.statements())
                 .dbMapperManager(builder.dbMapperManager())
                 .mapperManager(builder.mapperManager())

File: webclient/sse/src/main/java/io/helidon/webclient/sse/SseSourceHandlerProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -71,7 +71,7 @@ public <X extends Source<SseEvent>> void handle(X source, HttpClientResponse res
                         sseBuilder.data(data.toString());
                         source.onEvent(sseBuilder.build());
                         data.setLength(0);
-                        sseBuilder = SseEvent.builder();
+                        sseBuilder = SseEvent.builder().mediaContext(mediaContext);
                         emit = false;
                     }
                     continue;

File: webserver/tests/webserver/src/test/java/io/helidon/webserver/tests/ConfiguredLimitsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -119,7 +119,7 @@ void testInitialLine(int size, boolean success) {
             } else {
                 assertThat("Initial line of size " + size + " should have failed",
                            response.status(),
-                           is(Status.BAD_REQUEST_400));
+                           is(Status.REQUEST_URI_TOO_LONG_414));
             }
         }
     }

File: webserver/webserver/src/main/java/io/helidon/webserver/http1/Http1Prologue.java
Patch:
@@ -24,6 +24,7 @@
 import io.helidon.http.HttpPrologue;
 import io.helidon.http.Method;
 import io.helidon.http.RequestException;
+import io.helidon.http.Status;
 import io.helidon.webserver.CloseConnectionException;
 import io.helidon.webserver.http.DirectTransportRequest;
 
@@ -160,8 +161,9 @@ private HttpPrologue doRead() {
         if (eol == maxLength) {
             // exceeded maximal length, we do not want to parse it anyway
             throw RequestException.builder()
-                    .message("Prologue size exceeded")
+                    .message("Request URI too long.")
                     .type(DirectHandler.EventType.BAD_REQUEST)
+                    .status(Status.REQUEST_URI_TOO_LONG_414)
                     .build();
         }
 

File: webserver/webserver/src/main/java/io/helidon/webserver/http/ErrorHandlers.java
Patch:
@@ -67,6 +67,7 @@ public String toString() {
      * @param response HTTP server response
      * @param task     task to execute
      */
+    @SuppressWarnings({"unchecked", "rawtypes"})
     public void runWithErrorHandling(ConnectionContext ctx,
                                      RoutingRequest request,
                                      RoutingResponse response,
@@ -116,7 +117,7 @@ public void runWithErrorHandling(ConnectionContext ctx,
             }
         } catch (RuntimeException e) {
             handleError(ctx, request, response, e);
-        } catch (Exception e) {
+        } catch (Throwable e) {
             if (e.getCause() instanceof SocketException se) {
                 throw new UncheckedIOException(se);
             }
@@ -176,6 +177,7 @@ private void handleRequestException(ConnectionContext ctx,
         response.commit();
     }
 
+    @SuppressWarnings("unchecked")
     private void handleError(ConnectionContext ctx, RoutingRequest request, RoutingResponse response, Throwable e) {
         errorHandler(e.getClass())
                 .ifPresentOrElse(it -> handleError(ctx, request, response, e, (ErrorHandler<Throwable>) it),

File: webserver/webserver/src/main/java/io/helidon/webserver/http1/Http1ConfigBlueprint.java
Patch:
@@ -45,7 +45,7 @@ interface Http1ConfigBlueprint extends ProtocolConfig {
      * @return maximal size in bytes
      */
     @Option.Configured
-    @Option.DefaultInt(2048)
+    @Option.DefaultInt(4096)
     int maxPrologueLength();
 
     /**

File: common/uri/src/main/java/io/helidon/common/uri/UriQueryImpl.java
Patch:
@@ -31,7 +31,7 @@
 import io.helidon.common.mapper.OptionalValue;
 import io.helidon.common.mapper.Value;
 
-import static io.helidon.common.uri.UriEncoding.decodeUri;
+import static io.helidon.common.uri.UriEncoding.decodeQuery;
 
 // must be lazily populated to prevent perf overhead when queries are ignored
 final class UriQueryImpl implements UriQuery {
@@ -215,11 +215,11 @@ private void ensureDecoded() {
     private void addDecoded(Map<String, List<String>> newQueryParams, String next) {
         int eq = next.indexOf('=');
         if (eq == -1) {
-            newQueryParams.putIfAbsent(decodeUri(next), new LinkedList<>());
+            newQueryParams.putIfAbsent(decodeQuery(next), new LinkedList<>());
         } else {
             String name = next.substring(0, eq);
             String value = next.substring(eq + 1);
-            newQueryParams.computeIfAbsent(decodeUri(name), it -> new LinkedList<>()).add(decodeUri(value));
+            newQueryParams.computeIfAbsent(decodeQuery(name), it -> new LinkedList<>()).add(decodeQuery(value));
         }
     }
 

File: webserver/tests/websocket/src/main/java/io/helidon/webserver/tests/websocket/EchoService.java
Patch:
@@ -40,6 +40,9 @@ public void onOpen(WsSession session) {
         if (subProtocol != null && !subProtocol.equals(p)) {
             throw new InternalError("Invalid sub-protocol in session");
         }
+        if (session.socketContext().remotePeer() == null) {
+            throw new InternalError("Unable to access remote peer info");
+        }
     }
 
     @Override

File: webserver/tests/websocket/src/test/java/io/helidon/webserver/tests/websocket/WebSocketClientTest.java
Patch:
@@ -88,6 +88,9 @@ public void onMessage(WsSession session, String text, boolean last) {
 
             @Override
             public void onOpen(WsSession session) {
+                if (session.socketContext().remotePeer() == null) {
+                    throw new InternalError("Unable to access remote peer info");
+                }
                 for (String s : text) {
                     session.send(s, false);
                 }

File: integrations/oci/oci/src/main/java/io/helidon/integrations/oci/OciConfigBlueprint.java
Patch:
@@ -141,6 +141,7 @@ interface OciConfigBlueprint {
      *
      * @return number of retries, each provider has its own defaults
      */
+    @Option.Configured
     Optional<Integer> imdsDetectRetries();
 
     /**

File: integrations/oci/oci/src/main/java/module-info.java
Patch:
@@ -49,6 +49,7 @@
     requires io.helidon.service.registry;
     requires io.helidon.common.config;
     requires io.helidon.config;
+    requires io.helidon.webclient;
 
     requires oci.java.sdk.common;
     requires vavr;

File: integrations/oci/oci/src/main/java/io/helidon/integrations/oci/RegionProviderAuthenticationMethod.java
Patch:
@@ -26,7 +26,7 @@
 import io.helidon.service.registry.Service;
 
 import com.oracle.bmc.Region;
-import com.oracle.bmc.auth.AbstractAuthenticationDetailsProvider;
+import com.oracle.bmc.auth.BasicAuthenticationDetailsProvider;
 import com.oracle.bmc.auth.RegionProvider;
 
 /**
@@ -38,7 +38,7 @@
 class RegionProviderAuthenticationMethod implements OciRegion {
     private final LazyValue<Optional<Region>> region;
 
-    RegionProviderAuthenticationMethod(Supplier<Optional<AbstractAuthenticationDetailsProvider>> atnProvider) {
+    RegionProviderAuthenticationMethod(Supplier<Optional<BasicAuthenticationDetailsProvider>> atnProvider) {
 
         this.region = LazyValue.create(() -> {
             var provider = atnProvider.get();

File: integrations/oci/oci/src/main/java/io/helidon/integrations/oci/spi/OciAuthenticationMethod.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.helidon.service.registry.Service;
 
-import com.oracle.bmc.auth.AbstractAuthenticationDetailsProvider;
+import com.oracle.bmc.auth.BasicAuthenticationDetailsProvider;
 
 /**
  * An OCI Authentication Details Provider service contract.
@@ -45,10 +45,10 @@ public interface OciAuthenticationMethod {
     String method();
 
     /**
-     * Provide an instance of the {@link com.oracle.bmc.auth.AbstractAuthenticationDetailsProvider} to be used
+     * Provide an instance of the {@link com.oracle.bmc.auth.BasicAuthenticationDetailsProvider} to be used
      * by other services.
      *
      * @return authentication details provider, or empty if nothing can be provided
      */
-    Optional<AbstractAuthenticationDetailsProvider> provider();
+    Optional<BasicAuthenticationDetailsProvider> provider();
 }

File: integrations/oci/oci/src/main/java/module-info.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * OCI integration module using Helidon Service Registry.
  * This core module provides services for {@link com.oracle.bmc.Region} and
- * {@link com.oracle.bmc.auth.AbstractAuthenticationDetailsProvider}.
+ * {@link com.oracle.bmc.auth.BasicAuthenticationDetailsProvider}.
  * <p>
  * The module does not require {@link io.helidon.common.config.Config} service to be available, as it is considered
  * a prerequisite for possible config sources.

File: metrics/api/src/main/java/io/helidon/metrics/api/MetricsConfigBlueprint.java
Patch:
@@ -195,6 +195,7 @@ static List<Tag> createTags(String pairs) {
      * @return true/false
      */
     @Option.Configured
+    @Option.DefaultBoolean(false)
     boolean restRequestEnabled();
 
     /**

File: builder/codegen/src/main/java/io/helidon/builder/codegen/Types.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.helidon.builder.codegen;
 
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
@@ -31,6 +32,8 @@ final class Types {
     static final TypeName ARRAY_LIST = TypeName.create(ArrayList.class);
     static final TypeName LINKED_HASH_SET = TypeName.create(LinkedHashSet.class);
     static final TypeName CHAR_ARRAY = TypeName.create(char[].class);
+    static final TypeName PATH = TypeName.create(Path.class);
+    static final TypeName URI = TypeName.create(java.net.URI.class);
     static final TypeName SERVICE_REGISTRY = TypeName.create("io.helidon.service.registry.ServiceRegistry");
     static final TypeName GLOBAL_SERVICE_REGISTRY = TypeName.create("io.helidon.service.registry.GlobalServiceRegistry");
     static final TypeName GENERATED_SERVICE = TypeName.create("io.helidon.service.registry.GeneratedService");

File: integrations/oci/oci/src/main/java/io/helidon/integrations/oci/ConfigFileMethodConfigBlueprint.java
Patch:
@@ -23,7 +23,7 @@
 
 @Prototype.Blueprint
 @Prototype.Configured
-interface ConfigFileStrategyConfigBlueprint {
+interface ConfigFileMethodConfigBlueprint {
     /**
      * The OCI configuration profile path.
      *
@@ -38,6 +38,6 @@ interface ConfigFileStrategyConfigBlueprint {
      * @return the optional OCI configuration/auth profile name
      */
     @Option.Configured
-    @Option.Default(AtnStrategyConfigFile.DEFAULT_PROFILE_NAME)
+    @Option.Default(ConfigFileProvider.DEFAULT_PROFILE_NAME)
     String profile();
 }

File: integrations/oci/oci/src/main/java/io/helidon/integrations/oci/ConfigMethodConfigBlueprint.java
Patch:
@@ -23,11 +23,11 @@
 import io.helidon.common.configurable.Resource;
 
 /**
- * Configuration of the {@code config} authentication strategy.
+ * Configuration of the {@code config} authentication method.
  */
 @Prototype.Blueprint
 @Prototype.Configured
-interface ConfigStrategyConfigBlueprint {
+interface ConfigMethodConfigBlueprint {
     /**
      * The OCI region.
      *
@@ -70,7 +70,7 @@ interface ConfigStrategyConfigBlueprint {
      */
     @Option.Configured
     @Option.Confidential
-    char[] passphrase();
+    Optional<char[]> passphrase();
 
     /**
      * The OCI tenant id.

File: integrations/oci/oci/src/main/java/io/helidon/integrations/oci/RegionProviderSdk.java
Patch:
@@ -42,7 +42,7 @@ class RegionProviderSdk implements OciRegion {
      * We want a different way to get the region if available.
      */
     static Region regionFromImds(OciConfig ociConfig) {
-        if (AtnStrategyInstancePrincipal.imdsAvailable(ociConfig)) {
+        if (HelidonOci.imdsAvailable(ociConfig)) {
             Optional<URI> uri = ociConfig.imdsBaseUri();
             return uri.map(URI::toString)
                     .map(Region::getRegionFromImds)

File: integrations/oci/oci/src/main/java/io/helidon/integrations/oci/spi/package-info.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Extension points for OCI integration.
  *
- * @see io.helidon.integrations.oci.spi.OciAtnStrategy
+ * @see io.helidon.integrations.oci.spi.OciAuthenticationMethod
  * @see io.helidon.integrations.oci.spi.OciRegion
  */
 package io.helidon.integrations.oci.spi;

File: service/registry/src/main/java/io/helidon/service/registry/Service.java
Patch:
@@ -58,7 +58,8 @@ private Service() {
      *     <li>Direct implementation of interface (or extending an abstract class)</li>
      *     <li>Implementing a {@link java.util.function.Supplier} of the contract; when using supplier, service registry
      *     supports the capability to return {@link java.util.Optional} in case the service cannot provide a value; such
-     *     a service will be ignored and only other implementations (with lower weight) would be used</li>
+     *     a service will be ignored and only other implementations (with lower weight) would be used. Supplier will be
+     *     called each time the dependency is used, or each time a method on registry is called to request an instance</li>
      * </ul>
      */
     @Documented

File: webserver/webserver/src/main/java/io/helidon/webserver/spi/ServerConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: builder/codegen/src/main/java/io/helidon/builder/codegen/Types.java
Patch:
@@ -43,6 +43,7 @@ final class Types {
     static final TypeName PROTOTYPE_ANNOTATED = TypeName.create("io.helidon.builder.api.Prototype.Annotated");
     static final TypeName PROTOTYPE_FACTORY = TypeName.create("io.helidon.builder.api.Prototype.Factory");
     static final TypeName PROTOTYPE_CONFIGURED = TypeName.create("io.helidon.builder.api.Prototype.Configured");
+    static final TypeName PROTOTYPE_PROVIDES = TypeName.create("io.helidon.builder.api.Prototype.Provides");
     static final TypeName PROTOTYPE_BUILDER = TypeName.create("io.helidon.builder.api.Prototype.Builder");
     static final TypeName PROTOTYPE_CONFIGURED_BUILDER = TypeName.create("io.helidon.builder.api.Prototype.ConfiguredBuilder");
     static final TypeName PROTOTYPE_CUSTOM_METHODS = TypeName.create("io.helidon.builder.api.Prototype.CustomMethods");

File: builder/tests/codegen/src/test/java/io/helidon/builder/codegen/TypesTest.java
Patch:
@@ -94,6 +94,7 @@ void testTypes() {
         checkField(toCheck, checked, fields, "PROTOTYPE_ANNOTATED", Prototype.Annotated.class);
         checkField(toCheck, checked, fields, "PROTOTYPE_FACTORY", Prototype.Factory.class);
         checkField(toCheck, checked, fields, "PROTOTYPE_CONFIGURED", Prototype.Configured.class);
+        checkField(toCheck, checked, fields, "PROTOTYPE_PROVIDES", Prototype.Provides.class);
         checkField(toCheck, checked, fields, "PROTOTYPE_BUILDER", Prototype.Builder.class);
         checkField(toCheck, checked, fields, "PROTOTYPE_CONFIGURED_BUILDER", Prototype.ConfiguredBuilder.class);
         checkField(toCheck, checked, fields, "PROTOTYPE_CUSTOM_METHODS", Prototype.CustomMethods.class);

File: webserver/grpc/src/main/java/io/helidon/webserver/grpc/GrpcConfigBlueprint.java
Patch:
@@ -18,10 +18,11 @@
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.webserver.spi.ProtocolConfig;
+import io.helidon.webserver.spi.ProtocolConfigProvider;
 
 @Prototype.Blueprint
-@Prototype.Configured
-@Prototype.Provides(ProtocolConfig.class)
+@Prototype.Configured(root = false, value = GrpcProtocolProvider.CONFIG_NAME)
+@Prototype.Provides(ProtocolConfigProvider.class)
 interface GrpcConfigBlueprint extends ProtocolConfig {
     /**
      * Protocol configuration type.

File: webserver/http2/src/main/java/io/helidon/webserver/http2/Http2ConfigBlueprint.java
Patch:
@@ -22,13 +22,14 @@
 import io.helidon.builder.api.Prototype;
 import io.helidon.http.RequestedUriDiscoveryContext;
 import io.helidon.webserver.spi.ProtocolConfig;
+import io.helidon.webserver.spi.ProtocolConfigProvider;
 
 /**
  * HTTP/2 server configuration.
  */
 @Prototype.Blueprint(decorator = Http2ConfigBlueprint.Http2ConfigDecorator.class)
-@Prototype.Configured
-@Prototype.Provides(ProtocolConfig.class)
+@Prototype.Configured(root = false, value = Http2ConnectionProvider.CONFIG_NAME)
+@Prototype.Provides(ProtocolConfigProvider.class)
 interface Http2ConfigBlueprint extends ProtocolConfig {
     /**
      * The size of the largest frame payload that the sender is willing to receive in bytes.

File: webserver/observe/config/src/main/java/io/helidon/webserver/observe/config/ConfigObserverConfigBlueprint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 import io.helidon.webserver.observe.spi.ObserveProvider;
 
 @Prototype.Blueprint
-@Prototype.Configured
+@Prototype.Configured(root = false, value = "config")
 @Prototype.Provides(ObserveProvider.class)
 interface ConfigObserverConfigBlueprint extends ObserverConfigBase, Prototype.Factory<ConfigObserver> {
     @Option.Configured

File: webserver/observe/info/src/main/java/io/helidon/webserver/observe/info/InfoObserverConfigBlueprint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
  * Info Observer configuration.
  */
 @Prototype.Blueprint
-@Prototype.Configured
+@Prototype.Configured(root = false, value = "info")
 @Prototype.Provides(ObserveProvider.class)
 interface InfoObserverConfigBlueprint extends ObserverConfigBase, Prototype.Factory<InfoObserver> {
     @Option.Configured

File: webserver/observe/log/src/main/java/io/helidon/webserver/observe/log/LogObserverConfigBlueprint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
  * Log Observer configuration.
  */
 @Prototype.Blueprint
-@Prototype.Configured
+@Prototype.Configured(root = false, value = "log")
 @Prototype.Provides(ObserveProvider.class)
 interface LogObserverConfigBlueprint extends ObserverConfigBase, Prototype.Factory<LogObserver> {
     @Option.Configured

File: webserver/observe/tracing/src/main/java/io/helidon/webserver/observe/tracing/TracingObserverConfigBlueprint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
  * @see io.helidon.webserver.observe.tracing.TracingObserver#builder()
  */
 @Prototype.Blueprint(decorator = TracingObserverSupport.TracingObserverDecorator.class)
-@Prototype.Configured
+@Prototype.Configured(root = false, value = "tracing")
 @Prototype.Provides(ObserveProvider.class)
 interface TracingObserverConfigBlueprint extends ObserverConfigBase, Prototype.Factory<TracingObserver> {
     @Option.Default("tracing")
@@ -60,6 +60,7 @@ interface TracingObserverConfigBlueprint extends ObserverConfigBase, Prototype.F
      *
      * By default we disable both the SE-style paths ({@code /observe/health}) and the MP-style paths ({@code /health}).
      */
+
     /**
      * Path specific configuration of tracing.
      *

File: webserver/webserver/src/main/java/io/helidon/webserver/http1/Http1ConfigBlueprint.java
Patch:
@@ -22,13 +22,14 @@
 import io.helidon.builder.api.Prototype;
 import io.helidon.http.RequestedUriDiscoveryContext;
 import io.helidon.webserver.spi.ProtocolConfig;
+import io.helidon.webserver.spi.ProtocolConfigProvider;
 
 /**
  * HTTP/1.1 server configuration.
  */
 @Prototype.Blueprint(decorator = Http1BuilderDecorator.class)
-@Prototype.Configured
-@Prototype.Provides(ProtocolConfig.class)
+@Prototype.Configured(root = false, value = Http1ConnectionProvider.CONFIG_NAME)
+@Prototype.Provides(ProtocolConfigProvider.class)
 interface Http1ConfigBlueprint extends ProtocolConfig {
     /**
      * Name of this configuration, in most cases the same as {@link #type()}.

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/WsConfigBlueprint.java
Patch:
@@ -21,13 +21,14 @@
 import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.webserver.spi.ProtocolConfig;
+import io.helidon.webserver.spi.ProtocolConfigProvider;
 
 /**
  * WebSocket protocol configuration.
  */
 @Prototype.Blueprint
-@Prototype.Configured
-@Prototype.Provides(ProtocolConfig.class)
+@Prototype.Configured(root = false, value = WsUpgradeProvider.CONFIG_NAME)
+@Prototype.Provides(ProtocolConfigProvider.class)
 interface WsConfigBlueprint extends ProtocolConfig {
     /**
      * WebSocket origins.

File: tracing/provider-tests/src/main/java/module-info.java
Patch:
@@ -21,6 +21,7 @@
 
     requires java.logging;
     requires io.helidon.tracing;
+    requires io.helidon.common.context;
     requires io.helidon.common.testing.junit5;
 
     requires org.junit.jupiter.api;

File: tests/functional/request-scope/src/test/java/io/helidon/tests/functional/requestscope/TenantTest.java
Patch:
@@ -26,7 +26,6 @@
 import jakarta.ws.rs.client.WebTarget;
 import jakarta.ws.rs.core.Response;
 import jakarta.ws.rs.core.Response.Status;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -47,7 +46,6 @@ public void test() throws Exception {
     }
 
     @Test
-    @Disabled   // issue #8813
     public void test2() throws Exception {
         asyncCalls(() -> baseTarget.path("test2").request()
                 .header("x-tenant-id", "123").get(), null);

File: webserver/webserver/src/main/java/io/helidon/webserver/http1/Http1Headers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -55,7 +55,7 @@ public Http1Headers(DataReader reader, int maxHeadersSize, boolean validateHeade
     public WritableHeaders<?> readHeaders(HttpPrologue prologue) {
         try {
             return Http1HeadersParser.readHeaders(reader, maxHeadersSize, validateHeaders);
-        } catch (IllegalStateException | IllegalArgumentException e) {
+        } catch (IllegalStateException | IllegalArgumentException | DataReader.IncorrectNewLineException e) {
             throw RequestException.builder()
                     .type(DirectHandler.EventType.BAD_REQUEST)
                     .request(DirectTransportRequest.create(prologue, WritableHeaders.create()))

File: examples/webserver/protocols/src/main/java/io/helidon/examples/webserver/protocols/ProtocolsMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webclient/websocket/src/main/java/io/helidon/webclient/websocket/WsClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@
 @RuntimeType.PrototypedBy(WsClientConfig.class)
 public interface WsClient extends RuntimeType.Api<WsClientConfig> {
     /**
-     * Protocol to use to obtain an instance of WebSocket specific clietn from
+     * Protocol to use to obtain an instance of WebSocket specific client from
      * {@link io.helidon.webclient.api.WebClient#client(io.helidon.webclient.spi.Protocol)}.
      */
     Protocol<WsClient, WsClientProtocolConfig> PROTOCOL = WsProtocolProvider::new;

File: webserver/grpc/src/main/java/io/helidon/webserver/grpc/GrpcProtocolSelector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -65,7 +65,7 @@ public SubProtocolResult subProtocol(ConnectionContext ctx,
         Headers httpHeaders = headers.httpHeaders();
 
         if (httpHeaders.contains(HeaderNames.CONTENT_TYPE)) {
-            String contentType = httpHeaders.get(HeaderNames.CONTENT_TYPE).value();
+            String contentType = httpHeaders.get(HeaderNames.CONTENT_TYPE).get();
 
             if (contentType.startsWith("application/grpc")) {
                 GrpcRouting routing = router.routing(GrpcRouting.class, GrpcRouting.empty());

File: webserver/grpc/src/main/java/io/helidon/webserver/grpc/GrpcService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/grpc/src/main/java/io/helidon/webserver/grpc/GrpcServiceRoute.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: builder/tests/builder/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
     requires io.helidon.common;
     requires io.helidon.common.config;
     requires io.helidon.builder.api;
+    requires io.helidon.service.registry;
 
     exports io.helidon.builder.test.testsubjects;
 

File: common/tls/src/main/java/io/helidon/common/tls/TlsManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 import javax.net.ssl.X509TrustManager;
 
 import io.helidon.common.config.NamedService;
-import io.helidon.inject.api.Contract;
+import io.helidon.service.registry.Service;
 
 /**
  * Implementors of this contract are responsible for managing the {@link javax.net.ssl.SSLContext} instance lifecycle, as well
@@ -32,7 +32,7 @@
  * <p>
  * How context changes are observed is based upon the implementation of the manager.
  */
-@Contract
+@Service.Contract
 public interface TlsManager extends NamedService {
 
     /**

File: common/tls/src/main/java/module-info.java
Patch:
@@ -18,7 +18,8 @@
  * TLS configuration for client and server.
  */
 module io.helidon.common.tls {
-    requires static io.helidon.inject.api;
+    // only annotation, no generated code
+    requires static io.helidon.service.registry;
 
     requires io.helidon.builder.api;
     requires io.helidon.common;

File: config/config/src/main/java/io/helidon/config/Config.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,6 +38,7 @@
 import io.helidon.config.spi.ConfigSource;
 import io.helidon.config.spi.MergingStrategy;
 import io.helidon.config.spi.OverrideSource;
+import io.helidon.service.registry.Service;
 
 /**
  * <h2>Configuration</h2>
@@ -232,14 +233,14 @@
  * throws {@link ConfigMappingException}, unless you use the config beans support,
  * that can handle classes that fulfill some requirements (see documentation), such as a public constructor,
  * static "create(Config)" method etc.
- * <p>
  * <h3><a id="multipleSources">Handling Multiple Configuration
  * Sources</a></h3>
  * A {@code Config} instance, including the default {@code Config} returned by
  * {@link Config#create}, might be associated with multiple {@link ConfigSource}s. The
  * config system merges these together so that values from config sources with higher {@link io.helidon.common.Weight weight}
  * have priority over values from config sources with lower weight.
  */
+@Service.Contract
 public interface Config extends io.helidon.common.config.Config {
     /**
      * Generic type of configuration.

File: config/config/src/main/java/io/helidon/config/spi/ConfigFilter.java
Patch:
@@ -18,6 +18,7 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigItem;
+import io.helidon.service.registry.Service;
 
 /**
  * Filter that can transform elementary configuration ({@code String}) values
@@ -53,6 +54,7 @@
  * @see Config.Builder#addFilter(java.util.function.Function)
  */
 @FunctionalInterface
+@Service.Contract
 public interface ConfigFilter {
 
     /**

File: config/config/src/main/java/io/helidon/config/spi/ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 
 import io.helidon.common.GenericType;
 import io.helidon.config.Config;
+import io.helidon.service.registry.Service;
 
 /**
  * Provides mapping functions that convert a {@code Config}
@@ -43,6 +44,7 @@
  * @see Config.Builder#disableMapperServices()
  */
 @FunctionalInterface
+@Service.Contract
 public interface ConfigMapperProvider {
 
     /**

File: config/config/src/main/java/io/helidon/config/spi/ConfigParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,6 +27,7 @@
 
 import io.helidon.common.media.type.MediaType;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
+import io.helidon.service.registry.Service;
 
 /**
  * Transforms config {@link io.helidon.config.spi.ConfigParser.Content} into a {@link ConfigNode.ObjectNode} that
@@ -49,6 +50,7 @@
  * @see io.helidon.config.spi.ParsableSource
  * @see io.helidon.config.ConfigParsers ConfigParsers - access built-in implementations.
  */
+@Service.Contract
 public interface ConfigParser {
     /**
      * Returns set of supported media types by the parser.

File: config/config/src/main/java/io/helidon/config/spi/ConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.inject.api.Contract;
+import io.helidon.service.registry.Service;
 
 /**
  * {@link Source} of configuration.
@@ -63,7 +63,7 @@
  * @see io.helidon.config.AbstractConfigSource
  * @see ConfigSources ConfigSources - access built-in implementations.
  */
-@Contract
+@Service.Contract
 public interface ConfigSource extends Supplier<ConfigSource>, Source {
     @Override
     default ConfigSource get() {

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/Async.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,13 +21,11 @@
 import java.util.function.Supplier;
 
 import io.helidon.builder.api.RuntimeType;
-import io.helidon.inject.api.Contract;
 
 /**
  * Runs synchronous suppliers asynchronously using virtual threads. Includes
  * convenient static method to avoid creating instances of this class.
  */
-@Contract
 @RuntimeType.PrototypedBy(AsyncConfig.class)
 public interface Async extends RuntimeType.Api<AsyncConfig> {
 

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/Bulkhead.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 import java.util.function.Supplier;
 
 import io.helidon.builder.api.RuntimeType;
-import io.helidon.inject.api.Contract;
 
 /**
  * Bulkhead protects a resource that cannot serve unlimited parallel
@@ -31,7 +30,6 @@
  * additional attempts to invoke will end with a failed response with
  * {@link BulkheadException}.
  */
-@Contract
 @RuntimeType.PrototypedBy(BulkheadConfig.class)
 public interface Bulkhead extends FtHandler, RuntimeType.Api<BulkheadConfig> {
     /**

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/BulkheadConfigBlueprint.java
Patch:
@@ -21,12 +21,10 @@
 
 import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
-import io.helidon.inject.configdriven.api.ConfigBean;
 
 /**
  * {@link Bulkhead} configuration bean.
  */
-@ConfigBean(repeatable = true)
 @Prototype.Configured("fault-tolerance.bulkheads")
 @Prototype.Blueprint(decorator = BulkheadConfigBlueprint.BuilderDecorator.class)
 interface BulkheadConfigBlueprint extends Prototype.Factory<Bulkhead> {

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/CircuitBreaker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 import java.util.function.Consumer;
 
 import io.helidon.builder.api.RuntimeType;
-import io.helidon.inject.api.Contract;
 
 /**
  * CircuitBreaker protects a potentially failing endpoint from overloading and the application
@@ -31,7 +30,6 @@
  * and requests can process as usual again.
  */
 @RuntimeType.PrototypedBy(CircuitBreakerConfig.class)
-@Contract
 public interface CircuitBreaker extends FtHandler, RuntimeType.Api<CircuitBreakerConfig> {
     /**
      * Create a new circuit builder based on its configuration.

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/CircuitBreakerConfigBlueprint.java
Patch:
@@ -23,11 +23,9 @@
 
 import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
-import io.helidon.inject.configdriven.api.ConfigBean;
 
 @Prototype.Blueprint(decorator = CircuitBreakerConfigBlueprint.BuilderDecorator.class)
 @Prototype.Configured("fault-tolerance.circuit-breakers")
-@ConfigBean(wantDefault = true, repeatable = true)
 interface CircuitBreakerConfigBlueprint extends Prototype.Factory<CircuitBreaker> {
     int DEFAULT_ERROR_RATIO = 60;
     int DEFAULT_SUCCESS_THRESHOLD = 1;

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/Retry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,12 +23,10 @@
 import java.util.function.Supplier;
 
 import io.helidon.builder.api.RuntimeType;
-import io.helidon.inject.api.Contract;
 
 /**
  * Retry supports retry policies to be applied on an execution of asynchronous tasks.
  */
-@Contract
 @RuntimeType.PrototypedBy(RetryConfig.class)
 public interface Retry extends FtHandler, RuntimeType.Api<RetryConfig> {
     /**

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/Timeout.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,12 +20,10 @@
 import java.util.function.Consumer;
 
 import io.helidon.builder.api.RuntimeType;
-import io.helidon.inject.api.Contract;
 
 /**
  * Timeout attempts to terminate execution after defined duration of time.
  */
-@Contract
 @RuntimeType.PrototypedBy(TimeoutConfig.class)
 public interface Timeout extends FtHandler, RuntimeType.Api<TimeoutConfig> {
     /**

File: integrations/graal/native-image-extension/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
     requires io.helidon.common.features;
     requires io.helidon.config;
     requires io.helidon.logging.common;
+    requires io.helidon.service.registry;
     requires jakarta.json;
 
     requires transitive org.graalvm.nativeimage;

File: integrations/oci/sdk/runtime/src/main/java/io/helidon/integrations/oci/sdk/runtime/OciAuthenticationDetailsProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -205,7 +205,7 @@ enum AuthStrategy {
          */
         CONFIG_FILE(VAL_CONFIG_FILE,
                     ConfigFileAuthenticationDetailsProvider.class,
-                    (configBean) -> configBean.fileConfigIsPresent()
+                   (configBean) -> configBean.fileConfigIsPresent()
                             && (configBean.configPath().isEmpty() || canReadPath(configBean.configPath().orElse(null))),
                     (configBean) -> {
                         // https://github.com/oracle/oci-java-sdk/blob/master/bmc-common/src/main/java/com/oracle/bmc/auth/ConfigFileAuthenticationDetailsProvider.java

File: integrations/oci/sdk/runtime/src/main/java/io/helidon/integrations/oci/sdk/runtime/OciAvailability.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,10 @@
  * Provides a convenient contract for checking whether the current runtime environment is running on/inside an OCI compute node.
  *
  * @see OciExtension
+ * @deprecated replaced with {@code helidon-integrations-oci} module
  */
 @Contract
+@Deprecated(forRemoval = true, since = "4.1.0")
 public interface OciAvailability {
 
     /**

File: integrations/oci/sdk/runtime/src/main/java/io/helidon/integrations/oci/sdk/runtime/OciConfigBlueprint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -87,6 +87,8 @@
 // note: this is intended to be a replica to the properties carried from the cdi integrations previously done for MP
 @Prototype.Blueprint
 @Configured(root = true, prefix = OciConfigBlueprint.CONFIG_KEY)
+@Deprecated(forRemoval = true, since = "4.1.0")
+@Prototype.Annotated("java.lang.Deprecated(forRemoval = true, since = \"4.1.0\")")
 interface OciConfigBlueprint {
     /**
      * Config key of this config.

File: integrations/oci/secrets-config-source/src/main/java/io/helidon/integrations/oci/secrets/configsource/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: integrations/oci/secrets-config-source/src/test/java/io/helidon/integrations/oci/secrets/configsource/IsModifiedTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: integrations/oci/secrets-config-source/src/test/java/io/helidon/integrations/oci/secrets/configsource/UsageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assumptions.assumeFalse;

File: integrations/oci/secrets-config-source/src/test/java/io/helidon/integrations/oci/secrets/configsource/ValueNodeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: integrations/oci/secrets-mp-config-source/src/main/java/io/helidon/integrations/oci/secrets/mp/configsource/OciSecretsMpMetaConfigProvider.java
Patch:
@@ -49,7 +49,6 @@ public final class OciSecretsMpMetaConfigProvider implements MpMetaConfigProvide
      * @deprecated For use by the Helidon Config subsystem only.
      */
     @Deprecated // For java.util.ServiceLoader use only.
-    @SuppressWarnings("deprecation")
     public OciSecretsMpMetaConfigProvider() {
         super();
         this.p = new OciSecretsConfigSourceProvider();

File: integrations/oci/secrets-mp-config-source/src/main/java/io/helidon/integrations/oci/secrets/mp/configsource/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: integrations/oci/secrets-mp-config-source/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: integrations/oci/secrets-mp-config-source/src/test/java/io/helidon/integrations/oci/secrets/mp/configsource/UsageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assumptions.assumeFalse;

File: integrations/oci/tls-certificates/src/main/java/io/helidon/integrations/oci/tls/certificates/DefaultOciCertificatesTlsManagerProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 /**
  * The service provider for {@link OciCertificatesTlsManager}.
  */
-//@Singleton - this is config driven, not pico driven - need to rectify this
 public class DefaultOciCertificatesTlsManagerProvider implements TlsManagerProvider {
 
     /**

File: integrations/oci/tls-certificates/src/main/java/io/helidon/integrations/oci/tls/certificates/spi/OciCertificatesDownloader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,12 +19,12 @@
 import java.security.cert.X509Certificate;
 import java.util.Objects;
 
-import io.helidon.inject.api.Contract;
+import io.helidon.service.registry.Service;
 
 /**
  * The contract used for downloading certificates from OCI.
  */
-@Contract
+@Service.Contract
 public interface OciCertificatesDownloader {
 
     /**

File: integrations/oci/tls-certificates/src/main/java/io/helidon/integrations/oci/tls/certificates/spi/OciPrivateKeyDownloader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,12 +19,12 @@
 import java.net.URI;
 import java.security.PrivateKey;
 
-import io.helidon.inject.api.Contract;
+import io.helidon.service.registry.Service;
 
 /**
  * The contract used for downloading private keys from OCI.
  */
-@Contract
+@Service.Contract
 public interface OciPrivateKeyDownloader {
 
     /**

File: service/codegen/src/main/java/io/helidon/service/codegen/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,6 @@
  */
 
 /**
- * Examples of Config-Driven Services.
+ * Code generation for Helidon Service Registry.
  */
-package io.helidon.examples.inject.configdriven;
+package io.helidon.service.codegen;

File: service/registry/src/main/java/io/helidon/service/registry/spi/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,6 @@
  */
 
 /**
- * Examples of Intercepted services in Injection.
+ * Service registry SPI provides extension points for the service registry.
  */
-package io.helidon.examples.inject.interceptors;
+package io.helidon.service.registry.spi;

File: webclient/api/src/main/java/io/helidon/webclient/api/WebClientConfigBlueprint.java
Patch:
@@ -20,14 +20,12 @@
 
 import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
-import io.helidon.inject.configdriven.api.ConfigBean;
 import io.helidon.webclient.spi.ProtocolConfig;
 import io.helidon.webclient.spi.ProtocolConfigProvider;
 
 /**
  * WebClient configuration.
  */
-@ConfigBean(repeatable = true, wantDefault = true)
 @Prototype.Blueprint
 @Prototype.Configured("clients")
 interface WebClientConfigBlueprint extends HttpClientConfigBlueprint, Prototype.Factory<WebClient> {

File: webclient/api/src/main/java/module-info.java
Patch:
@@ -31,9 +31,6 @@
 
     requires static io.helidon.common.features.api; // @Feature
     requires static io.helidon.config.metadata; // @ConfiguredOption etc
-    requires static io.helidon.inject.configdriven.api;
-    requires static io.helidon.inject.configdriven.runtime;
-    requires static jakarta.inject; // Injection support
 
     requires transitive io.helidon.common.config;
     requires transitive io.helidon.common.configurable;

File: microprofile/telemetry/src/main/java/module-info.java
Patch:
@@ -36,6 +36,7 @@
     requires io.helidon.config.mp;
     requires io.helidon.config;
     requires io.helidon.microprofile.server;
+    requires io.helidon.tracing;
     requires io.helidon.tracing.providers.opentelemetry;
     requires io.opentelemetry.api;
     requires io.opentelemetry.context;

File: config/config-mp/src/main/java/io/helidon/config/mp/MpEnvironmentVariablesSource.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.regex.Pattern;
 
 import io.helidon.common.configurable.LruCache;
+import io.helidon.config.PropertiesFilter;
 
 import jakarta.annotation.Priority;
 import org.eclipse.microprofile.config.spi.ConfigSource;
@@ -41,7 +42,7 @@ class MpEnvironmentVariablesSource implements ConfigSource {
     }
 
     MpEnvironmentVariablesSource(int cacheSize) {
-        this.env = Map.copyOf(System.getenv());
+        this.env = Map.copyOf(PropertiesFilter.create(System.getProperties()).filter(System.getenv()));
         this.cache = LruCache.<String, Cached>builder().capacity(cacheSize).build();
     }
 

File: config/config/src/main/java/io/helidon/config/EnvironmentVariables.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -101,7 +101,7 @@ public static boolean shouldAlias(final String name) {
      * @return An unmodifiable copy of {@link System#getenv()} including aliases.
      */
     public static Map<String, String> expand() {
-        return expand(System.getenv());
+        return expand(PropertiesFilter.create(System.getProperties()).filter(System.getenv()));
     }
 
     /**

File: config/config-mp/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
     requires io.helidon.common;
     requires io.helidon.config;
     requires jakarta.annotation;
+    requires io.helidon.common.configurable;
 
     requires static io.helidon.config.metadata;
 

File: tracing/providers/opentelemetry/src/main/java/module-info.java
Patch:
@@ -37,4 +37,7 @@
     provides io.helidon.tracing.spi.TracerProvider
             with io.helidon.tracing.providers.opentelemetry.OpenTelemetryTracerProvider;
 
+    provides io.helidon.common.context.spi.DataPropagationProvider
+            with io.helidon.tracing.providers.opentelemetry.OpenTelemetryDataPropagationProvider;
+
 }
\ No newline at end of file

File: webserver/observe/tracing/src/main/java/io/helidon/webserver/observe/tracing/TracingObserver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -216,6 +216,8 @@ Find configuration of the web server span (can customize name, disable etc.)
                     .start();
 
             context.register(span.context());
+            context.register(span);
+            context.register(tracer);
             context.register(TracingConfig.class, span.context());
 
             /*

File: config/config-mp/src/main/java/io/helidon/config/mp/MpEnvironmentVariablesMetaConfigProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,4 +42,5 @@ public List<? extends ConfigSource> create(String type, Config metaConfig, Strin
     public int priority() {
         return 300;
     }
+
 }

File: config/config-mp/src/main/java/io/helidon/config/mp/MpSystemPropertiesMetaConfigProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: integrations/oci/oci-secrets-mp-config-source/src/main/java/io/helidon/integrations/oci/secrets/mp/configsource/OciSecretsMpMetaConfigProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/tests/testing/junit5/src/test/java/io/helidon/microprofile/tests/testing/junit5/TestAddConfigBlockYaml.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.jupiter.api.Test;
 
 @HelidonTest
-@AddConfigBlock(type = "Yaml", value = """
+@AddConfigBlock(type = "yaml", value = """
     another1:
       key: "another1.value"
     another2:

File: microprofile/tests/testing/testng/src/test/java/io/helidon/microprofile/tests/testing/testng/TestAddConfigBlockYaml.java
Patch:
@@ -28,7 +28,7 @@
 import org.testng.annotations.Test;
 
 @HelidonTest
-@AddConfigBlock(type = "Yaml", value = """
+@AddConfigBlock(type = "yaml", value = """
     another1:
       key: "another1.value"
     another2:

File: codegen/class-model/src/main/java/io/helidon/codegen/classmodel/ModelComponent.java
Patch:
@@ -49,8 +49,8 @@ abstract static class Builder<B extends Builder<B, T>, T extends ModelComponent>
         /**
          * Whether to include import type information among the imports.
          *
-         * @param includeImport
-         * @return
+         * @param includeImport whether imports should be included
+         * @return updated builder instance
          */
         public B includeImport(boolean includeImport) {
             this.includeImport = includeImport;

File: common/buffers/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,6 @@
  */
 module io.helidon.common.buffers {
 
-    requires io.helidon.common;
-
     exports io.helidon.common.buffers;
 
 }
\ No newline at end of file

File: common/mapper/src/main/java/io/helidon/common/mapper/Value.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -150,7 +150,6 @@ default <N> N get(GenericType<N> type) throws MapperException, NoSuchElementExce
      * If a value is present, and the value matches the given predicate,
      * return an {@code Optional} describing the value, otherwise return an
      * empty {@code Optional}.
-     * <p>
      *
      * @param predicate a predicate to apply to the value, if present
      * @return an {@code Optional} describing the value of this {@code Optional}

File: common/processor/class-model/src/main/java/io/helidon/common/processor/classmodel/ModelComponent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,8 +49,8 @@ abstract static class Builder<B extends Builder<B, T>, T extends ModelComponent>
         /**
          * Whether to include import type information among the imports.
          *
-         * @param includeImport
-         * @return
+         * @param includeImport whether to include imports
+         * @return updated builder instance
          */
         public B includeImport(boolean includeImport) {
             this.includeImport = includeImport;

File: common/processor/class-model/src/main/java/io/helidon/common/processor/classmodel/package-info.java
Patch:
@@ -16,8 +16,6 @@
 
 /**
  * Class model generator for annotation processors.
- *
- * @deprecated use {@code helidon-codegen-class-model} instead.
  */
 @Deprecated(forRemoval = true, since = "4.1.0")
 package io.helidon.common.processor.classmodel;

File: common/processor/helidon-copyright/src/main/java/io/helidon/common/processor/helidon/copyright/package-info.java
Patch:
@@ -16,8 +16,8 @@
 
 /**
  * Custom copyright provider that generates Helidon copyright headers.
- *
- * @deprecated use {@code helidon-codegen-helidon-copyright} instead.
+ * <p>
+ * Use {@code helidon-codegen-helidon-copyright} instead.
  */
 @Deprecated(forRemoval = true, since = "4.1.0")
 package io.helidon.common.processor.helidon.copyright;

File: common/processor/processor/src/main/java/io/helidon/common/processor/package-info.java
Patch:
@@ -16,8 +16,6 @@
 
 /**
  * Tools for annotation processing.
- *
- * @deprecated use {@code helidon-codegen} instead.
  */
 @Deprecated(forRemoval = true, since = "4.1.0")
 package io.helidon.common.processor;

File: common/processor/processor/src/main/java/io/helidon/common/processor/spi/package-info.java
Patch:
@@ -19,7 +19,6 @@
  *
  * @see io.helidon.common.processor.spi.CopyrightProvider
  * @see io.helidon.common.processor.spi.GeneratedAnnotationProvider
- * @deprecated use {@code helidon-codegen} instead.
  */
 @Deprecated(forRemoval = true, since = "4.1.0")
 package io.helidon.common.processor.spi;

File: common/processor/processor/src/main/java/module-info.java
Patch:
@@ -22,7 +22,6 @@
 @Deprecated(forRemoval = true, since = "4.1.0")
 module io.helidon.common.processor {
 
-    requires io.helidon.common.processor.classmodel;
     requires jdk.compiler;
 
     requires transitive io.helidon.common.types;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromByteChannel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ class MultiFromByteChannel implements Multi<ByteBuffer> {
     private final int chunkCapacity;
     private final LazyValue<ScheduledExecutorService> executor;
 
-    private final SingleSubscriberHolder<ByteBuffer> subscriber = new SingleSubscriberHolder<>();
+    private final SingleSubscriberHolder<ByteBuffer> subscriber = SingleSubscriberHolder.create();
     private final RequestedCounter requested = new RequestedCounter();
     private final AtomicBoolean publishing = new AtomicBoolean(false);
     private final AtomicInteger retryCounter = new AtomicInteger();

File: common/reactive/src/main/java/io/helidon/common/reactive/Single.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,7 +35,6 @@
 import java.util.function.Supplier;
 import java.util.logging.Level;
 
-import io.helidon.common.mapper.Mapper;
 
 /**
  * Represents a {@link Flow.Publisher} that may: signal one item then completes, complete without
@@ -320,7 +319,7 @@ default Single<T> defaultIfEmpty(Supplier<? extends T> supplier) {
     }
 
     /**
-     * Map this {@link Single} instance to a publisher using the given {@link Mapper}.
+     * Map this {@link Single} instance to a publisher using the given mapper.
      *
      * @param <U>    mapped items type
      * @param mapper mapper

File: common/reactive/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 
     requires java.logging;
     requires io.helidon.common;
-    requires io.helidon.common.mapper;
 
     exports io.helidon.common.reactive;
 

File: common/types/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,8 +21,6 @@
 
     requires io.helidon.builder.api;
 
-    requires static io.helidon.config.metadata;
-
     requires transitive io.helidon.common;
 
     exports io.helidon.common.types;

File: microprofile/reactive-streams/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,6 @@
 @SuppressWarnings({ "requires-automatic", "requires-transitive-automatic" })
 module io.helidon.microprofile.reactive {
 
-    requires io.helidon.common.mapper;
     requires io.helidon.common.reactive;
     requires java.logging;
 

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/Tenant.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@
 /**
  * Holder of the tenant configuration resolved at runtime. Used for OIDC lazy loading.
  */
-public final class Tenant {
+public class Tenant {
 
     private final TenantConfig tenantConfig;
     private final URI tokenEndpointUri;

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcFeature.java
Patch:
@@ -590,7 +590,7 @@ private Optional<String> processError(ServerResponse res, Throwable t, String me
     // if they try to provide wrong data
     private void sendErrorResponse(ServerResponse serverResponse) {
         serverResponse.status(Status.UNAUTHORIZED_401);
-        serverResponse.send("Not a valid authorization code2");
+        serverResponse.send("Not a valid authorization code");
     }
 
     String increaseRedirectCounter(String state) {

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -337,7 +337,7 @@ public Builder config(Config config) {
                 // the OutboundConfig.create() expects the provider configuration, not the outbound configuration
                 Config outboundConfig = config.get("outbound");
                 if (outboundConfig.exists()) {
-                    outboundConfig(OutboundConfig.create(outboundConfig));
+                    outboundConfig(OutboundConfig.create(config));
                 }
             }
             config.get("use-jwt-groups").asBoolean().ifPresent(this::useJwtGroups);

File: webserver/observe/metrics/src/main/java/io/helidon/webserver/observe/metrics/MetricsFeature.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -186,6 +186,7 @@ private void getMatching(ServerRequest req,
         if (mediaType == null) {
             res.status(Status.NOT_ACCEPTABLE_406);
             res.send();
+            return;
         }
 
         getOrOptionsMatching(mediaType, res, () -> output(mediaType,

File: webclient/api/src/main/java/io/helidon/webclient/api/ClientRequestBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -167,7 +167,7 @@ public T header(Header header) {
     @Override
     public T headers(Headers headers) {
         for (Header header : headers) {
-            this.headers.add(header);
+            this.headers.set(header);
         }
         return identity();
     }

File: webserver/webserver/src/main/java/io/helidon/webserver/http/ErrorHandlers.java
Patch:
@@ -212,7 +212,7 @@ private void handleError(ConnectionContext ctx,
         if (!response.reset()) {
             ctx.log(LOGGER, System.Logger.Level.WARNING, "Unable to reset response for error handler.");
             throw new CloseConnectionException(
-                    "Cannot send response of a simple handler, status and headers already written");
+                    "Cannot send response of a simple handler, status and headers already written", e);
         }
         try {
             it.handle(request, response, e);

File: docs/src/main/java/io/helidon/docs/se/config/MutabilitySupportSnippets.java
Patch:
@@ -50,7 +50,7 @@ void snippet_2() {
     void snippet_3(Config config) {
         // tag::snippet_3[]
         config.get("greeting") // <1>
-                .onChange((changedNode) -> { // <2>
+                .onChange(changedNode -> { // <2>
                     System.out.println("Node " + changedNode.key() + " has changed!");
                 });
         // end::snippet_3[]

File: webserver/webserver/src/main/java/io/helidon/webserver/http/ErrorHandlers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -191,6 +191,7 @@ private void unhandledError(ConnectionContext ctx, ServerRequest request, Routin
                     .status(httpException.status())
                     .setKeepAlive(httpException.keepAlive())
                     .request(DirectTransportRequest.create(request.prologue(), request.headers()))
+                    .update(it -> httpException.headers().forEach(it::header))
                     .build());
         } else {
             // to be handled by error handler

File: metrics/api/src/main/java/io/helidon/metrics/api/Meter.java
Patch:
@@ -116,7 +116,7 @@ public String typeName() {
      * @param <B> type of the builder
      * @param <M> type of the meter the builder creates
      */
-    interface Builder<B extends Builder<B, M>, M extends Meter> {
+    interface Builder<B extends Builder<B, M>, M extends Meter> extends Wrapper {
 
         /**
          * Returns the type-correct "this".
@@ -202,6 +202,8 @@ default B identity() {
          * @return the assigned scope if set; empty otherwise
          */
         Optional<String> scope();
+
+
     }
 
     /**

File: microprofile/server/src/main/java/io/helidon/microprofile/server/JaxRsService.java
Patch:
@@ -205,7 +205,7 @@ private void doHandle(Context ctx, ServerRequest req, ServerResponse res) {
 
         JaxRsResponseWriter writer = new JaxRsResponseWriter(res);
         requestContext.setWriter(writer);
-        requestContext.setEntityStream(req.content().inputStream());
+        requestContext.setEntityStream(new LazyInputStream(req));
         requestContext.setProperty("io.helidon.jaxrs.remote-host", req.remotePeer().host());
         requestContext.setProperty("io.helidon.jaxrs.remote-port", req.remotePeer().port());
         requestContext.setRequestScopedInitializer(ij -> {

File: webserver/observe/observe/src/main/java/io/helidon/webserver/observe/ObserveFeature.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -183,7 +183,7 @@ public void setup(ServerFeatureContext featureContext) {
                     .map(it -> featureContext.socket(it).httpRouting())
                     .toList();
         }
-
+        // we must guarantee that each observer adding its own HttpFeature adds it with correct weight
         if (enabled) {
             for (Observer observer : observers) {
                 observer.register(featureContext, observeEndpointRouting, endpoint(config.endpoint()));

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -237,6 +237,8 @@ void validateAnnotations(BeanManager bm,
 
     void close(@Observes BeforeShutdown shutdown) {
         FaultToleranceMetrics.close();
+        // we need to clear method cache, as the next start could use different config
+        MethodInvoker.clearMethodStatesMap();
     }
 
     /**

File: http/http/src/main/java/io/helidon/http/ServerRequestHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/tests/webserver/src/test/java/io/helidon/webserver/tests/MaxPayloadSizeTest.java
Patch:
@@ -100,7 +100,7 @@ void testActualLengthExceededWithPayload() {
                         it.write(PAYLOAD_BYTES);
                         it.write(PAYLOAD_BYTES);
                         it.write(PAYLOAD_BYTES);
-                    } catch (IOException e) {
+                    } catch (IOException | UncheckedIOException e) {
                         // ignored -- possible connection reset
                     }
                 })) {

File: websocket/src/main/java/io/helidon/websocket/AbstractWsFrame.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -113,7 +113,8 @@ protected static FrameHeader readFrameHeader(DataReader reader, int maxFrameLeng
     }
 
     protected static BufferData readPayload(DataReader reader, FrameHeader header) {
-        return reader.readBuffer(header.length());
+        int length = header.length();
+        return length == 0 ? BufferData.empty() : reader.readBuffer(length);
     }
 
     protected static boolean isPayload(FrameHeader header) {

File: examples/webserver/mutual-tls/src/main/java/io/helidon/examples/webserver/mtls/SecureService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@ public void routing(HttpRules rules) {
         rules.any((req, res) -> {
             // close to avoid re-using cached connections on the client side
             res.header(HeaderValues.CONNECTION_CLOSE);
-            res.send("Hello " + req.headers().get(X_HELIDON_CN).value() + "!");
+            res.send("Hello " + req.headers().get(X_HELIDON_CN).get() + "!");
         });
     }
 }

File: builder/api/src/main/java/io/helidon/builder/api/Prototype.java
Patch:
@@ -106,7 +106,7 @@ public interface ConfiguredBuilder<BUILDER, PROTOTYPE> extends Builder<BUILDER,
          * @param configType           type of the configured service
          * @param allFromServiceLoader whether all services from service loader should be used, or only the ones with configured
          *                             node
-         * @param existingInstances  already configured instances
+         * @param existingInstances    already configured instances
          * @param <S>                  type of the expected service
          * @param <T>                  type of the configured service provider that creates instances of S
          * @return list of discovered services, ordered by {@link io.helidon.common.Weight} (highest weight is first in the list)
@@ -339,7 +339,7 @@ public interface OptionDecorator<B, T> {
          * builder still contains previous value).
          * Do not call the same setter again from within this method, as it would end in a stack overflow.
          *
-         * @param builder the target builder being decorated
+         * @param builder     the target builder being decorated
          * @param optionValue option value set by the caller of the setter method
          */
         void decorate(B builder, T optionValue);
@@ -450,5 +450,6 @@ public interface OptionDecorator<B, T> {
          */
         String[] value();
     }
+
 }
 

File: builder/codegen/src/main/java/io/helidon/builder/codegen/Types.java
Patch:
@@ -48,6 +48,7 @@ final class Types {
     static final TypeName PROTOTYPE_PROTOTYPE_METHOD = TypeName.create("io.helidon.builder.api.Prototype.PrototypeMethod");
     static final TypeName PROTOTYPE_BUILDER_DECORATOR = TypeName.create("io.helidon.builder.api.Prototype.BuilderDecorator");
     static final TypeName PROTOTYPE_CONSTANT = TypeName.create("io.helidon.builder.api.Prototype.Constant");
+    static final TypeName GENERATED_EQUALITY_UTIL = TypeName.create("io.helidon.builder.api.GeneratedBuilder.EqualityUtil");
 
     static final TypeName RUNTIME_PROTOTYPE = TypeName.create("io.helidon.builder.api.RuntimeType.PrototypedBy");
     static final TypeName RUNTIME_PROTOTYPED_BY = TypeName.create("io.helidon.builder.api.RuntimeType.PrototypedBy");

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcFeature.java
Patch:
@@ -518,7 +518,9 @@ private String processJsonResponse(ServerResponse res,
 
                 headers.addCookie(tenantCookieHandler.createCookie(tenantName).build()); //Add tenant name cookie
                 headers.addCookie(tokenCookieHandler.createCookie(accessToken).build());  //Add token cookie
-                headers.addCookie(refreshTokenCookieHandler.createCookie(refreshToken).build());  //Add refresh token cookie
+                if (refreshToken != null) {
+                    headers.addCookie(refreshTokenCookieHandler.createCookie(refreshToken).build());  //Add refresh token cookie
+                }
 
                 if (idToken != null) {
                     headers.addCookie(idTokenCookieHandler.createCookie(idToken).build());  //Add token id cookie

File: webserver/webserver/src/main/java/io/helidon/webserver/ListenerConfigBlueprint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -345,7 +345,8 @@ interface ListenerConfigBlueprint {
      *
      * @return discovery context
      */
-    RequestedUriDiscoveryContext requestedUriDiscoveryContext();
+    @Option.Configured("requested-uri-discovery")
+    Optional<RequestedUriDiscoveryContext> requestedUriDiscoveryContext();
 
     /**
      * Update the server socket with configured socket options.

File: common/media-type/src/main/java/io/helidon/common/media/type/MediaTypeImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,6 +44,6 @@ static MediaType parse(String fullType, ParserMode parserMode) {
 
     @Override
     public String toString() {
-        return fullType();
+        return text();
     }
 }

File: common/media-type/src/test/java/io/helidon/common/media/type/MediaTypesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -79,7 +79,7 @@ void testAllConstantsAreValid() throws NoSuchFieldException, IllegalAccessExcept
 
             assertAll(
                     () -> assertThat(value, notNullValue()),
-                    () -> assertThat(value.fullType(), notNullValue()),
+                    () -> assertThat(value.text(), notNullValue()),
                     () -> assertThat(value.subtype(), notNullValue()),
                     () -> assertThat(value.type(), notNullValue())
             );

File: http/http/src/main/java/io/helidon/http/HttpMediaTypeImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -107,7 +107,7 @@ public boolean test(MediaType mediaType) {
 
     @Override
     public String text() {
-        StringBuilder result = new StringBuilder(mediaType.fullType());
+        StringBuilder result = new StringBuilder(mediaType.text());
         for (Map.Entry<String, String> param : parameters.entrySet()) {
             result.append("; ")
                     .append(param.getKey())

File: integrations/cdi/datasource-ucp/src/test/java/io/helidon/integrations/datasource/ucp/cdi/TestDataSourceAcquisition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -84,6 +84,7 @@ private void onStartup(@Observes @Initialized(ApplicationScoped.class) final Obj
         final PoolDataSourceImpl contextualInstance =
             (PoolDataSourceImpl) ((WeldClientProxy) this.test).getMetadata().getContextualInstance();
         assertThat(contextualInstance.getDescription(), is("A test datasource"));
+        assertThat(contextualInstance.getConnectionPoolName(), is("test"));
         Connection connection = null;
         try {
             connection = this.test.getConnection();

File: common/uri/src/main/java/io/helidon/common/uri/UriQueryWriteableImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -79,7 +79,7 @@ public UriQueryWriteable from(UriQuery uriQuery) {
                         .addAll(raw);
                 List<String> decoded = uriQuery.all(name);
                 decodedQueryParams.computeIfAbsent(name, it -> new ArrayList<>())
-                        .addAll(raw);
+                        .addAll(decoded);
             }
         }
 

File: jersey/connector/src/main/java/io/helidon/jersey/connector/HelidonConnector.java
Patch:
@@ -151,7 +151,6 @@ private HttpClientRequest mapRequest(ClientRequest request) {
         HttpClientRequest httpRequest = webClient
                 .method(Method.create(request.getMethod()))
                 .proxy(requestProxy)
-                .skipUriEncoding(true)      // already encoded by Jersey
                 .uri(uri);
 
         // map request headers

File: jersey/tests/connector/src/test/java/io/helidon/jersey/connector/ConnectorBase.java
Patch:
@@ -115,11 +115,11 @@ public void testBasicPost() {
     @Test
     public void queryGetTest() {
         try (Response response = target("basic").path("getquery")
-                .queryParam("first", "hello there ")
-                .queryParam("second", "world")
+                .queryParam("first", "\"hello there ")
+                .queryParam("second", "world\"")
                 .request().get()) {
             assertThat(response.getStatus(), is(200));
-            assertThat(response.readEntity(String.class), is("hello there world"));
+            assertThat(response.readEntity(String.class), is("\"hello there world\""));
         }
     }
 

File: webserver/static-content/src/main/java/io/helidon/webserver/staticcontent/FileSystemContentHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -79,7 +79,7 @@ boolean doHandle(Method method, String requestedPath, ServerRequest req, ServerR
 
         String rawPath = req.prologue().uriPath().rawPath();
 
-        String relativePath = root.relativize(path).toString();
+        String relativePath = root.relativize(path).toString().replace("\\", "/");
         String requestedResource;
         if (mapped) {
             requestedResource = relativePath;

File: tracing/providers/opentelemetry/src/main/java/io/helidon/tracing/providers/opentelemetry/OpenTelemetrySpanContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/providers/opentracing/src/main/java/io/helidon/tracing/providers/opentracing/OpenTracingContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/tracing/src/main/java/io/helidon/tracing/Tracer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webclient/http1/src/main/java/io/helidon/webclient/http1/Http1ClientSpiProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -52,6 +52,7 @@ public HttpClientSpi protocol(WebClient client, Http1ClientProtocolConfig config
                                    Http1ClientConfig.builder()
                                            .from(client.prototype())
                                            .protocolConfig(config)
+                                           .servicesDiscoverServices(false)
                                            .buildPrototype());
     }
 }

File: webclient/http2/src/main/java/io/helidon/webclient/http2/Http2ClientSpiProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -51,6 +51,7 @@ public HttpClientSpi protocol(WebClient client, Http2ClientProtocolConfig config
                                    Http2ClientConfig.builder()
                                            .from(client.prototype())
                                            .protocolConfig(config)
+                                           .servicesDiscoverServices(false)
                                            .buildPrototype());
     }
 }

File: webserver/tests/http2/src/test/java/io/helidon/webserver/tests/http2/EmptyFrameCntTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@
 import io.helidon.webclient.api.ClientUri;
 import io.helidon.webclient.api.ConnectionKey;
 import io.helidon.webclient.api.DefaultDnsResolver;
+import io.helidon.webclient.api.DnsAddressLookup;
 import io.helidon.webclient.api.Proxy;
 import io.helidon.webclient.api.TcpClientConnection;
 import io.helidon.webclient.api.WebClient;
@@ -95,7 +96,7 @@ void emptyDataFramesAttack() throws InterruptedException, ExecutionException, Ti
                                                         Duration.ZERO,
                                                         Tls.builder().enabled(false).build(),
                                                         DefaultDnsResolver.create(),
-                                                        null,
+                                                        DnsAddressLookup.defaultLookup(),
                                                         Proxy.noProxy());
 
         TcpClientConnection conn = TcpClientConnection.create(WebClient.builder()

File: common/buffers/src/main/java/io/helidon/common/buffers/FixedBufferData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,7 +43,7 @@ class FixedBufferData implements BufferData {
     FixedBufferData(byte[] bytes, int position, int length) {
         this.bytes = bytes;
         this.length = length;
-        this.writePosition = length;
+        this.writePosition = position + length;
         this.readPosition = position;
     }
 

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/JpaExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -2049,7 +2049,7 @@ private void onStartup(@Observes
                            Object event,
                            @ContainerManaged
                            Instance<EntityManagerFactory> emfs) {
-        if (!emfs.isUnsatisfied()) {
+        if (this.enabled && !emfs.isUnsatisfied()) {
             for (EntityManagerFactory emfProxy : emfs) {
                 // Container-managed EntityManagerFactory instances are client proxies, so we call a business method to
                 // force "inflation" of the proxied instance.  This, in turn, may run DDL and persistence provider

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/TestAnnotationRewriting.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -77,7 +77,6 @@ class TestAnnotationRewriting {
     
     @BeforeEach
     void startCdiContainer() {
-        System.setProperty("jpaAnnotationRewritingEnabled", "true");
         final SeContainerInitializer initializer = SeContainerInitializer.newInstance()
             .addBeanClasses(this.getClass());
         assertThat(initializer, notNullValue());

File: jersey/tests/connector/src/test/java/io/helidon/jersey/connector/ConnectorBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -115,11 +115,11 @@ public void testBasicPost() {
     @Test
     public void queryGetTest() {
         try (Response response = target("basic").path("getquery")
-                .queryParam("first", "hello")
+                .queryParam("first", "hello there ")
                 .queryParam("second", "world")
                 .request().get()) {
             assertThat(response.getStatus(), is(200));
-            assertThat(response.readEntity(String.class), is("helloworld"));
+            assertThat(response.readEntity(String.class), is("hello there world"));
         }
     }
 

File: webclient/api/src/main/java/io/helidon/webclient/spi/WebClientService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2023 Oracle and/or its affiliates.
+ * Copyright (c) 2023, 2024 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
 public interface WebClientService extends NamedService {
     @Override
     default String name() {
-        return "@default";
+        return type();
     }
 
     @Override

File: dbclient/mongodb/src/main/java/io/helidon/dbclient/mongodb/StatementParsers.java
Patch:
@@ -223,6 +223,8 @@ private static CharClass charClass(char c) {
                 },
                 // Transitions from STRING state
                 {
+                        //LETTER: regular part of the JSON string, keep processing it
+                        State.STRING,
                         // NUMBER: regular part of the JSON string, keep processing it
                         State.STRING,
                         // QUOTE: end of JSON string processing, go back to STATEMENT state

File: examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/PokemonMapper.java
Patch:
@@ -25,7 +25,7 @@
 import io.helidon.dbclient.DbRow;
 
 /**
- * Maps database statements to {@link io.helidon.examples.dbclient.common.Pokemon} class.
+ * Maps database statements to {@link io.helidon.examples.dbclient.pokemons.Pokemon} class.
  */
 public class PokemonMapper implements DbMapper<Pokemon> {
 

File: webserver/observe/tracing/src/main/java/io/helidon/webserver/observe/tracing/PathTracingConfig.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import io.helidon.common.config.Config;
 import io.helidon.common.uri.UriPath;
-import io.helidon.config.Config;
 import io.helidon.http.Method;
 import io.helidon.http.MethodPredicate;
 import io.helidon.http.PathMatcher;
@@ -32,7 +32,7 @@
  */
 public interface PathTracingConfig {
     /**
-     * Create a new traced path configuration from {@link io.helidon.config.Config}.
+     * Create a new traced path configuration from {@link io.helidon.common.config.Config}.
      *
      * @param config config of a path
      * @return traced path configuration
@@ -107,7 +107,7 @@ public String toString() {
         }
 
         /**
-         * Update this builder from provided {@link io.helidon.config.Config}.
+         * Update this builder from provided {@link io.helidon.common.config.Config}.
          *
          * @param config config to update this builder from
          * @return updated builder instance

File: examples/dbclient/common/src/main/java/io/helidon/examples/dbclient/common/AbstractPokemonService.java
Patch:
@@ -134,7 +134,8 @@ private void getPokemon(ServerRequest req, ServerResponse res) {
     private void listPokemons(ServerRequest req, ServerResponse res) {
         res.send(dbClient.execute()
                 .namedQuery("select-all")
-                .map(it -> it.as(JsonObject.class)));
+                .map(it -> it.as(JsonObject.class))
+                .toList());
     }
 
     /**

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/JpaExtension.java
Patch:
@@ -804,7 +804,7 @@ private <T extends EntityManager> void saveEntityManagerQualifiers(@Observes
      * @exception IOException if an input or output error occurs, typically because a {@code META-INF/persistence.xml}
      * resource was found but could not be loaded for some reason
      *
-     * @exception JAXBException if there was a problem {@linkplain Unmarshaller#unmarshal(Reader) unmarshalling} a
+     * @exception JAXBException if there was a problem {@linkplain Unmarshaller#unmarshal(java.io.Reader) unmarshalling} a
      * {@code META-INF/persistence.xml} resource
      *
      * @exception NullPointerException if either {@code event} or {@code beanManager} is {@code null}
@@ -2045,7 +2045,7 @@ private void maybeAddPersistenceProviderBean(AfterBeanDiscovery event,
 
     private void onStartup(@Observes
                            @Initialized(ApplicationScoped.class)
-                           @Priority(LIBRARY_BEFORE)
+                           @Priority(LIBRARY_BEFORE + 20) // Must be later than metrics CDI extension priority
                            Object event,
                            @ContainerManaged
                            Instance<EntityManagerFactory> emfs) {

File: common/socket/src/main/java/io/helidon/common/socket/IdleInputStream.java
Patch:
@@ -96,7 +96,7 @@ public void close() throws IOException {
      */
     void idle() {
         if (idlingThread != null) {
-            throw new IllegalStateException("Already in idle mode!");
+            return;
         }
         idlingThread = executor.get().submit(this::handle);
     }

File: webclient/http1/src/main/java/io/helidon/webclient/http1/Http1CallOutputStreamChain.java
Patch:
@@ -102,6 +102,9 @@ WebClientServiceResponse doProceed(ClientConnection connection,
             throw new IllegalStateException("Output stream was not closed in handler");
         }
 
+        reader = cos.reader;
+        connection = cos.connection;
+
         Status responseStatus;
         try {
             responseStatus = Http1StatusParser.readStatus(reader, http1Client.protocolConfig().maxStatusLineLength());

File: http/http/src/main/java/io/helidon/http/Http1HeadersParser.java
Patch:
@@ -113,7 +113,7 @@ private static HeaderName readHeaderName(DataReader reader,
         if (col == maxLength) {
             throw new IllegalStateException("Header size exceeded");
         } else if (col < 0) {
-            throw new IllegalArgumentException("Invalid header, missing colon: " + reader.debugDataHex());
+            throw new IllegalArgumentException("Invalid header, missing colon:\n" + reader.debugDataHex());
         }
 
         String headerName = reader.readAsciiString(col);

File: webclient/api/src/main/java/io/helidon/webclient/api/HttpClientRequest.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.helidon.webclient.api;
 
+import java.time.Duration;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -135,6 +136,7 @@ private ClientRequest<?> discoverHttpImplementation() {
             ConnectionKey connectionKey = new ConnectionKey(resolvedUri.scheme(),
                                                             resolvedUri.host(),
                                                             resolvedUri.port(),
+                                                            clientConfig().readTimeout().orElse(Duration.ZERO),
                                                             tls(),
                                                             clientConfig().dnsResolver(),
                                                             clientConfig().dnsAddressLookup(),

File: webclient/api/src/main/java/io/helidon/webclient/api/Proxy.java
Patch:
@@ -25,6 +25,7 @@
 import java.net.Socket;
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.Base64;
 import java.util.HashSet;
@@ -457,6 +458,8 @@ private static Socket connectToProxy(WebClient webClient,
                                                                     new ConnectionKey("http",
                                                                                       proxyAddress.getHostName(),
                                                                                       proxyAddress.getPort(),
+                                                                                      clientConfig.readTimeout()
+                                                                                              .orElse(Duration.ZERO),
                                                                                       NO_TLS,
                                                                                       clientConfig.dnsResolver(),
                                                                                       clientConfig.dnsAddressLookup(),

File: webclient/http1/src/main/java/io/helidon/webclient/http1/Http1ClientRequestImpl.java
Patch:
@@ -212,13 +212,13 @@ private Http1ClientResponseImpl invokeWithServices(Http1CallChainBase callChain,
                 });
 
         return new Http1ClientResponseImpl(clientConfig(),
+                                           http1Client().protocolConfig(),
                                            serviceResponse.status(),
                                            serviceResponse.serviceRequest().headers(),
                                            serviceResponse.headers(),
                                            callChain.connection(),
                                            serviceResponse.inputStream().orElse(null),
                                            mediaContext(),
-                                           clientConfig().mediaTypeParserMode(),
                                            resolvedUri,
                                            complete);
     }

File: webclient/http2/src/main/java/io/helidon/webclient/http2/Http2CallChainBase.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
+import java.time.Duration;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
@@ -266,6 +267,7 @@ private ConnectionKey connectionKey(WebClientServiceRequest serviceRequest) {
         return new ConnectionKey(uri.scheme(),
                                  uri.host(),
                                  uri.port(),
+                                 clientConfig.readTimeout().orElse(Duration.ZERO),
                                  "https".equals(uri.scheme()) ? clientRequest.tls() : NO_TLS,
                                  clientConfig.dnsResolver(),
                                  clientConfig.dnsAddressLookup(),

File: webclient/http2/src/main/java/io/helidon/webclient/http2/Http2ClientImpl.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.helidon.webclient.http2;
 
+import java.time.Duration;
+
 import io.helidon.common.uri.UriQueryWriteable;
 import io.helidon.http.Method;
 import io.helidon.webclient.api.ClientRequest;
@@ -67,6 +69,7 @@ public SupportLevel supports(FullClientRequest<?> clientRequest, ClientUri clien
         ConnectionKey ck = new ConnectionKey(clientUri.scheme(),
                                              clientUri.host(),
                                              clientUri.port(),
+                                             clientConfig.readTimeout().orElse(Duration.ZERO),
                                              clientRequest.tls(),
                                              clientConfig.dnsResolver(),
                                              clientConfig.dnsAddressLookup(),

File: webserver/tests/http2/src/test/java/io/helidon/webserver/tests/http2/EmptyFrameCntTest.java
Patch:
@@ -92,6 +92,7 @@ void emptyDataFramesAttack() throws InterruptedException, ExecutionException, Ti
         ConnectionKey connectionKey = new ConnectionKey(clientUri.scheme(),
                                                         clientUri.host(),
                                                         clientUri.port(),
+                                                        Duration.ZERO,
                                                         Tls.builder().enabled(false).build(),
                                                         DefaultDnsResolver.create(),
                                                         null,

File: webserver/tests/resource-limits/src/test/java/io/helidon/webserver/tests/resourcelimit/MaxTcpConnectionsTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 
 import io.helidon.common.testing.http.junit5.SocketHttpClient;
+import io.helidon.http.HeaderValues;
 import io.helidon.http.Method;
 import io.helidon.webclient.api.ClientResponseTyped;
 import io.helidon.webclient.api.WebClient;
@@ -67,11 +68,13 @@ void testConcurrentRequests() throws Exception {
         // the socket is just never accepted
         assertThrows(UncheckedIOException.class,
                      () -> webClient.get("/greet")
+                             .header(HeaderValues.CONNECTION_CLOSE)
                              .readTimeout(Duration.ofMillis(200))
                              .request(String.class));
         client.close();
         Thread.sleep(100); // give it some time for server to release the semaphore
         ClientResponseTyped<String> typedResponse = webClient.get("/greet")
+                .header(HeaderValues.CONNECTION_CLOSE)
                 .readTimeout(Duration.ofMillis(200))
                 .request(String.class);
         assertThat(typedResponse.status().text(), typedResponse.entity(), is("hello"));

File: examples/microprofile/telemetry/greeting/src/main/java/io/helidon/examples/microprofile/telemetry/GreetResource.java
Patch:
@@ -28,7 +28,6 @@
 import jakarta.ws.rs.core.MediaType;
 import org.glassfish.jersey.server.Uri;
 
-
 /**
  * A simple JAX-RS resource to greet you. Examples:
  *
@@ -40,6 +39,8 @@
  *
  *  Call secondary service:
  *  curl -X GET http://localhost:8080/greet/outbound
+ *
+ *  Explore traces in Jaeger UI.
  */
 @Path("/greet")
 public class GreetResource {
@@ -85,6 +86,7 @@ public GreetingMessage useCustomSpan() {
 
         return new GreetingMessage("Custom Span" + span);
     }
+
     /**
      * Get Span info.
      *

File: microprofile/telemetry/src/main/java/io/helidon/microprofile/telemetry/HelidonWithSpan.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.helidon.microprofile.telemetry;
 
+import java.io.Serial;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -37,6 +38,8 @@
     // Literal to create HelidonWithSpan annotation.
     class Literal extends AnnotationLiteral<HelidonWithSpan> implements HelidonWithSpan {
         static final Literal INSTANCE = new Literal();
+        @Serial
+        private static final long serialVersionUID = 5910339603347723544L;
 
         private Literal() {
         }

File: builder/processor/src/main/java/io/helidon/builder/processor/TypeContext.java
Patch:
@@ -33,9 +33,9 @@
 import io.helidon.common.processor.ElementInfoPredicates;
 import io.helidon.common.types.Annotated;
 import io.helidon.common.types.Annotation;
+import io.helidon.common.types.Modifier;
 import io.helidon.common.types.TypeInfo;
 import io.helidon.common.types.TypeName;
-import io.helidon.common.types.TypeValues;
 
 import static io.helidon.builder.processor.Types.BLUEPRINT_TYPE;
 import static io.helidon.builder.processor.Types.BUILDER_DECORATOR;
@@ -331,7 +331,7 @@ private static void gatherBuilderProperties(ProcessingContext processingContext,
                                   .filter(Predicate.not(ElementInfoPredicates::isStatic))
                                   .filter(Predicate.not(ElementInfoPredicates::isPrivate))
                                   .filter(it -> {
-                                      if (it.modifiers().contains(TypeValues.MODIFIER_DEFAULT)) {
+                                      if (it.elementModifiers().contains(Modifier.DEFAULT)) {
                                           ignoredMethods.add(MethodSignature.create(it));
                                           return false;
                                       }

File: builder/processor/src/main/java/io/helidon/builder/processor/Types.java
Patch:
@@ -81,6 +81,8 @@ final class Types {
     static final TypeName PROTOTYPE_CUSTOM_METHOD_TYPE = TypeName.create(PROTOTYPE_CUSTOM_METHOD);
     static final TypeName BUILDER_CUSTOM_METHOD_TYPE = TypeName.create(BUILDER_CUSTOM_METHOD);
     static final TypeName DESCRIPTION_TYPE = TypeName.create(DESCRIPTION);
+    static final TypeName DEPRECATED_TYPE = TypeName.create(Deprecated.class);
+    static final TypeName OPTION_DEPRECATED_TYPE = TypeName.create("io.helidon.builder.api.Option.Deprecated");
     static final TypeName OPTION_SINGULAR_TYPE = TypeName.create(OPTION_SINGULAR);
     static final TypeName OPTION_SAME_GENERIC_TYPE = TypeName.create(OPTION_SAME_GENERIC);
     static final TypeName OPTION_CONFIDENTIAL_TYPE = TypeName.create(OPTION_CONFIDENTIAL);
@@ -98,6 +100,7 @@ final class Types {
     static final TypeName OPTION_DEFAULT_LONG_TYPE = TypeName.create(OPTION_DEFAULT_LONG);
     static final TypeName OPTION_DEFAULT_METHOD_TYPE = TypeName.create(OPTION_DEFAULT_METHOD);
     static final TypeName OPTION_DEFAULT_CODE_TYPE = TypeName.create(OPTION_DEFAULT_CODE);
+    static final TypeName OPTION_TYPE = TypeName.create("io.helidon.builder.api.Option.Type");
 
     static final TypeName VOID_TYPE = TypeName.create(void.class);
     static final TypeName STRING_TYPE = TypeName.create(String.class);

File: builder/processor/src/main/java/io/helidon/builder/processor/ValidationTask.java
Patch:
@@ -22,9 +22,9 @@
 
 import io.helidon.common.Errors;
 import io.helidon.common.processor.ElementInfoPredicates;
+import io.helidon.common.types.AccessModifier;
 import io.helidon.common.types.TypeInfo;
 import io.helidon.common.types.TypeName;
-import io.helidon.common.types.TypeValues;
 import io.helidon.common.types.TypedElementInfo;
 
 import static io.helidon.builder.processor.Types.RUNTIME_OBJECT_TYPE;
@@ -164,7 +164,7 @@ static class ValidateBlueprint extends ValidationTask {
         @Override
         public void validate(Errors.Collector errors) {
             // must be package local
-            if (blueprint.modifiers().contains(TypeValues.MODIFIER_PUBLIC)) {
+            if (blueprint.accessModifier() == AccessModifier.PUBLIC) {
                 errors.fatal(blueprint.typeName().fqName() + " is defined as public, it must be package local");
             }
         }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/tostring/ChildBlueprint.java
Patch:
@@ -19,5 +19,5 @@
 import io.helidon.builder.api.Prototype;
 
 @Prototype.Blueprint
-public interface ChildBlueprint extends ParentBlueprint {
+interface ChildBlueprint extends ParentBlueprint {
 }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/tostring/EmptyChildBlueprint.java
Patch:
@@ -19,5 +19,5 @@
 import io.helidon.builder.api.Prototype;
 
 @Prototype.Blueprint
-public interface EmptyChildBlueprint extends EmptyParentBlueprint {
+interface EmptyChildBlueprint extends EmptyParentBlueprint {
 }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/tostring/EmptyParentBlueprint.java
Patch:
@@ -19,5 +19,5 @@
 import io.helidon.builder.api.Prototype;
 
 @Prototype.Blueprint
-public interface EmptyParentBlueprint {
+interface EmptyParentBlueprint {
 }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/tostring/ParentBlueprint.java
Patch:
@@ -19,6 +19,6 @@
 import io.helidon.builder.api.Prototype;
 
 @Prototype.Blueprint
-public interface ParentBlueprint {
+interface ParentBlueprint {
     String name();
 }

File: builder/tests/common-types/src/main/java/io/helidon/common/types/TypeNameSupport.java
Patch:
@@ -217,6 +217,9 @@ static TypeName create(String typeName) {
         List<String> packageElements = new ArrayList<>();
 
         while (true) {
+            if (className.isEmpty()) {
+                throw new IllegalArgumentException("Invalid type name: \"" + typeName + "\", got empty string section");
+            }
             if (Character.isUpperCase(className.charAt(0))) {
                 break;
             }

File: common/processor/class-model/src/main/java/io/helidon/common/processor/classmodel/AnnotationParameter.java
Patch:
@@ -57,6 +57,8 @@ private static String resolveValueToString(Type type, Object value) {
             if (!stringValue.startsWith("\"") && !stringValue.endsWith("\"")) {
                 return "\"" + stringValue + "\"";
             }
+        } else if (value instanceof TypeName typeName) {
+            return typeName.fqName() + ".class";
         }
         return value.toString();
     }

File: common/processor/class-model/src/main/java/io/helidon/common/processor/classmodel/Constructor.java
Patch:
@@ -34,7 +34,7 @@ private Constructor(Builder builder) {
      *
      * @return new builder instance
      */
-    static Builder builder() {
+    public static Builder builder() {
         return new Builder();
     }
 

File: common/processor/class-model/src/main/java/io/helidon/common/processor/classmodel/ImportOrganizer.java
Patch:
@@ -156,7 +156,7 @@ Builder addImport(Class<?> type) {
         }
 
         Builder addImport(TypeName type) {
-            return addImport(Type.fromTypeName(type));
+            return addImport(Type.fromTypeName(type.genericTypeName()));
         }
 
         Builder addImport(Type type) {
@@ -252,7 +252,7 @@ private void processImportSamePackage(Type type, String typeName, String typeSim
             if (this.typeName.equals(simpleName)) {
                 simpleName = type.simpleTypeName();
                 if (noImports.containsKey(simpleName)
-                        && noImports.get(simpleName).fqTypeName().equals(type.fqTypeName())) {
+                        && !noImports.get(simpleName).fqTypeName().equals(type.fqTypeName())) {
                     forcedFullImports.add(noImports.remove(simpleName).fqTypeName());
                 }
             }

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/EnumRelatedConfigBlueprint.java
Patch:
@@ -27,7 +27,7 @@
 
 @Prototype.Blueprint
 @Configured
-public interface EnumRelatedConfigBlueprint {
+interface EnumRelatedConfigBlueprint {
 
     FakeClientAuth clientAuth();
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeKeyConfigBlueprint.java
Patch:
@@ -29,7 +29,7 @@
  *
  */
 @Prototype.Blueprint
-public interface FakeKeyConfigBlueprint {
+interface FakeKeyConfigBlueprint {
 
     /**
      * The public key of this config if configured.

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeSpanLogTracingConfigBlueprint.java
Patch:
@@ -25,6 +25,6 @@
  */
 @Prototype.Blueprint
 @Configured
-public interface FakeSpanLogTracingConfigBlueprint extends FakeTraceableConfigBlueprint {
+interface FakeSpanLogTracingConfigBlueprint extends FakeTraceableConfigBlueprint {
 
 }

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeSpanTracingConfigBlueprint.java
Patch:
@@ -31,7 +31,7 @@
  */
 @Prototype.Blueprint
 @Configured
-public interface FakeSpanTracingConfigBlueprint extends FakeTraceableConfigBlueprint {
+interface FakeSpanTracingConfigBlueprint extends FakeTraceableConfigBlueprint {
 
     /**
      * When rename is desired, returns the new name.

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/interceptor/test/ZImplConfigBlueprint.java
Patch:
@@ -24,7 +24,7 @@
  */
 @Prototype.Blueprint
 @Configured
-public interface ZImplConfigBlueprint {
+interface ZImplConfigBlueprint {
 
     /**
      * For testing purposes.

File: inject/tools/src/main/java/io/helidon/inject/tools/ApplicationCreatorResponseBlueprint.java
Patch:
@@ -24,7 +24,7 @@
  * @see io.helidon.inject.tools.spi.ApplicationCreator
  */
 @Prototype.Blueprint
-public interface ApplicationCreatorResponseBlueprint extends GeneralCreatorResponseBlueprint {
+interface ApplicationCreatorResponseBlueprint extends GeneralCreatorResponseBlueprint {
 
     /**
      * The basic description for the {@link io.helidon.inject.api.Application} generated.

File: inject/tools/src/main/java/io/helidon/inject/tools/InterceptorCreatorResponseBlueprint.java
Patch:
@@ -27,7 +27,7 @@
  * Response from interception creation.
  */
 @Prototype.Blueprint
-public interface InterceptorCreatorResponseBlueprint {
+interface InterceptorCreatorResponseBlueprint {
 
     /**
      * The generated files.

File: metrics/system-meters/src/main/java/io/helidon/metrics/systemmeters/SystemMetersProvider.java
Patch:
@@ -78,7 +78,7 @@ public class SystemMetersProvider implements MetersProvider {
             .withName("jvm.uptime")
             .withDescription(
                     "Displays the start time of the Java virtual machine in "
-                            + "milliseconds. This "
+                            + "seconds. This "
                             + "attribute displays the approximate time when the Java "
                             + "virtual machine "
                             + "started.")
@@ -146,7 +146,7 @@ public class SystemMetersProvider implements MetersProvider {
     private static final Metadata GC_TIME = Metadata.builder()
             .withName("gc.time")
             .withDescription(
-                    "Displays the approximate accumulated collection elapsed time in milliseconds. "
+                    "Displays the approximate accumulated collection elapsed time in seconds. "
                             + "This attribute displays -1 if the collection elapsed time is undefined for this "
                             + "collector. The Java virtual machine implementation may use a high resolution "
                             + "timer to measure the elapsed time. This attribute may display the same value "
@@ -215,7 +215,7 @@ private static <M, S, N extends Number> Function<M, N> typedFn(Function<M, S> ge
                       typedFn(MemoryMXBean::getHeapMemoryUsage, MemoryUsage::getMax));
 
         RuntimeMXBean runtimeBean = ManagementFactory.getRuntimeMXBean();
-        registerGauge(result, JVM_UPTIME, runtimeBean, RuntimeMXBean::getUptime);
+        registerGauge(result, JVM_UPTIME, runtimeBean, rtBean -> rtBean.getUptime() / 1000.0D);
 
         ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();
         registerGauge(result, THREAD_COUNT, threadBean, ThreadMXBean::getThreadCount);

File: webserver/observe/metrics/src/main/java/io/helidon/webserver/observe/metrics/JsonFormatter.java
Patch:
@@ -209,6 +209,7 @@ && matchesName(name)) {
 
                 JsonObjectBuilder builderForThisName = metadataOutputBuilderWithinParent
                         .computeIfAbsent(name, k -> JSON.createObjectBuilder());
+                addNonEmpty(builderForThisName, "type", meter.type().typeName());
                 meter.baseUnit().ifPresent(u -> addNonEmpty(builderForThisName, "unit", u));
                 meter.description().ifPresent(d -> addNonEmpty(builderForThisName, "description", d));
                 isAnyOutput.set(true);

File: microprofile/server/src/main/java/io/helidon/microprofile/server/JaxRsService.java
Patch:
@@ -256,6 +256,7 @@ private void doHandle(Context ctx, ServerRequest req, ServerResponse res) {
                 // reset may be impossible if data has already been written over the network
                 if (res instanceof RoutingResponse routing) {
                     if (routing.reset()) {
+                        res.status(Status.OK_200);
                         routing.next();
                     }
                 }

File: webserver/grpc/src/main/java/io/helidon/webserver/grpc/GrpcProtocolHandler.java
Patch:
@@ -201,15 +201,13 @@ public void close(Status status, Metadata trailers) {
                 // todo ignoring trailers
                 WritableHeaders<?> writable = WritableHeaders.create();
 
-                // write the expected gRPC headers for content type and status
-                writable.set(GRPC_CONTENT_TYPE);
                 writable.set(HeaderValues.create(GrpcStatus.STATUS_NAME, status.getCode().value()));
                 String description = status.getDescription();
                 if (description != null) {
                     writable.set(HeaderValues.create(GrpcStatus.MESSAGE_NAME, description));
                 }
 
-                Http2Headers http2Headers = Http2Headers.create(writable).status(io.helidon.http.Status.OK_200);
+                Http2Headers http2Headers = Http2Headers.create(writable);
                 streamWriter.writeHeaders(http2Headers,
                                           streamId,
                                           Http2Flag.HeaderFlags.create(Http2Flag.END_OF_HEADERS | Http2Flag.END_OF_STREAM),

File: microprofile/telemetry/src/main/java/io/helidon/microprofile/telemetry/WithSpanInterceptor.java
Patch:
@@ -51,7 +51,7 @@ class WithSpanInterceptor {
      *
      * @param context Invocation Context
      * @return Invocation proceed.
-     * @throws Exception
+     * @throws Exception when something is wrong
      */
     @AroundInvoke
     public Object interceptSpan(InvocationContext context) throws Exception {

File: webserver/access-log/src/main/java/io/helidon/webserver/accesslog/AccessLogFeatureProvider.java
Patch:
@@ -21,7 +21,7 @@
 import io.helidon.webserver.spi.ServerFeatureProvider;
 
 /**
- * {@link java.util.ServiceLoader} provider implementation for context feature for {@link io.helidon.webserver.WebServer}.
+ * {@link java.util.ServiceLoader} provider implementation for access log feature for {@link io.helidon.webserver.WebServer}.
  */
 @Weight(AccessLogFeature.WEIGHT)
 public class AccessLogFeatureProvider implements ServerFeatureProvider<AccessLogFeature> {
@@ -36,7 +36,7 @@ public AccessLogFeatureProvider() {
 
     @Override
     public String configKey() {
-        return "context";
+        return "access-log";
     }
 
     @Override

File: webserver/access-log/src/main/java/module-info.java
Patch:
@@ -38,4 +38,7 @@
 
     exports io.helidon.webserver.accesslog;
 
+    provides io.helidon.webserver.spi.ServerFeatureProvider
+            with io.helidon.webserver.accesslog.AccessLogFeatureProvider;
+
 }
\ No newline at end of file

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/WsUpgradeProvider.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class WsUpgradeProvider implements Http1UpgradeProvider<WsConfig> {
     /**
-     * HTTP/2 server connection provider configuration node name.
+     * WebSocket server connection provider configuration node name.
      */
     protected static final String CONFIG_NAME = "websocket";
 

File: websocket/src/main/java/io/helidon/websocket/AbstractWsFrame.java
Patch:
@@ -109,7 +109,7 @@ protected static FrameHeader readFrameHeader(DataReader reader, int maxFrameLeng
             throw new WsCloseException("Payload too large", WsCloseCodes.TOO_BIG);
         }
 
-        return new FrameHeader(opCode, fin, masked, length);
+        return new FrameHeader(opCode, fin, masked, (int) frameLength);
     }
 
     protected static BufferData readPayload(DataReader reader, FrameHeader header) {

File: microprofile/health/src/main/java/io/helidon/microprofile/health/HealthCdiExtension.java
Patch:
@@ -58,7 +58,7 @@ public Class<? extends Annotation> annotationType() {
      * Creates a new instance of the health CDI extension.
      */
     public HealthCdiExtension() {
-        super(LOGGER, "observe.providers.health", "health");
+        super(LOGGER, nestedConfigKey("health"), "health");
     }
 
     /**

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java
Patch:
@@ -175,7 +175,7 @@ public class MetricsCdiExtension extends HelidonRestCdiExtension {
      * Creates a new extension instance.
      */
     public MetricsCdiExtension() {
-        super(LOGGER, "observe.providers.metrics", "metrics");
+        super(LOGGER, nestedConfigKey("metrics"), "metrics");
     }
 
     /**

File: http/http/src/main/java/io/helidon/http/HeaderValueArray.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-class HeaderValueArray extends HeaderValueBase {
+class HeaderValueArray extends HeaderWritableValueBase {
     private final String[] originalValues;
     private List<String> values;
 

File: http/http/src/main/java/io/helidon/http/HeaderValueCopy.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-class HeaderValueCopy extends HeaderValueBase {
+class HeaderValueCopy extends HeaderWritableValueBase {
     private final Header original;
     private List<String> values;
 

File: http/http/src/main/java/io/helidon/http/HeaderValueLazy.java
Patch:
@@ -21,7 +21,7 @@
 
 import io.helidon.common.buffers.LazyString;
 
-class HeaderValueLazy extends HeaderValueBase {
+class HeaderValueLazy extends HeaderWritableValueBase {
     private final LazyString value;
     private List<String> values;
 

File: http/http/src/main/java/io/helidon/http/HeaderValueList.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Collection;
 import java.util.List;
 
-class HeaderValueList extends HeaderValueBase {
+class HeaderValueList extends HeaderWritableValueBase {
     private List<String> values;
 
     HeaderValueList(HeaderName name, boolean changing, boolean sensitive, Collection<String> values) {

File: http/http/src/main/java/io/helidon/http/HeaderValueSingle.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-class HeaderValueSingle extends HeaderValueBase {
+class HeaderValueSingle extends HeaderWritableValueBase {
     private final String value;
     private List<String> values;
 

File: webserver/access-log/src/main/java/io/helidon/webserver/accesslog/AccessLogConfigBlueprint.java
Patch:
@@ -29,7 +29,7 @@
  * Configuration of access log feature.
  */
 @Prototype.Blueprint(decorator = AccessLogConfigSupport.BuilderDecorator.class)
-@Prototype.Configured
+@Prototype.Configured(value = AccessLogFeature.ACCESS_LOG_ID, root = false)
 @Prototype.CustomMethods(AccessLogConfigSupport.CustomMethods.class)
 @Prototype.Provides(ServerFeatureProvider.class)
 interface AccessLogConfigBlueprint extends Prototype.Factory<AccessLogFeature> {

File: webserver/context/src/main/java/io/helidon/webserver/context/ContextFeature.java
Patch:
@@ -35,6 +35,7 @@ public class ContextFeature implements ServerFeature, RuntimeType.Api<ContextFea
      * Default weight of the feature. It is quite high, as context is used by a lot of other features.
      */
     public static final double WEIGHT = Weighted.DEFAULT_WEIGHT + 1000;
+    static final String CONTEXT_ID = "context";
 
     private final ContextFeatureConfig config;
 
@@ -115,7 +116,7 @@ public String name() {
 
     @Override
     public String type() {
-        return "context";
+        return CONTEXT_ID;
     }
 
     @Override

File: webserver/context/src/main/java/io/helidon/webserver/context/ContextFeatureConfigBlueprint.java
Patch:
@@ -26,7 +26,7 @@
  * Configuration of context feature.
  */
 @Prototype.Blueprint
-@Prototype.Configured
+@Prototype.Configured(value = ContextFeature.CONTEXT_ID, root = false)
 @Prototype.Provides(ServerFeatureProvider.class)
 interface ContextFeatureConfigBlueprint extends Prototype.Factory<ContextFeature> {
 
@@ -53,6 +53,6 @@ interface ContextFeatureConfigBlueprint extends Prototype.Factory<ContextFeature
      *
      * @return instance name
      */
-    @Option.Default("context")
+    @Option.Default(ContextFeature.CONTEXT_ID)
     String name();
 }

File: webserver/context/src/main/java/io/helidon/webserver/context/ContextFeatureProvider.java
Patch:
@@ -36,7 +36,7 @@ public ContextFeatureProvider() {
 
     @Override
     public String configKey() {
-        return "context";
+        return ContextFeature.CONTEXT_ID;
     }
 
     @Override

File: webserver/cors/src/main/java/io/helidon/webserver/cors/CorsConfigBlueprint.java
Patch:
@@ -28,7 +28,7 @@
  * Configuration of CORS feature.
  */
 @Prototype.Blueprint
-@Prototype.Configured
+@Prototype.Configured(value = CorsFeature.CORS_ID, root = false)
 @Prototype.Provides(ServerFeatureProvider.class)
 interface CorsConfigBlueprint extends Prototype.Factory<CorsFeature> {
 

File: webserver/observe/observe/src/main/java/io/helidon/webserver/observe/ObserveFeatureConfigBlueprint.java
Patch:
@@ -31,7 +31,7 @@
  * Configuration for observability feature itself.
  */
 @Prototype.Blueprint
-@Prototype.Configured
+@Prototype.Configured(value = ObserveFeature.OBSERVE_ID, root = false)
 @Prototype.Provides(ServerFeatureProvider.class)
 interface ObserveFeatureConfigBlueprint extends Prototype.Factory<ObserveFeature> {
 
@@ -110,6 +110,6 @@ interface ObserveFeatureConfigBlueprint extends Prototype.Factory<ObserveFeature
      *
      * @return instance name
      */
-    @Option.Default("observe")
+    @Option.Default(ObserveFeature.OBSERVE_ID)
     String name();
 }

File: webserver/security/src/main/java/io/helidon/webserver/security/SecurityFeatureConfigBlueprint.java
Patch:
@@ -27,7 +27,7 @@
  * Configuration of security feature fow webserver.
  */
 @Prototype.Blueprint(decorator = SecurityConfigSupport.SecurityFeatureConfigDecorator.class)
-@Prototype.Configured
+@Prototype.Configured(value = SecurityFeature.SECURITY_ID, root = false)
 @Prototype.Provides(ServerFeatureProvider.class)
 interface SecurityFeatureConfigBlueprint extends Prototype.Factory<SecurityFeature> {
     /**

File: dbclient/dbclient/src/main/java/io/helidon/dbclient/DbColumn.java
Patch:
@@ -60,7 +60,7 @@ public interface DbColumn extends Value<Object> {
      */
     @Override
     default Object get() {
-        return as(javaType());
+        return as(javaType()).get();
     }
 
     /**

File: microprofile/oidc/src/main/java/module-info.java
Patch:
@@ -29,5 +29,7 @@
     exports io.helidon.microprofile.oidc;
 
     provides jakarta.enterprise.inject.spi.Extension with io.helidon.microprofile.oidc.OidcCdiExtension;
+
+    opens io.helidon.microprofile.oidc to weld.core.impl;
 	
 }
\ No newline at end of file

File: webclient/api/src/main/java/io/helidon/webclient/api/Proxy.java
Patch:
@@ -639,8 +639,9 @@ public Proxy build() {
          * @return updated builder instance
          */
         public Builder config(Config config) {
-            if (this.type != ProxyType.SYSTEM) {
-                config.get("type").asString().map(ProxyType::valueOf).ifPresentOrElse(this::type, () -> type(ProxyType.HTTP));
+            config.get("type").asString().map(ProxyType::valueOf).ifPresent(this::type);
+
+            if (this.type != ProxyType.SYSTEM && this.type != ProxyType.NONE) {
                 config.get("host").asString().ifPresent(this::host);
                 config.get("port").asInt().ifPresent(this::port);
                 config.get("username").asString().ifPresent(this::username);

File: webclient/http2/src/main/java/module-info.java
Patch:
@@ -39,4 +39,6 @@
 
     provides io.helidon.webclient.spi.HttpClientSpiProvider
             with io.helidon.webclient.http2.Http2ClientSpiProvider;
+    provides io.helidon.webclient.spi.ProtocolConfigProvider
+            with io.helidon.webclient.http2.Http2ProtocolConfigProvider;
 }

File: integrations/openapi-ui/src/test/java/io/helidon/integrations/openapi/ui/OpenApiUiTest.java
Patch:
@@ -70,7 +70,6 @@ static void setupServer(WebServerConfig.Builder server) {
                                   .staticFile("src/test/resources/greeting.yml")
                                   .cors(cors -> cors.enabled(false))
                                   .addService(OpenApiUi.create())
-                                  .permitAll(true)
                                   .build())
                 .addFeature(OpenApiFeature.builder()
                                     .servicesDiscoverServices(false)
@@ -79,7 +78,6 @@ static void setupServer(WebServerConfig.Builder server) {
                                     .name("openapi-greeting")
                                     .cors(cors -> cors.enabled(false))
                                     .addService(OpenApiUi.create())
-                                    .permitAll(true)
                                     .build())
                 .addFeature(OpenApiFeature.builder()
                                     .servicesDiscoverServices(false)
@@ -89,7 +87,6 @@ static void setupServer(WebServerConfig.Builder server) {
                                                         .webContext("/my-ui")
                                                         .build())
                                     .name("openapi-ui")
-                                    .permitAll(true)
                                     .build());
     }
 

File: metrics/trace-exemplar/src/test/java/io/helidon/metrics/exemplartrace/ExemplarTest.java
Patch:
@@ -28,6 +28,7 @@
 import io.helidon.webserver.testing.junit5.ServerTest;
 import io.helidon.webserver.testing.junit5.SetUpRoute;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -54,15 +55,14 @@ static void routing(HttpRouting.Builder builder) {
     }
 
     @Test
-    void checkForExemplarsInOpenMetricsOutput() throws InterruptedException {
+    @Disabled("Intermittently failing")
+    void checkForExemplarsInOpenMetricsOutput() {
 
         try (Http1ClientResponse response = client.get("/test")
                 .request()) {
             assertThat("Ping status", response.status().code(), is(200));
         }
 
-        Thread.sleep(100); // we must give some time for the asynchronous task to finish
-
         try (Http1ClientResponse response = client.get("/observe/metrics")
                 .accept(MediaTypes.APPLICATION_OPENMETRICS_TEXT)
                 .request()) {

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java
Patch:
@@ -552,7 +552,6 @@ private MetricsObserver configure() {
 
         Contexts.globalContext().register(metricsFactory);
         MetricsConfig.Builder metricsConfigBuilder = MetricsConfig.builder()
-                .permitAll(true)
                 .config(config);
         MetricsConfig metricsConfig = metricsConfigBuilder.build();
         MeterRegistry meterRegistry = metricsFactory.globalRegistry(metricsConfig);

File: microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/OpenApiCdiExtension.java
Patch:
@@ -64,7 +64,6 @@ public void registerService(@Observes @Priority(LIBRARY_BEFORE + 10) @Initialize
                                 ServerCdiExtension server) {
 
         feature = OpenApiFeature.builder()
-                .permitAll(true) // backward compatible behavior for MP
                 .config(componentConfig())
                 .manager(new MpOpenApiManager(ConfigProvider.getConfig()))
                 .build();

File: openapi/openapi/src/test/java/io/helidon/openapi/OpenApiFeatureTest.java
Patch:
@@ -65,23 +65,20 @@ static void server(WebServerConfig.Builder server) {
                                   .staticFile("src/test/resources/greeting.yml")
                                   .webContext("/openapi-greeting")
                                   .cors(cors -> cors.enabled(false))
-                                  .permitAll(true)
                                   .build())
                 .addFeature(OpenApiFeature.builder()
                                     .servicesDiscoverServices(false)
                                     .staticFile("src/test/resources/time-server.yml")
                                     .webContext("/openapi-time")
                                     .name("openapi-time")
                                     .cors(cors -> cors.allowOrigins("http://foo.bar", "http://bar.foo"))
-                                    .permitAll(true)
                                     .build())
                 .addFeature(OpenApiFeature.builder()
                                     .servicesDiscoverServices(false)
                                     .staticFile("src/test/resources/petstore.yaml")
                                     .webContext("/openapi-petstore")
                                     .name("openapi-petstore")
                                     .cors(cors -> cors.enabled(false))
-                                    .permitAll(true)
                                     .build());
 
     }

File: openapi/tests/gh-5792/src/test/java/io/helidon/openapi/tests/yamlparsing/SnakeYAMLV1Test.java
Patch:
@@ -45,7 +45,6 @@ class SnakeYAMLV1Test {
     static void server(WebServerConfig.Builder server) {
         server.addFeature(OpenApiFeature.builder()
                                   .staticFile("target/test-classes/petstore.yaml")
-                                  .permitAll(true)
                                   .build());
     }
     @SetUpRoute

File: builder/processor/src/main/java/io/helidon/builder/processor/TypeHandler.java
Patch:
@@ -451,6 +451,8 @@ private void factorySetterConsumer(InnerClass.Builder classBuilder,
         TypeName builderType;
         if (factoryMethod.factoryMethodReturnType().className().equals("Builder")) {
             builderType = factoryMethod.factoryMethodReturnType();
+        } else if (factoryMethod.factoryMethodReturnType().className().endsWith(".Builder")) {
+            builderType = factoryMethod.factoryMethodReturnType();
         } else {
             builderType = TypeName.create(factoryMethod.factoryMethodReturnType().fqName() + ".Builder");
         }

File: common/types/src/main/java/io/helidon/common/types/TypeNameSupport.java
Patch:
@@ -217,6 +217,9 @@ static TypeName create(String typeName) {
         List<String> packageElements = new ArrayList<>();
 
         while (true) {
+            if (className.isEmpty()) {
+                throw new IllegalArgumentException("Invalid type name: \"" + typeName + "\", got empty string section");
+            }
             if (Character.isUpperCase(className.charAt(0))) {
                 break;
             }

File: config/metadata-processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerBuilderApi.java
Patch:
@@ -115,6 +115,7 @@ private void processBlueprintMethod(TypeName typeName, ConfiguredType configured
                                                                                            optional,
                                                                                            type.kind(),
                                                                                            data.provider(),
+                                                                                           data.providerType(),
                                                                                            deprecated,
                                                                                            data.merge(),
                                                                                            allowedValues);

File: config/metadata-processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerMetaApi.java
Patch:
@@ -204,6 +204,7 @@ private void processTargetType(TypeInfo typeInfo, ConfiguredType type, TypeName
                                                                                                    data.optional(),
                                                                                                    data.kind(),
                                                                                                    data.provider(),
+                                                                                                   data.providerType(),
                                                                                                    data.deprecated(),
                                                                                                    data.merge(),
                                                                                                    data.allowedValues());

File: config/metadata-processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerMetaApiBase.java
Patch:
@@ -91,6 +91,7 @@ void processBuilderMethod(TypeName typeName,
                                                                                                optional,
                                                                                                type.kind(),
                                                                                                data.provider(),
+                                                                                               data.providerType(),
                                                                                                deprecated,
                                                                                                data.merge(),
                                                                                                allowedValues);

File: examples/cors/src/main/java/io/helidon/examples/cors/Main.java
Patch:
@@ -25,7 +25,6 @@
 import io.helidon.webserver.WebServerConfig;
 import io.helidon.webserver.cors.CorsSupport;
 import io.helidon.webserver.http.HttpRouting;
-import io.helidon.webserver.observe.ObserveFeature;
 
 /**
  * Simple Hello World rest application.
@@ -70,8 +69,7 @@ public static void main(final String[] args) {
     static void routing(HttpRouting.Builder routing) {
 
         // Note: Add the CORS routing *before* registering the GreetService routing.
-        routing.register("/greet", corsSupportForGreeting(), new GreetService())
-                .addFeature(ObserveFeature.create());
+        routing.register("/greet", corsSupportForGreeting(), new GreetService());
     }
 
     private static CorsSupport corsSupportForGreeting() {

File: examples/cors/src/test/java/io/helidon/examples/cors/MainTest.java
Patch:
@@ -62,7 +62,7 @@ public class MainTest {
 
     @SetUpServer
     public static void setup(WebServerConfig.Builder server) {
-        server.routing(routing -> Main.routing(routing));
+        server.routing(Main::routing);
     }
 
     @Order(1) // Make sure this runs before the greeting message changes so responses are deterministic.

File: examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/PokemonMain.java
Patch:
@@ -22,7 +22,6 @@
 import io.helidon.logging.common.LogConfig;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.http.HttpRouting;
-import io.helidon.webserver.observe.ObserveFeature;
 
 /**
  * Simple Hello World rest application.
@@ -94,7 +93,6 @@ static void routing(HttpRouting.Builder routing, Config config) {
         // Initialize database schema
         InitializeDb.init(dbClient, !mongo);
 
-        routing.register("/db", new PokemonService(dbClient))
-                .addFeature(ObserveFeature.create());
+        routing.register("/db", new PokemonService(dbClient));
     }
 }

File: examples/employee-app/src/main/java/io/helidon/examples/employee/Main.java
Patch:
@@ -21,7 +21,6 @@
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.WebServerConfig;
 import io.helidon.webserver.http.HttpRouting;
-import io.helidon.webserver.observe.ObserveFeature;
 import io.helidon.webserver.staticcontent.StaticContentService;
 
 /**
@@ -75,8 +74,7 @@ static void setup(WebServerConfig.Builder server) {
      * @param config  configuration of this server
      */
     static void routing(HttpRouting.Builder routing, Config config) {
-        routing.addFeature(ObserveFeature.create())
-               .register("/public", StaticContentService.builder("public")
+        routing.register("/public", StaticContentService.builder("public")
                                                         .welcomeFileName("index.html"))
                .register("/employees", new EmployeeService(config));
     }

File: examples/integrations/microstream/greetings-se/src/main/java/io/helidon/examples/integrations/microstream/greetings/se/Main.java
Patch:
@@ -22,7 +22,6 @@
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.WebServerConfig;
 import io.helidon.webserver.http.HttpRouting;
-import io.helidon.webserver.observe.ObserveFeature;
 
 /**
  * Microstream demo with a simple rest application.
@@ -66,7 +65,6 @@ static void setup(WebServerConfig.Builder server) {
      */
     static void routing(HttpRouting.Builder routing, Config config) {
         GreetingService greetService = new GreetingService(config);
-        routing.addFeature(ObserveFeature.create())
-               .register("/greet", greetService);
+        routing.register("/greet", greetService);
     }
 }

File: examples/messaging/jms-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -70,8 +70,7 @@ static WebServer startServer() throws IOException {
                         // register rest endpoint for sending to Jms
                         .register("/rest/messages", sendingService))
                 .addRouting(WsRouting.builder()
-                        .endpoint("/ws/messages", new WebSocketEndpoint())
-                        .build())
+                        .endpoint("/ws/messages", new WebSocketEndpoint()))
                 .config(config.get("server"))
                 .build();
 

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -67,8 +67,7 @@ static WebServer startServer() {
                                 .register("/rest/messages", sendingService))
                         // register WebSocket endpoint to push messages coming from Kafka to client
                         .addRouting(WsRouting.builder()
-                                .endpoint("/ws/messages", new WebSocketEndpoint())
-                                .build())
+                                .endpoint("/ws/messages", new WebSocketEndpoint()))
                         .config(config.get("server"))
                         .build()
                         .start();

File: examples/metrics/http-status-count-se/src/main/java/io/helidon/examples/se/httpstatuscount/Main.java
Patch:
@@ -20,7 +20,6 @@
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.WebServerConfig;
 import io.helidon.webserver.http.HttpRouting;
-import io.helidon.webserver.observe.ObserveFeature;
 
 /**
  * The application main class.
@@ -69,8 +68,7 @@ static void setup(WebServerConfig.Builder server) {
      * @param routing routing builder
      */
     static void routing(HttpRouting.Builder routing) {
-        routing.addFeature(ObserveFeature.create())
-                .register(HttpStatusMetricService.create()) // no endpoint, just metrics updates
+        routing.register(HttpStatusMetricService.create()) // no endpoint, just metrics updates
                 .register("/simple-greet", new SimpleGreetService())
                 .register("/greet", new GreetService());
     }

File: examples/security/idcs-login/src/main/java/io/helidon/examples/security/idcs/IdcsBuilderMain.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
+import io.helidon.common.context.Contexts;
 import io.helidon.config.Config;
 import io.helidon.http.HttpMediaTypes;
 import io.helidon.logging.common.LogConfig;
@@ -32,7 +33,6 @@
 import io.helidon.security.providers.oidc.common.OidcConfig;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.WebServerConfig;
-import io.helidon.webserver.security.SecurityFeature;
 
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.file;
@@ -96,10 +96,11 @@ static void setup(WebServerConfig.Builder server) {
                         .config(config)
                         .oidcConfig(oidcConfig))
                 .build();
+        // security needs to be available for other features, such as server security feature
+        Contexts.globalContext().register(security);
 
         server.port(PORT)
                 .routing(routing -> routing
-                        .addFeature(SecurityFeature.create(security, config.get("security")))
                         // IDCS requires a web resource for redirects
                         .addFeature(OidcFeature.create(config))
                         // web server does not (yet) have possibility to configure routes in config files, so explicit...

File: examples/security/idcs-login/src/main/java/io/helidon/examples/security/idcs/IdcsMain.java
Patch:
@@ -29,7 +29,6 @@
 import io.helidon.security.providers.oidc.OidcFeature;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.WebServerConfig;
-import io.helidon.webserver.security.SecurityFeature;
 
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.file;
@@ -77,7 +76,6 @@ static void setup(WebServerConfig.Builder server) {
 
         server.config(config)
                 .routing(routing -> routing
-                        .addFeature(SecurityFeature.create(security, config.get("security")))
                         // IDCS requires a web resource for redirects
                         .addFeature(OidcFeature.create(config))
                         // web server does not (yet) have possibility to configure routes in config files, so explicit...

File: examples/security/spi-examples/src/main/java/io/helidon/security/examples/spi/AtzProviderSync.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Authorization provider example. The most simplistic approach.
  *
- * @see AtnProviderSync on how to use custom objects, config and annotations in a provider
+ * @see AtnProviderImpl on how to use custom objects, config and annotations in a provider
  */
 public class AtzProviderSync implements AuthorizationProvider {
     @Override

File: examples/security/spi-examples/src/test/java/io/helidon/security/examples/spi/ProviderSelectorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@ public class ProviderSelectorTest {
     public void integrateIt() {
         Security security = Security.builder()
                 .providerSelectionPolicy(ProviderSelector::create)
-                .addProvider(new AtnProviderSync())
+                .addProvider(new AtnProviderImpl())
                 .addProvider(new AtzProviderSync())
                 .build();
 

File: examples/webclient/standalone/src/main/java/io/helidon/examples/webclient/standalone/ServerMain.java
Patch:
@@ -19,7 +19,6 @@
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.WebServerConfig;
 import io.helidon.webserver.http.HttpRouting;
-import io.helidon.webserver.observe.ObserveFeature;
 
 /**
  * The application main class.
@@ -66,7 +65,6 @@ static void setup(WebServerConfig.Builder server) {
      * @param routing routing builder
      */
     private static void routing(HttpRouting.Builder routing) {
-        routing.addFeature(ObserveFeature.create())
-               .register("/greet", new GreetService());
+        routing.register("/greet", new GreetService());
     }
 }

File: examples/webserver/basics/src/main/java/io/helidon/examples/webserver/basics/Main.java
Patch:
@@ -361,7 +361,7 @@ public static void main(String[] args) {
             System.exit(100);
         }
         server = WebServer.builder()
-                .routing(routingBuilder.build())
+                .routing(routingBuilder)
                 .mediaContext(mediaContextBuilder.build())
                 .build()
                 .start();

File: examples/webserver/websocket/src/main/java/io/helidon/examples/webserver/websocket/Main.java
Patch:
@@ -38,8 +38,7 @@ static void setup(WebServerConfig.Builder server) {
                        .register("/web", staticContent)
                        .register("/rest", messageQueueService))
                .addRouting(WsRouting.builder()
-                                    .endpoint("/websocket/board", new MessageBoardEndpoint())
-                                    .build());
+                                    .endpoint("/websocket/board", new MessageBoardEndpoint()));
     }
 
     /**

File: integrations/graal/native-image-extension/src/main/java/module-info.java
Patch:
@@ -23,7 +23,6 @@
     requires io.helidon.common.features;
     requires io.helidon.config;
     requires io.helidon.logging.common;
-    requires io.helidon.logging.jul;
     requires jakarta.json;
 
     requires transitive org.graalvm.nativeimage;

File: integrations/vault/auths/approle/src/main/java/io/helidon/integrations/vault/auths/approle/AppRoleAuthProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.AuthMethod;
 import io.helidon.integrations.vault.spi.AuthMethodProvider;

File: integrations/vault/auths/approle/src/main/java/io/helidon/integrations/vault/auths/approle/AppRoleVaultAuth.java
Patch:
@@ -21,7 +21,7 @@
 
 import io.helidon.common.Weight;
 import io.helidon.common.Weighted;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.http.HeaderName;
 import io.helidon.http.HeaderNames;
 import io.helidon.integrations.common.rest.RestApi;

File: integrations/vault/auths/common/src/main/java/io/helidon/integrations/vault/auths/common/NoVaultAuth.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Optional;
 
 import io.helidon.common.Weight;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.http.HeaderName;
 import io.helidon.http.HeaderNames;
 import io.helidon.integrations.common.rest.RestApi;

File: integrations/vault/auths/k8s/src/main/java/io/helidon/integrations/vault/auths/k8s/K8sAuthProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.AuthMethod;
 import io.helidon.integrations.vault.spi.AuthMethodProvider;

File: integrations/vault/auths/k8s/src/main/java/io/helidon/integrations/vault/auths/k8s/K8sVaultAuth.java
Patch:
@@ -25,7 +25,7 @@
 
 import io.helidon.common.Weight;
 import io.helidon.common.Weighted;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.http.HeaderName;
 import io.helidon.http.HeaderNames;
 import io.helidon.integrations.common.rest.RestApi;

File: integrations/vault/auths/token/src/main/java/io/helidon/integrations/vault/auths/token/TokenAuthProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.AuthMethod;
 import io.helidon.integrations.vault.spi.AuthMethodProvider;

File: integrations/vault/auths/token/src/main/java/io/helidon/integrations/vault/auths/token/TokenVaultAuth.java
Patch:
@@ -21,7 +21,7 @@
 
 import io.helidon.common.Weight;
 import io.helidon.common.Weighted;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.http.HeaderName;
 import io.helidon.http.HeaderNames;
 import io.helidon.integrations.common.rest.RestApi;

File: integrations/vault/cdi/src/main/java/io/helidon/integrations/vault/cdi/VaultCdiExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import java.util.Set;
 
 import io.helidon.common.HelidonServiceLoader;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.integrations.vault.spi.InjectionProvider;
 import io.helidon.microprofile.cdi.RuntimeStart;

File: integrations/vault/secrets/cubbyhole/src/main/java/io/helidon/integrations/vault/secrets/cubbyhole/CubbyholeEngineProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Engine;
 import io.helidon.integrations.vault.spi.SecretsEngineProvider;

File: integrations/vault/secrets/cubbyhole/src/main/java/io/helidon/integrations/vault/secrets/cubbyhole/CubbyholeSecurityProvider.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Optional;
 import java.util.function.Supplier;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.security.spi.ProviderConfig;
 import io.helidon.security.spi.SecretsProvider;

File: integrations/vault/secrets/cubbyhole/src/main/java/io/helidon/integrations/vault/secrets/cubbyhole/CubbyholeSecurityService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.secrets.cubbyhole;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;

File: integrations/vault/secrets/database/src/main/java/io/helidon/integrations/vault/secrets/database/DbEngineProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Engine;
 import io.helidon.integrations.vault.spi.SecretsEngineProvider;

File: integrations/vault/secrets/kv1/src/main/java/io/helidon/integrations/vault/secrets/kv1/Kv1EngineProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Engine;
 import io.helidon.integrations.vault.spi.InjectionProvider;

File: integrations/vault/secrets/kv1/src/main/java/io/helidon/integrations/vault/secrets/kv1/Kv1SecurityProvider.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Optional;
 import java.util.function.Supplier;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.security.spi.ProviderConfig;
 import io.helidon.security.spi.SecretsProvider;

File: integrations/vault/secrets/kv1/src/main/java/io/helidon/integrations/vault/secrets/kv1/Kv1SecurityService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.secrets.kv1;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;

File: integrations/vault/secrets/kv2/src/main/java/io/helidon/integrations/vault/secrets/kv2/Kv2EngineProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Engine;
 import io.helidon.integrations.vault.spi.InjectionProvider;

File: integrations/vault/secrets/kv2/src/main/java/io/helidon/integrations/vault/secrets/kv2/Kv2SecurityProvider.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Optional;
 import java.util.function.Supplier;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.security.spi.ProviderConfig;
 import io.helidon.security.spi.SecretsProvider;

File: integrations/vault/secrets/kv2/src/main/java/io/helidon/integrations/vault/secrets/kv2/Kv2SecurityService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.secrets.kv2;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;

File: integrations/vault/secrets/pki/src/main/java/io/helidon/integrations/vault/secrets/pki/PkiEngineProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Engine;
 import io.helidon.integrations.vault.spi.InjectionProvider;

File: integrations/vault/secrets/transit/src/main/java/io/helidon/integrations/vault/secrets/transit/TransitEngineProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Engine;
 import io.helidon.integrations.vault.spi.InjectionProvider;

File: integrations/vault/secrets/transit/src/main/java/io/helidon/integrations/vault/secrets/transit/TransitSecurityProvider.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.function.Function;
 
 import io.helidon.common.Base64Value;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.security.SecurityException;
 import io.helidon.security.spi.DigestProvider;

File: integrations/vault/secrets/transit/src/main/java/io/helidon/integrations/vault/secrets/transit/TransitSecurityService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.secrets.transit;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;

File: integrations/vault/sys/sys/src/main/java/io/helidon/integrations/vault/sys/HcpSysProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.SysApi;
 import io.helidon.integrations.vault.spi.InjectionProvider;

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/Vault.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.function.Consumer;
 
 import io.helidon.common.HelidonServiceLoader;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.faulttolerance.FaultTolerance;
 import io.helidon.faulttolerance.FtHandler;
 import io.helidon.http.Method;

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/VaultImpl.java
Patch:
@@ -24,7 +24,7 @@
 
 import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.LazyValue;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.spi.AuthMethodProvider;
 import io.helidon.integrations.vault.spi.SecretsEngineProvider;

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/spi/AuthMethodProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.AuthMethod;
 

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/spi/InjectionProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Optional;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.vault.Vault;
 
 /**

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/spi/SecretsEngineProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Engine;
 import io.helidon.integrations.vault.Secrets;

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/spi/SysProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.SysApi;
 

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/spi/VaultAuth.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 
 import java.util.Optional;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Vault;
 

File: jersey/tests/connector/src/test/java/io/helidon/jersey/connector/ConnectorBase.java
Patch:
@@ -24,6 +24,7 @@
 import io.helidon.webserver.http.ServerRequest;
 import io.helidon.webserver.http.ServerResponse;
 import io.helidon.webserver.testing.junit5.SetUpRoute;
+
 import jakarta.ws.rs.client.Client;
 import jakarta.ws.rs.client.Entity;
 import jakarta.ws.rs.client.WebTarget;
@@ -36,7 +37,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.hasKey;
 
-class ConnectorBase {
+abstract class ConnectorBase {
 
     private String baseURI;
     private Client client;

File: lra/coordinator/server/src/main/java/io/helidon/lra/coordinator/Main.java
Patch:
@@ -48,6 +48,8 @@ public static void main(String[] args) {
                 .build();
 
         WebServer server = WebServer.builder()
+                .featuresDiscoverServices(false)
+                .addFeature(ObserveFeature.just(MetricsObserver.create(), HealthObserver.create(HealthChecks.healthChecks())))
                 .routing(it -> updateRouting(it, config, coordinatorService))
                 .config(config.get("helidon.lra.coordinator.server"))
                 .build();
@@ -61,8 +63,7 @@ public static void main(String[] args) {
     }
 
     private static void updateRouting(HttpRouting.Builder routing, Config config, CoordinatorService coordinatorService) {
-        routing.addFeature(ObserveFeature.just(MetricsObserver.create(), HealthObserver.create(HealthChecks.healthChecks())))
-                .register(config.get("mp.lra.coordinator.context.path")
+        routing.register(config.get("mp.lra.coordinator.context.path")
                         .asString()
                         .orElse("/lra-coordinator"), coordinatorService)
                 .build();

File: metrics/api/src/main/java/io/helidon/metrics/api/MetricsConfigBlueprint.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.TreeMap;
 import java.util.regex.Matcher;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
@@ -143,6 +144,7 @@ static List<Tag> createTags(String pairs) {
      * @return list of hints
      */
     @ConfiguredOption
+    @Option.Default("observe")
     List<String> roles();
 
     /**

File: microprofile/cors/src/main/java/io/helidon/microprofile/cors/CorsSupportMp.java
Patch:
@@ -97,8 +97,7 @@ public CorsSupportMp build() {
         @Override
         protected Builder secondaryLookupSupplier(
                 Supplier<Optional<CrossOriginConfig>> secondaryLookupSupplier) {
-            super.secondaryLookupSupplier(secondaryLookupSupplier);
-            return this;
+            return super.secondaryLookupSupplier(secondaryLookupSupplier);
         }
     }
 

File: microprofile/cors/src/main/java/module-info.java
Patch:
@@ -48,4 +48,5 @@
 
     provides jakarta.enterprise.inject.spi.Extension with io.helidon.microprofile.cors.CorsCdiExtension;
 
+    opens io.helidon.microprofile.cors to weld.core.impl, org.glassfish.hk2.utilities;
 }
\ No newline at end of file

File: microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthAnnotationAnalyzer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 
 import io.helidon.common.Weight;
 import io.helidon.common.Weighted;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.providers.common.spi.AnnotationAnalyzer;
 
 import jakarta.annotation.security.RolesAllowed;

File: microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthProviderService.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.microprofile.jwt.auth;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java
Patch:
@@ -328,7 +328,6 @@ public void registerService(@Observes @Priority(LIBRARY_BEFORE + 10) @Initialize
         registerRestRequestMetrics();
 
         Set<String> vendorMetricsAdded = new HashSet<>();
-        vendorMetricsAdded.add(server.observeRouting());
 
         // now we may have additional sockets we want to add vendor metrics to
         componentConfig().get("vendor-metrics-routings")
@@ -552,7 +551,9 @@ private MetricsObserver configure() {
         MetricsFactory metricsFactory = MetricsFactory.getInstance(config);
 
         Contexts.globalContext().register(metricsFactory);
-        MetricsConfig.Builder metricsConfigBuilder = MetricsConfig.builder().config(config);
+        MetricsConfig.Builder metricsConfigBuilder = MetricsConfig.builder()
+                .permitAll(true)
+                .config(config);
         MetricsConfig metricsConfig = metricsConfigBuilder.build();
         MeterRegistry meterRegistry = metricsFactory.globalRegistry(metricsConfig);
         RegistryFactory.getInstance(meterRegistry); // initialize before first use

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/HelloWorldAsyncResponseTest.java
Patch:
@@ -54,6 +54,7 @@
                 + KEY_PERFORMANCE_INDICATORS_CONFIG_KEY
                 + ".extended",
         value = "true")
+@AddConfig(key = "metrics.permit-all", value = "true")
 public class HelloWorldAsyncResponseTest {
 
     @Inject

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/HelloWorldAsyncResponseWithRestRequestTest.java
Patch:
@@ -51,6 +51,7 @@
 
 @HelidonTest
 @AddConfig(key = "metrics." + MetricsCdiExtension.REST_ENDPOINTS_METRIC_ENABLED_PROPERTY_NAME, value = "true")
+@AddConfig(key = "metrics.permit-all", value = "true")
 class HelloWorldAsyncResponseWithRestRequestTest {
 
     @Inject

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/HelloWorldTest.java
Patch:
@@ -54,6 +54,7 @@
  */
 @HelidonTest
 @AddConfig(key = "metrics." + MetricsCdiExtension.REST_ENDPOINTS_METRIC_ENABLED_PROPERTY_NAME, value = "true")
+@AddConfig(key = "metrics.permit-all", value = "true")
 class HelloWorldTest {
 
     @Inject

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/MpFeatureTest.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import io.helidon.microprofile.testing.junit5.AddConfig;
 import io.helidon.microprofile.testing.junit5.HelidonTest;
 
 import jakarta.inject.Inject;
@@ -31,6 +32,7 @@
 import static org.hamcrest.Matchers.is;
 
 @HelidonTest
+@AddConfig(key = "metrics.permit-all", value = "true")
 public class MpFeatureTest {
     
     @Inject

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/TestBasicPerformanceIndicators.java
Patch:
@@ -33,6 +33,7 @@
 @HelidonTest
 @AddConfig(key = "metrics.scoping.tag-enabled", value = "true")
 @AddConfig(key = "metrics.scoping.tag-name", value = "mp-config")
+@AddConfig(key = "metrics.permit-all", value = "true")
 class TestBasicPerformanceIndicators {
 
     @Inject

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/TestMetricsOnOwnSocket.java
Patch:
@@ -38,13 +38,14 @@
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 
-@HelidonTest()
+@HelidonTest
 // Set up the metrics endpoint on its own socket
 @AddConfig(key = "server.sockets.0.name", value = "metrics")
 // No port setting, so use any available one
 @AddConfig(key = "server.sockets.0.bind-address", value = "0.0.0.0")
-@AddConfig(key = "observe.routing", value = "metrics")
+@AddConfig(key = "server.features.observe.sockets", value = "metrics")
 @AddConfig(key = "metrics.key-performance-indicators.extended", value = "true")
+@AddConfig(key = "metrics.permit-all", value = "true")
 @TestMethodOrder(MethodOrderer.OrderAnnotation.class)
 public class TestMetricsOnOwnSocket {
 

File: microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/OpenApiCdiExtension.java
Patch:
@@ -64,10 +64,11 @@ public void registerService(@Observes @Priority(LIBRARY_BEFORE + 10) @Initialize
                                 ServerCdiExtension server) {
 
         feature = OpenApiFeature.builder()
+                .permitAll(true) // backward compatible behavior for MP
                 .config(componentConfig())
                 .manager(new MpOpenApiManager(ConfigProvider.getConfig()))
                 .build();
-        feature.setup(server.serverRoutingBuilder(), routingBuilder(server));
+        server.addFeature(feature);
     }
 
     @Override

File: microprofile/security/src/main/java/io/helidon/microprofile/security/JerseySecurityFeature.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.Security;
 import io.helidon.security.SecurityContext;
 import io.helidon.security.annotations.Authorized;
@@ -312,7 +312,7 @@ public Builder config(Config config) {
             Config myConfig = config.get("defaults");
             myConfig.get("authorize-annotated-only").asBoolean().ifPresent(this::authorizeAnnotatedOnly);
             myConfig.get("authenticate-annotated-only").asBoolean().ifPresent(this::authenticateAnnotatedOnly);
-            myConfig.get("query-params").asList(QueryParamHandler.class).ifPresent(this::addQueryParamHandlers);
+            myConfig.get("query-params").mapList(QueryParamHandler::create).ifPresent(this::addQueryParamHandlers);
             myConfig.get("debug").asBoolean().filter(bool -> bool).ifPresent(bool -> this.debug());
 
             return this;

File: microprofile/security/src/main/java/io/helidon/microprofile/security/QueryParamHandler.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.QueryParamMapping;
 import io.helidon.security.util.TokenHandler;
 

File: microprofile/security/src/main/java/io/helidon/microprofile/security/SecurityFilter.java
Patch:
@@ -29,8 +29,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import io.helidon.common.HelidonServiceLoader;
+import io.helidon.common.config.Config;
 import io.helidon.common.context.Contexts;
-import io.helidon.config.Config;
 import io.helidon.jersey.common.InvokedResource;
 import io.helidon.security.AuditEvent;
 import io.helidon.security.Security;

File: microprofile/security/src/main/java/io/helidon/microprofile/security/SecurityFilterCommon.java
Patch:
@@ -23,8 +23,8 @@
 import java.util.ServiceLoader;
 
 import io.helidon.common.HelidonServiceLoader;
+import io.helidon.common.config.Config;
 import io.helidon.common.uri.UriQuery;
-import io.helidon.config.Config;
 import io.helidon.microprofile.security.spi.SecurityResponseMapper;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.AuthorizationResponse;

File: microprofile/tracing/src/main/java/io/helidon/microprofile/tracing/TracingCdiExtension.java
Patch:
@@ -27,7 +27,7 @@
 import io.helidon.microprofile.server.ServerCdiExtension;
 import io.helidon.tracing.TracerBuilder;
 import io.helidon.tracing.config.TracingConfig;
-import io.helidon.webserver.tracing.TracingFeature;
+import io.helidon.webserver.observe.tracing.TracingObserver;
 
 import io.opentelemetry.opentracingshim.OpenTracingShim;
 import io.opentracing.Tracer;
@@ -117,8 +117,7 @@ private void serverTracer(@Observes @Priority(PLATFORM_BEFORE + 1) @Initialized(
         ServerCdiExtension server = bm.getExtension(ServerCdiExtension.class);
         JaxRsCdiExtension jaxrs = bm.getExtension(JaxRsCdiExtension.class);
 
-        server.serverRoutingBuilder()
-                .addFeature(TracingFeature.create(tracer, config));
+        server.addObserver(TracingObserver.create(tracer, config));
 
         // we need that `tracing.service` is a required configuration, yet we do not want to just fail
         // if not present. Let's make a "guess" about the service name

File: microprofile/tracing/src/main/java/module-info.java
Patch:
@@ -46,7 +46,7 @@
     requires io.helidon.common;
     requires io.helidon.webserver;
     requires io.helidon.jersey.common;
-    requires io.helidon.webserver.tracing;
+    requires io.helidon.webserver.observe.tracing;
     requires transitive io.helidon.tracing;
     requires io.helidon.tracing.config;
     requires transitive io.helidon.tracing.jersey;

File: openapi/openapi/src/main/java/module-info.java
Patch:
@@ -41,4 +41,7 @@
 
     uses io.helidon.openapi.spi.OpenApiServiceProvider;
     uses io.helidon.openapi.spi.OpenApiManagerProvider;
+
+    provides io.helidon.webserver.spi.ServerFeatureProvider
+            with io.helidon.openapi.OpenApiFeatureProvider;
 }

File: security/abac/policy-el/src/main/java/io/helidon/security/abac/policy/el/JavaxElPolicyExecutor.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 
 import io.helidon.common.Errors;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.ProviderRequest;
 import io.helidon.security.SecurityContext;
 import io.helidon.security.SecurityEnvironment;

File: security/abac/policy-el/src/main/java/io/helidon/security/abac/policy/el/JavaxElPolicyExecutorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.abac.policy.el;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.abac.policy.spi.PolicyExecutor;
 import io.helidon.security.abac.policy.spi.PolicyExecutorService;
 

File: security/abac/policy/src/main/java/io/helidon/security/abac/policy/PolicyValidator.java
Patch:
@@ -34,7 +34,7 @@
 
 import io.helidon.common.Errors;
 import io.helidon.common.HelidonServiceLoader;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.ProviderRequest;
 import io.helidon.security.SecurityLevel;

File: security/abac/policy/src/main/java/io/helidon/security/abac/policy/PolicyValidatorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.abac.policy;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.providers.abac.AbacValidatorConfig;
 import io.helidon.security.providers.abac.spi.AbacValidator;
 import io.helidon.security.providers.abac.spi.AbacValidatorService;

File: security/abac/policy/src/main/java/io/helidon/security/abac/policy/spi/PolicyExecutorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.abac.policy.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.abac.policy.PolicyValidator;
 
 /**

File: security/abac/role/src/main/java/io/helidon/security/abac/role/RoleValidator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@
 import java.util.stream.Collectors;
 
 import io.helidon.common.Errors;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.ProviderRequest;
 import io.helidon.security.Role;

File: security/abac/role/src/main/java/io/helidon/security/abac/role/RoleValidatorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.abac.role;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.providers.abac.AbacValidatorConfig;
 import io.helidon.security.providers.abac.spi.AbacValidator;
 import io.helidon.security.providers.abac.spi.AbacValidatorService;

File: security/abac/scope/src/main/java/io/helidon/security/abac/scope/ScopeValidator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
 import java.util.Set;
 
 import io.helidon.common.Errors;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.Grant;
 import io.helidon.security.ProviderRequest;

File: security/abac/scope/src/main/java/io/helidon/security/abac/scope/ScopeValidatorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.abac.scope;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.providers.abac.AbacProvider;
 import io.helidon.security.providers.abac.AbacValidatorConfig;
 import io.helidon.security.providers.abac.spi.AbacValidator;

File: security/abac/time/src/main/java/io/helidon/security/abac/time/TimeValidator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@
 import java.util.Set;
 
 import io.helidon.common.Errors;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.ProviderRequest;
 import io.helidon.security.SecurityLevel;

File: security/abac/time/src/main/java/io/helidon/security/abac/time/TimeValidatorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.abac.time;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.providers.abac.AbacProvider;
 import io.helidon.security.providers.abac.AbacValidatorConfig;
 import io.helidon.security.providers.abac.spi.AbacValidator;

File: security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProvider.java
Patch:
@@ -31,7 +31,7 @@
 
 import io.helidon.common.Errors;
 import io.helidon.common.HelidonServiceLoader;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.security.AuthorizationResponse;

File: security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProviderService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.abac;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/providers/abac/src/main/java/io/helidon/security/providers/abac/spi/AbacValidatorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.abac.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.providers.abac.AbacValidatorConfig;
 
 /**

File: security/providers/abac/src/test/java/io/helidon/security/providers/abac/Attrib1Validator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 import java.util.Set;
 
 import io.helidon.common.Errors;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.ProviderRequest;
 import io.helidon.security.SecurityLevel;

File: security/providers/common/src/main/java/io/helidon/security/providers/common/OutboundConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.security.EndpointConfig;
@@ -85,7 +85,7 @@ public static OutboundConfig create(Config providerConfig, OutboundTarget... def
     static OutboundConfig createFromConfig(Config providerConfig, OutboundTarget[] defaults) {
         Config config = providerConfig.get(CONFIG_OUTBOUND);
 
-        List<OutboundTarget> configuredTargets = config.asList(OutboundTarget::create).orElse(List.of());
+        List<OutboundTarget> configuredTargets = config.mapList(OutboundTarget::create).orElse(List.of());
 
         boolean useDefaults = configuredTargets.stream().noneMatch(targetConfig -> "default".equals(targetConfig.name()))
                 && (null != defaults);

File: security/providers/common/src/main/java/io/helidon/security/providers/common/OutboundTarget.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.security.ClassToInstanceStore;

File: security/providers/common/src/main/java/io/helidon/security/providers/common/spi/AnnotationAnalyzer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 import java.lang.reflect.Method;
 import java.util.Optional;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.ClassToInstanceStore;
 
 /**

File: security/providers/config-vault/src/main/java/io/helidon/security/providers/config/vault/ConfigVaultProvider.java
Patch:
@@ -23,8 +23,8 @@
 import java.util.function.Supplier;
 
 import io.helidon.common.Base64Value;
+import io.helidon.common.config.Config;
 import io.helidon.common.crypto.SymmetricCipher;
-import io.helidon.config.Config;
 import io.helidon.config.encryption.ConfigProperties;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;

File: security/providers/config-vault/src/main/java/io/helidon/security/providers/config/vault/ConfigVaultProviderService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 
 import io.helidon.common.Weight;
 import io.helidon.common.Weighted;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/providers/google-login/src/main/java/io/helidon/security/providers/google/login/GoogleTokenProvider.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.function.BiFunction;
 import java.util.function.Supplier;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.security.AuthenticationResponse;
@@ -545,9 +545,9 @@ public Builder config(Config config) {
             config.get("proxy-host").asString().ifPresent(this::proxyHost);
             config.get("proxy-port").asInt().ifPresent(this::proxyPort);
             config.get("realm").asString().ifPresent(this::realm);
-            config.get("token").as(TokenHandler::create).ifPresent(this::tokenProvider);
+            config.get("token").map(TokenHandler::create).ifPresent(this::tokenProvider);
             // OutboundConfig.create() expects provider configuration, not outbound
-            config.get("outbound").ifExists(outbound -> outboundConfig(OutboundConfig.create(config)));
+            config.get("outbound").asNode().ifPresent(outbound -> outboundConfig(OutboundConfig.create(config)));
 
             return this;
         }

File: security/providers/google-login/src/main/java/io/helidon/security/providers/google/login/GoogleTokenService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.google.login;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/providers/header/src/main/java/io/helidon/security/providers/header/HeaderAtnOutboundConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 
 import java.util.Optional;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.providers.common.OutboundTarget;
 import io.helidon.security.util.TokenHandler;
 
@@ -124,7 +124,7 @@ public HeaderAtnOutboundConfig build() {
          * @return updated builder instance
          */
         public Builder config(Config config) {
-            config.get("outbound-token").as(TokenHandler::create)
+            config.get("outbound-token").map(TokenHandler::create)
                     .ifPresent(this::tokenHandler);
             config.get("username").asString().ifPresent(this::explicitUser);
 

File: security/providers/header/src/main/java/io/helidon/security/providers/header/HeaderAtnService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.header;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/ConfigUserStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 import java.util.Optional;
 import java.util.Set;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 
@@ -60,7 +60,7 @@ public static SecureUserStore create(Config config) {
         ConfigUserStore store = new ConfigUserStore();
 
         config.asNodeList().ifPresent(configs -> configs.forEach(config1 -> {
-            ConfigUser user = config1.as(ConfigUser::create).get();
+            ConfigUser user = config1.map(ConfigUser::create).get();
             store.users.put(user.login(), user);
         }));
 

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpBasicAuthService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.httpauth;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpBasicOutboundConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.httpauth;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.providers.common.OutboundTarget;
 import io.helidon.security.util.TokenHandler;
 
@@ -153,7 +153,7 @@ public HttpBasicOutboundConfig build() {
          * @return updated builder instance
          */
         public Builder config(Config config) {
-            config.get("outbound-token").as(TokenHandler::create)
+            config.get("outbound-token").map(TokenHandler::create)
                     .ifPresent(this::tokenHandler);
             config.get("username").asString().ifPresent(this::explicitUser);
             config.get("password").asString().ifPresent(this::explicitPassword);

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpDigest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 
 import java.util.Arrays;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 
 /**
  * Digest specific enums.

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpDigestAuthProvider.java
Patch:
@@ -32,7 +32,7 @@
 
 import javax.crypto.Cipher;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.security.AuthenticationResponse;
@@ -312,7 +312,7 @@ private Builder() {
         public Builder config(Config config) {
             config.get("optional").asBoolean().ifPresent(this::optional);
             config.get("realm").asString().ifPresent(this::realm);
-            config.get("users").as(ConfigUserStore::create).ifPresent(this::userStore);
+            config.get("users").map(ConfigUserStore::create).ifPresent(this::userStore);
             config.get("algorithm").asString().as(HttpDigest.Algorithm::valueOf).ifPresent(this::digestAlgorithm);
             config.get("nonce-timeout-millis").asLong()
                     .ifPresent(timeout -> this.digestNonceTimeout(timeout, TimeUnit.MILLISECONDS));
@@ -323,7 +323,7 @@ public Builder config(Config config) {
                     .map(String::toCharArray)
                     .ifPresent(this::digestServerSecret);
 
-            config.get("qop").asList(HttpDigest.Qop::create).ifPresent(qop -> {
+            config.get("qop").mapList(HttpDigest.Qop::create).ifPresent(qop -> {
                 if (qop.isEmpty()) {
                     noDigestQop();
                 } else {

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpDigestAuthService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.httpauth;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/spi/UserStoreService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package io.helidon.security.providers.httpauth.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.providers.httpauth.SecureUserStore;
 
 /**

File: security/providers/http-sign/src/main/java/io/helidon/security/providers/httpsign/HttpSignService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.httpsign;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/providers/http-sign/src/main/java/io/helidon/security/providers/httpsign/InboundClientDefinition.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.Objects;
 import java.util.Optional;
 
+import io.helidon.common.config.Config;
 import io.helidon.common.pki.Keys;
-import io.helidon.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.security.SubjectType;
@@ -277,7 +277,7 @@ public Builder config(Config config) {
             keyId(config.get("key-id").asString().get());
             config.get("principal-name").asString().ifPresent(this::principalName);
             config.get("principal-type").asString().as(SubjectType::valueOf).ifPresent(this::subjectType);
-            config.get("public-key").as(Keys::create).ifPresent(this::publicKeyConfig);
+            config.get("public-key").map(Keys::create).ifPresent(this::publicKeyConfig);
             config.get("hmac.secret").asString().ifPresent(this::hmacSecret);
             config.get("algorithm").asString().ifPresent(this::algorithm);
 

File: security/providers/http-sign/src/main/java/io/helidon/security/providers/httpsign/OutboundTargetDefinition.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.Objects;
 import java.util.Optional;
 
+import io.helidon.common.config.Config;
 import io.helidon.common.pki.Keys;
-import io.helidon.config.Config;
 import io.helidon.security.util.TokenHandler;
 
 /**
@@ -311,8 +311,8 @@ public OutboundTargetDefinition build() {
         public Builder config(Config config) {
             this.keyId(config.get("key-id").asString().get());      // mandatory
             config.get("header").asString().map(HttpSignHeader::valueOf).ifPresent(this::header);
-            config.get("sign-headers").as(SignedHeadersConfig::create).ifPresent(this::signedHeaders);
-            config.get("private-key").as(Keys::create).ifPresent(this::privateKeyConfig);
+            config.get("sign-headers").map(SignedHeadersConfig::create).ifPresent(this::signedHeaders);
+            config.get("private-key").map(Keys::create).ifPresent(this::privateKeyConfig);
             config.get("hmac.secret").asString().ifPresent(this::hmacSecret);
 
             // last, as we configure defaults based on configuration

File: security/providers/http-sign/src/main/java/io/helidon/security/providers/httpsign/SignedHeadersConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 import java.util.Map;
 import java.util.TreeMap;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 

File: security/providers/http-sign/src/test/java/io/helidon/security/providers/httpsign/CurrentSignedHeadersConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ static void initClass() {
 
     @Test
     void testFromConfig() {
-        SignedHeadersConfig shc = config.get("http-signatures.sign-headers").as(SignedHeadersConfig.class).get();
+        SignedHeadersConfig shc = config.get("http-signatures.sign-headers").map(SignedHeadersConfig::create).get();
 
         testThem(shc);
     }

File: security/providers/idcs-mapper/src/main/java/io/helidon/security/providers/idcs/mapper/IdcsRoleMapperProvider.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.List;
 import java.util.Optional;
 
+import io.helidon.common.config.Config;
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
-import io.helidon.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.http.HeaderNames;
@@ -245,7 +245,7 @@ public IdcsRoleMapperProvider build() {
          */
         public B config(Config config) {
             super.config(config);
-            config.get("cache-config").as(EvictableCache::<String, List<Grant>>create).ifPresent(this::roleCache);
+            config.get("cache-config").map(EvictableCache::<String, List<Grant>>create).ifPresent(this::roleCache);
 
             return me;
         }

File: security/providers/idcs-mapper/src/main/java/io/helidon/security/providers/idcs/mapper/IdcsRoleMapperProviderBase.java
Patch:
@@ -28,10 +28,10 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.common.LazyValue;
+import io.helidon.common.config.Config;
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.common.parameters.Parameters;
-import io.helidon.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.http.HeaderValues;
@@ -295,7 +295,7 @@ protected Builder() {
          * @return updated builder instance
          */
         public B config(Config config) {
-            config.get("oidc-config").ifExists(it -> {
+            config.get("oidc-config").asNode().ifPresent(it -> {
                 OidcConfig.Builder builder = OidcConfig.builder();
                 // we do not need JWT validation at all
                 builder.validateJwtWithJwk(false);
@@ -306,7 +306,7 @@ public B config(Config config) {
                 oidcConfig(builder.build());
             });
 
-            config.get("subject-types").asList(cfg -> cfg.asString().map(SubjectType::valueOf).get())
+            config.get("subject-types").mapList(cfg -> cfg.asString().map(SubjectType::valueOf).get())
                     .ifPresent(list -> list.forEach(this::addSubjectType));
             config.get("default-idcs-subject-type").asString().ifPresent(this::defaultIdcsSubjectType);
             return me;

File: security/providers/idcs-mapper/src/main/java/io/helidon/security/providers/idcs/mapper/IdcsRoleMapperProviderService.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.security.providers.idcs.mapper;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/providers/jwt/src/main/java/io/helidon/security/providers/jwt/JwtProviderService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.jwt;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/OidcConfig.java
Patch:
@@ -26,8 +26,8 @@
 
 import io.helidon.common.Errors;
 import io.helidon.common.LazyValue;
+import io.helidon.common.config.Config;
 import io.helidon.common.configurable.Resource;
-import io.helidon.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.cors.CrossOriginConfig;
@@ -417,7 +417,7 @@ public static Builder builder() {
     }
 
     /**
-     * Create a new instance from {@link Config}.
+     * Create a new instance from {@link io.helidon.common.config.Config}.
      * The config instance has to be on the node containing keys used by this class (e.g. client-id).
      *
      * @param config configuration used to obtain OIDC integration values
@@ -963,7 +963,7 @@ public Builder config(Config config) {
             config.get("max-redirects").asInt().ifPresent(this::maxRedirects);
             config.get("force-https-redirects").asBoolean().ifPresent(this::forceHttpsRedirects);
 
-            config.get("cors").as(CrossOriginConfig::create).ifPresent(this::crossOriginConfig);
+            config.get("cors").map(CrossOriginConfig::create).ifPresent(this::crossOriginConfig);
 
             config.get("token-refresh-before-expiration").as(Duration.class).ifPresent(this::tokenRefreshSkew);
 

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/TenantConfig.java
Patch:
@@ -20,7 +20,7 @@
 import java.time.Duration;
 import java.util.Optional;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.security.jwt.jwk.JwkKeys;

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/spi/TenantConfigProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.oidc.common.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 
 /**
  * Java {@link java.util.ServiceLoader} service interface for multitenancy support.

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/spi/TenantIdProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.oidc.common.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 
 /**
  * Java {@link java.util.ServiceLoader} service interface for multitenancy support.

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/DefaultTenantIdProvider.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Optional;
 
 import io.helidon.common.Weight;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.ProviderRequest;
 import io.helidon.security.providers.oidc.common.spi.TenantIdFinder;
 import io.helidon.security.providers.oidc.common.spi.TenantIdProvider;

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcFeature.java
Patch:
@@ -60,7 +60,7 @@
 import io.helidon.webserver.http.HttpRouting;
 import io.helidon.webserver.http.ServerRequest;
 import io.helidon.webserver.http.ServerResponse;
-import io.helidon.webserver.security.SecurityFeature;
+import io.helidon.webserver.security.SecurityHttpFeature;
 
 import jakarta.json.JsonObject;
 
@@ -335,11 +335,11 @@ private void addRequestAsHeader(ServerRequest req, ServerResponse res) {
         Context context = Contexts.context().orElseThrow(() -> new SecurityException("Context must be available"));
 
         Map<String, List<String>> newHeaders = context
-                .get(SecurityFeature.CONTEXT_ADD_HEADERS, Map.class)
+                .get(SecurityHttpFeature.CONTEXT_ADD_HEADERS, Map.class)
                 .map(theMap -> (Map<String, List<String>>) theMap)
                 .orElseGet(() -> {
                     Map<String, List<String>> newMap = new HashMap<>();
-                    context.register(SecurityFeature.CONTEXT_ADD_HEADERS, newMap);
+                    context.register(SecurityHttpFeature.CONTEXT_ADD_HEADERS, newMap);
                     return newMap;
                 });
 

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcProviderService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.providers.oidc;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 

File: security/security/src/main/java/io/helidon/security/EndpointConfig.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 import java.util.Optional;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.util.AbacSupport;
 

File: security/security/src/main/java/io/helidon/security/QueryParamMapping.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 
 import java.util.Map;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.util.TokenHandler;
 
 /**
@@ -67,7 +67,7 @@ public static QueryParamMapping create(String queryParamName, String headerName)
      */
     public static QueryParamMapping create(Config config) {
         String name = config.get("name").asString().get();
-        TokenHandler handler = config.as(TokenHandler::create).get();
+        TokenHandler handler = config.map(TokenHandler::create).get();
         return create(name, handler);
     }
 

File: security/security/src/main/java/io/helidon/security/SecurityImpl.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.LazyValue;
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.security.internal.SecurityAuditEvent;
 import io.helidon.security.spi.AuditProvider;
 import io.helidon.security.spi.AuthenticationProvider;

File: security/security/src/main/java/io/helidon/security/SecurityTime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 

File: security/security/src/main/java/io/helidon/security/spi/DigestProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.security.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 
 /**
  * Provider that can create digests of bytes, and then verify them.

File: security/security/src/main/java/io/helidon/security/spi/EncryptionProvider.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.function.Function;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 
 /**
  * Provider that can encrypt and decrypt secrets.

File: security/security/src/main/java/io/helidon/security/spi/SecretsProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Optional;
 import java.util.function.Supplier;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 
 /**
  * Provider that can retrieve secrets.

File: security/security/src/main/java/io/helidon/security/spi/SecurityProviderService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.security.spi;
 
-import io.helidon.config.Config;
+import io.helidon.common.config.Config;
 
 /**
  * Service to use with ServiceLoader to map configuration to

File: webserver/tests/upgrade/src/main/java/io/helidon/webserver/tests/upgrade/Main.java
Patch:
@@ -39,7 +39,7 @@ public static void main(String[] args) {
 
     public static WebServer startServer(boolean ssl) {
         Keys privateKeyConfig = Keys.builder()
-                .keystore(store -> store.passphrase("helidon")
+                .keystore(store -> store.passphrase("password")
                         .keystore(Resource.create("server.p12")))
                 .build();
 

File: webserver/tests/upgrade/src/test/java/io/helidon/webserver/tests/upgrade/test/UpgradeCodecsCompositionTest.java
Patch:
@@ -81,7 +81,7 @@ static void beforeAll() {
                 .sslContext(insecureContext())
                 .trust(trust -> trust
                         .keystore(store -> store
-                                .passphrase("helidon")
+                                .passphrase("password")
                                 .keystore(Resource.create("server.p12"))))
                 .build();
 

File: config/config/src/main/java/io/helidon/config/spi/ConfigParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@
  * given {@code Builder} by invoking
  * {@link io.helidon.config.Config.Builder#disableParserServices()}.
  * <p>
- * A parser can specify a {@link io.helidon.common.Weight}. If no priority is
+ * A parser can specify a {@link io.helidon.common.Weight}. If no weight is
  * explicitly assigned, the value of {@value io.helidon.common.Weighted#DEFAULT_WEIGHT} is assumed.
  * <p>
  * Parser is used by the config system and a config source provides data as an input stream.

File: config/config/src/main/java/module-info.java
Patch:
@@ -37,8 +37,6 @@
     requires transitive io.helidon.common.config;
     requires transitive io.helidon.common.media.type;
     requires transitive io.helidon.common;
-    requires transitive jakarta.annotation;
-
 
     exports io.helidon.config;
     exports io.helidon.config.spi;

File: config/config/src/test/java/io/helidon/config/AutoLoadedConfigHighPriority.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,13 +16,13 @@
 
 package io.helidon.config;
 
-import jakarta.annotation.Priority;
+import io.helidon.common.Weight;
 
 /**
  * Higher-priority of two auto-loaded filters identical except for their priorities
  * and their expected filtered values.
  */
-@Priority(AutoLoadedConfigPriority.HIGH_PRIORITY_VALUE)
+@Weight(AutoLoadedConfigPriority.HIGH_PRIORITY_VALUE)
 public class AutoLoadedConfigHighPriority extends AutoLoadedConfigPriority {
 
     public static final String EXPECTED_FILTERED_VALUE = "higherPriorityValue";

File: config/config/src/test/java/io/helidon/config/AutoLoadedConfigLowPriority.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,13 +16,13 @@
 
 package io.helidon.config;
 
-import jakarta.annotation.Priority;
+import io.helidon.common.Weight;
 
 /**
  * Lower-priority of two auto-loaded filters identical except for their priorities
  * and their expected filtered values.
  */
-@Priority(AutoLoadedConfigPriority.LOW_PRIORITY_VALUE)
+@Weight(AutoLoadedConfigPriority.LOW_PRIORITY_VALUE)
 public class AutoLoadedConfigLowPriority extends AutoLoadedConfigPriority {
 
     private static final String EXPECTED_FILTERED_VALUE = "lowerPriorityValue";

File: config/config/src/test/java/io/helidon/config/AutoLoadedConfigPriority.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,11 +32,11 @@ public abstract class AutoLoadedConfigPriority implements ConfigFilter {
     public static final String KEY_SUBJECT_TO_AUTO_FILTERING = "key1.subjectToPrioritizedAutoloadedFilter";
 
     public static final int HIGH_PRIORITY_VALUE = 10;
-    public static final int LOW_PRIORITY_VALUE = HIGH_PRIORITY_VALUE + 1;
+    public static final int LOW_PRIORITY_VALUE = HIGH_PRIORITY_VALUE - 1;
 
     @Override
     public String apply(Config.Key key, String stringValue) {
-        // the original implementation was wrong (priorities were inversed and this test was wrong)
+        // the original implementation was wrong (priorities were reversed and this test was wrong)
         // the new approach makes sure the filter with higher priority modifies the value, and
         // any filter down the filter chain sees the modified value, and ignores it
         if (key.toString().equals(KEY_SUBJECT_TO_AUTO_FILTERING)

File: inject/tests/runtime/src/test/java/io/helidon/inject/runtime/testsubjects/HelloInjection$$Application.java
Patch:
@@ -18,17 +18,17 @@
 
 import java.util.Optional;
 
+import io.helidon.common.Generated;
 import io.helidon.inject.api.Application;
 import io.helidon.inject.api.ServiceInjectionPlanBinder;
 
-import jakarta.annotation.Generated;
 import jakarta.inject.Named;
 import jakarta.inject.Singleton;
 
 /**
  * For testing.
  */
-@Generated(value = "example", comments = "API Version: n")
+@Generated(value = "example", comments = "API Version: n", trigger = "io.helidon.inject.tools.ApplicationCreatorDefault")
 @Singleton
 @Named(HelloInjection$$Application.NAME)
 public class HelloInjection$$Application implements Application {

File: inject/tests/runtime/src/test/java/io/helidon/inject/runtime/testsubjects/HelloInjection$$Module.java
Patch:
@@ -18,14 +18,14 @@
 
 import java.util.Optional;
 
+import io.helidon.common.Generated;
 import io.helidon.inject.api.ModuleComponent;
 import io.helidon.inject.api.ServiceBinder;
 
-import jakarta.annotation.Generated;
 import jakarta.inject.Named;
 import jakarta.inject.Singleton;
 
-@Generated(value = "example", comments = "API Version: n")
+@Generated(value = "example", comments = "API Version: n", trigger = "io.helidon.inject.tools.ActivatorCreatorDefault")
 @Singleton
 @Named(HelloInjection$$Module.NAME)
 public final class HelloInjection$$Module implements ModuleComponent {

File: inject/tests/runtime/src/test/java/io/helidon/inject/runtime/testsubjects/HelloInjectionImpl$$injectionActivator.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Optional;
 import java.util.Set;
 
+import io.helidon.common.Generated;
 import io.helidon.common.Weight;
 import io.helidon.common.types.AccessModifier;
 import io.helidon.common.types.TypeName;
@@ -33,7 +34,6 @@
 import io.helidon.inject.runtime.AbstractServiceProvider;
 import io.helidon.inject.runtime.Dependencies;
 
-import jakarta.annotation.Generated;
 import jakarta.inject.Provider;
 import jakarta.inject.Singleton;
 
@@ -42,7 +42,7 @@
 /**
  * Serves as an exemplar of what will is normally code generated.
  */
-@Generated(value = "example", comments = "API Version: N")
+@Generated(value = "example", comments = "API Version: N", trigger = "io.helidon.inject.runtime.testsubjects.HelloInjectionImpl")
 @Singleton
 @Weight(DEFAULT_INJECT_WEIGHT)
 @SuppressWarnings({"unchecked", "checkstyle:TypeName"})

File: inject/tests/runtime/src/test/java/io/helidon/inject/runtime/testsubjects/InjectionWorldImpl$$injectionActivator.java
Patch:
@@ -18,18 +18,18 @@
 
 import java.util.Map;
 
+import io.helidon.common.Generated;
 import io.helidon.common.Weight;
 import io.helidon.inject.api.DependenciesInfo;
 import io.helidon.inject.api.ServiceInfo;
 import io.helidon.inject.runtime.AbstractServiceProvider;
 import io.helidon.inject.runtime.Dependencies;
 
-import jakarta.annotation.Generated;
 import jakarta.inject.Singleton;
 
 import static io.helidon.inject.api.ServiceInfoBasics.DEFAULT_INJECT_WEIGHT;
 
-@Generated(value = "example", comments = "API Version: n")
+@Generated(value = "example", comments = "API Version: n", trigger = "io.helidon.inject.runtime.testsubjects.InjectionWorldImpl")
 @Singleton
 @Weight(DEFAULT_INJECT_WEIGHT)
 public class InjectionWorldImpl$$injectionActivator extends AbstractServiceProvider<InjectionWorldImpl> {

File: security/abac/role/src/main/java/module-info.java
Patch:
@@ -28,6 +28,7 @@
 module io.helidon.security.abac.role {
 
     requires io.helidon.security.providers.abac;
+    requires jakarta.annotation;
 
     requires static io.helidon.common.features.api;
 

File: security/providers/abac/src/main/java/module-info.java
Patch:
@@ -27,6 +27,8 @@
 )
 module io.helidon.security.providers.abac {
 
+    requires jakarta.annotation;
+
     requires static io.helidon.common.features.api;
     requires static io.helidon.config.metadata;
 

File: security/providers/jwt/src/main/java/module-info.java
Patch:
@@ -32,6 +32,7 @@
     requires io.helidon.security.util;
 
     requires static io.helidon.common.features.api;
+    requires static jakarta.annotation;
 
     requires transitive io.helidon.config;
     requires transitive io.helidon.security.jwt;

File: webserver/security/src/main/java/module-info.java
Patch:
@@ -22,7 +22,6 @@
     requires io.helidon.common.context;
     requires io.helidon.security.integration.common;
     requires io.helidon.webserver;
-    requires jakarta.annotation;
     requires java.logging;
 
     requires transitive io.helidon.common.config;

File: webserver/webserver/src/main/java/module-info.java
Patch:
@@ -33,14 +33,14 @@
     requires io.helidon.common.uri;
     requires io.helidon.inject.api;  // needed to compile injection generated classes
     requires io.helidon.logging.common;
-    requires jakarta.annotation;
     requires java.logging; // only used to keep logging active until shutdown hook finishes
     requires java.management;
 
     requires static io.helidon.config.metadata;
     requires static io.helidon.inject.configdriven.runtime;
     requires static io.helidon.inject.runtime;
     requires static jakarta.inject;
+    requires static jakarta.annotation;
     requires static java.compiler;
 
     requires transitive io.helidon.common.buffers;

File: webserver/observe/log/src/main/java/io/helidon/webserver/observe/log/LogService.java
Patch:
@@ -102,7 +102,6 @@ public void routing(HttpRules rules) {
         }
 
         rules.get("/loggers")
-                .get("/loggers", this::allLoggersHandler)
                 .get("/loggers", this::allLoggersHandler)
                 .get("/loggers/{logger}", this::loggerHandler)
                 .post("/loggers/{logger}", this::setLevelHandler)
@@ -165,7 +164,6 @@ private void unsetLoggerHandler(ServerRequest req, ServerResponse res) {
     }
 
     private void setLevelHandler(ServerRequest req, ServerResponse res) {
-        System.out.println("Here");
         String logger = req.path().pathParameters().first("logger").orElse("");
         JsonObject requestJson = READER.read(JsonpSupport.JSON_OBJECT_TYPE,
                                              req.content().inputStream(),

File: integrations/oci/tls-certificates/src/main/java/io/helidon/integrations/oci/tls/certificates/DefaultOciCertificatesTlsManagerProvider.java
Patch:
@@ -43,7 +43,8 @@ public String configKey() {
     public TlsManager create(Config config,
                              String name) {
         OciCertificatesTlsManagerConfig cfg = OciCertificatesTlsManagerConfig.create(config);
-        return new DefaultOciCertificatesTlsManager(cfg, name, config);
+        return TlsManagerProvider.getOrCreate(cfg,
+                (c) -> new DefaultOciCertificatesTlsManager(cfg, name, config));
     }
 
 }

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/ClearingQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
 import jakarta.persistence.EntityManager;
 import jakarta.persistence.Query;
 
+@Deprecated(since = "4.0")
 final class ClearingQuery extends DelegatingQuery {
 
     private final EntityManager entityManager;

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/ClearingStoredProcedureQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
 import jakarta.persistence.EntityManager;
 import jakarta.persistence.StoredProcedureQuery;
 
+@Deprecated(since = "4.0")
 final class ClearingStoredProcedureQuery extends DelegatingStoredProcedureQuery {
 
     private final EntityManager entityManager;

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/ClearingTypedQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
 import jakarta.persistence.EntityManager;
 import jakarta.persistence.TypedQuery;
 
+@Deprecated(since = "4.0")
 final class ClearingTypedQuery<X> extends DelegatingTypedQuery<X> {
 
     private final EntityManager entityManager;

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/ExtendedEntityManager.java
Patch:
@@ -30,7 +30,10 @@
 /**
  * A {@link DelegatingEntityManager} created to support extended
  * persistence contexts.
+ *
+ * @deprecated This is an internal class used by the now-deprecated {@link JpaExtension} class.
  */
+@Deprecated(since = "4.0")
 class ExtendedEntityManager extends DelegatingEntityManager {
 
 

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/JpaTransactionScopedEntityManager.java
Patch:
@@ -57,7 +57,10 @@
  *
  * <p>As with all {@link EntityManager} implementations, instances of
  * this class are not safe for concurrent use by multiple threads.</p>
+ *
+ * @deprecated This is an internal class used only by the now-deprecated {@link JpaExtension} class.
  */
+@Deprecated(since = "4.0")
 @Vetoed
 final class JpaTransactionScopedEntityManager extends DelegatingEntityManager {
 

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/JtaDataSourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@
 import jakarta.transaction.TransactionSynchronizationRegistry;
 
 @ApplicationScoped
+@Deprecated(since = "4.0")
 class JtaDataSourceProvider implements PersistenceUnitInfoBean.DataSourceProvider {
 
 

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/Messages.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
 import java.text.MessageFormat;
 import java.util.ResourceBundle;
 
+@Deprecated(since = "4.0")
 final class Messages {
 
   private static final ResourceBundle MESSAGES = ResourceBundle.getBundle(Messages.class.getName());

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,10 +17,10 @@
 /**
  * Provides classes and interfaces that integrate the
  * provider-independent parts of <a
- * href="https://jakarta.ee/specifications/persistence/3.0/"
+ * href="https://jakarta.ee/specifications/persistence/3.1/"
  * target="_parent">JPA</a> into CDI.
  *
- * @see io.helidon.integrations.cdi.jpa.JpaExtension
+ * @see io.helidon.integrations.cdi.jpa.PersistenceExtension
  *
  * @see io.helidon.integrations.cdi.jpa.PersistenceUnitInfoBean
  */

File: integrations/cdi/jpa-cdi/src/main/java/module-info.java
Patch:
@@ -20,10 +20,10 @@
 /**
  * Provides classes and interfaces that integrate the
  * provider-independent parts of <a
- * href="https://jakarta.ee/specifications/persistence/3.0/"
+ * href="https://jakarta.ee/specifications/persistence/3.1/"
  * target="_parent">JPA</a> into CDI.
  *
- * @see io.helidon.integrations.cdi.jpa.JpaExtension
+ * @see io.helidon.integrations.cdi.jpa.PersistenceExtension
  *
  * @see io.helidon.integrations.cdi.jpa.PersistenceUnitInfoBean
  */
@@ -32,7 +32,7 @@
         in = HelidonFlavor.MP,
         path = "JPA"
 )
-@SuppressWarnings({ "requires-automatic"})
+@SuppressWarnings({ "deprecation", "requires-automatic"})
 module io.helidon.integrations.cdi.jpa {
   
     requires jakarta.xml.bind;

File: integrations/microstream/health/src/main/java/io/helidon/integrations/microstream/health/MicrostreamHealthCheck.java
Patch:
@@ -139,7 +139,7 @@ public Builder name(String name) {
          * @return updated builder instance
          * @deprecated use {@link #timeout(Duration)} instead
          */
-        @Deprecated(since = "4.0.0")
+        @Deprecated(since = "4.0.0", forRemoval = true)
         public Builder timeout(long duration, TimeUnit timeUnit) {
             this.timeoutDuration = duration;
             this.timeoutUnit = timeUnit;

File: tracing/providers/jaeger/src/main/java/io/helidon/tracing/providers/jaeger/JaegerTracerBuilder.java
Patch:
@@ -153,7 +153,7 @@ public class JaegerTracerBuilder implements TracerBuilder<JaegerTracerBuilder> {
 
     static final boolean DEFAULT_ENABLED = true;
     static final String DEFAULT_HTTP_HOST = "localhost";
-    static final int DEFAULT_SCHEDULE_DELAY = 30_000;
+    static final int DEFAULT_SCHEDULE_DELAY = 5_000;
     static final int DEFAULT_HTTP_PORT = 14250;
     static final int DEFAULT_MAX_QUEUE_SIZE = 2048;
     static final int DEFAULT_MAX_EXPORT_BATCH_SIZE = 512;

File: tracing/providers/jaeger/src/test/java/io/helidon/tracing/providers/jaeger/JaegerTracerBuilderTest.java
Patch:
@@ -77,7 +77,7 @@ void testConfigDefaults() {
         assertThat("Span Processor type", jBuilder.spanProcessorType(), is(JaegerTracerBuilder.SpanProcessorType.BATCH));
         assertThat("Sampler param", jBuilder.samplerParam(), is(Integer.valueOf(1)));
         assertThat("Exporter timeout", jBuilder.exporterTimeout(), is(Duration.ofSeconds(10)));
-        assertThat("Schedule delay", jBuilder.scheduleDelay(), is(Duration.ofSeconds(30)));
+        assertThat("Schedule delay", jBuilder.scheduleDelay(), is(Duration.ofSeconds(5)));
         assertThat("Max Queue Size", jBuilder.maxQueueSize(), is(2048));
         assertThat("Max Export Batch Size", jBuilder.maxExportBatchSize(), is(512));
     }

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/SendingService.java
Patch:
@@ -35,13 +35,15 @@ class SendingService implements HttpService {
 
         String kafkaServer = config.get("app.kafka.bootstrap.servers").asString().get();
         String topic = config.get("app.kafka.topic").asString().get();
+        String compression = config.get("app.kafka.compression").asString().orElse("none");
 
         // Prepare channel for connecting processor -> kafka connector with specific subscriber configuration,
         // channel -> connector mapping is automatic when using KafkaConnector.configBuilder()
         Channel<String> toKafka = Channel.<String>builder()
                                          .subscriberConfig(KafkaConnector.configBuilder()
                                                                          .bootstrapServers(kafkaServer)
                                                                          .topic(topic)
+                                                                         .compressionType(compression)
                                                                          .keySerializer(StringSerializer.class)
                                                                          .valueSerializer(StringSerializer.class)
                                                                          .build())

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/WebSocketEndpoint.java
Patch:
@@ -47,6 +47,7 @@ public void onOpen(WsSession session) {
 
         String kafkaServer = config.get("app.kafka.bootstrap.servers").asString().get();
         String topic = config.get("app.kafka.topic").asString().get();
+        String compression = config.get("app.kafka.compression").asString().orElse("none");
 
         // Prepare channel for connecting kafka connector with specific publisher configuration -> listener,
         // channel -> connector mapping is automatic when using KafkaConnector.configBuilder()
@@ -60,6 +61,7 @@ public void onOpen(WsSession session) {
                         .enableAutoCommit(true)
                         .keyDeserializer(StringDeserializer.class)
                         .valueDeserializer(StringDeserializer.class)
+                        .compressionType(compression)
                         .build()
                 )
                 .build();
@@ -72,7 +74,7 @@ public void onOpen(WsSession session) {
                 .listener(fromKafka, payload -> {
                     System.out.println("Kafka says: " + payload);
                     // Send message received from Kafka over websocket
-                    session.send(payload, false);
+                    session.send(payload, true);
                 })
                 .build()
                 .start();

File: integrations/graal/native-image-extension/src/main/java/module-info.java
Patch:
@@ -21,13 +21,12 @@
     requires io.github.classgraph;
     requires io.helidon.common.features.api;
     requires io.helidon.common.features;
-    requires io.helidon.config.mp;
     requires io.helidon.config;
     requires io.helidon.logging.common;
     requires io.helidon.logging.jul;
     requires jakarta.json;
 
-    requires transitive org.graalvm.sdk;
+    requires transitive org.graalvm.nativeimage;
 
     exports io.helidon.integrations.graal.nativeimage.extension;
 	

File: messaging/connectors/kafka/src/main/java/module-info.java
Patch:
@@ -42,7 +42,7 @@
     requires static jakarta.cdi;
     requires static jakarta.inject;
     requires static kafka.clients;
-    requires static org.graalvm.sdk;
+    requires static org.graalvm.nativeimage;
 
     requires transitive io.helidon.config;
     requires transitive microprofile.reactive.messaging.api;

File: messaging/messaging/src/main/java/module-info.java
Patch:
@@ -26,7 +26,7 @@
         in = HelidonFlavor.SE,
         path = "Messaging"
 )
-@Aot(description = "Experimental support in native image")
+@Aot
 @SuppressWarnings({ "requires-automatic", "requires-transitive-automatic" })
 module io.helidon.messaging {
 

File: tracing/providers/jaeger/src/main/java/module-info.java
Patch:
@@ -34,6 +34,9 @@
     requires io.opentelemetry.sdk.common;
     requires io.opentelemetry.sdk.trace;
     requires io.opentelemetry.sdk;
+    // this was missing from module path, need an explicit requires
+    // as kotlin is modularized
+    requires kotlin.stdlib;
 
     requires static io.helidon.common.features.api;
     requires static io.helidon.config.metadata;

File: microprofile/server/src/main/java/io/helidon/microprofile/server/RoutingPath.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Path of a {@link io.helidon.webserver.http.HttpService} to register with routing.
  * If a service is not annotated with this annotation, it would be registered without a path using
- * {@link io.helidon.webserver.http.HttpRules#register(java.util.function.Supplier[])}.
+ * {@link io.helidon.webserver.http.HttpRules#register(io.helidon.webserver.http.HttpService[])}.
  *
  * Configuration can be overridden using configuration:
  * <ul>

File: webserver/security/src/main/java/io/helidon/webserver/security/SecurityFeature.java
Patch:
@@ -125,7 +125,7 @@ private SecurityFeature(Security security, Config config, SecurityHandler defaul
 
     /**
      * Create a consumer of routing config to be
-     * {@link io.helidon.webserver.http.HttpRouting.Builder#register(java.util.function.Supplier[])}  registered} with
+     * {@link io.helidon.webserver.http.HttpRouting.Builder#addFeature(java.util.function.Supplier)   registered} with
      * web server routing to process security requests.
      * This method is to be used together with other routing methods to protect web resources programmatically.
      * Example:
@@ -143,7 +143,7 @@ public static SecurityFeature create(Security security) {
 
     /**
      * Create a consumer of routing config to be
-     * {@link io.helidon.webserver.http.HttpRouting.Builder#register(java.util.function.Supplier[])}  registered} with
+     * {@link io.helidon.webserver.http.HttpRouting.Builder#addFeature(java.util.function.Supplier)  registered} with
      * web server routing to process security requests.
      * This method configures security and web server integration from a config instance
      *
@@ -157,7 +157,7 @@ public static SecurityFeature create(Config config) {
 
     /**
      * Create a consumer of routing config to be
-     * {@link io.helidon.webserver.http.HttpRouting.Builder#register(java.util.function.Supplier[])}  registered} with
+     * {@link io.helidon.webserver.http.HttpRouting.Builder#addFeature(java.util.function.Supplier)  registered} with
      * web server routing to process security requests.
      * This method expects initialized security and creates web server integration from a config instance
      *

File: webserver/static-content/src/main/java/io/helidon/webserver/staticcontent/StaticContentService.java
Patch:
@@ -33,7 +33,7 @@
  * Serves 'static content' (files) from filesystem or using a classloader to the
  * {@link io.helidon.webserver.WebServer WebServer}
  * {@link io.helidon.webserver.http.HttpRouting}. It is possible to
- * {@link io.helidon.webserver.http.HttpRouting.Builder#register(java.util.function.Supplier[]) register} it on the routing.
+ * {@link io.helidon.webserver.http.HttpRouting.Builder#register(HttpService[]) register} it on the routing.
  * <pre>{@code
  * // Serve content of attached '/static/pictures' on '/pics'
  * Routing.builder()

File: webserver/tracing/src/main/java/io/helidon/webserver/tracing/TracingFeature.java
Patch:
@@ -78,8 +78,7 @@ private TracingFeature(Builder builder) {
      *
      * @param tracer tracer to use for tracing spans created by this feature
      * @return tracing configuration to register with
-     *         {@link
-     *         io.helidon.webserver.http.HttpRouting.Builder#register(java.util.function.Supplier[])}
+     *         {@link io.helidon.webserver.http.HttpRouting.Builder#addFeature(java.util.function.Supplier)}
      */
     public static TracingFeature create(Tracer tracer) {
         return create(tracer, TracingConfig.ENABLED);

File: webserver/webserver/src/test/java/io/helidon/webserver/http/HttpRoutingTest.java
Patch:
@@ -118,12 +118,12 @@ public Handler getHandler() {
         }
 
         @Override
-        public HttpRouting.Builder register(Supplier<? extends HttpService>... service) {
+        public HttpRouting.Builder register(HttpService... service) {
             return null;
         }
 
         @Override
-        public HttpRouting.Builder register(String path, Supplier<? extends HttpService>... service) {
+        public HttpRouting.Builder register(String path, HttpService... service) {
             return null;
         }
 

File: webserver/webserver/src/test/java/io/helidon/webserver/http/HttpRulesTest.java
Patch:
@@ -17,7 +17,6 @@
 package io.helidon.webserver.http;
 
 import java.util.function.Function;
-import java.util.function.Supplier;
 import java.util.stream.Stream;
 
 import io.helidon.http.Method;
@@ -119,12 +118,12 @@ public Handler getHandler() {
         }
 
         @Override
-        public HttpRules register(Supplier<? extends HttpService>... service) {
+        public HttpRules register(HttpService... service) {
             return null;
         }
 
         @Override
-        public HttpRules register(String pathPattern, Supplier<? extends HttpService>... service) {
+        public HttpRules register(String pathPattern, HttpService... service) {
             return null;
         }
 

File: webserver/webserver/src/main/java/io/helidon/webserver/http/SecureHandler.java
Patch:
@@ -50,7 +50,7 @@ public static SecureHandler authenticate() {
      * Create a security handler that enforces authorization.
      *
      * @param roleHint optional hint for role names the user is expected to be in
-     * @return a new handler that requires authroization
+     * @return a new handler that requires authorization
      */
     public static SecureHandler authorize(String... roleHint) {
         return new SecureHandler(false, true, roleHint);

File: examples/microprofile/openapi/src/main/java/io/helidon/microprofile/examples/openapi/GreetResource.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.microprofile.examples.openapi.basic;
+package io.helidon.microprofile.examples.openapi;
 
 import jakarta.enterprise.context.RequestScoped;
 import jakarta.inject.Inject;
@@ -50,7 +50,7 @@
  *
  * Note that the output will include not only the annotated endpoints from this
  * class but also an endpoint added by the
- * {@link io.helidon.microprofile.examples.openapi.basic.internal.SimpleAPIModelReader}.
+ * {@link io.helidon.microprofile.examples.openapi.internal.SimpleAPIModelReader}.
  *
  * The message is returned as a JSON object.
  */

File: examples/microprofile/openapi/src/main/java/io/helidon/microprofile/examples/openapi/GreetingMessage.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.microprofile.examples.openapi.basic;
+package io.helidon.microprofile.examples.openapi;
 
 /**
  * POJO defining the greeting message content.

File: examples/microprofile/openapi/src/main/java/io/helidon/microprofile/examples/openapi/GreetingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.microprofile.examples.openapi.basic;
+package io.helidon.microprofile.examples.openapi;
 
 import java.util.concurrent.atomic.AtomicReference;
 

File: examples/microprofile/openapi/src/main/java/io/helidon/microprofile/examples/openapi/internal/SimpleAPIFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.examples.openapi.internal;
+package io.helidon.microprofile.examples.openapi.internal;
 
 import java.util.Map;
 

File: examples/microprofile/openapi/src/main/java/io/helidon/microprofile/examples/openapi/internal/SimpleAPIModelReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.examples.openapi.internal;
+package io.helidon.microprofile.examples.openapi.internal;
 
 import org.eclipse.microprofile.openapi.OASFactory;
 import org.eclipse.microprofile.openapi.OASModelReader;

File: examples/microprofile/openapi/src/main/java/io/helidon/microprofile/examples/openapi/internal/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,4 +17,4 @@
 /**
  * Internal classes supporting Helidon MP OpenAPI.
  */
-package io.helidon.microprofile.examples.openapi.basic.internal;
+package io.helidon.microprofile.examples.openapi.internal;

File: examples/microprofile/openapi/src/main/java/io/helidon/microprofile/examples/openapi/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,6 @@
  */
 
 /**
- * Helidon MicroProfile OpenAPI basic example.
+ * Helidon MicroProfile OpenAPI example.
  */
-package io.helidon.microprofile.examples.openapi.basic;
+package io.helidon.microprofile.examples.openapi;

File: examples/openapi/src/main/java/io/helidon/examples/openapi/Main.java
Patch:
@@ -73,8 +73,7 @@ static void setup(WebServerConfig.Builder server) {
     static void routing(HttpRouting.Builder routing) {
         Config config = Config.global();
         routing.addFeature(ObserveFeature.create())
-                .addFeature(OpenApiFeature.builder()
-                        .config(config.get(OpenApiFeature.Builder.CONFIG_KEY)))
+                .addFeature(OpenApiFeature.create(config.get("openapi")))
                 .register("/greet", new GreetService());
     }
 

File: openapi/openapi-ui/src/main/java/io/helidon/openapi/ui/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,6 @@
  */
 
 /**
- * Internal classes supporting the Helidon OpenAPI example.
+ * Helidon OpenAPI UI support.
  */
-package io.helidon.examples.openapi.internal;
+package io.helidon.openapi.ui;

File: openapi/openapi/src/main/java/io/helidon/openapi/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Helidon common OpenAPI classes.
+ * Helidon OpenAPI support.
  */
 package io.helidon.openapi;

File: openapi/openapi/src/main/java/io/helidon/openapi/spi/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Integration test to make sure apps can use the older release of SnakeYAML if needed.
+ * OpenAPI SPI.
  */
-package io.helidon.tests.integration.yamlparsing;
+package io.helidon.openapi.spi;

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/ExceptionalStmtIT.java
Patch:
@@ -21,14 +21,16 @@
 import io.helidon.dbclient.DbClientException;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.model.Pokemon.POKEMONS;
 import static org.junit.jupiter.api.Assertions.fail;
 
 /**
  * Test exceptional states.
  */
-class ExceptionalStmtIT extends AbstractIT {
+@ExtendWith(DbClientParameterResolver.class)
+class ExceptionalStmtIT {
 
     private static final System.Logger LOGGER = System.getLogger(ExceptionalStmtIT.class.getName());
 

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/FlowControlIT.java
Patch:
@@ -24,6 +24,7 @@
 import io.helidon.tests.integration.dbclient.common.model.Type;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.model.Type.TYPES;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -35,6 +36,7 @@
 /**
  * Verify proper flow control handling in query processing.
  */
+@ExtendWith(DbClientParameterResolver.class)
 public class FlowControlIT {
 
     private static final System.Logger LOGGER = System.getLogger(FlowControlIT.class.getName());

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/GetStatementIT.java
Patch:
@@ -26,12 +26,14 @@
 import io.helidon.tests.integration.dbclient.common.utils.RangePoJo;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.utils.VerifyData.verifyPokemonsIdRange;
 
 /**
  * Test DbStatementGet methods.
  */
+@ExtendWith(DbClientParameterResolver.class)
 public class GetStatementIT {
 
     private final DbClient dbClient;

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/HealthCheckIT.java
Patch:
@@ -19,11 +19,12 @@
 
 import io.helidon.config.Config;
 import io.helidon.dbclient.DbClient;
+import io.helidon.dbclient.health.DbClientHealthCheck;
 import io.helidon.health.HealthCheck;
 import io.helidon.health.HealthCheckResponse;
-import io.helidon.dbclient.health.DbClientHealthCheck;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
@@ -33,6 +34,7 @@
 /**
  * Verify that health check works.
  */
+@ExtendWith(DbClientParameterResolver.class)
 public class HealthCheckIT {
 
     private static final System.Logger LOGGER = System.getLogger(HealthCheckIT.class.getName());

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/InterceptorIT.java
Patch:
@@ -21,6 +21,7 @@
 import io.helidon.dbclient.DbClientServiceContext;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.model.Pokemon.POKEMONS;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -29,6 +30,7 @@
 /**
  * Verify services handling.
  */
+@ExtendWith(DbClientParameterResolver.class)
 public class InterceptorIT {
 
     private final Config config;

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/QueryStatementIT.java
Patch:
@@ -26,13 +26,15 @@
 import io.helidon.tests.integration.dbclient.common.utils.RangePoJo;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.utils.VerifyData.verifyPokemonsIdRange;
 
 /**
  * Test DbStatementQuery methods.
  */
-public class QueryStatementIT extends AbstractIT {
+@ExtendWith(DbClientParameterResolver.class)
+public class QueryStatementIT {
 
     private final DbClient dbClient;
 

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/SimpleGetIT.java
Patch:
@@ -22,14 +22,16 @@
 import io.helidon.dbclient.DbRow;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.model.Pokemon.POKEMONS;
 import static io.helidon.tests.integration.dbclient.common.utils.VerifyData.verifyPokemon;
 
 /**
  * Test set of basic JDBC get calls.
  */
-public class SimpleGetIT extends AbstractIT {
+@ExtendWith(DbClientParameterResolver.class)
+public class SimpleGetIT {
 
     private final DbClient dbClient;
     private final Config config;

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/SimpleQueriesIT.java
Patch:
@@ -22,14 +22,16 @@
 import io.helidon.dbclient.DbRow;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.model.Pokemon.POKEMONS;
 import static io.helidon.tests.integration.dbclient.common.utils.VerifyData.verifyPokemon;
 
 /**
  * Test set of basic JDBC queries.
  */
-public class SimpleQueriesIT extends AbstractIT {
+@ExtendWith(DbClientParameterResolver.class)
+public class SimpleQueriesIT {
 
     private final DbClient dbClient;
     private final Config config;

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/TransactionExceptionalStmtIT.java
Patch:
@@ -20,16 +20,18 @@
 
 import io.helidon.dbclient.DbClient;
 import io.helidon.dbclient.DbClientException;
-
 import io.helidon.dbclient.DbTransaction;
+
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.model.Pokemon.POKEMONS;
 import static org.junit.jupiter.api.Assertions.fail;
 
 /**
  * Test exceptional states.
  */
+@ExtendWith(DbClientParameterResolver.class)
 public class TransactionExceptionalStmtIT {
 
     private static final System.Logger LOGGER = System.getLogger(TransactionExceptionalStmtIT.class.getName());

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/TransactionGetIT.java
Patch:
@@ -23,14 +23,16 @@
 import io.helidon.dbclient.DbTransaction;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.model.Pokemon.POKEMONS;
 import static io.helidon.tests.integration.dbclient.common.utils.VerifyData.verifyPokemon;
 
 /**
  * Test set of basic JDBC get calls in transaction.
  */
-public class TransactionGetIT extends AbstractIT {
+@ExtendWith(DbClientParameterResolver.class)
+public class TransactionGetIT {
 
     private final DbClient dbClient;
     private final Config config;

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/TransactionQueriesIT.java
Patch:
@@ -23,14 +23,16 @@
 import io.helidon.dbclient.DbTransaction;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import static io.helidon.tests.integration.dbclient.common.model.Pokemon.POKEMONS;
 import static io.helidon.tests.integration.dbclient.common.utils.VerifyData.verifyPokemon;
 
 /**
  * Test set of basic JDBC queries in transaction.
  */
-public class TransactionQueriesIT extends AbstractIT {
+@ExtendWith(DbClientParameterResolver.class)
+public class TransactionQueriesIT {
 
     private final DbClient dbClient;
     private final Config config;

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/utils/MapperProvider.java
Patch:
@@ -13,15 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.tests.integration.dbclient.common.spi;
+package io.helidon.tests.integration.dbclient.common.utils;
 
 import java.util.Optional;
 
 import io.helidon.dbclient.DbMapper;
 import io.helidon.dbclient.spi.DbMapperProvider;
 import io.helidon.tests.integration.dbclient.common.model.Pokemon;
 import io.helidon.tests.integration.dbclient.common.model.Pokemon.PokemonMapper;
-import io.helidon.tests.integration.dbclient.common.utils.RangePoJo;
 
 /**
  * Mapper provider used in integration tests.

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/utils/TestConfig.java
Patch:
@@ -22,6 +22,9 @@
  */
 public class TestConfig {
 
+    /** Last used id in {@code Pokemon} table. */
+    public static final int LAST_POKEMON_ID = 1000;
+
     private static final System.Logger LOGGER = System.getLogger(TestConfig.class.getName());
     private static final String CONFIG_PROPERTY_NAME = "io.helidon.tests.integration.dbclient.config";
     private static final String DEFAULT_CONFIG_FILE = "test.yaml";

File: examples/metrics/filtering/se/src/main/java/io/helidon/examples/metrics/filtering/se/GreetService.java
Patch:
@@ -77,7 +77,7 @@ public class GreetService implements HttpService {
      */
     @Override
     public void routing(HttpRules rules) {
-        rules.get("/", this::timeGet, this::getDefaultMessageHandler)
+        rules.get("/", this::timeGet)
                 .get("/{name}", this::countPersonalized, this::getMessageHandler)
                 .put("/greeting", this::updateGreetingHandler);
     }
@@ -142,7 +142,7 @@ private void updateGreetingHandler(ServerRequest request,
     }
 
     private void timeGet(ServerRequest request, ServerResponse response) {
-        timerForGets.record((Runnable) response::next);
+        timerForGets.record(() -> getDefaultMessageHandler(request, response));
     }
 
     private void countPersonalized(ServerRequest request, ServerResponse response) {

File: examples/metrics/filtering/se/src/main/java/io/helidon/examples/metrics/filtering/se/Main.java
Patch:
@@ -96,7 +96,7 @@ static void setup(WebServerConfig.Builder server) {
     static void routing(HttpRouting.Builder routing, MetricsConfig.Builder metricsConfigBuilder) {
         Config config = Config.global();
 
-        MeterRegistry meterRegistry = MetricsFactory.getInstance(config).globalRegistry();
+        MeterRegistry meterRegistry = MetricsFactory.getInstance(config).globalRegistry(metricsConfigBuilder.build());
 
         MetricsObserver metrics = MetricsObserver.builder()
                 .metricsConfig(metricsConfigBuilder)

File: examples/metrics/filtering/se/src/test/java/io/helidon/examples/metrics/filtering/se/MainTest.java
Patch:
@@ -28,7 +28,6 @@
 import jakarta.json.JsonBuilderFactory;
 import jakarta.json.JsonObject;
 import org.hamcrest.CoreMatchers;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -78,7 +77,6 @@ public void testHelloWorld() {
     }
 
     @Test
-    @Disabled // application metrics returns 404
     public void testMetrics() {
         try (Http1ClientResponse response = client.get("/greet").request()) {
             assertThat(response.as(String.class), containsString("Hello World!"));

File: examples/metrics/http-status-count-se/src/main/java/io/helidon/examples/se/httpstatuscount/HttpStatusMetricService.java
Patch:
@@ -74,11 +74,10 @@ static boolean isInProgress() {
         return IN_PROGRESS.get() != 0;
     }
 
-    // Edited to adopt Ciaran's fix later in the thread.
     private void updateRange(ServerRequest request, ServerResponse response) {
         IN_PROGRESS.incrementAndGet();
+        response.whenSent(() -> logMetric(response));
         response.next();
-        logMetric(response);
     }
 
     private void logMetric(ServerResponse response) {

File: examples/metrics/http-status-count-se/src/main/java/io/helidon/examples/se/httpstatuscount/Main.java
Patch:
@@ -67,10 +67,8 @@ static void setup(WebServerConfig.Builder server) {
      * Set up routing.
      *
      * @param routing routing builder
-     * @param config  configuration of this server
      */
     static void routing(HttpRouting.Builder routing) {
-        Config config = Config.global();
         routing.addFeature(ObserveFeature.create())
                 .register(HttpStatusMetricService.create()) // no endpoint, just metrics updates
                 .register("/simple-greet", new SimpleGreetService())

File: examples/metrics/http-status-count-se/src/test/java/io/helidon/examples/se/httpstatuscount/MainTest.java
Patch:
@@ -26,7 +26,6 @@
 import jakarta.json.Json;
 import jakarta.json.JsonBuilderFactory;
 import jakarta.json.JsonObject;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestMethodOrder;
@@ -56,14 +55,13 @@ public static void setup(WebServerConfig.Builder server) {
     }
 
     @Test
-    @Disabled
     public void testMicroprofileMetrics() {
         try (Http1ClientResponse response = client.get("/simple-greet/greet-count").request()) {
             assertThat(response.as(String.class), containsString("Hello World!"));
         }
 
         try (Http1ClientResponse response = client.get("/observe/metrics").request()) {
-            assertThat("Metrics output", response.as(String.class), containsString("application_accessctr_total"));
+            assertThat("Metrics output", response.as(String.class), containsString("accessctr_total"));
         }
     }
 

File: examples/metrics/kpi/src/test/java/io/helidon/examples/metrics/kpi/MainTest.java
Patch:
@@ -28,7 +28,6 @@
 import jakarta.json.Json;
 import jakarta.json.JsonBuilderFactory;
 import jakarta.json.JsonObject;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -79,7 +78,6 @@ public void testHelloWorld() {
     }
 
     @Test
-    @Disabled
     public void testMetrics() {
         try (Http1ClientResponse response = client.get("/greet").request()) {
             assertThat(response.as(String.class), containsString("Hello World!"));
@@ -92,7 +90,7 @@ public void testMetrics() {
 
         try (Http1ClientResponse response = client.get("/observe/metrics/" + KPI_REGISTRY_TYPE).request()) {
             assertThat("Returned metrics output", response.as(String.class),
-                    containsString("# TYPE " + KPI_REGISTRY_TYPE + "_requests_inFlight_current"));
+                    containsString("# TYPE " + "requests_inFlight"));
         }
     }
 }

File: metrics/api/src/main/java/io/helidon/metrics/api/ScopingConfigBlueprint.java
Patch:
@@ -34,11 +34,11 @@ interface ScopingConfigBlueprint {
 
     /**
      * Default scope value to associate with meters that are registered without an explicit setting; no setting means meters
-     * receive no default scope value.
+     * are assigned scope {@value io.helidon.metrics.api.Meter.Scope#DEFAULT}.
      *
      * @return default scope value
      */
-    @ConfiguredOption(key = "default")
+    @ConfiguredOption(key = "default", value = Meter.Scope.DEFAULT)
     Optional<String> defaultValue();
 
     /**

File: metrics/providers/micrometer/src/main/java/io/helidon/metrics/providers/micrometer/MMeterRegistry.java
Patch:
@@ -247,9 +247,10 @@ public Iterable<String> scopes() {
 
     @Override
     public boolean isMeterEnabled(String name, Map<String, String> tags, Optional<String> scope) {
+        String effectiveScope = scope.orElse(SystemTagsManager.instance().effectiveScope(scope)
+                                                     .orElse(io.helidon.metrics.api.Meter.Scope.DEFAULT));
         return metricsConfig.enabled()
-                && (scope.isEmpty()
-                    || metricsConfig.isMeterEnabled(name, scope.get()));
+                && metricsConfig.isMeterEnabled(name, effectiveScope);
     }
 
     @Override

File: builder/processor/src/main/java/io/helidon/builder/processor/TypeHandler.java
Patch:
@@ -261,6 +261,9 @@ void generateFromConfig(Method.Builder method,
     }
 
     String configGet(AnnotationDataOption configured) {
+        if (configured.configMerge()) {
+            return "config";
+        }
         return "config.get(\"" + configured.configKey() + "\")";
     }
 

File: common/processor/class-model/src/main/java/io/helidon/common/processor/classmodel/Type.java
Patch:
@@ -33,7 +33,7 @@ static Type fromTypeName(TypeName typeName) {
             if (typeName.array()
                     || Optional.class.getName().equals(typeName.declaredName())) {
                 return ConcreteType.builder()
-                        .type(TypeName.create(typeName.declaredName()))
+                        .type(typeName)
                         .build();
             } else if (typeName.wildcard()) {
                 boolean isObject = typeName.name().equals("?") || Object.class.getName().equals(typeName.name());

File: examples/quickstarts/helidon-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/GreetService.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Collections;
 import java.util.concurrent.atomic.AtomicReference;
 
+import io.helidon.common.config.Config;
 import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
@@ -52,8 +53,8 @@ public class GreetService implements HttpService {
      */
     private final AtomicReference<String> greeting = new AtomicReference<>();
 
-    GreetService() {
-        greeting.set("Hello");
+    GreetService(Config appConfig) {
+        greeting.set(appConfig.get("greeting").asString().orElse("Ciao"));
     }
 
     /**

File: examples/quickstarts/helidon-standalone-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/GreetService.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Collections;
 import java.util.concurrent.atomic.AtomicReference;
 
+import io.helidon.common.config.Config;
 import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
@@ -52,8 +53,8 @@ public class GreetService implements HttpService {
      */
     private final AtomicReference<String> greeting = new AtomicReference<>();
 
-    GreetService() {
-        greeting.set("Hello");
+    GreetService(Config appConfig) {
+        greeting.set(appConfig.get("greeting").asString().orElse("Ciao"));
     }
 
     /**

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/HelloWorldApp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 import jakarta.ws.rs.core.Application;
 
 @ApplicationScoped
-@ApplicationPath("/")
+@ApplicationPath("/helloworld")
 public class HelloWorldApp extends Application {
 
     @Override

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/HelloWorldAsyncResponseWithRestRequestTest.java
Patch:
@@ -61,7 +61,7 @@ class HelloWorldAsyncResponseWithRestRequestTest {
     private MetricRegistry baseRegistry;
 
     @Test
-    void checkForAsyncMethodRESTRequestMetric() throws NoSuchMethodException, IOException {
+    void checkForAsyncMethodRESTRequestMetric() throws NoSuchMethodException {
 
         MetricID idForRestRequestTimer = MetricsCdiExtension.restEndpointTimerMetricID(
                 HelloWorldResource.class.getMethod("getAsync", AsyncResponse.class));

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/HelloWorldResource.java
Patch:
@@ -46,7 +46,7 @@
 /**
  * HelloWorldResource class.
  */
-@Path("helloworld")
+@Path("/")
 @RequestScoped
 @Counted
 public class HelloWorldResource {

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/TestConfigProcessing.java
Patch:
@@ -30,7 +30,7 @@ class TestConfigProcessing {
     @Test
     void checkTopLeveTagsIgnoredForMetrics() {
         MetricsCdiExtension extension = CDI.current().getBeanManager().getExtension(MetricsCdiExtension.class);
-        Config seConfig = extension.seComponentConfig();
+        Config seConfig = extension.componentConfig();
         Config metricsTags = seConfig.get("tags");
         assertThat("Tags setting is present", metricsTags.asString().isPresent(), is(false));
     }

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/TestMetricsOnOwnSocket.java
Patch:
@@ -43,7 +43,7 @@
 @AddConfig(key = "server.sockets.0.name", value = "metrics")
 // No port setting, so use any available one
 @AddConfig(key = "server.sockets.0.bind-address", value = "0.0.0.0")
-@AddConfig(key = "metrics.routing", value = "metrics")
+@AddConfig(key = "observe.routing", value = "metrics")
 @AddConfig(key = "metrics.key-performance-indicators.extended", value = "true")
 @TestMethodOrder(MethodOrderer.OrderAnnotation.class)
 public class TestMetricsOnOwnSocket {

File: microprofile/server/src/main/java/io/helidon/microprofile/server/JaxRsCdiExtension.java
Patch:
@@ -291,8 +291,8 @@ private static class CatchAllExceptionMapper implements ExceptionMapper<Exceptio
         @Override
         public Response toResponse(Exception exception) {
             serverRequest.context().register("unmappedException", exception);
-            if (exception instanceof WebApplicationException) {
-                return ((WebApplicationException) exception).getResponse();
+            if (exception instanceof WebApplicationException wae) {
+                return wae.getResponse();
             } else {
                 LOGGER.log(Level.WARNING, () -> "Internal server error", exception);
                 return Response.serverError().build();

File: microprofile/server/src/main/java/module-info.java
Patch:
@@ -44,6 +44,7 @@
     requires transitive io.helidon.microprofile.cdi;
     requires transitive io.helidon.webserver.context;
     requires transitive io.helidon.webserver;
+    requires transitive io.helidon.webserver.observe;
     requires transitive jakarta.cdi;
     requires transitive jakarta.json;
     requires transitive jakarta.ws.rs;

File: tests/functional/multiport/src/test/java/io/helidon/tests/functional/multiport/MainTest.java
Patch:
@@ -70,8 +70,7 @@ static void destroyClass() {
     static Stream<Params> initParams() {
         return Stream.of(
                 new Params("@default", true, false, false),
-                new Params("health", false, false, true),
-                new Params("metrics", false, true, false),
+                new Params("observe", false, true, true),
                 // when no named routing, serves default routing
                 new Params("nothing", true, false, false)
         );

File: tests/integration/health/mp-disabled/src/test/java/io/helidon/tests/integration/health/mp/disabled/HealthDisabledMainTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 
 import io.helidon.microprofile.server.Server;
 
-import jakarta.ws.rs.NotFoundException;
+import jakarta.ws.rs.ServiceUnavailableException;
 import jakarta.ws.rs.client.Client;
 import jakarta.ws.rs.client.ClientBuilder;
 import jakarta.ws.rs.client.WebTarget;
@@ -54,7 +54,7 @@ void testHealthEndpoint() {
                 .get(String.class);
 
         // health should not work
-        assertThrows(NotFoundException.class, () -> baseTarget.path("/health")
+        assertThrows(ServiceUnavailableException.class, () -> baseTarget.path("/health")
                 .request()
                 .get(String.class));
     }

File: webserver/observe/metrics/src/main/java/module-info.java
Patch:
@@ -17,7 +17,6 @@
 import io.helidon.common.features.api.Feature;
 import io.helidon.common.features.api.HelidonFlavor;
 
-
 /**
  * Helidon WebServer Observability Metrics Support.
  */
@@ -34,7 +33,6 @@
     requires java.management;
 
     requires static io.helidon.common.features.api;
-    requires static io.helidon.config.metadata;
 
     requires transitive io.helidon.common.config;
     requires transitive io.helidon.webserver.observe;

File: webserver/tests/observe/health/src/test/java/io/helidon/webserver/tests/observe/health/ObserveHealthTest.java
Patch:
@@ -22,8 +22,7 @@
 import io.helidon.webclient.http1.Http1ClientResponse;
 import io.helidon.webserver.http.HttpRouting;
 import io.helidon.webserver.observe.ObserveFeature;
-import io.helidon.webserver.observe.health.HealthFeature;
-import io.helidon.webserver.observe.health.HealthObserveProvider;
+import io.helidon.webserver.observe.health.HealthObserver;
 import io.helidon.webserver.testing.junit5.ServerTest;
 import io.helidon.webserver.testing.junit5.SetUpRoute;
 
@@ -49,7 +48,7 @@ class ObserveHealthTest {
     @SetUpRoute
     static void routing(HttpRouting.Builder routing) {
         healthCheck = new MyHealthCheck();
-        routing.addFeature(ObserveFeature.create(HealthObserveProvider.create(HealthFeature.create(healthCheck))));
+        routing.addFeature(ObserveFeature.just(HealthObserver.create(healthCheck)));
     }
 
     @BeforeEach

File: jersey/connector/src/main/java/module-info.java
Patch:
@@ -24,6 +24,7 @@
 
     requires io.helidon.config;
     requires io.helidon.webclient;
+    requires io.helidon.webclient.http2;
     requires jakarta.ws.rs;
     requires java.logging;
     requires jersey.common;

File: webclient/http2/src/main/java/module-info.java
Patch:
@@ -37,4 +37,6 @@
 
     exports io.helidon.webclient.http2;
 
+    provides io.helidon.webclient.spi.HttpClientSpiProvider
+            with io.helidon.webclient.http2.Http2ClientSpiProvider;
 }

File: integrations/neo4j/health/src/main/java/io/helidon/integrations/neo4j/health/Neo4jHealthCheck.java
Patch:
@@ -69,7 +69,7 @@ public HealthCheckResponse call() {
                 var serverInfo = resultSummary.server();
 
                 var responseBuilder = builder
-                        .detail("server", serverInfo.version() + "@" + serverInfo.address())
+                        .detail("server", serverInfo.protocolVersion() + "@" + serverInfo.address())
                         .detail("edition", edition);
 
                 var databaseInfo = resultSummary.database();

File: config/metadata-processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerMetaApiBase.java
Patch:
@@ -40,13 +40,13 @@ List<ConfiguredOptionData> findConfiguredOptionAnnotations(TypedElementInfo elem
             return metaOptions.annotationValues()
                     .stream()
                     .flatMap(List::stream)
-                    .map(ConfiguredOptionData::createMeta)
+                    .map(it -> ConfiguredOptionData.createMeta(aptEnv(), it))
                     .toList();
         }
 
         if (elementInfo.hasAnnotation(META_OPTION)) {
             Annotation metaOption = elementInfo.annotation(META_OPTION);
-            return List.of(ConfiguredOptionData.createMeta(metaOption));
+            return List.of(ConfiguredOptionData.createMeta(aptEnv(), metaOption));
         }
 
         return List.of();

File: config/metadata-processor/src/main/java/io/helidon/config/metadata/processor/TypeHandlerMetaApiBlueprint.java
Patch:
@@ -60,7 +60,7 @@ public TypeHandlerResult handle() {
         ConfiguredAnnotation configured = ConfiguredAnnotation.createMeta(blueprint.annotation(META_CONFIGURED));
 
         ConfiguredType type = new ConfiguredType(configured,
-                                                 builderType,
+                                                 prototype,
                                                  targetType,
                                                  true);
 

File: openapi/src/main/java/io/helidon/openapi/SeOpenApiFeature.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.helidon.openapi;
 
+import io.helidon.config.metadata.Configured;
+
 /**
  * SE implementation of {@link OpenApiFeature}.
  */
@@ -43,6 +45,7 @@ protected String openApiContent(io.helidon.openapi.OpenApiFeature.OpenAPIMediaTy
     /**
      * Builder class for the SE OpenAPI feature.
      */
+    @Configured(root = true, prefix = "openapi")
     public static class Builder extends OpenApiFeature.Builder<Builder, SeOpenApiFeature> {
 
         private static final System.Logger LOGGER = System.getLogger(Builder.class.getName());

File: webserver/observe/health/src/main/java/module-info.java
Patch:
@@ -34,6 +34,7 @@
     requires java.management;
 
     requires static io.helidon.common.features.api;
+    requires static io.helidon.config.metadata;
 
     requires transitive io.helidon.common.config;
     requires transitive io.helidon.health;

File: webserver/observe/metrics/src/main/java/io/helidon/webserver/observe/metrics/MetricsFeature.java
Patch:
@@ -27,6 +27,7 @@
 import io.helidon.common.media.type.MediaType;
 import io.helidon.common.media.type.MediaTypes;
 import io.helidon.config.Config;
+import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.http.HeaderValues;
 import io.helidon.http.HttpException;
@@ -391,7 +392,7 @@ private void setUpDisabledEndpoints(HttpRules rules) {
     /**
      * A fluent API builder to build instances of {@link MetricsFeature}.
      */
-    //public static final class Builder extends HelidonFeatureSupport.Builder<Builder, MetricsFeature> {
+    @Configured(root = true, prefix = "metrics")
     public static class Builder extends HelidonFeatureSupport.Builder<Builder, MetricsFeature> {
         private LazyValue<MeterRegistry> meterRegistry;
         private MetricsConfig.Builder metricsSettingsBuilder = MetricsConfig.builder();

File: webserver/observe/metrics/src/main/java/module-info.java
Patch:
@@ -27,13 +27,13 @@
 module io.helidon.webserver.observe.metrics {
 
     requires io.helidon.common.context;
-    requires io.helidon.common.features.api;
     requires io.helidon.http.media.jsonp;
     requires io.helidon.metrics.api;
     requires io.helidon.servicecommon;
     requires io.helidon.webserver;
     requires java.management;
 
+    requires static io.helidon.common.features.api;
     requires static io.helidon.config.metadata;
 
     requires transitive io.helidon.common.config;

File: webserver/service-common/src/main/java/io/helidon/webserver/servicecommon/RestServiceSettings.java
Patch:
@@ -85,7 +85,7 @@ static Builder builder() {
     /**
      * Builder for {@link RestServiceSettings}.
      */
-    @Configured()
+    @Configured
     interface Builder extends io.helidon.common.Builder<Builder, RestServiceSettings> {
 
         /**
@@ -125,6 +125,7 @@ interface Builder extends io.helidon.common.Builder<Builder, RestServiceSettings
          * @return updated builder
          */
         @ConfiguredOption(key = CorsEnabledServiceHelper.CORS_CONFIG_KEY,
+                          type = CrossOriginConfig.class,
                           kind = ConfiguredOption.Kind.MAP)
         Builder crossOriginConfig(CrossOriginConfig.Builder crossOriginConfigBuilder);
 

File: http/encoding/deflate/src/main/java/io/helidon/http/encoding/deflate/DeflateEncoding.java
Patch:
@@ -87,7 +87,7 @@ public ContentDecoder decoder() {
     public ContentEncoder encoder() {
         return new ContentEncoder() {
             @Override
-            public OutputStream encode(OutputStream network) {
+            public OutputStream apply(OutputStream network) {
                 return new DeflaterOutputStream(network);
             }
 

File: http/encoding/encoding/src/main/java/io/helidon/http/encoding/ContentDecoder.java
Patch:
@@ -17,13 +17,13 @@
 package io.helidon.http.encoding;
 
 import java.io.InputStream;
-import java.util.function.Function;
+import java.util.function.UnaryOperator;
 
 /**
  * Content decoder.
  */
 @FunctionalInterface
-public interface ContentDecoder extends Function<InputStream, InputStream> {
+public interface ContentDecoder extends UnaryOperator<InputStream> {
     /**
      * No op content decoder.
      */

File: http/encoding/gzip/src/main/java/io/helidon/http/encoding/gzip/GzipEncoding.java
Patch:
@@ -87,7 +87,7 @@ public ContentDecoder decoder() {
     public ContentEncoder encoder() {
         return new ContentEncoder() {
             @Override
-            public OutputStream encode(OutputStream network) {
+            public OutputStream apply(OutputStream network) {
                 try {
                     return new GZIPOutputStream(network);
                 } catch (IOException e) {

File: webclient/tests/webclient/src/test/java/io/helidon/webclient/tests/TracingPropagationTest.java
Patch:
@@ -64,7 +64,7 @@ class TracingPropagationTest {
     private final URI uri;
 
     TracingPropagationTest(URI uri) {
-        Tracer tracer = OpenTracing.create(this.tracer);
+        Tracer tracer = OpenTracing.create(TracingPropagationTest.tracer);
         this.uri = uri.resolve("/greet");
         this.client = Http1Client.builder()
                 .baseUri(this.uri)
@@ -111,7 +111,8 @@ void testTracingSuccess() throws InterruptedException {
 
         // the server traces asynchronously, some spans may be written after we receive the response.
         // we need to try to wait for such spans
-        assertThat("There should be 2 spans reported", tracer.finishedSpans(), hasSize(2));
+        // re-introduced content-write span
+        assertThat("There should be 3 spans reported", tracer.finishedSpans(), hasSize(3));
 
 
         // we need the first span - parentId 0

File: webserver/webserver/src/main/java/io/helidon/webserver/http/ServerResponseBase.java
Patch:
@@ -91,7 +91,6 @@ public void send() {
         send(BufferData.EMPTY_BYTES);
     }
 
-    @SuppressWarnings({"rawtypes", "unchecked"})
     @Override
     public void send(Object entity) {
         if (entity instanceof byte[] bytes) {
@@ -193,7 +192,7 @@ protected byte[] entityBytes(byte[] configuredEntity) {
             ContentEncoder encoder = contentEncodingContext.encoder(requestHeaders);
             // we want to preserve optimization here, let's create a new byte array
             ByteArrayOutputStream baos = new ByteArrayOutputStream(entity.length);
-            OutputStream os = encoder.encode(baos);
+            OutputStream os = encoder.apply(baos);
             try {
                 os.write(entity);
                 os.close();
@@ -217,7 +216,7 @@ protected OutputStream contentEncode(OutputStream outputStream) {
             ContentEncoder encoder = contentEncodingContext.encoder(requestHeaders);
             encoder.headers(headers());
 
-            return encoder.encode(outputStream);
+            return encoder.apply(outputStream);
         }
         return outputStream;
     }

File: integrations/oci/tls-certificates/src/test/java/io/helidon/integrations/oci/tls/certificates/OciCertificatesTlsManagerTest.java
Patch:
@@ -47,9 +47,6 @@ void reset() {
     }
 
     @Test
-    // left here since the repeat ensured the integrity the async code where container startup & shutdown showed some side affects
-    // that were tricky to reproduce.
-    //    @RepeatedTest(10)
     void serverRuntime() throws Exception {
         Services services = InjectionServices.realizedServices();
         LifecycleHook lifecycleHook = services.lookupFirst(LifecycleHook.class).get();

File: cors/src/main/java/io/helidon/cors/CorsSupportHelper.java
Patch:
@@ -372,10 +372,10 @@ public Aggregator aggregator() {
     private boolean isRequestTypeNormal(CorsRequestAdapter<Q> requestAdapter, boolean silent) {
         // If no origin header or same as host, then just normal
         Optional<String> originOpt = requestAdapter.firstHeader(HeaderNames.ORIGIN);
-        Optional<String> hostOpt = requestAdapter.firstHeader(HeaderNames.HOST);
+        String host = requestAdapter.requestedUri().host();
 
-        boolean result = originOpt.isEmpty() || (hostOpt.isPresent() && originOpt.get().contains("://" + hostOpt.get()));
-        LogHelper.logIsRequestTypeNormal(result, silent, requestAdapter, originOpt, hostOpt);
+        boolean result = originOpt.isEmpty() || originOpt.get().contains("://" + host);
+        LogHelper.logIsRequestTypeNormal(result, silent, requestAdapter, originOpt, host);
         return result;
     }
 

File: cors/src/main/java/io/helidon/cors/CorsResponseAdapter.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.cors;
 
-import io.helidon.http.Http;
+import io.helidon.http.HeaderName;
 
 /**
  * <em>Not for use by developers.</em>
@@ -40,7 +40,7 @@ public interface CorsResponseAdapter<T> {
      * @param value header value to add
      * @return the adapter
      */
-    CorsResponseAdapter<T> header(Http.HeaderName key, String value);
+    CorsResponseAdapter<T> header(HeaderName key, String value);
 
     /**
      * Arranges to add the specified header and value to the eventual response.
@@ -49,7 +49,7 @@ public interface CorsResponseAdapter<T> {
      * @param value header value to add
      * @return the adapter
      */
-    CorsResponseAdapter<T> header(Http.HeaderName key, Object value);
+    CorsResponseAdapter<T> header(HeaderName key, Object value);
 
     /**
      * Returns a response with the forbidden status and the specified error message, without any headers assigned

File: examples/cors/src/main/java/io/helidon/examples/cors/GreetService.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Collections;
 
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -102,13 +102,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON_BF.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting = GreetingMessage.fromRest(jo).getMessage();
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/integrations/micrometer/se/src/main/java/io/helidon/examples/integrations/micrometer/se/GreetService.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Collections;
 
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRequest;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
@@ -120,13 +120,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON_BF.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting = GreetingMessage.fromRest(jo).getMessage();
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/integrations/microstream/greetings-se/src/main/java/io/helidon/examples/integrations/microstream/greetings/se/GreetingService.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.logging.Logger;
 
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.integrations.microstream.core.EmbeddedStorageManagerBuilder;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
@@ -125,13 +125,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting.set(jo.getString("greeting"));
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/integrations/oci/atp/src/main/java/io/helidon/examples/integrations/oci/atp/AtpService.java
Patch:
@@ -36,7 +36,7 @@
 import io.helidon.dbclient.DbClient;
 import io.helidon.dbclient.DbRow;
 import io.helidon.dbclient.jdbc.JdbcClientProvider;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -85,7 +85,7 @@ private void generateWallet(ServerRequest req, ServerResponse res) {
 
         if (walletResponse.getContentLength() == 0) {
             LOGGER.log(Level.SEVERE, "GenerateAutonomousDatabaseWalletResponse is empty");
-            res.status(Http.Status.NOT_FOUND_404).send();
+            res.status(Status.NOT_FOUND_404).send();
             return;
         }
 
@@ -94,7 +94,7 @@ private void generateWallet(ServerRequest req, ServerResponse res) {
             walletContent = walletResponse.getInputStream().readAllBytes();
         } catch (IOException e) {
             LOGGER.log(Level.SEVERE, "Error processing GenerateAutonomousDatabaseWalletResponse", e);
-            res.status(Http.Status.INTERNAL_SERVER_ERROR_500).send();
+            res.status(Status.INTERNAL_SERVER_ERROR_500).send();
             return;
         }
 

File: examples/integrations/oci/objectstorage-cdi/src/main/java/io/helidon/examples/integrations/oci/objectstorage/cdi/ObjectStorageResource.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
 
 import com.oracle.bmc.objectstorage.ObjectStorage;
 import com.oracle.bmc.objectstorage.requests.DeleteObjectRequest;
@@ -90,10 +90,10 @@ public Response download(@PathParam("file-name") String fileName) {
         try (InputStream fileStream = getObjectResponse.getInputStream()) {
             byte[] objectContent = fileStream.readAllBytes();
             Response.ResponseBuilder ok = Response.ok(objectContent)
-                    .header(Http.HeaderNames.CONTENT_DISPOSITION.defaultCase(), "attachment; filename=\"" + fileName + "\"")
+                    .header(HeaderNames.CONTENT_DISPOSITION.defaultCase(), "attachment; filename=\"" + fileName + "\"")
                     .header("opc-request-id", getObjectResponse.getOpcRequestId())
                     .header("request-id", getObjectResponse.getOpcClientRequestId())
-                    .header(Http.HeaderNames.CONTENT_LENGTH.defaultCase(), getObjectResponse.getContentLength());
+                    .header(HeaderNames.CONTENT_LENGTH.defaultCase(), getObjectResponse.getContentLength());
 
             return ok.build();
         } catch (IOException e) {

File: examples/integrations/oci/vault/src/main/java/io/helidon/examples/integrations/oci/vault/VaultService.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.Base64Value;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -111,7 +111,7 @@ private void getSecret(ServerRequest req, ServerResponse res) {
                 res.send(Base64Value.createFromEncoded(((Base64SecretBundleContentDetails) content).getContent())
                         .toDecodedString());
             } else {
-                res.status(Http.Status.INTERNAL_SERVER_ERROR_500).send("Invalid secret content type");
+                res.status(Status.INTERNAL_SERVER_ERROR_500).send("Invalid secret content type");
             }
         }, res);
 
@@ -218,7 +218,7 @@ private void ociHandler(Consumer<ServerResponse> consumer, ServerResponse respon
             consumer.accept(response);
         } catch (Throwable error) {
             LOGGER.log(Level.WARNING, "OCI Exception", error);
-            response.status(Http.Status.INTERNAL_SERVER_ERROR_500).send(error.getMessage());
+            response.status(Status.INTERNAL_SERVER_ERROR_500).send(error.getMessage());
         }
     }
 }

File: examples/integrations/vault/hcp/src/main/java/io/helidon/examples/integrations/vault/hcp/CubbyholeService.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 import java.util.Optional;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.integrations.vault.Secret;
 import io.helidon.integrations.vault.secrets.cubbyhole.CubbyholeSecrets;
 import io.helidon.integrations.vault.sys.Sys;
@@ -55,7 +55,7 @@ private void getSecret(ServerRequest req, ServerResponse res) {
             // using toString so we do not need to depend on JSON-B
             res.send(secret.get().values().toString());
         } else {
-            res.status(Http.Status.NOT_FOUND_404);
+            res.status(Status.NOT_FOUND_404);
             res.send();
         }
     }

File: examples/integrations/vault/hcp/src/main/java/io/helidon/examples/integrations/vault/hcp/Kv1Service.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 import java.util.Optional;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.integrations.vault.Secret;
 import io.helidon.integrations.vault.secrets.kv1.Kv1Secrets;
 import io.helidon.integrations.vault.sys.Sys;
@@ -75,7 +75,7 @@ private void getSecret(ServerRequest req, ServerResponse res) {
             // using toString so we do not need to depend on JSON-B
             res.send(secret.get().values().toString());
         } else {
-            res.status(Http.Status.NOT_FOUND_404);
+            res.status(Status.NOT_FOUND_404);
             res.send();
         }
     }

File: examples/integrations/vault/hcp/src/main/java/io/helidon/examples/integrations/vault/hcp/Kv2Service.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 import java.util.Optional;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.integrations.vault.secrets.kv2.Kv2Secret;
 import io.helidon.integrations.vault.secrets.kv2.Kv2Secrets;
 import io.helidon.integrations.vault.sys.Sys;
@@ -64,7 +64,7 @@ private void getSecret(ServerRequest req, ServerResponse res) {
             Kv2Secret kv2Secret = secret.get();
             res.send("Version " + kv2Secret.metadata().version() + ", secret: " + kv2Secret.values().toString());
         } else {
-            res.status(Http.Status.NOT_FOUND_404);
+            res.status(Status.NOT_FOUND_404);
             res.send();
         }
     }

File: examples/metrics/exemplar/src/main/java/io/helidon/examples/metrics/exemplar/GreetService.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.metrics.api.Counter;
 import io.helidon.metrics.api.Meter;
 import io.helidon.metrics.api.MeterRegistry;
@@ -123,13 +123,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting.set(jo.getString("greeting"));
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/metrics/filtering/se/src/main/java/io/helidon/examples/metrics/filtering/se/GreetService.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.common.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.metrics.api.Counter;
 import io.helidon.metrics.api.MeterRegistry;
 import io.helidon.metrics.api.Timer;
@@ -119,13 +119,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting.set(jo.getString("greeting"));
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/metrics/http-status-count-se/src/main/java/io/helidon/examples/se/httpstatuscount/GreetService.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -104,13 +104,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON.createObjectBuilder()
                                              .add("error", "No greeting provided")
                                              .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting.set(jo.getString("greeting"));
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/metrics/http-status-count-se/src/test/java/io/helidon/examples/se/httpstatuscount/StatusService.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.examples.se.httpstatuscount;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -40,7 +40,7 @@ private void respondWithRequestedStatus(ServerRequest request, ServerResponse re
             status = Integer.parseInt(statusText);
             msg = "Successful conversion";
         } catch (NumberFormatException ex) {
-            status = Http.Status.INTERNAL_SERVER_ERROR_500.code();
+            status = Status.INTERNAL_SERVER_ERROR_500.code();
             msg = "Unsuccessful conversion";
         }
         response.status(status).send(msg);

File: examples/metrics/http-status-count-se/src/test/java/io/helidon/examples/se/httpstatuscount/StatusTest.java
Patch:
@@ -17,18 +17,18 @@
 
 import java.util.Set;
 
-import io.helidon.http.Http.Status;
 import io.helidon.common.media.type.MediaTypes;
 import io.helidon.config.Config;
+import io.helidon.http.Status;
 import io.helidon.metrics.api.Counter;
 import io.helidon.metrics.api.MeterRegistry;
 import io.helidon.metrics.api.Metrics;
 import io.helidon.metrics.api.Tag;
-import io.helidon.webserver.testing.junit5.ServerTest;
-import io.helidon.webserver.testing.junit5.SetUpServer;
 import io.helidon.webclient.http1.Http1Client;
 import io.helidon.webclient.http1.Http1ClientResponse;
 import io.helidon.webserver.WebServerConfig;
+import io.helidon.webserver.testing.junit5.ServerTest;
+import io.helidon.webserver.testing.junit5.SetUpServer;
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;

File: examples/metrics/kpi/src/main/java/io/helidon/examples/metrics/kpi/GreetService.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.metrics.api.Counter;
 import io.helidon.metrics.api.Meter;
 import io.helidon.metrics.api.MeterRegistry;
@@ -124,13 +124,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting.set(jo.getString("greeting"));
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/microprofile/http-status-count-mp/src/test/java/io/helidon/examples/mp/httpstatuscount/StatusResource.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.examples.mp.httpstatuscount;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 
 import jakarta.enterprise.context.RequestScoped;
 import jakarta.ws.rs.GET;
@@ -43,7 +43,7 @@ public Response reportStatus(@PathParam("status") String statusText) {
             status = Integer.parseInt(statusText);
             msg = "Successful conversion";
         } catch (NumberFormatException ex) {
-            status = Http.Status.INTERNAL_SERVER_ERROR_500.code();
+            status = Status.INTERNAL_SERVER_ERROR_500.code();
             msg = "Unsuccessful conversion";
         }
         return status == 204 ? Response.status(204).build() : Response.status(status).entity(msg).build();

File: examples/microprofile/http-status-count-mp/src/test/java/io/helidon/examples/mp/httpstatuscount/StatusTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.examples.mp.httpstatuscount;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.microprofile.tests.junit5.AddBean;
 import io.helidon.microprofile.tests.junit5.HelidonTest;
 
@@ -74,7 +74,7 @@ void checkStatusAfterGreet() {
         Response response = webTarget.path("/greet")
                 .request(MediaType.APPLICATION_JSON)
                 .get();
-        assertThat("Status of /greet", response.getStatus(), is(Http.Status.OK_200.code()));
+        assertThat("Status of /greet", response.getStatus(), is(Status.OK_200.code()));
         checkCounters(response.getStatus(), before);
     }
 

File: examples/microprofile/static-content/src/test/java/io/helidon/microprofile/example/staticc/StaticContentTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.io.IOException;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 
 import jakarta.enterprise.inject.se.SeContainer;
 import jakarta.enterprise.inject.spi.CDI;
@@ -69,7 +69,7 @@ void testWelcomePage() {
                 .request()
                 .accept(MediaType.TEXT_HTML_TYPE)
                 .get()) {
-            assertThat("Status should be 200", response.getStatus(), is(Http.Status.OK_200.code()));
+            assertThat("Status should be 200", response.getStatus(), is(Status.OK_200.code()));
 
             String str = response.readEntity(String.class);
 
@@ -87,7 +87,7 @@ void testStaticResource() {
                 .request()
                 .accept(MediaType.TEXT_HTML_TYPE)
                 .get()) {
-            assertThat("Status should be 200", response.getStatus(), is(Http.Status.OK_200.code()));
+            assertThat("Status should be 200", response.getStatus(), is(Status.OK_200.code()));
 
             String str = response.readEntity(String.class);
 

File: examples/openapi/src/main/java/io/helidon/examples/openapi/GreetService.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -101,13 +101,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON_BF.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting = GreetingMessage.fromRest(jo).getMessage();
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/quickstarts/helidon-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/GreetService.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Collections;
 import java.util.concurrent.atomic.AtomicReference;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -105,13 +105,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting.set(jo.getString("greeting"));
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/quickstarts/helidon-standalone-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/GreetService.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Collections;
 import java.util.concurrent.atomic.AtomicReference;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -105,13 +105,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting.set(jo.getString("greeting"));
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: examples/security/outbound-override/src/main/java/io/helidon/security/examples/outbound/OutboundOverrideJwtExample.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
 import io.helidon.security.Principal;
 import io.helidon.security.SecurityContext;
 import io.helidon.security.Subject;
@@ -99,7 +99,7 @@ static void setup(WebServerConfig.Builder server) {
                                 .get("/hello", (req, res) -> {
 
                                     // This is the token. It should be bearer <signed JWT base64 encoded>
-                                    req.headers().first(Http.HeaderNames.AUTHORIZATION)
+                                    req.headers().first(HeaderNames.AUTHORIZATION)
                                             .ifPresent(System.out::println);
 
                                     String username = req.context()

File: examples/security/webserver-digest-auth/src/test/java/io/helidon/examples/security/digest/DigestExampleTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.net.URI;
 import java.util.Set;
 
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
 import io.helidon.webclient.http1.Http1Client;
 import io.helidon.webclient.http1.Http1ClientResponse;
 
@@ -127,7 +127,7 @@ private void testNotAuthorized(String uri) {
         //Must NOT be accessible without authentication
         try (Http1ClientResponse response = client.get().path(uri).request()) {
             assertThat(response.status().code(), is(401));
-            String header = response.headers().first(Http.HeaderNames.create("WWW-Authenticate")).orElse(null);
+            String header = response.headers().first(HeaderNames.create("WWW-Authenticate")).orElse(null);
             assertThat(header, notNullValue());
             assertThat(header.toLowerCase(), containsString("digest"));
             assertThat(header, containsString("mic"));

File: examples/security/webserver-signatures/src/main/java/io/helidon/examples/security/signatures/Service1.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.helidon.common.LazyValue;
 import io.helidon.common.context.Contexts;
-import io.helidon.http.Http;
 import io.helidon.http.HttpMediaTypes;
+import io.helidon.http.Status;
 import io.helidon.security.SecurityContext;
 import io.helidon.webclient.http1.Http1Client;
 import io.helidon.webclient.http1.Http1ClientResponse;
@@ -57,7 +57,7 @@ private void handle(ServerRequest req, ServerResponse res, String path) {
                 .get(SecurityContext.class)
                 .ifPresentOrElse(context -> {
                     try (Http1ClientResponse clientRes = client.get().get(path).request()) {
-                        if (clientRes.status() == Http.Status.OK_200) {
+                        if (clientRes.status() == Status.OK_200) {
                             res.send(clientRes.entity().as(String.class));
                         } else {
                             res.send("Request failed, status: " + clientRes.status());

File: examples/todo-app/frontend/src/main/java/io/helidon/examples/todos/frontend/BackendServiceClient.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.function.Supplier;
 
 import io.helidon.common.LazyValue;
-import io.helidon.http.Http.Status.Family;
 import io.helidon.http.HttpException;
+import io.helidon.http.Status.Family;
 import io.helidon.http.media.jsonp.JsonpSupport;
 import io.helidon.webclient.http1.Http1Client;
 import io.helidon.webclient.http1.Http1ClientResponse;

File: examples/todo-app/frontend/src/main/java/io/helidon/examples/todos/frontend/TodoService.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.examples.todos.frontend;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.metrics.api.Counter;
 import io.helidon.metrics.api.Meter;
 import io.helidon.metrics.api.MeterRegistry;
@@ -88,7 +88,7 @@ private Counter.Builder counterMetadata(String name, String description) {
     private void create(ServerRequest req, ServerResponse res) {
         JsonObject jsonObject = bsc.create(req.content().as(JsonObject.class));
         createCounter.increment();
-        res.status(Http.Status.CREATED_201);
+        res.status(Status.CREATED_201);
         res.send(jsonObject);
     }
 

File: examples/translator-app/frontend/src/main/java/io/helidon/examples/translator/frontend/TranslatorFrontendService.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.logging.Logger;
 
 import io.helidon.http.BadRequestException;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webclient.http1.Http1Client;
 import io.helidon.webclient.http1.Http1ClientResponse;
 import io.helidon.webserver.http.HttpRules;
@@ -68,7 +68,7 @@ private void getText(ServerRequest re, ServerResponse res) {
                     .request()) {
 
                 final String result;
-                if (clientRes.status().family() == Http.Status.Family.SUCCESSFUL) {
+                if (clientRes.status().family() == Status.Family.SUCCESSFUL) {
                     result = clientRes.entity().as(String.class);
                 } else {
                     result = "Error: " + clientRes.entity().as(String.class);

File: examples/webserver/imperative/src/main/java/io/helidon/examples/webserver/imperative/ImperativeMain.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.helidon.common.config.Config;
 import io.helidon.common.config.GlobalConfig;
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.http.HttpRouting;
 
@@ -45,7 +45,7 @@ public static void main(String[] args) {
     }
 
     private static void routing(HttpRouting.Builder routing) {
-        Http.Method list = Http.Method.create("LIST");
+        Method list = Method.create("LIST");
 
         routing.get("/", (req, res) -> res.send("Hello World!"))
                 .route(list, "/", (req, res) -> res.send("lll"))

File: examples/webserver/mutual-tls/src/main/java/io/helidon/examples/webserver/mtls/SecureService.java
Patch:
@@ -15,18 +15,18 @@
  */
 package io.helidon.examples.webserver.mtls;
 
-import io.helidon.http.Http;
+import io.helidon.http.HeaderValues;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 
-import static io.helidon.http.Http.HeaderNames.X_HELIDON_CN;
+import static io.helidon.http.HeaderNames.X_HELIDON_CN;
 
 class SecureService implements HttpService {
     @Override
     public void routing(HttpRules rules) {
         rules.any((req, res) -> {
             // close to avoid re-using cached connections on the client side
-            res.header(Http.Headers.CONNECTION_CLOSE);
+            res.header(HeaderValues.CONNECTION_CLOSE);
             res.send("Hello " + req.headers().get(X_HELIDON_CN).value() + "!");
         });
     }

File: examples/webserver/protocols/src/main/java/io/helidon/examples/webserver/protocols/ProtocolsMain.java
Patch:
@@ -34,7 +34,7 @@
 
 import io.grpc.stub.StreamObserver;
 
-import static io.helidon.http.Http.Method.GET;
+import static io.helidon.http.Method.GET;
 import static io.helidon.webserver.grpc.ResponseHelper.complete;
 
 /**

File: examples/webserver/tracing/src/main/java/io/helidon/examples/webserver/tracing/TracingMain.java
Patch:
@@ -30,7 +30,7 @@
 import io.helidon.webserver.http2.Http2Route;
 import io.helidon.webserver.tracing.TracingFeature;
 
-import static io.helidon.http.Http.Method.GET;
+import static io.helidon.http.Method.GET;
 
 /**
  * Tracing example.

File: examples/webserver/tutorial/src/test/java/io/helidon/examples/webserver/tutorial/MainTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.examples.webserver.tutorial;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webclient.http1.Http1Client;
 import io.helidon.webclient.http1.Http1ClientResponse;
 import io.helidon.webserver.WebServer;
@@ -52,7 +52,7 @@ static void setup(WebServerConfig.Builder server) {
     @Test
     public void testShutDown() throws InterruptedException {
         try (Http1ClientResponse response = client.post("/mgmt/shutdown").request()) {
-            assertThat(response.status(), is(Http.Status.OK_200));
+            assertThat(response.status(), is(Status.OK_200));
         }
         // there may be some delay between the request being completed, and the server shutting down
         // let's give it a second to shut down, then fail

File: http/encoding/encoding/src/main/java/io/helidon/http/encoding/ContentEncodingSupportImpl.java
Patch:
@@ -25,8 +25,8 @@
 import java.util.Objects;
 import java.util.Set;
 
+import io.helidon.http.HeaderNames;
 import io.helidon.http.Headers;
-import io.helidon.http.Http;
 
 class ContentEncodingSupportImpl implements ContentEncodingContext {
     private static final String IDENTITY_ENCODING = "identity";
@@ -116,11 +116,11 @@ public ContentDecoder decoder(String encodingId) throws NoSuchElementException {
 
     @Override
     public ContentEncoder encoder(Headers headers) {
-        if (!contentEncodingEnabled() || !headers.contains(Http.HeaderNames.ACCEPT_ENCODING)) {
+        if (!contentEncodingEnabled() || !headers.contains(HeaderNames.ACCEPT_ENCODING)) {
             return ContentEncoder.NO_OP;
         }
 
-        String acceptEncoding = headers.get(Http.HeaderNames.ACCEPT_ENCODING).value();
+        String acceptEncoding = headers.get(HeaderNames.ACCEPT_ENCODING).value();
         /*
             Accept-Encoding: gzip
             Accept-Encoding: gzip, compress, br

File: http/http/src/main/java/io/helidon/http/BadRequestException.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.http;
 
 /**
- * A runtime exception indicating a {@link Http.Status#BAD_REQUEST_400 bad request}.
+ * A runtime exception indicating a {@link Status#BAD_REQUEST_400 bad request}.
  */
 public class BadRequestException extends HttpException {
 
@@ -27,7 +27,7 @@ public class BadRequestException extends HttpException {
      * @param message the message
      */
     public BadRequestException(String message) {
-        super(message, Http.Status.BAD_REQUEST_400);
+        super(message, Status.BAD_REQUEST_400);
     }
 
     /**
@@ -37,6 +37,6 @@ public BadRequestException(String message) {
      * @param cause the cause of this exception
      */
     public BadRequestException(String message, Throwable cause) {
-        super(message, Http.Status.BAD_REQUEST_400, cause);
+        super(message, Status.BAD_REQUEST_400, cause);
     }
 }

File: http/http/src/main/java/io/helidon/http/ClientRequestHeaders.java
Patch:
@@ -56,7 +56,7 @@ default ClientRequestHeaders accept(MediaType... accepted) {
             MediaType mediaType = accepted[i];
             values[i] = mediaType.text();
         }
-        set(Http.Headers.create(Http.HeaderNames.ACCEPT, values));
+        set(HeaderValues.create(HeaderNames.ACCEPT, values));
         return this;
     }
 }

File: http/http/src/main/java/io/helidon/http/CookieParser.java
Patch:
@@ -43,7 +43,7 @@ private CookieParser() {
      * @param httpHeader cookie header
      * @return a cookie name and values parsed into a parameter format.
      */
-    static Parameters parse(Http.Header httpHeader) {
+    static Parameters parse(Header httpHeader) {
         Map<String, List<String>> allCookies = new HashMap<>();
         for (String value : httpHeader.allValues()) {
             parse(allCookies, value);

File: http/http/src/main/java/io/helidon/http/DirectHandlerDefault.java
Patch:
@@ -25,7 +25,7 @@ private DirectHandlerDefault() {
     @Override
     public TransportResponse handle(TransportRequest request,
                                     EventType eventType,
-                                    Http.Status defaultStatus,
+                                    Status defaultStatus,
                                     ServerResponseHeaders headers,
                                     String message) {
         return TransportResponse.builder()

File: http/http/src/main/java/io/helidon/http/ForbiddenException.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.http;
 
 /**
- * A runtime exception indicating a {@link Http.Status#FORBIDDEN_403 forbidden}.
+ * A runtime exception indicating a {@link Status#FORBIDDEN_403 forbidden}.
  */
 public class ForbiddenException extends HttpException {
 
@@ -27,7 +27,7 @@ public class ForbiddenException extends HttpException {
      * @param message the message
      */
     public ForbiddenException(String message) {
-        super(message, Http.Status.FORBIDDEN_403, null, true);
+        super(message, Status.FORBIDDEN_403, null, true);
     }
 
     /**
@@ -37,6 +37,6 @@ public ForbiddenException(String message) {
      * @param cause the cause of this exception
      */
     public ForbiddenException(String message, Throwable cause) {
-        super(message, Http.Status.FORBIDDEN_403, cause, true);
+        super(message, Status.FORBIDDEN_403, cause, true);
     }
 }

File: http/http/src/main/java/io/helidon/http/Forwarded.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.Locale;
 import java.util.Optional;
 
-import static io.helidon.http.Http.HeaderNames.FORWARDED;
+import static io.helidon.http.HeaderNames.FORWARDED;
 
 /**
- * A representation of the {@link io.helidon.http.Http.HeaderNames#FORWARDED} HTTP header.
+ * A representation of the {@link HeaderNames#FORWARDED} HTTP header.
  */
 public class Forwarded {
     private static final System.Logger LOGGER = System.getLogger(Forwarded.class.getName());

File: http/http/src/main/java/io/helidon/http/HeaderNameImpl.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.Objects;
 
-record HeaderNameImpl(String lowerCase, String defaultCase) implements Http.HeaderName {
+record HeaderNameImpl(String lowerCase, String defaultCase) implements HeaderName {
 
     @Override
     public boolean equals(Object obj) {

File: http/http/src/main/java/io/helidon/http/HeaderValueArray.java
Patch:
@@ -19,8 +19,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import io.helidon.http.Http.HeaderName;
-
 class HeaderValueArray extends HeaderValueBase {
     private final String[] originalValues;
     private List<String> values;
@@ -32,7 +30,7 @@ class HeaderValueArray extends HeaderValueBase {
     }
 
     @Override
-    public Http.HeaderValueWriteable addValue(String value) {
+    public HeaderWriteable addValue(String value) {
         if (values == null) {
             values = new ArrayList<>(originalValues.length + 1);
             values.addAll(List.of(originalValues));

File: http/http/src/main/java/io/helidon/http/HeaderValueBase.java
Patch:
@@ -24,9 +24,8 @@
 import io.helidon.common.mapper.MapperException;
 import io.helidon.common.mapper.MapperManager;
 import io.helidon.common.mapper.Value;
-import io.helidon.http.Http.HeaderName;
 
-abstract class HeaderValueBase implements Http.HeaderValueWriteable {
+abstract class HeaderValueBase implements HeaderWriteable {
     private static final String[] QUALIFIER = new String[] {"http", "header"};
     private final HeaderName name;
     private final String actualName;
@@ -43,7 +42,7 @@ abstract class HeaderValueBase implements Http.HeaderValueWriteable {
     }
 
     @Override
-    public abstract Http.HeaderValueWriteable addValue(String value);
+    public abstract HeaderWriteable addValue(String value);
 
     @Override
     public String name() {

File: http/http/src/main/java/io/helidon/http/HeaderValueCached.java
Patch:
@@ -26,7 +26,7 @@ class HeaderValueCached extends HeaderValueBase {
     private final String value;
     private final byte[] cachedHttp1Header;
 
-    HeaderValueCached(Http.HeaderName name, boolean changing, boolean sensitive, byte[] cached, String value) {
+    HeaderValueCached(HeaderName name, boolean changing, boolean sensitive, byte[] cached, String value) {
         super(name, changing, sensitive, value);
 
         this.value = value;
@@ -55,7 +55,7 @@ public void writeHttp1Header(BufferData buffer) {
     }
 
     @Override
-    public Http.HeaderValueWriteable addValue(String value) {
+    public HeaderWriteable addValue(String value) {
         throw new UnsupportedOperationException("Cannot change values of a cached header " + name());
     }
 

File: http/http/src/main/java/io/helidon/http/HeaderValueCopy.java
Patch:
@@ -20,17 +20,17 @@
 import java.util.List;
 
 class HeaderValueCopy extends HeaderValueBase {
-    private final Http.Header original;
+    private final Header original;
     private List<String> values;
 
-    HeaderValueCopy(Http.Header header) {
+    HeaderValueCopy(Header header) {
         super(header.headerName(), header.changing(), header.sensitive(), header.get());
 
         this.original = header;
     }
 
     @Override
-    public Http.HeaderValueWriteable addValue(String value) {
+    public HeaderWriteable addValue(String value) {
         if (values == null) {
             values = new ArrayList<>(original.allValues());
         }

File: http/http/src/main/java/io/helidon/http/HeaderValueLazy.java
Patch:
@@ -25,14 +25,14 @@ class HeaderValueLazy extends HeaderValueBase {
     private final LazyString value;
     private List<String> values;
 
-    HeaderValueLazy(Http.HeaderName name, boolean changing, boolean sensitive, LazyString value) {
+    HeaderValueLazy(HeaderName name, boolean changing, boolean sensitive, LazyString value) {
         super(name, changing, sensitive, null);
 
         this.value = value;
     }
 
     @Override
-    public Http.HeaderValueWriteable addValue(String value) {
+    public HeaderWriteable addValue(String value) {
         if (values == null) {
             values = new ArrayList<>(2);
             values.add(this.value.stripOws());

File: http/http/src/main/java/io/helidon/http/HeaderValueList.java
Patch:
@@ -23,14 +23,14 @@
 class HeaderValueList extends HeaderValueBase {
     private List<String> values;
 
-    HeaderValueList(Http.HeaderName name, boolean changing, boolean sensitive, Collection<String> values) {
+    HeaderValueList(HeaderName name, boolean changing, boolean sensitive, Collection<String> values) {
         super(name, changing, sensitive, values.iterator().next());
 
         this.values = new ArrayList<>(values);
     }
 
     @Override
-    public Http.HeaderValueWriteable addValue(String value) {
+    public HeaderWriteable addValue(String value) {
         values.add(value);
         return this;
     }

File: http/http/src/main/java/io/helidon/http/HeaderValueSingle.java
Patch:
@@ -23,14 +23,14 @@ class HeaderValueSingle extends HeaderValueBase {
     private final String value;
     private List<String> values;
 
-    HeaderValueSingle(Http.HeaderName name, boolean changing, boolean sensitive, String value) {
+    HeaderValueSingle(HeaderName name, boolean changing, boolean sensitive, String value) {
         super(name, changing, sensitive, value);
 
         this.value = value;
     }
 
     @Override
-    public Http.HeaderValueWriteable addValue(String value) {
+    public HeaderWriteable addValue(String value) {
         if (values == null) {
             values = new ArrayList<>(2);
             values.add(this.value);

File: http/http/src/main/java/io/helidon/http/InternalServerException.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.http;
 
 /**
- * A runtime exception indicating a {@link Http.Status#INTERNAL_SERVER_ERROR_500 internal server error}.
+ * A runtime exception indicating a {@link Status#INTERNAL_SERVER_ERROR_500 internal server error}.
  */
 public class InternalServerException extends HttpException {
     /**
@@ -27,7 +27,7 @@ public class InternalServerException extends HttpException {
      * @param cause the cause of this exception
      */
     public InternalServerException(String message, Throwable cause) {
-        super(message, Http.Status.INTERNAL_SERVER_ERROR_500, cause);
+        super(message, Status.INTERNAL_SERVER_ERROR_500, cause);
     }
 
     /**
@@ -38,6 +38,6 @@ public InternalServerException(String message, Throwable cause) {
      * @param keepAlive whether to keep the connection alive (if keep alives are enabled)
      */
     public InternalServerException(String message, Throwable cause, boolean keepAlive) {
-        super(message, Http.Status.INTERNAL_SERVER_ERROR_500, cause, keepAlive);
+        super(message, Status.INTERNAL_SERVER_ERROR_500, cause, keepAlive);
     }
 }

File: http/http/src/main/java/io/helidon/http/NotFoundException.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.http;
 
 /**
- * A runtime exception indicating a {@link Http.Status#NOT_FOUND_404 not found}.
+ * A runtime exception indicating a {@link Status#NOT_FOUND_404 not found}.
  */
 public class NotFoundException extends HttpException {
 
@@ -27,7 +27,7 @@ public class NotFoundException extends HttpException {
      * @param message the message
      */
     public NotFoundException(String message) {
-        super(message, Http.Status.NOT_FOUND_404, null, true);
+        super(message, Status.NOT_FOUND_404, null, true);
     }
 
     /**
@@ -37,6 +37,6 @@ public NotFoundException(String message) {
      * @param cause the cause of this exception
      */
     public NotFoundException(String message, Throwable cause) {
-        super(message, Http.Status.NOT_FOUND_404, cause, true);
+        super(message, Status.NOT_FOUND_404, cause, true);
     }
 }

File: http/http/src/main/java/io/helidon/http/SetCookie.java
Patch:
@@ -103,7 +103,7 @@ public static SetCookie parse(String setCookie) {
             switch (partName.toLowerCase()) {
             case "expires":
                 hasValue(partName, partValue);
-                builder.expires(Http.DateTime.parse(partValue));
+                builder.expires(DateTime.parse(partValue));
                 break;
             case "max-age":
                 hasValue(partName, partValue);
@@ -178,7 +178,7 @@ public String toString() {
         if (expires != null) {
             result.append(PARAM_SEPARATOR);
             result.append("Expires=");
-            result.append(expires.format(Http.DateTime.RFC_1123_DATE_TIME));
+            result.append(expires.format(DateTime.RFC_1123_DATE_TIME));
         }
         if ((maxAge != null) && !maxAge.isNegative() && !maxAge.isZero()) {
             result.append(PARAM_SEPARATOR);

File: http/http/src/main/java/io/helidon/http/UnauthorizedException.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.helidon.http;
 
-import static io.helidon.http.Http.Status.UNAUTHORIZED_401;
+import static io.helidon.http.Status.UNAUTHORIZED_401;
 
 /**
- * A runtime exception indicating a {@link Http.Status#UNAUTHORIZED_401 unauthorized}.
+ * A runtime exception indicating a {@link Status#UNAUTHORIZED_401 unauthorized}.
  */
 public class UnauthorizedException extends HttpException {
 

File: http/http/src/test/java/io/helidon/http/ContentDispositionTest.java
Patch:
@@ -230,7 +230,7 @@ void testQuotes() {
     @Test
     void testDateQuotes() {
         ZonedDateTime zonedDateTime = ZonedDateTime.now();
-        String date = zonedDateTime.format(Http.DateTime.RFC_1123_DATE_TIME);
+        String date = zonedDateTime.format(DateTime.RFC_1123_DATE_TIME);
         // order is in order of insertion backed by LinkedMap -> we want to preserve this
         String template = "form-data;"
                 + "creation-date=\"" + date + "\";"

File: http/http/src/test/java/io/helidon/http/ForwardedTest.java
Patch:
@@ -73,7 +73,7 @@ void testAll() {
     @Test
     void testMultiValuesCommaSeparated() {
         HeadersImpl<?> headers = new HeadersImpl<>();
-        headers.add(Http.HeaderNames.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10,by=\"192.0.2.60\"");
+        headers.add(HeaderNames.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10,by=\"192.0.2.60\"");
         List<Forwarded> forwardedList = Forwarded.create(headers);
 
         assertThat(forwardedList, hasSize(2));
@@ -94,7 +94,7 @@ void testMultiValuesCommaSeparated() {
     @Test
     void testMultiValues() {
         HeadersImpl<?> headers = new HeadersImpl<>();
-        headers.add(Http.HeaderNames.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10",
+        headers.add(HeaderNames.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10",
                     "by=\"192.0.2.60\"");
         List<Forwarded> forwardedList = Forwarded.create(headers);
 
@@ -116,7 +116,7 @@ void testMultiValues() {
     @Test
     void testMultiValuesAndCommaSeparated() {
         HeadersImpl<?> headers = new HeadersImpl<>();
-        headers.add(Http.HeaderNames.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10",
+        headers.add(HeaderNames.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10",
                     "by=\"192.0.2.60\",for=\"14.22.11.22\"");
         List<Forwarded> forwardedList = Forwarded.create(headers);
 

File: http/http/src/test/java/io/helidon/http/Http1HeadersParserTest.java
Patch:
@@ -62,7 +62,7 @@ void testHeadersWithValidationEnabled(String headerName, String headerValue, boo
         WritableHeaders<?> headers;
         if (expectsValid) {
             headers = getHeaders(headerName, headerValue, true);
-            String responseHeaderValue = headers.get(Http.HeaderNames.create(headerName)).values();
+            String responseHeaderValue = headers.get(HeaderNames.create(headerName)).values();
             // returned header values WhiteSpaces are trimmed so need to be tested with trimmed values
             assertThat(responseHeaderValue, is(headerValue.trim()));
         } else {
@@ -76,7 +76,7 @@ void testHeadersWithValidationEnabled(String headerName, String headerValue, boo
     void testHeadersWithValidationDisabled(String headerValue) {
         // retrieve headers without validating
         WritableHeaders<?> headers = getHeaders(CUSTOM_HEADER_NAME, headerValue, false);
-        String responseHeaderValue = headers.get(Http.HeaderNames.create(CUSTOM_HEADER_NAME)).values();
+        String responseHeaderValue = headers.get(HeaderNames.create(CUSTOM_HEADER_NAME)).values();
         // returned header values WhiteSpaces are trimmed so need to be tested with trimmed values
         assertThat(responseHeaderValue, is(headerValue.trim()));
     }
@@ -116,7 +116,7 @@ private static Stream<Arguments> headers() {
 
 
     private void testHeader(Headers headers, String header, String... values) {
-        Http.HeaderName headerName = Http.HeaderNames.create(header);
+        HeaderName headerName = HeaderNames.create(header);
         assertThat("Headers should contain header: " + headerName.lowerCase(),
                    headers.contains(headerName),
                    is(true));

File: http/http/src/test/java/io/helidon/http/HttpMethodTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.jupiter.api.Assertions.assertAll;
 
 class HttpMethodTest {
-    private static final Class<Http.Method> clazz = Http.Method.class;
+    private static final Class<Method> clazz = Method.class;
     private static final Set<String> constants = Stream.of(clazz.getDeclaredFields())
             .filter(it -> Modifier.isStatic(it.getModifiers()))
             .filter(it -> Modifier.isFinal(it.getModifiers()))
@@ -44,7 +44,7 @@ void testAllConstantsAreValid() throws NoSuchFieldException, IllegalAccessExcept
         // this is to test correct initialization (there may be an issue when the constants
         // are defined on the interface and implemented by enum outside of it)
         for (String constant : constants) {
-            Http.Method value = (Http.Method) clazz.getField(constant)
+            Method value = (Method) clazz.getField(constant)
                     .get(null);
 
             assertAll(

File: http/http2/src/test/java/io/helidon/http/http2/MaxFrameSizeSplitTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.junit.jupiter.params.provider.MethodSource;
 
 import static java.lang.System.Logger.Level.DEBUG;
-
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 

File: http/media/jackson/src/main/java/io/helidon/http/media/jackson/JacksonSupport.java
Patch:
@@ -21,8 +21,8 @@
 import io.helidon.common.GenericType;
 import io.helidon.common.config.Config;
 import io.helidon.common.media.type.MediaTypes;
+import io.helidon.http.HeaderNames;
 import io.helidon.http.Headers;
-import io.helidon.http.Http;
 import io.helidon.http.HttpMediaType;
 import io.helidon.http.WritableHeaders;
 import io.helidon.http.media.EntityReader;
@@ -34,7 +34,7 @@
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
 
-import static io.helidon.http.Http.Headers.CONTENT_TYPE_JSON;
+import static io.helidon.http.HeaderValues.CONTENT_TYPE_JSON;
 
 /**
  * {@link java.util.ServiceLoader} provider implementation for Jackson media support.
@@ -179,7 +179,7 @@ public <T> ReaderResponse<T> reader(GenericType<T> type,
 
     @Override
     public <T> WriterResponse<T> writer(GenericType<T> type, WritableHeaders<?> requestHeaders) {
-        if (requestHeaders.contains(Http.HeaderNames.CONTENT_TYPE)) {
+        if (requestHeaders.contains(HeaderNames.CONTENT_TYPE)) {
             if (requestHeaders.contains(CONTENT_TYPE_JSON)) {
                 if (objectMapper.canSerialize(type.rawType())) {
                     return new WriterResponse<>(SupportLevel.COMPATIBLE, this::writer);

File: http/media/jackson/src/main/java/io/helidon/http/media/jackson/JacksonWriter.java
Patch:
@@ -27,8 +27,8 @@
 
 import io.helidon.common.GenericType;
 import io.helidon.common.media.type.MediaTypes;
+import io.helidon.http.HeaderValues;
 import io.helidon.http.Headers;
-import io.helidon.http.Http;
 import io.helidon.http.HttpMediaType;
 import io.helidon.http.WritableHeaders;
 import io.helidon.http.media.EntityWriter;
@@ -51,7 +51,7 @@ public void write(GenericType<T> type,
                       Headers requestHeaders,
                       WritableHeaders<?> responseHeaders) {
 
-        responseHeaders.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
+        responseHeaders.setIfAbsent(HeaderValues.CONTENT_TYPE_JSON);
 
         for (HttpMediaType acceptedType : requestHeaders.acceptedTypes()) {
             if (acceptedType.test(MediaTypes.APPLICATION_JSON)) {
@@ -71,7 +71,7 @@ public void write(GenericType<T> type,
 
     @Override
     public void write(GenericType<T> type, T object, OutputStream outputStream, WritableHeaders<?> headers) {
-        headers.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
+        headers.setIfAbsent(HeaderValues.CONTENT_TYPE_JSON);
         write(type, object, outputStream);
     }
 

File: http/media/jsonb/src/main/java/io/helidon/http/media/jsonb/JsonbSupport.java
Patch:
@@ -21,8 +21,8 @@
 import io.helidon.common.GenericType;
 import io.helidon.common.config.Config;
 import io.helidon.common.media.type.MediaTypes;
+import io.helidon.http.HeaderNames;
 import io.helidon.http.Headers;
-import io.helidon.http.Http;
 import io.helidon.http.HttpMediaType;
 import io.helidon.http.WritableHeaders;
 import io.helidon.http.media.EntityReader;
@@ -33,7 +33,7 @@
 import jakarta.json.bind.Jsonb;
 import jakarta.json.bind.JsonbBuilder;
 
-import static io.helidon.http.Http.Headers.CONTENT_TYPE_JSON;
+import static io.helidon.http.HeaderValues.CONTENT_TYPE_JSON;
 
 /**
  * {@link java.util.ServiceLoader} provider implementation for JSON Binding media support.
@@ -151,7 +151,7 @@ public <T> WriterResponse<T> writer(GenericType<T> type, WritableHeaders<?> requ
         if (type.equals(JSON_OBJECT_TYPE)) {
             return WriterResponse.unsupported();
         }
-        if (requestHeaders.contains(Http.HeaderNames.CONTENT_TYPE)) {
+        if (requestHeaders.contains(HeaderNames.CONTENT_TYPE)) {
             if (requestHeaders.contains(CONTENT_TYPE_JSON)) {
                 return new WriterResponse<>(SupportLevel.COMPATIBLE, this::writer);
             }

File: http/media/jsonb/src/main/java/io/helidon/http/media/jsonb/JsonbWriter.java
Patch:
@@ -26,8 +26,8 @@
 
 import io.helidon.common.GenericType;
 import io.helidon.common.media.type.MediaTypes;
+import io.helidon.http.HeaderValues;
 import io.helidon.http.Headers;
-import io.helidon.http.Http;
 import io.helidon.http.HttpMediaType;
 import io.helidon.http.WritableHeaders;
 import io.helidon.http.media.EntityWriter;
@@ -48,7 +48,7 @@ public void write(GenericType<T> type,
                       Headers requestHeaders,
                       WritableHeaders<?> responseHeaders) {
 
-        responseHeaders.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
+        responseHeaders.setIfAbsent(HeaderValues.CONTENT_TYPE_JSON);
 
         for (HttpMediaType acceptedType : requestHeaders.acceptedTypes()) {
             if (acceptedType.test(MediaTypes.APPLICATION_JSON)) {
@@ -68,7 +68,7 @@ public void write(GenericType<T> type,
 
     @Override
     public void write(GenericType<T> type, T object, OutputStream outputStream, WritableHeaders<?> headers) {
-        headers.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
+        headers.setIfAbsent(HeaderValues.CONTENT_TYPE_JSON);
         write(type, object, outputStream);
     }
 

File: http/media/jsonp/src/main/java/io/helidon/http/media/jsonp/JsonpWriter.java
Patch:
@@ -26,8 +26,8 @@
 
 import io.helidon.common.GenericType;
 import io.helidon.common.media.type.MediaTypes;
+import io.helidon.http.HeaderValues;
 import io.helidon.http.Headers;
-import io.helidon.http.Http;
 import io.helidon.http.HttpMediaType;
 import io.helidon.http.WritableHeaders;
 import io.helidon.http.media.EntityWriter;
@@ -50,7 +50,7 @@ public void write(GenericType<T> type,
                       Headers requestHeaders,
                       WritableHeaders<?> responseHeaders) {
 
-        responseHeaders.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
+        responseHeaders.setIfAbsent(HeaderValues.CONTENT_TYPE_JSON);
 
         for (HttpMediaType acceptedType : requestHeaders.acceptedTypes()) {
             if (acceptedType.test(MediaTypes.APPLICATION_JSON)) {
@@ -70,7 +70,7 @@ public void write(GenericType<T> type,
 
     @Override
     public void write(GenericType<T> type, T object, OutputStream outputStream, WritableHeaders<?> headers) {
-        headers.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
+        headers.setIfAbsent(HeaderValues.CONTENT_TYPE_JSON);
         write(type, object, outputStream);
     }
 

File: http/media/media/src/main/java/io/helidon/http/media/PathSupport.java
Patch:
@@ -29,8 +29,8 @@
 import io.helidon.common.media.type.MediaType;
 import io.helidon.common.media.type.MediaTypes;
 import io.helidon.http.ContentDisposition;
+import io.helidon.http.HeaderNames;
 import io.helidon.http.Headers;
-import io.helidon.http.Http;
 import io.helidon.http.WritableHeaders;
 
 /**
@@ -106,11 +106,11 @@ private static <T> EntityWriter<T> writer() {
     }
 
     private static void updateHeaders(Path path, WritableHeaders<?> writableHeaders) {
-        if (!writableHeaders.contains(Http.HeaderNames.CONTENT_TYPE)) {
+        if (!writableHeaders.contains(HeaderNames.CONTENT_TYPE)) {
             MediaType mediaType = MediaTypes.detectType(path).orElse(MediaTypes.APPLICATION_OCTET_STREAM);
             writableHeaders.contentType(mediaType);
         }
-        if (!writableHeaders.contains(Http.HeaderNames.CONTENT_DISPOSITION)) {
+        if (!writableHeaders.contains(HeaderNames.CONTENT_DISPOSITION)) {
             writableHeaders.set(ContentDisposition.builder()
                                         .filename(String.valueOf(path.getFileName()))
                                         .build());

File: http/media/multipart/src/main/java/io/helidon/http/media/multipart/MultiPartImpl.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.NoSuchElementException;
 
 import io.helidon.common.buffers.DataReader;
-import io.helidon.http.Http.HeaderNames;
+import io.helidon.http.HeaderNames;
 import io.helidon.http.Http1HeadersParser;
 import io.helidon.http.WritableHeaders;
 import io.helidon.http.media.MediaContext;

File: http/media/multipart/src/main/java/io/helidon/http/media/multipart/ReadablePartAbstract.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.Optional;
 
 import io.helidon.http.ContentDisposition;
+import io.helidon.http.HeaderNames;
 import io.helidon.http.Headers;
-import io.helidon.http.Http;
 import io.helidon.http.HttpMediaType;
 import io.helidon.http.HttpMediaTypes;
 import io.helidon.http.media.ReadableEntity;
@@ -79,8 +79,8 @@ public boolean hasEntity() {
     protected abstract void finish();
 
     private void contentDisposition() {
-        if (headers.contains(Http.HeaderNames.CONTENT_DISPOSITION)) {
-            this.contentDisposition = ContentDisposition.parse(headers.get(Http.HeaderNames.CONTENT_DISPOSITION).value());
+        if (headers.contains(HeaderNames.CONTENT_DISPOSITION)) {
+            this.contentDisposition = ContentDisposition.parse(headers.get(HeaderNames.CONTENT_DISPOSITION).value());
         } else {
             this.contentDisposition = ContentDisposition.empty();
         }

File: http/sse/src/main/java/io/helidon/http/sse/SseEvent.java
Patch:
@@ -28,7 +28,7 @@
 import io.helidon.common.GenericType;
 import io.helidon.common.media.type.MediaType;
 import io.helidon.common.media.type.MediaTypes;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
 import io.helidon.http.WritableHeaders;
 import io.helidon.http.media.EntityReader;
 import io.helidon.http.media.MediaContext;
@@ -128,7 +128,7 @@ public <T> T data(Class<T> clazz, MediaType mediaType) {
             WritableHeaders<?> headers;
             if (!mediaType.equals(MediaTypes.WILDCARD)) {
                 headers = WritableHeaders.create();
-                headers.set(Http.HeaderNames.CONTENT_TYPE, mediaType.text());
+                headers.set(HeaderNames.CONTENT_TYPE, mediaType.text());
             } else {
                 headers = EMPTY_HEADERS;
             }

File: integrations/common/rest/src/main/java/io/helidon/integrations/common/rest/ResponseBuilder.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.helidon.common.Builder;
 import io.helidon.http.Headers;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 
 /**
  * Response builder extracted as an interface, to work around the restriction that we cannot
@@ -35,7 +35,7 @@ public interface ResponseBuilder<B extends ResponseBuilder<B, T, X>, T, X> exten
      * @param status HTTP status
      * @return updated builder
      */
-    B status(Http.Status status);
+    B status(Status status);
 
     /**
      * Configure the HTTP headers returned by the API call.

File: integrations/micrometer/micrometer/src/main/java/io/helidon/integrations/micrometer/MeterRegistryFactory.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.Handler;
 import io.helidon.webserver.http.ServerRequest;
 import io.helidon.webserver.http.ServerResponse;
@@ -234,7 +234,7 @@ Handler matchingHandler(ServerRequest serverRequest,
                 .flatMap(Optional::stream)
                 .findFirst()
                 .orElse((req, res) -> res
-                        .status(Http.Status.NOT_ACCEPTABLE_406)
+                        .status(Status.NOT_ACCEPTABLE_406)
                         .send(NO_MATCHING_REGISTRY_ERROR_MESSAGE));
     }
 

File: integrations/vault/auths/approle/src/main/java/io/helidon/integrations/vault/auths/approle/AppRoleAuthImpl.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.auths.approle;
 
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.VaultOptionalResponse;
 
@@ -57,7 +57,7 @@ public VaultOptionalResponse<ReadRoleId.Response> readRoleId(ReadRoleId.Request
     public GenerateSecretId.Response generateSecretId(GenerateSecretId.Request request) {
         String apiPath = "/auth/" + path + "/role/" + request.roleName() + "/secret-id";
 
-        return restApi.invokeWithResponse(Http.Method.POST, apiPath, request, GenerateSecretId.Response.builder());
+        return restApi.invokeWithResponse(Method.POST, apiPath, request, GenerateSecretId.Response.builder());
     }
 
     @Override
@@ -71,7 +71,7 @@ public DestroySecretId.Response destroySecretId(DestroySecretId.Request request)
     public Login.Response login(Login.Request request) {
         String apiPath = "/auth/" + path + "/login";
 
-        return restApi.invokeWithResponse(Http.Method.POST,
+        return restApi.invokeWithResponse(Method.POST,
                                           apiPath,
                                           request,
                                           Login.Response.builder());

File: integrations/vault/auths/approle/src/main/java/io/helidon/integrations/vault/auths/approle/AppRoleVaultAuth.java
Patch:
@@ -22,7 +22,8 @@
 import io.helidon.common.Weight;
 import io.helidon.common.Weighted;
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderName;
+import io.helidon.http.HeaderNames;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.integrations.vault.VaultApiException;
@@ -35,7 +36,7 @@
 @Weight(Weighted.DEFAULT_WEIGHT + 100)
 public class AppRoleVaultAuth implements VaultAuth {
     private static final System.Logger LOGGER = System.getLogger(AppRoleVaultAuth.class.getName());
-    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME = Http.HeaderNames.create("X-Vault-Namespace");
+    private static final HeaderName VAULT_NAMESPACE_HEADER_NAME = HeaderNames.create("X-Vault-Namespace");
     private final String appRoleId;
     private final String secretId;
     private final String methodPath;

File: integrations/vault/auths/common/src/main/java/io/helidon/integrations/vault/auths/common/NoVaultAuth.java
Patch:
@@ -20,7 +20,8 @@
 
 import io.helidon.common.Weight;
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderName;
+import io.helidon.http.HeaderNames;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.integrations.vault.VaultApiException;
@@ -31,7 +32,7 @@
  */
 @Weight(1)
 public class NoVaultAuth implements VaultAuth {
-    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME =  Http.HeaderNames.create("X-Vault-Namespace");
+    private static final HeaderName VAULT_NAMESPACE_HEADER_NAME =  HeaderNames.create("X-Vault-Namespace");
     /**
      * Required for service loader.
      */

File: integrations/vault/auths/common/src/main/java/io/helidon/integrations/vault/auths/common/VaultRestApi.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.integrations.common.rest.ApiRequest;
 import io.helidon.integrations.common.rest.ApiRestException;
 import io.helidon.integrations.common.rest.ResponseBuilder;
@@ -57,7 +57,7 @@ public static Builder builder() {
     @Override
     protected <T> T emptyResponse(String path,
                                   ApiRequest<?> request,
-                                  Http.Method method,
+                                  Method method,
                                   String requestId,
                                   HttpClientResponse response,
                                   ResponseBuilder<?, T, ?> responseBuilder) {
@@ -89,7 +89,7 @@ protected <T> T emptyResponse(String path,
     @Override
     protected ApiRestException readError(String path,
                                          ApiRequest<?> request,
-                                         Http.Method method,
+                                         Method method,
                                          String requestId,
                                          HttpClientResponse response,
                                          JsonObject entity) {

File: integrations/vault/auths/k8s/src/main/java/io/helidon/integrations/vault/auths/k8s/K8sAuthImpl.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.auths.k8s;
 
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.integrations.common.rest.RestApi;
 
 class K8sAuthImpl implements K8sAuth {
@@ -53,6 +53,6 @@ public ConfigureK8s.Response configure(ConfigureK8s.Request request) {
     public Login.Response login(Login.Request request) {
         String apiPath = "/auth/" + path + "/login";
 
-        return restApi.invokeWithResponse(Http.Method.POST, apiPath, request, Login.Response.builder());
+        return restApi.invokeWithResponse(Method.POST, apiPath, request, Login.Response.builder());
     }
 }

File: integrations/vault/auths/k8s/src/main/java/io/helidon/integrations/vault/auths/k8s/K8sVaultAuth.java
Patch:
@@ -26,7 +26,8 @@
 import io.helidon.common.Weight;
 import io.helidon.common.Weighted;
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderName;
+import io.helidon.http.HeaderNames;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.integrations.vault.VaultApiException;
@@ -39,7 +40,7 @@
 @Weight(Weighted.DEFAULT_WEIGHT + 50)
 public class K8sVaultAuth implements VaultAuth {
     private static final System.Logger LOGGER = System.getLogger(K8sVaultAuth.class.getName());
-    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME = Http.HeaderNames.create("X-Vault-Namespace");
+    private static final HeaderName VAULT_NAMESPACE_HEADER_NAME = HeaderNames.create("X-Vault-Namespace");
     private final String serviceAccountToken;
     private final String tokenRole;
     private final String tokenLocation;

File: integrations/vault/auths/token/src/main/java/io/helidon/integrations/vault/auths/token/TokenAuthImpl.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.integrations.vault.auths.token;
 
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.integrations.common.rest.RestApi;
 
 class TokenAuthImpl implements TokenAuth {
@@ -32,14 +32,14 @@ class TokenAuthImpl implements TokenAuth {
     public CreateToken.Response createToken(CreateToken.Request request) {
         String apiPath = "/auth/" + path + "/create" + request.roleName().map(it -> "/" + it).orElse("");
 
-        return restApi.invokeWithResponse(Http.Method.POST, apiPath, request, CreateToken.Response.builder());
+        return restApi.invokeWithResponse(Method.POST, apiPath, request, CreateToken.Response.builder());
     }
 
     @Override
     public RenewToken.Response renew(RenewToken.Request request) {
         String apiPath = "/auth/" + path + "/renew";
 
-        return restApi.invokeWithResponse(Http.Method.POST, apiPath, request, RenewToken.Response.builder());
+        return restApi.invokeWithResponse(Method.POST, apiPath, request, RenewToken.Response.builder());
     }
 
     @Override

File: integrations/vault/secrets/kv2/src/main/java/io/helidon/integrations/vault/secrets/kv2/Kv2SecretsImpl.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.Optional;
 
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.ListSecrets;
 import io.helidon.integrations.vault.Vault;
@@ -69,7 +69,7 @@ public UpdateKv2.Response update(UpdateKv2.Request request) {
         }
         String apiPath = mount + "/data/" + path;
 
-        return restApi.invokeWithResponse(Http.Method.POST,
+        return restApi.invokeWithResponse(Method.POST,
                                           apiPath,
                                           request,
                                           UpdateKv2.Response.builder());

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/Vault.java
Patch:
@@ -25,7 +25,7 @@
 import io.helidon.config.Config;
 import io.helidon.faulttolerance.FaultTolerance;
 import io.helidon.faulttolerance.FtHandler;
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.spi.VaultAuth;
 import io.helidon.webclient.api.WebClientConfig;
@@ -41,7 +41,7 @@ public interface Vault {
     /**
      * HTTP {@code LIST} method used by several Vault engines.
      */
-    Http.Method LIST = Http.Method.create("LIST");
+    Method LIST = Method.create("LIST");
 
     /**
      * Fluent API builder to construct new instances.

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/VaultOptionalResponse.java
Patch:
@@ -24,8 +24,8 @@
 
 /**
  * Response for Vault operations that may contain entity.
- * The entity is present for successful requests (returning {@link io.helidon.http.Http.Status#OK_200};
- * entity is not present if the response was {@link io.helidon.http.Http.Status#NOT_FOUND_404}).
+ * The entity is present for successful requests (returning {@link io.helidon.http.Status#OK_200};
+ * entity is not present if the response was {@link io.helidon.http.Status#NOT_FOUND_404}).
  *
  * @param <R> type of the response - a subclass of this class
  */
@@ -57,7 +57,7 @@ public static <R, X> Builder<X, R> vaultResponseBuilder() {
 
     /**
      * List of errors (if any) as returned by Vault.
-     * This list may contain errors when we get a {@link io.helidon.http.Http.Status#NOT_FOUND_404}.
+     * This list may contain errors when we get a {@link io.helidon.http.Status#NOT_FOUND_404}.
      *
      * @return list of errors from Vault
      */

File: lra/coordinator/server/src/test/java/io/helidon/lra/coordinator/CoordinatorTest.java
Patch:
@@ -22,12 +22,12 @@
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 import io.helidon.http.media.jsonp.JsonpSupport;
-import io.helidon.webserver.testing.junit5.ServerTest;
-import io.helidon.webserver.testing.junit5.SetUpServer;
-import io.helidon.webserver.testing.junit5.Socket;
 import io.helidon.webclient.http1.Http1Client;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.WebServerConfig;
+import io.helidon.webserver.testing.junit5.ServerTest;
+import io.helidon.webserver.testing.junit5.SetUpServer;
+import io.helidon.webserver.testing.junit5.Socket;
 
 import jakarta.json.JsonArray;
 import jakarta.json.JsonValue;

File: microprofile/cors/src/test/java/io/helidon/microprofile/cors/AdapterTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.microprofile.tests.junit5.AddBean;
 
 import jakarta.enterprise.context.ApplicationScoped;
@@ -91,7 +91,7 @@ private void testPath(String requestPath, String testId) {
                 .request()
                 .header(TEST_ID_HEADER, testId)
                 .get();
-        assertThat("Response status", response.getStatus(), is(Http.Status.OK_200.code()));
+        assertThat("Response status", response.getStatus(), is(Status.OK_200.code()));
         assertThat("Adapter path", TestFilter.adapters.get(testId).path(), is(requestPath));
     }
 

File: microprofile/cors/src/test/java/io/helidon/microprofile/cors/CorsDisabledTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.microprofile.cors;
 
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
 import io.helidon.microprofile.tests.junit5.AddBean;
 import io.helidon.microprofile.tests.junit5.AddConfig;
 import io.helidon.microprofile.tests.junit5.HelidonTest;
@@ -28,7 +28,7 @@
 import jakarta.ws.rs.core.Response;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.http.Http.HeaderNames.ORIGIN;
+import static io.helidon.http.HeaderNames.ORIGIN;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.hasItem;
@@ -61,6 +61,6 @@ void testCorsIsDisabled() {
         assertThat(res.getStatusInfo(), is(Response.Status.OK));
         assertThat("Headers from successful response",
                    res.getHeaders().keySet(),
-                   not(hasItem(Http.HeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN.defaultCase())));
+                   not(hasItem(HeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN.defaultCase())));
     }
 }

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/ParticipantTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.lra.coordinator.client.CoordinatorClient;
 import io.helidon.microprofile.config.ConfigCdiExtension;
 import io.helidon.microprofile.lra.resources.DontEnd;
@@ -102,7 +102,7 @@ HttpService mockCoordinator() {
         return rules -> rules
                 .post("/start", (req, res) -> {
                     String lraId = URI.create("http://localhost:" + port + "/lra-coordinator/xxx-xxx-001").toASCIIString();
-                    res.status(Http.Status.CREATED_201)
+                    res.status(Status.CREATED_201)
                             .header(LRA_HTTP_CONTEXT_HEADER, lraId)
                             .send();
                 })

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/TestBasicPerformanceIndicators.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.microprofile.metrics;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.microprofile.tests.junit5.AddConfig;
 import io.helidon.microprofile.tests.junit5.HelidonTest;
 
@@ -53,7 +53,7 @@ static void doCheckMetricsVendorURL(WebTarget webTarget) {
                 .accept(MediaType.APPLICATION_JSON_TYPE)
                 .get();
 
-        assertThat("Metrics /metrics/vendor URL HTTP status", response.getStatus(), is(Http.Status.OK_200.code()));
+        assertThat("Metrics /metrics/vendor URL HTTP status", response.getStatus(), is(Status.OK_200.code()));
 
         JsonObject vendorMetrics = response.readEntity(JsonObject.class);
 

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/TestMetricsOnOwnSocket.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.microprofile.metrics;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.microprofile.server.ServerCdiExtension;
 import io.helidon.microprofile.tests.junit5.AddConfig;
 import io.helidon.microprofile.tests.junit5.HelidonTest;
@@ -89,7 +89,7 @@ void checkMessageFromDefaultRouting() {
                 .request(MediaType.TEXT_PLAIN_TYPE)
                 .get()) {
 
-            assertThat("Response code getting greeting", r.getStatus(), is(Http.Status.OK_200.code()));
+            assertThat("Response code getting greeting", r.getStatus(), is(Status.OK_200.code()));
         }
     }
 
@@ -103,7 +103,7 @@ void checkMetricsAfterGet() {
 
     private int getRequestsLoadCount(String descr) {
         try (Response r = metricsInvocation().invoke()) {
-            assertThat(descr + " metrics sampling response", r.getStatus(), is(Http.Status.OK_200.code()));
+            assertThat(descr + " metrics sampling response", r.getStatus(), is(Status.OK_200.code()));
 
             JsonObject metrics = r.readEntity(JsonObject.class);
             assertThat("Check for requests.load", metrics.containsKey("requests.load"), is(true));

File: microprofile/openapi/src/test/java/io/helidon/microprofile/openapi/BasicServerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.Map;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.microprofile.tests.junit5.AddBean;
 import io.helidon.microprofile.tests.junit5.HelidonTest;
 import io.helidon.openapi.OpenApiFeature;
@@ -52,7 +52,7 @@ private static Map<String, Object> retrieveYaml(WebTarget webTarget) {
                 .request(OpenApiFeature.DEFAULT_RESPONSE_MEDIA_TYPE.text())
                 .get()) {
             assertThat("Fetch of OpenAPI document from server status", response.getStatus(),
-                    is(equalTo(Http.Status.OK_200.code())));
+                    is(equalTo(Status.OK_200.code())));
             String yamlText = response.readEntity(String.class);
             return new Yaml().load(yamlText);
         }

File: openapi/src/test/java/io/helidon/openapi/TestUtil.java
Patch:
@@ -28,12 +28,12 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.http.Http;
-import io.helidon.http.HttpMediaType;
 import io.helidon.common.media.type.MediaType;
 import io.helidon.common.media.type.MediaTypes;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
+import io.helidon.http.HttpMediaType;
+import io.helidon.http.Status;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.http.HttpRouting;
 
@@ -261,7 +261,7 @@ public static HttpMediaType validateResponseMediaType(
             HttpURLConnection cnx,
             MediaType expectedMediaType) throws Exception {
         assertThat("Unexpected response code", cnx.getResponseCode(),
-                is(Http.Status.OK_200.code()));
+                is(Status.OK_200.code()));
         HttpMediaType expectedMT = expectedMediaType != null
                 ? HttpMediaType.create(expectedMediaType)
                 : HttpMediaType.create(OpenApiFeature.DEFAULT_RESPONSE_MEDIA_TYPE);

File: security/providers/idcs-mapper/src/main/java/io/helidon/security/providers/idcs/mapper/IdcsMtRoleMapperProvider.java
Patch:
@@ -29,7 +29,7 @@
 import io.helidon.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.Grant;
 import io.helidon.security.ProviderRequest;
@@ -257,7 +257,7 @@ protected List<? extends Grant> getGrantsFromServer(String idcsTenantId,
                 .post()
                 .uri(multitenantEndpoints.assertEndpoint(idcsTenantId))
                 .headers(it -> {
-                    it.add(Http.HeaderNames.AUTHORIZATION, "Bearer " + appToken);
+                    it.add(HeaderNames.AUTHORIZATION, "Bearer " + appToken);
                 });
 
         return processRoleRequest(post, requestBuilder.build(), subjectName);

File: security/providers/idcs-mapper/src/main/java/io/helidon/security/providers/idcs/mapper/IdcsRoleMapperProvider.java
Patch:
@@ -26,7 +26,7 @@
 import io.helidon.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.Grant;
 import io.helidon.security.ProviderRequest;
@@ -196,7 +196,7 @@ private List<? extends Grant> obtainGrantsFromServer(String subjectName, String
                 .post()
                 .uri(asserterUri)
                 .headers(it -> {
-                    it.add(Http.HeaderNames.AUTHORIZATION, "Bearer " + appToken);
+                    it.add(HeaderNames.AUTHORIZATION, "Bearer " + appToken);
                 });
 
         return processRoleRequest(request, requestBuilder.build(), subjectName);

File: tests/functional/request-scope/src/main/java/io/helidon/tests/functional/requestscope/TenantContext.java
Patch:
@@ -15,7 +15,8 @@
  */
 package io.helidon.tests.functional.requestscope;
 
-import io.helidon.http.Http;
+import io.helidon.http.HeaderName;
+import io.helidon.http.HeaderNames;
 import io.helidon.webserver.http.ServerRequest;
 
 import jakarta.annotation.PostConstruct;
@@ -24,7 +25,7 @@
 
 @RequestScoped
 public class TenantContext {
-    private static final Http.HeaderName TENANT_ID = Http.HeaderNames.create("x-tenant-id");
+    private static final HeaderName TENANT_ID = HeaderNames.create("x-tenant-id");
 
     @Context
     private ServerRequest request;

File: tests/integration/gh-5792/src/main/java/io/helidon/tests/integration/yamlparsing/GreetClientHttp.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.tests.integration.yamlparsing;
 
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.webclient.api.WebClient;
 
 /**
@@ -35,7 +35,7 @@ public static void main(String[] args) {
                 .baseUri("http://localhost:8080/greet")
                 .build();
 
-        String response = client.method(Http.Method.GET)
+        String response = client.method(Method.GET)
                 .requestEntity(String.class);
 
         System.out.println(response);

File: tests/integration/gh-5792/src/main/java/io/helidon/tests/integration/yamlparsing/GreetService.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Collections;
 import java.util.concurrent.atomic.AtomicReference;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -106,13 +106,13 @@ private void updateGreetingFromJson(JsonObject jo, ServerResponse response) {
             JsonObject jsonErrorObject = JSON.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting.set(jo.getString("greeting"));
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
     /**

File: tests/integration/mp-gh-3246/src/test/java/io/helidon/tests/integration/gh3246/Gh3246Test.java
Patch:
@@ -19,7 +19,7 @@
 import java.time.Instant;
 
 import io.helidon.common.configurable.Resource;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
 import io.helidon.microprofile.tests.junit5.AddBean;
 import io.helidon.microprofile.tests.junit5.HelidonTest;
 import io.helidon.security.jwt.Jwt;
@@ -86,7 +86,7 @@ void testSecuredCallout() {
         String response = webTarget.path("/test/secured")
                 .queryParam("port", port)
                 .request()
-                .header(Http.HeaderNames.AUTHORIZATION.defaultCase(), "Bearer " + tokenContent)
+                .header(HeaderNames.AUTHORIZATION.defaultCase(), "Bearer " + tokenContent)
                 .get(String.class);
 
         assertThat(response, is("hello"));

File: tests/integration/mp-ws-services/src/test/java/io/helidon/tests/integration/mp/ws/services/MpServicesTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
 
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.microprofile.server.Server;
 
 import org.junit.jupiter.api.AfterAll;
@@ -81,7 +81,7 @@ private void test(int port, String path, String expected) throws IOException {
 
         assertThat("Should be a successful request (http://localhost:" + port + path + ")",
                    con.getResponseCode(),
-                   is(Http.Status.OK_200.code()));
+                   is(Status.OK_200.code()));
 
         InputStream inputStream = con.getInputStream();
         ByteArrayOutputStream bytes = new ByteArrayOutputStream();

File: tests/integration/native-image/mp-1/src/main/java/io/helidon/tests/integration/nativeimage/mp1/Mp1Main.java
Patch:
@@ -55,9 +55,9 @@
 import jakarta.ws.rs.core.Response;
 import org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException;
 
-import static io.helidon.http.Http.Status.FORBIDDEN_403;
-import static io.helidon.http.Http.Status.OK_200;
-import static io.helidon.http.Http.Status.UNAUTHORIZED_401;
+import static io.helidon.http.Status.FORBIDDEN_403;
+import static io.helidon.http.Status.OK_200;
+import static io.helidon.http.Status.UNAUTHORIZED_401;
 
 /**
  * Main class of this integration test.

File: tests/integration/native-image/se-1/src/main/java/io/helidon/tests/integration/nativeimage/se1/GreetService.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.function.Consumer;
 
 import io.helidon.config.Config;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.webserver.http.HttpRules;
 import io.helidon.webserver.http.HttpService;
 import io.helidon.webserver.http.ServerRequest;
@@ -120,13 +120,13 @@ private void updateGreetingHandler(ServerRequest request,
             JsonObject jsonErrorObject = JSON.createObjectBuilder()
                     .add("error", "No greeting provided")
                     .build();
-            response.status(Http.Status.BAD_REQUEST_400)
+            response.status(Status.BAD_REQUEST_400)
                     .send(jsonErrorObject);
             return;
         }
 
         greeting.set(jo.getString("greeting"));
-        response.status(Http.Status.NO_CONTENT_204).send();
+        response.status(Status.NO_CONTENT_204).send();
     }
 
 }

File: webclient/api/src/main/java/io/helidon/webclient/api/ClientResponseBase.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.webclient.api;
 
 import io.helidon.http.ClientResponseHeaders;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 
 /**
  * Http client response base.
@@ -28,7 +28,7 @@ interface ClientResponseBase {
      *
      * @return status
      */
-    Http.Status status();
+    Status status();
 
     /**
      * Response headers.

File: webclient/api/src/main/java/io/helidon/webclient/api/ClientResponseTypedImpl.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.webclient.api;
 
 import io.helidon.http.ClientResponseHeaders;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 
 class ClientResponseTypedImpl<T> implements ClientResponseTyped<T> {
     private final HttpClientResponse response;
@@ -42,7 +42,7 @@ class ClientResponseTypedImpl<T> implements ClientResponseTyped<T> {
     }
 
     @Override
-    public Http.Status status() {
+    public Status status() {
         return response.status();
     }
 

File: webclient/api/src/main/java/io/helidon/webclient/api/FullClientRequest.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Optional;
 
 import io.helidon.common.tls.Tls;
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 
 /**
  * Client request with getters for all configurable options, used for integration with HTTP version implementations.
@@ -41,7 +41,7 @@ public interface FullClientRequest<T extends ClientRequest<T>> extends ClientReq
      *
      * @return method
      */
-    Http.Method method();
+    Method method();
 
     /**
      * URI of this request.

File: webclient/api/src/main/java/io/helidon/webclient/api/HttpClientConfigBlueprint.java
Patch:
@@ -32,7 +32,7 @@
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.http.ClientRequestHeaders;
-import io.helidon.http.Http;
+import io.helidon.http.Header;
 import io.helidon.http.WritableHeaders;
 import io.helidon.http.encoding.ContentEncodingContext;
 import io.helidon.http.media.MediaContext;
@@ -114,7 +114,7 @@ interface HttpClientConfigBlueprint extends HttpConfigBaseBlueprint {
      * @return default headers
      */
     @Option.Singular
-    Set<Http.Header> headers();
+    Set<Header> headers();
 
     /**
      * Default headers as a headers object. Creates a new instance for each call, so the returned value

File: webclient/api/src/main/java/io/helidon/webclient/api/HttpClientRequest.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.common.configurable.LruCache;
 import io.helidon.common.socket.HelidonSocket;
 import io.helidon.common.tls.Tls;
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.webclient.spi.HttpClientSpi;
 
 /**
@@ -44,7 +44,7 @@ public class HttpClientRequest extends ClientRequestBase<HttpClientRequest, Http
 
     HttpClientRequest(WebClient webClient,
                       WebClientConfig clientConfig,
-                      Http.Method method,
+                      Method method,
                       ClientUri clientUri,
                       Map<String, LoomClient.ProtocolSpi> protocolsToClients,
                       List<LoomClient.ProtocolSpi> protocols,

File: webclient/api/src/main/java/io/helidon/webclient/api/LoomClient.java
Patch:
@@ -27,7 +27,7 @@
 
 import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.LazyValue;
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.inject.configdriven.api.ConfigDriven;
 import io.helidon.webclient.spi.ClientProtocolProvider;
 import io.helidon.webclient.spi.HttpClientSpi;
@@ -133,7 +133,7 @@ public WebClientCookieManager cookieManager() {
     }
 
     @Override
-    public HttpClientRequest method(Http.Method method) {
+    public HttpClientRequest method(Method method) {
         ClientUri clientUri = prototype().baseUri()
                 .map(ClientUri::create) // create from base config
                 .orElseGet(ClientUri::create); // create as empty

File: webclient/api/src/main/java/io/helidon/webclient/api/WebClientServiceResponseBlueprint.java
Patch:
@@ -22,7 +22,7 @@
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.http.ClientResponseHeaders;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 
 /**
  * Response which is created upon receiving of server response.
@@ -42,7 +42,7 @@ interface WebClientServiceResponseBlueprint {
      *
      * @return response status
      */
-    Http.Status status();
+    Status status();
 
     /**
      * Input stream to get data of the entity. This allows decorating the entity (such as decryption).

File: webclient/http1/src/main/java/io/helidon/webclient/http1/Http1CallEntityChain.java
Patch:
@@ -22,7 +22,8 @@
 import io.helidon.common.buffers.DataReader;
 import io.helidon.common.buffers.DataWriter;
 import io.helidon.http.ClientRequestHeaders;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
+import io.helidon.http.HeaderValues;
 import io.helidon.webclient.api.ClientConnection;
 import io.helidon.webclient.api.WebClientServiceRequest;
 import io.helidon.webclient.api.WebClientServiceResponse;
@@ -51,7 +52,7 @@ public WebClientServiceResponse doProceed(ClientConnection connection,
                                               DataReader reader,
                                               BufferData writeBuffer) {
 
-        headers.set(Http.Headers.create(Http.HeaderNames.CONTENT_LENGTH, entity.length));
+        headers.set(HeaderValues.create(HeaderNames.CONTENT_LENGTH, entity.length));
 
         writeHeaders(headers, writeBuffer, protocolConfig().validateRequestHeaders());
         // we have completed writing the headers

File: webclient/http1/src/main/java/io/helidon/webclient/http1/Http1ClientImpl.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.webclient.http1;
 
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.webclient.api.ClientRequest;
 import io.helidon.webclient.api.ClientUri;
 import io.helidon.webclient.api.FullClientRequest;
@@ -41,7 +41,7 @@ class Http1ClientImpl implements Http1Client, HttpClientSpi {
     }
 
     @Override
-    public Http1ClientRequest method(Http.Method method) {
+    public Http1ClientRequest method(Method method) {
         ClientUri clientUri = clientConfig.baseUri()
                 .map(ClientUri::create) // create from base config
                 .orElseGet(ClientUri::create); // create as empty

File: webclient/http1/src/main/java/io/helidon/webclient/http1/Http1StatusParser.java
Patch:
@@ -21,7 +21,7 @@
 import io.helidon.common.buffers.BufferData;
 import io.helidon.common.buffers.Bytes;
 import io.helidon.common.buffers.DataReader;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 
 /**
  * Parser of HTTP/1.0 or HTTP/1.1 response status.
@@ -44,7 +44,7 @@ private Http1StatusParser() {
      *                                                                                 the reader, depending on its
      *                                                                                 implementation
      */
-    public static Http.Status readStatus(DataReader reader, int maxLength) {
+    public static Status readStatus(DataReader reader, int maxLength) {
         int newLine = reader.findNewLine(maxLength);
         if (newLine == maxLength) {
             throw new IllegalStateException("HTTP Response did not contain HTTP status line. Line: \n"
@@ -92,7 +92,7 @@ public static Http.Status readStatus(DataReader reader, int maxLength) {
         reader.skip(2); // skip the last CRLF
 
         try {
-            return Http.Status.create(Integer.parseInt(code), phrase);
+            return Status.create(Integer.parseInt(code), phrase);
         } catch (NumberFormatException e) {
             throw new IllegalStateException("HTTP Response did not contain HTTP status line. Line HTTP/1.0 or HTTP/1.1 \n"
                                                     + BufferData.create(code.getBytes(StandardCharsets.US_ASCII)) + "\n"

File: webclient/http1/src/main/java/io/helidon/webclient/http1/UpgradeResponse.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.NoSuchElementException;
 
 import io.helidon.http.ClientResponseHeaders;
-import io.helidon.http.Http;
+import io.helidon.http.Status;
 import io.helidon.http.media.ReadableEntity;
 import io.helidon.webclient.api.ClientConnection;
 import io.helidon.webclient.api.ClientUri;
@@ -108,7 +108,7 @@ private static class NoCloseResponse implements HttpClientResponse {
         }
 
         @Override
-        public Http.Status status() {
+        public Status status() {
             return delegate.status();
         }
 

File: webclient/http2/src/main/java/io/helidon/webclient/http2/Http2CallEntityChain.java
Patch:
@@ -22,7 +22,8 @@
 import io.helidon.common.GenericType;
 import io.helidon.common.buffers.BufferData;
 import io.helidon.http.ClientRequestHeaders;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderNames;
+import io.helidon.http.HeaderValues;
 import io.helidon.http.http2.Http2Headers;
 import io.helidon.http.media.EntityWriter;
 import io.helidon.webclient.api.ClientUri;
@@ -55,7 +56,7 @@ protected WebClientServiceResponse doProceed(WebClientServiceRequest serviceRequ
             entityBytes = entityBytes(entity, headers);
         }
 
-        headers.set(Http.Headers.create(Http.HeaderNames.CONTENT_LENGTH, entityBytes.length));
+        headers.set(HeaderValues.create(HeaderNames.CONTENT_LENGTH, entityBytes.length));
 
         ClientUri uri = serviceRequest.uri();
 

File: webclient/http2/src/main/java/io/helidon/webclient/http2/Http2ClientImpl.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.webclient.http2;
 
 import io.helidon.common.uri.UriQueryWriteable;
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.webclient.api.ClientRequest;
 import io.helidon.webclient.api.ClientUri;
 import io.helidon.webclient.api.ConnectionKey;
@@ -43,7 +43,7 @@ class Http2ClientImpl implements Http2Client, HttpClientSpi {
     }
 
     @Override
-    public Http2ClientRequest method(Http.Method method) {
+    public Http2ClientRequest method(Method method) {
         ClientUri clientUri = clientConfig.baseUri()
                 .map(ClientUri::create) // create from base config
                 .orElseGet(ClientUri::create); // create as empty

File: webclient/metrics/src/main/java/io/helidon/webclient/metrics/WebClientCounter.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.webclient.metrics;
 
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.metrics.api.Counter;
 import io.helidon.webclient.api.WebClientServiceRequest;
 import io.helidon.webclient.api.WebClientServiceResponse;
@@ -31,7 +31,7 @@ class WebClientCounter extends WebClientMetric {
 
     @Override
     public WebClientServiceResponse handle(Chain chain, WebClientServiceRequest request) {
-        Http.Method method = request.method();
+        Method method = request.method();
         try {
             WebClientServiceResponse response = chain.proceed(request);
             int code = response.status().code();

File: webclient/metrics/src/main/java/io/helidon/webclient/metrics/WebClientMeter.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.webclient.metrics;
 
-import io.helidon.http.Http;
+import io.helidon.http.Method;
 import io.helidon.metrics.api.Counter;
 import io.helidon.webclient.api.WebClientServiceRequest;
 import io.helidon.webclient.api.WebClientServiceResponse;
@@ -31,7 +31,7 @@ public class WebClientMeter extends WebClientMetric {
 
     @Override
     public WebClientServiceResponse handle(Chain chain, WebClientServiceRequest request) {
-        Http.Method method = request.method();
+        Method method = request.method();
         try {
             WebClientServiceResponse response = chain.proceed(request);
             int code = response.status().code();

File: webclient/security/src/main/java/io/helidon/webclient/security/WebClientSecurity.java
Patch:
@@ -24,7 +24,8 @@
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.http.ClientRequestHeaders;
-import io.helidon.http.Http;
+import io.helidon.http.HeaderName;
+import io.helidon.http.HeaderNames;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.OutboundSecurityClientBuilder;
 import io.helidon.security.OutboundSecurityResponse;
@@ -185,7 +186,7 @@ private WebClientServiceResponse processResponse(WebClientServiceRequest request
                 }
 
                 //replace existing
-                Http.HeaderName headerName = Http.HeaderNames.create(entry.getKey());
+                HeaderName headerName = HeaderNames.create(entry.getKey());
                 clientHeaders.set(headerName, entry.getValue().toArray(new String[0]));
             }
             span.end();

File: inject/api/src/main/java/io/helidon/inject/api/Helidon.java
Patch:
@@ -28,7 +28,9 @@
  *
  * @see #start()
  * @see #serviceRegistry()
+ * @deprecated this type may have backward incompatible changes, as it is considered a preview feature of Helidon!
  */
+@Deprecated(since = "4.0.0")
 public class Helidon {
     private static final System.Logger LOGGER = System.getLogger(Helidon.class.getName());
     private static final ReentrantReadWriteLock REENTRANT_READ_WRITE_LOCK = new ReentrantReadWriteLock();

File: builder/processor/src/main/java/io/helidon/builder/processor/BlueprintProcessor.java
Patch:
@@ -250,8 +250,8 @@ private List<TypeElement> collectInterfaces(Set<? extends Element> builderTypes)
     private void generatePrototypeWithBuilder(TypeElement builderInterface,
                                               TypeContext typeContext) throws IOException {
 
-        TypeContext.BlueprintData blueprintDef = typeContext.blueprintData();
-        TypeContext.ConfiguredData configuredData = typeContext.configuredData();
+        AnnotationDataBlueprint blueprintDef = typeContext.blueprintData();
+        AnnotationDataConfigured configuredData = typeContext.configuredData();
         TypeContext.PropertyData propertyData = typeContext.propertyData();
         TypeContext.TypeInformation typeInformation = typeContext.typeInfo();
         CustomMethods customMethods = typeContext.customMethods();

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/ContainerBlueprint.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
-import io.helidon.config.metadata.ConfiguredOption;
 
 /**
  * Base for {@link PickleBarrel}.
@@ -31,15 +31,15 @@ interface ContainerBlueprint {
      *
      * @return the ID of this container
      */
-    @ConfiguredOption(required = true)
+    @Option.Required
     String id();
 
     /**
      * The type of container (not required).
      *
      * @return type of container if specified
      */
-    @ConfiguredOption("PLASTIC")
+    @Option.Default("PLASTIC")
     Optional<ContainerType> type();
 
 }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/InterceptedBeanBlueprint.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.helidon.builder.test.testsubjects;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
-import io.helidon.config.metadata.ConfiguredOption;
 
 /**
  * Demonstrates interception of builders.
@@ -30,7 +30,7 @@ interface InterceptedBeanBlueprint {
      *
      * @return the name
      */
-    @ConfiguredOption(required = true)
+    @Option.Required
     String name();
 
     /**

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/Level0Blueprint.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.helidon.builder.test.testsubjects;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
-import io.helidon.config.metadata.ConfiguredOption;
 
 /**
  * Demonstrates multi-level inheritance for the generated builder.
@@ -32,7 +32,7 @@ interface Level0Blueprint {
      *
      * @return ignored, here for testing purposes only
      */
-    @ConfiguredOption("1")
+    @Option.Default("1")
     String getLevel0StringAttribute();
 
 }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/ParentInterfaceNotABuilder.java
Patch:
@@ -18,8 +18,6 @@
 
 import java.util.Optional;
 
-import io.helidon.config.metadata.ConfiguredOption;
-
 /**
  * Used for demonstrating (and testing) multi-inheritance of interfaces and the builders that are produced.
  *

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/PickleBarrelBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 
 /**
@@ -33,7 +34,7 @@ interface PickleBarrelBlueprint extends ContainerBlueprint {
      *
      * @return the pickles in this barrel
      */
-    @Prototype.Singular
+    @Option.Singular
     List<Pickle> pickles();
 
 }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/PickleBlueprint.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
-import io.helidon.config.metadata.ConfiguredOption;
 
 /**
  * A pickle. Demonstrates the use of enumerated types, optionals, and validation on builders.
@@ -34,7 +34,7 @@ interface PickleBlueprint {
      *
      * @return the type of pickle
      */
-    @ConfiguredOption(required = true)
+    @Option.Required
     PickleType type();
 
     /**

File: builder/tests/builder/src/main/java/module-info.java
Patch:
@@ -19,9 +19,7 @@
  * Helidon Builder Test module.
  */
 module io.helidon.builder.test.builder {
-    requires static jakarta.annotation;
     requires static com.fasterxml.jackson.annotation;
-    requires static io.helidon.config.metadata;
 
     requires io.helidon.common;
     requires io.helidon.common.config;

File: builder/tests/builder/src/test/java/io/helidon/builder/test/SupplierTest.java
Patch:
@@ -40,9 +40,9 @@ class SupplierTest {
     private static final String KEY = "string-supplier";
     private static final String KEY_OPTIONAL = "optional-supplier";
     private static final String ORIGINAL_VALUE = "value";
-    public static final char[] ORIGINAL_VALUE_CHARS = ORIGINAL_VALUE.toCharArray();
+    private static final char[] ORIGINAL_VALUE_CHARS = ORIGINAL_VALUE.toCharArray();
     private static final String NEW_VALUE = "new-value";
-    public static final char[] NEW_VALUE_CHARS = NEW_VALUE.toCharArray();
+    private static final char[] NEW_VALUE_CHARS = NEW_VALUE.toCharArray();
 
     @Test
     void testChangeString() {

File: common/configurable/src/main/java/module-info.java
Patch:
@@ -21,13 +21,10 @@
  */
 module io.helidon.common.configurable {
 
-
     requires io.helidon.builder.api;
     requires io.helidon.common.context;
     requires java.management;
 
-    requires static io.helidon.config.metadata;
-
     requires transitive io.helidon.common.config;
     requires transitive io.helidon.common;
 

File: common/configurable/src/test/java/io/helidon/common/configurable/AllowListTest.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.helidon.common.configurable;
 
 import java.util.Iterator;

File: common/key-util/src/main/java/io/helidon/common/pki/KeysBlueprint.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -84,15 +85,15 @@ interface KeysBlueprint {
      *
      * @return the certificate chain or empty list if not configured
      */
-    @Prototype.Singular("certChain")
+    @Option.Singular("certChain")
     List<X509Certificate> certChain();
 
     /**
      * The X.509 Certificates.
      *
      * @return the certificates configured or empty list if none configured
      */
-    @Prototype.Singular("cert")
+    @Option.Singular
     List<X509Certificate> certs();
 
 }

File: common/key-util/src/main/java/io/helidon/common/pki/PemKeysBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.configurable.Resource;
 import io.helidon.config.metadata.Configured;
@@ -51,7 +52,7 @@ interface PemKeysBlueprint {
      * @return passphrase used to encrypt the private key
      */
     @ConfiguredOption(key = "key.passphrase")
-    @Prototype.Confidential
+    @Option.Confidential
     Optional<char[]> keyPassphrase();
 
     /**

File: common/processor/processor/src/main/java/io/helidon/common/processor/spi/GeneratedAnnotationProvider.java
Patch:
@@ -25,7 +25,6 @@
 public interface GeneratedAnnotationProvider {
     /**
      * Create a generated annotation.
-     * Current limitation - all values must be Strings, does not support any other annotation properties.
      *
      * @param generator type of the generator (annotation processor)
      * @param trigger type of the class that caused this type to be generated

File: common/socket/src/main/java/io/helidon/common/socket/SocketOptionsBlueprint.java
Patch:
@@ -24,6 +24,7 @@
 import java.time.Duration;
 import java.util.Map;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -40,8 +41,8 @@ interface SocketOptionsBlueprint {
      *
      * @return custom socket options
      */
-    @Prototype.Singular
-    @Prototype.SameGeneric
+    @Option.Singular
+    @Option.SameGeneric
     Map<SocketOption<?>, Object> socketOptions();
 
     /**

File: common/types/src/main/java/io/helidon/common/types/Annotation.java
Patch:
@@ -331,7 +331,7 @@ protected void preBuildPrototype() {
         protected void validatePrototype() {
             Errors.Collector collector = Errors.collector();
             if (typeName == null) {
-                collector.fatal(getClass(), "Property \"type-name\" is required, but not set");
+                collector.fatal(getClass(), "Property \"typeName\" is required, but not set");
             }
             collector.collect().checkValid();
         }

File: common/types/src/main/java/io/helidon/common/types/TypedElementInfo.java
Patch:
@@ -629,13 +629,13 @@ protected void preBuildPrototype() {
         protected void validatePrototype() {
             Errors.Collector collector = Errors.collector();
             if (typeName == null) {
-                collector.fatal(getClass(), "Property \"type-name\" is required, but not set");
+                collector.fatal(getClass(), "Property \"typeName\" is required, but not set");
             }
             if (elementName == null) {
-                collector.fatal(getClass(), "Property \"element-name\" is required, but not set");
+                collector.fatal(getClass(), "Property \"elementName\" is required, but not set");
             }
             if (elementTypeKind == null) {
-                collector.fatal(getClass(), "Property \"element-type-kind\" is required, but not set");
+                collector.fatal(getClass(), "Property \"elementTypeKind\" is required, but not set");
             }
             collector.collect().checkValid();
         }

File: config/metadata-processor/src/main/java/module-info.java
Patch:
@@ -20,6 +20,8 @@
 module io.helidon.config.metadata.processor {
 
     requires java.compiler;
+    requires io.helidon.common.types;
+    requires io.helidon.common.processor;
 
     exports io.helidon.config.metadata.processor;
 

File: config/metadata/src/main/java/io/helidon/config/metadata/Configured.java
Patch:
@@ -17,7 +17,6 @@
 package io.helidon.config.metadata;
 
 import java.lang.annotation.ElementType;
-import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -32,7 +31,6 @@
  * using an annotation processor.
  */
 @Target(ElementType.TYPE)
-@Inherited
 @Retention(RetentionPolicy.CLASS)
 public @interface Configured {
     /**

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/BulkheadConfigBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -68,7 +69,7 @@ interface BulkheadConfigBlueprint extends Prototype.Factory<Bulkhead> {
      *
      * @return queue listeners
      */
-    @Prototype.Singular
+    @Option.Singular
     List<Bulkhead.QueueListener> queueListeners();
 
     /**

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/CircuitBreakerConfigBlueprint.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Set;
 import java.util.concurrent.ExecutorService;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -89,7 +90,7 @@ interface CircuitBreakerConfigBlueprint extends Prototype.Factory<CircuitBreaker
      * @return throwable classes to not be considered a failure
      * @see #applyOn()
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<Class<? extends Throwable>> skipOn();
 
     /**
@@ -98,7 +99,7 @@ interface CircuitBreakerConfigBlueprint extends Prototype.Factory<CircuitBreaker
      * @return throwable classes to be considered a failure
      * @see #skipOn()
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<Class<? extends Throwable>> applyOn();
 
     class BuilderDecorator implements Prototype.BuilderDecorator<CircuitBreakerConfig.BuilderBase<?, ?>> {

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/FallbackConfigBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Set;
 import java.util.function.Function;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 
 /**
@@ -39,7 +40,7 @@ interface FallbackConfigBlueprint<T> {
      * @return throwable classes to skip retries
      * @see #applyOn()
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<Class<? extends Throwable>> skipOn();
 
     /**
@@ -48,6 +49,6 @@ interface FallbackConfigBlueprint<T> {
      * @return throwable classes to trigger retries
      * @see #skipOn()
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<Class<? extends Throwable>> applyOn();
 }

File: fault-tolerance/fault-tolerance/src/main/java/io/helidon/faulttolerance/RetryConfigBlueprint.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Optional;
 import java.util.Set;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -106,7 +107,7 @@ interface RetryConfigBlueprint extends Prototype.Factory<Retry> {
      * @return throwable classes to skip retries
      * @see #applyOn()
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<Class<? extends Throwable>> skipOn();
 
     /**
@@ -115,7 +116,7 @@ interface RetryConfigBlueprint extends Prototype.Factory<Retry> {
      * @return throwable classes to trigger retries
      * @see #skipOn()
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<Class<? extends Throwable>> applyOn();
 
     /**

File: http/encoding/encoding/src/main/java/io/helidon/http/encoding/ContentEncodingContextConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -32,7 +33,7 @@ interface ContentEncodingContextConfigBlueprint extends Prototype.Factory<Conten
      *
      * @return list of content encodings to be used (such as {@code gzip,deflate})
      */
-    @Prototype.Singular
+    @Option.Singular
     @ConfiguredOption(provider = true,
                       providerType = ContentEncodingProvider.class)
     List<ContentEncoding> contentEncodings();

File: http/media/media/src/main/java/io/helidon/http/media/MediaContextConfigBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -35,7 +36,7 @@ interface MediaContextConfigBlueprint extends Prototype.Factory<MediaContext> {
      *
      * @return media supports
      */
-    @Prototype.Singular
+    @Option.Singular
     @ConfiguredOption(provider = true,
                       providerType = MediaSupportProvider.class)
     List<MediaSupport> mediaSupports();

File: inject/api/src/main/java/io/helidon/inject/api/DependenciesInfoBlueprint.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.TreeSet;
 import java.util.stream.Collectors;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.TypeName;
 
@@ -38,7 +39,7 @@ interface DependenciesInfoBlueprint {
      *
      * @return map from the service info to its dependencies
      */
-    @Prototype.Singular("serviceInfoDependency")
+    @Option.Singular("serviceInfoDependency")
     Map<ServiceInfoCriteria, Set<DependencyInfo>> serviceInfoDependencies();
 
     /**

File: inject/api/src/main/java/io/helidon/inject/api/DependencyInfoBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Optional;
 import java.util.Set;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.ConfiguredOption;
 
@@ -48,7 +49,7 @@ interface DependencyInfoBlueprint {
      *
      * @return the set of dependencies
      */
-    @Prototype.Singular("injectionPointDependency")
+    @Option.Singular("injectionPointDependency")
     Set<InjectionPointInfo> injectionPointDependencies();
 
     /**

File: inject/api/src/main/java/io/helidon/inject/api/ElementInfoBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Optional;
 import java.util.Set;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.AccessModifier;
 import io.helidon.common.types.Annotation;
@@ -98,15 +99,15 @@ interface ElementInfoBlueprint {
      *
      * @return the annotations on this element
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<Annotation> annotations();
 
     /**
      * The qualifier type annotations on this element.
      *
      * @return the qualifier type annotations on this element
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<Qualifier> qualifiers();
 
 }

File: inject/api/src/main/java/io/helidon/inject/api/ServiceInfoBlueprint.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Optional;
 import java.util.Set;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.TypeName;
 
@@ -41,7 +42,7 @@ interface ServiceInfoBlueprint extends ServiceInfoBasicsBlueprint, ServiceInfoBa
      * @see ExternalContracts
      * @return the service external contracts implemented
      */
-    @Prototype.Singular("externalContractImplemented")
+    @Option.Singular("externalContractImplemented")
     Set<TypeName> externalContractsImplemented();
 
     /**

File: inject/api/src/main/java/io/helidon/inject/spi/InjectionPlanBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.inject.api.ServiceProvider;
@@ -48,7 +49,7 @@ interface InjectionPlanBlueprint {
      *
      * @return the qualified service providers for this injection point
      */
-    @Prototype.Singular
+    @Option.Singular
     List<ServiceProvider<?>> injectionPointQualifiedServiceProviders();
 
     /**

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeComponentTracingConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 
@@ -38,7 +39,7 @@
 interface FakeComponentTracingConfigBlueprint extends FakeTraceableConfigBlueprint {
 
     // Builder::addSpan(String span, FakeSpanLogTracingConfigBean val), Impl::getSpan(String span), etc.
-    @Prototype.Singular("span")
+    @Option.Singular("span")
     Map<String, FakeSpanTracingConfig> spanLogMap();
 
 }

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeKeystoreConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -49,7 +50,7 @@ interface FakeKeystoreConfigBlueprint {
     char[] keyPassphrase();
 
     @ConfiguredOption(key = "cert.alias")
-    @Prototype.Singular("certAlias")
+    @Option.Singular("certAlias")
     List<String> certAliases();
 
     @ConfiguredOption(key = "cert-chain.alias")

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakePathTracingConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -44,7 +45,7 @@ interface FakePathTracingConfigBlueprint {
      *
      * @return list of methods, if empty, this configuration is valid for any method
      */
-    @Prototype.Singular("method")
+    @Option.Singular("method")
     // Builder::addMethod(String method);
     List<String> methods();
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeServerConfigBlueprint.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -64,7 +65,7 @@ default Optional<FakeSocketConfig> namedSocket(String name) {
      *
      * @return a map of all the configured server sockets, never null
      */
-    @Prototype.Singular("socket") // note that singular names cannot clash
+    @Option.Singular("socket") // note that singular names cannot clash
     @ConfiguredOption(key = "sockets")
     Map<String, FakeSocketConfig> sockets();
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeSpanTracingConfigBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -41,7 +42,7 @@ public interface FakeSpanTracingConfigBlueprint extends FakeTraceableConfigBluep
     Optional<String> newName();
 
     @ConfiguredOption
-    @Prototype.Singular("spanLog")
+    @Option.Singular("spanLog")
         // B addSpanLog(String, FakeSpanLogTracingConfigBean);
     Map<String, FakeSpanLogTracingConfig> spanLogMap();
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeTracingConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 
@@ -32,7 +33,7 @@
 interface FakeTracingConfigBlueprint extends FakeTraceableConfigBlueprint {
 
     // Builder::addComponent(String component); Impl::getComponent(String component);
-    @Prototype.Singular
+    @Option.Singular
     Map<String, FakeComponentTracingConfig> components();
 
 }

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeWebServerTlsConfigBlueprint.java
Patch:
@@ -24,6 +24,7 @@
 
 import javax.net.ssl.SSLContext;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.LazyValue;
 import io.helidon.config.metadata.Configured;
@@ -56,7 +57,7 @@ interface FakeWebServerTlsConfigBlueprint {
     // TODO: had to make this Optional - we might need something like 'ExternalConfigBean' for this case ?
     Optional<SSLContext> sslContext();
 
-    @Prototype.Singular("cipher")
+    @Option.Singular("cipher")
     @ConfiguredOption(key = "cipher")
         //    Set<String> cipherSuite();
     List<String> cipherSuite();

File: inject/processor/src/main/java/io/helidon/inject/processor/InjectionAnnotationProcessor.java
Patch:
@@ -403,6 +403,7 @@ protected void processBasics(ServicesToProcess services,
                     services.addParentServiceType(serviceTypeName, TypeName.builder(typeName.genericTypeName())
                             .className(typeName.classNameWithEnclosingNames().replace('.', '$')
                                                + ActivatorCreatorDefault.INNER_ACTIVATOR_CLASS_NAME)
+                            .enclosingNames(List.of()) // activators are always flat
                             .build());
                 } else {
                     // otherwise extends AbstractServiceProvider with the correct type

File: inject/runtime/src/main/java/io/helidon/inject/runtime/HelidonInjectionPlanBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.inject.spi.InjectionPlan;
 
@@ -35,7 +36,7 @@ interface HelidonInjectionPlanBlueprint extends InjectionPlan {
      *
      * @return the unqualified services/providers for this injection point
      */
-    @Prototype.Singular
+    @Option.Singular
     List<Object> unqualifiedProviders();
 
 }

File: inject/tools/src/main/java/io/helidon/inject/tools/ActivatorCreatorDefault.java
Patch:
@@ -99,7 +99,7 @@ public class ActivatorCreatorDefault extends AbstractCreator implements Activato
     private static final String SERVICE_PROVIDER_ACTIVATOR_HBS = "service-provider-activator.hbs";
     private static final String SERVICE_PROVIDER_APPLICATION_STUB_HBS = "service-provider-application-stub.hbs";
     private static final String SERVICE_PROVIDER_MODULE_HBS = "service-provider-module.hbs";
-    private static final TypeName CREATOR = TypeName.create(AbstractCreator.class);
+    private static final TypeName CREATOR = TypeName.create(ActivatorCreatorDefault.class);
 
     /**
      * Service loader based constructor.
@@ -569,6 +569,7 @@ String toModuleBody(ActivatorCreatorRequest req,
     public TypeName toActivatorImplTypeName(TypeName serviceTypeName) {
         return TypeName.builder()
                 .packageName(serviceTypeName.packageName())
+                .enclosingNames(List.of())
                 .className(CommonUtils.toFlatName(serviceTypeName.classNameWithEnclosingNames()) + INNER_ACTIVATOR_CLASS_NAME)
                 .build();
     }

File: inject/tools/src/main/java/io/helidon/inject/tools/ActivatorCreatorResponseBlueprint.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Optional;
 import java.util.Set;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.TypeName;
 
@@ -41,7 +42,7 @@ interface ActivatorCreatorResponseBlueprint extends GeneralCreatorResponseBluepr
      *
      * @return interceptors generated
      */
-    @Prototype.Singular
+    @Option.Singular
     Map<TypeName, InterceptionPlan> serviceTypeInterceptorPlans();
 
     /**

File: inject/tools/src/main/java/io/helidon/inject/tools/ApplicationCreatorConfigOptionsBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Set;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.TypeName;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -47,7 +48,7 @@ interface ApplicationCreatorConfigOptionsBlueprint {
      *
      * @return the allow-listed named providers (which is the FQN of the underlying service type)
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<String> permittedProviderNames();
 
     /**
@@ -57,7 +58,7 @@ interface ApplicationCreatorConfigOptionsBlueprint {
      *
      * @return the allow-listed qualifier type names
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<TypeName> permittedProviderQualifierTypeNames();
 
 }

File: inject/tools/src/main/java/io/helidon/inject/tools/CustomAnnotationTemplateResponseBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.TypeName;
 import io.helidon.common.types.TypedElementInfo;
@@ -40,14 +41,14 @@ interface CustomAnnotationTemplateResponseBlueprint {
      *
      * @return map of generated type name to body of the source to be generated
      */
-    @Prototype.Singular
+    @Option.Singular
     Map<TypeName, String> generatedSourceCode();
 
     /**
      * Any generated resources should be generated.
      *
      * @return map of generated type name (which is really just a directory path under resources) to the resource to be generated
      */
-    @Prototype.Singular
+    @Option.Singular
     Map<TypedElementInfo, String> generatedResources();
 }

File: inject/tools/src/main/java/io/helidon/inject/tools/ExternalModuleCreatorRequestBlueprint.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.inject.api.Qualifier;
 
@@ -37,15 +38,15 @@ interface ExternalModuleCreatorRequestBlueprint extends GeneralCreatorRequestBlu
      *
      * @return the list of package names to analyze and target for activator creation
      */
-    @Prototype.Singular
+    @Option.Singular
     List<String> packageNamesToScan();
 
     /**
      * Optionally, provides a means to map additional qualifiers to service types.
      *
      * @return any qualifiers that should be mapped into the generated services
      */
-    @Prototype.Singular
+    @Option.Singular
     Map<String, Set<Qualifier>> serviceTypeToQualifiersMap();
 
     /**

File: inject/tools/src/main/java/io/helidon/inject/tools/GeneralCreatorResponseBlueprint.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.TypeName;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -59,7 +60,7 @@ interface GeneralCreatorResponseBlueprint extends GeneralCodeGenNamesBlueprint {
      *
      * @return map of service type names to generated details
      */
-    @Prototype.Singular
+    @Option.Singular
     Map<TypeName, GeneralCodeGenDetail> serviceTypeDetails();
 
     // resources related ...

File: inject/tools/src/main/java/io/helidon/inject/tools/InterceptorCreatorResponseBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.nio.file.Path;
 import java.util.Map;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.TypeName;
 
@@ -33,7 +34,7 @@ public interface InterceptorCreatorResponseBlueprint {
      *
      * @return the generated files
      */
-    @Prototype.Singular
+    @Option.Singular
     Map<TypeName, Path> generatedFiles();
 
     /**

File: inject/tools/src/main/java/io/helidon/inject/tools/ModuleInfoDescriptorBlueprint.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Map;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.TypeName;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -97,15 +98,15 @@ interface ModuleInfoDescriptorBlueprint {
      *
      * @return the items
      */
-    @Prototype.Singular
+    @Option.Singular
     List<ModuleInfoItem> items();
 
     /**
      * The items that were not handled (due to parsing outages, etc.).
      *
      * @return the list of unhandled lines
      */
-    @Prototype.Singular
+    @Option.Singular
     List<String> unhandledLines();
 
     /**

File: inject/tools/src/main/java/io/helidon/inject/tools/ModuleInfoItemBlueprint.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.ConfiguredOption;
 
@@ -39,7 +40,7 @@ interface ModuleInfoItemBlueprint {
      *
      * @return pre-comments
      */
-    @Prototype.Singular
+    @Option.Singular
     List<String> precomments();
 
     /**
@@ -118,7 +119,7 @@ interface ModuleInfoItemBlueprint {
      *
      * @return the set of with or to definitions
      */
-    @Prototype.Singular
+    @Option.Singular
     Set<String> withOrTo();
 
     /**

File: integrations/oci/sdk/runtime/src/main/java/io/helidon/integrations/oci/sdk/runtime/OciConfigBlueprint.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Optional;
 import java.util.function.Predicate;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -240,7 +241,7 @@ interface OciConfigBlueprint {
      */
     // See https://github.com/helidon-io/helidon/issues/6908
     @ConfiguredOption(key = "auth.private-key")
-    @Prototype.Confidential
+    @Option.Confidential
     Optional<char[]> authPrivateKey();
 
     /**
@@ -255,7 +256,7 @@ interface OciConfigBlueprint {
      */
     // See https://github.com/helidon-io/helidon/issues/6908
     @ConfiguredOption(key = "auth.passphrase")
-    @Prototype.Confidential
+    @Option.Confidential
     Optional<char[]> authPassphrase();
 
     /**

File: metrics/api/src/main/java/io/helidon/metrics/api/ScopingConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Map;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -54,6 +55,6 @@ interface ScopingConfigBlueprint {
      * @return scope settings
      */
     @ConfiguredOption
-    @Prototype.Singular
+    @Option.Singular
     Map<String, ScopeConfig> scopes();
 }

File: webclient/api/src/main/java/io/helidon/webclient/api/HttpConfigBaseBlueprint.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.tls.Tls;
 import io.helidon.config.metadata.Configured;
@@ -102,6 +103,6 @@ interface HttpConfigBaseBlueprint {
      * @return map of client properties
      */
     @ConfiguredOption
-    @Prototype.Singular("property")
+    @Option.Singular("property")
     Map<String, String> properties();
 }

File: webclient/api/src/main/java/io/helidon/webclient/api/WebClientConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -38,7 +39,7 @@ interface WebClientConfigBlueprint extends HttpClientConfigBlueprint, Prototype.
      * @return client protocol configurations
      */
     @ConfiguredOption(provider = true, providerType = ProtocolConfigProvider.class)
-    @Prototype.Singular
+    @Option.Singular
     List<ProtocolConfig> protocolConfigs();
 
     /**
@@ -51,6 +52,6 @@ interface WebClientConfigBlueprint extends HttpClientConfigBlueprint, Prototype.
      *
      * @return list of HTTP protocol IDs in order of preference
      */
-    @Prototype.Singular
+    @Option.Singular
     List<String> protocolPreference();
 }

File: webclient/api/src/main/java/io/helidon/webclient/api/WebClientCookieManagerConfigBlueprint.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -50,7 +51,7 @@ interface WebClientCookieManagerConfigBlueprint extends Prototype.Factory<WebCli
      * @return map of default cookies
      */
     @ConfiguredOption
-    @Prototype.Singular
+    @Option.Singular
     Map<String, String> defaultCookies();
 
     /**

File: webclient/websocket/src/main/java/io/helidon/webclient/websocket/WsClientProtocolConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -39,6 +40,6 @@ default String type() {
     String name();
 
     @ConfiguredOption
-    @Prototype.Singular
+    @Option.Singular
     List<String> subProtocols();
 }

File: webserver/webserver/src/main/java/io/helidon/webserver/ConnectionConfigBlueprint.java
Patch:
@@ -20,6 +20,7 @@
 import java.time.Duration;
 import java.util.Map;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.ConfiguredOption;
 
@@ -116,6 +117,6 @@ interface ConnectionConfigBlueprint {
      * @return socket options
      * @see java.net.StandardSocketOptions
      */
-    @Prototype.Singular
+    @Option.Singular
     Map<SocketOption<?>, Object> socketOptions();
 }

File: webserver/webserver/src/main/java/io/helidon/webserver/WebServerConfigBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Map;
 import java.util.Optional;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.context.Context;
 import io.helidon.config.ConfigException;
@@ -52,7 +53,7 @@ interface WebServerConfigBlueprint extends ListenerConfigBlueprint, Prototype.Fa
      * @return map of listener configurations, except for the default one
      */
     @ConfiguredOption
-    @Prototype.Singular
+    @Option.Singular
     Map<String, ListenerConfig> sockets();
 
     /**

File: webserver/webserver/src/main/java/io/helidon/webserver/http1/Http1ConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -132,15 +133,15 @@ interface Http1ConfigBlueprint extends ProtocolConfig {
      *
      * @return send event listeners
      */
-    @Prototype.Singular
+    @Option.Singular
     List<Http1ConnectionListener> sendListeners();
 
     /**
      * Connection receive event listeners for HTTP/1.1.
      *
      * @return receive event listeners
      */
-    @Prototype.Singular
+    @Option.Singular
     List<Http1ConnectionListener> receiveListeners();
 
     /**

File: webserver/webserver/src/main/java/io/helidon/webserver/http1/Http1ConnectionSelectorConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.webserver.http1.spi.Http1Upgrader;
 
@@ -32,7 +33,7 @@ interface Http1ConnectionSelectorConfigBlueprint extends Prototype.Factory<Http1
      *
      * @return map of protocol name to upgrader
      */
-    @Prototype.Singular
+    @Option.Singular
     Map<String, Http1Upgrader> upgraders();
 
     /**

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/WsConfigBlueprint.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Set;
 
+import io.helidon.builder.api.Option;
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
@@ -35,7 +36,7 @@ interface WsConfigBlueprint extends ProtocolConfig {
      * @return origins
      */
     @ConfiguredOption
-    @Prototype.Singular
+    @Option.Singular
     Set<String> origins();
 
     /**

File: metrics/provider-tests/src/main/java/io/helidon/metrics/provider/tests/TestGlobalTags.java
Patch:
@@ -24,6 +24,7 @@
 import io.helidon.metrics.api.MeterRegistry;
 import io.helidon.metrics.api.Metrics;
 import io.helidon.metrics.api.MetricsConfig;
+import io.helidon.metrics.api.MetricsFactory;
 import io.helidon.metrics.api.Tag;
 
 import org.junit.jupiter.api.Test;
@@ -69,7 +70,7 @@ void testWithConfig() {
 
         Config config = Config.just(ConfigSources.create(settings));
 
-        MeterRegistry meterRegistry = Metrics.createMeterRegistry(
+        MeterRegistry meterRegistry = MetricsFactory.getInstance().globalRegistry(
                 MetricsConfig.create(config.get("metrics")));
 
         Counter counter1 = meterRegistry.getOrCreate(Counter.builder("a")

File: metrics/providers/micrometer/src/test/java/io/helidon/metrics/providers/micrometer/TestGauge.java
Patch:
@@ -34,7 +34,7 @@ class TestGauge {
 
     @BeforeAll
     static void prep() {
-        meterRegistry = Metrics.createMeterRegistry(MetricsConfig.create());
+        meterRegistry = Metrics.globalRegistry();
     }
 
     @Test

File: metrics/providers/micrometer/src/test/java/io/helidon/metrics/providers/micrometer/TestTimer.java
Patch:
@@ -35,7 +35,7 @@ class TestTimer {
 
     @BeforeAll
     static void prep() {
-        meterRegistry = Metrics.createMeterRegistry(MetricsConfig.create());
+        meterRegistry = Metrics.globalRegistry();
     }
 
     @Test

File: webserver/testing/junit5/junit5/src/main/java/io/helidon/webserver/testing/junit5/DirectClient.java
Patch:
@@ -56,7 +56,7 @@ public class DirectClient implements Http1Client {
     public DirectClient(HttpRouting routing) {
         this.routing = routing;
         this.httpClient = Http1Client.builder()
-                .baseUri(URI.create("unit://helidon-unit:65000"))
+                .baseUri(URI.create("http://helidon-unit:65000"))
                 .build();
         this.router = Router.builder().addRouting(routing).build();
     }

File: webserver/testing/junit5/junit5/src/main/java/io/helidon/webserver/testing/junit5/DirectWebClient.java
Patch:
@@ -60,7 +60,7 @@ public class DirectWebClient implements WebClient {
     public DirectWebClient(HttpRouting routing) {
         this.routing = routing;
         this.webClient = WebClient.builder()
-                .baseUri("unit://helidon-unit:65000")
+                .baseUri("http://helidon-unit:65000")
                 .build();
         this.router = Router.builder().addRouting(routing).build();
     }

File: builder/api/src/main/java/module-info.java
Patch:
@@ -18,8 +18,11 @@
  * The Builder API module.
  */
 module io.helidon.builder.api {
+
     requires transitive io.helidon.common;
+
     requires static io.helidon.common.config;
 
     exports io.helidon.builder.api;
+	
 }

File: builder/processor/src/main/java/module-info.java
Patch:
@@ -29,4 +29,5 @@
 
     provides javax.annotation.processing.Processor
             with io.helidon.builder.processor.BlueprintProcessor;
+	
 }

File: common/buffers/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,9 @@
  * Byte buffers and byte operations.
  */
 module io.helidon.common.buffers {
+
     requires io.helidon.common;
 
     exports io.helidon.common.buffers;
+
 }
\ No newline at end of file

File: common/common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,10 @@
  * Helidon Common library.
  */
 module io.helidon.common {
+
     // used only by LogConfig
     requires java.logging;
 
     exports io.helidon.common;
+
 }

File: common/config/src/main/java/module-info.java
Patch:
@@ -18,10 +18,12 @@
  * Helidon Common Config Library.
  */
 module io.helidon.common.config {
+
     requires io.helidon.common;
 
     exports io.helidon.common.config;
     exports io.helidon.common.config.spi;
 
     uses io.helidon.common.config.spi.ConfigProvider;
+
 }

File: common/context/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,10 +18,12 @@
  * Helidon Common Context library.
  */
 module io.helidon.common.context {
+
     requires io.helidon.common;
 
     exports io.helidon.common.context;
     exports io.helidon.common.context.spi;
 
     uses io.helidon.common.context.spi.DataPropagationProvider;
+
 }

File: common/features/api/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,5 +20,7 @@
  * @see io.helidon.common.features.api.Feature
  */
 module io.helidon.common.features.api {
+
     exports io.helidon.common.features.api;
+
 }
\ No newline at end of file

File: common/features/features/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,10 @@
  * Feature catalog.
  */
 module io.helidon.common.features {
+
     requires io.helidon.common;
     requires io.helidon.common.features.api;
 
     exports io.helidon.common.features;
+
 }
\ No newline at end of file

File: common/features/processor/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,9 +18,11 @@
  * Annotation processor generating metadata for Helidon features.
  */
 module io.helidon.common.features.processor {
+
     requires java.compiler;
 
     exports io.helidon.common.features.processor;
 
     provides javax.annotation.processing.Processor with io.helidon.common.features.processor.FeatureProcessor;
+
 }
\ No newline at end of file

File: common/mapper/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,10 +18,12 @@
  * Helidon Common Mapper.
  */
 module io.helidon.common.mapper {
+
     requires transitive io.helidon.common;
 
     exports io.helidon.common.mapper;
     exports io.helidon.common.mapper.spi;
 
     uses io.helidon.common.mapper.spi.MapperProvider;
+
 }

File: common/media-type/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,10 +18,12 @@
  * Helidon Common Media Type.
  */
 module io.helidon.common.media.type {
+
     requires io.helidon.common;
 
     exports io.helidon.common.media.type;
     exports io.helidon.common.media.type.spi;
 
     uses io.helidon.common.media.type.spi.MediaTypeDetector;
+
 }

File: common/parameters/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,8 +17,10 @@
  * Support for parameters with multiple values.
  */
 module io.helidon.common.parameters {
+
     // GenericType
     requires transitive io.helidon.common;
 
     exports io.helidon.common.parameters;
+
 }
\ No newline at end of file

File: common/processor/class-model/src/main/java/module-info.java
Patch:
@@ -18,6 +18,9 @@
  * The class model generator.
  */
 module io.helidon.common.processor.classmodel {
+
     requires io.helidon.common.types;
+
     exports io.helidon.common.processor.classmodel;
+
 }

File: common/processor/helidon-copyright/src/main/java/module-info.java
Patch:
@@ -18,10 +18,12 @@
  * Helidon copyright implementation.
  */
 module io.helidon.common.processor.helidon.copyright {
+
     requires io.helidon.common.processor;
 
     exports io.helidon.common.processor.helidon.copyright;
 
     provides io.helidon.common.processor.spi.CopyrightProvider
              with io.helidon.common.processor.helidon.copyright.HelidonCopyrightProvider;
+	
 }
\ No newline at end of file

File: common/reactive/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,9 +18,11 @@
  * Helidon Common Reactive Library.
  */
 module io.helidon.common.reactive {
+
     requires java.logging;
     requires io.helidon.common;
     requires io.helidon.common.mapper;
 
     exports io.helidon.common.reactive;
+
 }

File: common/security/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,5 +18,7 @@
  * Types that are security related and can be used across all components (servers, clients etc.).
  */
 module io.helidon.common.security {
+
     exports io.helidon.common.security;
+
 }
\ No newline at end of file

File: common/task/src/main/java/module-info.java
Patch:
@@ -18,5 +18,7 @@
  * Common task module.
  */
 module io.helidon.common.task {
+
     exports io.helidon.common.task;
+
 }
\ No newline at end of file

File: common/testing/junit5/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,8 +20,10 @@
  * @see io.helidon.common.testing.junit5.OptionalMatcher
  */
 module io.helidon.common.testing.junit5 {
+
     requires hamcrest.all;
     requires org.junit.jupiter.api;
 
     exports io.helidon.common.testing.junit5;
+
 }
\ No newline at end of file

File: config/metadata-processor/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,9 +18,11 @@
  * Annotation processor generating JSON metadata for configuration.
  */
 module io.helidon.config.metadata.processor {
+
     requires java.compiler;
 
     exports io.helidon.config.metadata.processor;
 
     provides javax.annotation.processing.Processor with io.helidon.config.metadata.processor.ConfigMetadataProcessor;
+	
 }
\ No newline at end of file

File: config/metadata/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,5 +17,7 @@
  * Configuration metadata annotations.
  */
 module io.helidon.config.metadata {
+
     exports io.helidon.config.metadata;
+
 }
\ No newline at end of file

File: config/object-mapping/src/main/java/module-info.java
Patch:
@@ -26,11 +26,13 @@
         path = {"Config", "ObjectMapping"}
 )
 module io.helidon.config.objectmapping {
-    requires static io.helidon.common.features.api;
 
     requires io.helidon.config;
 
+    requires static io.helidon.common.features.api;
+
     exports io.helidon.config.objectmapping;
 
     provides io.helidon.config.spi.ConfigMapperProvider with io.helidon.config.objectmapping.ObjectConfigMapperProvider;
+	
 }

File: config/tests/test-bundle/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,4 +20,5 @@
 module io.helidon.config.tests.bundle {
 
     requires io.helidon.bundles.config;
+	
 }

File: cors/src/main/java/module-info.java
Patch:
@@ -18,11 +18,13 @@
  * CORS configuration and types.
  */
 module io.helidon.cors {
+	
     requires java.logging;
     requires io.helidon.http;
     requires io.helidon.common.config;
 
     requires static io.helidon.config.metadata;
 
     exports io.helidon.cors;
+	
 }
\ No newline at end of file

File: dbclient/health/src/main/java/module-info.java
Patch:
@@ -27,10 +27,11 @@
 )
 module io.helidon.dbclient.health {
 
+    requires io.helidon.health;
+
     requires static io.helidon.common.features.api;
 
     requires transitive io.helidon.dbclient;
-    requires io.helidon.health;
 
     exports io.helidon.dbclient.health;
 

File: dbclient/metrics/src/main/java/module-info.java
Patch:
@@ -27,9 +27,11 @@
 )
 module io.helidon.dbclient.metrics {
 
+    requires io.helidon.metrics.api;
+
     requires static io.helidon.common.features.api;
+
     requires transitive io.helidon.dbclient;
-    requires io.helidon.metrics.api;
 
     exports io.helidon.dbclient.metrics;
 

File: fault-tolerance/fault-tolerance/src/main/java/module-info.java
Patch:
@@ -26,6 +26,7 @@
          path = "FT"
 )
 module io.helidon.faulttolerance {
+
     requires io.helidon.common;
     requires io.helidon.common.types;
     requires io.helidon.common.configurable;
@@ -46,4 +47,5 @@
 
     // inject module
     provides io.helidon.inject.api.ModuleComponent with io.helidon.faulttolerance.Injection$$Module;
+
 }

File: health/health-checks/src/main/java/module-info.java
Patch:
@@ -40,4 +40,5 @@
     exports io.helidon.health.checks;
 
     provides io.helidon.health.spi.HealthCheckProvider with io.helidon.health.checks.BuiltInHealthCheckProvider;
+	
 }

File: health/health/src/main/java/module-info.java
Patch:
@@ -18,9 +18,11 @@
  * Helidon health API.
  */
 module io.helidon.health {
+
     requires transitive io.helidon.common;
     requires transitive io.helidon.common.config;
 
     exports io.helidon.health;
     exports io.helidon.health.spi;
+
 }

File: helidon/src/main/java/module-info.java
Patch:
@@ -18,11 +18,13 @@
  * Types needed to start a Helidon application.
  */
 module io.helidon {
+
     requires io.helidon.common;
     requires io.helidon.logging.common;
 
     exports io.helidon;
     exports io.helidon.spi;
 
     uses io.helidon.spi.HelidonStartupProvider;
+
 }
\ No newline at end of file

File: inject/tests/resources-inject/src/main/java/module-info.java
Patch:
@@ -34,4 +34,5 @@
     exports io.helidon.inject.tests.inject.tbox;
 
     provides io.helidon.inject.api.ModuleComponent with io.helidon.inject.tests.inject.Injection$$Module;
+	
 }

File: inject/tests/resources-plain/src/main/java/module-info.java
Patch:
@@ -27,4 +27,5 @@
 
     exports io.helidon.inject.tests.plain.hello;
     exports io.helidon.inject.tests.plain.interceptor;
+	
 }

File: integrations/cdi/common-cdi/delegates/src/main/java/module-info.java
Patch:
@@ -23,4 +23,5 @@
     requires transitive jakarta.cdi;
 
     exports io.helidon.integrations.cdi.delegates;
+	
 }

File: integrations/cdi/common-cdi/reference-counted-context/src/main/java/module-info.java
Patch:
@@ -23,11 +23,13 @@
 @Deprecated(forRemoval = true, since = "3.0.3")
 @SuppressWarnings({ "requires-automatic", "requires-transitive-automatic" })
 module io.helidon.integrations.cdi.referencecountedcontext {
+
     requires io.helidon.integrations.cdi.delegates;
     requires transitive jakarta.cdi;
 
     exports io.helidon.integrations.cdi.referencecountedcontext;
 
     provides jakarta.enterprise.inject.spi.Extension
             with io.helidon.integrations.cdi.referencecountedcontext.ReferenceCountedExtension;
+
 }

File: integrations/jta/jdbc/src/main/java/module-info.java
Patch:
@@ -23,7 +23,6 @@
     requires transitive java.rmi; // jakarta.transaction.TransactionRequiredException extends RemoteException (!)
 
     requires transitive jakarta.transaction; // automatic module
-
     requires transitive io.helidon.integrations.jdbc;
 
     exports io.helidon.integrations.jta.jdbc;

File: integrations/oci/sdk/cdi/src/main/java/module-info.java
Patch:
@@ -40,4 +40,5 @@
         with io.helidon.integrations.oci.sdk.cdi.OciExtension;
 
     opens io.helidon.integrations.oci.sdk.cdi to weld.core.impl;
+	
 }

File: integrations/vault/secrets/database/src/main/java/module-info.java
Patch:
@@ -26,12 +26,12 @@
         path = {"HCP Vault", "Secrets", "Database"}
 )
 module io.helidon.integrations.vault.secrets.database {
-    requires static io.helidon.common.features.api;
 
     requires java.logging;
 
+    requires static io.helidon.common.features.api;
+
     requires transitive io.helidon.integrations.vault;
-    requires io.helidon.integrations.common.rest;
 
     exports io.helidon.integrations.vault.secrets.database;
 
@@ -40,4 +40,5 @@
 
     provides io.helidon.integrations.vault.spi.InjectionProvider
             with io.helidon.integrations.vault.secrets.database.DbEngineProvider;
+
 }

File: integrations/vault/vault/src/main/java/module-info.java
Patch:
@@ -46,4 +46,5 @@
 
     // required for CDI
     opens io.helidon.integrations.vault to weld.core.impl, io.helidon.microprofile.cdi;
+	
 }
\ No newline at end of file

File: logging/common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,11 +18,13 @@
  * Helidon logging.
  */
 module io.helidon.logging.common {
+
     requires io.helidon.common;
 
     exports io.helidon.logging.common;
     exports io.helidon.logging.common.spi;
 
     uses io.helidon.logging.common.spi.MdcProvider;
     uses io.helidon.logging.common.spi.LoggingProvider;
+	
 }
\ No newline at end of file

File: lra/coordinator/client/spi/src/main/java/module-info.java
Patch:
@@ -18,7 +18,9 @@
  * Abstract coordinator spi for easy switching used coordinator implementation.
  */
 module io.helidon.lra.coordinator.client {
+
     requires microprofile.lra.api;
 
     exports io.helidon.lra.coordinator.client;
+
 }
\ No newline at end of file

File: messaging/connectors/jms-shim/src/main/java/module-info.java
Patch:
@@ -18,8 +18,10 @@
  * Exposes JMS based on {@code javax} packages over {@code jakarta} packages.
  */
 module io.helidon.messaging.jms.shim {
-    requires javax.jms.api;
+
     requires jakarta.messaging;
+    requires javax.jms.api;
 
     exports io.helidon.messaging.connectors.jms.shim;
+
 }

File: metrics/trace-exemplar/src/main/java/io/helidon/metrics/exemplartrace/TraceExemplarService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/bundles/helidon-microprofile-core/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
  * Aggregator module for microprofile core.
  */
 module io.helidon.microprofile.bundle.core {
+
     requires transitive io.helidon.microprofile.config;
     requires transitive io.helidon.microprofile.server;
 

File: microprofile/tests/junit5/src/main/java/module-info.java
Patch:
@@ -28,4 +28,5 @@
     requires transitive jakarta.ws.rs;
 
     exports io.helidon.microprofile.tests.junit5;
+
 }

File: microprofile/tracing/src/main/java/module-info.java
Patch:
@@ -28,6 +28,7 @@
         path = "Tracing",
         since = "1.0.0")
 @Deprecated(since="4.0.0", forRemoval = true)
+@SuppressWarnings({ "requires-automatic", "requires-transitive-automatic" })
 module io.helidon.microprofile.tracing {
     requires static io.helidon.common.features.api;
 
@@ -70,4 +71,5 @@
             with io.helidon.microprofile.tracing.MpTracingClientRegistrar;
     provides org.eclipse.microprofile.rest.client.spi.RestClientListener
             with io.helidon.microprofile.tracing.MpTracingRestClientListener;
+	
 }

File: security/annotations/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,9 @@
  * Annotations for integration with environment supporting annotations.
  */
 module io.helidon.security.annotations {
+
     requires transitive io.helidon.security;
 
     exports io.helidon.security.annotations;
+
 }

File: tests/apps/bookstore/common/src/main/java/module-info.java
Patch:
@@ -25,4 +25,5 @@
     opens io.helidon.tests.apps.bookstore.common to weld.core.impl, io.helidon.microprofile.cdi;
 
     exports io.helidon.tests.apps.bookstore.common;
+
 }

File: tracing/config/src/main/java/io/helidon/tracing/config/TracingConfig.java
Patch:
@@ -25,7 +25,7 @@
  * Tracing configuration that contains traced components (such as WebServer, Security) and their traced spans and span logs.
  * Spans can be renamed through configuration, components, spans and span logs may be disabled through this configuration.
  *
- * @see #create(io.helidon.config.Config)
+ * @see #create(io.helidon.common.config.Config)
  * @see #builder()
  */
 public abstract class TracingConfig extends Traceable {

File: webclient/http2/src/main/java/module-info.java
Patch:
@@ -26,13 +26,15 @@
          path = {"WebClient", "HTTP/2"}
 )
 module io.helidon.webclient.http2 {
+
     requires static io.helidon.common.features.api;
     requires static io.helidon.config.metadata;
 
     requires transitive io.helidon.builder.api;
+    requires transitive io.helidon.common.pki;
     requires transitive io.helidon.http.http2;
     requires transitive io.helidon.webclient;
-    requires transitive io.helidon.common.pki;
 
     exports io.helidon.webclient.http2;
+
 }

File: webclient/webclient/src/main/java/module-info.java
Patch:
@@ -18,6 +18,8 @@
  * Helidon WebClient.
  */
 module io.helidon.webclient {
+
     requires transitive io.helidon.webclient.api;
     requires transitive io.helidon.webclient.http1;
+
 }

File: webserver/static-content/src/main/java/module-info.java
Patch:
@@ -26,10 +26,12 @@
          path = {"WebServer", "Static Content"}
 )
 module io.helidon.webserver.staticcontent {
+
     requires static io.helidon.common.features.api;
 
-    requires transitive io.helidon.webserver;
     requires transitive io.helidon.common.configurable;
+    requires transitive io.helidon.webserver;
 
     exports io.helidon.webserver.staticcontent;
+
 }
\ No newline at end of file

File: webserver/tests/upgrade/src/main/java/module-info.java
Patch:
@@ -19,12 +19,13 @@
  */
 module helidon.tests.integration.webserver.upgrade {
 
-    exports io.helidon.webserver.tests.upgrade;
-
     requires io.helidon.logging.common;
     requires io.helidon.http;
     requires io.helidon.webserver;
     requires io.helidon.common.pki;
     requires io.helidon.webserver.http2;
     requires io.helidon.webserver.websocket;
+	
+	exports io.helidon.webserver.tests.upgrade;
+	
 }
\ No newline at end of file

File: webserver/testing/junit5/junit5/src/main/java/io/helidon/webserver/testing/junit5/DirectClient.java
Patch:
@@ -59,7 +59,6 @@ public DirectClient(HttpRouting routing) {
                 .baseUri(URI.create("unit://helidon-unit:65000"))
                 .build();
         this.router = Router.builder().addRouting(routing).build();
-        this.router.beforeStart();
     }
 
     @Override

File: webserver/testing/junit5/junit5/src/main/java/io/helidon/webserver/testing/junit5/DirectWebClient.java
Patch:
@@ -63,7 +63,6 @@ public DirectWebClient(HttpRouting routing) {
                 .baseUri("unit://helidon-unit:65000")
                 .build();
         this.router = Router.builder().addRouting(routing).build();
-        this.router.beforeStart();
     }
 
     @Override

File: webserver/testing/junit5/junit5/src/main/java/io/helidon/webserver/testing/junit5/Http1DirectJunitExtension.java
Patch:
@@ -154,7 +154,7 @@ public HttpRouting.Builder get(String socketName) {
         @Override
         public void handle(Method method, String socketName, HttpRouting.Builder value) {
             HttpRouting routing = value.build();
-
+            routing.beforeStart();
             if (clients.putIfAbsent(socketName, new DirectClient(routing)) != null) {
                 throw new IllegalStateException("Method "
                                                         + method

File: security/providers/google-login/src/main/java/io/helidon/security/providers/google/login/GoogleTokenProvider.java
Patch:
@@ -110,7 +110,8 @@ private GoogleTokenProvider(Builder builder) {
                 NetHttpTransport transport = transportBuilder.build();
 
                 // thread safe according to documentation
-                this.verifier = new GoogleIdTokenVerifier.Builder(transport, jsonFactory)
+                this.verifier = (GoogleIdTokenVerifier) new GoogleIdTokenVerifier.Builder(transport, jsonFactory)
+                        .setHttpTransportFactory(() -> transport)
                         .setAudience(Set.of(clientId))
                         .build();
             } catch (Exception e) {

File: security/providers/google-login/src/main/java/module-info.java
Patch:
@@ -35,6 +35,7 @@
     requires io.helidon.security;
     requires google.api.client;
     requires com.google.api.client;
+    requires com.google.api.client.auth;
     requires com.google.api.client.json.gson;
     requires io.helidon.security.providers.common;
     requires io.helidon.security.util;

File: examples/todo-app/backend/src/main/java/io/helidon/examples/todos/backend/Main.java
Patch:
@@ -76,7 +76,7 @@ static Config buildConfig() {
                         // (see src/main/resources/application.yaml)
                         classpath("application.yaml")))
                  // support for passwords in configuration
-//                .addFilter(SecureConfigFilter.fromConfig())
+                //.addFilter(SecureConfigFilter.fromConfig())
                 .build();
     }
 }

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcClientProvider.java
Patch:
@@ -22,7 +22,8 @@
  */
 public class JdbcClientProvider implements DbClientProvider {
 
-    static final String JDBC_DB_NAME = "jdbc";
+    // Name of this JDBC DB client provider and also JDBC database URL prefix.
+    private static final String JDBC_DB_NAME = "jdbc";
 
     @Override
     public String name() {

File: dbclient/metrics-hikari/src/main/java/io/helidon/dbclient/metrics/hikari/DropwizardMetricsListener.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.dbclient.metrics.jdbc;
+package io.helidon.dbclient.metrics.hikari;
 
 import java.lang.System.Logger.Level;
 
@@ -58,7 +58,8 @@ public void onGaugeAdded(String name, Gauge<?> gauge) {
         Object value = gauge.getValue();
         if (value instanceof Number) {
             LOGGER.log(Level.TRACE, () -> String.format("Gauge added: %s", name));
-            org.eclipse.microprofile.metrics.Gauge<?> mpGauge = new JdbcMetricsGauge<>((Gauge<? extends Number>) gauge);
+            @SuppressWarnings("unchecked")
+            org.eclipse.microprofile.metrics.Gauge<?> mpGauge = new HikariMetricsGauge<>((Gauge<? extends Number>) gauge);
             registry.get().gauge(prefix + name, mpGauge::getValue);
         } else {
             LOGGER.log(Level.WARNING, () -> String.format("Cannot add gauge returning type "

File: dbclient/metrics-hikari/src/main/java/io/helidon/dbclient/metrics/hikari/HikariMetricsCounter.java
Patch:
@@ -13,18 +13,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.dbclient.metrics.jdbc;
+package io.helidon.dbclient.metrics.hikari;
 
 import org.eclipse.microprofile.metrics.Counter;
 
 /**
  * {@link Counter} metric wrapper for Hikari CP metric.
  */
-public class JdbcMetricsCounter implements Counter {
+public class HikariMetricsCounter implements Counter {
 
     private final com.codahale.metrics.Counter counter;
 
-    JdbcMetricsCounter(com.codahale.metrics.Counter counter) {
+    HikariMetricsCounter(com.codahale.metrics.Counter counter) {
         this.counter = counter;
     }
 

File: dbclient/metrics-hikari/src/main/java/io/helidon/dbclient/metrics/hikari/HikariMetricsGauge.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.dbclient.metrics.jdbc;
+package io.helidon.dbclient.metrics.hikari;
 
 import org.eclipse.microprofile.metrics.Gauge;
 
@@ -22,11 +22,11 @@
  *
  * @param <T> metric value type
  */
-public class JdbcMetricsGauge<T extends Number> implements Gauge<T> {
+public class HikariMetricsGauge<T extends Number> implements Gauge<T> {
 
     private final com.codahale.metrics.Gauge<T> gauge;
 
-    JdbcMetricsGauge(com.codahale.metrics.Gauge<T> counter) {
+    HikariMetricsGauge(com.codahale.metrics.Gauge<T> counter) {
         this.gauge = counter;
     }
 

File: dbclient/metrics-hikari/src/main/java/io/helidon/dbclient/metrics/hikari/HikariMetricsSnapshot.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.dbclient.metrics.jdbc;
+package io.helidon.dbclient.metrics.hikari;
 
 import java.io.OutputStream;
 
@@ -22,11 +22,11 @@
 /**
  * Metric {@link Snapshot} wrapper for Hikari CP metric.
  */
-public class JdbcMetricsSnapshot extends Snapshot {
+public class HikariMetricsSnapshot extends Snapshot {
 
     private final com.codahale.metrics.Snapshot snapshot;
 
-    JdbcMetricsSnapshot(com.codahale.metrics.Snapshot snapshot) {
+    HikariMetricsSnapshot(com.codahale.metrics.Snapshot snapshot) {
         this.snapshot = snapshot;
     }
 

File: dbclient/metrics-hikari/src/main/java/io/helidon/dbclient/metrics/hikari/HikariMetricsTimerContext.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.dbclient.metrics.jdbc;
+package io.helidon.dbclient.metrics.hikari;
 
 import java.util.function.Function;
 
@@ -22,12 +22,12 @@
 /**
  * Metric {@link Timer.Context} wrapper for Hikari CP metric.
  */
-public class JdbcMetricsTimerContext implements Timer.Context {
+public class HikariMetricsTimerContext implements Timer.Context {
 
     private final com.codahale.metrics.Timer.Context context;
     private final Function<Long, Long> elapsedTimeUpdater;
 
-    JdbcMetricsTimerContext(com.codahale.metrics.Timer.Context context, Function<Long, Long> elapsedTimeUpdater) {
+    HikariMetricsTimerContext(com.codahale.metrics.Timer.Context context, Function<Long, Long> elapsedTimeUpdater) {
         this.context = context;
         this.elapsedTimeUpdater = elapsedTimeUpdater;
     }

File: dbclient/metrics-hikari/src/main/java/io/helidon/dbclient/metrics/hikari/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Metrics support for Helidon Database Client JDBC.
+ * Metrics support for Hikari Connection Pool.
  */
-package io.helidon.dbclient.metrics.jdbc;
+package io.helidon.dbclient.metrics.hikari;

File: dbclient/metrics/src/main/java/module-info.java
Patch:
@@ -16,8 +16,6 @@
 
 import io.helidon.common.features.api.Feature;
 import io.helidon.common.features.api.HelidonFlavor;
-import io.helidon.dbclient.metrics.DbClientMetricsProvider;
-import io.helidon.dbclient.spi.DbClientServiceProvider;
 
 /**
  * Helidon Database Client Metrics.
@@ -35,6 +33,7 @@
 
     exports io.helidon.dbclient.metrics;
 
-    provides DbClientServiceProvider with DbClientMetricsProvider;
+    provides io.helidon.dbclient.spi.DbClientServiceProvider
+            with io.helidon.dbclient.metrics.DbClientMetricsProvider;
 
 }
\ No newline at end of file

File: integrations/oci/oci-secrets-config-source/src/test/java/io/helidon/integrations/oci/secrets/configsource/IsModifiedTest.java
Patch:
@@ -18,11 +18,11 @@
 import java.time.Instant;
 import java.util.Set;
 
-import io.helidon.integrations.oci.secrets.configsource.SecretBundleConfigSource.Stamp;
+import io.helidon.integrations.oci.secrets.configsource.SecretBundleNodeConfigSource.Stamp;
 
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.integrations.oci.secrets.configsource.SecretBundleConfigSource.isModified;
+import static io.helidon.integrations.oci.secrets.configsource.SecretBundleNodeConfigSource.isModified;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 

File: integrations/oci/oci-secrets-config-source/src/test/java/io/helidon/integrations/oci/secrets/configsource/ValueNodeTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.integrations.oci.secrets.configsource.SecretBundleConfigSource.valueNode;
+import static io.helidon.integrations.oci.secrets.configsource.AbstractSecretBundleConfigSource.valueNode;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;

File: integrations/cdi/eclipselink-cdi/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,11 +31,13 @@
         path = {"JPA", "EclipseLink"}
 )
 @Aot(false)
+@SuppressWarnings("deprecation")
 module io.helidon.integrations.cdi.eclipselink {
     requires static io.helidon.common.features.api;
 
     requires java.management;
 
+    requires io.helidon.integrations.jdbc;
     requires jakarta.transaction;
     requires jakarta.cdi;
     requires jakarta.inject;

File: integrations/cdi/jpa-cdi/src/main/java/module-info.java
Patch:
@@ -60,5 +60,6 @@
     exports io.helidon.integrations.cdi.jpa;
     exports io.helidon.integrations.cdi.jpa.jaxb;
 
-    provides jakarta.enterprise.inject.spi.Extension with io.helidon.integrations.cdi.jpa.JpaExtension;
+    provides jakarta.enterprise.inject.spi.Extension with
+        io.helidon.integrations.cdi.jpa.JpaExtension, io.helidon.integrations.cdi.jpa.PersistenceExtension;
 }

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/Microblog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -95,6 +95,7 @@ public class Microblog implements Serializable {
         mappedBy = "microblog",
         targetEntity = Chirp.class
     )
+    @SuppressWarnings("serial")
     private List<Chirp> chirps;
 
     @Deprecated

File: integrations/jta/jdbc/src/main/java/io/helidon/integrations/jta/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: integrations/jta/jdbc/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,6 +20,8 @@
 @SuppressWarnings({ "requires-automatic", "requires-transitive-automatic" })
 module io.helidon.integrations.jta.jdbc {
 
+    requires transitive java.rmi; // jakarta.transaction.TransactionRequiredException extends RemoteException (!)
+
     requires transitive jakarta.transaction; // automatic module
 
     requires transitive io.helidon.integrations.jdbc;

File: fault-tolerance/processor/src/main/java/io/helidon/faulttolerance/processor/CircuitBreakerMethodCreator.java
Patch:
@@ -52,8 +52,8 @@ public CircuitBreakerMethodCreator() {
     }
 
     @Override
-    public Set<String> annoTypes() {
-        return Set.of(FT_ANNOTATION);
+    public Set<TypeName> annoTypes() {
+        return Set.of(FT_ANNOTATION_TYPE);
     }
 
     @Override

File: fault-tolerance/processor/src/main/java/io/helidon/faulttolerance/processor/FallbackMethodCreator.java
Patch:
@@ -53,8 +53,8 @@ public FallbackMethodCreator() {
     }
 
     @Override
-    public Set<String> annoTypes() {
-        return Set.of(FALLBACK_ANNOTATION);
+    public Set<TypeName> annoTypes() {
+        return Set.of(FALLBACK_ANNOTATION_TYPE);
     }
 
     @Override

File: fault-tolerance/processor/src/main/java/io/helidon/faulttolerance/processor/RetryMethodCreator.java
Patch:
@@ -52,8 +52,8 @@ public RetryMethodCreator() {
     }
 
     @Override
-    public Set<String> annoTypes() {
-        return Set.of(RETRY_ANNOTATION);
+    public Set<TypeName> annoTypes() {
+        return Set.of(RETRY_ANNOTATION_TYPE);
     }
 
     @Override

File: http/processor/src/main/java/io/helidon/http/processor/HttpEndpointCreator.java
Patch:
@@ -45,8 +45,8 @@ public HttpEndpointCreator() {
     }
 
     @Override
-    public Set<String> annoTypes() {
-        return Set.of(PATH_ANNOTATION);
+    public Set<TypeName> annoTypes() {
+        return Set.of(TypeName.create(PATH_ANNOTATION));
     }
 
     @Override

File: inject/processor/src/main/java/io/helidon/inject/processor/InjectionAnnotationProcessor.java
Patch:
@@ -644,8 +644,8 @@ private void processInterceptors(ServicesToProcess services,
         InterceptorCreator.InterceptorProcessor processor = interceptorCreator.createInterceptorProcessor(
                 interceptedServiceInfo,
                 interceptorCreator,
-                Optional.of(processingEnv));
-        Set<String> annotationTypeTriggers = processor.allAnnotationTypeTriggers();
+                processingEnv);
+        Set<TypeName> annotationTypeTriggers = processor.allAnnotationTypeTriggers();
         if (annotationTypeTriggers.isEmpty()) {
             services.addInterceptorPlanFor(serviceTypeName, Optional.empty());
             return;

File: inject/processor/src/test/java/io/helidon/inject/processor/ExtensibleGetTemplateProducer.java
Patch:
@@ -44,8 +44,8 @@ public ExtensibleGetTemplateProducer() {
     }
 
     @Override
-    public Set<String> annoTypes() {
-        return Set.of("io.helidon.inject.processor.testsubjects.ExtensibleGET");
+    public Set<TypeName> annoTypes() {
+        return Set.of(TypeName.create("io.helidon.inject.processor.testsubjects.ExtensibleGET"));
     }
 
     @Override

File: inject/tests/resources-inject/src/test/java/io/helidon/inject/tests/inject/interceptor/InterceptorRuntimeTest.java
Patch:
@@ -28,8 +28,8 @@
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 import io.helidon.inject.api.InjectionException;
-import io.helidon.inject.api.Interceptor;
 import io.helidon.inject.api.InjectionServices;
+import io.helidon.inject.api.Interceptor;
 import io.helidon.inject.api.ServiceInfo;
 import io.helidon.inject.api.ServiceInfoCriteria;
 import io.helidon.inject.api.ServiceProvider;
@@ -43,7 +43,6 @@
 import jakarta.inject.Named;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.inject.api.Qualifier.create;
@@ -97,7 +96,6 @@ void createNoArgBasedInterceptorSource() throws Exception {
                 java);
     }
 
-    @Disabled // will be handled in https://github.com/helidon-io/helidon/issues/6542
     @Test
     void createInterfaceBasedInterceptorSource() throws Exception {
         TypeName interceptorTypeName = TypeName.create(YImpl$$Injection$$Interceptor.class);

File: inject/tools/src/main/java/io/helidon/inject/tools/InterceptedElementBlueprint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Set;
 
 import io.helidon.builder.api.Prototype;
+import io.helidon.common.types.TypeName;
 
 /**
  * Used in the interception model described by {@link InterceptionPlan}. An intercepted
@@ -35,7 +36,7 @@ interface InterceptedElementBlueprint {
      *
      * @return the set of intercepted trigger types that apply to this method/element
      */
-    Set<String> interceptedTriggerTypeNames();
+    Set<TypeName> interceptedTriggerTypeNames();
 
     /**
      * The method element info for this intercepted method.

File: inject/tools/src/main/java/io/helidon/inject/tools/InterceptionPlanBlueprint.java
Patch:
@@ -64,7 +64,7 @@ interface InterceptionPlanBlueprint {
      *
      * @return all the annotation names that contributed to triggering this interceptor plan
      */
-    Set<String> annotationTriggerTypeNames();
+    Set<TypeName> annotationTriggerTypeNames();
 
     /**
      * The list of elements that should be intercepted.

File: inject/tools/src/main/java/io/helidon/inject/tools/spi/CustomAnnotationTemplateCreator.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Optional;
 import java.util.Set;
 
+import io.helidon.common.types.TypeName;
 import io.helidon.inject.tools.CustomAnnotationTemplateRequest;
 import io.helidon.inject.tools.CustomAnnotationTemplateResponse;
 
@@ -34,7 +35,7 @@ public interface CustomAnnotationTemplateCreator {
      *
      * @return the supported annotation types for this producer
      */
-    Set<String> annoTypes();
+    Set<TypeName> annoTypes();
 
     /**
      * The implementor should return empty if the request should not be handled.

File: integrations/oci/sdk/runtime/src/test/java/io/helidon/integrations/oci/sdk/runtime/OciAuthenticationDetailsProviderTest.java
Patch:
@@ -165,6 +165,9 @@ void selectionWhenNoConfigIsSet() {
                 OciExtensionTest.basicTestingConfigSource());
         resetWith(config);
 
+        assertThat(OciExtension.isSufficientlyConfigured(config),
+                   is(false));
+
         ServiceProvider<AbstractAuthenticationDetailsProvider> authServiceProvider =
                 services.lookupFirst(AbstractAuthenticationDetailsProvider.class, true).orElseThrow();
         Objects.requireNonNull(authServiceProvider);

File: examples/webserver/streaming/src/main/java/io/helidon/examples/webserver/streaming/StreamingService.java
Patch:
@@ -22,6 +22,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.nio.file.StandardCopyOption;
 import java.util.Objects;
 import java.util.logging.Logger;
 
@@ -57,7 +58,8 @@ private void upload(ServerRequest request, ServerResponse response) {
         LOGGER.info("Entering upload ... " + Thread.currentThread());
         try {
             Path tempFilePath = Files.createTempFile("large-file", ".tmp");
-            Files.copy(request.content().inputStream(), tempFilePath);
+            Files.copy(request.content().inputStream(), tempFilePath, StandardCopyOption.REPLACE_EXISTING);
+            response.send("File was stored as " + tempFilePath);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }

File: webclient/api/src/main/java/io/helidon/webclient/api/ClientResponseTypedImpl.java
Patch:
@@ -61,7 +61,8 @@ public T entity() {
         if (thrown == null) {
             return entity;
         }
-        throw new IllegalStateException("Failed to read response entity", thrown);
+        // re-throw the same exception, somebody may be interested in catching it
+        throw thrown;
     }
 
     @Override

File: webclient/http1/src/main/java/io/helidon/webclient/http1/Http1ConnectionCache.java
Patch:
@@ -17,9 +17,9 @@
 package io.helidon.webclient.http1;
 
 import java.time.Duration;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.LinkedBlockingDeque;
 import java.util.concurrent.TimeUnit;
 
@@ -46,7 +46,7 @@ class Http1ConnectionCache {
     private static final Http1ConnectionCache SHARED = create();
     private static final List<String> ALPN_ID = List.of(Http1Client.PROTOCOL_ID);
     private static final Duration QUEUE_TIMEOUT = Duration.ofMillis(10);
-    private final Map<ConnectionKey, LinkedBlockingDeque<TcpClientConnection>> cache = new HashMap<>();
+    private final Map<ConnectionKey, LinkedBlockingDeque<TcpClientConnection>> cache = new ConcurrentHashMap<>();
 
     static Http1ConnectionCache shared() {
         return SHARED;

File: webclient/tests/webclient/src/test/java/io/helidon/webclient/tests/MediaContextTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import io.helidon.http.Http;
 import io.helidon.http.media.MediaContext;
+import io.helidon.http.media.UnsupportedTypeException;
 import io.helidon.webclient.http1.Http1Client;
 import io.helidon.webclient.http1.Http1ClientResponse;
 import io.helidon.webserver.WebServer;
@@ -102,8 +103,8 @@ public void testMediaSupportWithoutDefaults() {
                         .build())
                 .build();
 
-        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () ->
-                client.get().request().as(String.class));
+        UnsupportedTypeException ex = assertThrows(UnsupportedTypeException.class, () ->
+                client.get().request(String.class).entity());
         assertThat(ex.getMessage(), startsWith("No client response media support for class"));
     }
 

File: webserver/webserver/src/main/java/io/helidon/webserver/http1/Http1Connection.java
Patch:
@@ -444,6 +444,7 @@ private void handleRequestException(RequestException e) {
             buffer.write(message);
         }
 
+        sendListener.status(ctx, response.status());
         sendListener.headers(ctx, headers);
         sendListener.data(ctx, buffer);
         writer.write(buffer);

File: tests/integration/oidc/src/test/java/io/helidon/tests/integration/oidc/CookieBasedLoginIT.java
Patch:
@@ -22,7 +22,6 @@
 import jakarta.ws.rs.core.Response;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.tests.integration.oidc.TestResource.EXPECTED_POST_LOGOUT_TEST_MESSAGE;
@@ -31,7 +30,6 @@
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-@Disabled("https://github.com/helidon-io/helidon/issues/7094")
 class CookieBasedLoginIT extends CommonLoginBase {
 
     @Test

File: tests/integration/oidc/src/test/java/io/helidon/tests/integration/oidc/QueryBasedLoginIT.java
Patch:
@@ -26,15 +26,13 @@
 import org.glassfish.jersey.client.ClientProperties;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.tests.integration.oidc.TestResource.EXPECTED_TEST_MESSAGE;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-@Disabled("https://github.com/helidon-io/helidon/issues/7094")
 @AddConfig(key = "security.providers.1.oidc.cookie-use", value = "false")
 @AddConfig(key = "security.providers.1.oidc.query-param-use", value = "true")
 class QueryBasedLoginIT extends CommonLoginBase {

File: tests/integration/oidc/src/test/java/io/helidon/tests/integration/oidc/TenantIdentificationIT.java
Patch:
@@ -33,7 +33,6 @@
 import jakarta.ws.rs.core.HttpHeaders;
 import jakarta.ws.rs.core.Response;
 import org.glassfish.jersey.client.ClientProperties;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -42,7 +41,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 
-@Disabled("https://github.com/helidon-io/helidon/issues/7094")
 @HelidonTest(resetPerTest = true)
 @AddBean(TestResource.class)
 @AddConfig(key = "security.providers.1.oidc.oidc-metadata-well-known", value = "false")

File: webclient/api/src/main/java/io/helidon/webclient/api/ClientUri.java
Patch:
@@ -193,8 +193,8 @@ public ClientUri resolve(URI uri) {
 
         uriBuilder.path(resolvePath(uriBuilder.path().path(), uri.getPath()));
 
-        if (uri.getRawQuery() != null) {
-            query.fromQueryString(uri.getRawQuery());
+        if (uri.getQuery() != null) {
+            query.fromQueryString(uri.getQuery());
         }
 
         if (uri.getRawFragment() != null) {

File: webclient/api/src/main/java/io/helidon/webclient/api/WebClientCookieManager.java
Patch:
@@ -142,12 +142,12 @@ public void response(ClientUri uri, ClientResponseHeaders headers) {
 
                 if (headers.contains(Http.HeaderNames.SET_COOKIE)) {
                     cookies = new HashMap<>();
-                    cookies.put(SET_COOKIE, headers.values(Http.HeaderNames.SET_COOKIE));
+                    cookies.put(SET_COOKIE, headers.get(Http.HeaderNames.SET_COOKIE).allValues());
                 }
 
                 if (headers.contains(Http.HeaderNames.SET_COOKIE2)) {
                     cookies = cookies == null ? new HashMap<>() : cookies;
-                    cookies.put(SET_COOKIE2, headers.values(Http.HeaderNames.SET_COOKIE2));
+                    cookies.put(SET_COOKIE2, headers.get(Http.HeaderNames.SET_COOKIE2).allValues());
                 }
 
                 if (cookies != null) {

File: common/task/src/main/java/io/helidon/common/task/HelidonTaskExecutor.java
Patch:
@@ -25,7 +25,7 @@
  * {@link InterruptableTask}s and can be efficiently terminated. A thread that is
  * waiting to read on an open connection cannot be efficiently stopped. This
  * executor will query the thread and interrupt it if possible. It is important
- * to efficiently shut down the Nima webserver in certain environments.
+ * to efficiently shut down the webserver in certain environments.
  */
 public interface HelidonTaskExecutor extends Closeable {
 

File: common/testing/http-junit5/src/main/java/io/helidon/common/testing/http/junit5/SocketHttpClient.java
Patch:
@@ -33,9 +33,9 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import io.helidon.common.http.ClientResponseHeaders;
-import io.helidon.common.http.Http;
-import io.helidon.common.http.WritableHeaders;
+import io.helidon.http.ClientResponseHeaders;
+import io.helidon.http.Http;
+import io.helidon.http.WritableHeaders;
 
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.notNullValue;

File: common/testing/http-junit5/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
  */
 module io.helidon.common.testing.http.junit5 {
     requires transitive io.helidon.common.testing.junit5;
-    requires io.helidon.common.http;
+    requires io.helidon.http;
     requires hamcrest.all;
     requires org.junit.jupiter.api;
 

File: common/tls/src/main/java/io/helidon/common/tls/ReloadableX509KeyManager.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.common.tls;
+package io.helidon.common.tls;
 
 import java.net.Socket;
 import java.security.Principal;

File: common/tls/src/main/java/io/helidon/common/tls/ReloadableX509TrustManager.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.common.tls;
+package io.helidon.common.tls;
 
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;

File: common/tls/src/main/java/io/helidon/common/tls/Tls.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.common.tls;
+package io.helidon.common.tls;
 
 import java.io.IOException;
 import java.io.UncheckedIOException;

File: common/tls/src/main/java/io/helidon/common/tls/TlsClientAuth.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.common.tls;
+package io.helidon.common.tls;
 
 /**
  * Type of client authentication.

File: common/tls/src/main/java/io/helidon/common/tls/TlsConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.common.tls;
+package io.helidon.common.tls;
 
 import java.security.PrivateKey;
 import java.security.SecureRandom;

File: common/tls/src/main/java/io/helidon/common/tls/TlsConfigDecorator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.common.tls;
+package io.helidon.common.tls;
 
 import java.io.IOException;
 import java.security.GeneralSecurityException;

File: common/tls/src/main/java/io/helidon/common/tls/TlsInternalInfo.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.common.tls;
+package io.helidon.common.tls;
 
 import java.util.List;
 

File: common/tls/src/main/java/io/helidon/common/tls/TlsReloadableComponent.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.common.tls;
+package io.helidon.common.tls;
 
 
 interface TlsReloadableComponent {

File: common/tls/src/main/java/io/helidon/common/tls/TrustAllManagerFactory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.common.tls;
+package io.helidon.common.tls;
 
 import java.io.Serial;
 import java.security.KeyStore;

File: cors/src/main/java/io/helidon/cors/Aggregator.java
Patch:
@@ -24,10 +24,10 @@
 
 import io.helidon.common.config.Config;
 import io.helidon.common.config.ConfigValue;
-import io.helidon.common.http.PathMatcher;
-import io.helidon.common.http.PathMatchers;
 import io.helidon.common.uri.UriPath;
 import io.helidon.cors.LogHelper.MatcherChecks;
+import io.helidon.http.PathMatcher;
+import io.helidon.http.PathMatchers;
 
 /**
  * Collects CORS set-up information from various sources and looks up the relevant CORS information given a request's path and

File: cors/src/main/java/io/helidon/cors/CorsRequestAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Optional;
 
-import io.helidon.common.http.Http;
+import io.helidon.http.Http;
 
 /**
  * <em>Not for use by developers.</em>

File: cors/src/main/java/io/helidon/cors/CorsResponseAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.cors;
 
-import io.helidon.common.http.Http;
+import io.helidon.http.Http;
 
 /**
  * <em>Not for use by developers.</em>

File: cors/src/main/java/io/helidon/cors/CorsSupportHelper.java
Patch:
@@ -29,15 +29,15 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.config.Config;
-import io.helidon.common.http.Http;
-import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.cors.LogHelper.Headers;
+import io.helidon.http.Http;
+import io.helidon.http.Http.HeaderNames;
 
 import static io.helidon.cors.LogHelper.DECISION_LEVEL;
 import static java.lang.Character.isDigit;
 
 /**
- * Centralizes internal logic common to Reactive, Níma, and MP CORS support for processing requests and preparing responses.
+ * Centralizes internal CORS support common logic for processing requests and preparing responses.
  *
  * <p>This class is reserved for internal Helidon use. Do not use it from your applications. It might change or vanish at
  *  any time.</p>

File: cors/src/main/java/io/helidon/cors/LogHelper.java
Patch:
@@ -29,9 +29,9 @@
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
-import io.helidon.common.http.Http;
-import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.cors.CorsSupportHelper.RequestType;
+import io.helidon.http.Http;
+import io.helidon.http.Http.HeaderNames;
 
 class LogHelper {
 

File: cors/src/main/java/module-info.java
Patch:
@@ -15,11 +15,11 @@
  */
 
 /**
- * CORS configuration and types shared between Helidon Reactive, Níma and MicroProfile.
+ * CORS configuration and types.
  */
 module io.helidon.cors {
     requires java.logging;
-    requires io.helidon.common.http;
+    requires io.helidon.http;
     requires io.helidon.common.config;
 
     requires static io.helidon.config.metadata;

File: examples/config/changes/src/main/java/io/helidon/examples/config/changes/AsSupplierExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.examples.changes;
+package io.helidon.examples.config.changes;
 
 import java.time.Duration;
 import java.util.Objects;

File: examples/config/changes/src/main/java/io/helidon/examples/config/changes/OnChangeExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.examples.changes;
+package io.helidon.examples.config.changes;
 
 import java.util.logging.Logger;
 

File: examples/config/mapping/src/main/java/io/helidon/examples/config/mapping/BuilderExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.examples.mapping;
+package io.helidon.examples.config.mapping;
 
 import java.util.List;
 import java.util.function.Supplier;

File: examples/config/mapping/src/main/java/io/helidon/examples/config/mapping/DeserializationExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.examples.mapping;
+package io.helidon.examples.config.mapping;
 
 import java.util.List;
 import java.util.function.Supplier;

File: examples/config/mapping/src/main/java/io/helidon/examples/config/mapping/FactoryMethodExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.examples.mapping;
+package io.helidon.examples.config.mapping;
 
 import java.util.List;
 import java.util.function.Supplier;

File: examples/config/metadata/src/main/java/io/helidon/examples/config/metadata/ConfiguredType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.examples.metadata;
+package io.helidon.examples.config.metadata;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: examples/config/sources/src/main/java/io/helidon/examples/config/sources/DirectorySourceExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.examples.sources;
+package io.helidon.examples.config.sources;
 
 import io.helidon.config.Config;
 

File: examples/config/sources/src/main/java/io/helidon/examples/config/sources/LoadSourcesExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.examples.sources;
+package io.helidon.examples.config.sources;
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigValue;

File: examples/config/sources/src/main/java/io/helidon/examples/config/sources/WithSourcesExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.examples.sources;
+package io.helidon.examples.config.sources;
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigValue;

File: examples/dbclient/jdbc/src/main/java/io/helidon/examples/dbclient/jdbc/PokemonService.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.helidon.dbclient.DbClient;
 import io.helidon.examples.dbclient.common.AbstractPokemonService;
-import io.helidon.nima.webserver.http.ServerRequest;
-import io.helidon.nima.webserver.http.ServerResponse;
+import io.helidon.webserver.http.ServerRequest;
+import io.helidon.webserver.http.ServerResponse;
 
 /**
  * Example service using a database.

File: examples/dbclient/mongodb/src/main/java/io/helidon/examples/dbclient/mongo/PokemonService.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.helidon.dbclient.DbClient;
 import io.helidon.examples.dbclient.common.AbstractPokemonService;
-import io.helidon.nima.webserver.http.ServerRequest;
-import io.helidon.nima.webserver.http.ServerResponse;
+import io.helidon.webserver.http.ServerRequest;
+import io.helidon.webserver.http.ServerResponse;
 
 /**
  * A simple service to greet you. Examples:

File: examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/PokemonMain.java
Patch:
@@ -20,9 +20,9 @@
 import io.helidon.config.ConfigSources;
 import io.helidon.dbclient.DbClient;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.observe.ObserveFeature;
-import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.http.HttpRouting;
+import io.helidon.webserver.WebServer;
+import io.helidon.webserver.http.HttpRouting;
+import io.helidon.webserver.observe.ObserveFeature;
 
 /**
  * Simple Hello World rest application.

File: examples/employee-app/src/main/java/io/helidon/examples/employee/Employee.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.service.employee;
+package io.helidon.examples.employee;
 
 import java.util.UUID;
 

File: examples/employee-app/src/main/java/io/helidon/examples/employee/EmployeeRepository.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.service.employee;
+package io.helidon.examples.employee;
 
 import java.util.List;
 import java.util.Optional;

File: examples/employee-app/src/main/java/io/helidon/examples/employee/EmployeeRepositoryImpl.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.service.employee;
+package io.helidon.examples.employee;
 
 import java.io.InputStream;
 import java.util.Arrays;

File: examples/employee-app/src/main/java/io/helidon/examples/employee/EmployeeRepositoryImplDB.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.service.employee;
+package io.helidon.examples.employee;
 
 import java.util.List;
 import java.util.Optional;

File: examples/fault-tolerance/src/main/java/io/helidon/examples/faulttolerance/AdminEndpoint.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.nima.faulttolerance;
+package io.helidon.examples.faulttolerance;
 
-import io.helidon.common.http.Endpoint;
+import io.helidon.http.Endpoint;
 
 import jakarta.inject.Singleton;
 

File: examples/fault-tolerance/src/main/java/io/helidon/examples/faulttolerance/PlatformExecutorProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.nima.faulttolerance;
+package io.helidon.examples.faulttolerance;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -27,8 +27,7 @@
 import jakarta.inject.Singleton;
 
 /**
- * This service will be part of Níma on Injection module.
- * It may use Injection to get config sources exposed through injection.
+ * Injection provider that provides a "platform" executor.
  */
 @Singleton
 @Named("platform-executor")

File: examples/graphql/basics/src/main/java/io/helidon/examples/graphql/basics/Main.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.util.List;
 
-import io.helidon.nima.graphql.server.GraphQlService;
-import io.helidon.nima.webserver.WebServer;
+import io.helidon.webserver.WebServer;
+import io.helidon.webserver.graphql.GraphQlService;
 
 import graphql.schema.DataFetcher;
 import graphql.schema.GraphQLSchema;

File: examples/integrations/cdi/jedis/src/main/java/io/helidon/examples/integrations/jedis/jaxrs/RedisClientResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.integrations.examples.jedis.jaxrs;
+package io.helidon.examples.integrations.jedis.jaxrs;
 
 import java.util.Objects;
 

File: examples/integrations/micrometer/se/src/main/java/io/helidon/examples/integrations/micrometer/se/GreetingMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.examples.micrometer.se;
+package io.helidon.examples.integrations.micrometer.se;
 
 import java.util.Collections;
 

File: examples/integrations/oci/atp/src/main/java/io/helidon/examples/integrations/oci/atp/OciAtpMain.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.helidon.config.Config;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.webserver.WebServer;
+import io.helidon.webserver.WebServer;
 
 import com.oracle.bmc.ConfigFileReader;
 import com.oracle.bmc.auth.AuthenticationDetailsProvider;

File: examples/integrations/oci/atp/src/main/java/io/helidon/examples/integrations/oci/atp/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Example of integration with OCI ATP in Nima application.
+ * Example of integration with OCI ATP in a Helidon SE application.
  */
 package io.helidon.examples.integrations.oci.atp;

File: examples/integrations/oci/objectstorage-cdi/src/main/java/io/helidon/examples/integrations/oci/objectstorage/cdi/ObjectStorageResource.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.http.Http;
+import io.helidon.http.Http;
 
 import com.oracle.bmc.objectstorage.ObjectStorage;
 import com.oracle.bmc.objectstorage.requests.DeleteObjectRequest;

File: examples/integrations/oci/objectstorage/src/main/java/io/helidon/examples/integrations/oci/objecstorage/OciObjectStorageMain.java
Patch:
@@ -25,8 +25,8 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigSource;
-import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.http.HttpRouting;
+import io.helidon.webserver.WebServer;
+import io.helidon.webserver.http.HttpRouting;
 
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.file;

File: examples/integrations/oci/objectstorage/src/main/java/io/helidon/examples/integrations/oci/objecstorage/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Example of integration with OCI object storage in Nima application.
+ * Example of integration with OCI object storage in a Helidon SE application.
  */
 package io.helidon.examples.integrations.oci.objecstorage;

File: examples/integrations/oci/vault/src/main/java/io/helidon/examples/integrations/oci/vault/OciVaultMain.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.helidon.config.Config;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.webserver.WebServer;
+import io.helidon.webserver.WebServer;
 
 import com.oracle.bmc.ConfigFileReader;
 import com.oracle.bmc.auth.AuthenticationDetailsProvider;

File: examples/integrations/oci/vault/src/main/java/io/helidon/examples/integrations/oci/vault/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Example of OCI Vault integration in a Nima application.
+ * Example of OCI Vault integration in a SE application.
  */
 package io.helidon.examples.integrations.oci.vault;

File: examples/integrations/vault/hcp/src/main/java/io/helidon/examples/integrations/vault/hcp/VaultMain.java
Patch:
@@ -26,7 +26,7 @@
 import io.helidon.integrations.vault.secrets.transit.TransitSecrets;
 import io.helidon.integrations.vault.sys.Sys;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.webserver.WebServer;
+import io.helidon.webserver.WebServer;
 
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.file;

File: examples/jbatch/src/main/java/io/helidon/examples/jbatch/BatchResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.jbatch.example;
+package io.helidon.examples.jbatch;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: examples/jbatch/src/main/java/io/helidon/examples/jbatch/HelidonExecutorServiceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.jbatch.example;
+package io.helidon.examples.jbatch;
 
 import java.util.concurrent.ExecutorService;
 

File: examples/jbatch/src/main/java/io/helidon/examples/jbatch/jobs/MyBatchlet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.jbatch.example.jobs;
+package io.helidon.examples.jbatch.jobs;
 
 import jakarta.batch.api.AbstractBatchlet;
 

File: examples/jbatch/src/main/java/io/helidon/examples/jbatch/jobs/MyInputRecord.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.jbatch.example.jobs;
+package io.helidon.examples.jbatch.jobs;
 
 /**
  * Example of an Input Record.

File: examples/jbatch/src/main/java/io/helidon/examples/jbatch/jobs/MyItemProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.jbatch.example.jobs;
+package io.helidon.examples.jbatch.jobs;
 
 import jakarta.batch.api.chunk.ItemProcessor;
 

File: examples/jbatch/src/main/java/io/helidon/examples/jbatch/jobs/MyItemReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.jbatch.example.jobs;
+package io.helidon.examples.jbatch.jobs;
 
 import java.util.StringTokenizer;
 

File: examples/jbatch/src/main/java/io/helidon/examples/jbatch/jobs/MyItemWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.jbatch.example.jobs;
+package io.helidon.examples.jbatch.jobs;
 
 import java.util.List;
 

File: examples/jbatch/src/main/java/io/helidon/examples/jbatch/jobs/MyOutputRecord.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.jbatch.example.jobs;
+package io.helidon.examples.jbatch.jobs;
 
 /**
  * Example Output Processor.

File: examples/logging/jul/src/main/java/io/helidon/examples/logging/jul/Main.java
Patch:
@@ -25,8 +25,8 @@
 import io.helidon.common.context.Contexts;
 import io.helidon.logging.common.HelidonMdc;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.http.HttpRouting;
+import io.helidon.webserver.WebServer;
+import io.helidon.webserver.http.HttpRouting;
 
 /**
  * Main class of the example, runnable from command line.

File: examples/logging/log4j/src/main/java/io/helidon/examples/logging/log4j/Main.java
Patch:
@@ -24,8 +24,8 @@
 import io.helidon.common.context.Contexts;
 import io.helidon.logging.common.HelidonMdc;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.http.HttpRouting;
+import io.helidon.webserver.WebServer;
+import io.helidon.webserver.http.HttpRouting;
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;

File: examples/logging/logback-aot/src/main/java/io/helidon/examples/logging/logback/aot/Main.java
Patch:
@@ -23,8 +23,8 @@
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.logging.common.HelidonMdc;
-import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.http.HttpRouting;
+import io.helidon.webserver.WebServer;
+import io.helidon.webserver.http.HttpRouting;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.joran.JoranConfigurator;

File: examples/logging/slf4j/src/main/java/io/helidon/examples/logging/slf4j/Main.java
Patch:
@@ -24,8 +24,8 @@
 import io.helidon.common.context.Contexts;
 import io.helidon.logging.common.HelidonMdc;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.http.HttpRouting;
+import io.helidon.webserver.WebServer;
+import io.helidon.webserver.http.HttpRouting;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: examples/messaging/jms-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.logging.LogManager;
 
 import io.helidon.config.Config;
-import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.staticcontent.StaticContentService;
-import io.helidon.nima.websocket.webserver.WsRouting;
+import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentService;
+import io.helidon.webserver.websocket.WsRouting;
 
 /**
  * The application main class.

File: examples/messaging/jms-websocket-se/src/main/java/io/helidon/examples/messaging/se/SendingService.java
Patch:
@@ -22,8 +22,8 @@
 import io.helidon.messaging.Messaging;
 import io.helidon.messaging.connectors.jms.JmsConnector;
 import io.helidon.messaging.connectors.jms.Type;
-import io.helidon.nima.webserver.http.HttpRules;
-import io.helidon.nima.webserver.http.HttpService;
+import io.helidon.webserver.http.HttpRules;
+import io.helidon.webserver.http.HttpService;
 
 import org.apache.activemq.jndi.ActiveMQInitialContextFactory;
 

File: examples/messaging/jms-websocket-se/src/main/java/io/helidon/examples/messaging/se/WebSocketEndpoint.java
Patch:
@@ -26,8 +26,8 @@
 import io.helidon.messaging.Messaging;
 import io.helidon.messaging.connectors.jms.JmsConnector;
 import io.helidon.messaging.connectors.jms.Type;
-import io.helidon.nima.websocket.WsListener;
-import io.helidon.nima.websocket.WsSession;
+import io.helidon.websocket.WsListener;
+import io.helidon.websocket.WsSession;
 
 import org.apache.activemq.jndi.ActiveMQInitialContextFactory;
 

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -18,9 +18,9 @@
 
 import io.helidon.config.Config;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.staticcontent.StaticContentService;
-import io.helidon.nima.websocket.webserver.WsRouting;
+import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentService;
+import io.helidon.webserver.websocket.WsRouting;
 
 /**
  * The application main class.

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/SendingService.java
Patch:
@@ -21,8 +21,8 @@
 import io.helidon.messaging.Emitter;
 import io.helidon.messaging.Messaging;
 import io.helidon.messaging.connectors.kafka.KafkaConnector;
-import io.helidon.nima.webserver.http.HttpRules;
-import io.helidon.nima.webserver.http.HttpService;
+import io.helidon.webserver.http.HttpRules;
+import io.helidon.webserver.http.HttpService;
 
 import org.apache.kafka.common.serialization.StringSerializer;
 

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/WebSocketEndpoint.java
Patch:
@@ -26,8 +26,8 @@
 import io.helidon.messaging.Messaging;
 import io.helidon.messaging.connectors.kafka.KafkaConfigBuilder;
 import io.helidon.messaging.connectors.kafka.KafkaConnector;
-import io.helidon.nima.websocket.WsListener;
-import io.helidon.nima.websocket.WsSession;
+import io.helidon.websocket.WsListener;
+import io.helidon.websocket.WsSession;
 
 import org.apache.kafka.common.serialization.StringDeserializer;
 

File: common/testing/http-junit5/src/main/java/io/helidon/common/testing/http/junit5/SocketHttpClient.java
Patch:
@@ -513,7 +513,7 @@ public boolean connected() {
      * @param formatString text to send
      * @param args format arguments
      * @return this http client
-     * @throws IOException
+     * @throws IOException when we fail to write or read
      */
     public SocketHttpClient manualRequest(String formatString, Object... args) throws IOException {
         if (socket == null) {

File: tests/integration/webserver/resource-limits/src/test/java/io/helidon/tests/integration/webserver/resourcelimit/IdleTimeoutTest.java
Patch:
@@ -27,12 +27,14 @@
 import io.helidon.nima.webserver.WebServerConfig;
 import io.helidon.nima.webserver.http.HttpRules;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 
 @ServerTest
+@Disabled("Under heavy load, this test does not correctly finish.")
 class IdleTimeoutTest {
     private final SocketHttpClient client;
 

File: integrations/oci/sdk/runtime/src/main/java/module-info.java
Patch:
@@ -23,7 +23,7 @@
 
     requires io.helidon.builder.api;
     requires io.helidon.common;
-    requires io.helidon.common.config;
+    requires io.helidon.config;
     requires io.helidon.config.metadata;
     requires transitive io.helidon.inject.runtime;
     requires oci.java.sdk.common;

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ContentEncodingDisabledNoValidationTest.java
Patch:
@@ -51,7 +51,7 @@ static void server(WebServerConfig.Builder server) {
         ServerConnectionSelector http1 = Http1ConnectionSelector.builder()
                 .config(http1Config -> http1Config
                         // Headers validation is disabled
-                        .validateHeaders(false))
+                        .validateRequestHeaders(false))
                 .build();
 
         server.addConnectionSelector(http1)

File: nima/webclient/http1/src/main/java/io/helidon/nima/webclient/http1/Http1CallChainBase.java
Patch:
@@ -138,7 +138,7 @@ void prologue(BufferData nonEntityData, WebClientServiceRequest request, ClientU
     ClientResponseHeaders readHeaders(DataReader reader) {
         WritableHeaders<?> writable = Http1HeadersParser.readHeaders(reader,
                                                                      protocolConfig.maxHeaderSize(),
-                                                                     protocolConfig.validateHeaders());
+                                                                     protocolConfig.validateResponseHeaders());
         return ClientResponseHeaders.create(writable, clientConfig.mediaTypeParserMode());
     }
 

File: nima/webclient/http1/src/main/java/io/helidon/nima/webclient/http1/Http1CallEntityChain.java
Patch:
@@ -71,7 +71,7 @@ public WebClientServiceResponse doProceed(ClientConnection connection,
 
         headers.set(Http.Headers.create(Http.HeaderNames.CONTENT_LENGTH, entityBytes.length));
 
-        writeHeaders(headers, writeBuffer, protocolConfig().validateHeaders());
+        writeHeaders(headers, writeBuffer, protocolConfig().validateRequestHeaders());
         // we have completed writing the headers
         whenSent.complete(serviceRequest);
 

File: nima/webclient/http1/src/main/java/io/helidon/nima/webclient/http1/Http1CallOutputStreamChain.java
Patch:
@@ -242,7 +242,7 @@ private void sendPrologueAndHeader() {
             writer.writeNow(prologue);
 
             BufferData headerBuffer = BufferData.growing(128);
-            writeHeaders(headers, headerBuffer, protocolConfig.validateHeaders());
+            writeHeaders(headers, headerBuffer, protocolConfig.validateRequestHeaders());
             writer.writeNow(headerBuffer);
 
             whenSent.complete(request);

File: common/http/src/main/java/io/helidon/common/http/ClientRequestHeaders.java
Patch:
@@ -56,7 +56,7 @@ default ClientRequestHeaders accept(MediaType... accepted) {
             MediaType mediaType = accepted[i];
             values[i] = mediaType.text();
         }
-        set(Http.Header.create(Http.Header.ACCEPT, values));
+        set(Http.Headers.create(Http.HeaderNames.ACCEPT, values));
         return this;
     }
 }

File: common/http/src/main/java/io/helidon/common/http/CookieParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,7 +43,7 @@ private CookieParser() {
      * @param httpHeader cookie header
      * @return a cookie name and values parsed into a parameter format.
      */
-    static Parameters parse(Http.HeaderValue httpHeader) {
+    static Parameters parse(Http.Header httpHeader) {
         Map<String, List<String>> allCookies = new HashMap<>();
         for (String value : httpHeader.allValues()) {
             parse(allCookies, value);

File: common/http/src/main/java/io/helidon/common/http/Forwarded.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.Locale;
 import java.util.Optional;
 
-import static io.helidon.common.http.Http.Header.FORWARDED;
+import static io.helidon.common.http.Http.HeaderNames.FORWARDED;
 
 /**
- * A representation of the {@link Http.Header#FORWARDED} HTTP header.
+ * A representation of the {@link io.helidon.common.http.Http.HeaderNames#FORWARDED} HTTP header.
  */
 public class Forwarded {
     private static final System.Logger LOGGER = System.getLogger(Forwarded.class.getName());

File: common/http/src/main/java/io/helidon/common/http/HeaderValueCopy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,10 +20,10 @@
 import java.util.List;
 
 class HeaderValueCopy extends HeaderValueBase {
-    private final Http.HeaderValue original;
+    private final Http.Header original;
     private List<String> values;
 
-    HeaderValueCopy(Http.HeaderValue header) {
+    HeaderValueCopy(Http.Header header) {
         super(header.headerName(), header.changing(), header.sensitive(), header.value());
 
         this.original = header;

File: common/http/src/main/java/io/helidon/common/http/RequestException.java
Patch:
@@ -218,7 +218,7 @@ public Builder setKeepAlive(boolean keepAlive) {
          * @param header header to add
          * @return updated builder
          */
-        public Builder header(Http.HeaderValue header) {
+        public Builder header(Http.Header header) {
             this.responseHeaders.set(header);
             return this;
         }

File: common/http/src/test/java/io/helidon/common/http/ForwardedTest.java
Patch:
@@ -73,7 +73,7 @@ void testAll() {
     @Test
     void testMultiValuesCommaSeparated() {
         HeadersImpl<?> headers = new HeadersImpl<>();
-        headers.add(Http.Header.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10,by=\"192.0.2.60\"");
+        headers.add(Http.HeaderNames.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10,by=\"192.0.2.60\"");
         List<Forwarded> forwardedList = Forwarded.create(headers);
 
         assertThat(forwardedList, hasSize(2));
@@ -94,7 +94,7 @@ void testMultiValuesCommaSeparated() {
     @Test
     void testMultiValues() {
         HeadersImpl<?> headers = new HeadersImpl<>();
-        headers.add(Http.Header.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10",
+        headers.add(Http.HeaderNames.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10",
                     "by=\"192.0.2.60\"");
         List<Forwarded> forwardedList = Forwarded.create(headers);
 
@@ -116,7 +116,7 @@ void testMultiValues() {
     @Test
     void testMultiValuesAndCommaSeparated() {
         HeadersImpl<?> headers = new HeadersImpl<>();
-        headers.add(Http.Header.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10",
+        headers.add(Http.HeaderNames.FORWARDED, "for=192.0.2.60;proto=http;by=203.0.113.43;Host=10.10.10.10",
                     "by=\"192.0.2.60\",for=\"14.22.11.22\"");
         List<Forwarded> forwardedList = Forwarded.create(headers);
 

File: common/http/src/test/java/io/helidon/common/http/Http1HeadersParserTest.java
Patch:
@@ -62,7 +62,7 @@ void testHeadersWithValidationEnabled(String headerName, String headerValue, boo
         WritableHeaders<?> headers;
         if (expectsValid) {
             headers = getHeaders(headerName, headerValue, true);
-            String responseHeaderValue = headers.get(Http.Header.create(headerName)).values();
+            String responseHeaderValue = headers.get(Http.HeaderNames.create(headerName)).values();
             // returned header values WhiteSpaces are trimmed so need to be tested with trimmed values
             assertThat(responseHeaderValue, is(headerValue.trim()));
         } else {
@@ -76,7 +76,7 @@ void testHeadersWithValidationEnabled(String headerName, String headerValue, boo
     void testHeadersWithValidationDisabled(String headerValue) {
         // retrieve headers without validating
         WritableHeaders<?> headers = getHeaders(CUSTOM_HEADER_NAME, headerValue, false);
-        String responseHeaderValue = headers.get(Http.Header.create(CUSTOM_HEADER_NAME)).values();
+        String responseHeaderValue = headers.get(Http.HeaderNames.create(CUSTOM_HEADER_NAME)).values();
         // returned header values WhiteSpaces are trimmed so need to be tested with trimmed values
         assertThat(responseHeaderValue, is(headerValue.trim()));
     }
@@ -116,7 +116,7 @@ private static Stream<Arguments> headers() {
 
 
     private void testHeader(Headers headers, String header, String... values) {
-        Http.HeaderName headerName = Http.Header.create(header);
+        Http.HeaderName headerName = Http.HeaderNames.create(header);
         assertThat("Headers should contain header: " + headerName.lowerCase(),
                    headers.contains(headerName),
                    is(true));

File: common/http/src/test/java/io/helidon/common/http/HttpTest.java
Patch:
@@ -61,7 +61,7 @@ void testResposneStatusCustomReason() {
     @ParameterizedTest
     @MethodSource("headers")
     void testHeaderValidation(String headerName, String headerValues, boolean expectsValid) {
-        Http.HeaderValue header = Http.Header.create(Http.Header.create(headerName), headerValues);
+        Http.Header header = Http.Headers.create(headerName, headerValues);
         if (expectsValid) {
             header.validate();
         } else {

File: common/testing/http-junit5/src/main/java/io/helidon/common/testing/http/junit5/SocketHttpClient.java
Patch:
@@ -136,7 +136,7 @@ public static ClientResponseHeaders headersFromResponse(String response) {
             if (i < 0) {
                 throw new AssertionError("Header without semicolon - " + line);
             }
-            headers.add(Http.Header.create(line.substring(0, i).trim()), line.substring(i + 1).trim());
+            headers.add(Http.HeaderNames.create(line.substring(0, i).trim()), line.substring(i + 1).trim());
         }
         return ClientResponseHeaders.create(headers);
     }

File: examples/integrations/oci/objectstorage-cdi/src/main/java/io/helidon/examples/integrations/oci/objectstorage/cdi/ObjectStorageResource.java
Patch:
@@ -90,10 +90,10 @@ public Response download(@PathParam("file-name") String fileName) {
         try (InputStream fileStream = getObjectResponse.getInputStream()) {
             byte[] objectContent = fileStream.readAllBytes();
             Response.ResponseBuilder ok = Response.ok(objectContent)
-                    .header(Http.Header.CONTENT_DISPOSITION.defaultCase(), "attachment; filename=\"" + fileName + "\"")
+                    .header(Http.HeaderNames.CONTENT_DISPOSITION.defaultCase(), "attachment; filename=\"" + fileName + "\"")
                     .header("opc-request-id", getObjectResponse.getOpcRequestId())
                     .header("request-id", getObjectResponse.getOpcClientRequestId())
-                    .header(Http.Header.CONTENT_LENGTH.defaultCase(), getObjectResponse.getContentLength());
+                    .header(Http.HeaderNames.CONTENT_LENGTH.defaultCase(), getObjectResponse.getContentLength());
 
             return ok.build();
         } catch (IOException e) {

File: examples/integrations/oci/objectstorage/src/main/java/io/helidon/examples/integrations/oci/objecstorage/ObjectStorageService.java
Patch:
@@ -109,9 +109,9 @@ public void download(ServerRequest request, ServerResponse response) {
             byte[] objectContent = fileStream.readAllBytes();
             response
                     .status(Http.Status.OK_200)
-                    .header(Http.Header.CONTENT_DISPOSITION.defaultCase(), "attachment; filename=\"" + fileName + "\"")
+                    .header(Http.HeaderNames.CONTENT_DISPOSITION.defaultCase(), "attachment; filename=\"" + fileName + "\"")
                     .header("opc-request-id", getObjectResponse.getOpcRequestId())
-                    .header(Http.Header.CONTENT_LENGTH.defaultCase(), getObjectResponse.getContentLength().toString());
+                    .header(Http.HeaderNames.CONTENT_LENGTH.defaultCase(), getObjectResponse.getContentLength().toString());
 
             response.send(objectContent);
         } catch (IOException e) {

File: examples/media/multipart/src/main/java/io/helidon/examples/media/multipart/FileService.java
Patch:
@@ -49,7 +49,7 @@
  * File service.
  */
 public final class FileService implements HttpService {
-    private static final Http.HeaderValue UI_LOCATION = Http.Header.createCached(Http.Header.LOCATION, "/ui");
+    private static final Http.Header UI_LOCATION = Http.Headers.createCached(Http.HeaderNames.LOCATION, "/ui");
     private final JsonBuilderFactory jsonFactory;
     private final Path storage;
 

File: examples/media/multipart/src/main/java/io/helidon/examples/media/multipart/Main.java
Patch:
@@ -24,7 +24,7 @@
  * This application provides a simple file upload service with a UI to exercise multipart.
  */
 public final class Main {
-    private static final Http.HeaderValue UI_LOCATION = Http.Header.createCached(Http.Header.LOCATION, "/ui");
+    private static final Http.Header UI_LOCATION = Http.Headers.createCached(Http.HeaderNames.LOCATION, "/ui");
 
     private Main() {
     }

File: examples/media/multipart/src/test/java/io/helidon/examples/media/multipart/FileServiceTest.java
Patch:
@@ -109,7 +109,7 @@ public void testList() {
     public void testDownload() {
         try (Http1ClientResponse response = client.get("/api").path("foo.txt").request()) {
             assertThat(response.status(), is(Http.Status.OK_200));
-            assertThat(response.headers().first(Http.Header.CONTENT_DISPOSITION).orElse(null),
+            assertThat(response.headers().first(Http.HeaderNames.CONTENT_DISPOSITION).orElse(null),
                     containsString("filename=\"foo.txt\""));
             byte[] bytes = response.as(byte[].class);
             assertThat(new String(bytes, StandardCharsets.UTF_8), Matchers.is("bar\n"));

File: examples/metrics/http-status-count-se/src/test/java/io/helidon/examples/se/httpstatuscount/StatusTest.java
Patch:
@@ -16,7 +16,7 @@
 package io.helidon.examples.se.httpstatuscount;
 
 import io.helidon.common.http.Http.Status;
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.media.type.MediaTypes;
 import io.helidon.config.Config;
 import io.helidon.metrics.api.RegistryFactory;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
@@ -85,7 +85,7 @@ void checkStatusAfterGreet() throws InterruptedException {
             before[i] = STATUS_COUNTERS[i].getCount();
         }
         try (Http1ClientResponse response = client.get("/greet")
-                .accept(HttpMediaType.APPLICATION_JSON)
+                .accept(MediaTypes.APPLICATION_JSON)
                 .request()) {
             assertThat("Status of /greet", response.status(), is(Status.OK_200));
             String entity = response.as(String.class);
@@ -100,7 +100,7 @@ void checkAfterStatus(Status status) throws InterruptedException {
             before[i] = STATUS_COUNTERS[i].getCount();
         }
         try (Http1ClientResponse response = client.get("/status/" + status.code())
-                .accept(HttpMediaType.APPLICATION_JSON)
+                .accept(MediaTypes.APPLICATION_JSON)
                 .request()) {
             assertThat("Response status", response.status(), is(status));
             checkCounters(status, before);

File: examples/nima/echo/src/main/java/io/helidon/examples/nima/echo/EchoMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ private static void echo(ServerRequest req, ServerResponse res) {
             res.header("R-QUERY_" + queryName, query.all(queryName).toString());
         }
 
-        for (Http.HeaderValue header : headers) {
+        for (Http.Header header : headers) {
             res.header("R-" + header.name(), header.allValues().toString());
         }
 

File: examples/nima/fault-tolerance/src/main/java/io/helidon/examples/nima/faulttolerance/GreetEndpoint.java
Patch:
@@ -54,7 +54,7 @@ String greet() {
     @FaultTolerance.Bulkhead(name = "bulkhead-it")
     String greetNamed(@Endpoint.PathParam("name") String name,
                       @Endpoint.QueryParam(value = "throw", defaultValue = "false") String shouldThrow,
-                      @Endpoint.HeaderParam(Http.Header.HOST_STRING) String hostHeader) {
+                      @Endpoint.HeaderParam(Http.HeaderNames.HOST_STRING) String hostHeader) {
         if ("true".equalsIgnoreCase(shouldThrow)) {
             throw new InjectionException("Failed on purpose");
         }

File: examples/nima/media/src/main/java/io/helidon/examples/nima/media/MediaMain.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.examples.nima.media;
 
 import io.helidon.common.http.Http;
-import io.helidon.common.http.Http.Header;
+import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.nima.webserver.WebServer;
 import io.helidon.nima.webserver.http.HttpRules;
 import io.helidon.nima.webserver.staticcontent.StaticContentService;
@@ -26,7 +26,7 @@
  * This application provides a simple file upload service with a UI to exercise multipart.
  */
 public class MediaMain {
-    private static final Http.HeaderValue UI_LOCATION = Header.createCached(Header.LOCATION, "/ui");
+    private static final Http.Header UI_LOCATION = Http.Headers.createCached(HeaderNames.LOCATION, "/ui");
 
     private MediaMain() {
     }

File: examples/security/basic-auth-with-static-content/src/main/java/io/helidon/security/examples/webserver/basic/BasicExampleBuilderMain.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.logging.common.LogConfig;
 import io.helidon.nima.webserver.WebServer;
 import io.helidon.nima.webserver.WebServerConfig;
@@ -112,7 +112,7 @@ static void setup(WebServerConfig.Builder server) {
                         .audit())
                 .get("/{*}", (req, res) -> {
                     Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
-                    res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                    res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                     res.send("Hello, you are: \n" + securityContext
                             .map(ctx -> ctx.user().orElse(SecurityContext.ANONYMOUS).toString())
                             .orElse("Security context is null"));

File: examples/security/basic-auth-with-static-content/src/main/java/io/helidon/security/examples/webserver/basic/BasicExampleConfigMain.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.config.Config;
 import io.helidon.logging.common.LogConfig;
 import io.helidon.nima.webserver.WebServer;
@@ -89,7 +89,7 @@ static void setup(WebServerConfig.Builder server) {
                         .register("/static", StaticContentService.create("/WEB"))
                         .get("/{*}", (req, res) -> {
                             Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
-                            res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                            res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                             res.send("Hello, you are: \n" + securityContext
                                     .map(ctx -> ctx.user().orElse(SecurityContext.ANONYMOUS).toString())
                                     .orElse("Security context is null"));

File: examples/security/basic-auth-with-static-content/src/test/java/io/helidon/security/examples/webserver/basic/BasicExampleTest.java
Patch:
@@ -130,7 +130,7 @@ private void testNotAuthorized(String uri) {
         try (Http1ClientResponse response = client.get().uri(uri).request()) {
 
             assertThat(response.status(), is(Http.Status.UNAUTHORIZED_401));
-            String header = response.headers().get(Http.Header.WWW_AUTHENTICATE).value();
+            String header = response.headers().get(Http.HeaderNames.WWW_AUTHENTICATE).value();
 
             assertThat(header.toLowerCase(), containsString("basic"));
             assertThat(header, containsString("helidon"));

File: examples/security/google-login/src/main/java/io/helidon/security/examples/google/GoogleBuilderMain.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.logging.common.LogConfig;
 import io.helidon.nima.webserver.WebServer;
 import io.helidon.nima.webserver.WebServerConfig;
@@ -77,7 +77,7 @@ static void setup(WebServerConfig.Builder server) {
                 .get("/rest/profile", SecurityFeature.authenticate(),
                         (req, res) -> {
                             Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
-                            res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                            res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                             res.send("Response from builder based service, you are: \n" + securityContext
                                     .flatMap(SecurityContext::user)
                                     .map(Subject::toString)

File: examples/security/google-login/src/main/java/io/helidon/security/examples/google/GoogleConfigMain.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.config.Config;
 import io.helidon.logging.common.LogConfig;
 import io.helidon.nima.webserver.WebServer;
@@ -85,7 +85,7 @@ static void setup(WebServerConfig.Builder server) {
                 .addFeature(SecurityFeature.create(config.get("security")))
                 .get("/rest/profile", (req, res) -> {
                     Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
-                    res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                    res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                     res.send("Response from config based service, you are: \n" + securityContext
                             .flatMap(SecurityContext::user)
                             .map(Subject::toString)

File: examples/security/google-login/src/test/java/io/helidon/security/examples/google/GoogleMainTest.java
Patch:
@@ -41,7 +41,7 @@ public void testEndpoint() {
         try (Http1ClientResponse response = client.get("/rest/profile").request()) {
 
             assertThat(response.status(), is(Http.Status.UNAUTHORIZED_401));
-            assertThat(response.headers().first(Http.Header.WWW_AUTHENTICATE),
+            assertThat(response.headers().first(Http.HeaderNames.WWW_AUTHENTICATE),
                     optionalValue(is("Bearer realm=\"helidon\",scope=\"openid profile email\"")));
         }
     }

File: examples/security/idcs-login/src/main/java/io/helidon/security/examples/idcs/IdcsBuilderMain.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.config.Config;
 import io.helidon.logging.common.LogConfig;
 import io.helidon.nima.webserver.WebServer;
@@ -105,7 +105,7 @@ static void setup(WebServerConfig.Builder server) {
                         // web server does not (yet) have possibility to configure routes in config files, so explicit...
                         .get("/rest/profile", (req, res) -> {
                             Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
-                            res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                            res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                             res.send("Response from builder based service, you are: \n" + securityContext
                                     .flatMap(SecurityContext::user)
                                     .map(Subject::toString)

File: examples/security/idcs-login/src/main/java/io/helidon/security/examples/idcs/IdcsMain.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.TimeUnit;
 
 import io.helidon.common.context.Contexts;
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.config.Config;
 import io.helidon.logging.common.LogConfig;
 import io.helidon.nima.webserver.WebServer;
@@ -83,7 +83,7 @@ static void setup(WebServerConfig.Builder server) {
                         // web server does not (yet) have possibility to configure routes in config files, so explicit...
                         .get("/rest/profile", (req, res) -> {
                             Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
-                            res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                            res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                             res.send("Response from config based service, you are: \n" + securityContext
                                     .flatMap(SecurityContext::user)
                                     .map(Subject::toString)

File: examples/security/outbound-override/src/main/java/io/helidon/security/examples/outbound/OutboundOverrideJwtExample.java
Patch:
@@ -99,7 +99,7 @@ static void setup(WebServerConfig.Builder server) {
                                 .get("/hello", (req, res) -> {
 
                                     // This is the token. It should be bearer <signed JWT base64 encoded>
-                                    req.headers().first(Http.Header.AUTHORIZATION)
+                                    req.headers().first(Http.HeaderNames.AUTHORIZATION)
                                             .ifPresent(System.out::println);
 
                                     String username = req.context()

File: examples/security/webserver-digest-auth/src/main/java/io/helidon/security/examples/webserver/digest/DigestExampleBuilderMain.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.logging.common.LogConfig;
 import io.helidon.nima.webserver.WebServer;
 import io.helidon.nima.webserver.WebServerConfig;
@@ -113,7 +113,7 @@ static void setup(WebServerConfig.Builder server) {
                         .audit())
                 .get("/{*}", (req, res) -> {
                     Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
-                    res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                    res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                     res.send("Hello, you are: \n" + securityContext
                             .map(ctx -> ctx.user().orElse(SecurityContext.ANONYMOUS).toString())
                             .orElse("Security context is null"));

File: examples/security/webserver-digest-auth/src/main/java/io/helidon/security/examples/webserver/digest/DigestExampleConfigMain.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.config.Config;
 import io.helidon.logging.common.LogConfig;
 import io.helidon.nima.webserver.WebServer;
@@ -85,7 +85,7 @@ static void setup(WebServerConfig.Builder server) {
                 // web server does not (yet) have possibility to configure routes in config files, so explicit...
                 .get("/{*}", (req, res) -> {
                     Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
-                    res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                    res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                     res.send("Hello, you are: \n" + securityContext
                             .map(ctx -> ctx.user().orElse(SecurityContext.ANONYMOUS).toString())
                             .orElse("Security context is null"));

File: examples/security/webserver-digest-auth/src/test/java/io/helidon/security/examples/webserver/digest/DigestExampleTest.java
Patch:
@@ -127,7 +127,7 @@ private void testNotAuthorized(String uri) {
         //Must NOT be accessible without authentication
         try (Http1ClientResponse response = client.get().path(uri).request()) {
             assertThat(response.status().code(), is(401));
-            String header = response.headers().first(Http.Header.create("WWW-Authenticate")).orElse(null);
+            String header = response.headers().first(Http.HeaderNames.create("WWW-Authenticate")).orElse(null);
             assertThat(header, notNullValue());
             assertThat(header.toLowerCase(), containsString("digest"));
             assertThat(header, containsString("mic"));

File: examples/security/webserver-digest-auth/src/test/java/io/helidon/security/examples/webserver/digest/WebClientAuthenticationService.java
Patch:
@@ -52,7 +52,7 @@ public WebClientServiceResponse handle(Chain chain, WebClientServiceRequest requ
         if (username == null || password == null) {
             return response;
         }
-        String challenge = response.headers().first(Http.Header.WWW_AUTHENTICATE).orElse(null);
+        String challenge = response.headers().first(Http.HeaderNames.WWW_AUTHENTICATE).orElse(null);
         if (challenge == null) {
             return response;
         }
@@ -62,7 +62,7 @@ public WebClientServiceResponse handle(Chain chain, WebClientServiceRequest requ
         if (atz == null) {
             return response;
         }
-        request.headers().add(Http.Header.AUTHORIZATION, atz);
+        request.headers().add(Http.HeaderNames.AUTHORIZATION, atz);
         return chain.proceed(request);
     }
 }

File: examples/security/webserver-signatures/src/main/java/io/helidon/security/examples/signatures/Service1.java
Patch:
@@ -18,7 +18,7 @@
 import io.helidon.common.LazyValue;
 import io.helidon.common.context.Contexts;
 import io.helidon.common.http.Http;
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
 import io.helidon.nima.webserver.WebServer;
@@ -52,7 +52,7 @@ private void service1Rsa(ServerRequest req, ServerResponse res) {
     }
 
     private void handle(ServerRequest req, ServerResponse res, String path) {
-        res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+        res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
         req.context()
                 .get(SecurityContext.class)
                 .ifPresentOrElse(context -> {

File: examples/security/webserver-signatures/src/main/java/io/helidon/security/examples/signatures/Service2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.Optional;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.nima.webserver.http.HttpRules;
 import io.helidon.nima.webserver.http.HttpService;
 import io.helidon.nima.webserver.http.ServerRequest;
@@ -34,7 +34,7 @@ public void routing(HttpRules rules) {
 
     private void handle(ServerRequest req, ServerResponse res) {
         Optional<SecurityContext> securityContext = req.context().get(SecurityContext.class);
-        res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+        res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
         res.send("Response from service2, you are: \n" + securityContext
                 .flatMap(SecurityContext::user)
                 .map(Subject::toString)

File: examples/webclient/standalone/src/main/java/io/helidon/examples/webclient/standalone/GreetService.java
Patch:
@@ -92,7 +92,7 @@ private void getDefaultMessageHandler(ServerRequest request,
     private void redirect(ServerRequest request,
                           ServerResponse response) {
         int port = request.context().get(WebServer.class).orElseThrow().port();
-        response.headers().add(Http.Header.LOCATION, "http://localhost:" + port + "/greet/");
+        response.headers().add(Http.HeaderNames.LOCATION, "http://localhost:" + port + "/greet/");
         response.status(Http.Status.MOVED_PERMANENTLY_301).send();
     }
 

File: examples/webserver/comment-aas/src/main/java/io/helidon/webserver/examples/comments/CommentsService.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.nima.webserver.http.HttpRules;
 import io.helidon.nima.webserver.http.HttpService;
 import io.helidon.nima.webserver.http.ServerRequest;
@@ -43,7 +43,7 @@ public void routing(HttpRules rules) {
 
     private void handleListComments(ServerRequest req, ServerResponse resp) {
         String topic = req.path().pathParameters().value("topic");
-        resp.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+        resp.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
         resp.send(listComments(topic));
     }
 

File: examples/webserver/comment-aas/src/main/java/io/helidon/webserver/examples/comments/Main.java
Patch:
@@ -36,7 +36,7 @@
  */
 public final class Main {
 
-    static final Http.HeaderName USER_IDENTITY_HEADER = Http.Header.create("user-identity");
+    static final Http.HeaderName USER_IDENTITY_HEADER = Http.HeaderNames.create("user-identity");
 
     private Main() {
     }

File: examples/webserver/comment-aas/src/test/java/io/helidon/webserver/examples/comments/CommentsServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.webserver.examples.comments;
 
 import io.helidon.common.http.Http;
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.media.type.MediaTypes;
 import io.helidon.nima.testing.junit5.webserver.DirectClient;
 import io.helidon.nima.testing.junit5.webserver.RoutingTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
@@ -73,7 +73,7 @@ public void testRouting() {
             assertThat(response.status(), is(Http.Status.OK_200));
         }
         try (Http1ClientResponse response = client.post("/comments/one")
-                                                  .contentType(HttpMediaType.TEXT_PLAIN)
+                                                  .contentType(MediaTypes.TEXT_PLAIN)
                                                   .submit("aaa")) {
 
             assertThat(response.status(), is(Http.Status.OK_200));

File: examples/webserver/comment-aas/src/test/java/io/helidon/webserver/examples/comments/MainTest.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.webserver.examples.comments;
 
 import io.helidon.common.http.Http;
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.media.type.MediaTypes;
 import io.helidon.nima.testing.junit5.webserver.DirectClient;
 import io.helidon.nima.testing.junit5.webserver.RoutingTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
@@ -50,7 +50,7 @@ static void setup(HttpRouting.Builder routing) {
     public void argot() {
         try (Http1ClientResponse response = client.post("/comments/one")
                 .header(Main.USER_IDENTITY_HEADER, "Joe")
-                .contentType(HttpMediaType.TEXT_PLAIN)
+                .contentType(MediaTypes.TEXT_PLAIN)
                 .submit("Spring framework is the BEST!")) {
 
             assertThat(response.status(), is(Http.Status.NOT_ACCEPTABLE_406));

File: examples/webserver/mutual-tls/src/main/java/io/helidon/webserver/examples/mtls/SecureService.java
Patch:
@@ -32,7 +32,7 @@ public void routing(HttpRules rules) {
                     .orElse("Unknown CN");
 
             // close to avoid re-using cached connections on the client side
-            res.header(Http.HeaderValues.CONNECTION_CLOSE);
+            res.header(Http.Headers.CONNECTION_CLOSE);
             res.send("Hello " + cn + "!");
         });
     }

File: examples/webserver/static-content/src/main/java/io/helidon/webserver/examples/staticcontent/Main.java
Patch:
@@ -26,7 +26,7 @@
  * The application main class.
  */
 public final class Main {
-    private static final Http.HeaderValue UI_REDIRECT = Http.Header.createCached(Http.Header.LOCATION, "/ui");
+    private static final Http.Header UI_REDIRECT = Http.Headers.createCached(Http.HeaderNames.LOCATION, "/ui");
 
     /**
      * Cannot be instantiated.

File: examples/webserver/tutorial/src/main/java/io/helidon/webserver/examples/tutorial/CommentService.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.nima.webserver.http.HttpRules;
 import io.helidon.nima.webserver.http.HttpService;
 import io.helidon.nima.webserver.http.ServerRequest;
@@ -42,7 +42,7 @@ public void routing(HttpRules rules) {
 
     private void getComments(ServerRequest req, ServerResponse resp) {
         String roomId = req.path().pathParameters().value("room-id");
-        resp.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+        resp.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
         resp.send(getComments(roomId));
     }
 

File: examples/webserver/tutorial/src/main/java/io/helidon/webserver/examples/tutorial/Main.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.webserver.examples.tutorial;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.nima.http.media.MediaContext;
 import io.helidon.nima.webserver.WebServer;
 import io.helidon.nima.webserver.WebServerConfig;
@@ -42,7 +42,7 @@ static void routing(HttpRouting.Builder routing) {
         routing.any(new UserFilter())
                 .register("/article", new CommentService())
                 .post("/mgmt/shutdown", (req, res) -> {
-                    res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                    res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                     res.send("Shutting down TUTORIAL server. Good bye!\n");
                     req.context()
                             .get(WebServer.class)

File: examples/webserver/tutorial/src/test/java/io/helidon/webserver/examples/tutorial/UserFilterTest.java
Patch:
@@ -56,7 +56,7 @@ public void filter() {
         }
 
         try (Http1ClientResponse response = client.get()
-                                                  .header(Http.Header.COOKIE, "Unauthenticated-User-Alias=Foo")
+                                                  .header(Http.HeaderNames.COOKIE, "Unauthenticated-User-Alias=Foo")
                                                   .request()) {
             assertThat(response.entity().as(String.class), is("Foo"));
         }

File: integrations/common/rest/src/main/java/io/helidon/integrations/common/rest/RestApiBase.java
Patch:
@@ -226,7 +226,7 @@ protected void addQueryParams(HttpClientRequest request, Map<String, List<String
      */
     protected void addHeaders(HttpClientRequest request, Map<String, List<String>> headers) {
         request.headers(clientHeaders -> {
-            headers.forEach((key, value) -> clientHeaders.set(Http.Header.create(key), value));
+            headers.forEach((key, value) -> clientHeaders.set(Http.HeaderNames.create(key), value));
         });
     }
 

File: integrations/vault/auths/approle/src/main/java/io/helidon/integrations/vault/auths/approle/AppRoleRestApi.java
Patch:
@@ -29,7 +29,7 @@
 class AppRoleRestApi extends VaultRestApi {
     private static final System.Logger LOGGER = System.getLogger(AppRoleRestApi.class.getName());
 
-    private static final Http.HeaderName VAULT_TOKEN_HEADER_NAME =  Http.Header.create("X-Vault-Token");
+    private static final Http.HeaderName VAULT_TOKEN_HEADER_NAME =  Http.HeaderNames.create("X-Vault-Token");
 
     private final AtomicReference<VaultTokenBase> currentToken = new AtomicReference<>();
 

File: integrations/vault/auths/approle/src/main/java/io/helidon/integrations/vault/auths/approle/AppRoleVaultAuth.java
Patch:
@@ -35,7 +35,7 @@
 @Weight(Weighted.DEFAULT_WEIGHT + 100)
 public class AppRoleVaultAuth implements VaultAuth {
     private static final System.Logger LOGGER = System.getLogger(AppRoleVaultAuth.class.getName());
-    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME = Http.Header.create("X-Vault-Namespace");
+    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME = Http.HeaderNames.create("X-Vault-Namespace");
     private final String appRoleId;
     private final String secretId;
     private final String methodPath;

File: integrations/vault/auths/common/src/main/java/io/helidon/integrations/vault/auths/common/NoVaultAuth.java
Patch:
@@ -31,7 +31,7 @@
  */
 @Weight(1)
 public class NoVaultAuth implements VaultAuth {
-    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME =  Http.Header.create("X-Vault-Namespace");
+    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME =  Http.HeaderNames.create("X-Vault-Namespace");
     /**
      * Required for service loader.
      */

File: integrations/vault/auths/k8s/src/main/java/io/helidon/integrations/vault/auths/k8s/K8sRestApi.java
Patch:
@@ -27,7 +27,7 @@
 
 class K8sRestApi extends VaultRestApi {
 
-    private static final Http.HeaderName VAULT_TOKEN_HEADER_NAME = Http.Header.create("X-Vault-Token");
+    private static final Http.HeaderName VAULT_TOKEN_HEADER_NAME = Http.HeaderNames.create("X-Vault-Token");
     private final AtomicReference<VaultTokenBase> currentToken = new AtomicReference<>();
 
     private final K8sAuth auth;

File: integrations/vault/auths/k8s/src/main/java/io/helidon/integrations/vault/auths/k8s/K8sVaultAuth.java
Patch:
@@ -39,7 +39,7 @@
 @Weight(Weighted.DEFAULT_WEIGHT + 50)
 public class K8sVaultAuth implements VaultAuth {
     private static final System.Logger LOGGER = System.getLogger(K8sVaultAuth.class.getName());
-    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME = Http.Header.create("X-Vault-Namespace");
+    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME = Http.HeaderNames.create("X-Vault-Namespace");
     private final String serviceAccountToken;
     private final String tokenRole;
     private final String tokenLocation;

File: integrations/vault/auths/token/src/main/java/io/helidon/integrations/vault/auths/token/TokenVaultAuth.java
Patch:
@@ -37,8 +37,8 @@
 @Weight(Weighted.DEFAULT_WEIGHT)
 public class TokenVaultAuth implements VaultAuth {
     private static final System.Logger LOGGER = System.getLogger(TokenVaultAuth.class.getName());
-    private static final Http.HeaderName VAULT_TOKEN_HEADER_NAME =  Http.Header.create("X-Vault-Token");
-    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME =  Http.Header.create("X-Vault-Namespace");
+    private static final Http.HeaderName VAULT_TOKEN_HEADER_NAME =  Http.HeaderNames.create("X-Vault-Token");
+    private static final Http.HeaderName VAULT_NAMESPACE_HEADER_NAME =  Http.HeaderNames.create("X-Vault-Namespace");
     private final String token;
     private final String baseNamespace;
 

File: jersey/connector/src/main/java/io/helidon/jersey/connector/HelidonConnector.java
Patch:
@@ -126,7 +126,7 @@ private Http1ClientRequest mapRequest(ClientRequest request) {
         // map request headers
         request.getRequestHeaders().forEach((key, value) -> {
             String[] values = value.toArray(new String[0]);
-            httpRequest.header(Http.Header.create(key), values);
+            httpRequest.header(Http.HeaderNames.create(key), values);
         });
 
         // SSL context
@@ -184,7 +184,7 @@ public String getReasonPhrase() {
         }, request);
 
         // copy headers
-        for (Http.HeaderValue header : httpResponse.headers()) {
+        for (Http.Header header : httpResponse.headers()) {
             for (String v : header.allValues()) {
                 response.getHeaders().add(header.name(), v);
             }

File: metrics/prometheus/src/test/java/io/helidon/metrics/prometheus/PrometheusSupportTest.java
Patch:
@@ -83,7 +83,7 @@ public void clearRegistry() {
     public void simpleCall() {
         try (Http1ClientResponse response = client.get("/metrics").request()) {
             assertThat(response.status(), is(Http.Status.OK_200));
-            assertThat(response.headers().first(Http.Header.CONTENT_TYPE).orElse(null),
+            assertThat(response.headers().first(Http.HeaderNames.CONTENT_TYPE).orElse(null),
                     StringStartsWith.startsWith("text/plain"));
             String body = response.as(String.class);
             assertThat(body, containsString("# HELP beta"));
@@ -99,7 +99,7 @@ public void simpleCall() {
     @Test
     public void doubleCall() {
         try (Http1ClientResponse response = client.get("/metrics").request()) {
-            assertThat(response.headers().first(Http.Header.CONTENT_TYPE).orElse(null),
+            assertThat(response.headers().first(Http.HeaderNames.CONTENT_TYPE).orElse(null),
                     StringStartsWith.startsWith("text/plain"));
             String body = response.as(String.class);
             assertThat(body, containsString("alpha_total{method=\"bar\",} 6.0"));

File: microprofile/cors/src/main/java/io/helidon/microprofile/cors/CorsSupportMp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.helidon.microprofile.cors;
 
 import java.util.List;
@@ -110,7 +111,7 @@ static class RequestAdapterMp implements CorsRequestAdapter<ContainerRequestCont
         @Override
         public String authority() {
             // TODO Níma we want authority - we should set it in integration with Nima as request property
-            return firstHeader(Http.Header.HOST).orElse("localhost");
+            return firstHeader(Http.HeaderNames.HOST).orElse("localhost");
         }
 
         @Override

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/CoordinatorHeaderPropagationTest.java
Patch:
@@ -105,7 +105,7 @@ class CoordinatorHeaderPropagationTest {
     private static final String PROPAGATED_HEADER = "xxx-tmm-propagated-header";
     private static final String EXTRA_COORDINATOR_PROPAGATED_HEADER = "xBb-tmm-extra-start-header";
     private static final String NOT_PROPAGATED_HEADER = "non-propagated-header";
-    private static final Http.HeaderName LRA_HTTP_CONTEXT_HEADER_NAME = Http.Header.create(LRA_HTTP_CONTEXT_HEADER);
+    private static final Http.HeaderName LRA_HTTP_CONTEXT_HEADER_NAME = Http.HeaderNames.create(LRA_HTTP_CONTEXT_HEADER);
 
     private static volatile int port = -1;
 

File: microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java
Patch:
@@ -482,7 +482,7 @@ private void registerDefaultRedirect() {
                 .or(() -> config.get("server.base-path").asString().asOptional())
                 .ifPresent(basePath -> routingBuilder.any("/", (req, res) -> {
                     res.status(Http.Status.MOVED_PERMANENTLY_301);
-                    res.headers().set(Http.Header.LOCATION, basePath);
+                    res.headers().set(Http.HeaderNames.LOCATION, basePath);
                     res.send();
                 }));
         STARTUP_LOGGER.log(Level.TRACE, "Builders ready");

File: nima/graphql/server/src/main/java/io/helidon/nima/graphql/server/GraphQlService.java
Patch:
@@ -24,7 +24,7 @@
 
 import io.helidon.common.GenericType;
 import io.helidon.common.configurable.ServerThreadPoolSupplier;
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.media.type.MediaTypes;
 import io.helidon.common.uri.UriQuery;
 import io.helidon.config.Config;
 import io.helidon.cors.CrossOriginConfig;
@@ -134,7 +134,7 @@ private void processRequest(ServerResponse res,
                                 String operationName,
                                 Map<String, Object> variables) {
 
-        res.headers().contentType(HttpMediaType.APPLICATION_JSON);
+        res.headers().contentType(MediaTypes.APPLICATION_JSON);
         res.send(JSONB.toJson(invocationHandler.execute(query, operationName, variables)));
     }
 

File: nima/grpc/webserver/src/main/java/io/helidon/nima/grpc/webserver/GrpcProtocolHandler.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.common.buffers.BufferData;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.Http.Header;
-import io.helidon.common.http.Http.HeaderValue;
+import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.common.http.HttpPrologue;
 import io.helidon.common.http.WritableHeaders;
 import io.helidon.nima.http2.Http2Flag;
@@ -49,8 +49,8 @@
 
 class GrpcProtocolHandler<REQ, RES> implements Http2SubProtocolSelector.SubProtocolHandler {
     private static final System.Logger LOGGER = System.getLogger(GrpcProtocolHandler.class.getName());
-    private static final HeaderValue GRPC_CONTENT_TYPE = Header.createCached(Header.CONTENT_TYPE, "application/grpc");
-    private static final HeaderValue GRPC_ENCODING_IDENTITY = Header.createCached("grpc-encoding", "identity");
+    private static final Header GRPC_CONTENT_TYPE = Http.Headers.createCached(HeaderNames.CONTENT_TYPE, "application/grpc");
+    private static final Header GRPC_ENCODING_IDENTITY = Http.Headers.createCached("grpc-encoding", "identity");
 
     private final HttpPrologue prologue;
     private final Http2Headers headers;

File: nima/grpc/webserver/src/main/java/io/helidon/nima/grpc/webserver/GrpcProtocolSelector.java
Patch:
@@ -63,8 +63,8 @@ public SubProtocolResult subProtocol(ConnectionContext ctx,
         // we know this is HTTP/2, so no need to check protocol and version
         Headers httpHeaders = headers.httpHeaders();
 
-        if (httpHeaders.contains(Http.Header.CONTENT_TYPE)) {
-            String contentType = httpHeaders.get(Http.Header.CONTENT_TYPE).value();
+        if (httpHeaders.contains(Http.HeaderNames.CONTENT_TYPE)) {
+            String contentType = httpHeaders.get(Http.HeaderNames.CONTENT_TYPE).value();
 
             if (contentType.startsWith("application/grpc")) {
                 GrpcRouting routing = router.routing(GrpcRouting.class, GrpcRouting.empty());

File: nima/http/encoding/encoding/src/main/java/io/helidon/nima/http/encoding/ContentEncodingSupportImpl.java
Patch:
@@ -116,11 +116,11 @@ public ContentDecoder decoder(String encodingId) throws NoSuchElementException {
 
     @Override
     public ContentEncoder encoder(Headers headers) {
-        if (!contentEncodingEnabled() || !headers.contains(Http.Header.ACCEPT_ENCODING)) {
+        if (!contentEncodingEnabled() || !headers.contains(Http.HeaderNames.ACCEPT_ENCODING)) {
             return ContentEncoder.NO_OP;
         }
 
-        String acceptEncoding = headers.get(Http.Header.ACCEPT_ENCODING).value();
+        String acceptEncoding = headers.get(Http.HeaderNames.ACCEPT_ENCODING).value();
         /*
             Accept-Encoding: gzip
             Accept-Encoding: gzip, compress, br

File: nima/http/media/jackson/src/main/java/io/helidon/nima/http/media/jackson/JacksonSupport.java
Patch:
@@ -34,7 +34,7 @@
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
 
-import static io.helidon.common.http.Http.HeaderValues.CONTENT_TYPE_JSON;
+import static io.helidon.common.http.Http.Headers.CONTENT_TYPE_JSON;
 
 /**
  * {@link java.util.ServiceLoader} provider implementation for Jackson media support.
@@ -179,7 +179,7 @@ public <T> ReaderResponse<T> reader(GenericType<T> type,
 
     @Override
     public <T> WriterResponse<T> writer(GenericType<T> type, WritableHeaders<?> requestHeaders) {
-        if (requestHeaders.contains(Http.Header.CONTENT_TYPE)) {
+        if (requestHeaders.contains(Http.HeaderNames.CONTENT_TYPE)) {
             if (requestHeaders.contains(CONTENT_TYPE_JSON)) {
                 if (objectMapper.canSerialize(type.rawType())) {
                     return new WriterResponse<>(SupportLevel.COMPATIBLE, this::writer);

File: nima/http/media/jackson/src/main/java/io/helidon/nima/http/media/jackson/JacksonWriter.java
Patch:
@@ -51,7 +51,7 @@ public void write(GenericType<T> type,
                       Headers requestHeaders,
                       WritableHeaders<?> responseHeaders) {
 
-        responseHeaders.setIfAbsent(Http.HeaderValues.CONTENT_TYPE_JSON);
+        responseHeaders.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
 
         for (HttpMediaType acceptedType : requestHeaders.acceptedTypes()) {
             if (acceptedType.test(MediaTypes.APPLICATION_JSON)) {
@@ -71,7 +71,7 @@ public void write(GenericType<T> type,
 
     @Override
     public void write(GenericType<T> type, T object, OutputStream outputStream, WritableHeaders<?> headers) {
-        headers.setIfAbsent(Http.HeaderValues.CONTENT_TYPE_JSON);
+        headers.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
         write(type, object, outputStream);
     }
 

File: nima/http/media/jackson/src/test/java/io/helidon/nima/http/media/jackson/JacksonMediaTest.java
Patch:
@@ -70,7 +70,7 @@ void testWriteSingle() {
         res.supplier().get()
                 .write(BOOK_TYPE, new Book("test-title"), os, headers);
 
-        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.HeaderValues.CONTENT_TYPE_JSON));
+        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.Headers.CONTENT_TYPE_JSON));
         String result = os.toString(StandardCharsets.UTF_8);
         assertThat(result, containsString("\"title\""));
         assertThat(result, containsString("\"test-title\""));
@@ -97,7 +97,7 @@ void testWriteList() {
         res.supplier().get()
                 .write(BOOK_LIST_TYPE, books, os, headers);
 
-        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.HeaderValues.CONTENT_TYPE_JSON));
+        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.Headers.CONTENT_TYPE_JSON));
         String result = os.toString(StandardCharsets.UTF_8);
         assertThat(result, containsString("\"title\""));
         assertThat(result, containsString("\"first\""));

File: nima/http/media/jsonb/src/main/java/io/helidon/nima/http/media/jsonb/JsonbSupport.java
Patch:
@@ -33,7 +33,7 @@
 import jakarta.json.bind.Jsonb;
 import jakarta.json.bind.JsonbBuilder;
 
-import static io.helidon.common.http.Http.HeaderValues.CONTENT_TYPE_JSON;
+import static io.helidon.common.http.Http.Headers.CONTENT_TYPE_JSON;
 
 /**
  * {@link java.util.ServiceLoader} provider implementation for JSON Binding media support.
@@ -151,7 +151,7 @@ public <T> WriterResponse<T> writer(GenericType<T> type, WritableHeaders<?> requ
         if (type.equals(JSON_OBJECT_TYPE)) {
             return WriterResponse.unsupported();
         }
-        if (requestHeaders.contains(Http.Header.CONTENT_TYPE)) {
+        if (requestHeaders.contains(Http.HeaderNames.CONTENT_TYPE)) {
             if (requestHeaders.contains(CONTENT_TYPE_JSON)) {
                 return new WriterResponse<>(SupportLevel.COMPATIBLE, this::writer);
             }

File: nima/http/media/jsonb/src/main/java/io/helidon/nima/http/media/jsonb/JsonbWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public void write(GenericType<T> type,
                       Headers requestHeaders,
                       WritableHeaders<?> responseHeaders) {
 
-        responseHeaders.setIfAbsent(Http.HeaderValues.CONTENT_TYPE_JSON);
+        responseHeaders.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
 
         for (HttpMediaType acceptedType : requestHeaders.acceptedTypes()) {
             if (acceptedType.test(MediaTypes.APPLICATION_JSON)) {
@@ -68,7 +68,7 @@ public void write(GenericType<T> type,
 
     @Override
     public void write(GenericType<T> type, T object, OutputStream outputStream, WritableHeaders<?> headers) {
-        headers.setIfAbsent(Http.HeaderValues.CONTENT_TYPE_JSON);
+        headers.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
         write(type, object, outputStream);
     }
 

File: nima/http/media/jsonb/src/test/java/io/helidon/nima/http/media/jsonb/JsonbMediaTest.java
Patch:
@@ -70,7 +70,7 @@ void testWriteSingle() {
         res.supplier().get()
                 .write(BOOK_TYPE, new Book("test-title"), os, headers);
 
-        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.HeaderValues.CONTENT_TYPE_JSON));
+        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.Headers.CONTENT_TYPE_JSON));
         String result = os.toString(StandardCharsets.UTF_8);
         assertThat(result, containsString("\"title\""));
         assertThat(result, containsString("\"test-title\""));
@@ -97,7 +97,7 @@ void testWriteList() {
         res.supplier().get()
                 .write(BOOK_LIST_TYPE, books, os, headers);
 
-        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.HeaderValues.CONTENT_TYPE_JSON));
+        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.Headers.CONTENT_TYPE_JSON));
         String result = os.toString(StandardCharsets.UTF_8);
         assertThat(result, containsString("\"title\""));
         assertThat(result, containsString("\"first\""));

File: nima/http/media/jsonp/src/main/java/io/helidon/nima/http/media/jsonp/JsonpWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,7 +50,7 @@ public void write(GenericType<T> type,
                       Headers requestHeaders,
                       WritableHeaders<?> responseHeaders) {
 
-        responseHeaders.setIfAbsent(Http.HeaderValues.CONTENT_TYPE_JSON);
+        responseHeaders.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
 
         for (HttpMediaType acceptedType : requestHeaders.acceptedTypes()) {
             if (acceptedType.test(MediaTypes.APPLICATION_JSON)) {
@@ -70,7 +70,7 @@ public void write(GenericType<T> type,
 
     @Override
     public void write(GenericType<T> type, T object, OutputStream outputStream, WritableHeaders<?> headers) {
-        headers.setIfAbsent(Http.HeaderValues.CONTENT_TYPE_JSON);
+        headers.setIfAbsent(Http.Headers.CONTENT_TYPE_JSON);
         write(type, object, outputStream);
     }
 

File: nima/http/media/jsonp/src/test/java/io/helidon/nima/http/media/jsonp/JsonpMediaTest.java
Patch:
@@ -74,7 +74,7 @@ void testWriteSingle() {
         res.supplier().get()
                 .write(JSON_OBJECT_TYPE, createObject("test-title"), os, headers);
 
-        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.HeaderValues.CONTENT_TYPE_JSON));
+        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.Headers.CONTENT_TYPE_JSON));
         String result = os.toString(StandardCharsets.UTF_8);
         assertThat(result, containsString("\"title\""));
         assertThat(result, containsString("\"test-title\""));
@@ -101,7 +101,7 @@ void testWriteList() {
         res.supplier().get()
                 .write(JSON_ARRAY_TYPE, JsonObjects, os, headers);
 
-        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.HeaderValues.CONTENT_TYPE_JSON));
+        assertThat(headers, HttpHeaderMatcher.hasHeader(Http.Headers.CONTENT_TYPE_JSON));
         String result = os.toString(StandardCharsets.UTF_8);
         assertThat(result, containsString("\"title\""));
         assertThat(result, containsString("\"first\""));

File: nima/http/media/media/src/main/java/io/helidon/nima/http/media/PathSupport.java
Patch:
@@ -126,11 +126,11 @@ private void write(Path toWrite,
                            OutputStream outputStream,
                            WritableHeaders<?> writableHeaders) {
 
-            if (!writableHeaders.contains(Http.Header.CONTENT_TYPE)) {
+            if (!writableHeaders.contains(Http.HeaderNames.CONTENT_TYPE)) {
                 MediaType mediaType = MediaTypes.detectType(toWrite).orElse(MediaTypes.APPLICATION_OCTET_STREAM);
                 writableHeaders.contentType(mediaType);
             }
-            if (!writableHeaders.contains(Http.Header.CONTENT_DISPOSITION)) {
+            if (!writableHeaders.contains(Http.HeaderNames.CONTENT_DISPOSITION)) {
                 writableHeaders.set(ContentDisposition.builder()
                                             .filename(String.valueOf(toWrite.getFileName()))
                                             .build());

File: nima/http/media/multipart/src/main/java/io/helidon/nima/http/media/multipart/MultiPartImpl.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.NoSuchElementException;
 
 import io.helidon.common.buffers.DataReader;
-import io.helidon.common.http.Http.Header;
+import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.common.http.Http1HeadersParser;
 import io.helidon.common.http.WritableHeaders;
 import io.helidon.nima.http.media.MediaContext;
@@ -83,12 +83,12 @@ public boolean hasNext() {
         if (probablyBoundary.equals(boundary)) {
             dataReader.skip(2); // skip the new line after boundary
             WritableHeaders<?> headers = Http1HeadersParser.readHeaders(dataReader, 1024, true);
-            if (headers.contains(Header.CONTENT_LENGTH)) {
+            if (headers.contains(HeaderNames.CONTENT_LENGTH)) {
                 next = new ReadablePartLength(context,
                                               headers,
                                               dataReader,
                                               index++,
-                                              headers.get(Header.CONTENT_LENGTH).value(long.class));
+                                              headers.get(HeaderNames.CONTENT_LENGTH).value(long.class));
                 return true;
             } else {
                 next = new ReadablePartNoLength(context, headers, dataReader, index++, boundary, endBoundary);

File: nima/http/media/multipart/src/main/java/io/helidon/nima/http/media/multipart/MultiPartWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,12 +32,12 @@
 
 class MultiPartWriter implements EntityWriter<WriteableMultiPart> {
     private final MediaContext context;
-    private final Http.HeaderValue contentType;
+    private final Http.Header contentType;
     private final byte[] boundaryPrefix;
 
     MultiPartWriter(MediaContext context, HttpMediaType mediaType, String boundary) {
         this.context = context;
-        this.contentType = Http.Header.create(Http.Header.CONTENT_TYPE, false, false, mediaType.text());
+        this.contentType = Http.Headers.create(Http.HeaderNames.CONTENT_TYPE, false, false, mediaType.text());
         this.boundaryPrefix = ("--" + boundary).getBytes(StandardCharsets.UTF_8);
     }
 

File: nima/http/media/multipart/src/main/java/io/helidon/nima/http/media/multipart/WriteablePart.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 
 import io.helidon.common.http.Headers;
 import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.common.http.WritableHeaders;
 import io.helidon.common.media.type.MediaType;
 import io.helidon.nima.http.media.MediaContext;
@@ -94,7 +95,7 @@ class Builder implements io.helidon.common.Builder<Builder, WriteablePart> {
 
         private final String partName;
         private String fileName;
-        private HttpMediaType mediaType = HttpMediaType.PLAINTEXT_UTF_8;
+        private HttpMediaType mediaType = HttpMediaTypes.PLAINTEXT_UTF_8;
         private Supplier<Object> objectContent;
         private Supplier<InputStream> inputStreamSupplier;
         private byte[] byteContent;

File: nima/http2/webclient/src/main/java/io/helidon/nima/http2/webclient/Http2CallEntityChain.java
Patch:
@@ -59,7 +59,7 @@ protected WebClientServiceResponse doProceed(WebClientServiceRequest serviceRequ
             entityBytes = entityBytes(entity, headers);
         }
 
-        headers.set(Http.Header.create(Http.Header.CONTENT_LENGTH, entityBytes.length));
+        headers.set(Http.Headers.create(Http.HeaderNames.CONTENT_LENGTH, entityBytes.length));
 
         ClientUri uri = serviceRequest.uri();
 

File: nima/http2/webclient/src/main/java/io/helidon/nima/http2/webclient/Http2ClientRequestImpl.java
Patch:
@@ -164,11 +164,11 @@ private Http2ClientResponse invokeEntityFollowRedirects(Object entity) {
             int code = clientResponse.status().code();
             if (code < 300 || code >= 400) {
                 return clientResponse;
-            } else if (!clientResponse.headers().contains(Http.Header.LOCATION)) {
-                throw new IllegalStateException("There is no " + Http.Header.LOCATION + " header present in the response! "
+            } else if (!clientResponse.headers().contains(Http.HeaderNames.LOCATION)) {
+                throw new IllegalStateException("There is no " + Http.HeaderNames.LOCATION + " header present in the response! "
                                                         + "It is not clear where to redirect.");
             }
-            String redirectedUri = clientResponse.headers().get(Http.Header.LOCATION).value();
+            String redirectedUri = clientResponse.headers().get(Http.HeaderNames.LOCATION).value();
             URI newUri = URI.create(redirectedUri);
             ClientUri redirectUri = ClientUri.create(newUri);
 

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/Http2ServerRequest.java
Patch:
@@ -22,7 +22,7 @@
 import io.helidon.common.buffers.BufferData;
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
-import io.helidon.common.http.Http.HeaderValue;
+import io.helidon.common.http.Http;
 import io.helidon.common.http.HttpPrologue;
 import io.helidon.common.http.RoutedPath;
 import io.helidon.common.http.ServerRequestHeaders;
@@ -153,7 +153,7 @@ public String authority() {
     }
 
     @Override
-    public void header(HeaderValue header) {
+    public void header(Http.Header header) {
         if (writable == null) {
             writable = WritableHeaders.create(headers);
         }

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/Http2Upgrader.java
Patch:
@@ -22,7 +22,7 @@
 
 import io.helidon.common.buffers.BufferData;
 import io.helidon.common.buffers.DataWriter;
-import io.helidon.common.http.Http.Header;
+import io.helidon.common.http.Http;
 import io.helidon.common.http.Http.HeaderName;
 import io.helidon.common.http.HttpPrologue;
 import io.helidon.common.http.WritableHeaders;
@@ -42,7 +42,7 @@ public class Http2Upgrader implements Http1Upgrader {
                     + "Connection: Upgrade\r\n"
                     + "Upgrade: h2c\r\n\r\n")
             .getBytes(StandardCharsets.UTF_8);
-    private static final HeaderName HTTP2_SETTINGS_HEADER_NAME = Header.create("HTTP2-Settings");
+    private static final HeaderName HTTP2_SETTINGS_HEADER_NAME = Http.HeaderNames.create("HTTP2-Settings");
     private static final Base64.Decoder BASE_64_DECODER = Base64.getDecoder();
 
     private final Http2Config config;
@@ -85,7 +85,7 @@ public ServerConnection upgrade(ConnectionContext ctx,
         Http2Headers http2Headers = Http2Headers.create(headers);
         http2Headers.path(prologue.uriPath().rawPath());
         http2Headers.method(prologue.method());
-        headers.remove(Header.HOST,
+        headers.remove(Http.HeaderNames.HOST,
                        it -> http2Headers.authority(it.value()));
         http2Headers.scheme("http"); // TODO need to get if https (ctx)?
 

File: nima/observe/metrics/src/main/java/io/helidon/nima/observe/metrics/MetricsFeature.java
Patch:
@@ -194,7 +194,7 @@ private void getMatching(ServerRequest req,
                              Iterable<String> scopeSelection,
                              Iterable<String> nameSelection) {
         MediaType mediaType = bestAccepted(req);
-        res.header(Http.HeaderValues.CACHE_NO_CACHE);
+        res.header(Http.Headers.CACHE_NO_CACHE);
         if (mediaType == null) {
             res.status(Http.Status.NOT_ACCEPTABLE_406);
             res.send();
@@ -275,7 +275,7 @@ private void postRequestProcessing(PostRequestMetricsSupport prms,
 
     private void rejectOptions(ServerRequest req, ServerResponse res) {
         // Options used to return metadata but it's no longer supported unless we restore JSON support.
-        res.header(Http.Header.ALLOW, "GET");
+        res.header(Http.HeaderNames.ALLOW, "GET");
         res.status(Http.Status.METHOD_NOT_ALLOWED_405);
         res.send();
     }

File: nima/sse/sse/src/main/java/io/helidon/nima/sse/SseEvent.java
Patch:
@@ -128,7 +128,7 @@ public <T> T data(Class<T> clazz, MediaType mediaType) {
             WritableHeaders<?> headers;
             if (!mediaType.equals(MediaTypes.WILDCARD)) {
                 headers = WritableHeaders.create();
-                headers.set(Http.Header.CONTENT_TYPE, mediaType.text());
+                headers.set(Http.HeaderNames.CONTENT_TYPE, mediaType.text());
             } else {
                 headers = EMPTY_HEADERS;
             }

File: nima/sse/webserver/src/main/java/io/helidon/nima/sse/webserver/SseSink.java
Patch:
@@ -32,7 +32,7 @@
 import io.helidon.nima.webserver.http.ServerResponse;
 import io.helidon.nima.webserver.http.spi.Sink;
 
-import static io.helidon.common.http.Http.HeaderValues.CONTENT_TYPE_EVENT_STREAM;
+import static io.helidon.common.http.Http.Headers.CONTENT_TYPE_EVENT_STREAM;
 
 /**
  * Implementation of an SSE sink. Emits {@link SseEvent}s.

File: nima/tests/integration/encoding/deflate/src/test/java/io/helidon/nima/tests/integration/encoding/deflate/DeflateEncodingTest.java
Patch:
@@ -53,7 +53,7 @@
 class DeflateEncodingTest {
     private static final String ENTITY = "Some arbitrary text we want to try to compress";
     private static final byte[] DEFLATED_ENTITY;
-    private static final Http.HeaderValue CONTENT_ENCODING_DEFLATE = Http.Header.create(Http.Header.CONTENT_ENCODING, "deflate");
+    private static final Http.Header CONTENT_ENCODING_DEFLATE = Http.Headers.create(Http.HeaderNames.CONTENT_ENCODING, "deflate");
 
     static {
         ByteArrayOutputStream baos;
@@ -139,7 +139,7 @@ void testDeflateMultipleAcceptedEncodingsHttp2Client() {
 
     void testIt(io.helidon.nima.webclient.api.HttpClient<?> client, String path, String acceptEncodingValue) {
         ClientResponseTyped<String> response = client.put(path)
-                .header(Http.Header.ACCEPT_ENCODING, acceptEncodingValue)
+                .header(Http.HeaderNames.ACCEPT_ENCODING, acceptEncodingValue)
                 .header(CONTENT_ENCODING_DEFLATE)
                 .submit(DEFLATED_ENTITY, String.class);
 

File: nima/tests/integration/encoding/gzip/src/test/java/io/helidon/nima/tests/integration/encoding/gzip/GzipEncodingTest.java
Patch:
@@ -52,7 +52,7 @@
 class GzipEncodingTest {
     private static final String ENTITY = "Some arbitrary text we want to try to compress";
     private static final byte[] GZIP_ENTITY;
-    private static final Http.HeaderValue CONTENT_ENCODING_GZIP = Http.Header.create(Http.Header.CONTENT_ENCODING, "gzip");
+    private static final Http.Header CONTENT_ENCODING_GZIP = Http.Headers.create(Http.HeaderNames.CONTENT_ENCODING, "gzip");
 
     static {
         ByteArrayOutputStream baos;
@@ -139,7 +139,7 @@ void testDeflateMultipleAcceptedEncodingsHttp2Client() {
 
     void testIt(io.helidon.nima.webclient.api.HttpClient<?> client, String path, String acceptEncodingValue) {
         ClientResponseTyped<String> response = client.put(path)
-                .header(Http.Header.ACCEPT_ENCODING, acceptEncodingValue)
+                .header(Http.HeaderNames.ACCEPT_ENCODING, acceptEncodingValue)
                 .header(CONTENT_ENCODING_GZIP)
                 .submit(GZIP_ENTITY, String.class);
 

File: nima/tests/integration/http2/client/src/test/java/io/helidon/nima/tests/integration/http2/client/Http2ClientTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.helidon.common.configurable.Resource;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.Http.Header;
-import io.helidon.common.http.Http.HeaderValue;
+import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.common.pki.Keys;
 import io.helidon.nima.common.tls.Tls;
 import io.helidon.nima.http2.webclient.Http2Client;
@@ -44,7 +44,7 @@ class Http2ClientTest {
     private static final String MESSAGE = "Hello World!";
     private static final String TEST_HEADER_NAME = "custom_header";
     private static final String TEST_HEADER_VALUE = "as!fd";
-    private static final HeaderValue TEST_HEADER = Header.create(Header.create(TEST_HEADER_NAME), TEST_HEADER_VALUE);
+    private static final Header TEST_HEADER = Http.Headers.create(HeaderNames.create(TEST_HEADER_NAME), TEST_HEADER_VALUE);
     private final Http1Client http1Client;
     private final Http2Client tlsClient;
     private final Http2Client plainClient;

File: nima/tests/integration/http2/server/src/test/java/io/helidon/nima/tests/integration/http2/webserver/Http2ErrorHandlingWithOutputStreamTest.java
Patch:
@@ -34,8 +34,8 @@
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
 import io.helidon.nima.testing.junit5.webserver.SetUpServer;
-import io.helidon.nima.webserver.WebServerConfig;
 import io.helidon.nima.webserver.WebServer;
+import io.helidon.nima.webserver.WebServerConfig;
 import io.helidon.nima.webserver.http.ErrorHandler;
 import io.helidon.nima.webserver.http.HttpRouting;
 import io.helidon.nima.webserver.http.ServerRequest;
@@ -57,8 +57,8 @@
 @ServerTest
 class Http2ErrorHandlingWithOutputStreamTest {
 
-    private static final Http.HeaderName MAIN_HEADER_NAME = Http.Header.create("main-handler");
-    private static final Http.HeaderName ERROR_HEADER_NAME = Http.Header.create("error-handler");
+    private static final Http.HeaderName MAIN_HEADER_NAME = Http.HeaderNames.create("main-handler");
+    private static final Http.HeaderName ERROR_HEADER_NAME = Http.HeaderNames.create("error-handler");
     private static HttpClient httpClient;
     private final int plainPort;
     private final int tlsPort;

File: nima/tests/integration/http2/server/src/test/java/io/helidon/nima/tests/integration/http2/webserver/Http2ServerTest.java
Patch:
@@ -27,7 +27,7 @@
 import io.helidon.common.configurable.Resource;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.Http.Header;
-import io.helidon.common.http.Http.HeaderValue;
+import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.common.pki.Keys;
 import io.helidon.nima.common.tls.Tls;
 import io.helidon.nima.http2.webserver.Http2Route;
@@ -36,8 +36,8 @@
 import io.helidon.nima.testing.junit5.webserver.SetUpServer;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
-import io.helidon.nima.webserver.WebServerConfig;
 import io.helidon.nima.webserver.WebServer;
+import io.helidon.nima.webserver.WebServerConfig;
 import io.helidon.nima.webserver.http.HttpRouting;
 import io.helidon.nima.webserver.http.ServerRequest;
 import io.helidon.nima.webserver.http.ServerResponse;
@@ -53,7 +53,7 @@ class Http2ServerTest {
     public static final String MESSAGE = "Hello World!";
     private static final String TEST_HEADER_NAME = "custom_header";
     private static final String TEST_HEADER_VALUE = "as!fd";
-    private static final HeaderValue TEST_HEADER = Header.create(Header.create(TEST_HEADER_NAME), TEST_HEADER_VALUE);
+    private static final Header TEST_HEADER = Http.Headers.create(HeaderNames.create(TEST_HEADER_NAME), TEST_HEADER_VALUE);
     private final int plainPort;
     private final int tlsPort;
     private final Http1Client http1Client;

File: nima/tests/integration/sse/server/src/test/java/io/helidon/nima/tests/integration/sse/webserver/SseClientTest.java
Patch:
@@ -34,7 +34,7 @@
 import jakarta.json.JsonObject;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.http.Http.HeaderValues.ACCEPT_EVENT_STREAM;
+import static io.helidon.common.http.Http.Headers.ACCEPT_EVENT_STREAM;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.MatcherAssert.assertThat;

File: nima/tests/integration/sse/server/src/test/java/io/helidon/nima/tests/integration/sse/webserver/SseServerMediaTest.java
Patch:
@@ -44,7 +44,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.http.Http.HeaderValues.ACCEPT_EVENT_STREAM;
+import static io.helidon.common.http.Http.Headers.ACCEPT_EVENT_STREAM;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 

File: nima/tests/integration/sse/server/src/test/java/io/helidon/nima/tests/integration/sse/webserver/SseServerTest.java
Patch:
@@ -22,10 +22,11 @@
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
 import io.helidon.nima.webserver.http.HttpRules;
+
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.http.Http.HeaderValues.ACCEPT_EVENT_STREAM;
-import static io.helidon.common.http.Http.HeaderValues.ACCEPT_JSON;
+import static io.helidon.common.http.Http.Headers.ACCEPT_EVENT_STREAM;
+import static io.helidon.common.http.Http.Headers.ACCEPT_JSON;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/BadRequestTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.helidon.common.http.ClientResponseHeaders;
 import io.helidon.common.http.DirectHandler;
 import io.helidon.common.http.Http;
-import io.helidon.common.http.Http.Header;
+import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.common.http.ServerResponseHeaders;
 import io.helidon.common.testing.http.junit5.SocketHttpClient;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
@@ -44,7 +44,7 @@
 class BadRequestTest {
     public static final String CUSTOM_REASON_PHRASE = "Custom-bad-request";
     public static final String CUSTOM_ENTITY = "There we go";
-    private static final Http.HeaderValue LOCATION_ERROR_PAGE = Header.create(Header.LOCATION, "/errorPage");
+    private static final Http.Header LOCATION_ERROR_PAGE = Http.Headers.create(Http.HeaderNames.LOCATION, "/errorPage");
 
     private final Http1Client client;
     private final SocketHttpClient socketClient;
@@ -153,7 +153,7 @@ private static DirectHandler.TransportResponse badRequestHandler(DirectHandler.T
         if (request.path().equals("/redirect")) {
             return DirectHandler.TransportResponse.builder()
                     .status(Http.Status.TEMPORARY_REDIRECT_307)
-                    .header(Header.LOCATION, "/errorPage")
+                    .header(HeaderNames.LOCATION, "/errorPage")
                     .build();
         }
         return DirectHandler.TransportResponse.builder()

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ConfiguredLimitsTest.java
Patch:
@@ -17,8 +17,8 @@
 package io.helidon.nima.tests.integration.server;
 
 import io.helidon.common.http.Http;
-import io.helidon.common.http.Http.Header;
 import io.helidon.common.http.Http.HeaderName;
+import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.common.http.ServerRequestHeaders;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
@@ -48,7 +48,7 @@
  */
 @ServerTest
 class ConfiguredLimitsTest {
-    private static final HeaderName CUSTOM_HEADER = Header.create("X_HEADER");
+    private static final HeaderName CUSTOM_HEADER = HeaderNames.create("X_HEADER");
 
     private final Http1Client client;
 
@@ -129,7 +129,7 @@ void testHeader(int size, boolean success) {
         String headerValue = "m".repeat(size);
 
         try (Http1ClientResponse response = client.get("any")
-                .header(Header.create(CUSTOM_HEADER, headerValue))
+                .header(Http.Headers.create(CUSTOM_HEADER, headerValue))
                 .request()) {
             if (success) {
                 assertThat("Header of size " + size + " should have passed",

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ContentEncodingContextTest.java
Patch:
@@ -112,7 +112,7 @@ public ContentDecoder decoder(String encodingId) throws NoSuchElementException {
 
         @Override
         public ContentEncoder encoder(Headers headers) {
-            if (headers.contains(Http.Header.ACCEPT_ENCODING)) {
+            if (headers.contains(Http.HeaderNames.ACCEPT_ENCODING)) {
                 ACCEPT_ENCODING_COUNT++;
             } else {
                 NO_ACCEPT_ENCODING_COUNT++;

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ContentEncodingDisabledNoValidationTest.java
Patch:
@@ -62,7 +62,7 @@ static void server(WebServerConfig.Builder server) {
     @Test
     void testContentEncodingHeader() {
         try (Http1ClientResponse response = client().method(Http.Method.POST)
-                .header(Http.Header.CONTENT_ENCODING, "data")
+                .header(Http.HeaderNames.CONTENT_ENCODING, "data")
                 .submit("any")) {
             assertThat(response.status(), is(Http.Status.OK_200));
             assertThat(response.as(String.class), is("response"));

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ContentEncodingDisabledTest.java
Patch:
@@ -61,7 +61,7 @@ static void server(WebServerConfig.Builder server) {
     @Test
     void testContentEncodingHeader() {
         try (Http1ClientResponse response = client().method(Http.Method.POST)
-                .header(Http.Header.CONTENT_ENCODING, "data")
+                .header(Http.HeaderNames.CONTENT_ENCODING, "data")
                 .submit("any")) {
             assertThat(response.status(), is(Http.Status.BAD_REQUEST_400));
             assertThat(response.as(String.class), is("Content-Encoding header present when content encoding is disabled"));

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ErrorHandlingWithOutputStreamTest.java
Patch:
@@ -39,8 +39,8 @@
 @ServerTest
 class ErrorHandlingWithOutputStreamTest {
 
-    private static final Http.HeaderName MAIN_HEADER_NAME = Http.Header.create("main-handler");
-    private static final Http.HeaderName ERROR_HEADER_NAME = Http.Header.create("error-handler");
+    private static final Http.HeaderName MAIN_HEADER_NAME = Http.HeaderNames.create("main-handler");
+    private static final Http.HeaderName ERROR_HEADER_NAME = Http.HeaderNames.create("error-handler");
 
     private final Http1Client client;
 

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/MultiPortTest.java
Patch:
@@ -17,7 +17,6 @@
 package io.helidon.nima.tests.integration.server;
 
 import io.helidon.common.http.Http;
-import io.helidon.common.http.Http.Header;
 import io.helidon.nima.webclient.api.HttpClientResponse;
 import io.helidon.nima.webclient.api.WebClient;
 import io.helidon.nima.webserver.WebServer;
@@ -150,7 +149,7 @@ void compositeRedirectServer() {
                     listener.routing(routing -> routing
                                               .any((req, res) -> {
                                                   res.status(Http.Status.MOVED_PERMANENTLY_301)
-                                                          .header(Header.LOCATION,
+                                                          .header(Http.HeaderNames.LOCATION,
                                                                   String.format("http://%s:%s%s",
                                                                                 host(req.authority()),
                                                                                 server.port(),
@@ -167,7 +166,7 @@ void compositeRedirectServer() {
                 .request()) {
             assertThat(response.status(), is(Http.Status.MOVED_PERMANENTLY_301));
             assertThat(response.headers(),
-                       hasHeader(Header.create(Header.LOCATION, "http://localhost:" + server.port() + "/foo")));
+                       hasHeader(Http.Headers.create(Http.HeaderNames.LOCATION, "http://localhost:" + server.port() + "/foo")));
         }
     }
 

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ReroutingAndNextingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,6 @@
 
 import io.helidon.common.http.Http;
 import io.helidon.common.http.Http.Header;
-import io.helidon.common.http.Http.HeaderValue;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
 import io.helidon.nima.webclient.http1.Http1Client;
@@ -32,7 +31,7 @@
 
 @ServerTest
 class ReroutingAndNextingTest {
-    private static final HeaderValue NEXTED_HEADER = Header.create(Header.create("NEXTED"), "yes");
+    private static final Header NEXTED_HEADER = Http.Headers.create("NEXTED", "yes");
 
     private final Http1Client client;
 

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/UriEncodingTest.java
Patch:
@@ -51,7 +51,7 @@ void testEncodedUrl() {
         String s = socketHttpClient.sendAndReceive(Http.Method.GET, "/f%6F%6F", null);
         assertThat(SocketHttpClient.entityFromResponse(s, true), is("It works!"));
         ClientResponseHeaders headers = SocketHttpClient.headersFromResponse(s);
-        assertThat(headers, hasHeader(Http.HeaderValues.CONNECTION_KEEP_ALIVE));
+        assertThat(headers, hasHeader(Http.Headers.CONNECTION_KEEP_ALIVE));
     }
 
     /**
@@ -62,6 +62,6 @@ void testEncodedUrlParams() {
         String s = socketHttpClient.sendAndReceive(Http.Method.GET, "/f%6F%6F/b%61%72", null);
         assertThat(SocketHttpClient.entityFromResponse(s, true), is("bar"));
         ClientResponseHeaders headers = SocketHttpClient.headersFromResponse(s);
-        assertThat(headers, hasHeader(Http.HeaderValues.CONNECTION_KEEP_ALIVE));
+        assertThat(headers, hasHeader(Http.Headers.CONNECTION_KEEP_ALIVE));
     }
 }

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/api/ClientRequest.java
Patch:
@@ -100,7 +100,7 @@ default T path(String uri) {
      * @param header header to set
      * @return updated request
      */
-    T header(Http.HeaderValue header);
+    T header(Http.Header header);
 
     /**
      * Set an HTTP header.
@@ -110,7 +110,7 @@ default T path(String uri) {
      * @return updated request
      */
     default T header(Http.HeaderName name, String... values) {
-        return header(Http.Header.create(name, true, false, values));
+        return header(Http.Headers.create(name, true, false, values));
     }
 
     /**
@@ -121,7 +121,7 @@ default T header(Http.HeaderName name, String... values) {
      * @return updated request
      */
     default T header(Http.HeaderName name, List<String> values) {
-        return header(Http.Header.create(name, values));
+        return header(Http.Headers.create(name, values));
     }
 
     /**

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/api/HttpClientConfigBlueprint.java
Patch:
@@ -112,7 +112,7 @@ interface HttpClientConfigBlueprint extends HttpConfigBaseBlueprint {
      * @return default headers
      */
     @Prototype.Singular
-    Set<Http.HeaderValue> headers();
+    Set<Http.Header> headers();
 
     /**
      * Default headers as a headers object. Creates a new instance for each call, so the returned value

File: nima/webclient/api/src/test/java/io/helidon/nima/webclient/api/HttpClientTest.java
Patch:
@@ -135,7 +135,7 @@ public FakeHttpClientRequest maxRedirects(int maxRedirects) {
         }
 
         @Override
-        public FakeHttpClientRequest header(Http.HeaderValue header) {
+        public FakeHttpClientRequest header(Http.Header header) {
             return this;
         }
 

File: nima/webclient/http1/src/main/java/io/helidon/nima/webclient/http1/Http1CallEntityChain.java
Patch:
@@ -69,7 +69,7 @@ public WebClientServiceResponse doProceed(ClientConnection connection,
             entityBytes = entityBytes(entity, headers);
         }
 
-        headers.set(Http.Header.create(Http.Header.CONTENT_LENGTH, entityBytes.length));
+        headers.set(Http.Headers.create(Http.HeaderNames.CONTENT_LENGTH, entityBytes.length));
 
         writeHeaders(headers, writeBuffer, protocolConfig().validateHeaders());
         // we have completed writing the headers

File: nima/webclient/security/src/main/java/io/helidon/nima/webclient/security/WebClientSecurity.java
Patch:
@@ -185,7 +185,7 @@ private WebClientServiceResponse processResponse(WebClientServiceRequest request
                 }
 
                 //replace existing
-                Http.HeaderName headerName = Http.Header.create(entry.getKey());
+                Http.HeaderName headerName = Http.HeaderNames.create(entry.getKey());
                 clientHeaders.set(headerName, entry.getValue().toArray(new String[0]));
             }
             span.end();

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/HeaderLogEntry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package io.helidon.nima.webserver.accesslog;
 
 import java.util.List;
@@ -81,7 +82,7 @@ public static final class Builder extends AbstractLogEntry.Builder<HeaderLogEntr
         private final HeaderName headerName;
 
         private Builder(String headerName) {
-            this.headerName = Http.Header.create(headerName);
+            this.headerName = Http.HeaderNames.create(headerName);
         }
 
         /**

File: nima/webserver/access-log/src/test/java/io/helidon/nima/webserver/accesslog/AccessLogFeatureTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 
 import io.helidon.common.context.Context;
 import io.helidon.common.http.Http;
-import io.helidon.common.http.Http.Header;
+import io.helidon.common.http.Http.HeaderNames;
 import io.helidon.common.http.HttpPrologue;
 import io.helidon.common.http.ServerRequestHeaders;
 import io.helidon.common.http.WritableHeaders;
@@ -57,7 +57,7 @@ class AccessLogFeatureTest {
     private static final int STATUS_CODE = Http.Status.I_AM_A_TEAPOT_418.code();
     private static final String CONTENT_LENGTH = "0";
     private static final long TIME_TAKEN_MICROS = 1140000;
-    private static final Http.HeaderValue REFERER_HEADER = Header.create(Header.REFERER, "first", "second");
+    private static final Http.Header REFERER_HEADER = Http.Headers.create(HeaderNames.REFERER, "first", "second");
 
     @Test
     void testHelidonFormat() {

File: nima/webserver/static-content/src/main/java/io/helidon/nima/webserver/staticcontent/CachedHandlerRedirect.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -41,7 +41,7 @@ public boolean handle(LruCache<String, CachedHandler> cache,
         }
 
         response.status(Http.Status.MOVED_PERMANENTLY_301);
-        response.headers().set(Http.Header.LOCATION, locationWithQuery);
+        response.headers().set(Http.HeaderNames.LOCATION, locationWithQuery);
         response.send();
         return true;
     }

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ListenerConfigBlueprint.java
Patch:
@@ -132,8 +132,8 @@ interface ListenerConfigBlueprint {
 
     /**
      * Maximal number of bytes an entity may have.
-     * If {@link io.helidon.common.http.Http.Header#CONTENT_LENGTH} is used, this is checked immediately,
-     * if {@link io.helidon.common.http.Http.HeaderValues#TRANSFER_ENCODING_CHUNKED} is used, we will fail when the
+     * If {@link io.helidon.common.http.Http.HeaderNames#CONTENT_LENGTH} is used, this is checked immediately,
+     * if {@link io.helidon.common.http.Http.Headers#TRANSFER_ENCODING_CHUNKED} is used, we will fail when the
      * number of bytes read would exceed the max payload size.
      * Defaults to unlimited ({@code -1}).
      *

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http/DirectHandlers.java
Patch:
@@ -89,7 +89,7 @@ public void handle(RequestException httpException, ServerResponse res, boolean k
         response.headers()
                 .forEach(res::header);
         if (!keepAlive) {
-            res.header(Http.HeaderValues.CONNECTION_CLOSE);
+            res.header(Http.Headers.CONNECTION_CLOSE);
         }
 
         if (res.isSent()) {

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http/ErrorHandlers.java
Patch:
@@ -157,7 +157,7 @@ private void handleRequestException(ConnectionContext ctx,
         boolean keepAlive = e.keepAlive();
         if (keepAlive && !request.content().consumed()) {
             // there is a chance, that the 100-Continue was already sent! In such a case, we MUST consume entity
-            if (request.headers().contains(Http.HeaderValues.EXPECT_100) && !request.continueSent()) {
+            if (request.headers().contains(Http.Headers.EXPECT_100) && !request.continueSent()) {
                 // No content is coming, reset connection
                 request.reset();
             } else {

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1ServerRequest.java
Patch:
@@ -172,11 +172,11 @@ public PeerInfo localPeer() {
 
     @Override
     public String authority() {
-        return headers.get(Http.Header.HOST).value();
+        return headers.get(Http.HeaderNames.HOST).value();
     }
 
     @Override
-    public void header(Http.HeaderValue header) {
+    public void header(Http.Header header) {
         if (writable == null) {
             writable = WritableHeaders.create(headers);
         }

File: openapi/src/main/java/io/helidon/openapi/OpenApiFeature.java
Patch:
@@ -390,7 +390,7 @@ private Optional<MediaType> chooseResponseMediaType(ServerRequest req) {
         ServerRequestHeaders headersToCheck = req.headers();
         if (headersToCheck.acceptedTypes().isEmpty()) {
             WritableHeaders<?> writableHeaders = WritableHeaders.create(headersToCheck);
-            writableHeaders.add(Http.Header.ACCEPT, DEFAULT_RESPONSE_MEDIA_TYPE.toString());
+            writableHeaders.add(Http.HeaderNames.ACCEPT, DEFAULT_RESPONSE_MEDIA_TYPE.toString());
             headersToCheck = ServerRequestHeaders.create(writableHeaders);
         }
         return headersToCheck

File: openapi/src/main/java/io/helidon/openapi/OpenApiUiBase.java
Patch:
@@ -139,7 +139,7 @@ protected Map<String, String> options() {
     protected boolean sendStaticText(ServerRequest request, ServerResponse response, HttpMediaType mediaType) {
         try {
             response
-                    .header(Http.Header.CONTENT_TYPE, mediaType.toString())
+                    .header(Http.HeaderNames.CONTENT_TYPE, mediaType.toString())
                     .send(prepareDocument(request.query(), mediaType));
         } catch (IOException e) {
             LOGGER.log(System.Logger.Level.WARNING, "Error formatting OpenAPI output as " + mediaType, e);

File: security/integration/nima/src/main/java/io/helidon/security/integration/nima/SecurityHandler.java
Patch:
@@ -619,7 +619,7 @@ private AtxResult processAuthentication(ServerResponse res,
             AuthenticationResponse response = clientBuilder.explicitProvider(explicitAuthenticator.orElse(null)).submit();
             // copy headers to be returned with the current response
             response.responseHeaders()
-                    .forEach((key, value) -> res.headers().set(Http.Header.create(Http.Header.create(key), value)));
+                    .forEach((key, value) -> res.headers().set(Http.Headers.create(key, value)));
 
             switch (response.status()) {
             case SUCCESS:
@@ -671,7 +671,7 @@ private boolean atnAbstainFailure(ServerResponse res, AuthenticationResponse res
         abortRequest(res,
                      response,
                      Http.Status.UNAUTHORIZED_401.code(),
-                     Map.of(Http.Header.WWW_AUTHENTICATE,
+                     Map.of(Http.HeaderNames.WWW_AUTHENTICATE,
                             List.of("Basic realm=\"Security Realm\"")));
         return true;
     }
@@ -705,7 +705,7 @@ private void abortRequest(ServerResponse res,
         } else {
             Map<Http.HeaderName, List<String>> tmpHeaders = new HashMap<>();
             response.responseHeaders()
-                    .forEach((key, value) -> tmpHeaders.put(Http.Header.create(key), value));
+                    .forEach((key, value) -> tmpHeaders.put(Http.HeaderNames.create(key), value));
             responseHeaders = tmpHeaders;
         }
 

File: security/integration/nima/src/test/java/io/helidon/security/integration/nima/WebSecurityFromConfigTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.config.Config;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpServer;
@@ -59,7 +59,7 @@ public static void setup(WebServerConfig.Builder serverBuilder) {
                 .get("/*", (req, res) -> {
                     Optional<SecurityContext> securityContext = Contexts.context()
                             .flatMap(ctx -> ctx.get(SecurityContext.class));
-                    res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                    res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                     res.send("Hello, you are: \n" + securityContext
                             .map(ctx -> ctx.user().orElse(SecurityContext.ANONYMOUS).toString())
                             .orElse("Security context is null"));

File: security/integration/nima/src/test/java/io/helidon/security/integration/nima/WebSecurityProgrammaticTest.java
Patch:
@@ -22,7 +22,7 @@
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.common.http.Http;
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.HttpMediaTypes;
 import io.helidon.config.Config;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpServer;
@@ -86,7 +86,7 @@ public static void setup(WebServerConfig.Builder serverBuilder) {
                         .get("/{*}", (req, res) -> {
                             Optional<SecurityContext> securityContext = Contexts.context()
                                     .flatMap(it -> it.get(SecurityContext.class));
-                            res.headers().contentType(HttpMediaType.PLAINTEXT_UTF_8);
+                            res.headers().contentType(HttpMediaTypes.PLAINTEXT_UTF_8);
                             res.send("Hello, you are: \n" + securityContext
                                     .map(ctx -> ctx.user().orElse(SecurityContext.ANONYMOUS).toString())
                                     .orElse("Security context is null"));

File: security/providers/idcs-mapper/src/main/java/io/helidon/security/providers/idcs/mapper/IdcsMtRoleMapperProvider.java
Patch:
@@ -257,7 +257,7 @@ protected List<? extends Grant> getGrantsFromServer(String idcsTenantId,
                 .post()
                 .uri(multitenantEndpoints.assertEndpoint(idcsTenantId))
                 .headers(it -> {
-                    it.add(Http.Header.AUTHORIZATION, "Bearer " + appToken);
+                    it.add(Http.HeaderNames.AUTHORIZATION, "Bearer " + appToken);
                 });
 
         return processRoleRequest(post, requestBuilder.build(), subjectName);

File: security/providers/idcs-mapper/src/main/java/io/helidon/security/providers/idcs/mapper/IdcsRoleMapperProvider.java
Patch:
@@ -196,7 +196,7 @@ private List<? extends Grant> obtainGrantsFromServer(String subjectName, String
                 .post()
                 .uri(asserterUri)
                 .headers(it -> {
-                    it.add(Http.Header.AUTHORIZATION, "Bearer " + appToken);
+                    it.add(Http.HeaderNames.AUTHORIZATION, "Bearer " + appToken);
                 });
 
         return processRoleRequest(request, requestBuilder.build(), subjectName);

File: security/providers/idcs-mapper/src/main/java/io/helidon/security/providers/idcs/mapper/IdcsRoleMapperProviderBase.java
Patch:
@@ -450,7 +450,7 @@ private AppTokenData fromServer(RoleMapTracing tracing) {
 
             HttpClientRequest request = webClient.post()
                     .uri(tokenEndpointUri)
-                    .header(Http.HeaderValues.ACCEPT_JSON);
+                    .header(Http.Headers.ACCEPT_JSON);
 
             try (HttpClientResponse response = request.submit(params)) {
                 if (response.status().family() == Http.Status.Family.SUCCESSFUL) {

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/IdcsSupport.java
Patch:
@@ -50,7 +50,7 @@ static JwkKeys signJwk(WebClient appWebClient,
 
         try (HttpClientResponse response = appWebClient.post()
                 .uri(tokenEndpointUri)
-                .header(Http.HeaderValues.ACCEPT_JSON)
+                .header(Http.Headers.ACCEPT_JSON)
                 .submit(form)) {
 
             if (response.status().family() == Http.Status.Family.SUCCESSFUL) {
@@ -61,7 +61,7 @@ static JwkKeys signJwk(WebClient appWebClient,
                 // get the jwk from server
                 JsonObject jwkJson = generalClient.get()
                         .uri(signJwkUri)
-                        .header(Http.Header.AUTHORIZATION, "Bearer " + accessToken)
+                        .header(Http.HeaderNames.AUTHORIZATION, "Bearer " + accessToken)
                         .requestEntity(JsonObject.class);
 
                 return JwkKeys.create(jwkJson);

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/Tenant.java
Patch:
@@ -126,7 +126,7 @@ public static Tenant create(OidcConfig oidcConfig, TenantConfig tenantConfig) {
             //This is workaround for missing Níma client security. This adds Authorization header to be used in every request.
             byte[] byteArray = (tenantConfig.clientId() + ":" + tenantConfig.clientSecret()).getBytes(StandardCharsets.UTF_8);
             String base64 = Base64.getEncoder().encodeToString(byteArray);
-            webClientBuilder.addHeader(Http.Header.AUTHORIZATION, "Basic " + base64);
+            webClientBuilder.addHeader(Http.HeaderNames.AUTHORIZATION, "Basic " + base64);
         }
 
         WebClient appWebClient = webClientBuilder.build();

File: tests/functional/request-scope/src/main/java/io/helidon/tests/functional/requestscope/TenantContext.java
Patch:
@@ -24,7 +24,7 @@
 
 @RequestScoped
 public class TenantContext {
-    private static final Http.HeaderName TENANT_ID = Http.Header.create("x-tenant-id");
+    private static final Http.HeaderName TENANT_ID = Http.HeaderNames.create("x-tenant-id");
 
     @Context
     private ServerRequest request;

File: tests/integration/dbclient/app/src/main/java/io/helidon/tests/integration/dbclient/app/tools/ExitService.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.tests.integration.dbclient.app.tools;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.media.type.MediaTypes;
 import io.helidon.nima.webserver.WebServer;
 import io.helidon.nima.webserver.http.HttpRules;
 import io.helidon.nima.webserver.http.HttpService;
@@ -44,7 +44,7 @@ public void setServer(WebServer server) {
     }
 
     private void exit(ServerRequest request, ServerResponse response) {
-        response.headers().contentType(HttpMediaType.TEXT_PLAIN);
+        response.headers().contentType(MediaTypes.TEXT_PLAIN);
         response.send("Testing web application shutting down.");
         server.stop();
     }

File: tests/integration/harness/src/main/java/io/helidon/tests/integration/harness/TestClient.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 import java.util.Objects;
 
-import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.media.type.MediaTypes;
 import io.helidon.nima.http.media.jsonp.JsonpSupport;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientRequest;
@@ -154,7 +154,7 @@ public JsonValue callServiceAndGetData(String service, String method) {
      */
     public JsonObject callServiceAndGetRawData(String service, String method, Map<String, String> params) {
         Http1ClientRequest rb = clientGetBuilderWithPath(service, method);
-        rb.headers().accept(HttpMediaType.APPLICATION_JSON);
+        rb.headers().accept(MediaTypes.APPLICATION_JSON);
         return callService(rb, params);
     }
 

File: tests/integration/mp-gh-3246/src/test/java/io/helidon/tests/integration/gh3246/Gh3246Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -86,7 +86,7 @@ void testSecuredCallout() {
         String response = webTarget.path("/test/secured")
                 .queryParam("port", port)
                 .request()
-                .header(Http.Header.AUTHORIZATION.defaultCase(), "Bearer " + tokenContent)
+                .header(Http.HeaderNames.AUTHORIZATION.defaultCase(), "Bearer " + tokenContent)
                 .get(String.class);
 
         assertThat(response, is("hello"));

File: tests/integration/native-image/nima-1/src/main/java/io/helidon/tests/integration/nativeimage/nima1/WebClientService.java
Patch:
@@ -48,7 +48,7 @@ public WebClientService(Config config, MockZipkinService zipkinService) {
         this.context = "http://localhost:" + config.get("port").asInt().orElse(7076);
         client = WebClient.builder()
                 .baseUri(context)
-                .addHeader(Http.Header.ACCEPT, MediaTypes.APPLICATION_JSON.text())
+                .addHeader(Http.HeaderNames.ACCEPT, MediaTypes.APPLICATION_JSON.text())
                 .config(config.get("client"))
                 .build();
     }
@@ -63,12 +63,12 @@ public void routing(HttpRules rules) {
 
     private void redirect(ServerRequest request,
                           ServerResponse response) {
-        response.headers().add(Http.Header.LOCATION, context + "/wc/endpoint");
+        response.headers().add(Http.HeaderNames.LOCATION, context + "/wc/endpoint");
         response.status(Http.Status.MOVED_PERMANENTLY_301).send();
     }
 
     private void redirectInfinite(ServerRequest serverRequest, ServerResponse response) {
-        response.headers().add(Http.Header.LOCATION, context + "/wc/redirect/infinite");
+        response.headers().add(Http.HeaderNames.LOCATION, context + "/wc/redirect/infinite");
         response.status(Http.Status.MOVED_PERMANENTLY_301).send();
     }
 

File: tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/FormTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.http.HttpMediaType.TEXT_PLAIN;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.startsWith;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -66,7 +65,7 @@ public void testHelloWorld() {
     @Test
     public void testSpecificContentType() {
         try (Http1ClientResponse res = client.post("/form")
-                .contentType(TEXT_PLAIN)
+                .contentType(MediaTypes.TEXT_PLAIN)
                 .submit(TEST_FORM)) {
             assertThat(res.as(String.class), is("Hi David Tester"));
         }

File: tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/MutualTlsTest.java
Patch:
@@ -188,7 +188,7 @@ private static void mTlsRouting(HttpRouting.Builder routing) {
                     .orElse("Unknown CN");
 
             // close to avoid re-using cached connections on the client side
-            res.header(Http.HeaderValues.CONNECTION_CLOSE);
+            res.header(Http.Headers.CONNECTION_CLOSE);
             res.send("Hello " + cn + "!");
         });
     }

File: nima/http/media/media/src/main/java/io/helidon/nima/http/media/ReadableEntityBase.java
Patch:
@@ -219,7 +219,7 @@ public int read() throws IOException {
         }
 
         @Override
-        public int read(byte[] b, int off, int len) throws IOException {
+        public int read(byte[] b, int off, int len) {
             if (finished) {
                 return -1;
             }

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/Http2ServerResponse.java
Patch:
@@ -251,7 +251,8 @@ private void write(BufferData buffer) throws IOException {
                 throw new IOException("Stream already closed");
             }
             if (firstByte && firstBuffer == null) {
-                firstBuffer = buffer;
+                // if somebody re-uses the byte buffer sent to us, we must copy it
+                firstBuffer = buffer.copy();
                 return;
             }
 

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/api/HttpClientConfigBlueprint.java
Patch:
@@ -75,7 +75,7 @@ interface HttpClientConfigBlueprint extends HttpConfigBaseBlueprint {
      * the one configured on this type's builder will win:
      * <ul>
      *     <li>{@link #readTimeout()}</li>
-     *     <li>{@link #connectTimeout()} eout(java.time.Duration)} (Duration)}</li>
+     *     <li>{@link #connectTimeout()}</li>
      * </ul>
      *
      * @return socket options

File: nima/common/tls/src/main/java/io/helidon/nima/common/tls/TrustAllManagerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@
 /**
  * A trust manager factory that trusts all peers.
  */
-public class TrustAllManagerFactory extends TrustManagerFactory {
+class TrustAllManagerFactory extends TrustManagerFactory {
     private static final TrustAllManagerFactorySpi SPI = new TrustAllManagerFactorySpi();
     private static final Provider PROVIDER = new Provider("helidon",
                                                           "0.0",
@@ -43,7 +43,7 @@ public class TrustAllManagerFactory extends TrustManagerFactory {
     /**
      * Create a new instance.
      */
-    public TrustAllManagerFactory() {
+    TrustAllManagerFactory() {
         super(SPI, PROVIDER, "insecure-trust-all");
     }
 

File: nima/http2/http2/src/main/java/io/helidon/nima/http2/Http2ConnectionWriter.java
Patch:
@@ -53,7 +53,7 @@ public Http2ConnectionWriter(SocketContext ctx, DataWriter writer, List<Http2Fra
 
         // initial size is based on our settings, then updated with client settings
         this.outboundDynamicTable = Http2Headers.DynamicTable.create(Http2Setting.HEADER_TABLE_SIZE.defaultValue());
-        this.responseHuffman = new Http2HuffmanEncoder();
+        this.responseHuffman = Http2HuffmanEncoder.create();
     }
 
     @Override

File: nima/http2/http2/src/test/java/io/helidon/nima/http2/Http2HeadersTest.java
Patch:
@@ -171,7 +171,7 @@ void testC_4_toBytes() {
         http2Headers.path("/");
         http2Headers.authority("www.example.com");
 
-        Http2HuffmanEncoder huffman = new Http2HuffmanEncoder();
+        Http2HuffmanEncoder huffman = Http2HuffmanEncoder.create();
 
         BufferData buffer = BufferData.growing(32);
         http2Headers.write(dynamicTable, huffman, buffer);
@@ -262,7 +262,7 @@ private Http2Headers headers(String hexEncoded, DynamicTable dynamicTable) {
 
         return Http2Headers.create(stream,
                                    dynamicTable,
-                                   new Http2HuffmanDecoder(),
+                                   Http2HuffmanDecoder.create(),
                                    new Http2FrameData(header, data));
     }
 }
\ No newline at end of file

File: nima/http2/http2/src/test/java/io/helidon/nima/http2/Http2HuffmanTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,8 +26,8 @@
 class Http2HuffmanTest {
     @Test
     void testEncodeDecode() {
-        Http2HuffmanEncoder enc = new Http2HuffmanEncoder();
-        Http2HuffmanDecoder dec = new Http2HuffmanDecoder();
+        Http2HuffmanEncoder enc = Http2HuffmanEncoder.create();
+        Http2HuffmanDecoder dec = Http2HuffmanDecoder.create();
 
         String value = "my very nice long value";
         BufferData result = BufferData.growing(32);

File: nima/http2/webclient/src/main/java/io/helidon/nima/http2/webclient/Http2ClientStream.java
Patch:
@@ -292,7 +292,7 @@ private Http2FrameData readOne() {
             case HEADERS, CONTINUATION:
                 continuationData.add(frameData);
                 if (endOfHeaders) {
-                    var requestHuffman = new Http2HuffmanDecoder();
+                    var requestHuffman = Http2HuffmanDecoder.create();
                     Http2Headers http2Headers = Http2Headers.create(this,
                                                                     connection.getInboundDynamicTable(),
                                                                     requestHuffman,

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/Http2Connection.java
Patch:
@@ -125,7 +125,7 @@ public class Http2Connection implements ServerConnection, InterruptableTask<Void
         this.subProviders = subProviders;
         this.requestDynamicTable = Http2Headers.DynamicTable.create(
                 serverSettings.value(Http2Setting.HEADER_TABLE_SIZE));
-        this.requestHuffman = new Http2HuffmanDecoder();
+        this.requestHuffman = Http2HuffmanDecoder.create();
         this.routing = ctx.router().routing(HttpRouting.class, HttpRouting.empty());
         this.reader = ctx.dataReader();
         this.sendErrorDetails = http2Config.sendErrorDetails();

File: nima/testing/junit5/webserver/src/main/java/io/helidon/nima/testing/junit5/webserver/DirectClientConnection.java
Patch:
@@ -19,6 +19,7 @@
 import java.time.Duration;
 import java.util.List;
 import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.Semaphore;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import io.helidon.common.buffers.BufferData;
@@ -152,7 +153,7 @@ private void startServer() {
         serverContext.executor()
                 .submit(() -> {
                     try {
-                        connection.handle();
+                        connection.handle(new Semaphore(1024));
                     } catch (InterruptedException e) {
                         e.printStackTrace();
                     }

File: nima/testing/junit5/webserver/src/main/java/io/helidon/nima/testing/junit5/webserver/Http1DirectJunitExtension.java
Patch:
@@ -158,7 +158,7 @@ public void handle(Method method, String socketName, HttpRouting.Builder value)
             if (clients.putIfAbsent(socketName, new DirectClient(routing)) != null) {
                 throw new IllegalStateException("Method "
                                                         + method
-                                                        + " defines WebSocket routing for socket \""
+                                                        + " defines HTTP routing for socket \""
                                                         + socketName
                                                         + "\""
                                                         + " that is already defined for class \""
@@ -169,7 +169,7 @@ public void handle(Method method, String socketName, HttpRouting.Builder value)
             if (webClients.putIfAbsent(socketName, new DirectWebClient(routing)) != null) {
                 throw new IllegalStateException("Method "
                                                         + method
-                                                        + " defines WebSocket routing for socket \""
+                                                        + " defines HTTP routing for socket \""
                                                         + socketName
                                                         + "\""
                                                         + " that is already defined for class \""

File: nima/tests/integration/webserver/access-log/src/test/java/io/helidon/nima/tests/integration/server/accesslog/AccessLogTest.java
Patch:
@@ -88,8 +88,8 @@ void testRequestsAndValidateAccessLog() {
         response = client.get("/wrong").request();
         assertThat(response.status(), is(Http.Status.NOT_FOUND_404));
 
-        String socketResponse = socketClient.sendAndReceive("/access",
-                                                            Http.Method.GET,
+        String socketResponse = socketClient.sendAndReceive(Http.Method.GET,
+                                                            "/access",
                                                             null,
                                                             List.of("Content-Length: 47a"));
         assertThat(socketResponse, startsWith("HTTP/1.1 " + Http.Status.BAD_REQUEST_400.text()));

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/UriEncodingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ static void routing(HttpRules rules) {
      */
     @Test
     void testEncodedUrl() {
-        String s = socketHttpClient.sendAndReceive("/f%6F%6F", Http.Method.GET, null);
+        String s = socketHttpClient.sendAndReceive(Http.Method.GET, "/f%6F%6F", null);
         assertThat(SocketHttpClient.entityFromResponse(s, true), is("It works!"));
         ClientResponseHeaders headers = SocketHttpClient.headersFromResponse(s);
         assertThat(headers, hasHeader(Http.HeaderValues.CONNECTION_KEEP_ALIVE));
@@ -59,7 +59,7 @@ void testEncodedUrl() {
      */
     @Test
     void testEncodedUrlParams() {
-        String s = socketHttpClient.sendAndReceive("/f%6F%6F/b%61%72", Http.Method.GET, null);
+        String s = socketHttpClient.sendAndReceive(Http.Method.GET, "/f%6F%6F/b%61%72", null);
         assertThat(SocketHttpClient.entityFromResponse(s, true), is("bar"));
         ClientResponseHeaders headers = SocketHttpClient.headersFromResponse(s);
         assertThat(headers, hasHeader(Http.HeaderValues.CONNECTION_KEEP_ALIVE));

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/LoomServer.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
+import java.util.Timer;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -101,13 +102,15 @@ class LoomServer implements WebServer, Startable {
             routerBuilder.addRouting(HttpRouting.create());
         }
 
+        Timer idleConnectionTimer = new Timer("helidon-idle-connection-timer", true);
         Map<String, ServerListener> listenerMap = new HashMap<>();
         sockets.forEach((name, socketConfig) -> {
             listenerMap.put(name,
                             new ServerListener(name,
                                                socketConfig,
                                                routerBuilder.build(),
                                                context,
+                                               idleConnectionTimer,
                                                serverConfig.mediaContext().orElseGet(MediaContext::create),
                                                serverConfig.contentEncoding().orElseGet(ContentEncodingContext::create),
                                                serverConfig.directHandlers().orElseGet(DirectHandlers::create)));

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/spi/ServerConnectionSelector.java
Patch:
@@ -34,7 +34,8 @@ public interface ServerConnectionSelector {
 
     /**
      * Does this selector support current server connection.
-     * The same buffer will be sent to {@link io.helidon.nima.webserver.spi.ServerConnection#handle()}
+     * The same buffer will be sent to
+     * {@link io.helidon.nima.webserver.spi.ServerConnection#handle(java.util.concurrent.Semaphore)}
      *
      * @param data bytes (with available bytes of at least {@link #bytesToIdentifyConnection()})
      * @return support response

File: jersey/connector/src/main/java/io/helidon/jersey/connector/HelidonConnector.java
Patch:
@@ -80,7 +80,7 @@ class HelidonConnector implements Connector {
         builder.config(helidonConfig(config).orElse(Config.empty()));
 
         // proxy support
-        proxy = ProxyBuilder.createProxy(config).orElse(Proxy.noProxy());
+        proxy = ProxyBuilder.createProxy(config).orElse(Proxy.create());
 
         // possibly override config with properties
         if (properties.containsKey(CONNECT_TIMEOUT)) {

File: jersey/connector/src/test/java/io/helidon/jersey/connector/ConfigTest.java
Patch:
@@ -71,10 +71,10 @@ void testConfigPropertyOverride() {
     }
 
     @Test
-    void testConfigNoProxy() {
+    void testConfigDefaut() {
         Client client = ClientBuilder.newClient();
         HelidonConnector connector = new HelidonConnector(client, client.getConfiguration());
-        assertThat(connector.proxy(), is(Proxy.noProxy()));
+        assertThat(connector.proxy(), is(Proxy.create()));
     }
 
     @Test

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/api/HttpClientConfigSupport.java
Patch:
@@ -133,7 +133,7 @@ public void decorate(HttpClientConfig.BuilderBase<?, ?> target) {
             }
 
             if (target.proxy().isEmpty()) {
-                target.proxy(Proxy.noProxy());
+                target.proxy(Proxy.create());
             }
         }
     }

File: nima/webclient/http1/src/main/java/io/helidon/nima/webclient/http1/Http1CallChainBase.java
Patch:
@@ -118,7 +118,7 @@ abstract WebClientServiceResponse doProceed(ClientConnection connection,
     void prologue(BufferData nonEntityData, WebClientServiceRequest request, ClientUri uri) {
         // TODO When proxy is implemented, change default value of Http1ClientConfig.relativeUris to false
         //  and below conditional statement to:
-        //  proxy == Proxy.noProxy() || proxy.noProxyPredicate().apply(finalUri) || clientConfig.relativeUris
+        //  proxy == Proxy.create() || proxy.noProxyPredicate().apply(finalUri) || clientConfig.relativeUris
         String schemeHostPort = clientConfig.relativeUris() ? "" : uri.scheme() + "://" + uri.host() + ":" + uri.port();
         nonEntityData.writeAscii(request.method().text()
                                          + " "

File: inject/runtime/src/test/java/io/helidon/inject/runtime/InvocationTest.java
Patch:
@@ -57,8 +57,7 @@ class InvocationTest {
             .elementInfo(TypedElementInfo.builder()
                                  .elementName("test")
                                  .elementTypeKind(TypeValues.KIND_METHOD)
-                                 .typeName(TypeName.create(InvocationTest.class))
-                                 .build())
+                                 .typeName(TypeName.create(InvocationTest.class)))
             .interceptors(List.of(first.provider, second.provider))
             .build();
     ArrayList<Object[]> calls = new ArrayList<>();

File: builder/processor/src/main/java/io/helidon/builder/processor/TypeHandlerCollection.java
Patch:
@@ -97,7 +97,8 @@ Optional<String> generateFromConfig(PrototypeProperty.ConfiguredOption configure
     @Override
     TypeName argumentTypeName() {
         return TypeName.builder(collectionType)
-                .addTypeArgument(toWildcard(actualType()));
+                .addTypeArgument(toWildcard(actualType()))
+                .build();
     }
 
     @Override
@@ -262,7 +263,6 @@ private void singularSetter(PrototypeProperty.ConfiguredOption configured,
 
         List<String> lines = new ArrayList<>();
         lines.add("Objects.requireNonNull(" + singularName + ");");
-        lines.addAll(resolveBuilderLines(actualType(), singularName));
         lines.add("this." + name() + ".add(" + singularName + ");");
         lines.add("return self();");
 

File: builder/processor/src/main/java/io/helidon/builder/processor/TypeHandlerMap.java
Patch:
@@ -192,7 +192,6 @@ void setters(PrototypeProperty.ConfiguredOption configured,
             List<String> lines = new ArrayList<>();
             lines.add("Objects.requireNonNull(key);");
             lines.add("Objects.requireNonNull(" + singularName + ");");
-            lines.addAll(resolveBuilderLines(actualType(), singularName));
             lines.add("this." + name() + ".put(key, " + secondArgToPut(actualType(), singularName) + ");");
             lines.add("return self();");
             setters.add(new GeneratedMethod(

File: builder/processor/src/main/java/io/helidon/builder/processor/Types.java
Patch:
@@ -34,7 +34,7 @@ final class Types {
     static final String RUNTIME_PROTOTYPE = "io.helidon.builder.api.RuntimeType.PrototypedBy";
     static final String PROTOTYPE = "io.helidon.builder.api.Prototype.Api";
     static final String PROTOTYPE_SAME_GENERIC = "io.helidon.builder.api.Prototype.SameGeneric";
-    static final String BUILDER_INTERCEPTOR = "io.helidon.builder.api.Prototype.BuilderInterceptor";
+    static final String BUILDER_DECORATOR = "io.helidon.builder.api.Prototype.BuilderDecorator";
     static final String IMPLEMENT = "io.helidon.builder.api.Prototype.Implement";
     static final String CONFIDENTIAL = "io.helidon.builder.api.Prototype.Confidential";
     static final String REDUNDANT = "io.helidon.builder.api.Prototype.Redundant";

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/BeanBuilderInterceptor.java
Patch:
@@ -21,14 +21,14 @@
 /**
  * See {@link InterceptedBean}.
  */
-class BeanBuilderInterceptor implements Prototype.BuilderInterceptor<InterceptedBean.BuilderBase<?, ?>> {
+class BeanBuilderInterceptor implements Prototype.BuilderDecorator<InterceptedBean.BuilderBase<?, ?>> {
     private int callCount;
 
     @Override
-    public InterceptedBean.BuilderBase<?, ?> intercept(InterceptedBean.BuilderBase<?, ?> target) {
+    public void decorate(InterceptedBean.BuilderBase<?, ?> target) {
         if (callCount++ > 0) {
             throw new AssertionError();
         }
-        return target.helloMessage("Hello " + target.name());
+        target.helloMessage("Hello " + target.name().orElse("Not configured"));
     }
 }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/InterceptedBeanBlueprint.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Demonstrates interception of builders.
  */
-@Prototype.Blueprint(builderInterceptor = BeanBuilderInterceptor.class)
+@Prototype.Blueprint(decorator = BeanBuilderInterceptor.class)
 interface InterceptedBeanBlueprint {
 
     /**

File: common/configurable/src/main/java/io/helidon/common/configurable/ResourceConfigBlueprint.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Configuration of a resource.
  */
-@Prototype.Blueprint(createEmptyPublic = false, builderInterceptor = ResourceBuilderInterceptor.class)
+@Prototype.Blueprint(createEmptyPublic = false, decorator = ResourceBuilderDecorator.class)
 @Configured
 interface ResourceConfigBlueprint extends Prototype.Factory<Resource> {
     /**

File: common/key-util/src/main/java/io/helidon/common/pki/KeysBlueprint.java
Patch:
@@ -36,7 +36,7 @@
  * So if a Private key is defined both explicitly and through PEM, the explicitly defined key would be used.
  */
 @Configured
-@Prototype.Blueprint(builderInterceptor = KeysBuilderInterceptor.class)
+@Prototype.Blueprint(decorator = KeysBuilderDecorator.class)
 interface KeysBlueprint {
     /**
      * Configure keys from a keystore.

File: common/key-util/src/main/java/io/helidon/common/pki/KeysBuilderDecorator.java
Patch:
@@ -28,11 +28,11 @@
 import io.helidon.common.configurable.Resource;
 import io.helidon.common.configurable.ResourceException;
 
-class KeysBuilderInterceptor implements Prototype.BuilderInterceptor<Keys.BuilderBase<?, ?>> {
+class KeysBuilderDecorator implements Prototype.BuilderDecorator<Keys.BuilderBase<?, ?>> {
     private static final System.Logger LOGGER = System.getLogger(Keys.class.getName());
 
     @Override
-    public Keys.BuilderBase<?, ?> intercept(Keys.BuilderBase<?, ?> target) {
+    public void decorate(Keys.BuilderBase<?, ?> target) {
         try {
             target.keystore().ifPresent(keystoreConfig -> updateFromKeystore(target, keystoreConfig));
             target.pem().ifPresent(pemConfig -> updateFromPem(target, pemConfig));
@@ -42,7 +42,6 @@ class KeysBuilderInterceptor implements Prototype.BuilderInterceptor<Keys.Builde
                 target.publicKey(target.publicCert().get().getPublicKey());
             }
 
-            return target;
         } catch (ResourceException e) {
             throw new PkiException("Failed to load key configuration", e);
         }

File: common/types/src/test/java/io/helidon/common/types/TypeNameTest.java
Patch:
@@ -393,7 +393,7 @@ void builderOfType() {
 
     @Test
     void extendsTypeName() {
-        TypeName extendsName = TypeName.builder(create(Map.class)).wildcard(true);
+        TypeName extendsName = TypeName.builder(create(Map.class)).wildcard(true).build();
         assertThat(extendsName.fqName(), equalTo("? extends java.util.Map"));
         assertThat(extendsName.declaredName(), equalTo("java.util.Map"));
         assertThat(extendsName.name(), equalTo("java.util.Map"));

File: common/uri/src/main/java/io/helidon/common/uri/UriBuilderSupport.java
Patch:
@@ -22,16 +22,15 @@ final class UriBuilderSupport {
     private UriBuilderSupport() {
     }
 
-    static final class UriInfoInterceptor implements Prototype.BuilderInterceptor<UriInfo.BuilderBase<?, ?>> {
+    static final class UriInfoInterceptor implements Prototype.BuilderDecorator<UriInfo.BuilderBase<?, ?>> {
         UriInfoInterceptor() {
         }
 
         @Override
-        public UriInfo.BuilderBase<?, ?> intercept(UriInfo.BuilderBase<?, ?> target) {
+        public void decorate(UriInfo.BuilderBase<?, ?> target) {
             if (target.port() == 0) {
                 target.port(defaultPort(target.scheme()));
             }
-            return target;
         }
 
         private static int defaultPort(String scheme) {

File: common/uri/src/main/java/io/helidon/common/uri/UriInfoBlueprint.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Information about URI, that can be used to invoke a specific request over the network.
  */
-@Prototype.Blueprint(builderInterceptor = UriBuilderSupport.UriInfoInterceptor.class)
+@Prototype.Blueprint(decorator = UriBuilderSupport.UriInfoInterceptor.class)
 @Prototype.CustomMethods(UriBuilderSupport.UriInfoCustomMethods.class)
 interface UriInfoBlueprint {
 

File: inject/api/src/main/java/io/helidon/inject/api/ActivationResultBlueprint.java
Patch:
@@ -52,13 +52,15 @@ interface ActivationResultBlueprint {
      *
      * @return the starting phase
      */
+    @ConfiguredOption("INIT")
     Phase startingActivationPhase();
 
     /**
      * The activation phase that was requested at the onset of the phase transition.
      *
      * @return the target, desired, ultimate phase requested
      */
+    @ConfiguredOption("INIT")
     Phase targetActivationPhase();
 
     /**

File: inject/api/src/main/java/io/helidon/inject/api/ServiceInfoBlueprint.java
Patch:
@@ -29,7 +29,7 @@
  * @see Services
  * @see ServiceInfoCriteria
  */
-@Prototype.Blueprint(builderInterceptor = ServiceInfoBuildInterceptor.class)
+@Prototype.Blueprint(decorator = ServiceInfoBuildDecorator.class)
 @Prototype.CustomMethods(ServiceInfoBlueprint.CustomMethods.class)
 interface ServiceInfoBlueprint extends ServiceInfoBasicsBlueprint, ServiceInfoBasics {
 

File: inject/api/src/main/java/io/helidon/inject/api/ServiceInfoBuildDecorator.java
Patch:
@@ -21,12 +21,11 @@
 /**
  * Ensures that all external contracts are also treated as normal contracts, etc.
  */
-class ServiceInfoBuildInterceptor implements Prototype.BuilderInterceptor<ServiceInfo.BuilderBase<?, ?>> {
+class ServiceInfoBuildDecorator implements Prototype.BuilderDecorator<ServiceInfo.BuilderBase<?, ?>> {
 
     @Override
-    public ServiceInfo.BuilderBase<?, ?> intercept(ServiceInfo.BuilderBase<?, ?> target) {
+    public void decorate(ServiceInfo.BuilderBase<?, ?> target) {
         target.addContractsImplemented(target.externalContractsImplemented());
-        return target;
     }
 
 }

File: inject/configdriven/processor/src/main/java/io/helidon/inject/configdriven/processor/ConfigBean.java
Patch:
@@ -38,7 +38,8 @@ public static ConfigBean create(TypeInfo configBeanTypeInfo) {
             if (className.endsWith("Blueprint")) {
                 className = className.substring(0, className.length() - 9);
                 typeName = TypeName.builder(configBeanTypeInfo.typeName().genericTypeName())
-                        .className(className);
+                        .className(className)
+                        .build();
             } else {
                 throw new IllegalArgumentException("Type annotation with @Prototype.Blueprint does not"
                                                            + " end with Blueprint: " + configBeanTypeInfo.typeName());

File: inject/runtime/src/main/java/io/helidon/inject/runtime/DefaultInjectionPlans.java
Patch:
@@ -427,7 +427,8 @@ private static List<?> toEligibleInjectionRefs(InjectionPointInfo ipInfo,
         ContextualServiceQuery query = ContextualServiceQuery.builder()
                 .injectionPointInfo(ipInfo)
                 .serviceInfoCriteria(ipInfo.dependencyToServiceInfo())
-                .expected(expected);
+                .expected(expected)
+                .build();
         for (ServiceProvider<?> sp : list) {
             Collection instances = sp.list(query);
             result.addAll(instances);

File: inject/runtime/src/test/java/io/helidon/inject/runtime/DefaultInjectionServicesConfigTest.java
Patch:
@@ -28,7 +28,8 @@ class DefaultInjectionServicesConfigTest {
 
     @Test
     void testIt() {
-        InjectionServicesConfig cfg = DefaultInjectionServicesConfig.createDefaultConfigBuilder();
+        InjectionServicesConfig cfg = DefaultInjectionServicesConfig.createDefaultConfigBuilder()
+                .build();
         assertThat(cfg.providerName(), optionalValue(is("oracle")));
         assertThat(cfg.providerVersion(), optionalValue(is("1")));
     }

File: inject/tools/src/main/java/io/helidon/inject/tools/AbstractCreator.java
Patch:
@@ -284,7 +284,8 @@ ModuleInfoDescriptor createModuleInfo(ModuleInfoCreatorRequest req) {
             }
         }
 
-        return addProviderRequirementsTo(descriptorBuilder, generatedAnno);
+        return addProviderRequirementsTo(descriptorBuilder, generatedAnno)
+                .build();
     }
 
 }

File: inject/tools/src/main/java/io/helidon/inject/tools/ActivatorCreatorDefault.java
Patch:
@@ -129,7 +129,8 @@ static TypeName toModuleTypeName(ActivatorCreatorRequest req,
         String className = toModuleClassName(req.codeGen().classPrefixName());
         return TypeName.builder()
                 .packageName(packageName)
-                .className(className);
+                .className(className)
+                .build();
     }
 
     static String toModuleClassName(String modulePrefix) {

File: inject/tools/src/test/java/io/helidon/inject/tools/ModuleInfoDescriptorTest.java
Patch:
@@ -266,7 +266,7 @@ void mergeCreate() {
         IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> descriptor.mergeCreate(descriptor));
         assertThat(e.getMessage(), equalTo("can't merge with self"));
 
-        ModuleInfoDescriptor mergeCreated = descriptor.mergeCreate(ModuleInfoDescriptor.builder(descriptor));
+        ModuleInfoDescriptor mergeCreated = descriptor.mergeCreate(ModuleInfoDescriptor.builder(descriptor).build());
         assertThat(descriptor.contents(), equalTo(mergeCreated.contents()));
 
         ModuleInfoDescriptor descriptor1 = ModuleInfoDescriptor.builder()

File: integrations/oci/sdk/runtime/src/test/java/io/helidon/integrations/oci/sdk/runtime/OciAuthenticationDetailsProviderTest.java
Patch:
@@ -87,7 +87,7 @@ void testUserHomePrivateKeyPath() {
 
     @Test
     void testToNamedProfile() {
-        assertThat(OciAuthenticationDetailsProvider.toNamedProfile(null),
+        assertThat(OciAuthenticationDetailsProvider.toNamedProfile((InjectionPointInfo) null),
                    nullValue());
 
         InjectionPointInfo.Builder ipi = InjectionPointInfo.builder()

File: nima/common/tls/src/main/java/io/helidon/nima/common/tls/TlsConfigBlueprint.java
Patch:
@@ -31,7 +31,7 @@
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
 
-@Prototype.Blueprint(builderInterceptor = TlsConfigInterceptor.class)
+@Prototype.Blueprint(decorator = TlsConfigDecorator.class)
 @Configured
 interface TlsConfigBlueprint extends Prototype.Factory<Tls> {
     String DEFAULT_PROTOCOL = "TLS";

File: nima/http/media/media/src/main/java/io/helidon/nima/http/media/MediaContextBuilderDecorator.java
Patch:
@@ -18,14 +18,13 @@
 
 import io.helidon.builder.api.Prototype;
 
-class MediaContextBuilderInterceptor implements Prototype.BuilderInterceptor<MediaContextConfig.BuilderBase<?, ?>> {
+class MediaContextBuilderDecorator implements Prototype.BuilderDecorator<MediaContextConfig.BuilderBase<?, ?>> {
     @Override
-    public MediaContextConfig.BuilderBase<?, ?> intercept(MediaContextConfig.BuilderBase<?, ?> target) {
+    public void decorate(MediaContextConfig.BuilderBase<?, ?> target) {
         if (target.registerDefaults()) {
             target.addMediaSupport(StringSupport.create())
                     .addMediaSupport(PathSupport.create())
                     .addMediaSupport(FormParamsSupport.create());
         }
-        return target;
     }
 }

File: nima/http/media/media/src/main/java/io/helidon/nima/http/media/MediaContextConfigBlueprint.java
Patch:
@@ -24,7 +24,7 @@
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.nima.http.media.spi.MediaSupportProvider;
 
-@Prototype.Blueprint(builderInterceptor = MediaContextBuilderInterceptor.class)
+@Prototype.Blueprint(decorator = MediaContextBuilderDecorator.class)
 @Configured
 interface MediaContextConfigBlueprint extends Prototype.Factory<MediaContext> {
     /**

File: nima/http2/webclient/src/main/java/io/helidon/nima/http2/webclient/Http2ClientProtocolConfigBlueprint.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.nima.webclient.spi.ProtocolConfig;
 
-@Prototype.Blueprint(builderInterceptor = Http2ClientConfigSupport.ProtocolConfigInterceptor.class)
+@Prototype.Blueprint(decorator = Http2ClientConfigSupport.ProtocolConfigDecorator.class)
 @Configured
 interface Http2ClientProtocolConfigBlueprint extends ProtocolConfig {
     @Override

File: nima/http2/webclient/src/test/java/io/helidon/nima/http2/webclient/Http2WebClientTest.java
Patch:
@@ -104,7 +104,8 @@ static void setUpServer(WebServerConfig.Builder serverBuilder) {
                 .host("localhost")
                 .addConnectionSelector(Http2ConnectionSelector.builder()
                                                .http2Config(Http2Config.builder()
-                                                                    .initialWindowSize(10))
+                                                                    .initialWindowSize(10)
+                                                                    .build())
                                                .build())
                 .putSocket("https", builder -> builder.port(-1)
                         .host("localhost")

File: nima/testing/junit5/webserver/src/main/java/io/helidon/nima/testing/junit5/webserver/HelidonServerJunitExtension.java
Patch:
@@ -246,7 +246,7 @@ private void addRouting(WebServerConfig.Builder builder) {
                 if (listenerConfig == null) {
                     builder.putSocket(socketName, listenerBuilder.build());
                 } else {
-                    builder.putSocket(socketName, ListenerConfig.builder(listenerConfig).from(listenerBuilder));
+                    builder.putSocket(socketName, ListenerConfig.builder(listenerConfig).from(listenerBuilder).build());
                 }
             }
         });

File: nima/tests/integration/http2/server/src/test/java/io/helidon/nima/tests/integration/http2/webserver/FlowControlTest.java
Patch:
@@ -77,11 +77,12 @@ class FlowControlTest {
     static void setUpServer(WebServerConfig.Builder serverBuilder) {
         serverBuilder
                 .addProtocol(Http2Config.builder()
-                                     .initialWindowSize(WindowSize.DEFAULT_WIN_SIZE))
+                                     .initialWindowSize(WindowSize.DEFAULT_WIN_SIZE)
+                                     .build())
                 .addConnectionSelector(Http2ConnectionSelector.builder()
                                                .http2Config(Http2Config.builder()
                                                                     .initialWindowSize(WindowSize.DEFAULT_WIN_SIZE)
-                                               )
+                                                                    .build())
                                                .build())
                 .host("localhost")
                 .routing(router -> router

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/api/HttpClientConfigBlueprint.java
Patch:
@@ -43,7 +43,7 @@
  * This can be used by any HTTP client version, and does not act as a factory, for easy extensibility.
  */
 @Configured
-@Prototype.Blueprint(builderInterceptor = HttpClientConfigSupport.HttpBuilderInterceptor.class)
+@Prototype.Blueprint(decorator = HttpClientConfigSupport.HttpBuilderDecorator.class)
 @Prototype.CustomMethods(HttpClientConfigSupport.HttpCustomMethods.class)
 interface HttpClientConfigBlueprint extends HttpConfigBaseBlueprint {
     /**
@@ -151,7 +151,7 @@ default ClientRequestHeaders defaultRequestHeaders() {
      *
      * @return media context
      */
-    @ConfiguredOption
+    @ConfiguredOption("create()")
     MediaContext mediaContext();
 
     /**

File: nima/webclient/http1/src/main/java/io/helidon/nima/webclient/http1/Http1ClientConfigBlueprint.java
Patch:
@@ -17,17 +17,19 @@
 package io.helidon.nima.webclient.http1;
 
 import io.helidon.builder.api.Prototype;
+import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.nima.webclient.api.HttpClientConfig;
 
 /**
  * HTTP/1.1. full webclient configuration.
  */
-@Prototype.Blueprint(builderInterceptor = Http1ClientConfigSupport.Http1BuilderInterceptor.class)
+@Prototype.Blueprint
 interface Http1ClientConfigBlueprint extends HttpClientConfig, Prototype.Factory<Http1Client> {
     /**
      * HTTP/1.1 specific configuration.
      *
      * @return protocol specific configuration
      */
+    @ConfiguredOption("create()")
     Http1ClientProtocolConfig protocolConfig();
 }

File: nima/webclient/http1/src/main/java/io/helidon/nima/webclient/http1/Http1ProtocolConfigProvider.java
Patch:
@@ -39,6 +39,7 @@ public String configKey() {
     public Http1ClientProtocolConfig create(Config config, String name) {
         return Http1ClientProtocolConfig.builder()
                 .config(config)
-                .name(name);
+                .name(name)
+                .build();
     }
 }

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1ConfigBlueprint.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * HTTP/1.1 server configuration.
  */
-@Prototype.Blueprint(builderInterceptor = Http1BuilderInterceptor.class)
+@Prototype.Blueprint(decorator = Http1BuilderDecorator.class)
 @Configured(provides = ProtocolConfig.class)
 interface Http1ConfigBlueprint extends ProtocolConfig {
     /**

File: nima/websocket/client/src/main/java/io/helidon/nima/websocket/client/WsProtocolConfigProvider.java
Patch:
@@ -40,6 +40,7 @@ public String configKey() {
     public WsClientProtocolConfig create(Config config, String name) {
         return WsClientProtocolConfig.builder()
                 .config(config)
-                .name(name);
+                .name(name)
+                .build();
     }
 }

File: common/uri/src/test/java/io/helidon/common/uri/UriQueryTest.java
Patch:
@@ -40,7 +40,7 @@ void sanityParse() {
 
     @Test
     void testEncoded() throws UnsupportedEncodingException {
-        UriQuery uriQuery = UriQuery.create("a=" + URLEncoder.encode("1&b=2", US_ASCII.name()));
+        UriQuery uriQuery = UriQuery.create("a=" + URLEncoder.encode("1&b=2", US_ASCII));
         assertThat(uriQuery.value("a"), is("1&b=2"));
     }
 

File: examples/cors/src/test/java/io/helidon/examples/cors/MainTest.java
Patch:
@@ -26,7 +26,6 @@
 import io.helidon.cors.CrossOriginConfig;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpServer;
-
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientRequest;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
@@ -171,7 +170,6 @@ void testGreetingChangeWithCors() {
                     headers.set(ORIGIN, "http://foo.com");
                     headers.set(HOST, "here.com");
                     preFlightHeaders.forEach(headers::add);
-                    return headers;
                 }).submit(payload.forRest())) {
 
             assertThat(response.status().code(), is(204));
@@ -212,7 +210,6 @@ void testGreetingChangeWithCorsAndOtherOrigin() {
         request.headers(headers -> {
             headers.set(ORIGIN, "http://other.com");
             headers.set(HOST, "here.com");
-            return headers;
         });
 
         GreetingMessage payload = new GreetingMessage("Ahoy");

File: examples/integrations/micrometer/se/src/test/java/io/helidon/examples/micrometer/se/MainTest.java
Patch:
@@ -122,7 +122,7 @@ private JsonObject get() {
     private JsonObject get(String path) {
         JsonObject jsonObject = client.get()
                 .path(path)
-                .request(JsonObject.class);
+                .requestEntity(JsonObject.class);
         expectedAllGets++;
         return jsonObject;
     }

File: examples/integrations/neo4j/src/test/java/io/helidon/examples/integrations/neo4j/MainTest.java
Patch:
@@ -81,7 +81,7 @@ static void stopServer() {
 
     @Test
     void testMovies() {
-        JsonArray result = webClient.get("/api/movies").request(JsonArray.class);
+        JsonArray result = webClient.get("/api/movies").requestEntity(JsonArray.class);
         assertThat(result.getJsonObject(0).getString("title"), containsString("The Matrix"));
     }
 

File: examples/nima/fault-tolerance/src/main/java/io/helidon/examples/nima/faulttolerance/PlatformExecutorProvider.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * This service will be part of Níma on Injection module.
- * It may use Injection to get config sources exposed through pico.
+ * It may use Injection to get config sources exposed through injection.
  */
 @Singleton
 @Named("platform-executor")

File: examples/openapi/src/test/java/io/helidon/examples/openapi/MainTest.java
Patch:
@@ -96,7 +96,7 @@ public void testOpenAPI() {
          */
         JsonObject jsonObject = client.get("/openapi")
                 .accept(MediaTypes.APPLICATION_JSON)
-                .request(JsonObject.class);
+                .requestEntity(JsonObject.class);
         JsonObject paths = jsonObject.getJsonObject("paths");
 
         JsonPointer jp = Json.createPointer("/" + escape("/greet/greeting") + "/put/summary");

File: examples/security/outbound-override/src/main/java/io/helidon/security/examples/outbound/JwtOverrideService.java
Patch:
@@ -48,7 +48,7 @@ private void override(ServerRequest req, ServerResponse res) {
 
         String result = client.get("http://localhost:" + server.port("backend") + "/hello")
                 .property(JwtProvider.EP_PROPERTY_OUTBOUND_USER, "jill")
-                .request(String.class);
+                .requestEntity(String.class);
 
         res.send("You are: " + context.userName() + ", backend service returned: " + result);
     }
@@ -63,7 +63,7 @@ private void propagate(ServerRequest req, ServerResponse res) {
                 .orElseThrow(() -> new RuntimeException("WebServer not found in context"));
 
         String result = client.get("http://localhost:" + server.port("backend") + "/hello")
-                .request(String.class);
+                .requestEntity(String.class);
 
         res.send("You are: " + context.userName() + ", backend service returned: " + result);
     }

File: examples/security/outbound-override/src/main/java/io/helidon/security/examples/outbound/OverrideService.java
Patch:
@@ -50,7 +50,7 @@ private void override(ServerRequest req, ServerResponse res) {
         String result = client.get("http://localhost:" + server.port("backend") + "/hello")
                 .property(HttpBasicAuthProvider.EP_PROPERTY_OUTBOUND_USER, "jill")
                 .property(HttpBasicAuthProvider.EP_PROPERTY_OUTBOUND_PASSWORD, "anotherPassword")
-                .request(String.class);
+                .requestEntity(String.class);
 
         res.send("You are: " + context.userName() + ", backend service returned: " + result + "\n");
     }
@@ -65,7 +65,7 @@ private void propagate(ServerRequest req, ServerResponse res) {
                 .orElseThrow(() -> new RuntimeException("WebServer not found in context"));
 
         String result = client.get("http://localhost:" + server.port("backend") + "/hello")
-                .request(String.class);
+                .requestEntity(String.class);
 
         res.send("You are: " + context.userName() + ", backend service returned: " + result + "\n");
     }

File: examples/security/outbound-override/src/test/java/io/helidon/security/examples/outbound/OutboundOverrideExampleTest.java
Patch:
@@ -27,6 +27,7 @@
 import io.helidon.security.providers.httpauth.HttpBasicAuthProvider;
 
 import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 
@@ -60,7 +61,7 @@ public void testOverrideExample() {
                 .path("/override")
                 .property(HttpBasicAuthProvider.EP_PROPERTY_OUTBOUND_USER, "jack")
                 .property(HttpBasicAuthProvider.EP_PROPERTY_OUTBOUND_PASSWORD, "password")
-                .request(String.class);
+                .requestEntity(String.class);
 
         assertThat(value, is("You are: jack, backend service returned: jill\n"));
     }
@@ -71,7 +72,7 @@ public void testPropagateExample() {
                 .path("/propagate")
                 .property(HttpBasicAuthProvider.EP_PROPERTY_OUTBOUND_USER, "jack")
                 .property(HttpBasicAuthProvider.EP_PROPERTY_OUTBOUND_PASSWORD, "password")
-                .request(String.class);
+                .requestEntity(String.class);
 
         assertThat(value, is("You are: jack, backend service returned: jack\n"));
     }

File: examples/security/webserver-digest-auth/src/test/java/io/helidon/security/examples/webserver/digest/WebClientAuthenticationService.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.Map;
 
 import io.helidon.common.http.Http;
-import io.helidon.nima.webclient.WebClientServiceRequest;
-import io.helidon.nima.webclient.WebClientServiceResponse;
+import io.helidon.nima.webclient.api.WebClientServiceRequest;
+import io.helidon.nima.webclient.api.WebClientServiceResponse;
 import io.helidon.nima.webclient.spi.WebClientService;
 
 /**
@@ -56,7 +56,7 @@ public WebClientServiceResponse handle(Chain chain, WebClientServiceRequest requ
         if (challenge == null) {
             return response;
         }
-        String uri = request.uri().path();
+        String uri = request.uri().path().path();
         String method = request.method().text();
         String atz = digestAuth.authorization(challenge, uri, method, username, password);
         if (atz == null) {

File: examples/todo-app/frontend/src/main/java/io/helidon/demo/todos/frontend/BackendServiceClient.java
Patch:
@@ -60,7 +60,7 @@ public JsonArray getAll(SpanContext spanContext) {
 
         try {
             JsonArray jsonArray = client.get("/api/backend")
-                    .request(JsonArray.class);
+                    .requestEntity(JsonArray.class);
             span.end();
             return jsonArray;
         } catch (Throwable t) {

File: examples/webserver/basics/src/main/java/io/helidon/webserver/examples/basics/Main.java
Patch:
@@ -81,7 +81,7 @@ public class Main {
     public static void firstRouting(HttpRouting.Builder routing) {
         routing.post("/firstRouting/post-endpoint", (req, res) -> res.status(Http.Status.CREATED_201)
                         .send())
-                .get("/firstRouting/get-endpoint", (req, res) -> res.status(Http.Status.NO_CONTENT_204)
+                .get("/firstRouting/get-endpoint", (req, res) -> res.status(Http.Status.OK_200)
                         .send("Hello World!"));
     }
 
@@ -113,7 +113,7 @@ public static void routingAsFilter(HttpRouting.Builder routing) {
                 })
                 .post("/routingAsFilter/post-endpoint", (req, res) -> res.status(Http.Status.CREATED_201)
                         .send())
-                .get("/routingAsFilter/get-endpoint", (req, res) -> res.status(Http.Status.NO_CONTENT_204)
+                .get("/routingAsFilter/get-endpoint", (req, res) -> res.status(Http.Status.OK_200)
                         .send("Hello World!"));
     }
 

File: examples/webserver/tls/src/test/java/io/helidon/webserver/examples/tls/TestBase.java
Patch:
@@ -34,12 +34,12 @@ abstract class TestBase {
     TestBase(WebServer server) {
         this.client = Http1Client.builder()
                 .baseUri("https://localhost:" + server.port())
-                .tls(Tls.builder().trustAll(true))
+                .tls(Tls.builder().trustAll(true).build())
                 .build();
     }
 
     @Test
     void testSsl() {
-        assertThat(client.get().request(String.class), is("Hello!"));
+        assertThat(client.get().requestEntity(String.class), is("Hello!"));
     }
 }

File: inject/configdriven/tests/config/src/test/java/io/helidon/inject/configdriven/tests/config/BasicConfigBeanTest.java
Patch:
@@ -83,9 +83,9 @@ void acceptConfig() {
         assertThat(clientConfig.cipherSuites(),
                    contains("a", "b", "c"));
         assertThat(clientConfig.headers(),
-                   hasEntry("headers.0", "header1"));
+                   hasEntry("0", "header1"));
         assertThat(clientConfig.headers(),
-                   hasEntry("headers.1", "header2"));
+                   hasEntry("1", "header2"));
     }
 
     @Test
@@ -177,7 +177,7 @@ void equality() {
                 .port(clientCfg.get("port").asInt().get())
                 .serverPort(clientCfg.get("server-port").asInt().get())
                 .cipherSuites(clientCfg.get("cipher-suites").asList(String.class).get())
-                .headers(clientCfg.get("headers").asMap().get());
+                .headers(clientCfg.get("headers").detach().asMap().get());
         clientCfg.get("name").asString().ifPresent(clientConfigBeanManualBuilder::name);
         clientCfg.get("pswd").asString().ifPresent(serverConfigBeanManualBuilder::pswd);
         TestClientConfig clientConfigBeanManual = clientConfigBeanManualBuilder.build();

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/AbstractConfigBeanTest.java
Patch:
@@ -82,9 +82,9 @@ void minimalConfig() {
         assertThat(clientConfig.cipherSuites(),
                    contains("a", "b", "c"));
         assertThat(clientConfig.headers(),
-                   hasEntry("headers.0", "header1"));
+                   hasEntry("0", "header1"));
         assertThat(clientConfig.headers(),
-                   hasEntry("headers.1", "header2"));
+                   hasEntry("1", "header2"));
     }
 
     /**

File: integrations/micrometer/micrometer/src/test/java/io/helidon/integrations/micrometer/MicrometerEndpointTests.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.nima.webclient.WebClient;
+import io.helidon.nima.webclient.api.WebClient;
 import io.helidon.nima.webserver.WebServer;
 
 import org.hamcrest.MatcherAssert;

File: integrations/micrometer/micrometer/src/test/java/io/helidon/integrations/micrometer/MicrometerSimplePrometheusTest.java
Patch:
@@ -27,7 +27,7 @@
 import io.helidon.common.http.Http.Header;
 import io.helidon.common.http.HttpMediaType;
 import io.helidon.common.media.type.MediaTypes;
-import io.helidon.nima.webclient.WebClient;
+import io.helidon.nima.webclient.api.WebClient;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
 import io.helidon.nima.webserver.WebServer;
@@ -77,7 +77,7 @@ static void prepAll() {
     void prepTest() {
         registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
         initSomeMetrics();
-        webClient = WebClient.builder()
+        webClient = Http1Client.builder()
                 .baseUri("http://localhost:" + webServer.port())
                 .get();
     }

File: integrations/vault/auths/approle/src/main/java/io/helidon/integrations/vault/auths/approle/AppRoleVaultAuth.java
Patch:
@@ -126,7 +126,7 @@ public Optional<RestApi> authenticate(Config config, Vault.Builder vaultBuilder)
                                    .webClientBuilder(webclient -> {
                                        webclient.baseUri(address + "/v1");
                                        vaultBuilder.baseNamespace()
-                                               .ifPresent(ns -> webclient.header(VAULT_NAMESPACE_HEADER_NAME, ns));
+                                               .ifPresent(ns -> webclient.addHeader(VAULT_NAMESPACE_HEADER_NAME, ns));
                                        vaultBuilder.webClientUpdater().accept(webclient);
                                    })
                                    .faultTolerance(vaultBuilder.ftHandler())

File: integrations/vault/auths/common/src/main/java/io/helidon/integrations/vault/auths/common/NoVaultAuth.java
Patch:
@@ -61,7 +61,7 @@ public Optional<RestApi> authenticate(Config config, Vault.Builder vaultBuilder)
                                    .webClientBuilder(webclient -> {
                                        webclient.baseUri(address + "/v1");
                                        vaultBuilder.baseNamespace()
-                                               .ifPresent(ns -> webclient.header(VAULT_NAMESPACE_HEADER_NAME, ns));
+                                               .ifPresent(ns -> webclient.addHeader(VAULT_NAMESPACE_HEADER_NAME, ns));
                                        vaultBuilder.webClientUpdater().accept(webclient);
                                    })
                                    .faultTolerance(vaultBuilder.ftHandler())

File: integrations/vault/auths/common/src/main/java/io/helidon/integrations/vault/auths/common/VaultRestApi.java
Patch:
@@ -29,7 +29,7 @@
 import io.helidon.integrations.vault.VaultOptionalResponse;
 import io.helidon.integrations.vault.VaultRestException;
 import io.helidon.integrations.vault.VaultUtil;
-import io.helidon.nima.webclient.http1.Http1ClientResponse;
+import io.helidon.nima.webclient.api.HttpClientResponse;
 
 import jakarta.json.JsonObject;
 
@@ -59,7 +59,7 @@ protected <T> T emptyResponse(String path,
                                   ApiRequest<?> request,
                                   Http.Method method,
                                   String requestId,
-                                  Http1ClientResponse response,
+                                  HttpClientResponse response,
                                   ResponseBuilder<?, T, ?> responseBuilder) {
 
         if (responseBuilder instanceof VaultOptionalResponse.Builder) {
@@ -91,7 +91,7 @@ protected ApiRestException readError(String path,
                                          ApiRequest<?> request,
                                          Http.Method method,
                                          String requestId,
-                                         Http1ClientResponse response,
+                                         HttpClientResponse response,
                                          JsonObject entity) {
 
         String message = "Failed to invoke " + method + " on path " + path;

File: integrations/vault/auths/k8s/src/main/java/io/helidon/integrations/vault/auths/k8s/K8sRestApi.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.integrations.common.rest.ApiRequest;
 import io.helidon.integrations.vault.VaultTokenBase;
 import io.helidon.integrations.vault.auths.common.VaultRestApi;
-import io.helidon.nima.webclient.http1.Http1ClientRequest;
+import io.helidon.nima.webclient.api.HttpClientRequest;
 
 class K8sRestApi extends VaultRestApi {
 
@@ -47,7 +47,7 @@ static Builder k8sBuilder() {
     }
 
     @Override
-    protected Http1ClientRequest updateRequestBuilderCommon(Http1ClientRequest requestBuilder,
+    protected HttpClientRequest updateRequestBuilderCommon(HttpClientRequest requestBuilder,
                                                             String path,
                                                             ApiRequest<?> request,
                                                             Http.Method method,

File: integrations/vault/auths/k8s/src/main/java/io/helidon/integrations/vault/auths/k8s/K8sVaultAuth.java
Patch:
@@ -141,7 +141,7 @@ public Optional<RestApi> authenticate(Config config, Vault.Builder vaultBuilder)
                                    .webClientBuilder(webclient -> {
                                        webclient.baseUri(address + "/v1");
                                        vaultBuilder.baseNamespace()
-                                               .ifPresent(ns -> webclient.header(VAULT_NAMESPACE_HEADER_NAME, ns));
+                                               .ifPresent(ns -> webclient.addHeader(VAULT_NAMESPACE_HEADER_NAME, ns));
                                        vaultBuilder.webClientUpdater().accept(webclient);
                                    })
                                    .faultTolerance(vaultBuilder.ftHandler())

File: integrations/vault/auths/token/src/main/java/io/helidon/integrations/vault/auths/token/TokenVaultAuth.java
Patch:
@@ -89,10 +89,10 @@ private RestApi restApi(Vault.Builder vaultBuilder, String token) {
                            .webClientBuilder(builder -> {
                                builder.config(vaultBuilder.config().get("webclient"))
                                       .baseUri(address + "/v1")
-                                      .header(VAULT_TOKEN_HEADER_NAME, token);
+                                      .addHeader(VAULT_TOKEN_HEADER_NAME, token);
                                Optional.ofNullable(baseNamespace)
                                        .or(vaultBuilder::baseNamespace)
-                                       .ifPresent(ns -> builder.header(VAULT_NAMESPACE_HEADER_NAME, ns));
+                                       .ifPresent(ns -> builder.addHeader(VAULT_NAMESPACE_HEADER_NAME, ns));
                                vaultBuilder.webClientUpdater().accept(builder);
                            })
                            .faultTolerance(vaultBuilder.ftHandler())

File: jersey/connector/src/main/java/io/helidon/jersey/connector/HelidonProperties.java
Patch:
@@ -17,7 +17,6 @@
 package io.helidon.jersey.connector;
 
 import io.helidon.config.Config;
-import io.helidon.nima.webclient.WebClient;
 
 /**
  * Configuration options specific to the Client API that utilizes {@link HelidonConnector}.
@@ -28,7 +27,7 @@ private HelidonProperties() {
     }
 
     /**
-     * A Helidon {@link Config} instance used to create the corresponding {@link WebClient}.
+     * A Helidon {@link Config} instance used to create the corresponding {@link io.helidon.nima.webclient.api.WebClient}.
      * This property is settable on {@link jakarta.ws.rs.core.Configurable#property(String, Object)}.
      */
     public static final String CONFIG = "jersey.connector.helidon.config";

File: jersey/connector/src/main/java/io/helidon/jersey/connector/ProxyBuilder.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Locale;
 import java.util.Optional;
 
-import io.helidon.nima.webclient.Proxy;
+import io.helidon.nima.webclient.api.Proxy;
 
 import jakarta.ws.rs.ProcessingException;
 import jakarta.ws.rs.core.Configuration;
@@ -77,7 +77,7 @@ private static Optional<Proxy> createProxy(Object proxyUri, String userName, Str
         }
     }
 
-    private static URI getProxyUri(final Object proxy) {
+    private static URI getProxyUri(Object proxy) {
         if (proxy instanceof URI) {
             return (URI) proxy;
         } else if (proxy instanceof String) {

File: jersey/connector/src/test/java/io/helidon/jersey/connector/ConfigTest.java
Patch:
@@ -20,17 +20,18 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.nima.webclient.Proxy;
+import io.helidon.nima.webclient.api.Proxy;
 import io.helidon.nima.webclient.http1.Http1ClientRequest;
+
 import jakarta.ws.rs.client.Client;
 import jakarta.ws.rs.client.ClientBuilder;
 import org.glassfish.jersey.client.ClientProperties;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.CoreMatchers.is;
 
 /**
  * Tests {@link HelidonConnector} configuration.

File: lra/coordinator/server/src/test/java/io/helidon/lra/coordinator/CoordinatorTest.java
Patch:
@@ -105,7 +105,7 @@ void startAndCancel() {
     }
 
     private String start() {
-        return client.post("/lra-coordinator/start").request(String.class);
+        return client.post("/lra-coordinator/start").requestEntity(String.class);
     }
 
     private static LRAStatus getParsedStatusOfLra(String lraId) {
@@ -115,7 +115,7 @@ private static LRAStatus getParsedStatusOfLra(String lraId) {
                 .baseUri(lraId)
                 .build()
                 .get()
-                .request(JsonArray.class)
+                .requestEntity(JsonArray.class)
                 .stream()
                 .map(JsonValue::asJsonObject)
                 .map(jo -> jo.getString("status"))
@@ -131,7 +131,7 @@ private static LRAStatus status(String lraId) {
                 .baseUri(lraId + "/status")
                 .build()
                 .get()
-                .request(String.class);
+                .requestEntity(String.class);
         return LRAStatus.valueOf(lraStatus);
     }
 

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/CoordinatorHeaderPropagationTest.java
Patch:
@@ -170,7 +170,6 @@ HttpService mockCoordinator() {
                                     .headers(reqHeaders -> {
                                         // relay all incoming headers
                                         req.headers().forEach(reqHeaders::add);
-                                        return reqHeaders;
                                     })
                                     .submit(LRAStatus.Closing.name())) {
                                 if (clientResponse.status().family() != Http.Status.Family.SUCCESSFUL) {
@@ -193,7 +192,6 @@ HttpService mockCoordinator() {
                             .headers(reqHeaders -> {
                                 // relay all incoming headers
                                 req.headers().forEach(reqHeaders::add);
-                                return reqHeaders;
                             })
                             .request()) {
                         if (clientResponse.status().family() != Http.Status.Family.SUCCESSFUL) {
@@ -216,7 +214,6 @@ HttpService mockCoordinator() {
                             .headers(reqHeaders -> {
                                 // relay all incoming headers
                                 req.headers().forEach(reqHeaders::add);
-                                return reqHeaders;
                             })
                             .request()) {
                         if (clientResponse.status().family() != Http.Status.Family.SUCCESSFUL) {

File: nima/common/tls/src/main/java/io/helidon/nima/common/tls/Tls.java
Patch:
@@ -196,16 +196,16 @@ public SSLSocket createSocket(String alpnProtocol) {
     /**
      * Create a SSLSocket for the chosen protocol and the given socket.
      *
-     * @param alpnProtocol protocol to use
+     * @param alpnProtocols protocol(s) to use (order is significant)
      * @param socket existing socket
      * @param address where SSL socket will connect
      * @return a new socket ready for TLS communication
      */
-    public SSLSocket createSocket(String alpnProtocol, Socket socket, InetSocketAddress address) {
+    public SSLSocket createSocket(List<String> alpnProtocols, Socket socket, InetSocketAddress address) {
         try {
             SSLSocket sslSocket = (SSLSocket) sslSocketFactory
                     .createSocket(socket, address.getHostName(), address.getPort(), true);
-            sslParameters.setApplicationProtocols(new String[] {alpnProtocol});
+            sslParameters.setApplicationProtocols(alpnProtocols.toArray(new String[0]));
             sslSocket.setSSLParameters(sslParameters);
             return sslSocket;
         } catch (IOException e) {

File: nima/http2/webclient/src/main/java/io/helidon/nima/http2/webclient/ConnectionContext.java
Patch:
@@ -18,9 +18,7 @@
 
 import java.time.Duration;
 
-record ConnectionContext(int priority,
-                         boolean priorKnowledge,
-                         int initialWindowSize,
+record ConnectionContext(int initialWindowSize,
                          int maxFrameSize,
                          long maxHeaderListSize,
                          int connectionPrefetch,

File: nima/http2/webclient/src/main/java/io/helidon/nima/http2/webclient/Http2ClientResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,10 +16,10 @@
 
 package io.helidon.nima.http2.webclient;
 
-import io.helidon.nima.webclient.ClientResponse;
+import io.helidon.nima.webclient.api.HttpClientResponse;
 
 /**
  * Response of HTTP/2 client.
  */
-public interface Http2ClientResponse extends ClientResponse {
+public interface Http2ClientResponse extends HttpClientResponse {
 }

File: nima/sse/webclient/src/main/java/io/helidon/nima/sse/webclient/SseSource.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.helidon.common.GenericType;
 import io.helidon.nima.sse.SseEvent;
-import io.helidon.nima.webclient.http.spi.Source;
+import io.helidon.nima.webclient.spi.Source;
 
 /**
  * A source for {@link SseEvent}s.

File: nima/sse/webclient/src/main/java/module-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 import io.helidon.nima.sse.webclient.SseSourceHandlerProvider;
-import io.helidon.nima.webclient.http.spi.SourceHandlerProvider;
+import io.helidon.nima.webclient.spi.SourceHandlerProvider;
 
 /**
  * Nima SSE webclient package.

File: nima/testing/junit5/websocket/src/test/java/io/helidon/nima/testing/junit5/websocket/WsSocketAbstractTestingTest.java
Patch:
@@ -59,7 +59,7 @@ static void customRouting(WsRouting.Builder ws) {
 
     @Test
     void testHttpEndpoint() {
-        String message = httpClient.get("/test").request(String.class);
+        String message = httpClient.get("/test").requestEntity(String.class);
         assertThat(message, is("http"));
     }
 

File: nima/tests/integration/imperative/src/test/java/io/helidon/nima/tests/integration/imperative/ImperativeMainTest.java
Patch:
@@ -54,7 +54,7 @@ void testAdminSocket() {
 
     private void testSocket(Http1Client client) {
         String response = client.get()
-                .request(String.class);
+                .requestEntity(String.class);
 
         assertThat(response, is("Hello World!"));
     }

File: nima/tests/integration/logging/log4j/src/test/java/io/helidon/nima/tests/integration/logger/log4j/Log4jTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webserver.http.HttpRules;
+
 import org.junit.jupiter.api.Test;
 
 import static java.lang.System.getLogger;
@@ -46,7 +47,7 @@ static void routing(HttpRules builder) {
     @Test
     void testOk() {
         String response = client.method(Http.Method.GET)
-                .request(String.class);
+                .requestEntity(String.class);
 
         LOGGER.log(System.Logger.Level.DEBUG, "Message");
 

File: nima/tests/integration/webclient/webclient/src/test/java/io/helidon/nima/tests/integration/webclient/HttpProxy.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.tests.integration.client;
+package io.helidon.nima.tests.integration.webclient;
 
 import java.io.IOException;
 import java.lang.System.Logger.Level;

File: nima/tests/integration/webclient/webclient/src/test/java/io/helidon/nima/tests/integration/webclient/HttpProxyTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.tests.integration.client;
+package io.helidon.nima.tests.integration.webclient;
 
 import static io.helidon.common.http.Http.Method.GET;
 import static org.hamcrest.CoreMatchers.is;
@@ -26,8 +26,8 @@
 import io.helidon.common.http.Http;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
-import io.helidon.nima.webclient.Proxy;
-import io.helidon.nima.webclient.Proxy.ProxyType;
+import io.helidon.nima.webclient.api.Proxy;
+import io.helidon.nima.webclient.api.Proxy.ProxyType;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
 import io.helidon.nima.webserver.http.HttpRouting;

File: nima/tests/integration/webserver/static-content/src/test/java/io/helidon/nima/tests/integration/server/staticcontent/StaticContentTest.java
Patch:
@@ -48,21 +48,21 @@ static void routing(HttpRouting.Builder routing) {
     @Test
     void testWelcomeFile() {
         String response = client.get("/files/")
-                .request(String.class);
+                .requestEntity(String.class);
         assertThat(response, is("Welcome"));
     }
 
     @Test
     void testStaticContent() {
         String response = client.get("/files/static-content.txt")
-                .request(String.class);
+                .requestEntity(String.class);
         assertThat(response, is("Hi"));
     }
 
     @Test
     void testNexted() {
         String response = client.get("/files/default")
-                .request(String.class);
+                .requestEntity(String.class);
         assertThat(response, is("Nexted"));
     }
 

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ConfiguredLimitsTest.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
 import io.helidon.nima.testing.junit5.webserver.SetUpServer;
-import io.helidon.nima.webclient.ClientResponse;
+import io.helidon.nima.webclient.api.HttpClientResponse;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
 import io.helidon.nima.webserver.WebServerConfig;
@@ -106,7 +106,7 @@ void testInitialLine(int size, boolean success) {
         int pathLength = size - 15;
         String path = "/" + "m".repeat(pathLength);
 
-        try (ClientResponse response = client.get(path)
+        try (HttpClientResponse response = client.get(path)
                 .request()) {
             if (success) {
                 assertThat("Initial line of size " + size + " should have passed",

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ResponseOrderingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -78,7 +78,7 @@ void testOrdering() {
         for (int i = 0; i < 1000; i++) {
             returnedIds.add(Long.parseLong(client.get("/multi")
                                                    .queryParam("id", String.valueOf(i))
-                                                   .request(String.class)));
+                                                   .requestEntity(String.class)));
         }
 
         assertThat(returnedIds.toArray(), allOf(arrayWithSize(1000), is(queue.toArray())));

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/StatusCodeTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
-import io.helidon.nima.webclient.ClientResponse;
+import io.helidon.nima.webclient.api.HttpClientResponse;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webserver.http.HttpRules;
 import org.junit.jupiter.api.Test;
@@ -46,7 +46,7 @@ static void routing(HttpRules rules) {
 
     @Test
     void testCode() {
-        try (ClientResponse response = client.method(Http.Method.GET).request()) {
+        try (HttpClientResponse response = client.method(Http.Method.GET).request()) {
             assertThat(response.status(), is(Http.Status.NO_CONTENT_204));
         }
     }

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ThreadNameTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,7 +49,7 @@ static void routing(HttpRules rules) {
     @Test
     void testName() {
         String message = client.get()
-                .request(String.class);
+                .requestEntity(String.class);
         String[] parts = message.split(":");
         // the parts must be 4 long
         assertThat("Response should have four parts: isVirtual,serverSocketId,connSocketId,threadName", parts, arrayWithSize(4));

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/api/DnsAddressLookup.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.webclient;
+package io.helidon.nima.webclient.api;
 
 import java.io.Serializable;
 import java.net.InetAddress;
@@ -53,7 +53,7 @@ public enum DnsAddressLookup {
      * @return default lookup
      */
     public static DnsAddressLookup defaultLookup() {
-        return DefaultDnsAddressLookupFinder.defaultDnsAddressLookup();
+        return DefaultAddressLookupFinder.defaultDnsAddressLookup();
     }
 
     private static final InetAddressComparator COMPARATOR = new InetAddressComparator();

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/api/ServiceChainImpl.java
Patch:
@@ -14,10 +14,8 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.webclient.http1;
+package io.helidon.nima.webclient.api;
 
-import io.helidon.nima.webclient.WebClientServiceRequest;
-import io.helidon.nima.webclient.WebClientServiceResponse;
 import io.helidon.nima.webclient.spi.WebClientService;
 
 class ServiceChainImpl implements WebClientService.Chain {

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/api/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,4 +17,4 @@
 /**
  * WebClient APIs shared by all types of clients.
  */
-package io.helidon.nima.webclient;
+package io.helidon.nima.webclient.api;

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/spi/DnsResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 
 import java.net.InetAddress;
 
-import io.helidon.nima.webclient.DnsAddressLookup;
+import io.helidon.nima.webclient.api.DnsAddressLookup;
 
 /**
  * DNS resolving interface.
@@ -27,7 +27,7 @@ public interface DnsResolver {
 
     /**
      * Whether to use standard Java DNS resolver.
-     * If this method returns true, {@link #resolveAddress(String, DnsAddressLookup)} method is not invoked and
+     * If this method returns true, {@link #resolveAddress(String, io.helidon.nima.webclient.api.DnsAddressLookup)} method is not invoked and
      * no {@link DnsAddressLookup} preferences will be applied.
      *
      * @return use standard Java resolver

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/spi/DnsResolverProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/spi/Source.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.webclient.http.spi;
+package io.helidon.nima.webclient.spi;
 
 /**
  * A listener for arbitrary events.

File: nima/webclient/api/src/main/java/io/helidon/nima/webclient/spi/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: nima/webclient/http1/src/main/java/io/helidon/nima/webclient/http1/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: nima/webclient/metrics/src/main/java/io/helidon/nima/webclient/metrics/WebClientCounter.java
Patch:
@@ -16,8 +16,8 @@
 package io.helidon.nima.webclient.metrics;
 
 import io.helidon.common.http.Http;
-import io.helidon.nima.webclient.WebClientServiceRequest;
-import io.helidon.nima.webclient.WebClientServiceResponse;
+import io.helidon.nima.webclient.api.WebClientServiceRequest;
+import io.helidon.nima.webclient.api.WebClientServiceResponse;
 
 import org.eclipse.microprofile.metrics.Counter;
 import org.eclipse.microprofile.metrics.Metadata;

File: nima/webclient/metrics/src/main/java/io/helidon/nima/webclient/metrics/WebClientGaugeInProgress.java
Patch:
@@ -17,8 +17,8 @@
 
 import java.util.concurrent.atomic.AtomicLong;
 
-import io.helidon.nima.webclient.WebClientServiceRequest;
-import io.helidon.nima.webclient.WebClientServiceResponse;
+import io.helidon.nima.webclient.api.WebClientServiceRequest;
+import io.helidon.nima.webclient.api.WebClientServiceResponse;
 
 /**
  * Gauge which counts all requests in progress.

File: nima/webclient/metrics/src/main/java/io/helidon/nima/webclient/metrics/WebClientMeter.java
Patch:
@@ -16,8 +16,8 @@
 package io.helidon.nima.webclient.metrics;
 
 import io.helidon.common.http.Http;
-import io.helidon.nima.webclient.WebClientServiceRequest;
-import io.helidon.nima.webclient.WebClientServiceResponse;
+import io.helidon.nima.webclient.api.WebClientServiceRequest;
+import io.helidon.nima.webclient.api.WebClientServiceResponse;
 
 import org.eclipse.microprofile.metrics.Metadata;
 

File: nima/webclient/metrics/src/main/java/io/helidon/nima/webclient/metrics/WebClientMetric.java
Patch:
@@ -25,8 +25,8 @@
 import io.helidon.common.http.Http;
 import io.helidon.metrics.api.Registry;
 import io.helidon.metrics.api.RegistryFactory;
-import io.helidon.nima.webclient.WebClientServiceRequest;
-import io.helidon.nima.webclient.WebClientServiceResponse;
+import io.helidon.nima.webclient.api.WebClientServiceRequest;
+import io.helidon.nima.webclient.api.WebClientServiceResponse;
 import io.helidon.nima.webclient.spi.WebClientService;
 
 import org.eclipse.microprofile.metrics.Metadata;

File: nima/webclient/metrics/src/main/java/io/helidon/nima/webclient/metrics/WebClientMetrics.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.ListIterator;
 
 import io.helidon.common.config.Config;
-import io.helidon.nima.webclient.WebClientServiceRequest;
-import io.helidon.nima.webclient.WebClientServiceResponse;
+import io.helidon.nima.webclient.api.WebClientServiceRequest;
+import io.helidon.nima.webclient.api.WebClientServiceResponse;
 import io.helidon.nima.webclient.spi.WebClientService;
 
 /**

File: nima/webclient/metrics/src/main/java/io/helidon/nima/webclient/metrics/WebClientMetricsProvider.java
Patch:
@@ -42,7 +42,7 @@ public String configKey() {
     }
 
     @Override
-    public WebClientService create(Config config) {
+    public WebClientService create(Config config, String name) {
         return WebClientMetrics.create(config);
     }
 

File: nima/webclient/metrics/src/main/java/io/helidon/nima/webclient/metrics/WebClientTimer.java
Patch:
@@ -18,8 +18,8 @@
 import java.time.Duration;
 
 import io.helidon.common.http.Http;
-import io.helidon.nima.webclient.WebClientServiceRequest;
-import io.helidon.nima.webclient.WebClientServiceResponse;
+import io.helidon.nima.webclient.api.WebClientServiceRequest;
+import io.helidon.nima.webclient.api.WebClientServiceResponse;
 
 import org.eclipse.microprofile.metrics.Metadata;
 import org.eclipse.microprofile.metrics.Timer;

File: nima/webclient/security/src/main/java/io/helidon/nima/webclient/security/WebClientSecurityProvider.java
Patch:
@@ -43,7 +43,7 @@ public String configKey() {
     }
 
     @Override
-    public WebClientService create(Config config) {
+    public WebClientService create(Config config, String name) {
         return WebClientSecurity.create();
     }
 }

File: nima/webclient/tracing/src/main/java/io/helidon/nima/webclient/tracing/WebClientTracingProvider.java
Patch:
@@ -43,7 +43,7 @@ public String configKey() {
     }
 
     @Override
-    public WebClientService create(Config config) {
+    public WebClientService create(Config config, String name) {
         return WebClientTracing.create();
     }
 }

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcStatementDml.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.concurrent.CompletableFuture;
 
 import io.helidon.dbclient.DbClientServiceContext;
-import io.helidon.dbclient.DbExecuteContext;
 import io.helidon.dbclient.DbStatementDml;
 import io.helidon.dbclient.DbStatementException;
 import io.helidon.dbclient.DbStatementType;
@@ -38,7 +37,7 @@ class JdbcStatementDml extends JdbcStatement<DbStatementDml> implements DbStatem
      * @param connectionPool connection pool
      * @param context        execution context
      */
-    JdbcStatementDml(JdbcConnectionPool connectionPool, DbStatementType type, DbExecuteContext context) {
+    JdbcStatementDml(JdbcConnectionPool connectionPool, DbStatementType type, JdbcExecuteContext context) {
         super(connectionPool, context);
         this.type = type;
     }

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcStatementGet.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.concurrent.CompletableFuture;
 
 import io.helidon.dbclient.DbClientServiceContext;
-import io.helidon.dbclient.DbExecuteContext;
 import io.helidon.dbclient.DbRow;
 import io.helidon.dbclient.DbStatementException;
 import io.helidon.dbclient.DbStatementGet;
@@ -39,7 +38,7 @@ class JdbcStatementGet extends JdbcStatement<DbStatementGet> implements DbStatem
      * @param connectionPool connection pool
      * @param context        execution context
      */
-    JdbcStatementGet(JdbcConnectionPool connectionPool, DbExecuteContext context) {
+    JdbcStatementGet(JdbcConnectionPool connectionPool, JdbcExecuteContext context) {
         super(connectionPool, context);
     }
 

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcStatementQuery.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.stream.StreamSupport;
 
 import io.helidon.dbclient.DbClientServiceContext;
-import io.helidon.dbclient.DbExecuteContext;
 import io.helidon.dbclient.DbRow;
 import io.helidon.dbclient.DbStatementDml;
 import io.helidon.dbclient.DbStatementException;
@@ -41,7 +40,7 @@ class JdbcStatementQuery extends JdbcStatement<DbStatementQuery> implements DbSt
      * @param connectionPool connection pool
      * @param context        context
      */
-    JdbcStatementQuery(JdbcConnectionPool connectionPool, DbExecuteContext context) {
+    JdbcStatementQuery(JdbcConnectionPool connectionPool, JdbcExecuteContext context) {
         super(connectionPool, context);
     }
 

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcTransactionStatement.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.sql.PreparedStatement;
 
-import io.helidon.dbclient.DbExecuteContext;
 import io.helidon.dbclient.DbStatement;
 
 /**
@@ -37,7 +36,7 @@ abstract class JdbcTransactionStatement<S extends DbStatement<S>> extends JdbcSt
      * @param transactionContext transaction context
      */
     protected JdbcTransactionStatement(JdbcConnectionPool connectionPool,
-                                       DbExecuteContext context,
+                                       JdbcExecuteContext context,
                                        TransactionContext transactionContext) {
         super(connectionPool, context);
         this.transactionContext = transactionContext;

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcTransactionStatementDml.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.helidon.dbclient.jdbc;
 
-import io.helidon.dbclient.DbExecuteContext;
 import io.helidon.dbclient.DbStatementDml;
 import io.helidon.dbclient.DbStatementType;
 
@@ -34,7 +33,7 @@ class JdbcTransactionStatementDml extends JdbcTransactionStatement<DbStatementDm
      * @param transactionContext transaction context
      */
     JdbcTransactionStatementDml(JdbcConnectionPool connectionPool,
-                                DbExecuteContext context,
+                                JdbcExecuteContext context,
                                 TransactionContext transactionContext,
                                 DbStatementType type) {
         super(connectionPool, context, transactionContext);

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcTransactionStatementGet.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.Optional;
 
-import io.helidon.dbclient.DbExecuteContext;
 import io.helidon.dbclient.DbRow;
 import io.helidon.dbclient.DbStatementGet;
 import io.helidon.dbclient.DbStatementType;
@@ -35,7 +34,7 @@ class JdbcTransactionStatementGet extends JdbcTransactionStatement<DbStatementGe
      * @param transactionContext transaction context
      */
     JdbcTransactionStatementGet(JdbcConnectionPool connectionPool,
-                                DbExecuteContext context,
+                                JdbcExecuteContext context,
                                 TransactionContext transactionContext) {
         super(connectionPool, context, transactionContext);
     }

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcTransactionStatementQuery.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.stream.Stream;
 
-import io.helidon.dbclient.DbExecuteContext;
 import io.helidon.dbclient.DbRow;
 import io.helidon.dbclient.DbStatementQuery;
 import io.helidon.dbclient.DbStatementType;
@@ -35,7 +34,7 @@ class JdbcTransactionStatementQuery extends JdbcTransactionStatement<DbStatement
      * @param transactionContext transaction context
      */
     JdbcTransactionStatementQuery(JdbcConnectionPool connectionPool,
-                                  DbExecuteContext context,
+                                  JdbcExecuteContext context,
                                   TransactionContext transactionContext) {
 
         super(connectionPool, context, transactionContext);
@@ -50,4 +49,5 @@ public DbStatementType statementType() {
     public Stream<DbRow> execute() {
         return doExecute((future, context) -> JdbcStatementQuery.doExecute(this, future, context, null));
     }
+
 }

File: dbclient/jdbc/src/main/java/module-info.java
Patch:
@@ -19,7 +19,6 @@
 import io.helidon.dbclient.jdbc.JdbcClientProvider;
 import io.helidon.dbclient.jdbc.spi.HikariCpExtensionProvider;
 import io.helidon.dbclient.spi.DbClientProvider;
-import io.helidon.dbclient.jdbc.spi.HikariCpExtensionProvider;
 
 /**
  * Helidon Database Client JDBC.
@@ -38,6 +37,8 @@
 
     requires transitive io.helidon.common;
     requires transitive io.helidon.dbclient;
+    requires transitive io.helidon.builder.api;
+    requires transitive io.helidon.config.metadata;
 
     exports io.helidon.dbclient.jdbc;
     exports io.helidon.dbclient.jdbc.spi;

File: examples/microprofile/cors/src/main/java/io/helidon/microprofile/examples/cors/GreetingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/cors/src/main/java/io/helidon/microprofile/examples/cors/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/cors/src/test/java/io/helidon/microprofile/examples/cors/TestCORS.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/hello-world-explicit/src/main/java/io/helidon/microprofile/example/helloworld/explicit/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/hello-world-implicit/src/main/java/io/helidon/microprofile/example/helloworld/implicit/AnotherResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018,2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/hello-world-implicit/src/main/java/io/helidon/microprofile/example/helloworld/implicit/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/hello-world-implicit/src/test/java/io/helidon/microprofile/example/helloworld/implicit/ImplicitHelloWorldTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/http-status-count-mp/src/test/java/io/helidon/examples/mp/httpstatuscount/StatusResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/http-status-count-mp/src/test/java/io/helidon/examples/mp/httpstatuscount/StatusTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/IdcsResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/lra/src/main/java/io/helidon/microprofile/example/lra/LRAExampleResource.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: examples/microprofile/lra/src/main/java/io/helidon/microprofile/example/lra/package-info.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: examples/microprofile/messaging-sse/src/main/java/io/helidon/microprofile/example/messaging/sse/MessagingExampleResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/messaging-sse/src/main/java/io/helidon/microprofile/example/messaging/sse/MsgProcessingBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/security/src/main/java/io/helidon/microprofile/example/security/HelloWorldResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/security/src/main/java/io/helidon/microprofile/example/security/OtherApp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/security/src/main/java/io/helidon/microprofile/example/security/StaticContentApp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/static-content/src/main/java/io/helidon/microprofile/example/staticc/HelloWorldResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/websocket/src/main/java/io/helidon/microprofile/example/websocket/MessageBoardEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/websocket/src/main/java/io/helidon/microprofile/example/websocket/MessageQueue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/websocket/src/main/java/io/helidon/microprofile/example/websocket/MessageQueueResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/websocket/src/main/java/io/helidon/microprofile/example/websocket/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/websocket/src/test/java/io/helidon/microprofile/example/websocket/MessageBoardTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: inject/maven-plugin/src/main/java/io/helidon/inject/maven/plugin/AbstractApplicationCreatorMojo.java
Patch:
@@ -79,7 +79,7 @@ public abstract class AbstractApplicationCreatorMojo extends AbstractCreatorMojo
 
     /**
      * The approach for handling providers.
-     * See {@link ApplicationCreatorConfigOptions#permittedProviderTypes()}.
+     * See {@code ApplicationCreatorConfigOptions#permittedProviderTypes()}.
      */
     @Parameter(property = "inject.permitted.provider.types", readonly = true)
     private String permittedProviderTypes;

File: microprofile/access-log/src/main/java/io/helidon/microprofile/accesslog/AccessLogCdiExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/bean-validation/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/BuildTimeEnd.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/BuildTimeStart.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonCdiProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonContainer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/RuntimeStart.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/test/java/io/helidon/microprofile/cdi/Gh1446Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/test/java/io/helidon/microprofile/cdi/HelidonContainerInitializerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/test/java/io/helidon/microprofile/cdi/MainTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/test/java/io/helidon/microprofile/cdi/TestBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/test/java/io/helidon/microprofile/cdi/TestBean2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cdi/src/test/java/io/helidon/microprofile/cdi/TestExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/config/src/main/java/io/helidon/microprofile/config/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/config/src/test/java/io/helidon/microprofile/config/Converters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/config/src/test/java/io/helidon/microprofile/config/EnvironmentVariableTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/config/src/test/java/io/helidon/microprofile/config/MpConfigInjectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cors/src/main/java/io/helidon/microprofile/cors/CrossOriginAutoDiscoverable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/cors/src/main/java/io/helidon/microprofile/cors/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/InvokerAsyncException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/MethodInvoker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/ThrowableMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/AsynchronousTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/BaseFallbackBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/CircuitBreakerBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/ConfigClassTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/ConfigGlobalTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/ConfigMethodTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/MethodAntnTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/MetricsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/RetryBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/RetryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/SyntheticBeanExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/TimeoutBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/TimeoutTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/UnitTestException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/main/java/io/helidon/microprofile/graphql/server/GraphQlBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/main/java/io/helidon/microprofile/graphql/server/JsonUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/main/java/io/helidon/microprofile/graphql/server/SchemaArgument.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/main/java/io/helidon/microprofile/graphql/server/SchemaDirective.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/main/java/io/helidon/microprofile/graphql/server/SchemaEnum.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/main/java/io/helidon/microprofile/graphql/server/SchemaFieldDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/main/java/io/helidon/microprofile/graphql/server/SchemaType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/main/java/io/helidon/microprofile/graphql/server/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/SchemaArgumentTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/SchemaDirectiveTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/SchemaFieldDefinitionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/SchemaGeneratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/SchemaScalarTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/SchemaTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/db/TestDB.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/exception/ExceptionQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/mutations/SimpleMutations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/mutations/VoidMutations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/ArrayAndListQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/DateTimeScalarQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/DefaultValueQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/DescriptionQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/DuplicateNameQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/InvalidQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/MapQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/NumberFormatQueriesAndMutations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/OddNamedQueriesAndMutations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/PropertyNameQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/QueriesWithIgnorable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/SimpleQueriesWithArgs.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/SimpleQueriesWithSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/queries/VoidQueries.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/types/DefaultValuePOJO.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/types/Motorbike.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/types/ObjectWithIgnorableFieldsAndMethods.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/types/SimpleContact.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/types/SimpleContactWithNumberFormats.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/types/Task.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/types/TypeWithMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/graphql/server/src/test/java/io/helidon/microprofile/graphql/server/test/types/TypeWithNameAndJsonbProperty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/health/src/main/java/io/helidon/microprofile/health/BuiltInHealthCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/health/src/main/java/io/helidon/microprofile/health/HealthCheckResponseImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/health/src/main/java/io/helidon/microprofile/health/HealthCheckResponseProviderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/health/src/main/java/io/helidon/microprofile/health/JvmRuntimeProducers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/health/src/main/java/io/helidon/microprofile/health/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/health/src/test/java/io/helidon/microprofile/health/JvmRuntimeProducersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/ClaimValueWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/Impl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JsonWebTokenImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthProviderService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/jwt-auth/src/test/java/io/helidon/microprofile/jwt/auth/JsonWebTokenImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/jwt-auth/src/test/java/io/helidon/microprofile/jwt/auth/JwtAuthProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/jwt-auth/src/test/java/io/helidon/microprofile/jwt/auth/JwtAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/lra/jax-rs/src/main/java/io/helidon/microprofile/lra/HandlerService.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/CoordinatorHeaderPropagationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/LoadBalancedCoordinatorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/CommonAfter.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/DontEnd.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/JaxRsCompleteOrCompensate.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/NonJaxRsCompleteOrCompensate.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/NonJaxRsCompleteOrCompensateCS.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/NonJaxRsCompleteOrCompensateSingle.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/Recovery.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/RecoveryStatus.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/StartAndAfter.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/Timeout.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/resources/Work.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/AbstractMessagingMethod.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/AdHocConfigBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ConfigurableConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/IncomingConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/MessagingDeploymentException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/MessagingException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/OutgoingConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ProxyProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ProxySubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/PublishingConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/SubscribingConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/UnwrapProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/WrappingPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/AbstractCDITest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/AssertThrowException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/AssertableTestBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/AsyncTestBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/ConnectorConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/CountableTestBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/MessageUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/SignatureTypeConsistencyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/UnwrapProcessorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/ConnectedBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/ConnectedOnlyProcessorBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/ConnectedProcessorBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/ConnectorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/IterableConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/LeakingPayloadBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/AbstractShapeTestBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/BadSignaturePublisherPayloadBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV2Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV3Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV5Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/CompletionStageV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/InternalChannelsBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/InternalChannelsV2Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/InvalidIncomingMethodBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/MultipleProcessorBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/MultipleTypeProcessorChainV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/MultipleTypeProcessorChainV2Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/NotConnectedIncommingChannelBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/NotConnectedOutgoingChannelBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ProcessorBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ProcessorBuilderBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/PullForEachBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/InvalidAckStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingMsgManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingMsgNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingMsgPostProcessExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingMsgPreAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingPaylNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingPaylPostExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingPaylPostImplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingPaylPreAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingSubscriberBuilderMsgManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingSubscriberBuilderMsgNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingSubscriberBuilderMsgPostExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingSubscriberBuilderMsgPreAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingSubscriberMsgManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingSubscriberMsgNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingSubscriberMsgPostExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingSubscriberMsgPreAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/incoming/IncomingSubscriberPaylPostImplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorMsg2ComplStageManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorMsg2ComplStageNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorMsg2ComplStagePrepAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorMsg2MsgManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorMsg2MsgNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorMsg2MsgPrepExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorMsg2MsgPrepManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPayl2PaylPostProcessExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPayl2PaylPostProcessImplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPayl2PaylPreProcessAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorBuilderMsg2MsgManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorBuilderMsg2MsgNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorBuilderMsg2MsgPrepExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorBuilderPayl2PaylNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorBuilderPayl2PaylPrepImplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorMsg2MsgManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorMsg2MsgNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorMsg2MsgPrepExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorPayl2PaylNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorProcessorPayl2PaylPrepImplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherBuilderMsg2MsgManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherBuilderMsg2MsgNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherBuilderMsg2MsgPrepExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherBuilderPayl2PaylNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherBuilderPayl2PaylPrepExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherBuilderPayl2PaylPrepImplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherMsg2MsgManualAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherMsg2MsgNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherMsg2MsgPrepExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherPayl2PaylNoneAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherPayl2PaylPrepExplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ack/processor/ProcessorPublisherPayl2PaylPrepImplicitAckBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherBuilderTransformerV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherBuilderTransformerV2Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherFromPublisherV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherFromPublisherV2Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherPayloadV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherPayloadV3Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherPayloadV4Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherProcessorV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherProcessorV2Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherProcessorV3Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherProcessorV4Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherSubscriberBuilderV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherSubscriberBuilderV2Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherSubscriberV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/publisher/PublisherSubscriberV2Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/subscriber/SubscriberPublMsgToPaylBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/subscriber/SubscriberPublMsgToPaylRetPaylBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/subscriber/SubscriberPublMsgToSubsBuilderPaylBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/subscriber/SubscriberPublMsgToSubsPaylBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/subscriber/SubscriberPublToSubsBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/subscriber/SubscriberPublToSubsBuilderBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/health/src/main/java/io/helidon/microprofile/messaging/health/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/health/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/health/src/test/java/io/helidon/microprofile/messaging/health/TestMessagingBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/health/src/test/java/io/helidon/microprofile/messaging/health/TestSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/InterceptorTimed.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/SyntheticRestRequestWorkItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/HelloWorldAsyncResponseWithRestRequestTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/ReusabilityInterceptorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/TestBasicPerformanceIndicators.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/VetoedJaxRsButOtherwiseUnmeasuredResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/VetoedResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/oidc/src/main/java/io/helidon/microprofile/oidc/OidcCdiExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/todo-app/backend/src/test/java/io/helidon/demo/todos/backend/BackendTests.java
Patch:
@@ -47,7 +47,7 @@
 
 @HelidonTest
 @Configuration(useExisting = true)
-// Embedded cassandra does not start on Java 17
+// Embedded cassandra does not start on Java 17+
 @Disabled("3.0.0-JAKARTA")
 class BackendTests {
 

File: nima/webserver/webserver/src/test/java/io/helidon/nima/webserver/ThreadPerTaskExecutorTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import io.helidon.common.task.HelidonTaskExecutor;
 import io.helidon.common.task.InterruptableTask;
+
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.common.testing.junit5.MatcherWithRetry.assertThatWithRetry;
@@ -97,7 +98,6 @@ public void run() {
 
     private static HelidonTaskExecutor newExecutor() {
         return ThreadPerTaskExecutor.create(Thread.ofVirtual()
-                .allowSetThreadLocals(true)
                 .inheritInheritableThreadLocals(false)
                 .factory());
     }

File: inject/api/src/main/java/io/helidon/inject/api/InjectionServices.java
Patch:
@@ -184,7 +184,7 @@ default Services services() {
      * <p>
      * If the service provider does not support shutdown an empty is returned.
      * <p>
-     * The default reference implementation for Injection will return a map of all service types that were deactivated to any
+     * The default reference implementation will return a map of all service types that were deactivated to any
      * throwable that was observed during that services shutdown sequence.
      * <p>
      * The order in which services are deactivated is dependent upon whether the {@link #activationLog()} is available.
@@ -194,6 +194,8 @@ default Services services() {
      * the same {@link RunLevel} value then the ordering will be based upon the implementation's comparator.
      * <p>
      * When shutdown returns, it is guaranteed that all services were shutdown, or failed to achieve shutdown.
+     * <p>
+     * The shutdown timeout from {@link InjectionServicesConfigBlueprint#shutdownTimeout()} will be applied as the default.
      *
      * @return a map of all managed service types deactivated to results of deactivation, or empty if shutdown is not supported
      */

File: inject/runtime/src/main/java/io/helidon/inject/runtime/DefaultServices.java
Patch:
@@ -437,15 +437,15 @@ void bind(InjectionServices injectionServices,
               DefaultInjectionPlanBinder binder,
               Application app) {
         String appName = app.named().orElse(app.getClass().getName());
-        boolean isLoggable = DefaultInjectionServices.LOGGER.isLoggable(System.Logger.Level.INFO);
+        boolean isLoggable = DefaultInjectionServices.LOGGER.isLoggable(System.Logger.Level.DEBUG);
         if (isLoggable) {
-            DefaultInjectionServices.LOGGER.log(System.Logger.Level.INFO, "starting binding application: " + appName);
+            DefaultInjectionServices.LOGGER.log(System.Logger.Level.DEBUG, "Starting binding application: " + appName);
         }
         try {
             app.configure(binder);
             bind(createServiceProvider(app, injectionServices));
             if (isLoggable) {
-                DefaultInjectionServices.LOGGER.log(System.Logger.Level.INFO, "finished binding application: " + appName);
+                DefaultInjectionServices.LOGGER.log(System.Logger.Level.DEBUG, "Finished binding application: " + appName);
             }
         } catch (Exception e) {
             throw new InjectionException("Failed to process: " + app, e);

File: nima/grpc/webserver/src/main/java/io/helidon/nima/grpc/webserver/GrpcProtocolSelector.java
Patch:
@@ -23,6 +23,7 @@
 import io.helidon.nima.http2.Http2Settings;
 import io.helidon.nima.http2.Http2StreamState;
 import io.helidon.nima.http2.Http2StreamWriter;
+import io.helidon.nima.http2.StreamFlowControl;
 import io.helidon.nima.http2.webserver.spi.Http2SubProtocolSelector;
 import io.helidon.nima.http2.webserver.spi.SubProtocolResult;
 import io.helidon.nima.webserver.ConnectionContext;
@@ -52,6 +53,7 @@ public SubProtocolResult subProtocol(ConnectionContext ctx,
                                          int streamId,
                                          Http2Settings serverSettings,
                                          Http2Settings clientSettings,
+                                         StreamFlowControl flowControl,
                                          Http2StreamState currentStreamState,
                                          Router router) {
         if (prologue.method() != Http.Method.POST) {
@@ -80,6 +82,7 @@ public SubProtocolResult subProtocol(ConnectionContext ctx,
                                                                      streamId,
                                                                      serverSettings,
                                                                      clientSettings,
+                                                                     flowControl,
                                                                      currentStreamState,
                                                                      route));
             }

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/Http2ConfigBlueprint.java
Patch:
@@ -63,15 +63,15 @@ interface Http2ConfigBlueprint extends ProtocolConfig {
     long maxConcurrentStreams();
 
     /**
-     * This setting indicates the sender's maximum window size in bytes for connection-level flow control.
+     * This setting indicates the sender's maximum window size in bytes for stream-level flow control.
      * Default and maximum value is 2<sup>31</sup>-1 = 2147483647 bytes. This setting affects the window size
      * of HTTP/2 connection.
      * Any value greater than 2147483647 causes an error. Any value smaller than initial window size causes an error.
      * See RFC 9113 section 6.9.1 for details.
      *
      * @return maximum window size in bytes
      */
-    @ConfiguredOption("65635")
+    @ConfiguredOption("1048576")
     int initialWindowSize();
 
     /**

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/spi/Http2SubProtocolSelector.java
Patch:
@@ -25,6 +25,7 @@
 import io.helidon.nima.http2.Http2StreamState;
 import io.helidon.nima.http2.Http2StreamWriter;
 import io.helidon.nima.http2.Http2WindowUpdate;
+import io.helidon.nima.http2.StreamFlowControl;
 import io.helidon.nima.webserver.ConnectionContext;
 import io.helidon.nima.webserver.Router;
 
@@ -47,6 +48,7 @@ public interface Http2SubProtocolSelector {
      * @param streamId           stream id
      * @param serverSettings     server settings
      * @param clientSettings     client settings
+     * @param streamFlowControl  stream flow control
      * @param currentStreamState current stream state
      * @param router             router
      * @return sub-protocol result
@@ -58,6 +60,7 @@ SubProtocolResult subProtocol(ConnectionContext ctx,
                                   int streamId,
                                   Http2Settings serverSettings,
                                   Http2Settings clientSettings,
+                                  StreamFlowControl streamFlowControl,
                                   Http2StreamState currentStreamState,
                                   Router router);
 

File: nima/tests/integration/http2/server/src/test/java/io/helidon/nima/tests/integration/http2/webserver/FlowControlTest.java
Patch:
@@ -75,6 +75,8 @@ class FlowControlTest {
     @SetUpServer
     static void setUpServer(WebServerConfig.Builder serverBuilder) {
         serverBuilder
+                .addProtocol(Http2Config.builder()
+                        .initialWindowSize(WindowSize.DEFAULT_WIN_SIZE))
                 .addConnectionSelector(Http2ConnectionSelector.builder()
                                                .http2Config(Http2Config.builder()
                                                                     .initialWindowSize(WindowSize.DEFAULT_WIN_SIZE)

File: common/mapper/src/main/java/io/helidon/common/mapper/MapperManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -237,6 +237,7 @@ public <S, T> Builder addMapper(Mapper<S, T> mapper,
          * @param sourceType generic type of the source instance
          * @param targetType generic type of the target instance
          * @param weight     weight of the mapper
+         * @param qualifiers qualifiers of this mapper, if empty, will be a compatible mapper
          * @param <S>        type of source
          * @param <T>        type of target
          * @return updated builder instance

File: examples/integrations/microstream/greetings-mp/src/test/java/io/helidon/examples/integrations/microstream/greetings/mp/MicrostreamExampleGreetingsMpTest.java
Patch:
@@ -24,7 +24,6 @@
 import jakarta.json.JsonObject;
 import jakarta.ws.rs.client.WebTarget;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 

File: examples/integrations/oci/vault/src/main/java/io/helidon/examples/integrations/oci/vault/OciVaultMain.java
Patch:
@@ -87,6 +87,7 @@ public static void main(String[] args) throws IOException {
                         .error(BmcException.class, (req, res, ex) -> res.status(
                                 ex.getStatusCode()).send(ex.getMessage())))
                 .config(config.get("server"))
+                .build()
                 .start();
 
         System.out.println("WEB server is up! http://localhost:" + server.port());

File: examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/IdcsMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,8 +38,8 @@ public static void main(String[] args) {
         System.out.println("  http://localhost:7987/rest/login");
         System.out.println("Full security with scopes and roles (see IdcsResource.java)");
         System.out.println("  http://localhost:7987/rest/scopes");
-        System.out.println("A protected reactive service (see application.yaml - security.web-server)");
-        System.out.println("  http://localhost:7987/reactive");
+        System.out.println("A protected nima service (see application.yaml - security.web-server)");
+        System.out.println("  http://localhost:7987/nima");
         System.out.println("A protected static resource (see application.yaml - security.web-server");
         System.out.println("  http://localhost:7987/web/resource.html");
     }

File: examples/webserver/basics/src/main/java/io/helidon/webserver/examples/basics/Name.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.reactive.webserver.examples.basics;
+package io.helidon.webserver.examples.basics;
 
 /**
  * Represents a simple entity - the name.

File: examples/webserver/basics/src/main/java/io/helidon/webserver/examples/basics/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,6 @@
  */
 
 /**
- * Fault tolerance for Helidon SE reactive implementation.
+ * A set of small usage examples. Start with {@link io.helidon.webserver.examples.basics.Main Main} class.
  */
-package io.helidon.reactive.faulttolerance;
+package io.helidon.webserver.examples.basics;

File: examples/webserver/comment-aas/src/main/java/io/helidon/webserver/examples/comments/ProfanityDetector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.reactive.webserver.examples.comments;
+package io.helidon.webserver.examples.comments;
 
 /**
  * Simple profanity detection utility class.

File: examples/webserver/comment-aas/src/main/java/io/helidon/webserver/examples/comments/ProfanityException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.reactive.webserver.examples.comments;
+package io.helidon.webserver.examples.comments;
 
 /**
  * Thrown to indicate that a message contains illegal argot word.

File: examples/webserver/comment-aas/src/main/java/io/helidon/webserver/examples/comments/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,4 +20,4 @@
  *
  * <p>This WEB application provides possibility to store and read comment related to various topics.
  */
-package io.helidon.reactive.webserver.examples.comments;
+package io.helidon.webserver.examples.comments;

File: examples/webserver/fault-tolerance/src/main/java/io/helidon/webserver/examples/faulttolerance/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,4 +17,4 @@
 /**
  * Example of Fault Tolerance usage in webserver.
  */
-package io.helidon.reactive.webserver.examples.faulttolerance;
+package io.helidon.webserver.examples.faulttolerance;

File: examples/dbclient/common/src/main/java/io/helidon/examples/dbclient/common/Pokemon.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 import io.helidon.common.Reflected;
 
 /**
- * POJO representing a very simplified Pokemon.
+ * POJO representing a very simplified Pokémon.
  */
 @Reflected
 public class Pokemon {
@@ -33,7 +33,7 @@ public Pokemon() {
     }
 
     /**
-     * Create pokemon with name and type.
+     * Create Pokémon with name and type.
      *
      * @param name name of the beast
      * @param type type of the beast

File: examples/dbclient/common/src/main/java/io/helidon/examples/dbclient/common/PokemonMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,8 @@
 import java.util.Optional;
 
 import io.helidon.common.Weight;
-import io.helidon.reactive.dbclient.DbMapper;
-import io.helidon.reactive.dbclient.spi.DbMapperProvider;
+import io.helidon.dbclient.DbMapper;
+import io.helidon.dbclient.spi.DbMapperProvider;
 
 /**
  * Provides pokemon mappers.

File: examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/PokemonMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,8 @@
 import java.util.Optional;
 
 import io.helidon.common.Weight;
-import io.helidon.reactive.dbclient.DbMapper;
-import io.helidon.reactive.dbclient.spi.DbMapperProvider;
+import io.helidon.dbclient.DbMapper;
+import io.helidon.dbclient.spi.DbMapperProvider;
 
 /**
  * Provides pokemon mappers.

File: lra/coordinator/server/src/main/java/module-info.java
Patch:
@@ -26,8 +26,8 @@
     requires io.helidon.nima.observe.metrics;
     requires io.helidon.nima.observe.health;
     requires io.helidon.scheduling;
-    requires io.helidon.reactive.dbclient;
-    requires io.helidon.reactive.dbclient.jdbc;
+    requires io.helidon.dbclient;
+    requires io.helidon.dbclient.jdbc;
     requires io.helidon.health.checks;
     requires io.helidon.logging.common;
     requires io.helidon.metrics.api;

File: inject/tests/resources-inject/src/main/java/io/helidon/inject/tests/inject/stacking/MostOuterCommonContractImpl.java
Patch:
@@ -26,10 +26,10 @@
 
 @Singleton
 @Weight(Weighted.DEFAULT_WEIGHT + 3)
-public class MostOuterInterceptedImpl extends OuterInterceptedImpl {
+public class MostOuterCommonContractImpl extends OuterCommonContractImpl {
 
     @Inject
-    public MostOuterInterceptedImpl(Optional<Intercepted> inner) {
+    public MostOuterCommonContractImpl(Optional<CommonContract> inner) {
         super(inner);
     }
 

File: inject/tests/resources-inject/src/main/java/io/helidon/inject/tests/inject/stacking/OuterCommonContractImpl.java
Patch:
@@ -26,10 +26,10 @@
 
 @Singleton
 @Weight(Weighted.DEFAULT_WEIGHT + 2)
-public class OuterInterceptedImpl extends InterceptedImpl {
+public class OuterCommonContractImpl extends CommonContractImpl {
 
     @Inject
-    public OuterInterceptedImpl(Optional<Intercepted> inner) {
+    public OuterCommonContractImpl(Optional<CommonContract> inner) {
         super(inner);
     }
 

File: common/processor/processor/src/main/java/io/helidon/common/processor/GeneratedAnnotationHandler.java
Patch:
@@ -90,7 +90,7 @@ public static String createString(TypeName generator,
                 .toString();
     }
 
-    // @Generated(value = "io.helidon.pico.tools.ActivatorCreatorDefault", comments = "version=1")
+    // @Generated(value = "io.helidon.inject.tools.ActivatorCreatorDefault", comments = "version=1")
     private static class DefaultProvider implements GeneratedAnnotationProvider {
         private static final TypeName GENERATED = TypeName.create("io.helidon.common.Generated");
 

File: config/config/src/main/java/io/helidon/config/ConfigProducer.java
Patch:
@@ -25,7 +25,7 @@
 import io.helidon.common.config.ConfigValue;
 import io.helidon.common.config.GlobalConfig;
 import io.helidon.config.spi.ConfigSource;
-import io.helidon.pico.api.ExternalContracts;
+import io.helidon.inject.api.ExternalContracts;
 
 import jakarta.inject.Inject;
 import jakarta.inject.Provider;

File: config/config/src/main/java/io/helidon/config/spi/ConfigSource.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.pico.api.Contract;
+import io.helidon.inject.api.Contract;
 
 /**
  * {@link Source} of configuration.

File: config/tests/service-registry/src/test/java/io/helidon/config/tests/service/registry/TestConfigSource.java
Patch:
@@ -24,7 +24,7 @@
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigSource;
 import io.helidon.config.spi.NodeConfigSource;
-import io.helidon.pico.api.ExternalContracts;
+import io.helidon.inject.api.ExternalContracts;
 
 import jakarta.inject.Singleton;
 

File: examples/inject/application/src/main/java/io/helidon/examples/inject/application/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Examples of multi-module Application generation in Pico.
+ * Examples of multi-module Application generation in Injection.
  */
-package io.helidon.examples.pico.application;
+package io.helidon.examples.inject.application;

File: examples/inject/basics/src/main/java/io/helidon/examples/inject/basics/Big.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.basics;
+package io.helidon.examples.inject.basics;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;

File: examples/inject/basics/src/main/java/io/helidon/examples/inject/basics/BigHammer.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.basics;
+package io.helidon.examples.inject.basics;
 
 import jakarta.inject.Singleton;
 

File: examples/inject/basics/src/main/java/io/helidon/examples/inject/basics/Hammer.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.basics;
+package io.helidon.examples.inject.basics;
 
 import io.helidon.common.Weight;
 import io.helidon.common.Weighted;
 
 import jakarta.inject.Singleton;
 
 /**
- * By adding the {@link Singleton} annotation results in Hammer becoming a Pico service. Services can be looked up
+ * By adding the {@link Singleton} annotation results in Hammer becoming a service. Services can be looked up
  * programmatically or declaratively injected via {@link jakarta.inject.Inject}.
  * <p>
  * Here {@link Weight} is used that is higher than the default, making it more preferred in weighted rankings.

File: examples/inject/basics/src/main/java/io/helidon/examples/inject/basics/Little.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.basics;
+package io.helidon.examples.inject.basics;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;

File: examples/inject/basics/src/main/java/io/helidon/examples/inject/basics/LittleHammer.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.basics;
+package io.helidon.examples.inject.basics;
 
 import jakarta.inject.Singleton;
 

File: examples/inject/basics/src/main/java/io/helidon/examples/inject/basics/Tool.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.basics;
+package io.helidon.examples.inject.basics;
 
-import io.helidon.pico.api.Contract;
+import io.helidon.inject.api.Contract;
 
 /**
  * An example Tool interface contract.

File: examples/inject/basics/src/main/java/io/helidon/examples/inject/basics/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Examples of programmatic and declarative usages of Pico.
+ * Examples of programmatic and declarative usages of Injection.
  */
-package io.helidon.examples.pico.basics;
+package io.helidon.examples.inject.basics;

File: examples/inject/configdriven/src/main/java/io/helidon/examples/inject/configdriven/Drill.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.configdriven;
+package io.helidon.examples.inject.configdriven;
 
 import java.util.Objects;
 
-import io.helidon.examples.pico.basics.Tool;
-import io.helidon.pico.configdriven.api.ConfigDriven;
+import io.helidon.examples.inject.basics.Tool;
+import io.helidon.inject.configdriven.api.ConfigDriven;
 
 import jakarta.annotation.PostConstruct;
 import jakarta.inject.Inject;

File: examples/inject/configdriven/src/main/java/io/helidon/examples/inject/configdriven/DrillConfigBlueprint.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.configdriven;
+package io.helidon.examples.inject.configdriven;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
-import io.helidon.pico.configdriven.api.ConfigBean;
+import io.helidon.inject.configdriven.api.ConfigBean;
 
 @ConfigBean(repeatable = true)
 @Prototype.Blueprint

File: examples/inject/configdriven/src/main/java/io/helidon/examples/inject/configdriven/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Pico's config-driven-service API.
+ * Examples of Config-Driven Services.
  */
-package io.helidon.pico.configdriven.runtime;
+package io.helidon.examples.inject.configdriven;

File: examples/inject/interceptors/src/main/java/io/helidon/examples/inject/interceptors/ScrewDriver.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.interceptors;
+package io.helidon.examples.inject.interceptors;
 
 import jakarta.inject.Singleton;
 

File: examples/inject/interceptors/src/main/java/io/helidon/examples/inject/interceptors/Turn.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.interceptors;
+package io.helidon.examples.inject.interceptors;
 
-import io.helidon.pico.api.InterceptedTrigger;
+import io.helidon.inject.api.InterceptedTrigger;
 
 @InterceptedTrigger
 public @interface Turn {

File: examples/inject/interceptors/src/main/java/io/helidon/examples/inject/interceptors/TurningTool.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.interceptors;
+package io.helidon.examples.inject.interceptors;
 
-import io.helidon.examples.pico.basics.Tool;
-import io.helidon.pico.api.Contract;
+import io.helidon.examples.inject.basics.Tool;
+import io.helidon.inject.api.Contract;
 
 @Contract
 public interface TurningTool extends Tool {

File: examples/inject/providers/src/main/java/io/helidon/examples/inject/providers/AngleGrinderSaw.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.providers;
+package io.helidon.examples.inject.providers;
 
 import java.util.Optional;
 
-import io.helidon.examples.pico.basics.Little;
+import io.helidon.examples.inject.basics.Little;
 
 import jakarta.annotation.PostConstruct;
 import jakarta.inject.Inject;

File: examples/inject/providers/src/main/java/io/helidon/examples/inject/providers/CircularSaw.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.providers;
+package io.helidon.examples.inject.providers;
 
 import java.util.Optional;
 
-import io.helidon.pico.api.RunLevel;
+import io.helidon.inject.api.RunLevel;
 
 import jakarta.annotation.PostConstruct;
 import jakarta.inject.Inject;

File: examples/inject/providers/src/main/java/io/helidon/examples/inject/providers/HandSaw.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.providers;
+package io.helidon.examples.inject.providers;
 
 import java.util.Optional;
 

File: examples/inject/providers/src/main/java/io/helidon/examples/inject/providers/NailProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.providers;
+package io.helidon.examples.inject.providers;
 
 import jakarta.inject.Provider;
 import jakarta.inject.Singleton;

File: examples/inject/providers/src/main/java/io/helidon/examples/inject/providers/SizedBlade.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.providers;
+package io.helidon.examples.inject.providers;
 
 import java.util.Objects;
 

File: examples/inject/providers/src/main/java/io/helidon/examples/inject/providers/StandardNail.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.providers;
+package io.helidon.examples.inject.providers;
 
 import java.util.concurrent.atomic.AtomicInteger;
 

File: examples/inject/providers/src/main/java/io/helidon/examples/inject/providers/TableSaw.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.providers;
+package io.helidon.examples.inject.providers;
 
 import java.util.Optional;
 
-import io.helidon.examples.pico.basics.Big;
-import io.helidon.pico.api.RunLevel;
+import io.helidon.examples.inject.basics.Big;
+import io.helidon.inject.api.RunLevel;
 
 import jakarta.annotation.PostConstruct;
 import jakarta.inject.Inject;

File: examples/inject/providers/src/main/java/io/helidon/examples/inject/providers/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Pico Config-Driven processor.
+ * Examples of providers in Injection.
  */
-package io.helidon.pico.configdriven.processor;
+package io.helidon.examples.inject.providers;

File: examples/inject/providers/src/test/java/io/helidon/examples/inject/providers/AllenWrench.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.providers;
+package io.helidon.examples.inject.providers;
 
 import jakarta.inject.Singleton;
 

File: examples/inject/providers/src/test/java/io/helidon/examples/inject/providers/Wrench.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.examples.pico.providers;
+package io.helidon.examples.inject.providers;
 
-import io.helidon.examples.pico.basics.Tool;
+import io.helidon.examples.inject.basics.Tool;
 
 public interface Wrench extends Tool {
 

File: examples/nima/fault-tolerance/src/main/java/io/helidon/examples/nima/faulttolerance/GreetEndpoint.java
Patch:
@@ -20,8 +20,8 @@
 
 import io.helidon.common.http.Endpoint;
 import io.helidon.common.http.Http;
+import io.helidon.inject.api.InjectionException;
 import io.helidon.nima.faulttolerance.FaultTolerance;
-import io.helidon.pico.api.PicoException;
 
 import jakarta.inject.Singleton;
 
@@ -48,15 +48,15 @@ String greet() {
     @Endpoint.GET
     @Endpoint.Path("/{name}")
     @FaultTolerance.Retry(name = "someName", calls = 2, delayTime = 1, timeUnit = ChronoUnit.SECONDS, overallTimeout = 10,
-                          applyOn = PicoException.class, skipOn = {OutOfMemoryError.class, StackOverflowError.class})
+                          applyOn = InjectionException.class, skipOn = {OutOfMemoryError.class, StackOverflowError.class})
     @FaultTolerance.Fallback("greetNamedFallback")
     @FaultTolerance.CircuitBreaker
     @FaultTolerance.Bulkhead(name = "bulkhead-it")
     String greetNamed(@Endpoint.PathParam("name") String name,
                       @Endpoint.QueryParam(value = "throw", defaultValue = "false") String shouldThrow,
                       @Endpoint.HeaderParam(Http.Header.HOST_STRING) String hostHeader) {
         if ("true".equalsIgnoreCase(shouldThrow)) {
-            throw new PicoException("Failed on purpose");
+            throw new InjectionException("Failed on purpose");
         }
         return greeting + " " + name + "! Requested host: " + hostHeader;
     }

File: examples/nima/fault-tolerance/src/main/java/io/helidon/examples/nima/faulttolerance/PlatformExecutorProvider.java
Patch:
@@ -27,8 +27,8 @@
 import jakarta.inject.Singleton;
 
 /**
- * This service will be part of Níma on Pico module.
- * It may use pico to get config sources exposed through pico.
+ * This service will be part of Níma on Injection module.
+ * It may use Injection to get config sources exposed through pico.
  */
 @Singleton
 @Named("platform-executor")

File: inject/api/src/main/java/io/helidon/inject/api/AccessModifier.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * The access describing the target injection point.

File: inject/api/src/main/java/io/helidon/inject/api/ActivationLog.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Optional;
 

File: inject/api/src/main/java/io/helidon/inject/api/ActivationLogEntryBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.time.Instant;
 import java.util.Optional;

File: inject/api/src/main/java/io/helidon/inject/api/ActivationLogQuery.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.List;
 

File: inject/api/src/main/java/io/helidon/inject/api/ActivationPhaseReceiver.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * A receiver of events from the {@link Services} registry and providers held by the service registry.
  * <p>
  * Note that only {@link ServiceProvider}'s implement this contract that are also bound to the global
- * {@link io.helidon.pico.api.Services} registry are currently capable of receiving events.
+ * {@link Services} registry are currently capable of receiving events.
  *
  * @see ServiceProviderBindable
  */

File: inject/api/src/main/java/io/helidon/inject/api/ActivationRequestBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Optional;
 

File: inject/api/src/main/java/io/helidon/inject/api/ActivationResultBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Map;
 import java.util.Optional;
@@ -81,7 +81,7 @@ interface ActivationResultBlueprint {
      *
      * @return the resolved injection plan map
      */
-    Map<String, io.helidon.pico.spi.InjectionPlan> injectionPlans();
+    Map<String, io.helidon.inject.spi.InjectionPlan> injectionPlans();
 
     /**
      * The dependencies that were resolved or loaded, key'ed by each element's {@link ServiceProvider#id()}.

File: inject/api/src/main/java/io/helidon/inject/api/ActivationStatus.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * The activation status. This status applies to the {@link ActivationLogEntry} record.

File: inject/api/src/main/java/io/helidon/inject/api/Activator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Activators are responsible for lifecycle creation and lazy activation of service providers. They are responsible for taking the
@@ -36,7 +36,7 @@
  *  <li>Control over creation (i.e., invoke the constructor non-reflectively).</li>
  *  <li>Control over gathering the service requisite dependencies (ctor, field, setters) and optional activation of those.</li>
  *  <li>Invocation of any {@link PostConstructMethod}.</li>
- *  <li>Responsible to logging to the {@link ActivationLog} - see {@link PicoServices#activationLog()}.</li>
+ *  <li>Responsible to logging to the {@link ActivationLog} - see {@link InjectionServices#activationLog()}.</li>
  * </ol>
  *
  * @see DeActivator

File: inject/api/src/main/java/io/helidon/inject/api/Application.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * An Application instance, if available at runtime, will be expected to provide a blueprint for all service provider's injection

File: inject/api/src/main/java/io/helidon/inject/api/CallingContextBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -23,12 +23,12 @@
 import io.helidon.builder.api.Prototype;
 
 /**
- * For internal use only to Helidon. Applicable when {@link io.helidon.pico.api.PicoServices#TAG_DEBUG} is enabled.
+ * For internal use only to Helidon. Applicable when {@link InjectionServices#TAG_DEBUG} is enabled.
  */
 @Prototype.Blueprint(builderInterceptor = CallingContextBlueprint.BuilderInterceptor.class)
 interface CallingContextBlueprint {
     /**
-     * Only populated when {@link io.helidon.pico.api.PicoServices#TAG_DEBUG} is set.
+     * Only populated when {@link InjectionServices#TAG_DEBUG} is set.
      *
      * @return the stack trace for who initialized
      */

File: inject/api/src/main/java/io/helidon/inject/api/ClassNamed.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;

File: inject/api/src/main/java/io/helidon/inject/api/CommonQualifiers.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import io.helidon.common.types.TypeName;
 

File: inject/api/src/main/java/io/helidon/inject/api/ContextualServiceQueryBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Objects;
 import java.util.Optional;
@@ -32,7 +32,7 @@
 interface ContextualServiceQueryBlueprint {
 
     /**
-     * The criteria to use for the lookup into {@link io.helidon.pico.api.Services}.
+     * The criteria to use for the lookup into {@link Services}.
      *
      * @return the service info criteria
      */

File: inject/api/src/main/java/io/helidon/inject/api/DeActivationRequestBlueprint.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.ConfiguredOption;
 
 /**
- * Request to deactivate a {@link io.helidon.pico.api.ServiceProvider}.
+ * Request to deactivate a {@link ServiceProvider}.
  */
 @Prototype.Blueprint
 interface DeActivationRequestBlueprint {

File: inject/api/src/main/java/io/helidon/inject/api/DeActivator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * DeActivators are responsible for lifecycle, transitioning a {@link ServiceProvider} through its

File: inject/api/src/main/java/io/helidon/inject/api/DependenciesInfoBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.List;
 import java.util.Map;
@@ -29,7 +29,7 @@
 
 /**
  * Represents a per {@link ServiceInfo} mapping of {@link DependencyInfo}'s. These are typically assigned to a
- * {@link ServiceProvider} via compile-time code generation within the Pico framework.
+ * {@link ServiceProvider} via compile-time code generation within the Injection framework.
  */
 @Prototype.Blueprint
 interface DependenciesInfoBlueprint {
@@ -39,7 +39,7 @@ interface DependenciesInfoBlueprint {
      * @return map from the service info to its dependencies
      */
     @Prototype.Singular("serviceInfoDependency")
-    Map<ServiceInfoCriteria, Set<io.helidon.pico.api.DependencyInfo>> serviceInfoDependencies();
+    Map<ServiceInfoCriteria, Set<DependencyInfo>> serviceInfoDependencies();
 
     /**
      * Optionally, the service type name aggregating {@link #allDependencies()}.

File: inject/api/src/main/java/io/helidon/inject/api/DependencyInfoBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Optional;
 import java.util.Set;
@@ -52,7 +52,7 @@ interface DependencyInfoBlueprint {
     Set<InjectionPointInfo> injectionPointDependencies();
 
     /**
-     * The {@link io.helidon.pico.api.ServiceProvider} that this dependency is optional resolved and bound to. All dependencies
+     * The {@link ServiceProvider} that this dependency is optional resolved and bound to. All dependencies
      * from {@link #injectionPointDependencies()} will be bound to this resolution.
      *
      * @return the optional resolved and bounded service provider

File: inject/api/src/main/java/io/helidon/inject/api/DependencyInfoComparator.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.io.Serializable;
 import java.util.Comparator;
 
 /**
- * Comparator appropriate for {@link io.helidon.pico.api.DependencyInfo}.
+ * Comparator appropriate for {@link DependencyInfo}.
  */
 public class DependencyInfoComparator implements java.util.Comparator<DependencyInfo>, Serializable {
     private static final Comparator<DependencyInfo> INSTANCE = new DependencyInfoComparator();

File: inject/api/src/main/java/io/helidon/inject/api/ElementInfoBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Optional;
 import java.util.Set;

File: inject/api/src/main/java/io/helidon/inject/api/ElementKind.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * The kind of injection target.

File: inject/api/src/main/java/io/helidon/inject/api/Event.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * A lifecycle activation event.

File: inject/api/src/main/java/io/helidon/inject/api/ExternalContracts.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;

File: inject/api/src/main/java/io/helidon/inject/api/InjectionPointInfoBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.common.types.TypeName;

File: inject/api/src/main/java/io/helidon/inject/api/Intercepted.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Inherited;
@@ -27,7 +27,7 @@
 /**
  * Indicates that type identified by {@link #value()} is being intercepted.
  *
- * @see io.helidon.pico.api.Interceptor
+ * @see Interceptor
  */
 @Documented
 @Retention(RetentionPolicy.CLASS)

File: inject/api/src/main/java/io/helidon/inject/api/InterceptedTrigger.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -25,8 +25,8 @@
 /**
  * Meta-annotation for an annotation that will trigger services annotated with it to become intercepted.
  *
- * @see io.helidon.pico.api.Interceptor
- * @see io.helidon.pico.api.Intercepted
+ * @see Interceptor
+ * @see Intercepted
  */
 @Documented
 @Retention(RetentionPolicy.CLASS)

File: inject/api/src/main/java/io/helidon/inject/api/Interceptor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Implementors of this contract must be {@link jakarta.inject.Named} according to the {@link Intercepted}

File: inject/api/src/main/java/io/helidon/inject/api/InternalBootstrapBlueprint.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Optional;
 
 import io.helidon.builder.api.Prototype;
 
 /**
- * Internal bootstrap is what we store when {@link io.helidon.pico.api.PicoServices#globalBootstrap(Bootstrap)} is used.
+ * Internal bootstrap is what we store when {@link InjectionServices#globalBootstrap(Bootstrap)} is used.
  */
 @Prototype.Blueprint(builderInterceptor = InternalBootstrapBlueprint.BuilderInterceptor.class)
 interface InternalBootstrapBlueprint {
@@ -34,7 +34,7 @@ interface InternalBootstrapBlueprint {
     Optional<Bootstrap> bootStrap();
 
     /**
-     * Only populated when {@link io.helidon.pico.api.PicoServices#TAG_DEBUG} is set.
+     * Only populated when {@link InjectionServices#TAG_DEBUG} is set.
      *
      * @return the calling context
      */

File: inject/api/src/main/java/io/helidon/inject/api/InvocationContextBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.List;
 import java.util.Map;

File: inject/api/src/main/java/io/helidon/inject/api/InvocationException.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Wraps any checked exceptions that are thrown during the {@link Interceptor} invocations.
  */
-public class InvocationException extends PicoServiceProviderException {
+public class InvocationException extends InjectionServiceProviderException {
 
     /**
      * Tracks whether the target being intercepted was called once successfully - meaning that the target was called and it

File: inject/api/src/main/java/io/helidon/inject/api/MetricsBlueprint.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Optional;
 
 import io.helidon.builder.api.Prototype;
 
 /**
- * Pico Metrics.
+ * Metrics.
  */
 @Prototype.Blueprint
 interface MetricsBlueprint {
@@ -44,7 +44,7 @@ interface MetricsBlueprint {
      * The total number of {@code Services::lookup()} calls that were attempted against the lookup cache. This will be empty
      * if caching is disabled.
      *
-     * @see io.helidon.pico.api.PicoServicesConfig
+     * @see InjectionServicesConfig
      * @return cache lookup count
      */
     Optional<Integer> cacheLookupCount();

File: inject/api/src/main/java/io/helidon/inject/api/ModuleComponent.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Optional;
 

File: inject/api/src/main/java/io/helidon/inject/api/OptionallyNamed.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Optional;
 

File: inject/api/src/main/java/io/helidon/inject/api/Phase.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Forms a progression of full activation and deactivation.
@@ -100,7 +100,7 @@ public enum Phase {
      * Determines whether this phase passes the gate for whether deactivation (PreDestroy) can be called.
      *
      * @return true if this phase is eligible to be included in shutdown processing
-     * @see PicoServices#shutdown()
+     * @see InjectionServices#shutdown()
      */
     public boolean eligibleForDeactivation() {
         return eligibleForDeactivation;

File: inject/api/src/main/java/io/helidon/inject/api/PostConstructMethod.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Represents the {@link jakarta.annotation.PostConstruct} method.

File: inject/api/src/main/java/io/helidon/inject/api/PreDestroyMethod.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Represents the {@link jakarta.annotation.PreDestroy} method.

File: inject/api/src/main/java/io/helidon/inject/api/Qualifiers.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Collection;
 import java.util.Set;

File: inject/api/src/main/java/io/helidon/inject/api/Resettable.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Implementors of this contract are capable of resetting the state of itself (i.e., clears cache, log entries, etc.).

File: inject/api/src/main/java/io/helidon/inject/api/RunLevel.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -24,7 +24,7 @@
 import static java.lang.annotation.ElementType.TYPE;
 
 /**
- * Indicates the desired startup sequence for a service class. This is not used internally by Pico, but is available as a
+ * Indicates the desired startup sequence for a service class. This is not used internally by Injection, but is available as a
  * convenience to the caller in support for a specific startup sequence for service activations.
  */
 @Documented

File: inject/api/src/main/java/io/helidon/inject/api/ServiceBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Responsible for binding service providers to the service registry.

File: inject/api/src/main/java/io/helidon/inject/api/ServiceInfoBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Objects;
 import java.util.Optional;
@@ -38,7 +38,7 @@ interface ServiceInfoBlueprint extends ServiceInfoBasicsBlueprint, ServiceInfoBa
      * {@link #contractsImplemented()}. External contracts are from other modules other than the module containing
      * the implementation typically.
      *
-     * @see io.helidon.pico.api.ExternalContracts
+     * @see ExternalContracts
      * @return the service external contracts implemented
      */
     @Prototype.Singular("externalContractImplemented")
@@ -70,7 +70,7 @@ interface ServiceInfoBlueprint extends ServiceInfoBasicsBlueprint, ServiceInfoBa
     // when we split ServiceInfo into ServiceInfoCriteria.  Sometimes we need ServiceInfo.matches(criteria), and other times
     // ServiceInfoCriteria.matches(criteria).
     default boolean matches(ServiceInfoCriteria criteria) {
-        if (criteria == PicoServices.EMPTY_CRITERIA) {
+        if (criteria == InjectionServices.EMPTY_CRITERIA) {
             return true;
         }
 

File: inject/api/src/main/java/io/helidon/inject/api/ServiceInfoBuildInterceptor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import io.helidon.builder.api.Prototype;
 

File: inject/api/src/main/java/io/helidon/inject/api/ServiceInjectionPlanBinder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Responsible for registering the injection plan to the services in the service registry.

File: inject/api/src/main/java/io/helidon/inject/api/ServiceProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.Optional;
 
@@ -112,7 +112,7 @@ public interface ServiceProvider<T> extends InjectionPointProvider<T>, Weighted
     Optional<PreDestroyMethod> preDestroyMethod();
 
     /**
-     * The agent/instance to be used for binding this service provider to the pico application that was code generated.
+     * The agent/instance to be used for binding this service provider to the injectable application that was code generated.
      *
      * @return the service provider that should be used for binding, or empty if this provider does not support binding
      * @see ModuleComponent

File: inject/api/src/main/java/io/helidon/inject/api/ServiceProviderProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import java.util.List;
 import java.util.Map;

File: inject/api/src/main/java/io/helidon/inject/api/Startable.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 /**
  * Some components may require start when Helidon is bootstrapped, such as WebServer (to open server sockets).
@@ -25,7 +25,7 @@
  * {@link jakarta.annotation.PostConstruct} - where we create a fully configured instance) is different from its start
  * transition (such as opening sockets, connecting to remote messaging queues, streams, topics, etc.).
  *
- * @see io.helidon.pico.api.Helidon#start()
+ * @see Helidon#start()
  */
 @Contract
 public interface Startable {

File: inject/api/src/main/java/io/helidon/inject/spi/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Pico SPI.
+ * Injection SPI.
  */
-package io.helidon.pico.spi;
+package io.helidon.inject.spi;

File: inject/api/src/test/java/io/helidon/inject/api/QualifierTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.inject.api;
 
 import io.helidon.common.types.Annotation;
 
@@ -41,7 +41,7 @@ void buildAndCompare() {
                    is(0));
     }
 
-    @Named("io.helidon.pico.api.DefaultQualifierTest")
+    @Named("io.helidon.inject.api.DefaultQualifierTest")
     @ClassNamed(QualifierTest.class)
     @Test
     public void createClassNamed() throws Exception {

File: inject/configdriven/api/src/main/java/io/helidon/inject/configdriven/api/ConfigBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.api;
+package io.helidon.inject.configdriven.api;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -50,7 +50,7 @@
      * instances will be permitted.
      * <p>
      * Note: this attribute is dynamic in nature, and therefore cannot be validated at compile time. All violations found to this
-     * policy will be observed during PicoServices activation.
+     * policy will be observed during <i>Services</i> activation.
      * <p>
      * The default value is {@code false}.
      *

File: inject/configdriven/api/src/main/java/io/helidon/inject/configdriven/api/ConfigBeanFactory.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.api;
+package io.helidon.inject.configdriven.api;
 
 import java.util.List;
 
 import io.helidon.common.config.Config;
 
 /**
  * Used from generated code.
- * Represents the required information to handle config beans, either from {@link io.helidon.pico.configdriven.api.ConfigBean}
+ * Represents the required information to handle config beans, either from {@link ConfigBean}
  * annotation, or from other means.
  *
  * @param <T> type of the config bean

File: inject/configdriven/api/src/main/java/io/helidon/inject/configdriven/api/ConfigDriven.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.api;
+package io.helidon.inject.configdriven.api;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;

File: inject/configdriven/api/src/main/java/io/helidon/inject/configdriven/api/NamedInstance.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.api;
+package io.helidon.inject.configdriven.api;
 
 /**
  * Instance, that can be (possibly) named.

File: inject/configdriven/processor/src/main/java/io/helidon/inject/configdriven/processor/ConfigBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.processor;
+package io.helidon.inject.configdriven.processor;
 
 import java.util.Optional;
 

File: inject/configdriven/processor/src/main/java/io/helidon/inject/configdriven/processor/ConfigBeanAnnotation.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.processor;
+package io.helidon.inject.configdriven.processor;
 
 import io.helidon.common.types.TypeInfo;
 import io.helidon.common.types.TypeName;
 
 record ConfigBeanAnnotation(boolean repeatable,
                             boolean atLeastOne,
                             boolean wantDefault) {
-    static final String TYPE_NAME = "io.helidon.pico.configdriven.api.ConfigBean";
+    static final String TYPE_NAME = "io.helidon.inject.configdriven.api.ConfigBean";
     static final TypeName TYPE = TypeName.create(TYPE_NAME);
 
     static ConfigBeanAnnotation create(TypeInfo typeInfo) {

File: inject/configdriven/processor/src/main/java/io/helidon/inject/configdriven/processor/ConfigDrivenAnnotation.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.processor;
+package io.helidon.inject.configdriven.processor;
 
 import io.helidon.common.types.Annotation;
 import io.helidon.common.types.TypeInfo;
 import io.helidon.common.types.TypeName;
 
 record ConfigDrivenAnnotation(TypeName configBeanType,
                               boolean activateByDefault) {
-    static final String TYPE_NAME = "io.helidon.pico.configdriven.api.ConfigDriven";
+    static final String TYPE_NAME = "io.helidon.inject.configdriven.api.ConfigDriven";
     static final TypeName TYPE = TypeName.create(TYPE_NAME);
 
     static ConfigDrivenAnnotation create(TypeInfo typeInfo) {

File: inject/configdriven/runtime/src/main/java/io/helidon/inject/configdriven/runtime/ConfigDrivenUtils.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.runtime;
+package io.helidon.inject.configdriven.runtime;
 
-import io.helidon.pico.api.ServiceInfoCriteria;
+import io.helidon.inject.api.ServiceInfoCriteria;
 
 final class ConfigDrivenUtils {
 

File: inject/configdriven/runtime/src/main/java/io/helidon/inject/configdriven/runtime/NameComparator.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.runtime;
+package io.helidon.inject.configdriven.runtime;
 
 import java.util.Comparator;
 
-import io.helidon.pico.configdriven.api.NamedInstance;
+import io.helidon.inject.configdriven.api.NamedInstance;
 
 /**
  * Comparator of config bean names, {@value NamedInstance#DEFAULT_NAME} is always first.

File: inject/configdriven/runtime/src/main/java/io/helidon/inject/configdriven/runtime/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Examples of providers in Pico.
+ * Config-driven Services API.
  */
-package io.helidon.examples.pico.providers;
+package io.helidon.inject.configdriven.runtime;

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/EnumRelatedConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.List;
 import java.util.Map;

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeClientAuth.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 /**
  * Indicates whether the server requires authentication of tbe client by the certificate.

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeComponentTracingConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Map;
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeKeyConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.security.PrivateKey;
 import java.security.PublicKey;

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeKeystoreConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.List;
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeNettyClientAuth.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 public enum FakeNettyClientAuth {
     NONE,

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakePathTracingConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.List;
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeRoutingConfig.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 /**
  * aka Routing.

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeServerConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.time.Duration;
 import java.util.Map;

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeServerLifecycle.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 /**
  * aka ServerLifecycle.

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeSocketConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Optional;
 
@@ -89,7 +89,7 @@ interface FakeSocketConfigBlueprint {
     int receiveBufferSize();
 
     /**
-     * Return a {@link io.helidon.pico.configdriven.tests.config.FakeWebServerTlsConfig} containing server TLS configuration
+     * Return a {@link FakeWebServerTlsConfig} containing server TLS configuration
      * . When empty {@link java.util.Optional} is returned
      * no TLS should be configured.
      *

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeSpanLogTracingConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeSpanTracingConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Map;
 import java.util.Optional;

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeTlsWSNotDrivenByCB.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Objects;
 
-import io.helidon.pico.configdriven.api.ConfigDriven;
+import io.helidon.inject.configdriven.api.ConfigDriven;
 
 import jakarta.annotation.PostConstruct;
 import jakarta.annotation.PreDestroy;

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeTraceableConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Optional;
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeTracer.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 /**
  * Tracer abstraction.

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeTracingConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Map;
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeWebServer.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Objects;
 import java.util.Optional;
 
-import io.helidon.pico.configdriven.api.ConfigDriven;
+import io.helidon.inject.configdriven.api.ConfigDriven;
 
 import jakarta.annotation.PostConstruct;
 import jakarta.annotation.PreDestroy;

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeWebServerContract.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
-import io.helidon.pico.api.Contract;
+import io.helidon.inject.api.Contract;
 
 /**
  * For Testing.

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeWebServerNotDrivenAndHavingConfiguredByOverrides.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Optional;
 
-import io.helidon.pico.configdriven.api.ConfigDriven;
+import io.helidon.inject.configdriven.api.ConfigDriven;
 
 import jakarta.inject.Inject;
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/FakeWebServerTlsConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.security.SecureRandom;
 import java.util.List;
@@ -28,7 +28,7 @@
 import io.helidon.common.LazyValue;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
-import io.helidon.pico.configdriven.api.ConfigBean;
+import io.helidon.inject.configdriven.api.ConfigBean;
 
 /**
  * aka WebServerTls.

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/SSLContextConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Random;
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/TestClientConfigBlueprint.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Map;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
-import io.helidon.pico.configdriven.api.ConfigBean;
+import io.helidon.inject.configdriven.api.ConfigBean;
 
 /**
  * For testing purpose.

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/TestCommonConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.List;
 

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/TestServerConfigBlueprint.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Optional;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
-import io.helidon.pico.configdriven.api.ConfigBean;
+import io.helidon.inject.configdriven.api.ConfigBean;
 
 /**
  * For testing purpose.

File: inject/configdriven/tests/config/src/main/java/io/helidon/inject/configdriven/tests/config/package-info.java
Patch:
@@ -17,4 +17,4 @@
 /**
  * ConfigBean test subjects.
  */
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;

File: inject/configdriven/tests/config/src/test/java/io/helidon/inject/configdriven/tests/config/AbstractConfigBeanTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Map;
 

File: inject/configdriven/tests/config/src/test/java/io/helidon/inject/configdriven/tests/config/BasicConfigBeanTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.List;
 import java.util.Map;

File: inject/configdriven/tests/config/src/test/java/io/helidon/inject/configdriven/tests/config/EnumRelatedConfigBeanTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.List;
 import java.util.Set;

File: inject/configdriven/tests/config/src/test/java/io/helidon/inject/configdriven/tests/config/NestedConfigBeanTest.java
Patch:
@@ -14,13 +14,12 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.tests.config;
+package io.helidon.inject.configdriven.tests.config;
 
 import java.util.Collection;
 import java.util.Objects;
 
 import io.helidon.common.config.Config;
-import io.helidon.common.testing.junit5.OptionalMatcher;
 import io.helidon.config.ConfigSources;
 import io.helidon.config.yaml.YamlConfigParser;
 

File: inject/configdriven/tests/configuredby-application/src/test/java/io/helidon/inject/configdriven/configuredby/test/ApplicationConfigBeanTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
 /**
  * Designed to re-run the same tests from base, but using the application-created DI model instead.

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/ASingletonConfigBeanBlueprint.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
-import io.helidon.pico.configdriven.api.ConfigBean;
+import io.helidon.inject.configdriven.api.ConfigBean;
 
 @ConfigBean(wantDefault = true, atLeastOne = true)
 @Configured(root = true)

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/ASingletonService.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
-import io.helidon.pico.configdriven.api.ConfigDriven;
+import io.helidon.inject.configdriven.api.ConfigDriven;
 
 import jakarta.annotation.PostConstruct;
 import jakarta.annotation.PreDestroy;

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/ASingletonServiceContract.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
 /**
  * For Testing.

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/AbstractConfigBeanTest.java
Patch:
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
 import java.util.List;
 import java.util.Map;
 
 import io.helidon.common.Errors;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.pico.configdriven.tests.config.TestClientConfig;
-import io.helidon.pico.configdriven.tests.config.TestServerConfig;
+import io.helidon.inject.configdriven.tests.config.TestClientConfig;
+import io.helidon.inject.configdriven.tests.config.TestServerConfig;
 
 import org.junit.jupiter.api.Test;
 

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/AbstractServiceBase.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
 import java.util.concurrent.atomic.AtomicInteger;
 

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/SomeConfiguredServiceWithAnAbstractBase.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
-import io.helidon.pico.configdriven.api.ConfigDriven;
+import io.helidon.inject.configdriven.api.ConfigDriven;
 
 import jakarta.inject.Inject;
 

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/SomeServiceConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/SomeServiceInterface.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
 public interface SomeServiceInterface {
 

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/test/package-info.java
Patch:
@@ -17,4 +17,4 @@
 /**
  * For testing.
  */
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/yaml/test/Async.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.yaml.test;
+package io.helidon.inject.configdriven.configuredby.yaml.test;
 
-import io.helidon.pico.configdriven.api.ConfigDriven;
+import io.helidon.inject.configdriven.api.ConfigDriven;
 
 import jakarta.inject.Inject;
 

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/yaml/test/BulkheadConfigBlueprint.java
Patch:
@@ -14,12 +14,11 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.yaml.test;
+package io.helidon.inject.configdriven.configuredby.yaml.test;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;
-import io.helidon.pico.configdriven.api.ConfigBean;
 
 @Configured(root = true, prefix = "ft.bulkheads")
 @Prototype.Blueprint

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/configuredby/yaml/test/ServerConfigBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.yaml.test;
+package io.helidon.inject.configdriven.configuredby.yaml.test;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/interceptor/test/IZ.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.interceptor.test;
+package io.helidon.inject.configdriven.interceptor.test;
 
-import io.helidon.pico.api.Contract;
+import io.helidon.inject.api.Contract;
 
 @Contract
 public interface IZ {

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/interceptor/test/TestInterceptorTrigger.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.interceptor.test;
+package io.helidon.inject.configdriven.interceptor.test;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
-import io.helidon.pico.api.InterceptedTrigger;
+import io.helidon.inject.api.InterceptedTrigger;
 
 @InterceptedTrigger
 @Retention(RetentionPolicy.CLASS)

File: inject/configdriven/tests/configuredby/src/main/java/io/helidon/inject/configdriven/interceptor/test/ZImplConfigBlueprint.java
Patch:
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.interceptor.test;
+package io.helidon.inject.configdriven.interceptor.test;
 
 import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.Configured;
-import io.helidon.pico.configdriven.api.ConfigBean;
 
 /**
  * Drives {@link ZImpl} activation.

File: inject/configdriven/tests/configuredby/src/test/java/io/helidon/inject/configdriven/configuredby/test/DefaultConfigBeanTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.configdriven.configuredby.test;
+package io.helidon.inject.configdriven.configuredby.test;
 
 /**
  * Executes the tests from the base.

File: inject/maven-plugin/src/main/java/io/helidon/inject/maven/plugin/ExecHandler.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.maven.plugin;
+package io.helidon.inject.maven.plugin;
 
 import java.io.Closeable;
 import java.io.IOException;
@@ -25,7 +25,7 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import io.helidon.pico.tools.ToolsException;
+import io.helidon.inject.tools.ToolsException;
 
 /**
  * Delegates a functional invocation to be run within the context of a provided ClassLoader.

File: inject/maven-plugin/src/main/java/io/helidon/inject/maven/plugin/ExecutableClassLoader.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.maven.plugin;
+package io.helidon.inject.maven.plugin;
 
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -24,7 +24,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import io.helidon.pico.tools.ToolsException;
+import io.helidon.inject.tools.ToolsException;
 
 /**
  * Responsible for creating a spi classlaoder using a child-first delegation strategy that can

File: inject/maven-plugin/src/main/java/io/helidon/inject/maven/plugin/IsolatedThreadGroup.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.maven.plugin;
+package io.helidon.inject.maven.plugin;
 
 import java.io.Closeable;
 import java.util.ArrayList;
@@ -25,7 +25,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import io.helidon.pico.tools.ToolsException;
+import io.helidon.inject.tools.ToolsException;
 
 /**
  * a ThreadGroup to isolate execution and collect exceptions.

File: inject/maven-plugin/src/main/java/io/helidon/inject/maven/plugin/QualifierConfig.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.maven.plugin;
+package io.helidon.inject.maven.plugin;
 
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 
 import io.helidon.common.types.Annotation;
 import io.helidon.common.types.TypeName;
-import io.helidon.pico.api.Qualifier;
+import io.helidon.inject.api.Qualifier;
 
 /**
  * Used by {@link ExternalModuleCreatorMojo}, and here in this package due to maven

File: inject/maven-plugin/src/main/java/io/helidon/inject/maven/plugin/ServiceTypeQualifiers.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.maven.plugin;
+package io.helidon.inject.maven.plugin;
 
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
 
-import io.helidon.pico.api.Qualifier;
+import io.helidon.inject.api.Qualifier;
 
 import org.apache.maven.plugins.annotations.Parameter;
 

File: inject/maven-plugin/src/main/java/io/helidon/inject/maven/plugin/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Examples of Intercepted services in Pico.
+ * Internal tooling for the injection maven-plugin.
  */
-package io.helidon.examples.pico.interceptors;
+package io.helidon.inject.maven.plugin;

File: inject/processor/src/main/java/io/helidon/inject/processor/BaseAnnotationProcessor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.processor;
+package io.helidon.inject.processor;
 
 import java.util.Objects;
 import java.util.Optional;
@@ -28,7 +28,7 @@
 import io.helidon.common.types.TypeName;
 
 /**
- * Abstract base for all Helidon Pico annotation processing.
+ * Abstract base for all Helidon annotation processing.
  */
 abstract class BaseAnnotationProcessor extends AbstractProcessor {
     private final System.Logger logger = System.getLogger(getClass().getName());

File: inject/processor/src/main/java/io/helidon/inject/processor/MessagerToLogAdapter.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.processor;
+package io.helidon.inject.processor;
 
-import io.helidon.pico.tools.Messager;
+import io.helidon.inject.tools.Messager;
 
 class MessagerToLogAdapter implements Messager {
 

File: inject/processor/src/main/java/io/helidon/inject/processor/ProcessingEventBlueprint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.processor;
+package io.helidon.inject.processor;
 
 import java.util.Optional;
 import java.util.Set;
@@ -25,7 +25,7 @@
 import io.helidon.common.types.TypedElementInfo;
 
 /**
- * Attributes that can be observed via {@link io.helidon.pico.processor.spi.PicoAnnotationProcessorObserver}.
+ * Attributes that can be observed via {@link io.helidon.inject.processor.spi.InjectionAnnotationProcessorObserver}.
  */
 @Prototype.Blueprint
 interface ProcessingEventBlueprint {
@@ -42,7 +42,7 @@ interface ProcessingEventBlueprint {
      * processing. The set of processed elements are subject to change in the future. The implementor is therefore encouraged
      * to not make assumptions about the set of elements that are in this set.
      *
-     * @return the set of injectable elements, and any other elements of interest to the pico APT
+     * @return the set of injectable elements, and any other elements of interest to the APT
      */
     Set<TypedElementInfo> elementsOfInterest();
 

File: inject/processor/src/main/java/io/helidon/inject/processor/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Examples of Config-Driven Services in Pico.
+ * Injection Annotation Processors and supporting types.
  */
-package io.helidon.examples.pico.configdriven;
+package io.helidon.inject.processor;

File: inject/processor/src/main/java/io/helidon/inject/processor/spi/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Pico Config-Driven API.
+ * Injection APT SPI package.
  */
-package io.helidon.pico.configdriven.api;
+package io.helidon.inject.processor.spi;

File: inject/processor/src/test/java/io/helidon/inject/processor/ProcessingTrackerTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.processor;
+package io.helidon.inject.processor;
 
 import java.util.List;
 

File: inject/processor/src/test/java/io/helidon/inject/processor/TestUtils.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.processor;
+package io.helidon.inject.processor;
 
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
-import io.helidon.pico.tools.ToolsException;
+import io.helidon.inject.tools.ToolsException;
 
 /**
  * Testing utilities.

File: inject/processor/src/test/java/io/helidon/inject/processor/package-info.java
Patch:
@@ -17,4 +17,4 @@
 /**
  * Annotation processing testing related types.
  */
-package io.helidon.pico.processor;
+package io.helidon.inject.processor;

File: inject/processor/src/test/java/io/helidon/inject/processor/testsubjects/BasicEndpoint.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.processor.testsubjects;
+package io.helidon.inject.processor.testsubjects;
 
 import jakarta.inject.Singleton;
 
@@ -33,13 +33,13 @@ public class BasicEndpoint {
      */
     @ExtensibleGET
     public String itWorks(String header) {
-        return "Pico Works!";
+        return "Injection Works!";
     }
 
     @ExtensibleGET
     @BasicPath("/whatever/*")
     public String itWorks2() {
-        return "Pico Works 2!";
+        return "Injection Works 2!";
     }
 
 }

File: inject/processor/src/test/java/io/helidon/inject/processor/testsubjects/BasicPath.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.processor.testsubjects;
+package io.helidon.inject.processor.testsubjects;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: nima/observe/metrics/src/main/java/io/helidon/nima/observe/metrics/MetricsObserveProvider.java
Patch:
@@ -82,6 +82,8 @@ public void register(Config config, String componentPath, HttpRouting.Builder ro
                 : explicitService;
 
         if (observer.enabled()) {
+            // when created as part of observer, we need to use component path
+            observer.context(componentPath);
             routing.addFeature(observer);
         } else {
             String finalPath = componentPath + (componentPath.endsWith("/") ? "*" : "/*");

File: jersey/connector/src/main/java/module-info.java
Patch:
@@ -27,6 +27,7 @@
     requires jersey.client;
     requires jersey.common;
     requires io.helidon.nima.webclient;
+    requires io.helidon.config;
 
     exports io.helidon.jersey.connector;
     provides org.glassfish.jersey.client.spi.ConnectorProvider with HelidonConnectorProvider;

File: jersey/connector/src/test/java/io/helidon/jersey/connector/TimeoutTest.java
Patch:
@@ -78,15 +78,13 @@ public static void setup() {
     }
 
     @Test
-    @Disabled
     public void testFast() {
         Response r = target("test").request().get();
         assertThat(r.getStatus(), is(200));
         assertThat(r.readEntity(String.class), is("GET"));
     }
 
     @Test
-    @Disabled
     public void testSlow() {
         try {
             target("test/timeout").property(ClientProperties.READ_TIMEOUT, 1_000).request().get();
@@ -97,7 +95,6 @@ public void testSlow() {
     }
 
     @Test
-    @Disabled
     public void testTimeoutInRequest() {
         try {
             target("test/timeout").request().property(ClientProperties.READ_TIMEOUT, 1_000).get();

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/AbstractApplicationCreatorMojo.java
Patch:
@@ -328,6 +328,7 @@ protected void innerExecute() {
                     .filer(codeGenFiler)
                     .configOptions(configOptions)
                     .serviceTypeNames(List.copyOf(serviceTypeNames))
+                    .generatedServiceTypeNames(List.copyOf(serviceTypeNames))
                     .codeGenPaths(codeGenPaths)
                     .compilerOptions(compilerOptions)
                     .throwIfError(isFailOnError())

File: pico/tools/src/main/java/io/helidon/pico/tools/ActivatorCreatorDefault.java
Patch:
@@ -230,6 +230,7 @@ public static ActivatorCreatorRequest createActivatorCreatorRequest(ServicesToPr
         CodeGenPaths codeGenPaths = createCodeGenPaths(servicesToProcess);
         return ActivatorCreatorRequest.builder()
                 .serviceTypeNames(servicesToProcess.serviceTypeNames())
+                .generatedServiceTypeNames(servicesToProcess.generatedServiceTypeNames())
                 .codeGen(codeGen)
                 .codeGenPaths(codeGenPaths)
                 .filer(filer)
@@ -344,7 +345,7 @@ ActivatorCreatorResponse codegen(ActivatorCreatorRequest req,
         List<TypeName> activatorTypeNames = new ArrayList<>();
         Set<TypeName> activatorTypeNamesPutInModule = new TreeSet<>(req.codeGen().allModuleActivatorTypeNames());
         Map<TypeName, ActivatorCodeGenDetail> activatorDetails = new LinkedHashMap<>();
-        for (TypeName serviceTypeName : req.serviceTypeNames()) {
+        for (TypeName serviceTypeName : req.generatedServiceTypeNames()) {
             try {
                 ActivatorCodeGenDetail activatorDetail = createActivatorCodeGenDetail(req, serviceTypeName, scan);
                 Object prev = activatorDetails.put(serviceTypeName, activatorDetail);

File: pico/tools/src/main/java/io/helidon/pico/tools/ExternalModuleCreatorDefault.java
Patch:
@@ -127,7 +127,8 @@ public ExternalModuleCreatorResponse prepareToCreateExternalModule(ExternalModul
             ActivatorCreatorCodeGen activatorCreatorCodeGen = ActivatorCreatorDefault
                     .createActivatorCreatorCodeGen(services).orElseThrow();
             ActivatorCreatorRequest activatorCreatorRequest = ActivatorCreatorDefault
-                    .createActivatorCreatorRequest(services, activatorCreatorCodeGen,
+                    .createActivatorCreatorRequest(services,
+                                                   activatorCreatorCodeGen,
                                                    req.activatorCreatorConfigOptions(),
                                                    req.filer(),
                                                    req.throwIfError());

File: pico/tools/src/test/java/io/helidon/pico/tools/ActivatorCreatorDefaultTest.java
Patch:
@@ -59,6 +59,7 @@ void codegenHelloActivator() {
         ActivatorCreatorCodeGen codeGen = ActivatorCreatorCodeGen.builder().build();
         ActivatorCreatorRequest req = ActivatorCreatorRequest.builder()
                 .serviceTypeNames(List.of(TypeName.create(HelloPicoWorldImpl.class)))
+                .generatedServiceTypeNames(List.of(TypeName.create(HelloPicoWorldImpl.class)))
                 .codeGen(codeGen)
                 .codeGenPaths(codeGenPaths)
                 .configOptions(ActivatorCreatorConfigOptions.builder().build())
@@ -70,6 +71,7 @@ void codegenHelloActivator() {
 
         ActivatorCreatorRequest req2 = ActivatorCreatorRequest.builder()
                 .serviceTypeNames(Collections.singletonList(TypeName.create(HelloPicoWorldImpl.class)))
+                .generatedServiceTypeNames(Collections.singletonList(TypeName.create(HelloPicoWorldImpl.class)))
                 .codeGenPaths(CodeGenPaths.builder().build())
                 .throwIfError(Boolean.FALSE)
                 .codeGen(codeGen)

File: pico/tools/src/test/java/io/helidon/pico/tools/ApplicationCreatorDefaultTest.java
Patch:
@@ -87,6 +87,7 @@ void codegenHelloWorldApplication() {
                 .filer(filer)
                 .messager(directFiler)
                 .serviceTypeNames(serviceTypeNames)
+                .generatedServiceTypeNames(serviceTypeNames)
                 .build();
 
         ApplicationCreatorResponse res = creator.createApplication(req);

File: pico/api/src/main/java/io/helidon/pico/api/ServiceInjectionPlanBinder.java
Patch:
@@ -53,7 +53,7 @@ Binder bind(String id,
         * It is assumed that the caller of this is aware of the proper cardinality for each injection point.
         *
         * @param id                 the injection point identity
-        * @param serviceProviders   the list of service providers to bind to this identity.
+        * @param serviceProviders   the list of service providers to bind to this identity
         * @return the binder builder
         */
         Binder bindMany(String id,

File: pico/tools/src/main/java/io/helidon/pico/tools/ApplicationCreatorDefault.java
Patch:
@@ -348,15 +348,15 @@ List<String> toInjectionPlanBindings(ServiceProvider<?> sp) {
             List<?> ipUnqualified = e.getValue().unqualifiedProviders();
             boolean resolved = false;
             try {
-                if (ipQualified.isEmpty()) {
+                if (ipInfo.listWrapped()) {
+                    line.append(".bindMany(");
+                } else if (ipQualified.isEmpty()) {
                     if (!ipUnqualified.isEmpty()) {
                         resolved = true;
                         line.append(".resolvedBind(");
                     } else {
                         line.append(".bindVoid(");
                     }
-                } else if (ipInfo.listWrapped()) {
-                    line.append(".bindMany(");
                 } else {
                     line.append(".bind(");
                 }

File: nima/tests/integration/http2/server/src/test/java/io/helidon/nima/tests/integration/http2/webserver/FlowControlTest.java
Patch:
@@ -107,7 +107,7 @@ static void setUpServer(WebServerConfig.Builder serverBuilder) {
                         .route(Http2Route.route(GET, "/flow-control", (req, res) -> {
                             res.send(EXPECTED);
                         }))
-                ).port(8080);
+                );
     }
 
     @AfterAll

File: nima/tests/integration/webserver/mtls/src/test/java/io/helidon/nima/tests/integration/server/mtls/MtlsTest.java
Patch:
@@ -154,7 +154,6 @@ void testMutualTlsCertificates() {
     }
 
     @Test
-    @Disabled
     void testTlsReload() {
         Http1ClientResponse response = client.method(Http.Method.GET)
                 .uri("/serverCert")

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ServerListener.java
Patch:
@@ -312,7 +312,7 @@ void reloadTls(Tls tls) {
         if (!tls.enabled()) {
             throw new UnsupportedOperationException("TLS cannot be disabled by reloading on the socket " + socketName);
         }
-        tls.reload(tls);
+        this.tls.reload(tls);
     }
 
     private void debugTls(String serverChannelId, Tls tls) {

File: pico/tools/src/main/java/io/helidon/pico/tools/InterceptorCreatorDefault.java
Patch:
@@ -1097,7 +1097,8 @@ private static TypeName toInterceptorTypeName(String serviceTypeName) {
         TypeName typeName = TypeName.create(serviceTypeName);
         return TypeName.builder()
                 .packageName(typeName.packageName())
-                .className(typeName.className() + INNER_INTERCEPTOR_CLASS_NAME);
+                .className(typeName.className() + INNER_INTERCEPTOR_CLASS_NAME)
+                .build();
     }
 
     /**

File: config/config/src/main/java/io/helidon/config/spi/ConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,6 +20,7 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
+import io.helidon.pico.api.Contract;
 
 /**
  * {@link Source} of configuration.
@@ -62,6 +63,7 @@
  * @see io.helidon.config.AbstractConfigSource
  * @see ConfigSources ConfigSources - access built-in implementations.
  */
+@Contract
 public interface ConfigSource extends Supplier<ConfigSource>, Source {
     @Override
     default ConfigSource get() {

File: pico/runtime/src/main/java/module-info.java
Patch:
@@ -21,7 +21,7 @@
     requires static jakarta.inject;
     requires static jakarta.annotation;
     requires io.helidon.builder.api;
-    requires io.helidon.common.types;
+    requires transitive io.helidon.common.types;
     requires io.helidon.common;
     requires io.helidon.common.config;
     requires transitive io.helidon.pico.api;

File: pico/tests/resources-pico/src/main/java/module-info.java
Patch:
@@ -26,6 +26,7 @@
     requires io.helidon.pico.api;
     requires io.helidon.pico.runtime;
     requires io.helidon.pico.tests.plain;
+    requires io.helidon.config;
 
     exports io.helidon.pico.tests.pico;
     exports io.helidon.pico.tests.pico.interceptor;

File: pico/tools/src/main/java/io/helidon/pico/tools/ModuleInfoDescriptorSupport.java
Patch:
@@ -157,6 +157,8 @@ static ModuleInfoDescriptor create(String moduleInfo,
                         }
                     }
                     descriptor.addItem(provides.build());
+                } else if (line.startsWith("opens ")) {
+                    // follow up issue
                 } else if (line.equals("}")) {
                     break;
                 } else {

File: jersey/connector/src/main/java/io/helidon/jersey/connector/HelidonConnectorProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,7 +35,6 @@
  * <li>{@link org.glassfish.jersey.client.ClientProperties#PROXY_USERNAME}</li>
  * <li>{@link org.glassfish.jersey.client.ClientProperties#PROXY_PASSWORD}</li>
  * <li>{@link org.glassfish.jersey.client.ClientProperties#READ_TIMEOUT}</li>
- * <li>{@link HelidonProperties#CONFIG}</li>
  * </ul>
  * <p>
  * If a {@link org.glassfish.jersey.client.ClientResponse} is obtained and an

File: tests/apps/bookstore/bookstore-se/src/test/java/io/helidon/tests/apps/bookstore/se/Http2SslTest.java
Patch:
@@ -32,6 +32,7 @@
 import okhttp3.Response;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.tests.apps.bookstore.se.TestServer.APPLICATION_JSON;
@@ -42,6 +43,7 @@
 /**
  * Tests SSL/TLS with HTTP 2 upgrades and compression.
  */
+@Disabled("https://github.com/helidon-io/helidon/issues/7097")
 public class Http2SslTest {
 
     private static WebServer webServer;
@@ -50,7 +52,7 @@ public class Http2SslTest {
     @BeforeAll
     public static void startServer() throws Exception {
         webServer = TestServer.start(true, true, true);
-        client = TestServer.newOkHttpClient(true);
+        client = TestServer.newOkHttpClient(true, true);
     }
 
     @AfterAll

File: tests/apps/bookstore/bookstore-se/src/test/java/io/helidon/tests/apps/bookstore/se/MainTest.java
Patch:
@@ -42,7 +42,7 @@ public class MainTest {
     @BeforeAll
     public static void startServer() throws Exception {
         webServer = TestServer.start(false, false, false);
-        client = TestServer.newOkHttpClient(false);
+        client = TestServer.newOkHttpClient(false, false);
     }
 
     @AfterAll

File: tests/apps/bookstore/bookstore-se/src/test/java/io/helidon/tests/apps/bookstore/se/SslTest.java
Patch:
@@ -41,7 +41,7 @@ public class SslTest {
     @BeforeAll
     public static void startServer() throws Exception {
         webServer = TestServer.start(true, false, false);
-        client = TestServer.newOkHttpClient(true);
+        client = TestServer.newOkHttpClient(true, false);
     }
 
     @AfterAll

File: tests/integration/oidc/src/test/java/io/helidon/tests/integration/oidc/CommonLoginBase.java
Patch:
@@ -16,9 +16,7 @@
 
 package io.helidon.tests.integration.oidc;
 
-import io.helidon.config.Config;
 import io.helidon.jersey.connector.HelidonConnectorProvider;
-import io.helidon.jersey.connector.HelidonProperties;
 import io.helidon.microprofile.tests.junit5.AddBean;
 import io.helidon.microprofile.tests.junit5.HelidonTest;
 
@@ -47,7 +45,7 @@ class CommonLoginBase {
             .connectorProvider(new HelidonConnectorProvider())
             .property(ClientProperties.CONNECT_TIMEOUT, 10000000)
             .property(ClientProperties.READ_TIMEOUT, 10000000)
-            .property(HelidonProperties.CONFIG, Config.create().get("client"));
+            .property(ClientProperties.FOLLOW_REDIRECTS, true);
 
     Client client;
 

File: tests/integration/oidc/src/test/java/io/helidon/tests/integration/oidc/CookieBasedLoginIT.java
Patch:
@@ -22,6 +22,7 @@
 import jakarta.ws.rs.core.Response;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.tests.integration.oidc.TestResource.EXPECTED_POST_LOGOUT_TEST_MESSAGE;
@@ -30,6 +31,7 @@
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
 
+@Disabled("https://github.com/helidon-io/helidon/issues/7094")
 class CookieBasedLoginIT extends CommonLoginBase {
 
     @Test

File: tests/integration/oidc/src/test/java/io/helidon/tests/integration/oidc/QueryBasedLoginIT.java
Patch:
@@ -26,13 +26,15 @@
 import org.glassfish.jersey.client.ClientProperties;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.tests.integration.oidc.TestResource.EXPECTED_TEST_MESSAGE;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
 
+@Disabled("https://github.com/helidon-io/helidon/issues/7094")
 @AddConfig(key = "security.providers.1.oidc.cookie-use", value = "false")
 @AddConfig(key = "security.providers.1.oidc.query-param-use", value = "true")
 class QueryBasedLoginIT extends CommonLoginBase {

File: tests/integration/oidc/src/test/java/io/helidon/tests/integration/oidc/TenantIdentificationIT.java
Patch:
@@ -33,6 +33,7 @@
 import jakarta.ws.rs.core.HttpHeaders;
 import jakarta.ws.rs.core.Response;
 import org.glassfish.jersey.client.ClientProperties;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -41,6 +42,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 
+@Disabled("https://github.com/helidon-io/helidon/issues/7094")
 @HelidonTest(resetPerTest = true)
 @AddBean(TestResource.class)
 @AddConfig(key = "security.providers.1.oidc.oidc-metadata-well-known", value = "false")

File: nima/webclient/webclient/src/main/java/module-info.java
Patch:
@@ -49,6 +49,7 @@
     requires transitive io.helidon.nima.http.encoding;
     requires transitive io.helidon.nima.http.media;
     requires transitive io.helidon.common.context;
+    requires transitive io.helidon.common.config;
 
     exports io.helidon.nima.webclient;
     exports io.helidon.nima.webclient.spi;

File: examples/integrations/micrometer/se/src/test/java/io/helidon/examples/micrometer/se/MainTest.java
Patch:
@@ -23,8 +23,7 @@
 import io.helidon.nima.testing.junit5.webserver.SetUpServer;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
-import io.helidon.nima.webserver.ServerConfig;
-import io.helidon.nima.webserver.ServerConfig.Builder;
+import io.helidon.nima.webserver.WebServerConfig.Builder;
 
 import jakarta.json.Json;
 import jakarta.json.JsonBuilderFactory;

File: integrations/common/rest/src/test/java/io/helidon/integrations/common/rest/RestApiTest.java
Patch:
@@ -27,8 +27,8 @@
 import io.helidon.nima.http.media.jsonp.JsonpSupport;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpServer;
-import io.helidon.nima.webserver.ServerConfig;
 import io.helidon.nima.webserver.WebServer;
+import io.helidon.nima.webserver.WebServerConfig;
 import io.helidon.nima.webserver.http.HttpRules;
 import io.helidon.nima.webserver.http.HttpService;
 import io.helidon.nima.webserver.http.ServerRequest;
@@ -55,7 +55,7 @@ class RestApiTest {
     private static RestApi restApi;
 
     @SetUpServer
-    static void setupServer(ServerConfig.Builder serverBuilder) {
+    static void setupServer(WebServerConfig.Builder serverBuilder) {
         serverBuilder.routing(routing -> routing.register("/api", TestApiService::new))
                 .mediaContext(MediaContext.builder().addMediaSupport(JsonpSupport.create()).build());
     }

File: nima/http/media/jackson/src/main/java/io/helidon/nima/http/media/jackson/JacksonSupport.java
Patch:
@@ -72,6 +72,9 @@ public static MediaSupport create(Config config) {
      * @return a new {@link JacksonSupport}
      */
     public static MediaSupport create(Config config, String name) {
+        Objects.requireNonNull(config);
+        Objects.requireNonNull(name);
+
         ObjectMapper objectMapper = new ObjectMapper()
                 .registerModule(new ParameterNamesModule())
                 .registerModule(new Jdk8Module())

File: nima/http/media/media/src/main/java/io/helidon/nima/http/media/PathSupport.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.UncheckedIOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.util.Objects;
 
 import io.helidon.common.GenericType;
 import io.helidon.common.http.ContentDisposition;
@@ -47,7 +48,7 @@ public class PathSupport implements MediaSupport {
      * @param name name of this instance
      */
     protected PathSupport(String name) {
-        this.name = name;
+        this.name = Objects.requireNonNull(name);
     }
 
     /**

File: nima/http/media/media/src/main/java/io/helidon/nima/http/media/StringSupport.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.UncheckedIOException;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
+import java.util.Objects;
 import java.util.Optional;
 
 import io.helidon.common.GenericType;
@@ -50,7 +51,7 @@ public class StringSupport implements MediaSupport {
      * @param name name of this instance
      */
     protected StringSupport(String name) {
-        this.name = name;
+        this.name = Objects.requireNonNull(name);
     }
 
     /**

File: nima/http/media/multipart/src/main/java/io/helidon/nima/http/media/multipart/MultiPartSupport.java
Patch:
@@ -17,6 +17,7 @@
 package io.helidon.nima.http.media.multipart;
 
 import java.lang.System.Logger.Level;
+import java.util.Objects;
 import java.util.Optional;
 
 import io.helidon.common.GenericType;
@@ -48,7 +49,7 @@ public class MultiPartSupport implements MediaSupport {
     private MediaContext context;
 
     private MultiPartSupport(String name) {
-        this.name = name;
+        this.name = Objects.requireNonNull(name);
     }
 
     /**

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ServerConfigBlueprint.java
Patch:
@@ -67,7 +67,7 @@ class ServerConfigInterceptor implements Prototype.BuilderInterceptor<ServerConf
         public ServerConfig.BuilderBase<?, ?> intercept(ServerConfig.BuilderBase<?, ?> target) {
             if (target.sockets().containsKey(WebServer.DEFAULT_SOCKET_NAME)) {
                 throw new ConfigException("Default socket must be configured directly on server config node, or through"
-                                                  + " ServerConfig.Builder, not as a separated socket.");
+                                                  + " \"ServerConfig.Builder\", not as a separated socket.");
             }
 
             return target;

File: builder/processor/src/main/java/io/helidon/builder/processor/FactoryMethods.java
Patch:
@@ -76,11 +76,10 @@ static FactoryMethods create(ProcessingContext processingContext,
 
         return new FactoryMethods(targetFactory,
                                   configFactory,
-                                  builder(processingContext, blueprint, typeHandler, configObjectCandidates));
+                                  builder(processingContext, typeHandler, configObjectCandidates));
     }
 
     private static Optional<FactoryMethod> builder(ProcessingContext processingContext,
-                                                   TypeInfo blueprint,
                                                    TypeHandler typeHandler,
                                                    Set<TypeName> builderCandidates) {
         if (typeHandler.actualType().equals(OBJECT)) {
@@ -92,7 +91,6 @@ private static Optional<FactoryMethod> builder(ProcessingContext processingConte
         for (TypeName builderCandidate : builderCandidates) {
             if (typeHandler.actualType().primitive()) {
                 // primitive methods do not have builders
-                found = null;
                 continue;
             }
             TypeInfo typeInfo = processingContext.toTypeInfo(builderCandidate.genericTypeName()).orElse(null);

File: common/processor/processor/src/main/java/io/helidon/common/processor/TypeFactory.java
Patch:
@@ -87,9 +87,10 @@ public static Optional<TypeName> createTypeName(TypeMirror typeMirror) {
         case TYPEVAR -> {
             return Optional.of(createFromGenericDeclaration(typeMirror.toString()));
         }
-        case WILDCARD -> {
+        case WILDCARD, ERROR -> {
             return Optional.of(TypeName.create(typeMirror.toString()));
         }
+        // this is most likely a type that is code generated as part of this round, best effort
         case NONE -> {
             return Optional.empty();
         }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/BeanBuilderInterceptor.java
Patch:
@@ -16,16 +16,16 @@
 
 package io.helidon.builder.test.testsubjects;
 
-import io.helidon.builder.BuilderInterceptor;
+import io.helidon.builder.api.Prototype;
 
 /**
  * See {@link InterceptedBean}.
  */
-class BeanBuilderInterceptor implements BuilderInterceptor<InterceptedBeanDefault.Builder> {
+class BeanBuilderInterceptor implements Prototype.BuilderInterceptor<InterceptedBean.BuilderBase<?, ?>> {
     private int callCount;
 
     @Override
-    public InterceptedBeanDefault.Builder intercept(InterceptedBeanDefault.Builder target) {
+    public InterceptedBean.BuilderBase<?, ?> intercept(InterceptedBean.BuilderBase<?, ?> target) {
         if (callCount++ > 0) {
             throw new AssertionError();
         }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/ChildInterfaceIsABuilderBlueprint.java
Patch:
@@ -18,16 +18,16 @@
 
 import java.util.Optional;
 
-import io.helidon.builder.Builder;
+import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.ConfiguredOption;
 
 /**
  * Demonstrates builder usages when the parent in a plain old interface (and not a target of the builder annotation), while this
  * child interface is a target for the builder. The net result is that the builder generated will handle both the parent and the
  * child merged as one.
  */
-@Builder(implPrefix = "", implSuffix = "Impl", allowPublicOptionals = true)
-public interface ChildInterfaceIsABuilder extends ParentInterfaceNotABuilder {
+@Prototype.Blueprint
+interface ChildInterfaceIsABuilderBlueprint extends ParentInterfaceNotABuilder {
 
     /**
      * Used for testing.

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/MyConfigBeanBlueprint.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.builder.test.testsubjects;
 
-import io.helidon.builder.Builder;
+import io.helidon.builder.api.Prototype;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.config.metadata.ConfiguredValue;
 
@@ -25,8 +25,8 @@
  *
  * @see MyDerivedConfigBean
  */
-@Builder(requireLibraryDependencies = false, requireBeanStyle = true, implPrefix = "", implSuffix = "Impl")
-public interface MyConfigBean {
+@Prototype.Blueprint(beanStyle = true)
+interface MyConfigBeanBlueprint {
 
     /**
      * Used for demonstrating and testing the Builder. Here we can see that a {@code required=true} is placed on the configured

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/ParentInterfaceNotABuilder.java
Patch:
@@ -18,12 +18,14 @@
 
 import java.util.Optional;
 
+import io.helidon.config.metadata.ConfiguredOption;
+
 /**
  * Used for demonstrating (and testing) multi-inheritance of interfaces and the builders that are produced.
  *
  * @see ChildInterfaceIsABuilder
  */
-public interface ParentInterfaceNotABuilder extends ParentOfParentInterfaceIsABuilder {
+public interface ParentInterfaceNotABuilder extends ParentOfParentInterfaceIsABuilderBlueprint {
 
     /**
      * The Builder will ignore {@code default} and {@code static} functions.

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/ParentOfParentInterfaceIsABuilderBlueprint.java
Patch:
@@ -19,15 +19,15 @@
 import java.net.URI;
 import java.util.Optional;
 
-import io.helidon.builder.Builder;
+import io.helidon.builder.api.Prototype;
 
 /**
  * Used for demonstrating (and testing) multi-inheritance of interfaces and the builders that are produced.
  *
  * @see ParentInterfaceNotABuilder
  */
-@Builder(implPrefix = "", implSuffix = "Impl", allowPublicOptionals = true)
-public interface ParentOfParentInterfaceIsABuilder {
+@Prototype.Blueprint
+interface ParentOfParentInterfaceIsABuilderBlueprint {
 
     /**
      * for testing purposes only.

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: builder/tests/builder/src/main/java/module-info.java
Patch:
@@ -23,5 +23,5 @@
     requires static io.helidon.config.metadata;
 
     requires io.helidon.common;
-    requires io.helidon.builder;
+    requires io.helidon.builder.api;
 }

File: builder/tests/builder/src/test/java/io/helidon/builder/test/DependsOnAllBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: builder/tests/builder/src/test/java/io/helidon/builder/test/InterceptedBeanTest.java
Patch:
@@ -17,7 +17,6 @@
 package io.helidon.builder.test;
 
 import io.helidon.builder.test.testsubjects.InterceptedBean;
-import io.helidon.builder.test.testsubjects.InterceptedBeanDefault;
 
 import org.junit.jupiter.api.Test;
 
@@ -28,13 +27,13 @@ class InterceptedBeanTest {
 
     @Test
     void testMutation() {
-        InterceptedBean val = InterceptedBeanDefault.builder()
+        InterceptedBean val = InterceptedBean.builder()
                 .name("Larry")
                 .build();
         assertThat(val.name(), equalTo("Larry"));
         assertThat(val.helloMessage(), equalTo("Hello Larry"));
 
-        InterceptedBean val2 = InterceptedBeanDefault.builder()
+        InterceptedBean val2 = InterceptedBean.builder()
                 .name("Larry")
                 .build();
         assertThat(val, equalTo(val2));

File: builder/tests/builder/src/test/java/io/helidon/builder/test/testsubjects/MyConfigBeanManualImpl.java
Patch:
@@ -58,9 +58,7 @@ public String toString() {
 
     @Override
     public int hashCode() {
-        int hashCode = 1;	// super.hashCode();
-        hashCode = 31 * hashCode + Objects.hash(getName(), isEnabled(), getPort());
-        return hashCode;
+        return Objects.hash(name, enabled, port);
     }
 
     @Override

File: nima/http2/webclient/src/main/java/io/helidon/nima/http2/webclient/Http2Client.java
Patch:
@@ -129,7 +129,7 @@ public Http2ClientBuilder prefetch(int prefetch) {
         }
 
         @Override
-        public Http2Client build() {
+        public Http2Client doBuild() {
             return new Http2ClientImpl(this);
         }
 

File: nima/webclient/webclient/src/main/java/io/helidon/nima/webclient/http1/Http1Client.java
Patch:
@@ -81,11 +81,12 @@ private Http1ClientBuilder() {
         }
 
         @Override
-        public Http1Client build() {
+        public Http1Client doBuild() {
             configBuilder.defaultHeaders(defaultHeaders());
             if (mediaContextBuilder != null) {
                 configBuilder.mediaContext(mediaContextBuilder.fallback(configBuilder.mediaContext()).build());
             }
+            configBuilder.socketOptions(super.channelOptions());
             return new Http1ClientImpl(configBuilder.build());
         }
 

File: nima/websocket/client/src/main/java/io/helidon/nima/websocket/client/WsClient.java
Patch:
@@ -82,7 +82,7 @@ private Builder() {
         }
 
         @Override
-        public WsClient build() {
+        public WsClient doBuild() {
             // these headers cannot be modified by user
             header(HEADER_UPGRADE_WS);
             header(HEADER_WS_VERSION);

File: common/http/src/test/java/io/helidon/common/http/Http1HeadersParserTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import java.nio.charset.StandardCharsets;
 
 import io.helidon.common.buffers.DataReader;
+import io.helidon.common.media.type.ParserMode;
 
 import org.junit.jupiter.api.Test;
 
@@ -33,7 +34,7 @@ void testHeadersAreCaseInsensitive() {
                 "Set-Cookie: c1=v1\r\nSet-Cookie: c2=v2\r\n"
                         + "Header: hv1\r\nheader: hv2\r\nheaDer: hv3\r\n"
                         + "\r\n").getBytes(StandardCharsets.US_ASCII));
-        WritableHeaders<?> headers = Http1HeadersParser.readHeaders(reader, 1024, true);
+        WritableHeaders<?> headers = Http1HeadersParser.readHeaders(reader, 1024, ParserMode.STRICT, true);
 
         testHeader(headers, "Set-Cookie", "c1=v1", "c2=v2");
         testHeader(headers, "set-cookie", "c1=v1", "c2=v2");

File: nima/http2/webclient/src/main/java/io/helidon/nima/http2/webclient/Http2ClientImpl.java
Patch:
@@ -43,7 +43,7 @@ public Http2ClientRequest method(Http.Method method) {
         UriQueryWriteable query = UriQueryWriteable.create();
         UriHelper helper = (uri() == null) ? UriHelper.create() : UriHelper.create(uri(), query);
 
-        return new ClientRequestImpl(this, executor(), method, helper, tls(), query);
+        return new ClientRequestImpl(this, executor(), method, helper, tls(), query, mediaTypeParserMode());
     }
 
     long maxHeaderListSize() {

File: nima/webclient/webclient/src/main/java/io/helidon/nima/webclient/http1/ClientRequestImpl.java
Patch:
@@ -361,6 +361,7 @@ private ClientResponseImpl invokeServices(WebClientService.Chain callChain,
                                       serviceResponse.connection(),
                                       serviceResponse.reader(),
                                       mediaContext,
+                                      clientConfig.mediaTypeParserMode(),
                                       complete);
     }
 

File: nima/webclient/webclient/src/main/java/io/helidon/nima/webclient/http1/HttpCallChainBase.java
Patch:
@@ -93,6 +93,7 @@ void prologue(BufferData nonEntityData, WebClientServiceRequest request, UriHelp
     ClientResponseHeaders readHeaders(DataReader reader) {
         WritableHeaders<?> writable = Http1HeadersParser.readHeaders(reader,
                                                                      clientConfig.maxHeaderSize(),
+                                                                     clientConfig.mediaTypeParserMode(),
                                                                      clientConfig.validateHeaders());
 
         return ClientResponseHeaders.create(writable);

File: nima/webclient/webclient/src/test/java/io/helidon/nima/webclient/http1/ClientRequestImplTest.java
Patch:
@@ -34,6 +34,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.common.http.Http1HeadersParser;
 import io.helidon.common.http.WritableHeaders;
+import io.helidon.common.media.type.ParserMode;
 import io.helidon.nima.http.media.EntityReader;
 import io.helidon.nima.http.media.EntityWriter;
 import io.helidon.nima.http.media.MediaContext;
@@ -423,7 +424,8 @@ private void webServerHandle() {
             }
 
             // Read Headers
-            WritableHeaders<?> reqHeaders = Http1HeadersParser.readHeaders(serverReader, 16384, true);
+            WritableHeaders<?> reqHeaders = Http1HeadersParser.readHeaders(
+                    serverReader, 16384, ParserMode.STRICT, true);
 
             int entitySize = 0;
             if (reqHeaders.contains(Http.HeaderValues.TRANSFER_ENCODING_CHUNKED)) {

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1Connection.java
Patch:
@@ -364,7 +364,8 @@ private void handleRequestException(RequestException e) {
                                                                   e.eventType(),
                                                                   e.status(),
                                                                   e.responseHeaders(),
-                                                                  e);
+                                                                  e,
+                                                                  LOGGER);
 
         BufferData buffer = BufferData.growing(128);
         ServerResponseHeaders headers = response.headers();

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1Prologue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -74,6 +74,7 @@ private static RequestException badRequest(String message, String method, String
                 .type(DirectHandler.EventType.BAD_REQUEST)
                 .request(DirectTransportRequest.create(protocolAndVersion, method, path))
                 .message(message)
+                .safeMessage(false)
                 .build();
     }
 

File: nima/http2/http2/src/main/java/io/helidon/nima/http2/Http2ConnectionWriter.java
Patch:
@@ -151,6 +151,8 @@ private <T> T withStreamLock(Callable<T> callable) {
             } finally {
                 streamLock.unlock();
             }
+        } catch (RuntimeException e) {
+            throw e;
         } catch (Exception e) {
             throw new RuntimeException(e);
         }

File: pico/tests/interception/src/main/java/io/helidon/pico/tests/interception/TheOtherService.java
Patch:
@@ -19,7 +19,7 @@
 import jakarta.inject.Singleton;
 
 @Singleton
-class TheOtherService implements OtherContract{
+class TheOtherService implements OtherContract {
     private boolean throwException;
 
     @Modify

File: pico/tests/resources-pico/src/main/java/module-info.java
Patch:
@@ -33,5 +33,4 @@
     exports io.helidon.pico.tests.pico.tbox;
 
     provides io.helidon.pico.api.ModuleComponent with io.helidon.pico.tests.pico.Pico$$Module;
-    provides io.helidon.pico.api.Application with io.helidon.pico.tests.pico.Pico$$Application;
 }

File: nima/http/processor/src/main/java/io/helidon/nima/http/processor/HttpMethodCreator.java
Patch:
@@ -121,7 +121,7 @@ private Map<String, Object> addProperties(CustomAnnotationTemplateRequest reques
 
         // http.params (full string)
         List<HeaderDef> headerList = new LinkedList<>();
-        List<TypedElementInfo> elementArgs = request.targetElementArgs();
+        List<TypedElementInfo> elementArgs = request.targetElement().parameterArguments();
         LinkedList<String> parameters = new LinkedList<>();
         int headerCount = 1;
         for (TypedElementInfo elementArg : elementArgs) {

File: pico/processor/src/test/java/io/helidon/pico/processor/CustomAnnotationProcessorTest.java
Patch:
@@ -27,7 +27,6 @@
 import io.helidon.common.types.TypeName;
 import io.helidon.common.types.TypedElementInfo;
 import io.helidon.common.types.TypedElementInfoDefault;
-import io.helidon.pico.api.ElementInfo;
 import io.helidon.pico.api.ServiceInfoBasics;
 import io.helidon.pico.api.ServiceInfoDefault;
 import io.helidon.pico.processor.testsubjects.BasicEndpoint;
@@ -84,8 +83,6 @@ void extensibleGET() {
                 .annoTypeName(create(ExtensibleGET.class))
                 .serviceInfo(serviceInfo)
                 .targetElement(target)
-                .targetElementArgs(List.of(arg1))
-                .targetElementAccess(ElementInfo.Access.PUBLIC)
                 .enclosingTypeInfo(enclosingTypeInfo)
                 .genericTemplateCreator(genericTemplateCreator)
                 .build();

File: builder/processor-spi/src/main/java/io/helidon/builder/processor/spi/TypeInfoCreatorProvider.java
Patch:
@@ -25,7 +25,7 @@
 
 import io.helidon.common.types.TypeInfo;
 import io.helidon.common.types.TypeName;
-import io.helidon.common.types.TypedElementName;
+import io.helidon.common.types.TypedElementInfo;
 
 /**
  * Java {@link java.util.ServiceLoader} provider interface used to discover type info creators.
@@ -58,13 +58,13 @@ Optional<TypeInfo> createBuilderTypeInfo(TypeName annoTypeName,
      * @param mirror            the type mirror for the element being processed
      * @param processingEnv     the processing environment
      * @param elementOfInterest the predicate filter to determine whether the element is of interest, and therefore should be
-     *                          included in {@link TypeInfo#elementInfo()}. Otherwise, if the predicate indicates it is not of
+     *                          included in {@link TypeInfo#interestingElementInfo()}. Otherwise, if the predicate indicates it is not of
      *                          interest then the method will be placed under {@link TypeInfo#otherElementInfo()} instead
      * @return the type info associated with the arguments being processed, or empty if not able to process the type
      */
     Optional<TypeInfo> createTypeInfo(TypeElement element,
                                       TypeMirror mirror,
                                       ProcessingEnvironment processingEnv,
-                                      Predicate<TypedElementName> elementOfInterest);
+                                      Predicate<TypedElementInfo> elementOfInterest);
 
 }

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/GenerateJavadoc.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.builder.processor.tools;
 
 import io.helidon.common.types.TypeName;
-import io.helidon.common.types.TypedElementName;
+import io.helidon.common.types.TypedElementInfo;
 
 final class GenerateJavadoc {
     private GenerateJavadoc() {
@@ -106,7 +106,7 @@ static void updateConsumer(StringBuilder builder) {
     }
 
     static void builderField(StringBuilder builder,
-                             TypedElementName method) {
+                             TypedElementInfo method) {
         builder.append("\t\t/**\n" + "\t\t * Field value for {@code ")
                 .append(method)
                 .append("()}.\n\t\t */\n");

File: common/types/src/main/java/io/helidon/common/types/AnnotationAndValueDefault.java
Patch:
@@ -31,7 +31,7 @@ public class AnnotationAndValueDefault implements AnnotationAndValue, Comparable
     private final Map<String, String> values;
 
     /**
-     * Ctor.
+     * Constructor taking the result of the fluent builder.
      *
      * @param b the builder
      * @see #builder()
@@ -230,12 +230,11 @@ public int compareTo(AnnotationAndValue other) {
      */
     public static class Builder implements io.helidon.common.Builder<Builder, AnnotationAndValueDefault> {
         private final Map<String, String> values = new LinkedHashMap<>();
-
         private TypeName typeName;
         private String value;
 
         /**
-         * Default ctor.
+         * Default fluent builder constructor.
          */
         protected Builder() {
         }

File: pico/api/src/main/java/io/helidon/pico/api/InvocationContext.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.builder.Builder;
 import io.helidon.common.types.AnnotationAndValue;
 import io.helidon.common.types.TypeName;
-import io.helidon.common.types.TypedElementName;
+import io.helidon.common.types.TypedElementInfo;
 
 import jakarta.inject.Provider;
 
@@ -59,14 +59,14 @@ public interface InvocationContext {
      *
      * @return the element info represents the method (or the constructor) being invoked
      */
-    TypedElementName elementInfo();
+    TypedElementInfo elementInfo();
 
     /**
      * The method/element argument info.
      *
      * @return the method/element argument info
      */
-    Optional<TypedElementName[]> elementArgInfo();
+    Optional<TypedElementInfo[]> elementArgInfo();
 
     /**
      * The interceptor chain.

File: pico/configdriven/processor/src/main/java/io/helidon/pico/configdriven/processor/ConfiguredByAnnotationProcessor.java
Patch:
@@ -26,7 +26,7 @@
 import io.helidon.common.types.AnnotationAndValue;
 import io.helidon.common.types.TypeInfo;
 import io.helidon.common.types.TypeName;
-import io.helidon.common.types.TypedElementName;
+import io.helidon.common.types.TypedElementInfo;
 import io.helidon.pico.processor.PicoAnnotationProcessor;
 import io.helidon.pico.tools.ActivatorCreatorProvider;
 import io.helidon.pico.tools.ServicesToProcess;
@@ -65,7 +65,7 @@ protected Set<String> supportedServiceClassTargetAnnotations() {
     protected void processExtensions(ServicesToProcess services,
                                      TypeInfo service,
                                      Set<TypeName> serviceTypeNamesToCodeGenerate,
-                                     Collection<TypedElementName> allElementsOfInterest) {
+                                     Collection<TypedElementInfo> allElementsOfInterest) {
         Optional<? extends AnnotationAndValue> configuredByAnno = findFirst(PICO_CONFIGURED_BY, service.annotations());
         if (configuredByAnno.isEmpty()) {
             return;

File: pico/processor/src/main/java/io/helidon/pico/processor/ActiveProcessorUtils.java
Patch:
@@ -38,7 +38,7 @@
 import io.helidon.builder.processor.spi.TypeInfoCreatorProvider;
 import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.types.TypeInfo;
-import io.helidon.common.types.TypedElementName;
+import io.helidon.common.types.TypedElementInfo;
 import io.helidon.pico.tools.Messager;
 import io.helidon.pico.tools.ModuleInfoDescriptor;
 import io.helidon.pico.tools.Options;
@@ -187,7 +187,7 @@ void relayModuleInfoToServicesToProcess(ServicesToProcess servicesToProcess) {
      */
     Optional<TypeInfo> toTypeInfo(TypeElement element,
                                   TypeMirror mirror,
-                                  Predicate<TypedElementName> isOneWeCareAbout) {
+                                  Predicate<TypedElementInfo> isOneWeCareAbout) {
         return typeInfoCreatorProvider.createTypeInfo(element, mirror, processingEnv, isOneWeCareAbout);
     }
 

File: pico/runtime/src/test/java/io/helidon/pico/runtime/InvocationTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Function;
 
-import io.helidon.common.types.TypedElementNameDefault;
+import io.helidon.common.types.TypedElementInfoDefault;
 import io.helidon.pico.api.Interceptor;
 import io.helidon.pico.api.InvocationContext;
 import io.helidon.pico.api.InvocationContextDefault;
@@ -42,7 +42,7 @@ class InvocationTest {
     TestInterceptor first = new TestInterceptor("first");
     TestInterceptor second = new TestInterceptor("second");
     InvocationContext dummyCtx = InvocationContextDefault.builder()
-            .elementInfo(TypedElementNameDefault.builder().elementName("test").typeName(InvocationTest.class).build())
+            .elementInfo(TypedElementInfoDefault.builder().elementName("test").typeName(InvocationTest.class).build())
             .interceptors(List.of(first.provider, second.provider));
     ArrayList<Object[]> calls = new ArrayList<>();
 
@@ -63,7 +63,7 @@ void normalCaseWithInterceptors() {
     @Test
     void normalCaseWithNoInterceptors() {
         InvocationContext dummyCtx = InvocationContextDefault.builder()
-                .elementInfo(TypedElementNameDefault.builder().elementName("test").typeName(InvocationTest.class).build())
+                .elementInfo(TypedElementInfoDefault.builder().elementName("test").typeName(InvocationTest.class).build())
                 .interceptors(List.of());
 
         Object[] args = new Object[] {};

File: pico/tests/resources-plain/src/main/java/io/helidon/pico/tests/plain/interceptor/TestNamedInterceptor.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import io.helidon.common.types.TypeNameDefault;
-import io.helidon.common.types.TypedElementName;
+import io.helidon.common.types.TypedElementInfo;
 import io.helidon.pico.api.Interceptor;
 import io.helidon.pico.api.InvocationContext;
 
@@ -37,7 +37,7 @@ public <V> V proceed(InvocationContext ctx,
                          Object... args) {
         assert (ctx != null);
 
-        TypedElementName methodInfo = ctx.elementInfo();
+        TypedElementInfo methodInfo = ctx.elementInfo();
         if (methodInfo != null && methodInfo.typeName().equals(TypeNameDefault.create(long.class))) {
             V result = chain.proceed(args);
             long longResult = (Long) result;

File: pico/tools/src/main/java/io/helidon/pico/tools/CustomAnnotationTemplateRequest.java
Patch:
@@ -21,7 +21,7 @@
 import io.helidon.builder.Builder;
 import io.helidon.common.types.TypeInfo;
 import io.helidon.common.types.TypeName;
-import io.helidon.common.types.TypedElementName;
+import io.helidon.common.types.TypedElementInfo;
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.pico.api.InjectionPointInfo;
 import io.helidon.pico.api.ServiceInfoBasics;
@@ -45,7 +45,7 @@ public interface CustomAnnotationTemplateRequest {
      *
      * @return the target element being processed
      */
-    TypedElementName targetElement();
+    TypedElementInfo targetElement();
 
     /**
      * The access modifier of the element.
@@ -60,7 +60,7 @@ public interface CustomAnnotationTemplateRequest {
      *
      * @return the list of typed arguments for this method or constructor
      */
-    List<TypedElementName> targetElementArgs();
+    List<TypedElementInfo> targetElementArgs();
 
     /**
      * Returns true if the element is declared to be static.

File: pico/tools/src/main/java/io/helidon/pico/tools/CustomAnnotationTemplateResponse.java
Patch:
@@ -21,7 +21,7 @@
 import io.helidon.builder.Builder;
 import io.helidon.builder.Singular;
 import io.helidon.common.types.TypeName;
-import io.helidon.common.types.TypedElementName;
+import io.helidon.common.types.TypedElementInfo;
 
 /**
  * The response from {@link io.helidon.pico.tools.spi.CustomAnnotationTemplateCreator#create(CustomAnnotationTemplateRequest)}.
@@ -50,7 +50,7 @@ public interface CustomAnnotationTemplateResponse {
      * @return map of generated type name (which is really just a directory path under resources) to the resource to be generated
      */
     @Singular
-    Map<TypedElementName, String> generatedResources();
+    Map<TypedElementInfo, String> generatedResources();
 
     /**
      * Aggregates the responses given to one response.

File: pico/tools/src/main/java/io/helidon/pico/tools/InterceptorCreatorDefault.java
Patch:
@@ -1057,7 +1057,7 @@ private static InterceptedMethodCodeGen toBody(InterceptedElement method) {
 
         String elementArgInfo = "";
         if (hasArgs) {
-            elementArgInfo = ",\n\t\t\t\tnew TypedElementName[] {" + typedElementArgs + "}";
+            elementArgInfo = ",\n\t\t\t\tnew TypedElementInfo[] {" + typedElementArgs + "}";
         }
         return new InterceptedMethodCodeGen(name, methodDecl, true, hasReturn, supplierType, elementArgInfo, args,
                                             objArrayArgs, untypedElementArgs,

File: security/integration/jersey-client/src/main/java/module-info.java
Patch:
@@ -30,7 +30,6 @@
     requires io.helidon.common.uri;
     requires io.helidon.jersey.common;
     requires io.helidon.security.integration.common;
-    requires io.helidon.reactive.webclient.jaxrs;
     requires jersey.common;
     requires jersey.client;
 

File: security/integration/jersey/src/main/java/module-info.java
Patch:
@@ -42,7 +42,6 @@
     requires io.helidon.jersey.server;
     requires io.helidon.jersey.client;
     requires io.helidon.security.integration.common;
-    requires io.helidon.reactive.webclient.jaxrs;
 
     requires jakarta.inject;
 

File: security/providers/oidc-common/src/main/java/module-info.java
Patch:
@@ -30,7 +30,6 @@
     requires io.helidon.security.providers.common;
     requires io.helidon.security.jwt;
     requires io.helidon.security.providers.httpauth;
-    requires io.helidon.reactive.webclient.jaxrs;
     requires io.helidon.reactive.webclient.security;
     requires io.helidon.reactive.webclient.tracing;
     requires io.helidon.reactive.media.jsonp;

File: tracing/jersey-client/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,6 @@
     requires io.helidon.tracing.config;
     requires io.helidon.common;
     requires io.helidon.common.context;
-    requires io.helidon.reactive.webclient.jaxrs;
 
     exports io.helidon.tracing.jersey.client;
 

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/DefaultBuilderCreatorProvider.java
Patch:
@@ -38,8 +38,8 @@
 import io.helidon.builder.RequiredAttributeVisitor;
 import io.helidon.builder.Singular;
 import io.helidon.builder.processor.spi.BuilderCreatorProvider;
-import io.helidon.builder.processor.spi.DefaultTypeAndBody;
 import io.helidon.builder.processor.spi.TypeAndBody;
+import io.helidon.builder.processor.spi.TypeAndBodyDefault;
 import io.helidon.common.Weight;
 import io.helidon.common.Weighted;
 import io.helidon.common.types.AnnotationAndValue;
@@ -95,11 +95,11 @@ public List<TypeAndBody> create(TypeInfo typeInfo,
             preValidate(implTypeName, typeInfo, builderAnnotation);
 
             List<TypeAndBody> builds = new ArrayList<>();
-            builds.add(DefaultTypeAndBody.builder()
+            builds.add(TypeAndBodyDefault.builder()
                                .typeName(abstractImplTypeName)
                                .body(toBody(createBodyContext(false, abstractImplTypeName, typeInfo, builderAnnotation)))
                                .build());
-            builds.add(DefaultTypeAndBody.builder()
+            builds.add(TypeAndBodyDefault.builder()
                                .typeName(implTypeName)
                                .body(toBody(createBodyContext(true, implTypeName, typeInfo, builderAnnotation)))
                                .build());

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/AbstractApplicationCreatorMojo.java
Patch:
@@ -43,7 +43,7 @@
 import io.helidon.pico.api.ServiceProvider;
 import io.helidon.pico.api.ServiceProviderProvider;
 import io.helidon.pico.api.Services;
-import io.helidon.pico.runtime.DefaultServiceBinder;
+import io.helidon.pico.runtime.ServiceBinderDefault;
 import io.helidon.pico.tools.AbstractFilerMessager;
 import io.helidon.pico.tools.ActivatorCreatorCodeGen;
 import io.helidon.pico.tools.ApplicationCreatorCodeGen;
@@ -373,7 +373,7 @@ List<TypeName> toTypeNames(List<String> permittedProviderQualifierTypeNames) {
     Set<TypeName> toNames(List<ServiceProvider<?>> services) {
         Map<TypeName, ServiceProvider<?>> result = new LinkedHashMap<>();
         services.forEach(sp -> {
-            sp = DefaultServiceBinder.toRootProvider(sp);
+            sp = ServiceBinderDefault.toRootProvider(sp);
             String serviceType = sp.serviceInfo().serviceTypeName();
             TypeName name = TypeNameDefault.createFromTypeName(serviceType);
             ServiceProvider<?> prev = result.put(name, sp);

File: pico/runtime/src/main/java/io/helidon/pico/runtime/DefaultInjectionPlanBinder.java
Patch:
@@ -34,7 +34,7 @@ class DefaultInjectionPlanBinder implements ServiceInjectionPlanBinder, ServiceI
     public Binder bindTo(ServiceProvider<?> untrustedSp) {
         // don't trust what we get, but instead lookup the service provider that we carry in our services registry
         ServiceProvider<?> serviceProvider = services.serviceProviderFor(untrustedSp.serviceInfo().serviceTypeName());
-        Optional<ServiceProviderBindable<?>> bindable = DefaultServiceBinder.toBindableProvider(serviceProvider);
+        Optional<ServiceProviderBindable<?>> bindable = ServiceBinderDefault.toBindableProvider(serviceProvider);
         Optional<Binder> binder = (bindable.isPresent()) ? bindable.get().injectionPlanBinder() : Optional.empty();
         if (binder.isEmpty()) {
             // basically this means this service will not support compile-time injection

File: pico/runtime/src/main/java/io/helidon/pico/runtime/DefaultInjectionPlans.java
Patch:
@@ -308,7 +308,7 @@ static Object resolve(ServiceProvider<?> self,
                 // "standard" case
                 ServiceProvider<?> serviceProvider = serviceProviders.get(0);
                 Optional<ServiceProviderBindable<?>> serviceProviderBindable =
-                        DefaultServiceBinder.toBindableProvider(DefaultServiceBinder.toRootProvider(serviceProvider));
+                        ServiceBinderDefault.toBindableProvider(ServiceBinderDefault.toRootProvider(serviceProvider));
                 if (serviceProviderBindable.isPresent()
                         && serviceProviderBindable.get() != serviceProvider
                         && serviceProviderBindable.get() instanceof ServiceProviderProvider) {

File: pico/runtime/src/main/java/io/helidon/pico/runtime/DefaultServices.java
Patch:
@@ -437,7 +437,7 @@ ServiceBinder createServiceBinder(PicoServices picoServices,
                                       String moduleName,
                                       boolean trusted) {
         assert (picoServices.services() == services);
-        return DefaultServiceBinder.create(picoServices, moduleName, trusted);
+        return ServiceBinderDefault.create(picoServices, moduleName, trusted);
     }
 
     void bind(PicoServices picoServices,

File: pico/testing/src/main/java/io/helidon/pico/testing/PicoTestingSupport.java
Patch:
@@ -33,7 +33,7 @@
 import io.helidon.pico.api.PicoServicesHolder;
 import io.helidon.pico.api.Resettable;
 import io.helidon.pico.api.ServiceProvider;
-import io.helidon.pico.runtime.DefaultServiceBinder;
+import io.helidon.pico.runtime.ServiceBinderDefault;
 
 /**
  * Supporting helper utilities unit-testing Pico services.
@@ -60,7 +60,7 @@ public static void resetAll() {
      */
     public static void bind(PicoServices picoServices,
                             ServiceProvider<?> serviceProvider) {
-        DefaultServiceBinder binder = DefaultServiceBinder.create(picoServices, PicoTestingSupport.class.getSimpleName(), true);
+        ServiceBinderDefault binder = ServiceBinderDefault.create(picoServices, PicoTestingSupport.class.getSimpleName(), true);
         binder.bind(serviceProvider);
     }
 

File: pico/tools/src/main/java/io/helidon/pico/tools/AbstractCreator.java
Patch:
@@ -29,7 +29,7 @@
 import io.helidon.pico.api.PicoServicesConfig;
 import io.helidon.pico.api.ServiceProvider;
 import io.helidon.pico.runtime.AbstractServiceProvider;
-import io.helidon.pico.runtime.DefaultServiceBinder;
+import io.helidon.pico.runtime.ServiceBinderDefault;
 
 import static io.helidon.pico.tools.CommonUtils.hasValue;
 import static io.helidon.pico.tools.TypeTools.needToDeclareModuleUsage;
@@ -111,7 +111,7 @@ static String toActivatorCodeGen(ServiceProvider<?> sp) {
         if (sp instanceof AbstractServiceProvider && ((AbstractServiceProvider<?>) sp).isCustom()) {
             return null;
         }
-        return DefaultServiceBinder.toRootProvider(sp).activator().orElseThrow().getClass().getName() + ".INSTANCE";
+        return ServiceBinderDefault.toRootProvider(sp).activator().orElseThrow().getClass().getName() + ".INSTANCE";
     }
 
     /**

File: pico/tools/src/main/java/io/helidon/pico/tools/ApplicationCreatorDefault.java
Patch:
@@ -43,8 +43,8 @@
 import io.helidon.pico.api.ServiceProvider;
 import io.helidon.pico.api.Services;
 import io.helidon.pico.runtime.AbstractServiceProvider;
-import io.helidon.pico.runtime.DefaultServiceBinder;
 import io.helidon.pico.runtime.PicoInjectionPlan;
+import io.helidon.pico.runtime.ServiceBinderDefault;
 import io.helidon.pico.tools.spi.ApplicationCreator;
 
 import jakarta.inject.Provider;
@@ -322,7 +322,7 @@ String toServiceTypeInjectionPlan(PicoServices picoServices,
     @SuppressWarnings("unchecked")
     List<String> toInjectionPlanBindings(ServiceProvider<?> sp) {
         AbstractServiceProvider<?> asp = AbstractServiceProvider
-                .toAbstractServiceProvider(DefaultServiceBinder.toRootProvider(sp), true).orElseThrow();
+                .toAbstractServiceProvider(ServiceBinderDefault.toRootProvider(sp), true).orElseThrow();
         DependenciesInfo deps = asp.dependencies();
         if (deps.allDependencies().isEmpty()) {
             return List.of();

File: tests/functional/request-scope-injection/src/test/java/io/helidon/tests/functional/context/injection/CheckInjectionTest.java
Patch:
@@ -42,4 +42,4 @@ void testCheckInjection() {
         WebTarget target = baseTarget.path("/check");
         assertThat(target.request().get().getStatus(), is(200));
     }
-}
\ No newline at end of file
+}

File: pico/api/src/test/java/io/helidon/pico/api/PicoServicesConfigDefaultTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.isEmptyOrNullString;
 
-class DefaultPicoConfigTest {
+class PicoServicesConfigDefaultTest {
 
     @AfterEach
     void reset() {

File: pico/tests/resources-pico/src/main/java/io/helidon/pico/tests/pico/interceptor/XImpl.java
Patch:
@@ -20,7 +20,9 @@
 import java.io.IOException;
 import java.util.Optional;
 
+import io.helidon.pico.api.ClassNamed;
 import io.helidon.pico.api.ExternalContracts;
+import io.helidon.pico.tests.pico.ClassNamedX;
 import io.helidon.pico.tests.plain.interceptor.IA;
 import io.helidon.pico.tests.plain.interceptor.IB;
 import io.helidon.pico.tests.plain.interceptor.InterceptorBasedAnno;
@@ -36,7 +38,7 @@
  * Also note that interception was triggered by the presence of the {@link TestNamed} and {@link InterceptorBasedAnno} triggers.
  */
 @Singleton
-@Named("ClassX")
+@ClassNamed(ClassNamedX.class)
 @TestNamed("TestNamed-ClassX")
 @ExternalContracts(value = Closeable.class, moduleNames = {"test1", "test2"})
 @SuppressWarnings("unused")

File: pico/tests/resources-pico/src/main/java/io/helidon/pico/tests/pico/interceptor/YImpl.java
Patch:
@@ -20,7 +20,9 @@
 import java.io.IOException;
 import java.util.Optional;
 
+import io.helidon.pico.api.ClassNamed;
 import io.helidon.pico.api.ExternalContracts;
+import io.helidon.pico.tests.pico.ClassNamedY;
 import io.helidon.pico.tests.plain.interceptor.IA;
 import io.helidon.pico.tests.plain.interceptor.IB;
 import io.helidon.pico.tests.plain.interceptor.InterceptorBasedAnno;
@@ -36,7 +38,7 @@
  * Also note that interception was triggered by the presence of the {@link InterceptorBasedAnno} trigger.
  */
 @Singleton
-@Named("ClassY")
+@ClassNamed(ClassNamedY.class)
 @ExternalContracts(value = Closeable.class, moduleNames = {"test1", "test2"})
 @SuppressWarnings("unused")
 public class YImpl implements IB, Closeable {

File: pico/tests/resources-pico/src/test/java/io/helidon/pico/tests/pico/interceptor/InterceptorRuntimeTest.java
Patch:
@@ -36,6 +36,7 @@
 import io.helidon.pico.api.ServiceProvider;
 import io.helidon.pico.api.Services;
 import io.helidon.pico.testing.ReflectionBasedSingletonServiceProvider;
+import io.helidon.pico.tests.pico.ClassNamedY;
 import io.helidon.pico.tests.plain.interceptor.IB;
 import io.helidon.pico.tests.plain.interceptor.InterceptorBasedAnno;
 import io.helidon.pico.tests.plain.interceptor.TestNamedInterceptor;
@@ -168,7 +169,7 @@ void runtimeWithNoInterception() throws Exception {
                 .lookupFirst(
                         ServiceInfoCriteriaDefault.builder()
                                 .addContractImplemented(Closeable.class.getName())
-                                .qualifiers(Set.of(create(Named.class, "ClassY")))
+                                .qualifiers(Set.of(create(Named.class, ClassNamedY.class.getName())))
                                 .build());
         assertThat(toDescription(yimplProvider),
                    equalTo("YImpl$$Pico$$Interceptor:INIT"));
@@ -250,7 +251,7 @@ void runtimeWithInterception() throws Exception {
                 .lookupFirst(
                         ServiceInfoCriteriaDefault.builder()
                                 .addContractImplemented(Closeable.class.getName())
-                                .qualifiers(Set.of(create(Named.class, "ClassY")))
+                                .qualifiers(Set.of(create(Named.class, ClassNamedY.class.getName())))
                                 .build());
         assertThat(toDescription(yimplProvider),
                    equalTo("YImpl$$Pico$$Interceptor:INIT"));

File: examples/quickstarts/helidon-standalone-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/BodyContext.java
Patch:
@@ -559,7 +559,7 @@ private static String searchForBuilderAnnotation(String key,
 
         if (!builderTriggerAnnotation.typeName().equals(BUILDER_ANNO_TYPE_NAME)) {
             AnnotationAndValue builderAnnotation = AnnotationAndValueDefault
-                    .findFirst(BUILDER_ANNO_TYPE_NAME.name(), typeInfo.annotations()).orElse(null);
+                    .findFirst(BUILDER_ANNO_TYPE_NAME, typeInfo.annotations()).orElse(null);
             if (builderAnnotation != null) {
                 val = builderAnnotation.value(key).orElse(null);
             }
@@ -576,7 +576,7 @@ private void gatherAllAttributeNames(TypeInfo typeInfo) {
         TypeInfo superTypeInfo = typeInfo.superTypeInfo().orElse(null);
         if (superTypeInfo != null) {
             Optional<? extends AnnotationAndValue> superBuilderAnnotation = AnnotationAndValueDefault
-                    .findFirst(builderTriggerAnnotation.typeName().name(), superTypeInfo.annotations());
+                    .findFirst(builderTriggerAnnotation.typeName(), superTypeInfo.annotations());
             if (superBuilderAnnotation.isEmpty()) {
                 gatherAllAttributeNames(superTypeInfo);
             } else {
@@ -692,7 +692,7 @@ private static TypeName toParentTypeName(AnnotationAndValue builderTriggerAnnota
         TypeInfo superTypeInfo = typeInfo.superTypeInfo().orElse(null);
         if (superTypeInfo != null) {
             Optional<? extends AnnotationAndValue> superBuilderAnnotation = AnnotationAndValueDefault
-                    .findFirst(builderTriggerAnnotation.typeName().name(), superTypeInfo.annotations());
+                    .findFirst(builderTriggerAnnotation.typeName(), superTypeInfo.annotations());
             if (superBuilderAnnotation.isEmpty()) {
                 return toParentTypeName(builderTriggerAnnotation, superTypeInfo);
             }

File: builder/processor-tools/src/main/java/module-info.java
Patch:
@@ -19,6 +19,7 @@
  */
 module io.helidon.builder.processor.tools {
     requires java.compiler;
+    requires jdk.compiler;
     requires io.helidon.common.types;
     requires io.helidon.builder;
     requires io.helidon.builder.processor.spi;

File: builder/processor/src/main/java/io/helidon/builder/processor/BuilderProcessor.java
Patch:
@@ -94,14 +94,14 @@ public void init(ProcessingEnvironment processingEnv) {
                 .orElse(null);
 
         if (tools == null) {
-            String msg = "no available " + TypeInfoCreatorProvider.class.getSimpleName() + " instances found";
+            String msg = "No available " + TypeInfoCreatorProvider.class.getSimpleName() + " instances found";
             processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg);
             throw new IllegalStateException(msg);
         }
         LOGGER.log(System.Logger.Level.DEBUG, TypeInfoCreatorProvider.class.getSimpleName() + ": " + tools);
 
         if (PRODUCERS.isEmpty()) {
-            String msg = "no available " + BuilderCreatorProvider.class.getSimpleName() + " instances found";
+            String msg = "No available " + BuilderCreatorProvider.class.getSimpleName() + " instances found";
             processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg);
             throw new IllegalStateException(msg);
         }
@@ -159,7 +159,7 @@ protected void process(Class<? extends Annotation> annoType,
         TypeName typeName = BuilderTypeTools.createTypeNameFromElement(element).orElse(null);
         boolean defineDefaultMethods = Boolean.parseBoolean(builderAnno.value("defineDefaultMethods").orElse(null));
         Optional<TypeInfo> typeInfo = tools
-                .createTypeInfo(builderAnno.typeName(), typeName, (TypeElement) element, processingEnv, defineDefaultMethods);
+            .createBuilderTypeInfo(builderAnno.typeName(), typeName, (TypeElement) element, processingEnv, defineDefaultMethods);
         if (typeInfo.isEmpty()) {
             String msg = "Nothing to process, skipping: " + element;
             LOGGER.log(System.Logger.Level.WARNING, msg);

File: pico/processor/src/main/java/io/helidon/pico/processor/BaseAnnotationProcessor.java
Patch:
@@ -710,7 +710,9 @@ Set<TypeName> toContracts(TypeElement type,
             if (isProviderType(teContractName.name())) {
                 result.add(TypeNameDefault.createFromTypeName(TypeNames.JAKARTA_PROVIDER));
             }
-            providerForSet.add(gTypeName);
+            if (!gTypeName.generic()) {
+                providerForSet.add(gTypeName);
+            }
         }
 
         if (!result.isEmpty()) {

File: builder/builder-config/src/main/java/io/helidon/builder/config/ConfigBean.java
Patch:
@@ -108,7 +108,7 @@
      *
      * @return true if repeatable
      */
-    boolean repeatable() default true;
+    boolean repeatable() default false;
 
     /**
      * An instance of this bean will be created if there are no instances discovered by the configuration provider(s) post

File: builder/builder-config/src/main/java/io/helidon/builder/config/spi/ConfigBeanInfo.java
Patch:
@@ -26,7 +26,7 @@
  * Represents all the attributes belonging to {@link io.helidon.builder.config.ConfigBean} available in a
  * {@link io.helidon.builder.Builder} style usage pattern.
  */
-@Builder(implPrefix = "Meta")
+@Builder(implPrefix = "Meta", implSuffix = "")
 public interface ConfigBeanInfo extends ConfigBean {
 
     /**

File: builder/builder-config/src/main/java/module-info.java
Patch:
@@ -20,7 +20,8 @@
 module io.helidon.builder.config {
     requires static jakarta.annotation;
     requires static jakarta.inject;
-    requires io.helidon.builder;
+    // used in generated code
+    requires transitive io.helidon.builder;
     requires io.helidon.common;
     requires io.helidon.common.config;
 

File: builder/builder-config/src/test/java/io/helidon/builder/config/MetaConfigBeanInfoTest.java
Patch:
@@ -37,7 +37,7 @@ void testToMetaConfigBeanInfoFromConfigBean() {
         ConfigBean cfg = Objects.requireNonNull(getClass().getAnnotation(ConfigBean.class));
         MetaConfigBeanInfo metaCfg = ConfigBeanInfo.toMetaConfigBeanInfo(cfg, ConfigBean.class);
         assertThat(metaCfg.annotationType(), sameInstance(ConfigBean.class));
-        assertThat(metaCfg.repeatable(), is(true));
+        assertThat(metaCfg.repeatable(), is(false));
         assertThat(metaCfg.drivesActivation(), is(false));
         assertThat(metaCfg.atLeastOne(), is(false));
         assertThat(metaCfg.wantDefaultConfigBean(), is(false));

File: builder/processor/src/main/java/io/helidon/builder/processor/BuilderProcessor.java
Patch:
@@ -46,9 +46,9 @@
 import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.Weights;
 import io.helidon.common.types.AnnotationAndValue;
-import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeInfo;
 import io.helidon.common.types.TypeName;
+import io.helidon.common.types.TypeNameDefault;
 
 /**
  * The processor for handling any annotation having a {@link io.helidon.builder.BuilderTrigger}.
@@ -167,7 +167,7 @@ protected void process(Class<? extends Annotation> annoType,
             return;
         }
 
-        Set<BuilderCreatorProvider> creators = getProducersForType(DefaultTypeName.create(annoType));
+        Set<BuilderCreatorProvider> creators = getProducersForType(TypeNameDefault.create(annoType));
         Optional<List<TypeAndBody>> result = creators.stream()
                 .map(it -> it.create(typeInfo.get(), builderAnno))
                 .filter(it -> !it.isEmpty())
@@ -204,7 +204,7 @@ private static List<BuilderCreatorProvider> initialize() {
                     .asList();
             producers.forEach(producer -> {
                 producer.supportedAnnotationTypes().forEach(annoType -> {
-                    PRODUCERS_BY_ANNOTATION.computeIfAbsent(DefaultTypeName.create(annoType), it -> new LinkedHashSet<>())
+                    PRODUCERS_BY_ANNOTATION.computeIfAbsent(TypeNameDefault.create(annoType), it -> new LinkedHashSet<>())
                             .add(producer);
                 });
             });

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/BeanBuilderInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,11 +21,11 @@
 /**
  * See {@link InterceptedBean}.
  */
-class BeanBuilderInterceptor implements BuilderInterceptor<DefaultInterceptedBean.Builder> {
+class BeanBuilderInterceptor implements BuilderInterceptor<InterceptedBeanDefault.Builder> {
     private int callCount;
 
     @Override
-    public DefaultInterceptedBean.Builder intercept(DefaultInterceptedBean.Builder target) {
+    public InterceptedBeanDefault.Builder intercept(InterceptedBeanDefault.Builder target) {
         if (callCount++ > 0) {
             throw new AssertionError();
         }

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/MapCase.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Demonstrate singular properties of maps and builders.
  */
-@Builder(implPrefix = "Test")
+@Builder(implPrefix = "Test", implSuffix = "")
 public abstract class MapCase {
 
     /**

File: builder/tests/builder/src/test/java/io/helidon/builder/test/AbstractWithCustomMethodsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 package io.helidon.builder.test;
 
 import io.helidon.builder.test.testsubjects.AbstractWithCustomMethods;
-import io.helidon.builder.test.testsubjects.DefaultAbstractWithCustomMethods;
+import io.helidon.builder.test.testsubjects.AbstractWithCustomMethodsDefault;
 import io.helidon.builder.test.testsubjects.GeneralInterceptor;
 
 import org.junit.jupiter.api.Test;
@@ -32,7 +32,7 @@ class AbstractWithCustomMethodsTest {
      */
     @Test
     void testIt() {
-        AbstractWithCustomMethods val = DefaultAbstractWithCustomMethods.builder()
+        AbstractWithCustomMethods val = AbstractWithCustomMethodsDefault.builder()
                 .name("test")
                 .isStatic(true)
                 .isClass(false)

File: builder/tests/builder/src/test/java/io/helidon/builder/test/AnnotationCaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 import java.util.Arrays;
 
 import io.helidon.builder.test.testsubjects.AnnotationCase;
-import io.helidon.builder.test.testsubjects.DefaultAnnotationCaseExt;
+import io.helidon.builder.test.testsubjects.AnnotationCaseExtDefault;
 
 import org.junit.jupiter.api.Test;
 
@@ -32,7 +32,7 @@ class AnnotationCaseTest {
 
     @Test
     void testIt() {
-        DefaultAnnotationCaseExt annotationCase = DefaultAnnotationCaseExt.builder().build();
+        AnnotationCaseExtDefault annotationCase = AnnotationCaseExtDefault.builder().build();
         assertThat(annotationCase.annotationType(), sameInstance(AnnotationCase.class));
         assertThat(annotationCase.value(), equalTo("hello"));
         assertThat(Arrays.asList(annotationCase.strArr()), contains("a", "b", "c"));

File: builder/tests/builder/src/test/java/io/helidon/builder/test/TestHelidonOpenApiConfig.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.List;
 
-import io.helidon.builder.test.testsubjects.DefaultHelidonOpenApiConfig;
+import io.helidon.builder.test.testsubjects.HelidonOpenApiConfigDefault;
 
 import org.junit.jupiter.api.Test;
 
@@ -33,7 +33,7 @@ class TestHelidonOpenApiConfig {
 
     @Test
     void testIt() {
-        DefaultHelidonOpenApiConfig config = DefaultHelidonOpenApiConfig.builder()
+        HelidonOpenApiConfigDefault config = HelidonOpenApiConfigDefault.builder()
                 .filter("xyz")
                 .addServer("aServer")
                 .addServers(List.of("anotherServer"))
@@ -47,7 +47,7 @@ void testIt() {
         assertThat(config.toString(),
                    notNullValue());
 
-        DefaultHelidonOpenApiConfig config2 = DefaultHelidonOpenApiConfig.toBuilder(config).build();
+        HelidonOpenApiConfigDefault config2 = HelidonOpenApiConfigDefault.toBuilder(config).build();
         assertThat(config2,
                    equalTo(config));
         assertThat(config2,

File: builder/tests/configbean/src/main/java/io/helidon/builder/config/testsubjects/TestClientConfig.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * For testing purpose.
  */
-@ConfigBean(drivesActivation = false)
+@ConfigBean(drivesActivation = false, repeatable = true)
 public interface TestClientConfig extends TestCommonConfig {
 
     /**

File: builder/tests/configbean/src/main/java/io/helidon/builder/config/testsubjects/fakes/FakeSocketConfig.java
Patch:
@@ -25,7 +25,7 @@
  * aka ServerConfiguration.
  * The SocketConfiguration configures a port to listen on and its associated server socket parameters.
  */
-@ConfigBean(levelType = ConfigBean.LevelType.NESTED)
+@ConfigBean(levelType = ConfigBean.LevelType.NESTED, repeatable = true)
 public interface FakeSocketConfig {
 
     /**

File: builder/tests/configbean/src/test/java/io/helidon/builder/config/test/EnumRelatedConfigBeanTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Set;
 
-import io.helidon.builder.config.testsubjects.DefaultEnumRelatedConfig;
+import io.helidon.builder.config.testsubjects.EnumRelatedConfigDefault;
 import io.helidon.builder.config.testsubjects.EnumRelatedConfig;
 import io.helidon.builder.config.testsubjects.fakes.FakeClientAuth;
 
@@ -35,7 +35,7 @@ class EnumRelatedConfigBeanTest {
 
     @Test
     void testIt() {
-        EnumRelatedConfig cfg = DefaultEnumRelatedConfig.builder()
+        EnumRelatedConfig cfg = EnumRelatedConfigDefault.builder()
                 .clientAuth(FakeClientAuth.OPTIONAL)
                 .list(List.of(EnumRelatedConfig.InlinedEnum.TEST))
                 .addSet(Set.of(EnumRelatedConfig.InlinedEnum.TEST))

File: builder/tests/nodeps/src/main/java/io/helidon/builder/test/nodeps/NoDepsBeanBuilderInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ static NoDepsBeanBuilderInterceptor create() {
     }
 
 //    @Override
-    DefaultNoDepsInterceptedBean.Builder intercept(DefaultNoDepsInterceptedBean.Builder target) {
+    NoDepsInterceptedBeanDefault.Builder intercept(NoDepsInterceptedBeanDefault.Builder target) {
         if (callCount++ > 0) {
             throw new AssertionError();
         }

File: builder/tests/nodeps/src/test/java/io/helidon/builder/test/nodeps/NoDepsBuilderInterceptorBeanTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,13 +25,13 @@ class NoDepsBuilderInterceptorBeanTest {
 
     @Test
     void testMutation() {
-        NoDepsInterceptedBean val = DefaultNoDepsInterceptedBean.builder()
+        NoDepsInterceptedBean val = NoDepsInterceptedBeanDefault.builder()
                 .name("Larry")
                 .build();
         assertThat(val.name(), equalTo("Larry"));
         assertThat(val.helloMessage(), equalTo("Hello Larry"));
 
-        NoDepsInterceptedBean val2 = DefaultNoDepsInterceptedBean.builder()
+        NoDepsInterceptedBean val2 = NoDepsInterceptedBeanDefault.builder()
                 .name("Larry")
                 .build();
         assertThat(val, equalTo(val2));

File: examples/nima/pico/src/main/java/io/helidon/examples/nima/pico/PicoMain.java
Patch:
@@ -22,7 +22,7 @@
 import io.helidon.config.ConfigSources;
 import io.helidon.logging.common.LogConfig;
 import io.helidon.pico.api.Bootstrap;
-import io.helidon.pico.api.DefaultBootstrap;
+import io.helidon.pico.api.BootstrapDefault;
 import io.helidon.pico.api.PicoServices;
 
 /**
@@ -48,7 +48,7 @@ public static void main(String[] args) {
                     .disableSystemPropertiesSource()
                     .disableEnvironmentVariablesSource()
                     .build();
-            Bootstrap bootstrap = DefaultBootstrap.builder()
+            Bootstrap bootstrap = BootstrapDefault.builder()
                     .config(config)
                     .build();
             PicoServices.globalBootstrap(bootstrap);

File: examples/pico/car/dagger2/src/main/java/io/helidon/examples/pico/car/dagger2/VehiclesModule.java
Patch:
@@ -34,7 +34,7 @@ public Engine provideEngine() {
     @Provides
     @Singleton
     public Brand provideBrand() {
-        return DefaultBrand.builder().name(brandName).build();
+        return BrandDefault.builder().name(brandName).build();
     }
 
     @Override

File: examples/pico/car/pico/src/main/java/io/helidon/examples/pico/car/pico/BrandProvider.java
Patch:
@@ -25,7 +25,7 @@ public class BrandProvider implements Provider<Brand> {
 
     @Override
     public Brand get() {
-        return DefaultBrand.builder().name(brandName).build();
+        return BrandDefault.builder().name(brandName).build();
     }
 
 }

File: nima/http2/webclient/src/test/java/io/helidon/nima/http2/webclient/Http2WebClientTest.java
Patch:
@@ -32,7 +32,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.common.pki.KeyConfig;
 import io.helidon.nima.common.tls.Tls;
-import io.helidon.nima.http2.webserver.DefaultHttp2Config;
+import io.helidon.nima.http2.webserver.Http2ConfigDefault;
 import io.helidon.nima.http2.webserver.Http2ConnectionProvider;
 import io.helidon.nima.http2.webserver.Http2Route;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
@@ -103,7 +103,7 @@ static void setUpServer(WebServer.Builder serverBuilder) {
                         .host("localhost")
                 )
                 .addConnectionProvider(Http2ConnectionProvider.builder()
-                                               .http2Config(DefaultHttp2Config.builder()
+                                               .http2Config(Http2ConfigDefault.builder()
                                                                     .initialWindowSize(10))
                                                .build())
                 .socket("https",

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/Http2Config.java
Patch:
@@ -90,7 +90,7 @@ public interface Http2Config {
      * @return duration
      * @see <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO_8601 Durations</a>
      */
-    @ConfiguredOption("java.time.Duration.ofMillis(100L)")
+    @ConfiguredOption("PT0.1S")
     Duration flowControlTimeout();
 
     /**

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/Http2ConnectionProvider.java
Patch:
@@ -72,7 +72,7 @@ public List<String> configKeys() {
     public ServerConnectionSelector create(Function<String, Config> configs) {
         Http2Config config;
         if (http2Config == null) {
-            config = DefaultHttp2Config.toBuilder(configs.apply(CONFIG_NAME)).build();
+            config = Http2ConfigDefault.toBuilder(configs.apply(CONFIG_NAME)).build();
         } else {
             config = http2Config;
         }

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/Http2UpgradeProvider.java
Patch:
@@ -76,7 +76,7 @@ public Http1Upgrader create(Function<String, Config> config) {
         Http2Config usedConfig;
 
         if (http2Config == null) {
-            usedConfig = DefaultHttp2Config.toBuilder(config.apply(Http2ConnectionProvider.CONFIG_NAME)).build();
+            usedConfig = Http2ConfigDefault.toBuilder(config.apply(Http2ConnectionProvider.CONFIG_NAME)).build();
         } else {
             usedConfig = http2Config;
         }

File: nima/http2/webserver/src/test/java/io/helidon/nima/http2/webserver/ConnectionConfigTest.java
Patch:
@@ -62,7 +62,7 @@ void testConnectionConfig() {
     void testProviderConfigBuilder() {
 
         Http2ConnectionSelector provider = (Http2ConnectionSelector) Http2ConnectionProvider.builder()
-                .http2Config(DefaultHttp2Config.builder()
+                .http2Config(Http2ConfigDefault.builder()
                                      .maxFrameSize(4096)
                                      .maxHeaderListSize(2048L)
                                      .build())
@@ -143,7 +143,7 @@ public Iterable<String> configKeys() {
         @Override
         public ServerConnectionSelector create(Function<String, Config> configs) {
             Config config = configs.apply("http_2");
-            http2Config = DefaultHttp2Config.toBuilder(config).build();
+            http2Config = Http2ConfigDefault.toBuilder(config).build();
             return mock(ServerConnectionSelector.class);
         }
 

File: nima/tests/integration/http2/server/src/test/java/io/helidon/nima/tests/integration/http2/webserver/FlowControlTest.java
Patch:
@@ -36,7 +36,7 @@
 import io.helidon.common.reactive.Multi;
 import io.helidon.nima.http2.WindowSize;
 import io.helidon.nima.http2.webclient.Http2Client;
-import io.helidon.nima.http2.webserver.DefaultHttp2Config;
+import io.helidon.nima.http2.webserver.Http2ConfigDefault;
 import io.helidon.nima.http2.webserver.Http2ConnectionProvider;
 import io.helidon.nima.http2.webserver.Http2Route;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
@@ -76,7 +76,7 @@ class FlowControlTest {
     static void setUpServer(WebServer.Builder serverBuilder) {
         serverBuilder
                 .addConnectionProvider(Http2ConnectionProvider.builder()
-                                               .http2Config(DefaultHttp2Config.builder()
+                                               .http2Config(Http2ConfigDefault.builder()
                                                                     .initialWindowSize(WindowSize.DEFAULT_WIN_SIZE)
                                                )
                                                .build())

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ConfiguredLimitsTest.java
Patch:
@@ -30,7 +30,7 @@
 import io.helidon.nima.webserver.http.HttpRules;
 import io.helidon.nima.webserver.http.ServerRequest;
 import io.helidon.nima.webserver.http.ServerResponse;
-import io.helidon.nima.webserver.http1.DefaultHttp1Config;
+import io.helidon.nima.webserver.http1.Http1ConfigDefault;
 import io.helidon.nima.webserver.http1.Http1ConnectionProvider;
 import io.helidon.nima.webserver.spi.ServerConnectionProvider;
 
@@ -59,7 +59,7 @@ class ConfiguredLimitsTest {
     @SetUpServer
     static void server(WebServer.Builder server) {
         ServerConnectionProvider http1 = Http1ConnectionProvider.builder()
-                .http1Config(DefaultHttp1Config.builder()
+                .http1Config(Http1ConfigDefault.builder()
                                      .maxHeadersSize(1024)
                                      .maxPrologueLength(512)
                                      .build())

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ContentEncodingDisabledNoValidationTest.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
 import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.http1.DefaultHttp1Config;
+import io.helidon.nima.webserver.http1.Http1ConfigDefault;
 import io.helidon.nima.webserver.http1.Http1ConnectionProvider;
 import io.helidon.nima.webserver.spi.ServerConnectionProvider;
 
@@ -51,7 +51,7 @@ public class ContentEncodingDisabledNoValidationTest extends ContentEncodingDisa
     static void server(WebServer.Builder server) {
         ServerConnectionProvider http1 = Http1ConnectionProvider.builder()
                 // Headers validation is disabled
-                .http1Config(DefaultHttp1Config.builder().validateHeaders(false).build())
+                .http1Config(Http1ConfigDefault.builder().validateHeaders(false).build())
                 .build();
         server.addConnectionProvider(http1)
                 // Content encoding needs to be completely disabled

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ContentEncodingDisabledTest.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webclient.http1.Http1ClientResponse;
 import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.http1.DefaultHttp1Config;
+import io.helidon.nima.webserver.http1.Http1ConfigDefault;
 import io.helidon.nima.webserver.http1.Http1ConnectionProvider;
 import io.helidon.nima.webserver.spi.ServerConnectionProvider;
 
@@ -51,7 +51,7 @@ class ContentEncodingDisabledTest extends ContentEncodingDisabledAbstract {
     static void server(WebServer.Builder server) {
         ServerConnectionProvider http1 = Http1ConnectionProvider.builder()
                 // Headers validation is enabled by default
-                .http1Config(DefaultHttp1Config.builder().build())
+                .http1Config(Http1ConfigDefault.builder().build())
                 .build();
         server.addConnectionProvider(http1)
                 // Content encoding needs to be completely disabled

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/Continue100ImmediatelyTest.java
Patch:
@@ -24,7 +24,7 @@
 import io.helidon.nima.webserver.WebServer;
 import io.helidon.nima.webserver.http.Handler;
 import io.helidon.nima.webserver.http.HttpRouting;
-import io.helidon.nima.webserver.http1.DefaultHttp1Config;
+import io.helidon.nima.webserver.http1.Http1ConfigDefault;
 import io.helidon.nima.webserver.http1.Http1ConnectionProvider;
 import io.helidon.nima.webserver.spi.ServerConnectionProvider;
 import org.junit.jupiter.api.Test;
@@ -83,7 +83,7 @@ class Continue100ImmediatelyTest {
     @SetUpServer
     static void server(WebServer.Builder wsb){
         ServerConnectionProvider http1 = Http1ConnectionProvider.builder()
-                .http1Config(DefaultHttp1Config.builder()
+                .http1Config(Http1ConfigDefault.builder()
                         .continueImmediately(true)
                         .build())
                 .build();

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ServerConfig.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Server configuration bean.
- * There is a generated {@link io.helidon.nima.webserver.DefaultServerConfig} implementing this type, that can be used
+ * There is a generated {@link io.helidon.nima.webserver.ServerConfigDefault} implementing this type, that can be used
  * to create an instance manually through a builder, or using configuration.
  */
 @ConfigBean(value = "server", levelType = ConfigBean.LevelType.ROOT, drivesActivation = true)

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/WebServer.java
Patch:
@@ -168,7 +168,7 @@ class Builder implements io.helidon.common.Builder<Builder, WebServer>, Router.R
         private final HelidonServiceLoader.Builder<ServerConnectionProvider> connectionProviders
                 = HelidonServiceLoader.builder(ServiceLoader.load(ServerConnectionProvider.class));
 
-        private final DefaultServerConfig.Builder configBuilder = DefaultServerConfig.builder();
+        private final ServerConfigDefault.Builder configBuilder = ServerConfigDefault.builder();
 
         private Config providersConfig = Config.empty();
         private MediaContext mediaContext = MediaContext.create();

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1ConnectionProvider.java
Patch:
@@ -88,7 +88,7 @@ public Iterable<String> configKeys() {
     public ServerConnectionSelector create(Function<String, Config> configs) {
         Http1Config config;
         if (http1Config == null) {
-            config = DefaultHttp1Config.toBuilder(configs.apply(CONFIG_NAME)).build();
+            config = Http1ConfigDefault.toBuilder(configs.apply(CONFIG_NAME)).build();
         } else {
             config = http1Config;
         }

File: nima/webserver/webserver/src/test/java/io/helidon/nima/webserver/WebServerConfigDrivenTest.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.nima.webserver;
 
 import io.helidon.config.Config;
-import io.helidon.pico.api.DefaultBootstrap;
+import io.helidon.pico.api.BootstrapDefault;
 import io.helidon.pico.api.Phase;
 import io.helidon.pico.api.PicoServices;
 import io.helidon.pico.api.ServiceProvider;
@@ -48,7 +48,7 @@ void testConfigDriven() {
 
         if (NORMAL_PRODUCTION_PATH) {
             // bootstrap Pico with our config tree when it initializes
-            PicoServices.globalBootstrap(DefaultBootstrap.builder().config(config).build());
+            PicoServices.globalBootstrap(BootstrapDefault.builder().config(config).build());
         }
 
         // initialize Pico, and drive all activations based upon what has been configured

File: nima/webserver/webserver/src/test/java/io/helidon/nima/webserver/http1/ConnectionConfigTest.java
Patch:
@@ -59,7 +59,7 @@ public Iterable<String> configKeys() {
         @Override
         public ServerConnectionSelector create(Function<String, Config> configs) {
             config = configs.apply("http_1_1");
-            http1Config = DefaultHttp1Config.toBuilder(config).build();
+            http1Config = Http1ConfigDefault.toBuilder(config).build();
             return mock(ServerConnectionSelector.class);
         }
 

File: pico/api/src/main/java/io/helidon/pico/api/ActivationLogEntry.java
Patch:
@@ -92,13 +92,13 @@ public interface ActivationLogEntry {
     /**
      * Ensures that the non-nullable fields are populated with default values.
      */
-    class Interceptor implements BuilderInterceptor<DefaultActivationLogEntry.Builder> {
+    class Interceptor implements BuilderInterceptor<ActivationLogEntryDefault.Builder> {
 
         Interceptor() {
         }
 
         @Override
-        public DefaultActivationLogEntry.Builder intercept(DefaultActivationLogEntry.Builder b) {
+        public ActivationLogEntryDefault.Builder intercept(ActivationLogEntryDefault.Builder b) {
             if (b.time() == null) {
                 b.time(Instant.now());
             }

File: pico/api/src/main/java/io/helidon/pico/api/ActivationRequest.java
Patch:
@@ -64,7 +64,7 @@ public interface ActivationRequest {
      * @return the activation request
      */
     static ActivationRequest create(Phase targetPhase) {
-        return DefaultActivationRequest.builder()
+        return ActivationRequestDefault.builder()
                 .targetPhase(targetPhase)
                 .build();
     }

File: pico/api/src/main/java/io/helidon/pico/api/ActivationResult.java
Patch:
@@ -141,7 +141,7 @@ default boolean failure() {
      */
     static ActivationResult createSuccess(ServiceProvider<?> serviceProvider) {
         Phase phase = serviceProvider.currentActivationPhase();
-        return DefaultActivationResult.builder()
+        return ActivationResultDefault.builder()
                 .serviceProvider(serviceProvider)
                 .startingActivationPhase(phase)
                 .finishingActivationPhase(phase)

File: pico/api/src/main/java/io/helidon/pico/api/CallingContext.java
Patch:
@@ -133,9 +133,9 @@ public static String toErrorMessage(String msg) {
     }
 
 
-    static class BuilderInterceptor implements io.helidon.builder.BuilderInterceptor<DefaultCallingContext.Builder> {
+    static class BuilderInterceptor implements io.helidon.builder.BuilderInterceptor<CallingContextDefault.Builder> {
         @Override
-        public DefaultCallingContext.Builder intercept(DefaultCallingContext.Builder target) {
+        public CallingContextDefault.Builder intercept(CallingContextDefault.Builder target) {
             if (target.threadName() == null) {
                 target.threadName(Thread.currentThread().getName());
             }

File: pico/api/src/main/java/io/helidon/pico/api/CommonQualifiers.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.helidon.pico.api;
 
-import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeName;
+import io.helidon.common.types.TypeNameDefault;
 
 import jakarta.inject.Named;
 
@@ -29,12 +29,12 @@ public final class CommonQualifiers {
     /**
      * Represents a {@link jakarta.inject.Named} type name with no value.
      */
-    public static final TypeName NAMED = DefaultTypeName.create(Named.class);
+    public static final TypeName NAMED = TypeNameDefault.create(Named.class);
 
     /**
      * Represents a wildcard {@link #NAMED} qualifier.
      */
-    public static final QualifierAndValue WILDCARD_NAMED = DefaultQualifierAndValue.createNamed("*");
+    public static final QualifierAndValue WILDCARD_NAMED = QualifierAndValueDefault.createNamed("*");
 
     private CommonQualifiers() {
     }

File: pico/api/src/main/java/io/helidon/pico/api/ContextualServiceQuery.java
Patch:
@@ -61,7 +61,7 @@ public interface ContextualServiceQuery {
     static ContextualServiceQuery create(InjectionPointInfo ipInfo,
                                          boolean expected) {
         Objects.requireNonNull(ipInfo);
-        return DefaultContextualServiceQuery.builder()
+        return ContextualServiceQueryDefault.builder()
                 .expected(expected)
                 .injectionPointInfo(ipInfo)
                 .serviceInfoCriteria(ipInfo.dependencyToServiceInfo())

File: pico/api/src/main/java/io/helidon/pico/api/DeActivationRequest.java
Patch:
@@ -49,7 +49,7 @@ public static DeActivationRequest defaultDeactivationRequest() {
 
     static class Init {
         static final LazyValue<DeActivationRequest> DEFAULT =
-                LazyValue.create(() -> DefaultDeActivationRequest.builder().build());
+                LazyValue.create(() -> DeActivationRequestDefault.builder().build());
     }
 
 }

File: pico/api/src/main/java/io/helidon/pico/api/DependenciesInfo.java
Patch:
@@ -73,7 +73,7 @@ default List<DependencyInfo> allDependenciesFor(String elemName) {
         return allDependencies().stream()
                 .flatMap(dep -> dep.injectionPointDependencies().stream()
                         .filter(ipi -> elemName.equals(ipi.elementName()))
-                        .map(ipi -> DefaultDependencyInfo.toBuilder(dep)
+                        .map(ipi -> DependencyInfoDefault.toBuilder(dep)
                                 .injectionPointDependencies(Set.of(ipi))
                                 .build()))
                 .sorted(comparator())

File: pico/api/src/main/java/io/helidon/pico/api/InjectorOptions.java
Patch:
@@ -50,14 +50,14 @@ public abstract class InjectorOptions {
     /**
      * This will ensure that the activation request is populated.
      */
-    static class Interceptor implements BuilderInterceptor<DefaultInjectorOptions.Builder> {
+    static class Interceptor implements BuilderInterceptor<InjectorOptionsDefault.Builder> {
         Interceptor() {
         }
 
         @Override
-        public DefaultInjectorOptions.Builder intercept(DefaultInjectorOptions.Builder target) {
+        public InjectorOptionsDefault.Builder intercept(InjectorOptionsDefault.Builder target) {
             if (target.activationRequest() == null) {
-                target.activationRequest(PicoServices.createDefaultActivationRequest());
+                target.activationRequest(PicoServices.createActivationRequestDefault());
             }
             return target;
         }

File: pico/api/src/main/java/io/helidon/pico/api/InternalBootstrap.java
Patch:
@@ -53,8 +53,8 @@ static InternalBootstrap create(Bootstrap bootstrap,
         if (callingContext == null) {
             callingContext = CallingContextFactory.create(false).orElse(null);
         }
-        return DefaultInternalBootstrap.builder()
-                .bootStrap((bootstrap == null) ? DefaultBootstrap.builder().build() : bootstrap)
+        return InternalBootstrapDefault.builder()
+                .bootStrap((bootstrap == null) ? BootstrapDefault.builder().build() : bootstrap)
                 .callingContext(Optional.ofNullable(callingContext))
                 .build();
     }

File: pico/api/src/main/java/io/helidon/pico/api/PicoServicesHolder.java
Patch:
@@ -59,7 +59,7 @@ static Optional<PicoServices> picoServices() {
             if (INSTANCE.get().picoServices == null) {
                 System.getLogger(PicoServices.class.getName())
                         .log(System.Logger.Level.WARNING,
-                             DefaultPicoServicesConfig.NAME + " runtime services not detected on the classpath");
+                             PicoServicesConfig.NAME + " runtime services not detected on the classpath");
             }
         }
         return Optional.ofNullable(INSTANCE.get().picoServices);

File: pico/api/src/main/java/io/helidon/pico/api/RunLevel.java
Patch:
@@ -39,7 +39,7 @@
      * <pre>
      * {@code
      * List<ServiceProvider<Object>> startupServices = services
-     *               .lookup(DefaultServiceInfoCriteria.builder().runLevel(RunLevel.STARTUP).build());
+     *               .lookup(ServiceInfoCriteriaDefault.builder().runLevel(RunLevel.STARTUP).build());
      *       startupServices.stream().forEach(ServiceProvider::get);
      * }
      * </pre>

File: pico/api/src/main/java/io/helidon/pico/api/ServiceInfo.java
Patch:
@@ -175,12 +175,12 @@ private static boolean matchesWeight(ServiceInfoBasics src,
      * @param val the instance to copy
      * @return the fluent builder
      */
-    static DefaultServiceInfo.Builder toBuilder(ServiceInfoBasics val) {
+    static ServiceInfoDefault.Builder toBuilder(ServiceInfoBasics val) {
         if (val instanceof ServiceInfo) {
-            return DefaultServiceInfo.toBuilder((ServiceInfo) val);
+            return ServiceInfoDefault.toBuilder((ServiceInfo) val);
         }
 
-        DefaultServiceInfo.Builder result = DefaultServiceInfo.builder();
+        ServiceInfoDefault.Builder result = ServiceInfoDefault.builder();
         result.serviceTypeName(val.serviceTypeName());
         result.scopeTypeNames(val.scopeTypeNames());
         result.qualifiers(val.qualifiers());

File: pico/api/src/main/java/io/helidon/pico/api/ServiceInfoBuildInterceptor.java
Patch:
@@ -21,10 +21,10 @@
 /**
  * Ensures that all external contracts are also treated as normal contracts, etc.
  */
-class ServiceInfoBuildInterceptor implements BuilderInterceptor<DefaultServiceInfo.Builder> {
+class ServiceInfoBuildInterceptor implements BuilderInterceptor<ServiceInfoDefault.Builder> {
 
     @Override
-    public DefaultServiceInfo.Builder intercept(DefaultServiceInfo.Builder target) {
+    public ServiceInfoDefault.Builder intercept(ServiceInfoDefault.Builder target) {
         target.addContractsImplemented(target.externalContractsImplemented());
         return target;
     }

File: pico/api/src/test/java/io/helidon/pico/api/DefaultQualifierAndValueTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.pico.api;
 
-import io.helidon.common.types.DefaultAnnotationAndValue;
+import io.helidon.common.types.AnnotationAndValueDefault;
 
 import jakarta.inject.Named;
 import org.junit.jupiter.api.Test;
@@ -28,11 +28,11 @@ class DefaultQualifierAndValueTest {
 
     @Test
     void buildAndCompare() {
-        DefaultQualifierAndValue qav1 = DefaultQualifierAndValue.builder()
+        QualifierAndValueDefault qav1 = QualifierAndValueDefault.builder()
                 .type(Named.class)
                 .value("x.y")
                 .build();
-        DefaultAnnotationAndValue qav2 = DefaultQualifierAndValue.builder()
+        AnnotationAndValueDefault qav2 = QualifierAndValueDefault.builder()
                 .type(Named.class)
                 .value("x.y")
                 .build();

File: pico/api/src/test/java/io/helidon/pico/api/PicoServicesTest.java
Patch:
@@ -47,7 +47,7 @@ void reset() {
     @Test
     void testGetPicoServices() {
         assertThat(PicoServices.globalBootstrap(), optionalEmpty());
-        Bootstrap bootstrap = DefaultBootstrap.builder().build();
+        Bootstrap bootstrap = BootstrapDefault.builder().build();
         PicoServices.globalBootstrap(bootstrap);
         assertThat(PicoServices.globalBootstrap().orElseThrow(), sameInstance(bootstrap));
 

File: pico/configdriven/tests/configuredby-application/src/test/java/io/helidon/pico/configdriven/configuredby/test/ApplicationConfiguredByTest.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import io.helidon.pico.api.DefaultServiceInfoCriteria;
 import io.helidon.pico.api.Metrics;
 import io.helidon.pico.api.RunLevel;
 import io.helidon.pico.api.ServiceInfoCriteria;
+import io.helidon.pico.api.ServiceInfoCriteriaDefault;
 import io.helidon.pico.api.ServiceProvider;
 import io.helidon.pico.configdriven.configuredby.application.test.ASimpleRunLevelService;
 
@@ -81,7 +81,7 @@ public void startupAndShutdownRunLevelServices() {
         assertThat(ASimpleRunLevelService.getPreDestroyCount(),
                    is(0));
 
-        ServiceInfoCriteria criteria = DefaultServiceInfoCriteria.builder()
+        ServiceInfoCriteria criteria = ServiceInfoCriteriaDefault.builder()
                 .runLevel(RunLevel.STARTUP)
                 .build();
         List<ServiceProvider<?>> startups = services.lookupAll(criteria);

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/AbstractCreatorMojo.java
Patch:
@@ -24,8 +24,8 @@
 import java.util.Objects;
 import java.util.Optional;
 
-import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeName;
+import io.helidon.common.types.TypeNameDefault;
 import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.PicoServicesConfig;
 import io.helidon.pico.api.ServiceProvider;
@@ -278,7 +278,7 @@ protected String determinePackageName(Optional<ServiceProvider<ModuleComponent>>
 
             ServiceProvider<ModuleComponent> moduleSp = optModuleSp.orElse(null);
             if (moduleSp != null) {
-                packageName = DefaultTypeName.createFromTypeName(moduleSp.serviceInfo().serviceTypeName()).packageName();
+                packageName = TypeNameDefault.createFromTypeName(moduleSp.serviceInfo().serviceTypeName()).packageName();
             } else {
                 packageName = toSuggestedGeneratedPackageName(descriptor, typeNames, PicoServicesConfig.NAME);
             }

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/ApplicationCreatorMojo.java
Patch:
@@ -19,7 +19,7 @@
 import java.io.File;
 
 import io.helidon.pico.api.PicoServicesConfig;
-import io.helidon.pico.tools.DefaultApplicationCreator;
+import io.helidon.pico.tools.ApplicationCreatorDefault;
 
 import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
@@ -61,7 +61,7 @@ public ApplicationCreatorMojo() {
 
     @Override
     String getGeneratedClassName() {
-        return (className == null) ? DefaultApplicationCreator.APPLICATION_NAME : className;
+        return (className == null) ? ApplicationCreatorDefault.APPLICATION_NAME : className;
     }
 
     @Override

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/MavenPluginUtils.java
Patch:
@@ -29,7 +29,7 @@
 import io.helidon.common.LazyValue;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.pico.api.DefaultBootstrap;
+import io.helidon.pico.api.BootstrapDefault;
 import io.helidon.pico.api.Phase;
 import io.helidon.pico.api.PicoServices;
 import io.helidon.pico.api.PicoServicesHolder;
@@ -109,7 +109,7 @@ static boolean hasValue(String val) {
 
     static LazyValue<PicoServices> lazyCreate(Config config) {
         return LazyValue.create(() -> {
-            PicoServices.globalBootstrap(DefaultBootstrap.builder()
+            PicoServices.globalBootstrap(BootstrapDefault.builder()
                                                  .config(config)
                                                  .limitRuntimePhase(Phase.GATHERING_DEPENDENCIES)
                                                  .build());

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/Qualifier.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.Map;
 import java.util.Optional;
 
-import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeName;
+import io.helidon.common.types.TypeNameDefault;
 import io.helidon.pico.api.QualifierAndValue;
 
 /**
@@ -54,7 +54,7 @@ public void setQualifierTypeName(String val) {
 
     @Override
     public TypeName typeName() {
-        return DefaultTypeName.createFromTypeName(qualifierTypeName);
+        return TypeNameDefault.createFromTypeName(qualifierTypeName);
     }
 
     @Override

File: pico/runtime/src/main/java/io/helidon/pico/runtime/BoundedServiceProvider.java
Patch:
@@ -23,8 +23,8 @@
 import io.helidon.common.LazyValue;
 import io.helidon.pico.api.Activator;
 import io.helidon.pico.api.ContextualServiceQuery;
+import io.helidon.pico.api.ContextualServiceQueryDefault;
 import io.helidon.pico.api.DeActivator;
-import io.helidon.pico.api.DefaultContextualServiceQuery;
 import io.helidon.pico.api.DependenciesInfo;
 import io.helidon.pico.api.InjectionPointInfo;
 import io.helidon.pico.api.Phase;
@@ -50,7 +50,7 @@ private BoundedServiceProvider(ServiceProvider<T> binding,
                                    InjectionPointInfo ipInfoCtx) {
         this.binding = Objects.requireNonNull(binding);
         this.ipInfoCtx = Objects.requireNonNull(ipInfoCtx);
-        ContextualServiceQuery query = DefaultContextualServiceQuery.builder()
+        ContextualServiceQuery query = ContextualServiceQueryDefault.builder()
                 .injectionPointInfo(ipInfoCtx)
                 .serviceInfoCriteria(ipInfoCtx.dependencyToServiceInfo())
                 .expected(true).build();

File: pico/runtime/src/main/java/io/helidon/pico/runtime/DefaultPicoServicesConfig.java
Patch:
@@ -29,8 +29,8 @@ class DefaultPicoServicesConfig {
     private DefaultPicoServicesConfig() {
     }
 
-    static io.helidon.pico.api.DefaultPicoServicesConfig.Builder createDefaultConfigBuilder() {
-        return io.helidon.pico.api.DefaultPicoServicesConfig.builder()
+    static io.helidon.pico.api.PicoServicesConfigDefault.Builder createDefaultConfigBuilder() {
+        return io.helidon.pico.api.PicoServicesConfigDefault.builder()
                 .providerName(PROVIDER)
                 .providerVersion(Versions.CURRENT_PICO_VERSION);
     }

File: pico/runtime/src/main/java/io/helidon/pico/runtime/InterceptedMethod.java
Patch:
@@ -23,9 +23,9 @@
 import io.helidon.common.types.AnnotationAndValue;
 import io.helidon.common.types.TypeName;
 import io.helidon.common.types.TypedElementName;
-import io.helidon.pico.api.DefaultInvocationContext;
 import io.helidon.pico.api.Interceptor;
 import io.helidon.pico.api.InvocationContext;
+import io.helidon.pico.api.InvocationContextDefault;
 import io.helidon.pico.api.InvocationException;
 import io.helidon.pico.api.ServiceProvider;
 
@@ -61,7 +61,7 @@ protected InterceptedMethod(I interceptedImpl,
                                 TypedElementName methodInfo,
                                 TypedElementName[] methodArgInfo) {
         this.impl = Objects.requireNonNull(interceptedImpl);
-        this.ctx =  DefaultInvocationContext.builder()
+        this.ctx =  InvocationContextDefault.builder()
                 .serviceProvider(serviceProvider)
                 .serviceTypeName(serviceTypeName)
                 .classAnnotations(serviceLevelAnnotations)
@@ -88,7 +88,7 @@ protected InterceptedMethod(I interceptedImpl,
                                 Collection<Provider<Interceptor>> interceptors,
                                 TypedElementName methodInfo) {
         this.impl = Objects.requireNonNull(interceptedImpl);
-        this.ctx =  DefaultInvocationContext.builder()
+        this.ctx =  InvocationContextDefault.builder()
                 .serviceProvider(serviceProvider)
                 .serviceTypeName(serviceTypeName)
                 .classAnnotations(serviceLevelAnnotations)

File: pico/runtime/src/main/java/io/helidon/pico/runtime/VoidServiceProvider.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Optional;
 
 import io.helidon.pico.api.ContextualServiceQuery;
-import io.helidon.pico.api.DefaultServiceInfo;
+import io.helidon.pico.api.ServiceInfoDefault;
 import io.helidon.pico.api.ServiceProvider;
 
 import jakarta.inject.Singleton;
@@ -34,7 +34,7 @@ class VoidServiceProvider extends AbstractServiceProvider<Void> {
     static final List<ServiceProvider<?>> LIST_INSTANCE = List.of(INSTANCE);
 
     private VoidServiceProvider() {
-        serviceInfo(DefaultServiceInfo.builder()
+        serviceInfo(ServiceInfoDefault.builder()
                 .serviceTypeName(serviceTypeName())
                 .addContractsImplemented(serviceTypeName())
                 .activatorTypeName(VoidServiceProvider.class.getName())

File: pico/runtime/src/test/java/io/helidon/pico/runtime/DefaultActivationLogTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.pico.runtime;
 
-import io.helidon.pico.api.DefaultActivationLogEntry;
+import io.helidon.pico.api.ActivationLogEntryDefault;
 
 import org.junit.jupiter.api.Test;
 
@@ -33,7 +33,7 @@ class DefaultActivationLogTest {
     void testRetainedLog() {
         DefaultActivationLog log = DefaultActivationLog.createRetainedLog(LOGGER);
         log.level(System.Logger.Level.INFO);
-        log.record(DefaultActivationLogEntry.builder().build());
+        log.record(ActivationLogEntryDefault.builder().build());
 
         assertThat(log.toQuery(), optionalPresent());
         assertThat(log.toQuery().orElseThrow().fullActivationLog().size(), equalTo(1));
@@ -45,7 +45,7 @@ void testRetainedLog() {
     void unretainedLog() {
         DefaultActivationLog log = DefaultActivationLog.createUnretainedLog(LOGGER);
         log.level(System.Logger.Level.INFO);
-        log.record(DefaultActivationLogEntry.builder().build());
+        log.record(ActivationLogEntryDefault.builder().build());
 
         assertThat(log.toQuery(), optionalEmpty());
     }

File: pico/runtime/src/test/java/io/helidon/pico/runtime/DefaultPicoServicesTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.pico.api.DefaultBootstrap;
+import io.helidon.pico.api.BootstrapDefault;
 import io.helidon.pico.api.PicoServices;
 import io.helidon.pico.api.PicoServicesConfig;
 import io.helidon.pico.runtime.testsubjects.HelloPico$$Application;
@@ -45,7 +45,7 @@ void setUp() {
                 .disableEnvironmentVariablesSource()
                 .disableSystemPropertiesSource()
                 .build();
-        PicoServices.globalBootstrap(DefaultBootstrap.builder().config(config).build());
+        PicoServices.globalBootstrap(BootstrapDefault.builder().config(config).build());
     }
 
     @AfterEach

File: pico/runtime/src/test/java/io/helidon/pico/runtime/testsubjects/HelloPicoImpl$$picoActivator.java
Patch:
@@ -23,10 +23,10 @@
 import java.util.Set;
 
 import io.helidon.common.Weight;
-import io.helidon.pico.api.DefaultServiceInfo;
 import io.helidon.pico.api.DependenciesInfo;
 import io.helidon.pico.api.PostConstructMethod;
 import io.helidon.pico.api.PreDestroyMethod;
+import io.helidon.pico.api.ServiceInfoDefault;
 import io.helidon.pico.runtime.AbstractServiceProvider;
 import io.helidon.pico.runtime.Dependencies;
 
@@ -47,8 +47,8 @@
 @SuppressWarnings({"unchecked", "checkstyle:TypeName"})
 public class HelloPicoImpl$$picoActivator extends AbstractServiceProvider<HelloPicoWorldImpl> {
 
-    private static final DefaultServiceInfo serviceInfo =
-            DefaultServiceInfo.builder()
+    private static final ServiceInfoDefault serviceInfo =
+            ServiceInfoDefault.builder()
                     .serviceTypeName(getServiceTypeName())
                     .activatorTypeName(HelloPicoImpl$$picoActivator.class.getName())
                     .addContractsImplemented(HelloPicoWorld.class.getName())

File: pico/runtime/src/test/java/io/helidon/pico/runtime/testsubjects/PicoWorldImpl$$picoActivator.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.Map;
 
 import io.helidon.common.Weight;
-import io.helidon.pico.api.DefaultServiceInfo;
 import io.helidon.pico.api.DependenciesInfo;
+import io.helidon.pico.api.ServiceInfoDefault;
 import io.helidon.pico.runtime.AbstractServiceProvider;
 import io.helidon.pico.runtime.Dependencies;
 
@@ -33,8 +33,8 @@
 @Singleton
 @Weight(DEFAULT_PICO_WEIGHT)
 public class PicoWorldImpl$$picoActivator extends AbstractServiceProvider<PicoWorldImpl> {
-    private static final DefaultServiceInfo serviceInfo =
-            DefaultServiceInfo.builder()
+    private static final ServiceInfoDefault serviceInfo =
+            ServiceInfoDefault.builder()
                     .serviceTypeName(getServiceTypeName())
                     .activatorTypeName(PicoWorldImpl$$picoActivator.class.getName())
                     .addExternalContractsImplemented(PicoWorld.class.getName())

File: pico/testing/src/main/java/io/helidon/pico/testing/PicoTestingSupport.java
Patch:
@@ -27,7 +27,7 @@
 import io.helidon.common.LazyValue;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.pico.api.DefaultBootstrap;
+import io.helidon.pico.api.BootstrapDefault;
 import io.helidon.pico.api.PicoServices;
 import io.helidon.pico.api.PicoServicesConfig;
 import io.helidon.pico.api.PicoServicesHolder;
@@ -130,7 +130,7 @@ public static List<String> toDescriptions(Collection<?> coll) {
 
     private static LazyValue<PicoServices> lazyCreate(Config config) {
         return LazyValue.create(() -> {
-            PicoServices.globalBootstrap(DefaultBootstrap.builder().config(config).build());
+            PicoServices.globalBootstrap(BootstrapDefault.builder().config(config).build());
             return PicoServices.picoServices().orElseThrow();
         });
     }

File: pico/tests/resources-pico/src/test/java/io/helidon/pico/tests/pico/JavaxTest.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.pico.tests.pico;
 
 import io.helidon.config.Config;
-import io.helidon.pico.api.DefaultQualifierAndValue;
+import io.helidon.pico.api.QualifierAndValueDefault;
 import io.helidon.pico.api.ServiceProvider;
 import io.helidon.pico.api.Services;
 
@@ -64,7 +64,7 @@ void applicationScopeToSingletonScopeTranslation() {
         assertThat(sp.toString(),
                    equalTo("AnApplicationScopedService:INIT"));
         assertThat(sp.serviceInfo().qualifiers(),
-                   contains(DefaultQualifierAndValue.create(Default.class)));
+                   contains(QualifierAndValueDefault.create(Default.class)));
         assertThat(sp.serviceInfo().scopeTypeNames(),
                    containsInAnyOrder(Singleton.class.getName(), ApplicationScoped.class.getName()));
     }

File: pico/tests/resources-pico/src/test/java/io/helidon/pico/tests/pico/stacking/InterceptorStackingTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import io.helidon.common.types.DefaultTypeName;
+import io.helidon.common.types.TypeNameDefault;
 import io.helidon.config.Config;
 import io.helidon.pico.api.PicoServices;
 import io.helidon.pico.api.ServiceProvider;
@@ -70,7 +70,7 @@ void interceptorStacking() {
 
         List<String> injections = allIntercepted.stream().map(sp -> {
             Intercepted inner = sp.get().getInner();
-            return DefaultTypeName.createFromTypeName(sp.serviceInfo().serviceTypeName()).className() + " injected with "
+            return TypeNameDefault.createFromTypeName(sp.serviceInfo().serviceTypeName()).className() + " injected with "
                     + (inner == null ? null : inner.getClass().getSimpleName());
         }).collect(Collectors.toList());
         // order matters here

File: pico/tests/resources-plain/src/main/java/io/helidon/pico/tests/plain/interceptor/TestNamedInterceptor.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.concurrent.atomic.AtomicInteger;
 
-import io.helidon.common.types.DefaultTypeName;
+import io.helidon.common.types.TypeNameDefault;
 import io.helidon.common.types.TypedElementName;
 import io.helidon.pico.api.Interceptor;
 import io.helidon.pico.api.InvocationContext;
@@ -38,7 +38,7 @@ public <V> V proceed(InvocationContext ctx,
         assert (ctx != null);
 
         TypedElementName methodInfo = ctx.elementInfo();
-        if (methodInfo != null && methodInfo.typeName().equals(DefaultTypeName.create(long.class))) {
+        if (methodInfo != null && methodInfo.typeName().equals(TypeNameDefault.create(long.class))) {
             V result = chain.proceed(args);
             long longResult = (Long) result;
             Object interceptedResult = (longResult * 2);

File: pico/tools/src/main/java/io/helidon/pico/tools/AbstractFilerMessager.java
Patch:
@@ -44,8 +44,8 @@
 import javax.tools.JavaFileObject;
 import javax.tools.StandardLocation;
 
-import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeName;
+import io.helidon.common.types.TypeNameDefault;
 
 /**
  * Used to abstract processor based filer from direct filer (the latter used via maven plugin and other tooling).
@@ -247,7 +247,7 @@ public JavaFileObject createSourceFile(CharSequence name,
 
         Path toSourcePath(JavaFileManager.Location location,
                           String name) {
-            return toSourcePath(location, DefaultTypeName.createFromTypeName(name));
+            return toSourcePath(location, TypeNameDefault.createFromTypeName(name));
         }
 
         Path toSourcePath(JavaFileManager.Location location,

File: pico/tools/src/main/java/io/helidon/pico/tools/ActivatorCreatorArgs.java
Patch:
@@ -27,7 +27,7 @@
 import io.helidon.pico.api.ServiceInfoBasics;
 
 /**
- * See {@link DefaultActivatorCreator}.
+ * See {@link ActivatorCreatorDefault}.
  */
 @Builder
 abstract class ActivatorCreatorArgs {

File: pico/tools/src/main/java/io/helidon/pico/tools/CodeGenFiler.java
Patch:
@@ -46,8 +46,8 @@
 import javax.tools.JavaFileObject;
 import javax.tools.StandardLocation;
 
-import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeName;
+import io.helidon.common.types.TypeNameDefault;
 import io.helidon.pico.api.PicoServicesConfig;
 
 import static io.helidon.pico.tools.ModuleUtils.PICO_MODULE_INFO_JAVA_NAME;
@@ -539,7 +539,7 @@ Optional<Path> toResourceLocation(String name) {
      */
     Optional<Path> toSourceLocation(String name) {
         if (filer instanceof AbstractFilerMessager.DirectFilerMessager) {
-            TypeName typeName = DefaultTypeName.createFromTypeName(name);
+            TypeName typeName = TypeNameDefault.createFromTypeName(name);
             Optional<Path> path = Optional.ofNullable(((AbstractFilerMessager.DirectFilerMessager) filer)
                                                .toSourcePath(StandardLocation.SOURCE_PATH, typeName));
             if (path.isPresent()) {

File: pico/tools/src/main/java/io/helidon/pico/tools/CustomAnnotationTemplateRequest.java
Patch:
@@ -97,5 +97,4 @@ public interface CustomAnnotationTemplateRequest {
      * @return the generic template creator
      */
     GenericTemplateCreator genericTemplateCreator();
-
 }

File: pico/tools/src/main/java/io/helidon/pico/tools/CustomAnnotationTemplateResponse.java
Patch:
@@ -59,9 +59,9 @@ public interface CustomAnnotationTemplateResponse {
      * @param responses the responses to aggregate into one response instance
      * @return the aggregated response
      */
-    static DefaultCustomAnnotationTemplateResponse.Builder aggregate(CustomAnnotationTemplateRequest request,
+    static CustomAnnotationTemplateResponseDefault.Builder aggregate(CustomAnnotationTemplateRequest request,
                                                                      CustomAnnotationTemplateResponse... responses) {
-        DefaultCustomAnnotationTemplateResponse.Builder response = DefaultCustomAnnotationTemplateResponse.builder()
+        CustomAnnotationTemplateResponseDefault.Builder response = CustomAnnotationTemplateResponseDefault.builder()
                 .request(request);
         for (CustomAnnotationTemplateResponse res : responses) {
             if (res == null) {

File: pico/tools/src/main/java/io/helidon/pico/tools/GenericTemplateCreatorRequest.java
Patch:
@@ -59,7 +59,7 @@ public interface GenericTemplateCreatorRequest {
      * <li> properties.put("enclosingClassTypeName", req.getEnclosingClassType().getName());
      * <li> properties.put("enclosingClassAnnotations", req.getEnclosingClassAnnotations());
      * <li> properties.put("basicServiceInfo", req.getBasicServiceInfo());
-     * <li> properties.put("weight", DefaultServiceInfo.weightOf(req.getBasicServiceInfo());
+     * <li> properties.put("weight", ServiceInfoDefault.weightOf(req.getBasicServiceInfo());
      * <li> properties.put("enclosingClassTypeName.packageName", req.getEnclosingClassType().getPackageName());
      * <li> properties.put("enclosingClassTypeName.className", req.getEnclosingClassType().getClassName());
      * <li> properties.put("elementKind", req.getElementKind());

File: pico/tools/src/main/java/io/helidon/pico/tools/ModuleInfoItem.java
Patch:
@@ -212,7 +212,7 @@ default ModuleInfoItem mergeCreate(ModuleInfoItem another) {
             throw new IllegalArgumentException();
         }
 
-        DefaultModuleInfoItem.Builder newOne = DefaultModuleInfoItem.toBuilder(another);
+        ModuleInfoItemDefault.Builder newOne = ModuleInfoItemDefault.toBuilder(another);
         another.precomments().forEach(newOne::addPrecomment);
         newOne.requires(requires() || another.requires());
         newOne.uses(uses() || another.uses());

File: pico/tools/src/main/java/io/helidon/pico/tools/ModuleUtils.java
Patch:
@@ -34,8 +34,8 @@
 
 import javax.lang.model.element.TypeElement;
 
-import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeName;
+import io.helidon.common.types.TypeNameDefault;
 import io.helidon.pico.api.Application;
 import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.PicoServicesConfig;
@@ -94,7 +94,7 @@ public static String toSuggestedGeneratedPackageName(ModuleInfoDescriptor descri
             if (provides.isEmpty() || provides.get().withOrTo().isEmpty()) {
                 export = descriptor.firstUnqualifiedPackageExport().orElse(null);
             } else {
-                export = DefaultTypeName
+                export = TypeNameDefault
                         .createFromTypeName(first(provides.get().withOrTo(), false)).packageName();
             }
         }

File: pico/tools/src/main/java/io/helidon/pico/tools/ServicesToProcess.java
Patch:
@@ -35,8 +35,8 @@
 import javax.annotation.processing.RoundEnvironment;
 import javax.lang.model.element.TypeElement;
 
-import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeName;
+import io.helidon.common.types.TypeNameDefault;
 import io.helidon.pico.api.Application;
 import io.helidon.pico.api.DependenciesInfo;
 import io.helidon.pico.api.InjectionPointInfo;
@@ -450,7 +450,7 @@ public void addTypeForContract(TypeName serviceTypeName,
      */
     public void addDependencies(DependenciesInfo dependencies) {
         TypeName serviceTypeName =
-                DefaultTypeName.createFromTypeName(dependencies.fromServiceTypeName().orElseThrow());
+                TypeNameDefault.createFromTypeName(dependencies.fromServiceTypeName().orElseThrow());
         addServiceTypeName(serviceTypeName);
         DependenciesInfo prevDependencies = servicesToDependencies.get(serviceTypeName);
         if (prevDependencies != null) {

File: pico/tools/src/test/java/io/helidon/pico/tools/TypeToolsTest.java
Patch:
@@ -29,7 +29,7 @@
 import jakarta.inject.Provider;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.types.DefaultTypeName.create;
+import static io.helidon.common.types.TypeNameDefault.create;
 import static io.helidon.pico.tools.TypeTools.extractInjectionPointTypeInfo;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;

File: nima/webserver/webserver/src/main/java/module-info.java
Patch:
@@ -17,6 +17,7 @@
 import io.helidon.common.features.api.Feature;
 import io.helidon.common.features.api.HelidonFlavor;
 import io.helidon.nima.webserver.http.spi.SinkProvider;
+import io.helidon.pico.api.ModuleComponent;
 
 /**
  * Loom based WebServer.
@@ -72,5 +73,5 @@
     uses SinkProvider;
 
     provides io.helidon.nima.webserver.spi.ServerConnectionProvider with io.helidon.nima.webserver.http1.Http1ConnectionProvider;
-    provides io.helidon.pico.api.Module with io.helidon.nima.webserver.Pico$$Module;
+    provides ModuleComponent with io.helidon.nima.webserver.Pico$$Module;
 }

File: pico/api/src/main/java/io/helidon/pico/api/Application.java
Patch:
@@ -25,7 +25,7 @@
  * <p>
  * Note: instances of this type are not eligible for injection.
  *
- * @see Module
+ * @see ModuleComponent
  */
 @Contract
 public interface Application extends OptionallyNamed {

File: pico/api/src/main/java/io/helidon/pico/api/ModuleComponent.java
Patch:
@@ -29,7 +29,7 @@
  * @see Application
  */
 @Contract
-public interface Module extends OptionallyNamed {
+public interface ModuleComponent extends OptionallyNamed {
 
     /**
      * Called by the provider implementation at bootstrapping time to bind all services / service providers to the

File: pico/api/src/main/java/io/helidon/pico/api/ServiceProvider.java
Patch:
@@ -115,7 +115,7 @@ public interface ServiceProvider<T> extends InjectionPointProvider<T>, Weighted
      * The agent/instance to be used for binding this service provider to the pico application that was code generated.
      *
      * @return the service provider that should be used for binding, or empty if this provider does not support binding
-     * @see Module
+     * @see ModuleComponent
      * @see ServiceBinder
      * @see ServiceProviderBindable
      */

File: pico/api/src/main/java/io/helidon/pico/api/ServiceProviderBindable.java
Patch:
@@ -23,7 +23,7 @@
  * and thereby works in conjunction with the {@link ServiceBinder} during pico service registry
  * initialization.
  * <p>
- * The only guarantee the provider implementation has is ensuring that {@link Module} instances
+ * The only guarantee the provider implementation has is ensuring that {@link ModuleComponent} instances
  * are bound to the pico services instances, as well as informed on the module name.
  * <p>
  * Generally this class should be called internally by the framework, and typically occurs only during initialization sequences.
@@ -36,7 +36,7 @@ public interface ServiceProviderBindable<T> extends ServiceProvider<T> {
 
     /**
      * Called to inform a service provider the module name it is bound to. Will only be called when there is a non-null
-     * module name associated for the given {@link Module}. A service provider can be associated with
+     * module name associated for the given {@link ModuleComponent}. A service provider can be associated with
      * 0..1 modules.
      *
      * @param moduleName the non-null module name

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/AbstractCreatorMojo.java
Patch:
@@ -26,7 +26,7 @@
 
 import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeName;
-import io.helidon.pico.api.Module;
+import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.PicoServicesConfig;
 import io.helidon.pico.api.ServiceProvider;
 import io.helidon.pico.tools.AbstractCreator;
@@ -264,7 +264,7 @@ public void execute() throws MojoExecutionException {
      * @param persistIt   pass true to write it to scratch, so that we can use it in the future for this module
      * @return the package name (which also typically doubles as the application name)
      */
-    protected String determinePackageName(Optional<ServiceProvider<Module>> optModuleSp,
+    protected String determinePackageName(Optional<ServiceProvider<ModuleComponent>> optModuleSp,
                                           Collection<TypeName> typeNames,
                                           ModuleInfoDescriptor descriptor,
                                           boolean persistIt) {
@@ -276,7 +276,7 @@ protected String determinePackageName(Optional<ServiceProvider<Module>> optModul
                 return packageName;
             }
 
-            ServiceProvider<Module> moduleSp = optModuleSp.orElse(null);
+            ServiceProvider<ModuleComponent> moduleSp = optModuleSp.orElse(null);
             if (moduleSp != null) {
                 packageName = DefaultTypeName.createFromTypeName(moduleSp.serviceInfo().serviceTypeName()).packageName();
             } else {

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/ExternalModuleCreatorMojo.java
Patch:
@@ -51,7 +51,7 @@
 import static io.helidon.pico.maven.plugin.MavenPluginUtils.externalModuleCreator;
 
 /**
- * Responsible for creating pico {@link io.helidon.pico.api.Activator}'s and a {@link io.helidon.pico.api.Module}
+ * Responsible for creating pico {@link io.helidon.pico.api.Activator}'s and a {@link io.helidon.pico.api.ModuleComponent}
  * wrapping a set of packages from an external third-party jar.
  */
 @Mojo(name = "external-module-create", defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true,

File: pico/runtime/src/main/java/io/helidon/pico/runtime/DefaultServices.java
Patch:
@@ -38,7 +38,7 @@
 import io.helidon.pico.api.InjectionException;
 import io.helidon.pico.api.Intercepted;
 import io.helidon.pico.api.Metrics;
-import io.helidon.pico.api.Module;
+import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.Phase;
 import io.helidon.pico.api.PicoException;
 import io.helidon.pico.api.PicoServices;
@@ -460,7 +460,7 @@ void bind(PicoServices picoServices,
     }
 
     void bind(PicoServices picoServices,
-              Module module,
+              ModuleComponent module,
               boolean initializing) {
         String moduleName = module.named().orElse(module.getClass().getName());
         boolean isLoggable = DefaultPicoServices.LOGGER.isLoggable(System.Logger.Level.TRACE);
@@ -475,7 +475,7 @@ void bind(PicoServices picoServices,
         }
     }
 
-    private ServiceProvider<?> createServiceProvider(Module module,
+    private ServiceProvider<?> createServiceProvider(ModuleComponent module,
                                                      String moduleName,
                                                      PicoServices picoServices) {
         return new PicoModuleServiceProvider(module, moduleName, picoServices);

File: pico/runtime/src/main/java/io/helidon/pico/runtime/ServiceUtils.java
Patch:
@@ -24,7 +24,7 @@
 
 import io.helidon.pico.api.Application;
 import io.helidon.pico.api.DependenciesInfo;
-import io.helidon.pico.api.Module;
+import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.ServiceInfo;
 import io.helidon.pico.api.ServiceProvider;
 
@@ -48,7 +48,7 @@ public static boolean isQualifiedInjectionTarget(ServiceProvider<?> sp) {
         DependenciesInfo deps = sp.dependencies();
         return (deps != AbstractServiceProvider.NO_DEPS)
                 || (!contractsImplemented.isEmpty()
-                    && !contractsImplemented.contains(Module.class.getName())
+                    && !contractsImplemented.contains(ModuleComponent.class.getName())
                     && !contractsImplemented.contains(Application.class.getName()));
     }
 

File: pico/runtime/src/main/java/module-info.java
Patch:
@@ -31,6 +31,6 @@
     provides io.helidon.pico.spi.PicoServicesProvider
             with io.helidon.pico.runtime.DefaultPicoServicesProvider;
 
-    uses io.helidon.pico.api.Module;
+    uses io.helidon.pico.api.ModuleComponent;
     uses io.helidon.pico.api.Application;
 }

File: pico/runtime/src/test/java/io/helidon/pico/runtime/HelloPicoWorldSanityTest.java
Patch:
@@ -32,7 +32,7 @@
 import io.helidon.pico.api.DefaultBootstrap;
 import io.helidon.pico.api.DefaultInjectorOptions;
 import io.helidon.pico.api.Injector;
-import io.helidon.pico.api.Module;
+import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.Phase;
 import io.helidon.pico.api.PicoServices;
 import io.helidon.pico.api.PicoServicesConfig;
@@ -91,7 +91,7 @@ void tearDown() {
     void sanity() {
         Services services = PicoServices.realizedServices();
 
-        List<ServiceProvider<Module>> moduleProviders = services.lookupAll(Module.class);
+        List<ServiceProvider<ModuleComponent>> moduleProviders = services.lookupAll(ModuleComponent.class);
         assertThat(moduleProviders.size(),
                    equalTo(EXPECTED_MODULES));
         List<String> descriptions = ServiceUtils.toDescriptions(moduleProviders);

File: pico/runtime/src/test/java/io/helidon/pico/runtime/testsubjects/EmptyModule.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.pico.runtime.testsubjects;
 
-import io.helidon.pico.api.Module;
+import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.ServiceBinder;
 
 import jakarta.inject.Singleton;
@@ -25,7 +25,7 @@
  * For testing.
  */
 @Singleton
-public final class EmptyModule implements Module {
+public final class EmptyModule implements ModuleComponent {
 
     @Override
     public void configure(ServiceBinder binder) {

File: pico/runtime/src/test/java/io/helidon/pico/runtime/testsubjects/HelloPico$$Module.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.Optional;
 
-import io.helidon.pico.api.Module;
+import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.ServiceBinder;
 
 import jakarta.annotation.Generated;
@@ -28,7 +28,7 @@
 @Generated(value = "example", comments = "API Version: n")
 @Singleton
 @Named(HelloPico$$Module.NAME)
-public final class HelloPico$$Module implements Module {
+public final class HelloPico$$Module implements ModuleComponent {
 
     public static final String NAME = "example";
 

File: pico/tests/resources-pico/src/main/java/module-info.java
Patch:
@@ -32,6 +32,6 @@
     exports io.helidon.pico.tests.pico.stacking;
     exports io.helidon.pico.tests.pico.tbox;
 
-    provides io.helidon.pico.api.Module with io.helidon.pico.tests.pico.Pico$$Module;
+    provides io.helidon.pico.api.ModuleComponent with io.helidon.pico.tests.pico.Pico$$Module;
     provides io.helidon.pico.api.Application with io.helidon.pico.tests.pico.Pico$$Application;
 }

File: pico/tests/resources-pico/src/test/java/io/helidon/pico/tests/pico/tbox/ToolBoxTest.java
Patch:
@@ -25,7 +25,7 @@
 import io.helidon.config.Config;
 import io.helidon.pico.api.ActivationResult;
 import io.helidon.pico.api.DefaultServiceInfoCriteria;
-import io.helidon.pico.api.Module;
+import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.PicoException;
 import io.helidon.pico.api.PicoServices;
 import io.helidon.pico.api.RunLevel;
@@ -174,7 +174,7 @@ void providerTest() {
 
     @Test
     void modules() {
-        List<ServiceProvider<Module>> allModules = services.lookupAll(Module.class);
+        List<ServiceProvider<ModuleComponent>> allModules = services.lookupAll(ModuleComponent.class);
         List<String> desc = allModules.stream().map(ServiceProvider::description).collect(Collectors.toList());
         // note that order matters here
         assertThat("ensure that Annotation Processors are enabled in the tools module meta-inf/services",

File: pico/tools/src/main/java/io/helidon/pico/tools/ActivatorCreatorConfigOptions.java
Patch:
@@ -49,7 +49,7 @@ public interface ActivatorCreatorConfigOptions {
     boolean isSupportsJsr330InStrictMode();
 
     /**
-     * Should a {@link io.helidon.pico.api.Module} be created during activator creation. The default is true.
+     * Should a {@link io.helidon.pico.api.ModuleComponent} be created during activator creation. The default is true.
      *
      * @return true if the module should be created
      */

File: pico/tools/src/main/java/io/helidon/pico/tools/CodeGenFiler.java
Patch:
@@ -346,7 +346,7 @@ boolean tryToEnsureSameContents(Exception e,
     }
 
     /**
-     * Code generates the {@link io.helidon.pico.api.Module} source.
+     * Code generates the {@link io.helidon.pico.api.ModuleComponent} source.
      *
      * @param moduleDetail the module details
      */

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultActivatorCreator.java
Patch:
@@ -77,7 +77,7 @@
  * <ol>
  * <li>The {@link io.helidon.pico.api.ServiceProvider} for each service type implementation passed in.
  * <li>The {@link io.helidon.pico.api.Activator} and {@link io.helidon.pico.api.DeActivator} for each service type implementation passed in.
- * <li>The {@link io.helidon.pico.api.Module} for the aggregate service provider bindings for the same set of service type names.
+ * <li>The {@link io.helidon.pico.api.ModuleComponent} for the aggregate service provider bindings for the same set of service type names.
  * <li>The module-info as appropriate for the above set of services (and contracts).
  * <li>The /META-INF/services entries as appropriate.
  * </ol>

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultApplicationCreator.java
Patch:
@@ -36,7 +36,7 @@
 import io.helidon.pico.api.DefaultServiceInfoCriteria;
 import io.helidon.pico.api.DependenciesInfo;
 import io.helidon.pico.api.InjectionPointInfo;
-import io.helidon.pico.api.Module;
+import io.helidon.pico.api.ModuleComponent;
 import io.helidon.pico.api.PicoServices;
 import io.helidon.pico.api.PicoServicesConfig;
 import io.helidon.pico.api.ServiceInfoCriteria;
@@ -420,7 +420,7 @@ void codegen(PicoServices picoServices,
     static TypeName moduleServiceTypeOf(PicoServices picoServices,
                                         String moduleName) {
         Services services = picoServices.services();
-        ServiceProvider<?> serviceProvider = services.lookup(Module.class, moduleName);
+        ServiceProvider<?> serviceProvider = services.lookup(ModuleComponent.class, moduleName);
         return DefaultTypeName.createFromTypeName(serviceProvider.serviceInfo().serviceTypeName());
     }
 

File: pico/tools/src/main/java/io/helidon/pico/tools/GeneralCodeGenNames.java
Patch:
@@ -20,6 +20,7 @@
 
 import io.helidon.builder.Builder;
 import io.helidon.config.metadata.ConfiguredOption;
+import io.helidon.pico.api.ModuleComponent;
 
 /**
  * General code gen information.
@@ -37,15 +38,15 @@ public interface GeneralCodeGenNames {
 
     /**
      * The module name, defaulting to "unnamed" if not specified.
-     * This name is used primarily to serve as the codegen name for the {@link io.helidon.pico.api.Module} that is generated.
+     * This name is used primarily to serve as the codegen name for the {@link io.helidon.pico.api.ModuleComponent} that is generated.
      *
      * @return module name
      */
 //    @ConfiguredOption("unnamed")
     Optional<String> moduleName();
 
     /**
-     * The package name to use for the generated {@link io.helidon.pico.api.Module}, {@link io.helidon.pico.api.Application}, etc.
+     * The package name to use for the generated {@link ModuleComponent}, {@link io.helidon.pico.api.Application}, etc.
      * If one is not provided, one will be determined internally.
      *
      * @return the suggested package name, otherwise passing null will delegate package naming to the implementation heuristic

File: pico/tools/src/main/java/io/helidon/pico/tools/ModuleDetail.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.common.types.TypeName;
 
 /**
- * The specifics for a single {@link io.helidon.pico.api.Module} that was codegen'ed.
+ * The specifics for a single {@link io.helidon.pico.api.ModuleComponent} that was codegen'ed.
  *
  * @see ActivatorCreatorResponse#moduleDetail
  */

File: pico/tools/src/main/java/io/helidon/pico/tools/TypeNames.java
Patch:
@@ -51,7 +51,7 @@ public final class TypeNames {
     /**
      * Pico {@value} type.
      */
-    public static final String PICO_MODULE = "io.helidon.pico.api.Module";
+    public static final String PICO_MODULE = "io.helidon.pico.api.ModuleComponent";
 
     /**
      * Pico {@value} annotation.

File: pico/tools/src/main/java/io/helidon/pico/tools/spi/ActivatorCreator.java
Patch:
@@ -37,7 +37,7 @@
  * Activators are only generated if your service is marked as a {@code jakarta.inject.Singleton} scoped service.
  * <p>
  * All activators for your jar module are then aggregated and registered into a pico code-generated
- * {@link io.helidon.pico.api.Module} class.
+ * {@link io.helidon.pico.api.ModuleComponent} class.
  *
  * @see io.helidon.pico.tools.ActivatorCreatorProvider
  */
@@ -46,7 +46,7 @@ public interface ActivatorCreator {
 
     /**
      * Used during annotation processing in compile time to automatically generate {@link io.helidon.pico.api.Activator}'s
-     * and optionally an aggregating {@link io.helidon.pico.api.Module} for those activators.
+     * and optionally an aggregating {@link io.helidon.pico.api.ModuleComponent} for those activators.
      *
      * @param request the request for what to generate
      * @return the response result for the create operation

File: pico/tools/src/test/java/io/helidon/pico/tools/ModuleInfoDescriptorTest.java
Patch:
@@ -154,7 +154,7 @@ void loadCreateAndSave() throws Exception {
                                    + "    exports io.helidon.pico.spi.impl;\n"
                                    + "    provides io.helidon.pico.api.PicoServices with io.helidon.pico.spi.impl"
                                         + ".DefaultPicoServices;\n"
-                                   + "    uses io.helidon.pico.api.Module;\n"
+                                   + "    uses io.helidon.pico.api.ModuleComponent;\n"
                                    + "    uses io.helidon.pico.api.Application;\n"
                                    + "}"));
 
@@ -194,7 +194,7 @@ void mergeCreate() {
                                    + "    exports io.helidon.pico.spi.impl;\n"
                                    + "    provides io.helidon.pico.api.PicoServices with io.helidon.pico.spi.impl"
                                    + ".DefaultPicoServices;\n"
-                                   + "    uses io.helidon.pico.api.Module;\n"
+                                   + "    uses io.helidon.pico.api.ModuleComponent;\n"
                                    + "    uses io.helidon.pico.api.Application;\n"
                                    + "}"));
         IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> descriptor.mergeCreate(descriptor));

File: builder/builder-config-processor/src/main/java/io/helidon/builder/config/processor/ConfigBeanBuilderCreator.java
Patch:
@@ -208,7 +208,7 @@ protected void appendMetaProps(StringBuilder builder,
                                    String tag,
                                    AtomicBoolean needsCustomMapOf) {
         builder.append("\t\t").append(tag);
-        builder.append(".put(\"__meta\", Map.of(").append(ConfigBeanInfo.class.getName());
+        builder.append(".put(" + ConfigBeanInfo.class.getName() + ".TAG_META, Map.of(").append(ConfigBeanInfo.class.getName());
         builder.append(".class.getName(),\n\t\t\t\t").append(MetaConfigBeanInfo.class.getName()).append(".builder()\n");
         appendConfigBeanInfoAttributes(builder,
                                        ctx.typeInfo(),

File: builder/builder-config/src/main/java/io/helidon/builder/config/spi/HelidonConfigBeanRegistry.java
Patch:
@@ -28,9 +28,9 @@ public interface HelidonConfigBeanRegistry {
     /**
      * Returns all config beans indexed by its config key.
      *
-     * @param <CB> the config bean type
+     * @param <GCB> the generated config bean type
      * @return all config beans
      */
-    <CB> Map<String, Collection<CB>> allConfigBeans();
+    <GCB extends GeneratedConfigBean> Map<String, Collection<GCB>> allConfigBeans();
 
 }

File: builder/builder-config/src/main/java/io/helidon/builder/config/spi/HelidonConfigResolver.java
Patch:
@@ -47,7 +47,7 @@ public class HelidonConfigResolver implements ConfigResolver, ConfigResolverProv
     /**
      * Tag that represents meta information about the attribute. Used in the maps for various methods herein.
      */
-    public static final String TAG_META = "__meta";
+    public static final String TAG_META = ConfigBeanInfo.TAG_META;
 
     /**
      * Tag that represents the component type.

File: pico/configdriven/runtime/src/main/java/io/helidon/pico/configdriven/runtime/AbstractConfiguredServiceProvider.java
Patch:
@@ -307,7 +307,7 @@ public Map<String, Map<String, Object>> configBeanAttributes() {
 
     // note that all responsibilities to resolve is delegated to the root provider
     @Override
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "rawtypes"})
     public Optional<Object> resolve(InjectionPointInfo ipInfo,
                                     PicoServices picoServices,
                                     ServiceProvider<?> serviceProvider,
@@ -335,7 +335,7 @@ public Optional<Object> resolve(InjectionPointInfo ipInfo,
             return Optional.of(configBeanType());
         }
 
-        return (Optional<Object>) configBean();
+        return (Optional) configBean();
     }
 
     /**

File: pico/configdriven/tests/configuredby/src/main/java/io/helidon/pico/configdriven/configuredby/test/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * For Testing.
+ * For testing.
  */
 package io.helidon.pico.configdriven.configuredby.test;

File: pico/runtime/src/main/java/io/helidon/pico/runtime/AbstractServiceProvider.java
Patch:
@@ -264,7 +264,7 @@ public void interceptor(ServiceProvider<?> interceptor) {
         }
         this.interceptor = interceptor;
         if (interceptor instanceof AbstractServiceProvider<?>) {
-            ((AbstractServiceProvider) interceptor).intercepted(this);
+            ((AbstractServiceProvider<?>) interceptor).intercepted(this);
         }
     }
 

File: pico/tests/interception/src/main/java/io/helidon/pico/tests/interception/OtherContract.java
Patch:
@@ -29,4 +29,7 @@ interface OtherContract {
     String interceptedSubset(String message, boolean modify, boolean repeat, boolean doReturn);
 
     String notIntercepted(String message, boolean modify, boolean repeat, boolean doReturn);
+
+    void throwException(boolean throwException);
+
 }

File: pico/tests/interception/src/main/java/io/helidon/pico/tests/interception/ReturningInterceptor.java
Patch:
@@ -37,6 +37,7 @@ static Invocation lastCall() {
         return LAST_CALL.getAndSet(null);
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public <V> V proceed(InvocationContext ctx, Chain<V> chain, Object... args) {
         LAST_CALL.set(new Invocation(ctx.elementInfo().elementName(), Arrays.copyOf(args, args.length)));

File: pico/configdriven/runtime/src/main/java/io/helidon/pico/configdriven/runtime/DefaultPicoConfigBeanRegistry.java
Patch:
@@ -34,12 +34,12 @@
 import io.helidon.builder.AttributeVisitor;
 import io.helidon.builder.config.ConfigBean;
 import io.helidon.builder.config.spi.ConfigBeanInfo;
-import io.helidon.builder.config.spi.ConfigProvider;
 import io.helidon.builder.config.spi.MetaConfigBeanInfo;
 import io.helidon.common.config.Config;
 import io.helidon.common.config.ConfigException;
 import io.helidon.config.ConfigValue;
 import io.helidon.config.metadata.ConfiguredOption;
+import io.helidon.pico.api.Bootstrap;
 import io.helidon.pico.api.PicoException;
 import io.helidon.pico.api.PicoServiceProviderException;
 import io.helidon.pico.api.PicoServices;
@@ -185,8 +185,8 @@ public void initialize(PicoServices ignoredPicoServices) {
             Config config = PicoServices.realizedGlobalBootStrap().config().orElse(null);
             if (config == null) {
                 LOGGER.log(System.Logger.Level.WARNING,
-                           "unable to initialize - no config to read - be sure to provide or initialize "
-                                   + ConfigProvider.class.getName() + " prior to service activation.");
+                           "Unable to initialize - there is no config to read - be sure to initialize "
+                                   + Bootstrap.class.getName() + " config prior to service activation.");
                 reset(true);
                 return;
             }

File: pico/configdriven/tests/configuredby/src/main/java/io/helidon/pico/configdriven/configuredby/test/AbstractConfiguredByTest.java
Patch:
@@ -141,8 +141,8 @@ void testRegistry() {
         list = services.lookupAll(criteria);
         desc = list.stream().map(ServiceProvider::description).collect(Collectors.toList());
         assertThat("no root providers expected in result, but all are auto-started unless overridden", desc,
-                   contains("FakeWebServer{3}:ACTIVE",
-                            "FakeWebServerNotDrivenAndHavingConfiguredByOverrides{2}:PENDING"));
+                   contains("FakeWebServer{fake-server}:ACTIVE",
+                            "FakeWebServerNotDrivenAndHavingConfiguredByOverrides{fake-server}:PENDING"));
 
         criteria = DefaultServiceInfoCriteria.builder()
                 .serviceTypeName(FakeTlsWSNotDrivenByCB.class.getName())
@@ -173,7 +173,7 @@ void testRegistry() {
         list = services.lookupAll(criteria);
         desc = list.stream().map(ServiceProvider::description).collect(Collectors.toList());
         assertThat("Slave providers expected here since we have default configuration for this service", desc,
-                   contains("ASingletonService{1}:ACTIVE"));
+                   contains("ASingletonService{@default}:ACTIVE"));
     }
 
     //    @Test

File: pico/tests/interception/src/main/java/io/helidon/pico/tests/interception/Modify.java
Patch:
@@ -30,6 +30,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @InterceptedTrigger
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.CONSTRUCTOR})
 @interface Modify {
 }

File: builder/builder-config-processor/src/main/java/io/helidon/builder/config/processor/ConfigBeanBuilderCreator.java
Patch:
@@ -68,7 +68,7 @@
  * @see GeneratedConfigBean
  * @see GeneratedConfigBeanBuilder
  */
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(Weighted.DEFAULT_WEIGHT - 2)   // allow all other creators to take precedence over us...
 public class ConfigBeanBuilderCreator extends DefaultBuilderCreatorProvider {
     static final String PICO_CONTRACT_TYPENAME = "io.helidon.pico.api.Contract";
     static final String PICO_EXTERNAL_CONTRACT_TYPENAME = "io.helidon.pico.api.ExternalContracts";

File: builder/builder-config/src/main/java/io/helidon/builder/config/spi/HelidonConfigResolver.java
Patch:
@@ -40,7 +40,7 @@
  * not "full" Helidon config.
  */
 @Singleton
-@Weight(Weighted.DEFAULT_WEIGHT - 1)   // allow all other creators to take precedence over us...
+@Weight(Weighted.DEFAULT_WEIGHT - 2)   // allow all other creators to take precedence over us...
 @SuppressWarnings({"unchecked", "rawtypes"})
 public class HelidonConfigResolver implements ConfigResolver, ConfigResolverProvider {
 

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/BuilderTypeTools.java
Patch:
@@ -62,7 +62,7 @@
  * The default implementation for {@link io.helidon.builder.processor.spi.TypeInfoCreatorProvider}. This also contains an abundance of
  * other useful methods used for annotation processing.
  */
-@Weight(Weighted.DEFAULT_WEIGHT - 1)
+@Weight(Weighted.DEFAULT_WEIGHT - 2)   // allow all other creators to take precedence over us...
 public class BuilderTypeTools implements TypeInfoCreatorProvider {
     /**
      * Default constructor. Service loaded.

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/DefaultBuilderCreatorProvider.java
Patch:
@@ -57,7 +57,7 @@
 /**
  * Default implementation for {@link io.helidon.builder.processor.spi.BuilderCreatorProvider}.
  */
-@Weight(Weighted.DEFAULT_WEIGHT - 1)   // allow all other creators to take precedence over us...
+@Weight(Weighted.DEFAULT_WEIGHT - 2)   // allow all other creators to take precedence over us...
 public class DefaultBuilderCreatorProvider implements BuilderCreatorProvider {
     static final boolean DEFAULT_INCLUDE_META_ATTRIBUTES = true;
     static final boolean DEFAULT_REQUIRE_LIBRARY_DEPENDENCIES = true;

File: pico/configdriven/runtime/src/main/java/io/helidon/pico/configdriven/runtime/DefaultConfigBeanBuilderValidatorProvider.java
Patch:
@@ -20,12 +20,13 @@
 import io.helidon.builder.config.spi.ConfigBeanBuilderValidatorProvider;
 import io.helidon.common.LazyValue;
 import io.helidon.common.Weight;
-import io.helidon.common.Weighted;
+
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
 
 /**
  * Service-loaded provider for {@link io.helidon.builder.config.spi.ConfigResolverProvider}.
  */
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 public class DefaultConfigBeanBuilderValidatorProvider implements ConfigBeanBuilderValidatorProvider {
     static final LazyValue<ConfigBeanBuilderValidator<?>> INSTANCE = LazyValue.create(DefaultConfigBuilderValidator::new);
 

File: pico/configdriven/runtime/src/main/java/io/helidon/pico/configdriven/runtime/DefaultConfigBeanRegistryProvider.java
Patch:
@@ -20,12 +20,13 @@
 import io.helidon.builder.config.spi.HelidonConfigBeanRegistry;
 import io.helidon.common.LazyValue;
 import io.helidon.common.Weight;
-import io.helidon.common.Weighted;
+
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
 
 /**
  * Service-loaded provider for {@link ConfigBeanRegistry}.
  */
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 public class DefaultConfigBeanRegistryProvider implements ConfigBeanRegistryProvider {
     static final LazyValue<ConfigBeanRegistry> INSTANCE = LazyValue.create(DefaultPicoConfigBeanRegistry::new);
 

File: pico/configdriven/runtime/src/main/java/io/helidon/pico/configdriven/runtime/DefaultConfigResolverProvider.java
Patch:
@@ -20,12 +20,13 @@
 import io.helidon.builder.config.spi.ConfigResolverProvider;
 import io.helidon.common.LazyValue;
 import io.helidon.common.Weight;
-import io.helidon.common.Weighted;
+
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
 
 /**
  * Service-loaded provider for {@link ConfigResolverProvider}.
  */
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 public class DefaultConfigResolverProvider implements ConfigResolverProvider {
     static final LazyValue<ConfigResolver> INSTANCE = LazyValue.create(DefaultConfigResolver::new);
 

File: pico/configdriven/runtime/src/main/java/io/helidon/pico/configdriven/runtime/DefaultStringValueParserProvider.java
Patch:
@@ -20,12 +20,13 @@
 import io.helidon.builder.config.spi.StringValueParserProvider;
 import io.helidon.common.LazyValue;
 import io.helidon.common.Weight;
-import io.helidon.common.Weighted;
+
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
 
 /**
  * Service-loaded provider for {@link StringValueParserProvider}.
  */
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 public class DefaultStringValueParserProvider implements StringValueParserProvider {
     static final LazyValue<StringValueParser> INSTANCE = LazyValue.create(DefaultStringValueParser::new);
 

File: pico/runtime/src/main/java/io/helidon/pico/runtime/DefaultPicoServicesProvider.java
Patch:
@@ -20,14 +20,15 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.common.Weight;
-import io.helidon.common.Weighted;
 import io.helidon.pico.api.Bootstrap;
 import io.helidon.pico.api.PicoServices;
 import io.helidon.pico.api.Resettable;
 import io.helidon.pico.spi.PicoServicesProvider;
 
 import jakarta.inject.Singleton;
 
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
+
 /**
  * The default implementation for {@link io.helidon.pico.spi.PicoServicesProvider}.
  * The first instance created (or first after calling deep {@link #reset}) will be the global services instance. The global
@@ -36,7 +37,7 @@
  * @see io.helidon.pico.api.PicoServices#picoServices()
  */
 @Singleton
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 public class DefaultPicoServicesProvider implements PicoServicesProvider, Resettable {
     private static final AtomicReference<DefaultPicoServices> INSTANCE = new AtomicReference<>();
 

File: pico/runtime/src/test/java/io/helidon/pico/runtime/testsubjects/HelloPicoImpl$$picoActivator.java
Patch:
@@ -36,13 +36,14 @@
 
 import static io.helidon.pico.api.ElementInfo.Access;
 import static io.helidon.pico.api.ElementInfo.ElementKind;
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
 
 /**
  * Serves as an exemplar of what will is normally code generated.
  */
 @Generated(value = "example", comments = "API Version: N")
 @Singleton
-@Weight(DefaultServiceInfo.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 @SuppressWarnings({"unchecked", "checkstyle:TypeName"})
 public class HelloPicoImpl$$picoActivator extends AbstractServiceProvider<HelloPicoWorldImpl> {
 

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultActivatorCreator.java
Patch:
@@ -63,6 +63,7 @@
 
 import static io.helidon.common.types.DefaultTypeName.create;
 import static io.helidon.common.types.DefaultTypeName.createFromTypeName;
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
 import static io.helidon.pico.tools.CommonUtils.first;
 import static io.helidon.pico.tools.CommonUtils.hasValue;
 import static io.helidon.pico.tools.CommonUtils.toFlatName;
@@ -85,7 +86,7 @@
  * {@link ActivatorCreatorRequest#codeGenPaths()} for details.
  */
 @Singleton
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 public class DefaultActivatorCreator extends AbstractCreator implements ActivatorCreator, Weighted {
     /**
      * The suffix name for the service type activator class.

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultApplicationCreator.java
Patch:
@@ -30,7 +30,6 @@
 
 import io.helidon.builder.processor.tools.BuilderTypeTools;
 import io.helidon.common.Weight;
-import io.helidon.common.Weighted;
 import io.helidon.common.types.AnnotationAndValue;
 import io.helidon.common.types.DefaultTypeName;
 import io.helidon.common.types.TypeName;
@@ -51,13 +50,14 @@
 import jakarta.inject.Provider;
 import jakarta.inject.Singleton;
 
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
 import static io.helidon.pico.runtime.ServiceUtils.isQualifiedInjectionTarget;
 
 /**
  * The default implementation for {@link io.helidon.pico.tools.spi.ApplicationCreator}.
  */
 @Singleton
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 public class DefaultApplicationCreator extends AbstractCreator implements ApplicationCreator {
     /**
      * The prefix to add before the generated "Application" class name (i.e., "Pico$$" in the "Pico$$Application").

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultExternalModuleCreator.java
Patch:
@@ -28,7 +28,6 @@
 
 import io.helidon.common.LazyValue;
 import io.helidon.common.Weight;
-import io.helidon.common.Weighted;
 import io.helidon.common.types.TypeName;
 import io.helidon.pico.api.DependenciesInfo;
 import io.helidon.pico.api.InjectionPointInfo;
@@ -47,6 +46,7 @@
 import jakarta.inject.Singleton;
 
 import static io.helidon.common.types.DefaultTypeName.createFromTypeName;
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
 import static io.helidon.pico.tools.TypeTools.createInjectionPointInfo;
 import static io.helidon.pico.tools.TypeTools.createQualifierAndValueSet;
 import static io.helidon.pico.tools.TypeTools.createTypeNameFromClassInfo;
@@ -63,7 +63,7 @@
  * The default implementation of {@link io.helidon.pico.tools.spi.ExternalModuleCreator}.
  */
 @Singleton
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 public class DefaultExternalModuleCreator extends AbstractCreator implements ExternalModuleCreator {
     private final LazyValue<ScanResult> scan = LazyValue.create(ReflectionHandler.INSTANCE.scan());
     private final ServicesToProcess services = ServicesToProcess.servicesInstance();

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultInterceptorCreator.java
Patch:
@@ -63,6 +63,7 @@
 import jakarta.inject.Singleton;
 
 import static io.helidon.common.types.DefaultAnnotationAndValue.create;
+import static io.helidon.pico.api.ServiceInfoBasics.DEFAULT_PICO_WEIGHT;
 import static io.helidon.pico.tools.TypeTools.createAnnotationAndValueFromMirror;
 import static io.helidon.pico.tools.TypeTools.createAnnotationAndValueListFromAnnotations;
 import static io.helidon.pico.tools.TypeTools.createAnnotationAndValueSet;
@@ -75,7 +76,7 @@
  * The default {@link io.helidon.pico.tools.spi.InterceptorCreator} provider in use.
  */
 @Singleton
-@Weight(Weighted.DEFAULT_WEIGHT)
+@Weight(DEFAULT_PICO_WEIGHT)
 @SuppressWarnings("unchecked")
 public class DefaultInterceptorCreator extends AbstractCreator implements InterceptorCreator, Resettable {
     private static final LazyValue<ScanResult> SCAN = LazyValue.create(ReflectionHandler.INSTANCE::scan);

File: pico/configdriven/runtime/src/main/java/io/helidon/pico/configdriven/runtime/AbstractConfiguredServiceProvider.java
Patch:
@@ -324,7 +324,7 @@ public Optional<Object> resolve(InjectionPointInfo ipInfo,
                 .addContractImplemented(configBeanType().getName())
                 .build();
         if (!dep.matchesContracts(criteria)) {
-            return Optional.empty();
+            return Optional.empty();    // we are being injected with neither a config bean nor a service that matches ourselves
         }
 
         // if we are here then we are asking for a config bean for ourselves, or a slave/managed instance

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/ChildInterfaceIsABuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * child interface is a target for the builder. The net result is that the builder generated will handle both the parent and the
  * child merged as one.
  */
-@Builder(implPrefix = "", implSuffix = "Impl")
+@Builder(implPrefix = "", implSuffix = "Impl", allowPublicOptionals = true)
 public interface ChildInterfaceIsABuilder extends ParentInterfaceNotABuilder {
 
     /**

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/ParentOfParentInterfaceIsABuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  *
  * @see ParentInterfaceNotABuilder
  */
-@Builder(implPrefix = "", implSuffix = "Impl")
+@Builder(implPrefix = "", implSuffix = "Impl", allowPublicOptionals = true)
 public interface ParentOfParentInterfaceIsABuilder {
 
     /**

File: pico/api/src/main/java/io/helidon/pico/api/CallingContext.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * For internal use only to Helidon. Applicable when {@link io.helidon.pico.api.PicoServicesConfig#TAG_DEBUG} is enabled.
  */
-@Builder(interceptor = CallingContext.BuilderInterceptor.class)
+@Builder(interceptor = CallingContext.BuilderInterceptor.class, allowPublicOptionals = true)
 public abstract class CallingContext {
 
     /**

File: pico/api/src/main/java/io/helidon/pico/api/ElementInfo.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Abstractly describes method or field elements of a managed service type (i.e., fields, constructors, injectable methods, etc.).
  */
-@Builder
+@Builder(allowPublicOptionals = true)
 public interface ElementInfo {
 
     /**

File: pico/api/src/main/java/io/helidon/pico/api/ServiceInfo.java
Patch:
@@ -32,7 +32,7 @@
  * @see Services
  * @see ServiceInfoCriteria
  */
-@Builder(interceptor = ServiceInfoBuildInterceptor.class)
+@Builder(interceptor = ServiceInfoBuildInterceptor.class, allowPublicOptionals = true)
 public interface ServiceInfo extends ServiceInfoBasics {
 
     /**

File: pico/api/src/main/java/io/helidon/pico/api/ServiceInfoBasics.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @see ServiceInfo
  */
-@Builder
+@Builder(allowPublicOptionals = true)
 public interface ServiceInfoBasics {
 
     /**

File: pico/api/src/main/java/io/helidon/pico/spi/InjectionPlan.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Represents the injection plan targeting a given {@link io.helidon.pico.api.ServiceProvider}.
  */
-@Builder
+@Builder(allowPublicOptionals = true)
 public interface InjectionPlan {
 
     /**

File: pico/tools/src/main/java/io/helidon/pico/tools/CodeGenPaths.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Applies only to the output paths that various {@code creators} will use (e.g., {@link io.helidon.pico.tools.spi.ActivatorCreator}).
  */
-@Builder
+@Builder(allowPublicOptionals = true)
 public interface CodeGenPaths {
 
     /**

File: pico/tools/src/main/java/io/helidon/pico/tools/GeneralCodeGenNames.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * General code gen information.
  */
-@Builder
+@Builder(allowPublicOptionals = true)
 public interface GeneralCodeGenNames {
 
     /**

File: pico/configdriven/tests/configuredby-application/src/test/java/io/helidon/pico/configdriven/configuredby/test/ApplicationConfiguredByTest.java
Patch:
@@ -84,7 +84,7 @@ public void startupAndShutdownRunLevelServices() {
         ServiceInfoCriteria criteria = DefaultServiceInfoCriteria.builder()
                 .runLevel(RunLevel.STARTUP)
                 .build();
-        List<ServiceProvider<Object>> startups = services.lookupAll(criteria);
+        List<ServiceProvider<?>> startups = services.lookupAll(criteria);
         List<String> desc = startups.stream().map(ServiceProvider::description).collect(Collectors.toList());
         assertThat(desc,
                    contains(ASimpleRunLevelService.class.getSimpleName() + ":INIT"));

File: pico/configdriven/tests/configuredby/src/main/java/io/helidon/pico/configdriven/configuredby/test/AbstractConfiguredByTest.java
Patch:
@@ -124,7 +124,7 @@ void testRegistry() {
         DefaultServiceInfoCriteria criteria = DefaultServiceInfoCriteria.builder()
                 .addQualifier(DefaultQualifierAndValue.create(ConfiguredBy.class))
                 .build();
-        List<ServiceProvider<Object>> list = services.lookupAll(criteria);
+        List<ServiceProvider<?>> list = services.lookupAll(criteria);
         List<String> desc = list.stream().map(ServiceProvider::description).collect(Collectors.toList());
         // order matters here since it should be based upon weight
         assertThat("root providers are config-driven, auto-started services unless overridden to not be driven", desc,
@@ -161,7 +161,7 @@ void testRegistry() {
         assertThat("root providers expected here since no configuration for this service", desc,
                    contains("FakeTlsWSNotDrivenByCB{root}:PENDING"));
 
-        ServiceProvider<Object> fakeTlsProvider = list.get(0);
+        ServiceProvider<?> fakeTlsProvider = list.get(0);
         PicoServiceProviderException e = assertThrows(PicoServiceProviderException.class, fakeTlsProvider::get);
         assertThat("There is no configuration, so cannot activate this service", e.getMessage(),
                    equalTo("Expected to find a match: service provider: FakeTlsWSNotDrivenByCB{root}:PENDING"));

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/AbstractApplicationCreatorMojo.java
Patch:
@@ -259,7 +259,7 @@ protected void innerExecute() {
             // get the application creator only after pico services were initialized (we need to ignore any existing apps)
             ApplicationCreator creator = applicationCreator();
 
-            List<ServiceProvider<Module>> allModules = services
+            List<ServiceProvider<?>> allModules = services
                     .lookupAll(DefaultServiceInfoCriteria.builder().addContractImplemented(Module.class.getName()).build());
             getLog().info("processing modules: " + toDescriptions(allModules));
             if (allModules.isEmpty()) {

File: pico/tests/resources-pico/src/test/java/io/helidon/pico/tests/pico/interceptor/InterceptorRuntimeTest.java
Patch:
@@ -115,7 +115,7 @@ void runtimeWithNoInterception() throws Exception {
                 .addContractImplemented(Closeable.class.getName())
                 .includeIntercepted(true)
                 .build();
-        List<ServiceProvider<Closeable>> closeableProviders = services.lookupAll(criteria);
+        List<ServiceProvider<?>> closeableProviders = services.lookupAll(criteria);
         assertThat("the interceptors should always be weighted higher than the non-interceptors",
                    toDescriptions(closeableProviders),
                    contains("XImpl$$Pico$$Interceptor:INIT", "YImpl$$Pico$$Interceptor:INIT",
@@ -160,7 +160,7 @@ void runtimeWithNoInterception() throws Exception {
                    equalTo("forced"));
 
         // we cannot look up by service type here - we need to instead lookup by one of the interfaces
-        ServiceProvider<Closeable> yimplProvider = services
+        ServiceProvider<?> yimplProvider = services
                 .lookupFirst(
                         DefaultServiceInfoCriteria.builder()
                                 .addContractImplemented(Closeable.class.getName())
@@ -242,7 +242,7 @@ void runtimeWithInterception() throws Exception {
                    equalTo(1));
 
         // we cannot look up by service type here - we need to instead lookup by one of the interfaces
-        ServiceProvider<Closeable> yimplProvider = services
+        ServiceProvider<?> yimplProvider = services
                 .lookupFirst(
                         DefaultServiceInfoCriteria.builder()
                                 .addContractImplemented(Closeable.class.getName())

File: pico/tests/resources-pico/src/test/java/io/helidon/pico/tests/pico/tbox/ToolBoxTest.java
Patch:
@@ -328,7 +328,7 @@ void startupAndShutdownCallsPostConstructAndPreDestroy() {
 
     @Test
     void knownProviders() {
-        List<ServiceProvider<Provider>> providers = services.lookupAll(
+        List<ServiceProvider<?>> providers = services.lookupAll(
                 DefaultServiceInfoCriteria.builder().addContractImplemented(Provider.class.getName()).build());
         List<String> desc = providers.stream().map(ServiceProvider::description).collect(Collectors.toList());
         // note that order matters here (weight ranked)

File: pico/tools/src/test/java/io/helidon/pico/tools/DefaultApplicationCreatorTest.java
Patch:
@@ -58,7 +58,7 @@ void codegenHelloWorldApplication() {
 
         PicoServices picoServices = PicoServices.picoServices().orElseThrow();
         Services services = picoServices.services();
-        List<ServiceProvider<Object>> serviceProviders = services.lookupAll(allServices);
+        List<ServiceProvider<?>> serviceProviders = services.lookupAll(allServices);
 
         List<TypeName> serviceTypeNames = serviceProviders.stream()
                 .map(sp -> DefaultTypeName.createFromTypeName(sp.serviceInfo().serviceTypeName()))

File: pico/configdriven/tests/configuredby/src/main/java/io/helidon/pico/configdriven/configuredby/test/AbstractConfiguredByTest.java
Patch:
@@ -126,11 +126,13 @@ void testRegistry() {
                 .build();
         List<ServiceProvider<Object>> list = services.lookupAll(criteria);
         List<String> desc = list.stream().map(ServiceProvider::description).collect(Collectors.toList());
+        // order matters here since it should be based upon weight
         assertThat("root providers are config-driven, auto-started services unless overridden to not be driven", desc,
                    contains("ASingletonService{root}:ACTIVE",
                             "FakeTlsWSNotDrivenByCB{root}:PENDING",
                             "FakeWebServer{root}:ACTIVE",
-                            "FakeWebServerNotDrivenAndHavingConfiguredByOverrides{root}:PENDING"
+                            "FakeWebServerNotDrivenAndHavingConfiguredByOverrides{root}:PENDING",
+                            "SomeConfiguredServiceWithAnAbstractBase{root}:PENDING"
                    ));
 
         criteria = DefaultServiceInfoCriteria.builder()

File: pico/processor/src/main/java/io/helidon/pico/processor/BaseAnnotationProcessor.java
Patch:
@@ -193,7 +193,9 @@ public boolean process(Set<? extends TypeElement> annotations,
             error(getClass().getSimpleName() + " error during processing; " + t + " @ "
                           + rootStackTraceElementOf(t), t);
             // we typically will not even get to this next line since the messager.error() call will trigger things to halt
-            throw new ToolsException("Error during processing: " + t + " @ " + rootStackTraceElementOf(t), t);
+            throw new ToolsException("Error during processing: " + t
+                                             + " @ " + rootStackTraceElementOf(t)
+                                             + " in " + getClass().getSimpleName(), t);
         }
     }
 

File: pico/tests/resources-pico/src/test/java/io/helidon/pico/tests/pico/tbox/ToolBoxTest.java
Patch:
@@ -331,7 +331,7 @@ void knownProviders() {
         List<ServiceProvider<Provider>> providers = services.lookupAll(
                 DefaultServiceInfoCriteria.builder().addContractImplemented(Provider.class.getName()).build());
         List<String> desc = providers.stream().map(ServiceProvider::description).collect(Collectors.toList());
-        // note that order matters here
+        // note that order matters here (weight ranked)
         assertThat(desc,
                 contains("ASerialProviderImpl:INIT",
                          "MyServices$MyConcreteClassContractPerRequestIPProvider:INIT",

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultInterceptorCreator.java
Patch:
@@ -581,7 +581,8 @@ Set<TypeName> gatherInterfaces(Set<TypeName> result,
                 gatherInterfaces(result, TypeTools.toTypeElement(tm).orElse(null));
             });
 
-            return result;
+            TypeElement te = (TypeElement) processEnv.getTypeUtils().asElement(typeElement.getSuperclass());
+            return gatherInterfaces(result, te);
         }
 
         @Override
@@ -740,7 +741,7 @@ Set<TypeName> gatherInterfaces(Set<TypeName> result,
                 gatherInterfaces(result, tm);
             });
 
-            return result;
+            return gatherInterfaces(result, classInfo.getSuperclass());
         }
 
         @Override

File: examples/nima/protocols/src/main/java/io/helidon/examples/nima/protocols/ProtocolsMain.java
Patch:
@@ -96,7 +96,7 @@ private static void grpcUpper(Strings.StringMessage request, StreamObserver<Stri
     private static WsListener wsEcho() {
         return new WsListener() {
             @Override
-            public void receive(WsSession session, String text, boolean last) {
+            public void onMessage(WsSession session, String text, boolean last) {
                 session.send(text, last);
                 System.out.println("websocket request " + text);
             }

File: microprofile/websocket/src/main/java/io/helidon/microprofile/tyrus/TyrusConnection.java
Patch:
@@ -62,7 +62,7 @@ public void handle() {
         while (true) {
             try {
                 BufferData buffer = dataReader.readBuffer();
-                listener.receive(this, buffer, true);
+                listener.onMessage(this, buffer, true);
             } catch (Exception e) {
                 listener.onError(this, e);
                 listener.onClose(this, WsCloseCodes.UNEXPECTED_CONDITION, e.getMessage());
@@ -112,12 +112,12 @@ class TyrusListener implements WsListener {
         private Connection connection;
 
         @Override
-        public void receive(WsSession session, String text, boolean last) {
+        public void onMessage(WsSession session, String text, boolean last) {
             // Should never be called!
         }
 
         @Override
-        public void receive(WsSession session, BufferData buffer, boolean last) {
+        public void onMessage(WsSession session, BufferData buffer, boolean last) {
             byte[] b = new byte[buffer.available()];
             buffer.read(b);         // buffer copy!
             writeToTyrus(session, ByteBuffer.wrap(b));

File: nima/testing/junit5/websocket/src/test/java/io/helidon/nima/testing/junit5/websocket/WsSocketAbstractTestingTest.java
Patch:
@@ -104,7 +104,7 @@ public void onOpen(WsSession session) {
         }
 
         @Override
-        public void receive(WsSession session, String text, boolean last) {
+        public void onMessage(WsSession session, String text, boolean last) {
             this.message = text;
             session.close(WsCloseCodes.NORMAL_CLOSE, "End");
         }
@@ -140,7 +140,7 @@ private static class ServerSideListener implements WsListener {
         String message;
 
         @Override
-        public void receive(WsSession session, String text, boolean last) {
+        public void onMessage(WsSession session, String text, boolean last) {
             message = text;
             session.send("ws", true);
         }

File: nima/tests/integration/websocket/server/src/main/java/io/helidon/nima/tests/integration/websocket/webserver/EchoService.java
Patch:
@@ -42,7 +42,7 @@ public void onOpen(WsSession session) {
     }
 
     @Override
-    public void receive(WsSession session, String text, boolean last) {
+    public void onMessage(WsSession session, String text, boolean last) {
         session.send(text, last);
     }
 

File: nima/tests/integration/websocket/server/src/main/java/io/helidon/nima/tests/integration/websocket/webserver/WsConversationService.java
Patch:
@@ -85,12 +85,12 @@ public void onClose(WsSession session, int status, String reason) {
     }
 
     @Override
-    public void receive(WsSession session, String text, boolean last) {
+    public void onMessage(WsSession session, String text, boolean last) {
         received.add(new WsAction(RCV, TEXT, text));
     }
 
     @Override
-    public void receive(WsSession session, BufferData buffer, boolean last) {
+    public void onMessage(WsSession session, BufferData buffer, boolean last) {
         int n = buffer.available();
         received.add(new WsAction(RCV, BINARY, buffer.readString(n, UTF_8)));
     }

File: nima/tests/integration/websocket/server/src/test/java/io/helidon/nima/tests/integration/websocket/webserver/WebSocketOriginTest.java
Patch:
@@ -102,7 +102,7 @@ public CompletionStage<?> onText(java.net.http.WebSocket webSocket,
     private static WsListener single() {
         return new WsListener() {
             @Override
-            public void receive(WsSession session, String text, boolean last) {
+            public void onMessage(WsSession session, String text, boolean last) {
                 session.send(text.toUpperCase(Locale.ROOT), true);
             }
         };

File: tests/integration/native-image/nima-1/src/main/java/io/helidon/tests/integration/nativeimage/nima1/WebSocketEndpoint.java
Patch:
@@ -34,7 +34,7 @@ public void onOpen(WsSession session) {
     }
 
     @Override
-    public void receive(WsSession session, String message, boolean last) {
+    public void onMessage(WsSession session, String message, boolean last) {
         LOGGER.log(Level.INFO, "WS Receiving " + message);
         if (message.contains("SEND")) {
             session.send(message, false);

File: examples/microprofile/http-status-count-mp/src/test/java/io/helidon/examples/mp/httpstatuscount/StatusResource.java
Patch:
@@ -46,6 +46,6 @@ public Response reportStatus(@PathParam("status") String statusText) {
             status = Http.Status.INTERNAL_SERVER_ERROR_500.code();
             msg = "Unsuccessful conversion";
         }
-        return Response.status(status).entity(msg).build();
+        return status == 204 ? Response.status(204).build() : Response.status(status).entity(msg).build();
     }
 }

File: nima/http/encoding/deflate/src/main/java/io/helidon/nima/http/encoding/deflate/DeflateEncodingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,6 @@
 
 package io.helidon.nima.http.encoding.deflate;
 
-import java.io.BufferedOutputStream;
 import java.io.OutputStream;
 import java.util.Set;
 import java.util.zip.DeflaterOutputStream;
@@ -63,7 +62,7 @@ public ContentEncoder encoder() {
         return new ContentEncoder() {
             @Override
             public OutputStream encode(OutputStream network) {
-                return new DeflaterOutputStream(new BufferedOutputStream(network, 512));
+                return new DeflaterOutputStream(network);
             }
 
             @Override

File: nima/http/encoding/encoding/src/main/java/io/helidon/nima/http/encoding/spi/ContentEncodingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: nima/http/encoding/gzip/src/main/java/io/helidon/nima/http/encoding/gzip/GzipEncodingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,6 @@
 
 package io.helidon.nima.http.encoding.gzip;
 
-import java.io.BufferedOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.UncheckedIOException;
@@ -75,7 +74,7 @@ public ContentEncoder encoder() {
             @Override
             public OutputStream encode(OutputStream network) {
                 try {
-                    return new GZIPOutputStream(new BufferedOutputStream(network, 512));
+                    return new GZIPOutputStream(network);
                 } catch (IOException e) {
                     throw new UncheckedIOException(e);
                 }

File: nima/tests/integration/webclient/webclient/src/test/java/io/helidon/nima/webclient/http1/ClientRequestImplTest.java
Patch:
@@ -333,6 +333,7 @@ private static void customHandler(ServerRequest req, ServerResponse res, boolean
                     byte[] chunk = new byte[chunkLen];
                     System.arraycopy(entity, i * regularChunkLen, chunk, 0, chunkLen);
                     outputStream.write(chunk);
+                    outputStream.flush();       // will force chunked
                 }
             }
         }

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/ErrorHandlingWithOutputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -66,6 +66,7 @@ static void router(HttpRouting.Builder router) {
                     res.header(MAIN_HEADER_NAME, "x");
                     OutputStream os = res.outputStream();
                     os.write("writeOnce".getBytes(StandardCharsets.UTF_8));
+                    os.flush();
                     os.write("|writeTwice".getBytes(StandardCharsets.UTF_8));
                     throw new CustomException();
                 })

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/WebServer.java
Patch:
@@ -240,6 +240,7 @@ public Builder config(Config config) {
                         listenerConfig.get("backlog").asInt().ifPresent(listener::backlog);
                         listenerConfig.get("receive-buffer-size").asInt().ifPresent(listener::receiveBufferSize);
                         listenerConfig.get("write-queue-length").asInt().ifPresent(listener::writeQueueLength);
+                        listenerConfig.get("write-buffer-size").asInt().ifPresent(listener::writeBufferSize);
 
                         listenerConfig.get("tls").as(Tls::create).ifPresent(listener::tls);
 
@@ -529,7 +530,7 @@ List<ServerConnectionSelector> connectionProviders() {
                     .toList();
         }
 
-        private ListenerConfiguration.Builder socket(String socketName) {
+        ListenerConfiguration.Builder socket(String socketName) {
             return socketBuilder.computeIfAbsent(socketName, ListenerConfiguration::builder);
         }
 

File: examples/microprofile/http-status-count-mp/src/test/java/io/helidon/examples/mp/httpstatuscount/StatusTest.java
Patch:
@@ -55,7 +55,8 @@ void findStatusMetrics() {
 
     @Test
     void checkStatusMetrics() {
-        checkAfterStatus(171);
+        // intermediate responses are not "full" responses and since JDK 20 they are not returned by the client at all
+        // checkAfterStatus(171);
         checkAfterStatus(200);
         checkAfterStatus(201);
         checkAfterStatus(204);

File: examples/nima/observe/src/main/java/io/helidon/examples/nima/observe/ObserveMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public static void main(String[] args) {
                 .routing(it -> routing(config, it))
                 .start();
 
-        System.out.println("WEB server is up! http://localhost:" + server.port() + "/greet");
+        System.out.println("WEB server is up! http://localhost:" + server.port());
     }
 
     /**

File: integrations/cdi/eclipselink-cdi/src/main/java/io/helidon/integrations/cdi/eclipselink/CDISEPlatform.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,6 +38,7 @@
 import org.eclipse.persistence.platform.server.ServerPlatformBase;
 import org.eclipse.persistence.sessions.DatabaseSession;
 import org.eclipse.persistence.sessions.DatasourceLogin;
+import org.eclipse.persistence.sessions.ExternalTransactionController;
 import org.eclipse.persistence.sessions.JNDIConnector;
 import org.eclipse.persistence.sessions.Session;
 import org.eclipse.persistence.transaction.JTATransactionController;
@@ -258,7 +259,7 @@ public void initializeExternalTransactionController() {
      * @see TransactionController
      */
     @Override
-    public Class<?> getExternalTransactionControllerClass() {
+    public Class<? extends ExternalTransactionController> getExternalTransactionControllerClass() {
         if (this.externalTransactionControllerClass == null) {
             this.externalTransactionControllerClass = TransactionController.class;
         }

File: builder/builder-config-processor/src/main/java/io/helidon/builder/config/processor/ConfigBeanBuilderCreator.java
Patch:
@@ -105,13 +105,13 @@ protected void preValidate(TypeName implTypeName,
         boolean drivesActivation = Boolean.parseBoolean(configBeanAnno.value(TAG_DRIVES_ACTIVATION).orElseThrow());
         LevelType levelType = LevelType.valueOf(configBeanAnno.value(TAG_LEVEL_TYPE).orElseThrow());
         if (drivesActivation && levelType != LevelType.ROOT) {
-            throw new IllegalStateException("only levelType {" + LevelType.ROOT + "} config beans can drive activation for: "
+            throw new IllegalStateException("Only levelType {" + LevelType.ROOT + "} config beans can drive activation for: "
                                                     + typeInfo.typeName());
         }
 
         boolean wantDefaultConfigBean = Boolean.parseBoolean(configBeanAnno.value(TAG_WANT_DEFAULT_CONFIG_BEAN).orElseThrow());
         if (wantDefaultConfigBean && levelType != LevelType.ROOT) {
-            throw new IllegalStateException("only levelType {" + LevelType.ROOT + "} config beans can have a default bean for: "
+            throw new IllegalStateException("Only levelType {" + LevelType.ROOT + "} config beans can have a default bean for: "
                                                     + typeInfo.typeName());
         }
 

File: builder/builder-config-processor/src/test/java/io/helidon/builder/config/processor/ConfigBeanBuilderCreatorTest.java
Patch:
@@ -86,7 +86,7 @@ void preValidateConfigBeansMustBeRootToDriveActivation() {
         IllegalStateException e = assertThrows(IllegalStateException.class,
                                                () -> creator.preValidate(implTypeName, typeInfo, configBeanAnno));
         assertThat(e.getMessage(),
-                   equalTo("only levelType {ROOT} config beans can drive activation for: " + getClass().getName()));
+                   equalTo("Only levelType {ROOT} config beans can drive activation for: " + getClass().getName()));
     }
 
     @Test
@@ -106,7 +106,7 @@ void preValidateConfigBeansMustBeRootToHaveDefaults() {
         IllegalStateException e = assertThrows(IllegalStateException.class,
                                                () -> creator.preValidate(implTypeName, typeInfo, configBeanAnno));
         assertThat(e.getMessage(),
-                   equalTo("only levelType {ROOT} config beans can have a default bean for: " + getClass().getName()));
+                   equalTo("Only levelType {ROOT} config beans can have a default bean for: " + getClass().getName()));
     }
 
     @Test
@@ -136,7 +136,7 @@ void preValidateConfigBeansMustNotHaveDuplicateSingularNames() {
         IllegalStateException e = assertThrows(IllegalStateException.class,
                                                () -> creator.preValidate(implTypeName, typeInfo, configBeanAnno));
         assertThat(e.getMessage(),
-                   startsWith("duplicate methods are using the same names [socket] for: "));
+                   startsWith("Duplicate methods are using the same names [socket] for: "));
     }
 
     @Test

File: builder/builder-config/src/main/java/io/helidon/builder/config/spi/HelidonConfigResolver.java
Patch:
@@ -129,7 +129,7 @@ private <T> Optional<T> optionalWrappedConfig(ResolutionContext ctx,
             if (mapper != null) {
                 if (attrCfg.isList() || isMap) {
                     if (!isList && !isSet && !isMap) {
-                        throw new IllegalStateException("unable to convert node list to " + type + " for " + attrCfg);
+                        throw new IllegalStateException("Unable to convert node list to " + type + " for " + attrCfg);
                     }
 
                     List<Object> cfgList = new ArrayList<>();

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/BodyContext.java
Patch:
@@ -602,7 +602,7 @@ && isBooleanType(method.typeName().name())
 
             allTypeInfos.add(method);
             if (allAttributeNames.contains(beanAttributeName)) {
-                throw new IllegalStateException("duplicate attribute name: " + beanAttributeName + " processing " + typeInfo);
+                throw new IllegalStateException("Duplicate attribute name: " + beanAttributeName + " processing " + typeInfo);
             }
             allAttributeNames.add(beanAttributeName);
         }

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/BuilderTypeTools.java
Patch:
@@ -92,7 +92,7 @@ public Optional<TypeInfo> createTypeInfo(TypeName annotationTypeName,
                 .filter(it -> !it.getParameters().isEmpty() || it.getReturnType().getKind() == TypeKind.VOID)
                 .collect(Collectors.toList());
         if (!problems.isEmpty()) {
-            String msg = "only simple getters with no arguments are supported: " + element + ": " + problems;
+            String msg = "Only simple getters with no arguments are supported: " + element + ": " + problems;
             processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg);
             throw new IllegalStateException(msg);
         }
@@ -310,7 +310,7 @@ public static Optional<DefaultTypeName> createTypeNameFromMirror(TypeMirror type
                 type = double.class;
                 break;
             default:
-                throw new IllegalStateException("unknown primitive type: " + kind);
+                throw new IllegalStateException("Unknown primitive type: " + kind);
             }
 
             return Optional.of(DefaultTypeName.create(type));

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/DefaultBuilderCreatorProvider.java
Patch:
@@ -134,7 +134,7 @@ private void assertNoDuplicateSingularNames(TypeInfo typeInfo) {
                 });
 
         if (!duplicateNames.isEmpty()) {
-            throw new IllegalStateException("duplicate methods are using the same names " + duplicateNames + " for: "
+            throw new IllegalStateException("Duplicate methods are using the same names " + duplicateNames + " for: "
                                                     + typeInfo.typeName());
         }
     }

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/GenerateMethod.java
Patch:
@@ -169,7 +169,7 @@ private static StringBuilder oneSingularSetter(BodyContext ctx,
                 } else if (mapValueType.isMap()) {
                     builder.append(ctx.mapType());
                 } else {
-                    throw new IllegalStateException("unhandled singular type: " + mapValueType);
+                    throw new IllegalStateException("Unhandled singular type: " + mapValueType);
                 }
                 builder.append("<>();\n");
                 builder.append("\t\t\t\t}\n");
@@ -179,7 +179,7 @@ private static StringBuilder oneSingularSetter(BodyContext ctx,
                     } else if (mapValueType.isMap()) {
                         builder.append("\t\t\t\t((java.util.Map) v).put(k, val);\n");
                     } else {
-                        throw new IllegalStateException("unhandled singular type: " + mapValueType);
+                        throw new IllegalStateException("Unhandled singular type: " + mapValueType);
                     }
                 } else {
                     if (mapValueType.isSet() || mapValueType.isList()) {

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/GenerateVisitorSupport.java
Patch:
@@ -109,7 +109,7 @@ static void appendExtraInnerClasses(StringBuilder builder,
                                    + "\n"
                                    + "\t\tvoid validate() {\n"
                                    + "\t\t\tif (!errors.isEmpty()) {\n"
-                                   + "\t\t\t\tthrow new java.lang.IllegalStateException(\"problems building configbean '\" + "
+                                   + "\t\t\t\tthrow new java.lang.IllegalStateException(\"Problems building config bean '\" + "
                                    + ctx.typeInfo().typeName() + ".class.getName() + \"': \" + String.join(\", \", errors));\n"
                                    + "\t\t\t}\n"
                                    + "\t\t}\n"

File: pico/api/src/main/java/io/helidon/pico/InjectionPointProvider.java
Patch:
@@ -67,12 +67,11 @@ default List<T> list(ContextualServiceQuery query) {
         return first(query).map(List::of).orElseGet(List::of);
     }
 
-    @SuppressWarnings("rawtypes")
     private PicoException couldNotFindMatch() {
         if (this instanceof ServiceProvider) {
-            return new PicoServiceProviderException("expected to find a match", (ServiceProvider) this);
+            return new PicoServiceProviderException("Expected to find a match", (ServiceProvider<?>) this);
         }
-        return new PicoException("expected to find a match for " + this);
+        return new PicoException("Expected to find a match for " + this);
     }
 
 }

File: pico/api/src/main/java/io/helidon/pico/PicoServicesHolder.java
Patch:
@@ -89,7 +89,7 @@ static void bootstrap(Bootstrap bootstrap) {
                         "bootstrap was previously set from this code path:\n" + prettyPrintStackTraceOf(trace)
                                 + "; module name is '" + callingContext.moduleName().orElse("undefined") + "'");
             }
-            throw new IllegalStateException("bootstrap already set - " + DEBUG_HINT);
+            throw new IllegalStateException("The bootstrap has already been set - " + DEBUG_HINT);
         }
     }
 

File: pico/api/src/test/java/io/helidon/pico/PicoServicesTest.java
Patch:
@@ -53,7 +53,8 @@ void testGetPicoServices() {
 
         IllegalStateException e = assertThrows(IllegalStateException.class, () -> PicoServices.globalBootstrap(bootstrap));
         assertThat(e.getMessage(),
-                   equalTo("bootstrap already set - use the (-D and/or -A) tag 'pico.debug=true' to see full trace output."));
+                   equalTo("The bootstrap has already been set - "
+                                   + "use the (-D and/or -A) tag 'pico.debug=true' to see full trace output."));
 
         PicoServices picoServices = PicoServices.picoServices().orElseThrow();
         assertThat(picoServices, notNullValue());

File: pico/configdriven/processor/src/main/java/io/helidon/pico/configdriven/processor/ConfiguredByProcessor.java
Patch:
@@ -188,7 +188,7 @@ void validateBeanType(TypeName configBeanType) {
         TypeElement typeElement = (configBeanType == null)
                 ? null : processingEnv.getElementUtils().getTypeElement(configBeanType.name());
         if (typeElement == null) {
-            throw new ToolsException("unknown type: " + configBeanType);
+            throw new ToolsException("Unknown config bean type: " + configBeanType);
         }
 
         if (typeElement.getKind() != ElementKind.INTERFACE) {
@@ -208,7 +208,7 @@ void validateServiceType(TypeName serviceTypeName,
         TypeElement typeElement = (serviceTypeName == null)
                 ? null : processingEnv.getElementUtils().getTypeElement(serviceTypeName.name());
         if (typeElement == null) {
-            throw new ToolsException("unknown type: " + serviceTypeName);
+            throw new ToolsException("Unknown service type: " + serviceTypeName);
         }
 
         if (typeElement.getKind() != ElementKind.CLASS) {

File: pico/configdriven/services/src/main/java/io/helidon/pico/configdriven/services/AbstractConfiguredServiceProvider.java
Patch:
@@ -731,7 +731,7 @@ void resolveConfigDrivenServices() {
     }
 
     private PicoException expectedConfigurationSetGlobally() {
-        return new PicoException("expected to have configuration set globally - see PicoServices.globalBootstrap()");
+        return new PicoException("Expected to have configuration set globally - see PicoServices.globalBootstrap()");
     }
 
     private void activateConfigDrivenServices() {

File: pico/configdriven/services/src/main/java/io/helidon/pico/configdriven/services/BindableConfigBeanRegistry.java
Patch:
@@ -34,6 +34,7 @@ public interface BindableConfigBeanRegistry extends ConfigBeanRegistry, Resettab
      * @param configuredServiceProvider the configured service provider
      * @param configuredByQualifier the qualifier associated with the {@link io.helidon.builder.config.spi.ConfigBeanInfo}
      * @param metaConfigBeanInfo the meta config bean info associated with this service provider
+     * @throws io.helidon.config.ConfigException if the bind operation encountered an error
      */
     void bind(ConfiguredServiceProvider<?, ?> configuredServiceProvider,
               QualifierAndValue configuredByQualifier,

File: pico/configdriven/services/src/main/java/io/helidon/pico/configdriven/services/ConfigDrivenUtils.java
Patch:
@@ -40,7 +40,7 @@ static boolean hasValue(String val) {
 
     static String validatedConfigKey(String configKey) {
         if (!hasValue(configKey)) {
-            throw new IllegalStateException("key was expected to be non-blank");
+            throw new IllegalStateException("The config key was expected to be non-blank");
         }
         return configKey;
     }

File: pico/configdriven/services/src/main/java/io/helidon/pico/configdriven/services/DefaultConfigResolver.java
Patch:
@@ -159,7 +159,7 @@ static Optional<?> parse(String strValueToParse,
                 return Optional.ofNullable(val);
             } catch (Exception e) {
                 if (Optional.class != type) {
-                    throw new UnsupportedOperationException("Only Optional<> is currently supported: " + attrName);
+                    throw new UnsupportedOperationException("Only Optional<> is supported: " + attrName);
                 }
             }
         }
@@ -206,7 +206,7 @@ static <T, V> Optional<Collection<V>> optionalWrappedBeans(List<?> configBeans,
                                                     Class<?> componentType) {
         assert (configBeans != null && !configBeans.isEmpty() && (type != null) && componentType != null);
         if (keyType != null && String.class != keyType) {
-            throw new UnsupportedOperationException("Only Map with key of String is currently supported: " + attrName);
+            throw new UnsupportedOperationException("Only Map<String, ...> is supported: " + attrName);
         }
 
         configBeans.forEach((key, value) -> {

File: pico/configdriven/tests/configuredby/src/main/java/io/helidon/pico/configdriven/configuredby/test/AbstractConfiguredByTest.java
Patch:
@@ -161,16 +161,16 @@ void testRegistry() {
 
         ServiceProvider<Object> fakeTlsProvider = list.get(0);
         PicoServiceProviderException e = assertThrows(PicoServiceProviderException.class, fakeTlsProvider::get);
-        assertThat("there is no configuration, so cannot activate this service", e.getMessage(),
-                   equalTo("expected to find a match: service provider: FakeTlsWSNotDrivenByCB{root}:PENDING"));
+        assertThat("There is no configuration, so cannot activate this service", e.getMessage(),
+                   equalTo("Expected to find a match: service provider: FakeTlsWSNotDrivenByCB{root}:PENDING"));
 
         criteria = DefaultServiceInfoCriteria.builder()
                 .addContractImplemented(ASingletonService.class.getName())
                 .addQualifier(DefaultQualifierAndValue.createNamed("jane"))
                 .build();
         list = services.lookupAll(criteria);
         desc = list.stream().map(ServiceProvider::description).collect(Collectors.toList());
-        assertThat("slave providers expected here since we have default configuration for this service", desc,
+        assertThat("Slave providers expected here since we have default configuration for this service", desc,
                    contains("ASingletonService{1}:ACTIVE"));
     }
 

File: pico/maven-plugin/src/main/java/io/helidon/pico/maven/plugin/AbstractCreatorMojo.java
Patch:
@@ -247,7 +247,7 @@ public void execute() throws MojoExecutionException {
             getLog().info("Finishing " + getClass().getName() + " for " + getProject());
             MavenPluginUtils.resetAll();
         } catch (Throwable t) {
-            MojoExecutionException me = new MojoExecutionException("creator failed", t);
+            MojoExecutionException me = new MojoExecutionException(PicoServicesConfig.NAME + " Maven plugin execution failed", t);
             getLog().error(me.getMessage(), t);
             throw me;
         } finally {

File: pico/processor/src/main/java/io/helidon/pico/processor/CustomAnnotationProcessor.java
Patch:
@@ -95,7 +95,7 @@ static List<CustomAnnotationTemplateCreator> initialize() {
                 ALL_ANNO_TYPES_HANDLED.addAll(annoTypes);
             } catch (Throwable t) {
                 System.Logger logger = System.getLogger(CustomAnnotationProcessor.class.getName());
-                ToolsException te = new ToolsException("failed to initialize creator: " + creator, t);
+                ToolsException te = new ToolsException("Failed to initialize: " + creator, t);
                 logger.log(System.Logger.Level.ERROR, te.getMessage(), te);
                 throw te;
             }
@@ -127,7 +127,7 @@ public boolean process(Set<? extends TypeElement> annotations,
             error(getClass().getSimpleName() + " error during processing; " + t + " @ "
                           + ProcessorUtils.rootStackTraceElementOf(t), t);
             // we typically will not even get to this next line since the messager.error() call will trigger things to halt
-            throw new ToolsException("error during processing: " + t + " @ "
+            throw new ToolsException("Error while processing: " + t + " @ "
                                              + ProcessorUtils.rootStackTraceElementOf(t), t);
         }
     }
@@ -176,7 +176,7 @@ void doInner(TypeName annoTypeName,
                     doFiler(response);
                 }
             } catch (Throwable t) {
-                throw new ToolsException("handling " + typesToProcess + t, t);
+                throw new ToolsException("Error detected while processing: " + typesToProcess + t, t);
             }
         }
     }

File: pico/processor/src/main/java/io/helidon/pico/processor/DefaultGenericTemplateCreator.java
Patch:
@@ -91,7 +91,7 @@ CharSequence supplyFromResources(String templateProfile,
         TemplateHelper templateHelper = TemplateHelper.create();
         String template = templateHelper.loadTemplate(templateProfile, templateName);
         if (template == null) {
-            ToolsException te = new ToolsException("unable to find template" + templateProfile + "/" + templateName);
+            ToolsException te = new ToolsException("Unable to find template " + templateProfile + "/" + templateName);
             messager.error(te.getMessage(), te);
             throw te;
         }

File: pico/processor/src/main/java/io/helidon/pico/processor/ServiceAnnotationProcessor.java
Patch:
@@ -110,7 +110,7 @@ public boolean process(Set<? extends TypeElement> annotations,
             error(getClass().getSimpleName() + " error during processing; " + t
                           + " @ " + rootStackTraceElementOf(t), t);
             // we typically will not even get to this next line since the messager.error() call will trigger things to halt
-            throw new ToolsException("error during processing: " + t
+            throw new ToolsException("Error detected while processing: " + t
                                              + " @ " + rootStackTraceElementOf(t), t);
         } finally {
             if (roundEnv.processingOver()) {

File: pico/processor/src/test/java/io/helidon/pico/processor/TestUtils.java
Patch:
@@ -41,7 +41,7 @@ static String loadStringFromResource(String resourceNamePath) {
                 return new String(in.readAllBytes(), StandardCharsets.UTF_8);
             }
         } catch (Exception e) {
-            throw new ToolsException("failed to load: " + resourceNamePath, e);
+            throw new ToolsException("Failed to load: " + resourceNamePath, e);
         }
     }
 

File: pico/services/src/main/java/io/helidon/pico/services/DefaultInjectionPlans.java
Patch:
@@ -213,7 +213,7 @@ static Object resolve(ServiceProvider<?> self,
 
                 if (serviceProviders.isEmpty()) {
                     if (!allowNullableInjectionPoint(ipInfo)) {
-                        throw new InjectionException("expected to resolve a service appropriate for "
+                        throw new InjectionException("Expected to resolve a service appropriate for "
                                                              + ipInfo.serviceTypeName() + "." + ipInfo.elementName(),
                                                      DefaultServices
                                                              .resolutionBasedInjectionError(
@@ -235,7 +235,7 @@ static Object resolve(ServiceProvider<?> self,
                 if (ipInfo.optionalWrapped()) {
                     return Optional.empty();
                 } else {
-                    throw new InjectionException("expected to resolve a service appropriate for "
+                    throw new InjectionException("Expected to resolve a service appropriate for "
                                                          + ipInfo.serviceTypeName() + "." + ipInfo.elementName(),
                                                  DefaultServices.resolutionBasedInjectionError(ipInfo.dependencyToServiceInfo()),
                                                  self);

File: pico/services/src/main/java/io/helidon/pico/services/DefaultServices.java
Patch:
@@ -157,11 +157,11 @@ static ServiceInfo toValidatedServiceInfo(ServiceProvider<?> serviceProvider) {
 
     static InjectionException serviceProviderAlreadyBoundInjectionError(ServiceProvider<?> previous,
                                                                         ServiceProvider<?> sp) {
-        return new InjectionException("service provider already bound to " + previous, null, sp);
+        return new InjectionException("Service provider already bound to " + previous, null, sp);
     }
 
     static InjectionException resolutionBasedInjectionError(ServiceInfoCriteria ctx) {
-        return new InjectionException("expected to resolve a service matching " + ctx);
+        return new InjectionException("Expected to resolve a service matching " + ctx);
     }
 
     static InjectionException resolutionBasedInjectionError(String serviceTypeName) {
@@ -447,7 +447,7 @@ void bind(PicoServices picoServices,
                 DefaultPicoServices.LOGGER.log(System.Logger.Level.INFO, "finished binding application: " + appName);
             }
         } catch (Exception e) {
-            throw new PicoException("failed to process: " + app, e);
+            throw new PicoException("Failed to process: " + app, e);
         }
     }
 

File: pico/services/src/main/java/io/helidon/pico/services/Invocation.java
Patch:
@@ -119,7 +119,7 @@ public V proceed(Object... args) {
                 this.call = null;
                 return call.get();
             } else {
-                throw new IllegalStateException("unknown call type: " + this);
+                throw new IllegalStateException("Unknown call type: " + this);
             }
         } else {
             return interceptorIterator.next()

File: pico/testing/src/main/java/io/helidon/pico/testing/ReflectionBasedSingletonServiceProvider.java
Patch:
@@ -66,7 +66,7 @@ public static <T> ReflectionBasedSingletonServiceProvider<T> create(Class<T> ser
         Objects.requireNonNull(siBasics);
 
         if (!serviceType.getName().equals(siBasics.serviceTypeName())) {
-            throw new IllegalArgumentException("mismatch in service types");
+            throw new IllegalArgumentException("Mismatch in service types: " + serviceType.getName());
         }
 
         return new ReflectionBasedSingletonServiceProvider<>(serviceType, ServiceInfo.toBuilder(siBasics).build());
@@ -84,7 +84,7 @@ protected T createServiceProvider(Map<String, Object> deps) {
             ctor.setAccessible(true);
             return ctor.newInstance();
         } catch (Exception e) {
-            throw new InjectionException("failed to create instance: " + this, e, this);
+            throw new InjectionException("Failed to fully create instance: " + this, e, this);
         }
     }
 

File: pico/tests/resources-pico/src/test/java/io/helidon/pico/tests/pico/TestUtils.java
Patch:
@@ -45,7 +45,7 @@ public static String loadStringFromResource(String resourceNamePath) {
                 return new String(in.readAllBytes(), StandardCharsets.UTF_8).trim();
             }
         } catch (Exception e) {
-            throw new ToolsException("failed to load: " + resourceNamePath, e);
+            throw new ToolsException("Failed to load: " + resourceNamePath, e);
         }
     }
 
@@ -63,7 +63,7 @@ public static String loadStringFromFile(String fileName) {
             String content = Files.readString(filePath);
             return content.trim();
         } catch (IOException e) {
-            throw new ToolsException("unable to load from file: " + fileName, e);
+            throw new ToolsException("Unable to load from file: " + fileName, e);
         }
     }
 

File: pico/tests/resources-pico/src/test/java/io/helidon/pico/tests/pico/tbox/ToolBoxTest.java
Patch:
@@ -303,7 +303,7 @@ void startupAndShutdownCallsPostConstructAndPreDestroy() {
         assertThat(picoServices.metrics().orElseThrow().lookupCount().orElse(0), equalTo(0));
 
         PicoException e = assertThrows(PicoException.class, () -> picoServices.services());
-        assertThat(e.getMessage(), equalTo("must reset() after shutdown()"));
+        assertThat(e.getMessage(), equalTo("Must reset() after shutdown()"));
 
         tearDown();
         setUp();

File: pico/tools/src/main/java/io/helidon/pico/tools/CodeGenFiler.java
Patch:
@@ -478,7 +478,7 @@ Optional<ModuleInfoDescriptor> readModuleInfo(String name) {
             CharSequence body = readResourceAsString(name);
             return Optional.ofNullable((body == null) ? null : ModuleInfoDescriptor.create(body.toString()));
         } catch (Exception e) {
-            throw new ToolsException("failed to read module-info: " + name, e);
+            throw new ToolsException("Failed to read module-info: " + name, e);
         }
     }
 

File: pico/tools/src/main/java/io/helidon/pico/tools/CommonUtils.java
Patch:
@@ -51,7 +51,7 @@ static String loadStringFromResource(String resourceNamePath) {
                 return new String(in.readAllBytes(), StandardCharsets.UTF_8);
             }
         } catch (Exception e) {
-            throw new ToolsException("failed to load: " + resourceNamePath, e);
+            throw new ToolsException("Failed to load: " + resourceNamePath, e);
         }
     }
 
@@ -68,7 +68,7 @@ static String loadStringFromFile(String fileName) {
             String content = Files.readString(filePath);
             return content;
         } catch (IOException e) {
-            throw new ToolsException("unable to load from file: " + fileName, e);
+            throw new ToolsException("Unable to load from file: " + fileName, e);
         }
     }
 
@@ -189,7 +189,7 @@ static <T> T first(Collection<T> coll,
             if (allowEmptyCollection) {
                 return null;
             } else {
-                throw new ToolsException("expected a non-empty collection");
+                throw new ToolsException("Expected a non-empty collection");
             }
         }
 

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultActivatorCreator.java
Patch:
@@ -127,7 +127,7 @@ public ActivatorCreatorResponse createModuleActivators(ActivatorCreatorRequest r
         } catch (UnsupportedOperationException e) {
             throw e;
         } catch (Throwable t) {
-            return handleError(req, new ToolsException("failed in create", t), builder);
+            return handleError(req, new ToolsException("Failed in create", t), builder);
         }
     }
 
@@ -1044,7 +1044,7 @@ static ClassInfo toClassInfo(TypeName serviceTypeName,
                                  LazyValue<ScanResult> scan) {
         ClassInfo classInfo = scan.get().getClassInfo(serviceTypeName.name());
         if (classInfo == null) {
-            throw new ToolsException("unable to introspect: " + serviceTypeName);
+            throw new ToolsException("Unable to introspect: " + serviceTypeName);
         }
         return classInfo;
     }

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultExternalModuleCreator.java
Patch:
@@ -91,7 +91,7 @@ public ExternalModuleCreatorResponse prepareToCreateExternalModule(ExternalModul
 
         Collection<Path> targetExternalJars = identifyExternalJars(packageNames);
         if (1 != targetExternalJars.size()) {
-            return handleError(req, new ToolsException("the package names provided " + packageNames
+            return handleError(req, new ToolsException("The package names provided " + packageNames
                                                      + " must map to a single jar file, but instead found: "
                                                      + targetExternalJars), responseBuilder);
         }

File: pico/tools/src/main/java/io/helidon/pico/tools/DefaultInterceptorCreator.java
Patch:
@@ -350,7 +350,7 @@ private static TriggerFilter createTriggerFilter(InterceptorCreator creator,
         } else if (Strategy.BLENDED == strategy || strategy == null) {
             return new BlendedStrategy(creator, resolver);
         } else {
-            throw new ToolsException("unknown strategy: " + strategy);
+            throw new ToolsException("Unknown strategy: " + strategy);
         }
     }
 
@@ -430,7 +430,7 @@ public Optional<InterceptionPlan> createInterceptorPlan(Set<String> interceptorA
             }
 
             if (!hasNoArgConstructor()) {
-                ToolsException te =  new ToolsException("there must be a no-arg constructor for: " + serviceTypeName());
+                ToolsException te =  new ToolsException("There must be a no-arg constructor for: " + serviceTypeName());
                 logger.log(System.Logger.Level.WARNING, "skipping interception for: " + serviceTypeName(), te);
                 return Optional.empty();
             }

File: pico/tools/src/main/java/io/helidon/pico/tools/JavaC.java
Patch:
@@ -231,7 +231,7 @@ public boolean hasWarnings() {
 
         public ToolsException maybeGenerateError() {
             if (!isSuccessful()) {
-                return new ToolsException("creator compilation error");
+                return new ToolsException("Creator compilation error");
             }
             return null;
         }

File: pico/tools/src/test/java/io/helidon/pico/tools/DefaultActivatorCreatorTest.java
Patch:
@@ -66,7 +66,7 @@ void codegenHelloActivator() {
                 .build();
 
         ToolsException te = assertThrows(ToolsException.class, () -> activatorCreator.createModuleActivators(req));
-        assertEquals("failed in create", te.getMessage());
+        assertEquals("Failed in create", te.getMessage());
 
         ActivatorCreatorRequest req2 = DefaultActivatorCreatorRequest.builder()
                 .serviceTypeNames(Collections.singletonList(DefaultTypeName.create(HelloPicoWorldImpl.class)))
@@ -78,7 +78,7 @@ void codegenHelloActivator() {
                 .build();
         ActivatorCreatorResponse res = activatorCreator.createModuleActivators(req2);
         assertThat(res.toString(), res.success(), is(false));
-        assertThat(res.error().orElseThrow().getMessage(), equalTo("failed in create"));
+        assertThat(res.error().orElseThrow().getMessage(), equalTo("Failed in create"));
     }
 
 }

File: pico/tools/src/test/java/io/helidon/pico/tools/ModuleInfoDescriptorTest.java
Patch:
@@ -137,7 +137,7 @@ void innerCommentsNotSupported() {
         String moduleInfo = "module test {\nprovides /* inner comment */ cn;\n}";
         ToolsException te = assertThrows(ToolsException.class, () -> ModuleInfoDescriptor.create(moduleInfo));
         assertThat(te.getMessage(),
-                   equalTo("unable to parse lines that have inner comments: 'provides /* inner comment */ cn'"));
+                   equalTo("Unable to parse lines that have inner comments: 'provides /* inner comment */ cn'"));
     }
 
     @Test

File: pico/tools/src/test/java/io/helidon/pico/tools/TemplateHelperTest.java
Patch:
@@ -38,7 +38,7 @@ void bogusTemplateName() {
         TemplateHelper helper = TemplateHelper.create();
         ToolsException e = assertThrows(ToolsException.class,
                                               () -> helper.safeLoadTemplate("bogus.hbs"));
-        assertThat(e.getMessage(), equalTo("failed to load: templates/pico/default/bogus.hbs"));
+        assertThat(e.getMessage(), equalTo("Failed to load: templates/pico/default/bogus.hbs"));
     }
 
     @Test

File: messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/Crc32CSubstitution.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,8 +27,8 @@
 /**
  * Method handles are not supported by native-image,
  * invoke {@link java.util.zip.CRC32C CRC32C} directly.
- *
- * Helidon runs only on Java 11 and newer, {@link java.util.zip.CRC32C CRC32C}
+ * <p/>
+ * Helidon (since version 2) runs only on Java 11 and newer, {@link java.util.zip.CRC32C CRC32C}
  * doesn't have to be instantiated by method handles.
  */
 @TargetClass(org.apache.kafka.common.utils.Crc32C.class)

File: microprofile/cdi/src/test/java/io/helidon/microprofile/cdi/TestExtension.java
Patch:
@@ -42,7 +42,7 @@ public class TestExtension implements Extension {
     private final List<String> events = new LinkedList<>();
     private Config runtimeConfig;
 
-    // must be public so it works with java 11 (do not want to open this module to weld)
+    // must be public so it works with never versions of Java (do not want to open this module to weld)
     public void registerBeans(@Observes BeforeBeanDiscovery bbd) {
         bbd.addAnnotatedType(TestBean.class, "unit-test-bean");
         bbd.addAnnotatedType(TestBean2.class, "unit-test-bean2");

File: nima/http/media/jackson/src/main/java/module-info.java
Patch:
@@ -26,7 +26,7 @@
          invalidIn = HelidonFlavor.SE,
          path = {"Media", "Jackson"}
 )
-module io.helidon.nima.http.media.jacskon {
+module io.helidon.nima.http.media.jackson {
     requires static io.helidon.common.features.api;
 
     requires io.helidon.nima.http.media;

File: tests/integration/jms/src/test/java/io/helidon/messaging/connectors/jms/AbstractMPTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -85,12 +85,13 @@ Stream<Message> consumeAllCurrent(String topic) {
             Message m;
             List<Message> result = new ArrayList<>();
             for (; ; ) {
-                m = consumer.receive(50L);
+                m = consumer.receive(500L);
                 if (m == null) {
                     break;
                 }
                 result.add(m);
             }
+            consumer.close();
             return result.stream();
         } catch (JMSException e) {
             throw new RuntimeException(e);

File: tests/integration/jms/src/test/java/io/helidon/messaging/connectors/jms/JmsMpTest.java
Patch:
@@ -222,7 +222,7 @@ void error() {
         AbstractSampleBean bean = CDI.current().select(AbstractSampleBean.ChannelError.class).get();
         // This is correctly processed
         List<String> testData = Collections.singletonList("10");
-        produceAndCheck(bean, testData, TEST_TOPIC_ERROR, testData);
+        produce(TEST_TOPIC_ERROR, testData, textMessage -> {});
         // This will throw a run time error in TestBean#error
         testData = Collections.singletonList("error");
         produceAndCheck(bean, testData, TEST_TOPIC_ERROR, Collections.singletonList("10"));

File: nima/webclient/webclient/src/main/java/module-info.java
Patch:
@@ -33,6 +33,7 @@
 )
 module io.helidon.nima.webclient {
     requires static io.helidon.common.features.api;
+    requires static io.helidon.config.metadata;
 
     requires transitive io.helidon.common.uri;
     requires transitive io.helidon.nima.common.tls;
@@ -55,4 +56,4 @@ This module exposes two packages, as we (want to) have cyclic dependency.
     uses DnsResolverProvider;
     uses SourceHandlerProvider;
     provides DnsResolverProvider with RoundRobinDnsResolverProvider, DefaultDnsResolverProvider, NoDnsResolverProvider;
-}
\ No newline at end of file
+}

File: nima/webserver/webserver/src/main/java/module-info.java
Patch:
@@ -16,6 +16,7 @@
 
 import io.helidon.common.features.api.Feature;
 import io.helidon.common.features.api.HelidonFlavor;
+import io.helidon.nima.webserver.http.spi.SinkProvider;
 import io.helidon.nima.webserver.http1.Http1ConnectionProvider;
 import io.helidon.nima.webserver.http1.spi.Http1UpgradeProvider;
 import io.helidon.nima.webserver.spi.ServerConnectionProvider;
@@ -58,11 +59,13 @@
     exports io.helidon.nima.webserver;
     exports io.helidon.nima.webserver.spi;
     exports io.helidon.nima.webserver.http;
+    exports io.helidon.nima.webserver.http.spi;
     exports io.helidon.nima.webserver.http1;
     exports io.helidon.nima.webserver.http1.spi;
 
     uses Http1UpgradeProvider;
     uses ServerConnectionProvider;
+    uses SinkProvider;
 
     provides ServerConnectionProvider with Http1ConnectionProvider;
 }
\ No newline at end of file

File: builder/processor-spi/src/main/java/io/helidon/builder/processor/spi/TypeInfoCreatorProvider.java
Patch:
@@ -37,11 +37,13 @@ public interface TypeInfoCreatorProvider {
      * @param typeName      the type name that is being processed that is annotated with the triggering annotation
      * @param element       the element representative of the typeName
      * @param processingEnv the processing environment
+     * @param wantDefaultMethods true to accept {@code default} methods (normally this is passed as false)
      * @return the type info associated with the arguments being processed, or empty if not able to process the type
      */
     Optional<TypeInfo> createTypeInfo(TypeName annoTypeName,
                                       TypeName typeName,
                                       TypeElement element,
-                                      ProcessingEnvironment processingEnv);
+                                      ProcessingEnvironment processingEnv,
+                                      boolean wantDefaultMethods);
 
 }

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1ServerResponse.java
Patch:
@@ -151,8 +151,6 @@ public OutputStream outputStream() {
         }
         streamingEntity = true;
 
-        request.reset();
-
         this.outputStream = new BlockingOutputStream(headers,
                                                      trailers,
                                                      this::status,
@@ -161,6 +159,7 @@ public OutputStream outputStream() {
                                                      () -> {
                                                          this.isSent = true;
                                                          afterSend();
+                                                         request.reset();
                                                      },
                                                      ctx,
                                                      sendListener,

File: reactive/fault-tolerance/src/main/java/module-info.java
Patch:
@@ -22,8 +22,8 @@
  */
 @Feature(value = "Fault Tolerance",
         description = "Fault Tolerance",
-        in = HelidonFlavor.NIMA,
-        invalidIn = HelidonFlavor.SE,
+        in = HelidonFlavor.SE,
+        invalidIn = HelidonFlavor.NIMA,
         path = "Fault Tolerance"
 )
 module io.helidon.reactive.faulttolerance {

File: config/config/src/main/java/io/helidon/config/ConfigSources.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -70,7 +70,7 @@ public static ConfigSource empty() {
      * @return {@code ConfigSource} for the same {@code Config} as the original
      */
     public static ConfigSource create(Config config) {
-        return ConfigSources.create(config.asMap().get()).get();
+        return create(ObjectNodeImpl.create(config));
     }
 
     /**

File: security/providers/oidc-reactive/src/main/java/io/helidon/security/providers/oidc/reactive/OidcSupport.java
Patch:
@@ -242,6 +242,7 @@ private void processTenantLogout(ServerRequest req, ServerResponse res, String t
     private void logoutWithTenant(ServerRequest req, ServerResponse res, Tenant tenant) {
         OidcCookieHandler idTokenCookieHandler = oidcConfig.idTokenCookieHandler();
         OidcCookieHandler tokenCookieHandler = oidcConfig.tokenCookieHandler();
+        OidcCookieHandler tenantCookieHandler = oidcConfig.tenantCookieHandler();
 
         Optional<String> idTokenCookie = req.headers()
                 .cookies()
@@ -269,6 +270,7 @@ private void logoutWithTenant(ServerRequest req, ServerResponse res, Tenant tena
                     ResponseHeaders headers = res.headers();
                     headers.addCookie(tokenCookieHandler.removeCookie().build());
                     headers.addCookie(idTokenCookieHandler.removeCookie().build());
+                    headers.addCookie(tenantCookieHandler.removeCookie().build());
 
                     res.status(Http.Status.TEMPORARY_REDIRECT_307)
                             .addHeader(Http.Header.LOCATION, sb.toString())
@@ -457,7 +459,7 @@ private String processJsonResponse(ServerRequest req,
                     .forSingle(builder -> {
                         headers.addCookie(builder.build());
                         if (idToken != null && oidcConfig.logoutEnabled()) {
-                            tokenCookieHandler.createCookie(idToken)
+                            oidcConfig.idTokenCookieHandler().createCookie(idToken)
                                     .forSingle(it -> {
                                         headers.addCookie(it.build());
                                         res.send();

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcProvider.java
Patch:
@@ -248,8 +248,8 @@ public CompletionStage<OutboundSecurityResponse> outboundSecurity(ProviderReques
                 provides = {AuthenticationProvider.class, SecurityProvider.class})
     public static final class Builder implements io.helidon.common.Builder<Builder, OidcProvider> {
 
-        private static final int BUILDER_WEIGHT = 50000;
-        private static final int DEFAULT_WEIGHT = 100000;
+        private static final int BUILDER_WEIGHT = 300;
+        private static final int DEFAULT_WEIGHT = 100;
 
         private final HelidonServiceLoader.Builder<TenantConfigProvider> tenantConfigProviders = HelidonServiceLoader
                 .builder(ServiceLoader.load(TenantConfigProvider.class))

File: examples/webserver/tutorial/src/main/java/io/helidon/reactive/webserver/examples/tutorial/CommentService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -187,8 +187,7 @@ Flow.Publisher<DataChunk> publish(List<Comment> comments) {
             String str = comments.stream()
                     .map(Comment::toString)
                     .collect(Collectors.joining("\n"));
-            return ContentWriters.charSequenceWriter(StandardCharsets.UTF_8)
-                    .apply(str + "\n");
+            return ContentWriters.writeCharSequence(str + "\n", StandardCharsets.UTF_8);
         }
 
     }

File: reactive/media/common/src/test/java/io/helidon/reactive/media/common/ContentReadersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@
  */
 class ContentReadersTest {
     @Test
-    void testByteArrayReader() {
+    void readBytes() {
         String original = "Popokatepetl";
         byte[] bytes = original.getBytes(StandardCharsets.UTF_8);
 
@@ -45,7 +45,7 @@ void testByteArrayReader() {
     }
 
     @Test
-    void testURLDecodingReader() {
+    void readURLEncodedString() {
         String original = "myParam=\"Now@is'the/time";
         String encoded = URLEncoder.encode(original, StandardCharsets.UTF_8);
         Multi<DataChunk> chunks = Multi.singleton(DataChunk.create(encoded.getBytes(StandardCharsets.UTF_8)));

File: common/task/src/main/java/io/helidon/common/task/HelidonTaskExecutor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.webserver;
+package io.helidon.common.task;
 
 import java.io.Closeable;
 import java.util.concurrent.Future;
@@ -27,7 +27,7 @@
  * executor will query the thread and interrupt it if possible. It is important
  * to efficiently shut down the Nima webserver in certain environments.
  */
-interface HelidonTaskExecutor extends Closeable {
+public interface HelidonTaskExecutor extends Closeable {
 
     /**
      * Executes a task.

File: common/task/src/main/java/io/helidon/common/task/InterruptableTask.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.nima.webserver;
+package io.helidon.common.task;
 
 import java.util.concurrent.Callable;
 

File: nima/http2/webserver/src/main/java/module-info.java
Patch:
@@ -33,6 +33,7 @@
     requires transitive io.helidon.common;
     requires transitive io.helidon.common.uri;
     requires transitive io.helidon.common.socket;
+    requires transitive io.helidon.common.task;
     requires transitive io.helidon.nima.webserver;
     requires transitive io.helidon.common.http;
     requires transitive io.helidon.nima.http2;

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ConnectionHandler.java
Patch:
@@ -27,6 +27,7 @@
 import io.helidon.common.http.RequestException;
 import io.helidon.common.socket.HelidonSocket;
 import io.helidon.common.socket.SocketWriter;
+import io.helidon.common.task.InterruptableTask;
 import io.helidon.nima.webserver.http.DirectHandlers;
 import io.helidon.nima.webserver.spi.ServerConnection;
 import io.helidon.nima.webserver.spi.ServerConnectionSelector;

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ServerListener.java
Patch:
@@ -40,6 +40,7 @@
 import io.helidon.common.socket.PlainSocket;
 import io.helidon.common.socket.SocketOptions;
 import io.helidon.common.socket.TlsSocket;
+import io.helidon.common.task.HelidonTaskExecutor;
 import io.helidon.nima.common.tls.Tls;
 import io.helidon.nima.webserver.http.DirectHandlers;
 import io.helidon.nima.webserver.spi.ServerConnectionSelector;

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ThreadPerTaskExecutor.java
Patch:
@@ -30,6 +30,9 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.stream.Collectors;
 
+import io.helidon.common.task.HelidonTaskExecutor;
+import io.helidon.common.task.InterruptableTask;
+
 /**
  * An implementation of {@link HelidonTaskExecutor}. Implementation is a simplified
  * version of ThreadPerTaskExecutor in the JDK library. Upon termination, this

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1Connection.java
Patch:
@@ -36,11 +36,11 @@
 import io.helidon.common.http.ServerResponseHeaders;
 import io.helidon.common.http.WritableHeaders;
 import io.helidon.common.mapper.MapperException;
+import io.helidon.common.task.InterruptableTask;
 import io.helidon.nima.http.encoding.ContentDecoder;
 import io.helidon.nima.http.encoding.ContentEncodingContext;
 import io.helidon.nima.webserver.CloseConnectionException;
 import io.helidon.nima.webserver.ConnectionContext;
-import io.helidon.nima.webserver.InterruptableTask;
 import io.helidon.nima.webserver.http.DirectTransportRequest;
 import io.helidon.nima.webserver.http.HttpRouting;
 import io.helidon.nima.webserver.http1.spi.Http1Upgrader;

File: nima/webserver/webserver/src/main/java/module-info.java
Patch:
@@ -39,6 +39,7 @@
     requires io.helidon.logging.common;
     requires io.helidon.builder;
     requires io.helidon.pico.builder.config;
+    requires io.helidon.common.task;
 
     requires java.management;
     // only used to keep logging active until shutdown hook finishes

File: nima/webserver/webserver/src/test/java/io/helidon/nima/webserver/ThreadPerTaskExecutorTest.java
Patch:
@@ -20,11 +20,13 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 
+import io.helidon.common.task.HelidonTaskExecutor;
+import io.helidon.common.task.InterruptableTask;
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.common.testing.junit5.MatcherWithRetry.assertThatWithRetry;
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 class ThreadPerTaskExecutorTest {
 

File: nima/http/encoding/encoding/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@
     requires static io.helidon.common.features.api;
 
     requires io.helidon.common;
+    requires transitive io.helidon.common.config;
     requires transitive io.helidon.common.http;
 
     exports io.helidon.nima.http.encoding;

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1Connection.java
Patch:
@@ -68,8 +68,7 @@ public class Http1Connection implements ServerConnection, InterruptableTask<Void
     private final boolean canUpgrade;
     private final Http1Headers http1headers;
     private final Http1Prologue http1prologue;
-    // todo pass from server config
-    private final ContentEncodingContext contentEncodingContext = ContentEncodingContext.create();
+    private final ContentEncodingContext contentEncodingContext;
     private final HttpRouting routing;
     private final long maxPayloadSize;
     private final Http1ConnectionListener recvListener;
@@ -103,6 +102,7 @@ public Http1Connection(ConnectionContext ctx,
         this.reader.listener(recvListener, ctx);
         this.http1headers = new Http1Headers(reader, http1Config.maxHeadersSize(), http1Config.validateHeaders());
         this.http1prologue = new Http1Prologue(reader, http1Config.maxPrologueLength(), http1Config.validatePath());
+        this.contentEncodingContext = ctx.serverContext().contentEncodingContext();
         this.routing = ctx.router().routing(HttpRouting.class, HttpRouting.empty());
         this.maxPayloadSize = ctx.maxPayloadSize();
     }

File: microprofile/websocket/src/test/java/io/helidon/microprofile/tyrus/EchoClient.java
Patch:
@@ -36,7 +36,8 @@
 import org.glassfish.tyrus.client.ClientManager;
 import org.glassfish.tyrus.container.jdk.client.JdkClientContainer;
 
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.fail;
 
 /**
@@ -91,7 +92,7 @@ public void onMessage(String message) {
                             LOGGER.log(Level.INFO, "Client OnMessage called '" + message + "'");
 
                             int index = messages.length - (int) messageLatch.getCount();
-                            assertTrue(equals.apply(messages[index], message), messages[index] + ":" + message);
+                            assertThat(messages[index] + ":" + message, equals.apply(messages[index], message), is(true));
 
                             messageLatch.countDown();
                             if (messageLatch.getCount() == 0) {

File: microprofile/websocket/src/test/java/io/helidon/microprofile/tyrus/ExtensionEndpointTest.java
Patch:
@@ -31,11 +31,11 @@
 @HelidonTest
 @AddBean(ExtensionEndpointTest.TestExtension.class)
 @AddBean(ExtensionEndpointTest.ExtensionEndpoint.class)
-class ExtensionEndpointTest extends EchoEndpointBaseTest {
+class ExtensionEndpointTest extends WebSocketBaseTest {
 
     @Test
     public void test() throws Exception {
-        URI echoUri = URI.create("ws://localhost:" + serverPort() + "/extAnnot");
+        URI echoUri = URI.create("ws://localhost:" + port() + "/extAnnot");
         EchoClient echoClient = new EchoClient(echoUri, new TestExtension());
         echoClient.echo("hi", "how are you?");
     }

File: reactive/webserver/webserver/src/main/java/io/helidon/reactive/webserver/ServerConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -543,7 +543,7 @@ public Builder backpressureBufferSize(long size) {
          * <li>PREFETCH - After first data chunk arrives, probable number of chunks needed to fill the buffer up to watermark is calculated and requested.</li>
          * <li>NONE - No backpressure is applied, Long.MAX_VALUE(unbounded) is requested from upstream.</li>
          * </ul>
-         * @param backpressureStrategy One of NONE, PREFETCH or LINEAR, default is LINEAR
+         * @param backpressureStrategy One of NONE, PREFETCH, LINEAR or AUTO_FLUSH, default is AUTO_FLUSH
          * @return an updated builder
          */
         @Override

File: builder/processor/src/main/java/io/helidon/builder/processor/BuilderProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -157,7 +157,8 @@ protected void process(Class<? extends Annotation> annoType,
         AnnotationAndValue builderAnnotation = BuilderTypeTools
                 .createAnnotationAndValueFromMirror(am, elementUtils).get();
         TypeName typeName = BuilderTypeTools.createTypeNameFromElement(element).orElse(null);
-        Optional<TypeInfo> typeInfo = tools.createTypeInfo(builderAnnotation, typeName, (TypeElement) element, processingEnv);
+        Optional<TypeInfo> typeInfo = tools
+                .createTypeInfo(builderAnnotation.typeName(), typeName, (TypeElement) element, processingEnv);
         if (typeInfo.isEmpty()) {
             String msg = "Nothing to process, skipping: " + element;
             LOGGER.log(System.Logger.Level.WARNING, msg);

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/Container.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -55,6 +55,7 @@ enum Type {
      *
      * @return type of container if specified
      */
+    @ConfiguredOption("PLASTIC")
     Optional<Type> type();
 
 }

File: builder/tests/builder/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
  * Helidon Builder Test module.
  */
 module io.helidon.builder.test.builder {
+    requires static jakarta.annotation;
     requires static com.fasterxml.jackson.annotation;
     requires static io.helidon.config.metadata;
 

File: builder/tests/builder/src/test/java/io/helidon/builder/test/PickleBarrelTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,6 +50,6 @@ void testIt() {
 
         PickleBarrel pickleBarrel = pickleBarrelBuilder.addPickle(pickle).id("123").build();
         assertThat(pickleBarrel.toString(),
-               equalTo("PickleBarrel(id=123, type=Optional.empty, pickles=[Pickle(type=DILL, size=Optional[MEDIUM])])"));
+               equalTo("PickleBarrel(id=123, type=Optional[PLASTIC], pickles=[Pickle(type=DILL, size=Optional[MEDIUM])])"));
     }
 }

File: builder/tests/nodeps/src/main/java/io/helidon/builder/test/nodeps/NoDepsInterceptedBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,8 @@
  */
 @Builder(requireLibraryDependencies = false,
          interceptor = NoDepsBeanBuilderInterceptor.class,
-         interceptorCreateMethod = "create")
+         interceptorCreateMethod = "create",
+         includeGeneratedAnnotation = false)
 public interface NoDepsInterceptedBean {
 
     /**

File: pico/tools/src/main/java/io/helidon/pico/tools/ModuleInfoDescriptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -136,7 +136,7 @@ enum Ordering {
      *
      * @return the ordering
      */
-    @ConfiguredOption("Ordering.NATURAL")
+    @ConfiguredOption("NATURAL")
     Ordering ordering();
 
     /**

File: reactive/webserver/webserver/src/main/java/io/helidon/reactive/webserver/Request.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,7 +45,6 @@
 /**
  * The basic abstract implementation of {@link ServerRequest}.
  */
-@SuppressWarnings("deprecation")
 abstract class Request implements ServerRequest {
 
     private static final String TRACING_CONTENT_READ_NAME = "content-read";
@@ -75,7 +74,7 @@ abstract class Request implements ServerRequest {
         this.webServer = webServer;
         this.headers = headers;
         this.context = Contexts.context().orElseGet(() -> Context.create(webServer.context()));
-        this.queryParams = UriQuery.create(req.uri().getRawQuery());
+        this.queryParams = UriQuery.create(req.uri());
         this.eventListener = new MessageBodyEventListener();
         MessageBodyReaderContext readerContext = MessageBodyReaderContext
                 .create(webServer.readerContext(), eventListener, headers, headers.contentType());

File: security/integration/jersey-client/src/main/java/io/helidon/security/integration/jersey/client/ClientSecurityFilter.java
Patch:
@@ -121,7 +121,7 @@ private void outboundSecurity(ClientRequestContext requestContext, SecurityConte
                     .path(requestContext.getUri().getPath())
                     .targetUri(requestContext.getUri())
                     .headers(requestContext.getStringHeaders())
-                    .queryParams(UriQuery.create(requestContext.getUri().getQuery()));
+                    .queryParams(UriQuery.create(requestContext.getUri()));
 
             EndpointConfig.Builder outboundEp = securityContext.endpointConfig().derive();
 

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SecurityFilterCommon.java
Patch:
@@ -376,7 +376,7 @@ protected FilterContext configureContext(FilterContext context,
         context.setHeaders(requestContext.getHeaders());
         context.setTargetUri(requestContext.getUriInfo().getRequestUri());
         context.setResourcePath(context.getTargetUri().getPath());
-        context.setQueryParams(UriQuery.create(uriInfo.getRequestUri().getQuery()));
+        context.setQueryParams(UriQuery.create(uriInfo.getRequestUri()));
 
         context.setJerseyRequest((ContainerRequest) requestContext);
 

File: common/features/processor/src/main/java/io/helidon/common/features/processor/FeatureHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -110,12 +110,12 @@ private void processModule(Element moduleElement) {
                 annotation.getElementValues()
                         .forEach((method, value) -> {
                             if (method.getSimpleName().contentEquals("since")) {
-                                descriptor.since((String) value.getValue());
+                                descriptor.deprecatedSince((String) value.getValue());
                             }
                         });
                 if (descriptor.noDeprecatedSince()) {
                     messager.printMessage(Diagnostic.Kind.ERROR, "Failed to process feature metadata annotation processor. "
-                            + " Module " + moduleName + " has @Deprecated without since. Since must be defined");
+                            + " Module " + moduleName + " has @Deprecated without since. Since must be defined.");
                     throw new IllegalStateException("Deprecated without since in module " + moduleName);
                 }
                 break;

File: microprofile/bundles/helidon-microprofile/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
     requires transitive io.helidon.microprofile.metrics;
     requires transitive io.helidon.microprofile.faulttolerance;
     requires transitive io.helidon.microprofile.jwt.auth;
-    requires transitive io.helidon.microprofile.tracing;
     requires transitive io.helidon.microprofile.restclient;
     requires transitive io.helidon.microprofile.openapi;
     requires transitive jakarta.json.bind;

File: microprofile/tracing/src/main/java/module-info.java
Patch:
@@ -25,8 +25,9 @@
 @Feature(value = "Tracing",
         description = "MicroProfile tracing spec implementation",
         in = HelidonFlavor.MP,
-        path = "Tracing"
-)
+        path = "Tracing",
+        since = "1.0.0")
+@Deprecated(since="4.0.0", forRemoval = true)
 module io.helidon.microprofile.tracing {
     requires static io.helidon.common.features.api;
 

File: tests/integration/oidc/src/test/java/io/helidon/tests/integration/oidc/TenantIdentificationIT.java
Patch:
@@ -28,7 +28,6 @@
 import io.helidon.microprofile.tests.junit5.AddConfig;
 import io.helidon.microprofile.tests.junit5.HelidonTest;
 import io.helidon.security.providers.oidc.common.OidcConfig;
-import io.helidon.security.providers.oidc.common.spi.TenantConfigFinder;
 
 import jakarta.ws.rs.client.WebTarget;
 import jakarta.ws.rs.core.HttpHeaders;
@@ -38,6 +37,7 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 
@@ -88,8 +88,8 @@ void testDomainTenantId(WebTarget webTarget) {
     void testNoneTenantId(WebTarget webTarget) {
         try (Response response = webTarget.property(ClientProperties.FOLLOW_REDIRECTS, false).path("/test").request().get()) {
             String redirectUri = queryParamValue((String) response.getHeaders().getFirst(HttpHeaders.LOCATION), "redirect_uri");
-            String tenantName = queryParamValue(redirectUri, OidcConfig.DEFAULT_TENANT_PARAM_NAME);
-            assertThat(tenantName, is(TenantConfigFinder.DEFAULT_TENANT_ID));
+            URI uri = URI.create(redirectUri);
+            assertThat(uri.getRawQuery(), nullValue());
         }
     }
 

File: nima/testing/junit5/webserver/src/main/java/io/helidon/nima/testing/junit5/webserver/DirectClientConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -159,6 +159,7 @@ private void startServer() {
 
         ServerConnection connection = Http1ConnectionProvider.builder()
                 .build()
+                .create()
                 .connection(ctx);
         executorService.submit(() -> {
             try {

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/LoomServer.java
Patch:
@@ -35,7 +35,6 @@
 import io.helidon.common.Version;
 import io.helidon.common.context.Context;
 import io.helidon.nima.webserver.http.DirectHandlers;
-import io.helidon.nima.webserver.spi.ServerConnectionProvider;
 
 class LoomServer implements WebServer {
     private static final System.Logger LOGGER = System.getLogger(LoomServer.class.getName());
@@ -59,7 +58,7 @@ class LoomServer implements WebServer {
                                                                 builder.mediaContext(),
                                                                 builder.contentEncodingContext());
 
-        List<ServerConnectionProvider> connectionProviders = builder.connectionProviders();
+        List<ServerConnectionSelector> connectionProviders = builder.connectionProviders();
 
         Map<String, Router> routers = builder.routers();
         Map<String, ListenerConfiguration.Builder> sockets = builder.socketBuilders();

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ServerListener.java
Patch:
@@ -42,7 +42,6 @@
 import io.helidon.common.socket.TlsSocket;
 import io.helidon.nima.common.tls.Tls;
 import io.helidon.nima.webserver.http.DirectHandlers;
-import io.helidon.nima.webserver.spi.ServerConnectionProvider;
 
 import static java.lang.System.Logger.Level.ERROR;
 import static java.lang.System.Logger.Level.INFO;
@@ -72,7 +71,7 @@ class ServerListener {
     private volatile ServerSocket serverSocket;
 
     ServerListener(ServerContext serverContext,
-                   List<ServerConnectionProvider> connectionProviders,
+                   List<ServerConnectionSelector> connectionProviders,
                    String socketName,
                    ListenerConfiguration listenerConfig,
                    Router router,

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/spi/ServerConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 public interface ServerConnection {
     /**
      * Start handling the connection. Data is provided through
-     * {@link ServerConnectionProvider#connection(io.helidon.nima.webserver.ConnectionContext)}.
+     * {@link io.helidon.nima.webserver.ServerConnectionSelector#connection(io.helidon.nima.webserver.ConnectionContext)}.
      *
      * @throws InterruptedException to interrupt any waiting state and terminate this connection
      */

File: nima/websocket/webserver/src/main/java/io/helidon/nima/websocket/webserver/WsConnection.java
Patch:
@@ -35,7 +35,7 @@
 import io.helidon.nima.websocket.WsOpCode;
 import io.helidon.nima.websocket.WsSession;
 
-import static io.helidon.nima.websocket.webserver.WsUpgradeProvider.PROTOCOL;
+import static io.helidon.nima.websocket.webserver.WsUpgrader.PROTOCOL;
 
 /**
  * WebSocket connection, server side session implementation.

File: tests/integration/dbclient/appl/src/main/java/io/helidon/tests/integration/dbclient/appl/dbmapper/DbClientMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,13 +17,13 @@
 
 import java.util.Optional;
 
-import jakarta.json.JsonObject;
-
 import io.helidon.reactive.dbclient.DbMapper;
 import io.helidon.reactive.dbclient.spi.DbMapperProvider;
 import io.helidon.tests.integration.dbclient.appl.model.Pokemon;
 import io.helidon.tests.integration.dbclient.appl.model.RangePoJo;
 
+import jakarta.json.JsonObject;
+
 /**
  * Provides DB Client mappers.
  */

File: tests/integration/dbclient/common/src/main/java/io/helidon/tests/integration/dbclient/common/tests/simple/SimpleGetIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,8 +23,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.tests.integration.dbclient.common.AbstractIT.DB_CLIENT;
-import static io.helidon.tests.integration.dbclient.common.AbstractIT.POKEMONS;
 import static io.helidon.tests.integration.dbclient.common.utils.Utils.verifyPokemon;
 
 /**

File: common/http/src/main/java/io/helidon/common/http/HttpPrologue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -248,7 +248,7 @@ public boolean equals(Object obj) {
 
     @Override
     public String toString() {
-        return "HttpPrologueRecord["
+        return "HttpPrologue["
                 + "protocol=" + protocol + ", "
                 + "protocolVersion=" + protocolVersion + ", "
                 + "method=" + method + ", "

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/MaxPayloadSizeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -77,10 +77,9 @@ static void startServer(HttpRules rules) {
     @Test
     void testContentLengthExceeded() {
         try (Http1ClientResponse response = client.method(Http.Method.POST)
-                .header(Header.CONTENT_LENGTH, "512")
                 .path("/maxpayload")
                 .header(HeaderValues.CONTENT_TYPE_OCTET_STREAM)
-                .request()) {
+                .submit(new byte[512])) {
             assertThat(response.status(), is(Http.Status.REQUEST_ENTITY_TOO_LARGE_413));
             assertThat(response.headers(), hasHeader(HeaderValues.CONNECTION_CLOSE));
         }

File: nima/websocket/websocket/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2022, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@
     requires static io.helidon.common.features.api;
 
     requires transitive io.helidon.common.buffers;
+    requires transitive io.helidon.common.http;
 
     exports io.helidon.nima.websocket;
 }

File: metrics/api/src/main/java/io/helidon/metrics/api/MetricsSettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2023 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,12 +33,12 @@
 public interface MetricsSettings {
 
     /**
-     * Returns default metrics settings based on default config.
+     * Returns default metrics settings based on the {@code metrics} section of the default config.
      *
      * @return new settings reflecting the default config
      */
     static MetricsSettings create() {
-        return create(Config.create());
+        return create(Config.create().get(Builder.METRICS_CONFIG_KEY));
     }
 
     /**

File: nima/fault-tolerance/src/test/java/io/helidon/nima/faulttolerance/AsyncTest.java
Patch:
@@ -22,9 +22,9 @@
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.endsWith;
+import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.startsWith;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.CoreMatchers.is;
 
 class AsyncTest {
     private static final long WAIT_TIMEOUT_MILLIS = 2000;

File: tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/TracingPropagationTest.java
Patch:
@@ -33,6 +33,7 @@
 import io.opentracing.mock.MockTracer;
 import io.opentracing.tag.Tags;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -47,6 +48,7 @@ class TracingPropagationTest {
     private static final Duration TIMEOUT = Duration.ofSeconds(10);
 
     @Test
+    @Disabled // intermittently failing on pipeline, issue 5754
     void testTracingSuccess() throws ExecutionException, InterruptedException {
         MockTracer mockTracer = new MockTracer();
 

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http/HttpRouting.java
Patch:
@@ -412,6 +412,7 @@ public Void call() throws Exception {
             RoutingResult result = doRoute(ctx, request, response);
 
             if (result == RoutingResult.FINISH) {
+                response.commit();
                 return null;
             }
             if (result == RoutingResult.NONE) {
@@ -434,6 +435,7 @@ public Void call() throws Exception {
 
             // finished and done
             if (result == RoutingResult.FINISH) {
+                response.commit();
                 return null;
             }
             throw new NotFoundException("Endpoint not found");

File: tests/apps/bookstore/bookstore-mp/src/test/java/io/helidon/tests/apps/bookstore/mp/BookResourceTest.java
Patch:
@@ -54,7 +54,6 @@ void testBooks() {
                 .request()
                 .get();
         assertEquals(Response.Status.OK.getStatusCode(), res.getStatus());
-        assertNotNull(res.getHeaderString("content-length"));
 
         assertBookStoreSize(1);
 
@@ -88,7 +87,6 @@ void testBooks2() {
                 .request()
                 .get();
         assertEquals(Response.Status.OK.getStatusCode(), res.getStatus());
-        assertNotNull(res.getHeaderString("content-length"));
 
         assertBookStoreSize(1);
 

File: nima/webserver/webserver/src/test/java/io/helidon/nima/webserver/http/ErrorHandlersTest.java
Patch:
@@ -148,9 +148,10 @@ private void testNoHandler(ErrorHandlers handlers, Exception e, String message)
     }
 
     private void testHandler(ErrorHandlers handlers, Exception e, String message) {
+        ConnectionContext ctx = mock(ConnectionContext.class);
         ServerRequest req = mock(ServerRequest.class);
         ServerResponse res = mock(ServerResponse.class);
-        ConnectionContext ctx = mock(ConnectionContext.class);
+        when(res.reset()).thenReturn(true);
 
         handlers.runWithErrorHandling(ctx, req, res, () -> {
             throw e;

File: nima/webserver/access-log/src/main/java/module-info.java
Patch:
@@ -31,6 +31,7 @@
     requires java.logging;
 
     requires io.helidon.nima.webserver;
+    requires io.helidon.common.security;
 
     exports io.helidon.nima.webserver.accesslog;
 }
\ No newline at end of file

File: builder/builder/src/main/java/io/helidon/builder/AttributeVisitor.java
Patch:
@@ -22,11 +22,13 @@
 /**
  * A functional interface that can be used to visit all attributes of this type.
  * <p>
- * This type is used when {@link Builder#requireLibraryDependencies()} is used.
+ * This type is used when {@link Builder#requireLibraryDependencies()} is used. When it is turned off, however, an equivalent
+ * type will be code-generated into each generated bean.
  *
  * @param <T> type of the user defined context this attribute visitor supports
  */
 @FunctionalInterface
+// important note: this class is also code generated - please keep this in synch with generated code
 public interface AttributeVisitor<T> {
 
     /**

File: builder/processor-tools/src/main/java/io/helidon/builder/processor/tools/GenerateVisitorSupport.java
Patch:
@@ -34,6 +34,7 @@ static void appendExtraInnerClasses(StringBuilder builder,
                 && !ctx.requireLibraryDependencies()) {
             builder.append("\n\n\t/**\n"
                                    + "\t * A functional interface that can be used to visit all attributes of this type.\n"
+                                   + "\t *\n"
                                    + "\t * @param <T> type of user defined context"
                                    + "\t */\n");
             builder.append("\t@FunctionalInterface\n"

File: builder/tests/builder/src/main/java/io/helidon/builder/test/testsubjects/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Test subjects for the Pico Builder.
+ * Test subjects for the Builder.
  */
 package io.helidon.builder.test.testsubjects;

File: pico/builder-config/builder-config/src/main/java/io/helidon/pico/builder/config/spi/ConfigBeanBase.java
Patch:
@@ -31,6 +31,7 @@ public abstract class ConfigBeanBase implements ConfigBeanCommon {
 
     /**
      * Protected constructor for initializing the generated config bean instance variables.
+     *
      * @param b             the builder
      * @param instanceId    the instance id
      */

File: pico/builder-config/builder-config/src/main/java/io/helidon/pico/builder/config/spi/DefaultConfigResolver.java
Patch:
@@ -31,7 +31,7 @@
  * The default implementation of {@link ConfigResolver} simply resolves against {@link io.helidon.common.config.Config} directly.
  */
 @Singleton
-@Weight(Weighted.DEFAULT_WEIGHT - 1)
+@Weight(Weighted.DEFAULT_WEIGHT - 1)   // allow all other creators to take precedence over us...
 public class DefaultConfigResolver implements ConfigResolver, ConfigResolverProvider {
 
     /**

File: common/http/src/main/java/io/helidon/common/http/ForbiddenException.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.common.http;
 
 /**
- * A runtime exception indicating a {@link io.helidon.common.http.Http.Status#FORBIDDEN_403 not found}.
+ * A runtime exception indicating a {@link io.helidon.common.http.Http.Status#FORBIDDEN_403 forbidden}.
  */
 public class ForbiddenException extends HttpException {
 

File: examples/nima/quickstart-standalone/src/main/java/io/helidon/examples/nima/quickstart/standalone/StandaloneQuickstartMain.java
Patch:
@@ -20,7 +20,7 @@
 import io.helidon.health.checks.DiskSpaceHealthCheck;
 import io.helidon.health.checks.HeapMemoryHealthCheck;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.observe.ObserveSupport;
+import io.helidon.nima.observe.ObserveFeature;
 import io.helidon.nima.observe.health.HealthFeature;
 import io.helidon.nima.observe.health.HealthObserveProvider;
 import io.helidon.nima.webserver.WebServer;
@@ -56,7 +56,7 @@ public static void main(String[] args) {
      * Updates HTTP Routing.
      */
     static void routing(HttpRouting.Builder routing) {
-        ObserveSupport observe = ObserveSupport.builder()
+        ObserveFeature observe = ObserveFeature.builder()
                 .useSystemServices(true)
                 .addProvider(HealthObserveProvider.create(HealthFeature.builder()
                                                                   .useSystemServices(false)
@@ -69,6 +69,6 @@ static void routing(HttpRouting.Builder routing) {
         GreetService greetService = new GreetService();
 
         routing.register("/greet", greetService)
-                .update(observe);
+                .addFeature(observe);
     }
 }

File: examples/nima/quickstart/src/main/java/io/helidon/examples/nima/quickstart/QuickstartMain.java
Patch:
@@ -20,7 +20,7 @@
 import io.helidon.health.checks.DiskSpaceHealthCheck;
 import io.helidon.health.checks.HeapMemoryHealthCheck;
 import io.helidon.logging.common.LogConfig;
-import io.helidon.nima.observe.ObserveSupport;
+import io.helidon.nima.observe.ObserveFeature;
 import io.helidon.nima.observe.health.HealthFeature;
 import io.helidon.nima.observe.health.HealthObserveProvider;
 import io.helidon.nima.webserver.WebServer;
@@ -56,7 +56,7 @@ public static void main(String[] args) {
      * Updates HTTP Routing.
      */
     static void routing(HttpRouting.Builder routing) {
-        ObserveSupport observe = ObserveSupport.builder()
+        ObserveFeature observe = ObserveFeature.builder()
                 .useSystemServices(false)
                 .addProvider(HealthObserveProvider.create(HealthFeature.builder()
                                                                   .useSystemServices(false)
@@ -69,6 +69,6 @@ static void routing(HttpRouting.Builder routing) {
         GreetService greetService = new GreetService();
 
         routing.register("/greet", greetService)
-                .update(observe);
+                .addFeature(observe);
     }
 }

File: examples/security/jersey/src/main/java/io/helidon/security/examples/jersey/JerseyBuilderMain.java
Patch:
@@ -27,7 +27,7 @@
 import io.helidon.reactive.webserver.WebServer;
 import io.helidon.reactive.webserver.jersey.JerseySupport;
 import io.helidon.security.Security;
-import io.helidon.security.integration.jersey.SecurityFeature;
+import io.helidon.security.integration.jersey.JerseySecurityFeature;
 import io.helidon.security.providers.abac.AbacProvider;
 import io.helidon.security.providers.common.OutboundTarget;
 import io.helidon.security.providers.httpauth.HttpBasicAuthProvider;
@@ -79,8 +79,8 @@ static WebServer getHttpServer() {
         return server;
     }
 
-    private static SecurityFeature buildSecurity() {
-        return new SecurityFeature(
+    private static JerseySecurityFeature buildSecurity() {
+        return new JerseySecurityFeature(
                 Security.builder()
                         // add the security provider to use
                         .addProvider(HttpBasicAuthProvider.builder()

File: examples/security/jersey/src/main/java/io/helidon/security/examples/jersey/JerseyConfigMain.java
Patch:
@@ -21,7 +21,7 @@
 import io.helidon.reactive.webserver.WebServer;
 import io.helidon.reactive.webserver.jersey.JerseySupport;
 import io.helidon.security.Security;
-import io.helidon.security.integration.jersey.SecurityFeature;
+import io.helidon.security.integration.jersey.JerseySecurityFeature;
 
 import jakarta.ws.rs.WebApplicationException;
 import jakarta.ws.rs.core.Response;
@@ -36,12 +36,12 @@ public class JerseyConfigMain {
     private JerseyConfigMain() {
     }
 
-    private static SecurityFeature buildSecurity() {
+    private static JerseySecurityFeature buildSecurity() {
         Config config = Config.create().get("security");
 
         Security security = Security.create(config);
 
-        return SecurityFeature.builder(security)
+        return JerseySecurityFeature.builder(security)
                 .config(config.get("jersey"))
                 .build();
     }

File: examples/security/jersey/src/main/java/io/helidon/security/examples/jersey/JerseyProgrammaticMain.java
Patch:
@@ -21,7 +21,7 @@
 import io.helidon.reactive.webserver.WebServer;
 import io.helidon.reactive.webserver.jersey.JerseySupport;
 import io.helidon.security.Security;
-import io.helidon.security.integration.jersey.SecurityFeature;
+import io.helidon.security.integration.jersey.JerseySecurityFeature;
 
 import jakarta.ws.rs.WebApplicationException;
 import jakarta.ws.rs.core.Response;
@@ -37,8 +37,8 @@ public final class JerseyProgrammaticMain {
     private JerseyProgrammaticMain() {
     }
 
-    private static SecurityFeature buildSecurity() {
-        return new SecurityFeature(Security.create(Config.create().get("security")));
+    private static JerseySecurityFeature buildSecurity() {
+        return new JerseySecurityFeature(Security.create(Config.create().get("security")));
     }
 
     private static JerseySupport buildJersey() {

File: microprofile/access-log/src/main/java/io/helidon/microprofile/accesslog/AccessLogCdiExtension.java
Patch:
@@ -18,7 +18,7 @@
 import io.helidon.config.Config;
 import io.helidon.microprofile.cdi.RuntimeStart;
 import io.helidon.microprofile.server.ServerCdiExtension;
-import io.helidon.nima.webserver.accesslog.AccessLogFilter;
+import io.helidon.nima.webserver.accesslog.AccessLogFeature;
 
 import jakarta.annotation.Priority;
 import jakarta.enterprise.event.Observes;
@@ -37,6 +37,6 @@ private void setUpAccessLog(@Observes @Priority(PLATFORM_BEFORE + 10) @RuntimeSt
 
         beanManager.getExtension(ServerCdiExtension.class)
                 .serverRoutingBuilder()
-                .addFilter(AccessLogFilter.create(alConfig));
+                .addFeature(AccessLogFeature.create(alConfig));
     }
 }

File: microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java
Patch:
@@ -41,7 +41,7 @@
 import io.helidon.microprofile.cdi.RuntimeStart;
 import io.helidon.nima.webserver.KeyPerformanceIndicatorSupport;
 import io.helidon.nima.webserver.WebServer;
-import io.helidon.nima.webserver.context.ContextFilter;
+import io.helidon.nima.webserver.context.ContextFeature;
 import io.helidon.nima.webserver.http.HttpRouting;
 import io.helidon.nima.webserver.http.HttpService;
 import io.helidon.nima.webserver.staticcontent.StaticContentSupport;
@@ -319,8 +319,8 @@ private void startServer(@Observes @Priority(PLATFORM_AFTER + 100) @Initialized(
         registerJaxRsApplications(beanManager);
 
         // support for Helidon common Context
-        routingBuilder.addFilter(ContextFilter.create());
-        namedRoutings.forEach((name, value) -> value.addFilter(ContextFilter.create()));
+        routingBuilder.addFeature(ContextFeature.create());
+        namedRoutings.forEach((name, value) -> value.addFeature(ContextFeature.create()));
 
         // start the webserver
         serverBuilder.routerBuilder(WebServer.DEFAULT_SOCKET_NAME).addRouting(routingBuilder.build());

File: nima/http2/webserver/src/main/java/io/helidon/nima/http2/webserver/Http2Stream.java
Patch:
@@ -364,6 +364,7 @@ private void handle() {
             //            }
             ContentDecoder decoder = ContentDecoder.NO_OP;
             Http2ServerRequest request = Http2ServerRequest.create(ctx,
+                                                                   routing.security(),
                                                                    prologue,
                                                                    headers,
                                                                    decoder,

File: nima/observe/config/src/main/java/io/helidon/nima/observe/config/ConfigService.java
Patch:
@@ -31,6 +31,7 @@
 import io.helidon.nima.http.media.jsonp.JsonpMediaSupportProvider;
 import io.helidon.nima.webserver.http.HttpRules;
 import io.helidon.nima.webserver.http.HttpService;
+import io.helidon.nima.webserver.http.SecureHandler;
 import io.helidon.nima.webserver.http.ServerRequest;
 import io.helidon.nima.webserver.http.ServerResponse;
 
@@ -67,7 +68,8 @@ public static HttpService create(Config config) {
 
     @Override
     public void routing(HttpRules rules) {
-        rules.get("/profile", this::profile)
+        rules.any(SecureHandler.authorize("nima-observe"))
+                .get("/profile", this::profile)
                 .get("/values", this::values)
                 .get("/values/{name}", this::value);
     }

File: nima/observe/health/src/main/java/io/helidon/nima/observe/health/HealthObserveProvider.java
Patch:
@@ -53,7 +53,7 @@ public static ObserveProvider create() {
 
     /**
      * Create using a configured observer.
-     * In this case configuration provided by the {@link io.helidon.nima.observe.ObserveSupport} is ignored except for
+     * In this case configuration provided by the {@link io.helidon.nima.observe.ObserveFeature} is ignored except for
      * the reserved option {@code endpoint}).
      *
      * @param service service to use

File: nima/observe/info/src/main/java/module-info.java
Patch:
@@ -18,7 +18,9 @@
 import io.helidon.nima.observe.spi.ObserveProvider;
 
 /**
- * Observability features.
+ * Observe info module.
+ * Info allows configuration of custom properties to be available to users.
+ * Info endpoint is unprotected by default and is available at {@code /observe/info} (configurable).
  */
 module io.helidon.nima.observe.info {
     requires io.helidon.config;

File: nima/observe/metrics/src/main/java/io/helidon/nima/observe/metrics/MetricsObserveProvider.java
Patch:
@@ -52,7 +52,7 @@ public static ObserveProvider create() {
 
     /**
      * Create using a configured observer.
-     * In this case configuration provided by the {@link io.helidon.nima.observe.ObserveSupport} is ignored except for
+     * In this case configuration provided by the {@link io.helidon.nima.observe.ObserveFeature} is ignored except for
      * the reserved option {@code endpoint}).
      *
      * @param service service to use

File: nima/tests/integration/observe/health/src/test/java/io/helidon/nima/tests/integration/observe/health/ObserveHealthTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import io.helidon.common.http.Http;
 import io.helidon.common.http.Http.HeaderValues;
-import io.helidon.nima.observe.ObserveSupport;
-import io.helidon.nima.observe.health.HealthObserveProvider;
+import io.helidon.nima.observe.ObserveFeature;
 import io.helidon.nima.observe.health.HealthFeature;
+import io.helidon.nima.observe.health.HealthObserveProvider;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
 import io.helidon.nima.webclient.http1.Http1Client;
@@ -49,7 +49,7 @@ class ObserveHealthTest {
     @SetUpRoute
     static void routing(HttpRouting.Builder routing) {
         healthCheck = new MyHealthCheck();
-        routing.update(ObserveSupport.create(HealthObserveProvider.create(HealthFeature.create(healthCheck))));
+        routing.addFeature(ObserveFeature.create(HealthObserveProvider.create(HealthFeature.create(healthCheck))));
     }
 
     @BeforeEach

File: nima/tests/integration/websocket/server/src/main/java/io/helidon/nima/tests/integration/websocket/webserver/WsConversationClient.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.nima.tests.integration.websocket.webserver;

File: nima/tests/integration/websocket/server/src/main/java/io/helidon/nima/tests/integration/websocket/webserver/WsConversationService.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.nima.tests.integration.websocket.webserver;

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/HostLogEntry.java
Patch:
@@ -27,7 +27,7 @@ private HostLogEntry(Builder builder) {
      * Create a new host log entry.
      *
      * @return a new access log entry for host
-     * @see AccessLogFilter.Builder#add(AccessLogEntry)
+     * @see AccessLogFeature.Builder#add(AccessLogEntry)
      */
     public static HostLogEntry create() {
         return builder().build();

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/RequestLineLogEntry.java
Patch:
@@ -31,7 +31,7 @@ private RequestLineLogEntry(Builder builder) {
      * Create a new request line entry.
      *
      * @return a new access log entry for request line
-     * @see AccessLogFilter.Builder#add(AccessLogEntry)
+     * @see AccessLogFeature.Builder#add(AccessLogEntry)
      */
     public static RequestLineLogEntry create() {
         return builder().build();

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/SizeLogEntry.java
Patch:
@@ -29,7 +29,7 @@ private SizeLogEntry(Builder builder) {
      * Create a new size log entry instance.
      *
      * @return a new access log entry for entity size
-     * @see AccessLogFilter.Builder#add(AccessLogEntry)
+     * @see AccessLogFeature.Builder#add(AccessLogEntry)
      */
     public static SizeLogEntry create() {
         return builder().build();

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/StatusLogEntry.java
Patch:
@@ -27,7 +27,7 @@ private StatusLogEntry(Builder builder) {
      * Create a new status log entry.
      *
      * @return a new access log entry for HTTP status
-     * @see AccessLogFilter.Builder#add(AccessLogEntry)
+     * @see AccessLogFeature.Builder#add(AccessLogEntry)
      */
     public static StatusLogEntry create() {
         return builder().build();

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/TimestampLogEntry.java
Patch:
@@ -35,7 +35,7 @@ private TimestampLogEntry(Builder builder) {
      * Create a new Timestamp log entry.
      *
      * @return a new access log entry for Timestamp
-     * @see AccessLogFilter.Builder#add(AccessLogEntry)
+     * @see AccessLogFeature.Builder#add(AccessLogEntry)
      */
     public static TimestampLogEntry create() {
         return builder().build();

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/UserIdLogEntry.java
Patch:
@@ -28,7 +28,7 @@ private UserIdLogEntry() {
      * Create a new access log entry for user id.
      *
      * @return an entry that always considers user id to be undefined
-     * @see AccessLogFilter.Builder#add(AccessLogEntry)
+     * @see AccessLogFeature.Builder#add(AccessLogEntry)
      * @see UserLogEntry
      */
     public static UserIdLogEntry create() {

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/UserLogEntry.java
Patch:
@@ -35,7 +35,7 @@ private UserLogEntry(Builder builder) {
      * Create a new user log entry.
      *
      * @return a new access log entry for username
-     * @see AccessLogFilter.Builder#add(AccessLogEntry)
+     * @see AccessLogFeature.Builder#add(AccessLogEntry)
      */
     public static UserLogEntry create() {
         return builder().build();

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/package-info.java
Patch:
@@ -17,6 +17,6 @@
 /**
  * Access log support for Helidon Server.
  *
- * @see io.helidon.nima.webserver.accesslog.AccessLogFilter
+ * @see io.helidon.nima.webserver.accesslog.AccessLogFeature
  */
 package io.helidon.nima.webserver.accesslog;

File: nima/webserver/context/src/main/java/io/helidon/nima/webserver/context/package-info.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * Integration of {@link io.helidon.common.context.Context} with {@link io.helidon.nima.webserver.WebServer}.
- * Register {@link io.helidon.nima.webserver.context.ContextFilter} with
+ * Register {@link io.helidon.nima.webserver.context.ContextFeature} with
  * {@link io.helidon.nima.webserver.http.HttpRouting.Builder#addFilter(io.helidon.nima.webserver.http.Filter) routing builder}.
  * This will create a request specific context accessible through {@link io.helidon.common.context.Contexts#context()}.
  */

File: nima/webserver/context/src/main/java/module-info.java
Patch:
@@ -16,13 +16,14 @@
 
 /**
  * Integration of {@link io.helidon.common.context.Context} with {@link io.helidon.nima.webserver.WebServer}.
- * Register {@link io.helidon.nima.webserver.context.ContextFilter} with
- * {@link io.helidon.nima.webserver.http.HttpRouting.Builder#addFilter(io.helidon.nima.webserver.http.Filter) routing builder}.
+ * Register {@link io.helidon.nima.webserver.context.ContextFeature} with
+ * {@link io.helidon.nima.webserver.http.HttpRouting.Builder#addFeature(java.util.function.Supplier)}.
  * This will create a request specific context accessible through {@link io.helidon.common.context.Contexts#context()}.
  */
 module io.helidon.nima.webserver.context {
     requires io.helidon.common.context;
     requires io.helidon.common;
+    requires transitive io.helidon.config;
     requires io.helidon.nima.webserver;
 
     exports io.helidon.nima.webserver.context;

File: nima/webserver/context/src/test/java/io/helidon/nima/webserver/context/ContextFeatureIT.java
Patch:
@@ -20,8 +20,8 @@
 import io.helidon.nima.webclient.http1.Http1Client;
 
 @ServerTest
-class ContextFilterIT extends ContextFilterBase{
-    ContextFilterIT(Http1Client client) {
+class ContextFeatureIT extends ContextFeatureBase {
+    ContextFeatureIT(Http1Client client) {
         super(client);
     }
 }
\ No newline at end of file

File: nima/webserver/context/src/test/java/io/helidon/nima/webserver/context/ContextFeatureTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.helidon.nima.testing.junit5.webserver.RoutingTest;
 
 @RoutingTest
-class ContextFilterTest extends ContextFilterBase {
-    ContextFilterTest(DirectClient client) {
+class ContextFeatureTest extends ContextFeatureBase {
+    ContextFeatureTest(DirectClient client) {
         super(client);
     }
 }
\ No newline at end of file

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http/ErrorHandler.java
Patch:
@@ -27,6 +27,8 @@
 public interface ErrorHandler<T extends Throwable> {
     /**
      * Error handling consumer.
+     * Do not throw an exception from an error handler, it would make this error handler invalid and the exception would be
+     * ignored.
      *
      * @param req the server request
      * @param res the server response

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http/ServerResponseBase.java
Patch:
@@ -61,8 +61,8 @@ public abstract class ServerResponseBase<T extends ServerResponseBase<T>> implem
      * @param request server request
      */
     protected ServerResponseBase(ConnectionContext ctx, ServerRequest request) {
-        this.contentEncodingContext = ctx.contentEncodingContext();
-        this.mediaContext = ctx.mediaContext();
+        this.contentEncodingContext = ctx.serverContext().contentEncodingContext();
+        this.mediaContext = ctx.serverContext().mediaContext();
         this.requestPrologue = request.prologue();
         this.requestHeaders = request.headers();
     }

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1Connection.java
Patch:
@@ -243,7 +243,7 @@ private void route(HttpPrologue prologue, WritableHeaders<?> headers) {
         requestId++;
 
         if (entity == EntityStyle.NONE) {
-            Http1ServerRequest request = Http1ServerRequest.create(ctx, prologue, headers, requestId);
+            Http1ServerRequest request = Http1ServerRequest.create(ctx, routing.security(), prologue, headers, requestId);
             Http1ServerResponse response = new Http1ServerResponse(ctx,
                                                                    sendListener,
                                                                    writer,
@@ -292,6 +292,7 @@ private void route(HttpPrologue prologue, WritableHeaders<?> headers) {
 
         CountDownLatch entityReadLatch = new CountDownLatch(1);
         Http1ServerRequest request = Http1ServerRequest.create(ctx,
+                                                               routing.security(),
                                                                prologue,
                                                                ServerRequestHeaders.create(headers),
                                                                decoder,

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1ServerRequestNoEntity.java
Patch:
@@ -21,13 +21,14 @@
 import io.helidon.nima.http.media.ReadableEntity;
 import io.helidon.nima.http.media.ReadableEntityBase;
 import io.helidon.nima.webserver.ConnectionContext;
+import io.helidon.nima.webserver.http.HttpSecurity;
 
 class Http1ServerRequestNoEntity extends Http1ServerRequest {
     Http1ServerRequestNoEntity(ConnectionContext ctx,
-                               HttpPrologue prologue,
+                               HttpSecurity security, HttpPrologue prologue,
                                Headers headers,
                                int requestId) {
-        super(ctx, prologue, headers, requestId);
+        super(ctx, security, prologue, headers, requestId);
     }
 
     @Override

File: nima/webserver/webserver/src/main/java/module-info.java
Patch:
@@ -32,6 +32,7 @@
     requires transitive io.helidon.nima.common.tls;
     requires transitive io.helidon.config;
     requires transitive io.helidon.common.context;
+    requires transitive io.helidon.common.security;
     requires io.helidon.logging.common;
 
     requires java.management;

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/FeatureConfig.java
Patch:
@@ -51,7 +51,7 @@ class FeatureConfig {
         this.failOnFailureIfOptional = DEFAULT_ATN_FAIL_ON_FAILURE_IF_OPT;
     }
 
-    FeatureConfig(SecurityFeature.Builder builder) {
+    FeatureConfig(JerseySecurityFeature.Builder builder) {
         this.debug = builder.isDebug();
         this.authorizeAnnotatedOnly = builder.isAuthorizeAnnotatedOnly();
         this.authenticateAnnotatedOnly = builder.isAuthenticateAnnotatedOnly();

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/BindingTest.java
Patch:
@@ -75,7 +75,7 @@ public static void initClass() throws Throwable {
                                   .register(MyResource.class)
                                   .register(TestResource1.class)
                                   .register(new TestResource2())
-                                  .register(new SecurityFeature(Security.create(config.get("security"))))
+                                  .register(new JerseySecurityFeature(Security.create(config.get("security"))))
                                   .register(new ExceptionMapper<Exception>() {
                                       @Override
                                       public Response toResponse(Exception exception) {

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/DisabledSecurityTest.java
Patch:
@@ -65,7 +65,7 @@ public static void initClass() throws Throwable {
         server = WebServer.builder(Routing.builder()
                 .register(JerseySupport.builder()
                                   .register(MyResource.class)
-                                  .register(new SecurityFeature(Security.create(config.get("security"))))
+                                  .register(new JerseySecurityFeature(Security.create(config.get("security"))))
                                   .register((ExceptionMapper<Exception>) exception -> {
                                       exception.printStackTrace();
                                       return Response.serverError().build();

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/ExtractQueryParamsTest.java
Patch:
@@ -53,7 +53,7 @@ public class ExtractQueryParamsTest {
     public static void initClass() throws Throwable {
         Config config = Config.create();
         Security security = Security.create(config.get("security"));
-        SecurityFeature feature = SecurityFeature.builder(security)
+        JerseySecurityFeature feature = JerseySecurityFeature.builder(security)
                 .config(config.get("security.jersey"))
                 .build();
 

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/PreMatchingBindingTest.java
Patch:
@@ -67,7 +67,7 @@ public static void initClass() throws Throwable {
         server = WebServer.create(Routing.builder()
                 .register(JerseySupport.builder()
                                   .register(MyResource.class)
-                                  .register(new SecurityFeature(Security.create(config.get("security"))))
+                                  .register(new JerseySecurityFeature(Security.create(config.get("security"))))
                                   .register(new ExceptionMapper<Exception>() {
                                       @Override
                                       public Response toResponse(Exception exception) {

File: security/integration/nima/src/main/java/io/helidon/security/integration/nima/SecurityHandler.java
Patch:
@@ -66,8 +66,8 @@
 
 /**
  * Handles security for web server. This handler is registered either by hand on router config,
- * or automatically from configuration when integration done through {@link WebSecurity#create(Config)}
- * or {@link WebSecurity#create(Security, Config)}.
+ * or automatically from configuration when integration done through {@link SecurityFeature#create(Config)}
+ * or {@link SecurityFeature#create(Security, Config)}.
  */
 // we need to have all fields optional and this is cleaner than checking for null
 @SuppressWarnings("OptionalUsedAsFieldOrParameterType")
@@ -142,7 +142,7 @@ private SecurityHandler(Builder builder) {
      * <pre>
      * {
      *   #
-     *   # these are used by {@link WebSecurity} when loaded from config, to register with {@link io.helidon.nima.webserver.WebServer}
+     *   # these are used by {@link SecurityFeature} when loaded from config, to register with {@link io.helidon.nima.webserver.WebServer}
      *   #
      *   path = "/noRoles"
      *   methods = ["get"]

File: security/providers/http-auth/src/test/java/io/helidon/security/providers/httpauth/HttpAuthProviderConfigTest.java
Patch:
@@ -26,7 +26,7 @@
 import io.helidon.reactive.webserver.WebServer;
 import io.helidon.reactive.webserver.jersey.JerseySupport;
 import io.helidon.security.Security;
-import io.helidon.security.integration.jersey.SecurityFeature;
+import io.helidon.security.integration.jersey.JerseySecurityFeature;
 
 import jakarta.ws.rs.client.Client;
 import jakarta.ws.rs.client.ClientBuilder;
@@ -74,7 +74,7 @@ private static void startServer(Security security) throws Throwable {
         server = WebServer.create(Routing.builder()
                 .register(JerseySupport.builder()
                                   .register(TestResource.class)
-                                  .register(SecurityFeature.builder(security).authorizeAnnotatedOnly(true).build())
+                                  .register(JerseySecurityFeature.builder(security).authorizeAnnotatedOnly(true).build())
                                   .register(new ExceptionMapper<Exception>() {
                                       @Override
                                       public Response toResponse(Exception exception) {

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcService.java
Patch:
@@ -44,7 +44,7 @@
 import io.helidon.reactive.webclient.WebClientRequestBuilder;
 import io.helidon.security.Security;
 import io.helidon.security.SecurityException;
-import io.helidon.security.integration.nima.WebSecurity;
+import io.helidon.security.integration.nima.SecurityFeature;
 import io.helidon.security.providers.oidc.common.OidcConfig;
 import io.helidon.security.providers.oidc.common.OidcCookieHandler;
 
@@ -254,11 +254,11 @@ private void addRequestAsHeader(ServerRequest req, ServerResponse res) {
         Context context = Contexts.context().orElseThrow(() -> new SecurityException("Context must be available"));
 
         Map<String, List<String>> newHeaders = context
-                .get(WebSecurity.CONTEXT_ADD_HEADERS, Map.class)
+                .get(SecurityFeature.CONTEXT_ADD_HEADERS, Map.class)
                 .map(theMap -> (Map<String, List<String>>) theMap)
                 .orElseGet(() -> {
                     Map<String, List<String>> newMap = new HashMap<>();
-                    context.register(WebSecurity.CONTEXT_ADD_HEADERS, newMap);
+                    context.register(SecurityFeature.CONTEXT_ADD_HEADERS, newMap);
                     return newMap;
                 });
 

File: security/security/src/main/java/io/helidon/security/SecurityContextImpl.java
Patch:
@@ -280,7 +280,7 @@ public void env(SecurityEnvironment env) {
     }
 
     @Override
-    public boolean atzChecked() {
+    public boolean isAuthorized() {
         return atzChecked.get();
     }
 

File: security/security/src/main/java/module-info.java
Patch:
@@ -28,6 +28,7 @@
     requires java.logging;
 
     requires transitive io.helidon.common;
+    requires transitive io.helidon.common.security;
     requires transitive io.helidon.common.configurable;
     requires transitive io.helidon.common.reactive;
     requires transitive io.helidon.config;

File: examples/openapi-tools/quickstart-mp/mp-server/src/main/java/org/openapitools/server/api/MessageServiceImpl.java
Patch:
@@ -59,7 +59,7 @@ public Message getDefaultMessage() {
     @Produces({"application/json"})
     public Message getMessage(@PathParam("name") String name) {
         Message result = new Message();
-        return result.message(defaultMessage.get().getMessage()).greeting(name);
+        return result.message(name).greeting(defaultMessage.get().getGreeting());
     }
 
     @PUT

File: nima/observe/metrics/src/main/java/io/helidon/nima/observe/metrics/MetricsFeature.java
Patch:
@@ -28,6 +28,7 @@
 import io.helidon.metrics.api.MetricsSettings;
 import io.helidon.metrics.api.Registry;
 import io.helidon.metrics.api.RegistryFactory;
+import io.helidon.metrics.api.SystemTagsManager;
 import io.helidon.metrics.serviceapi.JsonFormat;
 import io.helidon.metrics.serviceapi.PrometheusFormat;
 import io.helidon.nima.servicecommon.HelidonFeatureSupport;
@@ -90,6 +91,7 @@ private MetricsFeature(Builder builder) {
 
         this.registryFactory = builder.registryFactory();
         this.metricsSettings = builder.metricsSettings();
+        SystemTagsManager.create(metricsSettings);
     }
 
     /**

File: reactive/metrics/src/main/java/io/helidon/reactive/metrics/MetricsSupport.java
Patch:
@@ -29,6 +29,7 @@
 import io.helidon.metrics.api.MetricsSettings;
 import io.helidon.metrics.api.Registry;
 import io.helidon.metrics.api.RegistryFactory;
+import io.helidon.metrics.api.SystemTagsManager;
 import io.helidon.metrics.serviceapi.JsonFormat;
 import io.helidon.metrics.serviceapi.PrometheusFormat;
 import io.helidon.reactive.media.common.MessageBodyWriter;
@@ -93,6 +94,7 @@ private MetricsSupport(Builder builder) {
 
         this.registryFactory = builder.registryFactory();
         this.metricsSettings = builder.metricsSettings();
+        SystemTagsManager.create(metricsSettings);
     }
 
     /**

File: common/reactive/src/main/java/io/helidon/common/reactive/Multi.java
Patch:
@@ -646,8 +646,8 @@ default <U> Multi<U> flatMap(Function<? super T, ? extends Flow.Publisher<? exte
 
     /**
      * Transform item with supplied function and flatten resulting {@link java.util.concurrent.CompletionStage} results
-     * to downstream. As reactive streams forbids null values, CompletionStage result is mapped to
-     * {@link java.util.Optional}.
+     * to downstream. As reactive streams forbids null values, error signal with {@link java.lang.NullPointerException }
+     * is sent to downstream when CompletionStage result is null.
      *
      * @param mapper {@link Function} receiving item as parameter and returning {@link java.util.concurrent.CompletionStage}
      * @param <U>    output item type

File: examples/nima/quickstart-standalone/src/main/java/io/helidon/examples/nima/quickstart/standalone/StandaloneQuickstartMain.java
Patch:
@@ -59,6 +59,7 @@ static void routing(HttpRouting.Builder routing) {
         ObserveSupport observe = ObserveSupport.builder()
                 .useSystemServices(true)
                 .addProvider(HealthObserveProvider.create(HealthFeature.builder()
+                                                                  .useSystemServices(false)
                                                                   .addCheck(HeapMemoryHealthCheck.create())
                                                                   .addCheck(DiskSpaceHealthCheck.create())
                                                                   .addCheck(DeadlockHealthCheck.create())

File: examples/nima/quickstart/src/main/java/io/helidon/examples/nima/quickstart/QuickstartMain.java
Patch:
@@ -59,6 +59,7 @@ static void routing(HttpRouting.Builder routing) {
         ObserveSupport observe = ObserveSupport.builder()
                 .useSystemServices(false)
                 .addProvider(HealthObserveProvider.create(HealthFeature.builder()
+                                                                  .useSystemServices(false)
                                                                   .addCheck(HeapMemoryHealthCheck.create())
                                                                   .addCheck(DiskSpaceHealthCheck.create())
                                                                   .addCheck(DeadlockHealthCheck.create())

File: nima/grpc/webserver/src/main/java/io/helidon/nima/grpc/webserver/GrpcProtocolHandler.java
Patch:
@@ -116,7 +116,6 @@ public void data(Http2FrameHeader header, BufferData data) {
         try {
             while (data.available() > 0) {
                 // todo compression support
-                // todo one message could span multiple frames
                 boolean isCompressed = (data.read() == 1);
                 long length = data.readUnsignedInt32(); // if the result is > than data length, wait for next data?
                 byte[] bytes = new byte[(int) length];

File: examples/nima/tracing/src/main/java/io/helidon/examples/nima/tracing/TracingMain.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.nima.webserver.http.ServerRequest;
 import io.helidon.nima.webserver.http.ServerResponse;
 import io.helidon.nima.webserver.http1.Http1Route;
-import io.helidon.nima.webserver.tracing.TracingSupport;
+import io.helidon.nima.webserver.tracing.TracingFeature;
 import io.helidon.tracing.Span;
 import io.helidon.tracing.Tracer;
 import io.helidon.tracing.TracerBuilder;
@@ -51,7 +51,7 @@ public static void main(String[] args) {
                 .port(8080)
                 .host("127.0.0.1")
                 .routing(router -> router
-                        .update(TracingSupport.create(tracer)::register)
+                        .addFeature(TracingFeature.create(tracer))
                         .route(Http1Route.route(GET, "/versionspecific", new TracedHandler(tracer, "HTTP/1.1 route")))
                         .route(Http2Route.route(GET, "/versionspecific", new TracedHandler(tracer, "HTTP/2 route")))
                 )

File: microprofile/tracing/src/main/java/io/helidon/microprofile/tracing/MpTracingContextFilter.java
Patch:
@@ -65,7 +65,7 @@ public MpTracingContextFilter(@Context Provider<ServerRequest> request) {
     public void filter(ContainerRequestContext requestContext) {
         ServerRequest serverRequest = this.request.get();
 
-        Tracer tracer = Tracer.global();
+        Tracer tracer = serverRequest.context().get(Tracer.class).orElseGet(Tracer::global);
         Optional<SpanContext> parentSpan = Span.current().map(Span::context);
 
         boolean clientEnabled = config.getOptionalValue("tracing.client.enabled", Boolean.class).orElse(true);

File: microprofile/tracing/src/main/java/module-info.java
Patch:
@@ -36,6 +36,7 @@
     requires io.helidon.common;
     requires io.helidon.nima.webserver;
     requires io.helidon.jersey.common;
+    requires io.helidon.nima.webserver.tracing;
     requires transitive io.helidon.tracing;
     requires transitive io.helidon.tracing.jersey;
     requires io.helidon.tracing.tracerresolver;

File: nima/webserver/tracing/src/main/java/module-info.java
Patch:
@@ -21,6 +21,7 @@
     requires io.helidon.common.http;
     requires io.helidon.nima.webserver;
     requires io.helidon.tracing;
+    requires io.helidon.tracing.config;
 
     exports io.helidon.nima.webserver.tracing;
 }
\ No newline at end of file

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http/HttpRouting.java
Patch:
@@ -45,12 +45,11 @@ public final class HttpRouting implements Routing {
 
     private final Filters filters;
     private final ServiceRoute rootRoute;
-    private final ErrorHandlers errorHandlers;
     private final List<HttpFeature> features;
     private final int maxReRouteCount;
 
     private HttpRouting(Builder builder) {
-        this.errorHandlers = ErrorHandlers.create(builder.errorHandlers);
+        ErrorHandlers errorHandlers = ErrorHandlers.create(builder.errorHandlers);
         this.filters = Filters.create(errorHandlers, List.copyOf(builder.filters));
         this.rootRoute = builder.rootRules.build();
         this.features = List.copyOf(builder.features);

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http/RouteCrawler.java
Patch:
@@ -190,7 +190,7 @@ public Parameters pathParameters() {
 
             @Override
             public RoutedPath absolute() {
-                return new CrawlerRoutedPath(path, templateParams);
+                return new CrawlerRoutedPath(path.absolute(), templateParams);
             }
         }
     }

File: reactive/media/common/src/main/java/io/helidon/reactive/media/common/CharBuffer.java
Patch:
@@ -97,7 +97,7 @@ private void grow(int minCapacity) {
 
     private static int hugeCapacity(int minCapacity) {
         if (minCapacity < 0) {
-            throw new OutOfMemoryError("Capacity overflow. minCapacity=" + minCapacity);
+            throw new OutOfCapacityException("Capacity overflow. minCapacity=" + minCapacity);
         }
         return (minCapacity > MAX_ARRAY_SIZE)
                ? Integer.MAX_VALUE

File: reactive/webserver/webserver/src/main/java/io/helidon/reactive/webserver/WebTracingConfig.java
Patch:
@@ -303,13 +303,13 @@ private void doAccept(ServerRequest req, ServerResponse res) {
 
             String spanName = spanConfig.newName().orElse(TRACING_SPAN_HTTP_REQUEST);
             if (spanName.indexOf('%') > -1) {
-                spanName = String.format(spanName, req.method().name(), req.path(), req.query());
+                spanName = String.format(spanName, req.method().text(), req.path(), req.query());
             }
             // tracing is enabled, so we replace the parent span with web server parent span
             Span.Builder<?> spanBuilder = tracer.spanBuilder(spanName)
                     .kind(Span.Kind.SERVER)
                     .tag(Tag.COMPONENT.create("helidon-reactive-webserver"))
-                    .tag(Tag.HTTP_METHOD.create(req.method().name()))
+                    .tag(Tag.HTTP_METHOD.create(req.method().text()))
                     .tag(Tag.HTTP_URL.create(req.uri().toString()))
                     .tag(Tag.HTTP_VERSION.create(req.version().value()));
 

File: microprofile/websocket/src/main/java/io/helidon/microprofile/tyrus/HelidonComponentProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/websocket/src/test/java/io/helidon/microprofile/tyrus/EchoClient.java
Patch:
@@ -92,7 +92,7 @@ public void onMessage(String message) {
                             LOGGER.info("Client OnMessage called '" + message + "'");
 
                             int index = messages.length - (int) messageLatch.getCount();
-                            assertTrue(equals.apply(messages[index], message), messages[index] +":"+message);
+                            assertTrue(equals.apply(messages[index], message), messages[index] + ":" + message);
 
                             messageLatch.countDown();
                             if (messageLatch.getCount() == 0) {

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1ConnectionProvider.java
Patch:
@@ -251,8 +251,8 @@ Map<String, Http1UpgradeProvider> upgradeProviders() {
             List<Http1UpgradeProvider> providers = upgradeProviders.build().asList();
             Map<String, Http1UpgradeProvider> providerMap = new HashMap<>();
 
-            for (Http1UpgradeProvider upgradeProvider : providers) {
-                providerMap.put(upgradeProvider.supportedProtocol(), upgradeProvider);
+            for (Http1UpgradeProvider upgradeProvider : providers) {        // sorted by weight
+                providerMap.putIfAbsent(upgradeProvider.supportedProtocol(), upgradeProvider);
             }
             return Map.copyOf(providerMap);
         }

File: messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java
Patch:
@@ -116,6 +116,8 @@ record = new ProducerRecord<>(topic, message.getPayload());
                                 subscription.request(backpressure);
                             }
                         });
+                    } else {
+                        message.nack(exception);
                     }
                 });
     }

File: common/http/src/main/java/io/helidon/common/http/HeaderValueLazy.java
Patch:
@@ -35,22 +35,22 @@ class HeaderValueLazy extends HeaderValueBase {
     public Http.HeaderValueWriteable addValue(String value) {
         if (values == null) {
             values = new ArrayList<>(2);
-            values.add(this.value.toString());
+            values.add(this.value.stripOws());
         }
         values.add(value);
         return this;
     }
 
     @Override
     public String value() {
-        return value.toString();
+        return value.stripOws();
     }
 
     @Override
     public List<String> allValues() {
         if (values == null) {
             values = new ArrayList<>(2);
-            values.add(value.toString());
+            values.add(value.stripOws());
         }
         return values;
     }

File: pico/builder/processor-tools/src/main/java/module-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * The Pico Builder tools module.
+ * The Pico Builder Processor Tools module.
  */
 module io.helidon.pico.builder.processor.tools {
     requires java.compiler;

File: pico/builder/processor/src/main/java/module-info.java
Patch:
@@ -28,4 +28,7 @@
     exports io.helidon.pico.builder.processor;
 
     provides javax.annotation.processing.Processor with io.helidon.pico.builder.processor.BuilderProcessor;
+
+    uses io.helidon.pico.builder.processor.spi.BuilderCreator;
+    uses io.helidon.pico.builder.processor.spi.TypeInfoCreator;
 }

File: pico/builder/tests/builder/src/main/java/io/helidon/pico/builder/test/testsubjects/Level1.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.helidon.pico.builder.test.testsubjects;
 
+import java.util.Optional;
+
 import io.helidon.config.metadata.ConfiguredOption;
 import io.helidon.pico.builder.Builder;
 
@@ -65,6 +67,6 @@ public interface Level1 extends Level0 {
      *
      * @return ignored, here for testing purposes only
      */
-    Boolean getLevel1BooleanAttribute();
+    Optional<Boolean> getLevel1BooleanAttribute();
 
 }

File: pico/builder/tests/builder/src/test/java/io/helidon/pico/builder/api/test/EdgeCasesTest.java
Patch:
@@ -28,7 +28,7 @@ class EdgeCasesTest {
 
     @Test
     void testIt() {
-        DefaultEdgeCases val = DefaultEdgeCases.toBuilder(null).build();
+        DefaultEdgeCases val = DefaultEdgeCases.builder().build();
         assertThat(val.optionalIntegerWithDefault().get(), is(-1));
         assertThat(val.optionalStringWithDefault().get(), equalTo("test"));
 

File: pico/builder/tests/builder/src/test/java/io/helidon/pico/builder/api/test/MyConfigBeanTest.java
Patch:
@@ -60,7 +60,7 @@ void codeGen() {
 
     @Test
     void mixed() {
-        MyConfigBean val1 = MyConfigBeanManualImpl.builder().build();
+        MyConfigBean val1 = MyConfigBeanManualImpl.builder().name("initial").build();
         val1 = MyConfigBeanImpl.toBuilder(val1)
                 .name("test")
                 .enabled(true)

File: pico/builder/tests/builder/src/test/java/io/helidon/pico/builder/api/test/PickleBarrelTest.java
Patch:
@@ -34,7 +34,7 @@ class PickleBarrelTest {
     @Test
     void testIt() {
         DefaultPickle.Builder pickleBuilder = DefaultPickle.builder().size(Optional.of(Pickle.Size.MEDIUM));
-        AssertionError e = assertThrows(AssertionError.class, pickleBuilder::build);
+        Exception e = assertThrows(IllegalStateException.class, pickleBuilder::build);
         assertThat(e.getMessage(),
                equalTo("'type' is a required attribute and should not be null"));
 
@@ -44,12 +44,12 @@ void testIt() {
                equalTo("Pickle(type=DILL, size=Optional[MEDIUM])"));
 
         DefaultPickleBarrel.Builder pickleBarrelBuilder = DefaultPickleBarrel.builder();
-        e = assertThrows(AssertionError.class, pickleBarrelBuilder::build);
+        e = assertThrows(IllegalStateException.class, pickleBarrelBuilder::build);
         assertThat(e.getMessage(),
                equalTo("'id' is a required attribute and should not be null"));
 
         PickleBarrel pickleBarrel = pickleBarrelBuilder.addPickle(pickle).id("123").build();
         assertThat(pickleBarrel.toString(),
-               equalTo("PickleBarrel(id=123, type=null, pickles=[Pickle(type=DILL, size=Optional[MEDIUM])])"));
+               equalTo("PickleBarrel(id=123, type=Optional.empty, pickles=[Pickle(type=DILL, size=Optional[MEDIUM])])"));
     }
 }

File: pico/pico/src/main/java/io/helidon/pico/ExternalContracts.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.pico;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -25,7 +25,7 @@
  * Placed on the implementation of a service as an alternative to using a {@link Contract}.
  * <p>
  * Use this annotation when it is impossible to place an annotation on the interface itself - for instance of the interface comes
- * from a 3rd party library/provider.
+ * from a 3rd party library provider.
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)

File: pico/pico/src/main/java/io/helidon/pico/RunLevel.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.pico.api;
+package io.helidon.pico;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Inherited;

File: common/socket/src/main/java/io/helidon/common/socket/SocketWriterAsync.java
Patch:
@@ -110,6 +110,7 @@ public void close() {
 
     private void run() {
         this.thread = Thread.currentThread();
+        this.thread.setName("[" + socket().socketId() + " " + socket().childSocketId() + "]");
         try {
             while (run) {
                 CompositeBufferData toWrite = BufferData.createComposite(writeQueue.take());  // wait if the queue is empty

File: nima/fault-tolerance/src/main/java/io/helidon/nima/faulttolerance/AsyncImpl.java
Patch:
@@ -52,6 +52,8 @@ public boolean cancel(boolean mayInterruptIfRunning) {
             }
         };
         Future<?> future = executor.get().submit(() -> {
+            Thread thread = Thread.currentThread();
+            thread.setName(thread.getName() + ": async");
             try {
                 T t = supplier.get();
                 result.complete(t);

File: nima/fault-tolerance/src/main/java/io/helidon/nima/faulttolerance/FaultTolerance.java
Patch:
@@ -54,7 +54,9 @@ public final class FaultTolerance {
     private static final AtomicReference<Config> CONFIG = new AtomicReference<>(Config.empty());
 
     static {
-        EXECUTOR.set(LazyValue.create(Executors.newVirtualThreadPerTaskExecutor()));
+        EXECUTOR.set(LazyValue.create(() -> Executors.newThreadPerTaskExecutor(Thread.ofVirtual()
+                                                          .name("helidon-ft-", 0)
+                                                          .factory())));
     }
 
     private FaultTolerance() {

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ConnectionHandler.java
Patch:
@@ -88,6 +88,7 @@ class ConnectionHandler implements Runnable {
 
     @Override
     public final void run() {
+        Thread.currentThread().setName("[" + socket.socketId() + " " + socket.childSocketId() + "] Nima socket");
         if (LOGGER.isLoggable(DEBUG)) {
             ctx.log(LOGGER, DEBUG, "accepted socket from %s", socket.remotePeer().host());
         }

File: nima/fault-tolerance/src/main/java/io/helidon/nima/faulttolerance/Async.java
Patch:
@@ -72,7 +72,7 @@ static Builder builder() {
      * Fluent API Builder for {@link Async}.
      */
     class Builder implements io.helidon.common.Builder<Builder, Async> {
-        private LazyValue<? extends ExecutorService> executor;
+        private LazyValue<? extends ExecutorService> executor = FaultTolerance.executor();
 
         private Builder() {
         }

File: nima/fault-tolerance/src/test/java/io/helidon/nima/faulttolerance/AsyncTest.java
Patch:
@@ -43,10 +43,10 @@ void testDefaultExecutorBuilder(){
     @Test
     void testCustomExecutorBuilder() {
         Async async = Async.builder()
-                .executor(FaultTolerance.executor())        // platform thread executor
+                .executor(FaultTolerance.executor())
                 .build();
         Thread thread = testAsync(async);
-        assertThat(thread.isVirtual(), is(false));
+        assertThat(thread.isVirtual(), is(true));
     }
 
     private Thread testAsync(Async async) {

File: nima/fault-tolerance/src/test/java/io/helidon/nima/faulttolerance/CircuitBreakerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.time.Duration;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
@@ -57,7 +57,7 @@ void testCircuitBreaker() throws InterruptedException, ExecutionException, Timeo
         assertThat(breaker.state(), is(CircuitBreaker.State.OPEN));
 
         // need to wait until half open
-        ScheduledFuture<Boolean> schedule = ((CircuitBreakerImpl) breaker).schedule();
+        Future<Boolean> schedule = ((CircuitBreakerImpl) breaker).schedule();
         schedule.get(WAIT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
 
         assertThat(breaker.state(), is(CircuitBreaker.State.HALF_OPEN));

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceExtension.java
Patch:
@@ -28,7 +28,7 @@
 import io.helidon.common.configurable.ScheduledThreadPoolSupplier;
 import io.helidon.common.configurable.ThreadPoolSupplier;
 import io.helidon.config.mp.MpConfig;
-import io.helidon.reactive.faulttolerance.FaultTolerance;
+import io.helidon.nima.faulttolerance.FaultTolerance;
 
 import jakarta.annotation.Priority;
 import jakarta.enterprise.context.ApplicationScoped;

File: microprofile/fault-tolerance/src/main/java/module-info.java
Patch:
@@ -27,7 +27,7 @@
 
     requires io.helidon.common.context;
     requires io.helidon.common.configurable;
-    requires io.helidon.reactive.faulttolerance;
+    requires io.helidon.nima.faulttolerance;
     requires io.helidon.microprofile.config;
     requires io.helidon.microprofile.server;
     requires io.helidon.microprofile.metrics;

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/BulkheadBean.java
Patch:
@@ -102,7 +102,7 @@ void reset() {
     CompletableFuture<String> execute(long sleepMillis) {
         try {
             counter.increment();
-            FaultToleranceTest.printStatus("BulkheadBean::execute", "success");
+            FaultToleranceTest.printStatus("BulkheadBean::execute", "incremented");
             try {
                 Thread.sleep(sleepMillis);
             } catch (InterruptedException e) {
@@ -111,6 +111,7 @@ CompletableFuture<String> execute(long sleepMillis) {
             return CompletableFuture.completedFuture(Thread.currentThread().getName());
         } finally {
             counter.decrement();
+            FaultToleranceTest.printStatus("BulkheadBean::execute", "decremented");
         }
     }
 

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/BulkheadTest.java
Patch:
@@ -107,7 +107,7 @@ void testSynchronous() {
                 10);
 
         // Check that only one thread entered the bulkhead
-        int sum = Arrays.asList(calls).stream().map(c -> {
+        int sum = Arrays.stream(calls).map(c -> {
             try {
                 return c.get();
             } catch (Exception e) {

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/RetryTest.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.stream.Stream;
 
 import io.helidon.microprofile.tests.junit5.AddBean;
-
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
@@ -37,7 +35,6 @@
  */
 @AddBean(RetryBean.class)
 @AddBean(SyntheticRetryBean.class)
-@Disabled("3.0.0-JAKARTA")
 public class RetryTest extends FaultToleranceTest {
 
     static Stream<Arguments> createBeans() {

File: nima/fault-tolerance/src/test/java/io/helidon/nima/faulttolerance/BulkheadTest.java
Patch:
@@ -40,7 +40,7 @@
 class BulkheadTest {
     private static final System.Logger LOGGER = System.getLogger(BulkheadTest.class.getName());
 
-    private static final long WAIT_TIMEOUT_MILLIS = 2000;
+    private static final long WAIT_TIMEOUT_MILLIS = 4000;
 
     private final CountDownLatch enqueuedSubmitted = new CountDownLatch(1);
 

File: tests/functional/request-scope/src/test/java/io/helidon/tests/functional/requestscope/TenantTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.function.Supplier;
 
 import io.helidon.microprofile.tests.junit5.HelidonTest;
-import io.helidon.reactive.faulttolerance.Async;
+import io.helidon.nima.faulttolerance.Async;
 
 import io.netty.handler.codec.http.HttpResponseStatus;
 import jakarta.inject.Inject;

File: grpc/server/src/main/java/io/helidon/grpc/server/BindableServiceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -73,7 +73,8 @@ static BindableServiceImpl create(ServiceDescriptor descriptor, PriorityBag<Serv
     @SuppressWarnings("unchecked")
     @Override
     public ServerServiceDefinition bindService() {
-        io.grpc.ServiceDescriptor.Builder serviceDescriptorBuilder = io.grpc.ServiceDescriptor.newBuilder(descriptor.name());
+        io.grpc.ServiceDescriptor.Builder serviceDescriptorBuilder =
+                io.grpc.ServiceDescriptor.newBuilder(descriptor.fullName());
         if (descriptor.proto() != null) {
             serviceDescriptorBuilder.setSchemaDescriptor((ProtoFileDescriptorSupplier) descriptor::proto);
         }

File: examples/jbatch/src/test/java/io/helidon/examples/jbatch/TestJBatchEndpoint.java
Patch:
@@ -46,7 +46,7 @@ public void runJob() throws InterruptedException {
         assertNotNull(responseJobId, "Response Job Id");
 
         //Wait a bit for it to complete
-        Thread.sleep(1000);
+        Thread.sleep(3000);
 
         //Examine the results
         jsonObject = webTarget

File: nima/webserver/access-log/src/main/java/io/helidon/nima/webserver/accesslog/AccessLogFilter.java
Patch:
@@ -93,7 +93,9 @@ public void filter(FilterChain chain, RoutingRequest req, RoutingResponse res) {
         try {
             chain.proceed();
         } finally {
-            log(req, res, now, nanoNow);
+            if (enabled) {
+                log(req, res, now, nanoNow);
+            }
         }
     }
 

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ListenerConfiguration.java
Patch:
@@ -153,7 +153,7 @@ public static class Builder implements io.helidon.common.Builder<Builder, Listen
         private int backlog = 1024;
         private Tls tls;
         private SocketOptions connectionOptions;
-        private int writeQueueLength = 32;
+        private int writeQueueLength = 0;
         private long maxPayloadSize = -1;
 
         private Builder(String socketName) {
@@ -257,7 +257,7 @@ public Builder connectionOptions(Consumer<SocketOptions.Builder> builderConsumer
         /**
          * Number of buffers queued for write operations.
          *
-         * @param writeQueueLength maximal number of queued writes, defaults to 32
+         * @param writeQueueLength maximal number of queued writes, defaults to 0
          * @return updated builder
          */
         public Builder writeQueueLength(int writeQueueLength) {

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/LoomServer.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Consumer;
 
+import io.helidon.common.Version;
 import io.helidon.nima.webserver.http.DirectHandlers;
 import io.helidon.nima.webserver.spi.ServerConnectionProvider;
 
@@ -181,7 +182,8 @@ private void startIt() {
         now = System.currentTimeMillis() - now;
         long uptime = ManagementFactory.getRuntimeMXBean().getUptime();
 
-        LOGGER.log(System.Logger.Level.INFO, "Níma server started all channels in "
+        LOGGER.log(System.Logger.Level.INFO, "Helidon Níma " + Version.VERSION);
+        LOGGER.log(System.Logger.Level.INFO, "Started all channels in "
                 + now + " milliseconds. "
                 + uptime + " milliseconds since JVM startup. "
                 + "Java " + Runtime.version());

File: tests/integration/jpa/appl/src/main/java/io/helidon/tests/integration/jpa/appl/UpdateIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -193,7 +193,6 @@ public TestResult testUpdateSaffron(TestResult result) {
         City city = em.find(City.class, cities[0].getId());
         stadium = city.getStadium();
         Trainer trainer = stadium.getTrainer();
-        em.refresh(trainer);
         pokemons = trainer.getPokemons();
         result.assertEquals(trainer.getName(), "Janine");
         for (Pokemon pokemon : pokemons) {

File: tests/integration/jpa/appl/src/test/java/io/helidon/tests/integration/jpa/appl/test/LifeCycleExtension.java
Patch:
@@ -102,13 +102,13 @@ public static void waitForDatabase() {
         final String dbUrl = System.getProperty("db.url");
         boolean connected = false;
         if (dbUser == null) {
-            throw new IllegalStateException("Database user name was not set!");
+            throw new IllegalStateException("Database user name was not set, check db.user property!");
         }
         if (dbPassword == null) {
-            throw new IllegalStateException("Database user password was not set!");
+            throw new IllegalStateException("Database user password was not set, check db.password property!");
         }
         if (dbUrl == null) {
-            throw new IllegalStateException("Database URL was not set!");
+            throw new IllegalStateException("Database URL was not set, check db.url property");
         }
         long endTm = 1000 * TIMEOUT + System.currentTimeMillis();
         while (true) {

File: tests/integration/jpa/model/src/main/java/io/helidon/tests/integration/jpa/model/Settlement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
 import java.util.Objects;
 
 import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
 import jakarta.persistence.Id;
 import jakarta.persistence.MappedSuperclass;
 
@@ -28,7 +29,7 @@
 public class Settlement {
 
     @Id
-    @GeneratedValue
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     private int id;
 
     private String name;

File: reactive/webserver/jersey/src/main/java/module-info.java
Patch:
@@ -40,5 +40,5 @@
     provides InjectionManagerFactory with HelidonHK2InjectionManagerFactory;
 
     // reflection access from jersey injection
-    opens io.helidon.reactive.webserver.jersey to org.glassfish.hk2.utilities, org.glassfish.hk2.locator;
+    opens io.helidon.reactive.webserver.jersey to org.glassfish.hk2.utilities, org.glassfish.hk2.locator, weld.core.impl;
 }

File: microprofile/messaging/core/src/main/java/module-info.java
Patch:
@@ -37,5 +37,8 @@
 
     exports io.helidon.microprofile.messaging;
 
+    // this is needed for CDI extensions that use non-public observer methods
+    opens io.helidon.microprofile.messaging to weld.core.impl, io.helidon.microprofile.cdi;
+
     provides jakarta.enterprise.inject.spi.Extension with io.helidon.microprofile.messaging.MessagingCdiExtension;
 }

File: tests/tck/tck-reactive-streams/src/test/java/io/helidon/common/reactive/MultiFromNotTrustedInputStreamTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -60,5 +60,4 @@ protected Multi<ByteBuffer> getPublisher(InputStream is) {
                 .byteBufferSize(BUFFER_SIZE)
                 .build();
     }
-
 }

File: tests/tck/tck-reactive-streams/src/test/java/io/helidon/common/reactive/MultiFromTrustedInputStreamTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public class MultiFromTrustedInputStreamTckTest extends FlowPublisherVerificatio
     static final int BUFFER_SIZE = 4;
 
     public MultiFromTrustedInputStreamTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(500));
     }
 
     @Override

File: nima/webclient/webclient/src/main/java/io/helidon/nima/webclient/http1/ClientRequestImpl.java
Patch:
@@ -280,7 +280,7 @@ private Http1ClientResponse readResponse(ClientRequestHeaders usedHeaders, Clien
 
     private ClientResponseHeaders readHeaders(DataReader reader) {
         // todo configurable max headers and validate headers
-        int maxHeaderSize = 8192;
+        int maxHeaderSize = 16384;
         boolean validateHeaders = true;
 
         WritableHeaders<?> writable = Http1HeadersParser.readHeaders(reader, maxHeaderSize, validateHeaders);

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http1/Http1ConnectionProvider.java
Patch:
@@ -38,7 +38,7 @@
 public class Http1ConnectionProvider implements ServerConnectionProvider {
     private static final String PROTOCOL = " HTTP/1.1\r";
     private static final int DEFAULT_MAX_PROLOGUE_LENGTH = 2048;
-    private static final int DEFAULT_MAX_HEADERS_SIZE = 8096;
+    private static final int DEFAULT_MAX_HEADERS_SIZE = 16384;
     private static final boolean DEFAULT_VALIDATE_HEADERS = true;
     private static final boolean DEFAULT_VALIDATE_PATH = true;
 

File: reactive/webserver/webserver/src/test/java/io/helidon/reactive/webserver/TestHttpParseFineTuning.java
Patch:
@@ -53,11 +53,11 @@ void testDefaults() {
                 .validateHeaders(false)
                 .build();
 
-        testHeader(client, 8000, true);
+        testHeader(client, 16000, true);
         testInitialLine(client, 10, true);
 
-        testHeader(client, 8900, false);
-        testHeader(client, 8900, false);
+        testHeader(client, 17000, false);
+        testHeader(client, 17000, false);
 
         // now test with big initial line
         testInitialLine(client, 5000, false);

File: reactive/webserver/webserver/src/test/java/io/helidon/reactive/webserver/TestHttpParsingDefaults.java
Patch:
@@ -69,13 +69,13 @@ static void destroyClass() throws InterruptedException, ExecutionException, Time
 
     @Test
     void testOkHeader() {
-        testHeader(8000, true);
+        testHeader(16000, true);
     }
 
     @Test
     void testLongHeader() {
-        testHeader(8900, false);
-        testHeader(8900, false);
+        testHeader(17000, false);
+        testHeader(17000, false);
     }
 
     @Test

File: common/http/src/main/java/io/helidon/common/http/BadRequestException.java
Patch:
@@ -14,9 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.reactive.webserver;
-
-import io.helidon.common.http.Http;
+package io.helidon.common.http;
 
 /**
  * A runtime exception indicating a {@link Http.Status#BAD_REQUEST_400 bad request}.

File: examples/media/multipart/src/main/java/io/helidon/examples/media/multipart/FileStorage.java
Patch:
@@ -21,8 +21,8 @@
 import java.nio.file.Path;
 import java.util.stream.Stream;
 
-import io.helidon.reactive.webserver.BadRequestException;
-import io.helidon.reactive.webserver.NotFoundException;
+import io.helidon.common.http.BadRequestException;
+import io.helidon.common.http.NotFoundException;
 
 /**
  * Simple bean to managed a directory based storage.

File: examples/translator-app/backend/src/main/java/io/helidon/examples/translator/backend/TranslatorBackendService.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import io.helidon.reactive.webserver.BadRequestException;
+import io.helidon.common.http.BadRequestException;
 import io.helidon.reactive.webserver.Routing;
 import io.helidon.reactive.webserver.ServerRequest;
 import io.helidon.reactive.webserver.ServerResponse;

File: examples/translator-app/frontend/src/main/java/io/helidon/examples/translator/frontend/TranslatorFrontendService.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.reactive.webserver.BadRequestException;
+import io.helidon.common.http.BadRequestException;
 import io.helidon.reactive.webserver.Routing;
 import io.helidon.reactive.webserver.ServerRequest;
 import io.helidon.reactive.webserver.ServerResponse;

File: examples/webserver/basics/src/main/java/io/helidon/reactive/webserver/examples/basics/Main.java
Patch:
@@ -23,13 +23,13 @@
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
+import io.helidon.common.http.HttpException;
 import io.helidon.common.http.HttpMediaType;
 import io.helidon.common.media.type.MediaTypes;
 import io.helidon.reactive.media.common.MediaContext;
 import io.helidon.reactive.media.common.MessageBodyReader;
 import io.helidon.reactive.media.jsonp.JsonpSupport;
 import io.helidon.reactive.webserver.Handler;
-import io.helidon.reactive.webserver.HttpException;
 import io.helidon.reactive.webserver.RequestPredicate;
 import io.helidon.reactive.webserver.Routing;
 import io.helidon.reactive.webserver.WebServer;

File: examples/webserver/comment-aas/src/main/java/io/helidon/reactive/webserver/examples/comments/Main.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.concurrent.CompletionException;
 
 import io.helidon.common.http.Http;
+import io.helidon.common.http.HttpException;
 import io.helidon.config.Config;
-import io.helidon.reactive.webserver.HttpException;
 import io.helidon.reactive.webserver.Routing;
 import io.helidon.reactive.webserver.WebServer;
 

File: nima/webserver/static-content/src/test/java/io/helidon/nima/webserver/staticcontent/StaticContentHandlerTest.java
Patch:
@@ -27,12 +27,13 @@
 import io.helidon.common.http.HeadersServerRequest;
 import io.helidon.common.http.HeadersServerResponse;
 import io.helidon.common.http.Http;
+import io.helidon.common.http.HttpException;
 import io.helidon.common.http.HttpPrologue;
+import io.helidon.common.http.RequestException;
 import io.helidon.common.parameters.Parameters;
 import io.helidon.common.uri.UriFragment;
 import io.helidon.common.uri.UriPath;
 import io.helidon.common.uri.UriQuery;
-import io.helidon.nima.webserver.http.HttpException;
 import io.helidon.nima.webserver.http.RoutedPath;
 import io.helidon.nima.webserver.http.ServerRequest;
 import io.helidon.nima.webserver.http.ServerResponse;
@@ -210,7 +211,7 @@ private static void assertHttpException(Runnable runnable, Http.Status status) {
             throw new AssertionError("Expected HttpException was not thrown!");
         } catch (HttpException he) {
             if (status != null && status.code() != he.status().code()) {
-                throw new AssertionError("Unexpected status in HttpException. "
+                throw new AssertionError("Unexpected status in RequestException. "
                                                  + "(Expected: " + status.code() + ", Actual: " + status.code() + ")");
             }
         }

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/ConnectionHandler.java
Patch:
@@ -23,12 +23,12 @@
 
 import io.helidon.common.buffers.BufferData;
 import io.helidon.common.buffers.DataReader;
+import io.helidon.common.http.RequestException;
 import io.helidon.common.socket.HelidonSocket;
 import io.helidon.common.socket.SocketWriter;
 import io.helidon.nima.http.encoding.ContentEncodingContext;
 import io.helidon.nima.http.media.MediaContext;
 import io.helidon.nima.webserver.http.DirectHandlers;
-import io.helidon.nima.webserver.http.HttpException;
 import io.helidon.nima.webserver.spi.ServerConnection;
 import io.helidon.nima.webserver.spi.ServerConnectionProvider;
 
@@ -121,7 +121,7 @@ public final void run() {
             } finally {
                 writer.close();
             }
-        } catch (HttpException e) {
+        } catch (RequestException e) {
             ctx.log(LOGGER, WARNING, "escaped HTTP exception", e);
         } catch (CloseConnectionException e) {
             // end of request stream - safe to close the connection, as it was requested by our client

File: nima/webserver/webserver/src/main/java/io/helidon/nima/webserver/http/DirectHandlers.java
Patch:
@@ -22,6 +22,7 @@
 import io.helidon.common.http.DirectHandler;
 import io.helidon.common.http.DirectHandler.EventType;
 import io.helidon.common.http.Http;
+import io.helidon.common.http.RequestException;
 import io.helidon.nima.webserver.CloseConnectionException;
 
 import static java.lang.System.Logger.Level.WARNING;
@@ -64,7 +65,7 @@ public DirectHandler handler(EventType eventType) {
      * @param httpException exception to handle
      * @param res           response
      */
-    public void handle(HttpException httpException, ServerResponse res) {
+    public void handle(RequestException httpException, ServerResponse res) {
         DirectHandler.TransportResponse response = handler(httpException.eventType()).handle(
                 httpException.request(),
                 httpException.eventType(),

File: reactive/webserver/jersey/src/main/java/io/helidon/reactive/webserver/jersey/JerseySupport.java
Patch:
@@ -37,10 +37,10 @@
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.common.http.Http;
+import io.helidon.common.http.HttpException;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigValue;
 import io.helidon.reactive.webserver.Handler;
-import io.helidon.reactive.webserver.HttpException;
 import io.helidon.reactive.webserver.KeyPerformanceIndicatorSupport;
 import io.helidon.reactive.webserver.Routing;
 import io.helidon.reactive.webserver.ServerRequest;

File: reactive/webserver/static-content/src/main/java/io/helidon/reactive/webserver/staticcontent/ClassPathContentHandler.java
Patch:
@@ -37,8 +37,8 @@
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
+import io.helidon.common.http.HttpException;
 import io.helidon.common.reactive.IoMulti;
-import io.helidon.reactive.webserver.HttpException;
 import io.helidon.reactive.webserver.ServerRequest;
 import io.helidon.reactive.webserver.ServerResponse;
 

File: reactive/webserver/static-content/src/main/java/io/helidon/reactive/webserver/staticcontent/FileBasedContentHandler.java
Patch:
@@ -27,12 +27,12 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.http.Http;
+import io.helidon.common.http.HttpException;
 import io.helidon.common.http.HttpMediaType;
 import io.helidon.common.media.type.MediaType;
 import io.helidon.common.media.type.MediaTypes;
 import io.helidon.reactive.media.common.DefaultMediaSupport;
 import io.helidon.reactive.media.common.MessageBodyWriter;
-import io.helidon.reactive.webserver.HttpException;
 import io.helidon.reactive.webserver.RequestHeaders;
 import io.helidon.reactive.webserver.ResponseHeaders;
 import io.helidon.reactive.webserver.ServerRequest;
@@ -61,12 +61,12 @@ static String fileName(Path path) {
     }
 
     /**
-     * Find welcome file in provided directory or throw not found {@link io.helidon.reactive.webserver.HttpException}.
+     * Find welcome file in provided directory or throw not found {@link io.helidon.common.http.HttpException}.
      *
      * @param directory a directory to find in
      * @param name welcome file name
      * @return a path of the welcome file
-     * @throws io.helidon.reactive.webserver.HttpException if welcome file doesn't exists
+     * @throws io.helidon.common.http.HttpException if welcome file doesn't exists
      */
     private static Path resolveWelcomeFile(Path directory, String name) {
         throwNotFoundIf(name == null || name.isEmpty());

File: reactive/webserver/static-content/src/test/java/io/helidon/reactive/webserver/staticcontent/StaticContentHandlerTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import io.helidon.common.http.Http;
-import io.helidon.reactive.webserver.HttpException;
+import io.helidon.common.http.HttpException;
 import io.helidon.reactive.webserver.RequestHeaders;
 import io.helidon.reactive.webserver.ResponseHeaders;
 import io.helidon.reactive.webserver.ServerRequest;

File: reactive/webserver/test-support/src/test/java/io/helidon/reactive/webserver/testsupport/TestClientTest.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.concurrent.TimeUnit;
 
 import io.helidon.common.http.Http;
-import io.helidon.reactive.webserver.HttpException;
-import io.helidon.reactive.webserver.NotFoundException;
+import io.helidon.common.http.HttpException;
+import io.helidon.common.http.NotFoundException;
 import io.helidon.reactive.webserver.Routing;
 
 import org.junit.jupiter.api.Test;

File: reactive/webserver/webserver/src/main/java/io/helidon/reactive/webserver/ForwardingHandler.java
Patch:
@@ -32,6 +32,7 @@
 
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
+import io.helidon.common.http.BadRequestException;
 import io.helidon.common.http.DirectHandler;
 import io.helidon.common.http.DirectHandler.TransportResponse;
 import io.helidon.common.http.HeadersServerRequest;

File: reactive/webserver/webserver/src/main/java/io/helidon/reactive/webserver/RequestRouting.java
Patch:
@@ -35,7 +35,9 @@
 import io.helidon.common.context.Contexts;
 import io.helidon.common.http.HtmlEncoder;
 import io.helidon.common.http.Http;
+import io.helidon.common.http.HttpException;
 import io.helidon.common.http.HttpMediaType;
+import io.helidon.common.http.NotFoundException;
 import io.helidon.tracing.Span;
 import io.helidon.tracing.SpanContext;
 import io.helidon.tracing.Tracer;

File: reactive/webserver/webserver/src/main/java/io/helidon/reactive/webserver/Response.java
Patch:
@@ -27,6 +27,7 @@
 import io.helidon.common.GenericType;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
+import io.helidon.common.http.HttpException;
 import io.helidon.common.http.HttpMediaType;
 import io.helidon.common.media.type.MediaType;
 import io.helidon.common.reactive.Single;

File: reactive/webserver/webserver/src/main/java/io/helidon/reactive/webserver/ServerRequest.java
Patch:
@@ -25,6 +25,7 @@
 
 import io.helidon.common.context.Context;
 import io.helidon.common.http.Http;
+import io.helidon.common.http.HttpException;
 import io.helidon.common.reactive.Single;
 import io.helidon.common.uri.UriQuery;
 import io.helidon.reactive.media.common.MessageBodyReadableContent;

File: reactive/webserver/webserver/src/test/java/io/helidon/reactive/webserver/BytesReuseTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import io.helidon.common.http.BadRequestException;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Multi;

File: reactive/webserver/webserver/src/test/java/io/helidon/reactive/webserver/BytesReuseV2ApiTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import io.helidon.common.http.BadRequestException;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Multi;

File: common/testing/http-junit5/src/main/java/io/helidon/common/testing/http/junit5/HttpHeaderMatcher.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.common.testing.http;
+package io.helidon.common.testing.http.junit5;
 
 import java.util.List;
 

File: common/testing/http-junit5/src/main/java/io/helidon/common/testing/http/junit5/package-info.java
Patch:
@@ -19,7 +19,7 @@
  * <p>
  * Hamcrest Matchers:
  * <ul>
- *     <li>{@link io.helidon.common.testing.http.HttpHeaderMatcher}</li>
+ *     <li>{@link io.helidon.common.testing.http.junit5.HttpHeaderMatcher}</li>
  * </ul>
  */
-package io.helidon.common.testing.http;
+package io.helidon.common.testing.http.junit5;

File: common/testing/http-junit5/src/main/java/module-info.java
Patch:
@@ -23,5 +23,5 @@
     requires hamcrest.all;
     requires org.junit.jupiter.api;
 
-    exports io.helidon.common.testing.http;
+    exports io.helidon.common.testing.http.junit5;
 }
\ No newline at end of file

File: nima/testing/junit5/webserver/src/main/java/io/helidon/nima/testing/junit5/webserver/HelidonServerJunitExtension.java
Patch:
@@ -26,6 +26,7 @@
 
 import io.helidon.common.LazyValue;
 import io.helidon.common.LogConfig;
+import io.helidon.common.testing.http.junit5.SocketHttpClient;
 import io.helidon.nima.webclient.WebClient;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webserver.ListenerConfiguration;
@@ -55,7 +56,7 @@ class HelidonServerJunitExtension implements BeforeAllCallback,
     private Class<?> testClass;
     private WebServer server;
     private final LazyValue<SocketHttpClient> socketHttpClient =
-            LazyValue.create(() -> new SocketHttpClient("localhost", server.port()));
+            LazyValue.create(() -> SocketHttpClient.create(server.port()));
     private final LazyValue<Http1Client> httpClient =
             LazyValue.create(() -> WebClient.builder()
                     .baseUri("http://localhost:" + server.port())

File: nima/testing/junit5/webserver/src/test/java/io/helidon/nima/testing/junit5/webserver/TestServerTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.net.URI;
 
+import io.helidon.common.testing.http.junit5.SocketHttpClient;
 import io.helidon.nima.webclient.http1.Http1Client;
 import io.helidon.nima.webserver.WebServer;
 

File: nima/tests/benchmark/techempower/src/test/java/io/helidon/nima/tests/benchmark/techempower/BenchmarkTestBase.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.RepeatedTest;
 
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 

File: nima/tests/integration/http2/client/src/test/java/io/helidon/nima/tests/integration/http2/client/PostTest.java
Patch:
@@ -44,7 +44,7 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 

File: nima/tests/integration/observe/health/src/test/java/io/helidon/nima/tests/integration/observe/health/ObserveHealthTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static io.helidon.health.HealthCheckResponse.Status.DOWN;
 import static io.helidon.health.HealthCheckResponse.Status.UP;
 import static org.hamcrest.CoreMatchers.is;

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/GetTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.common.http.Http.Header.CONTENT_LENGTH;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/HttpPipelineTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
-import io.helidon.nima.testing.junit5.webserver.SocketHttpClient;
+import io.helidon.common.testing.http.junit5.SocketHttpClient;
 import io.helidon.nima.webserver.http.HttpRules;
 
 import static org.hamcrest.CoreMatchers.containsString;

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/KeepAliveTest.java
Patch:
@@ -32,7 +32,7 @@
 
 import org.junit.jupiter.api.RepeatedTest;
 
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/MaxPayloadSizeTest.java
Patch:
@@ -34,7 +34,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/MultiPortTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.junit.jupiter.api.Assertions.assertAll;

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/PostTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.common.http.Http.Header.CONTENT_LENGTH;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertThrows;

File: nima/tests/integration/webserver/webserver/src/test/java/io/helidon/nima/tests/integration/server/XssServerTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.nima.testing.junit5.webserver.ServerTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;
-import io.helidon.nima.testing.junit5.webserver.SocketHttpClient;
+import io.helidon.common.testing.http.junit5.SocketHttpClient;
 import io.helidon.nima.webserver.HtmlEncoder;
 import io.helidon.nima.webserver.http.HttpRules;
 

File: nima/webserver/cors/src/test/java/io/helidon/nima/webserver/cors/AbstractCorsTest.java
Patch:
@@ -34,8 +34,8 @@
 import static io.helidon.common.http.Http.Header.ACCESS_CONTROL_REQUEST_HEADERS;
 import static io.helidon.common.http.Http.Header.ACCESS_CONTROL_REQUEST_METHOD;
 import static io.helidon.common.http.Http.Header.ORIGIN;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.noHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.noHeader;
 import static io.helidon.nima.webserver.cors.CorsTestServices.SERVICE_1;
 import static io.helidon.nima.webserver.cors.CorsTestServices.SERVICE_2;
 import static org.hamcrest.CoreMatchers.containsString;

File: nima/webserver/cors/src/test/java/io/helidon/nima/webserver/cors/CorsTest.java
Patch:
@@ -26,8 +26,8 @@
 import static io.helidon.common.http.Http.Header.ACCESS_CONTROL_ALLOW_METHODS;
 import static io.helidon.common.http.Http.Header.ACCESS_CONTROL_ALLOW_ORIGIN;
 import static io.helidon.common.http.Http.Header.ACCESS_CONTROL_MAX_AGE;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.noHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.noHeader;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 

File: nima/webserver/cors/src/test/java/io/helidon/nima/webserver/cors/TestDefaultCorsSupport.java
Patch:
@@ -27,8 +27,8 @@
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.common.http.Http.Header.ACCESS_CONTROL_ALLOW_ORIGIN;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.noHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.noHeader;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 

File: nima/webserver/cors/src/test/java/io/helidon/nima/webserver/cors/TestHandlerRegistration.java
Patch:
@@ -28,7 +28,7 @@
 import static io.helidon.common.http.Http.Header.ACCESS_CONTROL_REQUEST_HEADERS;
 import static io.helidon.common.http.Http.Header.ACCESS_CONTROL_REQUEST_METHOD;
 import static io.helidon.common.http.Http.Header.ORIGIN;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;

File: nima/webserver/static-content/src/test/java/io/helidon/nima/webserver/staticcontent/StaticContentTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.helidon.common.http.Http;
 import io.helidon.common.http.Http.Header;
-import io.helidon.common.testing.http.HttpHeaderMatcher;
+import io.helidon.common.testing.http.junit5.HttpHeaderMatcher;
 import io.helidon.nima.testing.junit5.webserver.DirectClient;
 import io.helidon.nima.testing.junit5.webserver.RoutingTest;
 import io.helidon.nima.testing.junit5.webserver.SetUpRoute;

File: reactive/webclient/webclient/src/test/java/io/helidon/reactive/webclient/ClientRequestHeadersImplTest.java
Patch:
@@ -36,8 +36,8 @@
 import static io.helidon.common.http.Http.Header.IF_MODIFIED_SINCE;
 import static io.helidon.common.http.Http.Header.IF_NONE_MATCH;
 import static io.helidon.common.http.Http.Header.IF_UNMODIFIED_SINCE;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.noHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.noHeader;
 import static io.helidon.common.testing.junit5.OptionalMatcher.optionalEmpty;
 import static io.helidon.common.testing.junit5.OptionalMatcher.optionalValue;
 import static org.hamcrest.MatcherAssert.assertThat;

File: reactive/webserver/webserver/src/test/java/io/helidon/reactive/webserver/CloseConnectionTest.java
Patch:
@@ -27,7 +27,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Multi;
 import io.helidon.common.reactive.Single;
-import io.helidon.reactive.webserver.utils.SocketHttpClient;
+import io.helidon.common.testing.http.junit5.SocketHttpClient;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -84,11 +84,11 @@ void tearDown() {
 
     @Test
     void closeManually() throws Exception {
-        try (SocketHttpClient c = new SocketHttpClient(webServer)) {
+        try (SocketHttpClient c = SocketHttpClient.create(webServer.port())) {
             c.request(Http.Method.GET);
             String result = c.receive();
             Single.create(closedConnectionFuture, true).await(TIME_OUT);
-            SocketHttpClient.assertConnectionIsClosed(c);
+            c.assertConnectionIsClosed();
             assertThat(result, containsString("item0"));
             assertThat(result, not(containsString("item9")));
         }

File: reactive/webserver/webserver/src/test/java/io/helidon/reactive/webserver/CloseConnectionV2ApiTest.java
Patch:
@@ -29,7 +29,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Multi;
 import io.helidon.common.reactive.Single;
-import io.helidon.reactive.webserver.utils.SocketHttpClient;
+import io.helidon.common.testing.http.junit5.SocketHttpClient;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -87,11 +87,11 @@ void tearDown() {
 
     @Test
     void closeManually() throws Exception {
-        try (SocketHttpClient c = new SocketHttpClient(webServer)) {
+        try (SocketHttpClient c = SocketHttpClient.create(webServer.port())) {
             c.request(Http.Method.GET);
             String result = c.receive();
             Single.create(closedConnectionFuture, true).await(TIME_OUT);
-            SocketHttpClient.assertConnectionIsClosed(c);
+            c.assertConnectionIsClosed();
             assertThat(result, containsString("item0"));
             assertThat(result, not(containsString("item9")));
         }

File: reactive/webserver/webserver/src/test/java/io/helidon/reactive/webserver/KeepAliveTest.java
Patch:
@@ -35,8 +35,8 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.RepeatedTest;
 
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
-import static io.helidon.common.testing.http.HttpHeaderMatcher.noHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.noHeader;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 

File: reactive/webserver/webserver/src/test/java/io/helidon/reactive/webserver/MultiPortTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeaderValue;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeaderValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.junit.jupiter.api.Assertions.fail;

File: reactive/webserver/webserver/src/test/java/io/helidon/reactive/webserver/ResponseTest.java
Patch:
@@ -41,7 +41,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.testing.http.HttpHeaderMatcher.hasHeader;
+import static io.helidon.common.testing.http.junit5.HttpHeaderMatcher.hasHeader;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.MatcherAssert.assertThat;

File: bundles/jersey/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,6 @@
  * WebServer Jersey Bundle module.
  */
 module io.helidon.bundles.jersey {
-    requires transitive io.helidon.webserver;
-    requires transitive io.helidon.webserver.jersey;
+    requires transitive io.helidon.reactive.webserver;
+    requires transitive io.helidon.reactive.webserver.jersey;
 }

File: bundles/webserver/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,6 @@
  * WebServer Bundle module.
  */
 module io.helidon.bundles.webserver {
-    requires transitive io.helidon.webserver;
-    requires transitive io.helidon.media.jsonp;
+    requires transitive io.helidon.reactive.webserver;
+    requires transitive io.helidon.reactive.media.jsonp;
 }

File: common/uri/src/main/java/io/helidon/common/uri/UriPathHelper.java
Patch:
@@ -28,7 +28,7 @@ private UriPathHelper() {
      * @param path raw path (may include path parameters)
      * @return raw path without path parameters
      */
-    static String stripPathParams(String path) {
+    static String stripMatrixParams(String path) {
         int i = path.indexOf(';');
 
         if (i == -1) {

File: common/uri/src/main/java/io/helidon/common/uri/UriPathNoParam.java
Patch:
@@ -59,7 +59,7 @@ public String path() {
     }
 
     @Override
-    public Parameters pathParameters() {
+    public Parameters matrixParameters() {
         return EMPTY_PARAMS;
     }
 

File: common/uri/src/test/java/io/helidon/common/uri/UriPathSegmentTest.java
Patch:
@@ -32,7 +32,7 @@ void testSimplePath() {
         assertThat(segment.rawValue(), is(rawPath));
         assertThat(segment.value(), is(rawPath));
         assertThat(segment.rawValueNoParams(), is(rawPath));
-        assertThat(segment.pathParameters().isEmpty(), is(true));
+        assertThat(segment.matrixParameters().isEmpty(), is(true));
     }
 
     @Test
@@ -44,7 +44,7 @@ void testPathWithParams() {
         assertThat(segment.value(), is("plaintext"));
         assertThat(segment.rawValueNoParams(), is("plaintext"));
 
-        Parameters params = segment.pathParameters();
+        Parameters params = segment.matrixParameters();
         assertThat(params.isEmpty(), is(false));
         assertThat(params.value("v"), is("1.0"));
         assertThat(params.value("a"), is("b"));
@@ -61,7 +61,7 @@ void testPathWithParamsAndEncoding() {
         assertThat(segment.value(), is("pla i/n;text"));
         assertThat(segment.rawValueNoParams(), is("pla%20i%2Fn%3Btext"));
 
-        Parameters params = segment.pathParameters();
+        Parameters params = segment.matrixParameters();
         assertThat(params.isEmpty(), is(false));
         assertThat(params.value("v"), is("1.0"));
         assertThat(params.value("a"), is("b"));

File: config/config/src/main/java/io/helidon/config/DirectoryConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -148,8 +148,6 @@ public Optional<NodeContent> load() throws ConfigException {
     }
 
     /**
-     * {@inheritDoc}
-     * <p>
      * A fluent API builder for {@link io.helidon.config.DirectoryConfigSource}.
      */
     public static final class Builder extends AbstractConfigSourceBuilder<Builder, Path>

File: examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/InitializeDb.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,8 +16,8 @@
 package io.helidon.examples.dbclient.pokemons;
 
 import io.helidon.common.reactive.Single;
-import io.helidon.dbclient.DbClient;
-import io.helidon.dbclient.DbExecute;
+import io.helidon.reactive.dbclient.DbClient;
+import io.helidon.reactive.dbclient.DbExecute;
 
 /**
  * Initialize JDBC database schema and populate it with sample data.

File: examples/employee-app/src/test/java/io/helidon/service/employee/MainTest.java
Patch:
@@ -20,8 +20,8 @@
 
 import io.helidon.common.http.Http;
 import io.helidon.common.media.type.MediaTypes;
-import io.helidon.webclient.WebClient;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webclient.WebClient;
+import io.helidon.reactive.webserver.WebServer;
 
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;

File: examples/graphql/basics/src/main/java/io/helidon/examples/graphql/basics/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,8 @@
 import java.util.List;
 
 import io.helidon.graphql.server.GraphQlSupport;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 import graphql.schema.DataFetcher;
 import graphql.schema.GraphQLSchema;

File: examples/grpc/metrics/src/main/java/io/helidon/grpc/examples/metrics/Server.java
Patch:
@@ -25,8 +25,8 @@
 import io.helidon.grpc.server.GrpcServer;
 import io.helidon.grpc.server.GrpcServerConfiguration;
 import io.helidon.metrics.serviceapi.MetricsSupport;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 /**
  * A basic example of a Helidon gRPC server.

File: examples/integrations/oci/atp-reactive/src/main/java/io/helidon/examples/integrations/oci/atp/reactive/OciAtpMain.java
Patch:
@@ -20,8 +20,8 @@
 
 import io.helidon.common.LogConfig;
 import io.helidon.config.Config;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 import com.oracle.bmc.ConfigFileReader;
 import com.oracle.bmc.auth.AuthenticationDetailsProvider;

File: examples/integrations/oci/atp-reactive/src/main/java/module-info.java
Patch:
@@ -23,9 +23,9 @@
 
     requires io.helidon.common.http;
     requires io.helidon.common.reactive;
-    requires io.helidon.dbclient;
-    requires io.helidon.dbclient.jdbc;
-    requires io.helidon.webserver;
+    requires io.helidon.reactive.dbclient;
+    requires io.helidon.reactive.dbclient.jdbc;
+    requires io.helidon.reactive.webserver;
 
     requires oci.java.sdk.shaded.full;
 

File: examples/integrations/oci/objectstorage-reactive/src/main/java/io/helidon/examples/integrations/oci/objecstorage/reactive/OciObjectStorageMain.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.helidon.common.LogConfig;
 import io.helidon.config.Config;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 import com.oracle.bmc.ConfigFileReader;
 import com.oracle.bmc.auth.AuthenticationDetailsProvider;

File: examples/integrations/oci/objectstorage-reactive/src/main/java/module-info.java
Patch:
@@ -21,7 +21,7 @@
     requires java.logging;
 
     requires io.helidon.common.http;
-    requires io.helidon.webserver;
+    requires io.helidon.reactive.webserver;
 
     requires oci.java.sdk.shaded.full;
 

File: examples/integrations/oci/vault-reactive/src/main/java/io/helidon/examples/integrations/oci/vault/reactive/OciVaultMain.java
Patch:
@@ -20,8 +20,8 @@
 
 import io.helidon.common.LogConfig;
 import io.helidon.config.Config;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 import com.oracle.bmc.ConfigFileReader;
 import com.oracle.bmc.auth.AuthenticationDetailsProvider;

File: examples/integrations/oci/vault-reactive/src/main/java/module-info.java
Patch:
@@ -18,7 +18,7 @@
  * Example of OCI Vault integration in a reactive application.
  */
 module io.helidon.examples.integrations.oci.vault.reactive {
-    requires io.helidon.webserver;
+    requires io.helidon.reactive.webserver;
 
     requires oci.java.sdk.shaded.full;
 

File: examples/integrations/vault/hcp-reactive/src/main/java/io/helidon/examples/integrations/vault/hcp/reactive/ReactiveVaultMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,8 +27,8 @@
 import io.helidon.integrations.vault.secrets.kv2.Kv2SecretsRx;
 import io.helidon.integrations.vault.secrets.transit.TransitSecretsRx;
 import io.helidon.integrations.vault.sys.SysRx;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.file;

File: examples/jbatch/src/main/java/io/helidon/jbatch/example/BatchResource.java
Patch:
@@ -35,7 +35,6 @@
 import jakarta.ws.rs.Produces;
 import jakarta.ws.rs.core.MediaType;
 
-
 import static jakarta.batch.runtime.BatchRuntime.getJobOperator;
 
 

File: examples/jbatch/src/test/java/io/helidon/examples/jbatch/TestJBatchEndpoint.java
Patch:
@@ -16,12 +16,12 @@
 package io.helidon.examples.jbatch;
 
 import io.helidon.microprofile.tests.junit5.HelidonTest;
-import org.junit.jupiter.api.Test;
 
 import jakarta.inject.Inject;
 import jakarta.json.JsonObject;
 import jakarta.ws.rs.client.WebTarget;
 import jakarta.ws.rs.core.MediaType;
+import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;

File: examples/logging/jul/src/main/java/io/helidon/examples/logging/jul/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,8 +26,8 @@
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.logging.common.HelidonMdc;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 /**
  * Main class of the example, runnable from command line.

File: examples/logging/log4j/src/main/java/io/helidon/examples/logging/log4j/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,8 +24,8 @@
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.logging.common.HelidonMdc;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;

File: examples/logging/logback-aot/src/main/java/io/helidon/examples/logging/logback/aot/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,8 +24,8 @@
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.logging.common.HelidonMdc;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.joran.JoranConfigurator;

File: examples/logging/slf4j/src/main/java/io/helidon/examples/logging/slf4j/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,8 +24,8 @@
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.logging.common.HelidonMdc;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: examples/media/multipart/src/main/java/io/helidon/examples/media/multipart/FileStorage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,8 +21,8 @@
 import java.nio.file.Path;
 import java.util.stream.Stream;
 
-import io.helidon.webserver.BadRequestException;
-import io.helidon.webserver.NotFoundException;
+import io.helidon.reactive.webserver.BadRequestException;
+import io.helidon.reactive.webserver.NotFoundException;
 
 /**
  * Simple bean to managed a directory based storage.

File: examples/messaging/jms-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.logging.LogManager;
 
 import io.helidon.config.Config;
-import io.helidon.webserver.WebServer;
-import io.helidon.webserver.staticcontent.StaticContentSupport;
-import io.helidon.webserver.websocket.WebSocketRouting;
+import io.helidon.reactive.webserver.WebServer;
+import io.helidon.reactive.webserver.staticcontent.StaticContentSupport;
+import io.helidon.reactive.webserver.websocket.WebSocketRouting;
 
 import jakarta.websocket.server.ServerEndpointConfig;
 

File: examples/messaging/jms-websocket-se/src/main/java/io/helidon/examples/messaging/se/SendingService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,8 @@
 import io.helidon.messaging.Messaging;
 import io.helidon.messaging.connectors.jms.JmsConnector;
 import io.helidon.messaging.connectors.jms.Type;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.Service;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.Service;
 
 import org.apache.activemq.jndi.ActiveMQInitialContextFactory;
 

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -18,9 +18,9 @@
 
 import io.helidon.common.LogConfig;
 import io.helidon.config.Config;
-import io.helidon.webserver.WebServer;
-import io.helidon.webserver.staticcontent.StaticContentSupport;
-import io.helidon.webserver.websocket.WebSocketRouting;
+import io.helidon.reactive.webserver.WebServer;
+import io.helidon.reactive.webserver.staticcontent.StaticContentSupport;
+import io.helidon.reactive.webserver.websocket.WebSocketRouting;
 
 import jakarta.websocket.server.ServerEndpointConfig;
 

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/SendingService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,8 +21,8 @@
 import io.helidon.messaging.Emitter;
 import io.helidon.messaging.Messaging;
 import io.helidon.messaging.connectors.kafka.KafkaConnector;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.Service;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.Service;
 
 import org.apache.kafka.common.serialization.StringSerializer;
 

File: examples/metrics/exemplar/src/main/java/io/helidon/examples/metrics/exemplar/Main.java
Patch:
@@ -19,11 +19,11 @@
 import io.helidon.common.LogConfig;
 import io.helidon.common.reactive.Single;
 import io.helidon.config.Config;
-import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.serviceapi.MetricsSupport;
+import io.helidon.reactive.media.jsonp.JsonpSupport;
+import io.helidon.reactive.webserver.Routing;
+import io.helidon.reactive.webserver.WebServer;
 import io.helidon.tracing.TracerBuilder;
-import io.helidon.webserver.Routing;
-import io.helidon.webserver.WebServer;
 
 /**
  * The application main class.

File: microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java
Patch:
@@ -288,9 +288,10 @@ private void registerPathStaticContent(Config config) {
         StaticContentSupport.FileSystemBuilder pBuilder = StaticContentSupport.builder(config.get("location")
                                                                                                .as(Path.class)
                                                                                                .get());
-        config.get("welcome")
+        pBuilder.welcomeFileName(config.get("welcome")
                 .asString()
-                .ifPresent(pBuilder::welcomeFileName);
+                .orElse("index.html"));
+
         StaticContentSupport staticContent = pBuilder.build();
 
         if (context.exists()) {

File: common/buffers/src/main/java/io/helidon/common/buffers/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,6 @@
  */
 
 /**
- * Common infrastructure useful in JUnit tests across multiple projects.
+ * Byte buffers and byte operations.
  */
-package io.helidon.config.test.infra;
+package io.helidon.common.buffers;

File: common/media-type/src/main/java/io/helidon/common/media/type/BuiltInsDetector.java
Patch:
@@ -30,15 +30,15 @@
  */
 class BuiltInsDetector implements MediaTypeDetector {
     private static final System.Logger LOGGER = System.getLogger(BuiltInsDetector.class.getName());
+    private static final Map<String, MediaType> MAPPINGS = new HashMap<>();
 
-    private static final Map<String, String> MAPPINGS = new HashMap<>();
     static {
         try (InputStream builtIns = MediaTypes.class.getResourceAsStream("default-media-types.properties")) {
             if (null != builtIns) {
                 Properties properties = new Properties();
                 properties.load(builtIns);
                 for (String name : properties.stringPropertyNames()) {
-                    MAPPINGS.put(name, properties.getProperty(name));
+                    MAPPINGS.put(name, MediaTypes.create(properties.getProperty(name)));
                 }
             } else {
                 LOGGER.log(Level.ERROR, "Failed to find default media type mapping resource");
@@ -49,7 +49,7 @@ class BuiltInsDetector implements MediaTypeDetector {
     }
 
     @Override
-    public Optional<String> detectExtensionType(String fileSuffix) {
+    public Optional<MediaType> detectExtensionType(String fileSuffix) {
         return Optional.ofNullable(MAPPINGS.get(fileSuffix));
     }
 }

File: common/media-type/src/main/java/io/helidon/common/media/type/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,5 +16,6 @@
 /**
  * Support for mapping resources to media types, be it files, URIs or URLs.
  * @see io.helidon.common.media.type.MediaTypes
+ * @see io.helidon.common.media.type.MediaType
  */
 package io.helidon.common.media.type;

File: common/testing/junit5/src/main/java/io/helidon/common/testing/junit5/RestoreSystemPropertiesExt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.test.infra;
+package io.helidon.common.testing.junit5;
 
 import java.util.Properties;
 

File: config/config/src/main/java/io/helidon/config/ConfigMappers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -631,11 +631,11 @@ public static Period toPeriod(String stringValue) {
      */
     public static Map<String, String> toMap(Config config) {
         if (config.isLeaf()) {
-            return new StringMap(config.key().toString(), config.asString().get());
+            return new StringMap(Config.Key.unescapeName(config.key().toString()), config.asString().get());
         } else {
             return new StringMap(config.traverse()
                                          .filter(Config::isLeaf)
-                                         .map(node -> new AbstractMap.SimpleEntry<>(node.key().toString(), node.asString().get()))
+                                         .map(node -> new AbstractMap.SimpleEntry<>(Config.Key.unescapeName(node.key().toString()), node.asString().get()))
                                          .collect(Collectors.toSet()));
         }
     }

File: config/hocon/src/test/java/io/helidon/config/hocon/HoconConfigParserTest.java
Patch:
@@ -202,11 +202,11 @@ public void testConfigKeyEscapedNameComplex() {
         assertThat(keys, containsInAnyOrder("oracle~1com", "oracle~1com.prop1", "oracle~1com.prop2",
                                             "oracle", "oracle.com", "oracle.cz"));
 
-        //map
+        //map, expect keys to be unescaped
         Map<String, String> map = config.asMap().get();
         assertThat(map.keySet(), hasSize(4));
-        assertThat(map.get("oracle~1com.prop1"), is("val1"));
-        assertThat(map.get("oracle~1com.prop2"), is("val2"));
+        assertThat(map.get("oracle.com.prop1"), is("val1"));
+        assertThat(map.get("oracle.com.prop2"), is("val2"));
         assertThat(map.get("oracle.com"), is("1"));
         assertThat(map.get("oracle.cz"), is("2"));
     }

File: config/tests/integration-tests/src/test/java/io/helidon/config/tests/AbstractComplexConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -565,8 +565,8 @@ public void testConfigKeyEscapedNameComplex() {
         //map
         Map<String, String> map = config.asMap().get();
         assertThat(map.keySet(), hasSize(4));
-        assertThat(map.get("oracle~1com.prop1"), is("val1"));
-        assertThat(map.get("oracle~1com.prop2"), is("val2"));
+        assertThat(map.get("oracle.com.prop1"), is("val1"));
+        assertThat(map.get("oracle.com.prop2"), is("val2"));
         assertThat(map.get("oracle.com"), is("1"));
         assertThat(map.get("oracle.cz"), is("2"));
     }

File: common/common/src/main/java/io/helidon/common/Builder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public interface Builder<B extends Builder<B, T>, T> extends Supplier<T> {
     T build();
 
     /**
-     * Update the builder in a fluen API way.
+     * Update the builder in a fluent API way.
      *
      * @param consumer consumer of the builder instance
      * @return updated builder instance

File: common/common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,6 +18,7 @@
  * Helidon Common library.
  */
 module io.helidon.common {
+    // used only by LogConfig
     requires java.logging;
 
     exports io.helidon.common;

File: common/common/src/test/java/io/helidon/common/ErrorsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 package io.helidon.common;
 
 import java.util.Optional;
-import java.util.logging.Logger;
 
 import org.junit.jupiter.api.Test;
 
@@ -31,7 +30,7 @@
  * Unit test for {@link Errors}.
  */
 class ErrorsTest {
-    private static final Logger LOGGER = Logger.getLogger(ErrorsTest.class.getName());
+    private static final System.Logger LOGGER = System.getLogger(ErrorsTest.class.getName());
 
     private static void assertErrorMessage(Optional<Errors.ErrorMessage> actual, String expected, String message) {
         assertThat(actual, not(Optional.empty()));

File: common/common/src/test/java/io/helidon/common/GenericTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,7 +46,7 @@ void testNoTypeArguments() {
 
     @Test
     void testIsClass() {
-        GenericType<String> type = new GenericType<String>(){};
+        GenericType<String> type = GenericType.STRING;
         assertThat(type.isClass(), is(true));
 
         GenericType<List<String>> type2 = new GenericType<List<String>>(){};

File: common/common/src/test/java/io/helidon/common/ServiceInterface.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.common.serviceloader;
+package io.helidon.common;
 
 /**
  * Testing Java Service loader service interface.

File: common/configurable/src/main/java/io/helidon/common/configurable/ObserverManager.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.helidon.common.configurable;
 
+import java.lang.System.Logger.Level;
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Map;
@@ -23,8 +24,6 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Supplier;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
 import io.helidon.common.LazyValue;
@@ -46,7 +45,7 @@
  */
 class ObserverManager {
 
-    private static final Logger LOGGER = Logger.getLogger(ObserverManager.class.getName());
+    private static final System.Logger LOGGER = System.getLogger(ObserverManager.class.getName());
 
     private static final LazyValue<List<ExecutorServiceSupplierObserver>> OBSERVERS = LazyValue
             .create(ObserverManager::loadObservers);

File: common/configurable/src/main/java/module-info.java
Patch:
@@ -20,7 +20,6 @@
  * @see io.helidon.common.configurable.Resource
  */
 module io.helidon.common.configurable {
-    requires java.logging;
     requires java.management;
     requires transitive io.helidon.config;
     requires io.helidon.common;

File: common/context/src/main/java/io/helidon/common/context/ContextAwareExecutorImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,8 +29,8 @@
 import java.util.concurrent.TimeoutException;
 import java.util.stream.Collectors;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.context.spi.DataPropagationProvider;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 
 class ContextAwareExecutorImpl implements ContextAwareExecutorService {
 

File: common/context/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,9 +18,7 @@
  * Helidon Common Context library.
  */
 module io.helidon.common.context {
-    requires java.logging;
     requires io.helidon.common;
-    requires io.helidon.common.serviceloader;
 
     exports io.helidon.common.context;
     exports io.helidon.common.context.spi;

File: common/http/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,6 @@
  * Helidon Common classes for HTTP server and client.
  */
 module io.helidon.common.http {
-    requires java.logging;
     requires io.helidon.common;
     requires io.helidon.common.context;
     requires io.helidon.common.reactive;

File: common/key-util/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,6 @@
  * Utilities for PKI configuration and loading of certificates and keys.
  */
 module io.helidon.common.pki {
-    requires java.logging;
-
     requires transitive io.helidon.common;
     requires transitive io.helidon.config;
     requires transitive io.helidon.common.configurable;

File: common/mapper/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,9 +18,7 @@
  * Helidon Common Mapper.
  */
 module io.helidon.common.mapper {
-    requires java.logging;
     requires transitive io.helidon.common;
-    requires transitive io.helidon.common.serviceloader;
 
     exports io.helidon.common.mapper;
     exports io.helidon.common.mapper.spi;

File: common/media-type/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,7 @@
  * Helidon Common Media Type.
  */
 module io.helidon.common.media.type {
-    requires java.logging;
-    requires io.helidon.common.serviceloader;
+    requires io.helidon.common;
 
     exports io.helidon.common.media.type;
     exports io.helidon.common.media.type.spi;

File: config/config-mp/src/main/java/io/helidon/config/mp/MpEnvironmentVariablesMetaConfigProvider.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.Set;
 
-import io.helidon.common.Prioritized;
 import io.helidon.config.Config;
 import io.helidon.config.mp.spi.MpMetaConfigProvider;
 

File: config/config-mp/src/main/java/io/helidon/config/mp/MpHelidonSource.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;
 import io.helidon.config.spi.ConfigContent;

File: config/config-mp/src/main/java/io/helidon/config/mp/MpPropertiesMetaConfigProvider.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.Set;
 
-import io.helidon.common.Prioritized;
 import io.helidon.config.Config;
 import io.helidon.config.mp.spi.MpMetaConfigProvider;
 

File: config/config-mp/src/main/java/io/helidon/config/mp/MpSystemPropertiesMetaConfigProvider.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.Set;
 
-import io.helidon.common.Prioritized;
 import io.helidon.config.Config;
 import io.helidon.config.mp.spi.MpMetaConfigProvider;
 

File: config/config-mp/src/main/java/io/helidon/config/mp/Prioritized.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.common;
+package io.helidon.config.mp;
 
 /**
  * Interface to define that this class is a class with priority.

File: config/config-mp/src/main/java/module-info.java
Patch:
@@ -23,7 +23,6 @@
     requires io.helidon.config;
     requires transitive microprofile.config.api;
     requires jakarta.annotation;
-    requires io.helidon.common.serviceloader;
     requires static io.helidon.config.metadata;
 
     exports io.helidon.config.mp;

File: config/config/src/main/java/io/helidon/config/MetaConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 import java.util.function.Function;
 import java.util.logging.Logger;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.spi.ChangeWatcher;
 import io.helidon.config.spi.ConfigParser;
 import io.helidon.config.spi.ConfigSource;

File: config/config/src/main/java/module-info.java
Patch:
@@ -30,8 +30,6 @@
     requires transitive io.helidon.common;
     requires transitive io.helidon.common.media.type;
 
-    requires io.helidon.common.serviceloader;
-
     exports io.helidon.config;
     exports io.helidon.config.spi;
 

File: config/hocon-mp/src/main/java/io/helidon/config/hocon/mp/HoconMpMetaConfigProvider.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.List;
 import java.util.Set;
 
-import io.helidon.common.Prioritized;
 import io.helidon.config.Config;
 import io.helidon.config.mp.MpMetaConfigUtils;
+import io.helidon.config.mp.Prioritized;
 import io.helidon.config.mp.spi.MpMetaConfigProvider;
 
 import org.eclipse.microprofile.config.spi.ConfigSource;

File: config/hocon/src/main/java/io/helidon/config/hocon/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,9 +23,9 @@
  * The parser implementation supports {@link java.util.ServiceLoader}, i.e. {@link io.helidon.config.Config.Builder}
  * can automatically load and register HOCON ConfigParser instance,
  * if not {@link io.helidon.config.Config.Builder#disableParserServices() disabled}.
- * Priority of the parser to be used by {@link io.helidon.config.Config.Builder},
+ * Weight of the parser to be used by {@link io.helidon.config.Config.Builder},
  * if loaded automatically as a {@link java.util.ServiceLoader service},
- * is {@value io.helidon.config.hocon.HoconConfigParser#PRIORITY}.
+ * is {@value io.helidon.config.hocon.HoconConfigParser#WEIGHT}.
  * And of course it can be {@link io.helidon.config.Config.Builder#addParser(io.helidon.config.spi.ConfigParser)
  * registered programmatically} using {@link io.helidon.config.hocon.HoconConfigParserBuilder builder API}.
  * <p>

File: config/yaml-mp/src/main/java/io/helidon/config/yaml/mp/YamlMetaConfigProvider.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.List;
 import java.util.Set;
 
-import io.helidon.common.Prioritized;
 import io.helidon.config.Config;
 import io.helidon.config.mp.MpMetaConfigUtils;
+import io.helidon.config.mp.Prioritized;
 import io.helidon.config.mp.spi.MpMetaConfigProvider;
 
 import org.eclipse.microprofile.config.spi.ConfigSource;

File: config/yaml/src/main/java/io/helidon/config/yaml/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
  * if not {@link io.helidon.config.Config.Builder#disableParserServices() disabled}.
  * Priority of the {@code YamlConfigParser} to be used by {@link io.helidon.config.Config.Builder},
  * if loaded automatically as a {@link java.util.ServiceLoader service},
- * is {@value io.helidon.config.yaml.YamlConfigParser#PRIORITY}.
+ * is {@value io.helidon.config.yaml.YamlConfigParser#WEIGHT}.
  * And of course it can be {@link io.helidon.config.Config.Builder#addParser(io.helidon.config.spi.ConfigParser)
  * registered programmatically} using {@link io.helidon.config.yaml.YamlConfigParser#create()}.
  * <p>

File: dbclient/dbclient/src/main/java/io/helidon/dbclient/DbClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,10 +21,10 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.mapper.MapperManager;
 import io.helidon.common.reactive.Single;
 import io.helidon.common.reactive.Subscribable;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.dbclient.spi.DbClientProvider;
 import io.helidon.dbclient.spi.DbClientProviderBuilder;

File: dbclient/dbclient/src/main/java/io/helidon/dbclient/DbClientProviderLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,7 @@
 import java.util.Optional;
 import java.util.ServiceLoader;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.dbclient.spi.DbClientProvider;
 
 /**

File: dbclient/dbclient/src/main/java/module-info.java
Patch:
@@ -26,7 +26,6 @@
     requires transitive io.helidon.common.context;
     requires transitive io.helidon.common.mapper;
     requires transitive io.helidon.common.reactive;
-    requires transitive io.helidon.common.serviceloader;
 
     exports io.helidon.dbclient;
     exports io.helidon.dbclient.spi;

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/ConnectionPool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.dbclient.jdbc.spi.HikariCpExtensionProvider;
 

File: integrations/vault/cdi/src/main/java/io/helidon/integrations/vault/cdi/VaultCdiExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
 import java.util.ServiceLoader;
 import java.util.Set;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.integrations.vault.spi.InjectionProvider;

File: integrations/vault/cdi/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,6 @@
     requires microprofile.config.api;
 
     requires io.helidon.integrations.vault;
-    requires io.helidon.common.serviceloader;
     requires io.helidon.microprofile.cdi;
 
     exports io.helidon.integrations.vault.cdi;

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/Vault.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,8 +21,8 @@
 import java.util.function.Consumer;
 import java.util.logging.Logger;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.http.Http;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.faulttolerance.FaultTolerance;
 import io.helidon.faulttolerance.FtHandler;

File: integrations/vault/vault/src/main/java/io/helidon/integrations/vault/VaultImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,8 @@
 import java.util.ServiceLoader;
 import java.util.logging.Logger;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.LazyValue;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.integrations.common.rest.RestApi;
 import io.helidon.integrations.vault.spi.AuthMethodProvider;

File: integrations/vault/vault/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,6 @@
     requires io.helidon.webclient;
     requires io.helidon.media.jsonp;
     requires io.helidon.faulttolerance;
-    requires io.helidon.common.serviceloader;
     requires io.helidon.integrations.common.rest;
 
     exports io.helidon.integrations.vault;

File: logging/common/src/main/java/io/helidon/logging/common/HelidonMdc.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 import java.util.Optional;
 import java.util.ServiceLoader;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.logging.common.spi.MdcProvider;
 
 /**

File: logging/common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
  * Helidon logging.
  */
 module io.helidon.logging.common {
-    requires io.helidon.common.serviceloader;
+    requires io.helidon.common;
 
     exports io.helidon.logging.common;
     exports io.helidon.logging.common.spi;

File: metrics/api/src/main/java/io/helidon/metrics/api/RegistryFactoryManager.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.LazyValue;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.metrics.api.spi.RegistryFactoryProvider;
 
@@ -78,7 +78,7 @@ class RegistryFactoryManager {
 
     private static RegistryFactoryProvider loadRegistryFactoryProvider() {
         RegistryFactoryProvider provider = HelidonServiceLoader.builder(ServiceLoader.load(RegistryFactoryProvider.class))
-                .addService(NO_OP_FACTORY_PROVIDER, Integer.MAX_VALUE)
+                .addService(NO_OP_FACTORY_PROVIDER, 0)
                 .build()
                 .asList()
                 .get(0);

File: metrics/api/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
     requires java.logging;
 
     requires io.helidon.common.http;
-    requires io.helidon.common.serviceloader;
     requires transitive io.helidon.config;
 
     requires transitive microprofile.metrics.api;

File: metrics/metrics/src/main/java/io/helidon/metrics/ExemplarServiceManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 
 /**
  * Loads the {@link ExemplarService} instance (if any) with the most urgent priority.

File: metrics/metrics/src/main/java/module-info.java
Patch:
@@ -20,7 +20,6 @@
     requires java.logging;
 
     requires io.helidon.common;
-    requires io.helidon.common.serviceloader;
     requires io.helidon.webserver.cors;
     requires transitive io.helidon.metrics.api;
     requires transitive io.helidon.metrics.serviceapi;

File: metrics/service-api/src/main/java/io/helidon/metrics/serviceapi/MetricsSupportManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.LazyValue;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.metrics.api.MetricsSettings;
 import io.helidon.metrics.serviceapi.spi.MetricsSupportProvider;
 import io.helidon.servicecommon.rest.RestServiceSettings;
@@ -46,7 +46,7 @@ private MetricsSupportManager() {
 
     private static MetricsSupportProvider<?, ?> loadMetricsSupportProvider() {
         MetricsSupportProvider<?, ?> provider = HelidonServiceLoader.builder(ServiceLoader.load(MetricsSupportProvider.class))
-                .addService(new MinimalMetricsSupportProviderImpl(), Integer.MAX_VALUE)
+                .addService(new MinimalMetricsSupportProviderImpl(), 0)
                 .build()
                 .asList()
                 .get(0);

File: metrics/service-api/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 
     requires java.logging;
 
-    requires io.helidon.common.serviceloader;
     requires io.helidon.webserver;
     requires io.helidon.config.metadata;
     requires io.helidon.servicecommon.rest;

File: microprofile/config/src/main/java/module-info.java
Patch:
@@ -28,7 +28,6 @@
     requires transitive microprofile.config.api;
     requires io.helidon.config.mp;
     requires jakarta.annotation;
-    requires io.helidon.common.serviceloader;
 
     exports io.helidon.microprofile.config;
 

File: microprofile/grpc/core/src/main/java/io/helidon/microprofile/grpc/core/AbstractServiceBuilder.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.grpc.core.MarshallerSupplier;
 
 import jakarta.annotation.Priority;

File: microprofile/grpc/core/src/main/java/module-info.java
Patch:
@@ -23,7 +23,6 @@
     requires transitive io.helidon.grpc.core;
     requires transitive io.helidon.grpc.client;
     requires transitive io.helidon.microprofile.config;
-    requires io.helidon.common.serviceloader;
 
     requires transitive jakarta.cdi;
 

File: microprofile/grpc/server/src/main/java/io/helidon/microprofile/grpc/server/AnnotatedServiceConfigurer.java
Patch:
@@ -25,7 +25,7 @@
  * Implementations of this class are called by the {@link GrpcServiceBuilder} when
  * it builds a {@link ServiceDescriptor} from an annotated class. Instances of
  * {@link AnnotatedServiceConfigurer} are discovered using the
- * {@link io.helidon.common.serviceloader.HelidonServiceLoader}. This service
+ * {@link io.helidon.common.HelidonServiceLoader}. This service
  * loader supports ordering of configurers.
  */
 @FunctionalInterface

File: microprofile/grpc/server/src/main/java/io/helidon/microprofile/grpc/server/GrpcServerCdiExtension.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.config.mp.MpConfig;
 import io.helidon.grpc.server.GrpcRouting;

File: microprofile/grpc/server/src/main/java/io/helidon/microprofile/grpc/server/GrpcServiceBuilder.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.stream.Collectors;
 
 import io.helidon.common.Builder;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.grpc.core.ContextKeys;
 import io.helidon.grpc.core.MethodHandler;
 import io.helidon.grpc.server.MethodDescriptor;

File: microprofile/grpc/server/src/main/java/module-info.java
Patch:
@@ -23,7 +23,6 @@
 
     requires transitive io.helidon.grpc.server;
     requires transitive io.helidon.microprofile.grpc.core;
-    requires io.helidon.common.serviceloader;
     requires io.helidon.microprofile.server;
     requires io.helidon.config.mp;
 

File: microprofile/health/src/main/java/io/helidon/microprofile/health/HealthCdiExtension.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.health.HealthSupport;
 import io.helidon.health.common.BuiltInHealthCheck;

File: microprofile/health/src/main/java/io/helidon/microprofile/health/HealthCheckProvider.java
Patch:
@@ -25,7 +25,7 @@
  * A provider of {@link HealthCheck} instances.
  * <p>
  * Instances of {@link HealthCheckProvider} are discovered by the {@link io.helidon.microprofile.health.HealthCdiExtension}
- * using the {@link io.helidon.common.serviceloader.HelidonServiceLoader} and all of the
+ * using the {@link io.helidon.common.HelidonServiceLoader} and all of the
  * {@link HealthCheck} instances are added to the health endpoint.
  */
 public interface HealthCheckProvider {

File: microprofile/health/src/main/java/module-info.java
Patch:
@@ -24,7 +24,6 @@
     requires java.management;
 
     requires io.helidon.common;
-    requires io.helidon.common.serviceloader;
     requires io.helidon.health;
     requires io.helidon.health.common;
     requires io.helidon.servicecommon.restcdi;

File: microprofile/lra/jax-rs/src/main/java/io/helidon/microprofile/lra/CoordinatorLocatorService.java
Patch:
@@ -24,8 +24,8 @@
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.Reflected;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.lra.coordinator.client.CoordinatorClient;
 
 import jakarta.enterprise.context.ApplicationScoped;

File: microprofile/lra/jax-rs/src/main/java/module-info.java
Patch:
@@ -33,7 +33,6 @@
     requires jakarta.interceptor.api;
     requires jersey.common;
     requires io.helidon.lra.coordinator.client;
-    requires io.helidon.common.serviceloader;
 
     uses io.helidon.lra.coordinator.client.CoordinatorClient;
 

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ChannelRouter.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
-import java.util.logging.Logger;
 
 import io.helidon.common.Errors;
 import io.helidon.config.Config;
@@ -43,7 +42,7 @@
  * Orchestrator for all found channels, methods and connectors.
  */
 class ChannelRouter {
-    private static final Logger LOGGER = Logger.getLogger(ChannelRouter.class.getName());
+    private static final System.Logger LOGGER = System.getLogger(ChannelRouter.class.getName());
 
     private final Errors.Collector errors = Errors.collector();
     private final Config config = (Config) ConfigProvider.getConfig();

File: microprofile/metrics/src/main/java/module-info.java
Patch:
@@ -31,9 +31,9 @@
     requires io.helidon.servicecommon.restcdi;
     requires io.helidon.microprofile.server;
     requires io.helidon.microprofile.config;
-    requires io.helidon.common.serviceloader;
     requires transitive io.helidon.metrics.api;
     requires transitive io.helidon.metrics.serviceapi;
+    requires io.helidon.webserver;
 
     requires transitive microprofile.config.api;
     requires microprofile.metrics.api;

File: microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java
Patch:
@@ -39,10 +39,10 @@
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
-import io.helidon.common.Prioritized;
 import io.helidon.common.configurable.ServerThreadPoolSupplier;
 import io.helidon.common.http.Http;
 import io.helidon.config.Config;
+import io.helidon.config.mp.Prioritized;
 import io.helidon.microprofile.cdi.BuildTimeStart;
 import io.helidon.microprofile.cdi.RuntimeStart;
 import io.helidon.webserver.KeyPerformanceIndicatorSupport;

File: microprofile/server/src/main/java/module-info.java
Patch:
@@ -35,7 +35,6 @@
     requires io.helidon.jersey.media.jsonp;
 
     requires java.logging;
-    requires io.helidon.common.serviceloader;
     requires io.helidon.webserver.staticcontent;
 
     // there is now a hardcoded dependency on Weld, to configure additional bean defining annotation

File: security/abac/policy/src/main/java/io/helidon/security/abac/policy/PolicyValidator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.Errors;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.ProviderRequest;

File: security/abac/policy/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 module io.helidon.security.abac.policy {
     requires io.helidon.security.providers.abac;
     requires java.logging;
-    requires io.helidon.common.serviceloader;
 
     exports io.helidon.security.abac.policy;
     exports io.helidon.security.abac.policy.spi;

File: security/integration/jersey-client/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
     requires transitive io.helidon.security;
     requires transitive io.helidon.security.providers.common;
     requires transitive io.helidon.security.util;
-    requires transitive io.helidon.common.serviceloader;
+
     requires transitive jakarta.ws.rs;
 
     requires io.helidon.common.context;

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SecurityFilter.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Logger;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.jersey.common.InvokedResource;
 import io.helidon.security.AuditEvent;

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SecurityFilterCommon.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.ServiceLoader;
 import java.util.logging.Logger;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.AuthorizationResponse;

File: security/integration/jersey/src/main/java/module-info.java
Patch:
@@ -25,7 +25,6 @@
     requires transitive io.helidon.security.annotations;
     requires transitive io.helidon.security.providers.common;
     requires transitive io.helidon.security.util;
-    requires transitive io.helidon.common.serviceloader;
     requires transitive jakarta.ws.rs;
 
     requires io.helidon.common.context;

File: security/jwt/src/main/java/io/helidon/security/jwt/JwtHeaders.java
Patch:
@@ -230,7 +230,6 @@ public Optional<List<String>> audience() {
      */
     public static class Builder implements io.helidon.common.Builder<Builder, JwtHeaders> {
         private static final GenericType<List<String>> STRING_LIST_TYPE = new GenericType<List<String>>() { };
-        private static final GenericType<String> STRING_TYPE = GenericType.create(String.class);
 
         private static final Map<String, KnownField<? extends Object>> KNOWN_HEADER_CLAIMS;
         private static final KnownField<String> TYPE_FIELD = KnownField.create("typ", Builder::type);
@@ -487,7 +486,7 @@ private KnownField(String name,
         }
 
         static KnownField<String> create(String name, BiConsumer<Builder, String> valueConsumer) {
-            return new KnownField<>(name, Builder.STRING_TYPE, valueConsumer, KnownField::jsonToString);
+            return new KnownField<>(name, GenericType.STRING, valueConsumer, KnownField::jsonToString);
         }
 
         private static String jsonToString(JsonValue jsonValue) {

File: security/jwt/src/test/java/io/helidon/security/jwt/JwtTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.List;
 import java.util.Optional;
 import java.util.UUID;
-import java.util.logging.Logger;
 
 import io.helidon.common.Errors;
 import io.helidon.security.jwt.jwk.JwkRSA;
@@ -35,7 +34,7 @@
  * Unit test for {@link Jwt}.
  */
 public class JwtTest {
-    private static final Logger LOGGER = Logger.getLogger(JwtTest.class.getName());
+    private static final System.Logger LOGGER = System.getLogger(JwtTest.class.getName());
 
     @Test
     public void testBuilderBasicJwt() {

File: security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProvider.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.stream.Collectors;
 
 import io.helidon.common.Errors;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;

File: security/providers/abac/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
     requires transitive io.helidon.config;
     requires transitive io.helidon.common;
     requires transitive io.helidon.security;
-    requires io.helidon.common.serviceloader;
     requires static io.helidon.config.metadata;
 
     exports io.helidon.security.providers.abac;

File: security/providers/common/src/main/java/io/helidon/security/providers/common/spi/AnnotationAnalyzer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpBasicAuthProvider.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.config.metadata.Configured;
 import io.helidon.config.metadata.ConfiguredOption;

File: security/providers/http-auth/src/main/java/module-info.java
Patch:
@@ -20,7 +20,6 @@
 module io.helidon.security.providers.httpauth {
     requires io.helidon.config;
     requires io.helidon.common;
-    requires io.helidon.common.serviceloader;
     requires io.helidon.security;
     requires io.helidon.security.providers.common;
     requires io.helidon.security.util;

File: security/security/src/main/java/io/helidon/security/Security.java
Patch:
@@ -38,9 +38,9 @@
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.configurable.ThreadPoolSupplier;
 import io.helidon.common.reactive.Single;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigValue;
 import io.helidon.config.metadata.Configured;

File: security/security/src/main/java/module-info.java
Patch:
@@ -33,7 +33,6 @@
 
     requires io.helidon.security.util;
     requires io.helidon.common.context;
-    requires io.helidon.common.serviceloader;
 
     exports io.helidon.security;
     exports io.helidon.security.spi;

File: tracing/jaeger/src/main/java/io/helidon/tracing/jaeger/JaegerTracerProvider.java
Patch:
@@ -17,20 +17,20 @@
 
 import java.util.Optional;
 
-import io.helidon.common.Prioritized;
+import io.helidon.common.Weight;
+import io.helidon.common.Weighted;
 import io.helidon.tracing.Span;
 import io.helidon.tracing.Tracer;
 import io.helidon.tracing.opentelemetry.HelidonOpenTelemetry;
 import io.helidon.tracing.opentelemetry.OpenTelemetryTracerProvider;
 import io.helidon.tracing.spi.TracerProvider;
 
 import io.opentelemetry.context.Context;
-import jakarta.annotation.Priority;
 
 /**
  * Jaeger java service.
  */
-@Priority(Prioritized.DEFAULT_PRIORITY)
+@Weight(Weighted.DEFAULT_WEIGHT)
 public class JaegerTracerProvider implements TracerProvider {
     @Override
     public Tracer global() {

File: tracing/jersey-client/src/main/java/io/helidon/tracing/jersey/client/ClientTracingFilter.java
Patch:
@@ -24,8 +24,8 @@
 import java.util.Optional;
 import java.util.ServiceLoader;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.context.Contexts;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.tracing.HeaderConsumer;
 import io.helidon.tracing.HeaderProvider;
 import io.helidon.tracing.Scope;

File: tracing/jersey-client/src/main/java/module-info.java
Patch:
@@ -32,7 +32,6 @@
     requires io.helidon.common;
     requires io.helidon.common.context;
     requires io.helidon.webclient.jaxrs;
-    requires io.helidon.common.serviceloader;
 
     exports io.helidon.tracing.jersey.client;
 

File: tracing/opentelemetry/src/main/java/io/helidon/tracing/opentelemetry/OpenTelemetryTracerProvider.java
Patch:
@@ -21,7 +21,8 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.common.LazyValue;
-import io.helidon.common.Prioritized;
+import io.helidon.common.Weight;
+import io.helidon.common.Weighted;
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.tracing.Span;
@@ -31,12 +32,11 @@
 
 import io.opentelemetry.api.GlobalOpenTelemetry;
 import io.opentelemetry.api.OpenTelemetry;
-import jakarta.annotation.Priority;
 
 /**
  * Service loader provider implementation for {@link io.helidon.tracing.spi.TracerProvider}.
  */
-@Priority(Prioritized.DEFAULT_PRIORITY + 1000)
+@Weight(Weighted.DEFAULT_WEIGHT - 50)
 public class OpenTelemetryTracerProvider implements TracerProvider {
     private static final System.Logger LOGGER = System.getLogger(OpenTelemetryTracerProvider.class.getName());
 

File: tracing/opentracing/src/main/java/io/helidon/tracing/opentracing/OpenTracingProviderHelper.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.ServiceLoader;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.tracing.opentracing.spi.OpenTracingProvider;
 
 /**
@@ -26,7 +26,7 @@
 final class OpenTracingProviderHelper {
     private static final OpenTracingProvider TRACER_PROVIDER =
             HelidonServiceLoader.builder(ServiceLoader.load(OpenTracingProvider.class))
-                    .addService(NoOpBuilder::create, 100000)
+                    .addService(NoOpBuilder::create, 0)
                     .build()
                     .iterator()
                     .next();

File: tracing/opentracing/src/main/java/io/helidon/tracing/opentracing/OpenTracingTracerProvider.java
Patch:
@@ -17,21 +17,21 @@
 
 import java.util.Optional;
 
-import io.helidon.common.Prioritized;
+import io.helidon.common.Weight;
+import io.helidon.common.Weighted;
 import io.helidon.tracing.Span;
 import io.helidon.tracing.Tracer;
 import io.helidon.tracing.TracerBuilder;
 import io.helidon.tracing.spi.TracerProvider;
 
 import io.opentracing.noop.NoopSpan;
 import io.opentracing.util.GlobalTracer;
-import jakarta.annotation.Priority;
 
 /**
  * {@link java.util.ServiceLoader} service implementation of {@link io.helidon.tracing.spi.TracerProvider} for Open Tracing
  * tracers.
  */
-@Priority(Prioritized.DEFAULT_PRIORITY + 2000)
+@Weight(Weighted.DEFAULT_WEIGHT - 50) // low weight, so it is easy to override
 public class OpenTracingTracerProvider implements TracerProvider {
     @Override
     public TracerBuilder<?> createBuilder() {

File: tracing/opentracing/src/main/java/module-info.java
Patch:
@@ -27,7 +27,6 @@
     requires io.opentracing.util;
     requires io.opentracing.api;
     requires io.opentracing.noop;
-    requires io.helidon.common.serviceloader;
 
     uses io.helidon.tracing.opentracing.spi.OpenTracingProvider;
     provides io.helidon.tracing.spi.TracerProvider with io.helidon.tracing.opentracing.OpenTracingTracerProvider;

File: tracing/tracing/src/main/java/io/helidon/tracing/TracerProviderHelper.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Optional;
 import java.util.ServiceLoader;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.tracing.spi.TracerProvider;
 
 /**
@@ -33,7 +33,7 @@ final class TracerProviderHelper {
         TracerProvider provider = null;
         try {
             List<TracerProvider> allProviders = HelidonServiceLoader.builder(ServiceLoader.load(TracerProvider.class))
-                    .addService(new NoOpTracerProvider(), 100000)
+                    .addService(new NoOpTracerProvider(), 0)
                     .build()
                     .asList();
 

File: tracing/tracing/src/main/java/module-info.java
Patch:
@@ -21,7 +21,6 @@
  */
 module io.helidon.tracing {
     requires io.helidon.common;
-    requires io.helidon.common.serviceloader;
     requires io.helidon.config;
 
     requires static io.helidon.config.metadata;

File: tracing/zipkin/src/main/java/io/helidon/tracing/zipkin/ZipkinTracerProvider.java
Patch:
@@ -20,19 +20,19 @@
 import java.util.Optional;
 import java.util.logging.Logger;
 
-import io.helidon.common.Prioritized;
+import io.helidon.common.Weight;
+import io.helidon.common.Weighted;
 import io.helidon.tracing.HeaderConsumer;
 import io.helidon.tracing.HeaderProvider;
 import io.helidon.tracing.opentracing.spi.OpenTracingProvider;
 
 import io.opentracing.SpanContext;
 import io.opentracing.Tracer;
-import jakarta.annotation.Priority;
 
 /**
  * Zipkin java service.
  */
-@Priority(Prioritized.DEFAULT_PRIORITY)
+@Weight(Weighted.DEFAULT_WEIGHT)
 public class ZipkinTracerProvider implements OpenTracingProvider {
     // original Zipkin headers (comes from old name of Zipkin - "BigBrotherBird", or "B3")
     static final String X_B3_TRACE_ID = "x-b3-traceid";

File: webclient/webclient/src/main/java/io/helidon/webclient/WebClient.java
Patch:
@@ -26,9 +26,9 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.context.Context;
 import io.helidon.common.http.Http;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.media.common.MediaContext;
 import io.helidon.media.common.MediaContextBuilder;

File: webclient/webclient/src/main/java/io/helidon/webclient/WebClientRequestBuilderImpl.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.GenericType;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.common.context.spi.DataPropagationProvider;
@@ -54,7 +55,6 @@
 import io.helidon.common.http.MediaType;
 import io.helidon.common.http.Parameters;
 import io.helidon.common.reactive.Single;
-import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.media.common.MessageBodyReadableContent;
 import io.helidon.media.common.MessageBodyReaderContext;
 import io.helidon.media.common.MessageBodyWriterContext;

File: webclient/webclient/src/main/java/module-info.java
Patch:
@@ -28,7 +28,6 @@
     requires transitive io.helidon.config;
     requires transitive io.helidon.media.common;
     requires io.helidon.common.pki;
-    requires io.helidon.common.serviceloader;
 
     requires io.netty.buffer;
     requires io.netty.codec;

File: webserver/webserver/src/main/java/io/helidon/webserver/UpgradeManager.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.ServiceLoader;
 import java.util.function.Function;
 
-import io.helidon.common.serviceloader.HelidonServiceLoader;
+import io.helidon.common.HelidonServiceLoader;
 import io.helidon.webserver.spi.UpgradeCodecProvider;
 
 import io.netty.channel.ChannelHandler;

File: messaging/connectors/jms-shim/src/main/java/io/helidon/messaging/connectors/jms/shim/JakartaSession.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+     * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -85,7 +85,7 @@ public TextMessage createTextMessage() throws JMSException {
 
     @Override
     public TextMessage createTextMessage(String text) throws JMSException {
-        return JakartaJms.create((javax.jms.TextMessage) call(delegate::createTextMessage));
+        return JakartaJms.create((javax.jms.TextMessage) call(() -> delegate.createTextMessage(text)));
     }
 
     @Override

File: dbclient/jdbc/src/test/java/io/helidon/dbclient/jdbc/JdbcClientMultipleDMLOperationTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.dbclient.jdbc;
 

File: examples/jbatch/src/main/java/io/helidon/jbatch/example/BatchResource.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.jbatch.example;
 

File: examples/jbatch/src/main/java/io/helidon/jbatch/example/HelidonExecutorServiceProvider.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.jbatch.example;
 

File: examples/jbatch/src/main/java/io/helidon/jbatch/example/jobs/MyBatchlet.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.jbatch.example.jobs;
 

File: examples/jbatch/src/main/java/io/helidon/jbatch/example/jobs/MyInputRecord.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.jbatch.example.jobs;
 

File: examples/jbatch/src/main/java/io/helidon/jbatch/example/jobs/MyItemProcessor.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.jbatch.example.jobs;
 

File: examples/jbatch/src/main/java/io/helidon/jbatch/example/jobs/MyItemReader.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.jbatch.example.jobs;
 

File: examples/jbatch/src/main/java/io/helidon/jbatch/example/jobs/MyItemWriter.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.jbatch.example.jobs;
 

File: examples/jbatch/src/main/java/io/helidon/jbatch/example/jobs/MyOutputRecord.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.jbatch.example.jobs;
 

File: examples/jbatch/src/test/java/io/helidon/examples/jbatch/TestJBatchEndpoint.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.examples.jbatch;
 

File: examples/microprofile/bean-validation/src/test/java/io/helidon/tests/integration/bean/validation/TestValidationEndpoint.java
Patch:
@@ -12,16 +12,15 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.tests.integration.bean.validation;
 
 import io.helidon.microprofile.tests.junit5.HelidonTest;
-import org.junit.jupiter.api.Test;
 
 import jakarta.inject.Inject;
 import jakarta.ws.rs.client.WebTarget;
 import jakarta.ws.rs.core.Response;
+import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 

File: examples/microprofile/http-status-count-mp/src/main/java/io/helidon/examples/mp/httpstatuscount/GreetResource.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.examples.mp.httpstatuscount;
 

File: examples/microprofile/http-status-count-mp/src/main/java/io/helidon/examples/mp/httpstatuscount/GreetingProvider.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.examples.mp.httpstatuscount;
 

File: examples/microprofile/http-status-count-mp/src/main/java/io/helidon/examples/mp/httpstatuscount/HttpStatusMetricFilter.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.examples.mp.httpstatuscount;
 

File: examples/microprofile/http-status-count-mp/src/main/java/io/helidon/examples/mp/httpstatuscount/Message.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.examples.mp.httpstatuscount;
 

File: examples/microprofile/http-status-count-mp/src/main/java/io/helidon/examples/mp/httpstatuscount/SimpleGreetResource.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.examples.mp.httpstatuscount;
 

File: examples/microprofile/http-status-count-mp/src/main/java/io/helidon/examples/mp/httpstatuscount/package-info.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 /**
  * HTTP status count example.

File: health/health/src/test/java/io/helidon/health/HealthServerTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.health;
 

File: jersey/client/src/main/java/io/helidon/jersey/client/ClientBuilderListener.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.jersey.client;

File: jersey/client/src/main/java/io/helidon/jersey/client/ExecutorProvider.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.jersey.client;

File: jersey/client/src/main/java/io/helidon/jersey/client/ScheduledExecutorProvider.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.jersey.client;

File: jersey/client/src/main/java/io/helidon/jersey/client/package-info.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 /**

File: jersey/client/src/test/java/io/helidon/jersey/client/ContextTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.jersey.client;

File: lra/coordinator/client/spi/src/main/java/io/helidon/lra/coordinator/client/PropagatedHeaders.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.lra.coordinator.client;

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/ConfigHelper.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.messaging.connectors.jms;
 

File: messaging/connectors/jms/src/test/java/io/helidon/messaging/connectors/jms/ConfigTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.messaging.connectors.jms;

File: messaging/connectors/mock/src/main/java/io/helidon/messaging/connectors/mock/MockConnector.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.messaging.connectors.mock;
 

File: messaging/connectors/mock/src/main/java/io/helidon/messaging/connectors/mock/MockIncoming.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.messaging.connectors.mock;

File: messaging/connectors/mock/src/main/java/io/helidon/messaging/connectors/mock/MockOutgoing.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.messaging.connectors.mock;

File: messaging/connectors/mock/src/main/java/io/helidon/messaging/connectors/mock/MockSubscriber.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.messaging.connectors.mock;

File: messaging/connectors/mock/src/main/java/io/helidon/messaging/connectors/mock/TestConnector.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.messaging.connectors.mock;

File: messaging/connectors/mock/src/main/java/io/helidon/messaging/connectors/mock/package-info.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 /**

File: metrics/metrics/src/test/java/io/helidon/metrics/OutputUnitConversionTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.metrics;
 

File: metrics/metrics/src/test/java/io/helidon/metrics/TestStorageUnitsScaling.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.metrics;
 

File: microprofile/cors/src/main/java/io/helidon/microprofile/cors/CorsCdiExtension.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.microprofile.cors;
 

File: microprofile/cors/src/test/java/io/helidon/microprofile/cors/BaseCrossOriginTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.microprofile.cors;
 

File: microprofile/cors/src/test/java/io/helidon/microprofile/cors/TestAnnotation.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.microprofile.cors;
 
@@ -24,7 +23,6 @@
 import jakarta.ws.rs.PUT;
 import jakarta.ws.rs.Path;
 import jakarta.ws.rs.core.Response;
-
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;

File: microprofile/cors/src/test/java/io/helidon/microprofile/cors/TestFilterAutoDiscoverable.java
Patch:
@@ -12,14 +12,12 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.microprofile.cors;
 
 import jakarta.ws.rs.ConstrainedTo;
 import jakarta.ws.rs.RuntimeType;
 import jakarta.ws.rs.core.FeatureContext;
-
 import org.glassfish.jersey.internal.spi.AutoDiscoverable;
 
 @ConstrainedTo(RuntimeType.SERVER)

File: microprofile/lra/jax-rs/src/test/java/io/helidon/microprofile/lra/CoordinatorHeaderPropagationTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.lra;
 
 import java.net.URI;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/AckCtx.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.util.concurrent.CompletableFuture;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/BufferedEmitter.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.util.concurrent.CompletableFuture;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ChannelInternal.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.lang.annotation.Retention;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/FailEmitter.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import org.eclipse.microprofile.reactive.messaging.OnOverflow;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/FormerHealthProbe.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.util.HashMap;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/IncomingMember.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import org.reactivestreams.Subscriber;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/IncomingPublisher.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/LatestEmitter.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.util.concurrent.CompletableFuture;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/Literals.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.io.Serial;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/MessagingChannelProcessor.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/NoneEmitter.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.util.Objects;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/OutgoingEmitter.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.util.concurrent.locks.Lock;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/OutgoingMember.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import org.reactivestreams.Publisher;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/PlainEmitter.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.util.concurrent.CompletableFuture;

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ThrowEmitter.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import org.eclipse.microprofile.reactive.messaging.OnOverflow;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/EmitterTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.util.ArrayList;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/ExtendedMessage.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.microprofile.messaging;
 

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/FlowSupportTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.time.Duration;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/MockConnectorTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.time.Duration;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/MultiSupportTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.time.Duration;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/UncaughtExceptionTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging;
 
 import java.time.Duration;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/Processor2ConnectorTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging.connector;
 
 import java.time.Duration;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/EmptyIncomingChannelBean.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging.inner;
 
 import org.eclipse.microprofile.reactive.messaging.Incoming;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/EmptyOutgoingChannelBean.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging.inner;
 
 import io.helidon.microprofile.messaging.AssertThrowException;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/InvalidOutgoingChannelBean.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging.inner;
 
 import io.helidon.microprofile.messaging.AssertThrowException;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/channel/ChannelWithoutUpstream.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging.inner.channel;
 
 import jakarta.enterprise.context.ApplicationScoped;

File: microprofile/messaging/metrics/src/main/java/io/helidon/microprofile/messaging/metrics/MessagingCounter.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.microprofile.messaging.metrics;
 
 import io.helidon.microprofile.messaging.MessagingChannelProcessor;

File: microprofile/messaging/metrics/src/main/java/io/helidon/microprofile/messaging/metrics/package-info.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 /**
  * Metrics counter for messaging channels.
  *

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricAnnotationDiscoveryBase.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.microprofile.metrics;
 

File: tests/integration/mp-bean-validation/src/test/java/io/helidon/tests/integration/bean/validation/TestValidationEndpoint.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.tests.integration.bean.validation;
 

File: tests/integration/webserver/upgrade/src/main/java/io/helidon/integration/webserver/upgrade/AnnotatedEndpoint.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.integration.webserver.upgrade;

File: tests/integration/webserver/upgrade/src/main/java/io/helidon/integration/webserver/upgrade/ConfiguredEndpoint.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.integration.webserver.upgrade;

File: tests/integration/webserver/upgrade/src/main/java/io/helidon/integration/webserver/upgrade/Main.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.integration.webserver.upgrade;

File: tests/integration/webserver/upgrade/src/main/java/module-info.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 /**

File: tests/integration/webserver/upgrade/src/test/java/io/helidon/integration/webserver/upgrade/test/CompressionTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.integration.webserver.upgrade.test;import java.io.BufferedReader;

File: tests/integration/webserver/upgrade/src/test/java/io/helidon/integration/webserver/upgrade/test/UpgradeCodecsCompositionTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.integration.webserver.upgrade.test;import java.io.IOException;

File: tests/integration/webserver/upgrade/src/test/java/module-info.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 /**

File: webclient/webclient/src/main/java/io/helidon/webclient/NettyChannel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webclient;
 
 import java.util.concurrent.CompletableFuture;

File: webclient/webclient/src/test/java/io/helidon/webclient/OrderOfWritesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webclient;
 
 import java.io.IOException;

File: webserver/cors/src/test/java/io/helidon/webserver/cors/CompareOriginsTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.webserver.cors;
 

File: webserver/http2/src/main/java/io/helidon/webserver/http2/Http2Route.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.webserver.http2;

File: webserver/http2/src/main/java/io/helidon/webserver/http2/Http2UpgradeCodecProvider.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.webserver.http2;

File: webserver/http2/src/main/java/io/helidon/webserver/http2/InboundHttp2ToHttpAdapterWrapper.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.webserver.http2;

File: webserver/http2/src/main/java/io/helidon/webserver/http2/ResetStreamChannelAdapter.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.http2;
 
 import io.netty.channel.ChannelHandlerContext;

File: webserver/http2/src/main/java/io/helidon/webserver/http2/package-info.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 /**
  * HTTP/2 support for Helidon webserver.
  */

File: webserver/http2/src/main/java/module-info.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 import io.helidon.webserver.spi.UpgradeCodecProvider;
 
 module io.helidon.webserver.http2 {

File: webserver/http2/src/test/java/io/helidon/webserver/http2/test/H2Test.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.http2.test;
 
 import java.io.IOException;

File: webserver/http2/src/test/java/module-info.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 open module helidon.webserver.http2.test {
 
     requires io.helidon.webserver;

File: webserver/webserver/src/main/java/io/helidon/webserver/Http1Route.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver;
 
 import java.util.List;

File: webserver/webserver/src/main/java/io/helidon/webserver/HttpRoute.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver;
 
 import java.util.List;

File: webserver/webserver/src/main/java/io/helidon/webserver/NettyChannel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver;
 
 import java.util.concurrent.CompletableFuture;

File: webserver/webserver/src/main/java/io/helidon/webserver/UpgradeManager.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver;
 
 import java.util.ArrayList;

File: webserver/webserver/src/main/java/io/helidon/webserver/spi/UpgradeCodecProvider.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.spi;
 
 import java.util.Optional;

File: webserver/webserver/src/main/java/io/helidon/webserver/spi/package-info.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 /**
  * SPI to provide extended capabilities for webserver.
  */

File: webserver/webserver/src/test/java/io/helidon/webserver/CacheHeadersTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.webserver;
 

File: webserver/webserver/src/test/java/io/helidon/webserver/KeepAliveTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver;
 
 import java.nio.ByteBuffer;

File: webserver/webserver/src/test/java/io/helidon/webserver/KeepAliveV2ApiTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver;
 
 import java.nio.ByteBuffer;

File: webserver/webserver/src/test/java/io/helidon/webserver/OrderOfWritesTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver;
 
 import java.nio.ByteBuffer;

File: webserver/webserver/src/test/java/io/helidon/webserver/ReqEntityAnalyzedTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver;
 
 import java.nio.ByteBuffer;

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/WebSocketHandler.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket;
 
 import java.io.IOException;

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/WebSocketRoute.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket;
 
 import jakarta.websocket.server.ServerEndpointConfig;

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/WebSocketRouting.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket;
 
 import java.util.ArrayList;

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/WebSocketUpgradeCodec.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket;
 
 import java.util.Collection;

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/WebsocketUpgradeCodecProvider.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket;
 
 import java.util.Optional;

File: webserver/websocket/src/main/java/io/helidon/webserver/websocket/package-info.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 /**
  * WebSocket support for Helidon webserver.
  */

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/AnnotatedEndpoint.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.webserver.websocket.test;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/ClientEndpoint.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import jakarta.websocket.CloseReason;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/ConfiguredEndpoint.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.webserver.websocket.test;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/Decoder.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import jakarta.websocket.DecodeException;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/DoubleEchoEndpoint.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.io.IOException;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/DoubleEchoEndpointProg.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.util.logging.Logger;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/EchoClient.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.io.IOException;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/EchoEndpoint.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.io.IOException;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/EchoEndpointProg.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.util.logging.Logger;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/EchoServiceProgTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.net.URI;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/EchoServiceTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.net.URI;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/RoutingProgTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.net.URI;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/RoutingTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.net.URI;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/TyrusSupportBaseTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.time.Duration;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/UpgradeFailureTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.io.IOException;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/UppercaseCodec.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.util.logging.Logger;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/WSTest.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 package io.helidon.webserver.websocket.test;
 
 import java.io.IOException;

File: webserver/websocket/src/test/java/module-info.java
Patch:
@@ -12,9 +12,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
-
 /**
  * WebSocket support for Helidon webserver tests.
  */

File: config/config/src/main/java/io/helidon/config/FileSystemWatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -209,7 +209,7 @@ private Monitor(Consumer<ChangeEvent<Path>> listener,
             this.watchServiceModifiers = watchServiceModifiers;
             this.fileExists = Files.exists(target);
             this.watchingFile = !Files.isDirectory(target);
-            this.watchedDir = watchingFile ? target.getParent() : target;
+            this.watchedDir = watchingFile ? parentDir(target) : target;
         }
 
         @SuppressWarnings("unchecked")
@@ -342,7 +342,7 @@ private Path target(Path path) throws IOException {
         }
 
         private Path parentDir(Path path) {
-            Path parent = path.getParent();
+            Path parent = path.toAbsolutePath().getParent();
             if (parent == null) {
                 throw new ConfigException(
                         String.format("Cannot find parent directory for '%s' to register watch service.", path));

File: config/config-mp/src/main/java/io/helidon/config/mp/MpConfigBuilder.java
Patch:
@@ -58,6 +58,7 @@
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
+import io.helidon.common.Builder;
 import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.common.serviceloader.Priorities;
 import io.helidon.config.ConfigException;
@@ -79,8 +80,8 @@
 /**
  * Configuration builder.
  */
-@Configured(prefix = "mp.config")
-class MpConfigBuilder implements ConfigBuilder {
+@Configured(prefix = "mp.config", root = true)
+class MpConfigBuilder implements Builder<MpConfigBuilder, Config>, ConfigBuilder {
     private static final Logger LOGGER = Logger.getLogger(MpConfigBuilder.class.getName());
     private static final String DEFAULT_CONFIG_SOURCE = "META-INF/microprofile-config.properties";
 

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/Retry.java
Patch:
@@ -390,7 +390,8 @@ public Optional<Long> nextDelayMillis(long firstCallMillis, long lastDelay, int
         /**
          * Fluent API builder for {@link io.helidon.faulttolerance.Retry.DelayingRetryPolicy}.
          */
-        @Configured
+        @Configured(provides = RetryPolicy.class, description = "A retry policy that prolongs the delays between retries by "
+                + "a defined factor.")
         public static class Builder implements io.helidon.common.Builder<Builder, DelayingRetryPolicy> {
             private int calls = 3;
             private double delayFactor = 2;
@@ -548,7 +549,7 @@ public Optional<Long> nextDelayMillis(long firstCallNanos, long lastDelay, int c
         /**
          * Fluent API builder for {@link io.helidon.faulttolerance.Retry.JitterRetryPolicy}.
          */
-        @Configured
+        @Configured(provides = RetryPolicy.class)
         public static class Builder implements io.helidon.common.Builder<Builder, JitterRetryPolicy> {
             private int calls = 3;
             private Duration delay = Duration.ofMillis(200);

File: microprofile/server/src/main/java/io/helidon/microprofile/server/Server.java
Patch:
@@ -128,8 +128,8 @@ static Builder builder() {
     /**
      * Builder to build {@link Server} instance.
      */
-    @Configured(prefix = "server", description = "Configuration of Helidon Microprofile Server")
-    final class Builder {
+    @Configured(prefix = "server", description = "Configuration of Helidon Microprofile Server", root = true)
+    final class Builder implements io.helidon.common.Builder<Builder, Server> {
         private static final Logger STARTUP_LOGGER = Logger.getLogger("io.helidon.microprofile.startup.builder");
 
         private final List<Class<?>> resourceClasses = new LinkedList<>();
@@ -172,6 +172,7 @@ private Builder() {
          * @return Server instance to be started
          * @throws MpException in case the server fails to be created
          */
+        @Override
         public Server build() {
             STARTUP_LOGGER.entering(Builder.class.getName(), "build");
 

File: jersey/connector/src/main/java/io/helidon/jersey/connector/HelidonConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -203,7 +203,8 @@ public String getReasonPhrase() {
 
         final CompletionStage<InputStream> stream = HelidonStructures.hasEntity(webClientResponse)
                 ? webClientResponse.content().as(InputStream.class)
-                : CompletableFuture.supplyAsync(() -> NO_CONTENT_INPUT_STREAM);
+                : CompletableFuture.supplyAsync(() -> NO_CONTENT_INPUT_STREAM,
+                                                executorServiceKeeper.getExecutorService(requestContext));
 
         return stream.thenApply((a) -> {
             responseContext.setEntityStream(new FilterInputStream(a) {

File: examples/grpc/basics/src/main/java/io/helidon/grpc/examples/basics/HealthClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,15 +56,15 @@ public static void main(String[] args) {
         HealthCheckResponse response = grpcClient.blockingUnary("Check",
                 HealthCheckRequest.newBuilder().setService("GreetService").build());
 
-        System.out.println(response);
+        System.out.println("GreetService response -> " + response);
 
         // query the health of a non-existent service
         try {
             grpcClient.blockingUnary("Check",
                     HealthCheckRequest.newBuilder().setService("FooService").build());
         } catch (StatusRuntimeException e) {
             // expect to catch a NOT_FOUND exception
-            System.out.println(e.getMessage());
+            System.out.println("FooService StatusRuntimeException.getMessage() -> " + e.getMessage());
         }
     }
 }

File: examples/grpc/microprofile/basic-client/src/main/java/io/helidon/microprofile/grpc/example/client/AsyncStringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
 import io.helidon.microprofile.grpc.core.Bidirectional;
 import io.helidon.microprofile.grpc.core.ClientStreaming;
 import io.helidon.microprofile.grpc.core.Grpc;
+import io.helidon.microprofile.grpc.core.GrpcMarshaller;
 import io.helidon.microprofile.grpc.core.ServerStreaming;
 import io.helidon.microprofile.grpc.core.Unary;
 
@@ -34,6 +35,7 @@
  * so that it will be discovered and loaded using CDI when the MP gRPC server starts.
  */
 @Grpc
+@GrpcMarshaller("jsonb")
 @SuppressWarnings("CdiManagedBeanInconsistencyInspection")
 public interface AsyncStringService {
 

File: examples/grpc/microprofile/basic-client/src/main/java/io/helidon/microprofile/grpc/example/client/Client.java
Patch:
@@ -67,6 +67,7 @@ public static void main(String[] args) throws Exception {
         client.serverStreaming();
         client.clientStreaming();
         client.bidirectional();
+        System.exit(0);
     }
 
     /**

File: examples/grpc/microprofile/basic-client/src/main/java/io/helidon/microprofile/grpc/example/client/StringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
 import io.helidon.microprofile.grpc.core.Bidirectional;
 import io.helidon.microprofile.grpc.core.ClientStreaming;
 import io.helidon.microprofile.grpc.core.Grpc;
+import io.helidon.microprofile.grpc.core.GrpcMarshaller;
 import io.helidon.microprofile.grpc.core.ServerStreaming;
 import io.helidon.microprofile.grpc.core.Unary;
 
@@ -33,6 +34,7 @@
  * so that it will be discovered and loaded using CDI when the MP gRPC server starts.
  */
 @Grpc
+@GrpcMarshaller("jsonb")
 @SuppressWarnings("CdiManagedBeanInconsistencyInspection")
 public interface StringService {
 

File: examples/grpc/microprofile/basic-server-implicit/src/main/java/io/helidon/microprofile/grpc/example/basic/implicit/AsyncStringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,6 +25,7 @@
 import io.helidon.microprofile.grpc.core.Bidirectional;
 import io.helidon.microprofile.grpc.core.ClientStreaming;
 import io.helidon.microprofile.grpc.core.Grpc;
+import io.helidon.microprofile.grpc.core.GrpcMarshaller;
 import io.helidon.microprofile.grpc.core.ServerStreaming;
 import io.helidon.microprofile.grpc.core.Unary;
 
@@ -40,6 +41,7 @@
  */
 @Grpc
 @ApplicationScoped
+@GrpcMarshaller("jsonb")
 public class AsyncStringService {
 
     /**

File: examples/grpc/microprofile/basic-server-implicit/src/main/java/io/helidon/microprofile/grpc/example/basic/implicit/StringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 import io.helidon.microprofile.grpc.core.Bidirectional;
 import io.helidon.microprofile.grpc.core.ClientStreaming;
 import io.helidon.microprofile.grpc.core.Grpc;
+import io.helidon.microprofile.grpc.core.GrpcMarshaller;
 import io.helidon.microprofile.grpc.core.ServerStreaming;
 import io.helidon.microprofile.grpc.core.Unary;
 
@@ -37,6 +38,7 @@
  */
 @Grpc
 @ApplicationScoped
+@GrpcMarshaller("jsonb")
 public class StringService {
 
     /**

File: examples/grpc/microprofile/metrics/src/main/java/io/helidon/microprofile/grpc/example/metrics/StringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 import io.helidon.microprofile.grpc.core.Bidirectional;
 import io.helidon.microprofile.grpc.core.ClientStreaming;
 import io.helidon.microprofile.grpc.core.Grpc;
+import io.helidon.microprofile.grpc.core.GrpcMarshaller;
 import io.helidon.microprofile.grpc.core.ServerStreaming;
 import io.helidon.microprofile.grpc.core.Unary;
 
@@ -40,6 +41,7 @@
  * using CDI when the MP gRPC server starts.
  */
 @Grpc
+@GrpcMarshaller("jsonb")
 @ApplicationScoped
 public class StringService {
 

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/Retry.java
Patch:
@@ -83,7 +83,7 @@ public Retry build() {
          * @param policy retry policy
          * @return updated builder instance
          */
-        @ConfiguredOption(kind = ConfiguredOption.Kind.MAP)
+        @ConfiguredOption(provider = true)
         public Builder retryPolicy(RetryPolicy policy) {
             this.retryPolicy = policy;
             return this;

File: health/health/src/main/java/io/helidon/health/HealthSupport.java
Patch:
@@ -304,7 +304,7 @@ public static HealthSupport create(Config config) {
     /**
      * Fluent API builder for {@link io.helidon.health.HealthSupport}.
      */
-    @Configured(prefix = Builder.HEALTH_CONFIG_KEY)
+    @Configured(prefix = Builder.HEALTH_CONFIG_KEY, root = true)
     public static final class Builder extends HelidonRestServiceSupport.Builder<Builder, HealthSupport> {
 
         /**

File: metrics/api/src/main/java/io/helidon/metrics/api/MetricsSettings.java
Patch:
@@ -193,7 +193,7 @@ interface Builder extends io.helidon.common.Builder<Builder, MetricsSettings> {
          * @return updated builder
          */
         @ConfiguredOption(key = KeyPerformanceIndicatorMetricsSettings.Builder.KEY_PERFORMANCE_INDICATORS_CONFIG_KEY,
-                          kind = ConfiguredOption.Kind.MAP)
+                          type = KeyPerformanceIndicatorMetricsSettings.class)
         Builder keyPerformanceIndicatorSettings(KeyPerformanceIndicatorMetricsSettings.Builder kpiSettings);
 
         /**
@@ -203,7 +203,7 @@ interface Builder extends io.helidon.common.Builder<Builder, MetricsSettings> {
          * @return updated builder
          */
         @ConfiguredOption(key = BASE_CONFIG_KEY,
-                          kind = ConfiguredOption.Kind.MAP)
+                          type = BaseMetricsSettings.class)
         Builder baseMetricsSettings(BaseMetricsSettings.Builder baseMetricsSettingsBuilder);
 
         /**

File: metrics/api/src/main/java/io/helidon/metrics/api/RegistrySettings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -116,6 +116,7 @@ interface Builder extends io.helidon.common.Builder<Builder, RegistrySettings> {
          */
         @ConfiguredOption(
                 key = FILTER_CONFIG_KEY,
+                type = RegistryFilterSettings.class,
                 description = "Name filtering, featuring optional exclude and include settings")
         Builder filterSettings(RegistryFilterSettings.Builder registryFilterSettingsBuilder);
 

File: integrations/micronaut/cdi/src/main/java/io/helidon/integrations/micronaut/cdi/MicronautBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,6 +40,7 @@ BeanDefinitionReference<?> definitionRef() {
 
     @Override
     public String toString() {
-        return beanType.getName();
+        // Add hashcode to return a unique name for cases where bean types are the same
+        return beanType.getName() + "@" + Integer.toHexString(this.hashCode());
     }
 }

File: health/health-checks/src/main/java/io/helidon/health/checks/DeadlockHealthCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@
 @Liveness
 @ApplicationScoped // this will be ignored if not within CDI
 @BuiltInHealthCheck
-public final class DeadlockHealthCheck implements HealthCheck {
+public class DeadlockHealthCheck implements HealthCheck {
     private static final Logger LOGGER = Logger.getLogger(DeadlockHealthCheck.class.getName());
     private static final String NAME = "deadlock";
 

File: health/health-checks/src/main/java/io/helidon/health/checks/DiskSpaceHealthCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -62,7 +62,7 @@
 @Liveness
 @ApplicationScoped // this will be ignored if not within CDI
 @BuiltInHealthCheck
-public final class DiskSpaceHealthCheck implements HealthCheck {
+public class DiskSpaceHealthCheck implements HealthCheck {
     /**
      * Default path on the file system the health check will be executed for.
      * If you need to check a different path (e.g. application runtime disks are not mounted the same

File: health/health-checks/src/main/java/io/helidon/health/checks/HeapMemoryHealthCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,7 +50,7 @@
 @Liveness
 @ApplicationScoped // this will be ignored if not within CDI
 @BuiltInHealthCheck
-public final class HeapMemoryHealthCheck implements HealthCheck {
+public class HeapMemoryHealthCheck implements HealthCheck {
     /**
      * Default threshold percentage.
      */

File: integrations/graal/mp-native-image-extension/src/main/java/io/helidon/integrations/graal/mp/nativeimage/extension/ProxyBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@
 final class ProxyBean implements Bean<Object> {
     // this is the bean class (producer class, or the type itself for managed beans)
     private final Class<?> beanClass;
-    // the types of the produced bean (or
+    // the types of the produced bean
     private final Set<Type> types;
 
     ProxyBean(Class<?> beanClass, Set<Type> types) {

File: jersey/client/src/main/java/module-info.java
Patch:
@@ -26,6 +26,8 @@
     requires jakarta.annotation;
     requires io.helidon.common.context;
 
+    exports io.helidon.jersey.client;
+
     provides org.glassfish.jersey.client.spi.ClientBuilderListener
             with io.helidon.jersey.client.ClientBuilderListener;
 }

File: jersey/jsonp/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,4 +19,5 @@
  */
 module io.helidon.jersey.media.jsonp {
     requires transitive jersey.media.json.processing;
+    requires org.eclipse.parsson.media;
 }
\ No newline at end of file

File: microprofile/cdi/src/main/java/module-info.java
Patch:
@@ -23,6 +23,8 @@
     // needed for Unsafe used from Weld
     requires jdk.unsupported;
     requires java.logging;
+    // weld requires java.sql.Date and we fail if not on classpath
+    requires java.sql;
     requires jakarta.cdi;
 
     requires io.helidon.common;

File: microprofile/openapi/src/main/java/module-info.java
Patch:
@@ -30,6 +30,7 @@
     requires io.helidon.microprofile.server;
     requires io.helidon.openapi;
     requires jakarta.interceptor.api;
+    requires transitive microprofile.openapi.api;
 
     requires org.jboss.jandex;
 

File: microprofile/rest-client/src/main/java/module-info.java
Patch:
@@ -29,7 +29,7 @@
 
     exports io.helidon.microprofile.restclient;
     // needed for jersey injection
-    opens io.helidon.microprofile.restclient to hk2.locator,hk2.utils,weld.core.impl, io.helidon.microprofile.cdi;
+    opens io.helidon.microprofile.restclient to org.glassfish.hk2.utilities,weld.core.impl, io.helidon.microprofile.cdi;
 
     provides org.eclipse.microprofile.rest.client.spi.RestClientListener
             with io.helidon.microprofile.restclient.MpRestClientListener;

File: microprofile/server/src/main/java/io/helidon/microprofile/server/JaxRsCdiExtension.java
Patch:
@@ -278,7 +278,7 @@ JerseySupport toJerseySupport(Supplier<? extends ExecutorService> defaultExecuto
         JerseySupport.Builder builder = JerseySupport.builder(jaxRsApplication.resourceConfig());
         builder.config(((io.helidon.config.Config) ConfigProvider.getConfig()).get("server.jersey"));
         builder.executorService(jaxRsApplication.executorService().orElseGet(defaultExecutorService));
-        builder.register(new CatchAllExceptionMapper());
+        builder.register(CatchAllExceptionMapper.class);
         builder.injectionManager(injectionManager);
         return builder.build();
     }

File: microprofile/tracing/src/main/java/module-info.java
Patch:
@@ -47,7 +47,7 @@
     exports io.helidon.microprofile.tracing;
 
     // this is needed for CDI extensions that use non-public observer methods
-    opens io.helidon.microprofile.tracing to weld.core.impl,hk2.utils, io.helidon.microprofile.cdi;
+    opens io.helidon.microprofile.tracing to weld.core.impl,org.glassfish.hk2.utilities, io.helidon.microprofile.cdi;
 
     provides jakarta.enterprise.inject.spi.Extension
             with io.helidon.microprofile.tracing.TracingCdiExtension;

File: openapi/src/main/java/module-info.java
Patch:
@@ -34,7 +34,7 @@
     requires java.desktop; // for java.beans package
     requires org.yaml.snakeyaml;
 
-    requires microprofile.openapi.api;
+    requires transitive microprofile.openapi.api;
 
     requires static io.helidon.config.metadata;
 

File: security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProviderService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,12 +17,11 @@
 package io.helidon.security.providers.abac;
 
 import io.helidon.config.Config;
-import io.helidon.security.Security;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.spi.SecurityProviderService;
 
 /**
- * A java service to register this provider with {@link Security}.
+ * A java service to register this provider with {@link io.helidon.security.Security}.
  */
 public class AbacProviderService implements SecurityProviderService {
     @Override

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/OidcConfig.java
Patch:
@@ -1322,8 +1322,8 @@ public Builder config(Config config) {
         }
 
         /**
-         * Name of the encryption configuration available through {@link Security#encrypt(String, byte[])} and
-         * {@link Security#decrypt(String, String)}.
+         * Name of the encryption configuration available through {@link io.helidon.security.Security#encrypt(String, byte[])} and
+         * {@link io.helidon.security.Security#decrypt(String, String)}.
          * If configured and encryption is enabled for any cookie,
          * Security MUST be configured in global or current {@code io.helidon.common.context.Context} (this
          * is done automatically in Helidon MP).

File: tests/integration/native-image/mp-1/src/main/java/io/helidon/tests/integration/nativeimage/mp1/Mp1Main.java
Patch:
@@ -532,7 +532,7 @@ private static JsonObject healthExistsAndUp(Errors.Collector collector,
         if (null == healthCheck) {
             collector.fatal("\"" + name + "\" health check is not available");
         } else {
-            String status = healthCheck.getString("state");
+            String status = healthCheck.getString("status");
             if (!"UP".equals(status)) {
                 collector.fatal("Health check \"" + name + "\" should be up, but is " + status);
             }

File: tests/integration/native-image/mp-3/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,5 +23,5 @@
 
     exports io.helidon.tests.integration.nativeimage.mp3;
 
-    opens io.helidon.tests.integration.nativeimage.mp3 to weld.core.impl,hk2.utils, io.helidon.microprofile.cdi;
+    opens io.helidon.tests.integration.nativeimage.mp3 to weld.core.impl,org.glassfish.hk2.utilities, io.helidon.microprofile.cdi;
 }

File: webclient/security/src/main/java/io/helidon/webclient/security/WebClientSecurity.java
Patch:
@@ -70,7 +70,7 @@ public static WebClientSecurity create() {
     }
 
     /**
-     * Creates new instance of client security service base on {@link Security}.
+     * Creates new instance of client security service base on {@link io.helidon.security.Security}.
      *
      * @param security security instance
      * @return client security service

File: webserver/jersey/src/main/java/module-info.java
Patch:
@@ -38,5 +38,5 @@
     provides InjectionManagerFactory with io.helidon.webserver.jersey.HelidonHK2InjectionManagerFactory;
 
     // reflection access from jersey injection
-    opens io.helidon.webserver.jersey to hk2.locator,hk2.utils;
+    opens io.helidon.webserver.jersey to org.glassfish.hk2.utilities, org.glassfish.hk2.locator;
 }

File: common/http/src/main/java/io/helidon/common/http/Parameters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -179,7 +179,7 @@ static Parameters toUnmodifiableParameters(Parameters parameters) {
     Parameters putAll(Parameters parameters);
 
     /**
-     * Adds specified values tu association with the specified key (optional operation).
+     * Adds specified values to association with the specified key (optional operation).
      * If parameters doesn't contains mapping, new mapping is created.
      *
      * @param key    key with which the specified value is to be associated
@@ -191,7 +191,7 @@ static Parameters toUnmodifiableParameters(Parameters parameters) {
     Parameters add(String key, String... values);
 
     /**
-     * Adds specified values tu association with the specified key (optional operation).
+     * Adds specified values to association with the specified key (optional operation).
      * If parameters doesn't contains mapping, new mapping is created.
      *
      * @param key    key with which the specified value is to be associated

File: dbclient/metrics-jdbc/src/main/java/io/helidon/dbclient/metrics/jdbc/JdbcMetricsHistogram.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -51,7 +51,6 @@ public Snapshot getSnapshot() {
 
     @Override
     public long getSum() {
-        // TODO 3.0.0-JAKARTA
         return (long) (histogram.getCount() * histogram.getSnapshot().getMean());
     }
 }

File: microprofile/rest-client/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
     requires microprofile.rest.client.api;
     requires io.helidon.common.context;
     requires jersey.common;
-    //TODO 3.0.0-JAKARTA
-//    requires jersey.mp.rest.client;
+    requires jersey.mp.rest.client;
     requires jakarta.ws.rs;
 
     exports io.helidon.microprofile.restclient;

File: common/configurable/src/test/java/io/helidon/common/configurable/ThreadPoolTest.java
Patch:
@@ -561,6 +561,7 @@ public void run() {
         };
         pool.submit(task4);
         pool.shutdown();
+        assertThat(pool.awaitTermination(20, SECONDS), is(true));
         assertThat(pool.getCompletedTasks(), is(2));
         assertThat(pool.getFailedTasks(), is(2));
         assertThat(pool.getTotalTasks(), is(pool.getCompletedTasks() + pool.getFailedTasks()));

File: microprofile/openapi/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,6 +33,8 @@
 
     requires org.jboss.jandex;
 
+    requires static io.helidon.config.metadata;
+
     exports io.helidon.microprofile.openapi;
 
     // this is needed for CDI extensions that use non-public observer methods

File: jersey/client/src/test/java/io/helidon/jersey/client/ContextTest.java
Patch:
@@ -59,9 +59,7 @@ public class ContextTest {
     static void beforeAll() {
         server = WebServer.builder()
                 .host("localhost")
-                .routing(Routing.builder()
-                        .put((req, res) -> res.send("I'm Frank!"))
-                        .build())
+                .routing(r -> r.put((req, res) -> res.send("I'm Frank!")))
                 .build()
                 .start()
                 .await(TIME_OUT);

File: metrics/service-api/src/test/java/io/helidon/metrics/serviceapi/TestMinimalMetricsSupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ void testEndpoint() throws ExecutionException, InterruptedException {
             webServer = WebServer.builder()
                     .host("localhost")
                     .port(0)
-                    .routing(routing)
+                    .addRouting(routing)
                     .build()
                     .start()
                     .toCompletableFuture()

File: microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java
Patch:
@@ -194,7 +194,7 @@ private void startServer(@Observes @Priority(PLATFORM_AFTER + 100) @Initialized(
         registerJaxRsApplications(beanManager);
 
         // start the webserver
-        serverBuilder.routing(routingBuilder.build());
+        serverBuilder.addRouting(routingBuilder.build());
 
         namedRoutings.forEach(serverBuilder::addNamedRouting);
         webserver = serverBuilder.build();

File: microprofile/websocket/src/main/java/module-info.java
Patch:
@@ -28,9 +28,9 @@
     requires io.helidon.common;
     requires io.helidon.config;
     requires io.helidon.microprofile.cdi;
-    requires tyrus.core;
     requires io.helidon.microprofile.server;
-    requires io.helidon.webserver.tyrus;
+    requires io.helidon.webserver.websocket;
+    requires tyrus.core;
     requires tyrus.spi;
 
     exports io.helidon.microprofile.tyrus;

File: webclient/webclient/src/main/java/module-info.java
Patch:
@@ -42,5 +42,6 @@
     exports io.helidon.webclient.spi;
 
     uses io.helidon.webclient.spi.WebClientServiceProvider;
+    uses io.helidon.common.context.spi.DataPropagationProvider;
 
 }

File: webserver/webserver/src/main/java/io/helidon/webserver/HandlerRoute.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
 /**
  * Represents a single routable {@link Handler} in the {@link Routing}.
  */
-class HandlerRoute implements Route {
+class HandlerRoute implements HttpRoute {
 
     private final PathMatcher pathMatcher;
     private final Handler handler;

File: webserver/webserver/src/main/java/io/helidon/webserver/Route.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@
 /**
  * A unit of the {@link Routing}.
  */
-interface Route {
+interface Route extends ServerLifecycle {
 
     /**
      * Path matcher for routing which doesn't specify any other path matcher.

File: webserver/webserver/src/test/java/io/helidon/webserver/Gh377V2ApiTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,8 @@
  * Tests correct behavior when webserver is shutdown and an attempt is made to start it again.
  * Github issue #377.
  */
-class Gh377 {
+@Deprecated(since = "3.0.0", forRemoval = true)
+class Gh377V2ApiTest {
     @Test
     void testRestart() {
         WebServer webServer = WebServer.builder()

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/DoubleEchoEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
  */
 
-package io.helidon.webserver.tyrus;
+package io.helidon.webserver.websocket.test;
 
 import java.io.IOException;
 import java.util.logging.Logger;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/EchoClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
  */
 
-package io.helidon.webserver.tyrus;
+package io.helidon.webserver.websocket.test;
 
 import java.io.IOException;
 import java.net.URI;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/EchoServiceProgTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
  */
 
-package io.helidon.webserver.tyrus;
+package io.helidon.webserver.websocket.test;
 
 import java.net.URI;
 import java.util.Collections;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/EchoServiceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
  */
 
-package io.helidon.webserver.tyrus;
+package io.helidon.webserver.websocket.test;
 
 import java.net.URI;
 

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/HttpClientTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.tyrus;
+package io.helidon.webserver.websocket.test;
 
 import java.net.URI;
 import java.net.http.HttpClient;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/RoutingProgTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
  */
 
-package io.helidon.webserver.tyrus;
+package io.helidon.webserver.websocket.test;
 
 import java.net.URI;
 import java.util.Collections;

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/RoutingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
  */
 
-package io.helidon.webserver.tyrus;
+package io.helidon.webserver.websocket.test;
 
 import java.net.URI;
 

File: webserver/websocket/src/test/java/io/helidon/webserver/websocket/test/UppercaseCodec.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,9 +12,10 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
  */
 
-package io.helidon.webserver.tyrus;
+package io.helidon.webserver.websocket.test;
 
 import java.util.logging.Logger;
 

File: grpc/client/src/test/java/io/helidon/grpc/client/GrpcChannelsProviderIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,10 +31,10 @@
 import io.helidon.grpc.server.GrpcRouting;
 import io.helidon.grpc.server.GrpcServer;
 import io.helidon.grpc.server.GrpcServerConfiguration;
-
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.NameResolver;
 import io.grpc.StatusRuntimeException;
+
 import io.netty.handler.codec.DecoderException;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
@@ -85,6 +85,7 @@ public static void initGrpcConfig() throws Exception {
         port2WaySSL = grpcServer_2WaySSL.port();
 
         treeMapSvcDesc = ClientServiceDescriptor.builder("TreeMapService", TreeMapService.class)
+                .marshallerSupplier(new JavaMarshaller.Supplier())
                 .unary("get")
                 .build();
     }

File: grpc/client/src/test/java/services/TreeMapService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
 import java.util.Objects;
 import java.util.TreeMap;
 
+import io.helidon.grpc.client.JavaMarshaller;
 import io.helidon.grpc.server.GrpcService;
 import io.helidon.grpc.server.ServiceDescriptor;
 
@@ -71,6 +72,7 @@ public TreeMapService() {
 
     @Override
     public void update(ServiceDescriptor.Rules config) {
+        config.marshallerSupplier(new JavaMarshaller.Supplier());
         config.unary("get", this::get);
         config.serverStreaming("greaterOrEqualTo", this::greaterOrEqualTo);
         config.clientStreaming("sumOfAges", this::sumOfAges);

File: grpc/core/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 
-import io.helidon.grpc.core.JavaMarshaller;
 import io.helidon.grpc.core.JsonbMarshaller;
 import io.helidon.grpc.core.MarshallerSupplier;
 
@@ -50,6 +49,5 @@
     provides MarshallerSupplier with
             MarshallerSupplier.DefaultMarshallerSupplier,
             MarshallerSupplier.ProtoMarshallerSupplier,
-            JavaMarshaller.Supplier,
             JsonbMarshaller.Supplier;
 }

File: grpc/server/src/test/java/io/helidon/grpc/server/BindableServiceImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import java.util.List;
 
 import io.helidon.grpc.core.InterceptorPriorities;
+import io.helidon.grpc.core.JsonbMarshaller;
 import io.helidon.grpc.core.PriorityBag;
 
 import io.grpc.Metadata;
@@ -59,6 +60,7 @@ public void shouldNotAddDuplicateInterceptors() {
         global.addAll(List.of(interceptorOne, interceptorTwo, interceptorThree));
 
         ServiceDescriptor descriptor = ServiceDescriptor.builder(new Service())
+                .marshallerSupplier(new JsonbMarshaller.Supplier())
                 .intercept(interceptorTwo)
                 .intercept(interceptorFour)
                 .intercept(interceptorFive)

File: microprofile/grpc/client/src/test/java/io/helidon/microprofile/grpc/client/GrpcProxyBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import java.util.Collection;
 import java.util.concurrent.CompletionStage;
 
+import io.helidon.microprofile.grpc.core.GrpcMarshaller;
 import io.helidon.microprofile.grpc.core.Unary;
 
 import org.junit.jupiter.api.Test;
@@ -34,6 +35,7 @@ public void shouldCreateProxyForMethodWithWithNestedGenerics() {
         assertThat(service, is(notNullValue()));
     }
 
+    @GrpcMarshaller("stub")
     public interface TestService {
        @Unary
        CompletionStage<Collection<String>> getBooks();

File: microprofile/grpc/core/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,6 +31,7 @@
     requires jakarta.inject;
 
     uses io.helidon.microprofile.grpc.core.MethodHandlerSupplier;
+    uses io.helidon.grpc.core.MarshallerSupplier;
 
     provides io.helidon.microprofile.grpc.core.MethodHandlerSupplier
             with io.helidon.microprofile.grpc.core.BidirectionalMethodHandlerSupplier,

File: tests/integration/mp-grpc/src/test/java/io/helidon/microprofile/grpc/server/GrpcServerCdiExtensionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -212,7 +212,8 @@ public static class TestService
 
         @Override
         public void update(ServiceDescriptor.Rules rules) {
-            rules.unary("unary", this::unary);
+            rules.marshallerSupplier(new JavaMarshaller.Supplier())
+                    .unary("unary", this::unary);
         }
 
         void unary(String request, StreamObserver<String> observer) {

File: health/health/src/main/java/module-info.java
Patch:
@@ -24,7 +24,7 @@
     requires transitive microprofile.health.api;
     requires io.helidon.webserver;
     requires io.helidon.servicecommon.rest;
-    requires io.helidon.config.metadata;
+    requires static io.helidon.config.metadata;
     requires io.helidon.webserver.cors;
     requires io.helidon.media.jsonp;
     requires jakarta.json;

File: integrations/micrometer/micrometer/src/main/java/io/helidon/integrations/micrometer/MicrometerSupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -125,7 +125,7 @@ public static class Builder extends HelidonRestServiceSupport.Builder<Builder, M
         private Supplier<MeterRegistryFactory> meterRegistryFactorySupplier = null;
 
         private Builder() {
-            super(Builder.class, DEFAULT_CONTEXT);
+            super(DEFAULT_CONTEXT);
         }
 
         @Override

File: metrics/metrics/src/main/java/io/helidon/metrics/MetricsSupport.java
Patch:
@@ -621,7 +621,7 @@ public static class Builder extends HelidonRestServiceSupport.Builder<Builder, M
          * Creates a new builder instance.
          */
         protected Builder() {
-            super(Builder.class, MetricsSettings.Builder.DEFAULT_CONTEXT);
+            super(MetricsSettings.Builder.DEFAULT_CONTEXT);
         }
 
         @Override

File: metrics/service-api/src/test/java/io/helidon/metrics/serviceapi/MyMetricsServiceSupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -67,7 +67,7 @@ public static class Builder extends HelidonRestServiceSupport.Builder<Builder, M
         private ComponentMetricsSettings.Builder componentMetricsSettingsBuilder = ComponentMetricsSettings.builder();
 
         public Builder() {
-            super(Builder.class, "/myservice");
+            super("/myservice");
         }
 
         public Builder componentMetricsSettings(ComponentMetricsSettings.Builder componentMetricsSettingsBuilder) {

File: service-common/rest-cdi/src/test/java/io/helidon/servicecommon/restcdi/ConfiguredTestSupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ static class Builder extends HelidonRestServiceSupport.Builder<Builder, Configur
         private int importance;
 
         private Builder() {
-            super(Builder.class, ENDPOINT_PATH);
+            super(ENDPOINT_PATH);
         }
 
         @Override

File: webserver/cors/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,5 +24,7 @@
     requires io.helidon.config;
     requires io.helidon.webserver;
 
+    requires static io.helidon.config.metadata;
+
     exports io.helidon.webserver.cors;
 }

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/AnnotationFinder.java
Patch:
@@ -45,7 +45,7 @@ public class AnnotationFinder {
             "java.",
             "javax.",
             "jakarta.",
-            "org.microprofile."
+            "org.eclipse.microprofile."
     };
 
     private final Package pkg;
@@ -84,7 +84,7 @@ private Set<Annotation> findAnnotations(Set<Annotation> set, Set<Annotation> res
                                             Set<Annotation> seen, Package pkg, BeanManager bm) {
         for (Annotation a1 : set) {
             Class<? extends Annotation> a1Type = a1.annotationType();
-            if (a1Type.getPackage().equals(pkg)) {
+            if (a1Type.getName().startsWith(pkg.getName())) {       // Avoid getPackage() - Issue #4296
                 result.add(a1);
             } else if (!seen.contains(a1) && isOfInterest(a1, bm)) {
                 seen.add(a1);

File: config/config-mp/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
     requires java.logging;
     requires io.helidon.common;
     requires io.helidon.config;
-    requires io.helidon.config.yaml.mp;
     requires transitive microprofile.config.api;
     requires jakarta.annotation;
     requires io.helidon.common.serviceloader;
@@ -33,7 +32,8 @@
     uses org.eclipse.microprofile.config.spi.ConfigSourceProvider;
     uses org.eclipse.microprofile.config.spi.Converter;
     uses io.helidon.config.mp.spi.MpConfigFilter;
+    uses io.helidon.config.mp.spi.MpMetaConfigProvider;
     uses io.helidon.config.spi.ConfigParser;
 
     provides org.eclipse.microprofile.config.spi.ConfigProviderResolver with io.helidon.config.mp.MpConfigProviderResolver;
-}
\ No newline at end of file
+}

File: config/yaml-mp/src/main/java/io/helidon/config/yaml/mp/YamlMpConfigSource.java
Patch:
@@ -217,7 +217,8 @@ public static List<ConfigSource> classPath(String resource, String profile) {
                             for (URL url : profileResourceList) {
                                 String profilePathBase = pathBase(url.toString());
                                 if (pathBase.equals(profilePathBase)) {
-                                    sources.add(create(create(it), create(url)));
+                                    // Main is the profile config file and fallback is the original config file
+                                    sources.add(create(create(url), create(it)));
                                 } else {
                                     sources.add(create(it));
                                 }

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/MethodInvoker.java
Patch:
@@ -461,13 +461,15 @@ private void initMethodHandler(MethodState methodState) {
             methodState.bulkhead = Bulkhead.builder()
                     .limit(introspector.getBulkhead().value())
                     .queueLength(introspector.isAsynchronous() ? introspector.getBulkhead().waitingTaskQueue() : 0)
+                    .cancelSource(false)        // for the FT TCK's
                     .build();
         }
 
         if (introspector.hasTimeout()) {
             methodState.timeout = Timeout.builder()
                     .timeout(Duration.of(introspector.getTimeout().value(), introspector.getTimeout().unit()))
                     .currentThread(!introspector.isAsynchronous())
+                    .cancelSource(false)        // for the FT TCK's
                     .build();
         }
 

File: common/configurable/src/main/java/io/helidon/common/configurable/ThreadPool.java
Patch:
@@ -782,7 +782,7 @@ public boolean test(ThreadPool pool) {
 
             // Is the queue above the threshold?
 
-            if (queueSize > queueThreshold) {
+            if (queueSize >= queueThreshold) {
 
                 // Yes. Should we grow?
                 // Note that this random number generator is quite fast, and on average is faster than or equivalent to

File: config/config/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -47,4 +47,6 @@
 
     provides io.helidon.config.spi.ConfigParser with PropertiesConfigParser;
 
+    // needed when running with modules - to make private methods accessible
+    opens io.helidon.config to weld.core.impl, io.helidon.microprofile.cdi;
 }

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/Retry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -279,6 +279,8 @@ public Optional<Long> nextDelayMillis(long firstCallMillis, long lastDelay, int
             }
 
             if (call == 0) {
+                return Optional.of(0L);
+            } else if (call == 1) {
                 return Optional.of(delayMillis);
             }
 

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/Fallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -68,9 +68,9 @@ static <T> Fallback<T> create(Function<Throwable, ? extends CompletionStage<T>>
      * @param <T> type of the result
      * @return a new fallback
      */
-    static <T> Fallback<T> createMulti(Function<Throwable, ? extends CompletionStage<T>> fallback) {
+    static <T> Fallback<T> createMulti(Function<Throwable, ? extends Flow.Publisher<T>> fallback) {
         Builder<T> builder = builder();
-        return builder.fallback(fallback).build();
+        return builder.fallbackMulti(fallback).build();
     }
 
     /**

File: security/providers/jwt/src/main/java/io/helidon/security/providers/jwt/JwtProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -169,12 +169,12 @@ private AuthenticationResponse authenticateToken(String token) {
             Errors errors = signedJwt.verifySignature(verifyKeys, defaultJwk);
             if (errors.isValid()) {
                 Jwt jwt = signedJwt.getJwt();
-                // verify the audience is correct
+                // perform all validations, including expected audience verification
                 Errors validate = jwt.validate(null, expectedAudience);
                 if (validate.isValid()) {
                     return AuthenticationResponse.success(buildSubject(jwt, signedJwt));
                 } else {
-                    return failOrAbstain("Audience is invalid or missing: " + expectedAudience);
+                    return failOrAbstain(validate.toString());
                 }
             } else {
                 return failOrAbstain(errors.toString());

File: examples/integrations/micrometer/mp/src/main/java/io/helidon/examples/integrations/micrometer/mp/GreetResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -121,7 +121,7 @@ public JsonObject getMessage(@PathParam("name") String name) {
     @RequestBody(name = "greeting",
             required = true,
             content = @Content(mediaType = "application/json",
-                    schema = @Schema(type = SchemaType.STRING, example = "{\"greeting\" : \"Hola\"}")))
+                    schema = @Schema(type = SchemaType.OBJECT, requiredProperties = { "greeting" })))
     @APIResponses({
             @APIResponse(name = "normal", responseCode = "204", description = "Greeting updated"),
             @APIResponse(name = "missing 'greeting'", responseCode = "400",

File: examples/microprofile/cors/src/main/java/io/helidon/microprofile/examples/cors/GreetResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -104,7 +104,7 @@ public JsonObject getMessage(@PathParam("name") String name) {
     @RequestBody(name = "greeting",
             required = true,
             content = @Content(mediaType = "application/json",
-                    schema = @Schema(type = SchemaType.STRING, example = "{\"greeting\" : \"Hola\"}")))
+                    schema = @Schema(type = SchemaType.OBJECT, requiredProperties = { "greeting" })))
     @APIResponses({
             @APIResponse(name = "normal", responseCode = "204", description = "Greeting updated"),
             @APIResponse(name = "missing 'greeting'", responseCode = "400",

File: examples/quickstarts/helidon-quickstart-mp/src/main/java/io/helidon/examples/quickstart/mp/GreetResource.java
Patch:
@@ -109,7 +109,7 @@ public JsonObject getMessage(@PathParam("name") String name) {
     @RequestBody(name = "greeting",
             required = true,
             content = @Content(mediaType = "application/json",
-                    schema = @Schema(type = SchemaType.STRING, example = "{\"greeting\" : \"Hola\"}")))
+                    schema = @Schema(type = SchemaType.OBJECT, requiredProperties = { "greeting" })))
     @APIResponses({
             @APIResponse(name = "normal", responseCode = "204", description = "Greeting updated"),
             @APIResponse(name = "missing 'greeting'", responseCode = "400",

File: examples/quickstarts/helidon-standalone-quickstart-mp/src/main/java/io/helidon/examples/quickstart/mp/GreetResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -111,7 +111,7 @@ public JsonObject getMessage(@PathParam("name") String name) {
     @RequestBody(name = "greeting",
             required = true,
             content = @Content(mediaType = "application/json",
-                    schema = @Schema(type = SchemaType.STRING, example = "{\"greeting\" : \"Hola\"}")))
+                    schema = @Schema(type = SchemaType.OBJECT, requiredProperties = { "greeting" })))
     @APIResponses({
             @APIResponse(name = "normal", responseCode = "204", description = "Greeting updated"),
             @APIResponse(name = "missing 'greeting'", responseCode = "400",

File: tests/integration/native-image/mp-3/src/main/java/io/helidon/tests/integration/nativeimage/mp3/GreetResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -112,7 +112,7 @@ public JsonObject getMessage(@PathParam("name") String name) {
     @RequestBody(name = "greeting",
             required = true,
             content = @Content(mediaType = "application/json",
-                    schema = @Schema(type = SchemaType.STRING, example = "{\"greeting\" : \"Hola\"}")))
+                    schema = @Schema(type = SchemaType.OBJECT, requiredProperties = { "greeting" })))
     @APIResponses({
             @APIResponse(name = "normal", responseCode = "204", description = "Greeting updated"),
             @APIResponse(name = "missing 'greeting'", responseCode = "400",

File: tests/integration/dbclient/appl/src/main/java/io/helidon/tests/integration/dbclient/appl/InitService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -103,7 +103,7 @@ private void testHealthCheck(final ServerRequest request, final ServerResponse r
                                 dbClient,
                                 dbConfig.get("health-check"));
         HealthCheckResponse checkResponse = check.call();
-        HealthCheckResponse.State checkState = checkResponse.getState();
+        HealthCheckResponse.Status checkState = checkResponse.getStatus();
         final JsonObjectBuilder data = Json.createObjectBuilder();
         data.add("state", checkState.name());
         response.send(okStatus(data.build()));

File: tests/integration/dbclient/appl/src/main/java/io/helidon/tests/integration/dbclient/appl/health/HealthCheckService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -91,7 +91,7 @@ public void run() {
             try {
                 JsonObjectBuilder job = Json.createObjectBuilder();
                 HealthCheckResponse hcResponse = check.call();
-                HealthCheckResponse.State state = hcResponse.getState();
+                HealthCheckResponse.Status state = hcResponse.getStatus();
                 job.add("name", hcResponse.getName());
                 job.add("status", state.name());
                 response.send(AppResponse.okStatus(job.build()));

File: config/metadata/src/main/java/io/helidon/config/metadata/Configured.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
  */
 @Target(ElementType.TYPE)
 @Inherited
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface Configured {
     /**
      * Whether this is a root configuration object.

File: security/integration/jersey/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,4 +44,5 @@
     opens io.helidon.security.integration.jersey to hk2.locator,hk2.utils,weld.core.impl, io.helidon.microprofile.cdi;
 
     uses io.helidon.security.providers.common.spi.AnnotationAnalyzer;
+    uses io.helidon.security.integration.jersey.SecurityResponseMapper;
 }

File: tracing/tracing/src/main/java/io/helidon/tracing/TracerBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -160,7 +160,8 @@ default T collectorUri(URI uri) {
             result = result.collectorPath(uri.getPath());
         }
 
-        if (uri.getPort() > -1) {
+        /* Allow -1 as it means no port specified */
+        if (uri.getPort() >= -1) {
             result = result.collectorPort(uri.getPort());
         }
 

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV4Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -53,7 +53,7 @@ public CompletionStage<Message<String>> messageAsynchronous(Message<Integer> mes
     }
 
     @Incoming("asynchronous-message")
-    public void getMessgesFromProcessorBuilderOfMessages(String value) {
+    public void getMessagesFromProcessorBuilderOfMessages(String value) {
         getTestLatch().countDown();
     }
 

File: examples/employee-app/src/main/java/io/helidon/service/employee/EmployeeRepositoryImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -121,7 +121,6 @@ public CompletionStage<Long> deleteById(String id) {
         return CompletableFuture.completedFuture(eList.stream()
                                                          .filter(e -> e.getId().equals(id))
                                                          .findFirst()
-                                                         .map(eList::indexOf)
                                                          .map(eList::remove)
                                                          .map(it -> 1L)
                                                          .orElse(0L));

File: config/config-mp/src/main/java/io/helidon/config/mp/MpConfigSources.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/main/java/io/helidon/config/MutabilitySupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2021, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/yaml-mp/src/main/java/io/helidon/config/yaml/mp/YamlMpConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/webserver/src/test/java/io/helidon/webserver/utils/SocketHttpClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -64,6 +64,7 @@ public class SocketHttpClient implements AutoCloseable {
      */
     public SocketHttpClient(WebServer webServer) throws IOException {
         socket = new Socket("localhost", webServer.port());
+        socket.setSoTimeout(10000);
     }
 
     /**

File: webserver/webserver/src/main/java/io/helidon/webserver/ForwardingHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -608,6 +608,8 @@ private FullHttpResponse toNettyResponse(TransportResponse handlerResponse) {
     private void failPublisher(Throwable cause) {
         if (requestContext != null) {
             requestContext.fail(cause);
+        } else {
+            LOGGER.log(Level.SEVERE, "Error intercepted before request context established.", cause);
         }
     }
 

File: common/configurable/src/test/java/io/helidon/common/configurable/ThreadPoolSupplierTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -51,7 +51,7 @@ class ThreadPoolSupplierTest {
 
     @BeforeAll
     static void initClass() {
-        defaultInstance = ensureOurExecutor(ThreadPoolSupplier.create().getThreadPool());
+        defaultInstance = ensureOurExecutor(ThreadPoolSupplier.create("test-thread-pool").getThreadPool());
 
         builtInstance = ensureOurExecutor(ThreadPoolSupplier.builder()
                                           .threadNamePrefix("thread-pool-unit-test-")
@@ -128,7 +128,7 @@ public void close() throws SecurityException {
         try {
             log.addHandler(handler);
             Config config = Config.create(ConfigSources.create(Map.of(thresholdKey, threshold, rateKey, rate)));
-            ExecutorService executor = ThreadPoolSupplier.create(config).get();
+            ExecutorService executor = ThreadPoolSupplier.create(config, "test-thread-pool").get();
             Optional<ThreadPool> asThreadPool = ThreadPool.asThreadPool(executor);
             ThreadPool pool = asThreadPool.orElseThrow(() -> new RuntimeException("not a thread pool"));
             assertThat(pool.getGrowthThreshold(), is(Integer.parseInt(threshold)));

File: examples/media/multipart/src/main/java/io/helidon/examples/media/multipart/FileService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,7 +45,7 @@ public final class FileService implements Service {
 
     private static final JsonBuilderFactory JSON_FACTORY = Json.createBuilderFactory(Map.of());
     private final FileStorage storage;
-    private final ExecutorService executor = ThreadPoolSupplier.create().get();
+    private final ExecutorService executor = ThreadPoolSupplier.create("multipart-thread-pool").get();
 
 
     /**

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/FaultTolerance.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -84,7 +84,7 @@ public static void config(Config config) {
         CONFIG.set(config);
 
         SCHEDULED_EXECUTOR.set(LazyValue.create(ScheduledThreadPoolSupplier.create(CONFIG.get().get("scheduled-executor"))));
-        EXECUTOR.set(LazyValue.create(ThreadPoolSupplier.create(CONFIG.get().get("executor"))));
+        EXECUTOR.set(LazyValue.create(ThreadPoolSupplier.create(CONFIG.get().get("executor"), "ft-se-thread-pool")));
     }
 
     /**

File: microprofile/tracing/src/main/java/io/helidon/microprofile/tracing/MpTracingClientRegistrar.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public class MpTracingClientRegistrar implements ClientTracingRegistrarProvider
 
     static {
         Config config = (Config) ConfigProvider.getConfig();
-        EXECUTOR_SERVICE = ThreadPoolSupplier.create(config.get("tracing.executor-service"));
+        EXECUTOR_SERVICE = ThreadPoolSupplier.create(config.get("tracing.executor-service"), "mp-tracing-thread-pool");
     }
 
     @Override

File: security/security/src/main/java/io/helidon/security/Security.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -574,7 +574,7 @@ public static final class Builder implements io.helidon.common.Builder<Builder,
         private Tracer tracer;
         private boolean tracingEnabled = true;
         private SecurityTime serverTime = SecurityTime.builder().build();
-        private Supplier<ExecutorService> executorService = ThreadPoolSupplier.create();
+        private Supplier<ExecutorService> executorService = ThreadPoolSupplier.create("security-thread-pool");
         private boolean enabled = true;
 
         private Builder() {
@@ -1173,7 +1173,7 @@ private void fromConfig(Config config) {
             }
 
             config.get("environment.server-time").as(SecurityTime::create).ifPresent(this::serverTime);
-            executorService(ThreadPoolSupplier.create(config.get("environment.executor-service")));
+            executorService(ThreadPoolSupplier.create(config.get("environment.executor-service"), "security-thread-pool"));
 
             Map<String, SecurityProviderService> configKeyToService = new HashMap<>();
             Map<String, SecurityProviderService> classNameToService = new HashMap<>();

File: tests/apps/bookstore/bookstore-se/src/test/java/io/helidon/tests/apps/bookstore/se/Http2SslTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -87,7 +87,7 @@ public void testHelloWorldHttp2SslPostFirst() throws Exception {
 
     @Test
     public void testHelloWorldHttp2SslConcurrent() throws Exception {
-        ExecutorService executor = ThreadPoolSupplier.create().get();
+        ExecutorService executor = ThreadPoolSupplier.create("test-thread-pool").get();
         Request.Builder builder = TestServer.newRequestBuilder(webServer, "/books", true);
         Request getBooks = builder.build();
 

File: webclient/jaxrs/src/main/java/io/helidon/webclient/jaxrs/JaxRsClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,7 +49,7 @@ private JaxRsClient() {
      * </tr>
      * <tr>
      *     <td>executor</td>
-     *     <td>{@link io.helidon.common.configurable.ThreadPoolSupplier#create(io.helidon.config.Config)}</td>
+     *     <td>{@link io.helidon.common.configurable.ThreadPoolSupplier#create(io.helidon.config.Config, String)}</td>
      *     <td>Default executor service to use for asynchronous operations. For configuration options
      *      of {@code executor}, please refer to
      *      {@link io.helidon.common.configurable.ThreadPoolSupplier.Builder#config(io.helidon.config.Config)}</td>
@@ -59,7 +59,7 @@ private JaxRsClient() {
      * @param config configuration to use to configure JAX-RS clients defaults
      */
     public static void configureDefaults(Config config) {
-        EXECUTOR_SUPPLIER.set(ThreadPoolSupplier.create(config));
+        EXECUTOR_SUPPLIER.set(ThreadPoolSupplier.create(config, "jaxrs-client-thread-pool"));
     }
 
     /**

File: integrations/db/h2/src/main/java/io/helidon/integrations/db/h2/SessionRemoteSubstitution.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/Configuration.java
Patch:
@@ -30,7 +30,9 @@
 @Inherited
 public @interface Configuration {
     /**
-     * If set to {@code true}, the existing (or default) MicroProfile configuration would be used.
+     * If set to {@code true}, the existing (or default) MicroProfile configuration would be used. In this case it is
+     * important to set property {@code mp.initializer.allow=true} in order CDI container to start, when used with
+     * {@link HelidonTest}.
      * By default uses a configuration constructed using all {@link io.helidon.microprofile.tests.junit5.AddConfig}
      * annotations and {@link #configSources()}.
      * When set to false and a {@link org.junit.jupiter.api.BeforeAll} method registers a custom configuration

File: tests/functional/jax-rs-multiple-apps/src/main/java/io/helidon/tests/functional/multipleapps/GreetApplication2.java
Patch:
@@ -32,7 +32,7 @@ public class GreetApplication2 extends Application {
 
     @Override
     public Set<Class<?>> getClasses() {
-        return Set.of(GreetResource2.class, SharedFilter.class);
+        return Set.of(GreetResource2.class, SharedFilter.class, MyFeature.class);
     }
 
     @Override

File: tests/functional/jax-rs-multiple-apps/src/test/java/io/helidon/tests/functional/multipleapps/MainTest.java
Patch:
@@ -22,6 +22,7 @@
 import jakarta.json.JsonObject;
 import jakarta.ws.rs.client.WebTarget;
 import jakarta.ws.rs.core.Response;
+
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
@@ -62,6 +63,7 @@ void testHelloWorld2() {
         assertEquals(response.getStatus(), 200);
         assertTrue(response.getHeaders().containsKey("sharedfilter"));
         assertTrue(response.getHeaders().containsKey("filter2"));
+        assertTrue(response.getHeaders().containsKey("filter3"));       // MyFeature
         assertFalse(response.getHeaders().containsKey("filter1"));
         JsonObject jsonObject = response.readEntity(JsonObject.class);
         assertEquals("Hello World 2!", jsonObject.getString("message"),

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/OidcConfig.java
Patch:
@@ -1086,8 +1086,7 @@ public OidcConfig build() {
             collector.collect().checkValid();
             collector = Errors.collector();
 
-            WebClient.Builder webClientBuilder = OidcUtil.webClientBaseBuilder(proxyProtocol,
-                                                                               proxyHost,
+            WebClient.Builder webClientBuilder = OidcUtil.webClientBaseBuilder(proxyHost,
                                                                                proxyPort,
                                                                                clientTimeout);
             ClientBuilder clientBuilder = OidcUtil.clientBaseBuilder(proxyProtocol, proxyHost, proxyPort);

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/OidcUtil.java
Patch:
@@ -66,8 +66,7 @@ static ClientBuilder clientBaseBuilder(String proxyProtocol, String proxyHost, i
         return clientBuilder;
     }
 
-    static WebClient.Builder webClientBaseBuilder(String proxyProtocol,
-                                                  String proxyHost,
+    static WebClient.Builder webClientBaseBuilder(String proxyHost,
                                                   int proxyPort,
                                                   Duration clientTimeout) {
         WebClient.Builder webClientBuilder = WebClient.builder()
@@ -79,7 +78,7 @@ static WebClient.Builder webClientBaseBuilder(String proxyProtocol,
         if (proxyHost != null) {
             webClientBuilder.proxy(Proxy.builder()
                                            .type(Proxy.ProxyType.HTTP)
-                                           .host(proxyProtocol + "://" + proxyHost)
+                                           .host(proxyHost)
                                            .port(proxyPort)
                                            .build());
         }

File: dbclient/metrics/src/main/java/module-info.java
Patch:
@@ -23,7 +23,7 @@
 module io.helidon.dbclient.metrics {
     requires java.logging;
     requires io.helidon.dbclient;
-    requires io.helidon.metrics;
+    requires io.helidon.metrics.api;
     requires io.helidon.dbclient.common;
 
     exports io.helidon.dbclient.metrics;

File: grpc/metrics/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
     requires transitive io.helidon.grpc.core;
     requires static io.helidon.grpc.client;
     requires static io.helidon.grpc.server;
-    requires transitive io.helidon.metrics;
+    requires transitive io.helidon.metrics.api;
 
     requires microprofile.metrics.api;
 }

File: metrics/api/src/main/java/io/helidon/metrics/api/NoOpMetricRegistry.java
Patch:
@@ -30,9 +30,8 @@
 class NoOpMetricRegistry extends AbstractRegistry<NoOpMetric> {
 
     private static final Map<MetricType, BiFunction<String, Metadata, NoOpMetric>> NO_OP_METRIC_FACTORIES =
-            // Omit gauge because creating a gauge requires an existing delegate instance.
-            // These factory methods do not use delegates.
             Map.of(MetricType.COUNTER, NoOpMetricImpl.NoOpCounterImpl::create,
+                   MetricType.GAUGE, NoOpMetricImpl.NoOpGaugeImpl::create,
                    MetricType.HISTOGRAM, NoOpMetricImpl.NoOpHistogramImpl::create,
                    MetricType.METERED, NoOpMetricImpl.NoOpMeterImpl::create,
                    MetricType.TIMER, NoOpMetricImpl.NoOpTimerImpl::create,

File: metrics/jaeger/src/main/java/module-info.java
Patch:
@@ -19,7 +19,8 @@
 module io.helidon.metrics.jaeger {
 
     requires java.logging;
-    requires io.helidon.metrics;
+    requires io.helidon.common;
+    requires io.helidon.metrics.api;
     requires jaeger.core;
 
     provides io.jaegertracing.spi.MetricsFactory with io.helidon.metrics.jaeger.HelidonJaegerMetricsFactory;

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/JavaMethodFinder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,7 +45,7 @@ private JavaMethodFinder() {
      * @return The method found.
      * @throws NoSuchMethodException If not found.
      */
-    static Method findMethod(Class<?> clazz, String methodName, Type[] paramTypes)
+    static Method findMethod(Class<?> clazz, String methodName, Type... paramTypes)
             throws NoSuchMethodException {
         // Initialize queue with first class
         Queue<Class<?>> queue = new LinkedBlockingQueue<>();

File: metrics/metrics/src/main/java/io/helidon/metrics/HelidonTimer.java
Patch:
@@ -211,7 +211,7 @@ void appendPrometheusTimerStatElement(StringBuilder sb,
         if (withHelpType) {
             prometheusType(sb, name.nameStat(statName), typeName);
         }
-        sb.append(name.nameStat(statName))
+        sb.append(name.nameStatTags(statName))
                 .append(" ")
                 .append(value)
                 .append("\n");

File: common/common/src/main/java/io/helidon/common/Prioritized.java
Patch:
@@ -34,14 +34,14 @@
 public interface Prioritized {
     /**
      * Default priority for any prioritized component (whether it implements this interface
-     * or uses {@code javax.annotation.Priority} annotation.
+     * or uses {@code jakarta.annotation.Priority} annotation.
      */
     int DEFAULT_PRIORITY = 5000;
 
     /**
      * Priority of this class (maybe because it is defined
      * dynamically, so it cannot be defined by an annotation).
-     * If not dynamic, you can use the {@code javax.annotation.Priority}
+     * If not dynamic, you can use the {@code jakarta.annotation.Priority}
      * annotation rather then implementing this interface as long as
      * it is supported by the library using this {@code Prioritized}.
      *

File: common/common/src/test/java/io/helidon/common/LazyListTest.java
Patch:
@@ -22,13 +22,13 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 
-import org.junit.jupiter.api.Test;
-
 public class LazyListTest {
     @Test
     void getSizeAdd() {

File: common/context/src/test/java/io/helidon/common/context/DataPropagationProviderTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.junit.jupiter.api.Test;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Verifies backward compatibility of SPI after method deprecation.

File: common/reactive/src/test/java/io/helidon/common/reactive/AwaitTest.java
Patch:
@@ -33,14 +33,14 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-import org.junit.jupiter.api.Test;
-
 public class AwaitTest {
 
     private static final long EXPECTED_SUM = 10L;

File: common/reactive/src/test/java/io/helidon/common/reactive/ByteChannelSubscriberTest.java
Patch:
@@ -33,12 +33,12 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
-import static org.hamcrest.MatcherAssert.assertThat;
-
 import org.hamcrest.CoreMatchers;
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+
 public class ByteChannelSubscriberTest {
 
     final static List<String> EXPECTED_VALUES = List.of("line 1", "line 2", "line 3", "line 4", "line 5", "line 6", "line 7");

File: common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java
Patch:
@@ -22,8 +22,8 @@
 
 import org.junit.jupiter.api.Test;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Tests cancellation of {@code Future} and {@code Single}.

File: common/reactive/src/test/java/io/helidon/common/reactive/EmitterTest.java
Patch:
@@ -24,12 +24,12 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 
-import org.junit.jupiter.api.Test;
-
 public class EmitterTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/IgnoreElementsTest.java
Patch:
@@ -25,12 +25,12 @@
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 public class IgnoreElementsTest {
     @Test
     void multiIgnoreTriggerSubscription() throws InterruptedException {

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiComposeTest.java
Patch:
@@ -17,10 +17,10 @@
 
 import java.util.function.Function;
 
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 public class MultiComposeTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDefaultIfEmptyTest.java
Patch:
@@ -18,11 +18,11 @@
 import java.io.IOException;
 import java.util.concurrent.SubmissionPublisher;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 public class MultiDefaultIfEmptyTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDropWhileTest.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
-
 import java.util.Collections;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.notNullValue;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapCompletionStageTest.java
Patch:
@@ -17,14 +17,11 @@
 package io.helidon.common.reactive;
 
 import java.util.List;
-import java.util.NoSuchElementException;
-import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
-import java.util.stream.Stream;
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.AfterAll;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapPublisherTest.java
Patch:
@@ -28,16 +28,16 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
+import org.junit.jupiter.api.RepeatedTest;
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.fail;
 
-import org.junit.jupiter.api.RepeatedTest;
-import org.junit.jupiter.api.Test;
-
 public class MultiFlatMapPublisherTest {
 
     Multi<Integer> items(int count) {

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromArrayTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.helidon.common.reactive;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.core.Is.is;
 
-import org.junit.jupiter.api.Test;
-
 public class MultiFromArrayTest {
     @Test
     public void nullItem() {

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromInputStreamTest.java
Patch:
@@ -30,15 +30,15 @@
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.equalTo;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.RepetitionInfo;
 import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.equalTo;
+
 public class MultiFromInputStreamTest {
 
     private static ExecutorService executorService;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromOutputStreamTest.java
Patch:
@@ -21,14 +21,14 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.TimeUnit;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-import org.junit.jupiter.api.Test;
-
 /**
  * {@link MultiFromOutputStream} test.
  */

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeTest.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
-
 import java.io.IOException;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeWithTest.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
-
 import java.io.IOException;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeLongTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.helidon.common.reactive;
 
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 public class MultiRangeLongTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.helidon.common.reactive;
 
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 public class MultiRangeTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceFullTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
-
 import java.io.IOException;
 
+import org.junit.jupiter.api.Test;
+
 public class MultiReduceFullTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
-
 import java.io.IOException;
 
+import org.junit.jupiter.api.Test;
+
 public class MultiReduceTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRetryTest.java
Patch:
@@ -21,12 +21,12 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 public class MultiRetryTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSkipPublisherTest.java
Patch:
@@ -16,9 +16,10 @@
 
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
+import java.util.Collections;
+import java.util.Iterator;
 
-import java.util.*;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSwitchIfEmptyTest.java
Patch:
@@ -18,11 +18,11 @@
 import java.io.IOException;
 import java.util.concurrent.SubmissionPublisher;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 public class MultiSwitchIfEmptyTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeWhilePublisherTest.java
Patch:
@@ -16,11 +16,11 @@
 
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
-
 import java.io.IOException;
 import java.util.Arrays;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTest.java
Patch:
@@ -31,6 +31,9 @@
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.hasItems;
 import static org.hamcrest.CoreMatchers.instanceOf;
@@ -41,9 +44,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.empty;
 
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-
 /**
  * {@link MultiTest} test.
  */

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTimeoutTest.java
Patch:
@@ -21,13 +21,13 @@
 import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.TimeUnit;
 
-import static org.junit.jupiter.api.Assertions.assertFalse;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 public class MultiTimeoutTest {
 
     private static ScheduledExecutorService executor;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiToTest.java
Patch:
@@ -17,10 +17,10 @@
 
 import java.util.function.Function;
 
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 public class MultiToTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/SequentialSubscriberTest.java
Patch:
@@ -24,10 +24,10 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.ReentrantLock;
 
-import static org.junit.jupiter.api.Assertions.assertFalse;
-
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertFalse;
+
 public class SequentialSubscriberTest {
     int counter = 0;
     Optional<String> errorFound = Optional.empty();

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleComposeTest.java
Patch:
@@ -17,10 +17,10 @@
 
 import java.util.function.Function;
 
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 public class SingleComposeTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleDefaultIfEmptyTest.java
Patch:
@@ -15,15 +15,14 @@
  */
 package io.helidon.common.reactive;
 
-
 import java.io.IOException;
 import java.util.concurrent.SubmissionPublisher;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 
 public class SingleDefaultIfEmptyTest {
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapIterableTest.java
Patch:
@@ -20,14 +20,14 @@
 import java.util.Collections;
 import java.util.Iterator;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.core.Is.is;
 
-import org.junit.jupiter.api.Test;
-
 public class SingleFlatMapIterableTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapMultiTest.java
Patch:
@@ -18,11 +18,11 @@
 
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 
-import org.junit.jupiter.api.Test;
-
 public class SingleFlatMapMultiTest {
     @Test
     public void emptySource() {

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapSingleTest.java
Patch:
@@ -16,11 +16,11 @@
 
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
-
 import java.io.IOException;
 import java.util.concurrent.SubmissionPublisher;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFromCompletionStageTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
-
 import java.util.concurrent.CompletableFuture;
 
+import org.junit.jupiter.api.Test;
+
 public class SingleFromCompletionStageTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeTest.java
Patch:
@@ -16,14 +16,13 @@
 
 package io.helidon.common.reactive;
 
-
 import java.io.IOException;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
 
-import org.junit.jupiter.api.Test;
-
 public class SingleOnErrorResumeTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeWithTest.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.helidon.common.reactive;
 
-import org.junit.jupiter.api.Test;
-
 import java.io.IOException;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleRetryTest.java
Patch:
@@ -21,12 +21,12 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 public class SingleRetryTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleSwitchIfEmptyTest.java
Patch:
@@ -15,16 +15,15 @@
  */
 package io.helidon.common.reactive;
 
-
 import java.io.IOException;
 import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 public class SingleSwitchIfEmptyTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleToTest.java
Patch:
@@ -17,10 +17,10 @@
 
 import java.util.function.Function;
 
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 public class SingleToTest {
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/TerminatedFutureTest.java
Patch:
@@ -21,14 +21,14 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 
 public class TerminatedFutureTest {
 

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/BaselineSoloJMH.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.helidon.common.reactive.Multi;
 import io.helidon.common.reactive.Single;
+
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.infra.Blackhole;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/ShakespearePlaysScrabble.java
Patch:
@@ -23,7 +23,9 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.openjdk.jmh.annotations.*;
+import org.openjdk.jmh.annotations.Scope;
+import org.openjdk.jmh.annotations.Setup;
+import org.openjdk.jmh.annotations.State;
 
 /**
  * Original copyright Jose Paumard, 2019.

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/SyncBoundedJmhSubscriber.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.helidon.common.reactive.jmh;
 
-import org.openjdk.jmh.infra.Blackhole;
-
 import java.util.concurrent.Flow;
 
+import org.openjdk.jmh.infra.Blackhole;
+
 /**
  * Subscriber for testing synchronous sources via an unbounded request amount.
  */

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/SyncUnboundedJmhSubscriber.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.helidon.common.reactive.jmh;
 
-import org.openjdk.jmh.infra.Blackhole;
-
 import java.util.concurrent.Flow;
 
+import org.openjdk.jmh.infra.Blackhole;
+
 /**
  * Subscriber for testing synchronous sources via an unbounded request amount.
  */

File: common/service-loader/src/main/java/io/helidon/common/serviceloader/HelidonServiceLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@
  * <ul>
  * <li>Can have additional implementations added</li>
  * <li>Uses priorities defined either by {@link io.helidon.common.Prioritized}
- * or by {@link javax.annotation.Priority}</li>
+ * or by {@link jakarta.annotation.Priority}</li>
  * <li>Can have exclusions defined by an exact implementation class name, either
  * in {@link Builder#addExcludedClass(Class)} or {@link Builder#addExcludedClassName(String)} or
  * by a system property {@value #SYSTEM_PROPERTY_EXCLUDE} that defines
@@ -51,7 +51,7 @@
  * <ul>
  * <li>Value provided in {@link Builder#addService(Object, int)} (if used)</li>
  * <li>then by {@link io.helidon.common.Prioritized#priority()} if service implements it</li>
- * <li>then by {@link javax.annotation.Priority} annotation if present</li>
+ * <li>then by {@link jakarta.annotation.Priority} annotation if present</li>
  * <li>otherwise a default priority {@value Prioritized#DEFAULT_PRIORITY} from {@link Prioritized#DEFAULT_PRIORITY} is used</li>
  * </ul>
  * Example:

File: common/service-loader/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 module io.helidon.common.serviceloader {
     requires java.logging;
     requires io.helidon.common;
-    requires java.annotation;
+    requires jakarta.annotation;
 
     exports io.helidon.common.serviceloader;
 }

File: common/service-loader/src/test/java/io/helidon/common/serviceloader/PrioritiesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,10 +19,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Priority;
-
 import io.helidon.common.Prioritized;
 
+import jakarta.annotation.Priority;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;

File: common/service-loader/src/test/java/io/helidon/common/serviceloader/ServiceImpl1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package io.helidon.common.serviceloader;
 
-import javax.annotation.Priority;
+import jakarta.annotation.Priority;
 
 /**
  * A service implementation.

File: common/service-loader/src/test/java/io/helidon/common/serviceloader/ServiceImpl2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/service-loader/src/test/java/io/helidon/common/serviceloader/ServiceImpl3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 package io.helidon.common.serviceloader;
 
-import javax.annotation.Priority;
+import jakarta.annotation.Priority;
 
 /**
  * A service implementation.

File: config/config-mp/src/main/java/io/helidon/config/mp/MpEnvironmentVariablesSource.java
Patch:
@@ -21,8 +21,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Pattern;
 
-import javax.annotation.Priority;
-
+import jakarta.annotation.Priority;
 import org.eclipse.microprofile.config.spi.ConfigSource;
 
 @Priority(300)

File: config/config-mp/src/main/java/io/helidon/config/mp/MpSystemPropertiesSource.java
Patch:
@@ -22,8 +22,7 @@
 import java.util.Properties;
 import java.util.Set;
 
-import javax.annotation.Priority;
-
+import jakarta.annotation.Priority;
 import org.eclipse.microprofile.config.spi.ConfigSource;
 
 @Priority(400)

File: config/config-mp/src/main/java/module-info.java
Patch:
@@ -23,7 +23,7 @@
     requires io.helidon.config;
     requires io.helidon.config.yaml.mp;
     requires transitive microprofile.config.api;
-    requires java.annotation;
+    requires jakarta.annotation;
     requires io.helidon.common.serviceloader;
 
     exports io.helidon.config.mp;

File: config/config/src/main/java/io/helidon/config/Config.java
Patch:
@@ -1403,7 +1403,7 @@ default Builder sources(Supplier<? extends ConfigSource> configSource,
          * loaded as a {@link java.util.ServiceLoader service}.
          * <p>
          * Order of configuration mapper providers loaded as a service
-         * is defined by {@link javax.annotation.Priority} annotation.
+         * is defined by {@link jakarta.annotation.Priority} annotation.
          * <p>
          * Automatic registration of mappers as a service is enabled by default.
          *
@@ -1431,7 +1431,7 @@ default Builder sources(Supplier<? extends ConfigSource> configSource,
         /**
          * Disables automatic registration of parsers loaded as a {@link java.util.ServiceLoader service}.
          * <p>
-         * Order of configuration parsers loaded as a service is defined by {@link javax.annotation.Priority} annotation.
+         * Order of configuration parsers loaded as a service is defined by {@link jakarta.annotation.Priority} annotation.
          * <p>
          * Automatic registration of parsers as a service is enabled by default.
          *
@@ -1510,7 +1510,7 @@ default Builder sources(Supplier<? extends ConfigSource> configSource,
         /**
          * Disables automatic registration of filters loaded as a {@link java.util.ServiceLoader service}.
          * <p>
-         * Order of configuration filters loaded as a service is defined by {@link javax.annotation.Priority} annotation.
+         * Order of configuration filters loaded as a service is defined by {@link jakarta.annotation.Priority} annotation.
          * <p>
          * Automatic registration of filters as a service is enabled by default.
          *

File: config/config/src/main/java/io/helidon/config/MetaProviders.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import javax.annotation.Priority;
-
 import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.spi.ChangeWatcher;
 import io.helidon.config.spi.ChangeWatcherProvider;
@@ -37,6 +35,8 @@
 import io.helidon.config.spi.RetryPolicy;
 import io.helidon.config.spi.RetryPolicyProvider;
 
+import jakarta.annotation.Priority;
+
 /**
  * Access to Java service loaders for config sources, retry policies and polling strategies.
  */

File: config/config/src/main/java/io/helidon/config/PropertiesConfigParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,12 +19,12 @@
 import java.util.Properties;
 import java.util.Set;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigParser;
 import io.helidon.config.spi.ConfigParserException;
 
+import jakarta.annotation.Priority;
+
 /**
  * {@link ConfigParser} implementation that parses Java Properties content.
  * <p>

File: config/config/src/main/java/io/helidon/config/spi/ConfigFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@
  * given {@code Builder} by invoking
  * {@link Config.Builder#disableFilterServices()}.
  * <p>
- * A filter can specify a {@link javax.annotation.Priority}. If no priority is
+ * A filter can specify a {@link jakarta.annotation.Priority}. If no priority is
  * explicitly assigned, the value of {@value PRIORITY} is assumed.
  * <h2>Initializing Filters</h2>
  * Any filter that uses the {@code Config} instance during its initialization

File: config/config/src/main/java/io/helidon/config/spi/ConfigMapperProvider.java
Patch:
@@ -36,7 +36,7 @@
  * {@link Config.Builder#disableMapperServices()}.
  * <p>
  * Each {@code ConfigMapperProvider} can specify a
- * {@link javax.annotation.Priority}. The default priority is {@value PRIORITY}.
+ * {@link jakarta.annotation.Priority}. The default priority is {@value PRIORITY}.
  *
  * @see Config.Builder#addStringMapper(Class, Function)
  * @see Config.Builder#addMapper(ConfigMapperProvider)

File: config/config/src/main/java/io/helidon/config/spi/ConfigParser.java
Patch:
@@ -39,7 +39,7 @@
  * given {@code Builder} by invoking
  * {@link io.helidon.config.Config.Builder#disableParserServices()}.
  * <p>
- * A parser can specify a {@link javax.annotation.Priority}. If no priority is
+ * A parser can specify a {@link jakarta.annotation.Priority}. If no priority is
  * explicitly assigned, the value of {@value PRIORITY} is assumed.
  * <p>
  * Parser is used by the config system and a config source provides data as an input stream.

File: config/config/src/main/java/module-info.java
Patch:
@@ -25,7 +25,7 @@
 
     requires java.logging;
 
-    requires transitive java.annotation;
+    requires transitive jakarta.annotation;
 
     requires transitive io.helidon.common;
     requires transitive io.helidon.common.reactive;

File: config/config/src/test/java/io/helidon/config/AutoLoadedConfigHighPriority.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.config;
 
-import javax.annotation.Priority;
+import jakarta.annotation.Priority;
 
 /**
  * Higher-priority of two auto-loaded filters identical except for their priorities

File: config/config/src/test/java/io/helidon/config/AutoLoadedConfigLowPriority.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.config;
 
-import javax.annotation.Priority;
+import jakarta.annotation.Priority;
 
 /**
  * Lower-priority of two auto-loaded filters identical except for their priorities

File: config/etcd/src/main/java/module-info.java
Patch:
@@ -31,6 +31,9 @@
     requires io.helidon.common;
     requires io.helidon.common.media.type;
     requires io.grpc;
+    // TODO 3.0.0-JAKARTA
+    // used only for compilation of generated classes
+    requires static java.annotation;
 
     exports io.helidon.config.etcd;
 

File: config/hocon/src/main/java/io/helidon/config/hocon/HoconConfigParser.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.Objects;
 import java.util.Set;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.ConfigException;
 import io.helidon.config.spi.ConfigNode.ListNode;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
@@ -33,6 +31,7 @@
 import com.typesafe.config.ConfigList;
 import com.typesafe.config.ConfigObject;
 import com.typesafe.config.ConfigResolveOptions;
+import jakarta.annotation.Priority;
 
 /**
  * Typesafe (Lightbend) Config (HOCON) {@link ConfigParser} implementation that supports following media types:

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/ObjectConfigMapperProvider.java
Patch:
@@ -19,8 +19,6 @@
 import java.util.Optional;
 import java.util.function.Function;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.Config;
 import io.helidon.config.objectmapping.ObjectConfigMappers.BuilderConfigMapper;
 import io.helidon.config.objectmapping.ObjectConfigMappers.ConfigMethodHandleConfigMapper;
@@ -29,6 +27,8 @@
 import io.helidon.config.objectmapping.ObjectConfigMappers.StringMethodHandleConfigMapper;
 import io.helidon.config.spi.ConfigMapperProvider;
 
+import jakarta.annotation.Priority;
+
 import static io.helidon.config.objectmapping.ReflectionUtil.findBuilderConstructor;
 import static io.helidon.config.objectmapping.ReflectionUtil.findBuilderMethod;
 import static io.helidon.config.objectmapping.ReflectionUtil.findConstructor;

File: config/tests/module-mappers-1-base/src/main/java/io/helidon/config/tests/module/mappers1/Mappers1ConfigMapperProvider.java
Patch:
@@ -21,11 +21,11 @@
 import java.util.function.Function;
 import java.util.logging.Logger;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigMapperProvider;
 
+import jakarta.annotation.Priority;
+
 /**
  * Registers Config mappers for {@link Logger} and {@link Locale}.
  */

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/Mappers2Priority100ConfigMapperProvider.java
Patch:
@@ -20,11 +20,11 @@
 import java.util.function.Function;
 import java.util.logging.Logger;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigMapperProvider;
 
+import jakarta.annotation.Priority;
+
 /**
  * Registers Config mappers for {@link Logger}.
  */

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/Mappers2Priority150ConfigMapperProvider.java
Patch:
@@ -21,11 +21,11 @@
 import java.util.OptionalInt;
 import java.util.function.Function;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigMapperProvider;
 
+import jakarta.annotation.Priority;
+
 /**
  * Registers config mapper for {@link OptionalInt}, {@link Integer} and {@link java.math.BigInteger}.
  */

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/Mappers2Priority50ConfigMapperProvider.java
Patch:
@@ -20,11 +20,11 @@
 import java.util.Map;
 import java.util.function.Function;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigMapperProvider;
 
+import jakarta.annotation.Priority;
+
 /**
  * Registers Config mappers for {@link Locale}.
  */

File: config/tests/module-parsers-1-override/src/main/java/io/helidon/config/tests/module/parsers1/Parsers1Priority100ConfigParser.java
Patch:
@@ -16,11 +16,11 @@
 
 package io.helidon.config.tests.module.parsers1;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigNode.ValueNode;
 
+import jakarta.annotation.Priority;
+
 /**
  * Testing implementation of {@code text/x-java-properties} media type
  * with Priority {@code 100}.

File: config/tests/module-parsers-1-override/src/main/java/io/helidon/config/tests/module/parsers1/Parsers1Priority300ConfigParser.java
Patch:
@@ -16,11 +16,11 @@
 
 package io.helidon.config.tests.module.parsers1;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigNode.ValueNode;
 
+import jakarta.annotation.Priority;
+
 /**
  * Testing implementation of {@code text/x-java-properties} media type
  * with Priority {@code 300}.

File: config/yaml/src/main/java/io/helidon/config/yaml/YamlConfigParser.java
Patch:
@@ -22,14 +22,13 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.annotation.Priority;
-
 import io.helidon.config.ConfigException;
 import io.helidon.config.spi.ConfigNode.ListNode;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
 import io.helidon.config.spi.ConfigParser;
 import io.helidon.config.spi.ConfigParserException;
 
+import jakarta.annotation.Priority;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 

File: dbclient/dbclient/src/main/java/io/helidon/dbclient/DbMapperManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -153,7 +153,7 @@ public Builder addMapperProvider(DbMapperProvider provider) {
          * @param priority priority to use
          * @return updated builder instance
          * @see io.helidon.common.Prioritized
-         * @see javax.annotation.Priority
+         * @see jakarta.annotation.Priority
          */
         public Builder addMapperProvider(DbMapperProvider provider, int priority) {
             this.providers.addService(provider, priority);

File: dbclient/jdbc/src/test/java/io/helidon/dbclient/jdbc/JdbcClientTest.java
Patch:
@@ -30,7 +30,9 @@
 import org.mockito.Mockito;
 
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.*;
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
 import static org.junit.jupiter.api.Assertions.fail;
 
 public class JdbcClientTest {

File: dbclient/jsonp/src/main/java/module-info.java
Patch:
@@ -20,7 +20,7 @@
 module io.helidon.dbclient.jsonp {
     requires java.logging;
     requires io.helidon.dbclient;
-    requires java.json;
+    requires jakarta.json;
 
     exports io.helidon.dbclient.jsonp;
 

File: dbclient/metrics/src/main/java/io/helidon/dbclient/metrics/DbClientMetric.java
Patch:
@@ -59,7 +59,7 @@ protected DbClientMetric(DbClientMetricBuilderBase<?> builder) {
         this.measureSuccess = builder.success();
         String tmpDescription;
         if (builder.description() == null) {
-            tmpDescription = ((null == meta) ? null : meta.getDescription().orElse(null));
+            tmpDescription = ((null == meta) ? null : meta.getDescription());
         } else {
             tmpDescription = builder.description();
         }

File: dbclient/metrics/src/main/java/io/helidon/dbclient/metrics/DbClientTimer.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.helidon.dbclient.metrics;
 
+import java.time.Duration;
 import java.util.concurrent.CompletionStage;
-import java.util.concurrent.TimeUnit;
 
 import org.eclipse.microprofile.metrics.Metadata;
 import org.eclipse.microprofile.metrics.MetricRegistry;
@@ -61,7 +61,7 @@ protected void executeMetric(Timer metric, CompletionStage<Void> aFuture) {
 
     private void update(Timer metric, long started) {
         long delta = System.nanoTime() - started;
-        metric.update(delta, TimeUnit.NANOSECONDS);
+        metric.update(Duration.ofNanos(delta));
     }
 
     @Override

File: dbclient/mongodb/src/main/java/io/helidon/dbclient/mongodb/MongoDbStatement.java
Patch:
@@ -19,16 +19,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.json.Json;
-import javax.json.JsonReaderFactory;
-
 import io.helidon.dbclient.DbStatement;
 import io.helidon.dbclient.DbStatementType;
 import io.helidon.dbclient.common.AbstractStatement;
 import io.helidon.dbclient.common.DbStatementContext;
 import io.helidon.dbclient.mongodb.MongoDbTransaction.TransactionManager;
 
 import com.mongodb.reactivestreams.client.MongoDatabase;
+import jakarta.json.Json;
+import jakarta.json.JsonReaderFactory;
 import org.bson.Document;
 
 /**

File: dbclient/mongodb/src/main/java/io/helidon/dbclient/mongodb/StatementParsers.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.function.Consumer;
 import java.util.logging.Logger;
 
-import javax.json.Json;
+import jakarta.json.Json;
 
 /**
  * Statement parameter parsers.

File: dbclient/mongodb/src/main/java/module-info.java
Patch:
@@ -21,7 +21,7 @@
     requires java.logging;
     requires java.sql;
 
-    requires transitive java.json;
+    requires transitive jakarta.json;
     requires mongodb.driver.reactivestreams;
     requires org.mongodb.driver.core;
     requires org.mongodb.bson;

File: dbclient/mongodb/src/test/java/io/helidon/dbclient/mongodb/MongoDbClientTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.mockito.Mockito;
 
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.*;
+import static org.hamcrest.Matchers.notNullValue;
 import static org.junit.jupiter.api.Assertions.fail;
 
 public class MongoDbClientTest {

File: examples/cors/src/test/java/io/helidon/examples/cors/MainTest.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
-import javax.json.JsonObject;
-
 import io.helidon.common.http.Headers;
 import io.helidon.common.http.MediaType;
 import io.helidon.config.Config;
@@ -32,6 +30,7 @@
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.cors.CrossOriginConfig;
 
+import jakarta.json.JsonObject;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;

File: examples/dbclient/common/src/main/java/io/helidon/examples/dbclient/common/AbstractPokemonService.java
Patch:
@@ -19,8 +19,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import javax.json.JsonObject;
-
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Multi;
 import io.helidon.common.reactive.Single;
@@ -32,6 +30,8 @@
 import io.helidon.webserver.ServerResponse;
 import io.helidon.webserver.Service;
 
+import jakarta.json.JsonObject;
+
 /**
  * Common methods that do not differ between JDBC and MongoDB.
  */

File: examples/dbclient/common/src/main/java/io/helidon/examples/dbclient/common/PokemonMapperProvider.java
Patch:
@@ -17,11 +17,11 @@
 
 import java.util.Optional;
 
-import javax.annotation.Priority;
-
 import io.helidon.dbclient.DbMapper;
 import io.helidon.dbclient.spi.DbMapperProvider;
 
+import jakarta.annotation.Priority;
+
 /**
  * Provides pokemon mappers.
  */

File: examples/dbclient/common/src/main/java/module-info.java
Patch:
@@ -19,7 +19,7 @@
 module io.helidon.examples.dbclient.common {
     requires java.logging;
 
-    requires java.json;
+    requires jakarta.json;
     requires transitive io.helidon.dbclient;
     requires io.helidon.common.http;
     requires transitive io.helidon.webserver;

File: examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/PokemonMapperProvider.java
Patch:
@@ -17,11 +17,11 @@
 
 import java.util.Optional;
 
-import javax.annotation.Priority;
-
 import io.helidon.dbclient.DbMapper;
 import io.helidon.dbclient.spi.DbMapperProvider;
 
+import jakarta.annotation.Priority;
+
 /**
  * Provides pokemon mappers.
  */

File: examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/PokemonService.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import javax.json.JsonObject;
-
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
 import io.helidon.dbclient.DbClient;
@@ -32,6 +30,8 @@
 import io.helidon.webserver.ServerResponse;
 import io.helidon.webserver.Service;
 
+import jakarta.json.JsonObject;
+
 /**
  * Example service using a database.
  */
@@ -242,7 +242,7 @@ private void sendNotFound(ServerResponse response, String message) {
      * @param response server response
      */
     private void sendRow(DbRow row, ServerResponse response) {
-        response.send(row.as(javax.json.JsonObject.class));
+        response.send(row.as(jakarta.json.JsonObject.class));
     }
 
     /**

File: examples/dbclient/pokemons/src/main/java/module-info.java
Patch:
@@ -19,7 +19,7 @@
  */
 module io.helidon.examples.dbclient.pokemons.jdbc {
     requires java.logging;
-    requires java.json;
+    requires jakarta.json;
 
     requires io.helidon.config;
     requires io.helidon.dbclient.health;

File: examples/employee-app/src/main/java/io/helidon/service/employee/Employee.java
Patch:
@@ -17,8 +17,8 @@
 
 import java.util.UUID;
 
-import javax.json.bind.annotation.JsonbCreator;
-import javax.json.bind.annotation.JsonbProperty;
+import jakarta.json.bind.annotation.JsonbCreator;
+import jakarta.json.bind.annotation.JsonbProperty;
 /**
  * Represents an employee.
  */

File: examples/employee-app/src/main/java/io/helidon/service/employee/EmployeeRepositoryImpl.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.stream.Collectors;
 
-import javax.json.bind.Jsonb;
-import javax.json.bind.JsonbBuilder;
-import javax.json.bind.JsonbConfig;
+import jakarta.json.bind.Jsonb;
+import jakarta.json.bind.JsonbBuilder;
+import jakarta.json.bind.JsonbConfig;
 
 /**
  * Implementation of the {@link EmployeeRepository}. This implementation uses a

File: examples/grpc/microprofile/basic-server-implicit/src/main/java/io/helidon/microprofile/grpc/example/basic/implicit/AsyncStringService.java
Patch:
@@ -21,8 +21,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import javax.enterprise.context.ApplicationScoped;
-
 import io.helidon.grpc.server.CollectingObserver;
 import io.helidon.microprofile.grpc.core.Bidirectional;
 import io.helidon.microprofile.grpc.core.ClientStreaming;
@@ -31,12 +29,13 @@
 import io.helidon.microprofile.grpc.core.Unary;
 
 import io.grpc.stub.StreamObserver;
+import jakarta.enterprise.context.ApplicationScoped;
 
 /**
  * The gRPC StringService implementation that uses async unary methods.
  * <p>
  * This class is a gRPC service annotated with {@link io.helidon.microprofile.grpc.core.Grpc} and
- * {@link javax.enterprise.context.ApplicationScoped} so that it will be discovered and deployed using
+ * {@link jakarta.enterprise.context.ApplicationScoped} so that it will be discovered and deployed using
  * CDI when the MP gRPC server starts.
  */
 @Grpc

File: examples/grpc/microprofile/basic-server-implicit/src/main/java/io/helidon/microprofile/grpc/example/basic/implicit/StringService.java
Patch:
@@ -19,8 +19,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import javax.enterprise.context.ApplicationScoped;
-
 import io.helidon.grpc.server.CollectingObserver;
 import io.helidon.microprofile.grpc.core.Bidirectional;
 import io.helidon.microprofile.grpc.core.ClientStreaming;
@@ -29,6 +27,7 @@
 import io.helidon.microprofile.grpc.core.Unary;
 
 import io.grpc.stub.StreamObserver;
+import jakarta.enterprise.context.ApplicationScoped;
 
 /**
  * The gRPC StringService implementation.

File: examples/grpc/microprofile/metrics/src/main/java/io/helidon/microprofile/grpc/example/metrics/StringService.java
Patch:
@@ -19,8 +19,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import javax.enterprise.context.ApplicationScoped;
-
 import io.helidon.grpc.server.CollectingObserver;
 import io.helidon.microprofile.grpc.core.Bidirectional;
 import io.helidon.microprofile.grpc.core.ClientStreaming;
@@ -29,6 +27,7 @@
 import io.helidon.microprofile.grpc.core.Unary;
 
 import io.grpc.stub.StreamObserver;
+import jakarta.enterprise.context.ApplicationScoped;
 import org.eclipse.microprofile.metrics.annotation.Counted;
 import org.eclipse.microprofile.metrics.annotation.Metered;
 import org.eclipse.microprofile.metrics.annotation.Timed;
@@ -37,7 +36,7 @@
  * The gRPC StringService implementation.
  * <p>
  * This class is a gRPC service annotated with {@link io.helidon.microprofile.grpc.core.Grpc}
- * and {@link javax.enterprise.context.ApplicationScoped} so that it will be discovered and deployed
+ * and {@link jakarta.enterprise.context.ApplicationScoped} so that it will be discovered and deployed
  * using CDI when the MP gRPC server starts.
  */
 @Grpc

File: examples/integrations/cdi/jpa/src/main/java/io/helidon/examples/integrations/cdi/jpa/HelloWorldApplication.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.ws.rs.core.Application;
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.ws.rs.core.Application;
 
 /**
  * An example {@link Application} demonstrating the modular

File: examples/integrations/micrometer/mp/src/main/java/io/helidon/examples/integrations/micrometer/mp/GreetingProvider.java
Patch:
@@ -17,9 +17,8 @@
 
 import java.util.concurrent.atomic.AtomicReference;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Inject;
-
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
 import org.eclipse.microprofile.config.inject.ConfigProperty;
 
 /**

File: examples/integrations/micronaut/data/src/main/java/io/helidon/examples/integrations/micronaut/data/DbPopulateData.java
Patch:
@@ -20,15 +20,14 @@
 
 import java.util.Arrays;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
-
 import io.helidon.examples.integrations.micronaut.data.model.Owner;
 import io.helidon.examples.integrations.micronaut.data.model.Pet;
 
 import io.micronaut.context.event.StartupEvent;
 import io.micronaut.core.annotation.TypeHint;
 import io.micronaut.runtime.event.annotation.EventListener;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 
 /**
  * A Micronaut bean that listens on startup event and populates database with data.

File: examples/integrations/microstream/greetings-mp/src/main/java/io/helidon/examples/integrations/microstream/greetings/mp/GreetingProvider.java
Patch:
@@ -21,11 +21,10 @@
 import java.util.Random;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Inject;
-
 import io.helidon.integrations.microstream.cdi.MicrostreamStorage;
 
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
 import one.microstream.storage.embedded.types.EmbeddedStorageManager;
 
 /**

File: examples/integrations/microstream/greetings-se/src/test/java/io/helidon/examples/integrations/microstream/greetings/se/MicrostreamExampleGreetingsSeTest.java
Patch:
@@ -19,13 +19,12 @@
 import java.nio.file.Path;
 import java.util.concurrent.TimeUnit;
 
-import javax.json.JsonArray;
-import javax.json.JsonObject;
-
 import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webserver.WebServer;
 
+import jakarta.json.JsonArray;
+import jakarta.json.JsonObject;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;

File: examples/integrations/neo4j/neo4j-mp/src/main/java/io/helidon/examples/integrations/neo4j/mp/domain/MovieRepository.java
Patch:
@@ -18,9 +18,8 @@
 
 import java.util.List;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Inject;
-
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
 import org.neo4j.driver.Driver;
 import org.neo4j.driver.Value;
 /**

File: examples/integrations/neo4j/neo4j-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java
Patch:
@@ -18,15 +18,14 @@
 
 import java.util.concurrent.TimeUnit;
 
-import javax.json.JsonArray;
-
 import io.helidon.common.http.Http;
 import io.helidon.examples.integrations.neo4j.se.Main;
 import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webclient.WebClientResponse;
 import io.helidon.webserver.WebServer;
 
+import jakarta.json.JsonArray;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: examples/integrations/oci/atp-cdi/src/main/java/module-info.java
Patch:
@@ -21,8 +21,8 @@
     requires java.logging;
     requires java.naming;
     requires java.sql;
-    requires java.ws.rs;
-    requires jakarta.inject.api;
+    requires jakarta.ws.rs;
+    requires jakarta.inject;
     requires microprofile.config.api;
 
     requires io.helidon.config.yaml.mp;

File: examples/integrations/oci/atp-reactive/src/main/java/module-info.java
Patch:
@@ -19,7 +19,7 @@
  */
 module io.helidon.examples.integrations.oci.atp.reactive {
     requires java.logging;
-    requires java.json;
+    requires jakarta.json;
     requires java.sql;
 
     requires io.helidon.common.http;

File: examples/integrations/oci/objectstorage-cdi/src/main/java/module-info.java
Patch:
@@ -18,9 +18,9 @@
  * Example of integration with OCI object storage in a CDI application.
  */
 module io.helidon.examples.integrations.oci.objectstorage.cdi {
-    requires java.ws.rs;
-    requires java.json.bind;
-    requires jakarta.inject.api;
+    requires jakarta.ws.rs;
+    requires jakarta.json.bind;
+    requires jakarta.inject;
     requires microprofile.config.api;
 
     requires io.helidon.config.yaml.mp;

File: examples/integrations/oci/vault-cdi/src/main/java/module-info.java
Patch:
@@ -18,10 +18,10 @@
  * Example of OCI Vault integration in CDI.
  */
 module io.helidon.examples.integrations.oci.vault.cdi {
-    requires java.json.bind;
-    requires java.ws.rs;
+    requires jakarta.json.bind;
+    requires jakarta.ws.rs;
 
-    requires jakarta.inject.api;
+    requires jakarta.inject;
 
     requires microprofile.config.api;
 

File: examples/media/multipart/src/test/java/io/helidon/examples/media/multipart/FileServiceTest.java
Patch:
@@ -22,9 +22,6 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import javax.json.JsonObject;
-import javax.json.JsonString;
-
 import io.helidon.common.http.MediaType;
 import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.media.multipart.FileFormParams;
@@ -33,6 +30,8 @@
 import io.helidon.webclient.WebClientResponse;
 import io.helidon.webserver.WebServer;
 
+import jakarta.json.JsonObject;
+import jakarta.json.JsonString;
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;

File: examples/messaging/jms-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/MsgProcessingBean.java
Patch:
@@ -18,11 +18,10 @@
 
 import java.util.concurrent.SubmissionPublisher;
 
-import javax.enterprise.context.ApplicationScoped;
-
 import io.helidon.common.reactive.Multi;
 import io.helidon.messaging.connectors.jms.JmsMessage;
 
+import jakarta.enterprise.context.ApplicationScoped;
 import org.eclipse.microprofile.reactive.messaging.Incoming;
 import org.eclipse.microprofile.reactive.messaging.Message;
 import org.eclipse.microprofile.reactive.messaging.Outgoing;

File: examples/messaging/jms-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -21,14 +21,14 @@
 import java.io.InputStream;
 import java.util.logging.LogManager;
 
-import javax.websocket.server.ServerEndpointConfig;
-
 import io.helidon.config.Config;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.staticcontent.StaticContentSupport;
 import io.helidon.webserver.tyrus.TyrusSupport;
 
+import jakarta.websocket.server.ServerEndpointConfig;
+
 /**
  * The application main class.
  */

File: examples/messaging/kafka-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/MsgProcessingBean.java
Patch:
@@ -18,10 +18,9 @@
 
 import java.util.concurrent.SubmissionPublisher;
 
-import javax.enterprise.context.ApplicationScoped;
-
 import io.helidon.common.reactive.Multi;
 
+import jakarta.enterprise.context.ApplicationScoped;
 import org.eclipse.microprofile.reactive.messaging.Incoming;
 import org.eclipse.microprofile.reactive.messaging.Message;
 import org.eclipse.microprofile.reactive.messaging.Outgoing;

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -16,15 +16,15 @@
 
 package io.helidon.examples.messaging.se;
 
-import javax.websocket.server.ServerEndpointConfig;
-
 import io.helidon.common.LogConfig;
 import io.helidon.config.Config;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.staticcontent.StaticContentSupport;
 import io.helidon.webserver.tyrus.TyrusSupport;
 
+import jakarta.websocket.server.ServerEndpointConfig;
+
 /**
  * The application main class.
  */

File: examples/metrics/filtering/mp/src/main/java/io/helidon/examples/metrics/filtering/mp/GreetingProvider.java
Patch:
@@ -17,9 +17,8 @@
 
 import java.util.concurrent.atomic.AtomicReference;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Inject;
-
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
 import org.eclipse.microprofile.config.inject.ConfigProperty;
 
 /**

File: examples/microprofile/cors/src/main/java/io/helidon/microprofile/examples/cors/GreetingProvider.java
Patch:
@@ -17,9 +17,8 @@
 
 import java.util.concurrent.atomic.AtomicReference;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Inject;
-
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
 import org.eclipse.microprofile.config.inject.ConfigProperty;
 
 /**

File: examples/microprofile/graphql/src/main/java/io/helidon/examples/graphql/basics/TaskApi.java
Patch:
@@ -23,8 +23,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 
-import javax.enterprise.context.ApplicationScoped;
-
+import jakarta.enterprise.context.ApplicationScoped;
 import org.eclipse.microprofile.graphql.Description;
 import org.eclipse.microprofile.graphql.GraphQLApi;
 import org.eclipse.microprofile.graphql.Mutation;

File: examples/microprofile/hello-world-implicit/src/main/java/io/helidon/microprofile/example/helloworld/implicit/cdi/LoggerQualifier.java
Patch:
@@ -20,7 +20,7 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import javax.inject.Qualifier;
+import jakarta.inject.Qualifier;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 

File: examples/microprofile/hello-world-implicit/src/main/java/io/helidon/microprofile/example/helloworld/implicit/cdi/RequestId.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import javax.inject.Qualifier;
+import jakarta.inject.Qualifier;
 
 /**
  * Request id qualifier to inject increasing request id.

File: examples/microprofile/hello-world-implicit/src/main/java/io/helidon/microprofile/example/helloworld/implicit/cdi/RequestIdProducer.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.microprofile.example.helloworld.implicit.cdi;
 
-import javax.enterprise.context.ApplicationScoped;
+import jakarta.enterprise.context.ApplicationScoped;
 
 /**
  * Produce an ever increasing request id.

File: examples/microprofile/hello-world-implicit/src/main/java/io/helidon/microprofile/example/helloworld/implicit/cdi/ResourceProducer.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.util.concurrent.atomic.AtomicInteger;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.enterprise.inject.Produces;
-import javax.enterprise.inject.spi.InjectionPoint;
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.enterprise.inject.Produces;
+import jakarta.enterprise.inject.spi.InjectionPoint;
 
 /**
  * Producer for various resources required by this example.

File: examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/IdcsApplication.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.util.Set;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.ws.rs.ApplicationPath;
-import javax.ws.rs.core.Application;
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.ws.rs.ApplicationPath;
+import jakarta.ws.rs.core.Application;
 
 /**
  * Example JAX-RS application with resources protected by IDCS.

File: examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/ReactiveService.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.helidon.examples.microprofile.security.idcs;
 
-import javax.enterprise.context.ApplicationScoped;
-
 import io.helidon.microprofile.server.RoutingPath;
 import io.helidon.security.Principal;
 import io.helidon.security.SecurityContext;
@@ -26,6 +24,8 @@
 import io.helidon.webserver.ServerResponse;
 import io.helidon.webserver.Service;
 
+import jakarta.enterprise.context.ApplicationScoped;
+
 /**
  * Reactive service implementation.
  */

File: examples/microprofile/multipart/src/main/java/io/helidon/examples/microprofile/multipart/FileStorage.java
Patch:
@@ -21,9 +21,9 @@
 import java.nio.file.Path;
 import java.util.stream.Stream;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.ws.rs.BadRequestException;
-import javax.ws.rs.NotFoundException;
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.ws.rs.BadRequestException;
+import jakarta.ws.rs.NotFoundException;
 
 /**
  * Simple bean to managed a directory based storage.

File: examples/microprofile/multiport/src/main/java/io/helidon/examples/microprofile/multiport/PrivateApplication.java
Patch:
@@ -17,11 +17,11 @@
 
 import java.util.Set;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.ws.rs.core.Application;
-
 import io.helidon.microprofile.server.RoutingName;
 
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.ws.rs.core.Application;
+
 /**
  * Application to expose private resource.
  */

File: examples/microprofile/multiport/src/main/java/io/helidon/examples/microprofile/multiport/PrivateResource.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.helidon.examples.microprofile.multiport;
 
-import javax.enterprise.context.RequestScoped;
-import javax.ws.rs.GET;
-import javax.ws.rs.Path;
+import jakarta.enterprise.context.RequestScoped;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.Path;
 
 /**
  * Simple resource.

File: examples/microprofile/multiport/src/main/java/io/helidon/examples/microprofile/multiport/PublicApplication.java
Patch:
@@ -17,8 +17,8 @@
 
 import java.util.Set;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.ws.rs.core.Application;
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.ws.rs.core.Application;
 
 /**
  * Application to expose public resource.

File: examples/microprofile/multiport/src/main/java/io/helidon/examples/microprofile/multiport/PublicResource.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.helidon.examples.microprofile.multiport;
 
-import javax.enterprise.context.RequestScoped;
-import javax.ws.rs.GET;
-import javax.ws.rs.Path;
+import jakarta.enterprise.context.RequestScoped;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.Path;
 
 /**
  * Simple resource.

File: examples/microprofile/openapi-basic/src/main/java/io/helidon/microprofile/examples/openapi/basic/GreetingProvider.java
Patch:
@@ -17,9 +17,8 @@
 
 import java.util.concurrent.atomic.AtomicReference;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Inject;
-
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
 import org.eclipse.microprofile.config.inject.ConfigProperty;
 
 /**

File: examples/microprofile/security/src/main/java/io/helidon/microprofile/example/security/OtherApp.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.util.Set;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.ws.rs.ApplicationPath;
-import javax.ws.rs.core.Application;
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.ws.rs.ApplicationPath;
+import jakarta.ws.rs.core.Application;
 
 /**
  * An example of two applications in a single MP Server.

File: examples/microprofile/security/src/main/java/io/helidon/microprofile/example/security/StaticContentApp.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.util.Set;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.ws.rs.ApplicationPath;
-import javax.ws.rs.core.Application;
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.ws.rs.ApplicationPath;
+import jakarta.ws.rs.core.Application;
 
 /**
  * Example JAX-RS application with static content.

File: examples/microprofile/tls/src/test/java/io/helidon/microprofile/example/tls/TlsTest.java
Patch:
@@ -22,12 +22,12 @@
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
-import javax.ws.rs.client.Client;
-import javax.ws.rs.client.ClientBuilder;
-import javax.ws.rs.core.Response;
 
 import io.helidon.microprofile.server.Server;
 
+import jakarta.ws.rs.client.Client;
+import jakarta.ws.rs.client.ClientBuilder;
+import jakarta.ws.rs.core.Response;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: examples/microprofile/websocket/src/main/java/io/helidon/microprofile/example/websocket/MessageQueue.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
-import javax.enterprise.context.ApplicationScoped;
+import jakarta.enterprise.context.ApplicationScoped;
 
 /**
  * Class MessageQueue.

File: examples/quickstarts/helidon-quickstart-mp/src/main/java/io/helidon/examples/quickstart/mp/GreetingProvider.java
Patch:
@@ -17,9 +17,8 @@
 
 import java.util.concurrent.atomic.AtomicReference;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Inject;
-
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
 import org.eclipse.microprofile.config.inject.ConfigProperty;
 
 /**

File: bundles/config/src/main/java/io/helidon/bundles/config/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: bundles/jersey/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/common/src/test/java/io/helidon/common/LazyListTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/context/src/main/java/io/helidon/common/context/ContextAwareExecutorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/context/src/main/java/io/helidon/common/context/ContextAwareScheduledExecutorImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/context/src/main/java/io/helidon/common/context/ExecutorException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/context/src/main/java/io/helidon/common/context/ListContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/context/src/main/java/io/helidon/common/context/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/context/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/context/src/test/java/io/helidon/common/context/ContextAwareExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/context/src/test/java/io/helidon/common/context/ContextAwareScheduledExecutorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/context/src/test/java/io/helidon/common/context/ListContextTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/AcceptPredicate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/AlreadyCompletedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/Ascii.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/CharMatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/Headers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/HttpRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/Preconditions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/Tokenizer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/Utils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/test/java/io/helidon/common/http/AsciiTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/test/java/io/helidon/common/http/DataChunkTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -74,4 +74,4 @@ public void testReleasingNoRunnable() {
         chunk.release();
         assertThat(chunk.isReleased(), is(true));
     }
-}
\ No newline at end of file
+}

File: common/http/src/test/java/io/helidon/common/http/DateTimeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/test/java/io/helidon/common/http/FormParamsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/test/java/io/helidon/common/http/HttpTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,4 +50,4 @@ void testResposneStatusCustomReason() {
         assertThat(rs.code(), is(TEMPORARY_REDIRECT_307.code()));
         assertThat(rs.family(), is(TEMPORARY_REDIRECT_307.family()));
     }
-}
\ No newline at end of file
+}

File: common/http/src/test/java/io/helidon/common/http/MediaTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -127,4 +127,4 @@ void testBuilt() {
         assertThat(mediaType.parameters(), is(Map.of("q", "0.1", "charset", "ISO-8859-2")));
         assertThat(mediaType.qualityFactor(), closeTo(0.1, 0.000001));
     }
-}
\ No newline at end of file
+}

File: common/http/src/test/java/io/helidon/common/http/UtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/key-util/src/main/java/io/helidon/common/pki/PkiException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/key-util/src/main/java/io/helidon/common/pki/PkiUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/key-util/src/main/java/io/helidon/common/pki/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/mapper/src/main/java/io/helidon/common/mapper/MapperException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/mapper/src/main/java/io/helidon/common/mapper/MapperManagerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/mapper/src/main/java/io/helidon/common/mapper/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/media-type/src/main/java/io/helidon/common/media/type/BuiltInsDetector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/media-type/src/main/java/io/helidon/common/media/type/CustomDetector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/media-type/src/main/java/io/helidon/common/media/type/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/media-type/src/main/java/io/helidon/common/media/type/spi/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/ByteChannelSubscriber.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/Collector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/CompletionSingle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/ConcatPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/ConsumerChain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/DeferredScalarSubscription.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/EmittingPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/EmptySubscription.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/FunctionalSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/HalfSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiCollectPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiCollectorPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiDefaultIfEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiDefer.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiDeferredDefaultIfEmpty.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiDistinctPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiDropWhilePublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiError.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFilterPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFirstPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFlatMapIterable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFlatMapPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromCompletionStage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromIterable.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiIfEmptyPublisher.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiInterval.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiJustPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiLimitPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiObserveOn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiOnCompleteResumeWith.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiOnErrorResumeWith.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiRangeLongPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiRangePublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiReduce.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiReduceFull.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiRetry.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiSkipPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiSwitchIfEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTakeUntilPublisher.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTakeWhilePublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTappedPublisher.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTimeout.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTimer.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/NamedOperator.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/OptionalCompletionStage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/OptionalCompletionStageImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SequentialSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleDefaultIfEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleDefer.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleDeferredDefaultIfEmpty.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleError.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleFlatMapIterable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleFlatMapMulti.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleFlatMapSingle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleFromCompletionStage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleFromPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleIfEmptyPublisher.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleJust.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleMapperPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleNever.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleObserveOn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleOnErrorResume.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleOnErrorResumeWith.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleRetry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleSubscription.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleSwitchIfEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleTakeUntilPublisher.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleTappedPublisher.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleTimeout.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleTimer.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleToFuture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleToOptionalFuture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/StreamValidationUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SubscriptionArbiter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/SubscriptionHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/io/helidon/common/reactive/TerminatedFuture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/AwaitTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/ByteChannelSubscriberTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/IgnoreElementsTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiCollectTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiCollectorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiComposeTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiConcatArrayTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDefaultIfEmptyTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDeferTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDropWhileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFirstPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapIterableTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapOptionalTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapPublisherTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromArrayTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromCompletionStageTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromInputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromIterableTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromNotTrustedInputStreamTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromOutputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromStreamTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiIfEmptyTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiIntervalTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiObserveOnTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnCompleteResumeWithTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeWithTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeLongTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceFullTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRetryTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSkipPublisherTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSwitchIfEmptyTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeUntilPublisherTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeWhilePublisherTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTappedPublisherTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTimeoutTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiToTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/RetrySchemaTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SequentialSubscriberTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;
@@ -144,4 +143,4 @@ private void leavingMethod() {
             enterLeaveLock.unlock();
         }
     }
-}
\ No newline at end of file
+}

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleComposeTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleDefaultIfEmptyTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleDeferTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapIterableTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapMultiTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapOptionalTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapSingleTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFromCompletionStageTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleIfEmptyTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleObserveOnTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnCompleteResumeWithTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeWithTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleRetryTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleSwitchIfEmptyTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTakeUntilPublisherTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTappedPublisherTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTimeoutTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleToTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SubscribableTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/TerminatedFutureTest.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.common.reactive;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/TestConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/TestPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/TestRunnable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/TestSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/TestSubscription.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/BaselineJMH.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/BaselineSoloJMH.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/FlatMapIterableJMH.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/ShakespearePlaysScrabble.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -102,4 +102,4 @@ public static Set<String> readShakespeareWords() {
         return shakespeareWords;
     }
 
-}
\ No newline at end of file
+}

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/ShakespearePlaysScrabbleWithHelidonReactiveOpt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -211,4 +211,4 @@ public List<Entry<Integer, List<String>>> measureThroughput() throws Exception {
 
         return finalList2 ;
     }
-}
\ No newline at end of file
+}

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/SyncBoundedJmhSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/SyncUnboundedJmhSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/service-loader/src/main/java/io/helidon/common/serviceloader/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/service-loader/src/test/java/io/helidon/common/serviceloader/HelidonServiceLoaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/service-loader/src/test/java/io/helidon/common/serviceloader/ServiceInterface.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/ConfigAsciidocGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/ConfigComplexImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/ConfigDiffTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/ConfigEmptyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/ConfigLeafImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/ConfigListImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/ConfigValueTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/ConfigValuesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -97,4 +97,4 @@ private <T> void assertEmpty(ConfigValue<T> as, T defaultValue, String key) {
 
         as.ifPresent(theValue -> fail("This config is empty"));
     }
-}
\ No newline at end of file
+}

File: config/config/src/test/java/io/helidon/config/EnvironmentVariableAliasesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/EnvironmentVariablesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/TestHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/spi/FallbackMergingStrategyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/test/java/io/helidon/config/spi/OrderedPropertiesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/encryption/src/main/java/io/helidon/config/encryption/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/encryption/src/test/java/io/helidon/config/encryption/AbstractSecureConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/encryption/src/test/java/io/helidon/config/encryption/SecureConfigFromBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/main/java/io/helidon/config/etcd/EtcdConfigSourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/EtcdClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/EtcdClientException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/v2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/v3/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/test/java/io/helidon/config/etcd/JigsawUnnamedHack.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/test/java/io/helidon/config/etcd/client/EtcdClientIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/git/src/main/java/io/helidon/config/git/GitConfigSourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/git/src/main/java/io/helidon/config/git/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/ObjectConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/Transient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/Value.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/test/java/io/helidon/config/objectmapping/BuilderConfigMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/test/java/io/helidon/config/objectmapping/Configurables.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/test/java/io/helidon/config/objectmapping/FactoryMethodConfigMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/test/java/io/helidon/config/objectmapping/GenericConfigMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/test/java/io/helidon/config/objectmapping/ObjectConfigMapperProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -131,4 +131,4 @@ void testCreateMethodFromConfig() {
 
         instance.ifPresent(wcc -> assertThat(wcc.message(), is(TEST_MESSAGE)));
     }
-}
\ No newline at end of file
+}

File: config/object-mapping/src/test/java/io/helidon/config/objectmapping/ReflectionUtilTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/test-infrastructure/src/main/java/io/helidon/config/test/infra/RestoreSystemPropertiesExt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/test-infrastructure/src/main/java/io/helidon/config/test/infra/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/testing/src/main/java/io/helidon/config/testing/OptionalMatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/testing/src/main/java/io/helidon/config/testing/ValueNodeMatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/testing/src/main/java/io/helidon/config/testing/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/testing/src/test/java/io/helidon/config/testing/OptionalMatcherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-1-base/src/main/java/io/helidon/config/tests/module/mappers1/LocaleConfigMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-1-base/src/main/java/io/helidon/config/tests/module/mappers1/LoggerConfigMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-1-base/src/main/java/io/helidon/config/tests/module/mappers1/Mappers1ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-1-base/src/main/java/io/helidon/config/tests/module/mappers1/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-1-base/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/BigIntegerConfigMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/IntegerConfigMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/LocaleConfigMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/LoggerConfigMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/Mappers2Priority100ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/Mappers2Priority150ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/Mappers2Priority50ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/OptionalIntConfigMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-mappers-2-override/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-meta-source-1/src/main/java/io/helidon/config/tests/module/meta1/MyConfigSource1Provider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-meta-source-1/src/main/java/io/helidon/config/tests/module/meta1/MyEndpoint1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-meta-source-1/src/main/java/io/helidon/config/tests/module/meta1/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-meta-source-2/src/main/java/io/helidon/config/tests/module/meta2/MyConfigSource2Provider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-meta-source-2/src/main/java/io/helidon/config/tests/module/meta2/MyEndpoint2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-meta-source-2/src/main/java/io/helidon/config/tests/module/meta2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-parsers-1-override/src/main/java/io/helidon/config/tests/module/parsers1/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/module-parsers-1-override/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/test-default_config-3-hocon/src/test/java/io/helidon/config/tests/default3/ConfigCreateDefaultFromHoconTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/test-default_config-4-yaml/src/test/java/io/helidon/config/tests/default4/ConfigCreateDefaultFromYamlTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/test-default_config-5-env_vars/src/test/java/io/helidon/config/tests/default5/ConfigCreateDefaultFromEnvVarsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/tests/test-default_config-6-meta-properties/src/test/java/io/helidon/config/tests/default6/ConfigCreateDefaultFromMetaPropertiesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/metadata/src/main/java/io/helidon/config/metadata/ConfiguredOption.java
Patch:
@@ -104,7 +104,8 @@
     /**
      * Kind of this option.
      * Defaults to {@link Kind#VALUE},
-     * autodetects {@link Kind#LIST} if the parameter is an actual {@link java.util.List} or {@link java.util.Set}.
+     * autodetects {@link Kind#LIST} if the parameter is an actual {@link java.util.List}, {@link java.util.Set}
+     * or {@link java.lang.Iterable}.
      * {@link Kind#MAP} is detected as well, though the type must be a String to a primitive or string
      *
      * @return kind of configuration option

File: metrics/api/src/test/java/io/helidon/metrics/api/TestNoOpRegistry.java
Patch:
@@ -61,7 +61,7 @@ void checkRegisterExistingMetric() {
                 .withType(MetricType.SIMPLE_TIMER)
                 .build();
         String metricName = "myOwnSimpleTimer";
-        SimpleTimer simpleTimer = NoOpMetric.NoOpSimpleTimer.create(MetricRegistry.Type.APPLICATION.getName(), metadata);
+        SimpleTimer simpleTimer = NoOpMetricImpl.NoOpSimpleTimerImpl.create(MetricRegistry.Type.APPLICATION.getName(), metadata);
         appRegistry.register(metricName, simpleTimer);
         Assertions.assertThrows(IllegalArgumentException.class,
                                 () -> appRegistry.register(metricName, simpleTimer),

File: metrics/metrics/src/main/java/io/helidon/metrics/BaseRegistry.java
Patch:
@@ -204,7 +204,7 @@ final class BaseRegistry extends Registry {
     private final MetricsSettings metricsSettings;
 
     private BaseRegistry(MetricsSettings metricsSettings) {
-        super(Type.BASE);
+        super(Type.BASE, metricsSettings.registrySettings(Type.BASE));
         this.metricsSettings = metricsSettings;
     }
 
@@ -280,7 +280,8 @@ private static Metadata gcCountMeta() {
     }
 
     private static void register(BaseRegistry registry, Metadata meta, Metric metric, Tag... tags) {
-        if (registry.metricsSettings.baseMetricsSettings().isBaseMetricEnabled(meta.getName())) {
+        if (registry.metricsSettings.baseMetricsSettings().isBaseMetricEnabled(meta.getName())
+            && registry.metricsSettings.isMetricEnabled(Type.BASE, meta.getName())) {
             registry.register(meta, metric, tags);
         }
     }

File: webserver/webserver/src/test/java/io/helidon/webserver/BareResponseSubscriberTckTest.java
Patch:
@@ -54,9 +54,6 @@ public Flow.Subscriber<DataChunk> createFlowSubscriber(WhiteboxSubscriberProbe<D
         return new BareResponseImpl(ctx,
                 httpRequest,
                 requestContext,
-                () -> true,
-                () -> false,
-                () -> false,
                 CompletableFuture.completedFuture(null),
                 CompletableFuture.completedFuture(null),
                 0L) {

File: examples/integrations/micronaut/data/src/main/java/io/helidon/examples/integrations/micronaut/data/model/Pet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,8 @@
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.core.annotation.Creator;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.data.annotation.AutoPopulated;
 
 /**

File: integrations/micronaut/data/src/test/java/io/helidon/integrations/micronaut/cdi/data/app/Pet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,8 +21,8 @@
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
 import io.micronaut.core.annotation.Creator;
+import io.micronaut.core.annotation.Nullable;
 import io.micronaut.data.annotation.AutoPopulated;
 
 @Entity

File: microprofile/lra/jax-rs/src/main/java/io/helidon/microprofile/lra/InspectionService.java
Patch:
@@ -108,7 +108,9 @@ List<ClassInfo> getAllParents(ClassInfo classInfo) {
         // implements
         for (DotName implementedInterfaceName : classInfo.interfaceNames()) {
             ClassInfo interfaceClass = index.getClassByName(implementedInterfaceName);
-            superClasses.addAll(getAllParents(interfaceClass));
+            if (interfaceClass != null) {
+                superClasses.addAll(getAllParents(interfaceClass));
+            }
         }
 
         return superClasses;

File: microprofile/lra/jax-rs/src/main/java/io/helidon/microprofile/lra/ParticipantImpl.java
Patch:
@@ -79,7 +79,7 @@ class ParticipantImpl implements Participant {
     private final Map<Class<? extends Annotation>, URI> compensatorLinks = new HashMap<>();
     private final Map<Class<? extends Annotation>, Set<Method>> methodMap;
 
-    ParticipantImpl(URI baseUri, Class<?> resourceClazz) {
+    ParticipantImpl(URI baseUri, String contextPath, Class<?> resourceClazz) {
         methodMap = scanForLRAMethods(resourceClazz);
         methodMap.entrySet().stream()
                 // Looking only for participant methods
@@ -99,9 +99,9 @@ class ParticipantImpl implements Participant {
                             .getDeclaredAnnotations())
                             .map(Annotation::annotationType)
                             .noneMatch(JAX_RS_ANNOTATIONS::contains)) {
-                        //no jar-rs annotation means LRA cdi method
+                        //no jax-rs method
                         URI uri = UriBuilder.fromUri(baseUri)
-                                .path(ParticipantCdiResource.CDI_PARTICIPANT_PATH) //Auxiliary Jax-Rs resource for cdi methods
+                                .path(contextPath) //Auxiliary non Jax-Rs resource
                                 .path(e.getKey().getSimpleName().toLowerCase())//@Complete -> /complete
                                 .path(resourceClazz.getName())
                                 .path(method.getName())

File: dbclient/jdbc/src/test/java/io/helidon/dbclient/jdbc/JdbcStatementParserTest.java
Patch:
@@ -49,20 +49,20 @@ void testStatementWithNoParameter() {
     
     /**
      * Test simple SQL statement with parameters.
-     * Parameters contain both letters and numbers in proper order.
+     * Parameters names follow the same rules for identifiers defined in Section 4.4.1 of the JPA 2.0 specification
      */
     @Test
     void testStatementWithParameters() {
         String stmtIn =
                 "SELECT t.*, 'first' FROM table t\r\n" +
-                "  WHERE name = :n4m3\n" +
+                "  WHERE name = :my_n4m3\n" +
                 "   AND age > :ag3";
         String stmtExp =
                 "SELECT t.*, 'first' FROM table t\r\n" +
                 "  WHERE name = ?\n" +
                 "   AND age > ?";
         List<String> namesExp = new ArrayList<>(2);
-        namesExp.add("n4m3");
+        namesExp.add("my_n4m3");
         namesExp.add("ag3");
         Parser parser = new Parser(stmtIn);
         String stmtOut = parser.convert();

File: metrics/metrics/src/main/java/io/helidon/metrics/PrometheusName.java
Patch:
@@ -79,7 +79,7 @@ String nameUnits(Units units) {
      * @return name with stat name with units
      */
     String nameStatUnits(String statName) {
-        return nameStat(statName) + "_" + prometheusUnit;
+        return nameStat(statName) + (prometheusUnit.isBlank() ? "" :  "_" + prometheusUnit);
     }
 
     String nameStat(String statName) {

File: dbclient/metrics/src/main/java/io/helidon/dbclient/metrics/DbClientMeter.java
Patch:
@@ -57,7 +57,7 @@ protected void executeMetric(Meter metric, CompletionStage<Void> aFuture) {
 
     @Override
     protected MetricType metricType() {
-        return MetricType.COUNTER;
+        return MetricType.METERED;
     }
 
     @Override

File: dbclient/metrics/src/main/java/io/helidon/dbclient/metrics/DbClientTimer.java
Patch:
@@ -71,7 +71,7 @@ protected String defaultNamePrefix() {
 
     @Override
     protected MetricType metricType() {
-        return MetricType.COUNTER;
+        return MetricType.TIMER;
     }
 
     @Override

File: webserver/webserver/src/main/java/io/helidon/webserver/BareResponseImpl.java
Patch:
@@ -302,6 +302,7 @@ private void completeInternalPipe(boolean wasClosed, Throwable throwable) {
                     LOGGER.finest(() -> log("Closing with an empty buffer; keep-alive: false", ctx));
                 } else {
                     LOGGER.finest(() -> log("Writing an empty last http content; keep-alive: true"));
+                    ctx.channel().read();
                 }
                 writeLastContent(throwable, listener);
             });

File: integrations/cdi/hibernate-cdi/src/main/java/module-info.java
Patch:
@@ -29,8 +29,6 @@
     requires jakarta.inject.api;
     requires jakarta.enterprise.cdi.api;
     requires org.hibernate.orm.core;
-    // needed only for native image, transitive dependency of hibernate-core
-    requires dom4j;
 
     exports io.helidon.integrations.cdi.hibernate;
 

File: media/common/src/main/java/io/helidon/media/common/DataChunkInputStream.java
Patch:
@@ -94,6 +94,9 @@ private static void releaseChunk(DataChunk chunk, Throwable th) {
 
     @Override
     public void close() {
+        if (subscription != null) {
+            this.subscription.cancel();
+        }
         // Assert: if current != next, next cannot ever be resolved with a chunk that needs releasing
         Optional.ofNullable(current).ifPresent(it -> current.whenComplete(DataChunkInputStream::releaseChunk));
         current = null;

File: webserver/webserver/src/test/java/io/helidon/webserver/BareResponseSubscriberTckTest.java
Patch:
@@ -56,6 +56,7 @@ public Flow.Subscriber<DataChunk> createFlowSubscriber(WhiteboxSubscriberProbe<D
                 requestContext,
                 () -> true,
                 () -> false,
+                () -> false,
                 CompletableFuture.completedFuture(null),
                 CompletableFuture.completedFuture(null),
                 0L) {

File: common/common/src/main/java/io/helidon/common/Errors.java
Patch:
@@ -354,7 +354,7 @@ private ErrorMessagesException(final List<ErrorMessage> messages) {
          * @return encountered error messages.
          */
         public List<ErrorMessage> getMessages() {
-            return messages;
+            return List.copyOf(messages);
         }
     }
 

File: common/common/src/test/java/io/helidon/common/ErrorsTest.java
Patch:
@@ -81,7 +81,7 @@ void testErrorCollection() {
 
         Errors.ErrorMessagesException thrown = assertThrows(Errors.ErrorMessagesException.class,
                                                             errors::checkValid);
-        assertThat(thrown.getMessages(), sameInstance(errors));
+        assertThat(thrown.getMessages(), is(errors));
     }
 
     @Test
@@ -147,7 +147,7 @@ void testSingleFatal() {
 
         Errors.ErrorMessagesException thrown = assertThrows(Errors.ErrorMessagesException.class,
                                                             errors::checkValid);
-        assertThat(thrown.getMessages(), sameInstance(errors));
+        assertThat(thrown.getMessages(), is(errors));
 
         assertThat(errors.log(LOGGER), is(false));
         assertThat(errors.size(), is(1));

File: examples/integrations/neo4j/neo4j-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java
Patch:
@@ -69,7 +69,9 @@ static void stopServer() {
             webServer.shutdown()
                     .await(10, TimeUnit.SECONDS);
         }
-        embeddedDatabaseServer.close();
+        if (embeddedDatabaseServer != null) {
+            embeddedDatabaseServer.close();
+        }
     }
 
     @Test

File: integrations/microstream/metrics/src/main/java/module-info.java
Patch:
@@ -24,4 +24,5 @@
     requires transitive io.helidon.config;
     requires transitive io.helidon.metrics;
     requires transitive microstream.storage.embedded;
+    requires microstream.storage;
 }
\ No newline at end of file

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/ReusabilityMpServiceTest.java
Patch:
@@ -30,7 +30,7 @@ static Server initServer(Class<?> resourceClass) {
                 .addResourceClass(resourceClass)
                 .host("localhost")
                 // choose a random available port
-                .port(-1)
+                .port(0)
                 .build();
     }
 

File: microprofile/server/src/test/java/io/helidon/microprofile/server/ServerImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -54,6 +54,7 @@ static void destroyClass() {
     @Test
     void testCustomExecutorService() {
         Server server = Server.builder()
+                .port(0)
                 .addApplication("/app1", new TestApplication1())
                 .addApplication(JaxRsApplication.builder()
                                         .contextRoot("/app2")
@@ -88,6 +89,7 @@ private ExecutorService execService(String prefix) {
     @Test
     void testTwoApps() {
         Server server = Server.builder()
+                .port(0)
                 .addApplication("/app1", new TestApplication1())
                 .addApplication("/app2/", new TestApplication2())       // trailing slash ignored
                 .build();

File: microprofile/server/src/test/java/io/helidon/microprofile/server/ServerSseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2021 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -82,6 +82,7 @@ void testSseSingleEvent() throws Exception {
     private void innerTest(String endpoint, CompletableFuture<Void> future, int eventNum) throws InterruptedException {
         Server server = Server.builder()
                 .addApplication("/", new TestApplication1())
+                .port(0)
                 .build();
         server.start();
 

File: integrations/micrometer/cdi/src/main/java/io/helidon/integrations/micrometer/cdi/MicrometerCdiExtension.java
Patch:
@@ -176,8 +176,8 @@ protected void before(@Observes BeforeBeanDiscovery discovery) {
         LOGGER.log(Level.FINE, () -> "Before bean discovery " + discovery);
 
         // Register types manually
-        discovery.addAnnotatedType(MeterRegistryProducer.class, "MeterRegistryProducer");
-        discovery.addAnnotatedType(MeterProducer.class, "MeterProducer");
+        discovery.addAnnotatedType(MeterRegistryProducer.class, MeterRegistryProducer.class.getName());
+        discovery.addAnnotatedType(MeterProducer.class, MeterProducer.class.getName());
 
         prepareInterceptor(discovery, Counted.class, InterceptorCounted.class, CountedLiteral.INSTANCE);
         prepareInterceptor(discovery, Timed.class, InterceptorTimed.class, TimedLiteral.INSTANCE);
@@ -252,7 +252,7 @@ void prepareInterceptor(BeforeBeanDiscovery bbd,
                 .add(InterceptorBindingLiteral.INSTANCE)
                 .methods()
                 .forEach(m -> m.add(Nonbinding.Literal.INSTANCE));
-        bbd.addAnnotatedType(interceptorClass, interceptorClass.getSimpleName())
+        bbd.addAnnotatedType(interceptorClass, interceptorClass.getName())
                 .add(literal);
     }
 

File: examples/integrations/microstream/greetings-mp/src/main/java/io/helidon/examples/integrations/microstream/greetings/mp/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
- /**
-  * An example that uses Microstream to persist the greetings.
-  */
+/**
+ * An example that uses Microstream to persist the greetings.
+ */
 package io.helidon.examples.integrations.microstream.greetings.mp;

File: examples/integrations/microstream/greetings-se/src/main/java/io/helidon/examples/integrations/microstream/greetings/se/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
- /**
-  * An example that uses Microstream to persist a log entry for every greeting.
-  */
+/**
+ * An example that uses Microstream to persist a log entry for every greeting.
+ */
 package io.helidon.examples.integrations.microstream.greetings.se;

File: common/reactive/src/main/java/io/helidon/common/reactive/Awaitable.java
Patch:
@@ -85,7 +85,7 @@ default T await(long timeout, TimeUnit unit) {
      */
     default T await(Duration duration) {
         try {
-            return this.toCompletableFuture().get(duration.getNano(), TimeUnit.NANOSECONDS);
+            return this.toCompletableFuture().get(duration.toNanos(), TimeUnit.NANOSECONDS);
         } catch (ExecutionException e) {
             throw new CompletionException(e.getCause());
         } catch (InterruptedException | TimeoutException e) {

File: integrations/oci/connect/src/main/java/io/helidon/integrations/oci/connect/OciRestApi.java
Patch:
@@ -485,7 +485,6 @@ public Builder configProvider(OciConfigProvider ociConfigProvider) {
 
         @Override
         protected void preBuild() {
-            super.preBuild();
             if (ociConfigProvider == null) {
                 LOGGER.finest("Config provider is not configured explicitly. Config type: " + configType);
                 switch (configType) {
@@ -512,6 +511,9 @@ protected void preBuild() {
 
             // this must happen only once
             webClientSecurity();
+
+            // this method creates a client instance, must be after we set up client security
+            super.preBuild();
         }
 
         @Override

File: microprofile/fault-tolerance/src/main/java/module-info.java
Patch:
@@ -38,6 +38,8 @@
     requires microprofile.fault.tolerance.api;
 
     requires jersey.weld2.se;
+    requires weld.api;
+    requires weld.spi;
 
     exports io.helidon.microprofile.faulttolerance;
 

File: messaging/messaging/src/main/java/io/helidon/messaging/Messaging.java
Patch:
@@ -354,7 +354,7 @@ public <PAYLOAD, RESULT> Builder processor(Channel<PAYLOAD> in, Channel<RESULT>
          */
         public Messaging build() {
             if (messaging.getConfig() == null) {
-                messaging.setConfig(Config.create());
+                messaging.setConfig(Config.empty());
             }
             return messaging;
         }

File: examples/integrations/oci/vault-reactive/src/main/java/module-info.java
Patch:
@@ -19,7 +19,9 @@
  */
 module io.helidon.examples.integrations.oci.vault.reactive {
     requires io.helidon.integrations.oci.vault;
+    requires io.helidon.integrations.oci.vault.health;
     requires io.helidon.webserver;
+    requires io.helidon.health;
 
     exports io.helidon.examples.integrations.oci.vault.reactive;
 }
\ No newline at end of file

File: microprofile/openapi/src/main/java/module-info.java
Patch:
@@ -22,7 +22,7 @@
 module io.helidon.microprofile.openapi {
     requires java.logging;
     
-    requires smallrye.open.api;
+    requires smallrye.open.api.core;
 
     requires microprofile.config.api;
     requires io.helidon.microprofile.server;

File: openapi/src/main/java/module-info.java
Patch:
@@ -30,7 +30,7 @@
 
     requires org.jboss.jandex;
 
-    requires smallrye.open.api;
+    requires smallrye.open.api.core;
     requires java.json;
     requires java.desktop; // for java.beans package
     requires org.yaml.snakeyaml;

File: microprofile/scheduling/src/test/java/io/helidon/microprofile/scheduling/ScheduledBean.java
Patch:
@@ -43,9 +43,9 @@ public long getDuration() {
 
     @Scheduled("0/2 * * * * ? *")
     public void test2sec() {
-        countDownLatch.countDown();
         duration = System.currentTimeMillis() - stamp;
         stamp = System.currentTimeMillis();
+        countDownLatch.countDown();
         LOGGER.fine(() -> "Executed at " + LocalTime.now().toString());
     }
 

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpBasicOutboundConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public class HttpBasicOutboundConfig {
      */
     public static final TokenHandler DEFAULT_TOKEN_HANDLER = TokenHandler.builder()
             .tokenHeader("Authorization")
-            .tokenPrefix("basic ")
+            .tokenPrefix("Basic ")
             .build();
 
     private final TokenHandler tokenHandler;

File: security/providers/idcs-mapper/src/main/java/module-info.java
Patch:
@@ -27,6 +27,7 @@
 
     requires io.helidon.security.integration.common;
     requires io.helidon.security.util;
+    requires io.helidon.webclient;
     requires java.logging;
 
     requires jersey.client;

File: security/providers/oidc/src/main/java/module-info.java
Patch:
@@ -28,8 +28,7 @@
     requires io.helidon.security.util;
     requires io.helidon.security.abac.scope;
     requires io.helidon.security.jwt;
-    requires jersey.client;
-    requires java.ws.rs;
+    requires io.helidon.webclient;
     requires io.helidon.webserver;
     requires io.helidon.security.integration.webserver;
 

File: webclient/webclient/src/main/java/io/helidon/webclient/NettyClientHandler.java
Patch:
@@ -51,6 +51,7 @@
 import static io.helidon.webclient.WebClientRequestBuilderImpl.REQUEST;
 import static io.helidon.webclient.WebClientRequestBuilderImpl.REQUEST_ID;
 import static io.helidon.webclient.WebClientRequestBuilderImpl.RESPONSE;
+import static io.helidon.webclient.WebClientRequestBuilderImpl.RESPONSE_RECEIVED;
 import static io.helidon.webclient.WebClientRequestBuilderImpl.RESULT;
 import static io.helidon.webclient.WebClientRequestBuilderImpl.RETURN;
 
@@ -101,6 +102,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws IO
             channel.config().setAutoRead(false);
             HttpResponse response = (HttpResponse) msg;
             this.requestId = channel.attr(REQUEST_ID).get();
+            channel.attr(RESPONSE_RECEIVED).set(true);
             WebClientRequestImpl clientRequest = channel.attr(REQUEST).get();
             RequestConfiguration requestConfiguration = clientRequest.configuration();
             LOGGER.finest(() -> "(client reqID: " + requestId + ") Initial http response message received");

File: webclient/webclient/src/main/java/io/helidon/webclient/WebClientRequestBuilderImpl.java
Patch:
@@ -90,6 +90,7 @@ class WebClientRequestBuilderImpl implements WebClientRequestBuilder {
     static final AttributeKey<CompletableFuture<WebClientResponse>> RESULT = AttributeKey.valueOf("result");
     static final AttributeKey<AtomicBoolean> IN_USE = AttributeKey.valueOf("inUse");
     static final AttributeKey<AtomicBoolean> RETURN = AttributeKey.valueOf("finished");
+    static final AttributeKey<Boolean> RESPONSE_RECEIVED = AttributeKey.valueOf("responseReceived");
     static final AttributeKey<WebClientResponse> RESPONSE = AttributeKey.valueOf("response");
     static final AttributeKey<ConnectionIdent> CONNECTION_IDENT = AttributeKey.valueOf("connectionIdent");
     static final AttributeKey<Long> REQUEST_ID = AttributeKey.valueOf("requestID");
@@ -585,6 +586,7 @@ private Single<WebClientResponse> invoke(Flow.Publisher<DataChunk> requestEntity
                 LOGGER.finest(() -> "(client reqID: " + requestId + ") "
                         + "Channel hashcode -> " + channelFuture.channel().hashCode());
                 channelFuture.channel().attr(REQUEST).set(clientRequest);
+                channelFuture.channel().attr(RESPONSE_RECEIVED).set(false);
                 channelFuture.channel().attr(RECEIVED).set(responseReceived);
                 channelFuture.channel().attr(COMPLETED).set(complete);
                 channelFuture.channel().attr(RESULT).set(result);

File: webserver/webserver/src/test/java/io/helidon/webserver/SslTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -69,8 +69,7 @@ private static void startServer(int port) throws Exception {
     }
 
     @Test
-    public void testSecuredServerWithJerseyClient() throws Exception {
-
+    public void testSecuredServerWithWebClient() throws Exception {
         client.get()
                 .uri("https://localhost:" + webServer.port())
                 .request(String.class)

File: tests/functional/jax-rs-multiple-apps/src/main/java/io/helidon/tests/functional/multipleapps/GreetApplication1.java
Patch:
@@ -18,16 +18,18 @@
 import java.util.Set;
 
 import javax.enterprise.context.ApplicationScoped;
+import javax.ws.rs.ApplicationPath;
 import javax.ws.rs.core.Application;
 
 /**
  * First application.
  */
 @ApplicationScoped
+@ApplicationPath("app1")
 public class GreetApplication1 extends Application {
 
     @Override
     public Set<Class<?>> getClasses() {
-        return Set.of(GreetResource1.class);
+        return Set.of(GreetResource1.class, Filter1.class, SharedFilter.class);
     }
 }

File: webserver/jersey/src/main/java/io/helidon/webserver/jersey/JerseySupport.java
Patch:
@@ -53,6 +53,7 @@
 import io.helidon.webserver.ServerRequest;
 import io.helidon.webserver.ServerResponse;
 import io.helidon.webserver.Service;
+import io.helidon.webserver.jersey.HelidonHK2InjectionManagerFactory.InjectionManagerWrapper;
 
 import io.opentracing.SpanContext;
 import org.glassfish.jersey.CommonProperties;
@@ -147,7 +148,8 @@ private JerseySupport(Builder builder) {
         }
         this.handler = new JerseyHandler(builder.resourceConfig);
         this.appHandler = new ApplicationHandler(builder.resourceConfig, new ServerBinder(executorService),
-                builder.injectionManager);
+                builder.injectionManager == null ? null         // single JAX-RS application
+                        : new InjectionManagerWrapper(builder.injectionManager, builder.resourceConfig));
         this.container = new HelidonJerseyContainer(appHandler, builder.resourceConfig);
 
         // This configuration via system properties is for the Jersey Client API. Any

File: webserver/jersey/src/main/java/module-info.java
Patch:
@@ -33,6 +33,7 @@
     requires java.logging;
     requires hk2.api;
     requires io.netty.buffer;
+    requires jersey.common;
 
     exports io.helidon.webserver.jersey;
 

File: integrations/micrometer/micrometer/src/main/java/io/helidon/integrations/micrometer/MicrometerSupport.java
Patch:
@@ -95,12 +95,12 @@ public MeterRegistry registry() {
 
     @Override
     public void update(Routing.Rules rules) {
-        configureEndpoint(rules);
+        configureEndpoint(rules, rules);
     }
 
     @Override
-    protected void postConfigureEndpoint(Routing.Rules rules) {
-        rules
+    protected void postConfigureEndpoint(Routing.Rules defaultRules, Routing.Rules serviceEndpointRoutingRules) {
+        defaultRules
                 .any(new MetricsContextHandler(meterRegistryFactory.meterRegistry()))
                 .get(context(), this::getOrOptions)
                 .options(context(), this::getOrOptions);

File: tracing/tests/it-tracing-client-zipkin/src/test/java/io/helidon/tracing/tests/it1/OpentraceableClientFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import io.helidon.tracing.TracerBuilder;
 import io.helidon.tracing.jersey.client.ClientTracingFilter;
 
-import brave.internal.HexCodec;
+import brave.internal.codec.HexCodec;
 import brave.opentracing.BraveSpanContext;
 import brave.propagation.TraceContext;
 import io.opentracing.Span;

File: webserver/webserver/src/main/java/io/helidon/webserver/HttpRequestScopedPublisher.java
Patch:
@@ -36,9 +36,9 @@ class HttpRequestScopedPublisher extends BufferedEmittingPublisher<DataChunk> {
         this.holdingQueue = holdingQueue;
     }
 
-    public int emit(ByteBuf data) {
+    public void emit(ByteBuf data) {
         try {
-            return super.emit(new ByteBufRequestChunk(data, holdingQueue));
+            super.emit(new ByteBufRequestChunk(data, holdingQueue));
         } finally {
             holdingQueue.release();
         }

File: examples/microprofile/cors/src/test/java/io/helidon/microprofile/examples/cors/TestCORS.java
Patch:
@@ -125,7 +125,7 @@ void testAnonymousGreetWithCors() throws Exception {
         assertThat("HTTP response payload", payload, is("Hola World!"));
         headers = r.headers();
         Optional<String> allowOrigin = headers.value(CrossOriginConfig.ACCESS_CONTROL_ALLOW_ORIGIN);
-        assertThat("Expected CORS header " + CrossOriginConfig.ACCESS_CONTROL_ALLOW_ORIGIN + " is absent",
+        assertThat("Expected CORS header " + CrossOriginConfig.ACCESS_CONTROL_ALLOW_ORIGIN + " is present",
                 allowOrigin.isPresent(), is(true));
         assertThat("CORS header " + CrossOriginConfig.ACCESS_CONTROL_ALLOW_ORIGIN, allowOrigin.get(), is("*"));
     }

File: webserver/cors/src/main/java/io/helidon/webserver/cors/CrossOriginConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: tracing/jaeger/src/main/java/io/helidon/tracing/jaeger/JaegerTracerBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -116,7 +116,7 @@
  *     <tr>
  *         <td>{@code sampler-type}</td>
  *         <td>library default</td>
- *         <td>Sampler type ({@code probabilistic}, {@code ratelimiting}, or {@code remote}</td>
+ *         <td>Sampler type ({@code const}, {@code probabilistic}, {@code ratelimiting}, or {@code remote})</td>
  *     </tr>
  *     <tr>
  *         <td>{@code sampler-param}</td>

File: config/config-mp/src/main/java/io/helidon/config/mp/MpConfigBuilder.java
Patch:
@@ -66,7 +66,7 @@
 import io.helidon.config.ConfigMappers;
 import io.helidon.config.ConfigValue;
 import io.helidon.config.mp.spi.MpConfigFilter;
-import io.helidon.config.yaml.YamlMpConfigSource;
+import io.helidon.config.yaml.mp.YamlMpConfigSource;
 
 import org.eclipse.microprofile.config.Config;
 import org.eclipse.microprofile.config.spi.ConfigBuilder;

File: config/config-mp/src/main/java/module-info.java
Patch:
@@ -21,7 +21,7 @@
     requires java.logging;
     requires io.helidon.common;
     requires io.helidon.config;
-    requires io.helidon.config.yaml;
+    requires io.helidon.config.yaml.mp;
     requires transitive microprofile.config.api;
     requires java.annotation;
     requires io.helidon.common.serviceloader;

File: config/yaml-mp/src/main/java/io/helidon/config/yaml/mp/YamlConfigSourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.yaml;
+package io.helidon.config.yaml.mp;
 
 import java.io.IOException;
 import java.net.URL;
@@ -31,7 +31,7 @@
  * YAML config source provider for MicroProfile config that supports file {@code application.yaml}.
  * This class should not be used directly - it is loaded automatically by Java service loader.
  */
-public class YamlMpConfigSourceProvider implements ConfigSourceProvider {
+public class YamlConfigSourceProvider implements ConfigSourceProvider {
     @Override
     public Iterable<ConfigSource> getConfigSources(ClassLoader classLoader) {
         Enumeration<URL> resources;

File: config/yaml-mp/src/test/java/io/helidon/config/yaml/mp/YamlMpConfigSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.yaml;
+package io.helidon.config.yaml.mp;
 
 import java.io.StringReader;
 

File: examples/integrations/oci/objectstorage-cdi/src/main/java/io/helidon/examples/integrations/oci/objectstorage/cdi/ObjectStorageCdiMain.java
Patch:
@@ -20,7 +20,7 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import io.helidon.config.yaml.YamlMpConfigSource;
+import io.helidon.config.yaml.mp.YamlMpConfigSource;
 import io.helidon.microprofile.cdi.Main;
 
 import org.eclipse.microprofile.config.Config;

File: examples/integrations/oci/objectstorage-cdi/src/main/java/module-info.java
Patch:
@@ -23,7 +23,7 @@
     requires jakarta.inject.api;
     requires microprofile.config.api;
 
-    requires io.helidon.config.yaml;
+    requires io.helidon.config.yaml.mp;
     requires io.helidon.common.http;
     requires io.helidon.integrations.common.rest;
     requires io.helidon.integrations.oci.cdi;

File: examples/integrations/oci/vault-cdi/src/main/java/io/helidon/examples/integrations/oci/vault/cdi/VaultCdiMain.java
Patch:
@@ -19,7 +19,7 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import io.helidon.config.yaml.YamlMpConfigSource;
+import io.helidon.config.yaml.mp.YamlMpConfigSource;
 import io.helidon.microprofile.cdi.Main;
 
 import org.eclipse.microprofile.config.Config;

File: examples/integrations/oci/vault-cdi/src/main/java/module-info.java
Patch:
@@ -25,7 +25,7 @@
 
     requires microprofile.config.api;
 
-    requires io.helidon.config.yaml;
+    requires io.helidon.config.yaml.mp;
     requires io.helidon.integrations.oci.vault;
     requires io.helidon.microprofile.cdi;
 

File: examples/integrations/vault/hcp-cdi/src/main/java/io/helidon/examples/integrations/vault/hcp/cdi/VaultCdiMain.java
Patch:
@@ -20,7 +20,7 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import io.helidon.config.yaml.YamlMpConfigSource;
+import io.helidon.config.yaml.mp.YamlMpConfigSource;
 import io.helidon.microprofile.cdi.Main;
 
 import org.eclipse.microprofile.config.Config;

File: microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java
Patch:
@@ -49,7 +49,7 @@
 import javax.ws.rs.client.WebTarget;
 
 import io.helidon.config.mp.MpConfigSources;
-import io.helidon.config.yaml.YamlMpConfigSource;
+import io.helidon.config.yaml.mp.YamlMpConfigSource;
 
 import org.eclipse.microprofile.config.Config;
 import org.eclipse.microprofile.config.spi.ConfigBuilder;

File: microprofile/tests/junit5/src/main/java/module-info.java
Patch:
@@ -21,7 +21,7 @@
 
     requires io.helidon.microprofile.cdi;
     requires io.helidon.config.mp;
-    requires io.helidon.config.yaml;
+    requires io.helidon.config.yaml.mp;
     requires org.junit.jupiter.api;
     requires transitive jakarta.enterprise.cdi.api;
     requires transitive java.ws.rs;

File: tests/integration/vault/mp/src/test/java/io/helidon/tests/integration/vault/mp/TestDbSecrets.java
Patch:
@@ -26,7 +26,7 @@
 import javax.inject.Inject;
 
 import io.helidon.config.mp.MpConfigSources;
-import io.helidon.config.yaml.YamlMpConfigSource;
+import io.helidon.config.yaml.mp.YamlMpConfigSource;
 import io.helidon.integrations.vault.cdi.VaultCdiExtension;
 import io.helidon.integrations.vault.secrets.database.DbCreateRole;
 import io.helidon.integrations.vault.secrets.database.DbCredentials;

File: tests/integration/vault/mp/src/test/java/io/helidon/tests/integration/vault/mp/TestKubernetesAuth.java
Patch:
@@ -29,7 +29,7 @@
 import javax.inject.Inject;
 
 import io.helidon.config.mp.MpConfigSources;
-import io.helidon.config.yaml.YamlMpConfigSource;
+import io.helidon.config.yaml.mp.YamlMpConfigSource;
 import io.helidon.integrations.vault.Vault;
 import io.helidon.integrations.vault.auths.k8s.ConfigureK8s;
 import io.helidon.integrations.vault.auths.k8s.CreateRole;

File: common/context/src/main/java/io/helidon/common/context/ContextAwareExecutorImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -134,7 +134,7 @@ protected <T> Callable<T> wrap(Callable<T> task) {
                     PROVIDERS.forEach(provider -> provider.propagateData(properties.get(provider.getClass())));
                     return Contexts.runInContext(context.get(), task);
                 } finally {
-                    PROVIDERS.forEach(DataPropagationProvider::clearData);
+                    PROVIDERS.forEach(provider -> provider.clearData(properties.get(provider.getClass())));
                 }
             };
         } else {
@@ -153,7 +153,7 @@ protected Runnable wrap(Runnable command) {
                     PROVIDERS.forEach(provider -> provider.propagateData(properties.get(provider.getClass())));
                     Contexts.runInContext(context.get(), command);
                 } finally {
-                    PROVIDERS.forEach(DataPropagationProvider::clearData);
+                    PROVIDERS.forEach(provider -> provider.clearData(properties.get(provider.getClass())));
                 }
             };
         } else {

File: logging/jul/src/main/java/io/helidon/logging/jul/JulMdcPropagator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public void propagateData(Map<String, String> data) {
     }
 
     @Override
-    public void clearData() {
+    public void clearData(Map<String, String> data) {
         JulMdc.clear();
     }
 

File: logging/log4j/src/main/java/io/helidon/logging/log4j/Log4jMdcPropagator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@ public void propagateData(Map<String, String> data) {
     }
 
     @Override
-    public void clearData() {
+    public void clearData(Map<String, String> data) {
         ThreadContext.clearAll();
     }
 }

File: logging/slf4j/src/main/java/io/helidon/logging/slf4j/Slf4jMdcPropagator.java
Patch:
@@ -39,7 +39,7 @@ public void propagateData(Map<String, String> data) {
     }
 
     @Override
-    public void clearData() {
+    public void clearData(Map<String, String> data) {
         MDC.clear();
     }
 

File: messaging/messaging/src/main/java/io/helidon/messaging/Messaging.java
Patch:
@@ -94,7 +94,7 @@ public Builder connector(ConnectorFactory connector) {
             if (connector instanceof IncomingConnectorFactory) {
                 this.messaging.addIncomingConnector((IncomingConnectorFactory) connector);
             }
-            if (connector instanceof IncomingConnectorFactory) {
+            if (connector instanceof OutgoingConnectorFactory) {
                 this.messaging.addOutgoingConnector((OutgoingConnectorFactory) connector);
             }
             return this;

File: jersey/server/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
     requires transitive java.ws.rs;
     requires transitive jersey.common;
     requires transitive jersey.server;
+    requires transitive jersey.hk2;
 
     requires transitive jakarta.inject.api;
     requires transitive jakarta.activation;

File: security/integration/jersey/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,6 +34,8 @@
     requires io.helidon.jersey.client;
     requires io.helidon.security.integration.common;
     requires io.helidon.webclient.jaxrs;
+    requires io.helidon.webserver;
+
     requires jakarta.inject.api;
 
     exports io.helidon.security.integration.jersey;

File: microprofile/tests/junit5/src/main/java/module-info.java
Patch:
@@ -21,6 +21,7 @@
 
     requires io.helidon.microprofile.cdi;
     requires io.helidon.config.mp;
+    requires io.helidon.config.yaml;
     requires org.junit.jupiter.api;
     requires transitive jakarta.enterprise.cdi.api;
     requires transitive java.ws.rs;

File: config/config/src/main/java/io/helidon/config/spi/Source.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -106,7 +106,7 @@ interface Builder<B extends Builder<B>> {
          * <p>
          * Same as calling {@link #optional(boolean) optional(true)}.
          *
-         * @return updated buidler instance
+         * @return updated builder instance
          */
         default B optional() {
             return optional(true);

File: integrations/cdi/hibernate-cdi/src/main/java/module-info.java
Patch:
@@ -33,4 +33,7 @@
     requires dom4j;
 
     exports io.helidon.integrations.cdi.hibernate;
+
+    provides org.hibernate.engine.transaction.jta.platform.spi.JtaPlatformProvider
+            with io.helidon.integrations.cdi.hibernate.CDISEJtaPlatformProvider;
 }

File: integrations/cdi/jpa-cdi/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. 
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,4 +38,6 @@
     requires io.helidon.integrations.cdi.delegates;
 
     exports io.helidon.integrations.cdi.jpa;
+
+    provides javax.enterprise.inject.spi.Extension with io.helidon.integrations.cdi.jpa.JpaExtension;
 }

File: microprofile/reactive-streams/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,4 +28,6 @@
 
     exports io.helidon.microprofile.reactive;
 
+    provides org.eclipse.microprofile.reactive.streams.operators.spi.ReactiveStreamsEngine
+            with io.helidon.microprofile.reactive.HelidonReactiveStreamsEngine;
 }

File: microprofile/websocket/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,4 +39,5 @@
     opens io.helidon.microprofile.tyrus to weld.core.impl, io.helidon.microprofile.cdi;
 
     provides javax.enterprise.inject.spi.Extension with io.helidon.microprofile.tyrus.WebSocketCdiExtension;
+    provides org.glassfish.tyrus.core.ComponentProvider with io.helidon.microprofile.tyrus.HelidonComponentProvider;
 }

File: common/reactive/src/main/java/io/helidon/common/reactive/IoMulti.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.common.reactive;
@@ -428,6 +427,9 @@ public Multi<ByteBuffer> build() {
         }
     }
 
+    /**
+     * Fluent API builder for {@link io.helidon.common.reactive.OutputStreamMulti}.
+     */
     final class OutputStreamMultiBuilder implements Builder<OutputStreamMulti> {
 
         private final OutputStreamMulti streamMulti = new OutputStreamMulti();

File: examples/integrations/neo4j/neo4j-mp/src/main/java/io/helidon/examples/integrations/neo4j/mp/Neo4jResource.java
Patch:
@@ -28,6 +28,9 @@
 import io.helidon.examples.integrations.neo4j.mp.domain.Movie;
 import io.helidon.examples.integrations.neo4j.mp.domain.MovieRepository;
 
+/**
+ * REST endpoint for movies.
+ */
 @Path("/movies")
 @RequestScoped
 public class Neo4jResource {

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -1,4 +1,3 @@
-
 /*
  * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
@@ -13,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package io.helidon.examples.messaging.se;

File: metrics/trace-exemplar/src/main/java/io/helidon/metrics/exemplartrace/TraceExemplarService.java
Patch:
@@ -12,7 +12,6 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 package io.helidon.metrics.exemplartrace;
 
@@ -21,6 +20,9 @@
 
 import io.opentracing.SpanContext;
 
+/**
+ * Service provider for {@link io.helidon.metrics.ExemplarService}.
+ */
 public class TraceExemplarService implements ExemplarService {
     @Override
     public String label() {

File: webclient/webclient/src/main/java/io/helidon/webclient/WebClient.java
Patch:
@@ -139,6 +139,9 @@ static Builder builder() {
      */
     WebClientRequestBuilder method(Http.RequestMethod method);
 
+    /**
+     * Fluent API builder for {@link io.helidon.webclient.WebClient}.
+     */
     final class Builder implements io.helidon.common.Builder<WebClient>,
                                    ParentingMediaContextBuilder<Builder>,
                                    MediaContextBuilder<Builder> {

File: examples/microprofile/openapi-basic/src/main/java/io/helidon/microprofile/examples/openapi/basic/GreetResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -120,7 +120,6 @@ public JsonObject getMessage(@PathParam("name") String name) {
      * @param jsonObject JSON containing the new greeting
      * @return {@link Response}
      */
-    @SuppressWarnings("checkstyle:designforextension")
     @Path("/greeting")
     @PUT
     @Operation(summary = "Set the greeting prefix",

File: examples/microprofile/tls/src/main/java/io/helidon/microprofile/example/tls/GreetResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,6 @@ public class GreetResource {
      *
      * @return {@link JsonObject}
      */
-    @SuppressWarnings("checkstyle:designforextension")
     @GET
     @Produces(MediaType.TEXT_PLAIN)
     public String getDefaultMessage() {

File: tests/integration/native-image/mp-1/src/main/java/io/helidon/tests/integration/nativeimage/mp1/JaxRsResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/jersey/src/main/java/io/helidon/webserver/jersey/ResponseWriter.java
Patch:
@@ -146,7 +146,6 @@ private static class DataChunkOutputStream extends OutputStream
         private static final long CANCEL = Long.MIN_VALUE;
         private static final long ERROR = CANCEL + 1;
         private static final long WAIT = -1;
-        private static final ByteBuf ZERO_BUF = Unpooled.buffer(0);
 
         private byte[] oneByteArray;
         private ByteBuf byteBuf;
@@ -195,7 +194,7 @@ public void write(byte[] b, int off, int len) throws IOException {
         public void flush() throws IOException {
             if (byteBuf == null) {
                 awaitRequest();
-                publish(true, ZERO_BUF);
+                publish(true, Unpooled.EMPTY_BUFFER);
             } else {
                 byteBuf = null;
                 publish(true, byteBufRef);

File: config/config/src/test/java/io/helidon/config/ConfigSupplierTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
 
-import org.junit.Ignore;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.config.ConfigTest.waitForAssert;
@@ -188,7 +188,7 @@ public void testSupplierSubscribeOnRootNode() throws InterruptedException {
                       is(ConfigValues.simpleValue("NEW item 1")));
     }
 
-    @Ignore
+    @Disabled
     @Test
     // TODO cause of intermittent test failures:
     /*

File: config/config/src/test/java/io/helidon/config/ConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,14 +36,14 @@
 import static io.helidon.config.Config.Type.LIST;
 import static io.helidon.config.Config.Type.OBJECT;
 import static io.helidon.config.Config.Type.VALUE;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.empty;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasSize;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.nullValue;
-import static org.junit.Assert.assertThat;
 
 /**
  * General {@link Config} tests.

File: config/config/src/test/java/io/helidon/config/FileOverrideSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,8 +27,8 @@
 import org.junit.jupiter.api.extension.RegisterExtension;
 
 import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
 
 /**
  * Tests {@link io.helidon.config.FileOverrideSource}.

File: config/config/src/test/java/io/helidon/config/Gh1182Override.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Unit test to reproduce (and validate fix) of

File: config/config/src/test/java/io/helidon/config/PollingStrategiesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,8 +25,8 @@
 
 import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
 
 /**
  * Tests {@link PollingStrategies}.

File: config/config/src/test/java/io/helidon/config/TreeStructureTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,7 @@
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Test that nodes correctly return empty even for tree.

File: webserver/jersey/src/main/java/module-info.java
Patch:
@@ -23,6 +23,7 @@
     requires transitive java.ws.rs;
     requires transitive io.opentracing.api;
     requires transitive io.helidon.jersey.server;
+    requires transitive io.helidon.jersey.client;
 
     requires io.helidon.common.context;
     requires io.helidon.common.mapper;

File: microprofile/messaging/health/src/test/java/io/helidon/microprofile/messaging/health/MessagingHealthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -160,14 +160,14 @@ private JsonObject getHealthCheck(String checkName) {
         return client.get()
                 .path("/health")
                 .submit()
-                .await(500, TimeUnit.MILLISECONDS)
+                .await(5, TimeUnit.SECONDS)
                 .content()
                 .as(JsonObject.class)
                 .await(500, TimeUnit.MILLISECONDS)
                 .getValue("/checks")
                 .asJsonArray().stream()
-                .filter(check -> check.asJsonObject().getString("name").equals(checkName))
                 .map(JsonValue::asJsonObject)
+                .filter(check -> check.getString("name").equals(checkName))
                 .findFirst()
                 .orElseThrow(() -> new AssertionFailedError("Health check 'messaging' is missing!"));
     }

File: security/providers/http-sign/src/test/java/io/helidon/security/providers/httpsign/HttpSignProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -235,7 +235,7 @@ private void validateSignatureHeader(
             String algorithm,
             List<String> headers,
             String actualSignature) {
-        HttpSignature httpSignature = HttpSignature.fromHeader(signatureHeader);
+        HttpSignature httpSignature = HttpSignature.fromHeader(signatureHeader, true);
 
         String reason = httpSignature.getAlgorithm() + ", " + httpSignature.getHeaders() + ", " + httpSignature
                 .getSignedString(new HashMap<>(), env);

File: logging/slf4j/src/main/java/io/helidon/logging/slf4j/Slf4jMdcPropagator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,6 +16,7 @@
 package io.helidon.logging.slf4j;
 
 import java.util.Map;
+import java.util.Optional;
 
 import io.helidon.common.context.spi.DataPropagationProvider;
 
@@ -29,7 +30,7 @@ public class Slf4jMdcPropagator implements DataPropagationProvider<Map<String, S
 
     @Override
     public Map<String, String> data() {
-        return MDC.getCopyOfContextMap();
+        return Optional.ofNullable(MDC.getCopyOfContextMap()).orElseGet(Map::of);
     }
 
     @Override

File: microprofile/fault-tolerance/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,6 +36,8 @@
     requires microprofile.metrics.api;
     requires microprofile.fault.tolerance.api;
 
+    requires jersey.weld2.se;
+
     exports io.helidon.microprofile.faulttolerance;
 
     // needed when running with modules - to make private methods accessible

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromByteChannelTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -83,7 +83,7 @@ void testReadAllData() {
     }
 
     @Test
-    void testChunky() {
+    void testChunky() throws InterruptedException {
         PeriodicalChannel pc = createChannelWithNoAvailableData(25, 3);
         Multi<ByteBuffer> publisher = IoMulti.multiFromByteChannelBuilder(pc)
                 .retrySchema(RetrySchema.constant(2))
@@ -102,6 +102,7 @@ void testChunky() {
         MultiFromByteChannel multi = (MultiFromByteChannel) publisher;
         LazyValue<ScheduledExecutorService> executor = multi.executor();
         assertThat("Executor should have been used", executor.isLoaded(), is(true));
+        assertThat("Executor didn't terminate in time", executor.get().awaitTermination(5, TimeUnit.SECONDS), is(true));
         assertThat("Executor should have been shut down", executor.get().isShutdown(), is(true));
     }
 

File: microprofile/grpc/metrics/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/jersey/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,6 +29,7 @@
     requires io.helidon.common.reactive;
     requires java.logging;
     requires hk2.api;
+    requires io.netty.buffer;
 
     exports io.helidon.webserver.jersey;
 

File: tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/TestParent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -82,7 +82,6 @@ protected static WebClient createNewClient(WebClientService... clientServices) {
         WebClient.Builder builder = WebClient.builder()
                 .baseUri("http://localhost:" + webServer.port() + "/greet")
                 .config(CONFIG.get("client"))
-                .keepAlive(true)
                 .context(context)
                 .addMediaSupport(JsonpSupport.create());
 

File: webclient/webclient/src/main/java/io/helidon/webclient/NettyClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ final class NettyClient implements WebClient {
     private static final Duration DEFAULT_CONNECT_TIMEOUT = Duration.ofMinutes(1);
     private static final Duration DEFAULT_READ_TIMEOUT = Duration.ofMinutes(10);
     private static final boolean DEFAULT_FOLLOW_REDIRECTS = false;
-    private static final boolean DEFAULT_KEEP_ALIVE = false;
+    private static final boolean DEFAULT_KEEP_ALIVE = true;
     private static final boolean DEFAULT_VALIDATE_HEADERS = true;
     private static final int DEFAULT_NUMBER_OF_REDIRECTS = 5;
     private static final LazyValue<String> DEFAULT_USER_AGENT = LazyValue

File: webclient/webclient/src/main/java/io/helidon/webclient/WebClientRequestBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -90,6 +90,7 @@ class WebClientRequestBuilderImpl implements WebClientRequestBuilder {
     static final AttributeKey<CompletableFuture<WebClientServiceResponse>> COMPLETED = AttributeKey.valueOf("completed");
     static final AttributeKey<CompletableFuture<WebClientResponse>> RESULT = AttributeKey.valueOf("result");
     static final AttributeKey<AtomicBoolean> IN_USE = AttributeKey.valueOf("inUse");
+    static final AttributeKey<AtomicBoolean> RETURN = AttributeKey.valueOf("finished");
     static final AttributeKey<WebClientResponse> RESPONSE = AttributeKey.valueOf("response");
     static final AttributeKey<ConnectionIdent> CONNECTION_IDENT = AttributeKey.valueOf("connectionIdent");
     static final AttributeKey<Long> REQUEST_ID = AttributeKey.valueOf("requestID");
@@ -210,6 +211,7 @@ private static ChannelFuture obtainChannelFuture(RequestConfiguration configurat
             ChannelFuture connect = bootstrap.connect(uri.getHost(), uri.getPort());
             Channel channel = connect.channel();
             channel.attr(IN_USE).set(new AtomicBoolean(true));
+            channel.attr(RETURN).set(new AtomicBoolean(false));
             channel.attr(CONNECTION_IDENT).set(connectionIdent);
             channels.add(new ChannelRecord(connect));
             return connect;

File: metrics/metrics/src/main/java/io/helidon/metrics/HelidonTimer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -287,7 +287,7 @@ private static class TimerImpl implements Timer {
             this.histogram = HelidonHistogram.create(repoType, Metadata.builder()
                     .withName(name)
                     .withType(MetricType.HISTOGRAM)
-                    .build());
+                    .build(), clock);
             this.clock = clock;
         }
 

File: common/http/src/main/java/io/helidon/common/http/MediaType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -475,7 +475,7 @@ public Optional<String> charset() {
     @Override
     public double qualityFactor() {
         String q = parameters.get(AcceptPredicate.QUALITY_FACTOR_PARAMETER);
-        return q == null ? 1D : Double.valueOf(q);
+        return q == null ? 1D : Double.parseDouble(q);
     }
 
     /**

File: examples/employee-app/src/main/java/io/helidon/service/employee/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,8 +23,8 @@
 import io.helidon.media.jsonb.JsonbSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 
 /**
  * Simple Employee rest application.

File: examples/media/multipart/src/main/java/io/helidon/examples/media/multipart/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,8 @@
 import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.media.multipart.MultiPartSupport;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 
 /**
  * This application provides a simple file upload service with a UI to exercise multipart.

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,8 +23,8 @@
 import io.helidon.common.LogConfig;
 import io.helidon.config.Config;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 import io.helidon.webserver.tyrus.TyrusSupport;
 
 /**

File: examples/security/basic-auth-with-static-content/src/main/java/io/helidon/security/examples/webserver/basic/BasicExampleBuilderMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,8 +31,8 @@
 import io.helidon.security.providers.httpauth.HttpBasicAuthProvider;
 import io.helidon.security.providers.httpauth.SecureUserStore;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 
 /**
  * Example using {@link io.helidon.common.Builder} approach instead of configuration based approach.

File: examples/security/basic-auth-with-static-content/src/main/java/io/helidon/security/examples/webserver/basic/BasicExampleConfigMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,8 +25,8 @@
 import io.helidon.security.SecurityContext;
 import io.helidon.security.integration.webserver.WebSecurity;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 
 /**
  * Example using configuration based approach.

File: examples/security/google-login/src/main/java/io/helidon/security/examples/google/GoogleBuilderMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,8 +25,8 @@
 import io.helidon.security.integration.webserver.WebSecurity;
 import io.helidon.security.providers.google.login.GoogleTokenProvider;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 
 /**
  * Google login button example main class using builders.

File: examples/security/google-login/src/main/java/io/helidon/security/examples/google/GoogleConfigMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,8 +24,8 @@
 import io.helidon.security.Subject;
 import io.helidon.security.integration.webserver.WebSecurity;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.file;

File: examples/todo-app/frontend/src/main/java/io/helidon/demo/todos/frontend/Main.java
Patch:
@@ -32,9 +32,9 @@
 import io.helidon.security.integration.webserver.WebSecurity;
 import io.helidon.tracing.TracerBuilder;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.accesslog.AccessLogSupport;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 
 import io.opentracing.Tracer;
 import org.glassfish.jersey.logging.LoggingFeature;

File: examples/webserver/basics/src/main/java/io/helidon/webserver/examples/basics/Main.java
Patch:
@@ -35,9 +35,9 @@
 import io.helidon.webserver.HttpException;
 import io.helidon.webserver.RequestPredicate;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.jersey.JerseySupport;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 
 /**
  * This example consists of few first tutorial steps of WebServer API. Each step is represented by a single method.

File: examples/webserver/static-content/src/main/java/io/helidon/webserver/examples/staticcontent/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,8 @@
 import io.helidon.common.http.Http;
 import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 
 /**
  * Application demonstrates combination of the static content with a simple REST API. It counts accesses and display it

File: examples/webserver/websocket/src/main/java/io/helidon/webserver/examples/websocket/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,8 +24,8 @@
 import javax.websocket.server.ServerEndpointConfig;
 
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 import io.helidon.webserver.tyrus.TyrusSupport;
 
 import static io.helidon.webserver.examples.websocket.MessageBoardEndpoint.UppercaseEncoder;

File: microprofile/server/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@
 
     requires java.logging;
     requires io.helidon.common.serviceloader;
+    requires io.helidon.webserver.staticcontent;
 
     // there is now a hardcoded dependency on Weld, to configure additional bean defining annotation
     requires java.management;

File: tests/integration/native-image/se-1/src/main/java/io/helidon/tests/integration/nativeimage/se1/Se1Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2019, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,8 +31,8 @@
 import io.helidon.security.integration.webserver.WebSecurity;
 import io.helidon.tracing.TracerBuilder;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
+import io.helidon.webserver.staticcontent.StaticContentSupport;
 import io.helidon.webserver.tyrus.TyrusSupport;
 
 import org.eclipse.microprofile.health.HealthCheckResponse;

File: webserver/webserver/src/main/java/io/helidon/webserver/ClassPathContentHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -41,6 +41,7 @@
 /**
  * Handles static content from the classpath.
  */
+@Deprecated
 class ClassPathContentHandler extends StaticContentHandler {
     private static final Logger LOGGER = Logger.getLogger(ClassPathContentHandler.class.getName());
 

File: webserver/webserver/src/main/java/io/helidon/webserver/ContentTypeSelector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,6 +26,7 @@
 /**
  * Provides mapping between filename extension and media type.
  */
+@Deprecated
 class ContentTypeSelector {
 
     private static final Map<String, MediaType> CONTENT_TYPES = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);

File: webserver/webserver/src/main/java/io/helidon/webserver/FileSystemContentHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@
 /**
  * Serves files from the filesystem as a static WEB content.
  */
+@Deprecated
 class FileSystemContentHandler extends StaticContentHandler {
     private static final Logger LOGGER = Logger.getLogger(FileSystemContentHandler.class.getName());
     private static final MessageBodyWriter<Path> PATH_WRITER = DefaultMediaSupport.pathWriter();

File: webserver/webserver/src/main/java/io/helidon/webserver/StaticContentHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@
 /**
  * Request {@link Handler} processing a static content.
  */
+@Deprecated
 abstract class StaticContentHandler {
     private static final Logger LOGGER = Logger.getLogger(StaticContentHandler.class.getName());
 

File: config/hocon/src/main/java/io/helidon/config/hocon/HoconConfigParserBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -70,6 +70,7 @@ public HoconConfigParserBuilder resolveOptions(ConfigResolveOptions resolveOptio
      *
      * @return new instance of HOCON ConfigParser.
      */
+    @Override
     public HoconConfigParser build() {
         return new HoconConfigParser(resolvingEnabled, resolveOptions);
     }

File: examples/todo-app/backend/src/main/java/io/helidon/demo/todos/backend/DbService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -119,7 +119,8 @@ public class DbService {
      */
     @Inject
     public DbService(final Config config) {
-        Cluster.Builder clusterBuilder = Cluster.builder();
+        Cluster.Builder clusterBuilder = Cluster.builder()
+                .withoutMetrics();
 
         Config cConfig = config.get("cassandra");
         cConfig.get("servers").asList(Config.class).get().forEach(serverConfig -> {

File: examples/todo-app/frontend/src/main/java/io/helidon/demo/todos/frontend/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -124,7 +124,7 @@ private static Routing createRouting(final Security security,
                 // register metrics features (on "/metrics")
                 .register(MetricsSupport.create())
                 // register security features
-                .register(WebSecurity.create(security, config))
+                .register(WebSecurity.create(security, config.get("security")))
                 // register static content support (on "/")
                 .register(StaticContentSupport.builder("/WEB").welcomeFileName("index.html"))
                 // register API handler (on "/api") - this path is secured (see application.yaml)

File: security/providers/common/src/main/java/io/helidon/security/providers/common/EvictableCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: security/providers/common/src/main/java/io/helidon/security/providers/common/EvictableCacheImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: security/providers/common/src/test/java/io/helidon/security/providers/common/EvictableCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2018, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/webserver/basics/src/main/java/io/helidon/webserver/examples/basics/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -107,7 +107,7 @@ protected void startServer(Routing routing, MediaContext mediaContext) {
      * @param routing the routing to drive by WebServer instance
      */
     protected void startServer(Routing routing) {
-        startServer(routing, null);
+        startServer(routing, MediaContext.create());
     }
 
     /**
@@ -328,7 +328,7 @@ public void help() {
         hlp.append("Example method names:\n");
         Method[] methods = Main.class.getDeclaredMethods();
         for (Method method : methods) {
-            if (!Modifier.isPrivate(method.getModifiers()) && !Modifier.isStatic(method.getModifiers())) {
+            if (Modifier.isPublic(method.getModifiers()) && !Modifier.isStatic(method.getModifiers())) {
                 hlp.append("    ").append(method.getName()).append('\n');
             }
         }

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerBasicConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/webserver/src/main/java/io/helidon/webserver/Transport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/webserver/src/main/java/io/helidon/webserver/WebServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
+ * Copyright (c) 2017, 2021 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/webserver/src/main/java/io/helidon/webserver/ByteBufRequestChunk.java
Patch:
@@ -86,7 +86,7 @@ protected void finalize() {
         }
     }
 
-    private static void logLeak() {
+    static void logLeak() {
         // TODO add a link to a website that explains the problem
         LOGGER.warning("LEAK: RequestChunk.release() was not called before it was garbage collected. "
                                + "While the Reactive WebServer is "

File: webserver/webserver/src/main/java/io/helidon/webserver/ForwardingHandler.java
Patch:
@@ -216,7 +216,7 @@ protected void channelRead0(ChannelHandlerContext ctx, Object msg) {
                             if (queue.release()) {
                                 queues.remove(queue);
                             }
-                            publisherRef.clearBuffer(DataChunk::release);
+                            publisherRef.clearAndRelease();
 
                             // Enables next response to proceed (HTTP pipelining)
                             thisResp.complete(null);

File: integrations/micronaut/data/src/main/java/module-info.java
Patch:
@@ -21,8 +21,6 @@
     requires java.annotation;
     requires java.sql;
 
-    requires io.helidon.integrations.micronaut.cdi;
-
     requires jakarta.enterprise.cdi.api;
     requires jakarta.interceptor.api;
 

File: security/providers/google-login/src/main/java/io/helidon/security/providers/google/login/GoogleTokenProvider.java
Patch:
@@ -530,7 +530,8 @@ public Builder config(Config config) {
             config.get("proxy-port").asInt().ifPresent(this::proxyPort);
             config.get("realm").asString().ifPresent(this::realm);
             config.get("token").as(TokenHandler::create).ifPresent(this::tokenProvider);
-            config.get("outbound").as(OutboundConfig::create).ifPresent(this::outboundConfig);
+            // OutboundConfig.create() expects provider configuration, not outbound
+            config.get("outbound").ifExists(outbound -> outboundConfig(OutboundConfig.create(config)));
 
             return this;
         }

File: grpc/server/src/main/java/io/helidon/grpc/server/SSLContextBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -167,7 +167,7 @@ private static KeyManagerFactory buildKmf(KeyConfig privateKeyConfig) throws IOE
         RANDOM.nextBytes(passwordBytes);
         char[] password = Base64.getEncoder().encodeToString(passwordBytes).toCharArray();
 
-        KeyStore ks = KeyStore.getInstance("JKS");
+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
         ks.load(null, null);
         ks.setKeyEntry("key",
                        privateKeyConfig.privateKey().orElseThrow(() -> new RuntimeException("Private key not available")),
@@ -190,7 +190,7 @@ private static TrustManagerFactory buildTmf(KeyConfig trustConfig)
             certs = trustConfig.certs();
         }
 
-        KeyStore ks = KeyStore.getInstance("JKS");
+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
         ks.load(null, null);
 
         int i = 1;

File: webserver/webserver/src/main/java/io/helidon/webserver/WebServerTls.java
Patch:
@@ -362,7 +362,7 @@ private static KeyManagerFactory buildKmf(KeyConfig privateKeyConfig) throws IOE
             RANDOM.get().nextBytes(passwordBytes);
             char[] password = Base64.getEncoder().encodeToString(passwordBytes).toCharArray();
 
-            KeyStore ks = KeyStore.getInstance("JKS");
+            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
             ks.load(null, null);
             ks.setKeyEntry("key",
                            privateKeyConfig.privateKey().orElseThrow(() -> new RuntimeException("Private key not available")),
@@ -385,7 +385,7 @@ private static TrustManagerFactory buildTmf(KeyConfig trustConfig)
                 certs = trustConfig.certs();
             }
 
-            KeyStore ks = KeyStore.getInstance("JKS");
+            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
             ks.load(null, null);
 
             int i = 1;

File: logging/slf4j/src/main/java/module-info.java
Patch:
@@ -21,7 +21,7 @@
     requires io.helidon.common.context;
     requires io.helidon.logging.common;
 
-    requires slf4j.api;
+    requires org.slf4j;
 
     exports io.helidon.logging.slf4j;
 

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/InternalProcessor.java
Patch:
@@ -17,7 +17,6 @@
 
 package io.helidon.microprofile.messaging;
 
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
@@ -109,7 +108,7 @@ public void onNext(final Object incomingValue) {
                     subscriber.onNext(postProcess(incomingValue, processedValue));
                 }
             }
-        } catch (IllegalAccessException | InvocationTargetException e) {
+        } catch (Throwable e) {
             subscriber.onError(e);
         }
     }

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/OutgoingMethod.java
Patch:
@@ -30,6 +30,7 @@
 import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;
 import org.reactivestreams.Publisher;
 
+
 class OutgoingMethod extends AbstractMessagingMethod {
 
     private Publisher<?> publisher;

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ChannelTest.java
Patch:
@@ -55,7 +55,6 @@ static Stream<CdiTestCase> testCaseSource() {
 
     @ParameterizedTest
     @MethodSource("testCaseSource")
-    @Disabled("Fails due to backpressure issues in InternalProcessor, reenable once fixed")
     void innerChannelBeanTest(CdiTestCase testCase) {
         Optional<? extends Class<? extends Throwable>> expectedThrowable = testCase.getExpectedThrowable();
         if (expectedThrowable.isPresent()) {

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/subscriber/SubscriberPublToSubsBean.java
Patch:
@@ -58,6 +58,6 @@ public Subscriber<Message<String>> subscriberOfMessages() {
 
     @Override
     public void assertValid() {
-        assertThat(resultData, containsInAnyOrder(TEST_DATA));
+        assertThat(resultData, containsInAnyOrder(TEST_DATA.toArray(new String[0])));
     }
 }

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/subscriber/SubscriberPublToSubsBuilderBean.java
Patch:
@@ -57,6 +57,6 @@ public SubscriberBuilder<Message<String>, Void> subscriberBuilderOfMessages() {
 
     @Override
     public void assertValid() {
-        assertThat(resultData, containsInAnyOrder(TEST_DATA));
+        assertThat(resultData, containsInAnyOrder(TEST_DATA.toArray(new String[0])));
     }
 }

File: common/common/src/main/java/io/helidon/common/LazyList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/common/src/main/java/io/helidon/common/LazyListImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/common/src/test/java/io/helidon/common/LazyListTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/BiConsumerChain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/BufferedEmittingPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/CompletionSingle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/ConcatPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/ConsumerChain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/EmittingPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/HalfSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/IoMulti.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiDefaultIfEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiDefer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiDistinctPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiDropWhilePublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFilterPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFlatMapIterable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFlatMapPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromBlockingInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromIterable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiLimitPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiLoggingPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiObserveOn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiOnCompleteResumeWith.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiOnErrorResumeWith.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiRangeLongPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiRangePublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiReduce.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiReduceFull.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiRetry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiSkipPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiSwitchIfEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTakeUntilPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTakeWhilePublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTappedPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTimeout.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTimer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/RunnableChain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SequentialSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleDefaultIfEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleDefer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleFlatMapMulti.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleFlatMapSingle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleRetry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleSwitchIfEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleTakeUntilPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleTappedPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleTimeout.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleTimer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/StreamValidationUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SubscriptionArbiter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/SubscriptionHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/TerminatedFuture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/AwaitTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/BufferedEmittingPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/ConcatPublisher2TckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/ConcatPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/EmitterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/EmittingPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiCollectTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiCollectorTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiComposeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiConcatArrayTck1Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiConcatArrayTck2Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDefaultIfEmptyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDeferTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDeferTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDistinctPublisherModuloTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDistinctPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDropWhileTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDropWhileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFilterPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFilterPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFirstPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFirstPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapIterableManyToManyTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapIterableManyToOneTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapIterableOneToManyTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapIterableTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapPublisherManyToOneTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapPublisherOneToManyTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromArrayTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromArrayTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromCompletionStageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromInputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromIterableTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromIterableTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromNotTrustedInputStreamTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromStreamTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromTrustedInputStreamTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiIntervalTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiIntervalTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiLimitPublisherMoreTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiLimitPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiLimitPublisherZeroTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiLogTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiObserveOnTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnCompleteResumeWithTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnCompleteResumeWithTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnCompleteTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeFailureTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeSuccessTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeWithFailureTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeWithSuccessTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeWithTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnTerminateTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiPeekTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiPeekTwiceTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeLongTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeLongTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceFullTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceFullTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRetryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSkipPublisherNoSkipTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSkipPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSkipPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSwitchIfEmptyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeUntilPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeUntilPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeWhilePublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeWhilePublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTappedPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTimeoutTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiToTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SequentialSubscriberTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleComposeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleDefaultIfEmptyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleDeferTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleDeferTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapIterableTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapIterableTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapMultiTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapMultiTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapSingleTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapSingleTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFromCompletionStageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleObserveOnTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeFailureTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeSuccessTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeWithFailureTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeWithSuccessTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeWithTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SinglePeekTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SinglePeekTwiceTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleRetryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleSwitchIfEmptyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTakeUntilPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTakeUntilPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTappedPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTimeoutTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleToTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/TerminatedFutureTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/test/java/io/helidon/common/reactive/TidyTestExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: dbclient/jdbc/src/test/java/io/helidon/dbclient/jdbc/JdbcClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/jms-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/MsgProcessingBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/jms-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/SendingResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/jms-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/WebSocketEndpoint.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/jms-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/package-info.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/kafka-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/MsgProcessingBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/kafka-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/SendingResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/kafka-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/WebSocketEndpoint.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/kafka-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/Main.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/SendingService.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/WebSocketEndpoint.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/kafka-websocket-se/src/main/java/io/helidon/examples/messaging/se/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/oracle-aq-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/MsgProcessingBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/oracle-aq-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/SendingResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/oracle-aq-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/WebSocketEndpoint.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/messaging/oracle-aq-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/package-info.java
Patch:
@@ -1,6 +1,6 @@
 
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/microprofile/messaging-sse/src/main/java/io/helidon/microprofile/example/messaging/sse/MsgProcessingBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jersey/connector/src/main/java/io/helidon/jersey/connector/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: media/common/src/main/java/io/helidon/media/common/CharSequenceBodyStreamWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: media/multipart/src/test/java/io/helidon/media/multipart/MultiPartDecoderSubsBlackBoxTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: media/multipart/src/test/java/io/helidon/media/multipart/MultiPartDecoderSubsWhiteBoxTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: media/multipart/src/test/java/io/helidon/media/multipart/MultiPartDecoderTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: media/multipart/src/test/java/io/helidon/media/multipart/MultiPartEncoderSubsBlackBoxTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: media/multipart/src/test/java/io/helidon/media/multipart/MultiPartEncoderSubsWhiteBoxTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: media/multipart/src/test/java/io/helidon/media/multipart/MultiPartEncoderTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/aq/src/main/java/io/helidon/messaging/connectors/aq/AqConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/aq/src/main/java/io/helidon/messaging/connectors/aq/AqMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/aq/src/main/java/io/helidon/messaging/connectors/aq/AqMessageImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/aq/src/main/java/io/helidon/messaging/connectors/aq/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/AbstractJmsMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/AcknowledgeMode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/ConnectionContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsBytesMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsTextMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/MessageMappers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/OutgoingJmsMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/SessionMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/main/java/io/helidon/messaging/connectors/jms/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/connectors/jms/src/test/java/io/helidon/messaging/connectors/jms/ConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaProducerMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/main/java/io/helidon/messaging/Channel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/main/java/io/helidon/messaging/ContextSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/main/java/io/helidon/messaging/Emitter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/main/java/io/helidon/messaging/MessagingException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/main/java/io/helidon/messaging/Stoppable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/main/java/io/helidon/messaging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/test/java/io/helidon/messaging/CovarianceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/test/java/io/helidon/messaging/EmitterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/test/java/io/helidon/messaging/LatchedTestData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/test/java/io/helidon/messaging/MessagingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/test/java/io/helidon/messaging/StateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/test/java/io/helidon/messaging/TestConfigurableConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/test/java/io/helidon/messaging/TestConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: messaging/messaging/src/test/java/io/helidon/messaging/TestMessages.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/AbstractMessagingMethod.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/AdHocConfigBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ChannelRouter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/CompletableQueue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ConfigurableConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ExceptionUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/IncomingConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/IncomingMethod.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/InternalProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/InternalPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/InternalSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/MessageUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/MessagingDeploymentException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/MessagingException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/MethodSignatureResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/MethodSignatureType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/OutgoingConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/OutgoingMethod.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ProcessorMethod.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ProxyProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/ProxySubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/PublishingConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/SubscribingConnector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/UniversalChannel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/UnwrapProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/WrappingPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/main/java/io/helidon/microprofile/messaging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/AssertThrowException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/AssertableTestBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/AsyncTestBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/CompletableQueueTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/ConnectorConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/CountableTestBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/MessageUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/MethodSignatureResolverTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/SignatureTypeConsistencyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/UnwrapProcessorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/ConnectedBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/ConnectedOnlyProcessorBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/connector/ConnectedProcessorBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/AbstractShapeTestBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/BadSignaturePublisherPayloadBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV1Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV2Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV3Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV4Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/messaging/core/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV5Bean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webclient/webclient/src/main/java/io/helidon/webclient/WebClientRequestBuilderImpl.java
Patch:
@@ -19,8 +19,6 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
-import java.net.URLEncoder;
-import java.nio.charset.StandardCharsets;
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -277,7 +275,7 @@ public WebClientRequestHeaders headers() {
     @Override
     public WebClientRequestBuilder queryParam(String name, String... values) {
         for (String value : values) {
-            queryParams.add(name, URLEncoder.encode(value, StandardCharsets.UTF_8));
+            queryParams.add(name, value);
         }
         return this;
     }

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricUtil.java
Patch:
@@ -107,7 +107,7 @@ static <A extends Annotation> List<LookupResult<A>> lookupAnnotations(
         return result;
     }
 
-    private static <A extends Annotation>  List<LookupResult<A>> lookupAnnotations(Annotated annotated,
+    static <A extends Annotation>  List<LookupResult<A>> lookupAnnotations(Annotated annotated,
             Class<A> annotClass) {
         // We have to filter by annotation class ourselves, because annotatedMethod.getAnnotations(Class) delegates
         // to the Java method. That would bypass any annotations that had been added dynamically to the configurator.

File: tests/functional/context-propagation/src/main/java/io/helidon/tests/functional/context/hello/HelloBean.java
Patch:
@@ -52,7 +52,7 @@ public String getHello() {
     }
 
     /**
-     * Runs in Hystrix thread.
+     * Runs in FT thread.
      *
      * @return Hello string.
      */
@@ -68,7 +68,7 @@ public String getHelloTimeout() {
     }
 
     /**
-     * Runs in Hystrix thread via FT async thread.
+     * Runs via FT async thread.
      *
      * @return Hello string.
      */

File: webserver/webserver/src/main/java/io/helidon/webserver/HttpInitializer.java
Patch:
@@ -132,7 +132,8 @@ public void initChannel(SocketChannel ch) {
         }
 
         // Helidon's forwarding handler
-        p.addLast(new ForwardingHandler(routing, webServer, sslEngine, queues, requestDecoder));
+        p.addLast(new ForwardingHandler(routing, webServer, sslEngine, queues,
+                                        requestDecoder, soConfig.maxPayloadSize()));
 
         // Cleanup queues as part of event loop
         ch.eventLoop().execute(this::clearQueues);

File: microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java
Patch:
@@ -453,7 +453,7 @@ void registerOtherBeans(@Observes AfterBeanDiscovery event) {
                             int port = (int) m.invoke(extension);
                             String uri = "http://localhost:" + port;
                             return client.target(uri);
-                        } catch (Exception e) {
+                        } catch (ReflectiveOperationException e) {
                             return client.target("http://localhost:7001");
                         }
                     });

File: messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java
Patch:
@@ -96,6 +96,7 @@ record = new ProducerRecord<>(topic, message.getPayload());
             kafkaProducer.send(record, (metadata, exception) -> {
                 if (exception != null) {
                     subscription.cancel();
+                    LOGGER.log(Level.WARNING, "Error when sending kafka message to topic: " + topic, exception);
                     completableFuture.completeExceptionally(exception);
                 } else {
                     completableFuture.complete(null);

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/Bulkhead.java
Patch:
@@ -98,9 +98,9 @@ public Builder queueLength(int queueLength) {
         }
 
         /**
-         * Name is useful for debugging and in exception handling.
+         * A name assigned for debugging, error reporting or configuration purposes.
          *
-         * @param name name of this bulkhead
+         * @param name the name
          * @return updated builder instance
          */
         public Builder name(String name) {

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/Fallback.java
Patch:
@@ -28,7 +28,7 @@
 import io.helidon.common.reactive.Single;
 
 /**
- * Fallback allows the user to execute an alternative supplier of results in case the usual one fails.
+ * Fallback allows the user to execute an alternative function in case the provided supplier fails.
  * <p>
  * In case you call the {@link #invokeMulti(java.util.function.Supplier)} method, the following restriction applies:
  * <ul>

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/Timeout.java
Patch:
@@ -22,7 +22,7 @@
 import io.helidon.common.LazyValue;
 
 /**
- * Timeout attempts to terminate execution after the duration time passes.
+ * Timeout attempts to terminate execution after a duration time passes.
  * In such a case, the consumer of this handler receives a {@link io.helidon.common.reactive.Single}
  * or {@link io.helidon.common.reactive.Multi} with a {@link java.util.concurrent.TimeoutException}.
  */

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Fault tolerance for Helidon reactive implementation.
+ * Fault tolerance for Helidon SE reactive implementation.
  */
 package io.helidon.faulttolerance;

File: webserver/jersey/src/test/java/io/helidon/webserver/jersey/JerseySupportTest.java
Patch:
@@ -311,8 +311,8 @@ public void streamingOutput() throws IOException {
         try (InputStream is = response.readEntity(InputStream.class)) {
             byte[] buffer = new byte[32];
             int n = is.read(buffer);        // should read only first chunk
-            assertEquals(new String(buffer, 0, n), "{ value: \"first\" }\n");
-            while ((n = is.read(buffer)) > 0) {
+            assertThat(new String(buffer, 0, n), is("{ value: \"first\" }\n"));
+            while (is.read(buffer) > 0) {
                 // consume rest of stream
             }
         }

File: webserver/webserver/src/test/java/io/helidon/webserver/TransferEncodingTest.java
Patch:
@@ -118,7 +118,7 @@ public void testOptimized() throws Exception {
         assertThat(headers, hasEntry("content-length", "9"));
     }
 
-    private Map<String, String> cutHeaders(String response) {
+    static Map<String, String> cutHeaders(String response) {
         assertThat(response, notNullValue());
         int index = response.indexOf("\n\n");
         if (index < 0) {

File: webclient/security/src/main/java/module-info.java
Patch:
@@ -24,6 +24,7 @@
     requires java.logging;
 
     requires io.helidon.security;
+    requires io.helidon.security.providers.common;
     requires io.helidon.webclient;
 
     exports io.helidon.webclient.security;

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/AsynchronousAntn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,15 +26,15 @@
 /**
  * Class AsynchronousAntn.
  */
-public class AsynchronousAntn extends MethodAntn implements Asynchronous {
+class AsynchronousAntn extends MethodAntn implements Asynchronous {
 
     /**
      * Constructor.
      *
      * @param beanClass Bean class.
      * @param method The method.
      */
-    public AsynchronousAntn(Class<?> beanClass, Method method) {
+    AsynchronousAntn(Class<?> beanClass, Method method) {
         super(beanClass, method);
     }
 

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/BulkheadAntn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,15 +24,15 @@
 /**
  * Class BulkheadAntn.
  */
-public class BulkheadAntn extends MethodAntn implements Bulkhead {
+class BulkheadAntn extends MethodAntn implements Bulkhead {
 
     /**
      * Constructor.
      *
      * @param beanClass Bean class.
      * @param method The method.
      */
-    public BulkheadAntn(Class<?> beanClass, Method method) {
+    BulkheadAntn(Class<?> beanClass, Method method) {
         super(beanClass, method);
     }
 

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CircuitBreakerAntn.java
Patch:
@@ -25,15 +25,15 @@
 /**
  * Class CircuitBreakerAntn.
  */
-public class CircuitBreakerAntn extends MethodAntn implements CircuitBreaker {
+class CircuitBreakerAntn extends MethodAntn implements CircuitBreaker {
 
     /**
      * Constructor.
      *
      * @param beanClass The bean class.
      * @param method The method.
      */
-    public CircuitBreakerAntn(Class<?> beanClass, Method method) {
+    CircuitBreakerAntn(Class<?> beanClass, Method method) {
         super(beanClass, method);
     }
 

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CommandBinding.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,5 +35,5 @@
 @Retention(RUNTIME)
 @Documented
 @InterceptorBinding
-public @interface CommandBinding {
+@interface CommandBinding {
 }

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CommandInterceptor.java
Patch:
@@ -29,7 +29,7 @@
 @Interceptor
 @CommandBinding
 @Priority(Interceptor.Priority.PLATFORM_AFTER + 10)
-public class CommandInterceptor {
+class CommandInterceptor {
 
     private static final Logger LOGGER = Logger.getLogger(CommandInterceptor.class.getName());
 

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FallbackAntn.java
Patch:
@@ -26,15 +26,15 @@
 /**
  * Class FallbackAntn.
  */
-public class FallbackAntn extends MethodAntn implements Fallback {
+class FallbackAntn extends MethodAntn implements Fallback {
 
     /**
      * Constructor.
      *
      * @param beanClass Bean class.
      * @param method The method.
      */
-    public FallbackAntn(Class<?> beanClass, Method method) {
+    FallbackAntn(Class<?> beanClass, Method method) {
         super(beanClass, method);
     }
 

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/LiteralCommandBinding.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,7 @@
 /**
  * Class LiteralCommandBinding.
  */
-public class LiteralCommandBinding extends AnnotationLiteral<CommandBinding> implements CommandBinding {
+class LiteralCommandBinding extends AnnotationLiteral<CommandBinding> implements CommandBinding {
     private static final long serialVersionUID = 1L;
 
     private static final CommandBinding INSTANCE = new LiteralCommandBinding();

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/MethodAntn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
 /**
  * Class MethodAntn.
  */
-public abstract class MethodAntn {
+abstract class MethodAntn {
     private static final Logger LOGGER = Logger.getLogger(MethodAntn.class.getName());
 
     private final Method method;
@@ -72,7 +72,7 @@ public A getAnnotation() {
      * @param beanClass Bean class.
      * @param method The method.
      */
-    public MethodAntn(Class<?> beanClass, Method method) {
+    MethodAntn(Class<?> beanClass, Method method) {
         this.beanClass = beanClass;
         this.method = method;
     }

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/MethodInvoker.java
Patch:
@@ -90,7 +90,7 @@
  * of this class is created for each method invocation. Some state is shared across
  * all invocations of a method, including for circuit breakers and bulkheads.
  */
-public class MethodInvoker implements FtSupplier<Object> {
+class MethodInvoker implements FtSupplier<Object> {
     private static final Logger LOGGER = Logger.getLogger(MethodInvoker.class.getName());
 
     /**
@@ -283,7 +283,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {
      * @param context The invocation context.
      * @param introspector The method introspector.
      */
-    public MethodInvoker(InvocationContext context, MethodIntrospector introspector) {
+    MethodInvoker(InvocationContext context, MethodIntrospector introspector) {
         this.context = context;
         this.introspector = introspector;
         this.method = context.getMethod();

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/RetryAntn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,15 +25,15 @@
 /**
  * Class RetryAntn.
  */
-public class RetryAntn extends MethodAntn implements Retry {
+class RetryAntn extends MethodAntn implements Retry {
 
     /**
      * Constructor.
      *
      * @param beanClass Bean class.
      * @param method The method.
      */
-    public RetryAntn(Class<?> beanClass, Method method) {
+    RetryAntn(Class<?> beanClass, Method method) {
         super(beanClass, method);
     }
 

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/TimeoutAntn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,15 +25,15 @@
 /**
  * Class TimeoutAntn.
  */
-public class TimeoutAntn extends MethodAntn implements Timeout {
+class TimeoutAntn extends MethodAntn implements Timeout {
 
     /**
      * Constructor.
      *
      * @param beanClass Bean class.
      * @param method The method.
      */
-    public TimeoutAntn(Class<?> beanClass, Method method) {
+    TimeoutAntn(Class<?> beanClass, Method method) {
         super(beanClass, method);
     }
 

File: config/config-mp/src/main/java/io/helidon/config/mp/MpEnvironmentVariablesSource.java
Patch:
@@ -33,7 +33,7 @@ class MpEnvironmentVariablesSource implements ConfigSource {
     private final Map<String, Cached> cache = new ConcurrentHashMap<>();
 
     MpEnvironmentVariablesSource() {
-        this.env = System.getenv();
+        this.env = Map.copyOf(System.getenv());
     }
 
     @Override

File: tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/TracingPropagationTest.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
 
 import io.helidon.common.context.Context;
 import io.helidon.config.Config;
@@ -67,6 +68,7 @@ void testTracingSuccess() throws ExecutionException, InterruptedException {
                 .toCompletableFuture()
                 .get();
 
+        TimeUnit.MILLISECONDS.sleep(1);
         List<MockSpan> mockSpans = mockTracer.finishedSpans();
         assertThat("At least one client and one server span expected", mockSpans.size(), greaterThanOrEqualTo(2));
 

File: messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaMessage.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Objects;
 import java.util.Optional;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.function.Supplier;
 
@@ -118,7 +119,7 @@ static <K, V> KafkaMessage<K, V> of(V payload, Supplier<CompletionStage<Void>> a
      */
     static <K, V> KafkaMessage<K, V> of(K key, V payload) {
         Objects.requireNonNull(payload);
-        return new KafkaProducerMessage<>(key, payload, null);
+        return new KafkaProducerMessage<>(key, payload, () -> CompletableFuture.completedFuture(null));
     }
 
     /**
@@ -131,6 +132,6 @@ static <K, V> KafkaMessage<K, V> of(K key, V payload) {
      */
     static <K, V> KafkaMessage<K, V> of(V payload) {
         Objects.requireNonNull(payload);
-        return new KafkaProducerMessage<>(null, payload, null);
+        return new KafkaProducerMessage<>(null, payload, () -> CompletableFuture.completedFuture(null));
     }
 }

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromBlockingInputStream.java
Patch:
@@ -54,7 +54,9 @@ public void subscribe(final Flow.Subscriber<? super ByteBuffer> subscriber) {
                 inputStream,
                 bufferSizeSupplier.getAsInt(),
                 executorService);
-        subscriber.onSubscribe(subscription);
+        DeferredSubscription ds = new DeferredSubscription();
+        subscriber.onSubscribe(ds);
+        ds.setSubscription(subscription);
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: media/common/src/main/java/io/helidon/media/common/MessageBodyContext.java
Patch:
@@ -76,7 +76,7 @@ public enum EventType {
         AFTER_ONNEXT,
 
         /**
-         * Emitted after {@link Subscriber#onError(Throwable)}.
+         * Emitted before {@link Subscriber#onError(Throwable)}.
          */
         BEFORE_ONERROR,
 

File: fault-tolerance/src/main/java/module-info.java
Patch:
@@ -21,4 +21,6 @@
     requires io.helidon.config;
     requires io.helidon.common.configurable;
     requires java.logging;
+
+    exports io.helidon.faulttolerance;
 }
\ No newline at end of file

File: health/health/src/main/java/module-info.java
Patch:
@@ -26,6 +26,7 @@
     requires io.helidon.webserver.cors;
     requires io.helidon.media.jsonp;
     requires java.json;
+    requires io.helidon.faulttolerance;
 
     exports io.helidon.health;
     provides org.eclipse.microprofile.health.spi.HealthCheckResponseProvider with io.helidon.health.HealthCheckResponseProviderImpl;

File: webclient/webclient/src/main/java/io/helidon/webclient/NettyClientHandler.java
Patch:
@@ -290,15 +290,14 @@ Single<Void> close() {
                 WebClientServiceResponse clientServiceResponse = channel.attr(SERVICE_RESPONSE).get();
                 CompletableFuture<WebClientServiceResponse> requestComplete = channel.attr(COMPLETED).get();
                 requestComplete.complete(clientServiceResponse);
-                channel.config().setAutoRead(true);
                 WebClientResponse response = channel.attr(RESPONSE).get();
                 String connection = response.headers().first(Http.Header.CONNECTION)
                         .orElseGet(HttpHeaderValues.CLOSE::toString);
                 if (connection.equals(HttpHeaderValues.CLOSE.toString())) {
                     ctx.close()
                             .addListener(future -> {
                                 if (future.isSuccess()) {
-                                    LOGGER.finest(() -> "Response from has been closed.");
+                                    LOGGER.finest(() -> "Response from the server has been closed.");
                                     cf.complete(null);
                                 } else {
                                     LOGGER.log(Level.SEVERE,
@@ -310,6 +309,7 @@ Single<Void> close() {
                 } else {
                     channel.attr(IN_USE).get().set(false);
                     cf.complete(null);
+                    channel.read();
                 }
                 publisher.complete();
             }

File: media/multipart/src/main/java/io/helidon/media/multipart/MultiPartEncoder.java
Patch:
@@ -143,6 +143,6 @@ private Publisher<DataChunk> createBodyPartPublisher(final WriteableBodyPart bod
                 // Part body
                 bodyPart.content().init(context)),
                 // Part postfix
-                Single.just(DataChunk.create("\n".getBytes(StandardCharsets.UTF_8))));
+                Single.just(DataChunk.create("\r\n".getBytes(StandardCharsets.UTF_8))));
     }
 }

File: common/http/src/main/java/io/helidon/common/http/FormParams.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * Provides access to any form parameters present in the request entity.
@@ -68,6 +69,7 @@ public FormParams build() {
 
         @Override
         public Builder add(String name, String... values) {
+            Objects.requireNonNull(name);
             params.computeIfAbsent(name, k -> new ArrayList<>()).addAll(Arrays.asList(values));
             return this;
         }

File: tests/functional/context-propagation/src/test/java/io/helidon/tests/functional/context/hello/HelloTest.java
Patch:
@@ -73,7 +73,7 @@ void testHelloAsync() {
     }
 
     @Test
-    void testRemoteAAddress() {
+    void testRemoteAddress() {
         WebTarget target = baseTarget.path("/remoteAddress");
         assertThat(target.request().get().getStatus(), is(200));
     }

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceCommand.java
Patch:
@@ -41,6 +41,8 @@
 import org.glassfish.jersey.process.internal.RequestContext;
 import org.glassfish.jersey.process.internal.RequestScope;
 
+import static com.netflix.hystrix.HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE;
+import static com.netflix.hystrix.HystrixCommandProperties.ExecutionIsolationStrategy.THREAD;
 import static io.helidon.microprofile.faulttolerance.CircuitBreakerHelper.State;
 import static io.helidon.microprofile.faulttolerance.FaultToleranceExtension.isFaultToleranceMetricsEnabled;
 import static io.helidon.microprofile.faulttolerance.FaultToleranceMetrics.BREAKER_CALLS_FAILED_TOTAL;

File: webclient/webclient/src/main/java/io/helidon/webclient/NettyClient.java
Patch:
@@ -41,6 +41,7 @@ final class NettyClient implements WebClient {
     private static final Duration DEFAULT_READ_TIMEOUT = Duration.ofMinutes(10);
     private static final boolean DEFAULT_FOLLOW_REDIRECTS = false;
     private static final boolean DEFAULT_KEEP_ALIVE = false;
+    private static final boolean DEFAULT_VALIDATE_HEADERS = true;
     private static final int DEFAULT_NUMBER_OF_REDIRECTS = 5;
     private static final LazyValue<String> DEFAULT_USER_AGENT = LazyValue
             .create(() -> "Helidon/" + Version.VERSION + " (java " + System.getProperty("java.runtime.version") + ")");
@@ -63,6 +64,7 @@ final class NettyClient implements WebClient {
                     .proxy(DEFAULT_PROXY)
                     .tls(DEFAULT_TLS)
                     .keepAlive(DEFAULT_KEEP_ALIVE)
+                    .validateHeaders(DEFAULT_VALIDATE_HEADERS)
                     .build();
 
     // configurable per client instance

File: webclient/webclient/src/main/java/io/helidon/webclient/WebClientConfiguration.java
Patch:
@@ -301,7 +301,7 @@ static class Builder<B extends Builder<B, T>, T extends WebClientConfiguration>
         private MessageBodyReaderContext readerContext;
         private MessageBodyWriterContext writerContext;
         private List<WebClientService> clientServices;
-        private boolean validateHeaders = true;
+        private boolean validateHeaders;
         @SuppressWarnings("unchecked")
         private B me = (B) this;
 
@@ -675,6 +675,7 @@ public B update(WebClientConfiguration configuration) {
             writerContextParent(configuration.writerContext);
             context(configuration.context);
             keepAlive(configuration.keepAlive);
+            validateHeaders(configuration.validateHeaders);
             configuration.cookieManager.defaultCookies().forEach(this::defaultCookie);
             config = configuration.config;
 

File: media/multipart/src/test/java/io/helidon/media/multipart/MultiPartDecoderSubsWhiteBoxTckTest.java
Patch:
@@ -86,7 +86,7 @@ public void onComplete() {
             }
         };
 
-        Multi.create(decoder).forEach(part -> {});
+        Multi.create(decoder).forEach(part -> part.content().forEach(chunk -> {}));
         return decoder;
     }
 

File: webclient/webclient/src/main/java/io/helidon/webclient/RedirectInterceptor.java
Patch:
@@ -36,9 +36,6 @@ class RedirectInterceptor implements HttpInterceptor {
     public void handleInterception(HttpResponse httpResponse,
                                    WebClientRequestImpl clientRequest,
                                    CompletableFuture<WebClientResponse> responseFuture) {
-        if (clientRequest.method() != Http.Method.GET) {
-            throw new WebClientException("Redirecting is currently supported only for GET method.");
-        }
         if (httpResponse.headers().contains(Http.Header.LOCATION)) {
             String newUri = httpResponse.headers().get(Http.Header.LOCATION);
             LOGGER.fine(() -> "Redirecting to " + newUri);

File: webclient/webclient/src/main/java/io/helidon/webclient/WebClientRequestBuilderImpl.java
Patch:
@@ -174,7 +174,7 @@ public static WebClientRequestBuilder create(LazyValue<NioEventLoopGroup> eventG
     static WebClientRequestBuilder create(WebClientRequestImpl clientRequest) {
         WebClientRequestBuilderImpl builder = new WebClientRequestBuilderImpl(NettyClient.eventGroup(),
                                                                               clientRequest.configuration(),
-                                                                              clientRequest.method());
+                                                                              Http.Method.GET);
         builder.headers(clientRequest.headers());
         builder.queryParams(clientRequest.queryParams());
         builder.uri = clientRequest.uri();
@@ -349,6 +349,7 @@ public WebClientRequestBuilder path(String path) {
     @Override
     public WebClientRequestBuilder contentType(MediaType contentType) {
         this.headers.contentType(contentType);
+        this.writerContext.contentType(contentType);
         return this;
     }
 

File: webclient/webclient/src/main/java/module-info.java
Patch:
@@ -14,8 +14,6 @@
  * limitations under the License.
  */
 
-import io.helidon.webclient.spi.WebClientServiceProvider;
-
 /**
  * Helidon WebClient.
  */

File: webserver/webserver/src/test/java/io/helidon/webserver/FormParamsSupportTest.java
Patch:
@@ -41,7 +41,6 @@ public class FormParamsSupportTest {
     @BeforeAll
     public static void startup() throws InterruptedException, ExecutionException, TimeoutException {
         testServer = WebServer.create(Routing.builder()
-                        .register(FormParamsSupport.create())
                         .put("/params", (req, resp) -> {
                             req.content().as(FormParams.class).thenAccept(fp ->
                                     resp.send(fp.toMap().toString()));

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/Async.java
Patch:
@@ -34,14 +34,14 @@
  *     Async async = Async.create();
  *
  *     // call a method with no parameters
- *     Single&lt;String> result = async.invoke(this::slowSync);
+ *     Single&lt;String&gt; result = async.invoke(this::slowSync);
  *
  *     // call a method with parameters
- *     async.invoke(() -> processRequest(request))
+ *     async.invoke(() -&gt; processRequest(request))
  *      .thenApply(response::send);
  *
  *     // use async to obtain a Multi (from a method returning List of strings)
- *     Multi&lt;String> stringMulti = async.invoke(this::syncList)
+ *     Multi&lt;String&gt; stringMulti = async.invoke(this::syncList)
  *                 .flatMap(Multi::create);
  * </pre>
  */

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/FaultTolerance.java
Patch:
@@ -189,6 +189,7 @@ public B addRetry(Retry retry) {
          * Add a handler to the list. This may be a custom handler or one of the predefined ones.
          *
          * @param ft fault tolerance handler to add
+         * @return updated builder instance
          */
         public abstract B add(FtHandler ft);
     }

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerResponse.java
Patch:
@@ -102,10 +102,10 @@ default ServerResponse status(int statusCode) throws AlreadyCompletedException {
 
     /**
      * Send a {@link Throwable} and close the response.
+     * Invokes error handlers if defined.
      *
      * @param content the {@link Throwable} to send
      * @return {@code null} when invoked
-     * @throws IllegalArgumentException if there is no registered writer for a given type
      * @throws IllegalStateException if any {@code send(...)} method was already called
      * @see #send(Object)
      */

File: common/configurable/src/main/java/io/helidon/common/configurable/ScheduledThreadPoolSupplier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/BulkheadImpl.java
Patch:
@@ -84,7 +84,8 @@ private void execute(DelayedTask<?> task) {
         task.execute()
                 .handle((it, throwable) -> {
                     // we do not care about execution, but let's record it in debug
-                    LOGGER.finest(() -> name + " finished execution: " + task + " (" + (throwable == null ? "success":"failure") +")");
+                    LOGGER.finest(() -> name + " finished execution: " + task
+                            + " (" + (throwable == null ? "success" : "failure") + ")");
                     DelayedTask<?> polled = queue.poll();
                     if (polled != null) {
                         LOGGER.finest(() -> name + " invoke in executor: " + polled);

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/CircuitBreakerImpl.java
Patch:
@@ -33,7 +33,7 @@
 import static io.helidon.faulttolerance.ResultWindow.Result.FAILURE;
 import static io.helidon.faulttolerance.ResultWindow.Result.SUCCESS;
 
-public class CircuitBreakerImpl implements CircuitBreaker {
+class CircuitBreakerImpl implements CircuitBreaker {
     /*
      Configuration options
      */
@@ -142,10 +142,12 @@ private void scheduleHalf() {
                              }, delayMillis, TimeUnit.MILLISECONDS));
     }
 
+    @Override
     public State state() {
         return state.get();
     }
 
+    @Override
     public void state(State newState) {
         if (newState == State.CLOSED) {
             if (state.get() == State.CLOSED) {

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/FaultTolerance.java
Patch:
@@ -306,6 +306,7 @@ public FtHandler build() {
          * Add a fallback to the list of handlers.
          *
          * @param fallback fallback instance
+         * @param <U> type of future
          * @return a new typed builder instance
          */
         public <U> TypedBuilder<U> addFallback(Fallback<U> fallback) {

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/Timeout.java
Patch:
@@ -52,7 +52,6 @@ static Timeout create(Duration timeout) {
     class Builder implements io.helidon.common.Builder<Timeout> {
         private Duration timeout = Duration.ofSeconds(10);
         private LazyValue<? extends ScheduledExecutorService> executor = FaultTolerance.scheduledExecutor();
-        ;
 
         private Builder() {
         }

File: fault-tolerance/src/main/java/io/helidon/faulttolerance/TimeoutImpl.java
Patch:
@@ -32,7 +32,7 @@ class TimeoutImpl implements Timeout {
 
     TimeoutImpl(Timeout.Builder builder) {
         this.timeoutMillis = builder.timeout().toMillis();
-        this.executor = builder.executor();;
+        this.executor = builder.executor();
     }
 
     @Override

File: common/configurable/src/main/java/io/helidon/common/configurable/ScheduledThreadPoolSupplier.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.helidon.common.configurable;
 
-import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.ThreadFactory;
@@ -32,7 +31,7 @@
  * Supplier of a custom scheduled thread pool.
  * The returned thread pool supports {@link io.helidon.common.context.Context} propagation.
  */
-public final class ScheduledThreadPoolSupplier implements Supplier<ExecutorService> {
+public final class ScheduledThreadPoolSupplier implements Supplier<ScheduledExecutorService> {
     private static final int EXECUTOR_DEFAULT_CORE_POOL_SIZE = 16;
     private static final boolean EXECUTOR_DEFAULT_IS_DAEMON = true;
     private static final String EXECUTOR_DEFAULT_THREAD_NAME_PREFIX = "helidon-";

File: security/providers/http-sign/src/main/java/io/helidon/security/providers/httpsign/HttpSignProvider.java
Patch:
@@ -91,7 +91,7 @@ private HttpSignProvider(Builder builder) {
 
         outboundConfig.targets().forEach(target -> target.getConfig().ifPresent(targetConfig -> {
             OutboundTargetDefinition outboundTargetDefinition = targetConfig.get("signature")
-                    .as(OutboundTargetDefinition.class)
+                    .as(OutboundTargetDefinition::create)
                     .get();
             targetKeys.put(target.name(), outboundTargetDefinition);
         }));

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcProvider.java
Patch:
@@ -629,7 +629,7 @@ public Builder config(Config config) {
                     oidcConfig = OidcConfig.create(config);
                 }
             }
-            config.get("propagate").as(Boolean.class).ifPresent(this::propagate);
+            config.get("propagate").asBoolean().ifPresent(this::propagate);
             if (null == outboundConfig) {
                 config.get("outbound").ifExists(outbound -> outboundConfig(OutboundConfig.create(outbound)));
             }

File: messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2020 Oracle and/or its affiliates.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -65,7 +65,7 @@ static org.eclipse.microprofile.config.Config getConnectorConfig(String channelN
         Config incomingChannelConfig = rootConfig.get("mp.messaging.incoming");
         Config outgoingChannelConfig = rootConfig.get("mp.messaging.outgoing");
 
-        Config channelsConfig = (Config) ConnectorConfigBuilder
+        Config channelsConfig = ConnectorConfigBuilder
                 .create(incomingChannelConfig)
                 .config(outgoingChannelConfig)
                 .build();

File: messaging/messaging/src/main/java/io/helidon/messaging/Messaging.java
Patch:
@@ -345,6 +345,9 @@ public <PAYLOAD, RESULT> Builder processor(Channel<PAYLOAD> in, Channel<RESULT>
          * @return new instance of {@link io.helidon.messaging.Messaging}
          */
         public Messaging build() {
+            if (messaging.getConfig() == null) {
+                messaging.setConfig(Config.create());
+            }
             return messaging;
         }
 

File: tests/functional/jax-rs-subresource/src/test/java/io/helidon/tests/functional/jaxrs/subresource/MpSubResourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jersey/client/src/test/java/io/helidon/jersey/client/ConnectorProviderTest.java
Patch:
@@ -30,7 +30,7 @@ public class ConnectorProviderTest {
     /**
      * There should be no {@link org.glassfish.jersey.client.spi.ConnectorProvider}'s in
      * path when running this test. This test will fail if the {@code io.helidon.jersey.connector}
-     * modulesis available.
+     * modules is available.
      *
      * @throws NoSuchElementException If not found.
      */

File: integrations/graal/mp-native-image-extension/src/main/java/io/helidon/integrations/graal/mp/nativeimage/extension/WeldSubstitutions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,7 +57,7 @@ void preloadContainerLifecycleEvent(Class<?> eventRawType, Type... typeParameter
                 public void run() {
                     notifier.resolveObserverMethods(new ParameterizedTypeImpl(eventRawType, typeParameters, null));
                 }
-            });
+            }).start();
         }
 
         @Substitute

File: webserver/webserver/src/main/java/io/helidon/webserver/RequestRouting.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.LazyValue;
 import io.helidon.common.context.Contexts;
 import io.helidon.common.http.AlreadyCompletedException;
 import io.helidon.common.http.Http;
@@ -73,7 +72,7 @@ public void route(BareRequest bareRequest, BareResponse bareResponse) {
             RoutedResponse response = new RoutedResponse(
                     webServer,
                     bareResponse,
-                    LazyValue.create(requestHeaders::acceptedTypes));
+                    requestHeaders.acceptedTypes());
 
             // Jersey needs the raw path (not decoded) so we get that too
             String path = canonicalize(bareRequest.uri().normalize().getPath());
@@ -442,7 +441,7 @@ public ServerRequest.Path path() {
 
     private static class RoutedResponse extends Response {
 
-        RoutedResponse(WebServer webServer, BareResponse bareResponse, LazyValue<List<MediaType>> acceptedTypes) {
+        RoutedResponse(WebServer webServer, BareResponse bareResponse, List<MediaType> acceptedTypes) {
             super(webServer, bareResponse, acceptedTypes);
         }
 

File: webserver/webserver/src/main/java/io/helidon/webserver/Response.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.function.Predicate;
 
 import io.helidon.common.GenericType;
-import io.helidon.common.LazyValue;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
@@ -66,7 +65,7 @@ abstract class Response implements ServerResponse {
      * @param webServer a web server.
      * @param bareResponse an implementation of the response SPI.
      */
-    Response(WebServer webServer, BareResponse bareResponse, LazyValue<List<MediaType>> acceptedTypes) {
+    Response(WebServer webServer, BareResponse bareResponse, List<MediaType> acceptedTypes) {
         this.webServer = webServer;
         this.bareResponse = bareResponse;
         this.headers = new HashResponseHeaders(bareResponse);

File: webserver/webserver/src/test/java/io/helidon/webserver/ResponseTest.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.function.Function;
 
 import io.helidon.common.GenericType;
-import io.helidon.common.LazyValue;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
@@ -259,7 +258,7 @@ public void filters() throws Exception {
     static class ResponseImpl extends Response {
 
         public ResponseImpl(BareResponse bareResponse) {
-            super(mock(WebServer.class), bareResponse, LazyValue.create(List.of()));
+            super(mock(WebServer.class), bareResponse, List.of());
         }
 
         @Override

File: examples/quickstarts/helidon-quickstart-mp/src/main/java/io/helidon/examples/quickstart/mp/GreetResource.java
Patch:
@@ -76,7 +76,7 @@ public GreetResource(GreetingProvider greetingConfig) {
     }
 
     /**
-     * Return a wordly greeting message.
+     * Return a worldly greeting message.
      *
      * @return {@link JsonObject}
      */

File: examples/quickstarts/helidon-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/GreetService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ public void update(Routing.Rules rules) {
     }
 
     /**
-     * Return a wordly greeting message.
+     * Return a worldly greeting message.
      * @param request the server request
      * @param response the server response
      */

File: examples/quickstarts/helidon-standalone-quickstart-mp/src/main/java/io/helidon/examples/quickstart/mp/GreetResource.java
Patch:
@@ -76,7 +76,7 @@ public GreetResource(GreetingProvider greetingConfig) {
     }
 
     /**
-     * Return a wordly greeting message.
+     * Return a worldly greeting message.
      *
      * @return {@link JsonObject}
      */

File: examples/quickstarts/helidon-standalone-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/GreetService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ public void update(Routing.Rules rules) {
     }
 
     /**
-     * Return a wordly greeting message.
+     * Return a worldly greeting message.
      * @param request the server request
      * @param response the server response
      */

File: examples/webclient/standalone/src/main/java/io/helidon/examples/webclient/standalone/GreetService.java
Patch:
@@ -76,7 +76,7 @@ public void update(Routing.Rules rules) {
     }
 
     /**
-     * Return a wordly greeting message.
+     * Return a worldly greeting message.
      *
      * @param request  the server request
      * @param response the server response

File: tests/integration/native-image/mp-3/src/main/java/io/helidon/tests/integration/nativeimage/mp3/GreetResource.java
Patch:
@@ -76,7 +76,7 @@ public GreetResource(GreetingProvider greetingConfig) {
     }
 
     /**
-     * Return a wordly greeting message.
+     * Return a worldly greeting message.
      *
      * @return {@link javax.json.JsonObject}
      */

File: tests/integration/native-image/se-1/src/main/java/io/helidon/tests/integration/nativeimage/se1/GreetService.java
Patch:
@@ -91,7 +91,7 @@ public void update(Routing.Rules rules) {
     }
 
     /**
-     * Return a wordly greeting message.
+     * Return a worldly greeting message.
      * @param request the server request
      * @param response the server response
      */

File: tests/integration/webclient/src/main/java/io/helidon/tests/integration/webclient/GreetService.java
Patch:
@@ -113,7 +113,7 @@ private void basicAuth(ServerRequest serverRequest, ServerResponse response) {
     }
 
     /**
-     * Return a wordly greeting message.
+     * Return a worldly greeting message.
      *
      * @param request  the server request
      * @param response the server response

File: examples/integrations/cdi/pokemons/src/main/java/io/helidon/examples/integrations/cdi/pokemon/PokemonType.java
Patch:
@@ -47,6 +47,9 @@ public class PokemonType {
     @Column(name = "NAME")
     private String name;
 
+    /**
+     * Creates a new type.
+     */
     public PokemonType() {
     }
 

File: examples/integrations/cdi/pokemons/src/main/java/io/helidon/examples/integrations/cdi/pokemon/PokemonTypeResource.java
Patch:
@@ -15,13 +15,14 @@
  */
 package io.helidon.examples.integrations.cdi.pokemon;
 
+import java.util.List;
+
 import javax.persistence.EntityManager;
 import javax.persistence.PersistenceContext;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
-import java.util.List;
 
 /**
  * This class implements a REST endpoint to retrieve Pokemon types.

File: jersey/common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  */
 
 /**
- * Eclipse Microprofile Tracing implementation for helidon microprofile.
+ * Utilities for Jersey handling.
  */
 module io.helidon.jersey.common {
     requires java.logging;

File: jersey/connector/src/main/java/io/helidon/jersey/connector/HelidonConnectorProvider.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Provider for Helidon WebClient {@link Connector} that utilizes the Helidon HTTP Client to send and receive
  * HTTP request and responses.
- * <p/>
+ * <p>
  * The following properties are only supported at construction of this class:
  * <ul>
  * <li>{@link org.glassfish.jersey.client.ClientProperties#CONNECT_TIMEOUT}</li>

File: jersey/connector/src/main/java/io/helidon/jersey/connector/HelidonEntity.java
Patch:
@@ -29,8 +29,9 @@
 import io.helidon.common.GenericType;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.MediaType;
+import io.helidon.common.reactive.IoMulti;
 import io.helidon.common.reactive.Multi;
-import io.helidon.common.reactive.MultiFromOutputStream;
+import io.helidon.common.reactive.OutputStreamMulti;
 import io.helidon.common.reactive.Single;
 import io.helidon.media.common.ContentWriters;
 import io.helidon.media.common.MessageBodyWriter;
@@ -120,7 +121,7 @@ static CompletionStage<WebClientResponse> submit(HelidonEntityType type,
                     stage = requestBuilder.submit(channel);
                     break;
                 case OUTPUT_STREAM_MULTI:
-                    final MultiFromOutputStream publisher = new MultiFromOutputStream() {};
+                    final OutputStreamMulti publisher = IoMulti.outputStreamMulti();
                     requestContext.setStreamProvider(contentLength -> publisher);
                     executorService.execute((ProcessingRunnable) () -> {
                         requestContext.writeEntity();

File: common/common/src/main/java/io/helidon/common/LazyValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -47,7 +47,7 @@ static <T> LazyValue<T> create(Supplier<T> supplier) {
      * @return a lazy value that will always return the value provided
      */
     static <T> LazyValue<T> create(T value) {
-        return () -> value;
+        return new LazyValueImpl<>(value);
     }
 
 }

File: webserver/webserver/src/main/java/io/helidon/webserver/Response.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.function.Predicate;
 
 import io.helidon.common.GenericType;
+import io.helidon.common.LazyValue;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
@@ -65,7 +66,7 @@ abstract class Response implements ServerResponse {
      * @param webServer a web server.
      * @param bareResponse an implementation of the response SPI.
      */
-    Response(WebServer webServer, BareResponse bareResponse, List<MediaType> acceptedTypes) {
+    Response(WebServer webServer, BareResponse bareResponse, LazyValue<List<MediaType>> acceptedTypes) {
         this.webServer = webServer;
         this.bareResponse = bareResponse;
         this.headers = new HashResponseHeaders(bareResponse);

File: webserver/webserver/src/test/java/io/helidon/webserver/ResponseTest.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.function.Function;
 
 import io.helidon.common.GenericType;
+import io.helidon.common.LazyValue;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
@@ -258,7 +259,7 @@ public void filters() throws Exception {
     static class ResponseImpl extends Response {
 
         public ResponseImpl(BareResponse bareResponse) {
-            super(mock(WebServer.class), bareResponse, List.of());
+            super(mock(WebServer.class), bareResponse, LazyValue.create(List.of()));
         }
 
         @Override

File: tests/functional/context-propagation/src/main/java/io/helidon/tests/functional/context/hello/HelloResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/jersey/src/test/java/io/helidon/webserver/jersey/JerseyExampleResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -71,7 +71,8 @@ public class JerseyExampleResource {
     public Response webServerInjection() {
         return Response.ok("request=" + request.getClass().getName()
                                    + "\nresponse=" + response.getClass().getName()
-                                   + "\nspanContext=" + spanContext.getClass().getName()).build();
+                                   + "\nspanContext=" + (null == spanContext ? null : spanContext.getClass().getName()))
+                .build();
     }
 
     @GET

File: microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/ContainerInstanceHolder.java
Patch:
@@ -68,6 +68,7 @@ static synchronized void reset() {
         for (Runnable resetListener : RESET_LISTENERS) {
             resetListener.run();
         }
+        HelidonCdiProvider.unset();
         RESET_LISTENERS.clear();
     }
 }

File: common/reactive/src/main/java/io/helidon/common/reactive/package-info.java
Patch:
@@ -18,6 +18,7 @@
  * Common reactive library for Helidon projects.
  *
  * @see java.util.concurrent.Flow
- * @see io.helidon.common.reactive.OutputStreamPublisher
+ * @see io.helidon.common.reactive.Multi
+ * @see io.helidon.common.reactive.IoMulti
  */
 package io.helidon.common.reactive;

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromInputStreamTest.java
Patch:
@@ -59,7 +59,7 @@ public void testInputStream() {
 
         InputStream is = new ByteArrayInputStream(initialArray);
 
-        List<Byte> result = IoMulti.create(is)
+        List<Byte> result = IoMulti.createInputStream(is)
                 .flatMapIterable((ByteBuffer b) -> {
                     List<Byte> list = new LinkedList<>();
                     while (b.remaining() > 0) {
@@ -75,15 +75,15 @@ public void testInputStream() {
     @RepeatedTest(value = 20, name = "buffer size {currentRepetition}")
     void longStringTrustedStream(RepetitionInfo repetitionInfo) {
         var bufferSize = repetitionInfo.getCurrentRepetition();
-        longString(is -> IoMulti.builder(is)
+        longString(is -> IoMulti.builderInputStream(is)
                 .byteBufferSize(bufferSize)
                 .build());
     }
 
     @RepeatedTest(value = 20, name = "buffer size {currentRepetition}")
     void longStringNotTrustedStream(RepetitionInfo repetitionInfo) {
         var bufferSize = repetitionInfo.getCurrentRepetition();
-        longString(is -> IoMulti.builder(is)
+        longString(is -> IoMulti.builderInputStream(is)
                 .executor(executorService)
                 .byteBufferSize(bufferSize)
                 .build());

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromNotTrustedInputStreamTckTest.java
Patch:
@@ -27,7 +27,7 @@ public class MultiFromNotTrustedInputStreamTckTest extends MultiFromTrustedInput
     static final int BUFFER_SIZE = 4;
 
     protected Multi<ByteBuffer> getPublisher(InputStream is) {
-        return IoMulti.builder(is)
+        return IoMulti.builderInputStream(is)
                 .executor(Executors.newFixedThreadPool(4))
                 .byteBufferSize(BUFFER_SIZE)
                 .build();

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromTrustedInputStreamTckTest.java
Patch:
@@ -51,7 +51,7 @@ public int read() {
     }
 
     protected Multi<ByteBuffer> getPublisher(InputStream is) {
-        return IoMulti.builder(is)
+        return IoMulti.builderInputStream(is)
                 .byteBufferSize(BUFFER_SIZE)
                 .build();
     }

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/InputStreamPublisherTest.java
Patch:
@@ -41,7 +41,7 @@ public class InputStreamPublisherTest {
     public void testSingle() throws InterruptedException {
         String teststring = "My text to publish with publisher";
 
-        Multi<ByteBuffer> p = IoMulti.builder(new ByteArrayInputStream(teststring.getBytes(StandardCharsets.UTF_8)))
+        Multi<ByteBuffer> p = IoMulti.builderInputStream(new ByteArrayInputStream(teststring.getBytes(StandardCharsets.UTF_8)))
                 .byteBufferSize(1024)
                 .build();
 
@@ -86,7 +86,7 @@ public void onComplete() {
     @Test
     public void testMultiple() throws InterruptedException {
         String teststring = "My text to publish with publisher";
-        Multi<ByteBuffer> p = IoMulti.builder(new ByteArrayInputStream(teststring.getBytes(StandardCharsets.UTF_8)))
+        Multi<ByteBuffer> p = IoMulti.builderInputStream(new ByteArrayInputStream(teststring.getBytes(StandardCharsets.UTF_8)))
                 .byteBufferSize(1)
                 .build();
 
@@ -138,7 +138,7 @@ public void testVeryLong() throws IOException, InterruptedException {
         }
         teststring = expectedResult.toString();
 
-        Multi<ByteBuffer> p = IoMulti.builder(new ByteArrayInputStream(teststring.getBytes(StandardCharsets.UTF_8)))
+        Multi<ByteBuffer> p = IoMulti.builderInputStream(new ByteArrayInputStream(teststring.getBytes(StandardCharsets.UTF_8)))
                 .byteBufferSize(2)
                 .build();
 

File: webserver/webserver/src/main/java/io/helidon/webserver/ClassPathContentHandler.java
Patch:
@@ -195,7 +195,7 @@ private void sendUrlStream(Http.RequestMethod method, URL url, ServerRequest req
         }
 
         InputStream in = url.openStream();
-        response.send(IoMulti.builder(in)
+        response.send(IoMulti.builderInputStream(in)
                 .byteBufferSize(2048)
                 .build()
                 .map(DataChunk::create));

File: health/health/src/main/java/io/helidon/health/HealthSupport.java
Patch:
@@ -35,14 +35,15 @@
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;
 import javax.json.JsonObjectBuilder;
+import javax.json.JsonStructure;
 
 import io.helidon.common.GenericType;
 import io.helidon.common.HelidonFeatures;
 import io.helidon.common.HelidonFlavor;
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Single;
 import io.helidon.config.Config;
-import io.helidon.media.jsonp.JsonpBodyWriter;
+import io.helidon.media.common.MessageBodyWriter;
 import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.ServerRequest;
@@ -88,7 +89,7 @@ public final class HealthSupport implements Service {
     private final Set<String> excludedHealthChecks;
     private final boolean backwardCompatible;
     private final CorsEnabledServiceHelper corsEnabledServiceHelper;
-    private final JsonpBodyWriter jsonpWriter = JsonpSupport.writer();
+    private final MessageBodyWriter<JsonStructure> jsonpWriter = JsonpSupport.writer();
 
     private HealthSupport(Builder builder) {
         this.enabled = builder.enabled;

File: media/common/src/main/java/io/helidon/media/common/ContentReaders.java
Patch:
@@ -120,7 +120,9 @@ public static Reader<byte[]> byteArrayReader() {
      * {@link InputStream#read()}) block.
      *
      * @return a input stream content reader
+     * @deprecated use {@link DefaultMediaSupport#inputStreamReader()}
      */
+    @Deprecated(since = "2.0.0")
     public static Reader<InputStream> inputStreamReader() {
         return (publisher, clazz) -> CompletableFuture.completedFuture(new DataChunkInputStream(publisher));
     }

File: media/jackson/src/main/java/io/helidon/media/jackson/JacksonBodyReader.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * Message body reader supporting object binding with Jackson.
  */
-public final class JacksonBodyReader implements MessageBodyReader<Object> {
+final class JacksonBodyReader implements MessageBodyReader<Object> {
 
     private final ObjectMapper objectMapper;
 

File: media/jackson/src/main/java/io/helidon/media/jackson/JacksonBodyWriter.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Message body writer supporting object binding with Jackson.
  */
-public final class JacksonBodyWriter implements MessageBodyWriter<Object> {
+final class JacksonBodyWriter implements MessageBodyWriter<Object> {
 
     private final ObjectMapper objectMapper;
 

File: media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbBodyReader.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Message body writer supporting object binding with JSON-B.
  */
-public class JsonbBodyReader implements MessageBodyReader<Object> {
+class JsonbBodyReader implements MessageBodyReader<Object> {
 
     private final Jsonb jsonb;
 

File: media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbBodyWriter.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Message body writer supporting object binding with JSON-B.
  */
-public class JsonbBodyWriter implements MessageBodyWriter<Object> {
+class JsonbBodyWriter implements MessageBodyWriter<Object> {
 
     private final Jsonb jsonb;
 

File: media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpBodyReader.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Message body reader for {@link JsonStructure} sub-classes (JSON-P).
  */
-public final class JsonpBodyReader implements MessageBodyReader<JsonStructure> {
+final class JsonpBodyReader implements MessageBodyReader<JsonStructure> {
 
     private final JsonReaderFactory jsonFactory;
 

File: media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpBodyStreamWriter.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Message body writer for {@link javax.json.JsonStructure} sub-classes (JSON-P).
  */
-public class JsonpBodyStreamWriter implements MessageBodyStreamWriter<JsonStructure> {
+class JsonpBodyStreamWriter implements MessageBodyStreamWriter<JsonStructure> {
     private static final byte[] ARRAY_JSON_END_BYTES = "]".getBytes(StandardCharsets.UTF_8);
     private static final byte[] ARRAY_JSON_BEGIN_BYTES = "[".getBytes(StandardCharsets.UTF_8);
     private static final byte[] COMMA_BYTES = ",".getBytes(StandardCharsets.UTF_8);

File: media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpBodyWriter.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Message body writer for {@link JsonStructure} sub-classes (JSON-P).
  */
-public class JsonpBodyWriter implements MessageBodyWriter<JsonStructure> {
+class JsonpBodyWriter implements MessageBodyWriter<JsonStructure> {
 
     private final JsonWriterFactory jsonWriterFactory;
 

File: media/jsonp/src/test/java/io/helidon/media/jsonp/JsonpReaderTest.java
Patch:
@@ -20,10 +20,12 @@
 
 import javax.json.JsonArray;
 import javax.json.JsonObject;
+import javax.json.JsonStructure;
 
 import io.helidon.common.GenericType;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.reactive.Single;
+import io.helidon.media.common.MessageBodyReader;
 import io.helidon.media.common.MessageBodyReaderContext;
 
 import org.junit.jupiter.api.Test;
@@ -41,7 +43,7 @@ public class JsonpReaderTest {
 
     private final static MessageBodyReaderContext CONTEXT = MessageBodyReaderContext.create();
 
-    private final static JsonpBodyReader READER = JsonpSupport.create().newReader();
+    private final static MessageBodyReader<JsonStructure> READER = JsonpSupport.reader();
 
     @Test
     public void simpleJsonObject() throws Exception {

File: media/jsonp/src/test/java/io/helidon/media/jsonp/JsonpStreamWriterTest.java
Patch:
@@ -34,6 +34,7 @@
 import io.helidon.common.http.HashParameters;
 import io.helidon.common.reactive.Multi;
 import io.helidon.media.common.MessageBodyOperator;
+import io.helidon.media.common.MessageBodyStreamWriter;
 import io.helidon.media.common.MessageBodyWriterContext;
 
 import org.junit.jupiter.api.Test;
@@ -51,7 +52,7 @@ public class JsonpStreamWriterTest {
     private static final JsonReaderFactory JSON_PARSER = Json.createReaderFactory(Map.of());
 
     private static final MessageBodyWriterContext CONTEXT = MessageBodyWriterContext.create(HashParameters.create());
-    private static final JsonpBodyStreamWriter WRITER = JsonpSupport.create().newStreamWriter();
+    private static final JsonpBodyStreamWriter WRITER = (JsonpBodyStreamWriter) JsonpSupport.streamWriter();
     private static final GenericType<JsonObject> JSON_OBJECT = GenericType.create(JsonObject.class);
     private static final GenericType<JsonArray> JSON_ARRAY = GenericType.create(JsonArray.class);
     private static final GenericType<JsonpStreamWriterTest> MY_TYPE = GenericType.create(JsonpStreamWriterTest.class);

File: metrics/metrics/src/main/java/io/helidon/metrics/MetricsSupport.java
Patch:
@@ -41,6 +41,7 @@
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;
 import javax.json.JsonObjectBuilder;
+import javax.json.JsonStructure;
 import javax.json.JsonValue;
 
 import io.helidon.common.GenericType;
@@ -51,7 +52,7 @@
 import io.helidon.common.reactive.Single;
 import io.helidon.config.Config;
 import io.helidon.config.DeprecatedConfig;
-import io.helidon.media.jsonp.JsonpBodyWriter;
+import io.helidon.media.common.MessageBodyWriter;
 import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webserver.Handler;
 import io.helidon.webserver.RequestHeaders;
@@ -110,7 +111,7 @@ public final class MetricsSupport implements Service {
     private static final String FEATURE_NAME = "Metrics";
 
     private static final GenericType<JsonObject> JSON_TYPE = GenericType.create(JsonObject.class);
-    private static final JsonpBodyWriter JSONP_WRITER = JsonpSupport.writer();
+    private static final MessageBodyWriter<JsonStructure> JSONP_WRITER = JsonpSupport.writer();
 
     static {
         HelidonFeatures.register(HelidonFlavor.SE, FEATURE_NAME);

File: tests/integration/native-image/se-1/src/main/java/io/helidon/tests/integration/nativeimage/se1/Se1Main.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.config.FileSystemWatcher;
 import io.helidon.health.HealthSupport;
 import io.helidon.health.checks.HealthChecks;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.security.integration.webserver.WebSecurity;
 import io.helidon.tracing.TracerBuilder;

File: examples/security/attribute-based-access-control/src/main/java/module-info.java
Patch:
@@ -31,9 +31,6 @@
     requires io.helidon.security.abac.policy;
     requires io.helidon.security.abac.scope;
 
-    // needed for jersey to start without a lot of errors (hk2 actually)
-    requires java.xml.bind;
-
     // java util logging
     requires java.logging;
 

File: jersey/client/src/main/java/module-info.java
Patch:
@@ -21,6 +21,4 @@
     requires transitive java.ws.rs;
     requires transitive jersey.common;
     requires transitive jersey.client;
-
-    requires java.xml.bind;
 }

File: jersey/server/src/main/java/module-info.java
Patch:
@@ -25,6 +25,4 @@
     requires transitive jakarta.inject.api;
     requires transitive jakarta.activation;
     requires transitive java.annotation;
-
-    requires transitive java.xml.bind;
 }
\ No newline at end of file

File: bundles/webserver/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,5 +19,5 @@
  */
 module io.helidon.bundles.webserver {
     requires transitive io.helidon.webserver;
-    requires transitive io.helidon.media.jsonp.server;
+    requires transitive io.helidon.media.jsonp;
 }

File: examples/cors/src/main/java/io/helidon/examples/cors/Main.java
Patch:
@@ -24,7 +24,7 @@
 import io.helidon.config.Config;
 import io.helidon.health.HealthSupport;
 import io.helidon.health.checks.HealthChecks;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.WebServer;

File: examples/cors/src/test/java/io/helidon/examples/cors/MainTest.java
Patch:
@@ -26,7 +26,7 @@
 import io.helidon.common.http.Headers;
 import io.helidon.common.http.MediaType;
 import io.helidon.config.Config;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webclient.WebClientRequestBuilder;
 import io.helidon.webclient.WebClientResponse;

File: examples/dbclient/jdbc/src/main/java/io/helidon/examples/dbclient/jdbc/JdbcExampleMain.java
Patch:
@@ -23,8 +23,8 @@
 import io.helidon.dbclient.DbClient;
 import io.helidon.dbclient.health.DbClientHealthCheck;
 import io.helidon.health.HealthSupport;
-import io.helidon.media.jsonb.common.JsonbSupport;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonb.JsonbSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.tracing.TracerBuilder;
 import io.helidon.webserver.Routing;

File: examples/dbclient/jdbc/src/main/java/module-info.java
Patch:
@@ -23,8 +23,8 @@
     requires io.helidon.config;
     requires io.helidon.dbclient.health;
     requires io.helidon.health;
-    requires io.helidon.media.jsonb.common;
-    requires io.helidon.media.jsonp.common;
+    requires io.helidon.media.jsonb;
+    requires io.helidon.media.jsonp;
     requires io.helidon.metrics;
     requires io.helidon.tracing;
     requires io.helidon.examples.dbclient.common;

File: examples/dbclient/mongodb/src/main/java/io/helidon/examples/dbclient/mongo/MongoDbExampleMain.java
Patch:
@@ -26,8 +26,8 @@
 import io.helidon.dbclient.metrics.DbClientMetrics;
 import io.helidon.dbclient.tracing.DbClientTracing;
 import io.helidon.health.HealthSupport;
-import io.helidon.media.jsonb.common.JsonbSupport;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonb.JsonbSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.tracing.TracerBuilder;
 import io.helidon.webserver.Routing;

File: examples/dbclient/mongodb/src/main/java/module-info.java
Patch:
@@ -23,8 +23,8 @@
     requires io.helidon.config;
     requires io.helidon.dbclient.health;
     requires io.helidon.health;
-    requires io.helidon.media.jsonb.common;
-    requires io.helidon.media.jsonp.common;
+    requires io.helidon.media.jsonb;
+    requires io.helidon.media.jsonp;
     requires io.helidon.metrics;
     requires io.helidon.tracing;
 

File: examples/dbclient/pokemons/src/main/java/io/helidon/examples/dbclient/pokemons/PokemonMain.java
Patch:
@@ -24,8 +24,8 @@
 import io.helidon.dbclient.DbClient;
 import io.helidon.dbclient.health.DbClientHealthCheck;
 import io.helidon.health.HealthSupport;
-import io.helidon.media.jsonb.common.JsonbSupport;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonb.JsonbSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.tracing.TracerBuilder;
 import io.helidon.webserver.Routing;

File: examples/dbclient/pokemons/src/main/java/module-info.java
Patch:
@@ -24,8 +24,8 @@
     requires io.helidon.config;
     requires io.helidon.dbclient.health;
     requires io.helidon.health;
-    requires io.helidon.media.jsonb.common;
-    requires io.helidon.media.jsonp.common;
+    requires io.helidon.media.jsonb;
+    requires io.helidon.media.jsonp;
     requires io.helidon.metrics;
     requires io.helidon.tracing;
     requires io.helidon.dbclient;

File: examples/media/multipart/src/main/java/io/helidon/examples/media/multipart/Main.java
Patch:
@@ -16,7 +16,7 @@
 package io.helidon.examples.media.multipart;
 
 import io.helidon.common.http.Http;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.media.multipart.MultiPartSupport;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.ServerConfiguration;

File: examples/microprofile/cors/src/test/java/io/helidon/microprofile/examples/cors/TestCORS.java
Patch:
@@ -29,7 +29,7 @@
 import io.helidon.common.http.Headers;
 import io.helidon.common.http.MediaType;
 import io.helidon.config.Config;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.microprofile.server.Server;
 import io.helidon.webclient.WebClient;
 import io.helidon.webclient.WebClientRequestBuilder;

File: examples/openapi/src/test/java/io/helidon/examples/openapi/MainTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import io.helidon.common.http.MediaType;
 import io.helidon.examples.openapi.internal.SimpleAPIModelReader;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webserver.WebServer;
 

File: examples/quickstarts/helidon-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/Main.java
Patch:
@@ -23,7 +23,7 @@
 import io.helidon.config.Config;
 import io.helidon.health.HealthSupport;
 import io.helidon.health.checks.HealthChecks;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.WebServer;

File: examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java
Patch:
@@ -23,7 +23,7 @@
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;
 
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webserver.WebServer;
 

File: examples/quickstarts/helidon-standalone-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java
Patch:
@@ -23,7 +23,7 @@
 import javax.json.JsonObject;
 import javax.json.JsonReaderFactory;
 
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webserver.WebServer;
 

File: examples/todo-app/frontend/src/main/java/io/helidon/demo/todos/frontend/Main.java
Patch:
@@ -27,6 +27,7 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.FileSystemWatcher;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.security.Security;
 import io.helidon.security.integration.webserver.WebSecurity;
@@ -93,6 +94,7 @@ public static void main(final String[] args) throws IOException {
                     config,
                     bsc))
                 .config(config.get("webserver"))
+                .addMediaSupport(JsonpSupport.create())
                 .tracer(registerTracer(config))
                 .build();
 

File: examples/webclient/standalone/src/main/java/io/helidon/examples/webclient/standalone/ClientMain.java
Patch:
@@ -31,7 +31,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigValue;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.RegistryFactory;
 import io.helidon.webclient.FileSubscriber;
 import io.helidon.webclient.WebClient;

File: examples/webclient/standalone/src/main/java/io/helidon/examples/webclient/standalone/ServerMain.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.concurrent.CompletionStage;
 
 import io.helidon.config.Config;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.WebServer;

File: examples/webclient/standalone/src/test/java/io/helidon/examples/webclient/standalone/ClientMainTest.java
Patch:
@@ -24,7 +24,7 @@
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Single;
 import io.helidon.config.Config;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.RegistryFactory;
 import io.helidon.webclient.WebClient;
 import io.helidon.webclient.WebClientServiceRequest;

File: examples/webserver/basics/src/main/java/io/helidon/webserver/examples/basics/Main.java
Patch:
@@ -30,7 +30,7 @@
 import io.helidon.common.http.Parameters;
 import io.helidon.common.http.Reader;
 import io.helidon.media.common.MediaContext;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webserver.Handler;
 import io.helidon.webserver.HttpException;
 import io.helidon.webserver.RequestPredicate;

File: examples/webserver/static-content/src/main/java/io/helidon/webserver/examples/staticcontent/CounterService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;
 
-import io.helidon.media.jsonp.server.JsonSupport;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.ServerRequest;
 import io.helidon.webserver.ServerResponse;
@@ -42,7 +41,6 @@ public class CounterService implements Service {
     @Override
     public void update(Routing.Rules routingRules) {
         routingRules.any(this::handleAny)
-                    .register("/api", JsonSupport.create())
                     .get("/api/counter", this::handleGet);
     }
 

File: examples/webserver/static-content/src/main/java/io/helidon/webserver/examples/staticcontent/Main.java
Patch:
@@ -17,6 +17,7 @@
 package io.helidon.webserver.examples.staticcontent;
 
 import io.helidon.common.http.Http;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.StaticContentSupport;
 import io.helidon.webserver.WebServer;
@@ -58,6 +59,7 @@ static Routing createRouting() {
     public static void main(String[] args) {
         WebServer server = WebServer.builder(createRouting())
                 .port(8080)
+                .addMediaSupport(JsonpSupport.create())
                 .build();
 
         // Start the server and print some info.

File: grpc/metrics/src/test/java/io/helidon/grpc/metrics/MetricsIT.java
Patch:
@@ -30,7 +30,7 @@
 import io.helidon.grpc.server.GrpcServerConfiguration;
 import io.helidon.grpc.server.test.Echo;
 import io.helidon.grpc.server.test.EchoServiceGrpc;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webserver.Routing;

File: health/health/src/main/java/io/helidon/health/HealthSupport.java
Patch:
@@ -42,8 +42,8 @@
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Single;
 import io.helidon.config.Config;
-import io.helidon.media.jsonp.common.JsonpBodyWriter;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpBodyWriter;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.ServerRequest;
 import io.helidon.webserver.ServerResponse;

File: health/health/src/main/java/module-info.java
Patch:
@@ -24,7 +24,7 @@
     requires transitive microprofile.health.api;
     requires io.helidon.webserver;
     requires io.helidon.webserver.cors;
-    requires io.helidon.media.jsonp.common;
+    requires io.helidon.media.jsonp;
     requires java.json;
 
     exports io.helidon.health;

File: media/jackson/src/main/java/io/helidon/media/jackson/JacksonBodyReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jackson.common;
+package io.helidon.media.jackson;
 
 import java.io.IOException;
 import java.lang.reflect.ParameterizedType;

File: media/jackson/src/main/java/io/helidon/media/jackson/JacksonBodyWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jackson.common;
+package io.helidon.media.jackson;
 
 import java.io.IOException;
 import java.nio.charset.Charset;

File: media/jackson/src/main/java/io/helidon/media/jackson/JacksonProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.media.jackson.common;
+package io.helidon.media.jackson;
 
 import java.util.stream.Stream;
 

File: media/jackson/src/main/java/io/helidon/media/jackson/JacksonRuntimeException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jackson.common;
+package io.helidon.media.jackson;
 
 /**
  * A {@link RuntimeException} that indicates a problem was encountered

File: media/jackson/src/main/java/io/helidon/media/jackson/JacksonSupport.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jackson.common;
+package io.helidon.media.jackson;
 
 import java.util.Collection;
 import java.util.List;

File: media/jackson/src/main/java/io/helidon/media/jackson/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,4 +16,4 @@
 /**
  * Jackson media type support.
  */
-package io.helidon.media.jackson.common;
+package io.helidon.media.jackson;

File: media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbBodyReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jsonb.common;
+package io.helidon.media.jsonb;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbBodyWriter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jsonb.common;
+package io.helidon.media.jsonb;
 
 import java.nio.charset.Charset;
 import java.util.Objects;

File: media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.media.jsonb.common;
+package io.helidon.media.jsonb;
 
 import javax.json.bind.Jsonb;
 import javax.json.bind.JsonbBuilder;

File: media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbSupport.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jsonb.common;
+package io.helidon.media.jsonb;
 
 import java.util.Collection;
 import java.util.List;

File: media/jsonb/src/main/java/io/helidon/media/jsonb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,4 +16,4 @@
 /**
  * JSON-B media type support.
  */
-package io.helidon.media.jsonb.common;
+package io.helidon.media.jsonb;

File: media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpBodyReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jsonp.common;
+package io.helidon.media.jsonp;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;

File: media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpBodyStreamWriter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jsonp.common;
+package io.helidon.media.jsonp;
 
 import java.nio.charset.StandardCharsets;
 import java.util.concurrent.Flow.Publisher;
@@ -29,7 +29,7 @@
 import io.helidon.common.reactive.Single;
 import io.helidon.media.common.MessageBodyStreamWriter;
 import io.helidon.media.common.MessageBodyWriterContext;
-import io.helidon.media.jsonp.common.JsonpBodyWriter.JsonStructureToChunks;
+import io.helidon.media.jsonp.JsonpBodyWriter.JsonStructureToChunks;
 
 /**
  * Message body writer for {@link javax.json.JsonStructure} sub-classes (JSON-P).

File: media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpBodyWriter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jsonp.common;
+package io.helidon.media.jsonp;
 
 import java.nio.charset.Charset;
 import java.util.concurrent.Flow.Publisher;

File: media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.media.jsonp.common;
+package io.helidon.media.jsonp;
 
 import io.helidon.config.Config;
 import io.helidon.media.common.MediaSupport;

File: media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpSupport.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.helidon.media.jsonp.common;
+package io.helidon.media.jsonp;
 
 import java.util.Collection;
 import java.util.HashMap;

File: media/jsonp/src/main/java/io/helidon/media/jsonp/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,4 +16,4 @@
 /**
  * JSON-P media type support.
  */
-package io.helidon.media.jsonp.common;
+package io.helidon.media.jsonp;

File: media/jsonp/src/test/java/io/helidon/media/jsonp/JsonpStreamWriterTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.media.jsonp.common;
+package io.helidon.media.jsonp;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;

File: metrics/metrics/src/main/java/module-info.java
Patch:
@@ -26,7 +26,7 @@
     requires transitive microprofile.metrics.api;
     requires java.management;
     requires io.helidon.webserver;
-    requires io.helidon.media.jsonp.server;
+    requires io.helidon.media.jsonp;
     requires java.json;
     requires io.helidon.config.mp;
     requires microprofile.config.api;

File: openapi/src/main/java/module-info.java
Patch:
@@ -21,7 +21,7 @@
     requires io.helidon.common;
     requires io.helidon.config;
     requires io.helidon.media.common;
-    requires io.helidon.media.jsonp.server;
+    requires io.helidon.media.jsonp;
     requires io.helidon.webserver;
     requires io.helidon.webserver.cors;
 

File: tests/apps/bookstore/bookstore-se/src/main/java/module-info.java
Patch:
@@ -27,9 +27,9 @@
     requires io.helidon.health;
     requires io.helidon.health.checks;
     requires io.helidon.metrics;
-    requires io.helidon.media.jsonp.common;
-    requires io.helidon.media.jsonb.common;
-    requires io.helidon.media.jackson.common;
+    requires io.helidon.media.jsonp;
+    requires io.helidon.media.jsonb;
+    requires io.helidon.media.jackson;
     requires io.helidon.tests.apps.bookstore.common;
 
     exports io.helidon.tests.apps.bookstore.se;

File: tests/functional/bookstore/src/test/java/io/helidon/tests/bookstore/MainTest.java
Patch:
@@ -34,7 +34,7 @@
 
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webclient.WebClientResponse;
 

File: tests/integration/webclient/src/main/java/io/helidon/tests/integration/webclient/Main.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.CompletionStage;
 
 import io.helidon.config.Config;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.security.integration.webserver.WebSecurity;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.WebServer;

File: tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/MediaContextTest.java
Patch:
@@ -26,7 +26,7 @@
 import javax.json.JsonObject;
 
 import io.helidon.media.common.MediaContext;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webclient.WebClientRequestBuilder;
 

File: tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/TestParent.java
Patch:
@@ -21,7 +21,7 @@
 
 import io.helidon.common.context.Context;
 import io.helidon.config.Config;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.security.Security;
 import io.helidon.security.SecurityContext;
 import io.helidon.security.providers.httpauth.HttpBasicAuthProvider;

File: tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/TracingTest.java
Patch:
@@ -23,7 +23,7 @@
 import javax.json.JsonObject;
 
 import io.helidon.common.context.Context;
-import io.helidon.media.jsonp.common.JsonpSupport;
+import io.helidon.media.jsonp.JsonpSupport;
 import io.helidon.webclient.WebClient;
 import io.helidon.webclient.WebClientResponse;
 

File: examples/grpc/microprofile/basic-client/src/main/java/io/helidon/microprofile/grpc/example/client/AsyncClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/grpc/microprofile/basic-client/src/main/java/io/helidon/microprofile/grpc/example/client/AsyncStringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/grpc/microprofile/basic-client/src/main/java/io/helidon/microprofile/grpc/example/client/Client.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/grpc/microprofile/basic-client/src/main/java/io/helidon/microprofile/grpc/example/client/StringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/grpc/microprofile/basic-server-implicit/src/main/java/io/helidon/microprofile/grpc/example/basic/implicit/AsyncStringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/grpc/microprofile/basic-server-implicit/src/main/java/io/helidon/microprofile/grpc/example/basic/implicit/StringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/grpc/microprofile/metrics/src/main/java/io/helidon/microprofile/grpc/example/metrics/StringService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/Http.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -360,8 +360,8 @@ public enum Method implements RequestMethod {
 
         /**
          * The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI.
-         * If the Request-URI refers to a data-producing tryProcess, it is the produced data which shall be returned as the entity
-         * in the response and not the source text of the tryProcess, unless that text happens to be the output of the tryProcess.
+         * If the Request-URI refers to a data-producing process, it is the produced data which shall be returned as the entity
+         * in the response and not the source text of the process, unless that text happens to be the output of the tryProcess.
          */
         GET,
 

File: common/reactive/src/main/java/io/helidon/common/reactive/RequestedCounter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 /**
  * Requested event counter.
  *
- * This utility class helps to safely track and tryProcess the back-pressure of
+ * This utility class helps to safely track and process the back-pressure of
  * {@link java.util.concurrent.Flow.Subscriber}s.
  */
 public class RequestedCounter {

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleSubscriberHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -78,7 +78,7 @@ public boolean register(Flow.Subscriber<? super T> subscriber) {
      * {@code completionHandler} is invoked using the value of the registered subscriber as an input parameter.
      * This means that the supplied completion handler is guaranteed to be invoked at most once.
      *
-     * @param completionHandler completion handler to be invoked to tryProcess any completion logic on a registered subscriber,
+     * @param completionHandler completion handler to be invoked to process any completion logic on a registered subscriber,
      *                          provided there is a registered subscriber and it has not been previously passed to a completion
      *                          handler (e.g. in a previous invocation of this method).
      */

File: grpc/server/src/main/java/io/helidon/grpc/server/GrpcServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -58,7 +58,7 @@ public interface GrpcServer {
     /**
      * Starts the server. Has no effect if server is running.
      *
-     * @return a completion stage of starting tryProcess
+     * @return a completion stage of starting process
      */
     CompletionStage<GrpcServer> start();
 
@@ -75,7 +75,7 @@ public interface GrpcServer {
      * <p>
      * RequestMethod can be called periodically.
      *
-     * @return to react on finished shutdown tryProcess
+     * @return to react on finished shutdown process
      * @see #start()
      */
     CompletionStage<GrpcServer> shutdown();

File: grpc/server/src/main/java/io/helidon/grpc/server/GrpcServerConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -90,7 +90,7 @@ public interface GrpcServerConfiguration {
     GrpcTracingConfig tracingConfig();
 
     /**
-     * Returns a count of threads in s pool used to tryProcess gRPC requests.
+     * Returns a count of threads in s pool used to process gRPC requests.
      * <p>
      * Default value is {@code CPU_COUNT * 2}.
      *
@@ -253,7 +253,7 @@ public Builder tracingConfig(GrpcTracingConfig tracingConfig) {
         }
 
         /**
-         * Sets a count of threads in pool used to tryProcess HTTP requests.
+         * Sets a count of threads in pool used to process HTTP requests.
          * Default value is {@code CPU_COUNT * 2}.
          * <p>
          * Configuration key: {@code workers}

File: webserver/webserver/src/main/java/io/helidon/webserver/ResponseHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -225,7 +225,7 @@ public interface ResponseHeaders extends Headers {
      * <p>
      * It is non-blocking method returning a {@link CompletionStage}.
      *
-     * @return a completion stage of sending tryProcess.
+     * @return a completion stage of sending process.
      */
     CompletionStage<ResponseHeaders> send();
 

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerConfiguration.java
Patch:
@@ -421,7 +421,7 @@ public Builder addSocket(String name, Supplier<SocketConfiguration> socketConfig
         }
 
         /**
-         * Sets a count of threads in pool used to tryProcess HTTP requests.
+         * Sets a count of threads in pool used to process HTTP requests.
          * Default value is {@code CPU_COUNT * 2}.
          * <p>
          * Configuration key: {@code workers}

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -129,7 +129,7 @@ default ServerResponse status(int statusCode) throws AlreadyCompletedException {
      * <h3>Blocking</h3>
      * The method blocks only during marshalling. It means until {@code registered writer} produce a {@code Publisher} and
      * subscribe HTTP IO implementation on it. If the thread is used for publishing is up to HTTP IO and generated Publisher
-     * implementations. Use returned {@link CompletionStage} to monitor and react on finished sending tryProcess.
+     * implementations. Use returned {@link CompletionStage} to monitor and react on finished sending process.
      *
      * @param content a response content to send
      * @param <T>     a type of the content
@@ -158,7 +158,7 @@ default ServerResponse status(int statusCode) throws AlreadyCompletedException {
      * <h3>Blocking</h3>
      * The method blocks only during marshalling. It means until {@code registered writer} produce a {@code Publisher} and
      * subscribe HTTP IO implementation on it. If the thread is used for publishing is up to HTTP IO and generated Publisher
-     * implementations. Use returned {@link CompletionStage} to monitor and react on finished sending tryProcess.
+     * implementations. Use returned {@link CompletionStage} to monitor and react on finished sending process.
      *
      * @param content a response content publisher
      * @return a completion stage of the response - completed when response is transferred

File: webserver/webserver/src/main/java/io/helidon/webserver/WebServer.java
Patch:
@@ -733,7 +733,7 @@ public Builder context(Context context) {
         }
 
         /**
-         * Sets a count of threads in pool used to tryProcess HTTP requests.
+         * Sets a count of threads in pool used to process HTTP requests.
          * Default value is {@code CPU_COUNT * 2}.
          * <p>
          * Configuration key: {@code workers}

File: common/reactive/src/main/java/io/helidon/common/reactive/CompletionSingle.java
Patch:
@@ -48,7 +48,7 @@ private CompletableFuture<T> toNullableStage() {
     @Override
     public Single<T> onCancel(final Runnable onCancel) {
         cancelFuture.thenRun(onCancel);
-        return this;
+        return Single.super.onCancel(onCancel);
     }
 
     @Override

File: common/reactive/src/main/java/io/helidon/common/reactive/Multi.java
Patch:
@@ -904,8 +904,8 @@ default Single<Void> forEach(Consumer<? super T> consumer) {
                 future::completeExceptionally,
                 () -> future.complete(null),
                 subscription -> {
-                    subscription.request(Long.MAX_VALUE);
                     single.onCancel(subscription::cancel);
+                    subscription.request(Long.MAX_VALUE);
                 }
         );
 

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleToFuture.java
Patch:
@@ -62,7 +62,6 @@ public void onNext(T item) {
         Subscription s = ref.getAndSet(null);
         if (s != null) {
             super.complete(item);
-            s.cancel();
         }
     }
 

File: dbclient/dbclient/src/main/java/io/helidon/dbclient/DbInterceptorContextImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
  */
 class DbInterceptorContextImpl implements DbInterceptorContext {
     private final String dbType;
-    private DbStatementType dbStatementType = DbStatementType.UNKNOWN;
+    private DbStatementType dbStatementType;
     private Context context;
     private String statementName;
     private String statement;

File: common/reactive/src/main/java/io/helidon/common/reactive/OriginThreadPublisher.java
Patch:
@@ -43,9 +43,12 @@
  * <strong>This publisher allows only a single subscriber</strong>.
  * </p>
  *
+ * @deprecated Use {@link BufferedEmittingPublisher} or {@link EmittingPublisher} instead.
+ *
  * @param <T> type of published items
  * @param <U> type of submitted items
  */
+@Deprecated
 public abstract class OriginThreadPublisher<T, U> implements Publisher<T> {
 
     private static final Logger LOGGER = Logger.getLogger(OriginThreadPublisher.class.getName());

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleTappedPublisher.java
Patch:
@@ -22,9 +22,7 @@
 import java.util.function.Consumer;
 import java.util.function.LongConsumer;
 
-import io.helidon.common.reactive.MultiTappedPublisher.ConsumerChain;
 import io.helidon.common.reactive.MultiTappedPublisher.MultiTappedSubscriber;
-import io.helidon.common.reactive.MultiTappedPublisher.RunnableChain;
 
 /**
  * Intercept the calls to the various Flow interface methods and calls the appropriate

File: tests/integration/kafka/src/test/java/io/helidon/messaging/connectors/kafka/AbstractSampleBean.java
Patch:
@@ -180,6 +180,7 @@ public SubscriberBuilder<Message<ConsumerRecord<Long, String>>, Void> channel5()
                     .to(new Subscriber<Message<ConsumerRecord<Long, String>>>() {
                         @Override
                         public void onSubscribe(Subscription subscription) {
+                            LOGGER.fine(() -> "onSubscribe()");
                             subscription.request(3);
                         }
                         @Override

File: webserver/webserver/src/main/java/io/helidon/webserver/ClassPathContentHandler.java
Patch:
@@ -92,7 +92,9 @@ boolean doHandle(Http.RequestMethod method, String requestedPath, ServerRequest
         LOGGER.finest(() -> "Requested class path resource: " + resource);
 
         // this MUST be done, so we do not escape the bounds of configured directory
-        String requestedResource = URI.create(resource).normalize().toString();
+        // We use multi-arg constructor so it performs url encoding
+        URI myuri = new URI(null, null, resource, null);
+        String requestedResource = myuri.normalize().getPath();
 
         if (!requestedResource.equals(root) && !requestedResource.startsWith(rootWithTrailingSlash)) {
             return false;

File: health/health-checks/src/main/java/io/helidon/health/checks/HealthChecks.java
Patch:
@@ -18,6 +18,7 @@
 import java.lang.management.ManagementFactory;
 
 import io.helidon.common.HelidonFeatures;
+import io.helidon.common.NativeImageHelper;
 
 import org.eclipse.microprofile.health.HealthCheck;
 
@@ -27,8 +28,6 @@
  * @see #healthChecks()
  */
 public final class HealthChecks {
-    private static final boolean IS_GRAAL_VM = Boolean.getBoolean("com.oracle.graalvm.isaot");
-
     static {
         HelidonFeatures.register("Health", "Built-ins");
     }
@@ -75,7 +74,7 @@ public static HeapMemoryHealthCheck heapMemoryCheck() {
      * @see io.helidon.health.HealthSupport.Builder#addLiveness(org.eclipse.microprofile.health.HealthCheck...)
      */
     public static HealthCheck[] healthChecks() {
-        if (IS_GRAAL_VM) {
+        if (NativeImageHelper.isNativeImage()) {
             return new HealthCheck[] {
                     //diskSpaceCheck(), // - bug
                     heapMemoryCheck()

File: microprofile/health/src/main/java/module-info.java
Patch:
@@ -33,6 +33,7 @@
     requires java.json;
     requires microprofile.config.api;
     requires microprofile.health.api;
+    requires io.helidon.config.mp;
 
     exports io.helidon.microprofile.health;
 

File: tests/integration/native-image/mp-1/src/main/java/io/helidon/tests/integration/nativeimage/mp1/BeanClass.java
Patch:
@@ -27,7 +27,6 @@ public class BeanClass {
     @Produces
     @RequestScoped
     public BeanType produceBeanType(@ConfigProperty(name = "app.message") String message) {
-        System.out.println("Producing in request scoped.");
         return new BeanType(message);
     }
 

File: tests/integration/native-image/mp-1/src/main/java/io/helidon/tests/integration/nativeimage/mp1/ReadinessHealthcheck.java
Patch:
@@ -35,7 +35,7 @@ public class ReadinessHealthcheck implements HealthCheck {
 
     @Override
     public HealthCheckResponse call() {
-        return HealthCheckResponse.named("message")
+        return HealthCheckResponse.named("mp1-ready")
                 .state(true)
                 .withData("app.message", message)
                 .build();

File: tests/integration/native-image/mp-1/src/main/java/module-info.java
Patch:
@@ -32,6 +32,9 @@
     requires microprofile.metrics.api;
     requires java.json.bind;
     requires microprofile.config.api;
+    // this is required, as otherwise the beans from this module
+    // never reach health check CDI extension
+    requires io.helidon.health.checks;
 
     exports io.helidon.tests.integration.nativeimage.mp1;
 

File: microprofile/cors/src/main/java/io/helidon/microprofile/cors/package-info.java
Patch:
@@ -30,10 +30,10 @@
  *   cors:
  *     enabled: true # this is the default
  *     paths:
- *       - path-prefix: /cors1
+ *       - path-pattern: /cors1
  *         allow-origins: ["*"]
  *         allow-methods: ["*"]
- *       - path-prefix: /cors2
+ *       - path-pattern: /cors2
  *         allow-origins: ["http://foo.bar", "http://bar.foo"]
  *         allow-methods: ["DELETE", "PUT"]
  *         allow-headers: ["X-bar", "X-foo"]

File: webserver/cors/src/main/java/io/helidon/webserver/cors/MappedCrossOriginConfig.java
Patch:
@@ -138,11 +138,11 @@ public void forEach(BiConsumer<String, CrossOriginConfig> consumer) {
     /**
      * Finds the {@code CrossOriginConfig} associated with the given path expression, if any.
      *
-     * @param pathExpr path expression to match on
+     * @param pathPattern path expression to match on
      * @return {@code Optional} of the corresponding basic cross-origin information
      */
-    public CrossOriginConfig get(String pathExpr) {
-        Buildable b = buildables.get(pathExpr);
+    public CrossOriginConfig get(String pathPattern) {
+        Buildable b = buildables.get(pathPattern);
         return b == null ? null : b.get();
     }
 

File: microprofile/tests/tck/tck-rest-client/src/test/java/io/helidon/microprofile/restclient/tck/UrlResourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java
Patch:
@@ -52,10 +52,8 @@ public static io.helidon.config.Config toHelidonConfig(Config mpConfig) {
         io.helidon.config.Config.Builder builder = io.helidon.config.Config.builder()
                 .disableEnvironmentVariablesSource()
                 .disableSystemPropertiesSource()
-                .disableMapperServices()
                 .disableCaching()
-                .disableParserServices()
-                .disableFilterServices();
+                .disableParserServices();
 
         if (mpConfig instanceof MpConfigImpl) {
             ((MpConfigImpl) mpConfig).converters()

File: webclient/webclient/src/main/java/io/helidon/webclient/WebClientRequestBuilderImpl.java
Patch:
@@ -138,6 +138,7 @@ private WebClientRequestBuilderImpl(LazyValue<NioEventLoopGroup> eventGroup,
         this.followRedirects = configuration.followRedirects();
         this.readTimeout = configuration.readTimout();
         this.connectTimeout = configuration.connectTimeout();
+        this.proxy = configuration.proxy().orElse(Proxy.noProxy());
     }
 
     public static WebClientRequestBuilder create(LazyValue<NioEventLoopGroup> eventGroup,
@@ -445,6 +446,7 @@ private CompletionStage<WebClientResponse> invoke(Flow.Publisher<DataChunk> requ
                     .readTimeout(readTimeout)
                     .services(services)
                     .context(context)
+                    .proxy(proxy)
                     .build();
             WebClientRequestImpl clientRequest = new WebClientRequestImpl(this);
 

File: examples/dbclient/jdbc/src/main/java/module-info.java
Patch:
@@ -24,8 +24,8 @@
     requires io.helidon.dbclient.health;
     requires io.helidon.health;
     requires io.helidon.dbclient.webserver.jsonp;
-    requires io.helidon.media.jsonb.server;
-    requires io.helidon.media.jsonp.server;
+    requires io.helidon.media.jsonb.common;
+    requires io.helidon.media.jsonp.common;
     requires io.helidon.metrics;
     requires io.helidon.tracing;
     requires io.helidon.examples.dbclient.common;

File: examples/dbclient/mongodb/src/main/java/module-info.java
Patch:
@@ -24,8 +24,8 @@
     requires io.helidon.dbclient.health;
     requires io.helidon.dbclient.webserver.jsonp;
     requires io.helidon.health;
-    requires io.helidon.media.jsonb.server;
-    requires io.helidon.media.jsonp.server;
+    requires io.helidon.media.jsonb.common;
+    requires io.helidon.media.jsonp.common;
     requires io.helidon.metrics;
     requires io.helidon.tracing;
 

File: examples/dbclient/pokemons/src/main/java/module-info.java
Patch:
@@ -25,8 +25,8 @@
     requires io.helidon.dbclient.health;
     requires io.helidon.health;
     requires io.helidon.dbclient.webserver.jsonp;
-    requires io.helidon.media.jsonb.server;
-    requires io.helidon.media.jsonp.server;
+    requires io.helidon.media.jsonb.common;
+    requires io.helidon.media.jsonp.common;
     requires io.helidon.metrics;
     requires io.helidon.tracing;
     requires io.helidon.dbclient;

File: examples/grpc/security-outbound/src/main/java/io/helidon/grpc/examples/security/outbound/SecureServer.java
Patch:
@@ -41,7 +41,6 @@
 import io.helidon.webclient.WebClient;
 import io.helidon.webclient.WebClientResponse;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.ServerConfiguration;
 import io.helidon.webserver.ServerRequest;
 import io.helidon.webserver.ServerResponse;
 import io.helidon.webserver.Service;
@@ -127,7 +126,7 @@ private static WebServer createWebServer(Config config, Security security) {
                                  .register(new RestService())
                                  .build();
 
-        WebServer webServer = WebServer.create(ServerConfiguration.create(config), routing);
+        WebServer webServer = WebServer.create(routing, config);
 
         webServer.start()
                 .thenAccept(s -> {

File: examples/security/idcs-login/src/main/java/io/helidon/security/examples/idcs/IdcsMain.java
Patch:
@@ -28,7 +28,6 @@
 import io.helidon.security.integration.webserver.WebSecurity;
 import io.helidon.security.providers.oidc.OidcSupport;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.ServerConfiguration;
 import io.helidon.webserver.WebServer;
 
 import static io.helidon.config.ConfigSources.classpath;
@@ -75,8 +74,7 @@ public static void main(String[] args) throws IOException {
                             .orElse("Security context is null"));
                 });
 
-        theServer = WebServer.create(ServerConfiguration.create(config.get("server")),
-                                     routing);
+        theServer = WebServer.create(routing, config.get("server"));
 
         IdcsUtil.start(theServer);
     }

File: examples/security/outbound-override/src/main/java/io/helidon/security/examples/outbound/OutboundOverrideUtil.java
Patch:
@@ -25,7 +25,6 @@
 import io.helidon.webclient.WebClient;
 import io.helidon.webclient.WebClientRequestBuilder;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.ServerConfiguration;
 import io.helidon.webserver.ServerRequest;
 import io.helidon.webserver.ServerResponse;
 import io.helidon.webserver.WebServer;
@@ -63,7 +62,7 @@ static SecurityContext getSecurityContext(ServerRequest req) {
 
     static CompletionStage<Void> startServer(Routing routing, int port, Consumer<WebServer> callback) {
         return WebServer.builder(routing)
-                .config(ServerConfiguration.builder().port(port))
+                .port(port)
                 .build()
                 .start()
                 .thenAccept(callback);

File: examples/security/webserver-signatures/src/main/java/io/helidon/security/examples/signatures/SignatureExampleUtil.java
Patch:
@@ -25,7 +25,6 @@
 import io.helidon.security.SecurityContext;
 import io.helidon.webclient.WebClient;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.ServerConfiguration;
 import io.helidon.webserver.ServerRequest;
 import io.helidon.webserver.ServerResponse;
 import io.helidon.webserver.WebServer;
@@ -49,8 +48,7 @@ private SignatureExampleUtil() {
      */
     public static WebServer startServer(Routing routing, int port) {
         WebServer server = WebServer.builder(routing)
-                .config(ServerConfiguration.builder()
-                        .port(port))
+                .port(port)
                 .build();
         long t = System.nanoTime();
 

File: examples/webserver/basics/src/main/java/io/helidon/webserver/examples/basics/Main.java
Patch:
@@ -76,8 +76,8 @@ public void firstRouting() {
     }
 
     /**
-     * {@link Routing} instance together with optional {@link io.helidon.webserver.ServerConfiguration configuration} parameter
-     * can be used to create {@link WebServer} instance.It provides a simple, non-blocking life-cycle API returning
+     * {@link Routing} instance can be used to create {@link WebServer} instance.
+     * It provides a simple, non-blocking life-cycle API returning
      * {@link java.util.concurrent.CompletionStage CompletionStages} to provide reactive access.
      *
      * @param routing the routing to drive by WebServer instance
@@ -100,7 +100,7 @@ protected void startServer(Routing routing, MediaContext mediaContext) {
     }
 
     /**
-     * {@link Routing} instance together with optional {@link io.helidon.webserver.ServerConfiguration configuration} parameter
+     * {@link Routing}
      * can be used to create {@link WebServer} instance.It provides a simple, non-blocking life-cycle API returning
      * {@link java.util.concurrent.CompletionStage CompletionStages} to provide reactive access.
      *

File: examples/webserver/tutorial/src/main/java/io/helidon/webserver/examples/tutorial/Main.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.helidon.common.http.MediaType;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.ServerConfiguration;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.examples.tutorial.user.UserFilter;
 
@@ -66,10 +65,10 @@ public static void main(String[] args) {
                 port = 0;
             }
         }
-        ServerConfiguration config = ServerConfiguration.builder()
+
+        WebServer server = WebServer.builder(createRouting())
                 .port(port)
                 .build();
-        WebServer server = WebServer.create(config, createRouting());
 
         // Start the server and print some info.
         server.start().thenAccept(ws -> {

File: examples/webserver/websocket/src/main/java/io/helidon/webserver/examples/websocket/Main.java
Patch:
@@ -24,7 +24,6 @@
 import javax.websocket.server.ServerEndpointConfig;
 
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.ServerConfiguration;
 import io.helidon.webserver.WebServer;
 import io.helidon.webserver.tyrus.TyrusSupport;
 
@@ -57,10 +56,9 @@ static Routing createRouting() {
     }
 
     static WebServer startWebServer() {
-        ServerConfiguration config = ServerConfiguration.builder()
+        WebServer server = WebServer.builder(createRouting())
                 .port(8080)
                 .build();
-        WebServer server = WebServer.create(config, createRouting());
 
         // Start webserver
         CompletableFuture<Void> started = new CompletableFuture<>();

File: microprofile/server/src/main/java/io/helidon/microprofile/server/ServerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -61,7 +61,7 @@ public class ServerImpl implements Server {
 
         this.serverExtension = beanManager.getExtension(ServerCdiExtension.class);
 
-        serverExtension.serverConfigBuilder()
+        serverExtension.serverBuilder()
                 .context(helidonContainer.context())
                 .port(builder.port())
                 .bindAddress(listenHost);

File: microprofile/tracing/src/main/java/io/helidon/microprofile/tracing/TracingCdiExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ private void prepareTracer(@Observes @Priority(PLATFORM_BEFORE + 11) @Initialize
                 .config(config)
                 .build();
 
-        server.serverConfigBuilder()
+        server.serverBuilder()
                 .tracer(tracer);
 
         Contexts.context()

File: tests/apps/bookstore/bookstore-se/src/main/java/io/helidon/tests/apps/bookstore/se/BookService.java
Patch:
@@ -37,7 +37,7 @@ public class BookService implements Service {
     private static final BookStore BOOK_STORE = new BookStore();
     private static final String ISBN_PARAM = "isbn";
 
-    private Main.JsonLibrary jsonLibrary;
+    private final Main.JsonLibrary jsonLibrary;
 
     BookService(Config config) {
         jsonLibrary = Main.getJsonLibrary(config);

File: webserver/test-support/src/main/java/io/helidon/webserver/testsupport/TestWebServer.java
Patch:
@@ -35,8 +35,8 @@ class TestWebServer implements WebServer {
 
     private final CompletableFuture<WebServer> startFuture = new CompletableFuture<>();
     private final CompletableFuture<WebServer> shutdownFuture = new CompletableFuture<>();
-    private final ServerConfiguration configuration = ServerConfiguration.builder().build();
     private final ContextualRegistry context = ContextualRegistry.create();
+    private final ServerConfiguration configuration = ServerConfiguration.builder().build();
     private final MediaContext mediaContext;
 
     TestWebServer() {

File: media/jackson/common/src/main/java/io/helidon/media/jackson/common/JacksonBodyReader.java
Patch:
@@ -29,8 +29,8 @@
 import io.helidon.media.common.MessageBodyReader;
 import io.helidon.media.common.MessageBodyReaderContext;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 /**

File: examples/microprofile/cors/src/main/java/io/helidon/microprofile/examples/cors/GreetingProvider.java
Patch:
@@ -15,11 +15,12 @@
  */
 package io.helidon.microprofile.examples.cors;
 
-import org.eclipse.microprofile.config.inject.ConfigProperty;
+import java.util.concurrent.atomic.AtomicReference;
 
 import javax.enterprise.context.ApplicationScoped;
 import javax.inject.Inject;
-import java.util.concurrent.atomic.AtomicReference;
+
+import org.eclipse.microprofile.config.inject.ConfigProperty;
 
 /**
  * Provider for greeting message.

File: examples/cors/src/test/java/io/helidon/examples/cors/MainTest.java
Patch:
@@ -138,7 +138,7 @@ void testGreetingChangeWithCors() throws Exception {
 
         // Send the pre-flight request and check the response.
 
-        WebClientRequestBuilder builder = webClient.method(Http.Method.OPTIONS);
+        WebClientRequestBuilder builder = webClient.options();
         Headers headers = builder.headers();
         headers.add("Origin", "http://foo.com");
         headers.add("Host", "here.com");

File: tests/functional/bookstore/src/test/java/io/helidon/tests/bookstore/MainTest.java
Patch:
@@ -432,7 +432,7 @@ private static Arguments toArguments(String appJarPath, List<String> javaArgs, S
             File jarFile = new File(appJarPath);
             // --module-path target/bookstore-se.jar:target/libs -m io.helidon.tests.apps.bookstore.se/io.helidon.tests.apps.bookstore.se.Main
             startArgs.add("--module-path");
-            startArgs.add(appJarPath + ":" + jarFile.getParent() + "/libs");
+            startArgs.add(appJarPath + File.pathSeparatorChar + jarFile.getParent() + "/libs");
             startArgs.add("-m");
             startArgs.add(moduleName + "/" + moduleName + ".Main");
         } else {

File: tests/integration/webclient/src/main/java/io/helidon/tests/integration/webclient/GreetService.java
Patch:
@@ -129,7 +129,7 @@ private void getDefaultMessageHandler(ServerRequest request,
      */
     private void redirect(ServerRequest request,
                           ServerResponse response) {
-        response.headers().add(Http.Header.LOCATION, "http://localhost:" + Main.serverPort + "/greet/");
+        response.headers().add(Http.Header.LOCATION, "http://localhost:" + Main.serverPort + "/greet");
         response.status(Http.Status.MOVED_PERMANENTLY_301).send();
     }
 

File: tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/MediaContextTest.java
Patch:
@@ -34,7 +34,7 @@
 import static org.junit.jupiter.api.Assertions.fail;
 
 /**
- * Tests for MediaSupport functionality in WebClient.
+ * Tests for MediaContext functionality in WebClient.
  */
 public class MediaContextTest extends TestParent {
 

File: webserver/jersey/src/main/java/io/helidon/webserver/jersey/ResponseWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -77,7 +77,6 @@ public void write(int b) throws IOException {
         @Override
         public void close() throws IOException {
             try {
-                super.signalCloseComplete(null);
                 super.close();
             } catch (ConnectionClosedException e) {
                 throw new IOException("Cannot close the connection because it's already closed.", e);

File: microprofile/cors/src/main/java/io/helidon/microprofile/cors/CrossOriginFilter.java
Patch:
@@ -102,13 +102,13 @@ Optional<CrossOriginConfig> crossOriginFromAnnotationSupplier() {
             Optional<Method> optionsMethod = Arrays.stream(resourceClass.getDeclaredMethods())
                     .filter(m -> {
                         OPTIONS optsAnnot2 = m.getAnnotation(OPTIONS.class);
+                        Path pathAnnot2 = m.getAnnotation(Path.class);
                         if (optsAnnot2 != null) {
                             if (pathAnnot != null) {
-                                Path pathAnnot2 = m.getAnnotation(Path.class);
                                 return pathAnnot2 != null && pathAnnot.value()
                                         .equals(pathAnnot2.value());
                             }
-                            return true;
+                            return pathAnnot2 == null;
                         }
                         return false;
                     })

File: config/config/src/main/java/io/helidon/config/AbstractConfigSourceBuilder.java
Patch:
@@ -41,7 +41,7 @@ public abstract class AbstractConfigSourceBuilder<B extends AbstractConfigSource
     private Function<Config.Key, Optional<ConfigParser>> parserMapping;
 
     @SuppressWarnings("unchecked")
-    private B me = (B) this;
+    private final B me = (B) this;
 
     /**
      * {@inheritDoc}

File: config/config/src/main/java/io/helidon/config/AbstractSourceBuilder.java
Patch:
@@ -41,7 +41,7 @@ public abstract class AbstractSourceBuilder<B extends AbstractSourceBuilder<B, U
     private boolean optional = false;
 
     @SuppressWarnings("unchecked")
-    private B me = (B) this;
+    private final B me = (B) this;
 
     /**
      * Configure builder from meta configuration.

File: config/config/src/main/java/io/helidon/config/ConfigDiff.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,7 +56,6 @@ static ConfigDiff from(Config origConfig, Config newConfig) {
                 .map(Config::key)
                 .distinct()
                 .flatMap(ConfigDiff::expandKey)
-                .distinct()
                 .collect(toSet());
 
         return new ConfigDiff(newConfig, changedKeys);

File: config/config/src/main/java/io/helidon/config/ConfigLeafImpl.java
Patch:
@@ -59,7 +59,7 @@ public <T> ConfigValue<List<T>> asList(Class<T> type) throws ConfigMappingExcept
         }
 
         Optional<String> value = value();
-        if (!value.isPresent()) {
+        if (value.isEmpty()) {
             return ConfigValues.create(this, Optional::empty, aConfig -> aConfig.asList(type));
         }
 
@@ -89,7 +89,7 @@ public <T> ConfigValue<List<T>> asList(Class<T> type) throws ConfigMappingExcept
     @Override
     public <T> ConfigValue<List<T>> asList(Function<Config, T> mapper) throws ConfigMappingException {
         Optional<String> value = value();
-        if (!value.isPresent()) {
+        if (value.isEmpty()) {
             return ConfigValues.create(this, Optional::empty, aConfig -> aConfig.asList(mapper));
         }
 

File: config/config/src/main/java/io/helidon/config/ConfigValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -172,7 +172,7 @@ default Optional<T> or(Supplier<? extends Optional<T>> supplier) {
         Objects.requireNonNull(supplier);
 
         Optional<T> optional = asOptional();
-        if (!optional.isPresent()) {
+        if (optional.isEmpty()) {
             Optional<T> supplied = supplier.get();
             Objects.requireNonNull(supplied);
             optional = supplied;
@@ -348,6 +348,6 @@ default <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSuppl
      * @return the optional value as a {@code Stream}
      */
     default Stream<T> stream() {
-        return asOptional().map(Stream::of).orElseGet(Stream::empty);
+        return asOptional().stream();
     }
 }

File: config/config/src/main/java/io/helidon/config/ConfigValues.java
Patch:
@@ -39,7 +39,7 @@ private ConfigValues() {
      * @return a config value that is empty
      */
     public static <T> ConfigValue<T> empty() {
-        return new ConfigValueBase<T>(Config.Key.create("")) {
+        return new ConfigValueBase<>(Config.Key.create("")) {
             @Override
             public Optional<T> asOptional() {
                 return Optional.empty();
@@ -83,7 +83,7 @@ public String toString() {
      * @return a config value that uses the value provided
      */
     public static <T> ConfigValue<T> simpleValue(T value) {
-        return new ConfigValueBase<T>(Config.Key.create("")) {
+        return new ConfigValueBase<>(Config.Key.create("")) {
             @Override
             public Optional<T> asOptional() {
                 return Optional.ofNullable(value);

File: config/config/src/main/java/io/helidon/config/UrlOverrideSource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: config/config/src/main/java/io/helidon/config/ValueResolvingFilter.java
Patch:
@@ -141,7 +141,7 @@ public void init(Config config) {
          * either case save the result in a simple boolean for efficiency in
          * #apply.
          */
-        if (!failOnMissingReferenceSetting.isPresent()) {
+        if (failOnMissingReferenceSetting.isEmpty()) {
             failOnMissingReferenceSetting = Optional.of(
                     config
                         .get(ConfigFilters.ValueResolvingBuilder.FAIL_ON_MISSING_REFERENCE_KEY_NAME)

File: config/config/src/main/java/io/helidon/config/spi/ChangeWatcherProvider.java
Patch:
@@ -18,5 +18,5 @@
 /**
  * Java service loader service to create a polling strategy factory based on meta configuration.
  */
-public interface ChangeWatcherProvider extends MetaConfigurableProvider<ChangeWatcher> {
+public interface ChangeWatcherProvider extends MetaConfigurableProvider<ChangeWatcher<?>> {
 }

File: config/config/src/main/java/io/helidon/config/spi/OrderedProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,9 +26,9 @@
  */
 final class OrderedProperties {
 
-    private LinkedHashMap<String, String> map = new LinkedHashMap<>();
+    private final LinkedHashMap<String, String> map = new LinkedHashMap<>();
 
-    private Properties properties = new Properties() {
+    private final Properties properties = new Properties() {
         @Override
         public synchronized Object put(Object key, Object value) {
             return map.put(key.toString(), value.toString());

File: config/config/src/main/java/io/helidon/config/spi/SpiHelper.java
Patch:
@@ -25,7 +25,7 @@ private SpiHelper() {
      *
      * @see io.helidon.config.spi.ConfigNode.ObjectNode#empty()
      */
-    public static final class EmptyObjectNodeHolder {
+    static final class EmptyObjectNodeHolder {
 
         private EmptyObjectNodeHolder() {
             throw new AssertionError("Instantiation not allowed.");

File: config/config/src/test/java/io/helidon/config/FilterLoadingTest.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class FilterLoadingTest {
 
-    private static final String ORIGINAL_VALUE_SUBJECT_TO_AUTO_FILTERING = "originalValue";
+    static final String ORIGINAL_VALUE_SUBJECT_TO_AUTO_FILTERING = "originalValue";
     private static final String ORIGINAL_VALUE_SUBJECT_TO_AUTO_FILTERING_VIA_PROVIDER = "originalValueForProviderTest";
 
     private static final String UNAFFECTED_KEY = "key1";

File: config/encryption/src/main/java/io/helidon/config/encryption/EncryptionFilter.java
Patch:
@@ -37,7 +37,7 @@
  * <p>
  * Password in properties must be stored as follows:
  * <ul>
- * <li>${AES=base64} - encrypted password using a master password (must be provided to Prime through configuration, system
+ * <li>${AES=base64} - encrypted password using a master password (must be provided to prime through configuration, system
  * property or environment variable)</li>
  * <li>${RSA=base64} - encrypted password using a public key (private key must be available to Prime instance,
  * its location must be provided to prime through configuration, system property or environment variable)</li>

File: config/yaml/src/main/java/module-info.java
Patch:
@@ -15,6 +15,7 @@
  */
 
 import io.helidon.config.yaml.YamlConfigParser;
+import io.helidon.config.yaml.YamlMpConfigSourceProvider;
 
 /**
  * YAML Parser implementation.
@@ -27,9 +28,11 @@
 
     requires transitive io.helidon.config;
     requires io.helidon.common;
+    requires static microprofile.config.api;
 
     exports io.helidon.config.yaml;
 
     provides io.helidon.config.spi.ConfigParser with YamlConfigParser;
+    provides org.eclipse.microprofile.config.spi.ConfigSourceProvider with YamlMpConfigSourceProvider;
 
 }

File: integrations/graal/native-image-extension/src/main/java/io/helidon/integrations/graal/nativeimage/extension/HelidonReflectionFeature.java
Patch:
@@ -39,7 +39,7 @@
 import javax.json.JsonReaderFactory;
 import javax.json.stream.JsonParsingException;
 
-import io.helidon.config.MpConfigProviderResolver;
+import io.helidon.config.mp.MpConfigProviderResolver;
 
 import com.oracle.svm.core.annotate.AutomaticFeature;
 import com.oracle.svm.core.jdk.proxy.DynamicProxyRegistry;

File: messaging/connectors/kafka/src/main/java/module-info.java
Patch:
@@ -22,10 +22,12 @@
     requires static kafka.clients;
     requires org.reactivestreams;
     requires transitive io.helidon.config;
+    requires io.helidon.config.mp;
     requires transitive microprofile.reactive.messaging.api;
     requires transitive microprofile.reactive.streams.operators.api;
     requires io.helidon.common.context;
     requires io.helidon.common.configurable;
+    requires microprofile.config.api;
 
     exports io.helidon.messaging.connectors.kafka;
 }
\ No newline at end of file

File: metrics/metrics/src/main/java/module-info.java
Patch:
@@ -29,6 +29,8 @@
     requires io.helidon.webserver;
     requires io.helidon.media.jsonp.server;
     requires java.json;
+    requires io.helidon.config.mp;
+    requires microprofile.config.api;
 
     provides io.helidon.common.metrics.InternalBridge
             with io.helidon.metrics.InternalBridgeImpl;

File: microprofile/cdi/src/main/java/module-info.java
Patch:
@@ -29,13 +29,15 @@
 
     requires io.helidon.common;
     requires io.helidon.config;
+    requires io.helidon.config.mp;
 
     requires weld.core.impl;
     requires weld.spi;
     requires weld.environment.common;
     requires weld.se.core;
     requires io.helidon.common.context;
     requires jakarta.inject.api;
+    requires microprofile.config.api;
 
     exports io.helidon.microprofile.cdi;
 

File: microprofile/config/src/main/java/io/helidon/microprofile/config/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,6 @@
  */
 
 /**
- * Helidon implementation of microprofile config.
+ * Helidon implementation of microprofile config for CDI.
  */
 package io.helidon.microprofile.config;

File: microprofile/config/src/test/java/io/helidon/microprofile/config/MutableMpTest.java
Patch:
@@ -118,7 +118,9 @@ public String getName() {
 
         public void setValue(String value) {
             this.value.set(value);
-            listener.accept("value", value);
+            if (null != listener) {
+                listener.accept("value", value);
+            }
         }
     }
 }

File: microprofile/messaging/src/main/java/module-info.java
Patch:
@@ -25,6 +25,7 @@
     requires static jakarta.activation;
     requires jakarta.interceptor.api;
     requires io.helidon.config;
+    requires io.helidon.config.mp;
     requires io.helidon.microprofile.config;
     requires io.helidon.microprofile.server;
     requires io.helidon.microprofile.reactive;

File: microprofile/server/src/main/java/io/helidon/microprofile/server/JaxRsCdiExtension.java
Patch:
@@ -104,9 +104,7 @@ public List<JaxRsApplication> applicationsToRun() throws IllegalStateException {
         if (applications.isEmpty() && applicationMetas.isEmpty()) {
             // create a synthetic application from all resource classes
             // the classes set must be created before the lambda, as resources are cleared later on
-            if (resources.isEmpty()) {
-                LOGGER.warning("There are no JAX-RS applications or resources. Maybe you forgot META-INF/beans.xml file?");
-            } else {
+            if (!resources.isEmpty()) {
                 Set<Class<?>> classes = new HashSet<>(resources);
                 applicationMetas.add(JaxRsApplication.builder()
                                              .synthetic(true)

File: microprofile/server/src/main/java/module-info.java
Patch:
@@ -26,6 +26,8 @@
 
     requires transitive io.helidon.microprofile.cdi;
 
+    requires io.helidon.config.mp;
+    requires io.helidon.microprofile.config;
     requires transitive jakarta.enterprise.cdi.api;
     requires transitive java.ws.rs;
     requires jakarta.interceptor.api;
@@ -35,6 +37,7 @@
 
     // there is now a hardcoded dependency on Weld, to configure additional bean defining annotation
     requires java.management;
+    requires microprofile.config.api;
 
     exports io.helidon.microprofile.server;
 

File: tests/integration/native-image/mp-1/src/main/java/module-info.java
Patch:
@@ -31,6 +31,7 @@
     requires microprofile.rest.client.api;
     requires microprofile.metrics.api;
     requires java.json.bind;
+    requires microprofile.config.api;
 
     exports io.helidon.tests.integration.nativeimage.mp1;
 

File: microprofile/cors/src/main/java/io/helidon/microprofile/cors/CorsSupportMp.java
Patch:
@@ -112,7 +112,8 @@ static class RequestAdapterMp implements RequestAdapter<ContainerRequestContext>
 
         @Override
         public String path() {
-            return requestContext.getUriInfo().getPath();
+            String path = requestContext.getUriInfo().getPath();
+            return path.startsWith("/") ? path : '/' + path;
         }
 
         @Override

File: webserver/cors/src/main/java/io/helidon/webserver/cors/CorsSupport.java
Patch:
@@ -112,6 +112,7 @@ public static class Builder extends CorsSupportBase.Builder<ServerRequest, Serve
 
         Builder() {
             name("SE " + builderCount++); // Initial name. The developer can (should) provide a more descriptive one.
+            requestDefaultBehaviorIfNone();
         }
 
         @Override

File: webserver/cors/src/test/java/io/helidon/webserver/cors/MissingConfigTest.java
Patch:
@@ -77,7 +77,7 @@ private static void checkCorsSupport(CorsSupport cs) {
         assertThat(cs.helper().isActive(), is(true));
         Aggregator aggregator = cs.helper().aggregator();
         assertThat(aggregator.isActive(), is(true));
-        Optional<CrossOriginConfig> cocOpt = aggregator.lookupCrossOrigin("/any/path", () -> Optional.empty());
+        Optional<CrossOriginConfig> cocOpt = aggregator.lookupCrossOrigin("/any/path", "GET", () -> Optional.empty());
         assertThat(cocOpt, present());
         checkCrossOriginConfig(cocOpt.get());
     }

File: media/common/src/main/java/io/helidon/media/common/ContentReaders.java
Patch:
@@ -122,7 +122,7 @@ public static Reader<byte[]> byteArrayReader() {
      * @return a input stream content reader
      */
     public static Reader<InputStream> inputStreamReader() {
-        return (publisher, clazz) -> CompletableFuture.completedFuture(new PublisherInputStream(publisher));
+        return (publisher, clazz) -> CompletableFuture.completedFuture(new DataChunkInputStream(publisher));
     }
 
     /**

File: media/common/src/main/java/io/helidon/media/common/InputStreamBodyReader.java
Patch:
@@ -43,7 +43,7 @@ public boolean accept(GenericType<?> type, MessageBodyReaderContext context) {
     public <U extends InputStream> Single<U> read(Publisher<DataChunk> publisher, GenericType<U> type,
             MessageBodyReaderContext context) {
 
-        return (Single<U>) Single.just(new PublisherInputStream(publisher));
+        return (Single<U>) Single.just(new DataChunkInputStream(publisher));
     }
 
     /**

File: webserver/cors/src/main/java/io/helidon/webserver/cors/Aggregator.java
Patch:
@@ -78,12 +78,13 @@ private Aggregator() {
 
     /**
      * Reports whether the sources of CORS information have left CORS enabled or not. If there has been an explicit setting,
-     * use the most recent. Otherwise
+     * use the most recent. If no {@code CrossOriginConfig} instances were ever added -- either explicitly or using config --
+     * then the aggregator will never find a match among the matchables so it is as good as inactive.
      *
      * @return if CORS processing should be done
      */
     public boolean isEnabled() {
-        return isEnabled;
+        return isEnabled && !crossOriginConfigMatchables.isEmpty();
     }
 
     /**

File: webserver/cors/src/main/java/io/helidon/webserver/cors/CorsSupportBase.java
Patch:
@@ -139,7 +139,7 @@ protected Builder() {
          * @return the updated builder
          */
         public B config(Config config) {
-            aggregator.mappedConfig(config);
+            helperBuilder.config(config);
             return me();
         }
 

File: common/reactive/src/test/java/io/helidon/common/reactive/ConcatPublisher2TckTest.java
Patch:
@@ -28,7 +28,7 @@
 public class ConcatPublisher2TckTest extends FlowPublisherVerification<Integer> {
 
     public ConcatPublisher2TckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/ConcatPublisherTckTest.java
Patch:
@@ -31,7 +31,7 @@
 public class ConcatPublisherTckTest extends FlowPublisherVerification<Integer> {
 
     public ConcatPublisherTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiCollectTckTest.java
Patch:
@@ -28,7 +28,7 @@
 public class MultiCollectTckTest extends FlowPublisherVerification<List<Integer>> {
 
     public MultiCollectTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiCollectorTckTest.java
Patch:
@@ -29,7 +29,7 @@
 public class MultiCollectorTckTest extends FlowPublisherVerification<List<Integer>> {
 
     public MultiCollectorTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDefaultIfEmptyFallbackTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiDefaultIfEmptyFallbackTckTest extends FlowPublisherVerification<Long> {
 
     public MultiDefaultIfEmptyFallbackTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDefaultIfEmptyNormalTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiDefaultIfEmptyNormalTckTest extends FlowPublisherVerification<Long> {
 
     public MultiDefaultIfEmptyNormalTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDeferTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiDeferTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiDeferTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDistinctPublisherModuloTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiDistinctPublisherModuloTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiDistinctPublisherModuloTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
     
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDistinctPublisherTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiDistinctPublisherTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiDistinctPublisherTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiDropWhileTckTest.java
Patch:
@@ -27,7 +27,7 @@
 public class MultiDropWhileTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiDropWhileTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapIterableManyToManyTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiFlatMapIterableManyToManyTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiFlatMapIterableManyToManyTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapIterableManyToOneTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiFlatMapIterableManyToOneTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiFlatMapIterableManyToOneTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapIterableOneToManyTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class MultiFlatMapIterableOneToManyTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiFlatMapIterableOneToManyTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapPublisherManyToOneTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiFlatMapPublisherManyToOneTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiFlatMapPublisherManyToOneTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapPublisherOneToManyTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class MultiFlatMapPublisherOneToManyTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiFlatMapPublisherOneToManyTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromArrayTckTest.java
Patch:
@@ -28,7 +28,7 @@
 public class MultiFromArrayTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiFromArrayTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromCompletionStageTckTest.java
Patch:
@@ -28,7 +28,7 @@
 public class MultiFromCompletionStageTckTest extends FlowPublisherVerification<Long> {
 
     public MultiFromCompletionStageTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromIterableTckTest.java
Patch:
@@ -27,7 +27,7 @@
 public class MultiFromIterableTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiFromIterableTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFromStreamTckTest.java
Patch:
@@ -28,7 +28,7 @@
 public class MultiFromStreamTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiFromStreamTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiJustTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiJustTckTest extends FlowPublisherVerification<Long> {
 
     public MultiJustTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiLimitPublisherMoreTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class MultiLimitPublisherMoreTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiLimitPublisherMoreTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiLimitPublisherTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class MultiLimitPublisherTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiLimitPublisherTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiLimitPublisherZeroTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class MultiLimitPublisherZeroTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiLimitPublisherZeroTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiMapperPublisherTckTest.java
Patch:
@@ -24,7 +24,7 @@
 public class MultiMapperPublisherTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiMapperPublisherTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiObserveOnTckTest.java
Patch:
@@ -33,7 +33,7 @@ public class MultiObserveOnTckTest extends FlowPublisherVerification<Long> {
     private static ScheduledExecutorService executor;
 
     public MultiObserveOnTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @BeforeClass

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnCompleteTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiOnCompleteTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiOnCompleteTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeFailureTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiOnErrorResumeFailureTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiOnErrorResumeFailureTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeSuccessTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiOnErrorResumeSuccessTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiOnErrorResumeSuccessTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeWithFailureTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiOnErrorResumeWithFailureTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiOnErrorResumeWithFailureTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorResumeWithSuccessTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class MultiOnErrorResumeWithSuccessTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiOnErrorResumeWithSuccessTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnErrorTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiOnErrorTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiOnErrorTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiOnTerminateTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiOnTerminateTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiOnTerminateTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiPeekTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiPeekTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiPeekTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiPeekTwiceTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiPeekTwiceTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiPeekTwiceTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeLongTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiRangeLongTckTest extends FlowPublisherVerification<Long> {
 
     public MultiRangeLongTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRangeTckTest.java
Patch:
@@ -27,7 +27,7 @@
 public class MultiRangeTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiRangeTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceFullTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiReduceFullTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiReduceFullTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiReduceTckTest.java
Patch:
@@ -28,7 +28,7 @@
 public class MultiReduceTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiReduceTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiRetryTckTest.java
Patch:
@@ -28,7 +28,7 @@
 public class MultiRetryTckTest extends FlowPublisherVerification<Long> {
 
     public MultiRetryTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSkipPublisherNoSkipTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiSkipPublisherNoSkipTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiSkipPublisherNoSkipTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSkipPublisherTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiSkipPublisherTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiSkipPublisherTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSwitchIfEmptyFallbackTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiSwitchIfEmptyFallbackTckTest extends FlowPublisherVerification<Long> {
 
     public MultiSwitchIfEmptyFallbackTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiSwitchIfEmptyNormalTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiSwitchIfEmptyNormalTckTest extends FlowPublisherVerification<Long> {
 
     public MultiSwitchIfEmptyNormalTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeUntilPublisherTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiTakeUntilPublisherTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiTakeUntilPublisherTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeWhilePublisherTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class MultiTakeWhilePublisherTckTest extends FlowPublisherVerification<Integer> {
 
     public MultiTakeWhilePublisherTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTimeoutFallbackTckTest.java
Patch:
@@ -34,7 +34,7 @@ public class MultiTimeoutFallbackTckTest extends FlowPublisherVerification<Long>
     private static ScheduledExecutorService executor;
 
     public MultiTimeoutFallbackTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTimeoutNormalTckTest.java
Patch:
@@ -33,7 +33,7 @@ public class MultiTimeoutNormalTckTest extends FlowPublisherVerification<Long> {
     private static ScheduledExecutorService executor;
 
     public MultiTimeoutNormalTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleDefaultIfEmptyFallbackTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleDefaultIfEmptyFallbackTckTest extends FlowPublisherVerification<Long> {
 
     public SingleDefaultIfEmptyFallbackTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleDefaultIfEmptyNormalTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleDefaultIfEmptyNormalTckTest extends FlowPublisherVerification<Long> {
 
     public SingleDefaultIfEmptyNormalTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleDeferTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleDeferTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleDeferTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapIterableTckTest.java
Patch:
@@ -27,7 +27,7 @@
 public class SingleFlatMapIterableTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleFlatMapIterableTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapMultiTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleFlatMapMultiTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleFlatMapMultiTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFlatMapSingleTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class SingleFlatMapSingleTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleFlatMapSingleTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFromCompletionStageTckTest.java
Patch:
@@ -28,7 +28,7 @@
 public class SingleFromCompletionStageTckTest extends FlowPublisherVerification<Long> {
 
     public SingleFromCompletionStageTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFromPublisherOneTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleFromPublisherOneTckTest extends FlowPublisherVerification<Long> {
 
     public SingleFromPublisherOneTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleFromPublisherZeroTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleFromPublisherZeroTckTest extends FlowPublisherVerification<Long> {
 
     public SingleFromPublisherZeroTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleJustTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleJustTckTest extends FlowPublisherVerification<Long> {
 
     public SingleJustTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleMapperPublisherTckTest.java
Patch:
@@ -24,7 +24,7 @@
 public class SingleMapperPublisherTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleMapperPublisherTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleObserveOnTckTest.java
Patch:
@@ -33,7 +33,7 @@ public class SingleObserveOnTckTest extends FlowPublisherVerification<Long> {
     private static ScheduledExecutorService executor;
 
     public SingleObserveOnTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @BeforeClass

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeFailureTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleOnErrorResumeFailureTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleOnErrorResumeFailureTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeSuccessTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class SingleOnErrorResumeSuccessTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleOnErrorResumeSuccessTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeWithFailureTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleOnErrorResumeWithFailureTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleOnErrorResumeWithFailureTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleOnErrorResumeWithSuccessTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class SingleOnErrorResumeWithSuccessTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleOnErrorResumeWithSuccessTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SinglePeekTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SinglePeekTckTest extends FlowPublisherVerification<Integer> {
 
     public SinglePeekTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SinglePeekTwiceTckTest.java
Patch:
@@ -25,7 +25,7 @@
 public class SinglePeekTwiceTckTest extends FlowPublisherVerification<Integer> {
 
     public SinglePeekTwiceTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleRetryTckTest.java
Patch:
@@ -28,7 +28,7 @@
 public class SingleRetryTckTest extends FlowPublisherVerification<Long> {
 
     public SingleRetryTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleSwitchIfEmptyFallbackTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleSwitchIfEmptyFallbackTckTest extends FlowPublisherVerification<Long> {
 
     public SingleSwitchIfEmptyFallbackTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleSwitchIfEmptyNormalTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleSwitchIfEmptyNormalTckTest extends FlowPublisherVerification<Long> {
 
     public SingleSwitchIfEmptyNormalTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTakeUntilPublisherTckTest.java
Patch:
@@ -26,7 +26,7 @@
 public class SingleTakeUntilPublisherTckTest extends FlowPublisherVerification<Integer> {
 
     public SingleTakeUntilPublisherTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTimeoutFallbackTckTest.java
Patch:
@@ -34,7 +34,7 @@ public class SingleTimeoutFallbackTckTest extends FlowPublisherVerification<Long
     private static ScheduledExecutorService executor;
 
     public SingleTimeoutFallbackTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTimeoutNormalTckTest.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTimeoutNormalTckTest extends FlowPublisherVerification<Long>
     private static ScheduledExecutorService executor;
 
     public SingleTimeoutNormalTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: microprofile/reactive-streams/src/test/java/io/helidon/microprofile/reactive/HelidonReactiveStreamsEngineTckTest.java
Patch:
@@ -32,7 +32,7 @@
 public class HelidonReactiveStreamsEngineTckTest extends ReactiveStreamsTck<HelidonReactiveStreamsEngine> {
 
     public HelidonReactiveStreamsEngineTckTest() {
-        super(new TestEnvironment(50));
+        super(new TestEnvironment(200));
     }
 
     @Override

File: tests/apps/bookstore/bookstore-mp/src/test/java/io/helidon/tests/apps/bookstore/mp/BookResourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,6 +16,8 @@
 
 package io.helidon.tests.apps.bookstore.mp;
 
+import io.helidon.tests.apps.bookstore.common.Book;
+
 import javax.enterprise.inject.se.SeContainer;
 import javax.enterprise.inject.spi.CDI;
 import javax.ws.rs.client.Client;

File: tests/apps/bookstore/bookstore-se/src/main/java/io/helidon/tests/apps/bookstore/se/AuthorMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;
 
-import io.helidon.tests.apps.bookstore.mp.Author;
+import io.helidon.tests.apps.bookstore.common.Author;
 
 class AuthorMapper {
 

File: tests/apps/bookstore/bookstore-se/src/main/java/io/helidon/tests/apps/bookstore/se/BookMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;
 
-import io.helidon.tests.apps.bookstore.mp.Book;
+import io.helidon.tests.apps.bookstore.common.Book;
 
 class BookMapper {
 

File: tests/apps/bookstore/bookstore-se/src/main/java/io/helidon/tests/apps/bookstore/se/BookService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,8 @@
 
 import io.helidon.common.http.Http;
 import io.helidon.config.Config;
-import io.helidon.tests.apps.bookstore.mp.Book;
-import io.helidon.tests.apps.bookstore.mp.BookStore;
+import io.helidon.tests.apps.bookstore.common.Book;
+import io.helidon.tests.apps.bookstore.common.BookStore;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.ServerRequest;
 import io.helidon.webserver.ServerResponse;

File: tests/apps/bookstore/common/src/main/java/io/helidon/tests/apps/bookstore/common/Author.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.tests.apps.bookstore.mp;
+package io.helidon.tests.apps.bookstore.common;
 
 /**
  * Class Author.

File: tests/apps/bookstore/common/src/main/java/io/helidon/tests/apps/bookstore/common/Book.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.tests.apps.bookstore.mp;
+package io.helidon.tests.apps.bookstore.common;
 
 import java.util.List;
 

File: tests/apps/bookstore/common/src/main/java/io/helidon/tests/apps/bookstore/common/BookGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.tests.apps.bookstore.mp;
+package io.helidon.tests.apps.bookstore.common;
 
 import java.util.Collection;
 import java.util.concurrent.ThreadLocalRandom;

File: tests/apps/bookstore/common/src/main/java/io/helidon/tests/apps/bookstore/common/BookStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.tests.apps.bookstore.mp;
+package io.helidon.tests.apps.bookstore.common;
 
 import javax.enterprise.context.ApplicationScoped;
 import java.util.Collection;

File: tests/apps/bookstore/common/src/test/java/io/helidon/tests/apps/bookstore/mp/BookGeneratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.tests.apps.bookstore.mp;
+package io.helidon.tests.apps.bookstore.common;
 
 import java.util.Collection;
 

File: dbclient/common/src/test/java/io/helidon/dbclient/common/mapper/MapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -65,6 +65,7 @@ private static OffsetDateTime currentDate() {
      * @return current time with date set to 1. 1. 1970 (epoch)
      */
     private static OffsetDateTime currentTime() {
+        // this returns time in current timezone, but moved to 1970 January, so daylight savings will cause mayhem
         return OffsetDateTime.now()
                 .with(ChronoField.YEAR, 1970)
                 .with(ChronoField.MONTH_OF_YEAR, 1)

File: examples/security/attribute-based-access-control/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,9 +19,9 @@
  */
 module io.helidon.security.examples.abac {
     // CDI API
-    requires cdi.api;
+    requires jakarta.enterprise.cdi.api;
     // implementation of expression language to use (used by the abac provider: policy expression language
-    requires javax.el;
+    requires jakarta.el.api;
     requires io.helidon.microprofile.bundle;
     // needed for security components and restrictions of this module
     requires io.helidon.security;

File: grpc/client/src/test/java/io/helidon/grpc/client/GrpcChannelsProviderIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: grpc/core/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,5 +40,5 @@
     requires java.logging;
     requires java.naming;
 
-    requires javax.inject;
+    requires jakarta.inject.api;
 }

File: grpc/metrics/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: grpc/server/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,5 +36,5 @@
     requires java.annotation;
     requires java.logging;
 
-    requires javax.inject;
+    requires jakarta.inject.api;
 }

File: health/common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,8 @@
  */
 module io.helidon.health.common {
 
-    requires static cdi.api;
-    requires static javax.inject;
+    requires static jakarta.enterprise.cdi.api;
+    requires static jakarta.inject.api;
 
     exports io.helidon.health.common;
 }

File: integrations/cdi/common-cdi/delegates/src/main/java/module-info.java
Patch:
@@ -18,7 +18,7 @@
  * Provides classes and interfaces that wrap existing CDI constructs.
  */
 module io.helidon.integrations.cdi.delegates {
-    requires cdi.api;
+    requires jakarta.enterprise.cdi.api;
 
     exports io.helidon.integrations.cdi.delegates;
 }

File: integrations/cdi/common-cdi/reference-counted-context/src/main/java/module-info.java
Patch:
@@ -22,7 +22,7 @@
  */
 module io.helidon.integrations.cdi.referencecountedcontext {
     requires io.helidon.integrations.cdi.delegates;
-    requires cdi.api;
+    requires jakarta.enterprise.cdi.api;
 
     exports io.helidon.integrations.cdi.referencecountedcontext;
 }

File: integrations/cdi/datasource-hikaricp/src/main/java/module-info.java
Patch:
@@ -23,8 +23,8 @@
  * io.helidon.integrations.datasource.hikaricp.cdi.HikariCPBackedDataSourceExtension
  */
 module io.helidon.integrations.datasource.hikaricp.cdi {
-    requires cdi.api;
-    requires javax.inject;
+    requires jakarta.enterprise.cdi.api;
+    requires jakarta.inject.api;
     requires java.sql;
     requires java.annotation;
     requires microprofile.config.api;

File: integrations/cdi/datasource-ucp/src/main/java/module-info.java
Patch:
@@ -26,8 +26,8 @@
 module io.helidon.integrations.datasource.ucp.cdi {
     requires java.sql;
     requires java.desktop; // For java.beans
-    requires javax.inject;
-    requires cdi.api;
+    requires jakarta.inject.api;
+    requires jakarta.enterprise.cdi.api;
     requires microprofile.config.api;
     requires ucp;
     requires io.helidon.service.configuration.microprofile.config;

File: integrations/cdi/datasource/src/main/java/module-info.java
Patch:
@@ -22,8 +22,8 @@
  * io.helidon.integrations.datasource.cdi.AbstractDataSourceExtension
  */
 module io.helidon.integrations.datasource.cdi {
-    requires cdi.api;
-    requires javax.inject;
+    requires jakarta.enterprise.cdi.api;
+    requires jakarta.inject.api;
     requires java.sql;
     requires microprofile.config.api;
 

File: integrations/cdi/eclipselink-cdi/src/main/java/module-info.java
Patch:
@@ -25,8 +25,8 @@
     requires java.management;
 
     requires java.transaction;
-    requires cdi.api;
-    requires javax.inject;
+    requires jakarta.enterprise.cdi.api;
+    requires jakarta.inject.api;
     requires java.sql;
     requires org.eclipse.persistence.jpa;
     requires org.eclipse.persistence.core;

File: integrations/cdi/hibernate-cdi/src/main/java/module-info.java
Patch:
@@ -26,8 +26,8 @@
 module io.helidon.integrations.cdi.hibernate {
     requires java.transaction;
     requires java.sql;
-    requires javax.inject;
-    requires cdi.api;
+    requires jakarta.inject.api;
+    requires jakarta.enterprise.cdi.api;
     requires org.hibernate.orm.core;
 
     exports io.helidon.integrations.cdi.hibernate;

File: integrations/cdi/jedis-cdi/src/main/java/module-info.java
Patch:
@@ -21,8 +21,8 @@
  */
 module io.helidon.integrations.jedis.cdi {
     requires java.desktop; // For java.beans
-    requires cdi.api;
-    requires javax.inject;
+    requires jakarta.enterprise.cdi.api;
+    requires jakarta.inject.api;
     requires java.sql;
     requires microprofile.config.api;
     requires jedis;

File: integrations/cdi/jpa-weld/src/main/java/module-info.java
Patch:
@@ -28,9 +28,9 @@
     requires java.annotation;
     requires java.sql;
     requires java.persistence;
-    requires javax.interceptor.api;
-    requires javax.inject;
-    requires cdi.api;
+    requires jakarta.interceptor.api;
+    requires jakarta.inject.api;
+    requires jakarta.enterprise.cdi.api;
     requires weld.spi;
 
     exports io.helidon.integrations.cdi.jpa.weld;

File: integrations/cdi/jta-cdi/src/main/java/module-info.java
Patch:
@@ -27,9 +27,9 @@
     requires java.annotation;
     requires java.sql;
     requires java.rmi;
-    requires javax.interceptor.api;
-    requires javax.inject;
-    requires cdi.api;
+    requires jakarta.interceptor.api;
+    requires jakarta.inject.api;
+    requires jakarta.enterprise.cdi.api;
     requires cdi;    // org.jboss.narayana.jta
     requires jta;    //org.jboss.narayana.jta.jta
     requires common; // org.jboss.narayana.common

File: integrations/cdi/jta-weld/src/main/java/module-info.java
Patch:
@@ -27,7 +27,7 @@
     requires java.transaction;
     requires java.logging;
     requires java.rmi;
-    requires cdi.api;
+    requires jakarta.enterprise.cdi.api;
     requires cdi;    // org.jboss.narayana.jta
     requires jta;    //org.jboss.narayana.jta.jta
     requires common; // org.jboss.narayana.common

File: integrations/cdi/oci-objectstorage-cdi/src/main/java/module-info.java
Patch:
@@ -20,11 +20,11 @@
  */
 module io.helidon.integrations.cdi.oci.objectstorage {
 
-    requires javax.inject;
+    requires jakarta.inject.api;
     requires oci.java.sdk.common;
     requires oci.java.sdk.objectstorage.generated;
     requires oci.java.sdk.objectstorage.extensions;
-    requires cdi.api;
+    requires jakarta.enterprise.cdi.api;
     requires microprofile.config.api;
 
     exports io.helidon.integrations.cdi.oci.objectstorage;

File: microprofile/bundles/helidon-microprofile/src/main/java/module-info.java
Patch:
@@ -27,6 +27,6 @@
     requires transitive io.helidon.microprofile.tracing;
     requires transitive io.helidon.microprofile.restclient;
     requires transitive io.helidon.microprofile.openapi;
-
+    requires transitive java.json.bind;
     requires io.helidon.health.checks;
 }

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CommandRetrier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -301,7 +301,7 @@ private Object retryExecute() throws Exception {
 
         Object result;
         try {
-            LOGGER.info(() -> "About to execute command with key "
+            LOGGER.fine(() -> "About to execute command with key "
                     + command.getCommandKey()
                     + " on thread " + Thread.currentThread().getName());
 

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceCommand.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -442,7 +442,7 @@ private void updateMetricsAfter(Throwable throwable, boolean wasBreakerOpen, boo
     private void logCircuitBreakerState(String preamble) {
         if (introspector.hasCircuitBreaker()) {
             String hystrixState = isCircuitBreakerOpen() ? "OPEN" : "CLOSED";
-            LOGGER.info(() -> preamble + ": breaker for " + getCommandKey() + " in state "
+            LOGGER.fine(() -> preamble + ": breaker for " + getCommandKey() + " in state "
                     + breakerHelper.getState() + " (Hystrix: " + hystrixState
                     + " Thread:" + Thread.currentThread().getName() + ")");
         }
@@ -464,7 +464,7 @@ private void waitForThreadToComplete() {
             try {
                 int waitTime = 250;
                 while (runThread.getState() == Thread.State.RUNNABLE && waitTime <= threadWaitingPeriod) {
-                    LOGGER.info(() -> "Waiting for completion of thread " + runThread);
+                    LOGGER.fine(() -> "Waiting for completion of thread " + runThread);
                     Thread.sleep(waitTime);
                     waitTime += 250;
                 }

File: microprofile/grpc/core/src/main/java/io/helidon/microprofile/grpc/core/GrpcInterceptorBinding.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,8 +28,8 @@
  * used to specify the binding of a gRPC client or server interceptor to target gRPC service and methods.
  * <p>
  * The annotation type that is marked as a binding must be applied to a client of server gRPC interceptor
- * implementation class (marked with the {@link javax.interceptor.Interceptor @Interceptor} annotation to associate that annotation with an interceptor.  The annotation
- * may then be applied instead of, or in addition to, the {@link javax.interceptor.Interceptors @Interceptors} annotation to specify
+ * implementation class (marked with the {@code javax.interceptor.Interceptor @Interceptor} annotation to associate that annotation with an interceptor.  The annotation
+ * may then be applied instead of, or in addition to, the {@code javax.interceptor.Interceptors @Interceptors} annotation to specify
  * what interceptors are attached to the class or method.
  * <p>
  * The associated annotation type must be associated only with {@link java.lang.annotation.ElementType#TYPE TYPE}s and/or

File: microprofile/grpc/core/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,10 +25,10 @@
     requires transitive io.helidon.microprofile.config;
     requires io.helidon.common.serviceloader;
 
-    requires transitive cdi.api;
+    requires transitive jakarta.enterprise.cdi.api;
 
     requires java.logging;
-    requires javax.inject;
+    requires jakarta.inject.api;
 
     uses io.helidon.microprofile.grpc.core.MethodHandlerSupplier;
 

File: microprofile/grpc/metrics/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
     requires transitive io.helidon.microprofile.server;
 
     requires java.logging;
-    requires javax.interceptor.api;
+    requires jakarta.interceptor.api;
 
     provides io.helidon.microprofile.grpc.server.AnnotatedServiceConfigurer
             with io.helidon.microprofile.grpc.metrics.MetricsConfigurer;

File: microprofile/openapi/src/main/java/module-info.java
Patch:
@@ -32,5 +32,8 @@
 
     exports io.helidon.microprofile.openapi;
 
+    // this is needed for CDI extensions that use non-public observer methods
+    opens io.helidon.microprofile.openapi to weld.core.impl;
+
     provides Extension with OpenApiCdiExtension;
 }

File: microprofile/server/src/main/java/module-info.java
Patch:
@@ -26,9 +26,9 @@
 
     requires transitive io.helidon.microprofile.cdi;
 
-    requires transitive cdi.api;
+    requires transitive jakarta.enterprise.cdi.api;
     requires transitive java.ws.rs;
-    requires javax.interceptor.api;
+    requires jakarta.interceptor.api;
 
     requires java.logging;
     requires io.helidon.common.serviceloader;

File: microprofile/tests/tck/tck-opentracing/src/test/java/io/helidon/microprofile/opentracing/tck/OpentracingExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/tests/tck/tck-opentracing/src/test/java/io/helidon/microprofile/opentracing/tck/OpentracingJavaMockTracerBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: security/abac/policy-el/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
     requires io.helidon.security.abac.policy;
     requires java.logging;
     // expected to be provided by the actual EL implementation
-    requires static javax.el.api;
+    requires static jakarta.el.api;
     requires java.desktop;
     requires io.helidon.security.util;
 

File: security/abac/role/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 
     exports io.helidon.security.abac.role;
 
+    provides io.helidon.security.providers.common.spi.AnnotationAnalyzer with io.helidon.security.abac.role.RoleAnnotationAnalyzer;
     provides io.helidon.security.providers.abac.spi.AbacValidatorService with io.helidon.security.abac.role.RoleValidatorService;
 
     uses io.helidon.security.providers.common.spi.AnnotationAnalyzer;

File: security/integration/jersey-client/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,6 @@
     requires io.helidon.webclient.jaxrs;
     requires jersey.common;
     requires jersey.client;
-    requires javax.inject;
 
     exports io.helidon.security.integration.jersey.client;
 

File: security/jwt/src/main/java/module-info.java
Patch:
@@ -21,7 +21,7 @@
     requires transitive io.helidon.config;
     requires transitive io.helidon.common;
     requires transitive io.helidon.common.configurable;
-    requires transitive org.glassfish.java.json;
+    requires transitive java.json;
     requires io.helidon.security.util;
     requires java.logging;
 

File: security/security/src/main/java/module-info.java
Patch:
@@ -42,5 +42,8 @@
 
     exports io.helidon.security.internal to io.helidon.security.integration.jersey, io.helidon.security.integration.webserver, io.helidon.security.integration.grpc;
 
+    // needed for CDI integration
+    opens io.helidon.security to weld.core.impl;
+
     uses io.helidon.security.spi.SecurityProviderService;
 }

File: tracing/jersey-client/src/main/java/module-info.java
Patch:
@@ -24,7 +24,6 @@
     requires java.annotation;
 
     requires java.ws.rs;
-    requires javax.inject;
     requires jersey.client;
     requires jersey.common;
 

File: webclient/jaxrs/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,8 +24,8 @@
     requires java.annotation;
 
     requires java.ws.rs;
-    requires jersey.client;
-    requires jersey.common;
+    requires io.helidon.jersey.client;
+    requires io.helidon.jersey.common;
 
     requires io.helidon.common;
     requires io.helidon.common.configurable;

File: common/http/src/main/java/io/helidon/common/http/DataChunk.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -248,7 +248,8 @@ default boolean flush() {
      */
     default DataChunk duplicate() {
         byte[] bytes = new byte[data().limit()];
-        DataChunk dup = DataChunk.create(data().get(bytes));
+        data().get(bytes);
+        DataChunk dup = DataChunk.create(bytes);
         dup.data().position(0);
         return dup;
     }

File: examples/microprofile/websocket/src/main/java/io/helidon/microprofile/example/websocket/MessageBoardEndpoint.java
Patch:
@@ -33,7 +33,7 @@
  * Class MessageBoardEndpoint.
  */
 @ServerEndpoint(
-        value = "/board",
+        value = "/websocket",
         encoders = { MessageBoardEndpoint.UppercaseEncoder.class }
 )
 public class MessageBoardEndpoint {

File: examples/microprofile/websocket/src/main/java/io/helidon/microprofile/example/websocket/MessageQueueResource.java
Patch:
@@ -36,7 +36,6 @@ public class MessageQueueResource {
      * @param s The string.
      */
     @POST
-    @Path("board")
     @Consumes("text/plain")
     public void push(String s) {
         messageQueue.push(s);

File: examples/microprofile/websocket/src/test/java/io/helidon/microprofile/example/websocket/MessageBoardTest.java
Patch:
@@ -70,15 +70,15 @@ static void destroyClass() {
     @Test
     public void testBoard() throws IOException, DeploymentException, InterruptedException {
         // Post messages using REST resource
-        URI restUri = URI.create("http://localhost:" + server.port() + "/rest/board");
+        URI restUri = URI.create("http://localhost:" + server.port() + "/rest");
         for (String message : messages) {
             Response res = restClient.target(restUri).request().post(Entity.text(message));
             assertThat(res.getStatus(), is(204));
             LOGGER.info("Posting message '" + message + "'");
         }
 
         // Now connect to message board using WS and them back
-        URI websocketUri = URI.create("ws://localhost:" + server.port() + "/websocket/board");
+        URI websocketUri = URI.create("ws://localhost:" + server.port() + "/websocket");
         CountDownLatch messageLatch = new CountDownLatch(messages.length);
         ClientEndpointConfig config = ClientEndpointConfig.Builder.create().build();
 

File: microprofile/websocket/src/main/java/io/helidon/microprofile/tyrus/WebSocketCdiExtension.java
Patch:
@@ -54,7 +54,7 @@
 public class WebSocketCdiExtension implements Extension {
     private static final Logger LOGGER = Logger.getLogger(WebSocketCdiExtension.class.getName());
 
-    private static final String DEFAULT_WEBSOCKET_PATH = "/websocket";
+    private static final String DEFAULT_WEBSOCKET_PATH = "/";
 
     static {
         HelidonFeatures.register(HelidonFlavor.MP, "WebSocket");

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleMapperPublisher.java
Patch:
@@ -16,6 +16,7 @@
 package io.helidon.common.reactive;
 
 import java.util.concurrent.Flow;
+import java.util.function.Function;
 
 import io.helidon.common.mapper.Mapper;
 
@@ -28,9 +29,9 @@ final class SingleMapperPublisher<T, R> implements Single<R> {
 
     private final Flow.Publisher<T> source;
 
-    private final Mapper<? super T, ? extends R> mapper;
+    private final Function<? super T, ? extends R> mapper;
 
-    SingleMapperPublisher(Flow.Publisher<T> source, Mapper<? super T, ? extends R> mapper) {
+    SingleMapperPublisher(Flow.Publisher<T> source, Function<? super T, ? extends R> mapper) {
         this.source = source;
         this.mapper = mapper;
     }

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/ShakespearePlaysScrabbleWithHelidonReactiveOpt.java
Patch:
@@ -76,10 +76,10 @@ static <T> T get(Single<T> source) {
     public List<Entry<Integer, List<String>>> measureThroughput() throws Exception {
 
         //  to compute the score of a given word
-        Mapper<Integer, Integer> scoreOfALetter = letter -> letterScores[letter - 'a'];
+        Function<Integer, Integer> scoreOfALetter = letter -> letterScores[letter - 'a'];
 
         // score of the same letters in a word
-        Mapper<Entry<Integer, MutableLong>, Integer> letterScore =
+        Function<Entry<Integer, MutableLong>, Integer> letterScore =
                 entry ->
                         letterScores[entry.getKey() - 'a'] *
                         Integer.min(
@@ -110,7 +110,7 @@ public List<Entry<Integer, List<String>>> measureThroughput() throws Exception {
                             ) ;
 
         // number of blanks for a given letter
-        Mapper<Entry<Integer, MutableLong>, Long> blank =
+        Function<Entry<Integer, MutableLong>, Long> blank =
                 entry ->
                         Long.max(
                             0L,

File: media/common/src/main/java/io/helidon/media/common/ByteChannelBodyWriter.java
Patch:
@@ -53,7 +53,7 @@ public Publisher<DataChunk> write(Single<ReadableByteChannel> content, GenericTy
             MessageBodyWriterContext context) {
 
         context.contentType(MediaType.APPLICATION_OCTET_STREAM);
-        return content.mapMany(mapper);
+        return content.flatMap(mapper::map);
     }
 
     /**

File: media/common/src/main/java/io/helidon/media/common/CharSequenceBodyWriter.java
Patch:
@@ -45,7 +45,7 @@ public Publisher<DataChunk> write(Single<CharSequence> content, GenericType<? ex
             MessageBodyWriterContext context) {
 
         context.contentType(MediaType.TEXT_PLAIN);
-        return content.mapMany(new CharSequenceToChunks(context.charset()));
+        return content.flatMap(new CharSequenceToChunks(context.charset())::map);
     }
 
     /**

File: media/common/src/main/java/io/helidon/media/common/ContentReaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -63,7 +63,7 @@ public static Single<byte[]> readBytes(Publisher<DataChunk> chunks) {
      * @return Single
      */
     public static Single<String> readString(Publisher<DataChunk> chunks, Charset charset) {
-        return readBytes(chunks).map(new BytesToString(charset));
+        return readBytes(chunks).map(new BytesToString(charset)::map);
     }
 
     /**
@@ -75,7 +75,7 @@ public static Single<String> readString(Publisher<DataChunk> chunks, Charset cha
      */
     public static Single<String> readURLEncodedString(Publisher<DataChunk> chunks,
             Charset charset) {
-        return readString(chunks, charset).map(new StringToDecodedString(charset));
+        return readString(chunks, charset).map(new StringToDecodedString(charset)::map);
     }
 
     /**

File: media/common/src/main/java/io/helidon/media/common/FileBodyWriter.java
Patch:
@@ -50,7 +50,7 @@ public boolean accept(GenericType<?> type, MessageBodyWriterContext context) {
 
     @Override
     public Publisher<DataChunk> write(Single<File> content, GenericType<? extends File> type, MessageBodyWriterContext context) {
-        return content.mapMany(new FileToChunks(DEFAULT_RETRY_SCHEMA, context));
+        return content.flatMap(new FileToChunks(DEFAULT_RETRY_SCHEMA, context)::map);
     }
 
     /**

File: media/common/src/main/java/io/helidon/media/common/MessageBodyWriterContext.java
Patch:
@@ -260,7 +260,7 @@ public <T> Publisher<DataChunk> marshall(Single<T> content, GenericType<T> type,
                 return applyFilters(Multi.<DataChunk>empty());
             }
             if (byte[].class.equals(type.rawType())) {
-                return applyFilters(((Single<byte[]>) content).mapMany(BYTES_MAPPER));
+                return applyFilters(((Single<byte[]>) content).flatMap(BYTES_MAPPER::map));
             }
             MessageBodyWriter<T> writer;
             if (fallback != null) {
@@ -582,7 +582,7 @@ public boolean accept(GenericType<?> type, MessageBodyWriterContext context) {
 
         @Override
         public Publisher<DataChunk> write(Single<T> single, GenericType<? extends T> type, MessageBodyWriterContext context) {
-            return single.mapMany(function::apply);
+            return single.flatMap(function);
         }
     }
 

File: media/common/src/main/java/io/helidon/media/common/PathBodyWriter.java
Patch:
@@ -49,7 +49,7 @@ public boolean accept(GenericType<?> type, MessageBodyWriterContext context) {
 
     @Override
     public Publisher<DataChunk> write(Single<Path> content, GenericType<? extends Path> type, MessageBodyWriterContext context) {
-        return content.mapMany(new PathToChunks(DEFAULT_RETRY_SCHEMA, context));
+        return content.flatMap(new PathToChunks(DEFAULT_RETRY_SCHEMA, context)::map);
     }
 
     /**

File: media/common/src/main/java/io/helidon/media/common/ThrowableBodyWriter.java
Patch:
@@ -49,7 +49,7 @@ public Publisher<DataChunk> write(Single<Throwable> content,
                                       GenericType<? extends Throwable> type,
                                       MessageBodyWriterContext context) {
         context.contentType(MediaType.TEXT_PLAIN);
-        return content.mapMany(new ThrowableToChunks(context.charset()));
+        return content.flatMap(new ThrowableToChunks(context.charset())::map);
     }
 
     /**

File: media/jackson/common/src/main/java/io/helidon/media/jackson/common/JacksonBodyReader.java
Patch:
@@ -52,7 +52,7 @@ public boolean accept(GenericType<?> type, MessageBodyReaderContext context) {
     public <U extends Object> Single<U> read(Publisher<DataChunk> publisher,
             GenericType<U> type, MessageBodyReaderContext context) {
 
-        return ContentReaders.readBytes(publisher).map(new BytesToObject<>(type, objectMapper));
+        return ContentReaders.readBytes(publisher).map(new BytesToObject<>(type, objectMapper)::map);
     }
 
     /**

File: media/jackson/common/src/main/java/io/helidon/media/jackson/common/JacksonBodyWriter.java
Patch:
@@ -56,7 +56,7 @@ public Publisher<DataChunk> write(Single<Object> content, GenericType<? extends
 
         MediaType contentType = context.findAccepted(MediaType.JSON_PREDICATE, MediaType.APPLICATION_JSON);
         context.contentType(contentType);
-        return content.mapMany(new ObjectToChunks(objectMapper, context.charset()));
+        return content.flatMap(new ObjectToChunks(objectMapper, context.charset())::map);
     }
 
     /**

File: media/jsonb/common/src/main/java/io/helidon/media/jsonb/common/JsonbBodyReader.java
Patch:
@@ -53,7 +53,7 @@ public boolean accept(GenericType<?> type, MessageBodyReaderContext context) {
     public <U extends Object> Single<U> read(Publisher<DataChunk> publisher,
             GenericType<U> type, MessageBodyReaderContext context) {
 
-        return ContentReaders.readBytes(publisher).map(new BytesToObject<>(type, jsonb));
+        return ContentReaders.readBytes(publisher).map(new BytesToObject<>(type, jsonb)::map);
     }
 
     /**

File: media/jsonb/common/src/main/java/io/helidon/media/jsonb/common/JsonbBodyWriter.java
Patch:
@@ -57,7 +57,7 @@ public Publisher<DataChunk> write(Single<Object> content,  GenericType<? extends
 
         MediaType contentType = context.findAccepted(MediaType.JSON_PREDICATE, MediaType.APPLICATION_JSON);
         context.contentType(contentType);
-        return content.mapMany(new ObjectToChunks(jsonb, context.charset()));
+        return content.flatMap(new ObjectToChunks(jsonb, context.charset())::map);
     }
 
     /**

File: media/jsonp/common/src/main/java/io/helidon/media/jsonp/common/JsonpBodyReader.java
Patch:
@@ -55,7 +55,8 @@ public boolean accept(GenericType<?> type, MessageBodyReaderContext context) {
     public <U extends JsonStructure> Single<U> read(Publisher<DataChunk> publisher, GenericType<U> type,
             MessageBodyReaderContext context) {
 
-        return ContentReaders.readBytes(publisher).map(new BytesToJsonStructure<>(jsonFactory, type, context.charset()));
+        return ContentReaders.readBytes(publisher)
+                .map(new BytesToJsonStructure<>(jsonFactory, type, context.charset())::map);
     }
 
     private static final class BytesToJsonStructure<T extends JsonStructure> implements Mapper<byte[], T> {

File: media/jsonp/common/src/main/java/io/helidon/media/jsonp/common/JsonpBodyWriter.java
Patch:
@@ -54,7 +54,7 @@ public Publisher<DataChunk> write(Single<JsonStructure> content, GenericType<? e
 
         MediaType contentType = context.findAccepted(MediaType.JSON_PREDICATE, MediaType.APPLICATION_JSON);
         context.contentType(contentType);
-        return content.mapMany(new JsonStructureToChunks(jsonWriterFactory, context.charset()));
+        return content.flatMap(new JsonStructureToChunks(jsonWriterFactory, context.charset())::map);
     }
 
     static final class JsonStructureToChunks implements Mapper<JsonStructure, Publisher<DataChunk>> {

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiCollectPublisher.java
Patch:
@@ -30,11 +30,11 @@ final class MultiCollectPublisher<T, U> implements Single<U> {
 
     private final Multi<T> source;
 
-    private final Supplier<U> collectionSupplier;
+    private final Supplier<? extends U> collectionSupplier;
 
     private final BiConsumer<U, T> accumulator;
 
-    MultiCollectPublisher(Multi<T> source, Supplier<U> collectionSupplier, BiConsumer<U, T> combiner) {
+    MultiCollectPublisher(Multi<T> source, Supplier<? extends U> collectionSupplier, BiConsumer<U, T> combiner) {
         this.source = source;
         this.collectionSupplier = collectionSupplier;
         this.accumulator = combiner;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromIterable.java
Patch:
@@ -97,7 +97,7 @@ public void request(long n) {
                         iterator = null;
                         if (isCanceled == BAD_REQUEST) {
                             downstream.onError(new IllegalArgumentException(
-                                    "Rule §3.9 violated: non-positive request amount is forbidded"));
+                                    "Rule §3.9 violated: non-positive request amount is forbidden"));
                         }
                         return;
                     }

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromStream.java
Patch:
@@ -114,7 +114,7 @@ public void request(long n) {
                         iterator = null;
                         if (isCanceled == BAD_REQUEST) {
                             downstream.onError(new IllegalArgumentException(
-                                    "Rule §3.9 violated: non-positive request amount is forbidded"));
+                                    "Rule §3.9 violated: non-positive request amount is forbidden"));
                         }
                         close();
                         return;

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleMapperPublisher.java
Patch:
@@ -28,9 +28,9 @@ final class SingleMapperPublisher<T, R> implements Single<R> {
 
     private final Flow.Publisher<T> source;
 
-    private final Mapper<T, R> mapper;
+    private final Mapper<? super T, ? extends R> mapper;
 
-    SingleMapperPublisher(Flow.Publisher<T> source, Mapper<T, R> mapper) {
+    SingleMapperPublisher(Flow.Publisher<T> source, Mapper<? super T, ? extends R> mapper) {
         this.source = source;
         this.mapper = mapper;
     }

File: examples/quickstarts/helidon-quickstart-mp/src/test/java/io/helidon/examples/quickstart/mp/MainTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@ class MainTest {
 
     @BeforeAll
     public static void startTheServer() throws Exception {
-        server = Main.startServer();
+        server = Server.create().start();
     }
 
     @Test

File: health/health/src/main/java/io/helidon/health/HealthSupport.java
Patch:
@@ -203,7 +203,7 @@ private boolean notExcluded(HcResponse response) {
     private HcResponse callHealthChecks(HealthCheck hc) {
         try {
             return new HcResponse(hc.call());
-        } catch (Exception e) {
+        } catch (Throwable e) {
             LOGGER.log(Level.SEVERE, "Failed to compute health check for " + hc.getClass().getName(), e);
 
             return new HcResponse(HealthCheckResponse

File: tests/integration/native-image/mp-1/src/main/java/io/helidon/tests/integration/nativeimage/mp1/Mp1Main.java
Patch:
@@ -79,7 +79,7 @@ public static void main(final String[] args) {
         //Main.main(args);
 
         Server server = Server.builder()
-                .port(0)
+                .port(7001)
                 .applications(new JaxRsApplicationNoCdi())
                 .retainDiscoveredApplications(true)
                 .basePath("/cdi")

File: microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/MethodSignatureResolverTest.java
Patch:
@@ -31,8 +31,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import io.helidon.microprofile.reactive.hybrid.HybridPublisher;
-
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
@@ -255,7 +253,7 @@ String processor_payl_2_payl(String payload) {
 
     @Outgoing("out-channel-name")
     @ExpectedSignatureType(MethodSignatureType.OUTGOING_PUBLISHER_PAYL_2_VOID)
-    public HybridPublisher<String> extendedPublisher() {
+    public Publisher<String> extendedPublisher() {
         return null;
     }
 

File: microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/inner/ByRequestProcessorV1Bean.java
Patch:
@@ -17,9 +17,10 @@
 
 package io.helidon.microprofile.messaging.inner;
 
-import io.helidon.microprofile.reactive.MultiRS;
+import io.helidon.common.reactive.Multi;
 import org.eclipse.microprofile.reactive.messaging.Incoming;
 import org.eclipse.microprofile.reactive.messaging.Outgoing;
+import org.reactivestreams.FlowAdapters;
 import org.reactivestreams.Publisher;
 
 import javax.enterprise.context.ApplicationScoped;
@@ -38,7 +39,7 @@ public class ByRequestProcessorV1Bean {
 
     @Outgoing("inner-processor")
     public Publisher<Integer> produceMessage() {
-        return MultiRS.just(IntStream.range(0, 10).boxed());
+        return FlowAdapters.toPublisher(Multi.range(0, 10));
     }
 
     @Incoming("inner-processor")

File: microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/inner/InnerChannelTest.java
Patch:
@@ -31,6 +31,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 import org.junit.platform.commons.util.ClassFilter;
@@ -54,6 +55,7 @@ static Stream<CdiTestCase> testCaseSource() {
 
     @ParameterizedTest
     @MethodSource("testCaseSource")
+    @Disabled("Fails due to backpressure issues in InternalProcessor, reenable once fixed")
     void innerChannelBeanTest(CdiTestCase testCase) {
         Optional<? extends Class<? extends Throwable>> expectedThrowable = testCase.getExpectedThrowable();
         if (expectedThrowable.isPresent()) {

File: microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/inner/InnerProcessorBean.java
Patch:
@@ -31,10 +31,11 @@
 
 package io.helidon.microprofile.messaging.inner;
 
+import io.helidon.common.reactive.Multi;
 import io.helidon.microprofile.messaging.CountableTestBean;
-import io.helidon.microprofile.reactive.MultiRS;
 import org.eclipse.microprofile.reactive.messaging.Incoming;
 import org.eclipse.microprofile.reactive.messaging.Outgoing;
+import org.reactivestreams.FlowAdapters;
 import org.reactivestreams.Publisher;
 
 import javax.enterprise.context.ApplicationScoped;
@@ -60,7 +61,7 @@ public class InnerProcessorBean implements CountableTestBean {
 
     @Outgoing("inner-processor")
     public Publisher<String> produceMessage() {
-        return MultiRS.just(TEST_DATA.stream());
+        return FlowAdapters.toPublisher(Multi.from(() -> TEST_DATA.stream().iterator()));
     }
 
     @Incoming("inner-processor")

File: microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/inner/InternalChannelsBean.java
Patch:
@@ -16,10 +16,11 @@
 
 package io.helidon.microprofile.messaging.inner;
 
+import io.helidon.common.reactive.Multi;
 import io.helidon.microprofile.messaging.CountableTestBean;
-import io.helidon.microprofile.reactive.MultiRS;
 import org.eclipse.microprofile.reactive.messaging.Incoming;
 import org.eclipse.microprofile.reactive.messaging.Outgoing;
+import org.reactivestreams.FlowAdapters;
 import org.reactivestreams.Publisher;
 
 import javax.enterprise.context.ApplicationScoped;
@@ -41,7 +42,7 @@ public class InternalChannelsBean implements CountableTestBean {
 
     @Outgoing("intenal-publisher-string")
     public Publisher<String> produceMessage() {
-        return MultiRS.just(TEST_DATA.stream());
+        return FlowAdapters.toPublisher(Multi.from(() -> TEST_DATA.stream().iterator()));
     }
 
     @Incoming("intenal-publisher-string")

File: microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/inner/MultipleProcessorBean.java
Patch:
@@ -17,10 +17,11 @@
 
 package io.helidon.microprofile.messaging.inner;
 
+import io.helidon.common.reactive.Multi;
 import io.helidon.microprofile.messaging.CountableTestBean;
-import io.helidon.microprofile.reactive.MultiRS;
 import org.eclipse.microprofile.reactive.messaging.Incoming;
 import org.eclipse.microprofile.reactive.messaging.Outgoing;
+import org.reactivestreams.FlowAdapters;
 import org.reactivestreams.Publisher;
 
 import javax.enterprise.context.ApplicationScoped;
@@ -46,7 +47,7 @@ public class MultipleProcessorBean implements CountableTestBean {
 
     @Outgoing("inner-processor")
     public Publisher<String> produceMessage() {
-        return MultiRS.just(TEST_DATA.stream());
+        return FlowAdapters.toPublisher(Multi.from(() -> TEST_DATA.stream().iterator()));
     }
 
     @Incoming("inner-processor")

File: microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/inner/MultipleTypeProcessorChainV1Bean.java
Patch:
@@ -17,11 +17,12 @@
 
 package io.helidon.microprofile.messaging.inner;
 
+import io.helidon.common.reactive.Multi;
 import io.helidon.microprofile.messaging.CountableTestBean;
-import io.helidon.microprofile.reactive.MultiRS;
 import org.eclipse.microprofile.reactive.messaging.Incoming;
 import org.eclipse.microprofile.reactive.messaging.Outgoing;
 import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;
+import org.reactivestreams.FlowAdapters;
 import org.reactivestreams.Publisher;
 
 import javax.enterprise.context.ApplicationScoped;
@@ -47,7 +48,7 @@ public class MultipleTypeProcessorChainV1Bean implements CountableTestBean {
 
     @Outgoing("inner-processor")
     public Publisher<String> produceMessage() {
-        return MultiRS.just(TEST_DATA.stream());
+        return FlowAdapters.toPublisher(Multi.from(() -> TEST_DATA.stream().iterator()));
     }
 
     @Incoming("inner-processor")

File: microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/inner/MultipleTypeProcessorChainV2Bean.java
Patch:
@@ -17,11 +17,12 @@
 
 package io.helidon.microprofile.messaging.inner;
 
+import io.helidon.common.reactive.Multi;
 import io.helidon.microprofile.messaging.CountableTestBean;
-import io.helidon.microprofile.reactive.MultiRS;
 import org.eclipse.microprofile.reactive.messaging.Incoming;
 import org.eclipse.microprofile.reactive.messaging.Outgoing;
 import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;
+import org.reactivestreams.FlowAdapters;
 import org.reactivestreams.Publisher;
 
 import javax.enterprise.context.ApplicationScoped;
@@ -47,7 +48,7 @@ public class MultipleTypeProcessorChainV2Bean implements CountableTestBean {
 
     @Outgoing("inner-processor")
     public Publisher<String> produceMessage() {
-        return MultiRS.just(TEST_DATA.stream());
+        return FlowAdapters.toPublisher(Multi.from(() -> TEST_DATA.stream().iterator()));
     }
 
     @Incoming("inner-processor")

File: microprofile/reactive-streams/src/main/java/module-info.java
Patch:
@@ -27,6 +27,5 @@
     requires transitive microprofile.reactive.streams.operators.api;
 
     exports io.helidon.microprofile.reactive;
-    exports io.helidon.microprofile.reactive.hybrid;
 
 }

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CommandScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -41,15 +41,15 @@ private CommandScheduler(ScheduledThreadPoolSupplier poolSupplier) {
 
     /**
      * If no command scheduler exists, creates one using default values.
-     * Disables daemon threads.
+     * The created command scheduler uses daemon threads, so the JVM shuts-down if these are the only ones running.
      *
      * @param threadPoolSize Size of thread pool for async commands.
      * @return Existing scheduler or newly created one.
      */
     public static synchronized CommandScheduler create(int threadPoolSize) {
         if (instance == null) {
             instance = new CommandScheduler(ScheduledThreadPoolSupplier.builder()
-                    .daemon(false)
+                    .daemon(true)
                     .threadNamePrefix(THREAD_NAME_PREFIX)
                     .corePoolSize(threadPoolSize)
                     .prestart(false)

File: microprofile/server/src/main/java/io/helidon/microprofile/server/JaxRsCdiExtension.java
Patch:
@@ -260,6 +260,7 @@ public Set<Class<?>> getClasses() {
 
     JerseySupport toJerseySupport(Supplier<? extends ExecutorService> defaultExecutorService, JaxRsApplication jaxRsApplication) {
         JerseySupport.Builder builder = JerseySupport.builder(jaxRsApplication.resourceConfig());
+        builder.config(((io.helidon.config.Config) ConfigProvider.getConfig()).get("server.jersey"));
         builder.executorService(jaxRsApplication.executorService().orElseGet(defaultExecutorService));
         builder.register(new ExceptionMapper<Exception>() {
             @Override

File: tests/integration/native-image/mp-1/src/main/java/io/helidon/tests/integration/nativeimage/mp1/JaxRsProtectedResource.java
Patch:
@@ -30,21 +30,21 @@ public class JaxRsProtectedResource {
     @GET
     @Path("/public")
     @PermitAll
-    public String hello() {
+    public String publicHello() {
         return "Hello anybody";
     }
 
     @GET
     @Path("/scope")
     @ScopeValidator.Scope("admin_scope")
-    public String message() {
+    public String scope() {
         return "Hello scope";
     }
 
     @GET
     @Path("/role")
     @RolesAllowed("admin")
-    public String jaxRsMessage() {
+    public String role() {
         return "Hello role";
     }
 }

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFlatMapIterable.java
Patch:
@@ -194,6 +194,7 @@ void drain() {
                                 hasNext = iterator.hasNext();
                             } catch (Throwable ex) {
                                 canceled = true;
+                                upstream.cancel();
                                 downstream.onError(ex);
                                 continue;
                             }
@@ -222,6 +223,7 @@ void drain() {
                                         "The iterator returned a null item");
                             } catch (Throwable ex) {
                                 canceled = true;
+                                upstream.cancel();
                                 downstream.onError(ex);
                                 continue outer;
                             }
@@ -242,6 +244,7 @@ void drain() {
                                 hasNext = iterator.hasNext();
                             } catch (Throwable ex) {
                                 canceled = true;
+                                upstream.cancel();
                                 downstream.onError(ex);
                                 continue outer;
                             }

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFlatMapPublisher.java
Patch:
@@ -407,11 +407,10 @@ void drainLoop() {
                                 continue;
                             }
                         }
-
-                        emitted = e;
                     }
                 }
 
+                emitted = e;
                 missed = addAndGet(-missed);
                 if (missed == 0) {
                     break;

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiOnErrorResumeWith.java
Patch:
@@ -93,7 +93,9 @@ public void onError(Throwable throwable) {
                 publisher = Objects.requireNonNull(fallbackFunction.apply(throwable),
                         "The fallback function returned a null Flow.Publisher");
             } catch (Throwable ex) {
-                ex.addSuppressed(throwable);
+                if (ex != throwable) {
+                    ex.addSuppressed(throwable);
+                }
                 downstream.onError(ex);
                 return;
             }

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleOnErrorResume.java
Patch:
@@ -77,7 +77,9 @@ public void onError(Throwable throwable) {
                 fallback = Objects.requireNonNull(fallbackFunction.apply(throwable),
                         "The fallback function returned a null item");
             } catch (Throwable ex) {
-                ex.addSuppressed(throwable);
+                if (ex != throwable) {
+                    ex.addSuppressed(throwable);
+                }
                 error(ex);
                 return;
             }

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleOnErrorResumeWith.java
Patch:
@@ -82,7 +82,9 @@ public void onError(Throwable throwable) {
                 fallback = Objects.requireNonNull(fallbackFunction.apply(throwable),
                         "The fallback function returned a null Single");
             } catch (Throwable ex) {
-                ex.addSuppressed(throwable);
+                if (ex != throwable) {
+                    ex.addSuppressed(throwable);
+                }
                 error(ex);
                 return;
             }

File: integrations/cdi/jpa-cdi/src/main/java/module-info.java
Patch:
@@ -36,6 +36,7 @@
     requires io.helidon.integrations.cdi.referencecountedcontext;
     requires io.helidon.integrations.cdi.delegates;
     requires io.helidon.microprofile.cdi;
+    requires io.helidon.common;
 
     exports io.helidon.integrations.cdi.jpa;
 }

File: microprofile/messaging/src/main/java/io/helidon/microprofile/messaging/InternalSubscriber.java
Patch:
@@ -39,8 +39,7 @@ class InternalSubscriber implements Subscriber<Object> {
     @Override
     public void onSubscribe(Subscription s) {
         subscription = s;
-        // request one by one
-        subscription.request(1);
+        subscription.request(Long.MAX_VALUE);
     }
 
     @Override
@@ -51,7 +50,6 @@ public void onNext(Object message) {
             Object preProcessedMessage = preProcess(message, paramType);
             Object methodResult = method.invoke(incomingMethod.getBeanInstance(), preProcessedMessage);
             postProcess(message, methodResult);
-            subscription.request(1);
         } catch (Exception e) {
             // Notify publisher to stop sending
             subscription.cancel();

File: common/reactive/src/test/java/io/helidon/common/reactive/jmh/ShakespearePlaysScrabbleWithHelidonReactiveOpt.java
Patch:
@@ -122,7 +122,7 @@ public List<Entry<Integer, List<String>>> measureThroughput() throws Exception {
         // number of blanks for a given word
         Function<String, Single<Long>> nBlanks =
                 word ->
-                            Multi.from(histoOfLetters.apply(word))
+                            histoOfLetters.apply(word)
                             .flatMapIterable(HashMap::entrySet)
                             .map(blank)
                             .reduce(Long::sum)
@@ -137,7 +137,7 @@ public List<Entry<Integer, List<String>>> measureThroughput() throws Exception {
         // score taking blanks into account letterScore1
         Function<String, Single<Integer>> score2 =
                 word ->
-                        Multi.from(histoOfLetters.apply(word))
+                        histoOfLetters.apply(word)
                             .flatMapIterable(
                                     HashMap::entrySet
                             )
@@ -195,7 +195,7 @@ public List<Entry<Integer, List<String>>> measureThroughput() throws Exception {
 
         // best key / value pairs
         List<Entry<Integer, List<String>>> finalList2 =
-                    Multi.from(buildHistoOnScore.apply(score3))
+                    buildHistoOnScore.apply(score3)
                     .flatMapIterable(
                             TreeMap::entrySet
                     )

File: security/abac/policy/src/main/java/io/helidon/security/abac/policy/PolicyValidator.java
Patch:
@@ -177,7 +177,8 @@ public void validate(PolicyConfig config, Errors.Collector collector, ProviderRe
         }
 
         if (!unvalidatedStatements.isEmpty()) {
-            collector.fatal("Some policy statements were not evaluated, cannot continue: " + unvalidatedStatements);
+            throw new SecurityException("Missing a policy executor for policy statement(s). Statements: " + unvalidatedStatements
+                                                + ", known executors: " + executors);
         }
     }
 

File: config/config/src/main/java/io/helidon/config/UrlOverrideSource.java
Patch:
@@ -1,5 +1,5 @@
-/*
- * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+/**
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/etcd/src/main/java/module-info.java
Patch:
@@ -30,7 +30,7 @@
     requires com.google.common;
     requires io.helidon.common;
     requires io.helidon.common.media.type;
-    requires grpc.api;
+    requires io.grpc;
 
     exports io.helidon.config.etcd;
 

File: grpc/client/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
 
     requires transitive io.helidon.grpc.core;
 
+    requires io.helidon.tracing;
     requires io.opentracing.api;
     requires opentracing.grpc;
 }

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/PersistenceUnitInfoBean.java
Patch:
@@ -814,7 +814,7 @@ public String toString() {
     }
 
     /**
-     * Creates and returns a {@link Collection} of {@link {@link
+     * Creates and returns a {@link Collection} of {@link
      * PersistenceUnitInfoBean} instances from a supplied {@link
      * Persistence} object.
      *
@@ -961,8 +961,8 @@ public String toString() {
      * META-INF/persistence.xml} resource), a {@link URL} representing
      * the persistence unit's root, a {@link Map} of unlisted managed
      * classes (entity classes, mapped superclasses and so on) indexed
-     * by persistence unit name, and a {@link
-     * DataSourceProviderSupplier} that can supply {@link
+     * by persistence unit name, and a {@code
+     * DataSourceProviderSupplier} that can supply {@code
      * DataSourceProvider} instances, returns a {@link
      * PersistenceUnitInfoBean} representing the persistence unit in
      * question.

File: media/common/src/main/java/io/helidon/media/common/MediaSupport.java
Patch:
@@ -94,7 +94,7 @@ public static MediaSupport createWithDefaults() {
      * Create a new instance with the default readers and writers registered on
      * the contexts.
      * @param config a {@link Config} that will be passed to {@link
-     * Builder#registerDefaults(Config)}
+     * Builder#registerDefaults()}
      * @return MediaSupport
      */
     public static MediaSupport createWithDefaults(Config config) {

File: media/common/src/main/java/io/helidon/media/common/MessageBodyWriteableContent.java
Patch:
@@ -29,7 +29,7 @@
 import io.helidon.common.reactive.Single;
 
 /**
- * Implementation of {@link WriteableContent}.
+ * Implementation of {@code WriteableContent}.
  */
 public final class MessageBodyWriteableContent implements MessageBodyContent, MessageBodyWriters, MessageBodyFilters {
 

File: media/jsonb/server/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 /**
  * JSON-B support for Webserver.
  *
- * @see io.helidon.media.jsonb.server.JsonbSupport
+ * @see io.helidon.media.jsonb.server.JsonBindingSupport
  */
 module io.helidon.media.jsonb.server {
     requires io.helidon.media.jsonb.common;

File: microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/Main.java
Patch:
@@ -29,7 +29,7 @@
  *      <li>If there are any MicroProfile config sources, these will be added</li>
  *      <li>If there are any {@code META-INF/microprofile-config.properties} files on the classpath, these will be added</li>
  * </ul>
- * <h2>Logging</h2>>
+ * <h2>Logging</h2>
  * Helidon uses Java Util Logging. You can configure logging using:
  * <ul>
  *     <li>A system property {@code java.util.logging.config.class}</li>

File: microprofile/config/src/main/java/module-info.java
Patch:
@@ -23,6 +23,7 @@
     requires javax.inject;
     requires io.helidon.common;
     requires io.helidon.config;
+    requires io.helidon.config.objectmapping;
     requires io.helidon.microprofile.cdi;
     requires microprofile.config.api;
 

File: microprofile/fault-tolerance/src/main/java/module-info.java
Patch:
@@ -28,6 +28,7 @@
     requires io.helidon.common.metrics;
     requires io.helidon.microprofile.config;
     requires io.helidon.microprofile.server;
+    requires io.helidon.microprofile.metrics;
 
     requires cdi.api;
     requires hystrix.core;

File: microprofile/grpc/server/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
     requires transitive io.helidon.grpc.server;
     requires transitive io.helidon.microprofile.grpc.core;
     requires io.helidon.common.serviceloader;
+    requires io.helidon.microprofile.server;
 
     requires transitive io.grpc;
     requires grpc.protobuf.lite;

File: microprofile/messaging/src/main/java/module-info.java
Patch:
@@ -25,6 +25,9 @@
     requires static java.activation;
     requires javax.interceptor.api;
     requires io.helidon.config;
+    requires io.helidon.microprofile.config;
+    requires io.helidon.microprofile.server;
+    requires io.helidon.microprofile.reactive;
     requires org.reactivestreams;
     requires transitive microprofile.reactive.messaging.api;
     requires transitive microprofile.reactive.streams.operators.api;

File: microprofile/metrics/src/main/java/module-info.java
Patch:
@@ -27,6 +27,7 @@
     requires static java.activation;
 
     requires io.helidon.microprofile.server;
+    requires io.helidon.microprofile.config;
     requires transitive io.helidon.metrics;
     requires io.helidon.common.metrics;
 

File: microprofile/reactive-streams/src/main/java/module-info.java
Patch:
@@ -27,5 +27,6 @@
     requires transitive microprofile.reactive.streams.operators.api;
 
     exports io.helidon.microprofile.reactive;
+    exports io.helidon.microprofile.reactive.hybrid;
 
 }

File: security/jwt/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
     requires transitive io.helidon.common;
     requires transitive io.helidon.common.configurable;
     requires transitive org.glassfish.java.json;
+    requires io.helidon.security.util;
     requires java.logging;
 
     exports io.helidon.security.jwt;

File: security/providers/header/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
     requires io.helidon.common;
     requires io.helidon.security;
     requires io.helidon.security.util;
+    requires io.helidon.security.providers.common;
 
     exports io.helidon.security.providers.header;
 

File: security/providers/http-auth/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
     requires io.helidon.common;
     requires io.helidon.common.serviceloader;
     requires io.helidon.security;
+    requires io.helidon.security.providers.common;
     requires java.logging;
 
     exports io.helidon.security.providers.httpauth;

File: security/providers/oidc-common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
     requires io.helidon.security.util;
     requires io.helidon.security.providers.common;
     requires io.helidon.security.jwt;
+    requires io.helidon.webclient.jaxrs;
     requires jersey.client;
     requires java.ws.rs;
 

File: webclient/tracing/src/main/java/module-info.java
Patch:
@@ -22,6 +22,8 @@
  */
 module io.helidon.webclient.tracing {
     requires io.helidon.webclient;
+    requires io.helidon.common.context;
+    requires io.helidon.tracing.config;
 
     requires io.opentracing.api;
     requires io.opentracing.util;
@@ -30,4 +32,4 @@
 
     provides WebClientServiceProvider with WebClientTracingProvider;
 
-}
\ No newline at end of file
+}

File: config/config/src/main/java/io/helidon/config/ConfigComplexImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 
-import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.spi.ConfigFilter;
 import io.helidon.config.spi.ConfigNode;
 

File: config/config/src/main/java/io/helidon/config/ConfigFilters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import io.helidon.config.internal.ValueResolvingFilter;
 import io.helidon.config.spi.ConfigFilter;
 
 /**

File: config/config/src/main/java/io/helidon/config/ConfigLeafImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,6 @@
 import java.util.regex.Pattern;
 import java.util.stream.Stream;
 
-import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.spi.ConfigFilter;
 import io.helidon.config.spi.ConfigNode.ValueNode;
 

File: config/config/src/main/java/io/helidon/config/ConfigListImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.spi.ConfigFilter;
 import io.helidon.config.spi.ConfigNode.ListNode;
 

File: config/config/src/main/java/io/helidon/config/ConfigMapperManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -189,8 +189,7 @@ void addAll(MapperProviders other) {
         <T> Optional<Mapper<T>> findMapper(GenericType<T> type, Config.Key key) {
             return providers.stream()
                     .map(provider -> provider.apply(type))
-                    .filter(Optional::isPresent)
-                    .map(Optional::get)
+                    .flatMap(Optional::stream)
                     .findFirst()
                     .map(mapper -> castMapper(type, mapper, key))
                     .map(Mapper::create);

File: config/config/src/main/java/io/helidon/config/ConfigMissingImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
 import java.util.stream.Stream;
 
 import io.helidon.common.GenericType;
-import io.helidon.config.internal.ConfigKeyImpl;
 
 /**
  * Implementation of {@link Config} that represents {@link Config.Type#MISSING missing} node.

File: config/config/src/main/java/io/helidon/config/ConfigObjectImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 
-import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.spi.ConfigFilter;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
 

File: config/config/src/main/java/io/helidon/config/ConfigParsers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,6 @@
 
 package io.helidon.config;
 
-import io.helidon.config.internal.PropertiesConfigParser;
 import io.helidon.config.spi.ConfigParser;
 
 /**
@@ -32,7 +31,7 @@ private ConfigParsers() {
 
     /**
      * Returns a {@link ConfigParser} implementation that parses Java Properties content
-     * (the media type {@value io.helidon.config.internal.PropertiesConfigParser#MEDIA_TYPE_TEXT_JAVA_PROPERTIES}).
+     * (the media type {@value PropertiesConfigParser#MEDIA_TYPE_TEXT_JAVA_PROPERTIES}).
      * <p>
      * @return {@code ConfigParser} that parses Java Properties content
      */

File: config/config/src/main/java/io/helidon/config/ConfigValues.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -259,7 +259,7 @@ public <N> ConfigValue<N> as(Function<T, N> mapper) {
 
         @Override
         public String toString() {
-            return key() + ": " + asOptional();
+            return key() + ": " + asOptional().map(String::valueOf).orElse("");
         }
     }
 

File: config/config/src/main/java/io/helidon/config/MergeableNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,8 @@
  * limitations under the License.
  */
 
-package io.helidon.config.internal;
+package io.helidon.config;
 
-import io.helidon.config.ConfigException;
 import io.helidon.config.spi.ConfigNode;
 
 /**

File: config/config/src/main/java/io/helidon/config/OverrideConfigFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,15 +14,14 @@
  * limitations under the License.
  */
 
-package io.helidon.config.internal;
+package io.helidon.config;
 
 import java.util.List;
 import java.util.Map;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.regex.Pattern;
 
-import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigFilter;
 
 /**

File: config/config/src/test/java/io/helidon/config/AdaptiveRecurringPolicyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.internal;
+package io.helidon.config;
 
 import java.time.Duration;
 
@@ -24,7 +24,7 @@
 import static org.hamcrest.core.Is.is;
 
 /**
- * Tests {@link ScheduledPollingStrategy.AdaptiveRecurringPolicy}
+ * Tests {@link io.helidon.config.ScheduledPollingStrategy.AdaptiveRecurringPolicy}
  */
 public class AdaptiveRecurringPolicyTest {
 

File: config/config/src/test/java/io/helidon/config/AutoLoadedConfigFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,8 @@
  * limitations under the License.
  */
 
-package io.helidon.config.internal;
+package io.helidon.config;
 
-import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigFilter;
 
 /**

File: config/config/src/test/java/io/helidon/config/AutoLoadedConfigHighPriority.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.internal;
+package io.helidon.config;
 
 import javax.annotation.Priority;
 

File: config/config/src/test/java/io/helidon/config/AutoLoadedConfigLowPriority.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.config.internal;
+package io.helidon.config;
 
 import javax.annotation.Priority;
 

File: config/config/src/test/java/io/helidon/config/AutoLoadedConfigPriority.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,8 @@
  * limitations under the License.
  */
 
-package io.helidon.config.internal;
+package io.helidon.config;
 
-import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigFilter;
 
 /**

File: config/config/src/test/java/io/helidon/config/ChainConfigFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import io.helidon.config.ProviderImpl.ChainConfigFilter;
-import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.spi.ConfigFilter;
 
 import org.junit.jupiter.api.Test;

File: config/config/src/test/java/io/helidon/config/ConfigMappersFailingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,8 +49,7 @@ public static Stream<Class<?>> builtInMapperTypes() {
     @ParameterizedTest
     @MethodSource("builtInMapperTypes")
     public void testMappingFails(Class<?> type) {
-        ConfigMapperManager manager = BuilderImpl.buildMappers(false,
-                                                               ConfigMapperManager.MapperProviders.create());
+        ConfigMapperManager manager = BuilderImpl.buildMappers(ConfigMapperManager.MapperProviders.create());
 
         String key = "config.key.with.wrong.format";
         Config config = Config.builder()

File: config/config/src/test/java/io/helidon/config/ConfigMissingImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -224,15 +224,15 @@ public void testToString(TestContext context) {
                 .and(endsWith(key() + "] MISSING")));
     }
 
-    @Disabled
+    @Disabled("Makes no sense for missing config")
     @Override
     @MethodSource("initParams")
     @ParameterizedTest
     public void testTypeExistsSupplier(TestContext context) {
         init(context);
     }
 
-    @Disabled
+    @Disabled("Makes no sense for missing config")
     @Override
     @MethodSource("initParams")
     @ParameterizedTest

File: config/config/src/test/java/io/helidon/config/ConfigParsersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,8 +16,6 @@
 
 package io.helidon.config;
 
-import io.helidon.config.internal.PropertiesConfigParser;
-
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;

File: config/config/src/test/java/io/helidon/config/InMemoryOverrideSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import io.helidon.config.internal.OverrideConfigFilter;
 import io.helidon.config.spi.OverrideSource;
 
 import org.junit.jupiter.api.Test;

File: common/reactive/src/main/java/io/helidon/common/reactive/SubscriptionHelper.java
Patch:
@@ -47,7 +47,7 @@ public void cancel() {
      * {@link Long#MAX_VALUE}.
      * @param field the target field to update
      * @param n the request amount to add, must be positive (not verified)
-     * @return the new request amount after the operation
+     * @return the old request amount after the operation
      */
     public static long addRequest(AtomicLong field, long n) {
         for (;;) {
@@ -60,7 +60,7 @@ public static long addRequest(AtomicLong field, long n) {
                 update = Long.MAX_VALUE;
             }
             if (field.compareAndSet(current, update)) {
-                return update;
+                return current;
             }
         }
     }

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiFlatMapPublisherTest.java
Patch:
@@ -238,7 +238,7 @@ public void crossMapUnbounded1000000() {
     @Test
     public void justJust() {
         TestSubscriber<Integer> ts = new TestSubscriber<>();
-        Multi.just(1)
+        Multi.singleton(1)
                 .flatMap(Single::just)
                 .subscribe(ts);
 
@@ -258,7 +258,7 @@ public void onSubscribe(Flow.Subscription subscription) {
                 subscription.request(Long.MAX_VALUE);
             }
         };
-        Multi.just(1)
+        Multi.singleton(1)
                 .flatMap(Single::just)
                 .subscribe(ts);
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTakeWhilePublisherTest.java
Patch:
@@ -63,7 +63,7 @@ public void limited() {
     public void predicateCrash() {
         TestSubscriber<Integer> ts = new TestSubscriber<>();
 
-        Multi.<Integer>just(1)
+        Multi.<Integer>singleton(1)
                 .takeWhile(v -> { throw new IllegalArgumentException();})
                 .subscribe(ts);
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTest.java
Patch:
@@ -502,7 +502,7 @@ void distinct() throws ExecutionException, InterruptedException {
     @Test
     void requestOneOfOneExpectComplete() {
         TestSubscriber<String> subscriber = new TestSubscriber<>();
-        Multi.just("foo").subscribe(subscriber);
+        Multi.singleton("foo").subscribe(subscriber);
         subscriber.request1();
         assertThat(subscriber.isComplete(), is(equalTo(true)));
         assertThat(subscriber.getLastError(), is(nullValue()));
@@ -541,7 +541,7 @@ void requestAllByMultipleExpectComplete() {
     public void testDoubleSubscribe() {
         TestSubscriber<Integer> subscriber1 = new TestSubscriber<>();
         TestSubscriber<Integer> subscriber2 = new TestSubscriber<>();
-        Multi<Integer> multi = Multi.just(1);
+        Multi<Integer> multi = Multi.singleton(1);
         multi.subscribe(subscriber1);
         multi.subscribe(subscriber2);
 

File: webserver/test-support/src/main/java/io/helidon/webserver/testsupport/MediaPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -73,7 +73,7 @@ static MediaPublisher create(MediaType publishedType, CharSequence charSequence)
                 .map(Charset::forName)
                 .orElse(StandardCharsets.UTF_8)
                 .encode(charSequence.toString());
-        Flow.Publisher<DataChunk> publisher = Multi.just(DataChunk.create(data));
+        Flow.Publisher<DataChunk> publisher = Multi.singleton(DataChunk.create(data));
         return new MediaPublisher() {
             @Override
             public MediaType mediaType() {

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTest.java
Patch:
@@ -208,7 +208,7 @@ public List<String> value() {
             }
         }).subscribe(subscriber);
         assertThat(subscriber.isComplete(), is(equalTo(false)));
-        assertThat(subscriber.getLastError(), is(instanceOf(IllegalStateException.class)));
+        assertThat(subscriber.getLastError(), is(instanceOf(NullPointerException.class)));
         assertThat(subscriber.getItems(), is(empty()));
     }
 

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFirstProcessor.java
Patch:
@@ -36,6 +36,7 @@ protected void submit(T item) {
 
     @Override
     protected void next(T item) {
+        cancel();
         super.next(item);
         super.complete();
     }

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTest.java
Patch:
@@ -145,9 +145,7 @@ public void testFromMulti() {
     public void testFirst() {
         MultiTestSubscriber<String> subscriber = new MultiTestSubscriber<>();
         Multi.just("foo", "bar").first().subscribe(subscriber);
-        assertThat(subscriber.isComplete(), is(equalTo(true)));
-        assertThat(subscriber.getLastError(), is(nullValue()));
-        assertThat(subscriber.getItems().get(0), is(equalTo("foo")));
+        subscriber.assertResult("foo");
     }
 
     @Test

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTest.java
Patch:
@@ -97,14 +97,13 @@ public void testJustDoubleSubscriptionRequest() {
         SingleTestSubscriber<String> subscriber = new SingleTestSubscriber<String>() {
             @Override
             public void onSubscribe(Subscription subscription) {
+                super.onSubscribe(subscription);
                 subscription.request(1);
                 subscription.request(1);
             }
         };
         Single.<String>just("foo").subscribe(subscriber);
-        assertThat(subscriber.isComplete(), is(equalTo(true)));
-        assertThat(subscriber.getLastError(), is(nullValue()));
-        assertThat(subscriber.getItems(), hasItems("foo"));
+        subscriber.assertResult("foo");
     }
 
     @Test
@@ -121,6 +120,7 @@ public void testEmptyCanceledSubscription() {
         SingleTestSubscriber<Object> subscriber = new SingleTestSubscriber<Object>() {
             @Override
             public void onSubscribe(Subscription subscription) {
+                super.onSubscribe(subscription);
                 subscription.cancel();
             }
         };

File: metrics/metrics/src/main/java/io/helidon/metrics/HelidonMetric.java
Patch:
@@ -56,8 +56,9 @@ interface HelidonMetric extends Metric {
      *
      * @param sb the {@code StringBuilder} used to accumulate the output
      * @param metricID the {@code MetricID} for the metric to be formatted
+     * @param withHelpType flag to control if TYPE and HELP are to be included
      */
-    void prometheusData(StringBuilder sb, MetricID metricID);
+    void prometheusData(StringBuilder sb, MetricID metricID, boolean withHelpType);
 
     /**
      * Return a name for this metric, possibly including a unit suffix.

File: metrics/metrics/src/test/java/io/helidon/metrics/HelidonCounterTest.java
Patch:
@@ -109,14 +109,14 @@ void testPrometheusData() {
                 + "# HELP base_theName_total theDescription\n"
                 + "base_theName_total{a=\"b\",c=\"d\"} 17\n";
 
-        counter.prometheusData(sb, counterID);
+        counter.prometheusData(sb, counterID, true);
         assertThat(sb.toString(), is(expected));
 
         expected = "# TYPE base_theName_total counter\n"
                 + "# HELP base_theName_total theDescription\n"
                 + "base_theName_total 49\n";
         sb = new StringBuilder();
-        wrappingCounter.prometheusData(sb, wrappingCounterID);
+        wrappingCounter.prometheusData(sb, wrappingCounterID, true);
         assertThat(sb.toString(), is(expected));
     }
 

File: metrics/metrics/src/test/java/io/helidon/metrics/HelidonHistogramTest.java
Patch:
@@ -210,7 +210,7 @@ void testJson() {
     @Test
     void testPrometheus() throws IOException, ParseException {
         final StringBuilder sb = new StringBuilder();
-        histoInt.prometheusData(sb, histoIntID);
+        histoInt.prometheusData(sb, histoIntID, true);
         parsePrometheusText(new LineNumberReader(new StringReader(sb.toString())).lines())
                 .forEach(entry -> assertThat("Unexpected value checking " + entry.getKey(),
                                     EXPECTED_PROMETHEUS_RESULTS.get(entry.getKey()),

File: metrics/metrics/src/test/java/io/helidon/metrics/HelidonMeterTest.java
Patch:
@@ -133,7 +133,7 @@ void testJson() {
     @Test
     void testPrometheus() {
         final StringBuilder sb = new StringBuilder();
-        meter.prometheusData(sb, meterID);
+        meter.prometheusData(sb, meterID, true);
         String data = sb.toString();
 
         assertThat(data, startsWith(EXPECTED_PROMETHEUS_START));

File: metrics/metrics/src/test/java/io/helidon/metrics/HelidonTimerTest.java
Patch:
@@ -198,7 +198,7 @@ void testJson() {
     @Test
     void testPrometheus() {
         final StringBuilder sb = new StringBuilder();
-        dataSetTimer.prometheusData(sb, dataSetTimerID);
+        dataSetTimer.prometheusData(sb, dataSetTimerID, true);
         final String prometheusData = sb.toString();
         assertThat(prometheusData, startsWith("# TYPE application_response_time_rate_per_second gauge\n"
                                                       + "application_response_time_rate_per_second 200.0\n"

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/MetricsTest.java
Patch:
@@ -129,7 +129,7 @@ public void testGaugeMetadata() {
 
         Gauge<Integer> gauge = getMetric(bean, GaugedBean.LOCAL_INJECTABLE_GAUGE_NAME);
         String promData = MetricsSupport.toPrometheusData(
-                new MetricID(GaugedBean.LOCAL_INJECTABLE_GAUGE_NAME), gauge).trim();
+                new MetricID(GaugedBean.LOCAL_INJECTABLE_GAUGE_NAME), gauge, true).trim();
 
         assertThat(promData, containsString("# TYPE application_gaugeForInjectionTest_seconds gauge"));
         assertThat(promData, containsString("\n# HELP application_gaugeForInjectionTest_seconds"));

File: common/reactive/src/main/java/io/helidon/common/reactive/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,6 @@
  * Common reactive library for Helidon projects.
  *
  * @see java.util.concurrent.Flow
- * @see io.helidon.common.reactive.ReactiveStreamsAdapter
  * @see io.helidon.common.reactive.OutputStreamPublisher
- * @see io.helidon.common.reactive.SubmissionPublisher
  */
 package io.helidon.common.reactive;

File: common/reactive/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,6 @@
  */
 module io.helidon.common.reactive {
     requires java.logging;
-    requires org.reactivestreams;
-    requires reactor.core;
     requires io.helidon.common;
     requires io.helidon.common.mapper;
 

File: config/config/src/main/java/io/helidon/config/CompositeConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,11 +26,11 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.Flow;
 import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.internal.ConfigThreadFactory;
 import io.helidon.config.internal.ConfigUtils;
 import io.helidon.config.internal.ObjectNodeImpl;

File: config/config/src/main/java/io/helidon/config/internal/FilesystemWatchPollingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,11 +31,11 @@
 import java.util.concurrent.Flow;
 import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;
 import io.helidon.config.spi.PollingStrategy;

File: config/config/src/main/java/io/helidon/config/internal/ScheduledPollingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,13 +22,13 @@
 import java.util.concurrent.Flow;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BiFunction;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.ConfigHelper;
 import io.helidon.config.spi.PollingStrategy;
 

File: config/config/src/main/java/io/helidon/config/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -113,7 +113,7 @@
  * <h3>Monitoring Changes</h3>
  *
  * The program can react to configuration changes by passing a listener
- * to {@link io.helidon.config.Config#onChange}.
+ * to {@link io.helidon.config.Config#onChange(java.util.function.Consumer)}.
  *
  * <h3 id="conversions">Converting Configuration to Java Types</h3>
  * The {@link io.helidon.config.Config} class provides many methods for converting config

File: config/config/src/main/java/io/helidon/config/spi/AbstractConfigSource.java
Patch:
@@ -41,7 +41,7 @@
  * @param <S> a type of data stamp
  * @see Builder
  */
-public abstract class AbstractConfigSource<S> extends AbstractMpSource<S> implements ConfigSource {
+public abstract class AbstractConfigSource<S> extends AbstractMpSource<S> {
 
     private final Function<Config.Key, String> mediaTypeMapping;
     private final Function<Config.Key, ConfigParser> parserMapping;
@@ -63,6 +63,7 @@ protected AbstractConfigSource(Builder<?, ?, ?> builder) {
     @Override
     public final void init(ConfigContext context) {
         configContext = context;
+        super.init(context);
     }
 
     /**

File: config/config/src/main/java/io/helidon/config/spi/AbstractMpSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,7 +50,7 @@ protected Data<ConfigNode.ObjectNode, S> processLoadedData(Data<ConfigNode.Objec
 
     @Override
     public void init(ConfigContext context) {
-        this.changes().subscribe(new Flow.Subscriber<Optional<ConfigNode.ObjectNode>>() {
+        this.changes().subscribe(new Flow.Subscriber<>() {
             @Override
             public void onSubscribe(Flow.Subscription subscription) {
                 subscription.request(Long.MAX_VALUE);

File: config/config/src/main/java/io/helidon/config/spi/Source.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -70,7 +70,6 @@ default String description() {
     //
 
     @Override
-    @Deprecated
     default Flow.Publisher<Optional<T>> changes() { //TODO later remove, see Changeable interface
         return Flow.Subscriber::onComplete;
     }

File: config/config/src/test/java/io/helidon/config/ConfigSourcePollingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,10 +19,10 @@
 import java.util.Optional;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Flow;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.IntStream;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.spi.ConfigContext;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
 import io.helidon.config.spi.ConfigSource;

File: config/config/src/test/java/io/helidon/config/TestingPollingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,8 @@
 import java.time.Instant;
 import java.util.concurrent.Flow;
 import java.util.concurrent.ForkJoinPool;
+import java.util.concurrent.SubmissionPublisher;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.spi.PollingStrategy;
 
 /**

File: config/config/src/test/java/io/helidon/config/internal/FilesystemWatchPollingStrategyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,9 +26,9 @@
 import java.util.UUID;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Flow;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.spi.PollingStrategy;
 import io.helidon.config.test.infra.TemporaryFolderExt;
 

File: config/config/src/test/java/io/helidon/config/spi/PollingStrategyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,11 +18,10 @@
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Flow;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.IntStream;
 
-import io.helidon.common.reactive.SubmissionPublisher;
-
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;

File: config/config/src/test/java/io/helidon/config/spi/TestingConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,8 @@
 
 import java.time.Instant;
 import java.util.Optional;
+import java.util.concurrent.SubmissionPublisher;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
 import io.helidon.config.spi.ConfigNode.ObjectNode;

File: config/etcd/src/main/java/io/helidon/config/etcd/EtcdWatchPollingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,10 +18,10 @@
 
 import java.time.Instant;
 import java.util.concurrent.Flow;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;
 import io.helidon.config.etcd.EtcdConfigSourceBuilder.EtcdEndpoint;

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/v2/EtcdV2Client.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,12 +22,12 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Flow;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;
 

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/v3/EtcdV3Client.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,11 +21,11 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Flow;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;
 import io.helidon.config.etcd.internal.client.proto.KVGrpc;
@@ -79,6 +79,7 @@ public Long revision(String key) throws EtcdClientException {
             throw new EtcdClientException("Cannot retrieve a value for the key: " + key, e);
         }
     }
+
     @Override
     public String get(String key) throws EtcdClientException {
         RangeRequest.Builder builder = RangeRequest.newBuilder().setKey(ByteString.copyFromUtf8(key));

File: config/etcd/src/test/java/io/helidon/config/etcd/client/MockEtcdClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,9 +23,9 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Flow;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.atomic.AtomicLong;
 
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;
 

File: examples/config/changes/src/main/java/io/helidon/config/examples/changes/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,8 +38,6 @@ private Main() {
      * @throws IOException          in case of IO error
      */
     public static void main(String... args) throws IOException, InterruptedException {
-        // subscribe on config changes using custom Flow.Subscriber
-        new ChangesSubscriberExample().run();
         // subscribe using simple onChange function
         new OnChangeExample().run();
         // use same Supplier instances to get up-to-date value

File: examples/config/changes/src/main/java/io/helidon/config/examples/changes/OnChangeExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,6 @@
 
 package io.helidon.config.examples.changes;
 
-import java.util.function.Function;
 import java.util.logging.Logger;
 
 import io.helidon.config.Config;
@@ -26,7 +25,7 @@
 import static java.time.Duration.ofSeconds;
 
 /**
- * Example shows how to listen on Config node changes using simplified API, {@link Config#onChange(Function)}.
+ * Example shows how to listen on Config node changes using simplified API, {@link Config#onChange(java.util.function.Consumer)}.
  * The Function is invoked with new instance of Config.
  * <p>
  * The feature is based on using {@link io.helidon.config.spi.PollingStrategy} with

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/SubscriberInputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,8 +20,7 @@
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
-
-import io.helidon.common.reactive.SubmissionPublisher;
+import java.util.concurrent.SubmissionPublisher;
 
 import org.junit.jupiter.api.Test;
 

File: webserver/webserver/src/test/java/io/helidon/webserver/NettyWebServerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.Flow.Subscription;
 import java.util.concurrent.ForkJoinPool;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
@@ -33,7 +34,6 @@
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Multi;
-import io.helidon.common.reactive.SubmissionPublisher;
 
 import org.hamcrest.collection.IsCollectionWithSize;
 import org.hamcrest.core.Is;

File: webserver/webserver/src/test/java/io/helidon/webserver/RequestContentTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,13 +30,13 @@
 import java.util.concurrent.Flow.Subscriber;
 import java.util.concurrent.Flow.Subscription;
 import java.util.concurrent.ForkJoinPool;
+import java.util.concurrent.SubmissionPublisher;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.reactive.Multi;
 import io.helidon.common.reactive.Single;
-import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.media.common.ContentReaders;
 import io.helidon.media.common.MediaSupport;
 import io.helidon.media.common.MessageBodyFilter;

File: media/common/src/main/java/io/helidon/media/common/MediaSupport.java
Patch:
@@ -116,7 +116,8 @@ public Builder registerDefaults() {
                     .registerWriter(CharSequenceBodyWriter.create())
                     .registerWriter(ByteChannelBodyWriter.create())
                     .registerWriter(PathBodyWriter.create())
-                    .registerWriter(FileBodyWriter.create());
+                    .registerWriter(FileBodyWriter.create())
+                    .registerWriter(ThrowableBodyWriter.create(false));
             return this;
         }
 

File: microprofile/fault-tolerance/src/main/java/module-info.java
Patch:
@@ -39,5 +39,7 @@
     requires microprofile.metrics.api;
     requires microprofile.fault.tolerance.api;
 
+    exports io.helidon.microprofile.faulttolerance;
+
     provides javax.enterprise.inject.spi.Extension with io.helidon.microprofile.faulttolerance.FaultToleranceExtension;
 }

File: microprofile/server/src/main/java/module-info.java
Patch:
@@ -14,8 +14,6 @@
  * limitations under the License.
  */
 
-import io.helidon.microprofile.server.JaxRsCdiExtension;
-
 /**
  * Implementation of a layer that binds microprofile components together and
  * runs an HTTP server.
@@ -40,7 +38,9 @@
 
     exports io.helidon.microprofile.server;
 
-    provides javax.enterprise.inject.spi.Extension with io.helidon.microprofile.server.ServerCdiExtension, JaxRsCdiExtension;
+    provides javax.enterprise.inject.spi.Extension with
+            io.helidon.microprofile.server.ServerCdiExtension,
+            io.helidon.microprofile.server.JaxRsCdiExtension;
 
     // needed when running with modules - to make private methods accessible
     opens io.helidon.microprofile.server to weld.core.impl;

File: common/http/src/main/java/io/helidon/common/http/DataChunk.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/main/java/io/helidon/common/http/HttpRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/http/src/test/java/io/helidon/common/http/MediaTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -98,7 +98,7 @@ void asPredicate() {
     @Test
     void jsonPredicate() {
         assertThat(MediaType.JSON_PREDICATE.test(MediaType.parse("application/json")), is(true));
-        assertThat(MediaType.JSON_PREDICATE.test(MediaType.parse("application/javascript")), is(true));
+        assertThat(MediaType.JSON_PREDICATE.test(MediaType.parse("application/javascript")), is(false));
         assertThat(MediaType.JSON_PREDICATE.test(MediaType.parse("application/manifest+json")), is(true));
         assertThat(MediaType.JSON_PREDICATE.test(MediaType.parse("application/manifest")), is(false));
     }

File: dbclient/dbclient/src/main/java/io/helidon/dbclient/DbMapperManager.java
Patch:
@@ -31,7 +31,7 @@ public interface DbMapperManager {
     /**
      * Generic type for the {@link io.helidon.dbclient.DbRow} class.
      */
-    GenericType<Object> TYPE_DB_ROW = GenericType.create(DbRow.class);
+    GenericType<DbRow> TYPE_DB_ROW = GenericType.create(DbRow.class);
     /**
      * Generic type for the {@link Map} of String to value pairs for named parameters.
      */

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcStatementQuery.java
Patch:
@@ -236,14 +236,15 @@ public <U> DbRows<U> map(Class<U> type) {
         }
 
         @Override
+        @SuppressWarnings("unchecked")
         public <U> DbRows<U> map(GenericType<U> type) {
             GenericType<T> currentType = this.currentType;
 
             Function<T, U> theMapper;
 
             if (null == currentType) {
                 theMapper = value -> mapperManager.map(value,
-                                                       GenericType.create(value.getClass()),
+                                                       GenericType.<T>create(value.getClass()),
                                                        type);
             } else if (currentType.equals(DbMapperManager.TYPE_DB_ROW)) {
                 // maybe we want the same type
@@ -258,7 +259,7 @@ public <U> DbRows<U> map(GenericType<U> type) {
                     } catch (MapperException originalException) {
                         // not found in db mappers, use generic mappers
                         try {
-                            return mapperManager.map(value,
+                            return mapperManager.map((DbRow) value,
                                                      DbMapperManager.TYPE_DB_ROW,
                                                      type);
                         } catch (MapperException ignored) {

File: dbclient/mongodb/src/main/java/io/helidon/dbclient/mongodb/MongoDbRows.java
Patch:
@@ -106,7 +106,7 @@ public <U> DbRows<U> map(GenericType<U> type) {
 
             if (null == localCurrentType) {
                 theMapper = value -> dbStatement.mapperManager().map(value,
-                                                       GenericType.create(value.getClass()),
+                                                       GenericType.<T>create(value.getClass()),
                                                        type);
             } else if (localCurrentType.equals(DbMapperManager.TYPE_DB_ROW)) {
                 // maybe we want the same type
@@ -121,7 +121,7 @@ public <U> DbRows<U> map(GenericType<U> type) {
                     } catch (MapperException originalException) {
                         // not found in db mappers, use generic mappers
                         try {
-                            return dbStatement.mapperManager().map(value,
+                            return dbStatement.mapperManager().map((DbRow) value,
                                                      DbMapperManager.TYPE_DB_ROW,
                                                      type);
                         } catch (MapperException ignored) {

File: media/common/src/test/java/io/helidon/media/common/ContentReadersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@
 /**
  * Unit test for {@link ContentReaders}.
  */
+@SuppressWarnings("deprecation")
 class ContentReadersTest {
     @Test
     void testStringReader() throws Exception {

File: media/jackson/common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,10 +22,11 @@
 module io.helidon.media.jackson.common {
 
     requires com.fasterxml.jackson.databind;
+    requires com.fasterxml.jackson.core;
     requires io.helidon.common;
     requires io.helidon.common.http;
+    requires io.helidon.common.mapper;
     requires io.helidon.common.reactive;
     requires io.helidon.media.common;
-    
     exports io.helidon.media.jackson.common;
 }

File: media/jsonb/common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
 
     requires io.helidon.common;
     requires io.helidon.common.http;
+    requires io.helidon.common.mapper;
     requires io.helidon.common.reactive;
     requires io.helidon.media.common;
     requires transitive java.json.bind;

File: media/jsonp/common/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,9 +23,10 @@
 
     requires io.helidon.common;
     requires io.helidon.common.http;
+    requires io.helidon.common.mapper;
     requires io.helidon.common.reactive;
     requires io.helidon.media.common;
     requires transitive java.json;
-    
+
     exports io.helidon.media.jsonp.common;
 }

File: webserver/webserver/src/main/java/io/helidon/webserver/HandlerRoute.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/webserver/src/main/java/io/helidon/webserver/HashResponseHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,6 +38,7 @@
 import java.util.stream.Collectors;
 
 import io.helidon.common.http.AlreadyCompletedException;
+import io.helidon.common.http.HashParameters;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
 import io.helidon.common.http.Parameters;

File: webserver/webserver/src/main/java/io/helidon/webserver/Routing.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/webserver/src/main/java/io/helidon/webserver/UriComponent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
 
+import io.helidon.common.http.HashParameters;
 import io.helidon.common.http.Parameters;
 
 /**
@@ -63,7 +64,7 @@ static Parameters decodeQuery(String query, boolean decode) {
      * @return the multivalued map of query parameters.
      */
     static Parameters decodeQuery(String query, boolean decodeNames, boolean decodeValues) {
-        Parameters queryParameters = new HashParameters();
+        Parameters queryParameters = HashParameters.create();
 
         if (query == null || query.isEmpty()) {
             return queryParameters;

File: webserver/webserver/src/test/java/io/helidon/webserver/EncodingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/webserver/src/test/java/io/helidon/webserver/HashRequestHeadersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/main/java/io/helidon/config/BuilderImpl.java
Patch:
@@ -550,8 +550,8 @@ private ConfigSourceConfiguration targetConfigSource(ConfigContext context) {
             envVarAliasGeneratorEnabled = true;
         }
 
-        if (sources.isEmpty()) {
-            // if there are no sources configured, use meta-configuration
+        if (sources.isEmpty() && prioritizedSources.isEmpty()) {
+            // if there are no sources configured, use meta-configuration (only in case we have no prioritized sources)
             targetSources.addAll(MetaConfig.configSources(mediaType -> context.findParser(mediaType).isPresent()));
         } else {
             targetSources.addAll(sources);

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/TestAnnotationRewriting.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -51,7 +51,7 @@
 @DataSourceDefinition(
     name = "test",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:test",
+    url = "jdbc:h2:mem:TestAnnotationRewriting",
     serverName = "",
     properties = {
         "user=sa"

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestCascadePersist.java
Patch:
@@ -57,7 +57,7 @@
 @DataSourceDefinition(
     name = "chirp",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:chirp;INIT=SET TRACE_LEVEL_FILE=4\\;SET DB_CLOSE_DELAY=-1",
+    url = "jdbc:h2:mem:TestCascadePersist;INIT=SET TRACE_LEVEL_FILE=4\\;SET DB_CLOSE_DELAY=-1",
     serverName = "",
     properties = {
         "user=sa"

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestExtendedSynchronizedEntityManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,7 +46,7 @@
 @DataSourceDefinition(
     name = "chirp",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:chirp;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
+    url = "jdbc:h2:mem:TestExtendedSynchronizedEntityManager;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
     serverName = "",
     properties = {
         "user=sa"

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestExtendedUnsynchronizedEntityManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,7 +46,7 @@
 @DataSourceDefinition(
     name = "chirp",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:chirp;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
+    url = "jdbc:h2:mem:TestExtendedUnsynchronizedEntityManager;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
     serverName = "",
     properties = {
         "user=sa"

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestJpaTransactionScopedSynchronizedEntityManager.java
Patch:
@@ -61,7 +61,8 @@
 @DataSourceDefinition(
     name = "chirp",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:chirp;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
+    url = "jdbc:h2:mem:TestJpaTransactionScopedSynchronizedEntityManager;"
+        + "INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
     serverName = "",
     properties = {
         "user=sa"

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestJpaTransactionScopedUnsynchronizedEntityManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,7 +48,8 @@
 @DataSourceDefinition(
     name = "chirp",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:chirp;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
+    url = "jdbc:h2:mem:TestJpaTransactionScopedUnsynchronizedEntityManager;"
+        + "INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
     serverName = "",
     properties = {
         "user=sa"

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestRollbackScenarios.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,7 +50,7 @@
 @DataSourceDefinition(
     name = "chirp",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:chirp;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
+    url = "jdbc:h2:mem:TestRollbackScenarios;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
     serverName = "",
     properties = {
         "user=sa"

File: config/config/src/main/java/io/helidon/config/ClasspathOverrideSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -58,7 +58,7 @@ public Data<OverrideData, Instant> loadData() throws ConfigException {
                                              (inputStreamReader, instant) -> {
                                                  return new Data<>(
                                                          Optional.of(OverrideData.create(inputStreamReader)),
-                                                         instant);
+                                                         Optional.of(instant));
                                              });
     }
 

File: config/etcd/src/main/java/module-info.java
Patch:
@@ -22,13 +22,13 @@
     requires java.logging;
     requires transitive io.helidon.config;
     requires etcd4j;
-    requires io.grpc;
     requires grpc.protobuf;
     requires grpc.stub;
     requires com.google.protobuf;
     requires com.google.common;
     requires io.helidon.common;
     requires io.helidon.common.media.type;
+    requires grpc.api;
 
     exports io.helidon.config.etcd;
 

File: config/etcd/src/test/java/io/helidon/config/etcd/EtcdConfigSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -114,8 +114,8 @@ public void testConfig() {
         when(mockedConfigSource.etcdClient()).thenReturn(etcdClient);
         when(mockedConfigSource.content()).thenReturn(new ConfigParser.Content<Long>() {
             @Override
-            public String mediaType() {
-                return MEDIA_TYPE_APPLICATION_HOCON;
+            public Optional<String> mediaType() {
+                return Optional.of(MEDIA_TYPE_APPLICATION_HOCON);
             }
 
             @Override

File: common/metrics/src/main/java/io/helidon/common/metrics/Loader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -53,6 +53,7 @@ private static io.helidon.common.metrics.InternalBridge loadInternalBridge() {
                 + io.helidon.common.metrics.InternalBridge.class.getName() + " to load");
     }
 
-    private Loader() {}
+    private Loader() {
+    }
 
 }

File: config/config/src/main/java/io/helidon/config/spi/ConfigFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -79,6 +79,7 @@ public interface ConfigFilter {
      *
      * @param config {@code Config} instance under construction
      */
-    default void init(Config config) {}
+    default void init(Config config) {
+    }
 
 }

File: config/test-infrastructure/src/main/java/io/helidon/config/test/infra/TemporaryFolderExt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,7 +50,8 @@ public class TemporaryFolderExt implements BeforeEachCallback, AfterEachCallback
 
     private Path root;
 
-    private TemporaryFolderExt() {}
+    private TemporaryFolderExt() {
+    }
 
     /**
      * Builds an instance of <code>TemporaryFolderExt</code>.

File: examples/openapi/src/main/java/io/helidon/examples/openapi/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,8 @@ public final class Main {
     /**
      * Cannot be instantiated.
      */
-    private Main() { }
+    private Main() {
+    }
 
     /**
      * Application main entry point.

File: examples/quickstarts/helidon-quickstart-mp/src/main/java/io/helidon/examples/quickstart/mp/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,8 @@ public final class Main {
     /**
      * Cannot be instantiated.
      */
-    private Main() { }
+    private Main() {
+    }
 
     /**
      * Application main entry point.

File: examples/quickstarts/helidon-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,8 @@ public final class Main {
     /**
      * Cannot be instantiated.
      */
-    private Main() { }
+    private Main() {
+    }
 
     /**
      * Application main entry point.

File: examples/quickstarts/helidon-standalone-quickstart-mp/src/main/java/io/helidon/examples/quickstart/mp/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,8 @@ public final class Main {
     /**
      * Cannot be instantiated.
      */
-    private Main() { }
+    private Main() {
+    }
 
     /**
      * Application main entry point.

File: examples/quickstarts/helidon-standalone-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,8 @@ public final class Main {
     /**
      * Cannot be instantiated.
      */
-    private Main() { }
+    private Main() {
+    }
 
     /**
      * Application main entry point.

File: examples/todo-app/backend/src/main/java/io/helidon/demo/todos/backend/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,7 +35,8 @@ public final class Main {
     /**
      * Cannot be instantiated.
      */
-    private Main() { }
+    private Main() {
+    }
 
     /**
      * Application main entry point.

File: examples/todo-app/frontend/src/main/java/io/helidon/demo/todos/frontend/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -59,7 +59,8 @@ public final class Main {
     /**
      * Cannot be instantiated.
      */
-    private Main() { }
+    private Main() {
+    }
 
     /**
      * Application main entry point.

File: examples/webserver/streaming/src/main/java/io/helidon/webserver/examples/streaming/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,8 @@ public class Main {
 
     static final String LARGE_FILE_RESOURCE = "/large-file.bin";
 
-    private Main() {}
+    private Main() {
+    }
 
     /**
      * Creates new {@link Routing}.

File: examples/webserver/tutorial/src/main/java/io/helidon/webserver/examples/tutorial/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,8 @@
  */
 public final class Main {
 
-    private Main() {}
+    private Main() {
+    }
 
     static Routing createRouting() {
         UpperXFilter upperXFilter = new UpperXFilter();

File: metrics/prometheus/src/main/java/io/helidon/metrics/prometheus/PrometheusSupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -209,7 +209,8 @@ public static final class Builder implements io.helidon.common.Builder<Prometheu
         private CollectorRegistry registry = CollectorRegistry.defaultRegistry;
         private String path;
 
-        private Builder() {}
+        private Builder() {
+        }
 
         /**
          * Sets collector registry to use, default is {@link CollectorRegistry#defaultRegistry}.

File: webserver/webserver/src/main/java/io/helidon/webserver/HashRequestHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -188,7 +188,8 @@ public Optional<URI> referer() {
      */
     static class CookieParser {
 
-        private CookieParser() {}
+        private CookieParser() {
+        }
 
         private static final String RFC2965_VERSION = "$Version";
         private static final String RFC2965_PATH = "$Path";

File: webserver/webserver/src/main/java/io/helidon/webserver/PathPattern.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -65,7 +65,8 @@ public String param(String name) {
     /**
      * A utility class. Cannot be constructed.
      */
-    private PathPattern() {}
+    private PathPattern() {
+    }
 
     /**
      * Compiles a standard {@link PathMatcher} pattern.

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/AbstractDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcStatementQuery.java
Patch:
@@ -122,7 +122,7 @@ static Map<Long, DbColumn> createMetadata(ResultSet rs) throws SQLException {
         Map<Long, DbColumn> byNumbers = new HashMap<>();
 
         for (int i = 1; i <= columnCount; i++) {
-            String name = metaData.getColumnName(i);
+            String name = metaData.getColumnLabel(i);
             String sqlType = metaData.getColumnTypeName(i);
             Class<?> javaClass = classByName(metaData.getColumnClassName(i));
             DbColumn column = new DbColumn() {

File: config/config/src/main/java/io/helidon/config/ClasspathConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,10 +17,10 @@
 package io.helidon.config;
 
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.time.Instant;
 import java.util.Optional;
 
+import io.helidon.common.media.type.MediaTypes;
 import io.helidon.config.spi.AbstractParsableConfigSource;
 import io.helidon.config.spi.ConfigParser;
 import io.helidon.config.spi.ConfigSource;
@@ -90,7 +90,7 @@ protected String mediaType() {
     }
 
     private Optional<String> probeContentType() {
-        return Optional.ofNullable(ConfigHelper.detectContentType(Paths.get(resource)));
+        return MediaTypes.detectType(resource);
     }
 
     @Override

File: config/config/src/main/java/io/helidon/config/FileConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import io.helidon.common.media.type.MediaTypes;
 import io.helidon.config.internal.FileSourceHelper;
 import io.helidon.config.spi.AbstractParsableConfigSource;
 import io.helidon.config.spi.ConfigParser;
@@ -97,7 +98,7 @@ protected String mediaType() {
     }
 
     private Optional<String> probeContentType() {
-        return Optional.ofNullable(ConfigHelper.detectContentType(filePath));
+        return MediaTypes.detectType(filePath);
     }
 
     @Override

File: config/etcd/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,6 +28,7 @@
     requires com.google.protobuf;
     requires com.google.common;
     requires io.helidon.common;
+    requires io.helidon.common.media.type;
 
     exports io.helidon.config.etcd;
 

File: config/git/src/main/java/io/helidon/config/git/GitConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,9 +34,9 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.HelidonFeatures;
+import io.helidon.common.media.type.MediaTypes;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
-import io.helidon.config.ConfigHelper;
 import io.helidon.config.internal.FileSourceHelper;
 import io.helidon.config.spi.AbstractParsableConfigSource;
 import io.helidon.config.spi.ConfigParser;
@@ -236,7 +236,7 @@ protected String mediaType() {
     }
 
     private Optional<String> probeContentType() {
-        return Optional.ofNullable(ConfigHelper.detectContentType(targetPath));
+        return MediaTypes.detectType(targetPath);
     }
 
     @Override

File: config/git/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
     requires java.logging;
     requires org.eclipse.jgit;
     requires io.helidon.common;
+    requires io.helidon.common.media.type;
 
     exports io.helidon.config.git;
 

File: config/hocon/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,6 +30,5 @@
     exports io.helidon.config.hocon;
 
     provides io.helidon.config.spi.ConfigParser with io.helidon.config.hocon.internal.HoconConfigParser;
-    provides java.nio.file.spi.FileTypeDetector with io.helidon.config.hocon.internal.HoconFileTypeDetector;
 
 }

File: config/yaml/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,6 +29,5 @@
     exports io.helidon.config.yaml;
 
     provides io.helidon.config.spi.ConfigParser with io.helidon.config.yaml.internal.YamlConfigParser;
-    provides java.nio.file.spi.FileTypeDetector with io.helidon.config.yaml.internal.YamlFileTypeDetector;
 
 }

File: examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/IdcsApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.microprofile.example.idcs;
+package io.helidon.examples.microprofile.security.idcs;
 
 import java.util.Set;
 

File: examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,4 +17,4 @@
 /**
  * Example of integration with IDCS (through Open ID Connect).
  */
-package io.helidon.microprofile.example.idcs;
+package io.helidon.examples.microprofile.security.idcs;

File: examples/microprofile/oidc/src/main/java/io/helidon/examples/microprofile/security/oidc/OidcResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.security.examples.oidc;
+package io.helidon.examples.microprofile.security.oidc;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: examples/microprofile/oidc/src/main/java/io/helidon/examples/microprofile/security/oidc/OidcTestApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.security.examples.oidc;
+package io.helidon.examples.microprofile.security.oidc;
 
 import java.util.Set;
 
@@ -23,7 +23,7 @@
 import javax.ws.rs.core.Application;
 
 /**
- * A simple JAX-rs application that just returns the single {@link io.helidon.security.examples.oidc.OidcResource resource}.
+ * A simple JAX-rs application that just returns the single {@link OidcResource resource}.
  */
 @ApplicationScoped
 @ApplicationPath("/")

File: examples/microprofile/oidc/src/main/java/io/helidon/examples/microprofile/security/oidc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,4 +16,4 @@
 /**
  * An OIDC (Open ID Connect) example.
  */
-package io.helidon.security.examples.oidc;
+package io.helidon.examples.microprofile.security.oidc;

File: microprofile/security/src/main/java/io/helidon/microprofile/security/SecurityCdiExtension.java
Patch:
@@ -114,7 +114,7 @@ private void registerSecurity(@Observes @Initialized(ApplicationScoped.class) @P
         Config webServerConfig = config.get("security.web-server");
         if (webServerConfig.exists() && webServerConfig.get("enabled").asBoolean().orElse(true)) {
             server.serverRoutingBuilder()
-                    .register(WebSecurity.create(security, config));
+                    .register(WebSecurity.create(security, config.get("security")));
         }
     }
 

File: security/providers/oidc-common/src/test/java/io/helidon/security/providers/oidc/common/OidcConfigAbstractTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -63,7 +63,7 @@ void testDefaultValues() {
                   () -> assertThat("Base scopes to use", config.baseScopes(), is(OidcConfig.DEFAULT_BASE_SCOPES)),
                   () -> assertThat("Cookie value prefix", config.cookieValuePrefix(), is("JSESSIONID=")),
                   () -> assertThat("Cookie name", config.cookieName(), is(OidcConfig.DEFAULT_COOKIE_NAME)),
-                  () -> assertThat("Cookie options", config.cookieOptions(), is(";Path=/;HttpOnly;SameSite=Strict")),
+                  () -> assertThat("Cookie options", config.cookieOptions(), is(";Path=/;HttpOnly;SameSite=Lax")),
                   () -> assertThat("Audience", config.audience(), is("https://identity.oracle.com")),
                   () -> assertThat("Parameter name", config.paramName(), is("accessToken")),
                   () -> assertThat("Issuer", config.issuer(), nullValue()),

File: common/common/src/main/java/io/helidon/common/LazyValueImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 class LazyValueImpl<T> implements LazyValue<T> {
     private final Lock theLock = new ReentrantLock();
 
-    private volatile T value;
+    private T value;
 
     private Supplier<T> delegate;
     private volatile boolean loaded;

File: config/config/src/main/java/io/helidon/config/internal/FileOverrideSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -80,7 +80,7 @@ public static FileOverrideSource create(Config metaConfig) {
     }
 
     /**
-     * Create a new fluent API builder.
+     * Create a new builder.
      *
      * @return builder to create new instances of file override source
      */

File: config/config/src/main/java/io/helidon/config/spi/AbstractSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -253,7 +253,7 @@ private void processMissingData(ConfigException cause) {
                 } else {
                     LOGGER.log(Level.CONFIG, message + " " + cause.getLocalizedMessage());
                 }
-                LOGGER.log(Level.FINE,
+                LOGGER.log(Level.FINEST,
                            String.format("Load of '%s' source failed with an exception.",
                                          description()),
                            cause);

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/ObjectConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -114,7 +114,7 @@ private static <T> Optional<Function<Config, T>> findStaticStringMethodMapper(Cl
                                                          methodName,
                                                          String.class);
 
-        if (!method.isPresent()) {
+        if (method.isEmpty()) {
             method = findStaticMethod(type,
                                       methodName,
                                       CharSequence.class);

File: config/testing/src/main/java/io/helidon/config/testing/ValueNodeMatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 /**
  * Hamcrest {@link org.hamcrest.Matcher} implementation that matches {@link ConfigNode.ValueNode} value.
  */
-public class ValueNodeMatcher extends BaseMatcher<ConfigNode> {
+public final class ValueNodeMatcher extends BaseMatcher<ConfigNode> {
 
     private String expectedValue;
 

File: examples/microprofile/mp1_1-static-content/src/test/java/io/helidon/microprofile/example/staticc/StaticContentTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 package io.helidon.microprofile.example.staticc;
 
 import java.io.IOException;
-import java.util.logging.LogManager;
 
 import javax.enterprise.inject.se.SeContainer;
 import javax.enterprise.inject.spi.CDI;
@@ -42,7 +41,6 @@
 class StaticContentTest {
     @BeforeAll
     static void initClass() throws IOException {
-        LogManager.getLogManager().readConfiguration(StaticContentTest.class.getResourceAsStream("/logging.properties"));
         Main.main(new String[0]);
     }
 

File: examples/security/attribute-based-access-control/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
     requires cdi.api;
     // implementation of expression language to use (used by the abac provider: policy expression language
     requires javax.el;
-    requires io.helidon.microprofile.v1_2;
+    requires io.helidon.microprofile.bundle;
     // needed for security components and restrictions of this module
     requires io.helidon.security;
     requires io.helidon.security.annotations;

File: metrics/metrics/src/main/java/io/helidon/metrics/EWMA.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: metrics/metrics/src/main/java/io/helidon/metrics/ExponentiallyDecayingReservoir.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: metrics/metrics/src/main/java/io/helidon/metrics/HelidonConcurrentGauge.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018,2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: metrics/metrics/src/main/java/io/helidon/metrics/HelidonMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: metrics/metrics/src/main/java/io/helidon/metrics/RegistryFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -147,7 +147,7 @@ Registry getARegistry(Type type) {
      * for {@link Type#BASE} returns a final registry (cannot register new metrics).
      *
      * @param type type of registry
-     * @return Registry for the type defined.
+     * @return MetricRegistry for the type defined.
      */
     public MetricRegistry getRegistry(Type type) {
         if (type == Type.BASE) {

File: metrics/metrics/src/main/java/io/helidon/metrics/WeightedSnapshot.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: metrics/metrics/src/main/java/io/helidon/metrics/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: metrics/metrics/src/test/java/io/helidon/metrics/HelidonConcurrentGaugeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: metrics/metrics/src/test/java/io/helidon/metrics/HelidonGaugeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: metrics/metrics/src/test/java/io/helidon/metrics/RegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -106,4 +106,4 @@ void testSameIDSameReuseDifferentOtherMetadata() {
                 () -> registry.counter(metadata2, tag1));
         assertThat(ex.getMessage(), containsString("conflicts with"));
     }
-}
\ No newline at end of file
+}

File: metrics/metrics/src/test/java/io/helidon/metrics/TestClock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * TODO javadoc.
+ * TestClock class.
  */
 public class TestClock implements Clock {
     private long nanoTime;

File: microprofile/config/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
     requires javax.inject;
     requires io.helidon.common;
     requires io.helidon.config;
+    requires io.helidon.microprofile.cdi;
     requires microprofile.config.api;
 
     exports io.helidon.microprofile.config;

File: microprofile/fault-tolerance/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,6 +39,5 @@
     requires microprofile.metrics.api;
     requires microprofile.fault.tolerance.api;
 
-    provides io.helidon.microprofile.server.spi.MpService with io.helidon.microprofile.faulttolerance.FaultToleranceMpService;
     provides javax.enterprise.inject.spi.Extension with io.helidon.microprofile.faulttolerance.FaultToleranceExtension;
 }

File: microprofile/grpc/metrics/src/test/java/io/helidon/microprofile/grpc/metrics/MetricsIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
 
 import javax.enterprise.inject.Instance;
 import javax.enterprise.inject.spi.BeanManager;
+import javax.enterprise.inject.spi.CDI;
 import javax.json.Json;
 import javax.json.JsonNumber;
 import javax.json.JsonObject;
@@ -81,7 +82,7 @@ public static void startServer() throws Exception {
         LogManager.getLogManager().readConfiguration(MetricsIT.class.getResourceAsStream("/logging.properties"));
 
         server = Server.create().start();
-        beanManager = server.cdiContainer().getBeanManager();
+        beanManager = CDI.current().getBeanManager();
 
         client = ClientBuilder.newBuilder()
                 .register(new LoggingFeature(LOGGER, Level.WARNING, LoggingFeature.Verbosity.PAYLOAD_ANY, 500))

File: microprofile/grpc/server/src/main/java/io/helidon/microprofile/grpc/server/GrpcServerCdiExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
 import java.util.logging.Logger;
 
 import javax.enterprise.context.ApplicationScoped;
+import javax.enterprise.context.Initialized;
 import javax.enterprise.event.Observes;
 import javax.enterprise.inject.Any;
 import javax.enterprise.inject.Instance;
@@ -67,7 +68,7 @@ public class GrpcServerCdiExtension
     private GrpcServer server;
 
 
-    private void startServer(@Observes AfterDeploymentValidation event, BeanManager beanManager) {
+    private void startServer(@Observes @Initialized(ApplicationScoped.class) Object event, BeanManager beanManager) {
         GrpcRouting.Builder routingBuilder = discoverGrpcRouting(beanManager);
 
         Config config = resolveConfig(beanManager);

File: microprofile/grpc/server/src/test/java/io/helidon/microprofile/grpc/server/GrpcServerCdiExtensionIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.enterprise.inject.Instance;
 import javax.enterprise.inject.spi.BeanManager;
+import javax.enterprise.inject.spi.CDI;
 import javax.inject.Inject;
 
 import io.helidon.grpc.server.GrpcServer;
@@ -59,7 +60,7 @@ public class GrpcServerCdiExtensionIT {
     @BeforeAll
     public static void startServer() {
         server = Server.create().start();
-        beanManager = server.cdiContainer().getBeanManager();
+        beanManager = CDI.current().getBeanManager();
     }
 
     @AfterAll

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiCoupledProcessor.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * Coupled processor sends items received to the passed in subscriber, and emits items received from the passed in publisher.
- * <pre>
+ * <pre>{@code
  *     +
  *     |  Inlet/upstream publisher
  * +-------+
@@ -36,7 +36,7 @@
  * +-------+
  *     |  Outlet/downstream subscriber
  *     v
- * </pre>
+ * }</pre>
  *
  * @param <T> Inlet and passed in subscriber item type
  * @param <R> Outlet and passed in publisher item type

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTakeWhileProcessor.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Take the longest prefix of elements from this stream that satisfy the given predicate.
  *
- * @param <T> <T> Item type
+ * @param <T> Item type
  */
 public class MultiTakeWhileProcessor<T> extends BufferedProcessor<T, T> implements Multi<T> {
     private Predicate<T> predicate;
@@ -36,7 +36,7 @@ private MultiTakeWhileProcessor(Predicate<T> predicate) {
      * Create new {@link MultiTakeWhileProcessor}.
      *
      * @param predicate provided predicate to filter stream with
-     * @param <T>       <T> Item type
+     * @param <T>       Item type
      * @return {@link MultiTakeWhileProcessor}
      */
     public static <T> MultiTakeWhileProcessor<T> create(Predicate<T> predicate) {

File: common/reactive/src/main/java/io/helidon/common/reactive/StreamValidationUtils.java
Patch:
@@ -60,7 +60,7 @@ public static <T> boolean checkRecursionDepth(int maxDepth, BiConsumer<Long, Thr
      * Validation of Reactive Streams Specification for JVM rule 3.9.
      * <br>
      * While the {@code Subscription} is not cancelled, {@code Subscription.request(long n)}
-     * MUST signal onError with a {@link java.lang.IllegalArgumentException} if the argument is <= 0.
+     * MUST signal onError with a {@link java.lang.IllegalArgumentException} if the argument is less or equal to 0.
      * The cause message SHOULD explain that non-positive request signals are illegal.
      *
      * @param requestParam number of requested items to be validated.

File: common/reactive/src/test/java/io/helidon/common/reactive/BaseProcessorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/webserver/src/main/java/io/helidon/webserver/HttpRequestScopedPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/BackPressureOverflowException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/BaseProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -55,8 +55,8 @@ public BaseProcessor() {
 
     @Override
     public void request(long n) {
-        StreamValidationUtils.checkRequestParam309(n, this::failAndCancel);
-        StreamValidationUtils.checkRecursionDepth303(5, (actDepth, t) -> failAndCancel(t));
+        StreamValidationUtils.checkRequestParam(n, this::failAndCancel);
+        StreamValidationUtils.checkRecursionDepth(5, (actDepth, t) -> failAndCancel(t));
         requested.increment(n, this::failAndCancel);
         tryRequest(subscription);
         if (done) {

File: common/reactive/src/main/java/io/helidon/common/reactive/BufferedProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/ConcatPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -59,7 +59,7 @@ public void subscribe(Flow.Subscriber<? super T> subscriber) {
         subscriber.onSubscribe(new Flow.Subscription() {
             @Override
             public void request(long n) {
-                if (!StreamValidationUtils.checkRequestParam309(n, subscriber::onError)) {
+                if (!StreamValidationUtils.checkRequestParam(n, subscriber::onError)) {
                     return;
                 }
                 requested.set(n);

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiMapProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiOnErrorResumeProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiTappedProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: common/reactive/src/main/java/io/helidon/common/reactive/RequestedCounter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@ public class RequestedCounter {
      * process errors
      */
     public void increment(long increment, Consumer<? super IllegalArgumentException> errorHandler) {
-        if (!StreamValidationUtils.checkRequestParam309(increment, errorHandler)) {
+        if (!StreamValidationUtils.checkRequestParam(increment, errorHandler)) {
             return;
         }
 

File: common/reactive/src/main/java/io/helidon/common/reactive/StreamValidationUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,7 +43,7 @@ private StreamValidationUtils() {
      * @return true if valid
      * @see <a href="https://github.com/reactive-streams/reactive-streams-jvm#3.3">reactive-streams/reactive-streams-jvm#3.3</a>
      */
-    public static <T> boolean checkRecursionDepth303(int maxDepth, BiConsumer<Long, Throwable> onExceeded) {
+    public static <T> boolean checkRecursionDepth(int maxDepth, BiConsumer<Long, Throwable> onExceeded) {
         Long recursionDepth = getRecursionDepth();
         if (recursionDepth > maxDepth) {
             Optional.of(onExceeded)
@@ -68,7 +68,7 @@ public static <T> boolean checkRecursionDepth303(int maxDepth, BiConsumer<Long,
      * @return true if requested parameter is valid
      * @see <a href="https://github.com/reactive-streams/reactive-streams-jvm#3.9">reactive-streams/reactive-streams-jvm#3.9</a>
      */
-    public static boolean checkRequestParam309(long requestParam, Consumer<? super IllegalArgumentException> onExceeded) {
+    public static boolean checkRequestParam(long requestParam, Consumer<? super IllegalArgumentException> onExceeded) {
         if (requestParam <= 0) {
             Optional.of(onExceeded)
                     .ifPresent(onExc -> onExc

File: common/reactive/src/main/java/io/helidon/common/reactive/SubscriberReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c)  2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,11 +27,11 @@ private SubscriberReference(Flow.Subscriber<T> subscriber) {
         this.subscriber = Optional.of(subscriber);
     }
 
-    public static <T> SubscriberReference<T> create(Flow.Subscriber<T> subscriber) {
+    static <T> SubscriberReference<T> create(Flow.Subscriber<T> subscriber) {
         return new SubscriberReference<>(subscriber);
     }
 
-    public void releaseReference() {
+    void releaseReference() {
         this.subscriber = Optional.empty();
     }
 

File: common/reactive/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,5 +25,4 @@
     requires io.helidon.common.mapper;
 
     exports io.helidon.common.reactive;
-    exports io.helidon.common.reactive.valve;
 }

File: microprofile/rest-client/src/main/java/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
     requires transitive microprofile.rest.client.api;
     requires io.helidon.common.context;
     requires jersey.mp.rest.client;
+    requires java.ws.rs;
 
     provides org.eclipse.microprofile.rest.client.spi.RestClientListener
             with io.helidon.microprofile.restclient.MpRestClientListener;

File: webserver/webserver/src/main/java/io/helidon/webserver/RequestRouting.java
Patch:
@@ -365,6 +365,7 @@ private void defaultHandler(Throwable t) {
                                                         "handler.class", "DEFAULT-ERROR-HANDLER",
                                                         "handled.error.message", t.toString()));
             }
+            String message = null;
             try {
                 if (t instanceof HttpException) {
                     response.status(((HttpException) t).status());
@@ -380,13 +381,14 @@ private void defaultHandler(Throwable t) {
 
                     response.status(Http.Status.INTERNAL_SERVER_ERROR_500);
                 }
+                message = t.getMessage();
             } catch (AlreadyCompletedException e) {
                 LOGGER.log(Level.WARNING,
                            "Cannot perform error handling of the throwable (see cause of this exception) because headers "
                                    + "were already sent",
                            new IllegalStateException("Headers already sent. Cannot handle the cause of this exception.", t));
             }
-            response.send().exceptionally(throwable -> {
+            response.send(message).exceptionally(throwable -> {
                 LOGGER.log(Level.WARNING, "Default error handler: Response wasn't successfully sent.", throwable);
                 return null;
             });

File: microprofile/metrics2/src/main/java/io/helidon/microprofile/metrics/InterceptorConcurrentGauge.java
Patch:
@@ -40,6 +40,7 @@ final class InterceptorConcurrentGauge
         super(registry,
                 ConcurrentGauge.class,
                 ConcurrentGauge::name,
+                ConcurrentGauge::tags,
                 ConcurrentGauge::absolute,
                 MetricRegistry::getConcurrentGauges,
                 CONCURRENT_GAUGE.toString());

File: microprofile/metrics2/src/main/java/io/helidon/microprofile/metrics/InterceptorCounted.java
Patch:
@@ -38,6 +38,7 @@ final class InterceptorCounted extends InterceptorBase<Counter, Counted> {
         super(registry,
               Counted.class,
               Counted::name,
+              Counted::tags,
               Counted::absolute,
               MetricRegistry::getCounters,
               "counter");

File: microprofile/metrics2/src/main/java/io/helidon/microprofile/metrics/InterceptorMetered.java
Patch:
@@ -38,6 +38,7 @@ final class InterceptorMetered extends InterceptorBase<Meter, Metered> {
         super(registry,
               Metered.class,
               Metered::name,
+              Metered::tags,
               Metered::absolute,
               MetricRegistry::getMeters,
               "meter");

File: microprofile/metrics2/src/main/java/io/helidon/microprofile/metrics/InterceptorTimed.java
Patch:
@@ -38,6 +38,7 @@ final class InterceptorTimed extends InterceptorBase<Timer, Timed> {
         super(registry,
               Timed.class,
               Timed::name,
+              Timed::tags,
               Timed::absolute,
               MetricRegistry::getTimers,
               "timer");

File: microprofile/metrics2/src/test/java/io/helidon/microprofile/metrics/ReusabilityMpServiceTest.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class ReusabilityMpServiceTest {
 
-    private Server initServer(Class<?> resourceClass) {
+    static Server initServer(Class<?> resourceClass) {
         return Server.builder()
                 .addResourceClass(resourceClass)
                 .host("localhost")

File: config/etcd/src/main/java/module-info.java
Patch:
@@ -25,7 +25,7 @@
     requires io.grpc;
     requires grpc.protobuf;
     requires grpc.stub;
-    requires protobuf.java;
+    requires com.google.protobuf;
     requires com.google.common;
     requires io.helidon.common;
 

File: grpc/core/src/main/java/module-info.java
Patch:
@@ -34,7 +34,7 @@
     requires transitive io.grpc;
     requires io.netty.handler;
     requires io.netty.transport;
-    requires transitive protobuf.java;
+    requires transitive com.google.protobuf;
 
     requires java.annotation;
     requires java.logging;

File: microprofile/grpc/server/src/main/java/module-info.java
Patch:
@@ -27,7 +27,7 @@
 
     requires transitive io.grpc;
     requires grpc.protobuf.lite;
-    requires protobuf.java;
+    requires com.google.protobuf;
 
     requires java.logging;
 
@@ -36,4 +36,4 @@
 
     provides javax.enterprise.inject.spi.Extension
             with io.helidon.microprofile.grpc.server.GrpcServerCdiExtension;
-}
\ No newline at end of file
+}

File: common/common/src/main/java/io/helidon/common/Errors.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@
 @SuppressWarnings("WeakerAccess")
 public final class Errors extends LinkedList<Errors.ErrorMessage> {
     private static final Set<StackWalker.Option> WALKER_OPTIONS =
-            CollectionsHelper.setOf(StackWalker.Option.RETAIN_CLASS_REFERENCE);
+            Set.of(StackWalker.Option.RETAIN_CLASS_REFERENCE);
 
     private final boolean hasFatal;
     private final boolean hasWarning;

File: common/configurable/src/test/java/io/helidon/common/configurable/ThreadPoolSupplierTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
@@ -33,7 +34,6 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.CollectionsHelper.mapOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.CoreMatchers.startsWith;
@@ -120,7 +120,7 @@ public void close() throws SecurityException {
 
         try {
             log.addHandler(handler);
-            Config config = Config.create(ConfigSources.create(mapOf(thresholdKey, threshold, rateKey, rate)));
+            Config config = Config.create(ConfigSources.create(Map.of(thresholdKey, threshold, rateKey, rate)));
             ExecutorService executor = ThreadPoolSupplier.create(config).get();
             Optional<ThreadPool> asThreadPool = ThreadPool.asThreadPool(executor);
             ThreadPool pool = asThreadPool.orElseThrow(() -> new RuntimeException("not a thread pool"));

File: common/http/src/main/java/io/helidon/common/http/FormParamsImpl.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * Implementation of the {@link FormParams} interface.
  */
@@ -33,7 +31,7 @@ class FormParamsImpl extends ReadOnlyParameters implements FormParams {
      * For form params represented in text/plain (uncommon), newlines appear between name=value
      * assignments. When urlencoded, ampersands separate the name=value assignments.
      */
-    private static final Map<MediaType, Pattern> PATTERNS = CollectionsHelper.mapOf(
+    private static final Map<MediaType, Pattern> PATTERNS = Map.of(
             MediaType.APPLICATION_FORM_URLENCODED, preparePattern("&"),
             MediaType.TEXT_PLAIN, preparePattern("\n"));
 

File: common/key-util/src/test/java/io/helidon/common/pki/KeyConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,9 +19,9 @@
 import java.security.cert.X509Certificate;
 import java.security.interfaces.RSAPrivateKey;
 import java.security.interfaces.RSAPublicKey;
+import java.util.List;
 import java.util.Optional;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.configurable.Resource;
 import io.helidon.config.Config;
 
@@ -175,6 +175,6 @@ void testPemConfigNoPasswordNoChain() {
 
         assertThat(conf.publicKey(), is(Optional.empty()));
         assertThat(conf.publicCert(), is(Optional.empty()));
-        assertThat("Cert chain must be empty", conf.certChain(), is(CollectionsHelper.listOf()));
+        assertThat("Cert chain must be empty", conf.certChain(), is(List.of()));
     }
 }

File: common/mapper/src/main/java/io/helidon/common/mapper/MapperManagerImpl.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import io.helidon.common.GenericType;
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.mapper.spi.MapperProvider;
 
 /**
@@ -112,14 +111,14 @@ private <SOURCE, TARGET> Mapper<SOURCE, TARGET> findMapper(GenericType<SOURCE> s
     private <SOURCE, TARGET> Optional<Mapper<?, ?>> fromProviders(Class<SOURCE> sourceType,
                                                                             Class<TARGET> targetType) {
         return providers.stream()
-                .flatMap(provider -> OptionalHelper.from(provider.mapper(sourceType, targetType)).stream())
+                .flatMap(provider -> provider.mapper(sourceType, targetType).stream())
                 .findFirst();
     }
 
     private <SOURCE, TARGET> Optional<Mapper<?, ?>> fromProviders(GenericType<SOURCE> sourceType,
                                                                             GenericType<TARGET> targetType) {
         return providers.stream()
-                .flatMap(provider -> OptionalHelper.from(provider.mapper(sourceType, targetType)).stream())
+                .flatMap(provider -> provider.mapper(sourceType, targetType).stream())
                 .findFirst();
     }
 

File: common/reactive/src/main/java/io/helidon/common/reactive/Multi.java
Patch:
@@ -22,8 +22,6 @@
 
 import io.helidon.common.mapper.Mapper;
 
-import static io.helidon.common.CollectionsHelper.listOf;
-
 /**
  * Multiple items publisher facility.
  * @param <T> item type
@@ -115,7 +113,7 @@ static <T> Multi<T> just(Collection<T> items) {
      */
     @SafeVarargs
     static <T> Multi<T> just(T... items) {
-        return new MultiFromPublisher<>(new FixedItemsPublisher<>(listOf(items)));
+        return new MultiFromPublisher<>(new FixedItemsPublisher<>(List.of(items)));
     }
 
     /**

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTest.java
Patch:
@@ -23,7 +23,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.CollectionsHelper.listOf;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.hasItems;
 import static org.hamcrest.CoreMatchers.instanceOf;
@@ -50,7 +49,7 @@ public void testJust() {
     @Test
     public void testJustCollection() {
         MultiTestSubscriber<String> subscriber = new MultiTestSubscriber<>();
-        Multi.<String>just(listOf("foo", "bar")).subscribe(subscriber);
+        Multi.<String>just(List.of("foo", "bar")).subscribe(subscriber);
         assertThat(subscriber.isComplete(), is(equalTo(true)));
         assertThat(subscriber.getLastError(), is(nullValue()));
         assertThat(subscriber.getItems(), hasItems("foo", "bar"));

File: common/reactive/src/test/java/io/helidon/common/reactive/valve/ValvePublisherTest.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.CollectionsHelper.listOf;
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.hasItems;
 import static org.hamcrest.CoreMatchers.instanceOf;
@@ -169,7 +168,7 @@ public void onComplete() {
     void multipleSubscribers() throws Exception {
         Tank<String> stringTank = new Tank<>(10);
 
-        stringTank.addAll(listOf("1", "2", "3"));
+        stringTank.addAll(List.of("1", "2", "3"));
         stringTank.close();
 
         Multi<String> multi = Multi.from(stringTank.toPublisher());
@@ -189,7 +188,7 @@ void multipleSubscribers() throws Exception {
     void multiplePublishers() throws Exception {
         Tank<String> stringTank = new Tank<>(10);
 
-        stringTank.addAll(listOf("1", "2", "3"));
+        stringTank.addAll(List.of("1", "2", "3"));
         stringTank.close();
 
         assertThat(Multi.from(stringTank.toPublisher()).collect(new StringCollector<>()).get(10, TimeUnit.SECONDS), is("123"));

File: config/config/src/main/java/io/helidon/config/ClasspathConfigSource.java
Patch:
@@ -21,7 +21,6 @@
 import java.time.Instant;
 import java.util.Optional;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.config.spi.AbstractParsableConfigSource;
 import io.helidon.config.spi.ConfigParser;
 import io.helidon.config.spi.ConfigSource;
@@ -85,9 +84,8 @@ protected String uid() {
 
     @Override
     protected String mediaType() {
-        return OptionalHelper.from(Optional.ofNullable(super.mediaType()))
+        return Optional.ofNullable(super.mediaType())
                 .or(this::probeContentType)
-                .asOptional()
                 .orElse(null);
     }
 

File: config/config/src/main/java/io/helidon/config/ConfigFactory.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.spi.ConfigFilter;
 import io.helidon.config.spi.ConfigNode;
@@ -298,7 +297,7 @@ private static Map<String, String> loadMap(Optional<ObjectNode> item) {
                 processNode(values, "", node);
                 return values;
             } else {
-                return CollectionsHelper.mapOf();
+                return Map.of();
             }
         }
 

File: config/config/src/main/java/io/helidon/config/ConfigMappers.java
Patch:
@@ -63,8 +63,6 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * Utility methods for converting configuration to Java types.
  * <p>
@@ -760,7 +758,7 @@ static class StringMap extends AbstractMap<String, String> implements Map<String
         }
 
         StringMap(String key, String value) {
-            this(CollectionsHelper.setOf(CollectionsHelper.mapEntry(key, value)));
+            this(Set.of(Map.entry(key, value)));
         }
 
         StringMap(Map<?, ?> unknownMap) {

File: config/config/src/main/java/io/helidon/config/ConfigSources.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.function.Supplier;
 
 import io.helidon.common.Builder;
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.internal.ConfigUtils;
 import io.helidon.config.internal.MapConfigSource;
 import io.helidon.config.internal.PrefixedConfigSource;
@@ -337,7 +336,7 @@ public static UrlConfigSource.UrlBuilder url(URL url) {
      */
     @SafeVarargs
     public static CompositeBuilder create(Supplier<? extends ConfigSource>... configSources) {
-        return create(CollectionsHelper.listOf(configSources));
+        return create(List.of(configSources));
     }
 
     /**

File: config/config/src/main/java/io/helidon/config/FileConfigSource.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.config.internal.FileSourceHelper;
 import io.helidon.config.spi.AbstractParsableConfigSource;
 import io.helidon.config.spi.ConfigParser;
@@ -92,9 +91,8 @@ protected String uid() {
 
     @Override
     protected String mediaType() {
-        return OptionalHelper.from(Optional.ofNullable(super.mediaType()))
+        return Optional.ofNullable(super.mediaType())
                 .or(this::probeContentType)
-                .asOptional()
                 .orElse(null);
     }
 

File: config/config/src/main/java/io/helidon/config/MetaConfig.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.function.Function;
 import java.util.logging.Logger;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.spi.ConfigParser;
 import io.helidon.config.spi.ConfigSource;
@@ -151,8 +150,8 @@ static List<ConfigSource> configSources(Function<String, Boolean> supportedMedia
         return metaConfigOpt
                 .map(MetaConfig::configSources)
                 .orElseGet(() -> MetaConfigFinder.findConfigSource(supportedMediaType)
-                        .map(CollectionsHelper::listOf)
-                        .orElseGet(CollectionsHelper::listOf));
+                        .map(List::of)
+                        .orElseGet(List::of));
 
     }
 

File: config/config/src/main/java/io/helidon/config/MetaConfigFinder.java
Patch:
@@ -28,8 +28,6 @@
 import io.helidon.common.media.type.MediaTypes;
 import io.helidon.config.spi.ConfigSource;
 
-import static io.helidon.common.CollectionsHelper.listOf;
-
 /**
  * Utility class that locates the meta configuration source.
  */
@@ -40,7 +38,7 @@ final class MetaConfigFinder {
     public static final String META_CONFIG_SYSTEM_PROPERTY = "io.helidon.config.meta-config";
 
     private static final Logger LOGGER = Logger.getLogger(MetaConfigFinder.class.getName());
-    private static final List<String> CONFIG_SUFFIXES = listOf("yaml", "conf", "json", "properties");
+    private static final List<String> CONFIG_SUFFIXES = List.of("yaml", "conf", "json", "properties");
     private static final String META_CONFIG_PREFIX = "meta-config.";
     private static final String CONFIG_PREFIX = "application.";
 

File: config/config/src/main/java/io/helidon/config/MetaProviders.java
Patch:
@@ -26,7 +26,6 @@
 
 import javax.annotation.Priority;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.internal.FileOverrideSource;
 import io.helidon.config.internal.PrefixedConfigSource;
@@ -141,7 +140,7 @@ private static final class BuiltInPollingStrategyProvider implements PollingStra
         private static final String WATCH_TYPE = "watch";
 
         private static final Map<String, Function<Config, Function<Object, PollingStrategy>>> BUILT_IN =
-                CollectionsHelper.mapOf(
+                Map.of(
                         REGULAR_TYPE, config -> target -> PollingStrategies.ScheduledBuilder.create(config).build(),
                         WATCH_TYPE, config -> BuiltInPollingStrategyProvider::watchStrategy
                 );
@@ -194,7 +193,7 @@ public RetryPolicy create(String type, Config metaConfig) {
 
         @Override
         public Set<String> supported() {
-            return CollectionsHelper.setOf(REPEAT_TYPE);
+            return Set.of(REPEAT_TYPE);
         }
     }
 

File: config/config/src/main/java/io/helidon/config/internal/AbstractNodeBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,10 +16,10 @@
 
 package io.helidon.config.internal;
 
+import java.util.Map;
 import java.util.Objects;
 import java.util.function.Function;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.ConfigException;
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigNode.ListNode;
@@ -155,7 +155,7 @@ protected B deepMerge(MergingKey key, MergeableNode node) {
     }
 
     private void mergeValueMember(ValueNode member, MergingKey key, MergeableNode node, ID id) {
-        ObjectNode on = ObjectNodeBuilderImpl.create(CollectionsHelper.mapOf(), tokenResolver).value(member.get()).build();
+        ObjectNode on = ObjectNodeBuilderImpl.create(Map.of(), tokenResolver).value(member.get()).build();
         ConfigNode merged = ObjectNodeBuilderImpl
                 .create(on, tokenResolver) // make copy of member
                 .value(on.get())

File: config/config/src/main/java/io/helidon/config/internal/FilesystemWatchPollingStrategy.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;
@@ -225,7 +224,7 @@ private void register() throws IOException {
             Path dir = parentDir(target);
             WatchKey oldWatchKey = watchKey;
             watchKey = dir.register(watchService,
-                                    CollectionsHelper.listOf(ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY)
+                                    List.of(ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY)
                                             .toArray(new WatchEvent.Kind[0]),
                                     watchServiceModifiers.toArray(new WatchEvent.Modifier[0]));
             if (oldWatchKey != null) {

File: config/config/src/main/java/io/helidon/config/internal/ObjectNodeBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import java.util.Map;
 import java.util.function.Function;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.ConfigException;
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigNode.ListNode;
@@ -108,7 +107,7 @@ protected String id(MergingKey key) {
 
     @Override
     protected MergeableNode member(String name) {
-        return members.computeIfAbsent(name, (k) -> new ObjectNodeImpl(CollectionsHelper.mapOf(), tokenResolver()));
+        return members.computeIfAbsent(name, (k) -> new ObjectNodeImpl(Map.of(), tokenResolver()));
     }
 
     @Override

File: config/config/src/main/java/io/helidon/config/internal/PropertiesConfigParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 
 import javax.annotation.Priority;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.ConfigHelper;
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigParser;
@@ -54,7 +53,7 @@ public class PropertiesConfigParser implements ConfigParser {
      */
     public static final int PRIORITY = ConfigParser.PRIORITY + 100;
 
-    private static final Set<String> SUPPORTED_MEDIA_TYPES = CollectionsHelper.setOf(MEDIA_TYPE_TEXT_JAVA_PROPERTIES);
+    private static final Set<String> SUPPORTED_MEDIA_TYPES = Set.of(MEDIA_TYPE_TEXT_JAVA_PROPERTIES);
 
     @Override
     public Set<String> supportedMediaTypes() {

File: config/config/src/main/java/io/helidon/config/spi/AbstractMpSource.java
Patch:
@@ -24,8 +24,6 @@
 import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicReference;
 
-import io.helidon.common.CollectionsHelper;
-
 import org.eclipse.microprofile.config.spi.ConfigSource;
 
 /**
@@ -104,7 +102,7 @@ private static Map<String, String> loadMap(Optional<ConfigNode.ObjectNode> item)
             processNode(values, "", node);
             return values;
         } else {
-            return CollectionsHelper.mapOf();
+            return Map.of();
         }
     }
 

File: config/config/src/main/java/io/helidon/config/spi/AbstractParsableConfigSource.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.Optional;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
@@ -95,10 +94,9 @@ protected ConfigParser parser() {
      * @throws ConfigParserException in case of problem to parse configuration from the source
      */
     private ObjectNode parse(ConfigContext context, ConfigParser.Content<S> content) throws ConfigParserException {
-        return OptionalHelper.from(Optional.ofNullable(parser()))
+        return Optional.ofNullable(parser())
                 .or(() -> context.findParser(Optional.ofNullable(content.mediaType())
                                                      .orElseThrow(() -> new ConfigException("Unknown media type."))))
-                .asOptional()
                 .map(parser -> parser.parse(content))
                 .orElseThrow(() -> new ConfigException("Cannot find suitable parser for '"
                                                                + content.mediaType() + "' media type."));

File: config/config/src/main/java/io/helidon/config/spi/ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import java.util.function.BiFunction;
 import java.util.function.Function;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.GenericType;
 import io.helidon.config.Config;
 
@@ -73,7 +72,7 @@ public interface ConfigMapperProvider {
      * {@link #mapper(Class)} is used instead
      */
     default Map<GenericType<?>, BiFunction<Config, ConfigMapper, ?>> genericTypeMappers() {
-        return CollectionsHelper.mapOf();
+        return Map.of();
     }
 
     /**

File: config/config/src/main/java/io/helidon/config/spi/OverrideSource.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
 
@@ -156,7 +155,7 @@ public static OverrideData create(Reader reader) {
          * @return an empty object
          */
         public static OverrideData empty() {
-            return new OverrideData(CollectionsHelper.listOf());
+            return new OverrideData(List.of());
         }
 
         /**

File: config/config/src/test/java/io/helidon/config/AbstractConfigImplTestBase.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import io.helidon.common.CollectionsHelper;
-
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -157,7 +155,7 @@ void testConfigValueConvert() {
     //
 
     public static List<String> objectNames(int level) {
-        return CollectionsHelper.listOf("text-" + level + "@VALUE",
+        return List.of("text-" + level + "@VALUE",
                        "object-" + level + "@OBJECT",
                        "list-" + level + "@LIST",
                        "bool-" + level + "@VALUE",

File: config/config/src/test/java/io/helidon/config/CompositeConfigSourceTest.java
Patch:
@@ -21,13 +21,13 @@
 import java.time.Duration;
 import java.time.Instant;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.Flow;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.internal.PropertiesConfigParser;
 import io.helidon.config.spi.ConfigContext;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
@@ -69,7 +69,7 @@ public void testDescription() throws MalformedURLException {
         ConfigSource configSource = ConfigSources.create()
                 .add(ConfigSources.classpath("application.conf"))
                 .add(ConfigSources.create(ObjectNode.builder().addValue("prop1", "1").build()))
-                .add(ConfigSources.create(CollectionsHelper.mapOf()))
+                .add(ConfigSources.create(Map.of()))
                 .add(ConfigSources.create(ObjectNode.builder().addValue("prop1", "2").build()))
                 .build();
 

File: config/config/src/test/java/io/helidon/config/ConfigChangesTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
 import io.helidon.config.spi.TestingConfigSource;
@@ -287,7 +286,7 @@ public void testChangesJustSingleSubscriptionOnConfigSource() throws Interrupted
         assertThat(configSource.isCancelPollingStrategyInvoked(), is(false));
 
         List<TestingConfigChangeSubscriber> subscribers = new LinkedList<>();
-        CollectionsHelper.listOf("", "key1", "sub.key1", "", "key1").forEach(key -> {
+        List.of("", "key1", "sub.key1", "", "key1").forEach(key -> {
             TestingConfigChangeSubscriber subscriber = new TestingConfigChangeSubscriber();
             config.get(key).changes().subscribe(subscriber);
             subscribers.add(subscriber);

File: config/config/src/test/java/io/helidon/config/ConfigObjectImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
-import static io.helidon.common.CollectionsHelper.listOf;
 import static io.helidon.config.Config.Type.OBJECT;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.both;
@@ -231,7 +230,7 @@ protected String[] itemNames() {
 
     @Override
     protected ObjectConfigBean[] expectedObjectConfigBeans() {
-        return listOf(
+        return List.of(
                 new ObjectConfigBean("fromConfig", "key:double-" + level() + "@VALUE"),
                 new ObjectConfigBean("fromConfig", "key:bool-" + level() + "@VALUE"),
                 new ObjectConfigBean("fromConfig", "key:object-" + level() + "@OBJECT"),

File: config/config/src/test/java/io/helidon/config/HybridNodeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,9 +17,9 @@
 package io.helidon.config;
 
 import java.util.LinkedHashMap;
+import java.util.List;
 import java.util.Map;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.internal.MapConfigSource;
 import io.helidon.config.spi.ConfigContext;
 import io.helidon.config.spi.ConfigNode;
@@ -95,6 +95,6 @@ public void testListNodeValue() {
     public void testListValue() {
         assertThat("app1.node1.value should be reachable as list",
                    config.get("app1.node1.value").asList(Integer.class).get(),
-                   is(CollectionsHelper.listOf(14, 15, 16)));
+                   is(List.of(14, 15, 16)));
     }
 }

File: config/config/src/test/java/io/helidon/config/UseFirstAvailableConfigSourceTest.java
Patch:
@@ -16,9 +16,9 @@
 
 package io.helidon.config;
 
+import java.util.List;
 import java.util.Optional;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.spi.ConfigContext;
 
 import org.junit.jupiter.api.Test;
@@ -45,7 +45,7 @@ public void testDescriptionAvailable() {
         );
 
         assertThat(configSource.description(),
-                   stringContainsInOrder(CollectionsHelper.listOf(
+                   stringContainsInOrder(List.of(
                            "ClasspathConfig[application.yaml]?->ClasspathConfig[",
                            "io/helidon/config/application.properties]?->ClasspathConfig[",
                            "io/helidon/config/application.conf]->ClasspathConfig[",
@@ -57,7 +57,7 @@ public void testDescriptionAvailable() {
         configSource.init(context);
         configSource.load();
         assertThat(configSource.description(),
-                   stringContainsInOrder(CollectionsHelper.listOf(
+                   stringContainsInOrder(List.of(
                            "(ClasspathConfig[application.yaml]?)->*ClasspathConfig[",
                            "io/helidon/config/application.properties]?*->/ClasspathConfig[",
                            "io/helidon/config/application.conf]/->/ClasspathConfig[",

File: config/config/src/test/java/io/helidon/config/internal/OverrideConfigFilterTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.util.AbstractMap;
 import java.util.LinkedHashMap;
+import java.util.List;
 import java.util.stream.Collectors;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.OverrideSource;
 
@@ -49,7 +49,7 @@ public void testCreateFilterWithNullParam() {
 
     @Test
     public void testCreateFilterWithEmptyParam() {
-        OverrideConfigFilter filter = new OverrideConfigFilter(CollectionsHelper::listOf);
+        OverrideConfigFilter filter = new OverrideConfigFilter(List::of);
 
         assertThat(filter, notNullValue());
         assertThat(filter.apply(Config.Key.create("name"), "ondrej"), is("ondrej"));

File: config/config/src/test/java/io/helidon/config/internal/OverrideSourcesTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.Map;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.OverrideSources;
 import io.helidon.config.spi.OverrideSource;
@@ -45,7 +45,7 @@ public void testEmptyIsAlwaysTheSameInstance() {
 
     @Test
     public void testFromWildcards() {
-        OverrideSource overrideSource = OverrideSources.create(CollectionsHelper.mapOf(WILDCARDS, "localhost"));
+        OverrideSource overrideSource = OverrideSources.create(Map.of(WILDCARDS, "localhost"));
         assertThat(overrideSource.load()
                            .get()
                            .data()

File: config/config/src/test/java/io/helidon/config/spi/AbstractConfigSourceTest.java
Patch:
@@ -16,12 +16,12 @@
 
 package io.helidon.config.spi;
 
+import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Flow;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigParsers;
 import io.helidon.config.ConfigSources;
@@ -161,7 +161,7 @@ public void testMediaTypeAndParserMapping() {
                 .thenReturn(Optional.of(new ConfigParser() { //NOT used parser
                     @Override
                     public Set<String> supportedMediaTypes() {
-                        return CollectionsHelper.setOf(MEDIA_TYPE_TEXT_JAVA_PROPERTIES);
+                        return Set.of(MEDIA_TYPE_TEXT_JAVA_PROPERTIES);
                     }
 
                     @Override
@@ -188,7 +188,7 @@ public ObjectNode parse(Content content) throws ConfigParserException {
     @Test
     public void testInitAll() {
         TestingConfigSource.TestingBuilder builder = TestingConfigSource.builder().config(Config.create(ConfigSources.create(
-                CollectionsHelper.mapOf("media-type-mapping.yaml", "application/x-yaml",
+                Map.of("media-type-mapping.yaml", "application/x-yaml",
                        "media-type-mapping.password", "application/base64"))));
 
         //media-type-mapping

File: config/config/src/test/java/io/helidon/config/spi/AbstractSourceTest.java
Patch:
@@ -17,13 +17,13 @@
 package io.helidon.config.spi;
 
 import java.time.Instant;
+import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigSources;
@@ -132,7 +132,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {
     public void testInitAll() {
         TestingSource.TestingBuilder builder = TestingSource.builder().config(
                 Config.builder(ConfigSources.create(
-                        CollectionsHelper.mapOf("optional", "true")))
+                        Map.of("optional", "true")))
                         .addMapper(TestingRetryPolicy.class, config -> new TestingRetryPolicy())
                         .addMapper(TestingPollingStrategy.class, config -> new TestingPollingStrategy())
                         .build()

File: config/encryption/src/main/java/io/helidon/config/encryption/EncryptionUtil.java
Patch:
@@ -35,7 +35,6 @@
 import javax.crypto.spec.PBEKeySpec;
 import javax.crypto.spec.SecretKeySpec;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.configurable.Resource;
 import io.helidon.common.pki.KeyConfig;
 import io.helidon.config.Config;
@@ -282,7 +281,7 @@ static String decryptAes(char[] masterPassword, String encryptedBase64) throws C
     }
 
     static Optional<char[]> resolveMasterPassword(boolean requireEncryption, Config config) {
-        Optional<char[]> result = OptionalHelper.from(getEnv(ConfigProperties.MASTER_PASSWORD_ENV_VARIABLE))
+        Optional<char[]> result = getEnv(ConfigProperties.MASTER_PASSWORD_ENV_VARIABLE)
                 .or(() -> {
                     ConfigValue<String> value = config.get(ConfigProperties.MASTER_PASSWORD_CONFIG_KEY).asString();
                     if (value.isPresent()) {
@@ -295,7 +294,6 @@ static Optional<char[]> resolveMasterPassword(boolean requireEncryption, Config
                     }
                     return value.asOptional();
                 })
-                .asOptional()
                 .map(String::toCharArray);
 
         if (!result.isPresent()) {

File: config/encryption/src/test/java/io/helidon/config/encryption/RsaLegacySecureConfigTest.java
Patch:
@@ -17,6 +17,7 @@
 package io.helidon.config.encryption;
 
 import java.util.List;
+import java.util.Map;
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
@@ -25,7 +26,6 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.CollectionsHelper.mapOf;
 import static io.helidon.config.encryption.AbstractSecureConfigTest.TEST_STRING;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -47,7 +47,7 @@ public static void initClass() {
         configRequiresEncryption = Config.builder()
                 .sources(ConfigSources.create(
                         //override require encryption
-                        ConfigSources.create(mapOf(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
+                        ConfigSources.create(Map.of(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
                         ConfigSources.classpath("application.yaml")))
                 .build().get("rsa-legacy");
 

File: config/encryption/src/test/java/io/helidon/config/encryption/RsaSecureConfigTest.java
Patch:
@@ -17,6 +17,7 @@
 package io.helidon.config.encryption;
 
 import java.util.List;
+import java.util.Map;
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
@@ -25,7 +26,6 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.CollectionsHelper.mapOf;
 import static io.helidon.config.encryption.AbstractSecureConfigTest.TEST_STRING;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -47,7 +47,7 @@ public static void initClass() {
         configRequiresEncryption = Config.builder()
                 .sources(ConfigSources.create(
                         //override require encryption
-                        ConfigSources.create(mapOf(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
+                        ConfigSources.create(Map.of(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
                         ConfigSources.classpath("application.yaml")))
                 .build().get("rsa-current");
 

File: config/encryption/src/test/java/io/helidon/config/encryption/SecureConfigFromConfigTest.java
Patch:
@@ -16,13 +16,14 @@
 
 package io.helidon.config.encryption;
 
+import java.util.Map;
+
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.CollectionsHelper.mapOf;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
@@ -39,7 +40,7 @@ public static void initClass() {
         configRequiresEncryption = Config.builder()
                 .sources(ConfigSources.create(
                         //override require encryption
-                        ConfigSources.create(mapOf(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
+                        ConfigSources.create(Map.of(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
                         ConfigSources.classpath("application.yaml")))
                 .build().get("aes-current");
 

File: config/encryption/src/test/java/io/helidon/config/encryption/SecureLegacyConfigFromConfigTest.java
Patch:
@@ -16,13 +16,14 @@
 
 package io.helidon.config.encryption;
 
+import java.util.Map;
+
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import static io.helidon.common.CollectionsHelper.mapOf;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
@@ -39,7 +40,7 @@ public static void initClass() {
         configRequiresEncryption = Config.builder()
                 .sources(ConfigSources.create(
                         //override require encryption
-                        ConfigSources.create(mapOf(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
+                        ConfigSources.create(Map.of(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
                         ConfigSources.classpath("application.yaml")))
                 .build()
                 .get("aes-legacy");

File: config/etcd/src/main/java/io/helidon/config/etcd/EtcdConfigSource.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;
@@ -58,9 +57,8 @@ public class EtcdConfigSource extends AbstractParsableConfigSource<Long> {
 
     @Override
     protected String mediaType() {
-        return OptionalHelper.from(Optional.ofNullable(super.mediaType()))
+        return Optional.ofNullable(super.mediaType())
                 .or(this::probeContentType)
-                .asOptional()
                 .orElse(null);
     }
 

File: config/etcd/src/main/java/io/helidon/config/etcd/EtcdConfigSourceProvider.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigSource;
 import io.helidon.config.spi.ConfigSourceProvider;
@@ -40,6 +39,6 @@ public ConfigSource create(String type, Config metaConfig) {
 
     @Override
     public Set<String> supported() {
-        return CollectionsHelper.setOf(TYPE);
+        return Set.of(TYPE);
     }
 }

File: config/etcd/src/main/java/io/helidon/config/etcd/EtcdPollingStrategyProvider.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.PollingStrategy;
 import io.helidon.config.spi.PollingStrategyProvider;
@@ -51,6 +50,6 @@ public Function<Object, PollingStrategy> create(String type, Config metaConfig)
 
     @Override
     public Set<String> supported() {
-        return CollectionsHelper.setOf(TYPE);
+        return Set.of(TYPE);
     }
 }

File: config/etcd/src/test/java/io/helidon/config/etcd/client/EtcdClientIT.java
Patch:
@@ -18,14 +18,14 @@
 
 import java.lang.reflect.InvocationTargetException;
 import java.net.URI;
+import java.util.List;
 import java.util.Random;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;
 import io.helidon.config.etcd.internal.client.v2.EtcdV2Client;
@@ -48,7 +48,7 @@ public class EtcdClientIT {
     private static final URI uri = URI.create("http://localhost:2379");
 
     private static Stream<Class<? extends EtcdClient>> clients() {
-        return CollectionsHelper.listOf(EtcdV2Client.class, EtcdV3Client.class).stream();
+        return List.of(EtcdV2Client.class, EtcdV3Client.class).stream();
     }
 
     @ParameterizedTest

File: config/git/src/main/java/io/helidon/config/git/GitConfigSource.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;
@@ -226,9 +225,8 @@ protected String uid() {
 
     @Override
     protected String mediaType() {
-        return OptionalHelper.from(Optional.ofNullable(super.mediaType()))
+        return Optional.ofNullable(super.mediaType())
                 .or(this::probeContentType)
-                .asOptional()
                 .orElse(null);
     }
 

File: config/git/src/main/java/io/helidon/config/git/GitConfigSourceProvider.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigSource;
 import io.helidon.config.spi.ConfigSourceProvider;
@@ -40,6 +39,6 @@ public ConfigSource create(String type, Config metaConfig) {
 
     @Override
     public Set<String> supported() {
-        return CollectionsHelper.setOf(TYPE);
+        return Set.of(TYPE);
     }
 }

File: config/hocon/src/main/java/io/helidon/config/hocon/internal/HoconConfigParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 
 import javax.annotation.Priority;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;
 import io.helidon.config.spi.ConfigNode.ListNode;
@@ -70,7 +69,7 @@ public class HoconConfigParser implements ConfigParser {
     public static final int PRIORITY = ConfigParser.PRIORITY + 100;
 
     private static final Set<String> SUPPORTED_MEDIA_TYPES =
-            CollectionsHelper.setOf(MEDIA_TYPE_APPLICATION_HOCON, MEDIA_TYPE_APPLICATION_JSON);
+            Set.of(MEDIA_TYPE_APPLICATION_HOCON, MEDIA_TYPE_APPLICATION_JSON);
 
     private final boolean resolvingEnabled;
     private final ConfigResolveOptions resolveOptions;

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/Value.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -75,7 +75,7 @@
  *                 implements Supplier{@literal <List<Integer>>} {
  *         {@literal @}Override
  *         public List{@literal <Integer>} get() {
- *             return CollectionsHelper.listOf(0, 10);
+ *             return List.of(0, 10);
  *         }
  *     }
  * }

File: config/object-mapping/src/test/java/io/helidon/config/objectmapping/ObjectConfigMapperProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 import io.helidon.config.ConfigValue;
@@ -52,7 +51,7 @@ class ObjectConfigMapperProviderTest {
     static void initClass() {
         provider = new ObjectConfigMapperProvider();
         empty = Config.empty();
-        Map<String, String> configMap = CollectionsHelper.mapOf(
+        Map<String, String> configMap = Map.of(
                 Configurables.WithCreateConfig.CONFIG_KEY, TEST_MESSAGE
         );
         full = Config.builder(ConfigSources.create(configMap))

File: config/tests/module-mappers-1-base/src/main/java/io/helidon/config/tests/module/mappers1/Mappers1ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 import javax.annotation.Priority;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigMapperProvider;
 
@@ -35,7 +34,7 @@ public class Mappers1ConfigMapperProvider implements ConfigMapperProvider {
 
     @Override
     public Map<Class<?>, Function<Config, ?>> mappers() {
-        return CollectionsHelper.mapOf(Logger.class, new LoggerConfigMapper(),
+        return Map.of(Logger.class, new LoggerConfigMapper(),
                       Locale.class, new LocaleConfigMapper());
     }
 }

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/Mappers2Priority100ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,6 @@
 
 import javax.annotation.Priority;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigMapperProvider;
 
@@ -34,7 +33,7 @@ public class Mappers2Priority100ConfigMapperProvider implements ConfigMapperProv
 
     @Override
     public Map<Class<?>, Function<Config, ?>> mappers() {
-        return CollectionsHelper.mapOf(Logger.class, new LoggerConfigMapper());
+        return Map.of(Logger.class, new LoggerConfigMapper());
     }
 
 }

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/Mappers2Priority150ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 
 import javax.annotation.Priority;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigMapperProvider;
 
@@ -35,7 +34,7 @@ public class Mappers2Priority150ConfigMapperProvider implements ConfigMapperProv
 
     @Override
     public Map<Class<?>, Function<Config, ?>> mappers() {
-        return CollectionsHelper.mapOf(OptionalInt.class, new OptionalIntConfigMapper(),
+        return Map.of(OptionalInt.class, new OptionalIntConfigMapper(),
                       Integer.class, new IntegerConfigMapper(),
                       BigInteger.class, new BigIntegerConfigMapper());
     }

File: config/tests/module-mappers-2-override/src/main/java/io/helidon/config/tests/module/mappers2/Mappers2Priority50ConfigMapperProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,6 @@
 
 import javax.annotation.Priority;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigMapperProvider;
 
@@ -34,7 +33,7 @@ public class Mappers2Priority50ConfigMapperProvider implements ConfigMapperProvi
 
     @Override
     public Map<Class<?>, Function<Config, ?>> mappers() {
-        return CollectionsHelper.mapOf(Locale.class, new LocaleConfigMapper());
+        return Map.of(Locale.class, new LocaleConfigMapper());
     }
 
 }

File: config/tests/module-meta-source-1/src/main/java/io/helidon/config/tests/module/meta1/MyConfigSource1Provider.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigSource;
 import io.helidon.config.spi.ConfigSourceProvider;
@@ -40,6 +39,6 @@ public ConfigSource create(String type, Config metaConfig) {
 
     @Override
     public Set<String> supported() {
-        return CollectionsHelper.setOf(TYPE);
+        return Set.of(TYPE);
     }
 }

File: config/tests/module-meta-source-2/src/main/java/io/helidon/config/tests/module/meta2/MyConfigSource2Provider.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.spi.ConfigSource;
 import io.helidon.config.spi.ConfigSourceProvider;
@@ -40,6 +39,6 @@ public ConfigSource create(String type, Config metaConfig) {
 
     @Override
     public Set<String> supported() {
-        return CollectionsHelper.setOf(PROVIDER_TYPE);
+        return Set.of(PROVIDER_TYPE);
     }
 }

File: config/tests/module-parsers-1-override/src/main/java/io/helidon/config/tests/module/parsers1/AbstractParsers1ConfigParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 import java.util.Properties;
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.ConfigHelper;
 import io.helidon.config.spi.ConfigNode;
 import io.helidon.config.spi.ConfigNode.ValueNode;
@@ -36,7 +35,7 @@ public abstract class AbstractParsers1ConfigParser implements ConfigParser {
 
     @Override
     public Set<String> supportedMediaTypes() {
-        return CollectionsHelper.setOf(MEDIA_TYPE_TEXT_JAVA_PROPERTIES);
+        return Set.of(MEDIA_TYPE_TEXT_JAVA_PROPERTIES);
     }
 
     @Override

File: config/tests/test-mappers-1-common/src/test/java/io/helidon/config/tests/mappers1/AbstractMapperServicesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,9 +17,9 @@
 package io.helidon.config.tests.mappers1;
 
 import java.util.Locale;
+import java.util.Map;
 import java.util.logging.Logger;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
@@ -33,7 +33,7 @@ public abstract class AbstractMapperServicesTest {
 
     protected Config.Builder configBuilder() {
         return Config.builder()
-                .sources(ConfigSources.create(CollectionsHelper.mapOf(
+                .sources(ConfigSources.create(Map.of(
                         LOGGER_KEY, this.getClass().getName(),
                         LOCALE_KEY + ".language", "cs",
                         LOCALE_KEY + ".country", "CZ",

File: config/tests/test-mappers-2-complex/src/test/java/io/helidon/config/tests/mappers2/AbstractDifferentIntMapperServicesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,9 +17,9 @@
 package io.helidon.config.tests.mappers2;
 
 import java.math.BigInteger;
+import java.util.Map;
 import java.util.OptionalInt;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
@@ -40,7 +40,7 @@ public abstract class AbstractDifferentIntMapperServicesTest {
 
     protected Config.Builder configBuilder() {
         return Config.builder()
-                .sources(ConfigSources.create(CollectionsHelper.mapOf(KEY, CONFIGURED_VALUE)));
+                .sources(ConfigSources.create(Map.of(KEY, CONFIGURED_VALUE)));
     }
 
     abstract protected int expected();

File: config/tests/test-mappers-2-complex/src/test/java/io/helidon/config/tests/mappers2/AbstractMapperServicesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,9 +17,9 @@
 package io.helidon.config.tests.mappers2;
 
 import java.util.Locale;
+import java.util.Map;
 import java.util.logging.Logger;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
@@ -33,7 +33,7 @@ public abstract class AbstractMapperServicesTest {
 
     protected Config.Builder configBuilder() {
         return Config.builder()
-                .sources(ConfigSources.create(CollectionsHelper.mapOf(
+                .sources(ConfigSources.create(Map.of(
                         LOGGER_KEY, this.getClass().getName(),
                         LOCALE_KEY + ".language", "cs",
                         LOCALE_KEY + ".country", "CZ",

File: config/yaml/src/main/java/io/helidon/config/yaml/internal/YamlConfigParser.java
Patch:
@@ -22,7 +22,6 @@
 
 import javax.annotation.Priority;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;
 import io.helidon.config.spi.ConfigNode.ListNode;
@@ -58,7 +57,7 @@ public class YamlConfigParser implements ConfigParser {
      */
     public static final int PRIORITY = ConfigParser.PRIORITY + 100;
 
-    private static final Set<String> SUPPORTED_MEDIA_TYPES = CollectionsHelper.setOf(MEDIA_TYPE_APPLICATION_YAML);
+    private static final Set<String> SUPPORTED_MEDIA_TYPES = Set.of(MEDIA_TYPE_APPLICATION_YAML);
 
     /**
      * Default constructor needed by Java Service loader.

File: examples/config/mapping/src/main/java/io/helidon/config/examples/mapping/BuilderExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.function.Supplier;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 import io.helidon.config.objectmapping.Value;
@@ -178,7 +177,7 @@ public AppConfig build() {
         public static class DefaultBasicRangeSupplier implements Supplier<List<Integer>> {
             @Override
             public List<Integer> get() {
-                return CollectionsHelper.listOf(-10, 10);
+                return List.of(-10, 10);
             }
         }
     }

File: examples/config/mapping/src/main/java/io/helidon/config/examples/mapping/DeserializationExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.function.Supplier;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 import io.helidon.config.objectmapping.Value;
@@ -140,7 +139,7 @@ public String toString() {
         public static class DefaultBasicRangeSupplier implements Supplier<List<Integer>> {
             @Override
             public List<Integer> get() {
-                return CollectionsHelper.listOf(-10, 10);
+                return List.of(-10, 10);
             }
         }
     }

File: examples/config/mapping/src/main/java/io/helidon/config/examples/mapping/FactoryMethodExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.function.Supplier;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 import io.helidon.config.objectmapping.Value;
@@ -123,7 +122,7 @@ public static AppConfig create(@Value(key = "greeting", withDefault = "Hi")
         public static class DefaultBasicRangeSupplier implements Supplier<List<Integer>> {
             @Override
             public List<Integer> get() {
-                return CollectionsHelper.listOf(-10, 10);
+                return List.of(-10, 10);
             }
         }
     }

File: examples/grpc/microprofile/basic-client/src/main/java/io/helidon/microprofile/grpc/example/client/Client.java
Patch:
@@ -25,7 +25,6 @@
 import javax.enterprise.inject.se.SeContainerInitializer;
 import javax.inject.Inject;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.microprofile.grpc.client.GrpcChannel;
 import io.helidon.microprofile.grpc.client.GrpcServiceProxy;
 
@@ -98,7 +97,7 @@ public void clientStreaming() throws Exception {
         FutureObserver responses = new FutureObserver();
         StreamObserver<String> requests = stringService.join(responses);
 
-        List<String> joinValues = CollectionsHelper.listOf("A", "B", "C", "D");
+        List<String> joinValues = List.of("A", "B", "C", "D");
 
         // stream the values to the server
         joinValues.forEach(requests::onNext);
@@ -115,7 +114,7 @@ public void clientStreaming() throws Exception {
      * @throws Exception if the call fails
      */
     public void bidirectional() throws Exception {
-        List<String> valuesToStream = CollectionsHelper.listOf("A", "B", "C", "D");
+        List<String> valuesToStream = List.of("A", "B", "C", "D");
         FutureStreamingObserver responses = new FutureStreamingObserver();
 
         StreamObserver<String> requests = stringService.echo(responses);

File: examples/grpc/security-abac/src/main/java/io/helidon/grpc/examples/security/abac/AtnProvider.java
Patch:
@@ -31,9 +31,9 @@
 import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.Set;
 import java.util.stream.Collectors;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.EndpointConfig;
@@ -125,7 +125,7 @@ private Subject buildSubject(Auth authentication) {
 
     @Override
     public Collection<Class<? extends Annotation>> supportedAnnotations() {
-        return CollectionsHelper.setOf(Authentication.class);
+        return Set.of(Authentication.class);
     }
 
     /**

File: examples/microprofile/openapi-basic/src/main/java/io/helidon/microprofile/examples/openapi/basic/GreetApplication.java
Patch:
@@ -22,8 +22,6 @@
 import javax.ws.rs.ApplicationPath;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * Simple Application that produces a greeting message.
  */
@@ -33,6 +31,6 @@ public class GreetApplication extends Application {
 
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(GreetResource.class);
+        return Set.of(GreetResource.class);
     }
 }

File: examples/quickstarts/helidon-standalone-quickstart-mp/src/main/java/io/helidon/examples/quickstart/mp/GreetApplication.java
Patch:
@@ -22,8 +22,6 @@
 import javax.ws.rs.ApplicationPath;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * Simple Application that produces a greeting message.
  */
@@ -33,6 +31,6 @@ public class GreetApplication extends Application {
 
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(GreetResource.class);
+        return Set.of(GreetResource.class);
     }
 }

File: examples/security/attribute-based-access-control/src/main/java/io/helidon/security/examples/abac/AbacApplication.java
Patch:
@@ -21,8 +21,6 @@
 import javax.ws.rs.ApplicationPath;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * Application class of this MP application.
  */
@@ -31,6 +29,6 @@
 public class AbacApplication extends Application {
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(AbacResource.class, AbacExplicitResource.class);
+        return Set.of(AbacResource.class, AbacExplicitResource.class);
     }
 }

File: examples/security/attribute-based-access-control/src/main/java/io/helidon/security/examples/abac/AtnProvider.java
Patch:
@@ -29,8 +29,8 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.ListIterator;
+import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.Grant;
@@ -95,7 +95,7 @@ private Subject buildSubject(Authentication authentication) {
 
     @Override
     public Collection<Class<? extends Annotation>> supportedAnnotations() {
-        return CollectionsHelper.setOf(Authentication.class);
+        return Set.of(Authentication.class);
     }
 
     /**

File: examples/security/nohttp-programmatic/src/main/java/io/helidon/security/examples/security/MyProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 import java.util.Base64;
 import java.util.List;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.AuthorizationResponse;
 import io.helidon.security.EndpointConfig;
@@ -43,7 +42,7 @@ class MyProvider extends SynchronousProvider implements AuthenticationProvider,
     @Override
     protected AuthenticationResponse syncAuthenticate(ProviderRequest providerRequest) {
         //get username and password
-        List<String> headers = providerRequest.env().headers().getOrDefault("authorization", CollectionsHelper.listOf());
+        List<String> headers = providerRequest.env().headers().getOrDefault("authorization", List.of());
         if (headers.isEmpty()) {
             return AuthenticationResponse.failed("No authorization header");
         }

File: examples/security/oidc/src/main/java/io/helidon/security/examples/oidc/OidcTestApplication.java
Patch:
@@ -22,8 +22,6 @@
 import javax.ws.rs.ApplicationPath;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * A simple JAX-rs application that just returns the single {@link io.helidon.security.examples.oidc.OidcResource resource}.
  */
@@ -33,6 +31,6 @@ public class OidcTestApplication extends Application {
 
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(OidcResource.class);
+        return Set.of(OidcResource.class);
     }
 }

File: examples/security/spi-examples/src/main/java/io/helidon/security/examples/spi/AtnProviderSync.java
Patch:
@@ -26,8 +26,8 @@
 import java.util.Collection;
 import java.util.List;
 import java.util.Optional;
+import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.EndpointConfig;
@@ -96,7 +96,7 @@ private AtnObject getCustomObject(EndpointConfig epConfig) {
 
     @Override
     public Collection<Class<? extends Annotation>> supportedAnnotations() {
-        return CollectionsHelper.setOf(AtnAnnot.class);
+        return Set.of(AtnAnnot.class);
     }
 
     /**

File: examples/security/spi-examples/src/test/java/io/helidon/security/examples/spi/OutboundProviderSyncTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,9 +16,9 @@
 
 package io.helidon.security.examples.spi;
 
+import java.util.List;
 import java.util.Optional;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.OutboundSecurityResponse;
 import io.helidon.security.Principal;
@@ -76,6 +76,6 @@ public void testSuccess() {
         OutboundSecurityResponse response = ops.syncOutbound(request, SecurityEnvironment.create(), EndpointConfig.create());
 
         assertThat(response.status(), is(SecurityResponse.SecurityStatus.SUCCESS));
-        assertThat(response.requestHeaders().get("X-AUTH-USER"), is(CollectionsHelper.listOf(username)));
+        assertThat(response.requestHeaders().get("X-AUTH-USER"), is(List.of(username)));
     }
 }

File: examples/security/webserver-signatures/src/main/java/io/helidon/security/examples/signatures/SignatureExampleUtil.java
Patch:
@@ -23,7 +23,6 @@
 import javax.ws.rs.client.Client;
 import javax.ws.rs.client.ClientBuilder;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.http.MediaType;
 import io.helidon.security.SecurityContext;
 import io.helidon.webserver.Routing;
@@ -82,7 +81,7 @@ static void processService1Request(ServerRequest req, ServerResponse res, String
 
         res.headers().contentType(MediaType.TEXT_PLAIN.withCharset("UTF-8"));
 
-        OptionalHelper.from(securityContext).ifPresentOrElse(context -> {
+        securityContext.ifPresentOrElse(context -> {
             CLIENT.target("http://localhost:" + svc2port + path)
                     .request()
                     .rx()

File: examples/todo-app/backend/src/main/java/io/helidon/demo/todos/backend/DbService.java
Patch:
@@ -19,13 +19,13 @@
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.function.Supplier;
 
 import javax.enterprise.context.ApplicationScoped;
 import javax.inject.Inject;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.security.SecurityException;
 
@@ -157,8 +157,8 @@ private static <T> T execute(final SpanContext tracingSpan,
             return supplier.get();
         } catch (Exception e) {
             Tags.ERROR.set(span, true);
-            span.log(CollectionsHelper.mapOf("event", "error",
-                                             "error.object", e));
+            span.log(Map.of("event", "error",
+                            "error.object", e));
             throw e;
         } finally {
             span.finish();

File: examples/todo-app/backend/src/main/java/io/helidon/demo/todos/backend/Main.java
Patch:
@@ -17,12 +17,12 @@
 package io.helidon.demo.todos.backend;
 
 import java.io.IOException;
+import java.util.List;
 import java.util.logging.LogManager;
 
 import io.helidon.config.Config;
 import io.helidon.microprofile.server.Server;
 
-import static io.helidon.common.CollectionsHelper.listOf;
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.environmentVariables;
 import static io.helidon.config.ConfigSources.file;
@@ -67,7 +67,7 @@ public static void main(final String[] args) throws IOException {
      */
     static Config buildConfig() {
         return Config.builder()
-                .sources(listOf(
+                .sources(List.of(
                         environmentVariables(),
                         // expected on development machine
                         // to override props for dev

File: examples/todo-app/frontend/src/main/java/io/helidon/demo/todos/frontend/BackendServiceClient.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.helidon.demo.todos.frontend;
 
+import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.CompletionStage;
 import java.util.logging.Level;
@@ -29,7 +30,6 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.Response.Status;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.http.Http;
 import io.helidon.config.Config;
 import io.helidon.security.SecurityContext;
@@ -104,8 +104,8 @@ public CompletionStage<JsonArray> getAll(final SpanContext spanContext) {
         result.thenAccept(ignored -> span.finish())
                 .exceptionally(t -> {
                     Tags.ERROR.set(span, true);
-                    span.log(CollectionsHelper.mapOf("event", "error",
-                                                     "error.object", t));
+                    span.log(Map.of("event", "error",
+                                    "error.object", t));
                     LOGGER.log(Level.WARNING,
                                "Failed to invoke getAll() on "
                                        + serviceEndpoint + "/api/backend", t);

File: examples/todo-app/frontend/src/main/java/io/helidon/demo/todos/frontend/Main.java
Patch:
@@ -17,6 +17,7 @@
 package io.helidon.demo.todos.frontend;
 
 import java.io.IOException;
+import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.LogManager;
 import java.util.logging.Logger;
@@ -39,7 +40,6 @@
 import io.opentracing.Tracer;
 import org.glassfish.jersey.logging.LoggingFeature;
 
-import static io.helidon.common.CollectionsHelper.listOf;
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.environmentVariables;
 import static io.helidon.config.ConfigSources.file;
@@ -173,7 +173,7 @@ private static void started(final WebServer webServer,
      */
     private static Config buildConfig() {
         return Config.builder()
-                .sources(listOf(
+                .sources(List.of(
                         environmentVariables(),
                         // expected on development machine
                         // to override props for dev

File: examples/webserver/comment-aas/src/main/java/io/helidon/webserver/examples/comments/Main.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Optional;
 import java.util.concurrent.CompletionException;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.http.Http;
 import io.helidon.config.Config;
 import io.helidon.webserver.HttpException;
@@ -68,9 +67,8 @@ static Routing createRouting(boolean acceptAnonymousUsers) {
         return Routing.builder()
                 // Filter that translates user identity header into the contextual "user" information
                 .any((req, res) -> {
-                    String user = OptionalHelper.from(req.headers().first("user-identity"))
+                    String user = req.headers().first("user-identity")
                             .or(() -> acceptAnonymousUsers ? Optional.of("anonymous") : Optional.empty())
-                            .asOptional()
                             .orElseThrow(() -> new HttpException("Anonymous access is forbidden!", Http.Status.FORBIDDEN_403));
 
                     req.context().register("user", user);

File: grpc/metrics/src/test/java/io/helidon/grpc/metrics/GrpcMetricsInterceptorIT.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.Map;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.metrics.InternalBridge.MetricID;
 import io.helidon.grpc.server.GrpcService;
 import io.helidon.grpc.server.MethodDescriptor;
@@ -181,7 +180,7 @@ public void shouldApplyTags() throws Exception {
                 .build();
 
         MethodDescriptor methodDescriptor = descriptor.method("barTags");
-        Map<String, String> tags = CollectionsHelper.mapOf("one", "t1", "two", "t2");
+        Map<String, String> tags = Map.of("one", "t1", "two", "t2");
         GrpcMetrics metrics = GrpcMetrics.counted().tags(tags);
 
         ServerCall<String, String> call = call(metrics, methodDescriptor);

File: grpc/server/src/main/java/io/helidon/grpc/server/SSLContextBuilder.java
Patch:
@@ -33,7 +33,6 @@
 import javax.net.ssl.TrustManagerFactory;
 
 import io.helidon.common.Builder;
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.pki.KeyConfig;
 import io.helidon.config.Config;
 
@@ -186,7 +185,7 @@ private static TrustManagerFactory buildTmf(KeyConfig trustConfig)
         List<X509Certificate> certs;
 
         if (trustConfig == null) {
-            certs = CollectionsHelper.listOf();
+            certs = List.of();
         } else {
             certs = trustConfig.certs();
         }

File: grpc/server/src/test/java/io/helidon/grpc/server/BindableServiceImplTest.java
Patch:
@@ -16,7 +16,8 @@
 
 package io.helidon.grpc.server;
 
-import io.helidon.common.CollectionsHelper;
+import java.util.List;
+
 import io.helidon.grpc.core.InterceptorPriorities;
 import io.helidon.grpc.core.PriorityBag;
 
@@ -55,7 +56,7 @@ public void shouldNotAddDuplicateInterceptors() {
         ServerInterceptor interceptorSix = spy(new InterceptorStub());
 
         PriorityBag<ServerInterceptor> global = PriorityBag.withDefaultPriority(InterceptorPriorities.USER);
-        global.addAll(CollectionsHelper.listOf(interceptorOne, interceptorTwo, interceptorThree));
+        global.addAll(List.of(interceptorOne, interceptorTwo, interceptorThree));
 
         ServiceDescriptor descriptor = ServiceDescriptor.builder(new Service())
                 .intercept(interceptorTwo)

File: health/health/src/test/java/io/helidon/health/HealthSupportTest.java
Patch:
@@ -25,7 +25,6 @@
 import javax.json.JsonArray;
 import javax.json.JsonObject;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.http.Http;
 
 import org.eclipse.microprofile.health.HealthCheck;
@@ -151,7 +150,7 @@ void noHealthChecksResultsInSuccess() {
 
     @Test
     void checksAreSortedByName() {
-        List<HealthCheck> checks = CollectionsHelper.listOf(new GoodHealthCheck("g"),
+        List<HealthCheck> checks = List.of(new GoodHealthCheck("g"),
                                                             new GoodHealthCheck("a"),
                                                             new GoodHealthCheck("v"));
         HealthSupport support = HealthSupport.builder()

File: integrations/graal/native-image-extension/src/main/java/io/helidon/integrations/graal/nativeimage/extension/HelidonReflectionFeature.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 import javax.json.Json;
@@ -39,8 +40,6 @@
 import org.graalvm.nativeimage.hosted.Feature;
 import org.graalvm.nativeimage.hosted.RuntimeReflection;
 
-import static io.helidon.common.CollectionsHelper.mapOf;
-
 /**
  * Feature to add reflection configuration to the image for Helidon, CDI and Jersey.
  */
@@ -298,7 +297,7 @@ private HelidonReflectionConfiguration loadConfiguration(BeforeAnalysisAccess ac
         try {
             Enumeration<URL> resources = cl.getResources("META-INF/native-image/helidon/reflection-config.json");
             HelidonReflectionConfiguration config = new HelidonReflectionConfiguration();
-            JsonReaderFactory readerFactory = Json.createReaderFactory(mapOf());
+            JsonReaderFactory readerFactory = Json.createReaderFactory(Map.of());
             while (resources.hasMoreElements()) {
                 URL url = resources.nextElement();
                 JsonObject configurationJson = readerFactory.createReader(url.openStream()).readObject();

File: media/common/src/test/java/io/helidon/media/common/ContentReadersTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.InputStreamHelper;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.reactive.Multi;
 
@@ -72,7 +71,7 @@ void test() throws Exception {
                 .toCompletableFuture();
 
         InputStream inputStream = future.get(10, TimeUnit.SECONDS);
-        byte[] actualBytes = InputStreamHelper.readAllBytes(inputStream);
+        byte[] actualBytes = inputStream.readAllBytes();
         assertThat(actualBytes, is(bytes));
     }
 

File: metrics/metrics/src/test/java/io/helidon/metrics/MetricsSupportTest.java
Patch:
@@ -16,9 +16,10 @@
 
 package io.helidon.metrics;
 
+import java.util.Map;
+
 import javax.json.JsonObject;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
@@ -91,7 +92,7 @@ void testJsonMetaMultiple() {
     @Test
     void testBaseMetricsDisabled() {
         Config config = Config.builder()
-                .sources(ConfigSources.create(CollectionsHelper.mapOf(
+                .sources(ConfigSources.create(Map.of(
                         "base.enabled", "false")))
                 .build();
         RegistryFactory myRF = RegistryFactory.create(config);

File: metrics/metrics/src/test/java/io/helidon/metrics/RegistryFactoryTest.java
Patch:
@@ -16,7 +16,8 @@
 
 package io.helidon.metrics;
 
-import io.helidon.common.CollectionsHelper;
+import java.util.Map;
+
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
@@ -54,7 +55,7 @@ public class RegistryFactoryTest {
     static void createInstance() {
         unconfigured = RegistryFactory.create();
         Config config = Config.builder()
-                .sources(ConfigSources.create(CollectionsHelper.mapOf(
+                .sources(ConfigSources.create(Map.of(
                         "base." + METRIC_USED_HEAP + ".enabled",
                         "false")))
                 .build();

File: metrics2/metrics2/src/test/java/io/helidon/metrics/MetricImplTest.java
Patch:
@@ -24,8 +24,6 @@
 import javax.json.JsonObject;
 import javax.json.JsonObjectBuilder;
 
-import io.helidon.common.CollectionsHelper;
-
 import org.eclipse.microprofile.metrics.Metadata;
 import org.eclipse.microprofile.metrics.MetricID;
 import org.eclipse.microprofile.metrics.MetricType;
@@ -60,7 +58,7 @@ class MetricImplTest {
             + "]"
             + "}}";
 
-    private static final List<MetricID> METRIC_IDS = CollectionsHelper.listOf(
+    private static final List<MetricID> METRIC_IDS = List.of(
         new MetricID("name1", new Tag("a", "b"), new Tag("c", "d")),
         new MetricID("name2", new Tag("e", "f"), new Tag("g", "h")));
 

File: metrics2/metrics2/src/test/java/io/helidon/metrics/MetricsSupportTest.java
Patch:
@@ -17,14 +17,14 @@
 package io.helidon.metrics;
 
 import java.util.Collections;
+import java.util.Map;
 
 import javax.json.Json;
 import javax.json.JsonArray;
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;
 import javax.json.JsonObjectBuilder;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
@@ -141,7 +141,7 @@ void testMergingJsonObjectBuilder() {
     @Test
     void testBaseMetricsDisabled() {
         Config config = Config.builder()
-                .sources(ConfigSources.create(CollectionsHelper.mapOf(
+                .sources(ConfigSources.create(Map.of(
                         "base.enabled", "false")))
                 .build();
         RegistryFactory myRF = RegistryFactory.create(config);

File: metrics2/metrics2/src/test/java/io/helidon/metrics/RegistryFactoryTest.java
Patch:
@@ -16,7 +16,8 @@
 
 package io.helidon.metrics;
 
-import io.helidon.common.CollectionsHelper;
+import java.util.Map;
+
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
@@ -55,7 +56,7 @@ public class RegistryFactoryTest {
     static void createInstance() {
         unconfigured = RegistryFactory.create();
         Config config = Config.builder()
-                .sources(ConfigSources.create(CollectionsHelper.mapOf(
+                .sources(ConfigSources.create(Map.of(
                         "base." + METRIC_USED_HEAP.getName() + ".enabled",
                         "false")))
                 .build();

File: microprofile/grpc/client/src/main/java/io/helidon/microprofile/grpc/client/GrpcClientCdiExtension.java
Patch:
@@ -31,7 +31,6 @@
 import javax.enterprise.inject.spi.ProcessInjectionPoint;
 import javax.enterprise.inject.spi.ProducerFactory;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.microprofile.grpc.core.InProcessGrpcChannel;
 
 /**
@@ -109,7 +108,7 @@ private void addProducerBean(AfterBeanDiscovery event,
 
         BeanAttributes<?> producerAttributes = beanManager.createBeanAttributes(producerMethod);
         ProducerFactory<GrpcProxyProducer> factory = beanManager.getProducerFactory(producerMethod, null);
-        Set<Type> types = CollectionsHelper.setOf(Object.class, type);
+        Set<Type> types = Set.of(Object.class, type);
         BeanAttributes<?> beanAttributes = DelegatingBeanAttributes.create(producerAttributes, types);
         event.addBean(beanManager.createBean(beanAttributes, GrpcProxyProducer.class, factory));
     }

File: microprofile/jwt-auth/jwt-auth-cdi/src/main/java/module-info.java
Patch:
@@ -25,6 +25,7 @@
     requires java.ws.rs;
 
     requires transitive io.helidon.microprofile.jwt.auth;
+    requires microprofile.jwt.auth.api;
 
     exports io.helidon.microprofile.jwt.auth.cdi;
 

File: microprofile/jwt-auth/jwt-auth-cdi/src/test/java/io/helidon/microprofile/jwt/auth/cdi/JwtAuthTest.java
Patch:
@@ -33,7 +33,6 @@
 import javax.ws.rs.core.Context;
 import javax.ws.rs.core.SecurityContext;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.microprofile.jwt.auth.JwtAuthProvider;
 import io.helidon.microprofile.server.Server;
@@ -159,7 +158,7 @@ void testPublicEndpoint() {
     public static class MyApp extends Application {
         @Override
         public Set<Class<?>> getClasses() {
-            return CollectionsHelper.setOf(MyResource.class, ResourceWithPublicMethod.class);
+            return Set.of(MyResource.class, ResourceWithPublicMethod.class);
         }
     }
 

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsMpService.java
Patch:
@@ -17,9 +17,9 @@
 package io.helidon.microprofile.metrics;
 
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.metrics.MetricsSupport;
 import io.helidon.metrics.RegistryFactory;
@@ -55,7 +55,7 @@ public void configure(MpServiceContext serviceContext) {
         // now we may have additional sockets we want to add vendor metrics to
         metricsConfig.get("vendor-metrics-routings")
                 .asList(String.class)
-                .orElseGet(CollectionsHelper::listOf)
+                .orElseGet(List::of)
                 .forEach(routeName -> {
                     if (!vendorMetricsAdded.contains(routeName)) {
                         metricsSupport.configureVendorMetrics(routeName, serviceContext.serverNamedRoutingBuilder(routeName));

File: microprofile/metrics2/src/main/java/io/helidon/microprofile/metrics/MetricsMpService.java
Patch:
@@ -17,9 +17,9 @@
 package io.helidon.microprofile.metrics;
 
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigValue;
 import io.helidon.metrics.MetricsSupport;
@@ -66,7 +66,7 @@ public void configure(MpServiceContext serviceContext) {
         // now we may have additional sockets we want to add vendor metrics to
         metricsConfig.get("vendor-metrics-routings")
                 .asList(String.class)
-                .orElseGet(CollectionsHelper::listOf)
+                .orElseGet(List::of)
                 .forEach(routeName -> {
                     if (!vendorMetricsAdded.contains(routeName)) {
                         metricsSupport.configureVendorMetrics(routeName, serviceContext.serverNamedRoutingBuilder(routeName));

File: microprofile/openapi/src/test/java/io/helidon/microprofile/openapi/TestApp.java
Patch:
@@ -27,8 +27,6 @@
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 
-import io.helidon.common.CollectionsHelper;
-
 import org.eclipse.microprofile.openapi.annotations.Operation;
 import org.eclipse.microprofile.openapi.annotations.media.Content;
 import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;
@@ -43,7 +41,7 @@ public class TestApp extends Application {
     static final String GO_SUMMARY = "Returns a fixed string";
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(TestResources.class);
+        return Set.of(TestResources.class);
     }
 
     @Path("/testapp")

File: microprofile/server/src/main/java/io/helidon/microprofile/server/Server.java
Patch:
@@ -37,7 +37,6 @@
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.configurable.ServerThreadPoolSupplier;
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
@@ -329,7 +328,7 @@ private SeContainer createContainer(ClassLoader classLoader) {
                                                               .get("cdi")
                                                               .detach()
                                                               .asMap()
-                                                              .orElse(CollectionsHelper.mapOf()));
+                                                              .orElse(Map.of()));
             initializer.setProperties(props);
 
             // add resource classes explicitly configured without CDI annotations

File: microprofile/server/src/main/java/io/helidon/microprofile/server/ServerImpl.java
Patch:
@@ -46,7 +46,6 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.Prioritized;
 import io.helidon.common.context.Context;
 import io.helidon.common.http.Http;
@@ -130,9 +129,8 @@ private static boolean recordInitFinish(long time) {
                 .port(builder.port())
                 .bindAddress(listenHost);
 
-        OptionalHelper.from(Optional.ofNullable(builder.basePath()))
+        Optional.ofNullable(builder.basePath())
                 .or(() -> config.get("server.base-path").asString().asOptional())
-                .asOptional()
                 .ifPresent(basePath -> {
                     routingBuilder.any("/", (req, res) -> {
                         res.status(Http.Status.MOVED_PERMANENTLY_301);

File: microprofile/server/src/test/java/io/helidon/microprofile/server/ServerImplTest.java
Patch:
@@ -26,7 +26,6 @@
 import javax.ws.rs.client.WebTarget;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.configurable.ThreadPoolSupplier;
 
 import org.junit.jupiter.api.AfterAll;
@@ -110,14 +109,14 @@ void testTwoApps() {
     private final class TestApplication1 extends Application {
         @Override
         public Set<Object> getSingletons() {
-            return CollectionsHelper.setOf(new TestResource1());
+            return Set.of(new TestResource1());
         }
     }
 
     private final class TestApplication2 extends Application {
         @Override
         public Set<Object> getSingletons() {
-            return CollectionsHelper.setOf(new TestResource2());
+            return Set.of(new TestResource2());
         }
     }
 

File: microprofile/server/src/test/java/io/helidon/microprofile/server/ServerSseTest.java
Patch:
@@ -33,8 +33,6 @@
 import javax.ws.rs.sse.SseEventSink;
 import javax.ws.rs.sse.SseEventSource;
 
-import io.helidon.common.CollectionsHelper;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -91,7 +89,7 @@ void testSse() throws Exception {
     private final class TestApplication1 extends Application {
         @Override
         public Set<Object> getSingletons() {
-            return CollectionsHelper.setOf(new TestResource1());
+            return Set.of(new TestResource1());
         }
     }
 

File: microprofile/tracing/src/test/java/io/helidon/microprofile/tracing/TestTracerProvider.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 import java.util.Map;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.tracing.Tag;
 import io.helidon.tracing.TracerBuilder;
@@ -339,7 +338,7 @@ static class TestSpanContext implements SpanContext {
 
         @Override
         public Iterable<Map.Entry<String, String>> baggageItems() {
-            Map<String, String> map = CollectionsHelper.mapOf();
+            Map<String, String> map = Map.of();
 
             return map.entrySet();
         }

File: microprofile/tracing/src/test/java/io/helidon/microprofile/tracing/TracingTest.java
Patch:
@@ -30,7 +30,6 @@
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.microprofile.server.Server;
 
 import org.junit.jupiter.api.AfterAll;
@@ -113,7 +112,7 @@ private static void addHeaders(Response.ResponseBuilder builder, HttpHeaders hea
     public static class MyApp extends Application {
         @Override
         public Set<Class<?>> getClasses() {
-            return CollectionsHelper.setOf(
+            return Set.of(
                     HelloWorld.class,
                     MyResource.class);
         }

File: security/abac/policy/src/main/java/io/helidon/security/abac/policy/PolicyValidator.java
Patch:
@@ -29,10 +29,10 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.ServiceLoader;
+import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.Errors;
 import io.helidon.config.Config;
 import io.helidon.security.EndpointConfig;
@@ -106,7 +106,7 @@ public static PolicyValidator create(Config config) {
 
     @Override
     public Collection<Class<? extends Annotation>> supportedAnnotations() {
-        return CollectionsHelper.setOf(PolicyStatement.class);
+        return Set.of(PolicyStatement.class);
     }
 
     @Override

File: security/abac/role/src/main/java/io/helidon/security/abac/role/RoleValidator.java
Patch:
@@ -39,7 +39,6 @@
 import javax.annotation.security.PermitAll;
 import javax.annotation.security.RolesAllowed;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.Errors;
 import io.helidon.config.Config;
 import io.helidon.security.EndpointConfig;
@@ -157,7 +156,7 @@ private void validate(Set<String> rolesAllowed, Errors.Collector collector, Opti
 
         Set<String> roleGrants = subject
                 .map(sub -> sub.grants(Role.class))
-                .orElse(CollectionsHelper.listOf())
+                .orElse(List.of())
                 .stream()
                 .map(Role::getName)
                 .collect(Collectors.toSet());
@@ -178,7 +177,7 @@ private void validate(Set<String> rolesAllowed, Errors.Collector collector, Opti
     @Override
     public Collection<Class<? extends Annotation>> supportedAnnotations() {
         //Order of the annotations matters because of annotation handling.
-        return CollectionsHelper.listOf(RolesAllowed.class, Roles.class, RolesContainer.class, PermitAll.class, DenyAll.class);
+        return List.of(RolesAllowed.class, Roles.class, RolesContainer.class, PermitAll.class, DenyAll.class);
     }
 
     /**

File: security/abac/time/src/main/java/io/helidon/security/abac/time/TimeValidator.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.List;
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.Errors;
 import io.helidon.config.Config;
 import io.helidon.security.EndpointConfig;
@@ -123,7 +122,7 @@ public void validate(TimeConfig config, Errors.Collector collector, ProviderRequ
 
     @Override
     public Collection<Class<? extends Annotation>> supportedAnnotations() {
-        return CollectionsHelper.setOf(TimesOfDay.class, TimeOfDay.class, DaysOfWeek.class);
+        return Set.of(TimesOfDay.class, TimeOfDay.class, DaysOfWeek.class);
     }
 
     /**

File: security/abac/time/src/test/java/io/helidon/security/abac/time/TimeValidatorTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.Errors;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.ProviderRequest;
@@ -69,7 +68,7 @@ public static void initClass() {
 
         when(ep.securityLevels()).thenReturn(securityLevels);
         when(classSecurityLevel.filterAnnotations(TimeValidator.TimeOfDay.class, EndpointConfig.AnnotationScope.CLASS))
-                .thenReturn(CollectionsHelper.listOf(tod, tod2));
+                .thenReturn(List.of(tod, tod2));
 
         TimeValidator.DaysOfWeek dow = mock(TimeValidator.DaysOfWeek.class);
         when(dow.value()).thenReturn(new DayOfWeek[] {
@@ -81,7 +80,7 @@ public static void initClass() {
         });
         annotations.add(dow);
         when(classSecurityLevel.filterAnnotations(TimeValidator.DaysOfWeek.class, EndpointConfig.AnnotationScope.CLASS))
-                .thenReturn(CollectionsHelper.listOf(dow));
+                .thenReturn(List.of(dow));
 
 
         timeConfig = validator.fromAnnotations(ep);

File: security/integration/grpc/src/main/java/io/helidon/security/integration/grpc/GrpcClientSecurity.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Map;
 import java.util.concurrent.Executor;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.OutboundSecurityClientBuilder;
 import io.helidon.security.OutboundSecurityResponse;
@@ -97,7 +96,7 @@ public void applyRequestMetadata(RequestInfo requestInfo, Executor appExecutor,
             switch (status) {
             case FAILURE:
             case FAILURE_FINISH:
-                OptionalHelper.from(providerResponse.throwable())
+                providerResponse.throwable()
                         .ifPresentOrElse(tracing::error,
                                          () -> tracing.error(providerResponse.description().orElse("Failed")));
                 break;

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/ClientSecurityFilter.java
Patch:
@@ -29,7 +29,6 @@
 import javax.ws.rs.core.MultivaluedMap;
 import javax.ws.rs.ext.Provider;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.context.Contexts;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.OutboundSecurityClientBuilder;
@@ -78,7 +77,7 @@ private void doFilter(ClientRequestContext requestContext) {
         // from there
 
         // first try to find the context on request configuration
-        OptionalHelper.from(findContext(requestContext))
+        findContext(requestContext)
                 .or(() -> Contexts.context().flatMap(ctx -> ctx.get(SecurityContext.class)))
                 .ifPresentOrElse(securityContext -> outboundSecurity(requestContext, securityContext),
                                  () -> LOGGER.finest("Security not propagated, as security context is not available "
@@ -121,7 +120,7 @@ private void outboundSecurity(ClientRequestContext requestContext, SecurityConte
             switch (status) {
             case FAILURE:
             case FAILURE_FINISH:
-                OptionalHelper.from(providerResponse.throwable())
+                providerResponse.throwable()
                         .ifPresentOrElse(tracing::error,
                                          () -> tracing.error(providerResponse.description().orElse("Failed")));
 

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SecurityFilter.java
Patch:
@@ -43,7 +43,6 @@
 import javax.ws.rs.core.Context;
 import javax.ws.rs.core.Response;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.reactive.OutputStreamPublisher;
 import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.Config;
@@ -237,9 +236,8 @@ public void filter(ContainerRequestContext requestContext, ContainerResponseCont
                         .addParam(AuditEvent.AuditParam.plain("path", fc.getResourcePath()))
                         .addParam(AuditEvent.AuditParam.plain("status", String.valueOf(responseContext.getStatus())))
                         .addParam(AuditEvent.AuditParam.plain("subject",
-                                                              OptionalHelper.from(securityContext.user())
+                                                              securityContext.user()
                                                                       .or(securityContext::service)
-                                                                      .asOptional()
                                                                       .orElse(SecurityContext.ANONYMOUS)))
                         .addParam(AuditEvent.AuditParam.plain("transport", "http"))
                         .addParam(AuditEvent.AuditParam.plain("resourceType", fc.getResourceName()))

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/BindingTestProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,8 +17,8 @@
 package io.helidon.security.integration.jersey;
 
 import java.util.List;
+import java.util.Map;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.AuthorizationResponse;
 import io.helidon.security.EndpointConfig;
@@ -63,7 +63,7 @@ protected OutboundSecurityResponse syncOutbound(ProviderRequest providerRequest,
         return providerRequest.securityContext()
                 .user()
                 .map(user -> OutboundSecurityResponse
-                        .withHeaders(CollectionsHelper.mapOf("x-user", CollectionsHelper.listOf(user.principal().id()))))
+                        .withHeaders(Map.of("x-user", List.of(user.principal().id()))))
                 .orElse(OutboundSecurityResponse.abstain());
     }
 }

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/OptionalSecurityTest.java
Patch:
@@ -25,7 +25,6 @@
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.ProviderRequest;
 import io.helidon.security.Security;
@@ -140,7 +139,7 @@ private static Application getApplication() {
         return new Application() {
             @Override
             public Set<Class<?>> getClasses() {
-                return CollectionsHelper.setOf(TheResource.class);
+                return Set.of(TheResource.class);
             }
         };
     }

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/SecurityFilterTest.java
Patch:
@@ -22,7 +22,6 @@
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.Response;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.AuthorizationResponse;
 import io.helidon.security.Security;
@@ -192,7 +191,7 @@ private static Application getApplication() {
         return new Application() {
             @Override
             public Set<Class<?>> getClasses() {
-                return CollectionsHelper.setOf(OptionalSecurityTest.TheResource.class);
+                return Set.of(OptionalSecurityTest.TheResource.class);
             }
         };
     }

File: security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProvider.java
Patch:
@@ -33,7 +33,6 @@
 import javax.annotation.security.RolesAllowed;
 
 import io.helidon.common.Errors;
-import io.helidon.common.OptionalHelper;
 import io.helidon.config.Config;
 import io.helidon.security.AuthorizationResponse;
 import io.helidon.security.EndpointConfig;
@@ -145,7 +144,7 @@ protected AuthorizationResponse syncAuthorize(ProviderRequest providerRequest) {
             if (customObject.isPresent()) {
                 attributes.add(new RuntimeAttribute(validator, customObject.get()));
             } else {
-                OptionalHelper.from(epConfig.config(configKey))
+                epConfig.config(configKey)
                         .ifPresentOrElse(attribConfig -> attributes
                                 .add(new RuntimeAttribute(validator, validator.fromConfig(attribConfig))), () -> {
                             List<Annotation> annotationConfig = new ArrayList<>();

File: security/providers/abac/src/test/java/io/helidon/security/providers/abac/Attrib1Validator.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.Errors;
 import io.helidon.config.Config;
 import io.helidon.security.EndpointConfig;
@@ -35,7 +35,7 @@
 public class Attrib1Validator implements AbacValidator<Attrib1Validator.Attrib1Config> {
     @Override
     public Collection<Class<? extends Annotation>> supportedAnnotations() {
-        return CollectionsHelper.setOf(Attrib1.class);
+        return Set.of(Attrib1.class);
     }
 
     @Override

File: security/providers/common/src/main/java/io/helidon/security/providers/common/OutboundConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 import java.util.Optional;
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.security.EndpointConfig;
 import io.helidon.security.ProviderRequest;
@@ -71,7 +70,7 @@ public static OutboundConfig create(Config providerConfig, OutboundTarget... def
     static OutboundConfig createFromConfig(Config providerConfig, OutboundTarget[] defaults) {
         Config config = providerConfig.get(CONFIG_OUTBOUND);
 
-        List<OutboundTarget> configuredTargets = config.asList(OutboundTarget::create).orElse(CollectionsHelper.listOf());
+        List<OutboundTarget> configuredTargets = config.asList(OutboundTarget::create).orElse(List.of());
 
         boolean useDefaults = configuredTargets.stream().noneMatch(targetConfig -> "default".equals(targetConfig.name()))
                 && (null != defaults);

File: security/providers/google-login/src/main/java/io/helidon/security/providers/google/login/GoogleTokenProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,14 +25,14 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.Set;
 import java.util.TreeMap;
 import java.util.concurrent.TimeUnit;
 import java.util.function.BiFunction;
 import java.util.function.Supplier;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.EndpointConfig;
@@ -108,7 +108,7 @@ private GoogleTokenProvider(Builder builder) {
 
                 // thread safe according to documentation
                 this.verifier = new GoogleIdTokenVerifier.Builder(transport, jsonFactory)
-                        .setAudience(CollectionsHelper.setOf(clientId))
+                        .setAudience(Set.of(clientId))
                         .build();
             } catch (Exception e) {
                 throw new GoogleTokenException("Failed to initialize transport", e);

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/ConfigUserStore.java
Patch:
@@ -19,11 +19,11 @@
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.LinkedHashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 
 /**
@@ -80,7 +80,7 @@ static ConfigUser create(Config config) {
 
             cu.login = config.get("login").asString().get();
             cu.password = config.get("password").asString().orElse("").toCharArray();
-            cu.roles.addAll(config.get("roles").asList(String.class).orElse(CollectionsHelper.listOf()));
+            cu.roles.addAll(config.get("roles").asList(String.class).orElse(List.of()));
 
             return cu;
         }

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpBasicAuthProvider.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.security.AuthenticationResponse;
@@ -104,7 +103,7 @@ private static OutboundSecurityResponse toBasicAuthOutbound(String username, cha
                 .encodeToString((username + ":" + new String(password)).getBytes(StandardCharsets.UTF_8));
         String basicAuthB64 = "basic " + b64;
         return OutboundSecurityResponse
-                .withHeaders(CollectionsHelper.mapOf("Authorization", CollectionsHelper.listOf(basicAuthB64)));
+                .withHeaders(Map.of("Authorization", List.of(basicAuthB64)));
     }
 
     @Override

File: security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/SecureUserStore.java
Patch:
@@ -18,8 +18,7 @@
 
 import java.util.Collection;
 import java.util.Optional;
-
-import io.helidon.common.CollectionsHelper;
+import java.util.Set;
 
 /**
  * Store of users for resolving httpauth and digest authentication.
@@ -68,7 +67,7 @@ interface User {
          * @return roles of this user (or empty if not supported).
          */
         default Collection<String> roles() {
-            return CollectionsHelper.setOf();
+            return Set.of();
         }
 
         /**

File: security/providers/http-auth/src/test/java/io/helidon/security/providers/httpauth/BasicAuthOutboundOverrideTest.java
Patch:
@@ -20,14 +20,14 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 import java.util.Collections;
+import java.util.List;
 import java.util.Optional;
 
 import javax.ws.rs.client.ClientRequestContext;
 import javax.ws.rs.core.Configuration;
 import javax.ws.rs.core.MultivaluedHashMap;
 import javax.ws.rs.core.MultivaluedMap;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.Security;
 import io.helidon.security.SecurityContext;
 import io.helidon.security.integration.jersey.client.ClientSecurity;
@@ -74,7 +74,7 @@ void testSecureClientOverride() throws IOException {
         when(requestContext.getUri()).thenReturn(URI.create("http://localhost:7070/test"));
         when(requestContext.getStringHeaders()).thenReturn(new MultivaluedHashMap<>());
         when(requestContext.getHeaders()).thenReturn(jerseyHeaders);
-        when(requestContext.getPropertyNames()).thenReturn(CollectionsHelper.listOf(
+        when(requestContext.getPropertyNames()).thenReturn(List.of(
                 ClientSecurity.PROPERTY_CONTEXT,
                 ClientSecurity.PROPERTY_PROVIDER,
                 HttpBasicAuthProvider.EP_PROPERTY_OUTBOUND_USER,

File: security/providers/http-auth/src/test/java/io/helidon/security/providers/httpauth/HttpAuthProviderBuilderLegacyUserStoreTest.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.Set;
 
 import io.helidon.common.Builder;
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.Principal;
 import io.helidon.security.Security;
@@ -84,7 +83,7 @@ public char[] password() {
 
                     @Override
                     public Set<String> roles() {
-                        return CollectionsHelper.setOf("user", "admin");
+                        return Set.of("user", "admin");
                     }
                 });
             }
@@ -102,7 +101,7 @@ public char[] password() {
 
                     @Override
                     public Set<String> roles() {
-                        return CollectionsHelper.setOf("user");
+                        return Set.of("user");
                     }
                 });
             }

File: security/providers/http-auth/src/test/java/io/helidon/security/providers/httpauth/HttpAuthProviderBuilderTest.java
Patch:
@@ -22,10 +22,10 @@
 import java.util.Base64;
 import java.util.Optional;
 import java.util.Random;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import io.helidon.common.Builder;
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.Principal;
 import io.helidon.security.Security;
@@ -73,12 +73,12 @@ private static SecureUserStore userStore() {
             if ("jack".equals(login)) {
                 return Optional.of(new TestUser("jack",
                                                 "jackIsGreat".toCharArray(),
-                                                CollectionsHelper.setOf("user", "admin")));
+                                                Set.of("user", "admin")));
             }
             if ("jill".equals(login)) {
                 return Optional.of(new TestUser("jill",
                                                 "password".toCharArray(),
-                                                CollectionsHelper.setOf("user")));
+                                                Set.of("user")));
             }
 
             return Optional.empty();

File: security/providers/idcs-mapper/src/main/java/io/helidon/security/providers/idcs/mapper/IdcsMtRoleMapperProvider.java
Patch:
@@ -33,7 +33,6 @@
 import javax.ws.rs.client.WebTarget;
 import javax.ws.rs.core.Response;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.Grant;
@@ -149,7 +148,7 @@ protected Subject enhance(Subject subject,
                                                       () -> computeGrants(idcsMtContext.tenantId(),
                                                                           idcsMtContext.appId(),
                                                                           subject))
-                .orElseGet(CollectionsHelper::listOf);
+                .orElseGet(List::of);
 
         List<Grant> grants = new LinkedList<>(serverGrants);
 

File: security/providers/jwt/src/main/java/io/helidon/security/providers/jwt/JwtProvider.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.Errors;
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.configurable.Resource;
 import io.helidon.config.Config;
 import io.helidon.security.AuthenticationResponse;
@@ -338,7 +337,7 @@ private OutboundSecurityResponse propagate(JwtOutboundTarget ot, Subject subject
             principal.abacAttribute(name).ifPresent(val -> builder.addPayloadClaim(name, val));
         });
 
-        OptionalHelper.from(principal.abacAttribute("full_name"))
+        principal.abacAttribute("full_name")
                 .ifPresentOrElse(name -> builder.addPayloadClaim("name", name),
                                  () -> builder.removePayloadClaim("name"));
 

File: security/providers/oidc/src/test/java/io/helidon/security/providers/oidc/OidcSupportTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.net.URI;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 import io.helidon.security.EndpointConfig;
@@ -78,7 +78,7 @@ class OidcSupportTest {
             .outboundConfig(OutboundConfig.builder()
                                     .addTarget(OutboundTarget.builder("disabled")
                                                        .addHost("www.example.com")
-                                                       .config(Config.create(ConfigSources.create(CollectionsHelper.mapOf(
+                                                       .config(Config.create(ConfigSources.create(Map.of(
                                                                "propagate",
                                                                "false"))))
                                                        .build())

File: security/security/src/main/java/io/helidon/security/DefaultAuditProvider.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.config.Config;
 import io.helidon.security.spi.AuditProvider;
 
@@ -99,7 +98,7 @@ private void logEvent(String tracingId, TracedAuditEvent event, Level level) {
 
         String finalMsg = msg;
 
-        OptionalHelper.from(event.throwable())
+        event.throwable()
                 .ifPresentOrElse(throwable -> auditLogger.log(level,
                                                               finalMsg,
                                                               throwable), () -> auditLogger.log(level, finalMsg));

File: security/security/src/main/java/io/helidon/security/EndpointConfig.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.Map;
 import java.util.Optional;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.security.spi.SecurityProvider;
 import io.helidon.security.util.AbacSupport;
@@ -182,7 +181,7 @@ public List<SecurityLevel> securityLevels() {
     public <T extends Annotation> List<T> combineAnnotations(Class<T> annotationClass, AnnotationScope... scopes) {
         List<T> result = new LinkedList<>();
 
-        result.addAll((Collection<? extends T>) annotations(scopes).getOrDefault(annotationClass, CollectionsHelper.listOf()));
+        result.addAll((Collection<? extends T>) annotations(scopes).getOrDefault(annotationClass, List.of()));
 
         return result;
     }

File: security/security/src/main/java/io/helidon/security/SecurityContextImpl.java
Patch:
@@ -18,14 +18,14 @@
 
 import java.util.Objects;
 import java.util.Optional;
+import java.util.Set;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.function.Supplier;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.context.Contexts;
 import io.helidon.security.internal.SecurityAuditEvent;
 import io.helidon.security.spi.AuthorizationProvider;
@@ -148,7 +148,7 @@ public boolean isUserInRole(String role) {
 
         return authorizationProvider.map(provider -> provider.isUserInRole(currentSubject, role))
                 .orElseGet(() -> user().map(Security::getRoles)
-                        .orElse(CollectionsHelper.setOf())
+                        .orElse(Set.of())
                         .stream()
                         .anyMatch(role::equals));
     }

File: security/security/src/main/java/io/helidon/security/SecurityEnvironment.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
 import java.util.Optional;
 import java.util.TreeMap;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.util.AbacSupport;
 
 /**
@@ -272,7 +271,7 @@ public Builder headers(Map<String, List<String>> headers) {
          * @return this instance
          */
         public Builder header(String header, String value) {
-            this.headers.put(header, CollectionsHelper.listOf(value));
+            this.headers.put(header, List.of(value));
             return this;
         }
 

File: security/security/src/test/java/io/helidon/security/CompositePolicyFlagsTest.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.SecurityResponse.SecurityStatus;
 import io.helidon.security.providers.PathBasedProvider;
 import io.helidon.security.providers.ResourceBasedProvider;
@@ -334,7 +334,7 @@ private ProviderRequest request(String path, String resource) {
         SecurityEnvironment se = Mockito.mock(SecurityEnvironment.class);
 
         when(se.path()).thenReturn(Optional.of(path));
-        when(se.headers()).thenReturn(CollectionsHelper.mapOf());
+        when(se.headers()).thenReturn(Map.of());
         when(se.abacAttribute("resourceType")).thenReturn(Optional.of(resource));
 
         when(mock.env()).thenReturn(se);

File: security/security/src/test/java/io/helidon/security/CompositePolicyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 import java.util.Map;
 import java.util.concurrent.ExecutionException;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.security.spi.AuthenticationProvider;
 import io.helidon.security.spi.AuthorizationProvider;
 import io.helidon.security.spi.OutboundSecurityProvider;
@@ -179,7 +178,7 @@ private ProviderRequest context(String path, String resource) {
         ProviderRequest mock = Mockito.mock(ProviderRequest.class);
         SecurityEnvironment se = SecurityEnvironment.builder(SecurityTime.create())
                 .path(path)
-                .headers(CollectionsHelper.mapOf())
+                .headers(Map.of())
                 .addAttribute("resourceType", resource)
                 .build();
 

File: security/security/src/test/java/io/helidon/security/EntityHandlingTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Flow;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.security.providers.ProviderForTesting;
 
@@ -79,7 +78,7 @@ public void reactiveTest() throws Throwable {
 
         Optional<Entity> requestMessage = request.requestEntity();
 
-        OptionalHelper.from(requestMessage).ifPresentOrElse(message -> message.filter(byteBufferPublisher -> {
+        requestMessage.ifPresentOrElse(message -> message.filter(byteBufferPublisher -> {
             ByteArrayOutputStream baos = new ByteArrayOutputStream();
             SubmissionPublisher<ByteBuffer> bPublisher = new SubmissionPublisher<>();
 

File: security/util/src/test/java/io/helidon/security/util/TokenHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,6 @@
 import java.util.TreeMap;
 import java.util.regex.Pattern;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
 
@@ -119,7 +118,7 @@ public void testAddHeader() {
 
         List<String> authorization = headers.get("Authorization");
         assertThat(authorization.size(), is(2));
-        assertThat(authorization, is(CollectionsHelper.listOf("firstToken", "secondToken")));
+        assertThat(authorization, is(List.of("firstToken", "secondToken")));
 
         assertThat(tp.tokenHeader(), is("Authorization"));
     }

File: tests/functional/context-propagation/src/main/java/io/helidon/tests/functional/context/hello/HelloApplication.java
Patch:
@@ -21,15 +21,13 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * HelloApplication class.
  */
 @ApplicationScoped
 public class HelloApplication extends Application {
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(HelloResource.class);
+        return Set.of(HelloResource.class);
     }
 }

File: tests/functional/jax-rs-subresource/src/main/java/io/helidon/tests/functional/jaxrs/subresource/MpApplication.java
Patch:
@@ -20,15 +20,13 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * TODO javadoc.
  */
 @ApplicationScoped
 public class MpApplication extends Application {
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(MpMainResource.class, MpSubResource.class);
+        return Set.of(MpMainResource.class, MpSubResource.class);
     }
 }

File: tests/functional/multiport/src/main/java/io/helidon/tests/functional/multiport/MpApplication.java
Patch:
@@ -20,15 +20,13 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * Application to expose the resource.
  */
 @ApplicationScoped
 public class MpApplication extends Application {
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(MpResource.class);
+        return Set.of(MpResource.class);
     }
 }

File: tests/functional/multiport/src/test/java/io/helidon/tests/functional/multiport/MainTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.helidon.tests.functional.multiport;
 
+import java.util.List;
 import java.util.stream.Stream;
 
 import javax.ws.rs.client.Client;
@@ -24,8 +25,6 @@
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 
-import io.helidon.common.CollectionsHelper;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -58,7 +57,7 @@ static void destroyClass() {
     }
 
     static Stream<Params> initParams() {
-        return CollectionsHelper.listOf(
+        return List.of(
                 new Params(7001, true, false, false),
                 new Params(8001, false, false, true),
                 new Params(8002, false, true, false),

File: tests/integration/mp-security-client/src/main/java/io/helidon/tests/integration/mp/security/client/TestApplication.java
Patch:
@@ -20,15 +20,13 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * Jax-rs application.
  */
 @ApplicationScoped
 public class TestApplication extends Application {
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(ClientResource.class, ServerResource.class);
+        return Set.of(ClientResource.class, ServerResource.class);
     }
 }

File: tests/integration/zipkin-mp-2.2/src/main/java/io/helidon/tests/integration/zipkin/mp22/MpApplication.java
Patch:
@@ -20,15 +20,13 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.ws.rs.core.Application;
 
-import io.helidon.common.CollectionsHelper;
-
 /**
  * Application to expose the resource.
  */
 @ApplicationScoped
 public class MpApplication extends Application {
     @Override
     public Set<Class<?>> getClasses() {
-        return CollectionsHelper.setOf(MpResourceImpl.class);
+        return Set.of(MpResourceImpl.class);
     }
 }

File: tracing/jaeger/src/main/java/io/helidon/tracing/jaeger/JaegerTracerBuilder.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.tracing.TracerBuilder;
 
@@ -326,7 +325,7 @@ public JaegerTracerBuilder config(Config config) {
 
         config.get("tags").detach()
                 .asMap()
-                .orElseGet(CollectionsHelper::mapOf)
+                .orElseGet(Map::of)
                 .forEach(this::addTracerTag);
 
         config.get("boolean-tags")

File: tracing/jersey/src/main/java/io/helidon/tracing/jersey/AbstractTracingFilter.java
Patch:
@@ -16,6 +16,7 @@
 package io.helidon.tracing.jersey;
 
 import java.net.URI;
+import java.util.Map;
 
 import javax.ws.rs.ConstrainedTo;
 import javax.ws.rs.RuntimeType;
@@ -25,7 +26,6 @@
 import javax.ws.rs.container.ContainerResponseFilter;
 import javax.ws.rs.container.PreMatching;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.tracing.config.SpanTracingConfig;
@@ -140,7 +140,7 @@ public void filter(ContainerRequestContext requestContext, ContainerResponseCont
         case CLIENT_ERROR:
         case SERVER_ERROR:
             Tags.ERROR.set(span, true);
-            span.log(CollectionsHelper.mapOf("event", "error"));
+            span.log(Map.of("event", "error"));
             break;
         default:
             break;

File: tracing/tests/it-tracing-client-zipkin/src/test/java/io/helidon/tracing/tests/it1/OpentraceableClientE2ETest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,6 +16,7 @@
 
 package io.helidon.tracing.tests.it1;
 
+import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
@@ -28,7 +29,6 @@
 import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.core.Response;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.tracing.jersey.client.ClientTracingFilter;
 import io.helidon.tracing.zipkin.ZipkinTracer;
 import io.helidon.webserver.Routing;
@@ -75,7 +75,7 @@ private static Tracer tracer(String serviceName) {
                                       .build();
 
         // use this to create an OpenTracing Tracer
-        return new ZipkinTracer(BraveTracer.create(braveTracing), CollectionsHelper.listOf());
+        return new ZipkinTracer(BraveTracer.create(braveTracing), List.of());
     }
 
     private static WebServer startWebServer() throws InterruptedException, ExecutionException, TimeoutException {

File: tracing/zipkin/src/main/java/io/helidon/tracing/zipkin/ZipkinTracerBuilder.java
Patch:
@@ -21,9 +21,9 @@
 import java.net.URISyntaxException;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
 import java.util.logging.Logger;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.tracing.Tag;
 import io.helidon.tracing.TracerBuilder;
@@ -250,7 +250,7 @@ public ZipkinTracerBuilder config(Config config) {
 
         config.get("tags").detach()
                 .asMap()
-                .orElseGet(CollectionsHelper::mapOf)
+                .orElseGet(Map::of)
                 .forEach(this::addTracerTag);
 
         config.get("boolean-tags")

File: webserver/access-log/src/main/java/io/helidon/webserver/accesslog/AccessLogSupport.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.config.Config;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.ServerRequest;
@@ -170,7 +169,7 @@ public ServerResponse serverResponse() {
      * A fluent API Builder for {@link io.helidon.webserver.accesslog.AccessLogSupport}.
      */
     public static final class Builder implements io.helidon.common.Builder<AccessLogSupport> {
-        private static final List<AccessLogEntry> COMMON_FORMAT = CollectionsHelper.listOf(
+        private static final List<AccessLogEntry> COMMON_FORMAT = List.of(
                 HostLogEntry.create(),
                 UserIdLogEntry.create(),
                 UserLogEntry.create(),
@@ -180,7 +179,7 @@ public static final class Builder implements io.helidon.common.Builder<AccessLog
                 SizeLogEntry.create()
         );
 
-        private static final List<AccessLogEntry> HELIDON_FORMAT = CollectionsHelper.listOf(
+        private static final List<AccessLogEntry> HELIDON_FORMAT = List.of(
                 HostLogEntry.create(),
                 UserLogEntry.create(),
                 TimestampLogEntry.create(),

File: webserver/jersey/src/test/java/io/helidon/webserver/jersey/JerseyExampleResource.java
Patch:
@@ -37,7 +37,6 @@
 import javax.ws.rs.core.StreamingOutput;
 import javax.ws.rs.core.UriInfo;
 
-import io.helidon.common.InputStreamHelper;
 import io.helidon.webserver.ServerRequest;
 import io.helidon.webserver.ServerResponse;
 
@@ -147,7 +146,7 @@ public Response errorThrownUnhandled() {
     @Path("stream")
     public Response checkSequenceStream(InputStream inputStream, @QueryParam("length") int length) throws IOException {
 
-        String content = new String(InputStreamHelper.readAllBytes(inputStream));
+        String content = new String(inputStream.readAllBytes());
 
         try {
             assertEquals(JerseySupportTest.longData(length).toString(), content);

File: webserver/webserver/src/main/java/io/helidon/webserver/HashResponseHeaders.java
Patch:
@@ -37,7 +37,6 @@
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.http.AlreadyCompletedException;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
@@ -111,7 +110,7 @@ public void contentType(MediaType contentType) {
 
     @Override
     public OptionalLong contentLength() {
-        return OptionalHelper.from(first(Http.Header.CONTENT_LENGTH)).stream()
+        return first(Http.Header.CONTENT_LENGTH).stream()
                 .mapToLong(Long::parseLong).findFirst();
     }
 

File: webserver/webserver/src/main/java/io/helidon/webserver/Request.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.http.ContextualRegistry;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
@@ -319,7 +318,7 @@ private void finishSpanWithError(Span readSpan, Throwable t) {
                 return;
             }
             Tags.ERROR.set(readSpan, Boolean.TRUE);
-            readSpan.log(CollectionsHelper.mapOf("event", "error",
+            readSpan.log(Map.of("event", "error",
                                                  "error.kind", "Exception",
                                                  "error.object", t,
                                                  "message", t.toString()));

File: webserver/webserver/src/main/java/io/helidon/webserver/Response.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import io.helidon.common.OptionalHelper;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
@@ -342,15 +341,15 @@ boolean accept(Object o) {
 
             // Test content type compatibility
             return requestedContentType == null
-                    || OptionalHelper.from(headers().contentType())
+                    || headers().contentType()
                                 .or(() -> { // if no contentType is yet registered, try to write requested
                                     try {
                                         headers.contentType(requestedContentType);
                                         return Optional.of(requestedContentType);
                                     } catch (Exception e) {
                                         return Optional.empty();
                                     }
-                                }).asOptional()
+                                })
                                 .filter(requestedContentType) // MediaType is a predicate of compatible media type
                                 .isPresent();
         }

File: webserver/webserver/src/main/java/io/helidon/webserver/SSLContextBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,6 @@
 import javax.net.ssl.TrustManagerFactory;
 
 import io.helidon.common.Builder;
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.pki.KeyConfig;
 import io.helidon.config.Config;
 
@@ -187,7 +186,7 @@ private static TrustManagerFactory buildTmf(KeyConfig trustConfig)
         List<X509Certificate> certs;
 
         if (trustConfig == null) {
-            certs = CollectionsHelper.listOf();
+            certs = List.of();
         } else {
             certs = trustConfig.certs();
         }

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerConfiguration.java
Patch:
@@ -28,7 +28,6 @@
 
 import javax.net.ssl.SSLContext;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.context.Context;
 import io.helidon.common.http.ContextualRegistry;
 import io.helidon.config.Config;
@@ -490,7 +489,7 @@ public Builder config(Config config) {
             // sockets
             Config socketsConfig = config.get("sockets");
             if (socketsConfig.exists()) {
-                for (Config socketConfig : socketsConfig.asNodeList().orElse(CollectionsHelper.listOf())) {
+                for (Config socketConfig : socketsConfig.asNodeList().orElse(List.of())) {
                     String socketName = socketConfig.name();
                     sockets.put(socketName, configureSocket(socketConfig, SocketConfiguration.builder()).build());
                 }

File: webserver/webserver/src/main/java/io/helidon/webserver/WebTracingConfig.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 
-import io.helidon.common.CollectionsHelper;
 import io.helidon.common.context.Context;
 import io.helidon.common.context.Contexts;
 import io.helidon.common.http.Http;
@@ -319,7 +318,7 @@ private void doAccept(ServerRequest req, ServerResponse res) {
                             Tags.HTTP_STATUS.set(span, statusCode);
                             if (statusCode >= 400) {
                                 Tags.ERROR.set(span, true);
-                                span.log(CollectionsHelper.mapOf("event", "error",
+                                span.log(Map.of("event", "error",
                                                                  "message", "Response HTTP status: " + statusCode,
                                                                  "error.kind", statusCode < 500 ? "ClientError" : "ServerError"));
                             }
@@ -328,7 +327,7 @@ private void doAccept(ServerRequest req, ServerResponse res) {
                     })
                     .exceptionally(t -> {
                         Tags.ERROR.set(span, true);
-                        span.log(CollectionsHelper.mapOf("event", "error",
+                        span.log(Map.of("event", "error",
                                                          "error.object", t));
                         span.finish();
                         return null;

File: webserver/webserver/src/test/java/io/helidon/webserver/BytesReuseTest.java
Patch:
@@ -32,7 +32,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.InputStreamHelper;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.reactive.Multi;
@@ -131,7 +130,7 @@ private static void startServer(int port) throws Exception {
                                 try {
                                     LOGGER.info("Consuming data from input stream!");
                                     assertAgainstPrefixQueryParam(req,
-                                            new String(InputStreamHelper.readAllBytes(stream)));
+                                            new String(stream.readAllBytes()));
                                     res.send("Finished");
                                 } catch (IOException e) {
                                     req.next(new IllegalStateException("Got an IO error.", e));

File: grpc/client/src/main/java/module-info.java
Patch:
@@ -22,6 +22,6 @@
 
     requires transitive io.helidon.grpc.core;
 
-    requires opentracing.api;
+    requires io.opentracing.api;
     requires opentracing.grpc;
 }

File: grpc/server/src/main/java/io/helidon/grpc/server/GrpcTracing.java
Patch:
@@ -39,7 +39,7 @@
 import io.opentracing.contrib.grpc.OpenTracingContextKey;
 import io.opentracing.contrib.grpc.OperationNameConstructor;
 import io.opentracing.propagation.Format;
-import io.opentracing.propagation.TextMapExtractAdapter;
+import io.opentracing.propagation.TextMapAdapter;
 
 /**
  * A {@link ServerInterceptor} that adds tracing to gRPC service calls.
@@ -147,7 +147,7 @@ private Span getSpanFromHeaders(Map<String, String> headers, String operationNam
 
         try {
             SpanContext parentSpanCtx = tracer.extract(Format.Builtin.HTTP_HEADERS,
-                                                       new TextMapExtractAdapter(headers));
+                                                       new TextMapAdapter(headers));
             if (parentSpanCtx == null) {
                 span = tracer.buildSpan(operationName)
                         .start();

File: grpc/server/src/main/java/module-info.java
Patch:
@@ -30,7 +30,7 @@
 
     requires transitive grpc.services;
     requires transitive microprofile.health.api;
-    requires transitive opentracing.api;
+    requires transitive io.opentracing.api;
     requires transitive opentracing.grpc;
 
     requires java.annotation;

File: microprofile/tracing/src/main/java/io/helidon/microprofile/tracing/MpTracingInterceptor.java
Patch:
@@ -85,8 +85,9 @@ private <E extends Member & AnnotatedElement> Object trace(InvocationContext con
 
             parentSpan.ifPresent(spanBuilder::asChildOf);
 
-            Scope scope = spanBuilder.startActive(false);
-            Span span = scope.span();
+            Span span = spanBuilder.start();
+            Scope scope = tracer.scopeManager().activate(span);
+
             try {
                 return context.proceed();
             } catch (Exception e) {

File: microprofile/tracing/src/main/java/module-info.java
Patch:
@@ -23,7 +23,7 @@
 
     requires java.ws.rs;
     requires jersey.common;
-    requires opentracing.api;
+    requires io.opentracing.api;
 
     requires static cdi.api;
     requires static javax.inject;

File: tracing/jaeger/src/main/java/module-info.java
Patch:
@@ -23,9 +23,10 @@
     requires io.helidon.tracing;
 
     requires java.logging;
-    requires opentracing.util;
+    requires io.opentracing.util;
     requires jaeger.client;
     requires jaeger.core;
+    requires io.opentracing.noop;
 
     exports io.helidon.tracing.jaeger;
 

File: tracing/jersey-client/src/main/java/io/helidon/tracing/jersey/client/ClientTracingFilter.java
Patch:
@@ -45,7 +45,7 @@
 import io.opentracing.SpanContext;
 import io.opentracing.Tracer;
 import io.opentracing.propagation.Format;
-import io.opentracing.propagation.TextMapInjectAdapter;
+import io.opentracing.propagation.TextMapAdapter;
 import io.opentracing.tag.Tags;
 import io.opentracing.util.GlobalTracer;
 
@@ -325,7 +325,7 @@ private Map<String, List<String>> tracingHeaders(Tracer tracer, Span currentSpan
 
         tracer.inject(currentSpan.context(),
                       Format.Builtin.HTTP_HEADERS,
-                      new TextMapInjectAdapter(tracerHeaders));
+                      new TextMapAdapter(tracerHeaders));
 
         return new HashMap<>(tracerHeaders.entrySet()
                                      .stream()

File: tracing/jersey-client/src/main/java/module-info.java
Patch:
@@ -28,8 +28,8 @@
     requires jersey.client;
     requires jersey.common;
 
-    requires opentracing.api;
-    requires opentracing.util;
+    requires io.opentracing.api;
+    requires io.opentracing.util;
 
     requires io.helidon.tracing;
     requires io.helidon.tracing.config;

File: tracing/jersey/src/main/java/io/helidon/tracing/jersey/AbstractTracingFilter.java
Patch:
@@ -83,7 +83,7 @@ public void filter(ContainerRequestContext requestContext) {
             configureSpan(spanBuilder);
 
             Span span = spanBuilder.start();
-            Scope spanScope = tracer.scopeManager().activate(span, false);
+            Scope spanScope = tracer.scopeManager().activate(span);
 
             requestContext.setProperty(SPAN_PROPERTY, span);
             requestContext.setProperty(SPAN_SCOPE_PROPERTY, spanScope);

File: tracing/jersey/src/main/java/module-info.java
Patch:
@@ -23,7 +23,7 @@
 
     requires java.ws.rs;
     requires jersey.server;
-    requires opentracing.api;
+    requires io.opentracing.api;
     requires io.helidon.common;
     requires io.helidon.common.context;
     requires io.helidon.jersey.common;

File: tracing/tracing/src/main/java/module-info.java
Patch:
@@ -23,9 +23,9 @@
     requires io.helidon.common;
     requires io.helidon.common.serviceloader;
     requires io.helidon.config;
-    requires transitive opentracing.api;
-    requires opentracing.noop;
-    requires opentracing.util;
+    requires transitive io.opentracing.api;
+    requires io.opentracing.noop;
+    requires io.opentracing.util;
 
     exports io.helidon.tracing;
     exports io.helidon.tracing.spi;

File: tracing/zipkin/src/main/java/module-info.java
Patch:
@@ -23,12 +23,13 @@
     requires io.helidon.tracing;
 
     requires java.logging;
-    requires opentracing.util;
+    requires io.opentracing.util;
     requires brave.opentracing;
     requires zipkin2.reporter;
     requires zipkin2.reporter.urlconnection;
     requires zipkin2;
     requires brave;
+    requires io.opentracing.noop;
 
     exports io.helidon.tracing.zipkin;
 

File: webserver/jersey/src/main/java/module-info.java
Patch:
@@ -21,7 +21,7 @@
     requires transitive java.annotation;
     requires transitive io.helidon.webserver;
     requires transitive java.ws.rs;
-    requires transitive opentracing.api;
+    requires transitive io.opentracing.api;
     requires transitive io.helidon.jersey.server;
 
     requires io.helidon.common.context;

File: webserver/webserver/src/main/java/io/helidon/webserver/WebTracingConfig.java
Patch:
@@ -36,7 +36,7 @@
 import io.opentracing.Tracer;
 import io.opentracing.noop.NoopSpanBuilder;
 import io.opentracing.propagation.Format;
-import io.opentracing.propagation.TextMapExtractAdapter;
+import io.opentracing.propagation.TextMapAdapter;
 import io.opentracing.tag.Tags;
 import io.opentracing.util.GlobalTracer;
 
@@ -255,7 +255,7 @@ private void doAccept(ServerRequest req, ServerResponse res) {
                 }
             }
 
-            SpanContext inboundSpanContext = tracer.extract(Format.Builtin.HTTP_HEADERS, new TextMapExtractAdapter(headersMap));
+            SpanContext inboundSpanContext = tracer.extract(Format.Builtin.HTTP_HEADERS, new TextMapAdapter(headersMap));
 
             if (inboundSpanContext instanceof NoopSpanBuilder) {
                 // this is all a noop stuff, does not matter what I do here - this is to prevent null pointers

File: webserver/webserver/src/main/java/module-info.java
Patch:
@@ -27,11 +27,11 @@
     requires transitive io.helidon.common.context;
     requires transitive io.helidon.config;
     requires transitive io.helidon.tracing.config;
-    requires transitive opentracing.util;
+    requires transitive io.opentracing.util;
 
     requires java.logging;
-    requires opentracing.api;
-    requires opentracing.noop;
+    requires io.opentracing.api;
+    requires io.opentracing.noop;
     requires io.netty.handler;
     requires io.netty.codec.http;
     requires io.netty.codec;

File: common/configurable/src/test/java/io/helidon/common/configurable/ScheduledThreadPoolSupplierTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.config.Config;
+
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 

File: common/http/src/main/java/io/helidon/common/http/Content.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,11 +17,10 @@
 package io.helidon.common.http;
 
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import io.helidon.common.reactive.Flow;
-
 /**
  * Represents an HTTP entity as a {@link Flow.Publisher publisher} of {@link DataChunk chunks} with specific
  * features.

File: common/http/src/main/java/io/helidon/common/http/Reader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,10 +17,9 @@
 package io.helidon.common.http;
 
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.Flow;
 import java.util.function.BiFunction;
 
-import io.helidon.common.reactive.Flow;
-
 /**
  * The Reader transforms a {@link DataChunk} publisher into a completion stage of the associated type.
  *

File: common/http/src/test/java/io/helidon/common/http/AsciiTest.java
Patch:
@@ -16,12 +16,12 @@
 
 package io.helidon.common.http;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import org.junit.jupiter.api.Test;
-
 /**
  * Unit tests for class {@link Ascii}.
  *

File: common/reactive/src/main/java/io/helidon/common/reactive/EmptySubscription.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.common.reactive;
 
-import io.helidon.common.reactive.Flow.Subscription;
+import java.util.concurrent.Flow.Subscription;
 
 /**
  * Empty subscription singleton.

File: common/reactive/src/main/java/io/helidon/common/reactive/FixedItemsPublisher.java
Patch:
@@ -18,11 +18,11 @@
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.Queue;
+import java.util.concurrent.Flow;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.Flow.Subscriber;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.common.reactive.Flow.Subscriber;
-
 /**
  * Fixed items publisher implementation.
  */

File: common/reactive/src/main/java/io/helidon/common/reactive/FunctionalSubscriber.java
Patch:
@@ -15,11 +15,10 @@
  */
 package io.helidon.common.reactive;
 
+import java.util.concurrent.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscription;
 import java.util.function.Consumer;
 
-import io.helidon.common.reactive.Flow.Subscriber;
-import io.helidon.common.reactive.Flow.Subscription;
-
 /**
  * A subscriber delegated java functions for each of the subscriber methods.
  */

File: common/reactive/src/main/java/io/helidon/common/reactive/Multi.java
Patch:
@@ -17,10 +17,10 @@
 
 import java.util.Collection;
 import java.util.List;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.Flow.Subscriber;
 
 import io.helidon.common.mapper.Mapper;
-import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.common.reactive.Flow.Subscriber;
 
 import static io.helidon.common.CollectionsHelper.listOf;
 

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiEmpty.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.helidon.common.reactive;
 
-import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.common.reactive.Flow.Subscriber;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.Flow.Subscriber;
 
 /**
  * Implementation of {@link Multi} that represents the absence of a value by invoking {@link Subscriber#onComplete() } during

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiError.java
Patch:
@@ -16,9 +16,8 @@
 package io.helidon.common.reactive;
 
 import java.util.Objects;
-
-import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.common.reactive.Flow.Subscriber;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.Flow.Subscriber;
 
 /**
  * Implementation of {@link Multi} that represents an error, raised during {@link Publisher#subscribe(Subscriber)} by invoking

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiFromPublisher.java
Patch:
@@ -16,9 +16,9 @@
 package io.helidon.common.reactive;
 
 import java.util.Objects;
-
-import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.common.reactive.Flow.Subscriber;
+import java.util.concurrent.Flow;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.Flow.Subscriber;
 
 /**
  * Implementation of {@link Multi} that is backed by a {@link Publisher}.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiMappingProcessor.java
Patch:
@@ -16,9 +16,9 @@
 package io.helidon.common.reactive;
 
 import java.util.Objects;
+import java.util.concurrent.Flow.Publisher;
 
 import io.helidon.common.mapper.Mapper;
-import io.helidon.common.reactive.Flow.Publisher;
 
 /**
  * Processor of {@link Publisher} to {@link Single} that publishes and maps each received item.

File: common/reactive/src/main/java/io/helidon/common/reactive/MultiNever.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.common.reactive;
 
-import io.helidon.common.reactive.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscriber;
 
 /**
  * Implementation of {@link Multi} that never invokes {@link Subscriber#onComplete()} or

File: common/reactive/src/main/java/io/helidon/common/reactive/OutputStreamPublisher.java
Patch:
@@ -22,9 +22,10 @@
 import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow;
 
 /**
- * Output stream that {@link io.helidon.common.reactive.Flow.Publisher} publishes any data written to it as {@link ByteBuffer}
+ * Output stream that {@link java.util.concurrent.Flow.Publisher} publishes any data written to it as {@link ByteBuffer}
  * events.
  */
 @SuppressWarnings("WeakerAccess")

File: common/reactive/src/main/java/io/helidon/common/reactive/ReactiveStreamsAdapter.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.helidon.common.reactive;
 
+import java.util.concurrent.Flow;
+
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;

File: common/reactive/src/main/java/io/helidon/common/reactive/RequestedCounter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * Requested event counter.
  *
  * This utility class helps to safely track and tryProcess the back-pressure of
- * {@link io.helidon.common.reactive.Flow.Subscriber}s.
+ * {@link java.util.concurrent.Flow.Subscriber}s.
  */
 public class RequestedCounter {
 

File: common/reactive/src/main/java/io/helidon/common/reactive/RetrySchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 package io.helidon.common.reactive;
 
 /**
- * Defines delay for next read/poll operation in a polling {@link io.helidon.common.reactive.Flow.Publisher publisher}.
+ * Defines delay for next read/poll operation in a polling {@link java.util.concurrent.Flow.Publisher publisher}.
  * <p>
  * Schema defines a delay before next poll if the last one did not get new data.
  * <p>

File: common/reactive/src/main/java/io/helidon/common/reactive/Single.java
Patch:
@@ -19,12 +19,12 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.Flow.Subscriber;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
 import io.helidon.common.mapper.Mapper;
-import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.common.reactive.Flow.Subscriber;
 
 /**
  * Single item publisher utility.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleError.java
Patch:
@@ -16,9 +16,8 @@
 package io.helidon.common.reactive;
 
 import java.util.Objects;
-
-import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.common.reactive.Flow.Subscriber;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.Flow.Subscriber;
 
 /**
  * Implementation of {@link Single} that represents an error, raised during

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleJust.java
Patch:
@@ -16,8 +16,7 @@
 package io.helidon.common.reactive;
 
 import java.util.Objects;
-
-import io.helidon.common.reactive.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscriber;
 
 /**
  * Implementation of {@link Single} that represents a non {@code null} value.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleMappingProcessor.java
Patch:
@@ -16,9 +16,9 @@
 package io.helidon.common.reactive;
 
 import java.util.Objects;
+import java.util.concurrent.Flow.Publisher;
 
 import io.helidon.common.mapper.Mapper;
-import io.helidon.common.reactive.Flow.Publisher;
 
 /**
  * Processor of {@link Publisher} to {@link Single} that only processes the first

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleMultiMappingProcessor.java
Patch:
@@ -16,9 +16,9 @@
 package io.helidon.common.reactive;
 
 import java.util.Objects;
+import java.util.concurrent.Flow.Publisher;
 
 import io.helidon.common.mapper.Mapper;
-import io.helidon.common.reactive.Flow.Publisher;
 
 /**
  * Processor of {@link Single} to {@link Publisher} that expands the first (and

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleNever.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.common.reactive;
 
-import io.helidon.common.reactive.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscriber;
 
 /**
  * Implementation of {@link Single} that never invokes

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleSubscriberHolder.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 
@@ -38,7 +39,7 @@ public class SingleSubscriberHolder<T> {
      * <p>
      * In case the subscriber registration fails (e.g. the holder already holds a previously registered subscriber
      * or the holder has been {@link #close(Consumer) closed}), the newly registered subscriber is notified about the
-     * error by invoking it's {@link io.helidon.common.reactive.Flow.Subscriber#onError(Throwable) subscriber.onError} method.
+     * error by invoking it's {@link java.util.concurrent.Flow.Subscriber#onError(Throwable) subscriber.onError} method.
      *
      * @param subscriber subscriber to be registered in the holder.
      * @return {@code true} if the subscriber was successfully registered, {@code false} otherwise.
@@ -67,7 +68,7 @@ public boolean register(Flow.Subscriber<? super T> subscriber) {
     /**
      * Mark the subscriber holder as closed.
      * <p>
-     * Invoking this method will ensure that any new attempts to {@link #register(io.helidon.common.reactive.Flow.Subscriber)
+     * Invoking this method will ensure that any new attempts to {@link #register(java.util.concurrent.Flow.Subscriber)
      * register} a new subscriber
      * would fail.
      * <p>

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleSubscription.java
Patch:
@@ -15,11 +15,10 @@
  */
 package io.helidon.common.reactive;
 
+import java.util.concurrent.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscription;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import io.helidon.common.reactive.Flow.Subscriber;
-import io.helidon.common.reactive.Flow.Subscription;
-
 /**
  * Single fixed item subscription.
  */

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleToFuture.java
Patch:
@@ -17,11 +17,10 @@
 
 import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscription;
 import java.util.concurrent.atomic.AtomicReference;
 
-import io.helidon.common.reactive.Flow.Subscriber;
-import io.helidon.common.reactive.Flow.Subscription;
-
 /**
  * {@link Single} exposed as a {@link CompletableFuture}.
  */

File: common/reactive/src/main/java/io/helidon/common/reactive/SubmissionPublisher.java
Patch:
@@ -17,6 +17,7 @@
 package io.helidon.common.reactive;
 
 import java.util.concurrent.Executor;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BiPredicate;
 import java.util.function.Consumer;

File: common/reactive/src/main/java/io/helidon/common/reactive/Subscribable.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.helidon.common.reactive;
 
+import java.util.concurrent.Flow;
+import java.util.concurrent.Flow.Publisher;
 import java.util.function.Consumer;
 
-import io.helidon.common.reactive.Flow.Publisher;
-
 /**
  * Decorated publisher that allows subscribing to individual events with java functions.
  * @param <T> item type

File: common/reactive/src/main/java/io/helidon/common/reactive/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 /**
  * Common reactive library for Helidon projects.
  *
- * @see io.helidon.common.reactive.Flow
+ * @see java.util.concurrent.Flow
  * @see io.helidon.common.reactive.ReactiveStreamsAdapter
  * @see io.helidon.common.reactive.OutputStreamPublisher
  * @see io.helidon.common.reactive.SubmissionPublisher

File: common/reactive/src/test/java/io/helidon/common/reactive/BaseProcessorTest.java
Patch:
@@ -16,8 +16,8 @@
 package io.helidon.common.reactive;
 
 
-import io.helidon.common.reactive.Flow.Subscriber;
-import io.helidon.common.reactive.Flow.Subscription;
+import java.util.concurrent.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscription;
 
 import org.junit.jupiter.api.Test;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/MultiTest.java
Patch:
@@ -15,10 +15,11 @@
  */
 package io.helidon.common.reactive;
 
-import java.util.List;
 import java.util.Collections;
+import java.util.List;
+import java.util.concurrent.Flow.Subscription;
+
 import io.helidon.common.mapper.Mapper;
-import io.helidon.common.reactive.Flow.Subscription;
 
 import org.junit.jupiter.api.Test;
 

File: common/reactive/src/test/java/io/helidon/common/reactive/SingleTest.java
Patch:
@@ -16,13 +16,12 @@
 package io.helidon.common.reactive;
 
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscription;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import io.helidon.common.reactive.Flow.Subscriber;
-import io.helidon.common.reactive.Flow.Subscription;
-
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.equalTo;

File: common/reactive/src/test/java/io/helidon/common/reactive/TestPublisher.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.helidon.common.reactive;
 
-import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.common.reactive.Flow.Subscriber;
-import io.helidon.common.reactive.Flow.Subscription;
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.Queue;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscription;
 
 /**
  * Dummy items publisher for testing purpose.

File: common/reactive/src/test/java/io/helidon/common/reactive/TestSubscriber.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.LinkedList;
 import java.util.List;
+import java.util.concurrent.Flow;
 
 /**
  * A dummy subscriber for testing purpose.

File: common/reactive/src/test/java/io/helidon/common/reactive/TestSubscription.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.common.reactive;
 
-import io.helidon.common.reactive.Flow.Subscription;
+import java.util.concurrent.Flow.Subscription;
 
 /**
  * Dummy subscription for testing purpose.

File: common/reactive/src/test/java/io/helidon/common/reactive/WrappedOriginThreadPublisher.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.helidon.common.reactive;
 
+import java.util.concurrent.Flow;
+
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;

File: common/reactive/src/test/java/io/helidon/common/reactive/valve/ValvePublisherTest.java
Patch:
@@ -18,12 +18,12 @@
 
 import java.util.List;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow.Subscriber;
+import java.util.concurrent.Flow.Subscription;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.common.reactive.Collector;
-import io.helidon.common.reactive.Flow.Subscriber;
-import io.helidon.common.reactive.Flow.Subscription;
 import io.helidon.common.reactive.Multi;
 
 import org.junit.jupiter.api.Test;

File: config/config/src/main/java/io/helidon/config/AbstractConfigImpl.java
Patch:
@@ -26,13 +26,13 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.internal.ConfigKeyImpl;
 
 import org.eclipse.microprofile.config.spi.ConfigSource;

File: config/config/src/main/java/io/helidon/config/BuilderImpl.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Set;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Flow;
 import java.util.function.BiFunction;
 import java.util.function.Function;
 import java.util.function.Supplier;
@@ -40,7 +41,6 @@
 import io.helidon.common.CollectionsHelper;
 import io.helidon.common.GenericType;
 import io.helidon.common.Prioritized;
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.common.serviceloader.Priorities;
 import io.helidon.config.ConfigMapperManager.MapperProviders;

File: config/config/src/main/java/io/helidon/config/CompositeConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,12 +24,12 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.internal.ConfigThreadFactory;
 import io.helidon.config.internal.ConfigUtils;

File: config/config/src/main/java/io/helidon/config/Config.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Flow;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -30,7 +31,6 @@
 
 import io.helidon.common.CollectionsHelper;
 import io.helidon.common.GenericType;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.spi.ConfigFilter;
 import io.helidon.config.spi.ConfigMapperProvider;

File: config/config/src/main/java/io/helidon/config/ConfigFactory.java
Patch:
@@ -29,14 +29,14 @@
 import java.util.TreeMap;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.spi.ConfigFilter;
 import io.helidon.config.spi.ConfigNode;

File: config/config/src/main/java/io/helidon/config/ConfigHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,11 +27,11 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.ServiceLoader;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.internal.ConfigFileTypeDetector;
 
 /**

File: config/config/src/main/java/io/helidon/config/ConfigSources.java
Patch:
@@ -33,12 +33,12 @@
 import java.util.Optional;
 import java.util.Properties;
 import java.util.Set;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.function.Supplier;
 
 import io.helidon.common.Builder;
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.internal.ConfigUtils;
 import io.helidon.config.internal.MapConfigSource;
 import io.helidon.config.internal.PrefixedConfigSource;

File: config/config/src/main/java/io/helidon/config/PollingStrategies.java
Patch:
@@ -20,10 +20,10 @@
 import java.nio.file.WatchEvent.Modifier;
 import java.nio.file.WatchService;
 import java.time.Duration;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ScheduledExecutorService;
 
 import io.helidon.common.Builder;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.internal.FilesystemWatchPollingStrategy;
 import io.helidon.config.internal.ScheduledPollingStrategy;
 import io.helidon.config.internal.ScheduledPollingStrategy.RegularRecurringPolicy;

File: config/config/src/main/java/io/helidon/config/ProviderImpl.java
Patch:
@@ -26,13 +26,13 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.internal.ConfigUtils;

File: config/config/src/main/java/io/helidon/config/SuspendablePublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,11 +16,10 @@
 
 package io.helidon.config;
 
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import io.helidon.common.reactive.Flow;
-
 /**
  * Publisher with "suspended" and "running" behavior.
  * <p>

File: config/config/src/main/java/io/helidon/config/UseFirstAvailableConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,8 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
+import java.util.concurrent.Flow;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.spi.ConfigContext;
 import io.helidon.config.spi.ConfigNode.ObjectNode;
 import io.helidon.config.spi.ConfigSource;

File: config/config/src/main/java/io/helidon/config/internal/FilesystemWatchPollingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,14 +28,14 @@
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Flow;
 import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;

File: config/config/src/main/java/io/helidon/config/internal/ScheduledPollingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import java.time.Duration;
 import java.util.Objects;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
@@ -27,7 +28,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.ConfigHelper;
 import io.helidon.config.spi.PollingStrategy;

File: config/config/src/main/java/io/helidon/config/spi/AbstractConfigSource.java
Patch:
@@ -21,11 +21,11 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
 
 import io.helidon.common.OptionalHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.internal.ListNodeBuilderImpl;

File: config/config/src/main/java/io/helidon/config/spi/AbstractMpSource.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.TreeMap;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 
 import org.eclipse.microprofile.config.spi.ConfigSource;
 

File: config/config/src/main/java/io/helidon/config/spi/AbstractOverrideSource.java
Patch:
@@ -17,8 +17,7 @@
 package io.helidon.config.spi;
 
 import java.util.Optional;
-
-import io.helidon.common.reactive.Flow;
+import java.util.concurrent.Flow;
 
 /**
  * Base abstract implementation of {@link OverrideSource}, suitable for concrete

File: config/config/src/main/java/io/helidon/config/spi/AbstractSource.java
Patch:
@@ -20,12 +20,12 @@
 import java.util.Optional;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;

File: config/config/src/main/java/io/helidon/config/spi/Changeable.java
Patch:
@@ -17,8 +17,7 @@
 package io.helidon.config.spi;
 
 import java.util.Optional;
-
-import io.helidon.common.reactive.Flow;
+import java.util.concurrent.Flow;
 
 /**
  * A changeable component is a component that may identify a change

File: config/config/src/main/java/io/helidon/config/spi/PollingStrategy.java
Patch:
@@ -19,9 +19,9 @@
 import java.nio.file.Path;
 import java.time.Duration;
 import java.time.Instant;
+import java.util.concurrent.Flow;
 import java.util.function.Supplier;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.PollingStrategies;
 

File: config/config/src/main/java/io/helidon/config/spi/Source.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,8 +17,8 @@
 package io.helidon.config.spi;
 
 import java.util.Optional;
+import java.util.concurrent.Flow;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.ConfigException;
 
 /**

File: config/config/src/test/java/io/helidon/config/AbstractConfigImplTest.java
Patch:
@@ -19,12 +19,12 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 
 import io.helidon.common.GenericType;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.internal.ConfigKeyImpl;
 import io.helidon.config.spi.ConfigFilter;
 import io.helidon.config.spi.ConfigNode;

File: config/config/src/test/java/io/helidon/config/AssertingFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
 import io.helidon.config.spi.ConfigFilter;
 
 import org.hamcrest.CoreMatchers;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 
 /**

File: config/config/src/test/java/io/helidon/config/BuilderImplTest.java
Patch:
@@ -17,9 +17,9 @@
 package io.helidon.config;
 
 import java.util.concurrent.Executor;
+import java.util.concurrent.Flow;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.test.infra.RestoreSystemPropertiesExt;
 
 import org.junit.jupiter.api.Test;

File: config/config/src/test/java/io/helidon/config/ClasspathConfigSourceTest.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.HashSet;
 import java.util.Optional;
 import java.util.Set;
+import java.util.concurrent.Flow;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.ClasspathConfigSource.ClasspathBuilder;
 import io.helidon.config.spi.ConfigContext;
 import io.helidon.config.spi.ConfigNode.ObjectNode;

File: config/config/src/test/java/io/helidon/config/ClasspathOverrideSourceTest.java
Patch:
@@ -19,8 +19,8 @@
 import java.net.URISyntaxException;
 import java.nio.file.Path;
 import java.util.Optional;
+import java.util.concurrent.Flow;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.ClasspathOverrideSource.ClasspathBuilder;
 import io.helidon.config.spi.OverrideSource;
 import io.helidon.config.spi.PollingStrategy;

File: config/config/src/test/java/io/helidon/config/CompositeConfigSourceTest.java
Patch:
@@ -22,12 +22,12 @@
 import java.time.Instant;
 import java.util.List;
 import java.util.Optional;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.internal.PropertiesConfigParser;
 import io.helidon.config.spi.ConfigContext;
 import io.helidon.config.spi.ConfigNode.ObjectNode;

File: config/config/src/test/java/io/helidon/config/ConfigDiffTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,11 +21,12 @@
 
 import io.helidon.common.CollectionsHelper;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.empty;
 import static org.hamcrest.core.Is.is;
-import org.junit.jupiter.api.Test;
 
 /**
  * Tests {@link ConfigDiff}.

File: config/config/src/test/java/io/helidon/config/ConfigEmptyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.empty;
 import static org.hamcrest.core.Is.is;
-import static org.junit.jupiter.api.Assertions.assertAll;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**

File: config/config/src/test/java/io/helidon/config/ConfigHelperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,13 +19,13 @@
 import java.io.IOException;
 import java.io.StringReader;
 import java.nio.CharBuffer;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 
-import io.helidon.common.reactive.Flow;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
-import org.junit.jupiter.api.Test;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: config/config/src/test/java/io/helidon/config/ConfigSourcePollingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,10 +18,10 @@
 
 import java.util.Optional;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.IntStream;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.spi.ConfigContext;
 import io.helidon.config.spi.ConfigNode.ObjectNode;

File: config/config/src/test/java/io/helidon/config/FileConfigSourceTest.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.FileConfigSource.FileBuilder;
 import io.helidon.config.spi.ConfigContext;
 import io.helidon.config.spi.ConfigNode.ObjectNode;

File: config/config/src/test/java/io/helidon/config/ListenerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 
 package io.helidon.config;
 
-import io.helidon.common.reactive.Flow;
+import java.util.concurrent.Flow;
 
 import org.junit.jupiter.api.Test;
 

File: config/config/src/test/java/io/helidon/config/TestingConfigChangeSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 package io.helidon.config;
 
 /**
- * Testing implementation of {@link io.helidon.common.reactive.Flow.Subscriber} on {@link Config#changes()} events.
+ * Testing implementation of {@link java.util.concurrent.Flow.Subscriber} on {@link Config#changes()} events.
  */
 public class TestingConfigChangeSubscriber extends TestingSubscriber<Config> {
 }

File: config/config/src/test/java/io/helidon/config/TestingConfigSourceChangeSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 import io.helidon.config.spi.ConfigSource;
 
 /**
- * Testing implementation of {@link io.helidon.common.reactive.Flow.Subscriber} on {@link ConfigSource#changes()} events.
+ * Testing implementation of {@link java.util.concurrent.Flow.Subscriber} on {@link ConfigSource#changes()} events.
  */
 public class TestingConfigSourceChangeSubscriber extends TestingSubscriber<Optional<ObjectNode>> {
 }

File: config/config/src/test/java/io/helidon/config/TestingPollingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,9 +17,9 @@
 package io.helidon.config;
 
 import java.time.Instant;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ForkJoinPool;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.spi.PollingStrategy;
 

File: config/config/src/test/java/io/helidon/config/TestingSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,10 +17,9 @@
 package io.helidon.config;
 
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.reactive.Flow;
-
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 

File: config/config/src/test/java/io/helidon/config/UrlConfigSourceTest.java
Patch:
@@ -19,8 +19,8 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.time.Duration;
+import java.util.concurrent.Flow;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.UrlConfigSource.UrlBuilder;
 import io.helidon.config.spi.ConfigContext;
 import io.helidon.config.spi.ConfigSource;

File: config/config/src/test/java/io/helidon/config/internal/ConfigKeyImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,13 +19,14 @@
 import io.helidon.config.Config;
 
 import org.hamcrest.Matcher;
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.lessThan;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.nullValue;
-import org.junit.jupiter.api.Test;
 /**
  * Tests {@link ConfigKeyImpl}.
  */

File: config/config/src/test/java/io/helidon/config/internal/ConfigUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,14 +28,14 @@
 import javax.annotation.Priority;
 
 import io.helidon.config.internal.ConfigUtils.ScheduledTask;
-import static org.hamcrest.MatcherAssert.assertThat;
 
 import org.hamcrest.Matchers;
 import org.hamcrest.core.IsInstanceOf;
+import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import org.junit.jupiter.api.Test;
 
 /**
  * Tests {@link ConfigUtils}.

File: config/config/src/test/java/io/helidon/config/internal/FileOverrideSourceTest.java
Patch:
@@ -16,14 +16,13 @@
 
 package io.helidon.config.internal;
 
-import java.io.File;
 import java.io.IOException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.time.Instant;
 import java.util.Optional;
+import java.util.concurrent.Flow;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.ConfigException;
 import io.helidon.config.OverrideSources;
 import io.helidon.config.internal.FileOverrideSource.FileBuilder;

File: config/config/src/test/java/io/helidon/config/internal/FilesystemWatchPollingStrategyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,10 +24,10 @@
 import java.nio.file.Paths;
 import java.util.UUID;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.spi.PollingStrategy;
 import io.helidon.config.test.infra.TemporaryFolderExt;

File: config/config/src/test/java/io/helidon/config/internal/OverrideConfigFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,10 +24,11 @@
 import io.helidon.config.Config;
 import io.helidon.config.spi.OverrideSource;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.core.Is.is;
-import org.junit.jupiter.api.Test;
 
 /**
  * Tests {@link OverrideConfigFilter}.

File: config/config/src/test/java/io/helidon/config/internal/OverrideSourcesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,11 +24,12 @@
 import io.helidon.config.OverrideSources;
 import io.helidon.config.spi.OverrideSource;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.sameInstance;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
-import org.junit.jupiter.api.Test;
 
 /**
  * Tests {@link OverrideSources}.

File: config/config/src/test/java/io/helidon/config/internal/ScheduledPollingStrategyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,10 +19,10 @@
 import java.time.Duration;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.spi.PollingStrategy.PollingEvent;
 
 import org.junit.jupiter.api.Test;

File: config/config/src/test/java/io/helidon/config/internal/UrlOverrideSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,8 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.concurrent.Flow;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.ConfigException;
 import io.helidon.config.OverrideSources;
 import io.helidon.config.spi.OverrideSource;

File: config/config/src/test/java/io/helidon/config/spi/AbstractParsableConfigSourceTest.java
Patch:
@@ -21,11 +21,11 @@
 import java.time.Instant;
 import java.util.Optional;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigParsers;

File: config/config/src/test/java/io/helidon/config/spi/AbstractSourceTest.java
Patch:
@@ -19,11 +19,11 @@
 import java.time.Instant;
 import java.util.Optional;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigSources;

File: config/config/src/test/java/io/helidon/config/spi/ConfigSourceTest.java
Patch:
@@ -19,9 +19,9 @@
 import java.io.StringReader;
 import java.util.Optional;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.ConfigParsers;
 import io.helidon.config.ConfigSources;
 import io.helidon.config.ValueNodeMatcher;

File: config/config/src/test/java/io/helidon/config/spi/OverrideSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,11 +20,12 @@
 import java.io.StringReader;
 import java.util.LinkedHashMap;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
-import org.junit.jupiter.api.Test;
 
 /**
  * Tests {@link OverrideSource}.

File: config/config/src/test/java/io/helidon/config/spi/SourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,9 +20,10 @@
 
 import io.helidon.config.ConfigException;
 
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
-import org.junit.jupiter.api.Test;
 
 /**
  * Tests default methods of {@link Source}.

File: config/encryption/src/test/java/io/helidon/config/encryption/EncryptionUtilTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.nio.charset.StandardCharsets;
 import java.security.InvalidKeyException;
-import java.security.Key;
 import java.security.KeyPair;
 import java.security.KeyPairGenerator;
 import java.security.NoSuchAlgorithmException;
@@ -38,7 +37,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertSame;
-import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.fail;
 
 /**

File: config/etcd/src/main/java/io/helidon/config/etcd/EtcdWatchPollingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,10 +17,10 @@
 package io.helidon.config.etcd;
 
 import java.time.Instant;
+import java.util.concurrent.Flow;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigHelper;

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/EtcdClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,8 +17,7 @@
 package io.helidon.config.etcd.internal.client;
 
 import java.util.concurrent.Executor;
-
-import io.helidon.common.reactive.Flow;
+import java.util.concurrent.Flow;
 
 /**
  * Etcd client interface provides basic get operation.

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/v2/EtcdV2Client.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,12 +21,12 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/v3/EtcdV3Client.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,11 +20,11 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;

File: config/etcd/src/test/java/io/helidon/config/etcd/EtcdConfigSourceBuilderTest.java
Patch:
@@ -18,10 +18,10 @@
 
 import java.net.URI;
 import java.util.Set;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigParsers;
 import io.helidon.config.ConfigSources;

File: config/etcd/src/test/java/io/helidon/config/etcd/EtcdConfigSourceIT.java
Patch:
@@ -21,9 +21,9 @@
 import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.etcd.EtcdConfigSourceBuilder.EtcdApi;
 import io.helidon.config.etcd.internal.client.EtcdClient;

File: config/etcd/src/test/java/io/helidon/config/etcd/EtcdWatchPollingStrategyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,9 +16,9 @@
 
 package io.helidon.config.etcd;
 
-import io.helidon.common.reactive.Flow;
 import java.net.URI;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 
 import io.helidon.config.etcd.EtcdConfigSourceBuilder.EtcdApi;
@@ -27,10 +27,10 @@
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;
 import io.helidon.config.spi.PollingStrategy.PollingEvent;
-import static org.hamcrest.MatcherAssert.assertThat;
 
 import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 
 /**

File: config/etcd/src/test/java/io/helidon/config/etcd/client/EtcdClientIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,11 +21,11 @@
 import java.util.Random;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;
 import io.helidon.config.etcd.internal.client.v2.EtcdV2Client;

File: config/etcd/src/test/java/io/helidon/config/etcd/client/MockEtcdClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,9 +22,9 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicLong;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;

File: config/git/src/test/java/io/helidon/config/git/GitConfigSourceBuilderTest.java
Patch:
@@ -25,11 +25,11 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.ConfigException;
 import io.helidon.config.ConfigParsers;

File: config/tests/integration-tests/src/test/java/io/helidon/config/tests/AbstractComplexConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,6 @@
 import io.helidon.config.ConfigMappers;
 import io.helidon.config.ConfigSources;
 import io.helidon.config.ConfigValue;
-import io.helidon.config.ConfigValues;
 import io.helidon.config.spi.ConfigParser;
 
 import org.junit.jupiter.api.Test;

File: examples/config/changes/src/main/java/io/helidon/config/examples/changes/ChangesSubscriberExample.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.helidon.config.examples.changes;
 
+import java.util.concurrent.Flow;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.PollingStrategies;
 

File: examples/employee-app/src/test/java/io/helidon/service/employee/MainTest.java
Patch:
@@ -20,13 +20,13 @@
 import java.net.URL;
 import java.util.concurrent.TimeUnit;
 
+import io.helidon.webserver.WebServer;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import io.helidon.webserver.WebServer;
-
 public class MainTest {
 
     private static WebServer webServer;

File: examples/integrations/cdi/jpa/src/main/java/io/helidon/examples/integrations/cdi/jpa/HelloWorldResource.java
Patch:
@@ -23,7 +23,7 @@
 import javax.persistence.EntityManager;
 import javax.persistence.EntityNotFoundException;
 import javax.persistence.PersistenceContext;
-import javax.persistence.PersistenceException; // for javadoc only
+import javax.persistence.PersistenceException;
 import javax.transaction.Status;
 import javax.transaction.SystemException;
 import javax.transaction.Transaction;

File: examples/quickstarts/helidon-quickstart-mp/src/test/java/io/helidon/examples/quickstart/mp/MainTest.java
Patch:
@@ -26,6 +26,7 @@
 import javax.ws.rs.core.Response;
 
 import io.helidon.microprofile.server.Server;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;

File: examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java
Patch:
@@ -17,10 +17,10 @@
 package io.helidon.examples.quickstart.se;
 
 import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
 import java.util.Collections;
 import java.util.concurrent.TimeUnit;
-import java.net.URL;
-import java.net.HttpURLConnection;
 
 import javax.json.Json;
 import javax.json.JsonObject;
@@ -29,9 +29,9 @@
 
 import io.helidon.webserver.WebServer;
 
-import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
 public class MainTest {

File: examples/quickstarts/helidon-standalone-quickstart-mp/src/test/java/io/helidon/examples/quickstart/mp/MainTest.java
Patch:
@@ -26,6 +26,7 @@
 import javax.ws.rs.core.Response;
 
 import io.helidon.microprofile.server.Server;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;

File: examples/quickstarts/helidon-standalone-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java
Patch:
@@ -17,10 +17,10 @@
 package io.helidon.examples.quickstart.se;
 
 import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
 import java.util.Collections;
 import java.util.concurrent.TimeUnit;
-import java.net.URL;
-import java.net.HttpURLConnection;
 
 import javax.json.Json;
 import javax.json.JsonObject;
@@ -29,9 +29,9 @@
 
 import io.helidon.webserver.WebServer;
 
-import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
 public class MainTest {

File: examples/webserver/basics/src/main/java/io/helidon/webserver/examples/basics/Main.java
Patch:
@@ -193,7 +193,7 @@ public void organiseCode() {
     }
 
     /**
-     * Request payload (body/entity) is represented by {@link io.helidon.common.reactive.Flow.Publisher Flow.Publisher}
+     * Request payload (body/entity) is represented by {@link java.util.concurrent.Flow.Publisher Flow.Publisher}
      * of {@link DataChunk RequestChunks} to enable reactive processing of the content of any size.
      * But it is more convenient to process entity in some type specific form. WebServer supports few types which can be
      * used te read the whole entity:
@@ -233,7 +233,7 @@ public void readContentEntity() {
      * It is possible register custom request content {@link Reader Reader}. It collects
      * all {@link DataChunk RequestChunks} into a single entity of the given type.
      * <p>
-     * It is also possible to register filters which can modify original {@link io.helidon.common.reactive.Flow Flow} of
+     * It is also possible to register filters which can modify original {@link java.util.concurrent.Flow Flow} of
      * {@link DataChunk RequestChunks}.
      */
     public void filterAndProcessEntity() {

File: examples/webserver/jersey/src/test/java/io/helidon/webserver/examples/jersey/HelloWorldTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * The Jersey Client based example that tests the {@link HelloWorld} resource

File: examples/webserver/streaming/src/main/java/io/helidon/webserver/examples/streaming/ServerFileReader.java
Patch:
@@ -21,10 +21,10 @@
 import java.nio.channels.FileChannel;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
+import java.util.concurrent.Flow;
 import java.util.logging.Logger;
 
 import io.helidon.common.http.DataChunk;
-import io.helidon.common.reactive.Flow;
 
 /**
  * Class ServerFileReader. Reads a file using NIO and produces data chunks for a

File: examples/webserver/streaming/src/main/java/io/helidon/webserver/examples/streaming/ServerFileWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,10 +21,10 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
+import java.util.concurrent.Flow;
 import java.util.logging.Logger;
 
 import io.helidon.common.http.DataChunk;
-import io.helidon.common.reactive.Flow;
 import io.helidon.webserver.ServerResponse;
 
 /**

File: examples/webserver/tutorial/src/main/java/io/helidon/webserver/examples/tutorial/CommentService.java
Patch:
@@ -21,11 +21,11 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Flow;
 import java.util.stream.Collectors;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.MediaType;
-import io.helidon.common.reactive.Flow;
 import io.helidon.media.common.ContentWriters;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.ServerRequest;

File: examples/webserver/tutorial/src/main/java/io/helidon/webserver/examples/tutorial/UpperXFilter.java
Patch:
@@ -19,10 +19,10 @@
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
+import java.util.concurrent.Flow.Publisher;
 import java.util.function.Function;
 
 import io.helidon.common.http.DataChunk;
-import io.helidon.common.reactive.Flow.Publisher;
 import io.helidon.common.reactive.Multi;
 
 

File: examples/webserver/tutorial/src/test/java/io/helidon/webserver/examples/tutorial/user/UserFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Tests {@link UserFilter}.

File: integrations/cdi/common-cdi/reference-counted-context/src/test/java/io/helidon/integrations/cdi/referencecountedcontext/TestReferenceCountedContext.java
Patch:
@@ -35,7 +35,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.fail;
 
 @ApplicationScoped
 final class TestReferenceCountedContext {

File: integrations/cdi/datasource-hikaricp/src/test/java/io/helidon/integrations/datasource/hikaricp/cdi/TestConfiguration.java
Patch:
@@ -21,7 +21,6 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.enterprise.context.Initialized;
 import javax.enterprise.event.Observes;
-import javax.enterprise.inject.se.SeContainer;
 import javax.enterprise.inject.se.SeContainerInitializer;
 import javax.inject.Inject;
 import javax.inject.Named;

File: integrations/cdi/datasource-ucp/src/test/java/io/helidon/integrations/datasource/ucp/cdi/TestDataSourceAcquisition.java
Patch:
@@ -21,7 +21,6 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.enterprise.context.Initialized;
 import javax.enterprise.event.Observes;
-import javax.enterprise.inject.se.SeContainer;
 import javax.enterprise.inject.se.SeContainerInitializer;
 import javax.inject.Inject;
 import javax.inject.Named;

File: integrations/cdi/eclipselink-cdi/src/main/java/io/helidon/integrations/cdi/eclipselink/CDISEPlatform.java
Patch:
@@ -35,7 +35,7 @@
 
 import org.eclipse.persistence.exceptions.ValidationException;
 import org.eclipse.persistence.platform.server.JMXServerPlatformBase;
-import org.eclipse.persistence.platform.server.ServerPlatformBase; // for javadoc only
+import org.eclipse.persistence.platform.server.ServerPlatformBase;
 import org.eclipse.persistence.sessions.Connector;
 import org.eclipse.persistence.sessions.DatabaseLogin;
 import org.eclipse.persistence.sessions.DatabaseSession;

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/PersistenceUnitInfoBean.java
Patch:
@@ -35,7 +35,7 @@
 import javax.persistence.SharedCacheMode;
 import javax.persistence.ValidationMode;
 import javax.persistence.spi.ClassTransformer;
-import javax.persistence.spi.PersistenceProvider; // for javadoc only
+import javax.persistence.spi.PersistenceProvider;
 import javax.persistence.spi.PersistenceUnitInfo;
 import javax.persistence.spi.PersistenceUnitTransactionType;
 import javax.sql.DataSource;

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/Author.java
Patch:
@@ -20,9 +20,9 @@
 
 import javax.persistence.Access;
 import javax.persistence.AccessType;
-import javax.persistence.Entity;
 import javax.persistence.Basic;
 import javax.persistence.Column;
+import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
 import javax.persistence.Id;

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestJpaTransactionScopedUnsynchronizedEntityManager.java
Patch:
@@ -15,15 +15,13 @@
  */
 package io.helidon.integrations.cdi.jpa.chirp;
 
-import java.util.Objects;
-
 import javax.annotation.sql.DataSourceDefinition;
-import javax.inject.Inject;
 import javax.enterprise.context.ApplicationScoped;
 import javax.enterprise.context.BeforeDestroyed;
 import javax.enterprise.event.Observes;
 import javax.enterprise.inject.se.SeContainer;
 import javax.enterprise.inject.se.SeContainerInitializer;
+import javax.inject.Inject;
 import javax.persistence.EntityManager;
 import javax.persistence.PersistenceContext;
 import javax.persistence.PersistenceContextType;

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestRollbackScenarios.java
Patch:
@@ -15,15 +15,13 @@
  */
 package io.helidon.integrations.cdi.jpa.chirp;
 
-import java.util.Objects;
-
 import javax.annotation.sql.DataSourceDefinition;
-import javax.inject.Inject;
 import javax.enterprise.context.ApplicationScoped;
 import javax.enterprise.context.BeforeDestroyed;
 import javax.enterprise.event.Observes;
 import javax.enterprise.inject.se.SeContainer;
 import javax.enterprise.inject.se.SeContainerInitializer;
+import javax.inject.Inject;
 import javax.persistence.EntityManager;
 import javax.persistence.PersistenceContext;
 import javax.persistence.PersistenceContextType;

File: integrations/cdi/jpa-weld/src/test/java/io/helidon/integrations/cdi/jpa/weld/TestIntegration.java
Patch:
@@ -36,7 +36,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 

File: integrations/cdi/jta-cdi/src/main/java/io/helidon/integrations/jta/cdi/DelegatingTransactionManager.java
Patch:
@@ -20,7 +20,7 @@
 import javax.transaction.InvalidTransactionException;
 import javax.transaction.NotSupportedException;
 import javax.transaction.RollbackException;
-import javax.transaction.Status; // for javadoc only
+import javax.transaction.Status;
 import javax.transaction.SystemException;
 import javax.transaction.Transaction;
 import javax.transaction.TransactionManager;

File: integrations/cdi/jta-cdi/src/main/java/io/helidon/integrations/jta/cdi/NarayanaTransactionManager.java
Patch:
@@ -27,7 +27,7 @@
 import javax.transaction.RollbackException;
 import javax.transaction.SystemException;
 import javax.transaction.Transaction;
-import javax.transaction.TransactionManager; // for javadoc only
+import javax.transaction.TransactionManager;
 import javax.transaction.TransactionScoped;
 
 import com.arjuna.ats.jta.common.JTAEnvironmentBean;

File: integrations/cdi/jta-cdi/src/test/java/io/helidon/integrations/jta/cdi/TestTransactionalAnnotationSupport.java
Patch:
@@ -23,10 +23,9 @@
 import javax.inject.Inject;
 import javax.transaction.Status;
 import javax.transaction.SystemException;
-import javax.transaction.TransactionManager;
-import javax.transaction.Transactional;
 import javax.transaction.Transaction;
 import javax.transaction.TransactionScoped;
+import javax.transaction.Transactional;
 import javax.transaction.UserTransaction;
 
 import org.junit.jupiter.api.AfterEach;

File: integrations/serviceconfiguration/serviceconfiguration-api/src/main/java/io/helidon/service/configuration/api/ServiceConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.Objects;
 import java.util.Properties;
-import java.util.ServiceConfigurationError; // for javadoc only
+import java.util.ServiceConfigurationError;
 import java.util.ServiceLoader;
 import java.util.Set;
 

File: integrations/serviceconfiguration/serviceconfiguration-api/src/main/java/io/helidon/service/configuration/api/System.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.helidon.service.configuration.api;
 
-import java.util.Collection; // for javadoc only
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Map;

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp-accs/src/main/java/io/helidon/service/configuration/hikaricp/accs/HikariCPServiceConfigurationACCSProvider.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Properties;
 import java.util.Set;
 
-import javax.sql.DataSource; // for javadoc only
+import javax.sql.DataSource;
 
 /**
  * A {@link

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp/src/test/java/io/helidon/service/configuration/hikaricp/TestPropertiesScenarios.java
Patch:
@@ -15,14 +15,12 @@
  */
 package io.helidon.service.configuration.hikaricp;
 
-import java.util.Properties;
 import java.util.Set;
 
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertNull;
 
 @Deprecated
 public class TestPropertiesScenarios {

File: integrations/serviceconfiguration/serviceconfiguration-system-kubernetes/src/test/java/io/helidon/service/configuration/kubernetes/TestKubernetesSystem.java
Patch:
@@ -16,7 +16,6 @@
 package io.helidon.service.configuration.kubernetes;
 
 import java.io.IOException;
-
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;

File: media/common/src/main/java/io/helidon/media/common/ContentReaders.java
Patch:
@@ -23,13 +23,13 @@
 import java.net.URLDecoder;
 import java.nio.charset.Charset;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Flow.Publisher;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Reader;
 import io.helidon.common.http.Utils;
 import io.helidon.common.mapper.Mapper;
 import io.helidon.common.reactive.Collector;
-import io.helidon.common.reactive.Flow.Publisher;
 import io.helidon.common.reactive.Multi;
 import io.helidon.common.reactive.Single;
 

File: media/common/src/main/java/io/helidon/media/common/ContentWriters.java
Patch:
@@ -19,10 +19,10 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.ReadableByteChannel;
 import java.nio.charset.Charset;
+import java.util.concurrent.Flow.Publisher;
 import java.util.function.Function;
 
 import io.helidon.common.http.DataChunk;
-import io.helidon.common.reactive.Flow.Publisher;
 import io.helidon.common.reactive.RetrySchema;
 import io.helidon.common.reactive.Single;
 

File: media/common/src/main/java/io/helidon/media/common/PublisherInputStream.java
Patch:
@@ -22,11 +22,11 @@
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Logger;
 
 import io.helidon.common.http.DataChunk;
-import io.helidon.common.reactive.Flow;
 
 /**
  * An {@link Flow.Subscriber subscriber} that can subscribe to a source of {@code ByteBuffer} data chunks and then make

File: media/common/src/main/java/io/helidon/media/common/ReadableByteChannelPublisher.java
Patch:
@@ -19,6 +19,7 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.ReadableByteChannel;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
@@ -28,7 +29,6 @@
 import java.util.logging.Logger;
 
 import io.helidon.common.http.DataChunk;
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.RequestedCounter;
 import io.helidon.common.reactive.RetrySchema;
 import io.helidon.common.reactive.SingleSubscriberHolder;

File: media/common/src/main/java/io/helidon/media/common/StringContentReader.java
Patch:
@@ -21,10 +21,10 @@
 import java.nio.charset.UnsupportedCharsetException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.Flow;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Reader;
-import io.helidon.common.reactive.Flow;
 
 /**
  * The StringContentReader provides means to convert a {@link ByteBuffer} publisher to

File: media/common/src/test/java/io/helidon/media/common/ContentWritersTest.java
Patch:
@@ -17,10 +17,10 @@
 package io.helidon.media.common;
 
 import java.nio.charset.StandardCharsets;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.TimeUnit;
 
 import io.helidon.common.http.DataChunk;
-import io.helidon.common.reactive.Flow.Publisher;
-import java.util.concurrent.TimeUnit;
 
 import org.junit.jupiter.api.Test;
 

File: media/jackson/common/src/main/java/io/helidon/media/jackson/common/JacksonProcessing.java
Patch:
@@ -18,11 +18,11 @@
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.util.Objects;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Reader;
-import io.helidon.common.reactive.Flow;
 import io.helidon.media.common.CharBuffer;
 import io.helidon.media.common.ContentReaders;
 import io.helidon.media.common.ContentWriters;

File: media/jsonb/common/src/main/java/io/helidon/media/jsonb/common/JsonBinding.java
Patch:
@@ -20,14 +20,14 @@
 import java.io.InputStream;
 import java.nio.charset.Charset;
 import java.util.Objects;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 
 import javax.json.bind.Jsonb;
 import javax.json.bind.JsonbException;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Reader;
-import io.helidon.common.reactive.Flow;
 import io.helidon.media.common.CharBuffer;
 import io.helidon.media.common.ContentReaders;
 import io.helidon.media.common.ContentWriters;

File: media/jsonp/common/src/main/java/io/helidon/media/jsonp/common/JsonProcessing.java
Patch:
@@ -20,6 +20,7 @@
 import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 
 import javax.json.Json;
@@ -32,7 +33,6 @@
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Reader;
-import io.helidon.common.reactive.Flow;
 import io.helidon.media.common.CharBuffer;
 import io.helidon.media.common.ContentReaders;
 import io.helidon.media.common.ContentWriters;

File: media/jsonp/server/src/main/java/io/helidon/media/jsonp/server/JsonSupport.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 
 import javax.json.JsonReader;
@@ -27,7 +28,6 @@
 import io.helidon.common.http.Content;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Reader;
-import io.helidon.common.reactive.Flow;
 import io.helidon.media.jsonp.common.JsonProcessing;
 import io.helidon.webserver.Handler;
 import io.helidon.webserver.JsonService;

File: media/jsonp/server/src/test/java/io/helidon/media/jsonp/server/JsonContentReaderTest.java
Patch:
@@ -18,14 +18,14 @@
 
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow.Publisher;
 import java.util.concurrent.TimeUnit;
 
 import javax.json.JsonArray;
 import javax.json.JsonException;
 import javax.json.JsonObject;
 
 import io.helidon.common.http.DataChunk;
-import io.helidon.common.reactive.Flow.Publisher;
 import io.helidon.common.reactive.Multi;
 
 import org.hamcrest.core.Is;

File: metrics2/metrics2/src/test/java/io/helidon/metrics/MetricImplTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.helidon.metrics;
 
-import io.helidon.common.CollectionsHelper;
 import java.io.StringReader;
 import java.util.List;
 import java.util.Optional;
@@ -25,6 +24,8 @@
 import javax.json.JsonObject;
 import javax.json.JsonObjectBuilder;
 
+import io.helidon.common.CollectionsHelper;
+
 import org.eclipse.microprofile.metrics.Metadata;
 import org.eclipse.microprofile.metrics.MetricID;
 import org.eclipse.microprofile.metrics.MetricType;

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/AsynchronousCallerBean.java
Patch:
@@ -16,10 +16,11 @@
 
 package io.helidon.microprofile.faulttolerance;
 
-import javax.enterprise.context.ApplicationScoped;
 import java.util.concurrent.Callable;
 import java.util.concurrent.CompletableFuture;
 
+import javax.enterprise.context.ApplicationScoped;
+
 import org.eclipse.microprofile.faulttolerance.Asynchronous;
 
 /**

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/BulkheadBean.java
Patch:
@@ -16,11 +16,11 @@
 
 package io.helidon.microprofile.faulttolerance;
 
-import javax.enterprise.context.Dependent;
-
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Future;
 
+import javax.enterprise.context.Dependent;
+
 import org.eclipse.microprofile.faulttolerance.Asynchronous;
 import org.eclipse.microprofile.faulttolerance.Bulkhead;
 import org.eclipse.microprofile.faulttolerance.Fallback;

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/CircuitBreakerBean.java
Patch:
@@ -16,13 +16,13 @@
 
 package io.helidon.microprofile.faulttolerance;
 
-import javax.enterprise.context.Dependent;
-
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Future;
 
+import javax.enterprise.context.Dependent;
+
 import org.eclipse.microprofile.faulttolerance.Asynchronous;
 import org.eclipse.microprofile.faulttolerance.Bulkhead;
 import org.eclipse.microprofile.faulttolerance.CircuitBreaker;

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/FaultToleranceTest.java
Patch:
@@ -31,7 +31,6 @@
 import javax.enterprise.inject.se.SeContainerInitializer;
 import javax.enterprise.inject.spi.CDI;
 
-import net.jodah.failsafe.FailsafeFuture;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/MetricsBean.java
Patch:
@@ -33,7 +33,9 @@
 import org.eclipse.microprofile.metrics.Counter;
 import org.eclipse.microprofile.metrics.annotation.Metric;
 
-import static io.helidon.microprofile.faulttolerance.FaultToleranceMetrics.*;
+import static io.helidon.microprofile.faulttolerance.FaultToleranceMetrics.BULKHEAD_CONCURRENT_EXECUTIONS;
+import static io.helidon.microprofile.faulttolerance.FaultToleranceMetrics.BULKHEAD_WAITING_QUEUE_POPULATION;
+import static io.helidon.microprofile.faulttolerance.FaultToleranceMetrics.getGauge;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.is;

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/MetricsTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import io.helidon.common.metrics.InternalBridge;
 import io.helidon.common.metrics.InternalBridge.Metadata.MetadataBuilder;
-import io.helidon.common.metrics.InternalBridge.MetricID;
 import io.helidon.common.metrics.InternalBridge.MetricRegistry;
 
 import org.eclipse.microprofile.faulttolerance.exceptions.CircuitBreakerOpenException;

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/TimeoutTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,9 +19,9 @@
 import org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException;
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**
  * Class TimeoutTest.

File: microprofile/grpc/core/src/test/java/io/helidon/microprofile/grpc/core/AnnotatedMethodTest.java
Patch:
@@ -22,9 +22,6 @@
 import javax.inject.Inject;
 import javax.inject.Named;
 
-import io.helidon.microprofile.grpc.core.RpcMethod;
-import io.helidon.microprofile.grpc.core.RpcService;
-
 import io.grpc.MethodDescriptor;
 import org.junit.jupiter.api.Test;
 

File: microprofile/grpc/core/src/test/java/io/helidon/microprofile/grpc/core/ModelHelperTest.java
Patch:
@@ -24,8 +24,6 @@
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 public class ModelHelperTest {

File: microprofile/grpc/metrics/src/test/java/io/helidon/microprofile/grpc/metrics/MetricsConfigurerIT.java
Patch:
@@ -40,8 +40,8 @@
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
-import static org.hamcrest.collection.IsEmptyIterable.emptyIterable;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.collection.IsEmptyIterable.emptyIterable;
 
 
 public class MetricsConfigurerIT {

File: microprofile/grpc/metrics/src/test/java/io/helidon/microprofile/grpc/metrics/MetricsIT.java
Patch:
@@ -27,8 +27,6 @@
 import javax.json.Json;
 import javax.json.JsonNumber;
 import javax.json.JsonObject;
-import javax.json.JsonStructure;
-import javax.json.JsonValue;
 import javax.ws.rs.client.Client;
 import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.core.MediaType;

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/InterceptorMetered.java
Patch:
@@ -21,7 +21,6 @@
 import javax.interceptor.Interceptor;
 import javax.interceptor.InvocationContext;
 
-
 import org.eclipse.microprofile.metrics.Meter;
 import org.eclipse.microprofile.metrics.MetricRegistry;
 import org.eclipse.microprofile.metrics.annotation.Metered;

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java
Patch:
@@ -65,8 +65,6 @@
 import static io.helidon.microprofile.metrics.MetricUtil.LookupResult;
 import static io.helidon.microprofile.metrics.MetricUtil.getMetricName;
 import static io.helidon.microprofile.metrics.MetricUtil.lookupAnnotation;
-import static io.helidon.microprofile.metrics.MetricUtil.registerMetric;
-import static io.helidon.microprofile.metrics.MetricUtil.toTags;
 
 /**
  * MetricsCdiExtension class.

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/AbsoluteGaugeBean.java
Patch:
@@ -16,9 +16,10 @@
 
 package io.helidon.microprofile.metrics;
 
-import javax.enterprise.context.ApplicationScoped;
 import java.time.Duration;
 
+import javax.enterprise.context.ApplicationScoped;
+
 import org.eclipse.microprofile.metrics.annotation.Gauge;
 
 /**

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/MetricsTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
 import io.helidon.metrics.MetricsSupport;

File: microprofile/metrics2/src/test/java/io/helidon/microprofile/metrics/AbsoluteCountedBean.java
Patch:
@@ -16,9 +16,10 @@
 
 package io.helidon.microprofile.metrics;
 
-import javax.enterprise.context.Dependent;
 import java.time.Duration;
 
+import javax.enterprise.context.Dependent;
+
 import org.eclipse.microprofile.metrics.annotation.Counted;
 
 /**

File: microprofile/metrics2/src/test/java/io/helidon/microprofile/metrics/AbsoluteGaugeBean.java
Patch:
@@ -16,10 +16,10 @@
 
 package io.helidon.microprofile.metrics;
 
-import javax.enterprise.context.ApplicationScoped;
-
 import java.time.Duration;
 
+import javax.enterprise.context.ApplicationScoped;
+
 import org.eclipse.microprofile.metrics.annotation.Gauge;
 
 /**

File: microprofile/metrics2/src/test/java/io/helidon/microprofile/metrics/BadGaugedBean.java
Patch:
@@ -18,8 +18,6 @@
 import org.eclipse.microprofile.metrics.MetricUnits;
 import org.eclipse.microprofile.metrics.annotation.Gauge;
 
-import javax.enterprise.context.ApplicationScoped;
-
 public class BadGaugedBean {
 
     @Gauge(unit = MetricUnits.NONE)

File: microprofile/metrics2/src/test/java/io/helidon/microprofile/metrics/MetricsTest.java
Patch:
@@ -30,8 +30,8 @@
 import org.hamcrest.CoreMatchers;
 import org.junit.jupiter.api.Test;
 
-import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.number.OrderingComparison.greaterThan;

File: microprofile/metrics2/src/test/java/io/helidon/microprofile/metrics/ResourceWithIllegallyReusedMetrics.java
Patch:
@@ -18,6 +18,7 @@
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
+
 import org.eclipse.microprofile.metrics.annotation.Counted;
 
 /**

File: microprofile/metrics2/src/test/java/io/helidon/microprofile/metrics/ResourceWithLegallyReusedMetrics.java
Patch:
@@ -19,6 +19,7 @@
 import javax.enterprise.context.RequestScoped;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
+
 import org.eclipse.microprofile.metrics.annotation.Counted;
 
 /**

File: microprofile/metrics2/src/test/java/io/helidon/microprofile/metrics/ResourceWithMixedReusability.java
Patch:
@@ -18,6 +18,7 @@
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
+
 import org.eclipse.microprofile.metrics.annotation.Counted;
 
 /**

File: microprofile/openapi/src/test/java/io/helidon/microprofile/openapi/BasicServerTest.java
Patch:
@@ -17,16 +17,17 @@
 package io.helidon.microprofile.openapi;
 
 import java.net.HttpURLConnection;
+import java.util.Map;
 
 import io.helidon.common.http.MediaType;
 import io.helidon.microprofile.server.Server;
-import java.util.Map;
 
 import org.junit.jupiter.api.AfterAll;
-import static org.junit.jupiter.api.Assertions.*;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 /**
  * Test that MP OpenAPI support works when retrieving the OpenAPI document
  * from the server's /openapi endpoint.

File: microprofile/tests/tck/tck-opentracing/src/test/java/io/helidon/microprofile/opentracing/tck/OpentracingJavaMockTracerBuilder.java
Patch:
@@ -23,7 +23,6 @@
 
 import io.opentracing.Tracer;
 import io.opentracing.mock.MockTracer;
-import io.opentracing.util.GlobalTracer;
 
 public final class OpentracingJavaMockTracerBuilder implements TracerBuilder<OpentracingJavaMockTracerBuilder> {
 

File: microprofile/tracing/src/test/java/io/helidon/microprofile/tracing/TracingTest.java
Patch:
@@ -32,7 +32,6 @@
 
 import io.helidon.common.CollectionsHelper;
 import io.helidon.microprofile.server.Server;
-import io.helidon.tracing.jersey.client.ClientTracingFilter;
 
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;

File: openapi/src/test/java/io/helidon/openapi/OpenAPIConfigTest.java
Patch:
@@ -24,13 +24,12 @@
 import io.helidon.openapi.internal.OpenAPIConfigImpl;
 
 import io.smallrye.openapi.api.OpenApiConfig;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.is;
 
-import org.junit.jupiter.api.Test;
-
 /**
  *
  */

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/InputStreamPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,10 +20,9 @@
 import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import io.helidon.common.reactive.Flow;
-
 /**
  * Publisher that reads data from an input stream and publishes them as {@link ByteBuffer} events.
  */

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SecurityFilterCommon.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 import java.util.logging.Logger;
 
@@ -29,7 +30,6 @@
 import javax.ws.rs.core.UriInfo;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.AuthorizationResponse;

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SingleSubscriberHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,11 +18,10 @@
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 
-import io.helidon.common.reactive.Flow;
-
 /**
  * A subscriber container that accepts only a single, one-time subscriber registration.
  */

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SubscriberInputStream.java
Patch:
@@ -21,8 +21,7 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
-
-import io.helidon.common.reactive.Flow;
+import java.util.concurrent.Flow;
 
 /**
  * An {@link Flow.Subscriber subscriber} that can subscribe to a source of {@code ByteBuffer} data chunks and then make

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SubscriberOutputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,10 +19,9 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
+import java.util.concurrent.Flow;
 import java.util.function.Consumer;
 
-import io.helidon.common.reactive.Flow;
-
 /**
  * An {@link Flow.Subscriber subscriber} that can subscribe to a source of {@code ByteBuffer} data chunks and then
  * write these data chunks into an underlying {@link OutputStream output stream}.

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/EntityModificationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.logging.ConsoleHandler;
@@ -37,7 +38,6 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.ext.ExceptionMapper;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.Principal;

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/InputStreamPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,10 +22,9 @@
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 
-import io.helidon.common.reactive.Flow;
-
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;

File: security/integration/webserver/src/main/java/io/helidon/security/integration/webserver/SecurityHandler.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
@@ -40,7 +41,6 @@
 import io.helidon.common.OptionalHelper;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
-import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.security.AuditEvent;
 import io.helidon.security.AuthenticationResponse;

File: security/integration/webserver/src/test/java/io/helidon/security/integration/webserver/WebSecurityEntityModificationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,6 +20,7 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.ConsoleHandler;
@@ -32,7 +33,6 @@
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Response;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.security.AuthenticationResponse;
 import io.helidon.security.Principal;

File: security/providers/abac/src/test/java/io/helidon/security/providers/abac/Attrib1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,8 +23,6 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import io.helidon.security.providers.abac.AbacAnnotation;
-
 /**
  * TODO javadoc.
  */

File: security/providers/common/src/test/java/io/helidon/security/providers/common/OutboundTargetTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,6 @@
 
 import io.helidon.config.Config;
 import io.helidon.config.ConfigSources;
-import io.helidon.security.providers.common.OutboundTarget;
 
 import org.junit.jupiter.api.Test;
 

File: security/security/src/main/java/io/helidon/security/Entity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,10 +17,9 @@
 package io.helidon.security;
 
 import java.nio.ByteBuffer;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 
-import io.helidon.common.reactive.Flow;
-
 /**
  * Access to message content (entity).
  * Use cases:

File: security/security/src/test/java/io/helidon/security/EntityHandlingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,9 +21,9 @@
 import java.nio.ByteBuffer;
 import java.util.Optional;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Flow;
 
 import io.helidon.common.OptionalHelper;
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.SubmissionPublisher;
 import io.helidon.security.providers.ProviderForTesting;
 

File: tests/apps/bookstore/bookstore-se/src/test/java/io/helidon/tests/apps/bookstore/se/Http2SslTest.java
Patch:
@@ -23,7 +23,6 @@
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.Response;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;

File: tests/apps/bookstore/bookstore-se/src/test/java/io/helidon/tests/apps/bookstore/se/MainTest.java
Patch:
@@ -18,22 +18,23 @@
 
 import javax.json.Json;
 import javax.json.JsonObject;
-import javax.json.JsonReader;;
+import javax.json.JsonReader;
 
 import io.helidon.webserver.WebServer;
 
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.Response;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
 import static io.helidon.tests.apps.bookstore.se.TestServer.APPLICATION_JSON;
 
+;
+
 public class MainTest {
 
     private static WebServer webServer;

File: tests/apps/bookstore/bookstore-se/src/test/java/io/helidon/tests/apps/bookstore/se/SslTest.java
Patch:
@@ -22,7 +22,6 @@
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.Response;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;

File: tests/functional/jax-rs-subresource/src/main/java/io/helidon/tests/functional/jaxrs/subresource/MpSubResource.java
Patch:
@@ -20,8 +20,6 @@
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 
-import io.helidon.security.abac.role.RoleValidator;
-
 /**
  * A sub-resource does not have a Path annotation.
  */

File: tests/integration/health/mp-disabled/src/test/java/io/helidon/tests/integration/health/mp/disabled/HealthDisabledMainTest.java
Patch:
@@ -24,7 +24,6 @@
 import io.helidon.microprofile.server.Server;
 
 import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 

File: webserver/access-log/src/main/java/io/helidon/webserver/accesslog/SizeLogEntry.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.helidon.webserver.accesslog;
 
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.LongAdder;
 
 import io.helidon.common.http.ContextualRegistry;
 import io.helidon.common.http.DataChunk;
-import io.helidon.common.reactive.Flow;
 import io.helidon.webserver.ServerRequest;
 import io.helidon.webserver.ServerResponse;
 

File: webserver/access-log/src/test/java/io/helidon/webserver/accesslog/AccessLogSupportTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.helidon.webserver.accesslog;
 
-import java.time.Instant;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.Arrays;

File: webserver/jersey/src/test/java/io/helidon/webserver/jersey/JerseyExampleMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
 import org.glassfish.jersey.apache.connector.ApacheConnectorProvider;
 import org.glassfish.jersey.client.ClientConfig;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.fail;
 
 /**
  * The JerseyExampleMain.

File: webserver/jersey/src/test/java/io/helidon/webserver/jersey/JerseyExampleResource.java
Patch:
@@ -20,7 +20,6 @@
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 import java.util.stream.Collectors;
-import java.util.stream.IntStream;
 
 import javax.inject.Inject;
 import javax.inject.Named;
@@ -44,7 +43,7 @@
 
 import io.opentracing.SpanContext;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * The JerseyExampleResource.

File: webserver/test-support/src/main/java/io/helidon/webserver/testsupport/MediaPublisher.java
Patch:
@@ -20,10 +20,10 @@
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.Optional;
+import java.util.concurrent.Flow;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.MediaType;
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.Multi;
 
 /**

File: webserver/test-support/src/main/java/io/helidon/webserver/testsupport/TestClient.java
Patch:
@@ -27,14 +27,14 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.function.Supplier;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.ReadOnlyParameters;
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.Single;
 import io.helidon.webserver.BareRequest;
 import io.helidon.webserver.BareResponse;

File: webserver/webserver/src/main/java/io/helidon/webserver/BareRequest.java
Patch:
@@ -19,10 +19,10 @@
 import java.net.URI;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.Flow;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
-import io.helidon.common.reactive.Flow;
 
 /**
  * Bare (minimal) representation of HTTP Request. Used by {@link WebServer WebServer} implementations to invoke

File: webserver/webserver/src/main/java/io/helidon/webserver/BareRequestImpl.java
Patch:
@@ -23,12 +23,12 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.Flow;
 
 import javax.net.ssl.SSLEngine;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
-import io.helidon.common.reactive.Flow;
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.HttpRequest;

File: webserver/webserver/src/main/java/io/helidon/webserver/BareResponse.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.Flow;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
-import io.helidon.common.reactive.Flow;
 
 /**
  * Bare (minimal) representation of HTTP Response. Used by {@link WebServer WebServer} implementations to invoke

File: webserver/webserver/src/main/java/io/helidon/webserver/BareResponseImpl.java
Patch:
@@ -21,14 +21,14 @@
 import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.BooleanSupplier;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
-import io.helidon.common.reactive.Flow;
 
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelFuture;

File: webserver/webserver/src/main/java/io/helidon/webserver/ClassPathContentHandler.java
Patch:
@@ -31,13 +31,13 @@
 import java.time.Instant;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Flow;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.logging.Logger;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
-import io.helidon.common.reactive.Flow;
 
 /**
  * Handles static content from the classpath.

File: webserver/webserver/src/main/java/io/helidon/webserver/FormParamsSupport.java
Patch:
@@ -17,11 +17,11 @@
 
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
+import java.util.concurrent.Flow.Publisher;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.FormParams;
 import io.helidon.common.http.MediaType;
-import io.helidon.common.reactive.Flow.Publisher;
 import io.helidon.common.reactive.Single;
 import io.helidon.media.common.ContentReaders;
 

File: webserver/webserver/src/main/java/io/helidon/webserver/HttpRequestScopedPublisher.java
Patch:
@@ -51,7 +51,7 @@ protected void hookOnCancel() {
 
     /**
      * This method is called whenever
-     * {@link io.helidon.common.reactive.Flow.Subscription#request(long)} is
+     * {@link java.util.concurrent.Flow.Subscription#request(long)} is
      * called on the very one associated subscription with this publisher in
      * order to trigger next channel read on the associated
      * {@link ChannelHandlerContext}.

File: webserver/webserver/src/main/java/io/helidon/webserver/InputStreamPublisher.java
Patch:
@@ -20,9 +20,9 @@
 import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Flow;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.RequestedCounter;
 import io.helidon.common.reactive.SingleSubscriberHolder;
 
@@ -46,8 +46,8 @@ class InputStreamPublisher implements Flow.Publisher<ByteBuffer> {
      * Create new input stream publisher that reads data from a supplied input stream and publishes them a single subscriber.
      * <p>
      * Note that this implementation does not rely on any asynchronous processing and its business logic is always invoked
-     * on the subscriber thread (as part of {@link #subscribe(io.helidon.common.reactive.Flow.Subscriber)} and
-     * {@link io.helidon.common.reactive.Flow.Subscription#request(long)}
+     * on the subscriber thread (as part of {@link #subscribe(java.util.concurrent.Flow.Subscriber)} and
+     * {@link java.util.concurrent.Flow.Subscription#request(long)}
      * method calls).
      *
      * @param inputStream underlying input stream to be used to read the data tu be published as events.

File: webserver/webserver/src/main/java/io/helidon/webserver/Request.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.StringTokenizer;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.Flow;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.function.Function;
@@ -44,7 +45,6 @@
 import io.helidon.common.http.MediaType;
 import io.helidon.common.http.Parameters;
 import io.helidon.common.http.Reader;
-import io.helidon.common.reactive.Flow;
 import io.helidon.media.common.ContentReaders;
 import io.helidon.tracing.config.SpanTracingConfig;
 import io.helidon.tracing.config.TracingConfigUtil;

File: webserver/webserver/src/main/java/io/helidon/webserver/Response.java
Patch:
@@ -29,14 +29,14 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
 import io.helidon.common.OptionalHelper;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.Single;
 import io.helidon.media.common.ContentWriters;
 import io.helidon.tracing.config.SpanTracingConfig;

File: webserver/webserver/src/main/java/io/helidon/webserver/SendHeadersFirstPublisher.java
Patch:
@@ -17,8 +17,7 @@
 package io.helidon.webserver;
 
 import java.util.Objects;
-
-import io.helidon.common.reactive.Flow;
+import java.util.concurrent.Flow;
 
 import io.opentracing.Span;
 

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,14 +18,14 @@
 
 import java.nio.ByteBuffer;
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.Flow;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
 import io.helidon.common.http.AlreadyCompletedException;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
-import io.helidon.common.reactive.Flow;
 
 /**
  * Represents HTTP Response.

File: webserver/webserver/src/test/java/io/helidon/webserver/BytesReuseTest.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Flow.Publisher;
+import java.util.concurrent.Flow.Subscription;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
@@ -33,8 +35,6 @@
 import io.helidon.common.InputStreamHelper;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
-import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.common.reactive.Flow.Subscription;
 import io.helidon.common.reactive.Multi;
 import io.helidon.webserver.utils.SocketHttpClient;
 

File: webserver/webserver/src/test/java/io/helidon/webserver/ContentCharsetTest.java
Patch:
@@ -30,7 +30,7 @@
 import static io.helidon.common.CollectionsHelper.mapOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 

File: webserver/webserver/src/test/java/io/helidon/webserver/EncodingTest.java
Patch:
@@ -24,6 +24,7 @@
 
 import io.helidon.common.http.Http;
 import io.helidon.webserver.utils.SocketHttpClient;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: webserver/webserver/src/test/java/io/helidon/webserver/FormParamsSupportTest.java
Patch:
@@ -17,9 +17,7 @@
 
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.io.OutputStream;
 import java.io.OutputStreamWriter;
-import java.io.UnsupportedEncodingException;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.nio.CharBuffer;
@@ -35,8 +33,8 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 
 

File: webserver/webserver/src/test/java/io/helidon/webserver/HashRequestHeadersTest.java
Patch:
@@ -31,13 +31,13 @@
 import io.helidon.common.http.Parameters;
 
 import org.hamcrest.number.IsCloseTo;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
 import static org.hamcrest.core.IsCollectionContaining.hasItems;
-import org.junit.jupiter.api.Assertions;
 
 /**
  * Tests {@link HashRequestHeaders}.

File: webserver/webserver/src/test/java/io/helidon/webserver/NettyWebServerTest.java
Patch:
@@ -19,19 +19,19 @@
 import java.net.InetAddress;
 import java.security.SecureRandom;
 import java.util.Collections;
-import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
+import java.util.concurrent.Flow.Subscription;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BiConsumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
-import io.helidon.common.reactive.Flow.Subscription;
 import io.helidon.common.reactive.Multi;
 import io.helidon.common.reactive.SubmissionPublisher;
 

File: webserver/webserver/src/test/java/io/helidon/webserver/PlainTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.TimeUnit;

File: webserver/webserver/src/test/java/io/helidon/webserver/RequestTestStub.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.net.URI;
 
-
 import io.opentracing.Span;
 import io.opentracing.SpanContext;
 import io.opentracing.Tracer;

File: webserver/webserver/src/test/java/io/helidon/webserver/ResponseTest.java
Patch:
@@ -23,11 +23,12 @@
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.Flow;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
-import io.helidon.common.reactive.Flow;
+import io.helidon.common.reactive.Single;
 
 import io.opentracing.SpanContext;
 import org.junit.jupiter.api.Test;
@@ -38,7 +39,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.hasSize;
-import io.helidon.common.reactive.Single;
 
 /**
  * Tests {@link Response}.

File: webserver/webserver/src/test/java/io/helidon/webserver/SendHeadersFirstPublisherTest.java
Patch:
@@ -17,13 +17,14 @@
 package io.helidon.webserver;
 
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Flow;
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.TimeUnit;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 
-import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.Multi;
+import io.helidon.common.reactive.Single;
 
 import io.opentracing.mock.MockSpan;
 import io.opentracing.mock.MockTracer;
@@ -35,7 +36,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import io.helidon.common.reactive.Single;
 
 /**
  * Tests {@link SendHeadersFirstPublisher}.

File: webserver/webserver/src/test/java/io/helidon/webserver/TransferEncodingTest.java
Patch:
@@ -24,6 +24,7 @@
 
 import io.helidon.common.http.Http;
 import io.helidon.webserver.utils.SocketHttpClient;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: metrics2/metrics2/src/main/java/io/helidon/metrics/Registry.java
Patch:
@@ -485,6 +485,7 @@ static Metadata toMetadata(io.helidon.common.metrics.InternalBridge.Metadata met
         final MetadataBuilder builder = new MetadataBuilder();
         builder.withName(metadata.getName())
                 .withDisplayName(metadata.getDisplayName())
+                .withType(metadata.getTypeRaw())
                 .reusable(metadata.isReusable());
 
         metadata.getDescription().ifPresent(builder::withDescription);

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/FaultToleranceTest.java
Patch:
@@ -31,6 +31,7 @@
 import javax.enterprise.inject.se.SeContainerInitializer;
 import javax.enterprise.inject.spi.CDI;
 
+import net.jodah.failsafe.FailsafeFuture;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/TestAnnotationRewriting.java
Patch:
@@ -52,7 +52,7 @@
 @DataSourceDefinition(
     name = "test",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1",
+    url = "jdbc:h2:mem:test",
     serverName = "",
     properties = {
         "user=sa"

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestExtendedSynchronizedEntityManager.java
Patch:
@@ -50,7 +50,7 @@
 @DataSourceDefinition(
     name = "chirp",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:chirp;INIT=RUNSCRIPT FROM 'classpath:chirp.ddl'",
+    url = "jdbc:h2:mem:chirp;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
     serverName = "",
     properties = {
         "user=sa"

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestExtendedUnsynchronizedEntityManager.java
Patch:
@@ -50,7 +50,7 @@
 @DataSourceDefinition(
     name = "chirp",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:chirp;INIT=RUNSCRIPT FROM 'classpath:chirp.ddl'",
+    url = "jdbc:h2:mem:chirp;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
     serverName = "",
     properties = {
         "user=sa"

File: integrations/cdi/jpa-cdi/src/test/java/io/helidon/integrations/cdi/jpa/chirp/TestJpaTransactionScopedUnsynchronizedEntityManager.java
Patch:
@@ -50,7 +50,7 @@
 @DataSourceDefinition(
     name = "chirp",
     className = "org.h2.jdbcx.JdbcDataSource",
-    url = "jdbc:h2:mem:chirp;INIT=RUNSCRIPT FROM 'classpath:chirp.ddl'",
+    url = "jdbc:h2:mem:chirp;INIT=SET TRACE_LEVEL_FILE=4\\;RUNSCRIPT FROM 'classpath:chirp.ddl'",
     serverName = "",
     properties = {
         "user=sa"

File: webserver/webserver/src/main/java/io/helidon/webserver/WebServerLogFormatter.java
Patch:
@@ -23,6 +23,7 @@
 /**
  * The WebServerLogFormatter provides a way to customize logging messages.
  */
+@Deprecated
 public class WebServerLogFormatter extends SimpleFormatter {
 
     private static final Pattern THREAD_PATTERN = Pattern.compile("!thread!");

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/FaultToleranceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/RetryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/server/src/test/java/io/helidon/microprofile/server/ServerImplTest.java
Patch:
@@ -89,7 +89,7 @@ private ExecutorService execService(String prefix) {
     void testTwoApps() {
         Server server = Server.builder()
                 .addApplication("/app1", new TestApplication1())
-                .addApplication("/app2", new TestApplication2())
+                .addApplication("/app2/", new TestApplication2())       // trailing slash ignored
                 .build();
 
         server.start();

File: config/etcd/src/main/java9/module-info.java
Patch:
@@ -22,8 +22,7 @@
     requires java.logging;
     requires transitive io.helidon.config;
     requires etcd4j;
-    requires grpc.api;
-    requires grpc.core;
+    requires io.grpc;
     requires grpc.protobuf;
     requires grpc.stub;
     requires protobuf.java;

File: examples/grpc/common/src/main/java/io/helidon/grpc/examples/common/GreetService.java
Patch:
@@ -30,7 +30,7 @@
 import org.eclipse.microprofile.health.HealthCheckResponse;
 
 /**
- * An implementation of the GreetService.
+ * A plain Java implementation of the GreetService.
  */
 public class GreetService implements GrpcService {
     /**

File: grpc/client/src/main/java/io/helidon/grpc/client/ClientServiceDescriptor.java
Patch:
@@ -166,7 +166,7 @@ public Collection<ClientMethodDescriptor> methods() {
      * @return service interceptors
      */
     public PriorityBag<ClientInterceptor> interceptors() {
-        return interceptors;
+        return interceptors.readOnly();
     }
 
     /**

File: grpc/server/src/main/java/io/helidon/grpc/server/GrpcRoutingImpl.java
Patch:
@@ -17,6 +17,7 @@
 package io.helidon.grpc.server;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.Objects;
 
@@ -48,7 +49,7 @@ public class GrpcRoutingImpl
      * @param interceptors  the {@link List} of the global {@link io.grpc.ServerInterceptor}s that should
      *                      be applied to all services
      */
-    GrpcRoutingImpl(List<ServiceDescriptor> services, PriorityBag<ServerInterceptor> interceptors) {
+    GrpcRoutingImpl(Collection<ServiceDescriptor> services, PriorityBag<ServerInterceptor> interceptors) {
         this.services = new ArrayList<>(Objects.requireNonNull(services));
         this.interceptors = interceptors.copyMe();
     }

File: microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java
Patch:
@@ -65,6 +65,8 @@
 import static io.helidon.microprofile.metrics.MetricUtil.LookupResult;
 import static io.helidon.microprofile.metrics.MetricUtil.getMetricName;
 import static io.helidon.microprofile.metrics.MetricUtil.lookupAnnotation;
+import static io.helidon.microprofile.metrics.MetricUtil.registerMetric;
+import static io.helidon.microprofile.metrics.MetricUtil.toTags;
 
 /**
  * MetricsCdiExtension class.

File: tests/functional/bookstore/src/test/java/io/helidon/tests/apps/bookstore/se/MainTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.OutputStream;
 import java.net.HttpURLConnection;
 import java.net.URL;
+import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedList;
@@ -61,6 +62,8 @@ class MainTest {
     static void setup() throws Exception {
         System.out.println("Using port number" + port);
         healthUrl = new URL("http://localhost:" + port + "/health");
+        appJarPathSE = Paths.get(appJarPathSE).normalize().toString();
+        appJarPathMP = Paths.get(appJarPathMP).normalize().toString();
     }
 
     @AfterEach

File: webserver/webserver/src/test/java/io/helidon/webserver/StaticContentHandlerTest.java
Patch:
@@ -175,7 +175,7 @@ public void handleRoot() throws Exception {
         TestContentHandler handler = new TestContentHandler("/root", true);
         handler.handle(Http.Method.GET, request, response);
         verify(request, never()).next();
-        assertThat(handler.path, is(Paths.get("/root")));
+        assertThat(handler.path, is(Paths.get("/root").toAbsolutePath().normalize()));
     }
 
     @Test
@@ -195,7 +195,7 @@ public void handleValid() throws Exception {
         TestContentHandler handler = new TestContentHandler("/root", true);
         handler.handle(Http.Method.GET, request, response);
         verify(request, never()).next();
-        assertThat(handler.path, is(Paths.get("/root/foo/some.txt")));
+        assertThat(handler.path, is(Paths.get("/root/foo/some.txt").toAbsolutePath().normalize()));
     }
 
     @Test

File: common/reactive/src/main/java/io/helidon/common/reactive/OutputStreamPublisher.java
Patch:
@@ -144,6 +144,9 @@ private void publish(byte[] buffer, int offset, int length) throws IOException {
         } catch (ExecutionException e) {
             complete(e.getCause());
             throw new IOException(e.getCause());
+        } catch (IllegalStateException e) {
+            complete(e);
+            throw new IOException(e);
         }
     }
 

File: common/reactive/src/test/java/io/helidon/common/reactive/BaseProcessorTest.java
Patch:
@@ -29,6 +29,7 @@
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.empty;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**
  * {@link BaseProcessor} test.
@@ -80,7 +81,7 @@ public void testOnNextAfterOnComplete() {
         processor.subscribe(subscriber);
         subscriber.request1();
         processor.onComplete();
-        processor.onNext("foo");
+        assertThrows(IllegalStateException.class, () -> processor.onNext("foo"));
         assertThat(subscriber.isComplete(), is(equalTo(true)));
         assertThat(subscriber.getItems(), is(empty()));
     }

File: webserver/webserver/src/main/java/io/helidon/webserver/BareResponseImpl.java
Patch:
@@ -175,6 +175,7 @@ private void completeResponseFuture(Throwable throwable) {
             responseFuture.complete(this);
         } else {
             LOGGER.log(Level.FINER, throwable, () -> log("Response completion failed!"));
+            internallyClosed.set(true);
             responseFuture.completeExceptionally(throwable);
         }
     }

File: health/health-checks/src/main/java/io/helidon/health/checks/DeadlockHealthCheck.java
Patch:
@@ -21,6 +21,8 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.inject.Inject;
 
+import io.helidon.health.common.BuiltInHealthCheck;
+
 import org.eclipse.microprofile.health.HealthCheck;
 import org.eclipse.microprofile.health.HealthCheckResponse;
 import org.eclipse.microprofile.health.Liveness;
@@ -33,6 +35,7 @@
  */
 @Liveness
 @ApplicationScoped // this will be ignored if not within CDI
+@BuiltInHealthCheck
 public final class DeadlockHealthCheck implements HealthCheck {
     /**
      * Used for detecting deadlocks. Injected in the constructor.

File: health/health-checks/src/main/java/io/helidon/health/checks/DiskSpaceHealthCheck.java
Patch:
@@ -29,6 +29,7 @@
 import javax.inject.Inject;
 
 import io.helidon.health.HealthCheckException;
+import io.helidon.health.common.BuiltInHealthCheck;
 
 import org.eclipse.microprofile.config.inject.ConfigProperty;
 import org.eclipse.microprofile.health.HealthCheck;
@@ -56,6 +57,7 @@
  */
 @Liveness
 @ApplicationScoped // this will be ignored if not within CDI
+@BuiltInHealthCheck
 public final class DiskSpaceHealthCheck implements HealthCheck {
     /**
      * Default path on the file system the health check will be executed for.

File: health/health-checks/src/main/java/io/helidon/health/checks/HeapMemoryHealthCheck.java
Patch:
@@ -22,6 +22,8 @@
 import javax.enterprise.context.ApplicationScoped;
 import javax.inject.Inject;
 
+import io.helidon.health.common.BuiltInHealthCheck;
+
 import org.eclipse.microprofile.config.inject.ConfigProperty;
 import org.eclipse.microprofile.health.HealthCheck;
 import org.eclipse.microprofile.health.HealthCheckResponse;
@@ -43,6 +45,7 @@
  */
 @Liveness
 @ApplicationScoped // this will be ignored if not within CDI
+@BuiltInHealthCheck
 public final class HeapMemoryHealthCheck implements HealthCheck {
     /**
      * Default threshold percentage.

File: health/health-checks/src/main/java9/module-info.java
Patch:
@@ -26,6 +26,7 @@
 
     requires io.helidon.common;
     requires io.helidon.health;
+    requires io.helidon.health.common;
     requires static microprofile.config.api;
     requires microprofile.health.api;
 

File: microprofile/health/src/main/java9/module-info.java
Patch:
@@ -24,6 +24,7 @@
     requires io.helidon.common;
     requires io.helidon.common.serviceloader;
     requires io.helidon.health;
+    requires io.helidon.health.common;
     requires io.helidon.microprofile.server;
 
     requires cdi.api;

File: microprofile/health/src/test/java/io/helidon/microprofile/health/HealthMpServiceIT.java
Patch:
@@ -128,6 +128,7 @@ private JsonObject getHealthJson() {
 
         JsonObject json = (JsonObject) Json.createReader(new StringReader(health)).read();
         assertThat(json, is(notNullValue()));
+        assertThat(json.getJsonString("outcome"), is(notNullValue()));      // backward compatibility default
         return json;
     }
 

File: config/git/src/test/java/io/helidon/config/git/GitConfigSourceBuilderTest.java
Patch:
@@ -214,7 +214,9 @@ public void testPolling() throws InterruptedException, IOException, Exception {
 
             commitFile("application.properties", "greeting=hi", "master");
 
-            assertThat(changeLatch.await(1000, TimeUnit.MILLISECONDS), is(true));
+            assertThat("Change latch was not finished in time",
+                       changeLatch.await(1000, TimeUnit.MILLISECONDS),
+                       is(true));
 
             sub.cancel();
             /*

File: tracing/jaeger/src/test/java/io/helidon/tracing/jaeger/JaegerTracerBuilderTest.java
Patch:
@@ -50,12 +50,12 @@ static void initClass() {
 
     @Test
     void testNoConfig() {
-        assertThrows(IllegalArgumentException.class, () -> TracerBuilder.create(Config.empty()));
+        assertThrows(IllegalArgumentException.class, () -> TracerBuilder.create(Config.empty()).build());
     }
 
     @Test
     void testBadConfig() {
-        assertThrows(IllegalArgumentException.class, () -> TracerBuilder.create(config.get("jaeger-very-bad")));
+        assertThrows(IllegalArgumentException.class, () -> TracerBuilder.create(config.get("jaeger-very-bad")).build());
     }
 
     @Test

File: media/jsonp/server/src/main/java/io/helidon/media/jsonp/server/JsonSupport.java
Patch:
@@ -103,7 +103,7 @@ public void accept(ServerRequest request, ServerResponse response) {
         request.content()
                 .registerReader(JsonStructure.class::isAssignableFrom, (publisher, type) -> {
                     Charset charset = determineCharset(request.headers());
-                    return reader(charset).apply(publisher);
+                    return reader(charset).apply(publisher, type);
                 });
         // Writer
         response.registerWriter(json -> (json instanceof JsonStructure) && acceptsJson(request, response),

File: media/jsonp/server/src/test/java/io/helidon/media/jsonp/server/JsonContentReaderTest.java
Patch:
@@ -64,12 +64,12 @@ public void incompatibleTypes() throws Exception {
 
         try {
             JsonArray array = stage.thenApply(o -> {
-                fail("Shouldn't occur because of a class cast exception!");
+                fail("Shouldn't occur because of JSON exception!");
                 return o;
             }).toCompletableFuture().get(10, TimeUnit.SECONDS);
             fail("Should have failed because an expected array is actually an object: " + array);
         } catch (ExecutionException e) {
-            assertThat(e.getCause(), IsInstanceOf.instanceOf(ClassCastException.class));
+            assertThat(e.getCause(), IsInstanceOf.instanceOf(JsonException.class));
         }
     }
 

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/NoTransactionSupport.java
Patch:
@@ -33,7 +33,7 @@ final class NoTransactionSupport implements TransactionSupport {
 
 
     private static final Logger LOGGER = Logger.getLogger(NoTransactionSupport.class.getName(),
-                                                          NoTransactionSupport.class.getPackage().getName() + ".LogMessages");
+                                                          NoTransactionSupport.class.getPackage().getName() + ".Messages");
 
 
     /**

File: config/etcd/src/test/java/io/helidon/config/etcd/EtcdConfigSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -135,7 +135,7 @@ public Optional<Long> stamp() {
     }
 
     private void putConfiguration(String resourcePath) throws Exception {
-        File file = new File(EtcdConfigSourceTest.class.getResource(resourcePath).getFile());
+        File file = new File(EtcdConfigSourceTest.class.getResource(resourcePath).toURI());
         etcdClient.put("configuration",
                        String.join("\n", Files.readAllLines(file.toPath(), Charset.defaultCharset())));
     }

File: config/encryption/src/test/java/io/helidon/config/encryption/RsaSecureConfigTest.java
Patch:
@@ -42,22 +42,22 @@ public class RsaSecureConfigTest {
 
     @BeforeAll
     public static void initClass() {
-        config = Config.create().get("rsa");
+        config = Config.create().get("rsa-current");
 
         configRequiresEncryption = Config.builder()
                 .sources(ConfigSources.create(
                         //override require encryption
                         ConfigSources.create(mapOf(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
                         ConfigSources.classpath("application.yaml")))
-                .build().get("rsa");
+                .build().get("rsa-current");
 
         assertThat("We must have the correct configuration file", config.get("pwd3").type().isLeaf());
         assertThat("We must have the correct configuration file", configRequiresEncryption.get("pwd3").type().isLeaf());
     }
 
     @Test
     public void testWrongAsymmetric() {
-        testPassword(config, "pwd10", "${RSA=not really encrypted}");
+        testPassword(config, "pwd10", "${RSA-P=not really encrypted}");
     }
 
 

File: config/encryption/src/test/java/io/helidon/config/encryption/SecureConfigFromBuilderTest.java
Patch:
@@ -48,7 +48,7 @@ public static void initClass() {
                                    .masterPassword("myMasterPasswordForEncryption".toCharArray())
                                    .privateKey(keyConfig)
                                    .buildProvider())
-                .build().get("current");
+                .build().get("aes-current");
 
         configRequiresEncryption = Config.builder()
                 .disableFilterServices()
@@ -57,7 +57,7 @@ public static void initClass() {
                                    .masterPassword("myMasterPasswordForEncryption".toCharArray())
                                    .privateKey(keyConfig)
                                    .buildProvider())
-                .build().get("current");
+                .build().get("aes-current");
 
         assertThat("We must have the correct configuration file", config.get("pwd1").type().isLeaf());
         assertThat("We must have the correct configuration file", configRequiresEncryption.get("pwd1").type().isLeaf());

File: config/encryption/src/test/java/io/helidon/config/encryption/SecureConfigFromConfigTest.java
Patch:
@@ -34,14 +34,14 @@ public class SecureConfigFromConfigTest extends AbstractSecureConfigTest {
 
     @BeforeAll
     public static void initClass() {
-        config = Config.create().get("current");
+        config = Config.create().get("aes-current");
 
         configRequiresEncryption = Config.builder()
                 .sources(ConfigSources.create(
                         //override require encryption
                         ConfigSources.create(mapOf(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
                         ConfigSources.classpath("application.yaml")))
-                .build().get("current");
+                .build().get("aes-current");
 
         assertThat("We must have the correct configuration file", config.get("pwd1").type().isLeaf());
         assertThat("We must have the correct configuration file", configRequiresEncryption.get("pwd1").type().isLeaf());

File: config/encryption/src/test/java/io/helidon/config/encryption/SecureLegacyConfigFromConfigTest.java
Patch:
@@ -34,15 +34,15 @@ public class SecureLegacyConfigFromConfigTest extends AbstractSecureConfigTest {
 
     @BeforeAll
     public static void initClass() {
-        config = Config.create().get("legacy");
+        config = Config.create().get("aes-legacy");
 
         configRequiresEncryption = Config.builder()
                 .sources(ConfigSources.create(
                         //override require encryption
                         ConfigSources.create(mapOf(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
                         ConfigSources.classpath("application.yaml")))
                 .build()
-                .get("legacy");
+                .get("aes-legacy");
 
         assertThat("We must have the correct configuration file", config.get("pwd1").type().isLeaf());
         assertThat("We must have the correct configuration file", configRequiresEncryption.get("pwd1").type().isLeaf());

File: config/encryption/src/test/java/io/helidon/config/encryption/TestFilterService.java
Patch:
@@ -29,7 +29,7 @@
 class TestFilterService {
     @Test
     void testFiltering() {
-        Config config = Config.create().get("current");
+        Config config = Config.create().get("aes-current");
 
         String value = config.get("pwd4").asString().get();
 

File: metrics/metrics/src/main/java/io/helidon/metrics/InternalMetadataBuilderImpl.java
Patch:
@@ -104,7 +104,7 @@ public Metadata build() {
         if (name == null) {
             throw new IllegalStateException("name must be assigned");
         }
-        return new InternalMetadataImpl(name, displayName, description, type, unit);
+        return new InternalMetadataImpl(name, displayName, description, type, unit, reusable, null);
     }
 
     static class FactoryImpl implements Metadata.MetadataBuilder.Factory {

File: metrics2/metrics2/src/main/java/io/helidon/metrics/Registry.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.SortedMap;
 import java.util.SortedSet;
@@ -544,8 +545,8 @@ static <T extends Metadata, U extends Metadata> boolean  metadataMatches(T a, U
                 && a.getTypeRaw().equals(b.getTypeRaw())
                 && (((isFlexible(a) || isFlexible(b))
                     || (a.getDisplayName().equals(b.getDisplayName())
-                        && a.getDescription().equals(b.getDescription())
-                        && a.getUnit().equals(b.getUnit())
+                        && Objects.equals(a.getDescription(), b.getDescription())
+                        && Objects.equals(a.getUnit(), b.getUnit())
                         && (a.isReusable() == b.isReusable())
                     ))
                    );

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/MetricsTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import io.helidon.common.metrics.InternalBridge;
 import io.helidon.common.metrics.InternalBridge.Metadata.MetadataBuilder;
+import io.helidon.common.metrics.InternalBridge.MetricID;
 import io.helidon.common.metrics.InternalBridge.MetricRegistry;
 
 import org.eclipse.microprofile.faulttolerance.exceptions.CircuitBreakerOpenException;

File: examples/quickstarts/helidon-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/GreetService.java
Patch:
@@ -64,7 +64,7 @@ public class GreetService implements Service {
     }
 
     /**
-     * A service registers itself by updating the routine rules.
+     * A service registers itself by updating the routing rules.
      * @param rules the routing rules.
      */
     @Override

File: config/config/src/main/java/io/helidon/config/internal/MapConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -55,12 +55,11 @@ public MapConfigSource(Map<String, String> map, boolean strict, String mapSource
 
     @Override
     public String description() {
-        return ConfigSource.super.description() + "[" + mapSourceName + "]";
+        return ConfigSource.super.description() + (mapSourceName.isEmpty() ? "" : "[" + mapSourceName + "]");
     }
 
     @Override
     public Optional<ObjectNode> load() {
         return Optional.of(ConfigUtils.mapToObjectNode(map, strict));
     }
-
 }

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/JtaTransactionSupport.java
Patch:
@@ -63,7 +63,7 @@ final class JtaTransactionSupport implements TransactionSupport {
      * @exception NullPointerException
      */
     @Inject
-    private JtaTransactionSupport(final Provider<BeanManager> beanManagerProvider) {
+    JtaTransactionSupport(final Provider<BeanManager> beanManagerProvider) {
         super();
         this.beanManagerProvider = Objects.requireNonNull(beanManagerProvider);
     }

File: integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/NoTransactionSupport.java
Patch:
@@ -39,7 +39,7 @@ final class NoTransactionSupport implements TransactionSupport {
     /**
      * Creates a new {@link NoTransactionSupport}.
      */
-    private NoTransactionSupport() {
+    NoTransactionSupport() {
         super();
         final String cn = this.getClass().getName();
         final String mn = "<init>";

File: integrations/cdi/jta-cdi/src/main/java/io/helidon/integrations/jta/cdi/NarayanaTransactionSynchronizationRegistry.java
Patch:
@@ -67,7 +67,7 @@ class NarayanaTransactionSynchronizationRegistry extends DelegatingTransactionSy
      * @see JTAEnvironmentBean#getTransactionSynchronizationRegistry()
      */
     @Inject
-    private NarayanaTransactionSynchronizationRegistry(final JTAEnvironmentBean jtaEnvironmentBean) {
+    NarayanaTransactionSynchronizationRegistry(final JTAEnvironmentBean jtaEnvironmentBean) {
         super(jtaEnvironmentBean == null ? null : jtaEnvironmentBean.getTransactionSynchronizationRegistry());
     }
 

File: microprofile/security/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,6 +27,7 @@
     requires io.helidon.microprofile.server;
 
     provides io.helidon.microprofile.server.spi.MpService with io.helidon.microprofile.security.SecurityMpService;
+    provides javax.enterprise.inject.spi.Extension with io.helidon.microprofile.security.SecurityCdiExtension;
 
     uses org.eclipse.microprofile.config.spi.ConfigSource;
     uses org.eclipse.microprofile.config.spi.ConfigSourceProvider;

File: security/security/src/main/java/io/helidon/security/Security.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -69,7 +69,8 @@
  * @see #builder()
  * @see #create(Config)
  */
-public final class Security {
+// class cannot be final, so CDI can create a proxy for it
+public class Security {
     /**
      * Integration should add a special header to each request. The value will contain the original
      * URI as was issued - for HTTP this is the relative URI including query parameters.

File: common/reactive/src/main/java/io/helidon/common/reactive/SingleSubscriberHolder.java
Patch:
@@ -95,7 +95,7 @@ public void close(Consumer<Flow.Subscriber<? super T>> completionHandler) {
     }
 
     /**
-     * Hard cancel - nothing is send to the subscriber but subscription is considered as canceled.
+     * Hard cancel - nothing is sent to the subscriber but subscription is considered as canceled.
      */
     public void cancel() {
         subscriber.completeExceptionally(CANCELLED);

File: common/reactive/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,8 @@
     requires java.logging;
     requires org.reactivestreams;
     requires reactor.core;
+    requires io.helidon.common;
+    requires io.helidon.common.mapper;
 
     exports io.helidon.common.reactive;
     exports io.helidon.common.reactive.valve;

File: media/common/src/main/java9/module-info.java
Patch:
@@ -22,7 +22,7 @@
  */
 module io.helidon.media.common {
     requires java.logging;
-    requires reactor.core;
+    requires io.helidon.common.mapper;
     requires io.helidon.common.reactive;
     requires io.helidon.common.http;
 

File: media/common/src/test/java/io/helidon/media/common/PublisherInputStreamTest.java
Patch:
@@ -14,12 +14,11 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver;
+package io.helidon.media.common;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.Flow.Publisher;
-import io.helidon.media.common.PublisherInputStream;
 
 import java.io.IOException;
 import java.io.InputStream;

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SecurityFilter.java
Patch:
@@ -44,6 +44,7 @@
 import javax.ws.rs.core.Response;
 
 import io.helidon.common.OptionalHelper;
+import io.helidon.common.reactive.OutputStreamPublisher;
 import io.helidon.common.serviceloader.HelidonServiceLoader;
 import io.helidon.config.Config;
 import io.helidon.jersey.common.InvokedResource;

File: webserver/jersey/src/main/java9/module-info.java
Patch:
@@ -25,7 +25,8 @@
     requires transitive io.helidon.jersey.server;
 
     requires io.helidon.common.context;
-    requires reactor.core;
+    requires io.helidon.common.mapper;
+    requires io.helidon.common.reactive;
     requires java.logging;
     requires hk2.api;
 

File: webserver/webserver/src/main/java/io/helidon/webserver/HttpInitializer.java
Patch:
@@ -23,6 +23,7 @@
 
 import javax.net.ssl.SSLEngine;
 
+import io.helidon.common.http.DataChunk;
 import io.helidon.webserver.HelidonConnectionHandler.HelidonHttp2ConnectionHandlerBuilder;
 
 import io.netty.channel.ChannelHandlerContext;
@@ -50,7 +51,7 @@ class HttpInitializer extends ChannelInitializer<SocketChannel> {
     private final SslContext sslContext;
     private final NettyWebServer webServer;
     private final Routing routing;
-    private final Queue<ReferenceHoldingQueue<ByteBufRequestChunk>> queues = new ConcurrentLinkedQueue<>();
+    private final Queue<ReferenceHoldingQueue<DataChunk>> queues = new ConcurrentLinkedQueue<>();
 
     HttpInitializer(SslContext sslContext, Routing routing, NettyWebServer webServer) {
         this.routing = routing;

File: webserver/webserver/src/main/java/io/helidon/webserver/Request.java
Patch:
@@ -107,7 +107,7 @@ abstract class Request implements ServerRequest {
      * @param request the request to extract the charset from
      * @return the charset or {@link #DEFAULT_CHARSET} if none found
      */
-    static Charset requestContentCharset(ServerRequest request) {
+    static Charset contentCharset(ServerRequest request) {
         return request.headers()
                       .contentType()
                       .flatMap(MediaType::charset)
@@ -364,7 +364,7 @@ private <T> Reader<T> readerFor(final Class<T> type) {
 
         private Reader<String> stringContentReader() {
             try {
-                Charset charset = requestContentCharset(Request.this);
+                Charset charset = contentCharset(Request.this);
                 return ContentReaders.stringReader(charset);
             } catch (final UnsupportedCharsetException e) {
                 return (publisher, clazz) -> {

File: common/context/src/main/java/io/helidon/common/context/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Support fo context propagation across executor boundaries.
+ * Support for context propagation across executor boundaries.
  */
 package io.helidon.common.context;

File: config/config/src/main/java/io/helidon/config/Config.java
Patch:
@@ -52,7 +52,7 @@
  * implementing interfaces defined in the SPI, by explicitly constructing the
  * {@link Builder} which assembles the {@code Config}, and by using other
  * classes provided by the config system that influence loading.
- * <table>
+ * <table class="config">
  * <caption><b>Some Config SPI Interfaces</b></caption>
  * <tr>
  * <th>Class.Method</th>
@@ -81,7 +81,7 @@
  * sources.</td>
  * </tr>
  * <tr>
- * <td>{@link OverrideSources} methods</td>
+ * <td>{@link OverrideSources}</td>
  * <td></td>
  * <td>Replaces config {@code String} values during loading based on their keys.
  * Programs provide overrides in Java property file format on the classpath, at

File: config/config/src/main/java/io/helidon/config/ConfigSources.java
Patch:
@@ -519,7 +519,7 @@ public ConfigSource get() {
      * <p>
      * The {@code CompositeBuilder} also supports change monitoring. The
      * application can control these aspects:
-     * <table>
+     * <table class="config">
      * <caption>Application Control of Change Monitoring</caption>
      * <tr>
      * <th>Change Support Behavior</th>

File: config/config/src/main/java/io/helidon/config/package-info.java
Patch:
@@ -58,7 +58,7 @@
  * The {@link io.helidon.config.Config#type()} method
  * returns an enum value {@link io.helidon.config.Config.Type} that tells how the
  * program should interpret the content of the node.
- * <table>
+ * <table class="config">
  * <caption><b>Config Node Types</b></caption>
  * <tr>
  * <th>Type</th>

File: config/config/src/main/java/io/helidon/config/spi/ConfigSource.java
Patch:
@@ -73,7 +73,7 @@ public interface ConfigSource extends Source<ObjectNode>, Supplier<ConfigSource>
      * available properties for types other than {@code system-properties} and
      * {@code environment-variables} (which do not support {@code properties}
      * settings).
-     * <table>
+     * <table class="config">
      * <caption><b>Predefined Configuration Source Types</b></caption>
      * <tr>
      * <th>Source Type</th>

File: config/config/src/main/java/io/helidon/config/spi/PollingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -67,7 +67,7 @@
  * {@code polling-strategy} using the following nested {@code properties}:
  * <ul>
  * <li>{@code type} - name of the polling strategy implementation.
- * <table>
+ * <table class="config">
  * <caption>Built-in Polling Strategies</caption>
  * <tr>
  * <th>Name</th>

File: config/config/src/main/java/io/helidon/config/spi/RetryPolicy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ public interface RetryPolicy extends Supplier<RetryPolicy> {
      * {@code retry-policy} using the following nested {@code properties}:
      * <ul>
      * <li>{@code type} - name of the retry policy implementation.
-     * <table>
+     * <table class="config">
      * <caption>Built-in Retry Policies</caption>
      * <tr>
      * <th>Name</th>

File: config/config/src/main/java/io/helidon/config/spi/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
  * Configuration SPI that defines the behavior developers can implement to extend the config system.
  * <p>
  * The most likely developer-implemented extension points:
- * <table>
+ * <table class="config">
  * <caption>Common Extension Points</caption>
  * <tr>
  * <th>Interface</th>

File: openapi/src/main/java/io/helidon/openapi/internal/OpenAPIConfigImpl.java
Patch:
@@ -145,7 +145,7 @@ private static <T, U> Set<U> chooseEntry(Map<T, Set<U>> map, T key) {
      * The caller can set values individually by invoking the method
      * corresponding to each value, or by passing a {@link Config} object with
      * keys as follows:
-     * <table>
+     * <table class="config">
      * <caption>Configuration for Setting OpenAPIConfig</caption>
      * <tr>
      * <th>Key</th>

File: security/providers/oidc-common/src/main/java/io/helidon/security/providers/oidc/common/OidcConfig.java
Patch:
@@ -51,7 +51,7 @@
  * }
  * <p>
  * Configuration options required (under security.providers[].${name}):
- * <table>
+ * <table class="config">
  * <caption>Mandatory configuration parameters</caption>
  * <tr>
  *     <th>key</th>
@@ -75,7 +75,7 @@
  * </tr>
  * </table>
  *
- * <table>
+ * <table class="config">
  * <caption>Optional configuration parameters</caption>
  * <tr>
  *     <th>key</th>

File: security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcSupport.java
Patch:
@@ -53,7 +53,7 @@
  * (that contains security.providers). This class then reads the configuration for provider
  * named "oidc" or (if mutliples are configured) for the name specified.
  * Configuration options used by this class are (under security.providers[].${name}):
- * <table>
+ * <table class="config">
  * <caption>Configuration parameters</caption>
  * <tr>
  *     <th>key</th>

File: tracing/jaeger/src/main/java/io/helidon/tracing/jaeger/JaegerTracerBuilder.java
Patch:
@@ -47,7 +47,7 @@
  *  for details.
  * <p>
  * The following table lists jaeger specific defaults and configuration options.
- * <table>
+ * <table class="config">
  *     <caption>Tracer Configuration Options</caption>
  *     <tr>
  *         <th>option</th>

File: tracing/tracing/src/main/java/io/helidon/tracing/TracerBuilder.java
Patch:
@@ -34,7 +34,7 @@
  * and sampler-type for Jaeger).
  * <p>
  * The following table lists common configuration options that must be honored by each integration (if supported by it).
- * <table>
+ * <table class="config">
  *     <caption>Tracer Configuration Options</caption>
  *     <tr>
  *         <th>option</th>

File: tracing/zipkin/src/main/java/io/helidon/tracing/zipkin/ZipkinTracerBuilder.java
Patch:
@@ -49,7 +49,7 @@
  * use {@link TracerBuilder#create(String)} or {@link TracerBuilder#create(Config)} that is abstracted.</b>
  * <p>
  * The following table lists zipkin specific defaults and configuration options.
- * <table>
+ * <table class="config">
  *     <caption>Tracer Configuration Options</caption>
  *     <tr>
  *         <th>option</th>

File: webclient/jaxrs/src/main/java/io/helidon/webclient/jaxrs/JaxRsClient.java
Patch:
@@ -40,7 +40,7 @@ private JaxRsClient() {
      * Configure defaults for all clients created.
      * Configuration options:
      *
-     * <table>
+     * <table class="config">
      * <caption>Configuration parameters</caption>
      * <tr>
      *     <th>key</th>

File: webserver/access-log/src/main/java/io/helidon/webserver/accesslog/AccessLogSupport.java
Patch:
@@ -255,7 +255,7 @@ public Builder commonLogFormat() {
 
         /**
          * The format for log entries (similar to the Apache {@code LogFormat}).
-         * <table>
+         * <table class="config">
          *     <caption>Log format elements</caption>
          *     <tr>
          *         <td>%h</td>

File: webserver/webserver/src/main/java/io/helidon/webserver/PathMatcher.java
Patch:
@@ -28,7 +28,7 @@
  * While user can implement this interface to implement any specific needs the primary construction method is
  * {@link #create(String)} factory method. The method accepts <i>Web Server Path Pattern</i> format.
  *
- * <table>
+ * <table class="config">
  * <caption><b>Web Server path pattern description</b></caption>
  *
  * <tr>

File: webserver/webserver/src/main/java/io/helidon/webserver/StaticContentSupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -228,9 +228,9 @@ public StaticContentSupport build() {
             ContentTypeSelector selector = new ContentTypeSelector(specificContentTypes);
             StaticContentHandler handler;
             if (fsRoot != null) {
-                handler = new FileSystemContentHandler(welcomeFileName, selector, fsRoot);
+                handler = FileSystemContentHandler.create(welcomeFileName, selector, fsRoot);
             } else if (clRoot != null) {
-                handler = new ClassPathContentHandler(welcomeFileName, selector, clRoot, classLoader);
+                handler = ClassPathContentHandler.create(welcomeFileName, selector, clRoot, classLoader);
             } else {
                 throw new IllegalArgumentException("Builder was created without specified static content root!");
             }

File: tracing/tracing/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,6 +21,7 @@
  */
 module io.helidon.tracing {
     requires io.helidon.common;
+    requires io.helidon.common.serviceloader;
     requires io.helidon.config;
     requires transitive opentracing.api;
     requires opentracing.noop;

File: examples/todo-app/demo-frontend/src/main/java/io/helidon/demo/todos/frontend/EnvHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,6 @@ public EnvHandler(final Config config) {
 
         envConfig.onChange(config1 -> {
             EnvHandler.this.env = config1.asString().orElse("unknown");
-            return true;
         });
     }
 

File: security/integration/grpc/src/test/java/services/SecuredOutboundEchoService.java
Patch:
@@ -25,7 +25,7 @@
 import io.helidon.grpc.server.test.Echo;
 import io.helidon.security.SecurityContext;
 import io.helidon.security.integration.grpc.GrpcSecurity;
-import io.helidon.security.integration.jersey.ClientSecurityFeature;
+import io.helidon.security.integration.jersey.client.ClientSecurity;
 
 import io.grpc.Status;
 import io.grpc.stub.StreamObserver;
@@ -43,7 +43,7 @@ public class SecuredOutboundEchoService
 
     public SecuredOutboundEchoService(String url) {
         this.url = url;
-        this.client = ClientBuilder.newBuilder().build().register(new ClientSecurityFeature());
+        this.client = ClientBuilder.newClient();
     }
 
     @Override
@@ -69,7 +69,7 @@ public void echo(Echo.EchoRequest request, StreamObserver<Echo.EchoResponse> obs
                     .path("/test")
                     .queryParam("message", message)
                     .request()
-                    .property(ClientSecurityFeature.PROPERTY_CONTEXT, securityContext)
+                    .property(ClientSecurity.PROPERTY_CONTEXT, securityContext)
                     .get();
 
             if (webResponse.getStatus() == 200) {

File: examples/quickstarts/helidon-quickstart-se/src/main/java/io/helidon/examples/quickstart/se/Main.java
Patch:
@@ -98,7 +98,7 @@ private static Routing createRouting(Config config) {
         MetricsSupport metrics = MetricsSupport.create();
         GreetService greetService = new GreetService(config);
         HealthSupport health = HealthSupport.builder()
-                .add(HealthChecks.healthChecks())   // Adds a convenient set of checks
+                .addLiveness(HealthChecks.healthChecks())   // Adds a convenient set of checks
                 .build();
 
         return Routing.builder()

File: tests/apps/bookstore/bookstore-se/src/main/java/io/helidon/tests/apps/bookstore/se/Main.java
Patch:
@@ -130,7 +130,7 @@ static WebServer startServer(boolean ssl, boolean http2) throws IOException {
      */
     private static Routing createRouting(Config config) {
         HealthSupport health = HealthSupport.builder()
-                .add(HealthChecks.healthChecks())   // Adds a convenient set of checks
+                .addLiveness(HealthChecks.healthChecks())   // Adds a convenient set of checks
                 .build();
 
         JsonLibrary jsonLibrary = getJsonLibrary(config);

File: security/integration/jersey/src/main/java9/module-info.java
Patch:
@@ -31,6 +31,7 @@
     requires io.helidon.common.context;
     requires io.helidon.jersey.common;
     requires io.helidon.security.integration.common;
+    requires io.helidon.webclient.jaxrs;
     requires jersey.common;
     requires jersey.server;
     requires jersey.client;

File: tracing/jersey-client/src/main/java9/module-info.java
Patch:
@@ -35,6 +35,7 @@
     requires io.helidon.tracing.config;
     requires io.helidon.common;
     requires io.helidon.common.context;
+    requires io.helidon.webclient.jaxrs;
 
     exports io.helidon.tracing.jersey.client;
 

File: common/configurable/src/main/java9/module-info.java
Patch:
@@ -21,9 +21,9 @@
  */
 module io.helidon.common.configurable {
     requires java.logging;
+    requires java.management;
     requires transitive io.helidon.config;
     requires io.helidon.common;
     requires io.helidon.common.context;
-
     exports io.helidon.common.configurable;
 }

File: microprofile/server/src/main/java/io/helidon/microprofile/server/Server.java
Patch:
@@ -214,9 +214,9 @@ private Server doBuild() {
 
             if (null == defaultExecutorService) {
                 defaultExecutorService = ServerThreadPoolSupplier.builder()
-                        .name("server")
-                        .config(config.helidonConfig().get("server.executor-service"))
-                        .build();
+                                                                 .name("server")
+                                                                 .config(config.helidonConfig().get("server.executor-service"))
+                                                                 .build();
             }
 
             STARTUP_LOGGER.finest("Configuration obtained");

File: security/security/src/main/java/io/helidon/security/AuditEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -84,7 +84,7 @@ public interface AuditEvent {
      * Gets the message format of this {@code AuditEvent} to be used with
      * {@link String#format(String, Object...)}.
      *
-     * @return English message format (this is a fallback if internationalization is not configured.
+     * @return English message format (this is a fallback if internationalization is not configured).
      */
     String messageFormat();
 

File: security/security/src/main/java/io/helidon/security/AuthorizationClientImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -86,6 +86,7 @@ public CompletionStage<AuthorizationResponse> submit() {
                             "Provider %s, Description %s, Request %s. Subject %s. %s: %s")
                                           .addParam(AuditEvent.AuditParam
                                                             .plain("provider", providerInstance.getClass().getName()))
+                                          .addParam(AuditEvent.AuditParam.plain("description", "Audit failure"))
                                           .addParam(AuditEvent.AuditParam.plain("request", this))
                                           .addParam(AuditEvent.AuditParam.plain("subject",
                                                                                 context.user()

File: security/security/src/test/java/io/helidon/security/AuditEventTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,7 +44,7 @@ void testParam() {
     }
 
     @Test
-    public void testSensitiveParam() {
+    void testSensitiveParam() {
         String name = "paramName";
         String value = "sensitiveValue";
 

File: tracing/zipkin/src/main/java/io/helidon/tracing/zipkin/ZipkinTracer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -70,7 +70,7 @@ public <C> SpanContext extract(Format<C> format, C carrier) {
 
     @Override
     public ScopeManager scopeManager() {
-        return tracer.scopeManager();
+        return new ZipkinScopeManager(tracer.scopeManager());
     }
 
     @Override

File: grpc/client/src/main/java/io/helidon/grpc/client/GrpcServiceClient.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
-import javax.annotation.concurrent.ThreadSafe;
-
 import io.helidon.grpc.core.InterceptorPriorities;
 import io.helidon.grpc.core.PriorityBag;
 
@@ -42,7 +40,6 @@
 /**
  * A gRPC Client for a specific gRPC service.
  */
-@ThreadSafe
 public class GrpcServiceClient {
 
     private final HashMap<String, GrpcMethodStub> methodStubs;

File: security/security/src/main/java9/module-info.java
Patch:
@@ -39,7 +39,7 @@
     exports io.helidon.security;
     exports io.helidon.security.spi;
 
-    exports io.helidon.security.internal to io.helidon.security.integration.jersey, io.helidon.security.integration.webserver;
+    exports io.helidon.security.internal to io.helidon.security.integration.jersey, io.helidon.security.integration.webserver, io.helidon.security.integration.grpc;
 
     uses io.helidon.security.spi.SecurityProviderService;
 }

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerConfiguration.java
Patch:
@@ -53,9 +53,9 @@ public interface ServerConfiguration extends SocketConfiguration {
     String DEFAULT_SOCKET_NAME = "@default";
 
     /**
-     * Returns a count of threads in s pool used to tryProcess HTTP requests.
+     * Returns the count of threads in the pool used to process HTTP requests.
      * <p>
-     * Default value is {@code CPU_COUNT * 2}.
+     * Default value is {@link Runtime#availableProcessors()}.
      *
      * @return a workers count
      */
@@ -565,7 +565,7 @@ public ServerConfiguration build() {
             }
 
             if (workers <= 0) {
-                workers = Runtime.getRuntime().availableProcessors() * 2;
+                workers = Runtime.getRuntime().availableProcessors();
             }
 
             if (null == experimental) {

File: microprofile/tracing/src/main/java/io/helidon/microprofile/tracing/MpTracingService.java
Patch:
@@ -27,7 +27,7 @@
 import io.opentracing.Tracer;
 
 /**
- * Extension of microprofile to add support for tracing.
+ * Extension of MicroProfile to add support for tracing.
  */
 @Priority(10)
 public class MpTracingService implements MpService {

File: webserver/access-log/src/main/java/io/helidon/webserver/accesslog/AccessLogSupport.java
Patch:
@@ -193,7 +193,7 @@ public static final class Builder implements io.helidon.common.Builder<AccessLog
         private final List<AccessLogEntry> entries = new LinkedList<>();
         private Clock clock = Clock.systemDefaultZone();
         private String loggerName = DEFAULT_LOGGER_NAME;
-        private boolean enabled;
+        private boolean enabled = true;
 
         private Builder() {
         }

File: examples/security/idcs-login/src/main/java/io/helidon/security/examples/idcs/IdcsUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 
+import io.helidon.tracing.TracerBuilder;
 import io.helidon.webserver.Routing;
 import io.helidon.webserver.ServerConfiguration;
 import io.helidon.webserver.WebServer;
@@ -41,6 +42,7 @@ private IdcsUtil() {
     static WebServer startIt(Supplier<? extends Routing> routing) throws UnknownHostException {
         WebServer server = WebServer.create(ServerConfiguration.builder()
                                                     .port(PORT)
+                                                    .tracer(TracerBuilder.create("idcs-example").buildAndRegister())
                                                     .bindAddress(InetAddress.getByName("localhost")),
                                             routing);
 

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SecurityPreMatchingFilter.java
Patch:
@@ -66,7 +66,7 @@ public void filter(ContainerRequestContext request) {
         SecurityContext securityContext = security()
                 .contextBuilder(Integer.toString(CONTEXT_COUNTER.incrementAndGet(), Character.MAX_RADIX))
                 .tracingSpan(tracing.findParent().orElse(null))
-                .executorService(executorService)
+                .executorService(Contexts.wrap(executorService))
                 .build();
 
         Contexts.context().ifPresent(ctx -> ctx.register(securityContext));

File: security/providers/idcs-mapper/src/main/java9/module-info.java
Patch:
@@ -24,6 +24,8 @@
     requires transitive io.helidon.security.providers.common;
     requires transitive io.helidon.security.jwt;
     requires transitive io.helidon.security.providers.oidc.common;
+
+    requires io.helidon.security.integration.common;
     requires io.helidon.security.util;
     requires java.logging;
 

File: microprofile/bundles/helidon-microprofile-2.2/src/main/java9/module-info.java
Patch:
@@ -25,6 +25,9 @@
     requires transitive io.helidon.microprofile.metrics;
     requires transitive io.helidon.microprofile.faulttolerance;
     requires transitive io.helidon.microprofile.jwt.auth.cdi;
+    requires transitive io.helidon.microprofile.tracing;
+    requires transitive io.helidon.microprofile.restclient;
+    requires transitive io.helidon.microprofile.openapi;
 
     requires io.helidon.health.checks;
 }

File: microprofile/tracing/src/test/java/io/helidon/microprofile/tracing/TracingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -88,14 +88,14 @@ void testTracingPropagation() {
 
         // make sure that the operation is as expected (e.g. correctly propagated)
         String headerValue = (String) response.getHeaders().getFirst("X-FRONT-X-TEST-TRACER-OPERATION");
-        assertThat(headerValue, is(ClientTracingFilter.SPAN_OPERATION_NAME));
+        assertThat(headerValue, is("GET"));
         headerValue = (String) response.getHeaders().getFirst("X-FRONT-" + X_REQUEST_ID);
         assertThat(headerValue, is(xRequestId));
         headerValue = (String) response.getHeaders().getFirst("X-FRONT-" + X_OT_SPAN_CONTEXT);
         assertThat(headerValue, is(xOtSpanContext));
 
         headerValue = (String) response.getHeaders().getFirst("X-HELLO-X-TEST-TRACER-OPERATION");
-        assertThat(headerValue, is(ClientTracingFilter.SPAN_OPERATION_NAME));
+        assertThat(headerValue, is("GET"));
         headerValue = (String) response.getHeaders().getFirst("X-HELLO-" + X_REQUEST_ID);
         assertThat(headerValue, is(xRequestId));
         headerValue = (String) response.getHeaders().getFirst("X-HELLO-" + X_OT_SPAN_CONTEXT);

File: security/integration/jersey/src/main/java9/module-info.java
Patch:
@@ -29,6 +29,7 @@
     requires transitive java.ws.rs;
 
     requires io.helidon.common.context;
+    requires io.helidon.jersey.common;
     requires io.helidon.security.integration.common;
     requires jersey.common;
     requires jersey.server;

File: tracing/jersey/src/main/java9/module-info.java
Patch:
@@ -26,6 +26,7 @@
     requires opentracing.api;
     requires io.helidon.common;
     requires io.helidon.common.context;
+    requires io.helidon.jersey.common;
     requires io.helidon.webserver;
     requires transitive io.helidon.tracing.jersey.client;
 

File: common/context/src/main/java/io/helidon/common/context/ListContext.java
Patch:
@@ -106,8 +106,8 @@ public <T> Optional<T> get(Object classifier, Class<T> type) {
         }
     }
 
-    AtomicLong contextCounter() {
-        return contextCounter;
+    long nextChildId() {
+        return contextCounter.getAndUpdate(operand -> (operand == Long.MAX_VALUE) ? 1 : (operand + 1));
     }
 
     private interface RegisteredItem<T> {

File: microprofile/server/src/main/java/io/helidon/microprofile/server/ServerImpl.java
Patch:
@@ -87,6 +87,7 @@ public class ServerImpl implements Server {
 
         Routing.Builder routingBuilder = Routing.builder();
         Config serverConfig = config.get("server");
+
         ServerConfiguration.Builder serverConfigBuilder = ServerConfiguration.builder(serverConfig)
                 .context(this.context)
                 .port(builder.port())

File: tracing/jaeger/src/main/java/io/helidon/tracing/jaeger/JaegerTracerBuilder.java
Patch:
@@ -646,7 +646,7 @@ private void flushIntervalMs(Long aLong) {
     }
 
     enum SamplerType {
-        CONSTANT("constant"),
+        CONSTANT("const"),
         PROBABILISTIC("probabilistic"),
         RATE_LIMITING("ratelimiting"),
         REMOTE("remote");

File: common/context/src/main/java/io/helidon/common/context/Contexts.java
Patch:
@@ -25,7 +25,7 @@
  * Support for handling {@link io.helidon.common.context.Context} across thread boundaries.
  */
 public final class Contexts {
-    static final ThreadLocal<Stack<Context>> REGISTRY = ThreadLocal.withInitial(Stack::new);
+    private static final ThreadLocal<Stack<Context>> REGISTRY = ThreadLocal.withInitial(Stack::new);
 
     private Contexts() {
     }
@@ -45,7 +45,7 @@ static Context pop() {
     /**
      * Get context registry associated with current thread.
      *
-     * @return context that is associated with current thread or an empty context if none is
+     * @return context that is associated with current thread or empty if none is
      */
     public static Optional<Context> context() {
         Stack<Context> contextStack = REGISTRY.get();

File: examples/grpc/opentracing/src/main/java/io/helidon/grpc/examples/opentracing/ZipkinExampleMain.java
Patch:
@@ -24,8 +24,8 @@
 import io.helidon.grpc.server.GrpcRouting;
 import io.helidon.grpc.server.GrpcServer;
 import io.helidon.grpc.server.GrpcServerConfiguration;
+import io.helidon.grpc.server.GrpcTracingConfig;
 import io.helidon.grpc.server.ServerRequestAttribute;
-import io.helidon.grpc.server.TracingConfiguration;
 import io.helidon.tracing.TracerBuilder;
 
 import io.opentracing.Tracer;
@@ -54,7 +54,7 @@ public static void main(String[] args) throws Exception {
 
         Tracer tracer = TracerBuilder.create(config.get("tracing")).build();
 
-        TracingConfiguration tracingConfig = TracingConfiguration.builder()
+        GrpcTracingConfig tracingConfig = GrpcTracingConfig.builder()
                 .withStreaming()
                 .withVerbosity()
                 .withTracedAttributes(ServerRequestAttribute.CALL_ATTRIBUTES,

File: examples/webserver/demo-translator-frontend/src/main/java/io/helidon/webserver/examples/translator/frontend/TranslatorResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -140,7 +140,7 @@ public String getText(@QueryParam("q") String query,
     }
 
     private Tracer tracer(ServerRequest request) {
-        return request.webServer().configuration().tracer();
+        return request.tracer();
     }
 
     private void translate(final WebTarget backend, final StringBuilder sb) {

File: grpc/server/src/main/java/io/helidon/grpc/server/GrpcServerBasicConfig.java
Patch:
@@ -35,7 +35,7 @@ public class GrpcServerBasicConfig
 
     private final Tracer tracer;
 
-    private final TracingConfiguration tracingConfig;
+    private final GrpcTracingConfig tracingConfig;
 
     private final int workers;
 
@@ -108,7 +108,7 @@ public Tracer tracer() {
     }
 
     @Override
-    public TracingConfiguration tracingConfig() {
+    public GrpcTracingConfig tracingConfig() {
         return tracingConfig;
     }
 

File: grpc/server/src/main/java/io/helidon/grpc/server/GrpcTracing.java
Patch:
@@ -53,7 +53,7 @@ public class GrpcTracing
      * @param tracer        the Open Tracing {@link Tracer}
      * @param tracingConfig the tracing configuration
      */
-    GrpcTracing(Tracer tracer, TracingConfiguration tracingConfig) {
+    GrpcTracing(Tracer tracer, GrpcTracingConfig tracingConfig) {
         this.tracer = tracer;
         operationNameConstructor = tracingConfig.operationNameConstructor();
         streaming = tracingConfig.isStreaming();

File: grpc/server/src/test/java/io/helidon/grpc/server/TracingIT.java
Patch:
@@ -163,7 +163,7 @@ private static void startGrpcServer() throws Exception {
                 .collectorUri(URI.create(zipkin.httpUrl() + "/api/v2/spans"))
                 .build();
 
-        TracingConfiguration tracingConfig = TracingConfiguration.builder()
+        GrpcTracingConfig tracingConfig = GrpcTracingConfig.builder()
                 .withStreaming()
                 .withVerbosity()
                 .withTracedAttributes(ServerRequestAttribute.CALL_ATTRIBUTES,

File: microprofile/tracing/src/main/java/io/helidon/microprofile/tracing/MpTracingContextFilter.java
Patch:
@@ -56,7 +56,7 @@ public class MpTracingContextFilter implements ContainerRequestFilter {
     public void filter(ContainerRequestContext requestContext) {
         ServerRequest serverRequest = this.request.get();
 
-        Tracer tracer = serverRequest.webServer().configuration().tracer();
+        Tracer tracer = serverRequest.tracer();
         SpanContext parentSpan = serverRequest.spanContext();
 
         boolean clientEnabled = config.get("tracing.client.enabled").asBoolean().orElse(true);

File: security/integration/jersey/src/main/java9/module-info.java
Patch:
@@ -27,6 +27,9 @@
     requires transitive io.helidon.security.util;
     requires transitive io.helidon.common.serviceloader;
     requires transitive java.ws.rs;
+
+    requires io.helidon.common.context;
+    requires io.helidon.security.integration.common;
     requires jersey.common;
     requires jersey.server;
     requires jersey.client;

File: security/integration/webserver/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
     requires transitive io.helidon.security;
     requires transitive io.helidon.security.util;
     requires io.helidon.webserver;
+    requires io.helidon.security.integration.common;
 
     exports io.helidon.security.integration.webserver;
 }

File: tracing/jersey-client/src/main/java/io/helidon/tracing/jersey/client/ClientTracingAutoDiscoverable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public class ClientTracingAutoDiscoverable implements AutoDiscoverable {
     @Override
     public void configure(FeatureContext context) {
         if (!context.getConfiguration().isRegistered(ClientTracingFilter.class)) {
-            context.register(ClientTracingFilter.class);
+            context.register(ClientTracingFilter.class, 10);
         }
     }
 }

File: tracing/jersey-client/src/main/java9/module-info.java
Patch:
@@ -32,6 +32,7 @@
     requires opentracing.util;
 
     requires io.helidon.tracing;
+    requires io.helidon.tracing.config;
     requires io.helidon.common;
     requires io.helidon.common.context;
 

File: webserver/webserver/src/main/java/io/helidon/webserver/NettyWebServer.java
Patch:
@@ -56,6 +56,7 @@
  * The Netty based WebServer implementation.
  */
 class NettyWebServer implements WebServer {
+    static final String TRACING_COMPONENT = "web-server";
 
     private static final Logger LOGGER = Logger.getLogger(NettyWebServer.class.getName());
 

File: webserver/webserver/src/main/java9/module-info.java
Patch:
@@ -23,10 +23,11 @@
     requires transitive io.helidon.common.http;
     requires transitive io.helidon.common.pki;
     requires transitive io.helidon.common.reactive;
+    requires transitive io.helidon.common.context;
     requires transitive io.helidon.config;
+    requires transitive io.helidon.tracing.config;
     requires transitive opentracing.util;
 
-    requires io.helidon.common.context;
     requires java.logging;
     requires opentracing.api;
     requires opentracing.noop;

File: webserver/webserver/src/test/java/io/helidon/webserver/RequestTestStub.java
Patch:
@@ -44,7 +44,7 @@ public class RequestTestStub extends Request {
     }
 
     @Override
-    protected Tracer tracer() {
+    public Tracer tracer() {
         return GlobalTracer.get();
     }
 

File: webserver/webserver/src/test/java/io/helidon/webserver/ResponseTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.time.temporal.ChronoUnit;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
@@ -240,8 +241,8 @@ public ResponseImpl(WebServer webServer, BareResponse bareResponse) {
         }
 
         @Override
-        SpanContext spanContext() {
-            return null;
+        Optional<SpanContext> spanContext() {
+            return Optional.empty();
         }
     }
 

File: health/health-checks/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,11 +22,11 @@
     requires java.management;
 
     requires static cdi.api;
-    requires javax.inject;
+    requires static javax.inject;
 
     requires io.helidon.common;
     requires io.helidon.health;
-    requires microprofile.config.api;
+    requires static microprofile.config.api;
     requires microprofile.health.api;
 
     exports io.helidon.health.checks;

File: health/health/src/main/java9/module-info.java
Patch:
@@ -24,7 +24,8 @@
     requires transitive microprofile.health.api;
     requires io.helidon.webserver;
     requires io.helidon.media.jsonp.server;
-    requires org.glassfish.java.json;
+    requires java.json;
 
     exports io.helidon.health;
+    provides org.eclipse.microprofile.health.spi.HealthCheckResponseProvider with io.helidon.health.HealthCheckResponseProviderImpl;
 }

File: media/jsonp/common/src/main/java9/module-info.java
Patch:
@@ -25,7 +25,7 @@
     requires io.helidon.common.http;
     requires io.helidon.common.reactive;
     requires io.helidon.media.common;
-    requires transitive org.glassfish.java.json;
+    requires transitive java.json;
     
     exports io.helidon.media.jsonp.common;
 }

File: metrics/metrics/src/main/java9/module-info.java
Patch:
@@ -25,7 +25,7 @@
     requires java.management;
     requires io.helidon.webserver;
     requires io.helidon.media.jsonp.server;
-    requires org.glassfish.java.json;
+    requires java.json;
 
     exports io.helidon.metrics;
 }

File: microprofile/jwt-auth/jwt-auth-cdi/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
     requires cdi.api;
     requires javax.inject;
     requires microprofile.config.api;
+    requires java.ws.rs;
 
     requires transitive io.helidon.microprofile.jwt.auth;
 

File: microprofile/server/src/main/java9/module-info.java
Patch:
@@ -23,13 +23,11 @@
     requires transitive io.helidon.webserver;
     requires transitive io.helidon.webserver.jersey;
     requires transitive io.helidon.common.context;
+    requires transitive io.helidon.jersey.server;
 
     requires transitive cdi.api;
     requires transitive java.ws.rs;
-    requires transitive jersey.server;
     requires transitive org.glassfish.java.json;
-    // needed by jersey
-    requires transitive java.activation;
 
     requires java.logging;
     requires io.helidon.common.serviceloader;

File: microprofile/tracing/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: security/jwt/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: security/providers/idcs-mapper/src/main/java9/module-info.java
Patch:
@@ -27,6 +27,9 @@
     requires io.helidon.security.util;
     requires java.logging;
 
+    requires jersey.client;
+    requires java.ws.rs;
+
     exports io.helidon.security.providers.idcs.mapper;
 
     provides io.helidon.security.spi.SecurityProviderService with io.helidon.security.providers.idcs.mapper.IdcsRoleMapperProviderService;

File: tracing/jersey/src/main/java9/module-info.java
Patch:
@@ -23,7 +23,6 @@
 
     requires java.ws.rs;
     requires jersey.server;
-    requires javax.inject;
     requires opentracing.api;
     requires io.helidon.common;
     requires io.helidon.common.context;

File: webserver/jersey/src/main/java9/module-info.java
Patch:
@@ -22,9 +22,7 @@
     requires transitive io.helidon.webserver;
     requires transitive java.ws.rs;
     requires transitive opentracing.api;
-    requires transitive jersey.common;
-    requires transitive jersey.server;
-    requires transitive javax.inject;
+    requires transitive io.helidon.jersey.server;
 
     requires io.helidon.common.context;
     requires reactor.core;

File: security/security/src/main/java/io/helidon/security/SecurityContextImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,6 +26,7 @@
 import java.util.function.Supplier;
 
 import io.helidon.common.CollectionsHelper;
+import io.helidon.common.context.Contexts;
 import io.helidon.security.internal.SecurityAuditEvent;
 import io.helidon.security.spi.AuthorizationProvider;
 
@@ -232,6 +233,7 @@ public Optional<Subject> user() {
     void setUser(Subject subject) {
         Objects.requireNonNull(subject);
         this.currentSubject = subject;
+        Contexts.context().ifPresent(ctx -> ctx.register(currentSubject.principal()));
     }
 
     @Override

File: security/security/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,6 +33,7 @@
     requires opentracing.util;
 
     requires io.helidon.security.util;
+    requires io.helidon.common.context;
     requires opentracing.noop;
 
     exports io.helidon.security;

File: webserver/webserver/src/main/java/io/helidon/webserver/HelidonConnectionHandler.java
Patch:
@@ -37,7 +37,7 @@
 import io.netty.handler.codec.http2.InboundHttp2ToHttpAdapter;
 import io.netty.handler.codec.http2.InboundHttp2ToHttpAdapterBuilder;
 
-import static io.netty.handler.logging.LogLevel.INFO;
+import static io.netty.handler.logging.LogLevel.DEBUG;
 
 /**
  * Class HelidonConnectionHandler.
@@ -156,7 +156,7 @@ public void onUnknownFrame(ChannelHandlerContext ctx, byte frameType, int stream
     static final class HelidonHttp2ConnectionHandlerBuilder extends
             AbstractHttp2ConnectionHandlerBuilder<HelidonConnectionHandler, HelidonHttp2ConnectionHandlerBuilder> {
 
-        private static final Http2FrameLogger LOGGER = new Http2FrameLogger(INFO, HelidonConnectionHandler.class);
+        private static final Http2FrameLogger LOGGER = new Http2FrameLogger(DEBUG, HelidonConnectionHandler.class);
 
         private int maxContentLength;
 

File: grpc/client/src/main/java/io/helidon/grpc/client/ClientTracingInterceptor.java
Patch:
@@ -74,7 +74,7 @@ public class ClientTracingInterceptor
      * @param streaming                flag indicating whether to trace streaming calls
      * @param verbose                  flag to indicate verbose logging to spans
      * @param tracedAttributes         the set of request attributes to add to the span
-     * @param activeSpanSource         the spurce of the active span
+     * @param activeSpanSource         the source of the active span
      */
     private ClientTracingInterceptor(Tracer tracer,
                                      OperationNameConstructor operationNameConstructor,

File: grpc/server/src/main/java/io/helidon/grpc/server/GrpcServerBasicConfig.java
Patch:
@@ -17,6 +17,7 @@
 package io.helidon.grpc.server;
 
 import io.helidon.common.context.Context;
+import io.helidon.grpc.core.GrpcSslDescriptor;
 
 import io.opentracing.Tracer;
 
@@ -38,7 +39,7 @@ public class GrpcServerBasicConfig
 
     private final int workers;
 
-    private final SslConfiguration sslConfig;
+    private final GrpcSslDescriptor sslConfig;
 
     private final Context context;
 
@@ -117,7 +118,7 @@ public int workers() {
     }
 
     @Override
-    public SslConfiguration sslConfig() {
+    public GrpcSslDescriptor sslConfig() {
         return sslConfig;
     }
 }

File: webserver/webserver/src/main/java/io/helidon/webserver/BareRequestImpl.java
Patch:
@@ -44,6 +44,7 @@ class BareRequestImpl implements BareRequest {
     private final ChannelHandlerContext ctx;
     private final SSLEngine sslEngine;
     private final long requestId;
+    private final URI uri;
 
     BareRequestImpl(HttpRequest request,
                     Flow.Publisher<DataChunk> publisher,
@@ -57,6 +58,7 @@ class BareRequestImpl implements BareRequest {
         this.ctx = ctx;
         this.sslEngine = sslEngine;
         this.requestId = requestId;
+        this.uri = URI.create(nettyRequest.uri());
     }
 
     @Override
@@ -76,7 +78,7 @@ public Http.Version version() {
 
     @Override
     public URI uri() {
-        return URI.create(nettyRequest.uri());
+        return uri;
     }
 
     @Override

File: config/encryption/src/test/java/io/helidon/config/encryption/MainTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018,2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,12 +50,12 @@ public void testAesEncryption() {
 
         assertAll(
                 () -> assertThat("Encrypted string should contain aes prefix: " + encrypted,
-                                 encrypted.startsWith(EncryptionFilter.PREFIX_AES)),
+                                 encrypted.startsWith(EncryptionFilter.PREFIX_GCM)),
                 () -> assertThat("Encrypted string should contain suffix \"}\": " + encrypted, encrypted.endsWith("}"))
         );
 
         String orig = EncryptionUtil.decryptAes(ecp.getMasterPassword().toCharArray(),
-                                                encrypted.substring(EncryptionFilter.PREFIX_AES.length(), encrypted.length() - 1));
+                                                encrypted.substring(EncryptionFilter.PREFIX_GCM.length(), encrypted.length() - 1));
 
         assertEquals(secret, orig);
 

File: config/encryption/src/test/java/io/helidon/config/encryption/TestFilterService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018,2019 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,9 +29,9 @@
 class TestFilterService {
     @Test
     void testFiltering() {
-        Config config = Config.create();
+        Config config = Config.create().get("current");
 
-        String value = config.get("pwd3").asString().get();
+        String value = config.get("pwd4").asString().get();
 
         assertThat(value, is(AbstractSecureConfigTest.TEST_STRING));
     }

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceMpService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,6 +26,6 @@ public class FaultToleranceMpService implements MpService {
 
     @Override
     public void configure(MpServiceContext mpServiceContext) {
-        CommandScheduler.create(mpServiceContext.helidonConfig().get("helidon.fault-tolerance.async-thread-pool"));
+        // no-op
     }
 }

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/BulkheadTest.java
Patch:
@@ -80,8 +80,6 @@ public void testBulkheadExecuteCancelInQueue() throws Exception {
         assertTrue(f2.isCancelled());
         assertThrows(CancellationException.class, f2::get);
         assertNotNull(f1.get());
-        // assertThat(bean.getMillis().size(), is(1));
-        // assertThat(bean.getMillis().iterator().next(), is(1000L));
     }
 
     @Test

File: common/http/src/main/java/io/helidon/common/http/ContextualRegistry.java
Patch:
@@ -65,7 +65,7 @@ static ContextualRegistry create() {
      * @param parent a parent registry
      * @return new instance
      */
-    static ContextualRegistry create(ContextualRegistry parent) {
+    static ContextualRegistry create(Context parent) {
         return new ListContextualRegistry(parent);
     }
 }

File: common/http/src/main/java/io/helidon/common/http/ListContextualRegistry.java
Patch:
@@ -32,7 +32,7 @@ class ListContextualRegistry implements ContextualRegistry {
      *
      * @param parent a parent context or {@code null}.
      */
-    ListContextualRegistry(ContextualRegistry parent) {
+    ListContextualRegistry(Context parent) {
         if (parent instanceof ListContextualRegistry) {
             this.delegate = Context.create(((ListContextualRegistry) parent).delegate);
         } else {

File: microprofile/server/src/main/java9/module-info.java
Patch:
@@ -22,6 +22,7 @@
     requires transitive io.helidon.microprofile.config;
     requires transitive io.helidon.webserver;
     requires transitive io.helidon.webserver.jersey;
+    requires transitive io.helidon.common.context;
 
     requires transitive cdi.api;
     requires transitive java.ws.rs;

File: tracing/jersey-client/src/main/java/io/helidon/tracing/jersey/client/ClientTracingFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@
 
 import io.helidon.common.CollectionsHelper;
 import io.helidon.common.OptionalHelper;
+import io.helidon.common.context.Contexts;
 import io.helidon.tracing.jersey.client.internal.TracingContext;
 import io.helidon.tracing.spi.TracerProvider;
 
@@ -145,7 +146,7 @@ public ClientTracingFilter() {
     public void filter(ClientRequestContext requestContext) {
         // if we run within Jersey server, the tracing context will be filled in by TracingHelperFilter
         // if not, it will be empty
-        Optional<TracingContext> tracingContext = TracingContext.get();
+        Optional<TracingContext> tracingContext = Contexts.context().flatMap(ctx -> ctx.get(TracingContext.class));
 
         // maybe we are disabled
         if (tracingDisabled(tracingContext)) {

File: tracing/jersey-client/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,6 +33,7 @@
 
     requires io.helidon.tracing;
     requires io.helidon.common;
+    requires io.helidon.common.context;
 
     exports io.helidon.tracing.jersey.client;
 

File: tracing/jersey/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,6 +26,7 @@
     requires javax.inject;
     requires opentracing.api;
     requires io.helidon.common;
+    requires io.helidon.common.context;
     requires io.helidon.webserver;
     requires transitive io.helidon.tracing.jersey.client;
 

File: webserver/webserver/src/main/java/io/helidon/webserver/RequestRouting.java
Patch:
@@ -144,7 +144,9 @@ private Span createRequestSpan(Tracer tracer, BareRequest request) {
         if (spanContext != null) {
             spanBuilder.asChildOf(spanContext);
         }
-        return spanBuilder.startActive(true).span();
+
+        // cannot use startActive, as it conflicts with the thread model we use
+        return spanBuilder.start();
     }
 
     /**
@@ -352,7 +354,6 @@ public void next() {
                     RoutedRequest nextRequest = new RoutedRequest(this, nextResponse, nextItem.path, errorHandlers);
                     LOGGER.finest(() -> "(reqID: " + requestId() + ") Routing next: " + nextItem.path);
                     requestSpan.log(nextItem.handlerRoute.diagnosticEvent());
-                    // execute in the context, so context can be retrieved with Contexts (runs in our thread)
                     nextItem.handlerRoute
                             .handler()
                             .accept(nextRequest, nextResponse);

File: microprofile/health/src/main/java/io/helidon/microprofile/health/JvmRuntimeProducers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
  * these dependencies are looked up.
  */
 @ApplicationScoped
-class HealthCheckProducer {
+class JvmRuntimeProducers {
     /**
      * Gets a ThreadMXBean implementation.
      *

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FallbackAntn.java
Patch:
@@ -59,8 +59,8 @@ public void validate() {
                         methodName,
                         method.getGenericParameterTypes());
                 if (!fallbackMethod.getReturnType().isAssignableFrom(method.getReturnType())
-                        && !method.getReturnType().isAssignableFrom(Future.class)
-                        && !method.getReturnType().isAssignableFrom(CompletionStage.class)) {        // async
+                        && !Future.class.isAssignableFrom(method.getReturnType())
+                        && !CompletionStage.class.isAssignableFrom(method.getReturnType())) {        // async
                     throw new FaultToleranceDefinitionException("Fallback method return type "
                             + "is invalid: " + fallbackMethod.getReturnType());
                 }

File: webserver/webserver/src/main/java/io/helidon/webserver/Request.java
Patch:
@@ -282,7 +282,7 @@ public <T> void register(InternalReader<T> reader) {
         }
 
         private <T> InternalReader<T> reader(Class<T> clazz, Reader<T> reader) {
-            return new InternalReader<>(aClass -> aClass.isAssignableFrom(clazz), reader);
+            return new InternalReader<>(aClass -> clazz.isAssignableFrom(aClass), reader);
         }
 
         @Override

File: microprofile/tests/tck/tck-jwt-auth/src/test/java/io/helidon/microprofile/jwtauth/tck/UrlResourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,6 +39,6 @@ public Object lookup(ArquillianResource arquillianResource, Annotation... annota
 
     @Override
     public boolean canProvide(Class<?> type) {
-        return type.isAssignableFrom(URL.class);
+        return URL.class.isAssignableFrom(type);
     }
 }

File: microprofile/config/config/src/main/java/io/helidon/microprofile/config/MpConfig.java
Patch:
@@ -158,7 +158,7 @@ private <T> List<T> toList(final String value, final Class<T> elementType) {
         return result;
     }
 
-    private <T> T findValue(String propertyName, Class<T> propertyType) {
+    <T> T findValue(String propertyName, Class<T> propertyType) {
         if (propertyType == Config.class) {
             return config.get().get(propertyName).as(propertyType).get();
         }

File: webserver/jersey/src/main/java9/module-info.java
Patch:
@@ -29,6 +29,7 @@
     requires io.helidon.common.context;
     requires reactor.core;
     requires java.logging;
+    requires hk2.api;
 
     exports io.helidon.webserver.jersey;
 

File: microprofile/fault-tolerance/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +23,7 @@
     requires javax.inject;
     requires javax.interceptor.api;
 
+    requires io.helidon.common.context;
     requires io.helidon.common.configurable;
     requires io.helidon.microprofile.config;
     requires io.helidon.microprofile.server;

File: webserver/webserver/src/main/java/io/helidon/webserver/NettyWebServer.java
Patch:
@@ -133,6 +133,8 @@ class NettyWebServer implements WebServer {
 
             bootstraps.put(name, bootstrap);
         }
+
+        contextualRegistry.register(config.tracer());
     }
 
     @Override

File: media/jsonb/server/src/main/java/io/helidon/media/jsonb/server/JsonBindingSupport.java
Patch:
@@ -49,10 +49,11 @@ private JsonBindingSupport(final BiFunction<? super ServerRequest,
     @Override
     public void accept(final ServerRequest request, final ServerResponse response) {
         final Jsonb jsonb = this.jsonbProvider.apply(request, response);
+        // Don't register reader/writer if content is a CharSequence (String) (see #645)
         request.content()
-            .registerReader(cls -> true,
+            .registerReader(cls -> !CharSequence.class.isAssignableFrom(cls),
                             JsonBinding.reader(jsonb));
-        response.registerWriter(payload -> acceptsJson(request, response),
+        response.registerWriter(payload -> !(payload instanceof CharSequence) && acceptsJson(request, response),
                                 JsonBinding.writer(jsonb, determineCharset(response.headers())));
         request.next();
     }

File: microprofile/jwt-auth/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthProvider.java
Patch:
@@ -173,8 +173,9 @@ protected AuthenticationResponse syncAuthenticate(ProviderRequest providerReques
             return AuthenticationResponse.abstain();
         }
 
-        List<LoginConfig> loginConfigs = providerRequest.endpointConfig()
-                .combineAnnotations(LoginConfig.class, EndpointConfig.AnnotationScope.APPLICATION);
+        //Obtains Application level of security
+        List<LoginConfig> loginConfigs = providerRequest.endpointConfig().securityLevels().get(0)
+                .filterAnnotations(LoginConfig.class, EndpointConfig.AnnotationScope.CLASS);
 
         try {
             return loginConfigs.stream()

File: common/configurable/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,9 +21,9 @@
  */
 module io.helidon.common.configurable {
     requires java.logging;
-
     requires transitive io.helidon.config;
     requires io.helidon.common;
+    requires io.helidon.common.context;
 
     exports io.helidon.common.configurable;
 }

File: common/http/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,6 +20,7 @@
 module io.helidon.common.http {
     requires java.logging;
     requires io.helidon.common;
+    requires io.helidon.common.context;
     requires io.helidon.common.reactive;
 
     exports io.helidon.common.http;

File: webserver/jersey/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,6 +26,7 @@
     requires transitive jersey.server;
     requires transitive javax.inject;
 
+    requires io.helidon.common.context;
     requires reactor.core;
     requires java.logging;
 

File: webserver/webserver/src/main/java9/module-info.java
Patch:
@@ -26,6 +26,7 @@
     requires transitive io.helidon.config;
     requires transitive opentracing.util;
 
+    requires io.helidon.common.context;
     requires java.logging;
     requires opentracing.api;
     requires opentracing.noop;

File: webserver/webserver/src/main/java/io/helidon/webserver/Request.java
Patch:
@@ -237,7 +237,7 @@ private Content() {
 
         private Content(Content orig) {
             this.originalPublisher = orig.originalPublisher;
-            this.readers = appendDefaultReaders(orig.readers);
+            this.readers = orig.readers;
             this.filters = orig.filters;
             this.readersLock = orig.readersLock;
             this.filtersLock = orig.filtersLock;

File: common/common/src/main/templates/io/helidon/common/Version.java
Patch:
@@ -34,7 +34,7 @@ public class Version {
     /**
      * Display version
      *
-     * @param args
+     * @param args Ignored
      */
     public static void main(String[] args) {
         System.out.println(VERSION + " " + REVISION);

File: media/jsonp/server/src/test/java/io/helidon/media/jsonp/server/JsonSupportTest.java
Patch:
@@ -146,8 +146,7 @@ public void acceptHeaders() throws Exception {
                 .path("/foo")
                 .header("Accept", "application/javascript")
                 .post(MediaPublisher.create(MediaType.APPLICATION_JSON.withCharset("UTF-8"), json.toString()));
-        assertThat(response.status(), is(Http.Status.OK_200));
-        assertThat(response.headers().first(Http.Header.CONTENT_TYPE).orElse(null), is("application/javascript"));
+        assertThat(response.status(), is(Http.Status.INTERNAL_SERVER_ERROR_500));
 
         // Without start
         response = TestClient.create(routing)
@@ -156,4 +155,4 @@ public void acceptHeaders() throws Exception {
                 .post(MediaPublisher.create(MediaType.APPLICATION_JSON.withCharset("UTF-8"), json.toString()));
         assertThat(response.status(), is(Http.Status.INTERNAL_SERVER_ERROR_500));
     }
-}
\ No newline at end of file
+}

File: microprofile/server/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,6 +31,7 @@
     requires transitive java.activation;
 
     requires java.logging;
+    requires io.helidon.common.serviceloader;
 
     exports io.helidon.microprofile.server;
     exports io.helidon.microprofile.server.spi;

File: common/configurable/src/main/java/io/helidon/common/configurable/ResourceUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -90,7 +90,7 @@ static InputStream toIs(URI uri) {
         try {
             return uri.toURL().openStream();
         } catch (IOException e) {
-            throw new ResourceException("Failed to open strem to uri: " + uri, e);
+            throw new ResourceException("Failed to open stream to uri: " + uri, e);
         }
     }
 
@@ -105,7 +105,7 @@ static InputStream toIs(URI uri, Proxy proxy) {
         try {
             return uri.toURL().openConnection(proxy).getInputStream();
         } catch (IOException e) {
-            throw new ResourceException("Failed to open strem to uri: " + uri, e);
+            throw new ResourceException("Failed to open stream to uri: " + uri, e);
         }
     }
 

File: media/jackson/server/src/main/java9/module-info.java
Patch:
@@ -19,6 +19,9 @@
  */
 module io.helidon.media.jackson.server {
     requires com.fasterxml.jackson.databind;
+    requires com.fasterxml.jackson.datatype.jdk8;
+    requires com.fasterxml.jackson.datatype.jsr310;
+    requires com.fasterxml.jackson.module.paramnames;
     requires io.helidon.media.jackson.common;
     requires io.helidon.webserver;
 

File: media/jsonb/server/src/main/java/io/helidon/media/jsonb/server/JsonBindingSupport.java
Patch:
@@ -31,6 +31,8 @@
 import io.helidon.webserver.ServerResponse;
 import io.helidon.webserver.Service;
 
+import static io.helidon.media.common.ContentTypeCharset.determineCharset;
+
 /**
  * A {@link Service} and a {@link Handler} that provides <a
  * href="http://json-b.net/">JSON-B</a> support to Helidon.
@@ -58,7 +60,7 @@ public void accept(final ServerRequest request, final ServerResponse response) {
             .registerReader(cls -> true,
                             JsonBinding.reader(jsonb));
         response.registerWriter(payload -> wantsJson(request, response),
-                                JsonBinding.writer(jsonb));
+                                JsonBinding.writer(jsonb, determineCharset(response.headers())));
         request.next();
     }
 

File: microprofile/jwt-auth/jwt-auth-cdi/src/main/java/io/helidon/microprofile/jwt/auth/cdi/JwtAuthCdiExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -237,7 +237,7 @@ private void validateBaseType(ClaimLiteral claimLiteral, Class<?> clazz) {
         try {
             Claims claims = Claims.valueOf(claimLiteral.name);
             //check if field type and claim type are compatible
-            if ((clazz.equals(Long.class) || JsonNumber.class.isAssignableFrom(clazz))
+            if ((clazz.equals(Long.class) || clazz.equals(long.class) || JsonNumber.class.isAssignableFrom(clazz))
                     && (Long.class.equals(claims.getType()) || JsonNumber.class.isAssignableFrom(claims.getType()))) {
                 return;
             }
@@ -247,7 +247,7 @@ private void validateBaseType(ClaimLiteral claimLiteral, Class<?> clazz) {
                 return;
             }
 
-            if ((clazz.equals(Boolean.class) || JsonValue.class.isAssignableFrom(clazz))
+            if ((clazz.equals(Boolean.class) || clazz.equals(boolean.class) || JsonValue.class.isAssignableFrom(clazz))
                     && (Boolean.class.equals(claims.getType()) || JsonValue.class.isAssignableFrom(claims.getType()))) {
                 return;
             }

File: tracing/jaeger/src/main/java/io/helidon/tracing/jaeger/JaegerTracerBuilder.java
Patch:
@@ -59,7 +59,7 @@
  *     </tr>
  *     <tr>
  *         <td>{@code protocol}</td>
- *         <td>{@code udp}</td>
+ *         <td>{@code http}</td>
  *         <td>The protocol to use. By default http is used. To switch to agent
  *          mode, use {@code udp}</td>
  *     </tr>

File: security/providers/common/src/main/java/io/helidon/security/providers/common/EvictableCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -238,7 +238,7 @@ public Builder<K, V> parallelismThreshold(long parallelismThreshold) {
         }
 
         /**
-         * Configure evictor to check if a records is still valid.
+         * Configure evictor to check if a record is still valid.
          * This should be a fast way to check, as it is happening in a {@link ConcurrentHashMap#forEachKey(long, Consumer)}.
          * This is also called during all get and remove operations to only return valid records.
          *

File: security/providers/common/src/main/java/io/helidon/security/providers/common/EvictableCacheImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: security/providers/idcs-mapper/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
     requires transitive io.helidon.security.providers.common;
     requires transitive io.helidon.security.jwt;
     requires transitive io.helidon.security.providers.oidc.common;
+    requires io.helidon.security.util;
     requires java.logging;
 
     exports io.helidon.security.providers.idcs.mapper;

File: metrics/metrics/src/main/java/io/helidon/metrics/BaseRegistry.java
Patch:
@@ -50,7 +50,7 @@
  * {@code helidon.metrics.base.${metric_name}.enabled=false}
  */
 final class BaseRegistry extends Registry {
-    private static final String CONFIG_METRIC_ENABLED_BASE = "helidon.metrics.base.";
+    private static final String CONFIG_METRIC_ENABLED_BASE = "base.";
     private static final Metadata MEMORY_USED_HEAP = new Metadata("memory.usedHeap",
                                                                   "Used Heap Memory",
                                                                   "Displays the amount of used heap memory in bytes.",

File: metrics/metrics/src/test/java/io/helidon/metrics/RegistryFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -55,7 +55,7 @@ static void createInstance() {
         unconfigured = RegistryFactory.create();
         Config config = Config.builder()
                 .sources(ConfigSources.create(CollectionsHelper.mapOf(
-                        "helidon.metrics.base." + METRIC_USED_HEAP + ".enabled",
+                        "base." + METRIC_USED_HEAP + ".enabled",
                         "false")))
                 .build();
         configured = RegistryFactory.create(config);

File: webserver/webserver/src/main/java/io/helidon/webserver/SocketConfiguration.java
Patch:
@@ -112,7 +112,7 @@ final class Builder implements io.helidon.common.Builder<SocketConfiguration> {
         private int port = 0;
         private InetAddress bindAddress = null;
         private SSLContext sslContext = null;
-        private Set<String> enabledSslProtocols = new HashSet<>();
+        private final Set<String> enabledSslProtocols = new HashSet<>();
         private int backlog = 0;
         private int timeoutMillis = 0;
         private int receiveBufferSize = 0;

File: webserver/webserver/src/main/java/io/helidon/webserver/ServerConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -462,6 +462,7 @@ private SocketConfiguration.Builder configureSocket(Config config, SocketConfigu
             config.get("backlog").asInt().ifPresent(soConfigBuilder::backlog);
             config.get("timeout").asInt().ifPresent(soConfigBuilder::timeoutMillis);
             config.get("receive-buffer").asInt().ifPresent(soConfigBuilder::receiveBufferSize);
+            config.get("ssl-protocols").asList(String.class).ifPresent(soConfigBuilder::enabledSSlProtocols);
 
             // ssl
             Config sslConfig = config.get("ssl");

File: webserver/webserver/src/main/java/io/helidon/webserver/SendHeadersFirstPublisher.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Objects;
 
 import io.helidon.common.reactive.Flow;
+
 import io.opentracing.Span;
 
 /**

File: webserver/webserver/src/main/java/io/helidon/webserver/SendHeadersFirstPublisher.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Objects;
 
 import io.helidon.common.reactive.Flow;
+
 import io.opentracing.Span;
 
 /**

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CommandInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@
  */
 @Interceptor
 @CommandBinding
-@Priority(Interceptor.Priority.LIBRARY_AFTER)
+@Priority(Interceptor.Priority.PLATFORM_AFTER + 10)
 public class CommandInterceptor {
 
     private static final Logger LOGGER = Logger.getLogger(CommandInterceptor.class.getName());

File: webserver/webserver/src/main/java/io/helidon/webserver/SendHeadersFirstPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/config/config/src/main/java/io/helidon/microprofile/config/MpConfig.java
Patch:
@@ -268,7 +268,7 @@ public Iterable<ConfigSource> getConfigSources() {
      */
     @SuppressWarnings("unchecked")
     public <T> T convert(Class<T> type, String value) {
-        if (value == null) {
+        if (null == value) {
             return null;
         }
 

File: microprofile/config/config/src/test/java/io/helidon/microprofile/config/MpConfigTest.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * Unit test for {@link MpConfig}.
  */
-public class MpConfigTest {
+class MpConfigTest {
     private static MpConfig mpConfig;
 
     @BeforeAll

File: common/common/src/main/java/io/helidon/common/CollectionsHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ public static <T> List<T> listOf(){
      *
      */
     @SafeVarargs
-    public static <T> List<T> listOf(T ... elts){
+    public static <T> List<T> listOf(T... elts){
         List<T> list = new ArrayList<>();
         list.addAll(Arrays.asList(elts));
         return Collections.unmodifiableList(list);
@@ -76,7 +76,7 @@ public static <T> Set<T> setOf(){
      * @return a {@code Set} containing the specified elements
      */
     @SafeVarargs
-    public static <T> Set<T> setOf(T ... elts){
+    public static <T> Set<T> setOf(T... elts){
         Set<T> set = new HashSet<>();
         set.addAll(Arrays.asList(elts));
         return Collections.unmodifiableSet(set);

File: config/config/src/main/java/io/helidon/config/PollingStrategies.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -173,7 +173,7 @@ public FilesystemWatchBuilder executor(ScheduledExecutorService executor) {
          * @param modifiers the modifiers to add
          * @return a modified builder instance
          */
-        public FilesystemWatchBuilder modifiers(Modifier ... modifiers){
+        public FilesystemWatchBuilder modifiers(Modifier... modifiers){
             this.modifiers = modifiers;
             return this;
         }

File: examples/config/basics/src/main/java/io/helidon/config/examples/basics/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,6 +20,7 @@
 import java.util.List;
 
 import io.helidon.config.Config;
+
 import static io.helidon.config.ConfigSources.classpath;
 
 /**

File: examples/config/changes/src/main/java/io/helidon/config/examples/changes/ChangesSubscriberExample.java
Patch:
@@ -21,10 +21,10 @@
 import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.PollingStrategies;
+
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.file;
 import static io.helidon.config.PollingStrategies.regular;
-
 import static java.time.Duration.ofSeconds;
 
 /**

File: examples/config/sources/src/main/java/io/helidon/config/examples/sources/DirectorySourceExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,6 +17,7 @@
 package io.helidon.config.examples.sources;
 
 import io.helidon.config.Config;
+
 import static io.helidon.config.ConfigSources.directory;
 
 /**

File: examples/webserver/demo-translator-backend/src/main/java/io/helidon/webserver/examples/translator/backend/Application.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,7 @@
 import org.glassfish.jersey.server.ResourceConfig;
 
 /**
- * @author Pavel Bucek (pavel.bucek at oracle.com)
+ * Translator backend JAX-RS Application.
  */
 public class Application extends ResourceConfig {
 

File: examples/webserver/demo-translator-backend/src/main/java/io/helidon/webserver/examples/translator/backend/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,8 +33,6 @@
 
 /**
  * Demo Backend Example Application main class.
- *
- * @author Pavel Bucek (pavel.bucek at oracle.com)
  */
 public class Main {
 

File: examples/webserver/demo-translator-backend/src/main/java/io/helidon/webserver/examples/translator/backend/StaticFrontPageResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 import javax.ws.rs.core.MediaType;
 
 /**
- * @author Pavel Bucek (pavel.bucek at oracle.com)
+ * Static resources JAX-RS Resource.
  */
 @Path("/")
 public class StaticFrontPageResource {

File: examples/webserver/demo-translator-frontend/src/main/java/io/helidon/webserver/examples/translator/frontend/Application.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 import org.glassfish.jersey.server.ResourceConfig;
 
 /**
- * @author Pavel Bucek (pavel.bucek at oracle.com)
+ * Translator frontend JAX-RS Application.
  */
 public class Application extends ResourceConfig {
 

File: examples/webserver/demo-translator-frontend/src/main/java/io/helidon/webserver/examples/translator/frontend/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,8 +33,6 @@
 
 /**
  * Demo Frontend Example Application main class.
- *
- * @author Pavel Bucek (pavel.bucek at oracle.com)
  */
 public class Main {
 

File: examples/webserver/demo-translator-frontend/src/main/java/io/helidon/webserver/examples/translator/frontend/StaticFrontPageResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
 import javax.ws.rs.core.MediaType;
 
 /**
- * @author Pavel Bucek (pavel.bucek at oracle.com)
+ * Static resources JAX-RS Resource.
  */
 @Path("/")
 public class StaticFrontPageResource {

File: integrations/cdi/datasource-hikaricp/src/main/java/io/helidon/integrations/datasource/hikaricp/cdi/config/HikariCP.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,6 @@
  * A {@link ServiceConfigurationConfigSource} that sits atop the
  * {@code hikaricp} {@link ServiceConfiguration} in effect (if there
  * is one).
- *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
  */
 public final class HikariCP extends ServiceConfigurationConfigSource {
 

File: integrations/cdi/oci-objectstorage-cdi/src/main/java/io/helidon/integrations/cdi/oci/objectstorage/OCIObjectStorageExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,8 +44,6 @@
  * An {@link Extension} that integrates the {@link ObjectStorage}
  * interface into CDI-based applications.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see com.oracle.bmc.objectstorage.ObjectStorage
  */
 public class OCIObjectStorageExtension implements Extension {

File: integrations/cdi/oci-objectstorage-cdi/src/main/java/io/helidon/integrations/cdi/oci/objectstorage/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,5 @@
 /**
  * Provides classes and interfaces that integrate the OCI object
  * storage service into CDI 2.0-based applications.
- *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
  */
 package io.helidon.integrations.cdi.oci.objectstorage;

File: integrations/serviceconfiguration/serviceconfiguration-api/src/main/java/io/helidon/service/configuration/api/ServiceConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,8 +37,6 @@
  * ServiceConfiguration} by any other means may result in undefined
  * behavior.</p>
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #getInstance(String)
  *
  * @see ServiceConfigurationProvider

File: integrations/serviceconfiguration/serviceconfiguration-api/src/main/java/io/helidon/service/configuration/api/ServiceConfigurationProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,8 +23,6 @@
 /**
  * An abstract factory of {@link ServiceConfiguration} instances.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #buildFor(Set, Properties)
  *
  * @see ServiceConfiguration

File: integrations/serviceconfiguration/serviceconfiguration-api/src/main/java/io/helidon/service/configuration/api/System.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -47,8 +47,6 @@
  * #getProperties() properties} and {@linkplain #getenv() environment
  * values} are to be preferred over all others.</p>
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #getSystems()
  *
  * @see #getenv()

File: integrations/serviceconfiguration/serviceconfiguration-api/src/main/java/io/helidon/service/configuration/api/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,6 @@
  * Provides classes and interfaces for automatically discovering
  * service configuration information.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see io.helidon.service.configuration.api.ServiceConfiguration
  *
  * @see io.helidon.service.configuration.api.ServiceConfigurationProvider

File: integrations/serviceconfiguration/serviceconfiguration-api/src/main/java/io/helidon/service/configuration/localhost/LocalhostSystem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,8 +21,6 @@
  * A {@linkplain System#isAuthoritative() non-authoritative} {@link
  * System} implementation describing the current local host.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see System
  */
 public final class LocalhostSystem extends System {

File: integrations/serviceconfiguration/serviceconfiguration-api/src/main/java/io/helidon/service/configuration/localhost/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,6 @@
  * io.helidon.service.configuration.localhost.LocalhostSystem} {@link
  * io.helidon.service.configuration.api.System System} implementation.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see io.helidon.service.configuration.localhost.LocalhostSystem
  *
  * @see io.helidon.service.configuration.api.System

File: integrations/serviceconfiguration/serviceconfiguration-config-source/src/main/java/io/helidon/service/configuration/microprofile/config/ServiceConfigurationConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,8 +30,6 @@
  * ServiceConfiguration#getInstance(String)
  * <code>ServiceConfiguration</code> in effect}.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #getValue(String)
  *
  * @see #getProperties()

File: integrations/serviceconfiguration/serviceconfiguration-config-source/src/main/java/io/helidon/service/configuration/microprofile/config/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,8 +20,6 @@
  * {@link io.helidon.service.configuration.api.ServiceConfiguration}
  * constructs.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see
  * io.helidon.service.configuration.microprofile.config.ServiceConfigurationConfigSource
  */

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp-accs/src/main/java/io/helidon/service/configuration/hikaricp/accs/HikariCPServiceConfigurationACCSProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,8 +32,6 @@
  * href="https://docs.oracle.com/en/cloud/paas/app-container-cloud/index.html">Oracle
  * Application Container Cloud Service</a> {@linkplain System system}.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see HikariCPServiceConfiguration
  *
  * @see HikariCPServiceConfigurationProvider

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp-accs/src/main/java/io/helidon/service/configuration/hikaricp/accs/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,6 @@
  * href="https://docs.oracle.com/en/cloud/paas/app-container-cloud/csjse/exploring-application-deployments-page.html#GUID-843F7013-B6FA-45E0-A9D3-29A0EFD53E11">Oracle
  * Application Cloud Container Service</a> system.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see
  * io.helidon.service.configuration.hikaricp.accs.HikariCPServiceConfigurationACCSProvider
  */

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp-localhost/src/main/java/io/helidon/service/configuration/hikaricp/localhost/HikariCPServiceConfigurationLocalhost.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,8 +25,6 @@
  * A {@link HikariCPServiceConfiguration} that can dynamically add
  * data source properties when they are requested.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #getProperty(String, String)
  *
  * @see HikariCPServiceConfigurationLocalhostProvider

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp-localhost/src/main/java/io/helidon/service/configuration/hikaricp/localhost/HikariCPServiceConfigurationLocalhostProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,8 +30,6 @@
  * href="http://www.h2database.com/html/features.html#in_memory_databases">in-memory
  * H2 databases</a> as needed.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #installDataSourceProperties(Properties, System, Properties, String)
  *
  * @see HikariCPServiceConfigurationLocalhost

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp-localhost/src/main/java/io/helidon/service/configuration/hikaricp/localhost/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,8 +21,6 @@
  * connection pool</a> componentry suitable for local testing
  * environments.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see io.helidon.service.configuration.hikaricp.localhost.HikariCPServiceConfigurationLocalhost
  *
  * @see io.helidon.service.configuration.hikaricp.localhost.HikariCPServiceConfigurationLocalhostProvider

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp/src/main/java/io/helidon/service/configuration/hikaricp/HikariCPServiceConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,8 +28,6 @@
  * href="https://github.com/brettwooldridge/HikariCP">Hikari
  * connection pool</a> componentry.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #HikariCPServiceConfiguration(Properties, System, Properties)
  *
  * @see HikariCPServiceConfigurationProvider

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp/src/main/java/io/helidon/service/configuration/hikaricp/HikariCPServiceConfigurationProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,8 +40,6 @@
  * An abstract {@link ServiceConfigurationProvider} implementation
  * that provides {@link HikariCPServiceConfiguration} instances.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #buildFor(Set, Properties)
  *
  * @see HikariCPServiceConfiguration

File: integrations/serviceconfiguration/serviceconfiguration-hikaricp/src/main/java/io/helidon/service/configuration/hikaricp/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,8 +20,6 @@
  * href="https://github.com/brettwooldridge/HikariCP">Hikari
  * connection pool</a> componentry.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see io.helidon.service.configuration.hikaricp.HikariCPServiceConfiguration
  */
 package io.helidon.service.configuration.hikaricp;

File: integrations/serviceconfiguration/serviceconfiguration-system-kubernetes/src/main/java/io/helidon/service/configuration/kubernetes/KubernetesSystem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,8 +28,6 @@
  * when running on any of several possible <a
  * href="https://kubernetes.io/">Kubernetes</a> systems.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #isEnabled()
  *
  * @see <a href="https://kubernetes.io/">Kubernetes</a>

File: integrations/serviceconfiguration/serviceconfiguration-system-kubernetes/src/main/java/io/helidon/service/configuration/kubernetes/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,8 +18,6 @@
  * Provides classes and interfaces related to service configuration on
  * a <a href="https://kubernetes.io/">Kubernetes</a> system.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see io.helidon.service.configuration.kubernetes.KubernetesSystem
  */
 package io.helidon.service.configuration.kubernetes;

File: integrations/serviceconfiguration/serviceconfiguration-system-oracle-accs/src/main/java/io/helidon/service/configuration/accs/ACCSSystem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,8 +29,6 @@
  * Map#containsKey(Object) contains the <code>String</code> key}
  * {@code ORA_APP_NAME}.</p>
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see #isEnabled()
  *
  * @see System

File: integrations/serviceconfiguration/serviceconfiguration-system-oracle-accs/src/main/java/io/helidon/service/configuration/accs/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,8 +19,6 @@
  * io.helidon.service.configuration.accs.ACCSSystem} {@link
  * io.helidon.service.configuration.api.System System} implementation.
  *
- * @author <a href="mailto:laird.nelson@oracle.com">Laird Nelson</a>
- *
  * @see io.helidon.service.configuration.accs.ACCSSystem
  *
  * @see io.helidon.service.configuration.api.System

File: microprofile/config/config/src/test/java/io/helidon/microprofile/config/MpConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/HelloWorldTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,8 +30,6 @@
 
 /**
  * Class HelloWorldTest.
- *
- * @author Santiago Pericas-Geertsen
  */
 public class HelloWorldTest extends MetricsMpServiceTest {
 

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/MetricsMpServiceTest.java
Patch:
@@ -34,8 +34,6 @@
 
 /**
  * Class MetricsMpServiceTest.
- *
- * @author Santiago Pericas-Geertsen
  */
 public class MetricsMpServiceTest {
     protected static Server server;

File: webserver/jersey/src/main/java/io/helidon/webserver/jersey/ResponseWriter.java
Patch:
@@ -109,7 +109,7 @@ public OutputStream writeResponseStatusAndHeaders(long contentLength, ContainerR
         //
         // TODO also check that nothing was written an nothing was read
         //
-        if (context.getStatus() == 404) {
+        if (context.getStatus() == 404 && contentLength == 0) {
             whenHandleFinishes.thenRun(() -> {
                 LOGGER.finer("Skipping the handling and forwarding to downstream WebServer filters.");
 

File: webserver/webserver/src/main/java/io/helidon/webserver/NettyWebServer.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import io.helidon.common.Version;
 import io.helidon.common.http.ContextualRegistry;
 
 import io.netty.bootstrap.ServerBootstrap;
@@ -85,6 +86,7 @@ class NettyWebServer implements WebServer {
                    Map<String, Routing> namedRoutings) {
         Set<Map.Entry<String, SocketConfiguration>> sockets = config.sockets().entrySet();
 
+        LOGGER.info(() -> "Version: " + Version.VERSION);
         this.bossGroup = new NioEventLoopGroup(sockets.size());
         this.workerGroup = config.workersCount() <= 0 ? new NioEventLoopGroup() : new NioEventLoopGroup(config.workersCount());
 

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceCommand.java
Patch:
@@ -97,6 +97,7 @@ public class FaultToleranceCommand extends HystrixCommand<Object> {
      * @param commandKey The command key.
      * @param introspector The method introspector.
      * @param context CDI invocation context.
+     * @param contextClassLoader Context class loader or {@code null} if not available.
      */
     public FaultToleranceCommand(String commandKey, MethodIntrospector introspector,
                                  InvocationContext context, ClassLoader contextClassLoader) {

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/CircuitBreakerBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/CircuitBreakerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,6 @@
 
 package io.helidon.microprofile.faulttolerance;
 
-import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;

File: microprofile/config/config-cdi/src/main/java/io/helidon/microprofile/config/cdi/ConfigCdiExtension.java
Patch:
@@ -379,7 +379,7 @@ static Object getConfigValue(MpConfig config, ConfigQualifier q) {
                                                   q.rawType(),
                                                   q.typeArg(),
                                                   q.typeArg2());
-            } catch(IllegalArgumentException e) {
+            } catch (IllegalArgumentException e) {
                 if (e.getCause() instanceof ConfigException) {
                     throw new DeploymentException("Config value for " + q.key() + "(" + q.fullPath() + ") is not defined");
                 } else {

File: config/config/src/test/java/io/helidon/config/EnvironmentVariablesTest.java
Patch:
@@ -109,11 +109,9 @@ public void testShouldMap() {
     @Test
     public void testCurrentEnvMappings() {
         Map<String, String> env = env();
-        int expectedSize = expectedMappedSize(env);
 
         Map<String, String> mapped = EnvironmentVariables.expand(env);
         assertThat(mapped, is(not(nullValue())));
-        assertThat(mapped.size(), is(expectedSize));
 
         env.forEach((k, v) -> {
             if (shouldMap(k)) {

File: config/config/src/test/java/io/helidon/config/EnvironmentVariablesTest.java
Patch:
@@ -109,11 +109,9 @@ public void testShouldMap() {
     @Test
     public void testCurrentEnvMappings() {
         Map<String, String> env = env();
-        int expectedSize = expectedMappedSize(env);
 
         Map<String, String> mapped = EnvironmentVariables.expand(env);
         assertThat(mapped, is(not(nullValue())));
-        assertThat(mapped.size(), is(expectedSize));
 
         env.forEach((k, v) -> {
             if (shouldMap(k)) {

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SubscriberInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -89,6 +89,7 @@ public void onComplete() {
     }
 
     private boolean isClosed() {
+        // avoid race between read() and onComplete()
         synchronized (closed) {
             return closed.get();
         }

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/SubscriberInputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/ObjectConfigMapperProvider.java
Patch:
@@ -96,7 +96,7 @@ public <T> Optional<Function<Config, T>> mapper(Class<T> type) {
                 // constructor(param, params...)
                 .or(() -> findConstructorWithParamsMapper(type))
                 // generic mapping support
-                .or(() -> findGenericMapper(type))
+                .or(() -> findGenericMapper(type))  // TODO: Remove this?? Supports default ctor, so config value is ignored.
                 // we could not find anything, let config decide what to do
                 .asOptional();
     }

File: config/config/src/main/java/io/helidon/config/EnvironmentVariableAliases.java
Patch:
@@ -55,14 +55,14 @@ public class EnvironmentVariableAliases {
     /**
      * Returns a list of aliases for the given config key.
      * <p>
-     * If the key does <em>not</em> contain any {@code '-'} (dash) characters, all disallowed characters are
+     * If the key does not contain any {@code '-'} (dash) characters, all disallowed characters are
      * replaced by {@code '_'} (underscore) and this plus the uppercase variant are returned. For example,
      * {@code "app.qualifiedName"} and {@code "app/qualifiedName"} both result in the same two aliases:
      * <ol>
      * <li>"app_qualifiedName"</li>
      * <li>"APP_QUALIFIEDNAME"</li>
      * </ol>
-     * If the key <em>does</em> contain any {@code '-'} (dash) characters, they are replaced by {@code "_dash_"} and by the
+     * If the key does contain any {@code '-'} (dash) characters, they are replaced by {@code "_dash_"} and by the
      * uppercase variant so that, e.g., {@code "app.page-size"} results in three aliases:
      * <ol>
      * <li>"app_page_dash_size"</li>

File: config/config/src/main/java/io/helidon/config/BuilderImpl.java
Patch:
@@ -294,9 +294,9 @@ private ProviderImpl buildProvider() {
             addAutoLoadedFilters();
         }
 
-        Function<String, List<String>> aliasGenerator = envVarAliasGeneratorEnabled ?
-                                                        EnvironmentVariableAliases::aliasesOf :
-                                                        null;
+        Function<String, List<String>> aliasGenerator = envVarAliasGeneratorEnabled
+                                                        ? EnvironmentVariableAliases::aliasesOf
+                                                        : null;
 
         //config provider
         return createProvider(configMapperManager,

File: config/config/src/main/java/io/helidon/config/EnvironmentVariableAliases.java
Patch:
@@ -62,7 +62,6 @@ public class EnvironmentVariableAliases {
      * <li>"app_qualifiedName"</li>
      * <li>"APP_QUALIFIEDNAME"</li>
      * </ol>
-     * <ol>
      * If the key <em>does</em> contain any {@code '-'} (dash) characters, they are replaced by {@code "_dash_"} and by the
      * uppercase variant so that, e.g., {@code "app.page-size"} results in three aliases:
      * <ol>

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SubscriberInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -89,6 +89,7 @@ public void onComplete() {
     }
 
     private boolean isClosed() {
+        // avoid race between read() and onComplete()
         synchronized (closed) {
             return closed.get();
         }

File: security/integration/jersey/src/test/java/io/helidon/security/integration/jersey/SubscriberInputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/ObjectConfigMapperProvider.java
Patch:
@@ -96,7 +96,7 @@ public <T> Optional<Function<Config, T>> mapper(Class<T> type) {
                 // constructor(param, params...)
                 .or(() -> findConstructorWithParamsMapper(type))
                 // generic mapping support
-                .or(() -> findGenericMapper(type))
+                .or(() -> findGenericMapper(type))  // TODO: Remove this?? Supports default ctor, so config value is ignored.
                 // we could not find anything, let config decide what to do
                 .asOptional();
     }

File: config/config/src/main/java/io/helidon/config/EnvironmentVariableAliases.java
Patch:
@@ -55,14 +55,14 @@ public class EnvironmentVariableAliases {
     /**
      * Returns a list of aliases for the given config key.
      * <p>
-     * If the key does <em>not</em> contain any {@code '-'} (dash) characters, all disallowed characters are
+     * If the key does not contain any {@code '-'} (dash) characters, all disallowed characters are
      * replaced by {@code '_'} (underscore) and this plus the uppercase variant are returned. For example,
      * {@code "app.qualifiedName"} and {@code "app/qualifiedName"} both result in the same two aliases:
      * <ol>
      * <li>"app_qualifiedName"</li>
      * <li>"APP_QUALIFIEDNAME"</li>
      * </ol>
-     * If the key <em>does</em> contain any {@code '-'} (dash) characters, they are replaced by {@code "_dash_"} and by the
+     * If the key does contain any {@code '-'} (dash) characters, they are replaced by {@code "_dash_"} and by the
      * uppercase variant so that, e.g., {@code "app.page-size"} results in three aliases:
      * <ol>
      * <li>"app_page_dash_size"</li>

File: config/config/src/main/java/io/helidon/config/BuilderImpl.java
Patch:
@@ -294,9 +294,9 @@ private ProviderImpl buildProvider() {
             addAutoLoadedFilters();
         }
 
-        Function<String, List<String>> aliasGenerator = envVarAliasGeneratorEnabled ?
-                                                        EnvironmentVariableAliases::aliasesOf :
-                                                        null;
+        Function<String, List<String>> aliasGenerator = envVarAliasGeneratorEnabled
+                                                        ? EnvironmentVariableAliases::aliasesOf
+                                                        : null;
 
         //config provider
         return createProvider(configMapperManager,

File: config/config/src/main/java/io/helidon/config/EnvironmentVariableAliases.java
Patch:
@@ -62,7 +62,6 @@ public class EnvironmentVariableAliases {
      * <li>"app_qualifiedName"</li>
      * <li>"APP_QUALIFIEDNAME"</li>
      * </ol>
-     * <ol>
      * If the key <em>does</em> contain any {@code '-'} (dash) characters, they are replaced by {@code "_dash_"} and by the
      * uppercase variant so that, e.g., {@code "app.page-size"} results in three aliases:
      * <ol>

File: common/common/src/main/java/io/helidon/common/CollectionsHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ public static <T> List<T> listOf(){
      *
      */
     @SafeVarargs
-    public static <T> List<T> listOf(T ... elts){
+    public static <T> List<T> listOf(T... elts){
         List<T> list = new ArrayList<>();
         list.addAll(Arrays.asList(elts));
         return Collections.unmodifiableList(list);
@@ -76,7 +76,7 @@ public static <T> Set<T> setOf(){
      * @return a {@code Set} containing the specified elements
      */
     @SafeVarargs
-    public static <T> Set<T> setOf(T ... elts){
+    public static <T> Set<T> setOf(T... elts){
         Set<T> set = new HashSet<>();
         set.addAll(Arrays.asList(elts));
         return Collections.unmodifiableSet(set);

File: config/config/src/main/java/io/helidon/config/PollingStrategies.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -173,7 +173,7 @@ public FilesystemWatchBuilder executor(ScheduledExecutorService executor) {
          * @param modifiers the modifiers to add
          * @return a modified builder instance
          */
-        public FilesystemWatchBuilder modifiers(Modifier ... modifiers){
+        public FilesystemWatchBuilder modifiers(Modifier... modifiers){
             this.modifiers = modifiers;
             return this;
         }

File: examples/config/basics/src/main/java/io/helidon/config/examples/basics/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,6 +20,7 @@
 import java.util.List;
 
 import io.helidon.config.Config;
+
 import static io.helidon.config.ConfigSources.classpath;
 
 /**

File: examples/config/changes/src/main/java/io/helidon/config/examples/changes/ChangesSubscriberExample.java
Patch:
@@ -21,10 +21,10 @@
 import io.helidon.common.reactive.Flow;
 import io.helidon.config.Config;
 import io.helidon.config.PollingStrategies;
+
 import static io.helidon.config.ConfigSources.classpath;
 import static io.helidon.config.ConfigSources.file;
 import static io.helidon.config.PollingStrategies.regular;
-
 import static java.time.Duration.ofSeconds;
 
 /**

File: examples/config/sources/src/main/java/io/helidon/config/examples/sources/DirectorySourceExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,6 +17,7 @@
 package io.helidon.config.examples.sources;
 
 import io.helidon.config.Config;
+
 import static io.helidon.config.ConfigSources.directory;
 
 /**

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceCommand.java
Patch:
@@ -33,7 +33,6 @@
 import org.eclipse.microprofile.metrics.Histogram;
 
 import static com.netflix.hystrix.HystrixCommandProperties.ExecutionIsolationStrategy.THREAD;
-
 import static io.helidon.microprofile.faulttolerance.CircuitBreakerHelper.State;
 import static io.helidon.microprofile.faulttolerance.FaultToleranceExtension.isFaultToleranceMetricsEnabled;
 import static io.helidon.microprofile.faulttolerance.FaultToleranceMetrics.BREAKER_CALLS_FAILED_TOTAL;

File: microprofile/config/config/src/test/java/io/helidon/microprofile/config/MpConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/main/java/io/helidon/config/ConfigSources.java
Patch:
@@ -38,7 +38,6 @@
 import io.helidon.config.internal.ClasspathConfigSource;
 import io.helidon.config.internal.ConfigUtils;
 import io.helidon.config.internal.DirectoryConfigSource;
-import io.helidon.config.internal.EnvironmentVariables;
 import io.helidon.config.internal.FileConfigSource;
 import io.helidon.config.internal.MapConfigSource;
 import io.helidon.config.internal.PrefixedConfigSource;

File: microprofile/config/config/src/main/java/io/helidon/microprofile/config/MpcSourceEnvironmentVariables.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import io.helidon.config.internal.EnvironmentVariables;
+import io.helidon.config.EnvironmentVariables;
 
 import org.eclipse.microprofile.config.spi.ConfigSource;
 

File: config/config/src/main/java/io/helidon/config/BuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/jwt-auth/jwt-auth-cdi/src/test/java/io/helidon/microprofile/jwt/auth/cdi/JwtAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -136,7 +136,7 @@ void testRsa() {
     }
 
     @Test
-    void testPublicEndpoit() {
+    void testPublicEndpoint() {
         WebTarget target = client.target("http://localhost:" + server.port());
 
         // public

File: security/integration/jersey/src/main/java/io/helidon/security/integration/jersey/SecurityFilter.java
Patch:
@@ -130,10 +130,11 @@ private void loadAnalyzers() {
     public void postConstruct() {
         Class<?> appClass = getOriginalApplication().getClass();
 
-        this.appWideSecurity = securityForClass(appClass, null);
-
+        // we must initialize the analyzers before using them in appWideSecurity
         Config analyzersConfig = config("jersey.analyzers");
         analyzers.forEach(analyzer -> analyzer.init(analyzersConfig));
+
+        this.appWideSecurity = securityForClass(appClass, null);
     }
 
     @Override

File: examples/guides/se-restful-webservice/src/main/java/io/helidon/guides/se/restfulwebservice/GreetService.java
Patch:
@@ -73,7 +73,7 @@ public class GreetService implements Service {
      * Create metric registry.
      */
     // tag::metricsRegistration[]
-    private final MetricRegistry registry = RegistryFactory.getRegistryFactory().get()
+    private final MetricRegistry registry = RegistryFactory.getInstance()
             .getRegistry(MetricRegistry.Type.APPLICATION); // <1>
     // end::metricsRegistration[]
 

File: examples/todo-app/demo-frontend/src/main/java/io/helidon/demo/todos/frontend/TodosHandler.java
Patch:
@@ -82,7 +82,7 @@ public final class TodosHandler implements Service {
      * @param bsc the {@code BackendServiceClient} to use
      */
     public TodosHandler(BackendServiceClient bsc) {
-        MetricRegistry registry = RegistryFactory.getRegistryFactory().get().getRegistry(MetricRegistry.Type.APPLICATION);
+        MetricRegistry registry = RegistryFactory.getInstance().getRegistry(MetricRegistry.Type.APPLICATION);
 
         this.bsc = bsc;
         this.createCounter = registry.counter("created");

File: metrics/metrics/src/test/java/io/helidon/metrics/MetricsSupportTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ class MetricsSupportTest {
 
     @BeforeAll
     static void initClass() {
-        RegistryFactory rf = RegistryFactory.create();
+        RegistryFactory rf = RegistryFactory.getInstance();
         base = rf.getARegistry(MetricRegistry.Type.BASE);
         vendor = rf.getARegistry(MetricRegistry.Type.VENDOR);
         app = rf.getARegistry(MetricRegistry.Type.APPLICATION);

File: media/jsonp/server/src/main/java/io/helidon/media/jsonp/server/JsonSupport.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Function;
@@ -200,7 +199,7 @@ private Charset determineCharset(Parameters headers) {
                         return null; // Do not need default charset. Can use JSON specification.
                     }
                 })
-                .orElse(StandardCharsets.UTF_8);
+                .orElse(null);
     }
 
     /**

File: config/config/src/main/java/io/helidon/config/internal/UrlConfigSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -89,7 +89,7 @@ protected String uid() {
     }
 
     @Override
-    protected ConfigParser.Content content() throws ConfigException {
+    protected ConfigParser.Content<Instant> content() throws ConfigException {
         try {
             HttpURLConnection connection = (HttpURLConnection) url.openConnection();
             connection.setRequestMethod(GET_METHOD);

File: media/jsonp/server/src/main/java/io/helidon/media/jsonp/server/JsonSupport.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Function;
@@ -185,7 +186,7 @@ private boolean testOrSetContentType(ServerRequest request, ServerResponse respo
      * Returns a charset from {@code Content-Type} header parameter or {@code null} if not defined.
      *
      * @param headers parameters representing request or response headers
-     * @return a charset or {@code null}
+     * @return a charset or {@code UTF-8} as default
      * @throws RuntimeException if charset is not supported
      */
     private Charset determineCharset(Parameters headers) {
@@ -199,7 +200,7 @@ private Charset determineCharset(Parameters headers) {
                         return null; // Do not need default charset. Can use JSON specification.
                     }
                 })
-                .orElse(null);
+                .orElse(StandardCharsets.UTF_8);
     }
 
     /**

File: media/jsonp/server/src/main/java/io/helidon/media/jsonp/server/JsonSupport.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Function;
@@ -185,7 +186,7 @@ private boolean testOrSetContentType(ServerRequest request, ServerResponse respo
      * Returns a charset from {@code Content-Type} header parameter or {@code null} if not defined.
      *
      * @param headers parameters representing request or response headers
-     * @return a charset or {@code null}
+     * @return a charset or {@code UTF-8} as default
      * @throws RuntimeException if charset is not supported
      */
     private Charset determineCharset(Parameters headers) {
@@ -199,7 +200,7 @@ private Charset determineCharset(Parameters headers) {
                         return null; // Do not need default charset. Can use JSON specification.
                     }
                 })
-                .orElse(null);
+                .orElse(StandardCharsets.UTF_8);
     }
 
     /**

File: metrics/metrics/src/main/java/io/helidon/metrics/MetricImpl.java
Patch:
@@ -178,7 +178,7 @@ void prometheusHelp(StringBuilder sb, String nameWithUnits) {
         sb.append("# HELP ")
                 .append(nameWithUnits)
                 .append(" ")
-                .append(getDescription())
+                .append(getDescription() == null ? "" : getDescription())
                 .append('\n');
     }
 

File: security/providers/common/src/main/java/io/helidon/security/providers/common/spi/AnnotationAnalyzer.java
Patch:
@@ -23,8 +23,8 @@
 
 /**
  * Provides capability to extensions to enforce authentication and authorization even when
- * the resource is not annotated with {@link io.helidon.security.annotations.Authenticated} or
- * {@link io.helidon.security.annotations.Authorized}.
+ * the resource is not annotated with io.helidon.security.annotations.Authenticated or
+ * io.helidon.security.annotations.Authorized.
  * This is loaded using a {@link java.util.ServiceLoader} - integration with Security is done automatically as long as the
  * implementation is discovered as a java service.
  */

File: metrics/metrics/src/main/java/io/helidon/metrics/HelidonHistogram.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 import java.util.Optional;
 import java.util.concurrent.atomic.LongAdder;
 
-import javax.json.Json;
 import javax.json.JsonObjectBuilder;
 
 import org.eclipse.microprofile.metrics.Histogram;
@@ -155,7 +154,7 @@ HistogramImpl getDelegate() {
 
     @Override
     public void jsonData(JsonObjectBuilder builder) {
-        JsonObjectBuilder myBuilder = Json.createObjectBuilder();
+        JsonObjectBuilder myBuilder = JSON.createObjectBuilder();
 
         myBuilder.add("count", getCount());
         Snapshot snapshot = getSnapshot();

File: metrics/metrics/src/main/java/io/helidon/metrics/HelidonMeter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.LongAdder;
 
-import javax.json.Json;
 import javax.json.JsonObjectBuilder;
 
 import org.eclipse.microprofile.metrics.Metadata;
@@ -133,7 +132,7 @@ protected void prometheusData(StringBuilder sb, String name, String tags) {
     */
     @Override
     public void jsonData(JsonObjectBuilder builder) {
-        JsonObjectBuilder myBuilder = Json.createObjectBuilder();
+        JsonObjectBuilder myBuilder = JSON.createObjectBuilder();
 
         myBuilder.add("count", getCount());
         myBuilder.add("meanRate", getMeanRate());

File: metrics/metrics/src/main/java/io/helidon/metrics/HelidonTimer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import javax.json.Json;
 import javax.json.JsonObjectBuilder;
 
 import org.eclipse.microprofile.metrics.Histogram;
@@ -199,7 +198,7 @@ protected void prometheusData(StringBuilder sb, String name, String tags) {
 
     @Override
     public void jsonData(JsonObjectBuilder builder) {
-        JsonObjectBuilder myBuilder = Json.createObjectBuilder();
+        JsonObjectBuilder myBuilder = JSON.createObjectBuilder();
 
         myBuilder.add("count", getCount());
         myBuilder.add("meanRate", getMeanRate());

File: examples/config/overrides/src/main/java/io/helidon/config/examples/overrides/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@
  * <p>
  * Shows the Overrides feature where values from config sources might be overridden by override source.
  * <p>
- * In this example, {@code application.yaml} is mean to be default application configuration distributed with an app, containing
+ * In this example, {@code application.yaml} is meant to be default application configuration distributed with an app, containing
  * a wildcard configuration nodes representing the defaults for every environment and pod as well as a default definition of
  * these values. The source {@code conf/priority-config.yaml} is a higher priority configuration source which can be in a real
  * app dynamically changed (i.e. {@code Kubernetes ConfigMap} mapped as the file) and contains the current {@code env} and {@code

File: common/http/src/main/java/io/helidon/common/http/ReadOnlyParameters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -85,7 +85,8 @@ static Map<String, List<String>> copyMultimapAsImutable(Map<String, List<String>
 
     @Override
     public Optional<String> first(String name) {
-        return Optional.ofNullable(data.get(name)).map(l -> l.get(0));
+        return Optional.ofNullable(data.get(name)).map(l ->
+                !l.isEmpty() ? l.get(0) : null);
     }
 
     @Override

File: examples/webserver/basics/src/main/java/io/helidon/webserver/examples/basics/Main.java
Patch:
@@ -168,7 +168,7 @@ public void parametersAndHeaders() {
      */
     public void advancedRouting() {
         Routing routing = Routing.builder()
-                                 .get("/foo", RequestPredicate.whenRequest()
+                                 .get("/foo", RequestPredicate.create()
                                                               .accepts(MediaType.TEXT_PLAIN)
                                                               .containsHeader("bar")
                                                               .thenApply((req, res) -> res.send()))

File: config/config/src/test/java/io/helidon/config/ConfigComplexImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@
 /**
  * Methods common to {@link ConfigObjectImplTest} and {@link ConfigListImplTest}.
  */
-public abstract class ConfigComplexImplTest extends AbstractConfigImplTest {
+public abstract class ConfigComplexImplTest extends AbstractConfigImplTestBase {
     @Override
     @MethodSource("initParams")
     @ParameterizedTest

File: config/config/src/test/java/io/helidon/config/ConfigLeafImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -41,7 +41,7 @@
 /**
  * Tests {@link Config} API in case the node is {@link Config.Type#VALUE} type, i.e. {@link ConfigLeafImpl}.
  */
-public class ConfigLeafImplTest extends AbstractConfigImplTest {
+public class ConfigLeafImplTest extends AbstractConfigImplTestBase {
 
     public static Stream<TestContext> initParams() {
         return Stream.of(

File: config/config/src/test/java/io/helidon/config/ConfigMissingImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@
 /**
  * Tests {@link Config} API in case the node is {@link Config.Type#MISSING} type, i.e. {@link ConfigMissingImpl}.
  */
-public class ConfigMissingImplTest extends AbstractConfigImplTest {
+public class ConfigMissingImplTest extends AbstractConfigImplTestBase {
 
     public static Stream<TestContext> initParams() {
         return Stream.of(

File: webserver/webserver/src/main/java/io/helidon/webserver/RequestRouting.java
Patch:
@@ -91,7 +91,7 @@ public void route(BareRequest bareRequest, BareResponse bareResponse) {
                         return null;
                     });
             // Process path
-            String p = bareRequest.uri().normalize().getPath();
+            String p = bareRequest.uri().normalize().getRawPath();
             if (p.charAt(p.length() - 1) == '/') {
                 p = p.substring(0, p.length() - 1);
             }

File: bundles/jersey/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,5 @@
  */
 module io.helidon.bundles.jersey {
     requires transitive io.helidon.webserver;
-    requires transitive io.helidon.webserver.netty;
     requires transitive io.helidon.webserver.jersey;
 }

File: bundles/webserver/src/main/java9/module-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,5 @@
  */
 module io.helidon.bundles.webserver {
     requires transitive io.helidon.webserver;
-    requires transitive io.helidon.webserver.netty;
     requires transitive io.helidon.webserver.json;
 }

File: examples/security/outbound-override/src/main/java/io/helidon/security/examples/outbound/OutboundOverrideExample.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: webserver/test-support/src/main/java/io/helidon/webserver/testsupport/TestClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,10 +36,10 @@
 import io.helidon.common.http.ReadOnlyParameters;
 import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.ReactiveStreamsAdapter;
+import io.helidon.webserver.BareRequest;
+import io.helidon.webserver.BareResponse;
 import io.helidon.webserver.Handler;
 import io.helidon.webserver.Routing;
-import io.helidon.webserver.spi.BareRequest;
-import io.helidon.webserver.spi.BareResponse;
 
 import reactor.core.publisher.Flux;
 

File: webserver/webserver/src/main/java/io/helidon/webserver/ByteBufRequestChunk.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import java.nio.ByteBuffer;
 import java.util.Objects;

File: webserver/webserver/src/main/java/io/helidon/webserver/HashResponseHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,7 +44,6 @@
 import io.helidon.common.http.Parameters;
 import io.helidon.common.http.SetCookie;
 import io.helidon.common.http.Utils;
-import io.helidon.webserver.spi.BareResponse;
 
 /**
  * A {@link ResponseHeaders} implementation on top of {@link HashParameters}.

File: webserver/webserver/src/main/java/io/helidon/webserver/HelidonConnectionHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;

File: webserver/webserver/src/main/java/io/helidon/webserver/HttpRequestScopedPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.logging.Logger;

File: webserver/webserver/src/main/java/io/helidon/webserver/OriginThreadPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.BlockingQueue;

File: webserver/webserver/src/main/java/io/helidon/webserver/ReferenceHoldingQueue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import java.lang.ref.PhantomReference;
 import java.lang.ref.Reference;

File: webserver/webserver/src/main/java/io/helidon/webserver/Request.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,7 +42,6 @@
 import io.helidon.common.http.Parameters;
 import io.helidon.common.http.Reader;
 import io.helidon.common.reactive.Flow;
-import io.helidon.webserver.spi.BareRequest;
 
 import io.opentracing.Span;
 import io.opentracing.Tracer;

File: webserver/webserver/src/main/java/io/helidon/webserver/RequestContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import io.netty.handler.codec.http.HttpRequest;
 

File: webserver/webserver/src/main/java/io/helidon/webserver/RequestRouting.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,8 +30,6 @@
 import io.helidon.common.CollectionsHelper;
 import io.helidon.common.http.AlreadyCompletedException;
 import io.helidon.common.http.Http;
-import io.helidon.webserver.spi.BareRequest;
-import io.helidon.webserver.spi.BareResponse;
 
 import io.opentracing.Span;
 import io.opentracing.SpanContext;

File: webserver/webserver/src/main/java/io/helidon/webserver/Response.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,6 @@
 import io.helidon.common.http.MediaType;
 import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.ReactiveStreamsAdapter;
-import io.helidon.webserver.spi.BareResponse;
 
 import io.opentracing.Span;
 import io.opentracing.SpanContext;

File: webserver/webserver/src/main/java/io/helidon/webserver/Routing.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,6 @@
 import java.util.function.Supplier;
 
 import io.helidon.common.http.Http;
-import io.helidon.webserver.spi.BareRequest;
-import io.helidon.webserver.spi.BareResponse;
 
 /**
  * Routing represents composition of HTTP request-response handlers with routing rules. It is together with

File: webserver/webserver/src/main/java/io/helidon/webserver/UnboundedSemaphore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import java.util.concurrent.atomic.AtomicLong;
 

File: webserver/webserver/src/main/java/io/helidon/webserver/WebServerLogFormatter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import java.util.logging.LogRecord;
 import java.util.logging.SimpleFormatter;

File: webserver/webserver/src/test/java/io/helidon/webserver/HashResponseHeadersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,6 @@
 import io.helidon.common.http.Http;
 import io.helidon.common.http.MediaType;
 import io.helidon.common.http.SetCookie;
-import io.helidon.webserver.spi.BareResponse;
 
 import org.hamcrest.collection.IsIterableContainingInOrder;
 import org.junit.jupiter.api.Test;

File: webserver/webserver/src/test/java/io/helidon/webserver/OriginThreadPublisherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 /**
  * The OriginThreadPublisherTest.

File: webserver/webserver/src/test/java/io/helidon/webserver/RequestContentTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,7 +35,6 @@
 import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.ReactiveStreamsAdapter;
 import io.helidon.common.reactive.SubmissionPublisher;
-import io.helidon.webserver.spi.BareRequest;
 import io.helidon.webserver.utils.TestUtils;
 
 import org.junit.jupiter.api.Test;

File: webserver/webserver/src/test/java/io/helidon/webserver/RequestTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 import java.net.URI;
 
 import io.helidon.common.CollectionsHelper;
-import io.helidon.webserver.spi.BareRequest;
 
 import org.junit.jupiter.api.Test;
 

File: webserver/webserver/src/test/java/io/helidon/webserver/RequestTestStub.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,7 +18,6 @@
 
 import java.net.URI;
 
-import io.helidon.webserver.spi.BareRequest;
 
 import io.opentracing.Span;
 import io.opentracing.SpanContext;

File: webserver/webserver/src/test/java/io/helidon/webserver/ResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,7 +28,6 @@
 import io.helidon.common.http.MediaType;
 import io.helidon.common.reactive.Flow;
 import io.helidon.common.reactive.ReactiveStreamsAdapter;
-import io.helidon.webserver.spi.BareResponse;
 
 import io.opentracing.SpanContext;
 import org.junit.jupiter.api.Test;

File: webserver/webserver/src/test/java/io/helidon/webserver/StringContentReaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,6 @@
 import io.helidon.common.CollectionsHelper;
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.reactive.ReactiveStreamsAdapter;
-import io.helidon.webserver.spi.BareRequest;
 
 import org.hamcrest.core.Is;
 import org.junit.jupiter.api.Test;

File: webserver/webserver/src/test/java/io/helidon/webserver/UnboundedSemaphoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,8 +14,9 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
+import io.helidon.webserver.UnboundedSemaphore;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;

File: webserver/webserver/src/test/java/io/helidon/webserver/WrappedOriginThreadPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import io.helidon.common.http.DataChunk;
 import io.helidon.common.reactive.Flow;

File: webserver/webserver/src/test/java/io/helidon/webserver/WrappedOriginThreadPublisherTckTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.netty;
+package io.helidon.webserver;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;

File: webserver/webserver/src/test/java/io/helidon/webserver/utils/SocketHttpClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.helidon.webserver.testsupport;
+package io.helidon.webserver.utils;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: examples/integrations/cdi/datasource-hikaricp-mysql/src/main/java/io/helidon/integrations/examples/datasource/hikaricp/jaxrs/TablesResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: examples/integrations/cdi/datasource-hikaricp-mysql/src/main/java/io/helidon/integrations/examples/datasource/hikaricp/jaxrs/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: config/config/src/main/java/io/helidon/config/internal/ClasspathSourceHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,7 +43,8 @@ static String uid(String resourceName) {
         try {
             Path resourcePath = ClasspathSourceHelper.resourcePath(resourceName);
             if (resourcePath != null) {
-                return resourcePath.toString();
+                //Backwards slash replacement is workaround used because of windows compatibility.
+                return resourcePath.toString().replace('\\', '/');
             }
         } catch (Exception ex) {
             //ignore it

File: config/encryption/src/main/java/io/helidon/config/encryption/ConfigEncryptionException.java
Patch:
@@ -22,7 +22,7 @@
 public class ConfigEncryptionException extends RuntimeException {
 
     /**
-     * Constructs a new secure config exception with the specified detail message.
+     * Constructs a new config encryption exception with the specified detail message.
      *
      * @param message the detail message. The detail message is saved for
      *                later retrieval by the {@link #getMessage()} method.

File: config/encryption/src/main/java/io/helidon/config/encryption/EncryptionFilter.java
Patch:
@@ -95,7 +95,8 @@ private EncryptionFilter(Builder builder, Config config) {
         }
 
         if (null != privateKey && !(privateKey instanceof RSAPrivateKey)) {
-            throw new ConfigEncryptionException("Private key must be an RSA private key, but is: " + privateKey.getClass().getName());
+            throw new ConfigEncryptionException("Private key must be an RSA private key, but is: "
+                                                        + privateKey.getClass().getName());
         }
 
         ConfigFilter noOp = (key, stringValue) -> stringValue;

File: config/encryption/src/main/java9/module-info.java
Patch:
@@ -26,5 +26,5 @@
 
     exports io.helidon.config.encryption;
 
-    provides io.helidon.config.spi.ConfigFilter with io.helidon.config.encryption.SecureConfigFilterService;
+    provides io.helidon.config.spi.ConfigFilter with io.helidon.config.encryption.EncryptionFilterService;
 }

File: config/encryption/src/test/java/io/helidon/config/encryption/SecureConfigFromBuilderTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
- * Test secure config filter configured through a builder.
+ * Test config encryption filter configured through a builder.
  */
 public class SecureConfigFromBuilderTest extends AbstractSecureConfigTest {
     private static Config config;

File: config/encryption/src/test/java/io/helidon/config/encryption/SecureConfigFromConfigTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
- * Unit test for secure config filter configured through configuration itself.
+ * Unit test for config encryption filter configured through configuration itself.
  */
 public class SecureConfigFromConfigTest extends AbstractSecureConfigTest {
     private static Config config;

File: microprofile/metrics/src/test/java/io/helidon/microprofile/metrics/MetricsMpServiceTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.helidon.microprofile.metrics;
 
+import javax.enterprise.inject.spi.CDI;
 import javax.ws.rs.client.Client;
 import javax.ws.rs.client.ClientBuilder;
 
@@ -49,11 +50,8 @@ public class MetricsMpServiceTest {
 
     @BeforeAll
     public static void initializeServer() throws Exception {
-        Weld weld = new Weld();
-        WeldContainer cdiContainer = weld.initialize();
         server = Server.builder()
                 .addResourceClass(HelloWorldResource.class)
-                .cdiContainer(cdiContainer)
                 .config(MpConfig.builder().config(Config.create()).build())
                 .host("localhost")
                 // choose a random available port

File: security/abac/policy-el/src/main/java9/module-info.java
Patch:
@@ -21,7 +21,8 @@
     requires io.helidon.security.providers.abac;
     requires io.helidon.security.abac.policy;
     requires java.logging;
-    requires javax.el;
+    // expected to be provided by the actual EL implementation
+    requires static javax.el.api;
     requires java.desktop;
     requires io.helidon.security.util;
 

File: security/security/src/main/java/io/helidon/security/spi/SecurityProvider.java
Patch:
@@ -31,7 +31,7 @@
  */
 public interface SecurityProvider {
     /**
-     * Provide extension annotations supported by this provider (e.g. {@link javax.annotation.security.RolesAllowed}).
+     * Provide extension annotations supported by this provider (e.g. {@code javax.annotation.security.RolesAllowed}).
      * Annotations will be collected according to framework in use. For JAX-RS, annotations from application class, resource
      * class and resource methods will be collected.
      *

File: bundles/config/src/main/java9/module-info.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Config Bundle module.
  */
-module io.helidon.config.bundle {
+module io.helidon.bundles.config {
     requires transitive io.helidon.config;
     requires transitive io.helidon.config.objectmapping;
     requires transitive io.helidon.config.hocon;

File: config/config/src/main/java/io/helidon/config/BuilderImpl.java
Patch:
@@ -313,7 +313,7 @@ private ConfigSource targetConfigSource(ConfigContext context) {
         if (targetSources.size() == 1) {
             targetConfigSource = targetSources.get(0);
         } else {
-            targetConfigSource = ConfigSources.from(targetSources.toArray(new ConfigSource[0])).build();
+            targetConfigSource = ConfigSources.create(targetSources.toArray(new ConfigSource[0])).build();
         }
         targetConfigSource.init(context);
         return targetConfigSource;
@@ -343,7 +343,7 @@ ProviderImpl createProvider(ConfigMapperManager configMapperManager,
     //
 
     static ConfigSource defaultConfigSource() {
-        return ConfigSources.from(
+        return ConfigSources.create(
                 new UseFirstAvailableConfigSource(
                         ConfigSources.load(
                                 new UseFirstAvailableConfigSource(
@@ -456,7 +456,7 @@ public Optional<ConfigParser> findParser(String mediaType) {
                 throw new NullPointerException("Unknown media type of resource.");
             }
             return configParsers.stream()
-                    .filter(parser -> parser.getSupportedMediaTypes().contains(mediaType))
+                    .filter(parser -> parser.supportedMediaTypes().contains(mediaType))
                     .findFirst();
         }
 

File: config/config/src/main/java/io/helidon/config/CompositeConfigSource.java
Patch:
@@ -131,11 +131,11 @@ public Optional<ObjectNode> load() {
         return lastObjectNode;
     }
 
-    Optional<ObjectNode> getLastObjectNode() {
+    Optional<ObjectNode> lastObjectNode() {
         return lastObjectNode;
     }
 
-    List<ConfigSourceChangeEventSubscriber> getCompositeConfigSourcesSubscribers() {
+    List<ConfigSourceChangeEventSubscriber> compositeConfigSourcesSubscribers() {
         return compositeConfigSourcesSubscribers;
     }
 

File: config/config/src/main/java/io/helidon/config/ConfigComplexImpl.java
Patch:
@@ -61,7 +61,7 @@ public final Stream<Config> traverse(Predicate<Config> predicate) {
                         .filter(predicate)
                         .map(node -> traverseSubNodes(node, predicate))
                         .reduce(Stream.empty(), Stream::concat))
-                .orElseThrow(MissingValueException.supplierForKey(key()));
+                .orElseThrow(MissingValueException.createSupplier(key()));
 
     }
 
@@ -74,7 +74,7 @@ private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predica
                             .filter(predicate)
                             .map(node -> traverseSubNodes(node, predicate))
                             .reduce(Stream.of(config), Stream::concat))
-                    .orElseThrow(MissingValueException.supplierForKey(key()));
+                    .orElseThrow(MissingValueException.createSupplier(key()));
         }
     }
 

File: config/config/src/main/java/io/helidon/config/ConfigDiff.java
Patch:
@@ -114,7 +114,7 @@ Set<Config.Key> changedKeys() {
      *
      * @return the newer {@code Config} used in the comparison
      */
-    Config getConfig() {
+    Config config() {
         return config;
     }
 

File: config/config/src/main/java/io/helidon/config/ConfigExistingImpl.java
Patch:
@@ -56,7 +56,7 @@ abstract class ConfigExistingImpl<N extends ConfigNode> extends AbstractConfigIm
 
     @Override
     public final Optional<String> value() throws ConfigMappingException {
-        String value = getNode().get();
+        String value = node().get();
         if (null != value) {
             return Optional.ofNullable(filter.apply(realKey(), value));
         } else {
@@ -68,7 +68,7 @@ public final Optional<String> value() throws ConfigMappingException {
 
     @Override
     public boolean hasValue() {
-        return null != getNode().get();
+        return null != node().get();
     }
 
     @Override
@@ -91,7 +91,7 @@ public ConfigValue<Map<String, String>> asMap() {
         return ConfigValues.createMap(this, mapperManager);
     }
 
-    protected final N getNode() {
+    protected final N node() {
         return node;
     }
 

File: config/config/src/main/java/io/helidon/config/ConfigFilters.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @see io.helidon.config.spi.ConfigFilter
  */
-public class ConfigFilters {
+public final class ConfigFilters {
 
     private ConfigFilters() {
         throw new AssertionError("Instantiation not allowed.");
@@ -52,7 +52,7 @@ public static ValueResolvingBuilder valueResolving() {
      * {@link #build()}.
      * <p>
      * Alternatively, if you create the builder using the
-     * {@link #from(io.helidon.config.Config)} method, in the {@code Config}
+     * {@link #create(io.helidon.config.Config)} method, in the {@code Config}
      * instance you pass set the config key
      * {@value FAIL_ON_MISSING_REFERENCE_KEY_NAME} to {@code true}.
      */
@@ -87,7 +87,7 @@ private ValueResolvingBuilder() {
          *                                supplied configuration node to an instance of a given Java type.
          * @see ConfigFilters#valueResolving()
          */
-        public static ValueResolvingBuilder from(Config metaConfig) throws ConfigMappingException, MissingValueException {
+        public static ValueResolvingBuilder create(Config metaConfig) throws ConfigMappingException, MissingValueException {
             ValueResolvingBuilder builder = new ValueResolvingBuilder();
             builder.failOnMissingReference(metaConfig.get(FAIL_ON_MISSING_REFERENCE_KEY_NAME).asBoolean().orElse(false));
             return builder;

File: config/config/src/main/java/io/helidon/config/ConfigLeafImpl.java
Patch:
@@ -135,7 +135,7 @@ public Stream<Config> traverse(Predicate<Config> predicate) {
 
     @Override
     public String toString() {
-        return "[" + realKey() + "] VALUE '" + getNode().get() + "'";
+        return "[" + realKey() + "] VALUE '" + node().get() + "'";
     }
 
 }

File: config/config/src/main/java/io/helidon/config/ConfigListImpl.java
Patch:
@@ -43,7 +43,7 @@ class ConfigListImpl extends ConfigComplexImpl<ListNode> {
     public ConfigValue<List<Config>> asNodeList() throws ConfigMappingException {
         return ConfigValues.create(this,
                                    () -> Optional.of(
-                                           IntStream.range(0, getNode().size())
+                                           IntStream.range(0, node().size())
                                                    .boxed()
                                                    .map(index -> get(Integer.toString(index)))
                                                    .collect(Collectors.toList())),
@@ -53,7 +53,7 @@ public ConfigValue<List<Config>> asNodeList() throws ConfigMappingException {
 
     @Override
     public String toString() {
-        return "[" + realKey() + "] LIST (elements: " + getNode().size() + ")";
+        return "[" + realKey() + "] LIST (elements: " + node().size() + ")";
     }
 
 }

File: config/config/src/main/java/io/helidon/config/ConfigMapperManager.java
Patch:
@@ -85,7 +85,7 @@ public <T> T map(String value, GenericType<T> type, String key) throws MissingVa
     <T> Optional<? extends BiFunction<Config, ConfigMapper, T>> mapper(GenericType<T> type) {
         Mapper<T> mapper = (Mapper<T>) mappers.get(type);
         if (null == mapper) {
-            return mapperProviders.findMapper(type, Config.Key.of(""));
+            return mapperProviders.findMapper(type, Config.Key.create(""));
         } else {
             return Optional.of(mapper);
         }
@@ -229,7 +229,7 @@ static class SingleValueConfigImpl implements Config {
 
         SingleValueConfigImpl(ConfigMapperManager mapperManager, String key, String value) {
             this.mapperManager = mapperManager;
-            this.key = Key.of(key);
+            this.key = Key.create(key);
             this.value = value;
 
             this.timestamp = Instant.now();

File: config/config/src/main/java/io/helidon/config/ConfigMappers.java
Patch:
@@ -704,7 +704,7 @@ private static <T> Function<Config, T> wrapMapper(Function<Config, T> mapper) {
     static <T> Function<Config, T> wrap(Function<String, T> mapper) {
         return (node) -> nodeValue(node)
                 .map(value -> safeMap(node.key(), value, mapper))
-                .orElseThrow(MissingValueException.supplierForKey(node.key()));
+                .orElseThrow(MissingValueException.createSupplier(node.key()));
     }
 
     private static Optional<String> nodeValue(Config node) {

File: config/config/src/main/java/io/helidon/config/ConfigObjectImpl.java
Patch:
@@ -42,7 +42,7 @@ class ConfigObjectImpl extends ConfigComplexImpl<ObjectNode> {
     public ConfigValue<List<Config>> asNodeList() throws ConfigMappingException {
         return ConfigValues.create(this,
                                    () -> Optional.of(
-                                           getNode().entrySet()
+                                           node().entrySet()
                                                    .stream()
                                                    .map(e -> get(e.getKey()))
                                                    .collect(Collectors.toList())),
@@ -51,7 +51,7 @@ public ConfigValue<List<Config>> asNodeList() throws ConfigMappingException {
 
     @Override
     public String toString() {
-        return "[" + realKey() + "] OBJECT (members: " + getNode().size() + ")";
+        return "[" + realKey() + "] OBJECT (members: " + node().size() + ")";
     }
 
 }

File: config/config/src/main/java/io/helidon/config/ConfigValue.java
Patch:
@@ -106,7 +106,7 @@ default String name() {
      */
     default T get() throws MissingValueException, ConfigMappingException {
         return asOptional()
-                .orElseThrow(() -> MissingValueException.forKey(key()));
+                .orElseThrow(() -> MissingValueException.create(key()));
     }
 
     /**

File: config/config/src/main/java/io/helidon/config/ConfigValues.java
Patch:
@@ -39,7 +39,7 @@ private ConfigValues() {
      * @return a config value that is empty
      */
     public static <T> ConfigValue<T> empty() {
-        return new ConfigValueBase<T>(Config.Key.of("")) {
+        return new ConfigValueBase<T>(Config.Key.create("")) {
             @Override
             public Optional<T> asOptional() {
                 return Optional.empty();
@@ -53,7 +53,7 @@ public <N> ConfigValue<N> as(Function<T, N> mapper) {
             @Override
             public Supplier<T> supplier() {
                 return () -> {
-                    throw MissingValueException.forKey(key());
+                    throw MissingValueException.create(key());
                 };
             }
 
@@ -83,7 +83,7 @@ public String toString() {
      * @return a config value that uses the value provided
      */
     public static <T> ConfigValue<T> simpleValue(T value) {
-        return new ConfigValueBase<T>(Config.Key.of("")) {
+        return new ConfigValueBase<T>(Config.Key.create("")) {
             @Override
             public Optional<T> asOptional() {
                 return Optional.ofNullable(value);

File: config/config/src/main/java/io/helidon/config/FallbackMergingStrategy.java
Patch:
@@ -51,7 +51,7 @@ public ObjectNode merge(List<ObjectNode> rootNodes) {
     }
 
     private static ObjectNode.Builder addNode(ObjectNode.Builder builder, String key, ConfigNode node) {
-        switch (node.getNodeType()) {
+        switch (node.nodeType()) {
         case OBJECT:
             return builder.addObject(key, (ObjectNode) node);
         case LIST:

File: config/config/src/main/java/io/helidon/config/InMemoryOverrideSource.java
Patch:
@@ -75,7 +75,7 @@ static final class Builder extends AbstractOverrideSource.Builder<InMemoryOverri
         @Override
         public InMemoryOverrideSource build() {
             if (!overrideWildcards.isEmpty()) {
-                overrideData = OverrideSource.OverrideData.fromWildcards(overrideWildcards);
+                overrideData = OverrideSource.OverrideData.createFromWildcards(overrideWildcards);
             } else {
                 throw new ConfigException("Override values cannot be empty.");
             }

File: config/config/src/main/java/io/helidon/config/MissingValueException.java
Patch:
@@ -40,7 +40,7 @@ private MissingValueException(Config.Key key) {
      * @param key configuration key associated with the expected value.
      * @return new missing value exception associated with a given key.
      */
-    public static MissingValueException forKey(Config.Key key) {
+    public static MissingValueException create(Config.Key key) {
         return new MissingValueException(key);
     }
 
@@ -50,7 +50,7 @@ public static MissingValueException forKey(Config.Key key) {
      * @param key configuration key associated with the expected value.
      * @return new supplier of a missing value exception associated with a given key.
      */
-    public static Supplier<MissingValueException> supplierForKey(Config.Key key) {
+    public static Supplier<MissingValueException> createSupplier(Config.Key key) {
         return () -> new MissingValueException(key);
     }
 }

File: config/config/src/main/java/io/helidon/config/OverrideSources.java
Patch:
@@ -59,7 +59,7 @@ public static OverrideSource empty() {
      * @param overrideValues a map of wildcards to values
      * @return a new instance of {@code OverrideSource}
      */
-    public static OverrideSource from(Map<String, String> overrideValues) {
+    public static OverrideSource create(Map<String, String> overrideValues) {
         return InMemoryOverrideSource.builder(overrideValues).build();
     }
 

File: config/config/src/main/java/io/helidon/config/ProviderImpl.java
Patch:
@@ -137,7 +137,7 @@ private synchronized Config build(Optional<ObjectNode> rootNode) {
                                                   rootNode.orElseGet(ObjectNode::empty),
                                                   targetFilter,
                                                   this);
-        Config config = factory.getConfig();
+        Config config = factory.config();
         // initialize filters
         initializeFilters(config, targetFilter);
         // caching
@@ -165,7 +165,7 @@ private ObjectNode resolveKeys(ObjectNode rootNode) {
                 return token;
             };
         }
-        return ObjectNodeBuilderImpl.from(rootNode, resolveTokenFunction).build();
+        return ObjectNodeBuilderImpl.create(rootNode, resolveTokenFunction).build();
     }
 
     private Map<String, String> flattenNodes(ConfigNode node) {
@@ -306,7 +306,7 @@ public Flow.Publisher<ConfigDiff> changes() {
         return changesPublisher;
     }
 
-    SubmissionPublisher<ConfigDiff> getChangesSubmitter() {
+    SubmissionPublisher<ConfigDiff> changesSubmitter() {
         return changesSubmitter;
     }
 

File: config/config/src/main/java/io/helidon/config/RetryPolicies.java
Patch:
@@ -82,7 +82,7 @@ public <T> T execute(Supplier<T> call) {
     /**
      * A builder of the default {@link RetryPolicy}.
      */
-    public static class Builder implements Supplier<RetryPolicy> {
+    public static final class Builder implements io.helidon.common.Builder<RetryPolicy> {
 
         private static final String RETRIES_KEY = "retries";
 
@@ -125,7 +125,7 @@ private Builder(int retries) {
          *                                supplied configuration node to an instance of a given Java type.
          * @see PollingStrategies#regular(Duration)
          */
-        public static Builder from(Config metaConfig) throws ConfigMappingException, MissingValueException {
+        public static Builder create(Config metaConfig) throws ConfigMappingException, MissingValueException {
             // retries
             Builder builder = new Builder(metaConfig.get(RETRIES_KEY).asInt().get());
             // delay

File: config/config/src/main/java/io/helidon/config/internal/DirectoryConfigSource.java
Patch:
@@ -68,7 +68,7 @@ public class DirectoryConfigSource extends AbstractConfigSource<Instant> {
      * @see io.helidon.config.ConfigSources#directory(String)
      * @see io.helidon.config.spi.AbstractParsableConfigSource.Builder#init(Config)
      */
-    public static DirectoryConfigSource from(Config metaConfig) throws ConfigMappingException, MissingValueException {
+    public static DirectoryConfigSource create(Config metaConfig) throws ConfigMappingException, MissingValueException {
         return (DirectoryConfigSource) new DirectoryBuilder(metaConfig.get(PATH_KEY).as(Path.class).get())
                 .init(metaConfig)
                 .build();
@@ -132,7 +132,7 @@ protected DirectoryBuilder init(Config metaConfig) {
         }
 
         @Override
-        protected Path getTarget() {
+        protected Path target() {
             return path;
         }
 

File: config/config/src/main/java/io/helidon/config/internal/ListNodeImpl.java
Patch:
@@ -70,7 +70,7 @@ public int size() {
 
     @Override
     public MergeableNode merge(MergeableNode node) {
-        switch (node.getNodeType()) {
+        switch (node.nodeType()) {
         case OBJECT:
             return mergeWithObject((ObjectNodeImpl) node);
         case LIST:
@@ -124,7 +124,7 @@ private MergeableNode mergeWithObject(ObjectNodeImpl node) {
             throw new ConfigException(
                     String.format("Cannot merge OBJECT members %s%s with an LIST node%s.",
                                   unprocessedPeerNames,
-                                  formatFrom(node.getDescription()),
+                                  formatFrom(node.description()),
                                   formatFrom(description)));
         } else {
             return builder.build();
@@ -148,7 +148,7 @@ public ListNodeImpl initDescription(String description) {
         return this;
     }
 
-    public String getDescription() {
+    public String description() {
         return description;
     }
 

File: config/config/src/main/java/io/helidon/config/internal/PropertiesConfigParser.java
Patch:
@@ -57,7 +57,7 @@ public class PropertiesConfigParser implements ConfigParser {
     private static final Set<String> SUPPORTED_MEDIA_TYPES = CollectionsHelper.setOf(MEDIA_TYPE_TEXT_JAVA_PROPERTIES);
 
     @Override
-    public Set<String> getSupportedMediaTypes() {
+    public Set<String> supportedMediaTypes() {
         return SUPPORTED_MEDIA_TYPES;
     }
 

File: config/config/src/main/java/io/helidon/config/internal/ValueResolvingFilter.java
Patch:
@@ -73,7 +73,7 @@
  * <li>If you use {@link ConfigFilters#valueResolving()} to get a builder for the
  * filter, invoke the {@code failOnMissingReference} method on that builder before
  * invoking the filter builder's {@code build} method.</li>
- * <li>If you use {@link ConfigFilters.ValueResolvingBuilder#from} to get the
+ * <li>If you use {@link ConfigFilters.ValueResolvingBuilder#create} to get the
  * filter's builder, define this setting in the {@code Config} instance you pass
  * to the {@code from} method:
  * <pre>

File: config/config/src/main/java/io/helidon/config/spi/AbstractOverrideSource.java
Patch:
@@ -17,7 +17,6 @@
 package io.helidon.config.spi;
 
 import java.util.Optional;
-import java.util.function.Supplier;
 
 import io.helidon.common.reactive.Flow;
 
@@ -41,7 +40,7 @@ protected AbstractOverrideSource(Builder builder) {
 
     @Override
     public final Flow.Publisher<Optional<OverrideData>> changes() {
-        return getChangesPublisher();
+        return changesPublisher();
     }
 
     /**
@@ -54,7 +53,7 @@ public final Flow.Publisher<Optional<OverrideData>> changes() {
      */
     public abstract static class Builder<B extends Builder<B, T>, T>
             extends AbstractSource.Builder<B, T, OverrideSource>
-            implements Supplier<OverrideSource> {
+            implements io.helidon.common.Builder<OverrideSource> {
 
         private volatile OverrideSource overrideSource;
 

File: config/config/src/main/java/io/helidon/config/spi/ConfigContext.java
Patch:
@@ -30,7 +30,7 @@ public interface ConfigContext {
     /**
      * Returns the first appropriate {@link ConfigParser} instance that supports
      * the specified
-     * {@link ConfigParser.Content#getMediaType() content media type}.
+     * {@link ConfigParser.Content#mediaType() content media type}.
      * <p>
      * Note that the application can explicitly register parsers with a builder
      * by invoking the

File: config/config/src/main/java/io/helidon/config/spi/ConfigSource.java
Patch:
@@ -188,7 +188,7 @@ public interface ConfigSource extends Source<ObjectNode>, Supplier<ConfigSource>
      * {@code regular} and {@code watch}. See {@link PollingStrategy} for
      * details about all supported properties and custom implementation support.
      * It also shows the built-in {@code retry-policy} type {@code repeat}. See
-     * {@link RetryPolicy#from(Config) RetryPolicy} for more information.
+     * {@link RetryPolicy#create(Config) RetryPolicy} for more information.
      *
      * <h2><a name="customSourcesAndTypes">Custom Sources and Source
      * Types</a></h2>
@@ -239,7 +239,7 @@ public interface ConfigSource extends Source<ObjectNode>, Supplier<ConfigSource>
      * @see ConfigSources#load(Supplier[])
      * @see ConfigSources#load(Config)
      */
-    static ConfigSource from(Config metaConfig) throws ConfigMappingException, MissingValueException {
+    static ConfigSource create(Config metaConfig) throws ConfigMappingException, MissingValueException {
         return ConfigSourceConfigMapper.instance().apply(metaConfig);
     }
 

File: config/config/src/main/java/io/helidon/config/spi/OrderedProperties.java
Patch:
@@ -39,7 +39,7 @@ public void load(Reader reader) throws IOException {
         properties.load(reader);
     }
 
-    LinkedHashMap<String, String> getOrderedMap() {
+    LinkedHashMap<String, String> orderedMap() {
         return map;
     }
 }

File: config/config/src/main/java/io/helidon/config/spi/RetryPolicy.java
Patch:
@@ -43,7 +43,7 @@ public interface RetryPolicy extends Supplier<RetryPolicy> {
     /**
      * Constructs a {@code RetryPolicy} from meta-configuration.
      * <p>
-     * As described with {@link ConfigSource#from(Config)}, the config system
+     * As described with {@link ConfigSource#create(Config)}, the config system
      * can load {@code ConfigSource}s using meta-configuration, which supports
      * specifying retry policies. The
      * {@link RetryPolicies built-in retry policies} and custom ones are
@@ -90,7 +90,7 @@ public interface RetryPolicy extends Supplier<RetryPolicy> {
      * indicate a retry policy but not both. If both appear the config system
      * ignores the {@code class} setting.
      * <p>
-     * See {@link ConfigSource#from(Config)} for example of using built-in retry
+     * See {@link ConfigSource#create(Config)} for example of using built-in retry
      * policies.
      * <h3>Meta-configuration Support for Custom Retry Policies</h3>
      * To support settings in meta-configuration, a custom retry policy must
@@ -117,7 +117,7 @@ public interface RetryPolicy extends Supplier<RetryPolicy> {
      * @see ConfigSources#load(Supplier[])
      * @see ConfigSources#load(Config)
      */
-    static RetryPolicy from(Config metaConfig) throws ConfigMappingException, MissingValueException {
+    static RetryPolicy create(Config metaConfig) throws ConfigMappingException, MissingValueException {
         return RetryPolicyConfigMapper.instance().apply(metaConfig);
     }
 

File: config/config/src/main/java/io/helidon/config/spi/Source.java
Patch:
@@ -81,6 +81,6 @@ default Flow.Publisher<Optional<T>> changes() { //TODO later remove, see Changea
      * @throws Exception in case of errors encountered while closing the source
      */
     @Override
-    default void close() throws Exception{
+    default void close() throws Exception {
     }
 }

File: config/config/src/test/java/io/helidon/config/BuilderImplTest.java
Patch:
@@ -48,7 +48,7 @@ public class BuilderImplTest {
 
     @Test
     public void testBuildDefault() {
-        Config.Builder builder = Config.withSources(ConfigSources.empty());
+        Config.Builder builder = Config.builder(ConfigSources.empty());
         BuilderImpl spyBuilder = spy((BuilderImpl) builder);
         spyBuilder
                 .disableEnvironmentVariablesSource()

File: config/config/src/test/java/io/helidon/config/ConfigMapperManagerTest.java
Patch:
@@ -79,19 +79,19 @@ public void testCustomMapper() {
     void testSingleValueConfigImpl() {
         Config config = managerNoServices.simpleConfig("key1", "42");
 
-        assertThat(config.key(), is(Config.Key.of("key1")));
+        assertThat(config.key(), is(Config.Key.create("key1")));
         assertThat(config.asString(), is(ConfigValues.simpleValue("42")));
         assertThat(config.type(), is(Config.Type.VALUE));
         assertThat(config.timestamp(), not(nullValue()));
         {
             Config sub = config.get("sub");
-            assertThat(sub.key(), is(Config.Key.of("key1.sub")));
+            assertThat(sub.key(), is(Config.Key.create("key1.sub")));
             assertThat(sub.asString(), is(ConfigValues.empty()));
             assertThat(sub.type(), is(Config.Type.MISSING));
         }
         {
             Config detached = config.detach();
-            assertThat(detached.key(), is(Config.Key.of("")));
+            assertThat(detached.key(), is(Config.Key.create("")));
             assertThat(detached.asString(), is(ConfigValues.simpleValue("42")));
             assertThat(detached.type(), is(Config.Type.VALUE));
         }

File: config/config/src/test/java/io/helidon/config/ConfigMappersFailingTest.java
Patch:
@@ -55,7 +55,7 @@ public void testMappingFails(Class<?> type) {
 
         String key = "config.key.with.wrong.format";
         Config config = Config.builder()
-                .sources(ConfigSources.from(CollectionsHelper.mapOf(key, ") bad, bad value ")))
+                .sources(ConfigSources.create(CollectionsHelper.mapOf(key, ") bad, bad value ")))
                 .build();
 
         ConfigMappingException ex = Assertions.assertThrows(ConfigMappingException.class, () -> {

File: config/config/src/test/java/io/helidon/config/ConfigSourcePollingTest.java
Patch:
@@ -105,7 +105,7 @@ public void onComplete() {
         assertThat("Subscriber was notified of " + (EXPECTED_UPDATE_EVENTS_DELIVERED - nextLatch.getCount() + 1) +
                            " events, not the expected number, within the expected time",
                    nextLatch.await(5000, TimeUnit.MILLISECONDS), is(true));
-        final Config config = Config.from(configSource);
+        final Config config = Config.create(configSource);
         assertThat("value retrieved for app1.node.value.sub1 not as expected",
                    config.get("app1.node.value.sub1").asString().get(),
                    is("subvalue1"));

File: config/config/src/test/java/io/helidon/config/ConfigValueTest.java
Patch:
@@ -49,7 +49,7 @@ static void initClass() {
         emptyValue = new ConfigValue<CustomValue>() {
             @Override
             public Config.Key key() {
-                return Config.Key.of("empty");
+                return Config.Key.create("empty");
             }
 
             @Override
@@ -80,7 +80,7 @@ public Supplier<Optional<CustomValue>> optionalSupplier() {
         fullValue = new ConfigValue<CustomValue>() {
             @Override
             public Config.Key key() {
-                return Config.Key.of("full");
+                return Config.Key.create("full");
             }
 
             @Override

File: config/config/src/test/java/io/helidon/config/ConfigValuesTest.java
Patch:
@@ -44,7 +44,7 @@ static void initClass() {
         Map<String, String> theMap = CollectionsHelper.mapOf(
                 "first", "124"
         );
-        full = Config.from(ConfigSources.from(theMap));
+        full = Config.create(ConfigSources.create(theMap));
     }
 
     @Test
@@ -73,7 +73,7 @@ private <T> void assertValue(ConfigValue<T> as, T defaultValue, String key, T ex
         assertThat(as.orElse(defaultValue), is(expectedValue));
         assertThat(as.asOptional(), is(Optional.of(expectedValue)));
         assertThat(as.name(), is(key));
-        assertThat(as.key(), is(Config.Key.of(key)));
+        assertThat(as.key(), is(Config.Key.create(key)));
         assertThat(as.optionalSupplier().get(), is(Optional.of(expectedValue)));
         Supplier<T> supplier = as.supplier();
         assertThat(supplier.get(), is(expectedValue));
@@ -90,7 +90,7 @@ private <T> void assertEmpty(ConfigValue<T> as, T defaultValue, String key) {
         assertThat(as.orElse(defaultValue), is(defaultValue));
         assertThat(as.asOptional(), is(Optional.empty()));
         assertThat(as.name(), is(key));
-        assertThat(as.key(), is(Config.Key.of(key)));
+        assertThat(as.key(), is(Config.Key.create(key)));
         assertThat(as.optionalSupplier().get(), is(Optional.empty()));
         Supplier<T> supplier = as.supplier();
         assertThrows(MissingValueException.class, supplier::get);

File: config/config/src/test/java/io/helidon/config/HybridNodeTest.java
Patch:
@@ -54,7 +54,7 @@ public void testBuilderOverlapParentLast() {
         map.put("app.port", "8080");
         map.put("app", "app-name");
 
-        MapConfigSource mapConfigSource = (MapConfigSource) ConfigSources.from(map).lax().build();
+        MapConfigSource mapConfigSource = (MapConfigSource) ConfigSources.create(map).lax().build();
         mapConfigSource.init(mock(ConfigContext.class));
         ConfigNode.ObjectNode objectNode = mapConfigSource.load().get();
 

File: config/config/src/test/java/io/helidon/config/TestingPollingStrategy.java
Patch:
@@ -39,7 +39,7 @@ public SubmissionPublisher<PollingEvent> ticks() {
     public Instant submitEvent() {
         PollingEvent pollingEvent = PollingEvent.now();
         ticksPublisher.submit(pollingEvent);
-        return pollingEvent.getTimestamp();
+        return pollingEvent.timestamp();
     }
 
 }

File: config/config/src/test/java/io/helidon/config/internal/ClasspathOverrideSourceTest.java
Patch:
@@ -102,7 +102,7 @@ public void testBuilderPollingStrategyNotExistingResource() {
                 .pollingStrategy(TestingPathPollingStrategy::new);
 
         ConfigException ex = assertThrows(ConfigException.class, () -> {
-            assertThat(builder.getPollingStrategyInternal(), Is.is(PollingStrategies.nop()));
+            assertThat(builder.pollingStrategyInternal(), Is.is(PollingStrategies.nop()));
         });
         assertTrue(ex.getMessage().startsWith("Could not find a filesystem path for resource 'not-exists'"));
     }
@@ -112,8 +112,8 @@ public void testBuilderPollingStrategyExistingResource() throws URISyntaxExcepti
         ClasspathBuilder builder = (ClasspathBuilder) OverrideSources.classpath("io/helidon/config/overrides.properties")
                 .pollingStrategy(TestingPathPollingStrategy::new);
 
-        assertThat(builder.getPollingStrategyInternal(), instanceOf(TestingPathPollingStrategy.class));
-        assertThat(((TestingPathPollingStrategy) builder.getPollingStrategyInternal()).getPath(),
+        assertThat(builder.pollingStrategyInternal(), instanceOf(TestingPathPollingStrategy.class));
+        assertThat(((TestingPathPollingStrategy) builder.pollingStrategyInternal()).getPath(),
                    is(ClasspathSourceHelper.resourcePath("io/helidon/config/overrides.properties")));
     }
 

File: config/config/src/test/java/io/helidon/config/internal/ConfigKeyImplTest.java
Patch:
@@ -33,9 +33,9 @@ public class ConfigKeyImplTest {
 
     @Test
     public void testConfigKeyOf() {
-        assertThatKey((ConfigKeyImpl) Config.Key.of(""), true, nullValue(), "", "");
-        assertThatKey((ConfigKeyImpl) Config.Key.of("aaa"), false, not(nullValue()), "aaa", "aaa");
-        assertThatKey((ConfigKeyImpl) Config.Key.of("aaa.bbb.ccc"), false, not(nullValue()), "ccc", "aaa.bbb.ccc");
+        assertThatKey((ConfigKeyImpl) Config.Key.create(""), true, nullValue(), "", "");
+        assertThatKey((ConfigKeyImpl) Config.Key.create("aaa"), false, not(nullValue()), "aaa", "aaa");
+        assertThatKey((ConfigKeyImpl) Config.Key.create("aaa.bbb.ccc"), false, not(nullValue()), "ccc", "aaa.bbb.ccc");
     }
 
     @Test

File: config/config/src/test/java/io/helidon/config/internal/FileOverrideSourceTest.java
Patch:
@@ -115,8 +115,8 @@ public void testBuilderPollingStrategy() {
         FileBuilder builder = (FileBuilder) OverrideSources.file("overrides.properties")
                 .pollingStrategy(TestingPathPollingStrategy::new);
 
-        assertThat(builder.getPollingStrategyInternal(), instanceOf(TestingPathPollingStrategy.class));
-        assertThat(((TestingPathPollingStrategy) builder.getPollingStrategyInternal()).getPath(),
+        assertThat(builder.pollingStrategyInternal(), instanceOf(TestingPathPollingStrategy.class));
+        assertThat(((TestingPathPollingStrategy) builder.pollingStrategyInternal()).getPath(),
                    is(Paths.get("overrides.properties")));
     }
 

File: config/config/src/test/java/io/helidon/config/internal/OverrideSourcesTest.java
Patch:
@@ -44,15 +44,15 @@ public void testEmptyIsAlwaysTheSameInstance() {
 
     @Test
     public void testFromWildcards() {
-        OverrideSource overrideSource = OverrideSources.from(CollectionsHelper.mapOf(WILDCARDS, "localhost"));
+        OverrideSource overrideSource = OverrideSources.create(CollectionsHelper.mapOf(WILDCARDS, "localhost"));
         assertThat(overrideSource.load()
                            .get()
                            .data()
                            .stream()
                            .findFirst()
                            .get()
                            .getKey()
-                           .test(Config.Key.of("prod.tenant1.audit.host")), is(true));
+                           .test(Config.Key.create("prod.tenant1.audit.host")), is(true));
     }
 
     @Test

File: config/config/src/test/java/io/helidon/config/internal/PropertiesConfigParserTest.java
Patch:
@@ -40,7 +40,7 @@ public class PropertiesConfigParserTest {
     @Test
     public void testGetSupportedMediaTypes() {
         PropertiesConfigParser parser = new PropertiesConfigParser();
-        assertThat(parser.getSupportedMediaTypes(), containsInAnyOrder(MEDIA_TYPE_TEXT_JAVA_PROPERTIES));
+        assertThat(parser.supportedMediaTypes(), containsInAnyOrder(MEDIA_TYPE_TEXT_JAVA_PROPERTIES));
     }
 
     @Test
@@ -67,7 +67,7 @@ public void testParseThrowsConfigParserException() {
     @FunctionalInterface
     private interface StringContent extends ConfigParser.Content {
         @Override
-        default String getMediaType() {
+        default String mediaType() {
             return MEDIA_TYPE_TEXT_JAVA_PROPERTIES;
         }
 

File: config/config/src/test/java/io/helidon/config/internal/UrlOverrideSourceTest.java
Patch:
@@ -76,8 +76,8 @@ public void testBuilderPollingStrategy() throws MalformedURLException {
         UrlOverrideSource.UrlBuilder builder = (UrlOverrideSource.UrlBuilder) OverrideSources.url(url)
                 .pollingStrategy(UrlOverrideSourceTest.TestingPathPollingStrategy::new);
 
-        assertThat(builder.getPollingStrategyInternal(), instanceOf(UrlOverrideSourceTest.TestingPathPollingStrategy.class));
-        assertThat(((UrlOverrideSourceTest.TestingPathPollingStrategy) builder.getPollingStrategyInternal()).getUrl(),
+        assertThat(builder.pollingStrategyInternal(), instanceOf(UrlOverrideSourceTest.TestingPathPollingStrategy.class));
+        assertThat(((UrlOverrideSourceTest.TestingPathPollingStrategy) builder.pollingStrategyInternal()).getUrl(),
                    Is.is(url));
     }
 

File: config/config/src/test/java/io/helidon/config/spi/AbstractOverrideSourceTest.java
Patch:
@@ -42,9 +42,9 @@ public OverrideSource build() {
         };
 
         assertThat(builder.isMandatory(), is(true));
-        assertThat(builder.getChangesExecutor(), is(AbstractSource.Builder.DEFAULT_CHANGES_EXECUTOR));
-        assertThat(builder.getChangesMaxBuffer(), is(Flow.defaultBufferSize()));
-        assertThat(builder.getPollingStrategy(), is(PollingStrategies.nop()));
+        assertThat(builder.changesExecutor(), is(AbstractSource.Builder.DEFAULT_CHANGES_EXECUTOR));
+        assertThat(builder.changesMaxBuffer(), is(Flow.defaultBufferSize()));
+        assertThat(builder.pollingStrategy(), is(PollingStrategies.nop()));
     }
 
     @Test

File: config/config/src/test/java/io/helidon/config/spi/OverrideSourceTest.java
Patch:
@@ -34,13 +34,13 @@ public class OverrideSourceTest {
     @Test
     public void testOrderedPropertiesNotLoadedIsEmpty() {
         OrderedProperties props = new OrderedProperties();
-        assertThat(props.getOrderedMap().entrySet().isEmpty(), is(true));
+        assertThat(props.orderedMap().entrySet().isEmpty(), is(true));
     }
 
     @Test
     public void testOrderedPropertiesUseInsertionOrderedMap() {
         OrderedProperties props = new OrderedProperties();
-        assertThat(props.getOrderedMap(), instanceOf(LinkedHashMap.class));
+        assertThat(props.orderedMap(), instanceOf(LinkedHashMap.class));
     }
 
     @Test
@@ -51,7 +51,7 @@ public void testOrderedPropertiesLoadKeepsOrdering() throws IOException {
                                             + "bbb=2\n"
                                             + "ccc=3\n"
         ));
-        assertThat(props.getOrderedMap().keySet(), contains("aaa", "bbb", "ccc"));
+        assertThat(props.orderedMap().keySet(), contains("aaa", "bbb", "ccc"));
     }
 
 }

File: config/config/src/test/java/io/helidon/config/spi/TestingConfigSource.java
Patch:
@@ -78,8 +78,8 @@ protected Data<ObjectNode, Instant> loadData() throws ConfigException {
     }
 
     @Override
-    public SubmissionPublisher<Optional<ObjectNode>> getChangesSubmitter() {
-        return super.getChangesSubmitter();
+    public SubmissionPublisher<Optional<ObjectNode>> changesSubmitter() {
+        return super.changesSubmitter();
     }
 
     public void changeLoadedObjectNode(ObjectNode newObjectNode, boolean submitChange) {

File: config/config/src/test/java/io/helidon/config/spi/TestingParsableConfigSource.java
Patch:
@@ -46,7 +46,7 @@ protected String uid() {
     protected Optional<Instant> dataStamp() {
         ConfigParser.Content<Instant> content = contentSupplier.get();
         if (content != null) {
-            return content.getStamp();
+            return content.stamp();
         }
         return Optional.empty();
     }

File: config/etcd/src/test/java/io/helidon/config/etcd/EtcdConfigSourceIT.java
Patch:
@@ -50,7 +50,7 @@ public void testConfig(EtcdApi version) throws Exception {
         putConfiguration(version, "/application.conf");
         Config config = Config.builder()
                 .sources(EtcdConfigSourceBuilder
-                                 .from(DEFAULT_URI, "configuration", version)
+                                 .create(DEFAULT_URI, "configuration", version)
                                  .mediaType(MEDIA_TYPE_APPLICATION_HOCON)
                                  .build())
                 .addParser(new HoconConfigParser())
@@ -65,9 +65,9 @@ public void testConfigChanges(EtcdApi version) throws Exception {
         putConfiguration(version, "/application.conf");
         Config config = Config.builder()
                 .sources(EtcdConfigSourceBuilder
-                                 .from(DEFAULT_URI, "configuration", version)
+                                 .create(DEFAULT_URI, "configuration", version)
                                  .mediaType(MEDIA_TYPE_APPLICATION_HOCON)
-                                 .pollingStrategy(EtcdWatchPollingStrategy::new)
+                                 .pollingStrategy(EtcdWatchPollingStrategy::create)
                                  .build())
                 .addParser(new HoconConfigParser())
                 .build();

File: config/etcd/src/test/java/io/helidon/config/etcd/EtcdWatchPollingStrategyTest.java
Patch:
@@ -115,7 +115,7 @@ public void onComplete() {
 
         assertThat(initLatch.await(1000, TimeUnit.MILLISECONDS), is(true));
 
-        assertThat(etcdClient.getWatchPublisher("key").getNumberOfSubscribers(), is(1));
+        assertThat(etcdClient.watchPublisher("key").getNumberOfSubscribers(), is(1));
     }
 
     private static class MockEtcdWatchPollingStrategy extends EtcdWatchPollingStrategy {
@@ -129,7 +129,7 @@ private static class MockEtcdWatchPollingStrategy extends EtcdWatchPollingStrate
         }
 
         @Override
-        EtcdClient getEtcdClient() {
+        EtcdClient etcdClient() {
             return etcdClient;
         }
     }

File: config/etcd/src/test/java/io/helidon/config/etcd/internal/client/EtcdApiTest.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class EtcdApiTest {
     @Test
-    public void getClient() {
+    public void testClientVersion() {
         assertThat(EtcdApi.v2.clientFactory().createClient(URI.create("http://localhost")), instanceOf(EtcdV2Client.class));
         assertThat(EtcdApi.v3.clientFactory().createClient(URI.create("http://localhost")), instanceOf(EtcdV3Client.class));
     }

File: config/examples/basics/src/main/java/io/helidon/config/examples/basics/Main.java
Patch:
@@ -36,7 +36,7 @@ private Main() {
      * @param args arguments
      */
     public static void main(String... args) {
-        Config config = Config.from(classpath("application.conf"));
+        Config config = Config.create(classpath("application.conf"));
 
         int pageSize = config.get("app.page-size").asInt().get();
 

File: config/examples/changes/src/main/java/io/helidon/config/examples/changes/AsSupplierExample.java
Patch:
@@ -51,13 +51,13 @@ public class AsSupplierExample {
      */
     public void run() {
         Config config = Config
-                .from(file("conf/dev.yaml")
+                .create(file("conf/dev.yaml")
                               .optional()
                               .pollingStrategy(PollingStrategies::watch),
-                      file("conf/config.yaml")
+                        file("conf/config.yaml")
                               .optional()
                               .pollingStrategy(regular(Duration.ofSeconds(2))),
-                      classpath("default.yaml")
+                        classpath("default.yaml")
                               .pollingStrategy(regular(Duration.ofSeconds(10))));
 
         // greeting.get() always return up-to-date value

File: config/examples/changes/src/main/java/io/helidon/config/examples/changes/ChangesSubscriberExample.java
Patch:
@@ -45,13 +45,13 @@ public class ChangesSubscriberExample {
      */
     public void run() {
         Config config = Config
-                .from(file("conf/dev.yaml")
+                .create(file("conf/dev.yaml")
                               .optional()
                               .pollingStrategy(PollingStrategies::watch),
-                      file("conf/config.yaml")
+                        file("conf/config.yaml")
                               .optional()
                               .pollingStrategy(regular(ofSeconds(2))),
-                      classpath("default.yaml")
+                        classpath("default.yaml")
                               .pollingStrategy(regular(ofSeconds(10))));
 
         // first greeting

File: config/examples/changes/src/main/java/io/helidon/config/examples/changes/OnChangeExample.java
Patch:
@@ -41,7 +41,7 @@ public class OnChangeExample {
      */
     public void run() {
         Config secrets = Config
-                .withSources(ConfigSources.directory("conf/secrets")
+                .builder(ConfigSources.directory("conf/secrets")
                                      .pollingStrategy(PollingStrategies.regular(ofSeconds(5))))
                 .disableEnvironmentVariablesSource()
                 .disableSystemPropertiesSource()

File: config/examples/mapping/src/main/java/io/helidon/config/examples/mapping/BuilderExample.java
Patch:
@@ -39,7 +39,7 @@ private BuilderExample() {
      * @param args arguments
      */
     public static void main(String... args) {
-        Config config = Config.from(ConfigSources.classpath("application.conf"));
+        Config config = Config.create(ConfigSources.classpath("application.conf"));
 
         AppConfig appConfig = config
                 // get "app" sub-node

File: config/examples/mapping/src/main/java/io/helidon/config/examples/mapping/DeserializationExample.java
Patch:
@@ -39,7 +39,7 @@ private DeserializationExample() {
      * @param args arguments
      */
     public static void main(String... args) {
-        Config config = Config.from(ConfigSources.classpath("application.conf"));
+        Config config = Config.create(ConfigSources.classpath("application.conf"));
 
         AppConfig appConfig = config
                 // get "app" sub-node

File: config/examples/sources/src/main/java/io/helidon/config/examples/sources/DirectorySourceExample.java
Patch:
@@ -38,7 +38,7 @@ public static void main(String... args) {
            E.g. Kubernetes Secrets:
          */
 
-        Config secrets = Config.withSources(directory("conf/secrets"))
+        Config secrets = Config.builder(directory("conf/secrets"))
                 .disableEnvironmentVariablesSource()
                 .disableSystemPropertiesSource()
                 .build();

File: config/examples/sources/src/main/java/io/helidon/config/examples/sources/LoadSourcesExample.java
Patch:
@@ -46,8 +46,8 @@ public static void main(String... args) {
            with a filter which convert values with keys ending with "level" to upper case
          */
 
-        Config config = Config.loadSources(file("conf/meta-config.yaml").optional(),
-                                           classpath("meta-config.yaml"))
+        Config config = Config.builderLoadSourcesFrom(file("conf/meta-config.yaml").optional(),
+                                                      classpath("meta-config.yaml"))
                 .addFilter((key, stringValue) -> key.name().equals("level") ? stringValue.toUpperCase() : stringValue)
                 .build();
 

File: config/examples/sources/src/main/java/io/helidon/config/examples/sources/WithSourcesExample.java
Patch:
@@ -47,9 +47,9 @@ public static void main(String... args) {
          */
 
         Config config = Config
-                .withSources(file("conf/dev.yaml").optional(),
-                             file("conf/config.yaml").optional(),
-                             classpath("default.yaml"))
+                .builder(file("conf/dev.yaml").optional(),
+                         file("conf/config.yaml").optional(),
+                         classpath("default.yaml"))
                 .addFilter((key, stringValue) -> key.name().equals("level") ? stringValue.toUpperCase() : stringValue)
                 .build();
 

File: config/hocon/src/main/java/io/helidon/config/hocon/HoconConfigParserBuilder.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Objects;
 
+import io.helidon.common.Builder;
 import io.helidon.config.hocon.internal.HoconConfigParser;
 import io.helidon.config.spi.ConfigParser;
 
@@ -32,7 +33,7 @@
  * It is possible to {@link #disableResolving() disable resolving} feature
  * or specify custom {@link #resolveOptions(ConfigResolveOptions) ConfigResolveOptions} instance.
  */
-public final class HoconConfigParserBuilder {
+public final class HoconConfigParserBuilder implements Builder<ConfigParser> {
 
     private boolean resolvingEnabled;
     private ConfigResolveOptions resolveOptions;

File: config/hocon/src/main/java/io/helidon/config/hocon/internal/HoconConfigParser.java
Patch:
@@ -99,7 +99,7 @@ public HoconConfigParser() {
     }
 
     @Override
-    public Set<String> getSupportedMediaTypes() {
+    public Set<String> supportedMediaTypes() {
         return SUPPORTED_MEDIA_TYPES;
     }
 

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/Value.java
Patch:
@@ -109,7 +109,7 @@
  *     //...
  *
  *     // FACTORY METHOD
- *     public static AppConfig from({@literal @}Value(key = "greeting", withDefault = "Hi")
+ *     public static AppConfig create({@literal @}Value(key = "greeting", withDefault = "Hi")
  *                                  String greeting,
  *                                  {@literal @}Value(key = "page-size", withDefault = "10")
  *                                  int pageSize,

File: config/object-mapping/src/main/java/io/helidon/config/objectmapping/package-info.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * Mappers that can map {@link io.helidon.config.Config} to classes with factory methods, classes with Builders and
  * general "bean" classes with constructor and setters.
- * The magic is happening in {@link io.helidon.config.objectmapping.BeansConfigMapperProvider} which is a service implementing
+ * The magic is happening in {@link io.helidon.config.objectmapping.ObjectConfigMapperProvider} which is a service implementing
  * {@link io.helidon.config.spi.ConfigMapperProvider}.
  */
 package io.helidon.config.objectmapping;

File: config/object-mapping/src/main/java9/module-info.java
Patch:
@@ -23,5 +23,5 @@
 
     exports io.helidon.config.objectmapping;
 
-    provides io.helidon.config.spi.ConfigMapperProvider with io.helidon.config.objectmapping.BeansConfigMapperProvider;
+    provides io.helidon.config.spi.ConfigMapperProvider with io.helidon.config.objectmapping.ObjectConfigMapperProvider;
 }

File: config/object-mapping/src/test/java/io/helidon/config/objectmapping/BuilderConfigMapperTest.java
Patch:
@@ -81,7 +81,7 @@ public void testTransientBuildMethod() {
 
     @Test
     public void testSettersBuilder() {
-        Config config = Config.from(ConfigSources.from(
+        Config config = Config.create(ConfigSources.create(
                 ConfigNode.ObjectNode.builder()
                         .addValue("app.number", "1")
                         .addValue("app.uri", "this:is/my?uri")
@@ -115,7 +115,7 @@ public void testSettersBuilder() {
 
     @Test
     public void testFieldsBuilder() {
-        Config config = Config.from(ConfigSources.from(
+        Config config = Config.create(ConfigSources.create(
                 ConfigNode.ObjectNode.builder()
                         .addValue("app.number", "1")
                         .addValue("app.uri", "this:is/my?uri")
@@ -149,7 +149,7 @@ public void testFieldsBuilder() {
 
     @Test
     public void testInterfaceBuilder() {
-        Config config = Config.from(ConfigSources.from(
+        Config config = Config.create(ConfigSources.create(
                 ConfigNode.ObjectNode.builder()
                         .addValue("app.number", "1")
                         .addValue("app.uri", "this:is/my?uri")

File: config/tests/integration-tests/src/test/java/io/helidon/config/tests/DemoTest.java
Patch:
@@ -25,7 +25,6 @@
 import io.helidon.config.ConfigMappingException;
 import io.helidon.config.ConfigParsers;
 import io.helidon.config.ConfigSources;
-import io.helidon.config.ConfigValues;
 import io.helidon.config.MissingValueException;
 import io.helidon.config.hocon.HoconConfigParserBuilder;
 
@@ -136,7 +135,7 @@ public void testNodeChildrenAndTraverse() {
     @Test
     public void testFallbackConfigSource() {
         Config config = Config.builder()
-                .sources(ConfigSources.from(
+                .sources(ConfigSources.create(
                         // PROPERTIES first
                         ConfigSources.classpath("application.properties"),
                         // with fallback to HOCON

File: config/tests/module-meta-source-1/src/main/java/io/helidon/config/tests/module/meta1/MyConfigSourceBuilder1.java
Patch:
@@ -80,7 +80,7 @@ public MyConfigSourceBuilder1 myProp3(boolean myProp3) {
     }
 
     @Override
-    protected MyEndpoint1 getTarget() {
+    protected MyEndpoint1 target() {
         return endpoint;
     }
 

File: config/tests/module-meta-source-2/src/main/java/io/helidon/config/tests/module/meta2/MyConfigSourceBuilder2.java
Patch:
@@ -80,7 +80,7 @@ public MyConfigSourceBuilder2 myProp3(boolean myProp3) {
     }
 
     @Override
-    protected MyEndpoint2 getTarget() {
+    protected MyEndpoint2 target() {
         return endpoint;
     }
 

File: config/tests/module-parsers-1-override/src/main/java/io/helidon/config/tests/module/parsers1/AbstractParsers1ConfigParser.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractParsers1ConfigParser implements ConfigParser {
     private static final String MEDIA_TYPE_TEXT_JAVA_PROPERTIES = "text/x-java-properties";
 
     @Override
-    public Set<String> getSupportedMediaTypes() {
+    public Set<String> supportedMediaTypes() {
         return CollectionsHelper.setOf(MEDIA_TYPE_TEXT_JAVA_PROPERTIES);
     }
 
@@ -48,7 +48,7 @@ public ConfigNode.ObjectNode parse(Content content) throws ConfigParserException
             throw new ConfigParserException("Cannot read from source.", e);
         }
         ConfigNode.ObjectNode.Builder rootBuilder = ConfigNode.ObjectNode.builder();
-        properties.stringPropertyNames().forEach(k -> addValue(rootBuilder, k, ValueNode.from(properties.getProperty(k))));
+        properties.stringPropertyNames().forEach(k -> addValue(rootBuilder, k, ValueNode.create(properties.getProperty(k))));
         return rootBuilder.build();
     }
 

File: config/tests/test-bundle/src/main/java/io/helidon/config/tests/bundle/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Integration tests of io.helidon.config.bundle module.
+ * Integration tests of io.helidon.bundles.config module.
  */
 package io.helidon.config.tests.bundle;

File: config/tests/test-bundle/src/main/java9/module-info.java
Patch:
@@ -15,9 +15,9 @@
  */
 
 /**
- * Integration tests of io.helidon.config.bundle module.
+ * Integration tests of io.helidon.bundles.config module.
  */
 module io.helidon.config.tests.bundle {
 
-    requires io.helidon.config.bundle;
+    requires io.helidon.bundles.config;
 }

File: config/tests/test-bundle/src/test/java/io/helidon/config/tests/bundle/SmokeTest.java
Patch:
@@ -36,7 +36,7 @@ public class SmokeTest {
     @Test
     public void testPropertiesParser() {
         Config config = Config.builder()
-                .sources(ConfigSources.from("key=value", "text/x-java-properties"))
+                .sources(ConfigSources.create("key=value", "text/x-java-properties"))
                 .build();
         assertThat(config.get("key").asString(), is(ConfigValues.simpleValue("value")));
     }

File: config/tests/test-mappers-1-common/src/test/java/io/helidon/config/tests/mappers1/AbstractMapperServicesTest.java
Patch:
@@ -33,7 +33,7 @@ public abstract class AbstractMapperServicesTest {
 
     protected Config.Builder configBuilder() {
         return Config.builder()
-                .sources(ConfigSources.from(CollectionsHelper.mapOf(
+                .sources(ConfigSources.create(CollectionsHelper.mapOf(
                         LOGGER_KEY, this.getClass().getName(),
                         LOCALE_KEY + ".language", "cs",
                         LOCALE_KEY + ".country", "CZ",

File: config/tests/test-mappers-2-complex/src/test/java/io/helidon/config/tests/mappers2/AbstractDifferentIntMapperServicesTest.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AbstractDifferentIntMapperServicesTest {
 
     protected Config.Builder configBuilder() {
         return Config.builder()
-                .sources(ConfigSources.from(CollectionsHelper.mapOf(KEY, CONFIGURED_VALUE)));
+                .sources(ConfigSources.create(CollectionsHelper.mapOf(KEY, CONFIGURED_VALUE)));
     }
 
     abstract protected int expected();

File: config/tests/test-mappers-2-complex/src/test/java/io/helidon/config/tests/mappers2/AbstractMapperServicesTest.java
Patch:
@@ -33,7 +33,7 @@ public abstract class AbstractMapperServicesTest {
 
     protected Config.Builder configBuilder() {
         return Config.builder()
-                .sources(ConfigSources.from(CollectionsHelper.mapOf(
+                .sources(ConfigSources.create(CollectionsHelper.mapOf(
                         LOGGER_KEY, this.getClass().getName(),
                         LOCALE_KEY + ".language", "cs",
                         LOCALE_KEY + ".country", "CZ",

File: config/tests/test-meta-source/src/test/java/io/helidon/config/tests/meta/CustomConfigSourceTypesTest.java
Patch:
@@ -40,7 +40,7 @@
 public class CustomConfigSourceTypesTest {
 
     private void testCustomType(String type, Class<? extends ConfigSource> sourceClass) {
-        Config metaConfig = justFrom(ConfigSources.from(
+        Config metaConfig = justFrom(ConfigSources.create(
                 ObjectNode.builder()
                         .addValue("type", type)
                         .addObject("properties", ObjectNode.builder()
@@ -50,7 +50,7 @@ private void testCustomType(String type, Class<? extends ConfigSource> sourceCla
                                 .build())
                         .build()));
 
-        ConfigSource source = metaConfig.as(ConfigSource::from).get();
+        ConfigSource source = metaConfig.as(ConfigSource::create).get();
 
         assertThat(source, is(instanceOf(sourceClass)));
 
@@ -91,7 +91,7 @@ public void testCustomTypeBuilder2() {
     }
 
     static Config justFrom(ConfigSource source) {
-        return Config.withSources(source)
+        return Config.builder(source)
                 .disableEnvironmentVariablesSource()
                 .disableSystemPropertiesSource()
                 .build();

File: config/tests/test-parsers-1-complex/src/test/java/io/helidon/config/tests/parsers1/AbstractParserServicesTest.java
Patch:
@@ -29,7 +29,7 @@ public abstract class AbstractParserServicesTest {
 
     protected Config.Builder configBuilder() {
         return Config.builder()
-                .sources(ConfigSources.from(KEY + "=" + VALUE, "text/x-java-properties"));
+                .sources(ConfigSources.create(KEY + "=" + VALUE, "text/x-java-properties"));
     }
 
 }

File: config/yaml/src/main/java/io/helidon/config/yaml/YamlConfigParserBuilder.java
Patch:
@@ -16,13 +16,14 @@
 
 package io.helidon.config.yaml;
 
+import io.helidon.common.Builder;
 import io.helidon.config.spi.ConfigParser;
 import io.helidon.config.yaml.internal.YamlConfigParser;
 
 /**
  * YAML ConfigParser Builder.
  */
-public final class YamlConfigParserBuilder {
+public final class YamlConfigParserBuilder implements Builder<ConfigParser> {
 
     private YamlConfigParserBuilder() {
     }
@@ -53,6 +54,7 @@ public static YamlConfigParserBuilder create() {
      *
      * @return new instance of YAML ConfigParser.
      */
+    @Override
     public ConfigParser build() {
         return new YamlConfigParser();
     }

File: config/yaml/src/main/java/io/helidon/config/yaml/internal/YamlConfigParser.java
Patch:
@@ -61,7 +61,7 @@ public class YamlConfigParser implements ConfigParser {
     private static final Set<String> SUPPORTED_MEDIA_TYPES = CollectionsHelper.setOf(MEDIA_TYPE_APPLICATION_YAML);
 
     @Override
-    public Set<String> getSupportedMediaTypes() {
+    public Set<String> supportedMediaTypes() {
         return SUPPORTED_MEDIA_TYPES;
     }
 

File: microprofile/config/config-cdi/src/main/java/io/helidon/microprofile/config/cdi/ConfigCdiExtension.java
Patch:
@@ -453,7 +453,7 @@ public Object create(CreationalContext<Object> context) {
             Object value = getConfigValue(context);
             if (null == value && qualifier.rawType().isPrimitive()) {
                 // primitive field, not configured, no default
-                throw MissingValueException.forKey(Config.Key.of(qualifier.key()));
+                throw MissingValueException.create(Config.Key.create(qualifier.key()));
             }
 
             return value;

File: microprofile/config/config-core/src/main/java/io/helidon/microprofile/config/MpConfig.java
Patch:
@@ -300,7 +300,7 @@ public <T> T convert(Class<T> type, String value) {
                     .disableSystemPropertiesSource()
                     .disableFilterServices()
                     .disableEnvironmentVariablesSource()
-                    .sources(ConfigSources.from(CollectionsHelper.mapOf("key", value)))
+                    .sources(ConfigSources.create(CollectionsHelper.mapOf("key", value)))
                     .build();
 
             try {
@@ -327,7 +327,7 @@ public Config getConfig() {
         return Config.builder()
                 .disableSystemPropertiesSource()
                 .disableEnvironmentVariablesSource()
-                .sources(ConfigSources.from(asMap()))
+                .sources(ConfigSources.create(asMap()))
                 .build();
     }
 

File: microprofile/config/config-core/src/main/java/io/helidon/microprofile/config/MpConfigBuilder.java
Patch:
@@ -371,7 +371,7 @@ private Type getTypeOfConverter(Class clazz) {
     }
 
     private OrdinalConfigSource wrapSource(ConfigSource source) {
-        io.helidon.config.spi.ConfigSource myCs = ConfigSources.from(source.getProperties()).build();
+        io.helidon.config.spi.ConfigSource myCs = ConfigSources.create(source.getProperties()).build();
 
         return new OrdinalConfigSource(myCs, source.getOrdinal());
     }

File: microprofile/metrics/metrics-se/src/test/java/io/helidon/metrics/RegistryFactoryTest.java
Patch:
@@ -54,7 +54,7 @@ public class RegistryFactoryTest {
     static void createInstance() {
         unconfigured = RegistryFactory.create();
         Config config = Config.builder()
-                .sources(ConfigSources.from(CollectionsHelper.mapOf(
+                .sources(ConfigSources.create(CollectionsHelper.mapOf(
                         "helidon.metrics.base." + METRIC_USED_HEAP + ".enabled",
                         "false")))
                 .build();

File: microprofile/tests/arquillian/src/main/java/io/helidon/microprofile/arquillian/HelidonDeployableContainer.java
Patch:
@@ -204,7 +204,7 @@ void startServer(RunContext context, URL[] classPath, Set<String> classNames)
                     Properties props = new Properties();
                     props.load(mpConfigProps.openStream());
                     configSources.clear();
-                    configSources.add(ConfigSources.from(props));
+                    configSources.add(ConfigSources.create(props));
                 } catch (IOException e) {
                     throw new RuntimeException(e);
                 }

File: security/tools/secure-config/src/main/java/io/helidon/security/tools/config/SecureConfigFilter.java
Patch:
@@ -171,7 +171,7 @@ private String aliased(String value, Config config) {
             // another_password=${ALIAS=service_password}
             String alias = removePlaceholder(PREFIX_ALIAS, value);
 
-            return config.get(alias).asString().orElseThrow(MissingValueException.supplierForKey(Config.Key.of(alias)));
+            return config.get(alias).asString().orElseThrow(MissingValueException.createSupplier(Config.Key.create(alias)));
         }
 
         return value;

File: security/tools/secure-config/src/test/java/io/helidon/security/tools/config/SecureConfigFromConfigTest.java
Patch:
@@ -37,9 +37,9 @@ public static void initClass() {
         config = Config.create();
 
         configRequiresEncryption = Config.builder()
-                .sources(ConfigSources.from(
+                .sources(ConfigSources.create(
                         //override require encryption
-                        ConfigSources.from(mapOf(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
+                        ConfigSources.create(mapOf(ConfigProperties.REQUIRE_ENCRYPTION_CONFIG_KEY, "true")),
                         ConfigSources.classpath("application.yaml")))
                 .build();
 

File: webserver/examples/comment-aas/src/main/java/io/helidon/webserver/examples/comments/Main.java
Patch:
@@ -72,9 +72,9 @@ private static Config loadConfig() {
                 .orElse("http://localhost:2379");
 
         return Config.builder()
-                     .sources(EtcdConfigSourceBuilder.from(URI.create(etcdUri),
-                                                           "comments-aas-config",
-                                                           EtcdConfigSourceBuilder.EtcdApi.v2)
+                     .sources(EtcdConfigSourceBuilder.create(URI.create(etcdUri),
+                                                             "comments-aas-config",
+                                                             EtcdConfigSourceBuilder.EtcdApi.v2)
                                                      .mediaType("application/x-yaml")
                                                      .optional()
                                                      .build(),

File: webserver/netty/src/test/java/io/helidon/webserver/netty/MultiPortTest.java
Patch:
@@ -273,7 +273,7 @@ public void compositeRedirectWebServer() throws Exception {
 
     @Test
     public void compositeFromConfig() throws Exception {
-        Config config = Config.from(ConfigSources.classpath("multiport/application.yaml"));
+        Config config = Config.create(ConfigSources.classpath("multiport/application.yaml"));
         webServer = WebServer.builder(Routing.builder()
                                              .get("/", (req, res) -> res.send("Plain!")))
                              .configuration(ServerConfiguration.fromConfig(config.get("webserver")))

File: webserver/webserver/src/test/java/io/helidon/webserver/ExperimentalConfigTest.java
Patch:
@@ -50,7 +50,7 @@ public void configBuilder() {
 
     @Test
     public void configResource() {
-        Config http2 = Config.from(ConfigSources.classpath("experimental/application.yaml"))
+        Config http2 = Config.create(ConfigSources.classpath("experimental/application.yaml"))
                 .get("webserver")
                 .get("experimental")
                 .get("http2");

File: examples/todos/demo-frontend/src/main/java/io/helidon/demo/todos/frontend/BackendServiceClient.java
Patch:
@@ -42,8 +42,8 @@
 import io.opentracing.util.GlobalTracer;
 
 import static io.helidon.security.jersey.ClientSecurityFeature.PROPERTY_CONTEXT;
-import static io.helidon.webserver.opentracing.OpentracingClientFilter.CURRENT_SPAN_CONTEXT_PROPERTY_NAME;
-import static io.helidon.webserver.opentracing.OpentracingClientFilter.TRACER_PROPERTY_NAME;
+import static io.helidon.tracing.jersey.client.ClientTracingFilter.CURRENT_SPAN_CONTEXT_PROPERTY_NAME;
+import static io.helidon.tracing.jersey.client.ClientTracingFilter.TRACER_PROPERTY_NAME;
 
 /**
  * Client to invoke the TODO backend service.

File: security/integration/jersey/src/main/java/io/helidon/security/jersey/ClientSecurityFilter.java
Patch:
@@ -74,8 +74,9 @@ private void doFilter(ClientRequestContext requestContext) throws IOException {
         SecurityContext context = (SecurityContext) requestContext.getProperty(ClientSecurityFeature.PROPERTY_CONTEXT);
 
         if (null == context) {
-            throw new SecurityException("SecurityContext must be configured as property \"" + ClientSecurityFeature
-                    .PROPERTY_CONTEXT + " on request");
+            LOGGER.finest("Security not propagated, as the property \""
+                                  + ClientSecurityFeature.PROPERTY_CONTEXT + "\" is not defined on request");
+            return;
         }
 
         Span span = context.getTracer()

File: webserver/examples/demo-translator-backend/src/main/java/io/helidon/webserver/examples/translator/backend/Application.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.webserver.examples.translator.backend;
 
-import io.helidon.webserver.opentracing.OpentracingContainerFilter;
+import io.helidon.tracing.jersey.TracingFilter;
 
 import org.glassfish.jersey.server.ResourceConfig;
 
@@ -30,6 +30,6 @@ public class Application extends ResourceConfig {
      */
     public Application() {
         packages(TranslatorResource.class.getPackage().getName());
-        register(OpentracingContainerFilter.class);
+        register(TracingFilter.class);
     }
 }

File: webserver/examples/demo-translator-frontend/src/main/java/io/helidon/webserver/examples/translator/frontend/Application.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.helidon.webserver.examples.translator.frontend;
 
-import io.helidon.webserver.opentracing.OpentracingContainerFilter;
+import io.helidon.tracing.jersey.TracingFilter;
 
 import org.glassfish.hk2.utilities.binding.AbstractBinder;
 import org.glassfish.jersey.server.ResourceConfig;
@@ -42,7 +42,7 @@ protected void configure() {
 
             }
         });
-        register(OpentracingContainerFilter.class);
+        register(TracingFilter.class);
         packages(TranslatorResource.class.getPackage().getName());
     }
 }

File: webserver/zipkin/src/main/java/io/helidon/webserver/opentracing/Opentraceable.java
Patch:
@@ -80,11 +80,14 @@
  * </code></pre>
  *
  * @see OpentracingClientFilter
+ * @deprecated use helidon-tracing-jersey-client instead - that adds support for tracing to each and every
+ *          outbound call. Constants for properties are in io.helidon.tracing.jersey.client.TracingClientFilter
  */
 @ClientBinding(configClass = Opentraceable.Config.class)
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD, ElementType.PARAMETER})
+@Deprecated
 public @interface Opentraceable {
 
     /** Client config with registered {@link OpentracingClientFilter}. */

File: webserver/zipkin/src/main/java/io/helidon/webserver/opentracing/OpentracingClientFilter.java
Patch:
@@ -69,7 +69,9 @@
  * If {@link Tracer} doesn't get resolved, a warning is logged.
  *
  * @see Opentraceable
+ * @deprecated use TracingClientFilter from helidon-tracing-jersey-client
  */
+@Deprecated
 public class OpentracingClientFilter implements ClientRequestFilter, ClientResponseFilter {
 
     private static final Logger LOGGER = Logger.getLogger(OpentracingClientFilter.class.getName());

File: webserver/zipkin/src/main/java/io/helidon/webserver/opentracing/OpentracingContainerFilter.java
Patch:
@@ -48,10 +48,13 @@
  *     }
  * }
  * </code></pre>
+ *
+ * @deprecated use TracingFilter in helidon-tracing-jersey instead
  */
 @ConstrainedTo(RuntimeType.SERVER)
 @PreMatching
 @Priority(Integer.MIN_VALUE)
+@Deprecated
 public class OpentracingContainerFilter implements ContainerRequestFilter, ContainerResponseFilter {
 
     @Inject

File: webserver/zipkin/src/main/java/io/helidon/webserver/zipkin/ZipkinSpan.java
Patch:
@@ -27,7 +27,9 @@
  *
  * @see <a href="http://zipkin.io/pages/instrumenting.html#core-data-structures">Zipkin Attributes</a>
  * @see <a href="https://github.com/openzipkin/zipkin/issues/962">Zipkin Missing Service Name</a>
+ * @deprecated Use io.helidon.tracing:helidon-tracing-zipkin instead
  */
+@Deprecated
 class ZipkinSpan implements Span {
     private final Span span;
 

File: webserver/zipkin/src/main/java/io/helidon/webserver/zipkin/ZipkinSpanBuilder.java
Patch:
@@ -27,7 +27,9 @@
  *
  * @see <a href="http://zipkin.io/pages/instrumenting.html#core-data-structures">Zipkin Attributes</a>
  * @see <a href="https://github.com/openzipkin/zipkin/issues/962">Zipkin Missing Service Name</a>
+ * @deprecated Use io.helidon.tracing:helidon-tracing-zipkin instead
  */
+@Deprecated
 class ZipkinSpanBuilder implements Tracer.SpanBuilder {
     private final Tracer.SpanBuilder spanBuilder;
 

File: webserver/zipkin/src/main/java/io/helidon/webserver/zipkin/ZipkinTracer.java
Patch:
@@ -30,7 +30,9 @@
  * @see <a href="http://zipkin.io/pages/instrumenting.html#core-data-structures">Zipkin Attributes</a>
  * @see <a href="https://github.com/openzipkin/zipkin/issues/962">Zipkin Missing Service Name</a>
  * @see ZipkinSpanBuilder
+ * @deprecated Use io.helidon.tracing:helidon-tracing-zipkin instead
  */
+@Deprecated
 class ZipkinTracer implements Tracer {
     private final BraveTracer tracer;
 

File: webserver/zipkin/src/main/java/io/helidon/webserver/zipkin/ZipkinTracerBuilder.java
Patch:
@@ -41,7 +41,9 @@
  *
  * @see <a href="http://zipkin.io/pages/instrumenting.html#core-data-structures">Zipkin Attributes</a>
  * @see <a href="https://github.com/openzipkin/zipkin/issues/962">Zipkin Missing Service Name</a>
+ * @deprecated Use io.helidon.tracing:helidon-tracing-zipkin instead
  */
+@Deprecated
 public final class ZipkinTracerBuilder implements Builder<Tracer> {
 
     private static final Logger LOGGER = Logger.getLogger(ZipkinTracerBuilder.class.getName());

File: config/bundle/src/main/java9/module-info.java
Patch:
@@ -18,9 +18,8 @@
  * Config Bundle module.
  */
 module io.helidon.config.bundle {
-
     requires transitive io.helidon.config;
+    requires transitive io.helidon.config.objectmapping;
     requires transitive io.helidon.config.hocon;
     requires transitive io.helidon.config.yaml;
-
 }

File: config/config/src/main/java/io/helidon/config/ConfigFactory.java
Patch:
@@ -151,7 +151,7 @@ private Config createConfig(ConfigKeyImpl prefix, ConfigKeyImpl key) {
         ConfigNode value = fullKeyToNodeMap.get(prefix.child(key));
 
         if (null == value) {
-            return new ConfigMissingImpl(prefix, key, this);
+            return new ConfigMissingImpl(prefix, key, this, mapperManager);
         }
 
         switch (value.getNodeType()) {
@@ -160,9 +160,9 @@ private Config createConfig(ConfigKeyImpl prefix, ConfigKeyImpl key) {
         case LIST:
             return new ConfigListImpl(prefix, key, (ListNode) value, filter, this, mapperManager);
         case VALUE:
-            return new ConfigValueImpl(prefix, key, (ValueNode) value, filter, this, mapperManager);
+            return new ConfigLeafImpl(prefix, key, (ValueNode) value, filter, this, mapperManager);
         default:
-            return new ConfigMissingImpl(prefix, key, this);
+            return new ConfigMissingImpl(prefix, key, this, mapperManager);
         }
     }
 

File: config/config/src/main/java/io/helidon/config/ConfigFilters.java
Patch:
@@ -89,7 +89,7 @@ private ValueResolvingBuilder() {
          */
         public static ValueResolvingBuilder from(Config metaConfig) throws ConfigMappingException, MissingValueException {
             ValueResolvingBuilder builder = new ValueResolvingBuilder();
-            builder.failOnMissingReference(metaConfig.get(FAIL_ON_MISSING_REFERENCE_KEY_NAME).asBoolean(false));
+            builder.failOnMissingReference(metaConfig.get(FAIL_ON_MISSING_REFERENCE_KEY_NAME).asBoolean().orElse(false));
             return builder;
         }
 

File: config/config/src/main/java/io/helidon/config/MissingValueException.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Exception representing a specific failures related to a missing configuration value.
  */
-public class MissingValueException extends ConfigException {
+public final class MissingValueException extends ConfigException {
 
     private static final long serialVersionUID = 1L;
 

File: config/config/src/main/java/io/helidon/config/PollingStrategies.java
Patch:
@@ -105,7 +105,7 @@ public static final class ScheduledBuilder implements Supplier<PollingStrategy>
          * @see PollingStrategies#regular(Duration)
          */
         public static ScheduledBuilder from(Config metaConfig) throws ConfigMappingException, MissingValueException {
-            return PollingStrategies.regular(metaConfig.get(INTERVAL_KEY).as(Duration.class));
+            return PollingStrategies.regular(metaConfig.get(INTERVAL_KEY).as(Duration.class).get());
         }
 
         /**

File: config/config/src/main/java/io/helidon/config/internal/ClasspathConfigSource.java
Patch:
@@ -78,7 +78,7 @@ public class ClasspathConfigSource extends AbstractParsableConfigSource<Instant>
      * @see AbstractParsableConfigSource.Builder#init(Config)
      */
     public static ClasspathConfigSource from(Config metaConfig) throws ConfigMappingException, MissingValueException {
-        return (ClasspathConfigSource) new ClasspathBuilder(metaConfig.get(RESOURCE_KEY).asString())
+        return (ClasspathConfigSource) new ClasspathBuilder(metaConfig.get(RESOURCE_KEY).asString().get())
                 .init(metaConfig)
                 .build();
     }

File: config/config/src/main/java/io/helidon/config/internal/ConfigKeyImpl.java
Patch:
@@ -107,6 +107,7 @@ public ConfigKeyImpl child(String key) {
      * @param key sub-key
      * @return new child instance of ConfigKeyImpl.
      */
+    @Override
     public ConfigKeyImpl child(Config.Key key) {
         final List<String> path;
         if (key instanceof ConfigKeyImpl) {

File: config/config/src/main/java/io/helidon/config/internal/DirectoryConfigSource.java
Patch:
@@ -69,7 +69,7 @@ public class DirectoryConfigSource extends AbstractConfigSource<Instant> {
      * @see io.helidon.config.spi.AbstractParsableConfigSource.Builder#init(Config)
      */
     public static DirectoryConfigSource from(Config metaConfig) throws ConfigMappingException, MissingValueException {
-        return (DirectoryConfigSource) new DirectoryBuilder(metaConfig.get(PATH_KEY).as(Path.class))
+        return (DirectoryConfigSource) new DirectoryBuilder(metaConfig.get(PATH_KEY).as(Path.class).get())
                 .init(metaConfig)
                 .build();
     }

File: config/config/src/main/java/io/helidon/config/internal/FileConfigSource.java
Patch:
@@ -72,7 +72,7 @@ public class FileConfigSource extends AbstractParsableConfigSource<byte[]> {
      * @see AbstractParsableConfigSource.Builder#init(Config)
      */
     public static FileConfigSource from(Config metaConfig) throws ConfigMappingException, MissingValueException {
-        return (FileConfigSource) new FileBuilder(metaConfig.get(PATH_KEY).as(Path.class))
+        return (FileConfigSource) new FileBuilder(metaConfig.get(PATH_KEY).as(Path.class).get())
                 .init(metaConfig)
                 .build();
     }

File: config/config/src/main/java/io/helidon/config/internal/UrlConfigSource.java
Patch:
@@ -78,7 +78,7 @@ public class UrlConfigSource extends AbstractParsableConfigSource<Instant> {
      * @see AbstractParsableConfigSource.Builder#init(Config)
      */
     public static UrlConfigSource from(Config metaConfig) throws ConfigMappingException, MissingValueException {
-        return (UrlConfigSource) new UrlBuilder(metaConfig.get(URL_KEY).as(URL.class))
+        return (UrlConfigSource) new UrlBuilder(metaConfig.get(URL_KEY).as(URL.class).get())
                 .init(metaConfig)
                 .build();
     }

File: config/config/src/main/java/io/helidon/config/spi/AbstractConfigSource.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
-import java.util.function.Supplier;
 
 import io.helidon.common.OptionalHelper;
 import io.helidon.common.reactive.Flow;
@@ -151,7 +150,7 @@ public final Flow.Publisher<Optional<ObjectNode>> changes() {
      */
     public abstract static class Builder<B extends Builder<B, T>, T>
             extends AbstractSource.Builder<B, T, ConfigSource>
-            implements Supplier<ConfigSource> {
+            implements io.helidon.common.Builder<ConfigSource> {
 
         private static final String MEDIA_TYPE_MAPPING_KEY = "media-type-mapping";
         private final B thisBuilder;
@@ -193,7 +192,7 @@ public ConfigSource get() {
         @Override
         protected B init(Config metaConfig) {
             //media-type-mapping
-            metaConfig.get(MEDIA_TYPE_MAPPING_KEY).detach().asOptionalMap()
+            metaConfig.get(MEDIA_TYPE_MAPPING_KEY).detach().asMap()
                     .ifPresent(this::initMediaTypeMapping);
 
             return super.init(metaConfig);

File: config/config/src/main/java/io/helidon/config/spi/AbstractParsableConfigSource.java
Patch:
@@ -157,7 +157,7 @@ protected Builder(Class<T> targetType) {
         @Override
         protected B init(Config metaConfig) {
             //media-type
-            metaConfig.get(MEDIA_TYPE_KEY).asOptionalString()
+            metaConfig.get(MEDIA_TYPE_KEY).asString()
                     .ifPresent(this::mediaType);
 
             return super.init(metaConfig);

File: config/config/src/main/java/io/helidon/config/spi/PollingStrategy.java
Patch:
@@ -114,7 +114,7 @@
  * <p>
  * The implementation class should define a Java bean property for each
  * meta-configuration property it needs to support. The config system uses
- * {@link io.helidon.config.ConfigMapper}s to convert the text in the
+ * mapping functions to convert the text in the
  * meta-configuration into the correct Java type and then assigns the value to
  * the correspondingly-named Java bean property defined on the custom strategy
  * instance. See the built-in mappers defined in

File: config/config/src/main/java/io/helidon/config/spi/RetryPolicy.java
Patch:
@@ -98,7 +98,7 @@ public interface RetryPolicy extends Supplier<RetryPolicy> {
      * <p>
      * The implementation class should define a Java bean property for each
      * meta-configuration property it needs to support. The config system uses
-     * {@link io.helidon.config.ConfigMapper}s to convert the text in the
+     * mapping functions to convert the text in the
      * meta-configuration into the correct Java type and then assigns the value
      * to the correspondingly-named Java bean property defined on the custom
      * policy instance. See the built-in mappers defined in

File: config/config/src/main/java9/module-info.java
Patch:
@@ -20,11 +20,10 @@
 module io.helidon.config {
 
     requires java.logging;
-    requires jdk.unsupported;
 
     requires transitive java.annotation;
 
-    requires io.helidon.common;
+    requires transitive io.helidon.common;
     requires transitive io.helidon.common.reactive;
 
     exports io.helidon.config;

File: config/config/src/test/java/io/helidon/config/AssertingFilter.java
Patch:
@@ -50,7 +50,7 @@ private void test() {
         if (expectedValueDuringInit != null) {
             assertThat(String.format("AssertingFilter.test failed for key %s, old value %s, and new value %s",
                     key, oldValue, newValue.get()),
-                 rootConfig.get(key).asString(), CoreMatchers.is(expectedValueDuringInit));
+                       rootConfig.get(key).asString().get(), CoreMatchers.is(expectedValueDuringInit));
         }
     }
 

File: config/config/src/test/java/io/helidon/config/ConfigAsciidocGenerator.java
Patch:
@@ -114,7 +114,7 @@ public static String generateBuiltinMappers() {
     }
 
     private static List<String> builtinMappers() {
-        Map<Class<?>, ConfigMapper<?>> mappers = new HashMap<>();
+        Map<Class<?>, Function<Config, ?>> mappers = new HashMap<>();
         mappers.putAll(ConfigMappers.essentialMappers());
         mappers.putAll(ConfigMappers.builtInMappers());
 
@@ -215,7 +215,7 @@ private static void processMethods(StringBuffer buffer,
             //map a single value
             SortedMap<KindDesc, Map<AccessType, MethodDesc>> methods = new TreeMap<>();
             final List<KindDesc> kinds = CollectionsHelper.listOf(new KindDesc("Simple `Function` (`T`)", Function.class),
-                                                 new KindDesc("Complex `ConfigMapper` (`T`)", ConfigMapper.class));
+                                                 new KindDesc("Complex `ConfigMapper` (`T`)", Function.class));
 
             allAccessorMethods.stream()
                     .filter(mapMethodsFilter)
@@ -229,7 +229,7 @@ private static void processMethods(StringBuffer buffer,
             //map a list of values
             SortedMap<KindDesc, Map<AccessType, MethodDesc>> methods = new TreeMap<>();
             final List<KindDesc> kinds = CollectionsHelper.listOf(new KindDesc("Simple `Function` (`List<T>`)", Function.class),
-                                                 new KindDesc("Complex `ConfigMapper` (`List<T>`)", ConfigMapper.class));
+                                                 new KindDesc("Complex `ConfigMapper` (`List<T>`)", Function.class));
 
             allAccessorMethods.stream()
                     .filter(mapMethodsFilter)

File: config/config/src/test/java/io/helidon/config/TestingConfigChangeSubscriber.java
Patch:
@@ -17,7 +17,7 @@
 package io.helidon.config;
 
 /**
- * Testing implementation of {@link Flow.Subscriber} on {@link Config#changes()} events.
+ * Testing implementation of {@link io.helidon.common.reactive.Flow.Subscriber} on {@link Config#changes()} events.
  */
 public class TestingConfigChangeSubscriber extends TestingSubscriber<Config> {
 }

File: config/config/src/test/java/io/helidon/config/TestingConfigSourceChangeSubscriber.java
Patch:
@@ -22,7 +22,7 @@
 import io.helidon.config.spi.ConfigSource;
 
 /**
- * Testing implementation of {@link Flow.Subscriber} on {@link ConfigSource#changes()} events.
+ * Testing implementation of {@link io.helidon.common.reactive.Flow.Subscriber} on {@link ConfigSource#changes()} events.
  */
 public class TestingConfigSourceChangeSubscriber extends TestingSubscriber<Optional<ObjectNode>> {
 }

File: config/etcd/src/main/java/io/helidon/config/etcd/EtcdWatchPollingStrategy.java
Patch:
@@ -27,7 +27,6 @@
 import io.helidon.config.etcd.EtcdConfigSourceBuilder.EtcdEndpoint;
 import io.helidon.config.etcd.internal.client.EtcdClient;
 import io.helidon.config.etcd.internal.client.EtcdClientException;
-import io.helidon.config.etcd.internal.client.EtcdUtils;
 import io.helidon.config.spi.PollingStrategy;
 
 /**
@@ -51,7 +50,9 @@ public class EtcdWatchPollingStrategy implements PollingStrategy {
      */
     public EtcdWatchPollingStrategy(EtcdEndpoint endpoint) {
         this.endpoint = endpoint;
-        etcdClient = EtcdUtils.getClient(EtcdUtils.getClientClass(endpoint.getApi()), endpoint.getUri());
+        etcdClient = endpoint.getApi()
+                .clientFactory()
+                .createClient(endpoint.getUri());
 
         ticksSubmitter = new SubmissionPublisher<>(Runnable::run, //deliver events on current thread
                                                    1); //(almost) do not buffer events

File: config/etcd/src/main/java/io/helidon/config/etcd/internal/client/v2/EtcdV2Client.java
Patch:
@@ -53,7 +53,7 @@ public class EtcdV2Client implements EtcdClient {
      *
      * @param uri target Etcd uri
      */
-    public EtcdV2Client(URI uri) {
+    EtcdV2Client(URI uri) {
         etcd = new mousio.etcd4j.EtcdClient(uri);
         etcd.setRetryHandler(new RetryWithTimeout(100, 2000));
     }
@@ -93,7 +93,7 @@ public void put(String key, String value) throws EtcdClientException {
         try {
             etcd.put(key, value).timeout(1, TimeUnit.SECONDS).send().get();
         } catch (IOException | EtcdException | TimeoutException | EtcdAuthenticationException e) {
-            throw new EtcdClientException("Cannot put KV pair under " + key);
+            throw new EtcdClientException("Cannot put KV pair under " + key, e);
         }
     }
 

File: config/examples/git/src/main/java/io/helidon/config/examples/git/Main.java
Patch:
@@ -50,11 +50,10 @@ public static void main(String... args) throws IOException {
         Config config = Config.from(
                 from("application.conf")
                         .uri(URI.create("https://github.com/okosatka/test-config.git"))
-                        .branch(env.get(ENVIRONMENT_NAME_PROPERTY).asString("master"))
+                        .branch(env.get(ENVIRONMENT_NAME_PROPERTY).asString().orElse("master"))
                         .build());
 
-        assert config.get("greeting").asString().equals("hello");
-
+        assert config.get("greeting").asString().get().equals("hello");
     }
 
 }

File: config/examples/sources/src/main/java/io/helidon/config/examples/sources/DirectorySourceExample.java
Patch:
@@ -43,11 +43,11 @@ public static void main(String... args) {
                 .disableSystemPropertiesSource()
                 .build();
 
-        String username = secrets.get("username").asString();
+        String username = secrets.get("username").asString().get();
         System.out.println("Username: " + username);
         assert username.equals("libor");
 
-        String password = secrets.get("password").asString();
+        String password = secrets.get("password").asString().get();
         System.out.println("Password: " + password);
         assert password.equals("^ery$ecretP&ssword");
     }

File: webserver/webserver/src/main/java/io/helidon/webserver/StaticContentSupport.java
Patch:
@@ -31,7 +31,7 @@
  * <pre>{@code
  * // Server content of attached '/static/pictures' on '/pictures'
  * Routing.builder()
- *        .register("/pics", StaticContent.create("/static/pictures"))
+ *        .register("/pics", StaticContentSupport.create("/static/pictures"))
  *        .build()
  * }</pre>
  * <p>

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/BulkheadAntn.java
Patch:
@@ -29,10 +29,11 @@ public class BulkheadAntn extends MethodAntn implements Bulkhead {
     /**
      * Constructor.
      *
+     * @param beanClass Bean class.
      * @param method The method.
      */
-    public BulkheadAntn(Method method) {
-        super(method);
+    public BulkheadAntn(Class<?> beanClass, Method method) {
+        super(beanClass, method);
     }
 
     @Override

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CircuitBreakerAntn.java
Patch:
@@ -30,10 +30,11 @@ public class CircuitBreakerAntn extends MethodAntn implements CircuitBreaker {
     /**
      * Constructor.
      *
+     * @param beanClass The bean class.
      * @param method The method.
      */
-    public CircuitBreakerAntn(Method method) {
-        super(method);
+    public CircuitBreakerAntn(Class<?> beanClass, Method method) {
+        super(beanClass, method);
     }
 
     @Override

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CommandInterceptor.java
Patch:
@@ -48,7 +48,8 @@ public Object interceptCommand(InvocationContext context) throws Throwable {
                         + "::" + context.getMethod().getName() + "'");
 
             // Create method introspector and executer retrier
-            final MethodIntrospector introspector = new MethodIntrospector(context.getMethod());
+            final MethodIntrospector introspector = new MethodIntrospector(
+                    context.getTarget().getClass(), context.getMethod());
             final CommandRetrier retrier = new CommandRetrier(context, introspector);
             return retrier.execute();
         } catch (Throwable t) {

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/RetryAntn.java
Patch:
@@ -30,10 +30,11 @@ public class RetryAntn extends MethodAntn implements Retry {
     /**
      * Constructor.
      *
+     * @param beanClass Bean class.
      * @param method The method.
      */
-    public RetryAntn(Method method) {
-        super(method);
+    public RetryAntn(Class<?> beanClass, Method method) {
+        super(beanClass, method);
     }
 
     @Override

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/TimeoutAntn.java
Patch:
@@ -30,10 +30,11 @@ public class TimeoutAntn extends MethodAntn implements Timeout {
     /**
      * Constructor.
      *
+     * @param beanClass Bean class.
      * @param method The method.
      */
-    public TimeoutAntn(Method method) {
-        super(method);
+    public TimeoutAntn(Class<?> beanClass, Method method) {
+        super(beanClass, method);
     }
 
     @Override

File: webserver/webserver/src/main/java/io/helidon/webserver/RouteListRoutingRules.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * A {@link Routing.Rules} implementation collecting all routings into single {@link RouteList}.
  */
-class RouteListRoutingRules implements Routing.Rules<RouteListRoutingRules> {
+class RouteListRoutingRules implements Routing.Rules {
 
     private final List<Record> records = new ArrayList<>();
     private final List<Consumer<WebServer>> newWebServerCallbacks = new ArrayList<>();

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/BulkheadAntn.java
Patch:
@@ -29,6 +29,7 @@ public class BulkheadAntn extends MethodAntn implements Bulkhead {
     /**
      * Constructor.
      *
+     * @param beanClass Bean class.
      * @param method The method.
      */
     public BulkheadAntn(Class<?> beanClass, Method method) {

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CircuitBreakerAntn.java
Patch:
@@ -30,6 +30,7 @@ public class CircuitBreakerAntn extends MethodAntn implements CircuitBreaker {
     /**
      * Constructor.
      *
+     * @param beanClass The bean class.
      * @param method The method.
      */
     public CircuitBreakerAntn(Class<?> beanClass, Method method) {

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FallbackAntn.java
Patch:
@@ -33,6 +33,7 @@ public class FallbackAntn extends MethodAntn implements Fallback {
     /**
      * Constructor.
      *
+     * @param beanClass Bean class.
      * @param method The method.
      */
     public FallbackAntn(Class<?> beanClass, Method method) {

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/MethodAntn.java
Patch:
@@ -70,18 +70,19 @@ public A getAnnotation() {
     /**
      * Constructor.
      *
+     * @param beanClass Bean class.
      * @param method The method.
      */
     public MethodAntn(Class<?> beanClass, Method method) {
         this.beanClass = beanClass;
         this.method = method;
     }
 
-    public Method method() {
+    Method method() {
         return method;
     }
 
-    public Class<?> beanClass() {
+    Class<?> beanClass() {
         return beanClass;
     }
 

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/RetryAntn.java
Patch:
@@ -30,6 +30,7 @@ public class RetryAntn extends MethodAntn implements Retry {
     /**
      * Constructor.
      *
+     * @param beanClass Bean class.
      * @param method The method.
      */
     public RetryAntn(Class<?> beanClass, Method method) {

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/TimeoutAntn.java
Patch:
@@ -30,6 +30,7 @@ public class TimeoutAntn extends MethodAntn implements Timeout {
     /**
      * Constructor.
      *
+     * @param beanClass Bean class.
      * @param method The method.
      */
     public TimeoutAntn(Class<?> beanClass, Method method) {

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CommandFallback.java
Patch:
@@ -26,6 +26,8 @@
 import org.eclipse.microprofile.faulttolerance.Fallback;
 import org.eclipse.microprofile.faulttolerance.FallbackHandler;
 
+import static io.helidon.microprofile.faulttolerance.ExceptionUtil.toException;
+
 /**
  * Class CommandFallback.
  */
@@ -109,7 +111,7 @@ public Throwable getFailure() {
             if (t instanceof InvocationTargetException) {
                 t = t.getCause();
             }
-            throw t instanceof Exception ? (Exception) t : new RuntimeException(t);
+            throw toException(t);
         }
 
         updateMetrics(null);

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/MetricsTest.java
Patch:
@@ -17,6 +17,7 @@
 package io.helidon.microprofile.faulttolerance;
 
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Future;
 
 import org.eclipse.microprofile.faulttolerance.exceptions.CircuitBreakerOpenException;
 import org.eclipse.microprofile.metrics.Metadata;
@@ -250,9 +251,9 @@ public void testFallbackMetrics() throws Exception {
     @Test
     public void testBulkheadMetrics() throws Exception {
         MetricsBean bean = newBean(MetricsBean.class);
-        CompletableFuture<String>[] calls = getConcurrentCalls(
+        Future<String>[] calls = getAsyncConcurrentCalls(
             () -> bean.concurrent(100), BulkheadBean.MAX_CONCURRENT_CALLS);
-        CompletableFuture.allOf(calls).get();
+        getThreadNames(calls);
         assertEquals(0L,
                      getGauge(bean, "concurrent",
                               BULKHEAD_CONCURRENT_EXECUTIONS, long.class).getValue());

File: webserver/webserver/src/main/java/io/helidon/webserver/RouteListRoutingRules.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * A {@link Routing.Rules} implementation collecting all routings into single {@link RouteList}.
  */
-class RouteListRoutingRules implements Routing.Rules<RouteListRoutingRules> {
+class RouteListRoutingRules implements Routing.Rules {
 
     private final List<Record> records = new ArrayList<>();
     private final List<Consumer<WebServer>> newWebServerCallbacks = new ArrayList<>();

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceMetrics.java
Patch:
@@ -17,7 +17,6 @@
 package io.helidon.microprofile.faulttolerance;
 
 import java.lang.reflect.Method;
-import java.util.logging.Logger;
 
 import javax.enterprise.inject.spi.CDI;
 

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/MetricsTest.java
Patch:
@@ -253,13 +253,13 @@ public void testBulkheadMetrics() throws Exception {
         CompletableFuture<String>[] calls = getConcurrentCalls(
             () -> bean.concurrent(100), BulkheadBean.MAX_CONCURRENT_CALLS);
         CompletableFuture.allOf(calls).get();
-        assertEquals(0,
+        assertEquals(0L,
                      getGauge(bean, "concurrent",
                               BULKHEAD_CONCURRENT_EXECUTIONS, long.class).getValue());
         assertEquals(BulkheadBean.MAX_CONCURRENT_CALLS,
                      getCounter(bean, "concurrent",
                                 BULKHEAD_CALLS_ACCEPTED_TOTAL, long.class));
-        assertEquals(0,
+        assertEquals(0L,
                      getCounter(bean, "concurrent",
                                 BULKHEAD_CALLS_REJECTED_TOTAL, long.class));
         assertEquals(BulkheadBean.MAX_CONCURRENT_CALLS,

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceCommand.java
Patch:
@@ -167,12 +167,12 @@ public FaultToleranceCommand(String commandKey, MethodIntrospector introspector,
                 FaultToleranceMetrics.registerGauge(introspector.getMethod(),
                         FaultToleranceMetrics.BULKHEAD_CONCURRENT_EXECUTIONS,
                         "Number of currently running executions",
-                        () -> bulkheadHelper.runningInvocations());
+                        () -> (long) bulkheadHelper.runningInvocations());
                 if (introspector.isAsynchronous()) {
                     FaultToleranceMetrics.registerGauge(introspector.getMethod(),
                             FaultToleranceMetrics.BULKHEAD_WAITING_QUEUE_POPULATION,
                             "Number of executions currently waiting in the queue",
-                            () -> bulkheadHelper.waitingInvocations());
+                            () -> (long) bulkheadHelper.waitingInvocations());
                 }
             }
         }

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/MethodIntrospector.java
Patch:
@@ -57,7 +57,7 @@ class MethodIntrospector {
         this.method = method;
 
         // Only process annotations if FT is enabled
-        if (FaultToleranceExtension.isIsFaultToleranceEnabled()) {
+        if (FaultToleranceExtension.isFaultToleranceEnabled()) {
             this.retry = isAnnotationPresent(Retry.class) ? new RetryAntn(method) : null;
             this.circuitBreaker = isAnnotationPresent(CircuitBreaker.class) ? new CircuitBreakerAntn(method) : null;
             this.timeout = isAnnotationPresent(Timeout.class) ? new TimeoutAntn(method) : null;

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CommandRetrier.java
Patch:
@@ -119,15 +119,15 @@ public CommandRetrier(InvocationContext context, MethodIntrospector introspector
     public Object execute() {
         LOGGER.fine("Executing command with isAsynchronous = " + isAsynchronous);
 
-        CheckedFunction fallbackFunction = t -> {
-            final CommandFallback fallback = new CommandFallback(context, introspector);
+        CheckedFunction<? extends Throwable, ?> fallbackFunction = t -> {
+            final CommandFallback fallback = new CommandFallback(context, introspector, t);
             return fallback.execute();
         };
 
         if (isAsynchronous) {
             Scheduler scheduler = CommandScheduler.create();
             AsyncFailsafe<Object> failsafe = Failsafe.with(retryPolicy).with(scheduler);
-            FailsafeFuture<?> chainedFuture = (FailsafeFuture<?>) (introspector.hasFallback()
+            FailsafeFuture<?> chainedFuture = (introspector.hasFallback()
                                ? failsafe.withFallback(fallbackFunction).get(this::retryExecute)
                                : failsafe.get(this::retryExecute));
             return new FailsafeChainedFuture<>(chainedFuture);

File: config/config/src/main/java/io/helidon/config/ConfigMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: microprofile/security/src/main/java9/module-info.java
Patch:
@@ -21,6 +21,7 @@
     requires java.logging;
 
     requires transitive io.helidon.security;
+    requires io.helidon.security.provider.abac;
     requires transitive io.helidon.security.adapter.jersey;
     requires transitive io.helidon.security.adapter.webserver;
     requires io.helidon.mp.server;

File: microprofile/server/src/main/java/io/helidon/microprofile/server/JaxRsApplication.java
Patch:
@@ -134,6 +134,7 @@ public Builder config(ResourceConfig config) {
          */
         public Builder application(Application app) {
             this.config = toConfig(app);
+
             if (null == this.contextRoot) {
                 this.contextRoot = getContextRoot(app.getClass());
             }

File: security/providers/jwt-provider/src/main/java/io/helidon/security/provider/jwt/JwtProvider.java
Patch:
@@ -444,6 +444,9 @@ public static class Builder implements io.helidon.common.Builder<JwtProvider> {
         private String issuer;
         private String expectedAudience;
 
+        private Builder() {
+        }
+
         @Override
         public JwtProvider build() {
             return new JwtProvider(this);

File: security/security/src/main/java/io/helidon/security/EndpointConfig.java
Patch:
@@ -49,7 +49,7 @@
  * @see SecurityProvider#supportedConfigKeys
  * @see SecurityProvider#supportedAttributes
  */
-public final class EndpointConfig implements AbacSupport {
+public class EndpointConfig implements AbacSupport {
     private final Map<AnnotationScope, Map<Class<? extends Annotation>, List<Annotation>>> annotations;
     private final AbacSupport attributes;
     private final ClassToInstanceStore<Object> customObjects;

File: security/security/src/main/java/io/helidon/security/spi/SecurityProvider.java
Patch:
@@ -79,4 +79,5 @@ default Collection<Class<? extends ProviderConfig>> supportedCustomObjects() {
     default Collection<String> supportedAttributes() {
         return CollectionsHelper.setOf();
     }
+
 }

File: examples/guides/mp-restful-webservice/src/main/java/io/helidon/guides/mp/restfulwebservice/GreetingMessage.java
Patch:
@@ -17,10 +17,12 @@
 
 // tag::mainImports[]
 import java.util.concurrent.atomic.AtomicReference;
+
 import javax.enterprise.context.ApplicationScoped;
 import javax.inject.Inject;
 // end::mainImports[]
 // tag::mpImports[]
+
 import org.eclipse.microprofile.config.inject.ConfigProperty;
 // end::mpImports[]
 

File: examples/guides/mp-restful-webservice/src/main/java/io/helidon/guides/mp/restfulwebservice/HealthResource.java
Patch:
@@ -69,7 +69,7 @@ public Response alive() {
 
     /**
      * Implements a very simple readiness check.
-     * @return
+     * @return response (200)
      */
     // tag::readyMethod[]
     @SuppressWarnings("checkstyle:designforextension")

File: microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/CommandRetrier.java
Patch:
@@ -84,8 +84,8 @@ public CommandRetrier(InvocationContext context, MethodIntrospector introspector
 
             // Processing for jitter and delay
             if (retry.jitter() > 0) {
-                long delay = TimeUtil.convertToMillis(retry.delay(), retry.delayUnit());
-                long jitter = TimeUtil.convertToMillis(retry.jitter(), retry.jitterDelayUnit());
+                long delay = TimeUtil.convertToNanos(retry.delay(), retry.delayUnit());
+                long jitter = TimeUtil.convertToNanos(retry.jitter(), retry.jitterDelayUnit());
 
                 /*
                  * We need jitter <= delay so we compute factor for Failsafe so we split
@@ -100,7 +100,7 @@ public CommandRetrier(InvocationContext context, MethodIntrospector introspector
                 } else {
                     factor = ((double) jitter) / delay;
                 }
-                this.retryPolicy.withDelay(delay, TimeUnit.MILLISECONDS);
+                this.retryPolicy.withDelay(delay, TimeUnit.NANOSECONDS);
                 this.retryPolicy.withJitter(factor);
             } else if (retry.delay() > 0) {
                 this.retryPolicy.withDelay(retry.delay(), TimeUtil.chronoUnitToTimeUnit(retry.delayUnit()));

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/BulkheadBean.java
Patch:
@@ -78,7 +78,7 @@ public String executeNoQueueWithFallback(long sleepMillis) {
         return Thread.currentThread().getName();
     }
 
-    public String onFailure() {
+    public String onFailure(long sleepMillis) {
         FaultToleranceTest.printStatus("BulkheadBean::onFailure()", "success");
         return Thread.currentThread().getName();
     }

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/FallbackBean.java
Patch:
@@ -59,6 +59,7 @@ public String fallbackHandler(String value) {
         throw new RuntimeException("Oops");
     }
 
+    @Dependent
     static class FallbackBeanHandler implements FallbackHandler<String> {
 
         @Override

File: config/config/src/main/java/io/helidon/config/ConfigComplexImpl.java
Patch:
@@ -48,9 +48,9 @@ public final <T> Optional<List<T>> asOptionalList(Class<? extends T> type) throw
                     .map(list -> list.stream()
                             .map(config -> config.as(type))
                             .collect(Collectors.toList()));
-        } catch (ConfigMappingException ex) {
+        } catch (MissingValueException | ConfigMappingException ex) {
             throw new ConfigMappingException(key(),
-                                             "Error to map complex node item. " + ex.getLocalizedMessage(),
+                                             "Error to map complex node item to list. " + ex.getLocalizedMessage(),
                                              ex);
         }
     }

File: integrations/cdi/oci-objectstorage-cdi/src/main/java/io/helidon/integrations/cdi/oci/objectstorage/MicroProfileConfigAuthenticationDetailsProvider.java
Patch:
@@ -67,7 +67,8 @@ public InputStream getPrivateKey() {
       .orElse(null);
     if (privateKey == null || privateKey.trim().isEmpty()) {
       final String pemFormattedPrivateKeyFilePath =
-        this.config.getOptionalValue("oci.auth.keyFile", String.class).orElse("~/.oci/oci_api_key.pem");
+        this.config.getOptionalValue("oci.auth.keyFile", String.class)
+        .orElse(Paths.get(System.getProperty("user.home"), ".oci/oci_api_key.pem").toString());
       assert pemFormattedPrivateKeyFilePath != null;
       try {
         return new BufferedInputStream(Files.newInputStream(Paths.get(pemFormattedPrivateKeyFilePath)));

File: microprofile/server/src/test/java/io/helidon/microprofile/server/ServerImplTest.java
Patch:
@@ -27,6 +27,7 @@
 import javax.ws.rs.core.Application;
 
 import io.helidon.common.CollectionsHelper;
+import io.helidon.common.configurable.ThreadPoolSupplier;
 
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;

File: security/examples/jersey/src/main/java/io/helidon/security/examples/jersey/JerseyResources.java
Patch:
@@ -141,7 +141,7 @@ public String getHello(@Context SecurityContext securityContext) {
         @Produces(MediaType.TEXT_PLAIN)
         // due to Jersey approach to path matching, we need two methods to match both the "root" and "root" + subpaths
         public Response getHelloName(@Context SecurityContext securityContext, @Context HttpHeaders headers) {
-            AuthenticationResponse resp = securityContext.atnClientBuilder().get();
+            AuthenticationResponse resp = securityContext.atnClientBuilder().buildAndGet();
 
             if (resp.getStatus().isSuccess()) {
                 //and to authorize

File: security/examples/nohttp-programmatic/src/main/java/io/helidon/security/examples/security/ProgrammaticSecurity.java
Patch:
@@ -93,7 +93,7 @@ private void multithreaded(Subject subject) {
     }
 
     private void propagate() {
-        OutboundSecurityResponse response = CONTEXT.get().outboundClientBuilder().get();
+        OutboundSecurityResponse response = CONTEXT.get().outboundClientBuilder().buildAndGet();
 
         switch (response.getStatus()) {
         case SUCCESS:
@@ -121,7 +121,7 @@ private void execute() {
                                .addAttribute("resourceType", "CustomResourceType"));
 
         //check authorization through provider
-        AuthorizationResponse response = context.atzClientBuilder().get();
+        AuthorizationResponse response = context.atzClientBuilder().buildAndGet();
 
         if (response.getStatus().isSuccess()) {
             //ok, process resource
@@ -137,7 +137,7 @@ private Subject login() {
                                        .path("/some/path")
                                        .header("Authorization", buildBasic("aUser", "aPassword")));
 
-        AuthenticationResponse response = securityContext.atnClientBuilder().get();
+        AuthenticationResponse response = securityContext.atnClientBuilder().buildAndGet();
 
         if (response.getStatus().isSuccess()) {
             return response.getUser().orElseThrow(() -> new IllegalStateException("No user authenticated!"));

File: security/integration/jersey/src/main/java/io/helidon/security/jersey/ClientSecurityFilter.java
Patch:
@@ -102,7 +102,7 @@ private void doFilter(ClientRequestContext requestContext) throws IOException {
                     .outboundEndpointConfig(outboundEp)
                     .explicitProvider(explicitProvider);
 
-            OutboundSecurityResponse providerResponse = clientBuilder.get();
+            OutboundSecurityResponse providerResponse = clientBuilder.buildAndGet();
 
             switch (providerResponse.getStatus()) {
             case FAILURE:

File: security/integration/jersey/src/main/java/io/helidon/security/jersey/SecurityFilterCommon.java
Patch:
@@ -215,7 +215,7 @@ protected void processAuthentication(SecurityFilter.FilterContext context,
                                          SecurityClientBuilder<AuthenticationResponse> clientBuilder,
                                          SecurityDefinition methodSecurity) {
 
-        AuthenticationResponse response = clientBuilder.get();
+        AuthenticationResponse response = clientBuilder.buildAndGet();
 
         SecurityResponse.SecurityStatus responseStatus = response.getStatus();
 
@@ -313,7 +313,7 @@ protected void authorize(SecurityFilter.FilterContext context, Span securitySpan
     protected void processAuthorization(SecurityFilter.FilterContext context,
                                         SecurityClientBuilder<AuthorizationResponse> clientBuilder) {
         // now fully synchronous
-        AuthorizationResponse response = clientBuilder.get();
+        AuthorizationResponse response = clientBuilder.buildAndGet();
         SecurityResponse.SecurityStatus responseStatus = response.getStatus();
 
         switch (responseStatus) {

File: security/integration/jersey/src/test/java/io/helidon/security/jersey/OptionalSecurityTest.java
Patch:
@@ -94,7 +94,7 @@ static void init() {
                 .build();
 
         clientBuilder = mock(SecurityClientBuilder.class);
-        when(clientBuilder.get()).thenReturn(atr);
+        when(clientBuilder.buildAndGet()).thenReturn(atr);
     }
 
     @Test

File: security/providers/header-atn-provider/src/test/java/io/helidon/security/provider/header/HeaderAtnProviderConfigTest.java
Patch:
@@ -71,7 +71,7 @@ public void testProviderService() {
                              .build())
                 .build();
 
-        AuthenticationResponse response = context.atnClientBuilder().get();
+        AuthenticationResponse response = context.atnClientBuilder().buildAndGet();
 
         assertThat(response.getStatus(), is(SecurityResponse.SecurityStatus.SUCCESS));
         assertThat(response.getUser(), is(not(Optional.empty())));

File: security/security/src/main/java/io/helidon/security/OutboundSecurityClientBuilder.java
Patch:
@@ -101,7 +101,7 @@ public OutboundSecurityClientBuilder outboundEndpointConfig(Builder<EndpointConf
      *
      * @return {@link SecurityResponse} of expected type
      */
-    public OutboundSecurityResponse get() {
+    public OutboundSecurityResponse buildAndGet() {
         return build().get();
     }
 

File: security/security/src/main/java/io/helidon/security/Security.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.stream.Collectors;
 
 import io.helidon.common.CollectionsHelper;
+import io.helidon.common.configurable.ThreadPoolSupplier;
 import io.helidon.config.Config;
 import io.helidon.security.internal.SecurityAuditEvent;
 import io.helidon.security.spi.AuditProvider;
@@ -399,7 +400,7 @@ public static final class Builder implements io.helidon.common.Builder<Security>
         private Tracer tracer;
         private boolean tracingEnabled = true;
         private SecurityTime serverTime = SecurityTime.builder().build();
-        private Supplier<ExecutorService> executorService = ThreadPoolSupplier.builder().build();
+        private Supplier<ExecutorService> executorService = ThreadPoolSupplier.create();
 
         private Builder() {
         }
@@ -831,7 +832,7 @@ public Security build() {
         Builder fromConfig(Config config) {
             this.config = config.get("security");
             config.get("security.environment.server-time").asOptional(SecurityTime.class).ifPresent(this::serverTime);
-            executorSupplier(ThreadPoolSupplier.from(config));
+            executorSupplier(ThreadPoolSupplier.create(config.get("security.environment.executor-service")));
 
             Map<String, SecurityProviderService> configKeyToService = new HashMap<>();
             Map<String, SecurityProviderService> classNameToService = new HashMap<>();

File: security/security/src/main/java/io/helidon/security/SecurityClientBuilder.java
Patch:
@@ -57,7 +57,7 @@ public SecurityClient<T> build() {
      *
      * @return {@link SecurityResponse} of expected type
      */
-    public T get() {
+    public T buildAndGet() {
         return build().get();
     }
 

File: security/security/src/main/java/io/helidon/security/SecurityContextImpl.java
Patch:
@@ -102,7 +102,7 @@ public SecurityClientBuilder<AuthenticationResponse> atnClientBuilder() {
 
     @Override
     public AuthenticationResponse authenticate() {
-        return atnClientBuilder().get();
+        return atnClientBuilder().buildAndGet();
     }
 
     @Override
@@ -171,7 +171,7 @@ public AuthorizationResponse authorize(Object... resource) {
             builder.object("object" + i, resource[i]);
         }
 
-        return builder.get();
+        return builder.buildAndGet();
     }
 
     @Override

File: security/security/src/main/java9/module-info.java
Patch:
@@ -24,6 +24,7 @@
     requires java.logging;
 
     requires transitive io.helidon.common;
+    requires transitive io.helidon.common.configurable;
     requires transitive io.helidon.common.reactive;
     requires transitive io.helidon.config;
     requires transitive opentracing.api;

File: security/security/src/test/java/io/helidon/security/CompositePolicyTest.java
Patch:
@@ -74,7 +74,7 @@ public void testSuccessSecurity() {
         OutboundSecurityResponse outboundResponse = context.outboundClientBuilder()
                 .outboundEnvironment(envBuilder)
                 .outboundEndpointConfig(EndpointConfig.create())
-                .get();
+                .buildAndGet();
 
         assertThat(outboundResponse.getStatus(), is(SecurityResponse.SecurityStatus.SUCCESS));
 

File: security/security/src/test/java/io/helidon/security/SynchronousProviderTest.java
Patch:
@@ -42,11 +42,11 @@ public void testSecurity() {
 
         SecurityContext context = security.contextBuilder("unit_test").build();
 
-        AuthenticationResponse authenticationResponse = context.atnClientBuilder().get();
+        AuthenticationResponse authenticationResponse = context.atnClientBuilder().buildAndGet();
         checkResponse(authenticationResponse);
-        AuthorizationResponse authorizationResponse = context.atzClientBuilder().get();
+        AuthorizationResponse authorizationResponse = context.atzClientBuilder().buildAndGet();
         checkResponse(authorizationResponse);
-        OutboundSecurityResponse outboundSecurityResponse = context.outboundClientBuilder().get();
+        OutboundSecurityResponse outboundSecurityResponse = context.outboundClientBuilder().buildAndGet();
         checkResponse(outboundSecurityResponse);
     }
 

File: webserver/webserver/src/main/java/io/helidon/webserver/PublisherInputStream.java
Patch:
@@ -78,7 +78,7 @@ public int read() throws IOException {
 
                 if (currentBuffer != null && currentBuffer.remaining() > 0) {
                     // if there is anything to read, then read one byte...
-                    return currentBuffer.get();
+                    return currentBuffer.get() & 0xFF;
                 } else if (!closed.get()) {
                     // reinitialize the processed buffer future and request more data
                     processed = new CompletableFuture<>();

File: config/config/src/main/java/io/helidon/config/ConfigComplexImpl.java
Patch:
@@ -48,9 +48,9 @@ public final <T> Optional<List<T>> asOptionalList(Class<? extends T> type) throw
                     .map(list -> list.stream()
                             .map(config -> config.as(type))
                             .collect(Collectors.toList()));
-        } catch (ConfigMappingException ex) {
+        } catch (MissingValueException | ConfigMappingException ex) {
             throw new ConfigMappingException(key(),
-                                             "Error to map complex node item. " + ex.getLocalizedMessage(),
+                                             "Error to map complex node item to list. " + ex.getLocalizedMessage(),
                                              ex);
         }
     }

File: integrations/cdi/oci-objectstorage-cdi/src/main/java/io/helidon/integrations/cdi/oci/objectstorage/MicroProfileConfigAuthenticationDetailsProvider.java
Patch:
@@ -67,7 +67,8 @@ public InputStream getPrivateKey() {
       .orElse(null);
     if (privateKey == null || privateKey.trim().isEmpty()) {
       final String pemFormattedPrivateKeyFilePath =
-        this.config.getOptionalValue("oci.auth.keyFile", String.class).orElse("~/.oci/oci_api_key.pem");
+        this.config.getOptionalValue("oci.auth.keyFile", String.class)
+        .orElse(Paths.get(System.getProperty("user.home"), ".oci/oci_api_key.pem").toString());
       assert pemFormattedPrivateKeyFilePath != null;
       try {
         return new BufferedInputStream(Files.newInputStream(Paths.get(pemFormattedPrivateKeyFilePath)));

File: microprofile/server/src/test/java/io/helidon/microprofile/server/ServerImplTest.java
Patch:
@@ -27,6 +27,7 @@
 import javax.ws.rs.core.Application;
 
 import io.helidon.common.CollectionsHelper;
+import io.helidon.common.configurable.ThreadPoolSupplier;
 
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;

File: security/examples/jersey/src/main/java/io/helidon/security/examples/jersey/JerseyResources.java
Patch:
@@ -141,7 +141,7 @@ public String getHello(@Context SecurityContext securityContext) {
         @Produces(MediaType.TEXT_PLAIN)
         // due to Jersey approach to path matching, we need two methods to match both the "root" and "root" + subpaths
         public Response getHelloName(@Context SecurityContext securityContext, @Context HttpHeaders headers) {
-            AuthenticationResponse resp = securityContext.atnClientBuilder().get();
+            AuthenticationResponse resp = securityContext.atnClientBuilder().buildAndGet();
 
             if (resp.getStatus().isSuccess()) {
                 //and to authorize

File: security/examples/nohttp-programmatic/src/main/java/io/helidon/security/examples/security/ProgrammaticSecurity.java
Patch:
@@ -93,7 +93,7 @@ private void multithreaded(Subject subject) {
     }
 
     private void propagate() {
-        OutboundSecurityResponse response = CONTEXT.get().outboundClientBuilder().get();
+        OutboundSecurityResponse response = CONTEXT.get().outboundClientBuilder().buildAndGet();
 
         switch (response.getStatus()) {
         case SUCCESS:
@@ -121,7 +121,7 @@ private void execute() {
                                .addAttribute("resourceType", "CustomResourceType"));
 
         //check authorization through provider
-        AuthorizationResponse response = context.atzClientBuilder().get();
+        AuthorizationResponse response = context.atzClientBuilder().buildAndGet();
 
         if (response.getStatus().isSuccess()) {
             //ok, process resource
@@ -137,7 +137,7 @@ private Subject login() {
                                        .path("/some/path")
                                        .header("Authorization", buildBasic("aUser", "aPassword")));
 
-        AuthenticationResponse response = securityContext.atnClientBuilder().get();
+        AuthenticationResponse response = securityContext.atnClientBuilder().buildAndGet();
 
         if (response.getStatus().isSuccess()) {
             return response.getUser().orElseThrow(() -> new IllegalStateException("No user authenticated!"));

File: security/integration/jersey/src/main/java/io/helidon/security/jersey/ClientSecurityFilter.java
Patch:
@@ -102,7 +102,7 @@ private void doFilter(ClientRequestContext requestContext) throws IOException {
                     .outboundEndpointConfig(outboundEp)
                     .explicitProvider(explicitProvider);
 
-            OutboundSecurityResponse providerResponse = clientBuilder.get();
+            OutboundSecurityResponse providerResponse = clientBuilder.buildAndGet();
 
             switch (providerResponse.getStatus()) {
             case FAILURE:

File: security/integration/jersey/src/main/java/io/helidon/security/jersey/SecurityFilterCommon.java
Patch:
@@ -215,7 +215,7 @@ protected void processAuthentication(SecurityFilter.FilterContext context,
                                          SecurityClientBuilder<AuthenticationResponse> clientBuilder,
                                          SecurityDefinition methodSecurity) {
 
-        AuthenticationResponse response = clientBuilder.get();
+        AuthenticationResponse response = clientBuilder.buildAndGet();
 
         SecurityResponse.SecurityStatus responseStatus = response.getStatus();
 
@@ -313,7 +313,7 @@ protected void authorize(SecurityFilter.FilterContext context, Span securitySpan
     protected void processAuthorization(SecurityFilter.FilterContext context,
                                         SecurityClientBuilder<AuthorizationResponse> clientBuilder) {
         // now fully synchronous
-        AuthorizationResponse response = clientBuilder.get();
+        AuthorizationResponse response = clientBuilder.buildAndGet();
         SecurityResponse.SecurityStatus responseStatus = response.getStatus();
 
         switch (responseStatus) {

File: security/integration/jersey/src/test/java/io/helidon/security/jersey/OptionalSecurityTest.java
Patch:
@@ -94,7 +94,7 @@ static void init() {
                 .build();
 
         clientBuilder = mock(SecurityClientBuilder.class);
-        when(clientBuilder.get()).thenReturn(atr);
+        when(clientBuilder.buildAndGet()).thenReturn(atr);
     }
 
     @Test

File: security/providers/header-atn-provider/src/test/java/io/helidon/security/provider/header/HeaderAtnProviderConfigTest.java
Patch:
@@ -71,7 +71,7 @@ public void testProviderService() {
                              .build())
                 .build();
 
-        AuthenticationResponse response = context.atnClientBuilder().get();
+        AuthenticationResponse response = context.atnClientBuilder().buildAndGet();
 
         assertThat(response.getStatus(), is(SecurityResponse.SecurityStatus.SUCCESS));
         assertThat(response.getUser(), is(not(Optional.empty())));

File: security/security/src/main/java/io/helidon/security/OutboundSecurityClientBuilder.java
Patch:
@@ -101,7 +101,7 @@ public OutboundSecurityClientBuilder outboundEndpointConfig(Builder<EndpointConf
      *
      * @return {@link SecurityResponse} of expected type
      */
-    public OutboundSecurityResponse get() {
+    public OutboundSecurityResponse buildAndGet() {
         return build().get();
     }
 

File: security/security/src/main/java/io/helidon/security/Security.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.stream.Collectors;
 
 import io.helidon.common.CollectionsHelper;
+import io.helidon.common.configurable.ThreadPoolSupplier;
 import io.helidon.config.Config;
 import io.helidon.security.internal.SecurityAuditEvent;
 import io.helidon.security.spi.AuditProvider;
@@ -399,7 +400,7 @@ public static final class Builder implements io.helidon.common.Builder<Security>
         private Tracer tracer;
         private boolean tracingEnabled = true;
         private SecurityTime serverTime = SecurityTime.builder().build();
-        private Supplier<ExecutorService> executorService = ThreadPoolSupplier.builder().build();
+        private Supplier<ExecutorService> executorService = ThreadPoolSupplier.create();
 
         private Builder() {
         }
@@ -831,7 +832,7 @@ public Security build() {
         Builder fromConfig(Config config) {
             this.config = config.get("security");
             config.get("security.environment.server-time").asOptional(SecurityTime.class).ifPresent(this::serverTime);
-            executorSupplier(ThreadPoolSupplier.from(config));
+            executorSupplier(ThreadPoolSupplier.create(config.get("security.environment.executor-service")));
 
             Map<String, SecurityProviderService> configKeyToService = new HashMap<>();
             Map<String, SecurityProviderService> classNameToService = new HashMap<>();

File: security/security/src/main/java/io/helidon/security/SecurityClientBuilder.java
Patch:
@@ -57,7 +57,7 @@ public SecurityClient<T> build() {
      *
      * @return {@link SecurityResponse} of expected type
      */
-    public T get() {
+    public T buildAndGet() {
         return build().get();
     }
 

File: security/security/src/main/java/io/helidon/security/SecurityContextImpl.java
Patch:
@@ -102,7 +102,7 @@ public SecurityClientBuilder<AuthenticationResponse> atnClientBuilder() {
 
     @Override
     public AuthenticationResponse authenticate() {
-        return atnClientBuilder().get();
+        return atnClientBuilder().buildAndGet();
     }
 
     @Override
@@ -171,7 +171,7 @@ public AuthorizationResponse authorize(Object... resource) {
             builder.object("object" + i, resource[i]);
         }
 
-        return builder.get();
+        return builder.buildAndGet();
     }
 
     @Override

File: security/security/src/main/java9/module-info.java
Patch:
@@ -24,6 +24,7 @@
     requires java.logging;
 
     requires transitive io.helidon.common;
+    requires transitive io.helidon.common.configurable;
     requires transitive io.helidon.common.reactive;
     requires transitive io.helidon.config;
     requires transitive opentracing.api;

File: security/security/src/test/java/io/helidon/security/CompositePolicyTest.java
Patch:
@@ -74,7 +74,7 @@ public void testSuccessSecurity() {
         OutboundSecurityResponse outboundResponse = context.outboundClientBuilder()
                 .outboundEnvironment(envBuilder)
                 .outboundEndpointConfig(EndpointConfig.create())
-                .get();
+                .buildAndGet();
 
         assertThat(outboundResponse.getStatus(), is(SecurityResponse.SecurityStatus.SUCCESS));
 

File: security/security/src/test/java/io/helidon/security/SynchronousProviderTest.java
Patch:
@@ -42,11 +42,11 @@ public void testSecurity() {
 
         SecurityContext context = security.contextBuilder("unit_test").build();
 
-        AuthenticationResponse authenticationResponse = context.atnClientBuilder().get();
+        AuthenticationResponse authenticationResponse = context.atnClientBuilder().buildAndGet();
         checkResponse(authenticationResponse);
-        AuthorizationResponse authorizationResponse = context.atzClientBuilder().get();
+        AuthorizationResponse authorizationResponse = context.atzClientBuilder().buildAndGet();
         checkResponse(authorizationResponse);
-        OutboundSecurityResponse outboundSecurityResponse = context.outboundClientBuilder().get();
+        OutboundSecurityResponse outboundSecurityResponse = context.outboundClientBuilder().buildAndGet();
         checkResponse(outboundSecurityResponse);
     }
 

File: webserver/webserver/src/main/java/io/helidon/webserver/PublisherInputStream.java
Patch:
@@ -78,7 +78,7 @@ public int read() throws IOException {
 
                 if (currentBuffer != null && currentBuffer.remaining() > 0) {
                     // if there is anything to read, then read one byte...
-                    return currentBuffer.get();
+                    return currentBuffer.get() & 0xFF;
                 } else if (!closed.get()) {
                     // reinitialize the processed buffer future and request more data
                     processed = new CompletableFuture<>();

File: microprofile/metrics/metrics-se/src/main/java/io/helidon/metrics/MetricsSupport.java
Patch:
@@ -150,7 +150,7 @@ public static Builder builder() {
      * @return true if passed headers prefer data in JSON format.
      */
     static boolean requestsJsonData(RequestHeaders headers) {
-        Optional<MediaType> mediaType = headers.bestAccepted(MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN);
+        Optional<MediaType> mediaType = headers.bestAccepted(MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON);
         boolean requestsJson =  mediaType.isPresent() && mediaType.get().equals(MediaType.APPLICATION_JSON);
 
         if (LOGGER.isLoggable(Level.FINE)) {

File: config/config/src/main/java/io/helidon/config/ConfigComplexImpl.java
Patch:
@@ -48,9 +48,9 @@ public final <T> Optional<List<T>> asOptionalList(Class<? extends T> type) throw
                     .map(list -> list.stream()
                             .map(config -> config.as(type))
                             .collect(Collectors.toList()));
-        } catch (ConfigMappingException ex) {
+        } catch (MissingValueException | ConfigMappingException ex) {
             throw new ConfigMappingException(key(),
-                                             "Error to map complex node item. " + ex.getLocalizedMessage(),
+                                             "Error to map complex node item to list. " + ex.getLocalizedMessage(),
                                              ex);
         }
     }

File: integrations/cdi/oci-objectstorage-cdi/src/main/java/io/helidon/integrations/cdi/oci/objectstorage/MicroProfileConfigAuthenticationDetailsProvider.java
Patch:
@@ -67,7 +67,8 @@ public InputStream getPrivateKey() {
       .orElse(null);
     if (privateKey == null || privateKey.trim().isEmpty()) {
       final String pemFormattedPrivateKeyFilePath =
-        this.config.getOptionalValue("oci.auth.keyFile", String.class).orElse("~/.oci/oci_api_key.pem");
+        this.config.getOptionalValue("oci.auth.keyFile", String.class)
+        .orElse(Paths.get(System.getProperty("user.home"), ".oci/oci_api_key.pem").toString());
       assert pemFormattedPrivateKeyFilePath != null;
       try {
         return new BufferedInputStream(Files.newInputStream(Paths.get(pemFormattedPrivateKeyFilePath)));

File: webserver/netty/src/main/java9/module-info.java
Patch:
@@ -31,6 +31,7 @@
     requires io.netty.transport;
     requires io.netty.common;
     requires io.netty.buffer;
+    requires io.netty.codec.http2;
 
     provides io.helidon.webserver.spi.WebServerFactory with io.helidon.webserver.netty.Factory;
 }

File: microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/BulkheadBean.java
Patch:
@@ -78,7 +78,7 @@ public String executeNoQueueWithFallback(long sleepMillis) {
         return Thread.currentThread().getName();
     }
 
-    public String onFailure() {
+    public String onFailure(long sleepMillis) {
         FaultToleranceTest.printStatus("BulkheadBean::onFailure()", "success");
         return Thread.currentThread().getName();
     }

File: microprofile/tests/arquillian/src/main/java/io/helidon/microprofile/arquillian/HelidonLocalProtocol.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.jboss.arquillian.container.spi.client.protocol.ProtocolDescription;
 import org.jboss.arquillian.container.spi.client.protocol.metadata.ProtocolMetaData;
+import org.jboss.arquillian.container.test.impl.client.protocol.local.LocalContainerMethodExecutor;
 import org.jboss.arquillian.container.test.spi.ContainerMethodExecutor;
 import org.jboss.arquillian.container.test.spi.client.deployment.DeploymentPackager;
 import org.jboss.arquillian.container.test.spi.client.protocol.Protocol;

File: common/common/src/main/java/io/helidon/common/SpiHelper.java
Patch:
@@ -33,7 +33,10 @@ private SpiHelper() {
      * @param <T>     service type
      * @return the loaded service
      * @throws IllegalStateException if none implementation found
+     * @deprecated Use direct access to {@link ServiceLoader} or have such a helper in your module, as from jigsaw this is not
+     * allowed
      */
+    @Deprecated
     public static <T> T loadSpi(Class<T> service) {
         ServiceLoader<T> servers = ServiceLoader.load(service);
         Iterator<T> serversIt = servers.iterator();

File: webserver/zipkin/src/main/java/io/helidon/webserver/zipkin/ZipkinTracerBuilder.java
Patch:
@@ -27,6 +27,7 @@
 import brave.opentracing.BraveTracer;
 import io.opentracing.Tracer;
 import zipkin2.Span;
+import zipkin2.codec.SpanBytesEncoder;
 import zipkin2.reporter.AsyncReporter;
 import zipkin2.reporter.Reporter;
 import zipkin2.reporter.Sender;
@@ -166,7 +167,8 @@ private Sender defaultSender() {
     public Tracer build() {
         Sender sender = this.sender != null ? this.sender : defaultSender();
 
-        Reporter<Span> reporter = AsyncReporter.builder(sender).build();
+        Reporter<Span> reporter = AsyncReporter.builder(sender)
+                .build(SpanBytesEncoder.JSON_V1);
 
         // Now, create a Brave tracing component with the service name you want to see in Zipkin.
         //   (the dependency is io.zipkin.brave:brave)

File: webserver/webserver/src/main/java/io/helidon/webserver/RouteListRoutingRules.java
Patch:
@@ -211,12 +211,12 @@ public RouteListRoutingRules put(String pathPattern, Handler... requestHandlers)
 
     @Override
     public RouteListRoutingRules put(PathMatcher pathMatcher, Handler... requestHandlers) {
-        return addSingle(Http.Method.GET, pathMatcher, requestHandlers);
+        return addSingle(Http.Method.PUT, pathMatcher, requestHandlers);
     }
 
     @Override
     public RouteListRoutingRules post(Handler... requestHandlers) {
-        return addSingle(Http.Method.PUT, requestHandlers);
+        return addSingle(Http.Method.POST, requestHandlers);
     }
 
     @Override

File: microprofile/metrics/metrics-mp/src/test/java/io/helidon/microprofile/metrics/HelloWorldTest.java
Patch:
@@ -42,15 +42,15 @@ public void registerCounter() {
     @Test
     public void testMetrics() {
         IntStream.range(0, 5).forEach(
-                i -> client.target(BASE_URL)
+                i -> client.target(baseUri())
                         .path("helloworld").request().accept(MediaType.TEXT_PLAIN_TYPE)
                         .get(String.class));
         assertEquals(5, getCounter("helloCounter").getCount());
     }
 
     @AfterEach
     public void checkMetricsUrl() {
-        JsonObject app = client.target(BASE_URL)
+        JsonObject app = client.target(baseUri())
                 .path("metrics").request().accept(MediaType.APPLICATION_JSON_TYPE)
                 .get(JsonObject.class).getJsonObject("application");
         assertEquals(5, app.getJsonNumber("helloCounter").intValue());

File: security/examples/google-login/src/main/java/io/helidon/security/examples/google/GoogleUtil.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Google login example utilities.
  */
-public class GoogleUtil {
+public final class GoogleUtil {
     // do not change this constant, unless you modify configuration
     // of Google application redirect URI
     static final int PORT = 8080;
@@ -36,9 +36,9 @@ public class GoogleUtil {
     private GoogleUtil() {
     }
 
-    static WebServer startIt(Builder<? extends Routing> routing) throws InterruptedException {
+    static WebServer startIt(int port, Builder<? extends Routing> routing) {
         WebServer server = WebServer.create(ServerConfiguration.builder()
-                                                    .port(PORT),
+                                                    .port(port),
                                             routing);
 
         long t = System.nanoTime();

File: security/examples/google-login/src/test/java/io/helidon/security/examples/google/GoogleMainTest.java
Patch:
@@ -68,12 +68,14 @@ static void stopServer(WebServer server) throws InterruptedException {
 
     @Test
     public void testEndpoint() {
-        Response response = client.target("http://localhost:" + GoogleUtil.PORT + "/rest/profile")
+        Response response = client.target("http://localhost:" + port() + "/rest/profile")
                 .request()
                 .get();
 
         assertThat(response.getStatusInfo().toEnum(), is(Response.Status.UNAUTHORIZED));
         assertThat(response.getHeaders().getFirst(HttpHeaders.WWW_AUTHENTICATE),
                    is("Bearer realm=\"helidon\",scope=\"openid profile email\""));
     }
+
+    abstract int port();
 }

