File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/build/maven/DefaultMavenBuildCustomizer.java
Patch:
@@ -44,6 +44,7 @@ public DefaultMavenBuildCustomizer(ProjectDescription description, InitializrMet
 
 	@Override
 	public void customize(MavenBuild build) {
+		build.settings().addOverrideIfEmpty(true);
 		build.settings().name(this.description.getName()).description(this.description.getDescription());
 		build.properties().property("java.version", this.description.getLanguage().jvmVersion());
 		build.plugins().add("org.springframework.boot", "spring-boot-maven-plugin");

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/ProjectGeneratorIntegrationTests.java
Patch:
@@ -65,7 +65,7 @@ void customBaseDirectoryIsUsedWhenGeneratingProject() {
 					"test/demo-app/mvnw.cmd", "test/demo-app/.mvn/wrapper/maven-wrapper.properties",
 					"test/demo-app/src/main/java/com/example/demo/DemoApplication.java",
 					"test/demo-app/src/main/resources/application.properties",
-					"test/demo-app/src/test/java/com/example/demo/DemoApplicationTests.java");
+					"test/demo-app/src/test/java/com/example/demo/DemoApplicationTests.java", "test/demo-app/HELP.md");
 	}
 
 	private MutableProjectDescription initProjectDescription() {

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleKtsProjectGenerationConfigurationTests.java
Patch:
@@ -87,7 +87,7 @@ void buildWriterIsContributed(String platformVersion) {
 
 	static Stream<Arguments> gradleWrapperParameters() {
 		return Stream.of(Arguments.arguments("2.2.3.RELEASE", "6.9.3"), Arguments.arguments("2.5.0", "7.6.3"),
-				Arguments.arguments("2.7.10", "8.6"));
+				Arguments.arguments("2.7.10", "8.7"));
 	}
 
 	@ParameterizedTest(name = "Spring Boot {0}")

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleProjectGenerationConfigurationTests.java
Patch:
@@ -86,7 +86,7 @@ void buildWriterIsContributed(String platformVersion) {
 
 	static Stream<Arguments> gradleWrapperParameters() {
 		return Stream.of(Arguments.arguments("2.2.3.RELEASE", "6.9.3"), Arguments.arguments("2.5.0", "7.6.3"),
-				Arguments.arguments("2.7.10", "8.6"));
+				Arguments.arguments("2.7.10", "8.7"));
 	}
 
 	@ParameterizedTest(name = "Spring Boot {0}")

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/scm/git/GitIgnoreTests.java
Patch:
@@ -47,7 +47,7 @@ void shouldAddSection() throws IOException {
 		assertThat(section).isNotNull();
 		section.add("file.txt");
 		String content = write(this.gitIgnore);
-		assertThat(content).contains("### demo ###\nfile.txt");
+		assertThat(content).containsIgnoringNewLines("### demo ###\nfile.txt");
 	}
 
 	@Test

File: initializr-web/src/test/java/io/spring/initializr/web/AbstractInitializrIntegrationTests.java
Patch:
@@ -257,8 +257,8 @@ protected ProjectStructure getProjectStructure(byte[] content, ArchiveType archi
 	private void untar(Path archiveFile, Path project) throws IOException {
 		try (TarArchiveInputStream input = new TarArchiveInputStream(
 				new GzipCompressorInputStream(Files.newInputStream(archiveFile)))) {
-			TarArchiveEntry entry = null;
-			while ((entry = input.getNextTarEntry()) != null) {
+			TarArchiveEntry entry;
+			while ((entry = input.getNextEntry()) != null) {
 				Path path = project.resolve(entry.getName());
 				if (entry.isDirectory()) {
 					Files.createDirectories(path);

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/stat/MainControllerStatsIntegrationTests.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.net.URI;
 import java.util.ArrayList;
+import java.util.Base64;
 import java.util.List;
 
 import com.fasterxml.jackson.databind.JsonNode;
@@ -32,7 +33,6 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.RequestEntity;
 import org.springframework.test.context.ActiveProfiles;
-import org.springframework.util.Base64Utils;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.client.HttpClientErrorException;
@@ -86,8 +86,8 @@ void authorizationHeaderIsSet() {
 		String authorization = content.authorization;
 		assertThat(authorization).as("Authorization header must be set").isNotNull();
 		assertThat(authorization).startsWith("Basic ");
-		String token = authorization.substring("Basic ".length(), authorization.length());
-		String[] data = new String(Base64Utils.decodeFromString(token)).split(":");
+		String token = authorization.substring("Basic ".length());
+		String[] data = new String(Base64.getDecoder().decode(token)).split(":");
 		assertThat(data[0]).as("Wrong user from " + token).isEqualTo("test-user");
 		assertThat(data[1]).as("Wrong password " + token).isEqualTo("test-password");
 	}

File: initializr-generator/src/main/java/io/spring/initializr/generator/buildsystem/gradle/KotlinDslGradleBuildWriter.java
Patch:
@@ -100,7 +100,7 @@ private String getJavaVersionConstant(String jvmVersion) {
 			if (generation >= 1 && generation <= 10) {
 				sb.append("VERSION_1_").append(generation);
 			}
-			else if (generation <= 17) {
+			else if (generation <= 24) {
 				sb.append("VERSION_").append(generation);
 			}
 			else {

File: initializr-generator/src/main/java/io/spring/initializr/generator/buildsystem/gradle/KotlinDslGradleBuildWriter.java
Patch:
@@ -100,7 +100,7 @@ private String getJavaVersionConstant(String jvmVersion) {
 			if (generation >= 1 && generation <= 10) {
 				sb.append("VERSION_1_").append(generation);
 			}
-			else if (generation <= 17) {
+			else if (generation <= 24) {
 				sb.append("VERSION_").append(generation);
 			}
 			else {

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/groovy/GroovyProjectGenerationDefaultContributorsConfiguration.java
Patch:
@@ -22,7 +22,7 @@
 import io.spring.initializr.generator.buildsystem.maven.MavenBuildSystem;
 import io.spring.initializr.generator.condition.ConditionalOnBuildSystem;
 import io.spring.initializr.generator.condition.ConditionalOnPackaging;
-import io.spring.initializr.generator.language.Annotation;
+import io.spring.initializr.generator.language.ClassName;
 import io.spring.initializr.generator.language.CodeBlock;
 import io.spring.initializr.generator.language.Parameter;
 import io.spring.initializr.generator.language.groovy.GroovyMethodDeclaration;
@@ -66,7 +66,7 @@ TestApplicationTypeCustomizer<GroovyTypeDeclaration> junitJupiterTestMethodContr
 			GroovyMethodDeclaration method = GroovyMethodDeclaration.method("contextLoads")
 				.returning("void")
 				.body(CodeBlock.of(""));
-			method.annotate(Annotation.name("org.junit.jupiter.api.Test"));
+			method.annotations().add(ClassName.of("org.junit.jupiter.api.Test"));
 			typeDeclaration.addMethodDeclaration(method);
 		};
 	}
@@ -93,7 +93,7 @@ ServletInitializerCustomizer<GroovyTypeDeclaration> javaServletInitializerCustom
 					.parameters(
 							new Parameter("org.springframework.boot.builder.SpringApplicationBuilder", "application"))
 					.body(CodeBlock.ofStatement("application.sources($L)", description.getApplicationName()));
-				configure.annotate(Annotation.name("java.lang.Override"));
+				configure.annotations().add(ClassName.of(Override.class));
 				typeDeclaration.addMethodDeclaration(configure);
 			};
 		}

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/java/JavaProjectGenerationDefaultContributorsConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 import java.lang.reflect.Modifier;
 
 import io.spring.initializr.generator.condition.ConditionalOnPackaging;
-import io.spring.initializr.generator.language.Annotation;
+import io.spring.initializr.generator.language.ClassName;
 import io.spring.initializr.generator.language.CodeBlock;
 import io.spring.initializr.generator.language.Parameter;
 import io.spring.initializr.generator.language.java.JavaMethodDeclaration;
@@ -61,7 +61,7 @@ TestApplicationTypeCustomizer<JavaTypeDeclaration> junitJupiterTestMethodContrib
 			JavaMethodDeclaration method = JavaMethodDeclaration.method("contextLoads")
 				.returning("void")
 				.body(CodeBlock.of(""));
-			method.annotate(Annotation.name("org.junit.jupiter.api.Test"));
+			method.annotations().add(ClassName.of("org.junit.jupiter.api.Test"));
 			typeDeclaration.addMethodDeclaration(method);
 		};
 	}
@@ -85,7 +85,7 @@ ServletInitializerCustomizer<JavaTypeDeclaration> javaServletInitializerCustomiz
 							new Parameter("org.springframework.boot.builder.SpringApplicationBuilder", "application"))
 					.body(CodeBlock.ofStatement("return application.sources($L.class)",
 							description.getApplicationName()));
-				configure.annotate(Annotation.name("java.lang.Override"));
+				configure.annotations().add(ClassName.of(Override.class));
 				typeDeclaration.addMethodDeclaration(configure);
 			};
 		}

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/kotlin/KotlinProjectGenerationDefaultContributorsConfiguration.java
Patch:
@@ -22,7 +22,7 @@
 import io.spring.initializr.generator.condition.ConditionalOnBuildSystem;
 import io.spring.initializr.generator.condition.ConditionalOnPackaging;
 import io.spring.initializr.generator.condition.ConditionalOnPlatformVersion;
-import io.spring.initializr.generator.language.Annotation;
+import io.spring.initializr.generator.language.ClassName;
 import io.spring.initializr.generator.language.CodeBlock;
 import io.spring.initializr.generator.language.Parameter;
 import io.spring.initializr.generator.language.kotlin.KotlinCompilationUnit;
@@ -55,7 +55,7 @@ TestApplicationTypeCustomizer<KotlinTypeDeclaration> junitJupiterTestMethodContr
 		return (typeDeclaration) -> {
 			KotlinFunctionDeclaration function = KotlinFunctionDeclaration.function("contextLoads")
 				.body(CodeBlock.of(""));
-			function.annotate(Annotation.name("org.junit.jupiter.api.Test"));
+			function.annotations().add(ClassName.of("org.junit.jupiter.api.Test"));
 			typeDeclaration.addFunctionDeclaration(function);
 		};
 	}

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/stat/ProjectRequestDocumentFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2022 the original author or authors.
+ * Copyright 2012-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -99,7 +99,7 @@ public ProjectRequestDocument createDocument(ProjectRequestEvent event) {
 	private String determineBuildSystem(ProjectRequest request) {
 		String type = request.getType();
 		String[] elements = type.split("-");
-		return (elements.length == 2) ? elements[0] : null;
+		return (elements.length >= 2) ? elements[0] : null;
 	}
 
 	private VersionInformation determineVersionInformation(ProjectRequest request) {

File: initializr-web/src/test/java/io/spring/initializr/web/mapper/InitializrMetadataV21JsonMapperTests.java
Patch:
@@ -44,7 +44,7 @@ class InitializrMetadataV21JsonMapperTests {
 	@Test
 	void withNoAppUrl() throws IOException {
 		InitializrMetadata metadata = new InitializrMetadataTestBuilder()
-				.addType("foo", true, "/foo.zip", "none", "test").addDependencyGroup("foo", "one", "two").build();
+				.addType("foo", true, "/foo.zip", "none", null, "test").addDependencyGroup("foo", "one", "two").build();
 		String json = this.jsonMapper.write(metadata, null);
 		JsonNode result = objectMapper.readTree(json);
 		assertThat(get(result, "_links.foo.href"))
@@ -55,7 +55,7 @@ void withNoAppUrl() throws IOException {
 	@Test
 	void withAppUrl() throws IOException {
 		InitializrMetadata metadata = new InitializrMetadataTestBuilder()
-				.addType("foo", true, "/foo.zip", "none", "test").addDependencyGroup("foo", "one", "two").build();
+				.addType("foo", true, "/foo.zip", "none", null, "test").addDependencyGroup("foo", "one", "two").build();
 		String json = this.jsonMapper.write(metadata, "http://server:8080/my-app");
 		JsonNode result = objectMapper.readTree(json);
 		assertThat(get(result, "_links.foo.href"))

File: initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/GroovyDslGradleBuildWriterTests.java
Patch:
@@ -563,7 +563,7 @@ private String write(GradleBuild build) {
 	private String write(GroovyDslGradleBuildWriter writer, GradleBuild build) {
 		StringWriter out = new StringWriter();
 		writer.writeTo(new IndentingWriter(out, new SimpleIndentStrategy("\t")), build);
-		return out.toString();
+		return out.toString().replace("\r\n", "\n");
 	}
 
 }

File: initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/GroovyDslGradleSettingsWriterTests.java
Patch:
@@ -118,7 +118,7 @@ private String generateSettings(GradleBuild build) {
 		GradleSettingsWriter writer = new GroovyDslGradleSettingsWriter();
 		StringWriter out = new StringWriter();
 		writer.writeTo(new IndentingWriter(out, new SimpleIndentStrategy("\t")), build);
-		return out.toString();
+		return out.toString().replace("\r\n", "\n");
 	}
 
 }

File: initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/KotlinDslGradleBuildWriterTests.java
Patch:
@@ -582,7 +582,7 @@ private String generateBuild(GradleBuild build) {
 	private String generateBuild(KotlinDslGradleBuildWriter writer, GradleBuild build) {
 		StringWriter out = new StringWriter();
 		writer.writeTo(new IndentingWriter(out, new SimpleIndentStrategy("\t")), build);
-		return out.toString();
+		return out.toString().replace("\r\n", "\n");
 	}
 
 }

File: initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/KotlinDslGradleSettingsWriterTests.java
Patch:
@@ -117,7 +117,7 @@ private String generateSettings(GradleBuild build) {
 		GradleSettingsWriter writer = new KotlinDslGradleSettingsWriter();
 		StringWriter out = new StringWriter();
 		writer.writeTo(new IndentingWriter(out, new SimpleIndentStrategy("\t")), build);
-		return out.toString();
+		return out.toString().replace("\r\n", "\n");
 	}
 
 }

File: initializr-generator/src/test/java/io/spring/initializr/generator/io/IndentingWriterTests.java
Patch:
@@ -104,7 +104,7 @@ void defaultIndentStrategyIsUsed() throws IOException {
 	}
 
 	private String content() {
-		return this.stringWriter.toString();
+		return this.stringWriter.toString().replace("\r\n", "\n");
 	}
 
 }

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/BuildComplianceTests.java
Patch:
@@ -218,8 +218,8 @@ void repositories(BuildSystem build, String fileName) {
 		Dependency bar = Dependency.withId("bar", "org.acme", "bar");
 		bar.setRepository("bar-repository");
 		InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", foo, bar)
-				.addRepository("foo-repository", "foo-repo", "https://example.com/foo", false)
-				.addRepository("bar-repository", "bar-repo", "https://example.com/bar", true).build();
+				.addReleasesRepository("foo-repository", "foo-repo", "https://example.com/foo")
+				.addSnapshotsRepository("bar-repository", "bar-repo", "https://example.com/bar").build();
 		ProjectStructure project = generateProject(java, build, "2.4.1", (description) -> {
 			description.addDependency("foo", MetadataBuildItemMapper.toDependency(foo));
 			description.addDependency("bar", MetadataBuildItemMapper.toDependency(bar));

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/DependencyManagementBuildCustomizerTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2020 the original author or authors.
+ * Copyright 2012-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -75,8 +75,8 @@ void contributeRepositories() { // ProjectRequestTests#resolveAdditionalReposito
 		BillOfMaterials bom = BillOfMaterials.create("com.example", "foo-bom", "1.0.0");
 		bom.getRepositories().add("bar-repo");
 		InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addBom("foo-bom", bom)
-				.addRepository("foo-repo", "foo-repo", "https://example.com/foo", false)
-				.addRepository("bar-repo", "bar-repo", "https://example.com/bar", false)
+				.addReleasesRepository("foo-repo", "foo-repo", "https://example.com/foo")
+				.addReleasesRepository("bar-repo", "bar-repo", "https://example.com/bar")
 				.addDependencyGroup("test", dependency).build();
 		Build build = createBuild(metadata);
 		build.dependencies().add(dependency.getId());

File: initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/GroovyDslGradleBuildWriterTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2020 the original author or authors.
+ * Copyright 2012-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -124,8 +124,8 @@ void gradleBuildWithRepository() {
 	@Test
 	void gradleBuildWithSnapshotRepository() {
 		GradleBuild build = new GradleBuild();
-		build.repositories().add(MavenRepository.withIdAndUrl("spring-snapshots", "https://repo.spring.io/snapshot")
-				.snapshotsEnabled(true));
+		build.repositories().add(
+				MavenRepository.withIdAndUrl("spring-snapshots", "https://repo.spring.io/snapshot").onlySnapshots());
 		List<String> lines = generateBuild(build);
 		assertThat(lines).containsSequence("repositories {", "    maven { url 'https://repo.spring.io/snapshot' }",
 				"}");

File: initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/GroovyDslGradleSettingsWriterTests.java
Patch:
@@ -68,7 +68,7 @@ void gradleBuildWithSnapshotPluginRepository() {
 		GradleBuild build = new GradleBuild();
 		build.pluginRepositories()
 				.add(MavenRepository.withIdAndUrl("spring-snapshots", "https://repo.spring.io/snapshot")
-						.name("Spring Snapshots").snapshotsEnabled(true));
+						.name("Spring Snapshots").onlySnapshots());
 		List<String> lines = generateSettings(build);
 		assertThat(lines).containsSequence("pluginManagement {", "    repositories {",
 				"        maven { url 'https://repo.spring.io/snapshot' }", "        gradlePluginPortal()", "    }",

File: initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/KotlinDslGradleBuildWriterTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2020 the original author or authors.
+ * Copyright 2012-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -150,8 +150,8 @@ void gradleBuildWithRepository() {
 	@Test
 	void gradleBuildWithSnapshotRepository() {
 		GradleBuild build = new GradleBuild();
-		build.repositories().add(MavenRepository.withIdAndUrl("spring-snapshots", "https://repo.spring.io/snapshot")
-				.snapshotsEnabled(true));
+		build.repositories().add(
+				MavenRepository.withIdAndUrl("spring-snapshots", "https://repo.spring.io/snapshot").onlySnapshots());
 		List<String> lines = generateBuild(build);
 		assertThat(lines).containsSequence("repositories {",
 				"    maven { url = uri(\"https://repo.spring.io/snapshot\") }", "}");

File: initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/KotlinDslGradleSettingsWriterTests.java
Patch:
@@ -67,7 +67,7 @@ void gradleBuildWithSnapshotPluginRepository() {
 		GradleBuild build = new GradleBuild();
 		build.pluginRepositories()
 				.add(MavenRepository.withIdAndUrl("spring-snapshots", "https://repo.spring.io/snapshot")
-						.name("Spring Snapshots").snapshotsEnabled(true));
+						.name("Spring Snapshots").onlySnapshots());
 		List<String> lines = generateSettings(build);
 		assertThat(lines).containsSequence("pluginManagement {", "    repositories {",
 				"        maven { url = uri(\"https://repo.spring.io/snapshot\") }", "        gradlePluginPortal()",

File: initializr-metadata/src/main/java/io/spring/initializr/metadata/InitializrConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2020 the original author or authors.
+ * Copyright 2012-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -250,9 +250,9 @@ public static class Env {
 		public Env() {
 			try {
 				this.repositories.put("spring-snapshots",
-						new Repository("Spring Snapshots", new URL("https://repo.spring.io/snapshot"), true));
+						new Repository("Spring Snapshots", new URL("https://repo.spring.io/snapshot"), false, true));
 				this.repositories.put("spring-milestones",
-						new Repository("Spring Milestones", new URL("https://repo.spring.io/milestone"), false));
+						new Repository("Spring Milestones", new URL("https://repo.spring.io/milestone"), true, false));
 			}
 			catch (MalformedURLException ex) {
 				throw new IllegalStateException("Cannot parse URL", ex);

File: initializr-metadata/src/main/java/io/spring/initializr/metadata/support/MetadataBuildItemMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2020 the original author or authors.
+ * Copyright 2012-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -96,7 +96,8 @@ public static io.spring.initializr.generator.buildsystem.MavenRepository toRepos
 		}
 		return io.spring.initializr.generator.buildsystem.MavenRepository
 				.withIdAndUrl(id, repository.getUrl().toExternalForm()).name(repository.getName())
-				.snapshotsEnabled(repository.isSnapshotsEnabled()).build();
+				.releasesEnabled(repository.isReleasesEnabled()).snapshotsEnabled(repository.isSnapshotsEnabled())
+				.build();
 	}
 
 }

File: initializr-metadata/src/test/java/io/spring/initializr/metadata/InitializrMetadataTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2020 the original author or authors.
+ * Copyright 2012-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ void invalidRepository() throws MalformedURLException {
 		foo.setRepository("foo-repo");
 		addTestDependencyGroup(metadata, foo);
 		metadata.getConfiguration().getEnv().getRepositories().put("my-repo",
-				new Repository("repo", new URL("https://example.com/repo"), true));
+				new Repository("repo", new URL("https://example.com/repo")));
 		assertThatExceptionOfType(InvalidInitializrMetadataException.class).isThrownBy(metadata::validate)
 				.withMessageContaining("foo-repo").withMessageContaining("my-repo");
 	}

File: initializr-generator-test/src/main/java/io/spring/initializr/generator/test/buildsystem/gradle/GroovyDslGradleBuildAssert.java
Patch:
@@ -82,7 +82,7 @@ public GroovyDslGradleBuildAssert hasSourceCompatibility(String javaVersion) {
 	 * @return {@code this} assertion object
 	 */
 	public GroovyDslGradleBuildAssert hasProperty(String name, String value) {
-		return contains(String.format("%s = '%s", name, value));
+		return contains(String.format("%s = '%s'", name, value));
 	}
 
 	/**

File: initializr-web/src/test/java/io/spring/initializr/web/support/CommandLineHelpGeneratorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2019 the original author or authors.
+ * Copyright 2012-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -88,7 +88,7 @@ void generateCurlCapabilities() throws IOException {
 		assertThat(content).contains("id-b | depB");
 		assertThat(content).contains("https://fake-service");
 		assertThat(content).contains("Examples:");
-		assertThat(content).contains("curl https://fake-service");
+		assertThat(content).contains("curl -G https://fake-service");
 	}
 
 	@Test

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataV2JsonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2020 the original author or authors.
+ * Copyright 2012-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -126,7 +126,7 @@ protected void dependencies(ObjectNode parent, DependenciesCapability capability
 
 	protected void type(ObjectNode parent, TypeCapability capability) {
 		ObjectNode type = nodeFactory.objectNode();
-		type.put("type", "action");
+		type.put("type", capability.getType().getName());
 		Type defaultType = capability.getDefault();
 		if (defaultType != null) {
 			type.put("default", defaultType.getId());

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataV2JsonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2020 the original author or authors.
+ * Copyright 2012-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataV2JsonMapper.java
Patch:
@@ -126,7 +126,7 @@ protected void dependencies(ObjectNode parent, DependenciesCapability capability
 
 	protected void type(ObjectNode parent, TypeCapability capability) {
 		ObjectNode type = nodeFactory.objectNode();
-		type.put("type", "action");
+		type.put("type", capability.getType().getName());
 		Type defaultType = capability.getDefault();
 		if (defaultType != null) {
 			type.put("default", defaultType.getId());

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/stat/ProjectGenerationStatPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2019 the original author or authors.
+ * Copyright 2012-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -129,7 +129,7 @@ else if (StringUtils.hasText(elastic.getUsername())) {
 	}
 
 	private static URI determineEntityUrl(Elastic elastic) {
-		String entityUrl = elastic.getUri() + "/" + elastic.getIndexName() + "/" + elastic.getEntityName();
+		String entityUrl = elastic.getUri() + "/" + elastic.getIndexName() + "/_doc/";
 		try {
 			return new URI(entityUrl);
 		}

File: initializr-generator/src/main/java/io/spring/initializr/generator/buildsystem/maven/MavenBuildWriter.java
Patch:
@@ -304,8 +304,8 @@ private String determineVersion(VersionReference versionReference) {
 
 	private void writeBuild(IndentingWriter writer, MavenBuild build) {
 		MavenBuildSettings settings = build.getSettings();
-		if (settings.getFinalName() == null && settings.getSourceDirectory() == null
-				&& settings.getTestSourceDirectory() == null && settings.getDefaultGoal() == null
+		if (settings.getDefaultGoal() == null && settings.getFinalName() == null
+				&& settings.getSourceDirectory() == null && settings.getTestSourceDirectory() == null
 				&& build.resources().isEmpty() && build.testResources().isEmpty() && build.plugins().isEmpty()) {
 			return;
 		}

File: initializr-generator/src/main/java/io/spring/initializr/generator/buildsystem/maven/MavenBuildWriter.java
Patch:
@@ -305,12 +305,13 @@ private String determineVersion(VersionReference versionReference) {
 	private void writeBuild(IndentingWriter writer, MavenBuild build) {
 		MavenBuildSettings settings = build.getSettings();
 		if (settings.getFinalName() == null && settings.getSourceDirectory() == null
-				&& settings.getTestSourceDirectory() == null && build.resources().isEmpty()
-				&& build.testResources().isEmpty() && build.plugins().isEmpty()) {
+				&& settings.getTestSourceDirectory() == null && settings.getDefaultGoal() == null
+				&& build.resources().isEmpty() && build.testResources().isEmpty() && build.plugins().isEmpty()) {
 			return;
 		}
 		writer.println();
 		writeElement(writer, "build", () -> {
+			writeSingleElement(writer, "defaultGoal", settings.getDefaultGoal());
 			writeSingleElement(writer, "finalName", settings.getFinalName());
 			writeSingleElement(writer, "sourceDirectory", settings.getSourceDirectory());
 			writeSingleElement(writer, "testSourceDirectory", settings.getTestSourceDirectory());

File: initializr-web/src/test/java/io/spring/initializr/web/mapper/InitializrMetadataV21JsonMapperTests.java
Patch:
@@ -102,7 +102,9 @@ void platformVersionUsingSemVerUseBackwardCompatibleFormat() throws JsonProcessi
 				.addBootVersion("2.5.0-M2", false).addBootVersion("2.4.2", true).build();
 		String json = this.jsonMapper.write(metadata, null);
 		JsonNode result = objectMapper.readTree(json);
-		JsonNode versions = result.get("bootVersion").get("values");
+		JsonNode platformVersions = result.get("bootVersion");
+		assertThat(platformVersions.get("default").textValue()).isEqualTo("2.4.2.RELEASE");
+		JsonNode versions = platformVersions.get("values");
 		assertThat(versions).hasSize(3);
 		assertVersionMetadata(versions.get(0), "2.5.0.BUILD-SNAPSHOT", "2.5.0-SNAPSHOT");
 		assertVersionMetadata(versions.get(1), "2.5.0.M2", "2.5.0-M2");

File: initializr-web/src/test/java/io/spring/initializr/web/mapper/InitializrMetadataV22JsonMapperTests.java
Patch:
@@ -62,7 +62,9 @@ void platformVersionUsingSemVerUIsNotChanged() throws JsonProcessingException {
 				.addBootVersion("2.5.0-M2", false).addBootVersion("2.4.2", true).build();
 		String json = this.jsonMapper.write(metadata, null);
 		JsonNode result = objectMapper.readTree(json);
-		JsonNode versions = result.get("bootVersion").get("values");
+		JsonNode platformVersions = result.get("bootVersion");
+		assertThat(platformVersions.get("default").textValue()).isEqualTo("2.4.2");
+		JsonNode versions = platformVersions.get("values");
 		assertThat(versions).hasSize(3);
 		assertVersionMetadata(versions.get(0), "2.5.0-SNAPSHOT", "2.5.0-SNAPSHOT");
 		assertVersionMetadata(versions.get(1), "2.5.0-M2", "2.5.0-M2");

File: initializr-web/src/test/java/io/spring/initializr/web/mapper/InitializrMetadataV22JsonMapperTests.java
Patch:
@@ -62,7 +62,9 @@ void platformVersionUsingSemVerUIsNotChanged() throws JsonProcessingException {
 				.addBootVersion("2.5.0-M2", false).addBootVersion("2.4.2", true).build();
 		String json = this.jsonMapper.write(metadata, null);
 		JsonNode result = objectMapper.readTree(json);
-		JsonNode versions = result.get("bootVersion").get("values");
+		JsonNode platformVersions = result.get("bootVersion");
+		assertThat(platformVersions.get("default").textValue()).isEqualTo("2.4.2");
+		JsonNode versions = platformVersions.get("values");
 		assertThat(versions).hasSize(3);
 		assertVersionMetadata(versions.get(0), "2.5.0-SNAPSHOT", "2.5.0-SNAPSHOT");
 		assertVersionMetadata(versions.get(1), "2.5.0-M2", "2.5.0-M2");

File: initializr-web/src/test/java/io/spring/initializr/web/controller/ProjectGenerationControllerCustomEnvIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2019 the original author or authors.
+ * Copyright 2012-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/project/ProjectGenerationInvoker.java
Patch:
@@ -184,6 +184,8 @@ private void customizeProjectGenerationContext(AnnotationConfigApplicationContex
 		context.registerBean(InitializrMetadata.class, () -> metadata);
 		context.registerBean(BuildItemResolver.class, () -> new MetadataBuildItemResolver(metadata,
 				context.getBean(ProjectDescription.class).getPlatformVersion()));
+		context.registerBean(MetadataProjectDescriptionCustomizer.class,
+				() -> new MetadataProjectDescriptionCustomizer(metadata));
 	}
 
 	private void publishProjectGeneratedEvent(R request, ProjectGenerationContext context) {

File: initializr-web/src/main/java/io/spring/initializr/web/project/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Project generation handing.
+ * Project generation handling.
  */
 package io.spring.initializr.web.project;

File: initializr-generator/src/main/java/io/spring/initializr/generator/language/groovy/GroovySourceCodeWriter.java
Patch:
@@ -179,7 +179,7 @@ private String formatAnnotationAttribute(Annotation.Attribute attribute) {
 
 	private String formatValues(List<String> values, Function<String, String> formatter) {
 		String result = values.stream().map(formatter).collect(Collectors.joining(", "));
-		return (values.size() > 1) ? "{ " + result + " }" : result;
+		return (values.size() > 1) ? "[ " + result + " ]" : result;
 	}
 
 	private void writeFieldDeclaration(IndentingWriter writer, GroovyFieldDeclaration fieldDeclaration) {

File: initializr-generator/src/test/java/io/spring/initializr/generator/language/groovy/GroovySourceCodeWriterTests.java
Patch:
@@ -243,7 +243,7 @@ void annotationWithClassArrayAttribute() throws IOException {
 		List<String> lines = writeClassAnnotation(Annotation.name("org.springframework.test.TestApplication",
 				(builder) -> builder.attribute("target", Class.class, "com.example.One", "com.example.Two")));
 		assertThat(lines).containsExactly("package com.example", "", "import com.example.One", "import com.example.Two",
-				"import org.springframework.test.TestApplication", "", "@TestApplication(target = { One, Two })",
+				"import org.springframework.test.TestApplication", "", "@TestApplication(target = [ One, Two ])",
 				"class Test {", "", "}");
 	}
 

File: initializr-generator/src/test/java/io/spring/initializr/generator/language/groovy/GroovySourceCodeWriterTests.java
Patch:
@@ -243,7 +243,7 @@ void annotationWithClassArrayAttribute() throws IOException {
 		List<String> lines = writeClassAnnotation(Annotation.name("org.springframework.test.TestApplication",
 				(builder) -> builder.attribute("target", Class.class, "com.example.One", "com.example.Two")));
 		assertThat(lines).containsExactly("package com.example", "", "import com.example.One", "import com.example.Two",
-				"import org.springframework.test.TestApplication", "", "@TestApplication(target = { One, Two })",
+				"import org.springframework.test.TestApplication", "", "@TestApplication(target = [ One, Two ])",
 				"class Test {", "", "}");
 	}
 

File: initializr-generator/src/main/java/io/spring/initializr/generator/language/groovy/GroovySourceCodeWriter.java
Patch:
@@ -179,7 +179,7 @@ private String formatAnnotationAttribute(Annotation.Attribute attribute) {
 
 	private String formatValues(List<String> values, Function<String, String> formatter) {
 		String result = values.stream().map(formatter).collect(Collectors.joining(", "));
-		return (values.size() > 1) ? "{ " + result + " }" : result;
+		return (values.size() > 1) ? "[ " + result + " ]" : result;
 	}
 
 	private void writeFieldDeclaration(IndentingWriter writer, GroovyFieldDeclaration fieldDeclaration) {

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/groovy/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Grovy code contributors.
+ * Groovy code contributors.
  */
 package io.spring.initializr.generator.spring.code.groovy;

File: initializr-generator-test/src/main/java/io/spring/initializr/generator/test/project/AbstractProjectAssert.java
Patch:
@@ -41,8 +41,8 @@ public abstract class AbstractProjectAssert<SELF extends AbstractProjectAssert<S
 
 	private ListAssert<String> filesAssert;
 
-	protected AbstractProjectAssert(Path projcetDirectory, Class<?> selfType) {
-		super(projcetDirectory, selfType);
+	protected AbstractProjectAssert(Path projectDirectory, Class<?> selfType) {
+		super(projectDirectory, selfType);
 	}
 
 	/**

File: initializr-docs/src/main/java/io/spring/initializr/doc/generator/project/CustomProjectGenerationController.java
Patch:
@@ -31,7 +31,7 @@
 public class CustomProjectGenerationController extends ProjectGenerationController<CustomProjectRequest> {
 
 	public CustomProjectGenerationController(InitializrMetadataProvider metadataProvider,
-			ProjectGenerationInvoker projectGenerationInvoker) {
+			ProjectGenerationInvoker<CustomProjectRequest> projectGenerationInvoker) {
 		super(metadataProvider, projectGenerationInvoker);
 	}
 

File: initializr-web/src/main/java/io/spring/initializr/web/controller/DefaultProjectGenerationController.java
Patch:
@@ -32,7 +32,7 @@
 public class DefaultProjectGenerationController extends ProjectGenerationController<ProjectRequest> {
 
 	public DefaultProjectGenerationController(InitializrMetadataProvider metadataProvider,
-			ProjectGenerationInvoker projectGenerationInvoker) {
+			ProjectGenerationInvoker<ProjectRequest> projectGenerationInvoker) {
 		super(metadataProvider, projectGenerationInvoker);
 	}
 

File: initializr-web/src/main/java/io/spring/initializr/web/controller/ProjectGenerationController.java
Patch:
@@ -73,10 +73,10 @@ public abstract class ProjectGenerationController<R extends ProjectRequest> {
 
 	private final InitializrMetadataProvider metadataProvider;
 
-	private final ProjectGenerationInvoker projectGenerationInvoker;
+	private final ProjectGenerationInvoker<R> projectGenerationInvoker;
 
 	public ProjectGenerationController(InitializrMetadataProvider metadataProvider,
-			ProjectGenerationInvoker projectGenerationInvoker) {
+			ProjectGenerationInvoker<R> projectGenerationInvoker) {
 		this.metadataProvider = metadataProvider;
 		this.projectGenerationInvoker = projectGenerationInvoker;
 	}

File: initializr-web/src/main/java/io/spring/initializr/web/project/DefaultProjectRequestToDescriptionConverter.java
Patch:
@@ -42,7 +42,8 @@
  * @author Madhura Bhave
  * @author HaiTao Zhang
  */
-public class DefaultProjectRequestToDescriptionConverter implements ProjectRequestToDescriptionConverter {
+public class DefaultProjectRequestToDescriptionConverter
+		implements ProjectRequestToDescriptionConverter<ProjectRequest> {
 
 	private static final Version VERSION_1_5_0 = Version.parse("1.5.0.RELEASE");
 

File: initializr-web/src/main/java/io/spring/initializr/web/project/ProjectRequestToDescriptionConverter.java
Patch:
@@ -22,10 +22,11 @@
 /**
  * Convert a {@link ProjectRequest} to a {@link ProjectDescription}.
  *
+ * @param <R> the concrete {@link ProjectRequest} type
  * @author Stephane Nicoll
  */
 @FunctionalInterface
-public interface ProjectRequestToDescriptionConverter {
+public interface ProjectRequestToDescriptionConverter<R extends ProjectRequest> {
 
 	/**
 	 * Validate and convert the specified {@link ProjectRequest} to a
@@ -35,6 +36,6 @@ public interface ProjectRequestToDescriptionConverter {
 	 * @return a validated {@link ProjectDescription} to use to generate a project that
 	 * matches the specified {@code request}
 	 */
-	ProjectDescription convert(ProjectRequest request, InitializrMetadata metadata);
+	ProjectDescription convert(R request, InitializrMetadata metadata);
 
 }

File: initializr-web/src/test/java/io/spring/initializr/web/controller/custom/CustomProjectGenerationController.java
Patch:
@@ -31,7 +31,7 @@
 class CustomProjectGenerationController extends ProjectGenerationController<CustomProjectRequest> {
 
 	CustomProjectGenerationController(InitializrMetadataProvider metadataProvider,
-			ProjectGenerationInvoker projectGenerationInvoker) {
+			ProjectGenerationInvoker<CustomProjectRequest> projectGenerationInvoker) {
 		super(metadataProvider, projectGenerationInvoker);
 	}
 

File: initializr-docs/src/test/java/io/spring/initializr/doc/generator/project/ProjectGeneratorSetupExampleTests.java
Patch:
@@ -25,7 +25,7 @@
 import io.spring.initializr.generator.language.Language;
 import io.spring.initializr.generator.language.java.JavaLanguage;
 import io.spring.initializr.generator.project.DefaultProjectAssetGenerator;
-import io.spring.initializr.generator.project.ProjectDescription;
+import io.spring.initializr.generator.project.MutableProjectDescription;
 import io.spring.initializr.generator.project.ProjectGenerator;
 import io.spring.initializr.generator.version.Version;
 import io.spring.initializr.metadata.InitializrMetadata;
@@ -62,8 +62,8 @@ void generateSimpleProjectStructure(@TempDir Path tempDir) {
 		assertThat(helloFile).exists().isRegularFile().hasContent("Test");
 	}
 
-	private ProjectDescription createProjectDescription() {
-		ProjectDescription description = new ProjectDescription();
+	private MutableProjectDescription createProjectDescription() {
+		MutableProjectDescription description = new MutableProjectDescription();
 		description.setGroupId("com.example");
 		description.setArtifactId("demo");
 		description.setApplicationName("DemoApplication");

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/build/gradle/DependencyManagementPluginVersionResolver.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.spring.initializr.generator.spring.build.gradle;
 
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 
 /**
  * Strategy for resolving a dependency management plugin version from a platform version.
@@ -33,6 +33,6 @@ public interface DependencyManagementPluginVersionResolver {
 	 * @return the corresponding version for the {@code io.spring.dependency-management}
 	 * plugin
 	 */
-	String resolveDependencyManagementPluginVersion(ResolvedProjectDescription description);
+	String resolveDependencyManagementPluginVersion(ProjectDescription description);
 
 }

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/build/gradle/InitializrDependencyManagementPluginVersionResolver.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.spring.initializr.generator.spring.build.gradle;
 
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.metadata.InitializrMetadata;
 
 /**
@@ -34,7 +34,7 @@ public InitializrDependencyManagementPluginVersionResolver(InitializrMetadata me
 	}
 
 	@Override
-	public String resolveDependencyManagementPluginVersion(ResolvedProjectDescription description) {
+	public String resolveDependencyManagementPluginVersion(ProjectDescription description) {
 		return this.metadata.getConfiguration().getEnv().getGradle().getDependencyManagementPluginVersion();
 	}
 

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/build/gradle/OnGradleVersionCondition.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Arrays;
 
 import io.spring.initializr.generator.condition.ProjectGenerationCondition;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.version.Version;
 import io.spring.initializr.generator.version.VersionParser;
 import io.spring.initializr.generator.version.VersionRange;
@@ -43,7 +43,7 @@ public class OnGradleVersionCondition extends ProjectGenerationCondition {
 	private static final VersionRange GRADLE_5_VERSION_RANGE = VersionParser.DEFAULT.parseRange("2.1.0.M1");
 
 	@Override
-	protected boolean matches(ResolvedProjectDescription projectDescription, ConditionContext context,
+	protected boolean matches(ProjectDescription projectDescription, ConditionContext context,
 			AnnotatedTypeMetadata metadata) {
 		String gradleGeneration = determineGradleGeneration(projectDescription.getPlatformVersion());
 		if (gradleGeneration == null) {

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/build/gradle/SpringBootPluginBuildCustomizer.java
Patch:
@@ -17,7 +17,7 @@
 package io.spring.initializr.generator.spring.build.gradle;
 
 import io.spring.initializr.generator.buildsystem.gradle.GradleBuild;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.spring.build.BuildCustomizer;
 
 /**
@@ -34,11 +34,11 @@ public final class SpringBootPluginBuildCustomizer implements BuildCustomizer<Gr
 	 */
 	public static final int ORDER = -100;
 
-	private final ResolvedProjectDescription projectDescription;
+	private final ProjectDescription projectDescription;
 
 	private final DependencyManagementPluginVersionResolver versionResolver;
 
-	public SpringBootPluginBuildCustomizer(ResolvedProjectDescription projectDescription,
+	public SpringBootPluginBuildCustomizer(ProjectDescription projectDescription,
 			DependencyManagementPluginVersionResolver versionResolver) {
 		this.projectDescription = projectDescription;
 		this.versionResolver = versionResolver;

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/build/maven/DefaultMavenBuildCustomizer.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.spring.initializr.generator.buildsystem.BillOfMaterials;
 import io.spring.initializr.generator.buildsystem.maven.MavenBuild;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.spring.build.BuildCustomizer;
 import io.spring.initializr.metadata.InitializrConfiguration.Env.Maven;
 import io.spring.initializr.metadata.InitializrConfiguration.Env.Maven.ParentPom;
@@ -32,11 +32,11 @@
  */
 public class DefaultMavenBuildCustomizer implements BuildCustomizer<MavenBuild> {
 
-	private final ResolvedProjectDescription projectDescription;
+	private final ProjectDescription projectDescription;
 
 	private final InitializrMetadata metadata;
 
-	public DefaultMavenBuildCustomizer(ResolvedProjectDescription projectDescription, InitializrMetadata metadata) {
+	public DefaultMavenBuildCustomizer(ProjectDescription projectDescription, InitializrMetadata metadata) {
 		this.projectDescription = projectDescription;
 		this.metadata = metadata;
 	}

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/MainSourceCodeProjectContributor.java
Patch:
@@ -26,7 +26,7 @@
 import io.spring.initializr.generator.language.SourceCode;
 import io.spring.initializr.generator.language.SourceCodeWriter;
 import io.spring.initializr.generator.language.TypeDeclaration;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.project.contributor.ProjectContributor;
 import io.spring.initializr.generator.spring.util.LambdaSafe;
 
@@ -44,7 +44,7 @@
 public class MainSourceCodeProjectContributor<T extends TypeDeclaration, C extends CompilationUnit<T>, S extends SourceCode<T, C>>
 		implements ProjectContributor {
 
-	private final ResolvedProjectDescription projectDescription;
+	private final ProjectDescription projectDescription;
 
 	private final Supplier<S> sourceFactory;
 
@@ -56,7 +56,7 @@ public class MainSourceCodeProjectContributor<T extends TypeDeclaration, C exten
 
 	private final ObjectProvider<MainSourceCodeCustomizer<?, ?, ?>> mainSourceCodeCustomizers;
 
-	public MainSourceCodeProjectContributor(ResolvedProjectDescription projectDescription, Supplier<S> sourceFactory,
+	public MainSourceCodeProjectContributor(ProjectDescription projectDescription, Supplier<S> sourceFactory,
 			SourceCodeWriter<S> sourceWriter, ObjectProvider<MainApplicationTypeCustomizer<?>> mainTypeCustomizers,
 			ObjectProvider<MainCompilationUnitCustomizer<?, ?>> mainCompilationUnitCustomizers,
 			ObjectProvider<MainSourceCodeCustomizer<?, ?, ?>> mainSourceCodeCustomizers) {

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/SourceCodeProjectGenerationConfiguration.java
Patch:
@@ -21,8 +21,8 @@
 import io.spring.initializr.generator.language.Annotation;
 import io.spring.initializr.generator.language.TypeDeclaration;
 import io.spring.initializr.generator.packaging.war.WarPackaging;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.project.ProjectGenerationConfiguration;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
 
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.context.annotation.Bean;
@@ -66,9 +66,9 @@ public TestApplicationTypeCustomizer<TypeDeclaration> junitJupiterSpringBootTest
 	@ConditionalOnPackaging(WarPackaging.ID)
 	static class WarPackagingConfiguration {
 
-		private final ResolvedProjectDescription projectDescription;
+		private final ProjectDescription projectDescription;
 
-		WarPackagingConfiguration(ResolvedProjectDescription projectDescription) {
+		WarPackagingConfiguration(ProjectDescription projectDescription) {
 			this.projectDescription = projectDescription;
 		}
 

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/TestSourceCodeProjectContributor.java
Patch:
@@ -26,7 +26,7 @@
 import io.spring.initializr.generator.language.SourceCode;
 import io.spring.initializr.generator.language.SourceCodeWriter;
 import io.spring.initializr.generator.language.TypeDeclaration;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.project.contributor.ProjectContributor;
 import io.spring.initializr.generator.spring.util.LambdaSafe;
 
@@ -43,7 +43,7 @@
 public class TestSourceCodeProjectContributor<T extends TypeDeclaration, C extends CompilationUnit<T>, S extends SourceCode<T, C>>
 		implements ProjectContributor {
 
-	private final ResolvedProjectDescription projectDescription;
+	private final ProjectDescription projectDescription;
 
 	private final Supplier<S> sourceFactory;
 
@@ -53,7 +53,7 @@ public class TestSourceCodeProjectContributor<T extends TypeDeclaration, C exten
 
 	private final ObjectProvider<TestSourceCodeCustomizer<?, ?, ?>> testSourceCodeCustomizers;
 
-	public TestSourceCodeProjectContributor(ResolvedProjectDescription projectDescription, Supplier<S> sourceFactory,
+	public TestSourceCodeProjectContributor(ProjectDescription projectDescription, Supplier<S> sourceFactory,
 			SourceCodeWriter<S> sourceWriter,
 			ObjectProvider<TestApplicationTypeCustomizer<?>> testApplicationTypeCustomizers,
 			ObjectProvider<TestSourceCodeCustomizer<?, ?, ?>> testSourceCodeCustomizers) {

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/groovy/GroovyProjectGenerationConfiguration.java
Patch:
@@ -23,8 +23,8 @@
 import io.spring.initializr.generator.language.groovy.GroovySourceCode;
 import io.spring.initializr.generator.language.groovy.GroovySourceCodeWriter;
 import io.spring.initializr.generator.language.groovy.GroovyTypeDeclaration;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.project.ProjectGenerationConfiguration;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
 import io.spring.initializr.generator.spring.code.MainApplicationTypeCustomizer;
 import io.spring.initializr.generator.spring.code.MainCompilationUnitCustomizer;
 import io.spring.initializr.generator.spring.code.MainSourceCodeCustomizer;
@@ -48,11 +48,11 @@
 @Import(GroovyProjectGenerationDefaultContributorsConfiguration.class)
 public class GroovyProjectGenerationConfiguration {
 
-	private final ResolvedProjectDescription projectDescription;
+	private final ProjectDescription projectDescription;
 
 	private final IndentingWriterFactory indentingWriterFactory;
 
-	public GroovyProjectGenerationConfiguration(ResolvedProjectDescription projectDescription,
+	public GroovyProjectGenerationConfiguration(ProjectDescription projectDescription,
 			IndentingWriterFactory indentingWriterFactory) {
 		this.projectDescription = projectDescription;
 		this.indentingWriterFactory = indentingWriterFactory;

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/groovy/GroovyProjectGenerationDefaultContributorsConfiguration.java
Patch:
@@ -32,7 +32,7 @@
 import io.spring.initializr.generator.language.groovy.GroovyReturnStatement;
 import io.spring.initializr.generator.language.groovy.GroovyTypeDeclaration;
 import io.spring.initializr.generator.packaging.war.WarPackaging;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.spring.build.BuildCustomizer;
 import io.spring.initializr.generator.spring.code.MainApplicationTypeCustomizer;
 import io.spring.initializr.generator.spring.code.ServletInitializerCustomizer;
@@ -95,7 +95,7 @@ static class WarPackagingConfiguration {
 
 		@Bean
 		ServletInitializerCustomizer<GroovyTypeDeclaration> javaServletInitializerCustomizer(
-				ResolvedProjectDescription projectDescription) {
+				ProjectDescription projectDescription) {
 			return (typeDeclaration) -> {
 				GroovyMethodDeclaration configure = GroovyMethodDeclaration.method("configure")
 						.modifiers(Modifier.PROTECTED)

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/java/JavaProjectGenerationConfiguration.java
Patch:
@@ -23,8 +23,8 @@
 import io.spring.initializr.generator.language.java.JavaSourceCode;
 import io.spring.initializr.generator.language.java.JavaSourceCodeWriter;
 import io.spring.initializr.generator.language.java.JavaTypeDeclaration;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.project.ProjectGenerationConfiguration;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
 import io.spring.initializr.generator.spring.code.MainApplicationTypeCustomizer;
 import io.spring.initializr.generator.spring.code.MainCompilationUnitCustomizer;
 import io.spring.initializr.generator.spring.code.MainSourceCodeCustomizer;
@@ -48,11 +48,11 @@
 @Import(JavaProjectGenerationDefaultContributorsConfiguration.class)
 public class JavaProjectGenerationConfiguration {
 
-	private final ResolvedProjectDescription projectDescription;
+	private final ProjectDescription projectDescription;
 
 	private final IndentingWriterFactory indentingWriterFactory;
 
-	public JavaProjectGenerationConfiguration(ResolvedProjectDescription projectDescription,
+	public JavaProjectGenerationConfiguration(ProjectDescription projectDescription,
 			IndentingWriterFactory indentingWriterFactory) {
 		this.projectDescription = projectDescription;
 		this.indentingWriterFactory = indentingWriterFactory;

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/java/JavaProjectGenerationDefaultContributorsConfiguration.java
Patch:
@@ -28,7 +28,7 @@
 import io.spring.initializr.generator.language.java.JavaReturnStatement;
 import io.spring.initializr.generator.language.java.JavaTypeDeclaration;
 import io.spring.initializr.generator.packaging.war.WarPackaging;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.spring.code.MainApplicationTypeCustomizer;
 import io.spring.initializr.generator.spring.code.ServletInitializerCustomizer;
 import io.spring.initializr.generator.spring.code.TestApplicationTypeCustomizer;
@@ -89,7 +89,7 @@ static class WarPackagingConfiguration {
 
 		@Bean
 		ServletInitializerCustomizer<JavaTypeDeclaration> javaServletInitializerCustomizer(
-				ResolvedProjectDescription projectDescription) {
+				ProjectDescription projectDescription) {
 			return (typeDeclaration) -> {
 				typeDeclaration.modifiers(Modifier.PUBLIC);
 				JavaMethodDeclaration configure = JavaMethodDeclaration.method("configure")

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/kotlin/InitializrMetadataKotlinVersionResolver.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.spring.initializr.generator.spring.code.kotlin;
 
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.metadata.InitializrMetadata;
 
 /**
@@ -34,7 +34,7 @@ public InitializrMetadataKotlinVersionResolver(InitializrMetadata metadata) {
 	}
 
 	@Override
-	public String resolveKotlinVersion(ResolvedProjectDescription description) {
+	public String resolveKotlinVersion(ProjectDescription description) {
 		return this.metadata.getConfiguration().getEnv().getKotlin()
 				.resolveKotlinVersion(description.getPlatformVersion());
 	}

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/kotlin/KotlinJacksonBuildCustomizer.java
Patch:
@@ -19,7 +19,7 @@
 import io.spring.initializr.generator.buildsystem.Build;
 import io.spring.initializr.generator.buildsystem.DependencyScope;
 import io.spring.initializr.generator.language.kotlin.KotlinLanguage;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.spring.build.BuildCustomizer;
 import io.spring.initializr.generator.spring.build.BuildMetadataResolver;
 import io.spring.initializr.metadata.InitializrMetadata;
@@ -37,9 +37,9 @@ public class KotlinJacksonBuildCustomizer implements BuildCustomizer<Build> {
 
 	private final BuildMetadataResolver buildMetadataResolver;
 
-	private final ResolvedProjectDescription description;
+	private final ProjectDescription description;
 
-	public KotlinJacksonBuildCustomizer(InitializrMetadata metadata, ResolvedProjectDescription description) {
+	public KotlinJacksonBuildCustomizer(InitializrMetadata metadata, ProjectDescription description) {
 		this.buildMetadataResolver = new BuildMetadataResolver(metadata);
 		this.description = description;
 	}

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/kotlin/KotlinProjectGenerationConfiguration.java
Patch:
@@ -23,8 +23,8 @@
 import io.spring.initializr.generator.language.kotlin.KotlinSourceCode;
 import io.spring.initializr.generator.language.kotlin.KotlinSourceCodeWriter;
 import io.spring.initializr.generator.language.kotlin.KotlinTypeDeclaration;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.project.ProjectGenerationConfiguration;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
 import io.spring.initializr.generator.spring.code.MainApplicationTypeCustomizer;
 import io.spring.initializr.generator.spring.code.MainCompilationUnitCustomizer;
 import io.spring.initializr.generator.spring.code.MainSourceCodeCustomizer;
@@ -50,11 +50,11 @@
 @Import(KotlinProjectGenerationDefaultContributorsConfiguration.class)
 public class KotlinProjectGenerationConfiguration {
 
-	private final ResolvedProjectDescription projectDescription;
+	private final ProjectDescription projectDescription;
 
 	private final IndentingWriterFactory indentingWriterFactory;
 
-	public KotlinProjectGenerationConfiguration(ResolvedProjectDescription projectDescription,
+	public KotlinProjectGenerationConfiguration(ProjectDescription projectDescription,
 			IndentingWriterFactory indentingWriterFactory) {
 		this.projectDescription = projectDescription;
 		this.indentingWriterFactory = indentingWriterFactory;

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/kotlin/KotlinVersionResolver.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.spring.initializr.generator.spring.code.kotlin;
 
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 
 /**
  * Strategy for resolving a Kotlin version from a platform version.
@@ -32,6 +32,6 @@ public interface KotlinVersionResolver {
 	 * @param description the description of the project being generated
 	 * @return the corresponding Kotlin version
 	 */
-	String resolveKotlinVersion(ResolvedProjectDescription description);
+	String resolveKotlinVersion(ProjectDescription description);
 
 }

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/documentation/HelpDocumentProjectGenerationDefaultContributorsConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.spring.initializr.generator.spring.documentation;
 
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.spring.scm.git.GitIgnoreCustomizer;
 import io.spring.initializr.metadata.InitializrMetadata;
 
@@ -33,7 +33,7 @@ public class HelpDocumentProjectGenerationDefaultContributorsConfiguration {
 
 	@Bean
 	public RequestedDependenciesHelpDocumentCustomizer dependenciesHelpDocumentCustomizer(
-			ResolvedProjectDescription description, InitializrMetadata metadata) {
+			ProjectDescription description, InitializrMetadata metadata) {
 		return new RequestedDependenciesHelpDocumentCustomizer(description, metadata);
 	}
 

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/documentation/RequestedDependenciesHelpDocumentCustomizer.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.function.Supplier;
 
 import io.spring.initializr.generator.io.text.BulletedSection;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.metadata.Dependency;
 import io.spring.initializr.metadata.InitializrMetadata;
 import io.spring.initializr.metadata.Link;
@@ -38,11 +38,11 @@
  */
 public class RequestedDependenciesHelpDocumentCustomizer implements HelpDocumentCustomizer {
 
-	private final ResolvedProjectDescription projectDescription;
+	private final ProjectDescription projectDescription;
 
 	private final InitializrMetadata metadata;
 
-	public RequestedDependenciesHelpDocumentCustomizer(ResolvedProjectDescription projectDescription,
+	public RequestedDependenciesHelpDocumentCustomizer(ProjectDescription projectDescription,
 			InitializrMetadata metadata) {
 		this.projectDescription = projectDescription;
 		this.metadata = metadata;

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/DependencyManagementBuildCustomizerTests.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.spring.initializr.generator.buildsystem.Build;
 import io.spring.initializr.generator.buildsystem.maven.MavenBuild;
-import io.spring.initializr.generator.project.ProjectDescription;
+import io.spring.initializr.generator.project.MutableProjectDescription;
 import io.spring.initializr.generator.test.InitializrMetadataTestBuilder;
 import io.spring.initializr.generator.version.Version;
 import io.spring.initializr.metadata.BillOfMaterials;
@@ -74,9 +74,9 @@ private MavenBuild createBuild(InitializrMetadata metadata) {
 	}
 
 	private void customizeBuild(Build build, InitializrMetadata metadata) {
-		ProjectDescription projectDescription = new ProjectDescription();
+		MutableProjectDescription projectDescription = new MutableProjectDescription();
 		projectDescription.setPlatformVersion(Version.parse("2.0.0.RELEASE"));
-		new DependencyManagementBuildCustomizer(projectDescription.resolve(), metadata).customize(build);
+		new DependencyManagementBuildCustomizer(projectDescription, metadata).customize(build);
 	}
 
 }

File: initializr-generator/src/main/java/io/spring/initializr/generator/condition/ConditionalOnRequestedDependency.java
Patch:
@@ -22,12 +22,12 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 
 import org.springframework.context.annotation.Conditional;
 
 /**
- * Condition that matches when a {@link ResolvedProjectDescription} defines a particular
+ * Condition that matches when a {@link ProjectDescription} defines a particular
  * dependency. A generated project may ultimately define a different set of dependencies
  * according to the contributors that have been executed. To contribute to the project
  * according to the real set, prefer querying the model itself rather than using this

File: initializr-generator/src/main/java/io/spring/initializr/generator/condition/OnBuildSystemCondition.java
Patch:
@@ -17,7 +17,7 @@
 package io.spring.initializr.generator.condition;
 
 import io.spring.initializr.generator.buildsystem.BuildSystem;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.core.type.AnnotatedTypeMetadata;
@@ -33,7 +33,7 @@
 class OnBuildSystemCondition extends ProjectGenerationCondition {
 
 	@Override
-	protected boolean matches(ResolvedProjectDescription projectDescription, ConditionContext context,
+	protected boolean matches(ProjectDescription projectDescription, ConditionContext context,
 			AnnotatedTypeMetadata metadata) {
 		MultiValueMap<String, Object> attributes = metadata
 				.getAllAnnotationAttributes(ConditionalOnBuildSystem.class.getName());

File: initializr-generator/src/main/java/io/spring/initializr/generator/condition/OnLanguageCondition.java
Patch:
@@ -17,7 +17,7 @@
 package io.spring.initializr.generator.condition;
 
 import io.spring.initializr.generator.language.Language;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.core.type.AnnotatedTypeMetadata;
@@ -31,7 +31,7 @@
 class OnLanguageCondition extends ProjectGenerationCondition {
 
 	@Override
-	protected boolean matches(ResolvedProjectDescription projectDescription, ConditionContext context,
+	protected boolean matches(ProjectDescription projectDescription, ConditionContext context,
 			AnnotatedTypeMetadata metadata) {
 		if (projectDescription.getLanguage() == null) {
 			return false;

File: initializr-generator/src/main/java/io/spring/initializr/generator/condition/OnPackagingCondition.java
Patch:
@@ -17,7 +17,7 @@
 package io.spring.initializr.generator.condition;
 
 import io.spring.initializr.generator.packaging.Packaging;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.core.type.AnnotatedTypeMetadata;
@@ -31,7 +31,7 @@
 class OnPackagingCondition extends ProjectGenerationCondition {
 
 	@Override
-	protected boolean matches(ResolvedProjectDescription projectDescription, ConditionContext context,
+	protected boolean matches(ProjectDescription projectDescription, ConditionContext context,
 			AnnotatedTypeMetadata metadata) {
 		if (projectDescription.getPackaging() == null) {
 			return false;

File: initializr-generator/src/main/java/io/spring/initializr/generator/condition/OnPlatformVersionCondition.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.Arrays;
 
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.version.Version;
 import io.spring.initializr.generator.version.VersionParser;
 
@@ -35,7 +35,7 @@
 class OnPlatformVersionCondition extends ProjectGenerationCondition {
 
 	@Override
-	protected boolean matches(ResolvedProjectDescription projectDescription, ConditionContext context,
+	protected boolean matches(ProjectDescription projectDescription, ConditionContext context,
 			AnnotatedTypeMetadata metadata) {
 		Version platformVersion = projectDescription.getPlatformVersion();
 		if (platformVersion == null) {

File: initializr-generator/src/main/java/io/spring/initializr/generator/condition/OnRequestedDependencyCondition.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.spring.initializr.generator.condition;
 
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.core.type.AnnotatedTypeMetadata;
@@ -30,7 +30,7 @@
 class OnRequestedDependencyCondition extends ProjectGenerationCondition {
 
 	@Override
-	protected boolean matches(ResolvedProjectDescription projectDescription, ConditionContext context,
+	protected boolean matches(ProjectDescription projectDescription, ConditionContext context,
 			AnnotatedTypeMetadata metadata) {
 		String id = (String) metadata.getAnnotationAttributes(ConditionalOnRequestedDependency.class.getName())
 				.get("value");

File: initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDescriptionCustomizer.java
Patch:
@@ -28,7 +28,7 @@
 @FunctionalInterface
 public interface ProjectDescriptionCustomizer extends Ordered {
 
-	void customize(ProjectDescription description);
+	void customize(MutableProjectDescription description);
 
 	@Override
 	default int getOrder() {

File: initializr-generator/src/main/java/io/spring/initializr/generator/project/ProjectDirectoryFactory.java
Patch:
@@ -28,12 +28,11 @@
 public interface ProjectDirectoryFactory {
 
 	/**
-	 * Create a dedicated project directory for the specified
-	 * {@link ResolvedProjectDescription}.
+	 * Create a dedicated project directory for the specified {@link ProjectDescription}.
 	 * @param description the description of a project to generate
 	 * @return a dedicated existing directory
 	 * @throws IOException if creating the directory failed
 	 */
-	Path createProjectDirectory(ResolvedProjectDescription description) throws IOException;
+	Path createProjectDirectory(ProjectDescription description) throws IOException;
 
 }

File: initializr-web/src/main/java/io/spring/initializr/web/project/MainController.java
Patch:
@@ -33,7 +33,7 @@
 import io.spring.initializr.generator.buildsystem.BuildSystem;
 import io.spring.initializr.generator.buildsystem.maven.MavenBuildSystem;
 import io.spring.initializr.generator.io.template.TemplateRenderer;
-import io.spring.initializr.generator.project.ResolvedProjectDescription;
+import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.version.Version;
 import io.spring.initializr.metadata.DependencyMetadata;
 import io.spring.initializr.metadata.DependencyMetadataProvider;
@@ -306,7 +306,7 @@ private String generateFileName(ProjectRequest request, String extension) {
 		}
 	}
 
-	private static String getWrapperScript(ResolvedProjectDescription description) {
+	private static String getWrapperScript(ProjectDescription description) {
 		BuildSystem buildSystem = description.getBuildSystem();
 		String script = buildSystem.id().equals(MavenBuildSystem.ID) ? "mvnw" : "gradlew";
 		return (description.getBaseDirectory() != null) ? description.getBaseDirectory() + "/" + script : script;

File: initializr-web/src/main/java/io/spring/initializr/web/project/ProjectRequestToDescriptionConverter.java
Patch:
@@ -23,6 +23,7 @@
 import io.spring.initializr.generator.buildsystem.BuildSystem;
 import io.spring.initializr.generator.language.Language;
 import io.spring.initializr.generator.packaging.Packaging;
+import io.spring.initializr.generator.project.MutableProjectDescription;
 import io.spring.initializr.generator.project.ProjectDescription;
 import io.spring.initializr.generator.version.Version;
 import io.spring.initializr.metadata.DefaultMetadataElement;
@@ -50,7 +51,7 @@ public ProjectDescription convert(ProjectRequest request, InitializrMetadata met
 		String springBootVersion = getSpringBootVersion(request, metadata);
 		List<Dependency> resolvedDependencies = getResolvedDependencies(request, springBootVersion, metadata);
 		validateDependencyRange(springBootVersion, resolvedDependencies);
-		ProjectDescription description = new ProjectDescription();
+		MutableProjectDescription description = new MutableProjectDescription();
 		description.setApplicationName(getApplicationName(request, metadata));
 		description.setArtifactId(getArtifactId(request, metadata));
 		description.setBaseDirectory(getBaseDirectory(request.getBaseDir(), request.getArtifactId()));

File: initializr-web/src/test/java/io/spring/initializr/web/project/ProjectGenerationDescriptionCustomizerTests.java
Patch:
@@ -17,7 +17,7 @@
 package io.spring.initializr.web.project;
 
 import io.spring.initializr.generator.language.java.JavaLanguage;
-import io.spring.initializr.generator.project.ProjectDescription;
+import io.spring.initializr.generator.project.MutableProjectDescription;
 import io.spring.initializr.generator.project.ProjectDescriptionCustomizer;
 import io.spring.initializr.generator.test.project.ProjectStructure;
 import io.spring.initializr.generator.version.Version;
@@ -52,7 +52,7 @@ static class ProjectDescriptionCustomizerConfiguration {
 		ProjectDescriptionCustomizer secondPostProcessor() {
 			return new ProjectDescriptionCustomizer() {
 				@Override
-				public void customize(ProjectDescription description) {
+				public void customize(MutableProjectDescription description) {
 					description.setLanguage(new JavaLanguage("1.7"));
 				}
 
@@ -67,7 +67,7 @@ public int getOrder() {
 		ProjectDescriptionCustomizer firstPostProcessor() {
 			return new ProjectDescriptionCustomizer() {
 				@Override
-				public void customize(ProjectDescription description) {
+				public void customize(MutableProjectDescription description) {
 					description.setLanguage(new JavaLanguage("1.2"));
 					description.setPlatformVersion(Version.parse("2.2.3.RELEASE"));
 				}

File: initializr-generator/src/main/java/io/spring/initializr/generator/version/VersionParser.java
Patch:
@@ -71,7 +71,7 @@ public Version parse(String text) {
 		Matcher matcher = VERSION_REGEX.matcher(text.trim());
 		if (!matcher.matches()) {
 			throw new InvalidVersionException("Could not determine version based on '" + text + "': version format "
-					+ "is Minor.Major.Patch.Qualifier " + "(e.g. 1.0.5.RELEASE)");
+					+ "is Major.Minor.Patch.Qualifier " + "(e.g. 1.0.5.RELEASE)");
 		}
 		Integer major = Integer.valueOf(matcher.group(1));
 		String minor = matcher.group(2);

File: initializr-generator/src/main/java/io/spring/initializr/generator/version/VersionParser.java
Patch:
@@ -71,7 +71,7 @@ public Version parse(String text) {
 		Matcher matcher = VERSION_REGEX.matcher(text.trim());
 		if (!matcher.matches()) {
 			throw new InvalidVersionException("Could not determine version based on '" + text + "': version format "
-					+ "is Minor.Major.Patch.Qualifier " + "(e.g. 1.0.5.RELEASE)");
+					+ "is Major.Minor.Patch.Qualifier " + "(e.g. 1.0.5.RELEASE)");
 		}
 		Integer major = Integer.valueOf(matcher.group(1));
 		String minor = matcher.group(2);

File: initializr-generator/src/main/java/io/spring/initializr/generator/buildsystem/gradle/GradleBuildWriter.java
Patch:
@@ -86,7 +86,7 @@ private void writeImports(IndentingWriter writer, GradleBuild build) {
 	protected abstract void writeConfigurations(IndentingWriter writer, GradleBuild build);
 
 	protected abstract void writeConfiguration(IndentingWriter writer, String configurationName,
-			ConfigurationCustomization configurationCustomization);
+			ConfigurationCustomization configurationCustomization, List<String> customConfigurations);
 
 	protected final void writeRepositories(IndentingWriter writer, GradleBuild build) {
 		writeNestedCollection(writer, "repositories", build.repositories().items().collect(Collectors.toList()),

File: initializr-generator/src/main/java/io/spring/initializr/generator/buildsystem/gradle/GroovyDslGradleBuildWriter.java
Patch:
@@ -89,7 +89,7 @@ protected void writeJavaSourceCompatibility(IndentingWriter writer, GradleBuild
 
 	@Override
 	protected void writeConfiguration(IndentingWriter writer, String configurationName,
-			GradleBuild.ConfigurationCustomization configurationCustomization) {
+			GradleBuild.ConfigurationCustomization configurationCustomization, List<String> customConfigurations) {
 		writer.println(configurationName + " {");
 		writer.indented(() -> writer.println(
 				String.format("extendsFrom %s", String.join(", ", configurationCustomization.getExtendsFrom()))));
@@ -125,7 +125,7 @@ protected void writeConfigurations(IndentingWriter writer, GradleBuild build) {
 		writer.indented(() -> {
 			configurations.forEach(writer::println);
 			configurationCustomizations
-					.forEach((name, customization) -> writeConfiguration(writer, name, customization));
+					.forEach((name, customization) -> writeConfiguration(writer, name, customization, configurations));
 		});
 		writer.println("}");
 		writer.println("");

File: initializr-docs/src/test/java/io/spring/initializr/stub/SampleApp.java
Patch:
@@ -17,6 +17,7 @@
 package io.spring.initializr.stub;
 
 import io.spring.initializr.actuate.autoconfigure.InitializrActuatorEndpointsAutoConfiguration;
+import io.spring.initializr.generator.spring.autoconfigure.GeneratorSpringAutoConfiguration;
 import io.spring.initializr.web.autoconfigure.InitializrAutoConfiguration;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -26,8 +27,8 @@
  *
  * @author Stephane Nicoll
  */
-@SpringBootApplication(
-		exclude = { InitializrAutoConfiguration.class, InitializrActuatorEndpointsAutoConfiguration.class })
+@SpringBootApplication(exclude = { InitializrAutoConfiguration.class,
+		InitializrActuatorEndpointsAutoConfiguration.class, GeneratorSpringAutoConfiguration.class })
 public class SampleApp {
 
 }

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerServiceMetadataIntegrationTests.java
Patch:
@@ -88,7 +88,7 @@ void validateJson() throws JSONException {
 	}
 
 	@Test
-	void metadataClientRedirect() {
+	void metadataClientEndpoint() {
 		ResponseEntity<String> response = execute("/metadata/client", String.class, null,
 				"application/json");
 		validateCurrentMetadata(response);

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerServiceMetadataIntegrationTests.java
Patch:
@@ -88,7 +88,7 @@ void validateJson() throws JSONException {
 	}
 
 	@Test
-	void metadataClientRedirect() {
+	void metadataClientEndpoint() {
 		ResponseEntity<String> response = execute("/metadata/client", String.class, null,
 				"application/json");
 		validateCurrentMetadata(response);

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/test/code/SourceCodeAssert.java
Patch:
@@ -42,8 +42,8 @@ public SourceCodeAssert(String name, String content) {
 	}
 
 	public SourceCodeAssert equalsTo(Resource expected) {
-		try (InputStream stream = expected.getInputStream()) {
-			String expectedContent = StreamUtils.copyToString(stream,
+		try (InputStream in = expected.getInputStream()) {
+			String expectedContent = StreamUtils.copyToString(in,
 					Charset.forName("UTF-8"));
 			assertThat(this.content).describedAs("Content for %s", this.name)
 					.isEqualTo(expectedContent.replaceAll("\r\n", "\n"));

File: initializr-metadata/src/main/java/io/spring/initializr/metadata/InitializrMetadataBuilder.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.spring.initializr.metadata;
 
+import java.io.InputStream;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.List;
@@ -202,9 +203,8 @@ private static class ResourceInitializrMetadataCustomizer
 		@Override
 		public void customize(InitializrMetadata metadata) {
 			logger.info("Loading initializr metadata from " + this.resource);
-			try {
-				String content = StreamUtils.copyToString(this.resource.getInputStream(),
-						UTF_8);
+			try (InputStream in = this.resource.getInputStream()) {
+				String content = StreamUtils.copyToString(in, UTF_8);
 				ObjectMapper objectMapper = new ObjectMapper();
 				InitializrMetadata anotherMetadata = objectMapper.readValue(content,
 						InitializrMetadata.class);

File: initializr-web/src/test/java/io/spring/initializr/web/AbstractInitializrIntegrationTests.java
Patch:
@@ -243,8 +243,8 @@ protected Path writeArchive(byte[] body) throws IOException {
 	protected JSONObject readJsonFrom(String path) {
 		try {
 			ClassPathResource resource = new ClassPathResource(path);
-			try (InputStream stream = resource.getInputStream()) {
-				String json = StreamUtils.copyToString(stream, Charset.forName("UTF-8"));
+			try (InputStream in = resource.getInputStream()) {
+				String json = StreamUtils.copyToString(in, Charset.forName("UTF-8"));
 				String placeholder = "";
 				if (this instanceof AbstractInitializrControllerIntegrationTests) {
 					placeholder = ((AbstractInitializrControllerIntegrationTests) this).host;

File: initializr-generator/src/main/java/io/spring/initializr/generator/language/java/JavaMethodDeclaration.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.spring.initializr.generator.language.java;
 
-import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -99,7 +98,7 @@ public static final class Builder {
 
 		private String returnType = "void";
 
-		private int modifiers = Modifier.PUBLIC;
+		private int modifiers;
 
 		private Builder(String name) {
 			this.name = name;

File: initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/KotlinDslGradleBuildWriterTests.java
Patch:
@@ -251,7 +251,7 @@ void gradleBuildWithVersionedDependency() throws IOException {
 				DependencyScope.COMPILE);
 		List<String> lines = generateBuild(build);
 		assertThat(lines).containsSequence("dependencies {",
-				"    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}\")",
+				"    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:${property(\"kotlinVersion\")}\")",
 				"}");
 	}
 
@@ -425,7 +425,7 @@ void gradleBuildWithOrderedBoms() throws IOException {
 		List<String> lines = generateBuild(build);
 		assertThat(lines).containsSequence("dependencyManagement {", "    imports {",
 				"        mavenBom(\"com.example:my-project-dependencies:1.0.0.RELEASE\")",
-				"        mavenBom(\"com.example:root-dependencies:${rootVersion}\")",
+				"        mavenBom(\"com.example:root-dependencies:${property(\"rootVersion\")}\")",
 				"    }", "}");
 	}
 

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/kotlin/KotlinGradleBuildCustomizer.java
Patch:
@@ -26,6 +26,7 @@
  * {@link BuildCustomizer} for Kotlin projects build with Gradle.
  *
  * @author Andy Wilkinson
+ * @author Jean-Baptiste Nizet
  */
 class KotlinGradleBuildCustomizer implements BuildCustomizer<GradleBuild> {
 
@@ -39,8 +40,8 @@ class KotlinGradleBuildCustomizer implements BuildCustomizer<GradleBuild> {
 	public void customize(GradleBuild build) {
 		build.addPlugin("org.jetbrains.kotlin.jvm", this.settings.getVersion());
 		build.addPlugin("org.jetbrains.kotlin.plugin.spring", this.settings.getVersion());
-		build.customizeTask("compileKotlin", this::customizeKotlinOptions);
-		build.customizeTask("compileTestKotlin", this::customizeKotlinOptions);
+		build.customizeTasksWithType("org.jetbrains.kotlin.gradle.tasks.KotlinCompile",
+				this::customizeKotlinOptions);
 	}
 
 	private void customizeKotlinOptions(TaskCustomization compile) {

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/kotlin/KotlinGradleBuildCustomizer.java
Patch:
@@ -40,8 +40,8 @@ class KotlinGradleBuildCustomizer implements BuildCustomizer<GradleBuild> {
 	public void customize(GradleBuild build) {
 		build.addPlugin("org.jetbrains.kotlin.jvm", this.settings.getVersion());
 		build.addPlugin("org.jetbrains.kotlin.plugin.spring", this.settings.getVersion());
-		build.addImportedType("org.jetbrains.kotlin.gradle.tasks.KotlinCompile");
-		build.customizeTasksWithType("KotlinCompile", this::customizeKotlinOptions);
+		build.customizeTasksWithType("org.jetbrains.kotlin.gradle.tasks.KotlinCompile",
+				this::customizeKotlinOptions);
 	}
 
 	private void customizeKotlinOptions(TaskCustomization compile) {

File: initializr-generator/src/main/java/io/spring/initializr/generator/buildsystem/gradle/GradleBuildWriter.java
Patch:
@@ -291,7 +291,6 @@ private void writeTasksWithTypeCustomizations(IndentingWriter writer,
 			GradleBuild build) {
 		Map<String, GradleBuild.TaskCustomization> tasksWithTypeCustomizations = build
 				.getTasksWithTypeCustomizations();
-
 		tasksWithTypeCustomizations.forEach((typeName, customization) -> {
 			writer.println();
 			writer.println("tasks.withType(" + typeName + ") {");

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/kotlin/KotlinGradleBuildCustomizer.java
Patch:
@@ -26,6 +26,7 @@
  * {@link BuildCustomizer} for Kotlin projects build with Gradle.
  *
  * @author Andy Wilkinson
+ * @author Jean-Baptiste Nizet
  */
 class KotlinGradleBuildCustomizer implements BuildCustomizer<GradleBuild> {
 
@@ -39,8 +40,8 @@ class KotlinGradleBuildCustomizer implements BuildCustomizer<GradleBuild> {
 	public void customize(GradleBuild build) {
 		build.addPlugin("org.jetbrains.kotlin.jvm", this.settings.getVersion());
 		build.addPlugin("org.jetbrains.kotlin.plugin.spring", this.settings.getVersion());
-		build.customizeTask("compileKotlin", this::customizeKotlinOptions);
-		build.customizeTask("compileTestKotlin", this::customizeKotlinOptions);
+		build.addImportedType("org.jetbrains.kotlin.gradle.tasks.KotlinCompile");
+		build.customizeTasksWithType("KotlinCompile", this::customizeKotlinOptions);
 	}
 
 	private void customizeKotlinOptions(TaskCustomization compile) {

File: initializr-web/src/test/java/io/spring/initializr/web/autoconfigure/InitializrAutoConfigurationTests.java
Patch:
@@ -24,7 +24,6 @@
 import io.spring.initializr.web.project.ProjectRequestToDescriptionConverter;
 import io.spring.initializr.web.support.DefaultInitializrMetadataUpdateStrategy;
 import io.spring.initializr.web.support.InitializrMetadataUpdateStrategy;
-import io.spring.initializr.web.ui.UiController;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
@@ -156,7 +155,6 @@ void webConfiguration() {
 			assertThat(context).hasSingleBean(ProjectGenerationInvoker.class);
 			assertThat(context).hasSingleBean(ProjectRequestToDescriptionConverter.class);
 			assertThat(context).hasSingleBean(MainController.class);
-			assertThat(context).hasSingleBean(UiController.class);
 		});
 	}
 
@@ -165,7 +163,6 @@ void webConfigurationConditionalOnWebApplication() {
 		this.contextRunner.run((context) -> {
 			assertThat(context).doesNotHaveBean(InitializrWebConfig.class);
 			assertThat(context).doesNotHaveBean(MainController.class);
-			assertThat(context).doesNotHaveBean(UiController.class);
 		});
 	}
 

File: initializr-web/src/main/java/io/spring/initializr/web/project/AbstractInitializrController.java
Patch:
@@ -24,7 +24,6 @@
 
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.ExceptionHandler;
-import org.springframework.web.servlet.resource.ResourceUrlProvider;
 import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
 
 /**
@@ -38,8 +37,7 @@ public abstract class AbstractInitializrController {
 
 	private Boolean forceSsl;
 
-	protected AbstractInitializrController(InitializrMetadataProvider metadataProvider,
-			ResourceUrlProvider resourceUrlProvider) {
+	protected AbstractInitializrController(InitializrMetadataProvider metadataProvider) {
 		this.metadataProvider = metadataProvider;
 	}
 

File: initializr-web/src/main/java/io/spring/initializr/web/project/MainController.java
Patch:
@@ -64,7 +64,6 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.ResponseBody;
-import org.springframework.web.servlet.resource.ResourceUrlProvider;
 
 /**
  * The main initializr controller provides access to the configured metadata and serves as
@@ -91,10 +90,10 @@ public class MainController extends AbstractInitializrController {
 	private final ProjectGenerationInvoker projectGenerationInvoker;
 
 	public MainController(InitializrMetadataProvider metadataProvider,
-			TemplateRenderer templateRenderer, ResourceUrlProvider resourceUrlProvider,
+			TemplateRenderer templateRenderer,
 			DependencyMetadataProvider dependencyMetadataProvider,
 			ProjectGenerationInvoker projectGenerationInvoker) {
-		super(metadataProvider, resourceUrlProvider);
+		super(metadataProvider);
 		this.dependencyMetadataProvider = dependencyMetadataProvider;
 		this.commandLineHelpGenerator = new CommandLineHelpGenerator(templateRenderer);
 		this.projectGenerationInvoker = projectGenerationInvoker;

File: initializr-web/src/test/java/io/spring/initializr/web/autoconfigure/InitializrAutoConfigurationTests.java
Patch:
@@ -24,7 +24,6 @@
 import io.spring.initializr.web.project.ProjectRequestToDescriptionConverter;
 import io.spring.initializr.web.support.DefaultInitializrMetadataUpdateStrategy;
 import io.spring.initializr.web.support.InitializrMetadataUpdateStrategy;
-import io.spring.initializr.web.ui.UiController;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
@@ -156,7 +155,6 @@ void webConfiguration() {
 			assertThat(context).hasSingleBean(ProjectGenerationInvoker.class);
 			assertThat(context).hasSingleBean(ProjectRequestToDescriptionConverter.class);
 			assertThat(context).hasSingleBean(MainController.class);
-			assertThat(context).hasSingleBean(UiController.class);
 		});
 	}
 
@@ -165,7 +163,6 @@ void webConfigurationConditionalOnWebApplication() {
 		this.contextRunner.run((context) -> {
 			assertThat(context).doesNotHaveBean(InitializrWebConfig.class);
 			assertThat(context).doesNotHaveBean(MainController.class);
-			assertThat(context).doesNotHaveBean(UiController.class);
 		});
 	}
 

File: initializr-generator/src/main/java/io/spring/initializr/generator/buildsystem/BuildItemResolver.java
Patch:
@@ -17,7 +17,7 @@
 package io.spring.initializr.generator.buildsystem;
 
 /**
- * Resolve an item of the {@link Build} against an identifer.
+ * Resolve an item of the {@link Build} against an identifier.
  *
  * @author Stephane Nicoll
  */

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/kotlin/KotlinJpaMavenBuildCustomizerTests.java
Patch:
@@ -49,6 +49,7 @@ void customizeWhenJpaFacetPresentShouldAddKotlinJpaPlugin() {
 		assertThat(settings.getValue()).asList().element(0)
 				.hasFieldOrPropertyWithValue("name", "plugin")
 				.hasFieldOrPropertyWithValue("value", "jpa");
+		assertThat(plugin.getDependencies()).hasSize(1);
 		MavenPlugin.Dependency pluginDependency = plugin.getDependencies().get(0);
 		assertThat(pluginDependency.getGroupId()).isEqualTo("org.jetbrains.kotlin");
 		assertThat(pluginDependency.getArtifactId()).isEqualTo("kotlin-maven-noarg");

File: initializr-generator-spring/src/main/java/io/spring/initializr/generator/spring/code/kotlin/KotlinJpaMavenBuildCustomizer.java
Patch:
@@ -41,9 +41,9 @@ public void customize(MavenBuild build) {
 		if (this.buildMetadataResolver.hasFacet(build, "jpa")) {
 			MavenPlugin kotlinNoArgPlugin = build.plugin("org.jetbrains.kotlin",
 					"kotlin-maven-noarg", "${kotlin.version}");
-			kotlinNoArgPlugin.configuration((configuration) -> configuration.parameter(
-					"compilerPlugins",
-					(compilerPlugins) -> compilerPlugins.parameter("plugin", "jpa")));
+			kotlinNoArgPlugin.configuration(
+					(configuration) -> configuration.configure("compilerPlugins",
+							(compilerPlugins) -> compilerPlugins.add("plugin", "jpa")));
 		}
 	}
 

File: initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/SettingsGradleProjectContributorTests.java
Patch:
@@ -24,6 +24,7 @@
 import io.spring.initializr.generator.buildsystem.gradle.GradleBuild;
 import io.spring.initializr.generator.io.IndentingWriterFactory;
 import io.spring.initializr.generator.io.SimpleIndentStrategy;
+import io.spring.initializr.generator.test.project.ProjectStructure;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 
@@ -78,9 +79,7 @@ private List<String> generateSettings(GradleBuild build,
 		Path projectDir = Files.createTempDirectory(this.directory, "project-");
 		new SettingsGradleProjectContributor(build, indentingWriterFactory)
 				.contribute(projectDir);
-		Path settingsGradle = projectDir.resolve("settings.gradle");
-		assertThat(settingsGradle).isRegularFile();
-		return Files.readAllLines(settingsGradle);
+		return new ProjectStructure(projectDir).readAllLines("settings.gradle");
 	}
 
 }

File: initializr-web/src/main/java/io/spring/initializr/web/autoconfigure/InitializrAutoConfiguration.java
Patch:
@@ -89,8 +89,8 @@ public IndentingWriterFactory indentingWriterFactory() {
 	}
 
 	@Bean
-	@ConditionalOnMissingBean
-	public TemplateRenderer templateRenderer(Environment environment,
+	@ConditionalOnMissingBean(TemplateRenderer.class)
+	public MustacheTemplateRenderer templateRenderer(Environment environment,
 			ObjectProvider<CacheManager> cacheManager) {
 		return new MustacheTemplateRenderer("classpath:/templates",
 				determineCache(environment, cacheManager.getIfAvailable()));

File: initializr-generator/src/main/java/io/spring/initializr/generator/language/groovy/GroovySourceCodeWriter.java
Patch:
@@ -113,7 +113,6 @@ private void writeTo(Path directory, GroovyCompilationUnit compilationUnit)
 					});
 				}
 				writer.println("}");
-				writer.println("");
 			}
 		}
 	}

File: initializr-generator/src/main/java/io/spring/initializr/generator/language/java/JavaSourceCodeWriter.java
Patch:
@@ -114,7 +114,6 @@ private void writeTo(Path directory, JavaCompilationUnit compilationUnit)
 					});
 				}
 				writer.println("}");
-				writer.println("");
 			}
 		}
 	}

File: initializr-generator/src/main/java/io/spring/initializr/generator/language/kotlin/KotlinSourceCodeWriter.java
Patch:
@@ -86,18 +86,17 @@ private void writeTo(Path directory, KotlinCompilationUnit compilationUnit)
 						.getFunctionDeclarations();
 				if (!functionDeclarations.isEmpty()) {
 					writer.println(" {");
-					writer.println();
 					writer.indented(() -> {
 						for (KotlinFunctionDeclaration functionDeclaration : functionDeclarations) {
 							writeFunction(writer, functionDeclaration);
 						}
 					});
+					writer.println();
 					writer.println("}");
 				}
 				else {
 					writer.println("");
 				}
-				writer.println("");
 			}
 			List<KotlinFunctionDeclaration> topLevelFunctions = compilationUnit
 					.getTopLevelFunctions();
@@ -112,6 +111,7 @@ private void writeTo(Path directory, KotlinCompilationUnit compilationUnit)
 
 	private void writeFunction(IndentingWriter writer,
 			KotlinFunctionDeclaration functionDeclaration) {
+		writer.println();
 		writeAnnotations(writer, functionDeclaration);
 		writeMethodModifiers(writer, functionDeclaration);
 		writer.print("fun ");
@@ -144,7 +144,6 @@ else if (statement instanceof KotlinReturnStatement) {
 			}
 		});
 		writer.println("}");
-		writer.println();
 	}
 
 	private void writeAnnotations(IndentingWriter writer, Annotatable annotatable) {

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/stat/ProjectGenerationStatPublisher.java
Patch:
@@ -61,7 +61,7 @@ public ProjectGenerationStatPublisher(ProjectRequestDocumentFactory documentFact
 		StatsProperties.Elastic elastic = statsProperties.getElastic();
 		if (StringUtils.hasText(elastic.getUsername())) {
 			this.restTemplate = restTemplateBuilder
-					.basicAuthorization(elastic.getUsername(), elastic.getPassword())
+					.basicAuthentication(elastic.getUsername(), elastic.getPassword())
 					.build();
 		}
 		else {

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectGenerator.java
Patch:
@@ -382,6 +382,7 @@ protected Map<String, Object> resolveModel(ProjectRequest originalRequest) {
 			model.put("mavenParentArtifactId", parentPom.getArtifactId());
 			model.put("mavenParentVersion", parentPom.getVersion());
 			model.put("includeSpringBootBom", parentPom.isIncludeSpringBootBom());
+			model.put("defaultPackaging", "jar".equals(request.getPackaging()));
 		}
 
 		model.put("repositoryValues", request.getRepositories().entrySet());

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectGenerator.java
Patch:
@@ -516,7 +516,7 @@ private Map<String, String> toBomModel(ProjectRequest request, BillOfMaterials b
 
 	private String computeVersionProperty(ProjectRequest request,
 			VersionProperty property) {
-		if (isGradleBuild(request)) {
+		if (isGradleBuild(request) && property.isInternal()) {
 			return property.toCamelCaseFormat();
 		}
 		return property.toStandardFormat();

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectRequest.java
Patch:
@@ -243,11 +243,11 @@ protected void initializeProperties(InitializrMetadata metadata,
 					() -> "UTF-8");
 			this.buildProperties.getMaven().put("project.reporting.outputEncoding",
 					() -> "UTF-8");
-			this.buildProperties.getVersions().put(new VersionProperty("java.version"),
+			this.buildProperties.getVersions().put(VersionProperty.of("java.version"),
 					this::getJavaVersion);
 			if ("kotlin".equals(getLanguage())) {
 				this.buildProperties.getVersions()
-						.put(new VersionProperty("kotlin.version"), kotlinVersion);
+						.put(VersionProperty.of("kotlin.version"), kotlinVersion);
 			}
 		}
 	}

File: initializr-generator/src/main/java/io/spring/initializr/metadata/BillOfMaterials.java
Patch:
@@ -109,7 +109,7 @@ public void setVersionProperty(VersionProperty versionProperty) {
 	}
 
 	public void setVersionProperty(String versionPropertyName) {
-		setVersionProperty(new VersionProperty(versionPropertyName));
+		setVersionProperty(VersionProperty.of(versionPropertyName));
 	}
 
 	/**

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadata.java
Patch:
@@ -246,7 +246,7 @@ public BillOfMaterials createSpringBootBom(String bootVersion,
 			String versionProperty) {
 		BillOfMaterials bom = BillOfMaterials.create("org.springframework.boot",
 				"spring-boot-dependencies", bootVersion);
-		bom.setVersionProperty(new VersionProperty(versionProperty));
+		bom.setVersionProperty(VersionProperty.of(versionProperty));
 		bom.setOrder(100);
 		return bom;
 	}

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectGeneratorBuildTests.java
Patch:
@@ -105,10 +105,10 @@ private void testStandardWar(String language) {
 	@Test
 	public void versionOverride() {
 		ProjectRequest request = createProjectRequest("web");
+		request.getBuildProperties().getVersions().put(
+				VersionProperty.of("spring-foo.version", false), () -> "0.1.0.RELEASE");
 		request.getBuildProperties().getVersions()
-				.put(new VersionProperty("spring-foo.version"), () -> "0.1.0.RELEASE");
-		request.getBuildProperties().getVersions()
-				.put(new VersionProperty("spring-bar.version"), () -> "0.2.0.RELEASE");
+				.put(VersionProperty.of("spring-bar.version"), () -> "0.2.0.RELEASE");
 		ProjectAssert project = generateProject(request);
 		project.sourceCodeAssert(this.fileName).equalsTo(new ClassPathResource(
 				"project/" + this.build + "/version-override-" + this.assertFileName));

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectRequestResolverTests.java
Patch:
@@ -39,8 +39,8 @@
  */
 public class ProjectRequestResolverTests {
 
-	private static final VersionProperty VERSION_PROPERTY = new VersionProperty(
-			"java.version");
+	private static final VersionProperty VERSION_PROPERTY = VersionProperty
+			.of("java.version");
 
 	private InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults()
 			.addDependencyGroup("test", "web", "security", "data-jpa").build();

File: initializr-generator/src/main/java/io/spring/initializr/metadata/DependenciesCapability.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.stream.Collectors;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.spring.initializr.util.VersionParser;
@@ -64,7 +65,8 @@ public Dependency get(String id) {
 	 * @return all dependencies
 	 */
 	public Collection<Dependency> getAll() {
-		return Collections.unmodifiableCollection(this.indexedDependencies.values());
+		return Collections.unmodifiableCollection(this.indexedDependencies.values()
+				.stream().distinct().collect(Collectors.toList()));
 	}
 
 	public void validate() {

File: initializr-generator/src/test/java/io/spring/initializr/metadata/InitializrMetadataBuilderTests.java
Patch:
@@ -215,7 +215,7 @@ public void addDependencyInCustomizer() {
 
 	private static void assertDefaultConfig(InitializrMetadata metadata) {
 		assertThat(metadata).isNotNull();
-		assertThat(metadata.getDependencies().getAll()).hasSize(9);
+		assertThat(metadata.getDependencies().getAll()).hasSize(8);
 		assertThat(metadata.getDependencies().getContent()).hasSize(2);
 		assertThat(metadata.getTypes().getContent()).hasSize(4);
 	}

File: initializr-web/src/test/java/io/spring/initializr/web/project/ProjectGenerationSmokeTests.java
Patch:
@@ -95,10 +95,9 @@ public void createSimpleProjectWithGradle() throws Exception {
 		page.type("gradle-project");
 		page.submit();
 		assertSimpleProject().isGradleProject().gradleBuildAssert()
+				.contains("compile('org.springframework.boot:spring-boot-starter')")
 				.contains(
-						"implementation('org.springframework.boot:spring-boot-starter')")
-				.contains(
-						"testImplementation('org.springframework.boot:spring-boot-starter-test')");
+						"testCompile('org.springframework.boot:spring-boot-starter-test')");
 	}
 
 	@Test

File: initializr-web/src/test/java/io/spring/initializr/web/project/ProjectGenerationSmokeTests.java
Patch:
@@ -95,9 +95,10 @@ public void createSimpleProjectWithGradle() throws Exception {
 		page.type("gradle-project");
 		page.submit();
 		assertSimpleProject().isGradleProject().gradleBuildAssert()
-				.contains("compile('org.springframework.boot:spring-boot-starter')")
 				.contains(
-						"testCompile('org.springframework.boot:spring-boot-starter-test')");
+						"implementation('org.springframework.boot:spring-boot-starter')")
+				.contains(
+						"testImplementation('org.springframework.boot:spring-boot-starter-test')");
 	}
 
 	@Test

File: initializr-service/src/main/java/io/spring/initializr/service/extension/SpringSessionRequestPostProcessor.java
Patch:
@@ -48,11 +48,11 @@ class SpringSessionRequestPostProcessor extends AbstractProjectRequestPostProces
 	public void postProcessAfterResolution(ProjectRequest request,
 			InitializrMetadata metadata) {
 		if (isSpringBootVersionAtLeastAfter(request, VERSION_2_0_0_M3)) {
-			swapSpringSessionDepenendency(request);
+			swapSpringSessionDependency(request);
 		}
 	}
 
-	private void swapSpringSessionDepenendency(ProjectRequest request) {
+	private void swapSpringSessionDependency(ProjectRequest request) {
 		Dependency session = getDependency(request, "session");
 		if (session != null) {
 			List<Dependency> swap = new ArrayList<>();

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectGenerator.java
Patch:
@@ -404,6 +404,8 @@ protected Map<String, Object> resolveModel(ProjectRequest originalRequest) {
 				filterDependencies(dependencies, Dependency.SCOPE_RUNTIME));
 		model.put("compileOnlyDependencies",
 				filterDependencies(dependencies, Dependency.SCOPE_COMPILE_ONLY));
+		model.put("annotationProcessorDependencies",
+				filterDependencies(dependencies, Dependency.SCOPE_ANNOTATION_PROCESSOR));
 		model.put("providedDependencies",
 				filterDependencies(dependencies, Dependency.SCOPE_PROVIDED));
 		model.put("testDependencies",

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Dependency.java
Patch:
@@ -216,6 +216,7 @@ public void updateVersionRanges(VersionParser versionParser) {
 		if (this.versionRange != null) {
 			try {
 				this.range = versionParser.parseRange(this.versionRange);
+				this.versionRange = this.range.toRangeString();
 				this.versionRequirement = this.range.toString();
 			}
 			catch (InvalidVersionException ex) {

File: initializr-service/src/main/java/io/spring/initializr/service/InitializrService.java
Patch:
@@ -51,6 +51,9 @@ public LegacyStsController legacyStsController(
 		return new LegacyStsController(metadataProvider, resourceUrlProvider);
 	}
 
+	/**
+	 * {@link Executor} configuration for event processing.
+	 */
 	@Configuration
 	@EnableAsync
 	static class AsyncConfiguration extends AsyncConfigurerSupport {

File: initializr-service/src/main/java/io/spring/initializr/service/extension/AbstractProjectRequestPostProcessor.java
Patch:
@@ -65,7 +65,7 @@ protected boolean hasDependencies(ProjectRequest request, String... dependencies
 	 */
 	protected Dependency getDependency(ProjectRequest request, String id) {
 		return request.getResolvedDependencies().stream()
-				.filter(d -> id.equals(d.getId())).findFirst().orElse(null);
+				.filter((d) -> id.equals(d.getId())).findFirst().orElse(null);
 	}
 
 	/**

File: initializr-service/src/main/java/io/spring/initializr/service/extension/JavaVersionRequestPostProcessor.java
Patch:
@@ -67,9 +67,9 @@ public void postProcessAfterResolution(ProjectRequest request,
 	private Integer determineJavaGeneration(String javaVersion) {
 		try {
 			int generation = Integer.valueOf(javaVersion);
-			return ((generation > 8 && generation <=10)  ? generation : null);
+			return ((generation > 8 && generation <= 10) ? generation : null);
 		}
-		catch (NumberFormatException e) {
+		catch (NumberFormatException ex) {
 			return null;
 		}
 	}

File: initializr-service/src/test/java/io/spring/initializr/service/extension/JavaVersionRequestPostProcessorTests.java
Patch:
@@ -24,7 +24,8 @@
  *
  * @author Stephane Nicoll
  */
-public class JavaVersionRequestPostProcessorTests extends AbstractRequestPostProcessorTests {
+public class JavaVersionRequestPostProcessorTests
+		extends AbstractRequestPostProcessorTests {
 
 	@Test
 	public void java9CannotBeUsedWithSpringBoot1Maven() {
@@ -126,7 +127,6 @@ public void java10CannotBeUsedWithSpringBoot200Gradle() {
 		generateGradleBuild(request).hasJavaVersion("1.8");
 	}
 
-
 	@Test
 	public void java10CanBeUsedWithSpringBoot2Maven() {
 		ProjectRequest request = createProjectRequest("web");

File: initializr-service/src/test/java/io/spring/initializr/service/info/CloudFoundryInfoContributorTests.java
Patch:
@@ -25,10 +25,9 @@
 import org.springframework.mock.env.MockEnvironment;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Java6Assertions.entry;
+import static org.assertj.core.api.Assertions.entry;
 
 /**
- *
  * @author Stephane Nicoll
  */
 public class CloudFoundryInfoContributorTests {

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectRequest.java
Patch:
@@ -134,9 +134,9 @@ public void initialize(InitializrMetadata metadata) {
 	 * @param metadata the initializr metadata
 	 */
 	public void resolve(InitializrMetadata metadata) {
-		List<String> depIds = !getStyle().isEmpty() ? getStyle() : getDependencies();
-		String actualBootVersion = getBootVersion() != null ? getBootVersion()
-				: metadata.getBootVersions().getDefault().getId();
+		List<String> depIds = (!getStyle().isEmpty() ? getStyle() : getDependencies());
+		String actualBootVersion = (getBootVersion() != null ? getBootVersion()
+				: metadata.getBootVersions().getDefault().getId());
 		Version requestedVersion = Version.parse(actualBootVersion);
 		this.resolvedDependencies = depIds.stream().map((it) -> {
 			Dependency dependency = metadata.getDependencies().get(it);

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadata.java
Patch:
@@ -274,7 +274,7 @@ public Map<String, Object> defaults() {
 	private static String defaultId(
 			Defaultable<? extends DefaultMetadataElement> element) {
 		DefaultMetadataElement defaultValue = element.getDefault();
-		return defaultValue != null ? defaultValue.getId() : null;
+		return (defaultValue != null ? defaultValue.getId() : null);
 	}
 
 	private static class ArtifactIdCapability extends TextCapability {
@@ -289,7 +289,7 @@ private static class ArtifactIdCapability extends TextCapability {
 		@Override
 		public String getContent() {
 			String value = super.getContent();
-			return value == null ? this.nameCapability.getContent() : value;
+			return (value != null ? value : this.nameCapability.getContent());
 		}
 
 	}

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Link.java
Patch:
@@ -158,8 +158,8 @@ public URI expand(Map<String, String> parameters) {
 		try {
 			return new URI(result.get());
 		}
-		catch (URISyntaxException e) {
-			throw new IllegalStateException("Invalid URL", e);
+		catch (URISyntaxException ex) {
+			throw new IllegalStateException("Invalid URL", ex);
 		}
 	}
 

File: initializr-generator/src/main/java/io/spring/initializr/metadata/MetadataElement.java
Patch:
@@ -46,7 +46,7 @@ public MetadataElement(String id, String name) {
 	}
 
 	public String getName() {
-		return this.name != null ? this.name : this.id;
+		return (this.name != null ? this.name : this.id);
 	}
 
 	public String getId() {

File: initializr-generator/src/main/java/io/spring/initializr/util/VersionParser.java
Patch:
@@ -89,7 +89,7 @@ public Version parse(String text) {
 			}
 		}
 		if ("x".equals(minor) || "x".equals(patch)) {
-			Integer minorInt = "x".equals(minor) ? null : Integer.parseInt(minor);
+			Integer minorInt = ("x".equals(minor) ? null : Integer.parseInt(minor));
 			Version latest = findLatestVersion(major, minorInt, qualifier);
 			if (latest == null) {
 				return new Version(major,
@@ -159,7 +159,7 @@ private Version findLatestVersion(Integer major, Integer minor,
 			}
 			return true;
 		}).collect(Collectors.toList());
-		return (matches.size() == 1 ? matches.get(0) : null);
+		return (matches.size() != 1 ? null : matches.get(0));
 	}
 
 }

File: initializr-generator/src/test/java/io/spring/initializr/test/generator/SourceCodeAssert.java
Patch:
@@ -48,8 +48,8 @@ public SourceCodeAssert equalsTo(Resource expected) {
 			assertThat(this.content).describedAs("Content for %s", this.name)
 					.isEqualTo(expectedContent.replaceAll("\r\n", "\n"));
 		}
-		catch (IOException e) {
-			throw new IllegalStateException("Cannot read file", e);
+		catch (IOException ex) {
+			throw new IllegalStateException("Cannot read file", ex);
 		}
 		return this;
 	}

File: initializr-generator/src/test/java/io/spring/initializr/test/metadata/InitializrMetadataTestBuilder.java
Patch:
@@ -232,8 +232,8 @@ public InitializrMetadataTestBuilder addRepository(String id, String name, Strin
 			try {
 				repo.setUrl(new URL(url));
 			}
-			catch (MalformedURLException e) {
-				throw new IllegalArgumentException("Cannot create URL", e);
+			catch (MalformedURLException ex) {
+				throw new IllegalArgumentException("Cannot create URL", ex);
 			}
 			repo.setSnapshotsEnabled(snapshotsEnabled);
 			it.getConfiguration().getEnv().getRepositories().put(id, repo);

File: initializr-web/src/main/java/io/spring/initializr/web/autoconfigure/InitializrAutoConfiguration.java
Patch:
@@ -77,7 +77,7 @@ public class InitializrAutoConfiguration {
 	public InitializrAutoConfiguration(
 			ObjectProvider<List<ProjectRequestPostProcessor>> postProcessors) {
 		List<ProjectRequestPostProcessor> list = postProcessors.getIfAvailable();
-		this.postProcessors = list != null ? list : new ArrayList<>();
+		this.postProcessors = (list != null ? list : new ArrayList<>());
 	}
 
 	@Bean

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataV21JsonMapper.java
Patch:
@@ -65,7 +65,7 @@ protected ObjectNode mapDependency(Dependency dependency) {
 	}
 
 	private ObjectNode dependenciesLink(String appUrl) {
-		String uri = appUrl != null ? appUrl + "/dependencies" : "/dependencies";
+		String uri = (appUrl != null ? appUrl + "/dependencies" : "/dependencies");
 		UriTemplate uriTemplate = new UriTemplate(uri, this.dependenciesVariables);
 		ObjectNode result = nodeFactory().objectNode();
 		result.put("href", uriTemplate.toString());

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataV2JsonMapper.java
Patch:
@@ -114,7 +114,7 @@ protected ObjectNode link(String appUrl, Type type) {
 	}
 
 	private String generateTemplatedUri(String appUrl, Type type) {
-		String uri = appUrl != null ? appUrl + type.getAction() : type.getAction();
+		String uri = (appUrl != null ? appUrl + type.getAction() : type.getAction());
 		uri = uri + "?type=" + type.getId();
 		UriTemplate uriTemplate = new UriTemplate(uri, this.templateVariables);
 		return uriTemplate.toString();

File: initializr-web/src/main/java/io/spring/initializr/web/project/AbstractInitializrController.java
Patch:
@@ -52,7 +52,7 @@ protected AbstractInitializrController(InitializrMetadataProvider metadataProvid
 		this.metadataProvider = metadataProvider;
 		this.linkTo = (link) -> {
 			String result = resourceUrlProvider.getForLookupPath(link);
-			return result == null ? link : result;
+			return (result != null ? result : link);
 		};
 	}
 

File: initializr-web/src/main/java/io/spring/initializr/web/support/DefaultInitializrMetadataProvider.java
Patch:
@@ -79,8 +79,8 @@ protected List<DefaultMetadataElement> fetchBootVersions() {
 				return new SpringBootMetadataReader(this.objectMapper, this.restTemplate,
 						url).getBootVersions();
 			}
-			catch (Exception e) {
-				log.warn("Failed to fetch spring boot metadata", e);
+			catch (Exception ex) {
+				log.warn("Failed to fetch spring boot metadata", ex);
 			}
 		}
 		return null;

File: initializr-web/src/main/java/io/spring/initializr/web/ui/UiController.java
Patch:
@@ -57,7 +57,7 @@ public ResponseEntity<String> dependencies(
 		List<DependencyGroup> dependencyGroups = this.metadataProvider.get()
 				.getDependencies().getContent();
 		List<DependencyItem> content = new ArrayList<>();
-		Version v = StringUtils.isEmpty(version) ? null : Version.parse(version);
+		Version v = (StringUtils.isEmpty(version) ? null : Version.parse(version));
 		dependencyGroups.forEach((g) -> g.getContent().forEach((d) -> {
 			if (v != null && d.getVersionRange() != null) {
 				if (d.match(v)) {

File: initializr-web/src/test/java/io/spring/initializr/web/AbstractInitializrControllerIntegrationTests.java
Patch:
@@ -48,7 +48,7 @@ public abstract class AbstractInitializrControllerIntegrationTests
 
 	@Override
 	protected String createUrl(String context) {
-		return context.startsWith("/") ? context : "/" + context;
+		return (context.startsWith("/") ? context : "/" + context);
 	}
 
 	public MockMvcClientHttpRequestFactory getRequests() {

File: initializr-web/src/test/java/io/spring/initializr/web/AbstractInitializrIntegrationTests.java
Patch:
@@ -226,8 +226,8 @@ protected ProjectAssert projectAssert(byte[] content, ArchiveType archiveType) {
 			}
 			return new ProjectAssert(project);
 		}
-		catch (Exception e) {
-			throw new IllegalStateException("Cannot unpack archive", e);
+		catch (Exception ex) {
+			throw new IllegalStateException("Cannot unpack archive", ex);
 		}
 	}
 
@@ -277,7 +277,7 @@ protected JSONObject readJsonFrom(String path) {
 				return new JSONObject(content);
 			}
 		}
-		catch (Exception e) {
+		catch (Exception ex) {
 			throw new IllegalStateException("Cannot read JSON from path=" + path);
 		}
 	}

File: initializr-web/src/test/java/io/spring/initializr/web/test/JsonFieldProcessor.java
Patch:
@@ -202,7 +202,7 @@ private ProcessingContext(Object payload, JsonFieldPath path,
 				List<String> segments, Match parent) {
 			this.payload = payload;
 			this.path = path;
-			this.segments = segments == null ? path.getSegments() : segments;
+			this.segments = (segments != null ? segments : path.getSegments());
 			this.parent = parent;
 		}
 

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/info/BomRangesInfoContributor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/info/DependencyRangesInfoContributor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/stat/ProjectGenerationStatPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/stat/ProjectRequestDocument.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/stat/ProjectRequestDocumentFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/stat/StatsProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/info/BomRangesInfoContributorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/info/DependencyRangesInfoContributorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/stat/AbstractInitializrStatTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/stat/ProjectGenerationStatPublisherTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/stat/ProjectRequestDocumentFactoryTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/stat/StatsPropertiesTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-docs/src/test/java/io/spring/initializr/stub/ClientApplicationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-docs/src/test/java/io/spring/initializr/stub/SampleApp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/generator/BasicProjectRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/generator/BuildProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/generator/CommandLineHelpGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectFailedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectRequestEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectRequestPostProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectRequestResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/BillOfMaterials.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/DefaultMetadataElement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Defaultable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/DependenciesCapability.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Dependency.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/DependencyGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/DependencyMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/DependencyMetadataProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2015 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Describable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadataBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadataCustomizer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadataProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InvalidInitializrMetadataException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Link.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/MetadataElement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Repository.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/ServiceCapability.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/ServiceCapabilityType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/SingleSelectCapability.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/TextCapability.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/metadata/TypeCapability.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/util/TemplateRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/util/Version.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/util/VersionParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/util/VersionProperty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/main/java/io/spring/initializr/util/VersionRange.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/generator/CommandLineHelpGeneratorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectGeneratorBuildTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectGeneratorLanguageTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectRequestResolverTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectRequestTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/BillOfMaterialsTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/DependenciesCapabilityTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/DependencyTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/InitializrConfigurationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2015 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/InitializrMetadataTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/LinkTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/SingleSelectCapabilityTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/TextCapabilityTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/TypeCapabilityTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/metadata/TypeTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2015 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/util/VersionParserTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/util/VersionPropertyTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/util/VersionRangeTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-generator/src/test/java/io/spring/initializr/util/VersionTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/main/java/io/spring/initializr/service/InitializrService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/main/java/io/spring/initializr/service/extension/ReactorTestRequestPostProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/main/java/io/spring/initializr/service/extension/SpringBatchTestRequestPostProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/main/java/io/spring/initializr/service/extension/SpringSessionRequestPostProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/test/java/io/spring/initializr/service/InitializrServiceSmokeTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/test/java/io/spring/initializr/service/extension/AbstractRequestPostProcessorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/test/java/io/spring/initializr/service/extension/JacksonKotlinRequestPostProcessorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/test/java/io/spring/initializr/service/extension/ReactorTestRequestPostProcessorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/test/java/io/spring/initializr/service/extension/SpringBatchTestRequestPostProcessorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/test/java/io/spring/initializr/service/extension/SpringSecurityTestRequestPostProcessorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/test/java/io/spring/initializr/service/extension/SpringSessionRequestPostProcessorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-service/src/test/java/io/spring/initializr/service/info/CloudFoundryInfoContributorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/DependencyMetadataJsonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/DependencyMetadataV21JsonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataJsonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataV21JsonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataV2JsonMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/LinkMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/project/AbstractInitializrController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/support/DefaultDependencyMetadataProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/support/DefaultInitializrMetadataProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/main/java/io/spring/initializr/web/support/SpringBootMetadataReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/AbstractInitializrControllerIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/AbstractInitializrIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/autoconfigure/CloudfoundryEnvironmentPostProcessorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/mapper/DependencyMetadataJsonMapperTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/mapper/InitializrMetadataJsonMapperTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/mapper/LinkMapperTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/project/CommandLineExampleIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/project/HomePage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/project/LegacyStsControllerIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerDefaultsIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerDependenciesTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerEnvIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerServiceMetadataIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/project/ProjectGenerationPostProcessorTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/support/DefaultDependencyMetadataProviderTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/support/DefaultInitializrMetadataProviderTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/support/SpringBootMetadataReaderTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/test/JsonFieldPath.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2015 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/test/JsonFieldProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014-2016 the original author or authors.
+ * Copyright 2014-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/test/MockMvcClientHttpRequestFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/test/MockMvcClientHttpRequestFactoryTestExecutionListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2015 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/test/ResponseFieldSnippet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2015 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-web/src/test/java/io/spring/initializr/web/ui/UiControllerIntegrationTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/autoconfigure/InitializrMetricsConfiguration.java
Patch:
@@ -39,8 +39,7 @@ public class InitializrMetricsConfiguration {
 
 	@Bean
 	@ConditionalOnSingleCandidate(MeterRegistry.class)
-	public ProjectGenerationMetricsListener metricsListener(
-			MeterRegistry meterRegistry) {
+	public ProjectGenerationMetricsListener metricsListener(MeterRegistry meterRegistry) {
 		return new ProjectGenerationMetricsListener(meterRegistry);
 	}
 

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/autoconfigure/InitializrStatsAutoConfiguration.java
Patch:
@@ -49,7 +49,7 @@ class InitializrStatsAutoConfiguration {
 
 	private final StatsProperties statsProperties;
 
-	public InitializrStatsAutoConfiguration(StatsProperties statsProperties) {
+	InitializrStatsAutoConfiguration(StatsProperties statsProperties) {
 		this.statsProperties = statsProperties;
 	}
 
@@ -58,7 +58,7 @@ public ProjectGenerationStatPublisher projectRequestStatHandler(
 			InitializrMetadataProvider provider,
 			RestTemplateBuilder restTemplateBuilder) {
 		return new ProjectGenerationStatPublisher(
-				new ProjectRequestDocumentFactory(provider), statsProperties,
+				new ProjectRequestDocumentFactory(provider), this.statsProperties,
 				restTemplateBuilder, statsRetryTemplate());
 	}
 
@@ -70,7 +70,7 @@ public RetryTemplate statsRetryTemplate() {
 		backOffPolicy.setInitialInterval(3000L);
 		backOffPolicy.setMultiplier(3);
 		SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy(
-				statsProperties.getElastic().getMaxAttempts(),
+				this.statsProperties.getElastic().getMaxAttempts(),
 				Collections.singletonMap(Exception.class, true));
 		retryTemplate.setBackOffPolicy(backOffPolicy);
 		retryTemplate.setRetryPolicy(retryPolicy);

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/metric/ProjectGenerationMetricsListener.java
Patch:
@@ -54,7 +54,7 @@ public void onFailedProject(ProjectFailedEvent event) {
 	}
 
 	protected void handleProjectRequest(ProjectRequest request) {
-		increment(key("requests"));// Total number of requests
+		increment(key("requests")); // Total number of requests
 		handleDependencies(request);
 		handleType(request);
 		handleJavaVersion(request);
@@ -67,7 +67,7 @@ protected void handleProjectRequest(ProjectRequest request) {
 	protected void handleDependencies(ProjectRequest request) {
 		List<Dependency> dependencies = request.getResolvedDependencies();
 		if (dependencies != null) {
-			dependencies.forEach(it -> {
+			dependencies.forEach((it) -> {
 				if (!ProjectRequest.DEFAULT_STARTER.equals(it.getId())) {
 					String id = sanitize(it.getId());
 					increment(key("dependency." + id));
@@ -122,7 +122,7 @@ protected void handleUserAgent(ProjectRequest request) {
 	}
 
 	protected void increment(String key) {
-		meterRegistry.counter(key).increment();
+		this.meterRegistry.counter(key).increment();
 	}
 
 	protected String key(String part) {

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectFailedEvent.java
Patch:
@@ -32,9 +32,10 @@ public ProjectFailedEvent(ProjectRequest projectRequest, Exception cause) {
 
 	/**
 	 * Return the cause of the failure.
+	 * @return the cause of the failure
 	 */
 	public Exception getCause() {
-		return cause;
+		return this.cause;
 	}
 
 }

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectRequestResolver.java
Patch:
@@ -46,14 +46,14 @@ public ProjectRequest resolve(ProjectRequest request, InitializrMetadata metadat
 
 	private void applyPostProcessBeforeResolution(ProjectRequest request,
 			InitializrMetadata metadata) {
-		for (ProjectRequestPostProcessor processor : postProcessors) {
+		for (ProjectRequestPostProcessor processor : this.postProcessors) {
 			processor.postProcessBeforeResolution(request, metadata);
 		}
 	}
 
 	private void applyPostProcessAfterResolution(ProjectRequest request,
 			InitializrMetadata metadata) {
-		for (ProjectRequestPostProcessor processor : postProcessors) {
+		for (ProjectRequestPostProcessor processor : this.postProcessors) {
 			processor.postProcessAfterResolution(request, metadata);
 		}
 	}

File: initializr-generator/src/main/java/io/spring/initializr/metadata/DefaultMetadataElement.java
Patch:
@@ -17,8 +17,7 @@
 package io.spring.initializr.metadata;
 
 /**
- * A {@link MetadataElement} that specifies if its
- * the default for a given capability.
+ * A {@link MetadataElement} that specifies if its the default for a given capability.
  *
  * @author Stephane Nicoll
  */
@@ -50,7 +49,8 @@ public static DefaultMetadataElement create(String id, boolean defaultValue) {
 		return new DefaultMetadataElement(id, defaultValue);
 	}
 
-	public static DefaultMetadataElement create(String id, String name, boolean defaultValue) {
+	public static DefaultMetadataElement create(String id, String name,
+			boolean defaultValue) {
 		return new DefaultMetadataElement(id, name, defaultValue);
 	}
 

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadataCustomizer.java
Patch:
@@ -24,8 +24,9 @@
 public interface InitializrMetadataCustomizer {
 
 	/**
-	 * Customize the {@link InitializrMetadata}, updating or moving around
-	 * capabilities before they are validated.
+	 * Customize the {@link InitializrMetadata}, updating or moving around capabilities
+	 * before they are validated.
+	 * @param metadata the initalizr metadata
 	 */
 	void customize(InitializrMetadata metadata);
 

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InvalidInitializrMetadataException.java
Patch:
@@ -33,4 +33,5 @@ public InvalidInitializrMetadataException(String message, Throwable cause) {
 	public InvalidInitializrMetadataException(String message) {
 		super(message);
 	}
+
 }

File: initializr-generator/src/main/java/io/spring/initializr/metadata/ServiceCapabilityType.java
Patch:
@@ -39,8 +39,8 @@ public enum ServiceCapabilityType {
 	SINGLE_SELECT("single-select"),
 
 	/**
-	 * A hierarchical set of values (values in values) with the ability to
-	 * select multiple values.
+	 * A hierarchical set of values (values in values) with the ability to select multiple
+	 * values.
 	 */
 	HIERARCHICAL_MULTI_SELECT("hierarchical-multi-select");
 
@@ -51,7 +51,7 @@ public enum ServiceCapabilityType {
 	}
 
 	public String getName() {
-		return name;
+		return this.name;
 	}
 
 }

File: initializr-generator/src/main/java/io/spring/initializr/metadata/TextCapability.java
Patch:
@@ -39,7 +39,7 @@ public class TextCapability extends ServiceCapability<String> {
 
 	@Override
 	public String getContent() {
-		return content;
+		return this.content;
 	}
 
 	public void setContent(String content) {
@@ -54,4 +54,3 @@ public void merge(String otherContent) {
 	}
 
 }
-

File: initializr-generator/src/test/java/io/spring/initializr/metadata/TypeTests.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * @author Stephane Nicoll
@@ -30,7 +30,7 @@ public void parseAction() {
 		Type type = new Type();
 		type.setId("foo");
 		type.setAction("my-action.zip");
-		assertEquals("/my-action.zip", type.getAction());
+		assertThat(type.getAction()).isEqualTo("/my-action.zip");
 	}
 
 }

File: initializr-generator/src/test/java/io/spring/initializr/test/generator/GradleBuildAssert.java
Patch:
@@ -35,6 +35,8 @@ public GradleBuildAssert(String content) {
 
 	/**
 	 * Validate that this generated gradle build validates against its request.
+	 * @param request the source request
+	 * @return a gradle assert
 	 */
 	public GradleBuildAssert validateProjectRequest(ProjectRequest request) {
 		return hasVersion(request.getVersion()).hasBootVersion(request.getBootVersion())

File: initializr-generator/src/test/java/io/spring/initializr/test/generator/SourceCodeAssert.java
Patch:
@@ -33,6 +33,7 @@
 public class SourceCodeAssert {
 
 	private final String name;
+
 	private final String content;
 
 	public SourceCodeAssert(String name, String content) {
@@ -44,7 +45,7 @@ public SourceCodeAssert equalsTo(Resource expected) {
 		try (InputStream stream = expected.getInputStream()) {
 			String expectedContent = StreamUtils.copyToString(stream,
 					Charset.forName("UTF-8"));
-			assertThat(content).describedAs("Content for %s", this.name)
+			assertThat(this.content).describedAs("Content for %s", this.name)
 					.isEqualTo(expectedContent.replaceAll("\r\n", "\n"));
 		}
 		catch (IOException e) {

File: initializr-service/src/main/java/io/spring/initializr/service/extension/SpringBoot2RequestPostProcessor.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.stereotype.Component;
 
 /**
- * As of Spring Boot 2.0, Java8 is mandatory so this extension makes sure that the
- * java version is forced.
+ * As of Spring Boot 2.0, Java8 is mandatory so this extension makes sure that the java
+ * version is forced.
  *
  * @author Stephane Nicoll
  */

File: initializr-service/src/main/java/io/spring/initializr/service/extension/SpringSecurityTestRequestPostProcessor.java
Patch:
@@ -35,9 +35,9 @@ class SpringSecurityTestRequestPostProcessor extends AbstractProjectRequestPostP
 
 	private static final Version VERSION_1_3_0 = Version.parse("1.3.0.RELEASE");
 
-	static final Dependency SPRING_SECURITY_TEST = Dependency.withId(
-			"security-test", "org.springframework.security",
-			"spring-security-test", null, Dependency.SCOPE_TEST);
+	static final Dependency SPRING_SECURITY_TEST = Dependency.withId("security-test",
+			"org.springframework.security", "spring-security-test", null,
+			Dependency.SCOPE_TEST);
 
 	@Override
 	public void postProcessAfterResolution(ProjectRequest request,

File: initializr-service/src/main/java/io/spring/initializr/service/extension/SpringSessionRequestPostProcessor.java
Patch:
@@ -34,8 +34,7 @@
  * @author Stephane Nicoll
  */
 @Component
-class SpringSessionRequestPostProcessor
-		extends AbstractProjectRequestPostProcessor {
+class SpringSessionRequestPostProcessor extends AbstractProjectRequestPostProcessor {
 
 	private static final Version VERSION_2_0_0_M3 = Version.parse("2.0.0.M3");
 
@@ -45,7 +44,6 @@ class SpringSessionRequestPostProcessor
 	static final Dependency JDBC = Dependency.withId("session-jdbc",
 			"org.springframework.session", "spring-session-jdbc");
 
-
 	@Override
 	public void postProcessAfterResolution(ProjectRequest request,
 			InitializrMetadata metadata) {

File: initializr-service/src/test/java/io/spring/initializr/service/extension/AbstractRequestPostProcessorTests.java
Patch:
@@ -52,19 +52,19 @@ protected Dependency getDependency(String id) {
 
 	protected PomAssert generateMavenPom(ProjectRequest request) {
 		request.setType("maven-build");
-		String content = new String(projectGenerator.generateMavenPom(request));
+		String content = new String(this.projectGenerator.generateMavenPom(request));
 		return new PomAssert(content);
 	}
 
 	protected GradleBuildAssert generateGradleBuild(ProjectRequest request) {
 		request.setType("gradle-build");
-		String content = new String(projectGenerator.generateGradleBuild(request));
+		String content = new String(this.projectGenerator.generateGradleBuild(request));
 		return new GradleBuildAssert(content);
 	}
 
 	protected ProjectRequest createProjectRequest(String... styles) {
 		ProjectRequest request = new ProjectRequest();
-		request.initialize(metadataProvider.get());
+		request.initialize(this.metadataProvider.get());
 		request.getStyle().addAll(Arrays.asList(styles));
 		return request;
 	}

File: initializr-service/src/test/java/io/spring/initializr/service/extension/Java9RequestPostProcessorTests.java
Patch:
@@ -24,8 +24,7 @@
  *
  * @author Stephane Nicoll
  */
-public class Java9RequestPostProcessorTests
-		extends AbstractRequestPostProcessorTests {
+public class Java9RequestPostProcessorTests extends AbstractRequestPostProcessorTests {
 
 	@Test
 	public void java9CannotBeUsedWithSpringBoot1Maven() {

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/DependencyMetadataJsonMapper.java
Patch:
@@ -27,6 +27,8 @@ interface DependencyMetadataJsonMapper {
 
 	/**
 	 * Write a json representation of the specified metadata.
+	 * @param metadata the dependency metadata
+	 * @return the JSON representation
 	 */
 	String write(DependencyMetadata metadata);
 

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataV2JsonMapper.java
Patch:
@@ -101,7 +101,7 @@ public String write(InitializrMetadata metadata, String appUrl) {
 
 	protected ObjectNode links(ObjectNode parent, List<Type> types, String appUrl) {
 		ObjectNode content = nodeFactory.objectNode();
-		types.forEach(it -> content.set(it.getId(), link(appUrl, it)));
+		types.forEach((it) -> content.set(it.getId(), link(appUrl, it)));
 		parent.set("_links", content);
 		return content;
 	}
@@ -176,7 +176,7 @@ protected ObjectNode mapDependencyGroup(DependencyGroup group) {
 			result.put("description", ((Describable) group).getDescription());
 		}
 		ArrayNode items = nodeFactory.arrayNode();
-		group.getContent().forEach(it -> {
+		group.getContent().forEach((it) -> {
 			JsonNode dependency = mapDependency(it);
 			if (dependency != null) {
 				items.add(dependency);

File: initializr-web/src/main/java/io/spring/initializr/web/project/LegacyStsController.java
Patch:
@@ -44,4 +44,3 @@ public String stsHome(Map<String, Object> model) {
 	}
 
 }
-

File: initializr-web/src/test/java/io/spring/initializr/web/test/JsonFieldPath.java
Patch:
@@ -28,7 +28,7 @@
  * @author Andy Wilkinson
  * @author Jeremy Rickard
  */
-//Copied from RestDocs to make it visible
+// Copied from RestDocs to make it visible
 final class JsonFieldPath {
 
 	private static final Pattern BRACKETS_AND_ARRAY_PATTERN = Pattern

File: initializr-web/src/test/java/io/spring/initializr/web/test/MockMvcClientHttpRequestFactory.java
Patch:
@@ -112,7 +112,8 @@ private ResultActions actions(MockHttpServletRequestBuilder requestBuilder)
 		for (String field : this.fields) {
 			snippets.add(new ResponseFieldSnippet(field));
 		}
-		actions.andDo(document(label, preprocessResponse(prettyPrint()), snippets.toArray(new Snippet[0])));
+		actions.andDo(document(this.label, preprocessResponse(prettyPrint()),
+				snippets.toArray(new Snippet[0])));
 		this.fields = new ArrayList<>();
 		return actions;
 	}
@@ -136,4 +137,4 @@ public void setFields(String... fields) {
 		this.fields = Arrays.asList(fields);
 	}
 
-}
\ No newline at end of file
+}

File: initializr-web/src/test/java/io/spring/initializr/web/ui/UiControllerIntegrationTests.java
Patch:
@@ -55,4 +55,5 @@ protected void validateDependenciesOutput(String version, String actual)
 				"metadata/ui/test-dependencies-" + version + ".json");
 		JSONAssert.assertEquals(expected, new JSONObject(actual), JSONCompareMode.STRICT);
 	}
+
 }

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Type.java
Patch:
@@ -53,12 +53,10 @@ public void setDescription(String description) {
 		this.description = description;
 	}
 
-	@SuppressWarnings("deprecation")
 	public String getStsId() {
 		return this.stsId;
 	}
 
-	@SuppressWarnings("deprecation")
 	public void setStsId(String stsId) {
 		this.stsId = stsId;
 	}

File: initializr-generator/src/test/java/io/spring/initializr/test/generator/GradleBuildAssert.java
Patch:
@@ -35,6 +35,8 @@ public GradleBuildAssert(String content) {
 
 	/**
 	 * Validate that this generated gradle build validates against its request.
+	 * @param request the source request
+	 * @return a gradle assert
 	 */
 	public GradleBuildAssert validateProjectRequest(ProjectRequest request) {
 		return hasVersion(request.getVersion()).hasBootVersion(request.getBootVersion())

File: initializr-generator/src/test/java/io/spring/initializr/test/generator/PomAssert.java
Patch:
@@ -81,6 +81,8 @@ public PomAssert(String content) {
 
 	/**
 	 * Validate that this generated pom validates against its request.
+	 * @param request the source request
+	 * @return a POM assert
 	 */
 	public PomAssert validateProjectRequest(ProjectRequest request) {
 		return hasGroupId(request.getGroupId()).hasArtifactId(request.getArtifactId())

File: initializr-service/src/main/java/io/spring/initializr/service/InitializrService.java
Patch:
@@ -45,7 +45,6 @@ public static void main(String[] args) {
 	}
 
 	@Bean
-	@SuppressWarnings("deprecation")
 	public LegacyStsController legacyStsController(
 			InitializrMetadataProvider metadataProvider,
 			ResourceUrlProvider resourceUrlProvider) {

File: initializr-service/src/test/java/io/spring/initializr/service/info/CloudFoundryInfoContributorTests.java
Patch:
@@ -42,6 +42,7 @@ public void noVcap() {
 	}
 
 	@Test
+	@SuppressWarnings("unchecked")
 	public void applicationName() {
 		this.environment.setProperty("vcap.application.name", "foo-bar");
 		Info info = getInfo(this.environment);

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/autoconfigure/InitializrStatsAutoConfiguration.java
Patch:
@@ -49,7 +49,7 @@ class InitializrStatsAutoConfiguration {
 
 	private final StatsProperties statsProperties;
 
-	public InitializrStatsAutoConfiguration(StatsProperties statsProperties) {
+	InitializrStatsAutoConfiguration(StatsProperties statsProperties) {
 		this.statsProperties = statsProperties;
 	}
 

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/info/BomRangesInfoContributor.java
Patch:
@@ -45,7 +45,7 @@ public void contribute(Info.Builder builder) {
 				.forEach((k, v) -> {
 					if (v.getMappings() != null && !v.getMappings().isEmpty()) {
 						Map<String, Object> bom = new LinkedHashMap<>();
-						v.getMappings().forEach(it -> {
+						v.getMappings().forEach((it) -> {
 							String requirement = "Spring Boot "
 									+ it.determineVersionRangeRequirement();
 							bom.put(it.getVersion(), requirement);

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/metric/ProjectGenerationMetricsListener.java
Patch:
@@ -54,7 +54,7 @@ public void onFailedProject(ProjectFailedEvent event) {
 	}
 
 	protected void handleProjectRequest(ProjectRequest request) {
-		increment(key("requests"));// Total number of requests
+		increment(key("requests")); // Total number of requests
 		handleDependencies(request);
 		handleType(request);
 		handleJavaVersion(request);
@@ -67,7 +67,7 @@ protected void handleProjectRequest(ProjectRequest request) {
 	protected void handleDependencies(ProjectRequest request) {
 		List<Dependency> dependencies = request.getResolvedDependencies();
 		if (dependencies != null) {
-			dependencies.forEach(it -> {
+			dependencies.forEach((it) -> {
 				if (!ProjectRequest.DEFAULT_STARTER.equals(it.getId())) {
 					String id = sanitize(it.getId());
 					increment(key("dependency." + id));

File: initializr-actuator/src/main/java/io/spring/initializr/actuate/stat/ProjectRequestDocumentFactory.java
Patch:
@@ -103,7 +103,7 @@ public ProjectRequestDocument createDocument(ProjectRequestEvent event) {
 		List<String> dependencies = new ArrayList<>();
 		dependencies.addAll(request.getStyle());
 		dependencies.addAll(request.getDependencies());
-		dependencies.forEach(id -> {
+		dependencies.forEach((id) -> {
 			if (metadata.getDependencies().get(id) != null) {
 				document.getDependencies().add(id);
 			}

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/ActuatorIntegrationTests.java
Patch:
@@ -25,18 +25,18 @@
 import org.junit.Test;
 
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.test.context.ActiveProfiles;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;
 
 /**
  * Tests for actuator specific features.
  *
  * @author Stephane Nicoll
  */
 @ActiveProfiles("test-default")
-@SpringBootTest(classes = Config.class, webEnvironment = RANDOM_PORT, properties = "management.endpoints.web.exposure.include=info,metrics")
+@SpringBootTest(classes = Config.class, webEnvironment = WebEnvironment.RANDOM_PORT, properties = "management.endpoints.web.exposure.include=info,metrics")
 public class ActuatorIntegrationTests
 		extends AbstractFullStackInitializrIntegrationTests {
 

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/autoconfigure/InitializrStatsAutoConfigurationTests.java
Patch:
@@ -79,7 +79,7 @@ static class CustomRestTemplateConfiguration {
 
 		@Bean
 		public RestTemplateCustomizer testRestTemplateCustomizer() {
-			return b -> b.setErrorHandler(errorHandler);
+			return (b) -> b.setErrorHandler(errorHandler);
 		}
 
 	}

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/test/MetricsAssert.java
Patch:
@@ -38,14 +38,14 @@ public MetricsAssert(MeterRegistry meterRegistry) {
 
 	public MetricsAssert hasValue(long value, String... metrics) {
 		Arrays.asList(metrics).forEach(
-				metric -> assertThat(this.meterRegistry.get(metric).counter().count())
+				(metric) -> assertThat(this.meterRegistry.get(metric).counter().count())
 						.isEqualTo(value));
 		return this;
 	}
 
 	public MetricsAssert hasNoValue(String... metrics) {
-		Arrays.asList(metrics).forEach(metric -> assertThat(
-				Search.in(this.meterRegistry).name(n -> n.startsWith(metric)).counter())
+		Arrays.asList(metrics).forEach((metric) -> assertThat(
+				Search.in(this.meterRegistry).name((n) -> n.startsWith(metric)).counter())
 						.isNull());
 		return this;
 	}

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectFailedEvent.java
Patch:
@@ -32,6 +32,7 @@ public ProjectFailedEvent(ProjectRequest projectRequest, Exception cause) {
 
 	/**
 	 * Return the cause of the failure.
+	 * @return the cause of the failure
 	 */
 	public Exception getCause() {
 		return this.cause;

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectRequestEvent.java
Patch:
@@ -36,13 +36,15 @@ protected ProjectRequestEvent(ProjectRequest projectRequest) {
 
 	/**
 	 * Return the {@link ProjectRequest} used to generate the project.
+	 * @return the project request
 	 */
 	public ProjectRequest getProjectRequest() {
 		return this.projectRequest;
 	}
 
 	/**
 	 * Return the timestamp at which the request was processed.
+	 * @return the timestamp that the request was processed
 	 */
 	public long getTimestamp() {
 		return this.timestamp;

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadataCustomizer.java
Patch:
@@ -26,6 +26,7 @@ public interface InitializrMetadataCustomizer {
 	/**
 	 * Customize the {@link InitializrMetadata}, updating or moving around capabilities
 	 * before they are validated.
+	 * @param metadata the initalizr metadata
 	 */
 	void customize(InitializrMetadata metadata);
 

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadataProvider.java
Patch:
@@ -26,7 +26,8 @@ public interface InitializrMetadataProvider {
 	/**
 	 * Return the metadata to use. Rather than keeping a handle to a particular instance,
 	 * implementations may decide to refresh or recompute the metadata if necessary.
+	 * @return the initializr metadata
 	 */
 	InitializrMetadata get();
 
-}
\ No newline at end of file
+}

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrProperties.java
Patch:
@@ -153,6 +153,9 @@ public SimpleElement getPackageName() {
 		return this.packageName;
 	}
 
+	/**
+	 * A simple element from the properties.
+	 */
 	public static class SimpleElement {
 
 		/**

File: initializr-generator/src/main/java/io/spring/initializr/metadata/Link.java
Patch:
@@ -147,7 +147,7 @@ public void resolve() {
 	 */
 	public URI expand(Map<String, String> parameters) {
 		AtomicReference<String> result = new AtomicReference<>(this.href);
-		this.templateVariables.forEach(var -> {
+		this.templateVariables.forEach((var) -> {
 			Object value = parameters.get(var);
 			if (value == null) {
 				throw new IllegalArgumentException("Could not expand " + this.href

File: initializr-generator/src/main/java/io/spring/initializr/metadata/MetadataElement.java
Patch:
@@ -17,7 +17,7 @@
 package io.spring.initializr.metadata;
 
 /**
- * A basic metadata element
+ * A basic metadata element.
  *
  * @author Stephane Nicoll
  */
@@ -61,4 +61,4 @@ public void setName(String name) {
 		this.name = name;
 	}
 
-}
\ No newline at end of file
+}

File: initializr-generator/src/main/java/io/spring/initializr/util/VersionProperty.java
Patch:
@@ -43,6 +43,7 @@ public VersionProperty(String property) {
 
 	/**
 	 * Return a camel cased representation of this instance.
+	 * @return the property in camel case format
 	 */
 	public String toCamelCaseFormat() {
 		String[] tokens = this.property.split("\\-|\\.");

File: initializr-generator/src/test/java/io/spring/initializr/metadata/InitializrMetadataBuilderTests.java
Patch:
@@ -193,7 +193,8 @@ public void addDependencyInCustomizer() {
 		Dependency dependency = Dependency.withId("com.foo:foo:1.0.0");
 		group.getContent().add(dependency);
 		InitializrMetadata metadata = InitializrMetadataBuilder.create()
-				.withCustomizer(m -> m.getDependencies().getContent().add(group)).build();
+				.withCustomizer((m) -> m.getDependencies().getContent().add(group))
+				.build();
 		assertThat(metadata.getDependencies().getContent()).hasSize(1);
 		assertThat(metadata.getDependencies().getContent().get(0)).isEqualTo(group);
 	}

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/DependencyMetadataJsonMapper.java
Patch:
@@ -27,6 +27,8 @@ interface DependencyMetadataJsonMapper {
 
 	/**
 	 * Write a json representation of the specified metadata.
+	 * @param metadata the dependency metadata
+	 * @return the JSON representation
 	 */
 	String write(DependencyMetadata metadata);
 

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataV2JsonMapper.java
Patch:
@@ -101,7 +101,7 @@ public String write(InitializrMetadata metadata, String appUrl) {
 
 	protected ObjectNode links(ObjectNode parent, List<Type> types, String appUrl) {
 		ObjectNode content = nodeFactory.objectNode();
-		types.forEach(it -> content.set(it.getId(), link(appUrl, it)));
+		types.forEach((it) -> content.set(it.getId(), link(appUrl, it)));
 		parent.set("_links", content);
 		return content;
 	}
@@ -176,7 +176,7 @@ protected ObjectNode mapDependencyGroup(DependencyGroup group) {
 			result.put("description", ((Describable) group).getDescription());
 		}
 		ArrayNode items = nodeFactory.arrayNode();
-		group.getContent().forEach(it -> {
+		group.getContent().forEach((it) -> {
 			JsonNode dependency = mapDependency(it);
 			if (dependency != null) {
 				items.add(dependency);

File: initializr-web/src/main/java/io/spring/initializr/web/mapper/InitializrMetadataVersion.java
Patch:
@@ -47,4 +47,4 @@ public MediaType getMediaType() {
 		return this.mediaType;
 	}
 
-}
\ No newline at end of file
+}

File: initializr-web/src/test/java/io/spring/initializr/web/AbstractFullStackInitializrIntegrationTests.java
Patch:
@@ -20,17 +20,16 @@
 import org.junit.runner.RunWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.web.server.LocalServerPort;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;
-
 /**
  * @author Stephane Nicoll
  * @author Dave Syer
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = Config.class, webEnvironment = RANDOM_PORT)
+@SpringBootTest(classes = Config.class, webEnvironment = WebEnvironment.RANDOM_PORT)
 public abstract class AbstractFullStackInitializrIntegrationTests
 		extends AbstractInitializrIntegrationTests {
 

File: initializr-web/src/test/java/io/spring/initializr/web/AbstractInitializrControllerIntegrationTests.java
Patch:
@@ -60,7 +60,7 @@ static class RestTemplateConfig {
 
 		@Bean
 		RestTemplateCustomizer mockMvcCustomizer(BeanFactory beanFactory) {
-			return template -> template.setRequestFactory(
+			return (template) -> template.setRequestFactory(
 					beanFactory.getBean(MockMvcClientHttpRequestFactory.class));
 		}
 

File: initializr-web/src/test/java/io/spring/initializr/web/autoconfigure/InitializrAutoConfigurationTests.java
Patch:
@@ -65,7 +65,7 @@ static class CustomRestTemplateConfiguration {
 
 		@Bean
 		public RestTemplateCustomizer testRestTemplateCustomizer() {
-			return b -> b.setErrorHandler(errorHandler);
+			return (b) -> b.setErrorHandler(errorHandler);
 		}
 
 	}

File: initializr-web/src/test/java/io/spring/initializr/web/project/HomePage.java
Patch:
@@ -39,7 +39,7 @@ class HomePage {
 
 	private final WebDriver driver;
 
-	public HomePage(WebDriver driver) {
+	HomePage(WebDriver driver) {
 		this.driver = driver;
 		PageFactory.initElements(driver, this);
 	}

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerDependenciesTests.java
Patch:
@@ -28,8 +28,6 @@
 import org.springframework.test.context.ActiveProfiles;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.hamcrest.CoreMatchers.nullValue;
-import static org.hamcrest.core.IsNot.not;
 
 /**
  * @author Stephane Nicoll

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerEnvIntegrationTests.java
Patch:
@@ -27,7 +27,6 @@
 import org.springframework.test.context.ActiveProfiles;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertTrue;
 
 /**
  * @author Stephane Nicoll
@@ -66,8 +65,7 @@ public void generateProjectWithInvalidName() {
 	@Test
 	public void googleAnalytics() {
 		String body = htmlHome();
-		assertTrue("google tag manager should be enabled",
-				body.contains("https://www.googletagmanager.com/gtm.js"));
+		assertThat(body).contains("https://www.googletagmanager.com/gtm.js");
 	}
 
 }

File: initializr-web/src/test/java/io/spring/initializr/web/support/DefaultDependencyMetadataProviderTests.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertSame;
 
 /**
  * @author Stephane Nicoll
@@ -101,8 +100,8 @@ public void addRepoAndRemoveDuplicates() {
 		assertThat(dependencyMetadata.getDependencies()).hasSize(3);
 		assertThat(dependencyMetadata.getRepositories()).hasSize(1);
 		assertThat(dependencyMetadata.getBoms()).isEmpty();
-		assertSame(metadata.getConfiguration().getEnv().getRepositories().get("repo-foo"),
-				dependencyMetadata.getRepositories().get("repo-foo"));
+		assertThat(dependencyMetadata.getRepositories().get("repo-foo")).isSameAs(
+				metadata.getConfiguration().getEnv().getRepositories().get("repo-foo"));
 	}
 
 	@Test

File: initializr-web/src/test/java/io/spring/initializr/web/support/SpringBootMetadataReaderTests.java
Patch:
@@ -64,7 +64,7 @@ public void readAvailableVersions() throws IOException {
 						.getBootVersions();
 		assertThat(versions).as("spring boot versions should not be null").isNotNull();
 		AtomicBoolean defaultFound = new AtomicBoolean(false);
-		versions.forEach(it -> {
+		versions.forEach((it) -> {
 			assertThat(it.getId()).as("Id must be set").isNotNull();
 			assertThat(it.getName()).as("Name must be set").isNotNull();
 			if (it.isDefault()) {

File: initializr-web/src/test/java/io/spring/initializr/web/test/JsonFieldProcessor.java
Patch:
@@ -33,14 +33,15 @@ final class JsonFieldProcessor {
 
 	boolean hasField(JsonFieldPath fieldPath, Object payload) {
 		final AtomicReference<Boolean> hasField = new AtomicReference<>(false);
-		traverse(new ProcessingContext(payload, fieldPath), match -> hasField.set(true));
+		traverse(new ProcessingContext(payload, fieldPath),
+				(match) -> hasField.set(true));
 		return hasField.get();
 	}
 
 	Object extract(JsonFieldPath path, Object payload) {
 		final List<Object> matches = new ArrayList<>();
 		traverse(new ProcessingContext(payload, path),
-				match -> matches.add(match.getValue()));
+				(match) -> matches.add(match.getValue()));
 		if (matches.isEmpty()) {
 			throw new IllegalArgumentException("Field does not exist: " + path);
 		}

File: initializr-web/src/test/java/io/spring/initializr/web/test/MockMvcClientHttpRequestFactory.java
Patch:
@@ -137,4 +137,4 @@ public void setFields(String... fields) {
 		this.fields = Arrays.asList(fields);
 	}
 
-}
\ No newline at end of file
+}

File: initializr-web/src/test/java/io/spring/initializr/web/test/MockMvcClientHttpRequestFactoryTestExecutionListener.java
Patch:
@@ -52,4 +52,4 @@ public void beforeTestMethod(TestContext testContext) throws Exception {
 		}
 	}
 
-}
\ No newline at end of file
+}

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectRequest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2017 the original author or authors.
+ * Copyright 2012-2018 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -238,7 +238,6 @@ protected void initializeProperties(InitializrMetadata metadata,
 			if ("kotlin".equals(getLanguage())) {
 				buildProperties.getVersions().put(new VersionProperty("kotlin.version"),
 						() -> kotlinVersion);
-				buildProperties.getMaven().put("kotlin.compiler.incremental", () -> "true");
 			}
 		}
 	}

File: initializr-service/src/test/java/io/spring/initializr/service/extension/SpringSessionRequestPostProcessorTests.java
Patch:
@@ -109,7 +109,7 @@ public void sessionWithRedis() {
 	@Test
 	public void sessionWithRedisReactive() {
 		ProjectRequest request = createProjectRequest("session", "data-redis-reactive");
-		request.setBootVersion("2.0.0.M3");
+		request.setBootVersion("2.0.0.M7");
 		generateMavenPom(request)
 				.hasSpringBootStarterDependency("data-redis-reactive")
 				.hasSpringBootStarterTest()

File: initializr-service/src/test/java/io/spring/initializr/service/extension/SpringSecurityTestRequestPostProcessorTests.java
Patch:
@@ -41,7 +41,7 @@ public void securityTestIsAddedWithSecurity() {
 	@Test
 	public void securityTestIsAddedWithSecurityReactive() {
 		ProjectRequest request = createProjectRequest("security-reactive");
-		request.setBootVersion("2.0.0.BUILD-SNAPSHOT");
+		request.setBootVersion("2.0.0.M5");
 		generateMavenPom(request)
 				.hasSpringBootStarterDependency("security-reactive")
 				.hasSpringBootStarterTest()

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerEnvIntegrationTests.java
Patch:
@@ -68,8 +68,8 @@ public void generateProjectWithInvalidName() {
 	@Test
 	public void googleAnalytics() {
 		String body = htmlHome();
-		assertTrue("google analytics should be enabled",
-				body.contains("ga('create', 'UA-1234567-89', 'auto');"));
+		assertTrue("google tag manager should be enabled",
+				body.contains("https://www.googletagmanager.com/gtm.js"));
 	}
 
 }

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectRequestPostProcessor.java
Patch:
@@ -37,7 +37,7 @@ public interface ProjectRequestPostProcessor {
 	 * @param metadata the metadata to use to resolve this request
 	 * @see ProjectRequest#resolve(InitializrMetadata)
 	 */
-	void postProcessBeforeResolution(ProjectRequest request, InitializrMetadata metadata);
+	default void postProcessBeforeResolution(ProjectRequest request, InitializrMetadata metadata) {}
 
 	/**
 	 * Apply this post processor to the given {@code ProjectRequest} <i>after</i> it has
@@ -48,6 +48,6 @@ public interface ProjectRequestPostProcessor {
 	 * @param request an resolved {@code ProjectRequest}
 	 * @param metadata the metadata that were used to resolve this request
 	 */
-	void postProcessAfterResolution(ProjectRequest request, InitializrMetadata metadata);
+	default void postProcessAfterResolution(ProjectRequest request, InitializrMetadata metadata) {}
 
 }

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectGeneratorTests.java
Patch:
@@ -739,7 +739,7 @@ public void versionRangeWithPostProcessor() {
 
 		// First after processor that flips Spring Boot version
 		projectGenerator.setRequestResolver(new ProjectRequestResolver(
-				Collections.singletonList(new ProjectRequestPostProcessorAdapter() {
+				Collections.singletonList(new ProjectRequestPostProcessor() {
 					@Override
 					public void postProcessBeforeResolution(ProjectRequest r,
 							InitializrMetadata m) {

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectRequestResolverTests.java
Patch:
@@ -63,7 +63,7 @@ public void beforeResolution() {
 
 	@Test
 	public void afterResolution() {
-		postProcessors.add(new ProjectRequestPostProcessorAdapter() {
+		postProcessors.add(new ProjectRequestPostProcessor() {
 			@Override
 			public void postProcessAfterResolution(ProjectRequest request,
 					InitializrMetadata metadata) {

File: initializr-service/src/main/java/io/spring/initializr/service/extension/ReactorTestRequestPostProcessor.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.spring.initializr.generator.ProjectRequest;
 import io.spring.initializr.generator.ProjectRequestPostProcessor;
-import io.spring.initializr.generator.ProjectRequestPostProcessorAdapter;
 import io.spring.initializr.metadata.Dependency;
 import io.spring.initializr.metadata.InitializrMetadata;
 import io.spring.initializr.util.Version;
@@ -32,7 +31,7 @@
  * @author Stephane Nicoll
  */
 @Component
-public class ReactorTestRequestPostProcessor extends ProjectRequestPostProcessorAdapter {
+public class ReactorTestRequestPostProcessor implements ProjectRequestPostProcessor {
 
 	private static final Version VERSION_2_0_0_M2 = Version.parse("2.0.0.M2");
 

File: initializr-service/src/main/java/io/spring/initializr/service/extension/SpringBoot2RequestPostProcessor.java
Patch:
@@ -17,7 +17,7 @@
 package io.spring.initializr.service.extension;
 
 import io.spring.initializr.generator.ProjectRequest;
-import io.spring.initializr.generator.ProjectRequestPostProcessorAdapter;
+import io.spring.initializr.generator.ProjectRequestPostProcessor;
 import io.spring.initializr.metadata.InitializrMetadata;
 import io.spring.initializr.util.Version;
 
@@ -30,7 +30,7 @@
  * @author Stephane Nicoll
  */
 @Component
-class SpringBoot2RequestPostProcessor extends ProjectRequestPostProcessorAdapter {
+class SpringBoot2RequestPostProcessor implements ProjectRequestPostProcessor {
 
 	private static final Version VERSION_2_0_0_M1 = Version.parse("2.0.0.M1");
 

File: initializr-web/src/test/java/io/spring/initializr/web/project/ProjectGenerationPostProcessorTests.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.spring.initializr.generator.ProjectRequest;
 import io.spring.initializr.generator.ProjectRequestPostProcessor;
-import io.spring.initializr.generator.ProjectRequestPostProcessorAdapter;
 import io.spring.initializr.metadata.InitializrMetadata;
 import io.spring.initializr.web.AbstractInitializrControllerIntegrationTests;
 import io.spring.initializr.web.project.ProjectGenerationPostProcessorTests.ProjectRequestPostProcessorConfiguration;
@@ -52,7 +51,7 @@ static class ProjectRequestPostProcessorConfiguration {
 		@Bean
 		@Order(2)
 		ProjectRequestPostProcessor secondPostProcessor() {
-			return new ProjectRequestPostProcessorAdapter() {
+			return new ProjectRequestPostProcessor() {
 				@Override
 				public void postProcessBeforeResolution(ProjectRequest request, InitializrMetadata metadata) {
 					request.setJavaVersion("1.7");
@@ -63,7 +62,7 @@ public void postProcessBeforeResolution(ProjectRequest request, InitializrMetada
 		@Bean
 		@Order(1)
 		ProjectRequestPostProcessor firstPostProcessor() {
-			return new ProjectRequestPostProcessorAdapter() {
+			return new ProjectRequestPostProcessor() {
 				@Override
 				public void postProcessBeforeResolution(ProjectRequest request, InitializrMetadata metadata) {
 					request.setJavaVersion("1.2");

File: initializr-generator/src/main/java/io/spring/initializr/generator/ProjectGenerator.java
Patch:
@@ -76,7 +76,7 @@ public class ProjectGenerator {
 
 	private static final Version VERSION_1_5_0_M1 = Version.parse("1.5.0.M1");
 
-	private static final Version VERSION_2_0_0_BUILD_SNAPSHOT = Version.parse("2.0.0.BUILD-SNAPSHOT");
+	private static final Version VERSION_2_0_0_M1 = Version.parse("2.0.0.M1");
 
 	@Autowired
 	private ApplicationEventPublisher eventPublisher;
@@ -420,7 +420,7 @@ protected Map<String, Object> resolveModel(ProjectRequest originalRequest) {
 		model.put("bootOneThreeAvailable", VERSION_1_3_0_M1
 				.compareTo(Version.safeParse(request.getBootVersion())) <= 0);
 
-		model.put("bootTwoZeroAvailable", VERSION_2_0_0_BUILD_SNAPSHOT
+		model.put("bootTwoZeroAvailable", VERSION_2_0_0_M1
 				.compareTo(Version.safeParse(request.getBootVersion())) <= 0);
 
 		// Gradle plugin has changed again as from 1.4.2

File: initializr-actuator/src/test/java/io/spring/initializr/actuate/stat/ProjectRequestDocumentFactoryTests.java
Patch:
@@ -46,7 +46,7 @@ public void createDocumentForSimpleProject() {
 		assertEquals(null, document.getRequestIp());
 		assertEquals("com.example", document.getGroupId());
 		assertEquals("demo", document.getArtifactId());
-		assertEquals("com.example", document.getPackageName());
+		assertEquals("com.example.demo", document.getPackageName());
 		assertEquals("1.2.3.RELEASE", document.getBootVersion());
 		assertEquals("1.8", document.getJavaVersion());
 		assertEquals("java", document.getLanguage());

File: initializr-generator/src/test/java/io/spring/initializr/test/generator/ProjectAssert.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class ProjectAssert {
 
-	public static final String DEFAULT_PACKAGE_NAME = "com.example";
+	public static final String DEFAULT_PACKAGE_NAME = "com.example.demo";
 
 	public static final String DEFAULT_APPLICATION_NAME = "DemoApplication";
 

File: initializr-docs/src/test/java/io/spring/initializr/stub/ClientApplicationTests.java
Patch:
@@ -23,13 +23,13 @@
 import static org.assertj.core.api.Assertions.*;
 import static org.springframework.boot.test.context.SpringBootTest.*;
 
-// tag::test[]
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = WebEnvironment.NONE)
 @AutoConfigureStubRunner(
-		ids = "io.spring.initializr:initializr-web",
+		ids = "io.spring.initializr:initializr-web:${project.version}",
 		workOffline = true)
-public class InitializrIntegrationTests {
+// tag::test[]
+public class ClientApplicationTests {
 
 	@Autowired
 	private StubFinder stubFinder;

File: initializr-generator/src/main/java/io/spring/initializr/metadata/InitializrMetadata.java
Patch:
@@ -23,6 +23,7 @@
 
 import io.spring.initializr.util.Version;
 import io.spring.initializr.util.VersionParser;
+import io.spring.initializr.util.VersionProperty;
 
 /**
  * Meta-data used to generate a project.
@@ -236,7 +237,7 @@ public String createCliDistributionURl(String extension) {
 	public BillOfMaterials createSpringBootBom(String bootVersion, String versionProperty) {
 		BillOfMaterials bom = BillOfMaterials.create("org.springframework.boot",
 				"spring-boot-dependencies", bootVersion);
-		bom.setVersionProperty(versionProperty);
+		bom.setVersionProperty(new VersionProperty(versionProperty));
 		bom.setOrder(100);
 		return bom;
 	}

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectRequestResolverTests.java
Patch:
@@ -24,6 +24,7 @@
 
 import io.spring.initializr.metadata.InitializrMetadata;
 import io.spring.initializr.test.metadata.InitializrMetadataTestBuilder;
+import io.spring.initializr.util.VersionProperty;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -57,7 +58,7 @@ public void beforeResolution() {
 		ProjectRequest request = resolve(createMavenProjectRequest(), postProcessors);
 		assertEquals("1.2", request.getJavaVersion());
 		assertEquals("1.2", request.getBuildProperties().getVersions()
-				.get("java.version").get());
+				.get(new VersionProperty("java.version")).get());
 	}
 
 	@Test

File: initializr-generator/src/test/java/io/spring/initializr/generator/ProjectGeneratorTests.java
Patch:
@@ -301,7 +301,7 @@ public void springBoot15UseGradle3() {
 		ProjectRequest request = createProjectRequest("web");
 		request.setType("gradle-project");
 		request.setBootVersion("1.5.0.RELEASE");
-		generateProject(request).isGradleProject("3.4.1");
+		generateProject(request).isGradleProject("3.3");
 	}
 
 	@Test

File: initializr-web/src/test/java/io/spring/initializr/web/project/MainControllerIntegrationTests.java
Patch:
@@ -169,9 +169,6 @@ public void currentMetadataCompatibleWithV2() {
 
 	@Test
 	public void metadataWithV2AcceptHeader() {
-		getRequests().setFields("_links.maven-project", "dependencies.values[0]",
-				"type.values[0]", "javaVersion.values[0]", "packaging.values[0]",
-				"bootVersion.values[0]", "language.values[0]");
 		ResponseEntity<String> response = invokeHome(null,
 				"application/vnd.initializr.v2+json");
 		validateMetadata(response, InitializrMetadataVersion.V2.getMediaType(), "2.0.0",
@@ -180,6 +177,9 @@ public void metadataWithV2AcceptHeader() {
 
 	@Test
 	public void metadataWithCurrentAcceptHeader() {
+		getRequests().setFields("_links.maven-project", "dependencies.values[0]",
+				"type.values[0]", "javaVersion.values[0]", "packaging.values[0]",
+				"bootVersion.values[0]", "language.values[0]");
 		ResponseEntity<String> response = invokeHome(null,
 				"application/vnd.initializr.v2.1+json");
 		assertThat(response.getHeaders().getFirst(HttpHeaders.ETAG), not(nullValue()));

File: initializr-web/src/test/java/io/spring/initializr/web/project/NewGenerationSmokeTests.java
Patch:
@@ -436,7 +436,8 @@ public WebElement dependency(String value) {
 	}
 
 	public void advanced() {
-		form.findElement(By.cssSelector(".tofullversion")).click();
+		form.findElement(By.cssSelector(".tofullversion"))
+				.findElement(By.tagName("a")).click();
 	}
 
 	public void simple() {

File: initializr-docs/src/test/java/io/spring/initializr/stub/InitializrIntegrationTests.java
Patch:
@@ -26,8 +26,7 @@
 @SpringBootTest(webEnvironment = WebEnvironment.NONE)
 // Need a spring boot app. Doesn't really have one
 @AutoConfigureStubRunner(
-		// TODO: can't hardcode the version there as it must be automatically replaced when releasing
-		ids = "io.spring.initializr:initializr-web:0.3.0.BUILD-SNAPSHOT",
+		ids = "io.spring.initializr:initializr-web",
 		workOffline = true)
 public class InitializrIntegrationTests {
 

File: initializr-web/src/test/groovy/io/spring/initializr/web/test/MockMvcClientHttpRequestFactoryTestExecutionListener.java
Patch:
@@ -39,6 +39,8 @@ public void beforeTestClass(TestContext testContext) throws Exception {
 					beanFactory.getBean(MockMvc.class));
 			beanFactory.registerSingleton("mockMvcClientHttpRequestFactory",
 					this.factory);
+		} else {
+			factory = beanFactory.getBean("mockMvcClientHttpRequestFactory", MockMvcClientHttpRequestFactory.class);
 		}
 	}
 

File: initializr-generator/src/main/resources/templates/ServletInitializer.java
Patch:
@@ -1,6 +1,6 @@
 package ${packageName};
 
-import org.springframework.boot.builder.SpringApplicationBuilder;<% if (newTestInfrastructure) { %>
+import org.springframework.boot.builder.SpringApplicationBuilder;<% if (newServletInitializer) { %>
 import org.springframework.boot.web.support.SpringBootServletInitializer;<% } else { %>
 import org.springframework.boot.context.web.SpringBootServletInitializer;<% } %>
 

File: initializr-generator/src/main/resources/templates/ServletInitializer.java
Patch:
@@ -1,7 +1,8 @@
 package ${packageName};
 
-import org.springframework.boot.builder.SpringApplicationBuilder;
-import org.springframework.boot.context.web.SpringBootServletInitializer;
+import org.springframework.boot.builder.SpringApplicationBuilder;<% if (newTestInfrastructure) { %>
+import org.springframework.boot.web.support.SpringBootServletInitializer;<% } else { %>
+import org.springframework.boot.context.web.SpringBootServletInitializer;<% } %>
 
 public class ServletInitializer extends SpringBootServletInitializer {
 

File: initializr/src/main/resources/templates/Application.java
Patch:
@@ -8,9 +8,9 @@
 @Configuration
 @ComponentScan
 @EnableAutoConfiguration
-public class Application {
+public class ${applicationName} {
 
     public static void main(String[] args) {
-        SpringApplication.run(Application.class, args);
+        SpringApplication.run(${applicationName}.class, args);
     }
 }

File: initializr/src/main/resources/templates/ApplicationTests.java
Patch:
@@ -6,8 +6,8 @@
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@SpringApplicationConfiguration(classes = Application.class)
-${testAnnotations}public class ApplicationTests {
+@SpringApplicationConfiguration(classes = ${applicationName}.class)
+${testAnnotations}public class ${applicationName}Tests {
 
 	@Test
 	public void contextLoads() {

File: initializr/src/main/resources/templates/ServletInitializer.java
Patch:
@@ -7,7 +7,7 @@ public class ServletInitializer extends SpringBootServletInitializer {
 
 	@Override
 	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
-		return application.sources(Application.class);
+		return application.sources(${applicationName}.class);
 	}
 
 }

File: templates/Application.java
Patch:
@@ -1,7 +1,7 @@
 package ${packageName};
 
-import org.springframework.bootstrap.SpringApplication;
-import org.springframework.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.annotation.ComponentScan;
 
 @ComponentScan

