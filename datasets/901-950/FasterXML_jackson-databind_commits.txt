File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -1074,7 +1074,7 @@ public JsonNode readTree(JsonParser p) throws IOException {
      */
     public <T> T readTreeAsValue(JsonNode n, Class<T> targetType) throws IOException
     {
-        if (n == null) {
+        if (n == null || n.isMissingNode()) {
             return null;
         }
         try (TreeTraversingParser p = _treeAsTokens(n)) {
@@ -1098,7 +1098,7 @@ public <T> T readTreeAsValue(JsonNode n, Class<T> targetType) throws IOException
      */
     public <T> T readTreeAsValue(JsonNode n, JavaType targetType) throws IOException
     {
-        if (n == null) {
+        if (n == null || n.isMissingNode()) {
             return null;
         }
         try (TreeTraversingParser p = _treeAsTokens(n)) {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest.java
Patch:
@@ -610,7 +610,7 @@ public Orange(@JsonProperty("name") String name, @JsonProperty("name") String co
     public void testIssue3008() throws Exception
     {
         ObjectReader r = MAPPER.readerFor(Box3008.class);
-        Box3008 deserOrangeBox = r.readValue("{\"type\":null,\"fruit\":null}}");
+        Box3008 deserOrangeBox = r.readValue("{\"type\":null,\"fruit\":null}");
         assertNull(deserOrangeBox.fruit);
         assertNull(deserOrangeBox.type); // error: "expected null, but was:<null>"
     }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdWithCreatorTest.java
Patch:
@@ -111,7 +111,7 @@ public void testExternalTypeId() throws Exception
     // [databind#1198]
     @Test
     public void testFails() throws Exception {
-        String json = "{ \"name\": \"foo\", \"attack\":\"right\" } }";
+        String json = "{ \"name\": \"foo\", \"attack\":\"right\" } ";
 
         Character character = MAPPER.readValue(json, Character.class);
 
@@ -123,7 +123,7 @@ public void testFails() throws Exception {
     // [databind#1198]
     @Test
     public void testWorks() throws Exception {
-        String json = "{ \"name\": \"foo\", \"preferredAttack\": \"KICK\", \"attack\":\"right\" } }";
+        String json = "{ \"name\": \"foo\", \"preferredAttack\": \"KICK\", \"attack\":\"right\" }";
 
         Character character = MAPPER.readValue(json, Character.class);
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestPropertyCreatorSubtypesExternalPropertyMissingProperty.java
Patch:
@@ -104,9 +104,9 @@ public static Orange getOrange(@JsonProperty("name") String name, @JsonProperty(
     private static final Orange orange = new Orange("Orange", "orange");
     private static final Box orangeBox = new Box("orange", orange);
     private static final String orangeBoxJson = "{\"type\":\"orange\",\"fruit\":{\"name\":\"Orange\",\"color\":\"orange\"}}";
-    private static final String orangeBoxNullJson = "{\"type\":\"orange\",\"fruit\":null}}";
-    private static final String orangeBoxEmptyJson = "{\"type\":\"orange\",\"fruit\":{}}}";
-    private static final String orangeBoxMissingJson = "{\"type\":\"orange\"}}";
+    private static final String orangeBoxNullJson = "{\"type\":\"orange\",\"fruit\":null}";
+    private static final String orangeBoxEmptyJson = "{\"type\":\"orange\",\"fruit\":{}}";
+    private static final String orangeBoxMissingJson = "{\"type\":\"orange\"}";
 
     private static final Apple apple = new Apple("Apple", 16);
     private static Box appleBox = new Box("apple", apple);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestSubtypesExternalPropertyMissingProperty.java
Patch:
@@ -101,9 +101,9 @@ public Orange(String name, String c) {
     private static final Orange orange = new Orange("Orange", "orange");
     private static final Box orangeBox = new Box("orange", orange);
     private static final String orangeBoxJson = "{\"type\":\"orange\",\"fruit\":{\"name\":\"Orange\",\"color\":\"orange\"}}";
-    private static final String orangeBoxNullJson = "{\"type\":\"orange\",\"fruit\":null}}";
-    private static final String orangeBoxEmptyJson = "{\"type\":\"orange\",\"fruit\":{}}}";
-    private static final String orangeBoxMissingJson = "{\"type\":\"orange\"}}";
+    private static final String orangeBoxNullJson = "{\"type\":\"orange\",\"fruit\":null}";
+    private static final String orangeBoxEmptyJson = "{\"type\":\"orange\",\"fruit\":{}}";
+    private static final String orangeBoxMissingJson = "{\"type\":\"orange\"}";
 
     private static final Apple apple = new Apple("Apple", 16);
     private static final Box appleBox = new Box("apple", apple);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest.java
Patch:
@@ -611,7 +611,7 @@ public Orange(@JsonProperty("name") String name, @JsonProperty("name") String co
     public void testIssue3008() throws Exception
     {
         ObjectReader r = MAPPER.readerFor(Box3008.class);
-        Box3008 deserOrangeBox = r.readValue("{\"type\":null,\"fruit\":null}}");
+        Box3008 deserOrangeBox = r.readValue("{\"type\":null,\"fruit\":null}");
         assertNull(deserOrangeBox.fruit);
         assertNull(deserOrangeBox.type); // error: "expected null, but was:<null>"
     }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdWithCreatorTest.java
Patch:
@@ -112,7 +112,7 @@ public void testExternalTypeId() throws Exception
     // [databind#1198]
     @Test
     public void testFails() throws Exception {
-        String json = "{ \"name\": \"foo\", \"attack\":\"right\" } }";
+        String json = "{ \"name\": \"foo\", \"attack\":\"right\" } ";
 
         Character character = MAPPER.readValue(json, Character.class);
 
@@ -124,7 +124,7 @@ public void testFails() throws Exception {
     // [databind#1198]
     @Test
     public void testWorks() throws Exception {
-        String json = "{ \"name\": \"foo\", \"preferredAttack\": \"KICK\", \"attack\":\"right\" } }";
+        String json = "{ \"name\": \"foo\", \"preferredAttack\": \"KICK\", \"attack\":\"right\" }";
 
         Character character = MAPPER.readValue(json, Character.class);
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestPropertyCreatorSubtypesExternalPropertyMissingProperty.java
Patch:
@@ -104,9 +104,9 @@ public static Orange getOrange(@JsonProperty("name") String name, @JsonProperty(
     private static final Orange orange = new Orange("Orange", "orange");
     private static final Box orangeBox = new Box("orange", orange);
     private static final String orangeBoxJson = "{\"type\":\"orange\",\"fruit\":{\"name\":\"Orange\",\"color\":\"orange\"}}";
-    private static final String orangeBoxNullJson = "{\"type\":\"orange\",\"fruit\":null}}";
-    private static final String orangeBoxEmptyJson = "{\"type\":\"orange\",\"fruit\":{}}}";
-    private static final String orangeBoxMissingJson = "{\"type\":\"orange\"}}";
+    private static final String orangeBoxNullJson = "{\"type\":\"orange\",\"fruit\":null}";
+    private static final String orangeBoxEmptyJson = "{\"type\":\"orange\",\"fruit\":{}}";
+    private static final String orangeBoxMissingJson = "{\"type\":\"orange\"}";
 
     private static final Apple apple = new Apple("Apple", 16);
     private static Box appleBox = new Box("apple", apple);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestSubtypesExternalPropertyMissingProperty.java
Patch:
@@ -101,9 +101,9 @@ public Orange(String name, String c) {
     private static final Orange orange = new Orange("Orange", "orange");
     private static final Box orangeBox = new Box("orange", orange);
     private static final String orangeBoxJson = "{\"type\":\"orange\",\"fruit\":{\"name\":\"Orange\",\"color\":\"orange\"}}";
-    private static final String orangeBoxNullJson = "{\"type\":\"orange\",\"fruit\":null}}";
-    private static final String orangeBoxEmptyJson = "{\"type\":\"orange\",\"fruit\":{}}}";
-    private static final String orangeBoxMissingJson = "{\"type\":\"orange\"}}";
+    private static final String orangeBoxNullJson = "{\"type\":\"orange\",\"fruit\":null}";
+    private static final String orangeBoxEmptyJson = "{\"type\":\"orange\",\"fruit\":{}}";
+    private static final String orangeBoxMissingJson = "{\"type\":\"orange\"}";
 
     private static final Apple apple = new Apple("Apple", 16);
     private static final Box appleBox = new Box("apple", apple);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicDeserErrorHandlingTest.java
Patch:
@@ -54,7 +54,7 @@ public void testUnknownClassAsSubtype() throws Exception
         ObjectReader reader = MAPPER.readerFor(BaseUnknownWrapper.class)
                 .without(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);
         BaseUnknownWrapper w = reader.readValue(a2q
-                ("{'value':{'clazz':'com.foobar.Nothing'}}'"));
+                ("{'value':{'clazz':'com.foobar.Nothing'}}"));
         assertNotNull(w);
     }
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java
Patch:
@@ -268,7 +268,7 @@ public void testUnknownClassAsSubtype() throws Exception
         ObjectMapper mapper = new ObjectMapper();
         mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false);
         BaseWrapper w = mapper.readValue(a2q
-                ("{'value':{'clazz':'com.foobar.Nothing'}}'"),
+                ("{'value':{'clazz':'com.foobar.Nothing'}}"),
                 BaseWrapper.class);
         assertNotNull(w);
         assertNull(w.value);

File: src/test/java/com/fasterxml/jackson/databind/misc/TestBlocking.java
Patch:
@@ -1,6 +1,6 @@
 package com.fasterxml.jackson.databind.misc;
 
-import java.io.*;
+import java.io.IOException;
 
 
 import org.junit.jupiter.api.Test;
@@ -25,7 +25,7 @@ public class TestBlocking
      * quite yet.
      */
     @Test
-    public void testEagerAdvance() throws IOException
+    public void testEagerAdvance() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
         JsonParser jp = createParserUsingReader("[ 1  ");

File: src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicDeserErrorHandlingTest.java
Patch:
@@ -54,7 +54,7 @@ public void testUnknownClassAsSubtype() throws Exception
         ObjectReader reader = MAPPER.readerFor(BaseUnknownWrapper.class)
                 .without(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);
         BaseUnknownWrapper w = reader.readValue(a2q
-                ("{'value':{'clazz':'com.foobar.Nothing'}}'"));
+                ("{'value':{'clazz':'com.foobar.Nothing'}}"));
         assertNotNull(w);
     }
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java
Patch:
@@ -268,7 +268,7 @@ public void testUnknownClassAsSubtype() throws Exception
         ObjectMapper mapper = new ObjectMapper();
         mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false);
         BaseWrapper w = mapper.readValue(a2q
-                ("{'value':{'clazz':'com.foobar.Nothing'}}'"),
+                ("{'value':{'clazz':'com.foobar.Nothing'}}"),
                 BaseWrapper.class);
         assertNotNull(w);
         assertNull(w.value);

File: src/test/java/com/fasterxml/jackson/databind/misc/TestBlocking.java
Patch:
@@ -1,6 +1,6 @@
 package com.fasterxml.jackson.databind.misc;
 
-import java.io.*;
+import java.io.IOException;
 
 import org.junit.jupiter.api.Test;
 
@@ -24,7 +24,7 @@ public class TestBlocking
      * quite yet.
      */
     @Test
-    public void testEagerAdvance() throws IOException
+    public void testEagerAdvance() throws Exception
     {
         ObjectMapper mapper = jsonMapperBuilder()
                 .disable(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)

File: src/main/java/com/fasterxml/jackson/databind/util/CompactStringObjectMap.java
Patch:
@@ -96,7 +96,8 @@ private final static int findSize(int size)
         return result;
     }
 
-    public Object find(String key) {
+    public Object find(String key)
+    {
         int slot = key.hashCode() & _hashMask;
         int ix = (slot<<1);
         Object match = _hashArea[ix];

File: src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java
Patch:
@@ -302,9 +302,8 @@ public void testUnknownExtraProp() throws Exception
                 .without(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
                 .readValue(json);
         assertNotNull(v);
-        // note: +1 for both so
-        assertEquals(v.value.x, 42);
-        assertEquals(v.value.y, 13);
+        assertEquals(42, v.value.x);
+        assertEquals(13, v.value.y);
         assertTrue(v.value.complete);
         assertEquals("Foobar", v.value.name);
     }

File: src/test/java/com/fasterxml/jackson/databind/objectid/JSOGDeserialize622Test.java
Patch:
@@ -95,14 +95,14 @@ public JSOGRef generateId(Object forPojo) {
     static class JSOGRefDeserializer extends JsonDeserializer<JSOGRef>
     {
       @Override
-      public JSOGRef deserialize(JsonParser p, DeserializationContext ctx) throws IOException {
-          JsonNode node = p.readValueAsTree();
+      public JSOGRef deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+          JsonNode node = ctxt.readTree(p);
           if (node.isTextual()) {
               return new JSOGRef(node.asInt());
           }
           JsonNode n = node.get(REF_KEY);
           if (n == null) {
-              ctx.reportInputMismatch(JSOGRef.class, "Could not find key '"+REF_KEY
+              ctxt.reportInputMismatch(JSOGRef.class, "Could not find key '"+REF_KEY
                       +"' from ("+node.getClass().getName()+"): "+node);
           }
           return new JSOGRef(n.asInt());

File: src/test/java/com/fasterxml/jackson/databind/deser/merge/ArrayMergeTest.java
Patch:
@@ -129,6 +129,7 @@ public void testByteArrayMerging() throws Exception
         MergedX<byte[]> input = new MergedX<byte[]>(new byte[] { 1, 2 });
         MergedX<byte[]> result = MAPPER
                 .readerFor(new TypeReference<MergedX<byte[]>>() {})
+                .without(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)
                 .withValueToUpdate(input)
                 .readValue(a2q("{'value':[4, 6.0, null]}"));
         assertSame(input, result);

File: src/test/java/com/fasterxml/jackson/databind/introspect/DefaultCreatorDetection4584Test.java
Patch:
@@ -189,6 +189,7 @@ public void testCanonicalConstructor2ArgPropertiesCreator() throws Exception
         assertEquals(POJO4584.factoryString(null),
                 readerWith(new PrimaryCreatorFindingIntrospector(JsonCreator.Mode.PROPERTIES,
                         String.class, Integer.TYPE))
+                .without(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)                
                     .readValue(a2q("{}")));
     }
 

File: src/test/java/com/fasterxml/jackson/databind/introspect/IsGetterRenaming2527Test.java
Patch:
@@ -72,6 +72,7 @@ public PropertyName findRenameByField(MapperConfig<?> config,
 
     private final ObjectMapper MAPPER = jsonMapperBuilder()
             .annotationIntrospector(new MyIntrospector())
+            .disable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)
             .build();
 
     @Test

File: src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayAdvanced.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.jupiter.api.Test;
 
 import com.fasterxml.jackson.annotation.*;
-
+import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
@@ -120,6 +120,7 @@ public void testWithViewAndCreator() throws Exception
     {
         AsArrayWithViewAndCreator result = MAPPER.readerFor(AsArrayWithViewAndCreator.class)
                 .withView(ViewB.class)
+                .without(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)
                 .readValue("[1,2,3]");
         // should include 'c' (not view-able) and 'b' (include in ViewB) but not 'a'
         assertEquals(3, result.c);

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/BigCreatorTest.java
Patch:
@@ -50,7 +50,9 @@ public Biggie(
         }
     }
 
-    private final ObjectReader BIGGIE_READER = sharedMapper().readerFor(Biggie.class);
+    private final ObjectReader BIGGIE_READER = sharedMapper()
+            .readerFor(Biggie.class)
+            .without(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES);
 
     @Test
     public void testBigPartial() throws Exception

File: src/test/java/com/fasterxml/jackson/databind/convert/CoerceJDKScalarsTest.java
Patch:
@@ -86,6 +86,8 @@ private void _verifyNullOkFromEmpty(Class<?> type, Object exp) throws IOExceptio
     {
         Object result = COERCING_MAPPER.readerFor(type)
                 .with(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)
+                // 08-Jan-2025, tatu: Need to allow null-to-int coercion here
+                .without(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)
                 .readValue("\"\"");
         if (exp == null) {
             assertNull(result);

File: src/test/java/com/fasterxml/jackson/databind/convert/CoerceStringToIntsTest.java
Patch:
@@ -34,6 +34,8 @@ public class CoerceStringToIntsTest
         .build();
 
     private final ObjectMapper MAPPER_TO_NULL = jsonMapperBuilder()
+            // 08-Jan-2025, tatu: Need to allow null-to-int coercion for some tests
+            .disable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)
             .withCoercionConfig(LogicalType.Integer, cfg ->
             cfg.setCoercion(CoercionInputShape.String, CoercionAction.AsNull))
         .build();

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -377,9 +377,9 @@ public enum MapperFeature implements ConfigFeature
      * properties are included in all views if there is no
      * {@link com.fasterxml.jackson.annotation.JsonView} annotation.
      *<p>
-     * Feature is enabled by default.
+     * Feature is enabled by default in 2.x: will be disabled in 3.0.
      */
-    DEFAULT_VIEW_INCLUSION(false),
+    DEFAULT_VIEW_INCLUSION(true),
 
     /*
     /******************************************************

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -127,7 +127,8 @@ public enum DeserializationFeature implements ConfigFeature
      * is thrown to indicate this; if not, default value is used
      * (0 for 'int', 0.0 for double, same defaulting as what JVM uses).
      *<p>
-     * Feature is disabled by default.
+     * Feature is disabled by default for Jackson 2.x: will be changed
+     * to enabled in 3.0.
      */
     FAIL_ON_NULL_FOR_PRIMITIVES(false),
 

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -379,7 +379,7 @@ public enum MapperFeature implements ConfigFeature
      *<p>
      * Feature is enabled by default.
      */
-    DEFAULT_VIEW_INCLUSION(true),
+    DEFAULT_VIEW_INCLUSION(false),
 
     /*
     /******************************************************

File: src/test/java/com/fasterxml/jackson/databind/node/NullNodeTest.java
Patch:
@@ -69,6 +69,8 @@ public void testBasicsWithNullNode() throws Exception
         assertFalse(n.has(3));
 
         assertNodeNumbersForNonNumeric(n);
+
+        assertNonContainerStreamMethods(n);
     }
 
     @Test

File: src/test/java/com/fasterxml/jackson/databind/node/TextNodeTest.java
Patch:
@@ -40,6 +40,8 @@ public void testText()
         assertTrue(TextNode.valueOf("true").asBoolean(false));
         assertFalse(TextNode.valueOf("false").asBoolean(true));
         assertFalse(TextNode.valueOf("false").asBoolean(false));
+
+        assertNonContainerStreamMethods(n);
     }
 
     @Test

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -548,7 +548,7 @@ private void _addSelectedPropertiesBasedCreator(DeserializationContext ctxt,
                 if ((name == null) && (injectId == null)) {
                     ctxt.reportBadTypeDefinition(beanDesc,
 "Argument #%d of Creator %s has no property name (and is not Injectable): can not use as property-based Creator",
-i, candidate);
+                        i, candidate);
                 }
             }
             properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -788,8 +788,7 @@ public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext c
             if (contentDeser == null) { // not defined by annotation
                 // One special type: EnumSet:
                 if (EnumSet.class.isAssignableFrom(collectionClass)) {
-                    deser = new EnumSetDeserializer(contentType, null,
-                            contentTypeDeser);
+                    deser = new EnumSetDeserializer(contentType, null);
                 }
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java
Patch:
@@ -146,9 +146,9 @@ protected String _locateTypeId(JsonParser p, DeserializationContext ctxt) throws
                 }
                 return id;
             }
-             ctxt.reportWrongTokenException(baseType(), JsonToken.START_ARRAY,
-                     "need Array value to contain `As.WRAPPER_ARRAY` type information for class "+baseTypeName());
-             return null;
+            ctxt.reportWrongTokenException(baseType(), JsonToken.START_ARRAY,
+                    "need Array value to contain `As.WRAPPER_ARRAY` type information for class "+baseTypeName());
+            return null;
         }
         // And then type id as a String
         JsonToken t = p.nextToken();

File: src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest.java
Patch:
@@ -283,7 +283,7 @@ public void jsonMapperRebuildTest()
 
         JsonMapper m3 = m2.rebuild()
                 .propertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)
-                .enumNamingStrategy(EnumNamingStrategies.CamelCaseStrategy.INSTANCE)
+                .enumNamingStrategy(EnumNamingStrategies.UPPER_CAMEL_CASE)
                 .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS)
                 .enable(EnumFeature.WRITE_ENUMS_TO_LOWERCASE)
                 .build();

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ValueInstantiatorTest.java
Patch:
@@ -12,7 +12,6 @@
 import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
 import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
 import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import static org.junit.jupiter.api.Assertions.*;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/enums/EnumSetPolymorphicDeser4214Test.java
Patch:
@@ -40,7 +40,8 @@ public void testPolymorphicDeserialization4214() throws Exception
     {
         // Need to use Default Typing to trigger issue
         ObjectMapper mapper = jsonMapperBuilder()
-                .activateDefaultTyping(BasicPolymorphicTypeValidator.builder().allowIfBaseType(Object.class).build(),
+                .activateDefaultTyping(BasicPolymorphicTypeValidator.builder()
+                        .allowIfBaseType(Object.class).build(),
                         DefaultTyping.NON_FINAL_AND_ENUMS)
                 .build();
 

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapWithGenericValuesDeserTest.java
Patch:
@@ -9,7 +9,6 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;

File: src/test/java/com/fasterxml/jackson/databind/exc/SubclassedThrowableDeserialization4827Test.java
Patch:
@@ -11,11 +11,11 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 // [databind#4827] Subclassed Throwable deserialization fails since v2.18.0
-//                no creator index for property 'cause'
+// no creator index for property 'cause'
 public class SubclassedThrowableDeserialization4827Test
         extends DatabindTestUtil
 {
-
+    @SuppressWarnings("serial")
     public static class SubclassedExceptionJava extends Exception {
         @JsonCreator
         public SubclassedExceptionJava(

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForMaps.java
Patch:
@@ -13,7 +13,6 @@
 import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
 import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import static org.junit.jupiter.api.Assertions.*;
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/jdk/TypedArrayDeserTest.java
Patch:
@@ -9,7 +9,6 @@
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import static org.junit.jupiter.api.Assertions.*;
 

File: src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java
Patch:
@@ -262,7 +262,7 @@ public void testCustomization() throws Exception
     public void testCustomLists() throws Exception
     {
         SimpleModule module = new SimpleModule("test", Version.unknownVersion());
-        JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null);
+        JsonSerializer<?> ser = new CollectionSerializer(MAPPER.constructType(Object.class), false, null, null);
         final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser;
 
         module.addSerializer(Collection.class, new JsonSerializer<Collection>() {

File: src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java
Patch:
@@ -14,7 +14,6 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import static org.junit.jupiter.api.Assertions.*;
 

File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/NumberSerTest.java
Patch:
@@ -223,7 +223,7 @@ public void testCustomSerializationBigDecimalAsNumber() throws Exception {
     }
 
     // default locale is en_US
-    private static DecimalFormat createDecimalFormatForDefaultLocale(final String pattern) {
+    static DecimalFormat createDecimalFormatForDefaultLocale(final String pattern) {
         return new DecimalFormat(pattern, new DecimalFormatSymbols(Locale.ENGLISH));
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/tofix/PolymorphicDeserWithJsonUnwrapped4792Test.java
Patch:
@@ -26,7 +26,7 @@ interface Parent { }
     static class SubA implements Parent {
         @JsonUnwrapped
         @JsonProperty(access = READ_ONLY)
-        private Model model;
+        Model model;
 
         @JsonCreator
         public SubA(@JsonProperty("model") Model model) {

File: src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderErrorHandlingTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import static com.fasterxml.jackson.databind.testutil.DatabindTestUtil.*;
 
-public class BuilderErrorHandling
+public class BuilderErrorHandlingTest
 {
     @JsonDeserialize(builder=SimpleBuilderXY.class)
     static class ValueClassXY

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/JsonCreatorModeForEnum3566Test.java
Patch:
@@ -14,7 +14,7 @@
 /* [databind#3566]: `Enum` with `JsonFormat.Shape.OBJECT` fails to deserialize using `JsonCreator.Mode.DELEGATING` ONLY
  * when also has `JsonCreator.Mode.PROPERTIES` (while with Pojo does not).
  */
-public class JsonCreatorModeForEnum3566
+public class JsonCreatorModeForEnum3566Test
 {
 
     /*

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestGenericListSerialization.java
Patch:
@@ -10,7 +10,6 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import static org.junit.jupiter.api.Assertions.*;
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypeNames.java
Patch:
@@ -12,7 +12,6 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import static org.junit.jupiter.api.Assertions.*;
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserialization.java
Patch:
@@ -14,7 +14,6 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import static org.junit.jupiter.api.Assertions.*;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -506,7 +506,9 @@ protected Object _deserializeUsingPropertyBased(final JsonParser p, final Deseri
             if (_anySetter != null) {
                 try {
                     // [databind#4639] Since 2.18.1 AnySetter might not part of the creator, but just some field.
-                    if (_anySetter.isFieldType()) {
+                    if (_anySetter.isFieldType() ||
+                            // [databind#4639] 2.18.2: Also should account for setter type :-/
+                            _anySetter.isSetterType()) {
                         buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
                     } else {
                         buffer.bufferAnyParameterProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java
Patch:
@@ -237,8 +237,8 @@ protected Object _handleIncompatibleUpdateValue(JsonParser p, DeserializationCon
         throws IOException
     {
         throw new UnsupportedOperationException(String.format
-                ("Cannot update object of type %s (using deserializer for type %s)"
-                        +intoValue.getClass().getName(), _delegateType));
+                ("Cannot update object of type %s (using deserializer for type %s)",
+                        intoValue.getClass().getName(), _delegateType));
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java
Patch:
@@ -236,8 +236,8 @@ protected Object _handleIncompatibleUpdateValue(JsonParser p, DeserializationCon
         throws IOException
     {
         throw new UnsupportedOperationException(String.format
-                ("Cannot update object of type %s (using deserializer for type %s)"
-                        +intoValue.getClass().getName(), _delegateType));
+                ("Cannot update object of type %s (using deserializer for type %s)",
+                        intoValue.getClass().getName(), _delegateType));
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -122,9 +122,7 @@ public ValueInstantiator constructValueInstantiator(DeserializationContext ctxt)
      * it with data. Default creator is only used if no other creators are
      * indicated.
      *
-     * @param creator
-     *            Creator method; no-arguments constructor or static factory
-     *            method.
+     * @param creator Creator method; no-arguments constructor or factory method.
      */
     public void setDefaultCreator(AnnotatedWithParams creator) {
         _creators[C_DEFAULT] = _fixAccess(creator);

File: src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java
Patch:
@@ -246,7 +246,7 @@ public enum SerializationFeature implements ConfigFeature
      * {@link java.util.Calendar} which will always use timezone Calendar value has).
      * Setting is also ignored by Joda date/time values.
      *<p>
-     * Featured is enabled by default for backwards-compatibility purposes (in
+     * Feature is enabled by default for backwards-compatibility purposes (in
      * Jackson 2.12 override was always done if there was explicitly defined timezone).
      *
      * @since 2.13

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java
Patch:
@@ -181,7 +181,7 @@ public void serializeWithType(Object value, JsonGenerator gen, SerializerProvide
         }
         JsonSerializer<Object> ser = _delegateSerializer;
         if (ser == null) {
-            ser = _findSerializer(value, provider);
+            ser = _findSerializer(delegateValue, provider);
         }
         ser.serializeWithType(delegateValue, gen, provider, typeSer);
     }

File: src/test/java/com/fasterxml/jackson/databind/HandlerInstantiationTest.java
Patch:
@@ -153,7 +153,7 @@ public void init(JavaType baseType) {
         public JavaType typeFromId(DatabindContext context, String id)
         {
             if (id.equals(_id)) {
-                return TypeFactory.defaultInstance().constructType(TypeIdBean.class);
+                return context.constructType(TypeIdBean.class);
             }
             return null;
         }

File: src/test/java/com/fasterxml/jackson/databind/deser/JacksonTypesDeserTest.java
Patch:
@@ -59,7 +59,7 @@ public void testJsonLocationProps()
     @Test
     public void testJavaType() throws Exception
     {
-        TypeFactory tf = TypeFactory.defaultInstance();
+        TypeFactory tf = defaultTypeFactory();
         // first simple type:
         String json = MAPPER.writeValueAsString(tf.constructType(String.class));
         assertEquals(q(java.lang.String.class.getName()), json);

File: src/test/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospectorTest.java
Patch:
@@ -204,7 +204,7 @@ public void testJsonTypeResolver() throws Exception
         JacksonAnnotationIntrospector ai = new JacksonAnnotationIntrospector();
         AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(mapper.getSerializationConfig(),
                 TypeResolverBean.class);
-        JavaType baseType = TypeFactory.defaultInstance().constructType(TypeResolverBean.class);
+        JavaType baseType = defaultTypeFactory().constructType(TypeResolverBean.class);
         TypeResolverBuilder<?> rb = ai.findTypeResolver(mapper.getDeserializationConfig(), ac, baseType);
         assertNotNull(rb);
         assertSame(DummyBuilder.class, rb.getClass());

File: src/test/java/com/fasterxml/jackson/databind/jsontype/CustomTypeIdResolverTest.java
Patch:
@@ -98,7 +98,7 @@ public void init(JavaType baseType) { }
         public JavaType typeFromId(DatabindContext context, String id)
         {
             if ("*".equals(id)) {
-                return TypeFactory.defaultInstance().constructType(subType);
+                return context.constructType(subType);
             }
             return null;
         }

File: src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java
Patch:
@@ -167,7 +167,7 @@ public void testIncompatibleRootType() throws Exception
     public void testJackson398() throws Exception
     {
         ObjectMapper mapper = newJsonMapper();
-        JavaType collectionType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, BaseClass398.class);
+        JavaType collectionType = defaultTypeFactory().constructCollectionType(ArrayList.class, BaseClass398.class);
         List<TestClass398> typedList = new ArrayList<TestClass398>();
         typedList.add(new TestClass398());
 

File: src/test/java/com/fasterxml/jackson/databind/SerializeUsingJDKTest.java
Patch:
@@ -223,7 +223,7 @@ public void testObjectMapper() throws Exception
     @Test
     public void testTypeFactory() throws Exception
     {
-        TypeFactory orig = TypeFactory.defaultInstance();
+        TypeFactory orig = defaultTypeFactory();
         JavaType t = orig.constructType(JavaType.class);
         assertNotNull(t);
 

File: src/test/java/com/fasterxml/jackson/databind/contextual/ContextualKeyTypesTest.java
Patch:
@@ -11,7 +11,7 @@
 import com.fasterxml.jackson.databind.deser.ContextualKeyDeserializer;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
-import com.fasterxml.jackson.databind.type.TypeFactory;
+import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -20,7 +20,7 @@
  * Tests to ensure that we can do contextual key serializers and
  * deserializers as well as value ser/deser.
  */
-public class ContextualKeyTypesTest
+public class ContextualKeyTypesTest extends DatabindTestUtil
 {
     /*
     /**********************************************************
@@ -99,7 +99,7 @@ public void testSimpleKeySer() throws Exception
         mapper.registerModule(module);
         Map<String,Object> input = new HashMap<String,Object>();
         input.put("a", Integer.valueOf(3));
-        String json = mapper.writerFor(TypeFactory.defaultInstance().constructMapType(HashMap.class, String.class, Object.class))
+        String json = mapper.writerFor(defaultTypeFactory().constructMapType(HashMap.class, String.class, Object.class))
             .writeValueAsString(input);
         assertEquals("{\"prefix:a\":3}", json);
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ValueInstantiatorTest.java
Patch:
@@ -251,7 +251,7 @@ static class MyDelegateMapInstantiator extends ValueInstantiator.Base
 
         @Override
         public JavaType getDelegateType(DeserializationConfig config) {
-            return TypeFactory.defaultInstance().constructType(Object.class);
+            return defaultTypeFactory().constructType(Object.class);
         }
 
         @Override

File: src/test/java/com/fasterxml/jackson/databind/exc/BasicExceptionTest.java
Patch:
@@ -10,13 +10,14 @@
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
+import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 import static com.fasterxml.jackson.databind.testutil.DatabindTestUtil.newJsonMapper;
 
-public class BasicExceptionTest
+public class BasicExceptionTest extends DatabindTestUtil
 {
     static class User {
         public String user;
@@ -32,7 +33,7 @@ static class Users {
     @Test
     public void testBadDefinition() throws Exception
     {
-        JavaType t = TypeFactory.defaultInstance().constructType(String.class);
+        JavaType t = defaultTypeFactory().constructType(String.class);
         JsonParser p = JSON_F.createParser("[]");
         InvalidDefinitionException e = new InvalidDefinitionException(p,
                "Testing", t);

File: src/test/java/com/fasterxml/jackson/databind/ext/MiscJavaXMLTypesReadWriteTest.java
Patch:
@@ -102,7 +102,7 @@ private String removeZ(String dateStr) {
     public void testDeserializerLoading()
     {
         CoreXMLDeserializers sers = new CoreXMLDeserializers();
-        TypeFactory f = TypeFactory.defaultInstance();
+        TypeFactory f = defaultTypeFactory();
         sers.findBeanDeserializer(f.constructType(Duration.class), null, null);
         sers.findBeanDeserializer(f.constructType(XMLGregorianCalendar.class), null, null);
         sers.findBeanDeserializer(f.constructType(QName.class), null, null);

File: src/test/java/com/fasterxml/jackson/databind/introspect/MethodGenericTypeResolverTest.java
Patch:
@@ -5,11 +5,12 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
+
 import com.fasterxml.jackson.core.type.TypeReference;
+
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
 import com.fasterxml.jackson.databind.type.TypeBindings;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 import org.junit.jupiter.api.Test;
 
@@ -18,7 +19,7 @@
 public class MethodGenericTypeResolverTest extends DatabindTestUtil {
 
     private static final TypeResolutionContext EMPTY_CONTEXT =
-            new TypeResolutionContext.Empty(TypeFactory.defaultInstance());
+            new TypeResolutionContext.Empty(defaultTypeFactory());
 
     public static <T> AtomicReference<T> simple(T input) {
         throw new UnsupportedOperationException();

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestGenericListSerialization.java
Patch:
@@ -64,7 +64,7 @@ public void testSubTypesFor356() throws Exception
                 .configure(MapperFeature.USE_STATIC_TYPING, true)
                 .build();
 
-        JavaType rootType = TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>() { });
+        JavaType rootType = defaultTypeFactory().constructType(new TypeReference<JSONResponse<List<Parent>>>() { });
         byte[] json = mapper.writerFor(rootType).writeValueAsBytes(input);
 
         JSONResponse<List<Parent>> out = mapper.readValue(json, 0, json.length, rootType);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypeNames.java
Patch:
@@ -91,7 +91,7 @@ public void testRoundTrip() throws Exception
         };
         String json = MAPPER.writeValueAsString(input);
         List<Animal> output = MAPPER.readValue(json,
-                TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class));
+                defaultTypeFactory().constructCollectionType(ArrayList.class, Animal.class));
         assertEquals(input.length, output.size());
         for (int i = 0, len = input.length; i < len; ++i) {
             assertEquals(input[i], output.get(i), "Entry #"+i+" differs, input = '"+json+"'");

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserialization.java
Patch:
@@ -220,7 +220,7 @@ public void testListAsArray() throws Exception
             +asJSONObjectValueString(m, "@classy", Fish.class.getName())
             +", null\n]";
 
-        JavaType expType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, Animal.class);
+        JavaType expType = defaultTypeFactory().constructCollectionType(ArrayList.class, Animal.class);
         List<Animal> animals = m.readValue(JSON, expType);
         assertNotNull(animals);
         assertEquals(4, animals.size());

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForMaps.java
Patch:
@@ -125,7 +125,7 @@ protected TypeNameIdResolver createTypeNameIdResolver(boolean forSerialization)
         subtypes.add(new NamedType(HashMap.class, "HMap"));
         ObjectMapper mapper = new ObjectMapper();
         return TypeNameIdResolver.construct(mapper.getDeserializationConfig(),
-                TypeFactory.defaultInstance().constructType(Object.class), subtypes, forSerialization, !forSerialization);
+                defaultTypeFactory().constructType(Object.class), subtypes, forSerialization, !forSerialization);
     }
 
     @Test

File: src/test/java/com/fasterxml/jackson/databind/jsontype/jdk/TypedArrayDeserTest.java
Patch:
@@ -56,7 +56,7 @@ public void testIntList() throws Exception
         ObjectMapper m = new ObjectMapper();
         // uses WRAPPER_OBJECT inclusion
         String JSON = "{\""+TypedListAsWrapper.class.getName()+"\":[4,5, 6]}";
-        JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class, Integer.class);
+        JavaType type = defaultTypeFactory().constructCollectionType(TypedListAsWrapper.class, Integer.class);
         TypedListAsWrapper<Integer> result = m.readValue(JSON, type);
         assertNotNull(result);
         assertEquals(3, result.size());
@@ -76,7 +76,7 @@ public void testBooleanListAsProp() throws Exception
         ObjectMapper m = new ObjectMapper();
         // tries to use PROPERTY inclusion; but for ARRAYS (and scalars) will become ARRAY_WRAPPER
         String JSON = "[\""+TypedListAsProp.class.getName()+"\",[true, false]]";
-        JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class, Boolean.class);
+        JavaType type = defaultTypeFactory().constructCollectionType(TypedListAsProp.class, Boolean.class);
         TypedListAsProp<Object> result = m.readValue(JSON, type);
         assertNotNull(result);
         assertEquals(2, result.size());
@@ -91,7 +91,7 @@ public void testLongListAsWrapper() throws Exception
         // uses OBJECT_ARRAY, works just fine
 
         String JSON = "{\""+TypedListAsWrapper.class.getName()+"\":[1, 3]}";
-        JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class, Long.class);
+        JavaType type = defaultTypeFactory().constructCollectionType(TypedListAsWrapper.class, Long.class);
         TypedListAsWrapper<Object> result = m.readValue(JSON, type);
         assertNotNull(result);
         assertEquals(2, result.size());

File: src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java
Patch:
@@ -216,7 +216,7 @@ public JavaType modifyType(JavaType type, Type jdkType, TypeBindings bindings, T
      */
 
     private final ObjectMapper MAPPER_WITH_MODIFIER = JsonMapper.builder()
-            .typeFactory(TypeFactory.defaultInstance().withModifier(new MyTypeModifier()))
+            .typeFactory(defaultTypeFactory().withModifier(new MyTypeModifier()))
             .build();
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/type/TypeFactoryWithRecursiveTypesTest.java
Patch:
@@ -6,14 +6,15 @@
 import org.junit.jupiter.api.Test;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import static com.fasterxml.jackson.databind.testutil.DatabindTestUtil.newJsonMapper;
 
 
 // https://github.com/FasterXML/jackson-databind/issues/1647
-public class TypeFactoryWithRecursiveTypesTest
+public class TypeFactoryWithRecursiveTypesTest extends DatabindTestUtil
 {
     static interface IFace<T> { }
 
@@ -29,7 +30,7 @@ static class Sub extends Base {
 
     @Test
     public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {
-        TypeFactory tf = TypeFactory.defaultInstance();
+        TypeFactory tf = defaultTypeFactory();
         tf.constructType(Base.class);
         tf.constructType(Sub.class);
         Sub sub = new Sub();

File: src/test/java/com/fasterxml/jackson/databind/util/BeanUtilTest.java
Patch:
@@ -18,7 +18,7 @@ public class BeanUtilTest extends DatabindTestUtil
     @Test
     public void testGetDefaultValue()
     {
-        TypeFactory tf = TypeFactory.defaultInstance();
+        TypeFactory tf = defaultTypeFactory();
         // For collection/array/Map types, should give `NOT_EMPTY`:
         assertEquals(JsonInclude.Include.NON_EMPTY,
                 BeanUtil.getDefaultValue(tf.constructType(Map.class)));

File: src/test/java/com/fasterxml/jackson/databind/util/ClassUtilTest.java
Patch:
@@ -243,7 +243,7 @@ public void testDescs()
         final String stringExp = "`java.lang.String`";
         assertEquals(stringExp, ClassUtil.getClassDescription("foo"));
         assertEquals(stringExp, ClassUtil.getClassDescription(String.class));
-        final JavaType stringType = TypeFactory.defaultInstance().constructType(String.class);
+        final JavaType stringType = defaultTypeFactory().constructType(String.class);
         assertEquals(stringExp, ClassUtil.getTypeDescription(stringType));
         final JavaType mapType = TypeFactory.defaultInstance().constructType(
                 new TypeReference<Map<String, Integer>>() { });
@@ -254,7 +254,7 @@ public void testDescs()
     @Test
     public void testSubtypes()
     {
-        final JavaType stringType = TypeFactory.defaultInstance().constructType(String.class);
+        final JavaType stringType = defaultTypeFactory().constructType(String.class);
         List<JavaType> supers = ClassUtil.findSuperTypes(stringType, Object.class, false);
         assertEquals(Collections.emptyList(), supers);
 

File: src/test-jdk17/java/com/fasterxml/jackson/databind/records/RecordCreatorWithJsonValue4724Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.tofix;
+package com.fasterxml.jackson.databind.records;
 
 import org.junit.jupiter.api.Test;
 
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
 
 // [databind#4724] Deserialization behavior change with Java Records, JsonCreator and JsonValue between 2.17.2 => 2.18.0
-public class RecordJsonCreatorAndJsonValue4724Test
+public class RecordCreatorWithJsonValue4724Test
     extends DatabindTestUtil
 {
     public record Something(String value) {

File: src/test/java/com/fasterxml/jackson/databind/struct/UnwrappedCaching2461Test.java
Patch:
@@ -1,12 +1,11 @@
-package com.fasterxml.jackson.databind.tofix;
+package com.fasterxml.jackson.databind.struct;
 
 import org.junit.jupiter.api.Test;
 
 import com.fasterxml.jackson.annotation.JsonUnwrapped;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.testutil.DatabindTestUtil;
-import com.fasterxml.jackson.databind.testutil.failure.JacksonTestFailureExpected;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 

File: src/test/java/com/fasterxml/jackson/databind/tofix/UnwrappedCaching2461Test.java
Patch:
@@ -39,7 +39,6 @@ static class OuterContainer {
     }
 
     // [databind#2461]
-    @JacksonTestFailureExpected
     @Test
     void unwrappedCaching() throws Exception {
         final InnerContainer inner = new InnerContainer(new Base("12345"));

File: src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java
Patch:
@@ -129,8 +129,8 @@ private static String _quoteTruncated(String str) {
         return String.format("'%s...'[truncated %d charaters]",
                 str.substring(0, 1000), str.length() - 1000);
     }
-    
-    final static class MyTokenizer extends StringTokenizer
+
+    final protected static class MyTokenizer extends StringTokenizer
     {
         protected final String _input;
 

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -1405,13 +1405,13 @@ public JsonCreator.Mode findCreatorAnnotation(MapperConfig<?> config, Annotated
      * canonical constructor; but it is also true for various "Data" classes by frameworks
      * like Lombok and JVM languages like Kotlin and Scala (case classes).
      * If introspector can determine that one of given {@link PotentialCreator}s should
-     * be considered canonical, it should return it; if not, should return {@code null}.
+     * be considered Primary, it should return it; if not, should return {@code null}.
      *<p>
      * NOTE: when returning chosen Creator, it may be necessary to mark its "mode"
      * with {@link PotentialCreator#overrideMode} (especially for "delegating" creators).
      *<p>
-     * NOTE: method is NOT called for Java Record types; selection of canonical constructor
-     * as the Primary creator is handled by {@link POJOPropertiesCollector}
+     * NOTE: method is NOT called for Java Record types; selection of the canonical constructor
+     * as the Primary creator is handled directly by {@link POJOPropertiesCollector}
      *
      * @param config Configuration settings in effect (for deserialization)
      * @param valueClass Class being instantiated and defines Creators passed

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -734,13 +734,13 @@ protected void _addCreators(Map<String, POJOPropertyBuilder> props)
     private boolean _isDelegatingConstructor(PotentialCreator ctor)
     {
         // First things first: could be 
-        switch (ctor.creatorMode()) {
+        switch (ctor.creatorModeOrDefault()) {
         case DELEGATING:
             return true;
         case DISABLED:
         case PROPERTIES:
             return false;
-        default:
+        default: // case DEFAULT:
         }
 
         // Only consider single-arg case, for now
@@ -797,7 +797,7 @@ private void _removeNonFactoryStaticMethods(List<PotentialCreator> ctors,
         while (it.hasNext()) {
             // explicit mode? Retain (for now)
             PotentialCreator ctor = it.next();
-            if (ctor.creatorMode() != null) {
+            if (ctor.creatorMode() != JsonCreator.Mode.DEFAULT) {
                 continue;
             }
             // Do not trim canonical either

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TwoCreators4602Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java
Patch:
@@ -19,8 +19,6 @@
 
 public class SingleValueAsArrayTest extends DatabindTestUtil
 {
-    private static final String JSON = "[{\"message\":\"messageHere\"}]";
-
     static class Bean1421A
     {
         List<Messages> bs = Collections.emptyList();
@@ -77,8 +75,10 @@ public Bean1421B(T value) {
     @Test
     public void testSuccessfulDeserializationOfObjectWithChainedArrayCreators() throws IOException
     {
-        Bean1421A result = MAPPER.readValue(JSON, Bean1421A.class);
+        Bean1421A result = MAPPER.readValue("[{\"message\":\"messageHere\"}]", Bean1421A.class);
         assertNotNull(result);
+        assertNotNull(result.bs);
+        assertEquals(1, result.bs.size());
     }
 
     @Test

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java
Patch:
@@ -394,7 +394,7 @@ public boolean couldDeserialize() {
         return (_ctorParameters != null)
             || (_setters != null)
             || ((_fields != null)
-                // [databind#736] Since 2.16 : Fix `REQUIRE_SETTERS_FOR_GETTERS` taking no effect
+                // [databind#736] Since 2.17: Fix `REQUIRE_SETTERS_FOR_GETTERS` taking no effect
                 && (_anyVisible(_fields)));
     }
 

File: src/test-jdk17/java/com/fasterxml/jackson/databind/records/RecordPrivate4175Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.jdk17;
+package com.fasterxml.jackson.databind.records;
 
 import java.util.Collections;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -79,14 +79,14 @@ public class EnumDeserializer
      */
     public EnumDeserializer(EnumResolver byNameResolver, Boolean caseInsensitive)
     {
-        this(byNameResolver, caseInsensitive, null);
+        this(byNameResolver, Boolean.TRUE.equals(caseInsensitive), null);
     }
 
     /**
      * @since 2.15
      */
     public EnumDeserializer(EnumResolver byNameResolver, boolean caseInsensitive,
-                            EnumResolver byEnumNamingResolver)
+            EnumResolver byEnumNamingResolver)
     {
         super(byNameResolver.getEnumClass());
         _lookupByName = byNameResolver.constructLookup();
@@ -107,7 +107,7 @@ protected EnumDeserializer(EnumDeserializer base, Boolean caseInsensitive,
         _lookupByName = base._lookupByName;
         _enumsByIndex = base._enumsByIndex;
         _enumDefaultValue = base._enumDefaultValue;
-        _caseInsensitive = caseInsensitive;
+        _caseInsensitive = Boolean.TRUE.equals(caseInsensitive);
         _isFromIntValue = base._isFromIntValue;
         _useDefaultValueForUnknownEnum = useDefaultValueForUnknownEnum;
         _useNullForUnknownEnum = useNullForUnknownEnum;

File: src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest.java
Patch:
@@ -401,6 +401,7 @@ public void testCustomDefaultPrettyPrinter() throws Exception
     }
 
     // For [databind#703], [databind#978]
+    @SuppressWarnings("deprecation")
     @Test
     public void testNonSerializabilityOfObject()
     {
@@ -420,6 +421,7 @@ public void testNonSerializabilityOfObject()
     }
 
     // for [databind#756]
+    @SuppressWarnings("deprecation")
     @Test
     public void testEmptyBeanSerializability()
     {
@@ -432,6 +434,7 @@ public void testEmptyBeanSerializability()
     }
 
     // for [databind#2749]: just to check there's no NPE; method really not useful
+    @SuppressWarnings("deprecation")
     @Test
     public void testCanDeserialize()
     {

File: src/test/java/com/fasterxml/jackson/databind/ObjectWriterTest.java
Patch:
@@ -132,6 +132,7 @@ public void testPolymorphicWithTyping() throws Exception
         assertEquals(a2q("{'type':'B','b':-5}"), json);
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void testCanSerialize() throws Exception
     {

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -41,7 +41,7 @@ public final class DeserializerCache
     /**
      * We will also cache some dynamically constructed deserializers;
      * specifically, ones that are expensive to construct.
-     * This currently means bean, Enum and container deserializers.
+     * This currently means POJO, Enum and Container deserializers.
      */
     protected final LookupCache<JavaType, JsonDeserializer<Object>> _cachedDeserializers;
 

File: src/test/java/com/fasterxml/jackson/failing/SetterlessProperties501Test.java
Patch:
@@ -15,7 +15,7 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
-class TestSetterlessProperties501 extends DatabindTestUtil {
+class SetterlessProperties501Test extends DatabindTestUtil {
     static class Poly {
         public int id;
 

File: src/test/java/com/fasterxml/jackson/failing/UnwrappedWithUnknown650Test.java
Patch:
@@ -10,7 +10,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 
-class TestUnwrappedWithUnknown650 extends DatabindTestUtil {
+class UnwrappedWithUnknown650Test extends DatabindTestUtil {
     static class A {
         @JsonUnwrapped
         public B b;

File: src/test/java/com/fasterxml/jackson/failing/BuilderWithBackRef2686Test.java
Patch:
@@ -18,8 +18,6 @@
 //  setter/builder is on Builder class, but it is called after
 //  building completes, i.e. on wrong class.
 
-//  building completes, i.e. on wrong class.
-
 class BuilderWithBackRef2686Test extends DatabindTestUtil {
     // [databind#2686]
     public static class Container {

File: src/test/java/com/fasterxml/jackson/failing/BeanDeserializerModifier4356Test.java
Patch:
@@ -75,7 +75,9 @@ public String deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
         }
     }
 
-    private final ObjectMapper MAPPER = jsonMapperBuilder().addModule(getSimpleModuleWithDeserializerModifier()).build();
+    private final ObjectMapper MAPPER = jsonMapperBuilder()
+            .addModule(getSimpleModuleWithDeserializerModifier())
+            .build();
 
     // passes
     @Test

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorNullPrimitives2977Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import org.junit.jupiter.api.Test;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ConstructorDetector3241Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorWithReadOnlyParam4119Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import org.junit.jupiter.api.Test;
 

File: src/test/java/com/fasterxml/jackson/databind/ser/RawValueTest.java
Patch:
@@ -32,7 +32,7 @@ final static class ClassGetter<T>
     {
         protected final T _value;
 
-        protected ClassGetter(T value) { _value = value;}
+        protected ClassGetter(T v) { _value = v;}
 
         public T getNonRaw() { return _value; }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -797,7 +797,7 @@ protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,
                     "More than one argument (#%d and #%d) left as delegating for Creator %s: only one allowed",
                     ix, i, candidate);
         }
-        // Also, let's require that one Delegating argument does eixt
+        // Also, let's require that one Delegating argument does exist
         if (ix < 0) {
             ctxt.reportBadTypeDefinition(beanDesc,
                     "No argument left as delegating for Creator %s: exactly one required", candidate);

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -430,7 +430,9 @@ protected void collectAll()
         // 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static
         //    inner classes, see [databind#1502]
         // 13-May-2023, PJ: Need to avoid adding creators for Records when serializing [databind#3925]
-        if (!_classDef.isNonStaticInnerClass() && !(_forSerialization && isRecord)) {
+        // 18-May-2024, tatu: Serialization side does, however, require access to renaming
+        //    etc (see f.ex [databind#4452]) so let's not skip
+        if (!_classDef.isNonStaticInnerClass()) { // && !(_forSerialization && isRecord)) {
             _addCreators(props);
         }
 

File: src/test-jdk17/java/com/fasterxml/jackson/databind/records/RecordDeserialization3906Test.java
Patch:
@@ -95,6 +95,7 @@ public void testEmptyJsonToRecordCreatorsVisibile() throws JsonProcessingExcepti
         assertEquals(new Record3906(null, 0), recordDeser);
     }
 
+    @SuppressWarnings("serial")
     @Test
     public void testEmptyJsonToRecordUsingModule() throws JsonProcessingException {
         ObjectMapper mapper = jsonMapperBuilder().addModule(new SimpleModule() {
@@ -133,6 +134,7 @@ public void testEmptyJsonToRecordJsonCreator() throws JsonProcessingException {
         assertEquals(new Record3906Creator(null, 0), recordDeser);
     }
 
+    @SuppressWarnings("serial")
     @Test
     public void testEmptyJsonToRecordUsingModuleOther() throws JsonProcessingException {
         ObjectMapper mapper = jsonMapperBuilder().addModule(

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -517,8 +517,7 @@ public byte[] binaryValue() throws IOException {
      * literals 'true' and 'false').
      * For other types, always returns false.
      *
-     * @return Textual value this node contains, iff it is a textual
-     *   json node (comes from JSON String value entry)
+     * @return Boolean value this node contains, if any; otherwise always <code>false</code>
      */
     public boolean booleanValue() { return false; }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -321,7 +321,7 @@ protected Map<AnnotatedWithParams,BeanPropertyDefinition[]> _findCreatorsFromPro
 
                 if (defs == null) {
                     if (result.isEmpty()) { // since emptyMap is immutable need to create a 'real' one
-                        result = new LinkedHashMap<AnnotatedWithParams,BeanPropertyDefinition[]>();
+                        result = new LinkedHashMap<>();
                     }
                     defs = new BeanPropertyDefinition[owner.getParameterCount()];
                     result.put(owner, defs);

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -179,7 +179,7 @@ public void addPropertyCreator(AnnotatedWithParams creator,
         if (verifyNonDup(creator, C_PROPS, explicit)) {
             // Better ensure we have no duplicate names either...
             if (properties.length > 1) {
-                HashMap<String, Integer> names = new HashMap<String, Integer>();
+                HashMap<String, Integer> names = new HashMap<>();
                 for (int i = 0, len = properties.length; i < len; ++i) {
                     String name = properties[i].getName();
                     // Need to consider Injectables, which may not have

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -251,7 +251,7 @@ protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationCo
         final ConstructorDetector ctorDetector;
 
         {
-            final DeserializationConfig config = ctxt.getConfig();
+            final MapperConfig<?> config = ctxt.getConfig();
             // need to construct suitable visibility checker:
             final VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker(beanDesc.getBeanClass(),
                     beanDesc.getClassInfo());

File: src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java
Patch:
@@ -914,6 +914,7 @@ public final JsonNodeFactory getNodeFactory() {
     /**
      * @since 2.12
      */
+    @Override // since 2.18
     public ConstructorDetector getConstructorDetector() {
         if (_ctorDetector == null) {
             return ConstructorDetector.DEFAULT;

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2305,6 +2305,8 @@ public ObjectMapper setNodeFactory(JsonNodeFactory f) {
      */
     public ObjectMapper setConstructorDetector(ConstructorDetector cd) {
         _deserializationConfig = _deserializationConfig.with(cd);
+        // since 2.18
+        _serializationConfig = _serializationConfig.with(cd);
         return this;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -941,7 +941,7 @@ protected void _addExplicitAnyCreator(DeserializationContext ctxt,
 
         case REQUIRE_MODE:
             ctxt.reportBadTypeDefinition(beanDesc,
-"Single-argument constructor (%s) is annotated but no 'mode' defined; `CreatorDetector`"
+"Single-argument constructor (%s) is annotated but no 'mode' defined; `ConstructorDetector`"
 + "configured with `SingleArgConstructor.REQUIRE_MODE`",
 candidate.creator());
             return;

File: src/test/java/com/fasterxml/jackson/databind/type/JavaTypeTest.java
Patch:
@@ -324,8 +324,6 @@ public void testIterationTypesDirect() throws Exception
                 Iterator.class, Object.class);
         _verifyIteratorType(tf.constructType(Stream.class),
                 Stream.class, Object.class);
-        _verifyIteratorType(tf.constructType(Iterable.class),
-                Iterable.class, Object.class);
 
         // Then generic but direct
         JavaType t = _verifyIteratorType(tf.constructType(new TypeReference<Iterator<String>>() { }),

File: src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java
Patch:
@@ -60,7 +60,6 @@ public JsonNodeType getNodeType()
 
     @Override public String asText() { return ""; }
 
-    @Deprecated // since 2.17
     @Override public String asText(String defaultValue) { return defaultValue; }
 
     // // Note: not a numeric node, hence default 'asXxx()' are fine:

File: src/main/java/com/fasterxml/jackson/databind/node/NullNode.java
Patch:
@@ -41,7 +41,6 @@ public JsonNodeType getNodeType() {
     @Override public JsonToken asToken() { return JsonToken.VALUE_NULL; }
 
     @Override
-    @Deprecated
     public String asText(String defaultValue) { return defaultValue; }
 
     @Override public String asText() { return "null"; }

File: src/main/java/com/fasterxml/jackson/databind/node/POJONode.java
Patch:
@@ -58,7 +58,6 @@ public byte[] binaryValue() throws IOException
     public String asText() { return (_value == null) ? "null" : _value.toString(); }
 
     @Override
-    @Deprecated
     public String asText(String defaultValue) {
         return (_value == null) ? defaultValue : _value.toString();
     }

File: src/main/java/com/fasterxml/jackson/databind/node/TextNode.java
Patch:
@@ -102,7 +102,6 @@ public String asText() {
     }
 
     @Override
-    @Deprecated // since 2.17
     public String asText(String defaultValue) {
         return (_value == null) ? defaultValue : _value;
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/CustomDeserializersTest.java
Patch:
@@ -355,7 +355,7 @@ public NamedPoint deserialize(JsonParser p, DeserializationContext ctxt)
                 throws IOException
         {
             JsonNode tree = ctxt.readTree(p);
-            String name = tree.path("name").asText();
+            String name = tree.path("name").asText(null);
             Point point = ctxt.readTreeAsValue(tree.get("point"), Point.class);
             return new NamedPoint(name, point);
         }

File: src/test/java/com/fasterxml/jackson/databind/node/MissingNodeTest.java
Patch:
@@ -14,6 +14,7 @@ public void testMissing()
         assertTrue(n.isMissingNode());
         assertEquals(JsonToken.NOT_AVAILABLE, n.asToken());
         assertEquals("", n.asText());
+        assertEquals("default", n.asText("default"));
         assertStandardEquals(n);
         // 10-Dec-2018, tatu: With 2.10, should serialize same as via ObjectMapper/ObjectWriter
         // 10-Dec-2019, tatu: Surprise! No, this is not how it worked in 2.9, nor does it make

File: src/test/java/com/fasterxml/jackson/databind/node/NullNodeTest.java
Patch:
@@ -48,6 +48,9 @@ public void testBasicsWithNullNode() throws Exception
         assertEquals(0L, n.longValue());
         assertEquals(BigDecimal.ZERO, n.decimalValue());
         assertEquals(BigInteger.ZERO, n.bigIntegerValue());
+        // may be odd but...
+        assertEquals("null", n.asText());
+        assertEquals("fallback", n.asText("fallback"));
 
         assertEquals(0, n.size());
         assertTrue(n.isEmpty());

File: src/test/java/com/fasterxml/jackson/databind/node/NumberNodesTest.java
Patch:
@@ -82,7 +82,7 @@ public void testInt()
         assertEquals(BigInteger.ONE, n.bigIntegerValue());
         assertEquals("1", n.asText());
         // 2.4
-        assertEquals("1", n.asText());
+        assertEquals("1", n.asText("foo"));
 
         assertNodeNumbers(n, 1, 1.0);
 

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -1637,7 +1637,9 @@ protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, Typ
         //    detected, related to difficulties in propagating type upwards (Iterable, for
         //    example, is a weak, tag-on type). They may be detectable in future.
         // 23-May-2023, tatu: As of 2.16 we do, however, recognized certain `IterationType`s.
-        if (rawType == Iterator.class || rawType == Stream.class) {
+        if (rawType == Iterator.class || rawType == Stream.class
+                // 18-Apr-2024, tatu: [databind#4443] allow exact `Iterable`
+                || rawType == Iterable.class) {
             return _iterationType(rawType, bindings, superClass, superInterfaces);
         }
         if (BaseStream.class.isAssignableFrom(rawType)) {

File: src/test/java/com/fasterxml/jackson/databind/type/JavaTypeTest.java
Patch:
@@ -324,6 +324,8 @@ public void testIterationTypesDirect() throws Exception
                 Iterator.class, Object.class);
         _verifyIteratorType(tf.constructType(Stream.class),
                 Stream.class, Object.class);
+        _verifyIteratorType(tf.constructType(Iterable.class),
+                Iterable.class, Object.class);
 
         // Then generic but direct
         JavaType t = _verifyIteratorType(tf.constructType(new TypeReference<Iterator<String>>() { }),

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -182,6 +182,8 @@ protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             }
             if (valueToSuppress == null) {
                 suppressNulls = true;
+                // [databind#4464] NON_DEFAULT does not work with NON_EMPTY for custom serializer
+                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             } else {
                 if (valueToSuppress.getClass().isArray()) {
                     valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
Patch:
@@ -256,7 +256,7 @@ protected Object _deserializeFromEmptyString(DeserializationContext ctxt) throws
         if (act == CoercionAction.AsEmpty) {
             return getEmptyValue(ctxt);
         }
-        // 09-Jun-2020, tatu: semantics for `TryConvert` are bit interesting due to
+        // 09-Jun-2020, tatu: semantics for `TryConvert` are a bit interesting due to
         //    historical reasons
         return _deserializeFromEmptyStringDefault(ctxt);
     }

File: src/test/java/com/fasterxml/jackson/databind/testutil/DatabindTestUtil.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Class containing test utility methods.
- * The methods are migrated from {@link BaseMapTest} and {@link BaseTest},
+ * The methods are migrated from {@code BaseMapTest} and {@code BaseTest},
  * as part of JUnit 5 migration.
  *
  * @since 2.17

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -657,9 +657,7 @@ protected final Float _parseFloat(JsonParser p, DeserializationContext ctxt)
                 p.streamReadConstraints().validateFPLength(text.length());
                 try {
                     return NumberInput.parseFloat(text, p.isEnabled(StreamReadFeature.USE_FAST_DOUBLE_PARSER));
-                } catch (IllegalArgumentException iae) {
-                    if (true) throw new Error();
-                }
+                } catch (IllegalArgumentException iae) { }
             }
             return (Float) ctxt.handleWeirdStringValue(_valueClass, text,
                     "not a valid `Float` value");

File: src/test/java/com/fasterxml/jackson/databind/deser/enums/EnumDefaultRead4403Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser.enums;
 
 import org.junit.jupiter.api.Test;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/CustomDeserializersTest.java
Patch:
@@ -355,7 +355,7 @@ public NamedPoint deserialize(JsonParser p, DeserializationContext ctxt)
                 throws IOException
         {
             JsonNode tree = ctxt.readTree(p);
-            String name = tree.path("name").asText(null);
+            String name = tree.path("name").asText();
             Point point = ctxt.readTreeAsValue(tree.get("point"), Point.class);
             return new NamedPoint(name, point);
         }

File: src/test/java/com/fasterxml/jackson/databind/node/NumberNodesTest.java
Patch:
@@ -82,7 +82,7 @@ public void testInt()
         assertEquals(BigInteger.ONE, n.bigIntegerValue());
         assertEquals("1", n.asText());
         // 2.4
-        assertEquals("1", n.asText("foo"));
+        assertEquals("1", n.asText());
 
         assertNodeNumbers(n, 1, 1.0);
 

File: src/test/java/com/fasterxml/jackson/databind/deser/enums/EnumDefaultReadTest.java
Patch:
@@ -90,7 +90,8 @@ enum MixinOverloadedDefault {
     /* Test methods
     /**********************************************************
      */
-    private final ObjectMapper MAPPER = new ObjectMapper();
+
+    private final ObjectMapper MAPPER = newJsonMapper();
 
     @Test
     public void testWithoutCustomFeatures() throws Exception

File: src/test/java/com/fasterxml/jackson/databind/type/TypeFactoryTest.java
Patch:
@@ -266,7 +266,7 @@ public void testCanonicalNames()
         // And then EnumMap (actual use case for us)
         t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class);
         can = t.toCanonical();
-        assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>",
+        assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TypeFactoryTest$EnumForCanonical,java.lang.String>",
                 can);
         assertEquals(t, tf.constructFromCanonical(can));
 

File: src/test/java/com/fasterxml/jackson/databind/exc/BasicExceptionTest.java
Patch:
@@ -132,6 +132,7 @@ public void testUnrecognizedProperty() throws Exception
 
     // [databind#2128]: ensure Location added once and only once
     // [databind#2482]: ensure Location is the original one
+    // [core#1173]: ... and needs to be correct column, too
     @Test
     public void testLocationAddition() throws Exception
     {
@@ -146,10 +147,10 @@ public void testLocationAddition() throws Exception
                 fail("Should only get one 'at [' marker, got "+(str.length-1)+", source: "+msg);
             }
             JsonLocation loc = e.getLocation();
-//          String expectedLocation = "line: 4, column: 4";
+//          String expectedLocation = "line: 4, column: 3";
             assertEquals(4, loc.getLineNr());
             // 12-Feb-2024, tatu: varies depending on whether [core#1173] is fixed or not...
-            assertEquals(4, loc.getColumnNr());
+            assertEquals(3, loc.getColumnNr());
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/exc/BasicExceptionTest.java
Patch:
@@ -137,7 +137,7 @@ public void testLocationAddition() throws Exception
             JsonLocation loc = e.getLocation();
 //          String expectedLocation = "line: 4, column: 4";
             assertEquals(4, loc.getLineNr());
-            assertEquals(3, loc.getColumnNr());
+            assertEquals(4, loc.getColumnNr());
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/exc/ExceptionWithAnySetter4316Test.java
Patch:
@@ -22,6 +22,7 @@ static class Problem extends Exception {
 
     @JsonIgnoreProperties({ "cause", "stackTrace", "response", "message", "localizedMessage", "suppressed" })
     static class ProblemWithIgnorals extends Exception {
+        private static final long serialVersionUID = 1L;
         @JsonAnySetter
         @JsonAnyGetter
         Map<String, Object> additionalProperties = new HashMap<>();

File: src/test/java/com/fasterxml/jackson/databind/exc/BasicExceptionTest.java
Patch:
@@ -148,7 +148,8 @@ public void testLocationAddition() throws Exception
             JsonLocation loc = e.getLocation();
 //          String expectedLocation = "line: 4, column: 4";
             assertEquals(4, loc.getLineNr());
-            assertEquals(3, loc.getColumnNr());
+            // 12-Feb-2024, tatu: varies depending on whether [core#1173] is fixed or not...
+            assertEquals(4, loc.getColumnNr());
         }
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/introspect/MethodGenericTypeResolver.java
Patch:
@@ -92,7 +92,7 @@ static TypeBindings bindMethodTypeParameters(
                     return null;
                 }
 
-                JavaType bindTarget = requestedType.getBindings().getBoundType(i);
+                JavaType bindTarget = requestedType.getBindings().getBoundTypeOrNull(i);
                 if (bindTarget == null) {
                     return null;
                 }

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -714,7 +714,7 @@ public JavaType findFirstTypeParameter(JavaType type, Class<?> expType)
     {
         JavaType match = type.findSuperType(expType);
         if (match != null) {
-            JavaType t = match.getBindings().getBoundType(0);
+            JavaType t = match.getBindings().getBoundTypeOrNull(0);
             if (t != null) {
                 return t;
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java
Patch:
@@ -216,6 +216,9 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                 ser = provider.handlePrimaryContextualization(ser, property);
             }
         }
+        // 23-Jan-2024, tatu: May have a content converter:
+        ser = findContextualConvertingSerializer(provider, property, ser);
+
         // First, resolve wrt property, resolved serializers
         ReferenceTypeSerializer<?> refSer;
         if ((_property == property)

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -4035,8 +4035,8 @@ public String writeValueAsString(Object value)
         throws JsonProcessingException
     {
         // alas, we have to pull the recycler directly here...
-        SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());
-        try {
+        try (SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());
+){
             _writeValueAndClose(createGenerator(sw), value);
             return sw.getAndClear();
         } catch (JsonProcessingException e) {

File: src/test/java/com/fasterxml/jackson/databind/deser/NullsSkip4309Test.java
Patch:
@@ -1,13 +1,13 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser;
 
 import java.util.List;
 
+import org.junit.jupiter.api.Test;
+
 import com.fasterxml.jackson.annotation.JsonSetter;
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.annotation.Nulls;
-import org.junit.jupiter.api.Test;
-
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.json.JsonMapper;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SimpleNameIdResolver.java
Patch:
@@ -21,7 +21,10 @@
  */
 public class SimpleNameIdResolver
     extends TypeIdResolverBase
+    implements java.io.Serializable // @since 2.16
 {
+    private static final long serialVersionUID = 1L;
+
     protected final MapperConfig<?> _config;
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
Patch:
@@ -17,7 +17,10 @@
  */
 public class ClassNameIdResolver
     extends TypeIdResolverBase
+    implements java.io.Serializable // @since 2.17
 {
+    private static final long serialVersionUID = 1L;
+
     private final static String JAVA_UTIL_PKG = "java.util.";
 
     protected final PolymorphicTypeValidator _subTypeValidator;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java
Patch:
@@ -12,7 +12,10 @@
 import com.fasterxml.jackson.databind.jsontype.NamedType;
 
 public class TypeNameIdResolver extends TypeIdResolverBase
+    implements java.io.Serializable // @since 2.17
 {
+    private static final long serialVersionUID = 1L;
+
     protected final MapperConfig<?> _config;
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/testutil/DatabindTestUtil.java
Patch:
@@ -4,9 +4,6 @@
 import java.nio.charset.StandardCharsets;
 import java.util.*;
 
-import com.fasterxml.jackson.annotation.JsonCreator;
-
-import com.fasterxml.jackson.core.FormatSchema;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.json.JsonMapper;
 import com.fasterxml.jackson.databind.type.TypeFactory;

File: src/test/java/com/fasterxml/jackson/databind/testutil/UnlimitedLookupCache.java
Patch:
@@ -1,7 +1,9 @@
-package com.fasterxml.jackson.databind.util;
+package com.fasterxml.jackson.databind.testutil;
 
 import java.util.concurrent.ConcurrentHashMap;
 
+import com.fasterxml.jackson.databind.util.LookupCache;
+
 /**
  * A LookupCache implementation that has no synchronization (like LRUMap does)
  * but that has the downside of not limiting the size of the cache.

File: src/test/java/com/fasterxml/jackson/databind/type/ContainerTypesTest.java
Patch:
@@ -6,9 +6,9 @@
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.testutil.UnlimitedLookupCache;
 import com.fasterxml.jackson.databind.util.LRUMap;
 import com.fasterxml.jackson.databind.util.LookupCache;
-import com.fasterxml.jackson.databind.util.UnlimitedLookupCache;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.fail;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -672,7 +672,7 @@ protected final Object deserializeWithView(JsonParser p, DeserializationContext
                 SettableBeanProperty prop = _beanProperties.find(propName);
                 if (prop != null) {
                     if (!prop.visibleInView(activeView)) {
-                        // [databind#4108]: fields in other views to be considered as unknown properties
+                        // [databind#437]: fields in other views to be considered as unknown properties
                         if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNEXPECTED_VIEW_PROPERTIES)){
                             ctxt.reportInputMismatch(handledType(),
                                 String.format("Input mismatch while deserializing %s. Property '%s' is not part of current active view [%s]",

File: src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
Patch:
@@ -555,7 +555,7 @@ protected final Object deserializeWithView(JsonParser p, DeserializationContext
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 if (!prop.visibleInView(activeView)) {
-                    // [databind#4108]: fields in other views to be considered as unknown properties
+                    // [databind#437]: fields in other views to be considered as unknown properties
                     if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNEXPECTED_VIEW_PROPERTIES)){
                         ctxt.reportInputMismatch(handledType(),
                             String.format("Input mismatch while deserializing %s. Property '%s' is not part of current active view [%s]",

File: src/test/java/com/fasterxml/jackson/databind/views/MultipleViewsDeser437Test.java
Patch:
@@ -14,15 +14,15 @@
 
 import static com.fasterxml.jackson.databind.testutil.DatabindTestUtil.*;
 
-public class MultipleViewsDeser4108Test {
+public class MultipleViewsDeser437Test {
 
     static class View1 {
     }
 
     static class View2 {
     }
 
-    static class Bean4108 {
+    static class Bean437 {
         public String nonViewField;
         @JsonView(View1.class)
         public String view1Field;
@@ -89,7 +89,7 @@ public void testDeserWithMultipleViews() throws Exception
             "'view1Field':'view1FieldValue'," +
             "'view2Field':'view2FieldValue'}");
 
-        ObjectReader reader = ENABLED_MAPPER.readerWithView(View1.class).forType(Bean4108.class);
+        ObjectReader reader = ENABLED_MAPPER.readerWithView(View1.class).forType(Bean437.class);
 
         _testMismatchException(reader, json);
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EmptyArrayBlockingQueueDeserTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.fasterxml.jackson.databind.*;
 
-public class TestEmptyArrayBlockingQueueDeser extends BaseMapTest
+public class EmptyArrayBlockingQueueDeserTest extends BaseMapTest
 {
     static class RemoteEntity{
         private Collection<Double> values = new ArrayBlockingQueue<>(20);

File: src/test/java/com/fasterxml/jackson/databind/ser/RequireSetterForGetter736Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.ser;
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
 import com.fasterxml.jackson.annotation.PropertyAccessor;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
Patch:
@@ -260,7 +260,7 @@ protected long _parseLong(String key) throws IllegalArgumentException {
     }
 
     protected double _parseDouble(String key) throws IllegalArgumentException {
-        return NumberInput.parseDouble(key);
+        return NumberInput.parseDouble(key, false);
     }
 
     // @since 2.9

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
Patch:
@@ -395,7 +395,7 @@ protected Object _deserializeFromEmptyStringDefault(DeserializationContext ctxt)
         // @since 2.13.1
         @Override
         protected boolean _shouldTrim() {
-            // 04-Dec-2021, tatu: For [databund#3290]
+            // 04-Dec-2021, tatu: For [databind#3290]
             return (_kind != STD_PATTERN);
         }
 

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -1162,7 +1162,7 @@ public void copyCurrentStructure(JsonParser p) throws IOException
             t = p.nextToken();
             // fall-through to copy the associated value
         } else if (t == null) {
-            // 13-Dec-2024, tatu: For some unexpected EOF cases we may end up here, so:
+            // 13-Dec-2023, tatu: For some unexpected EOF cases we may end up here, so:
             throw new JsonEOFException(p, null, "Unexpected end-of-input");
         }
 
@@ -1919,7 +1919,7 @@ private Number getNumberValue(final boolean preferBigNumbers) throws IOException
                 String str = (String) value;
                 final int len = str.length();
                 if (_currToken == JsonToken.VALUE_NUMBER_INT) {
-                    // 08-Dec-2024, tatu: Note -- deferred numbers' validity (wrt input token)
+                    // 08-Dec-2023, tatu: Note -- deferred numbers' validity (wrt input token)
                     //    has been verified by underlying `JsonParser`: no need to check again
                     if (preferBigNumbers
                             // 01-Feb-2023, tatu: Not really accurate but we'll err on side

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.base.ParserMinimalBase;
+import com.fasterxml.jackson.core.io.JsonEOFException;
 import com.fasterxml.jackson.core.io.NumberInput;
 import com.fasterxml.jackson.core.json.JsonWriteContext;
 import com.fasterxml.jackson.core.util.ByteArrayBuilder;
@@ -1161,7 +1162,8 @@ public void copyCurrentStructure(JsonParser p) throws IOException
             t = p.nextToken();
             // fall-through to copy the associated value
         } else if (t == null) {
-            throw new IllegalStateException("No token available from argument `JsonParser`");
+            // 13-Dec-2024, tatu: For some unexpected EOF cases we may end up here, so:
+            throw new JsonEOFException(p, null, "Unexpected end-of-input");
         }
 
         // We'll do minor handling here to separate structured, scalar values,

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -221,7 +221,9 @@ public enum DefaultTyping {
          * separately specified.
          *
          * @since 2.10
+         * @deprecated Since 2.17 and removed from 3.0 --see {@link #NON_FINAL_AND_ENUMS} for Enum-related usage.
          */
+        @Deprecated
         EVERYTHING
     }
 

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -1189,7 +1189,7 @@ public Object handleWeirdKey(Class<?> keyClass, String keyValue,
                     return key;
                 }
                 throw weirdStringException(keyValue, keyClass, String.format(
-                        "DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s",
+                        "DeserializationProblemHandler.handleWeirdKey() for type %s returned value of type %s",
                         ClassUtil.getClassDescription(keyClass),
                         ClassUtil.getClassDescription(key)
                 ));

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java
Patch:
@@ -39,8 +39,8 @@ public final class PropertyBasedCreator
     protected final HashMap<String, SettableBeanProperty> _propertyLookup;
 
     /**
-     * Array that contains properties that expect value to inject, if any;
-     * null if no injectable values are expected.
+     * Array of all Creator properties (based on arguments to constructor
+     * or factory method).
      */
     protected final SettableBeanProperty[] _allProperties;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/inject/TestInjectables.java
Patch:
@@ -53,6 +53,7 @@ static class TransientBean {
         public int value;
     }
 
+    // [databind#471]
     static class Bean471 {
 
         protected final Object constructorInjected;

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsForContent4200Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser.filter;
 
 import java.util.Map;
 

File: src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java
Patch:
@@ -398,7 +398,7 @@ public void testValueToTree() throws Exception
 
         // Act & Assert
         String expected = "{\"event\":{\"id\":1,\"name\":\"foo\"}}";
-        assertEquals(expected, wrapRootMapper.writeValueAsString(value));
-        assertEquals(expected, wrapRootMapper.valueToTree(value).toString());
+        assertEquals(wrapRootMapper.readValue(expected, Map.class), wrapRootMapper.readValue(wrapRootMapper.writeValueAsString(value), Map.class));
+        assertEquals(wrapRootMapper.readValue(expected, Map.class), wrapRootMapper.readValue(wrapRootMapper.valueToTree(value).toString(), Map.class));
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1395,7 +1395,8 @@ public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext c
             if (contentDeser == null) { // not defined by annotation
                 // One special type: EnumSet:
                 if (EnumSet.class.isAssignableFrom(collectionClass)) {
-                    deser = new EnumSetDeserializer(contentType, null);
+                    deser = new EnumSetDeserializer(contentType, null,
+                            contentTypeDeser);
                 }
             }
         }

File: src/test/java/com/fasterxml/jackson/databind/cfg/CacheProviderTest.java
Patch:
@@ -121,6 +121,7 @@ public LookupCache<Object, JavaType> forTypeFactory() {
             return new LRUMap<>(16, 64);
         }
 
+        @Override
         public LookupCache<TypeKey, JsonSerializer<Object>> forSerializerCache(SerializationConfig config) {
             return _cache;
         }
@@ -154,6 +155,7 @@ public LookupCache<Object, JavaType> forTypeFactory() {
             return _cache;
         }
 
+        @Override
         public LookupCache<TypeKey, JsonSerializer<Object>> forSerializerCache(SerializationConfig config) {
             return new LRUMap<>(16, 64);
         }

File: src/test/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier4216Test.java
Patch:
@@ -48,6 +48,8 @@ private static SimpleModule getSimpleModuleWithCounter(AtomicInteger counter) {
         SimpleModule module = new SimpleModule();
         module.setDeserializerModifier(
             new BeanDeserializerModifier() {
+                private static final long serialVersionUID = 1L;
+
                 @Override
                 public JsonDeserializer<?> modifyArrayDeserializer(DeserializationConfig config,
                         ArrayType valueType, BeanDescription beanDesc, JsonDeserializer<?> deserializer)

File: src/test/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier1612Test.java
Patch:
@@ -24,6 +24,8 @@ public Bean1612(Integer a, Integer b, Double c) {
     }
 
     static class Modifier1612 extends BeanSerializerModifier {
+        private static final long serialVersionUID = 1L;
+
         @Override
         public BeanSerializerBuilder updateBuilder(SerializationConfig config, BeanDescription beanDesc,
                 BeanSerializerBuilder builder) {

File: src/test/java/com/fasterxml/jackson/databind/BaseTest.java
Patch:
@@ -441,7 +441,7 @@ public String quote(String str) {
         return q(str);
     }
 
-    protected static String a2q(String json) {
+    public static String a2q(String json) {
         return json.replace("'", "\"");
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -296,9 +296,10 @@ private final Object vanillaDeserialize(JsonParser p,
         throws IOException
     {
         final Object bean = _valueInstantiator.createUsingDefault(ctxt);
-        // [databind#631]: Assign current value, to be accessible by custom serializers
-        p.setCurrentValue(bean);
         if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {
+            // [databind#631]: Assign current value, to be accessible by custom serializers
+            // [databind#4184]: but only if we have at least one property
+            p.setCurrentValue(bean);
             String propName = p.currentName();
             do {
                 p.nextToken();

File: src/main/java/com/fasterxml/jackson/databind/exc/InvalidNullException.java
Patch:
@@ -30,7 +30,7 @@ public class InvalidNullException
     protected InvalidNullException(DeserializationContext ctxt, String msg,
             PropertyName pname)
     {
-        super(ctxt.getParser(), msg);
+        super(ctxt == null ? null : ctxt.getParser(), msg);
         _propertyName = pname;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java
Patch:
@@ -844,7 +844,8 @@ public final VisibilityChecker<?> getDefaultVisibilityChecker(Class<?> baseType,
             if (ClassUtil.isRecordType(baseType)) {
                 // But only if creator auto-detection enabled:
                 if (isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {
-                    vc = vc.withCreatorVisibility(Visibility.NON_PRIVATE);
+                    // [databind#4175] Changed Visibility from NON_PRIVATE to DEFAULT since 2.16
+                    vc = vc.withCreatorVisibility(Visibility.DEFAULT);
                 }
             }
         }

File: src/test-jdk17/java/com/fasterxml/jackson/databind/jdk17/RecordPrivate4175Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.failing;
+package com.fasterxml.jackson.databind.jdk17;
 
 import java.util.Collections;
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
Patch:
@@ -421,7 +421,7 @@ public String toString() {
 
     @Override
     public int hashCode() {
-        return _class.getName().hashCode();
+        return _class.hashCode();
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java
Patch:
@@ -3,6 +3,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Member;
 import java.lang.reflect.Type;
+import java.util.Objects;
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.util.ClassUtil;
@@ -177,7 +178,8 @@ public String toString() {
 
     @Override
     public int hashCode() {
-        return _constructor.getName().hashCode();
+        // _constructor is nullable, so it is calculated with util
+        return Objects.hashCode(_constructor);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java
Patch:
@@ -129,7 +129,7 @@ public Object getValue(Object pojo) throws IllegalArgumentException
 
     @Override
     public int hashCode() {
-        return _field.getName().hashCode();
+        return _field.hashCode();
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java
Patch:
@@ -247,7 +247,7 @@ public String toString() {
 
     @Override
     public int hashCode() {
-        return _method.getName().hashCode();
+        return _method.hashCode();
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -44,7 +44,8 @@ public ArrayNode(JsonNodeFactory nf, int capacity) {
      */
     public ArrayNode(JsonNodeFactory nf, List<JsonNode> children) {
         super(nf);
-        _children = children;
+        _children = Objects.requireNonNull(children,
+                "Must not pass `null` for 'children' argument");
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -35,9 +35,10 @@ public ObjectNode(JsonNodeFactory nc) {
     /**
      * @since 2.4
      */
-    public ObjectNode(JsonNodeFactory nc, Map<String, JsonNode> kids) {
+    public ObjectNode(JsonNodeFactory nc, Map<String, JsonNode> children) {
         super(nc);
-        _children = kids;
+        _children = Objects.requireNonNull(children,
+                "Must not pass `null` for 'children' argument");
     }
 
     @Override

File: src/test/java/com/fasterxml/jackson/databind/node/ObjectNodeTest.java
Patch:
@@ -318,7 +318,7 @@ public void testInvalidWithObject() throws Exception
             root.withObject("/prop");
             fail("Expected exception");
         } catch (UnsupportedOperationException e) {
-            verifyException(e, "Cannot replace context node (of type");
+            verifyException(e, "`withObject(String)` not implemented");
             verifyException(e, "ArrayNode");
         }
         // also: should fail of we already have non-object property

File: src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java
Patch:
@@ -183,7 +183,7 @@ protected boolean _withXxxMayReplace(JsonNode node, OverwriteMode overwriteMode)
     public ArrayNode withArray(JsonPointer ptr,
             OverwriteMode overwriteMode, boolean preferIndex)
     {
-        // Degenerate case of using with "empty" path; ok if ObjectNode
+        // Degenerate case of using with "empty" path; ok if ArrayNode
         if (ptr.matches()) {
             if (this instanceof ArrayNode) {
                 return (ArrayNode) this;

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2297,6 +2297,7 @@ public ObjectMapper setCacheProvider(CacheProvider cacheProvider) {
         _serializationConfig = _serializationConfig.with(cacheProvider);
         _deserializationContext = _deserializationContext.withCaches(cacheProvider);
         _serializerProvider = _serializerProvider.withCaches(cacheProvider);
+        _typeFactory = _typeFactory.withCaches(cacheProvider);
         return this;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.Array;
+import java.util.Arrays;
 import java.util.Objects;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
@@ -258,8 +259,7 @@ public Object[] deserialize(JsonParser p, DeserializationContext ctxt,
                 return intoValue;
             }
             final int offset = intoValue.length;
-            Object[] result = new Object[offset + arr.length];
-            System.arraycopy(intoValue, 0, result, 0, offset);
+            Object[] result = Arrays.copyOf(intoValue, offset + arr.length);
             System.arraycopy(arr, 0, result, offset, arr.length);
             return result;
         }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
Patch:
@@ -368,6 +368,8 @@ protected TypeIdResolver idResolver(MapperConfig<?> config,
             return ClassNameIdResolver.construct(baseType, config, subtypeValidator);
         case MINIMAL_CLASS:
             return MinimalClassNameIdResolver.construct(baseType, config, subtypeValidator);
+        case SIMPLE_NAME:
+            return SimpleNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);
         case NAME:
             return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);
         case NONE: // hmmh. should never get this far with 'none'

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -199,7 +199,7 @@ protected JsonSerializer<?> _createSerializer2(SerializerProvider prov,
         // (note: called method checks for module-provided serializers)
         if (type.isContainerType()) {
             if (!staticTyping) {
-                staticTyping = usesStaticTyping(config, beanDesc, null);
+                staticTyping = usesStaticTyping(config, beanDesc);
             }
             // 03-Aug-2012, tatu: As per [databind#40], may require POJO serializer...
             ser =  buildContainerSerializer(prov, type, beanDesc, staticTyping);
@@ -612,7 +612,7 @@ protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov,
             return null;
         }
         // null is for value type serializer, which we don't have access to from here (ditto for bean prop)
-        boolean staticTyping = usesStaticTyping(config, beanDesc, null);
+        boolean staticTyping = usesStaticTyping(config, beanDesc);
         PropertyBuilder pb = constructPropertyBuilder(config, beanDesc);
 
         ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size());

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java
Patch:
@@ -167,7 +167,7 @@ public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> c
         Class<?> rawBase = baseType.getRawClass();
 
         // Need to keep track of classes that have been handled already
-        Set<Class<?>> typesHandled = new HashSet<Class<?>>();
+        Set<Class<?>> typesHandled = new LinkedHashSet<Class<?>>();
         Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();
 
         // start with lowest-precedence, which is from type hierarchy
@@ -205,7 +205,7 @@ public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> c
             AnnotatedClass baseType)
     {
         final Class<?> rawBase = baseType.getRawType();
-        Set<Class<?>> typesHandled = new HashSet<Class<?>>();
+        Set<Class<?>> typesHandled = new LinkedHashSet<Class<?>>();
         Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();
 
         NamedType rootType = new NamedType(rawBase, null);

File: src/main/java/com/fasterxml/jackson/databind/ext/Java7Support.java
Patch:
@@ -22,6 +22,9 @@ public abstract class Java7Support
         try {
             Class<?> cls = Class.forName("com.fasterxml.jackson.databind.ext.Java7SupportImpl");
             impl = (Java7Support) ClassUtil.createInstance(cls, false);
+        } catch (IllegalAccessError e) {
+            // [databind#4078]: make some jdk modules (such as java.desktop) optional, again.
+            // no-op
         } catch (Throwable t) {
             // 09-Sep-2019, tatu: Used to log earlier, but with 2.10.0 let's not log
 //            java.util.logging.Logger.getLogger(Java7Support.class.getName())

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3521,7 +3521,7 @@ public <T extends JsonNode> T valueToTree(Object fromValue)
 
         // inlined 'writeValue' with minor changes:
         // first: disable wrapping when writing
-        // [databind#4047] ObjectMapper.valueToTree will ignore the configuration SerializationFeature.WRAP_ROOT_VALUE
+        // [databind#4047] Fixes `SerializationFeature.WRAP_ROOT_VALUE` being ignored
         final SerializationConfig config = getSerializationConfig();
         final DefaultSerializerProvider context = _serializerProvider(config);
 

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3521,7 +3521,8 @@ public <T extends JsonNode> T valueToTree(Object fromValue)
 
         // inlined 'writeValue' with minor changes:
         // first: disable wrapping when writing
-        final SerializationConfig config = getSerializationConfig().without(SerializationFeature.WRAP_ROOT_VALUE);
+        // [databind#4047] ObjectMapper.valueToTree will ignore the configuration SerializationFeature.WRAP_ROOT_VALUE
+        final SerializationConfig config = getSerializationConfig();
         final DefaultSerializerProvider context = _serializerProvider(config);
 
         // Then create TokenBuffer to use as JsonGenerator

File: src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordDeserialization3906Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.failing;
+package com.fasterxml.jackson.databind.records;
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -323,7 +323,7 @@ public Enum<?> findDefaultEnumValue(Class<Enum<?>> enumCls) {
      *
      * @param annotatedClass The Enum class to scan for the default value annotation.
      * @return null if none found or it's not possible to determine one.
-     * @since 2.17
+     * @since 2.16
      */
     @Override // since 2.16
     public Enum<?> findDefaultEnumValue(AnnotatedClass annotatedClass, Enum<?>[] enumValues) {

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1665,7 +1665,7 @@ public JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt
      */
 
     /**
-     * Factory method for constructing serializers of {@link Enum} types.
+     * Factory method for constructing deserializers of {@link Enum} types.
      */
     @Override
     public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,
@@ -2078,7 +2078,7 @@ public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfi
     }
 
     /**
-     * Helper method called to find one of default serializers for "well-known"
+     * Helper method called to find one of default deserializers for "well-known"
      * platform types: JDK-provided types, and small number of public Jackson
      * API types.
      *

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -41,7 +41,7 @@
  * details are delegated to {@link SerializerFactory} instance.
  *<p>
  * Object life-cycle is such that an initial instance ("blueprint") is created
- * and referenced by {@link ObjectMapper} and {@link ObjectWriter} intances;
+ * and referenced by {@link ObjectMapper} and {@link ObjectWriter} instances;
  * but for actual usage, a configured instance is created by using
  * a create method in sub-class
  * {@link com.fasterxml.jackson.databind.ser.DefaultSerializerProvider}.

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Builder class used for aggregating deserialization information about
  * a POJO, in order to build a {@link JsonSerializer} for serializing
- * intances.
+ * instances.
  * Main reason for using separate builder class is that this makes it easier
  * to make actual serializer class fully immutable.
  */

File: src/main/java/com/fasterxml/jackson/databind/cfg/ConstructorDetector.java
Patch:
@@ -26,7 +26,7 @@ public final class ConstructorDetector
      *<p>
      * Default choice is {@code HEURISTIC} (which is Jackson pre-2.12 always uses)
      *<p>
-     * NOTE: does NOT have any effect if explicit {@code @JsonCreator}} annotation
+     * NOTE: does NOT have any effect if explicit {@code @JsonCreator} annotation
      * is required.
      *
      * @since 2.12

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -1421,7 +1421,7 @@ protected final String _parseString(JsonParser p, DeserializationContext ctxt,
             return ob.toString();
         // 29-Jun-2020, tatu: New! "Scalar from Object" (mostly for XML)
         case JsonTokenId.ID_START_OBJECT:
-            return ctxt.extractScalarFromObject(p, this, _valueClass);
+            return ctxt.extractScalarFromObject(p, this, rawTargetType);
         case JsonTokenId.ID_NUMBER_INT:
             act = _checkIntToStringCoercion(p, ctxt, rawTargetType);
             break;
@@ -1453,7 +1453,7 @@ protected final String _parseString(JsonParser p, DeserializationContext ctxt,
                 return text;
             }
         }
-        return (String) ctxt.handleUnexpectedToken(getValueType(ctxt), p);
+        return (String) ctxt.handleUnexpectedToken(rawTargetType, p);
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java
Patch:
@@ -142,11 +142,13 @@ public void testProperties()
         assertSame(String.class, mt.getContentType().getRawClass());
     }
 
+    // note: changed for [databind#3950]
     public void testIterator()
     {
         TypeFactory tf = TypeFactory.defaultInstance();
         JavaType t = tf.constructType(new TypeReference<Iterator<String>>() { });
-        assertEquals(SimpleType.class, t.getClass());
+        assertEquals(IterationType.class, t.getClass());
+        assertTrue(t.isIterationType());
         assertSame(Iterator.class, t.getRawClass());
         assertEquals(1, t.containedTypeCount());
         assertEquals(tf.constructType(String.class), t.containedType(0));

File: src/main/java/com/fasterxml/jackson/databind/JavaType.java
Patch:
@@ -254,7 +254,9 @@ public JavaType forcedNarrowBy(Class<?> subclass)
     }
 
     @Deprecated // since 2.7
-    protected abstract JavaType _narrow(Class<?> subclass);
+    protected JavaType _narrow(Class<?> subclass) {
+        return this;
+    }
 
     /*
     /**********************************************************************

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -470,7 +470,9 @@ protected Object _deserializeUsingPropertyBased(final JsonParser p, final Deseri
             // weren't removed (to help in creating constructor-backed PropertyCreator)
             // so they ended up in _beanProperties, unlike POJO (whose ignored
             // props are removed)
-            if ((prop != null) && !_beanType.isRecordType()) {
+            if ((prop != null) &&
+                // [databind#3938]: except if it's MethodProperty
+                (!_beanType.isRecordType() || (prop instanceof MethodProperty))) {
                 try {
                     buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));
                 } catch (UnresolvedForwardReference reference) {

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -188,9 +188,9 @@ protected ArrayNode _withArrayAddTailElement(JsonPointer tail, boolean preferInd
             _withXxxSetArrayElement(index, next);
             return next._withArrayAddTailElement(tail, preferIndex);
         }
-        ArrayNode next = this.arrayNode();
+        ObjectNode next = this.objectNode();
         _withXxxSetArrayElement(index, next);
-        return next._withArrayAddTailElement(tail, preferIndex);
+        return next._withArrayAddTailProperty(tail, preferIndex);
     }
 
     protected void _withXxxSetArrayElement(int index, JsonNode value) {

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -40,7 +40,7 @@ public enum MapperFeature implements ConfigFeature
      * and Map to modify the property, without requiring a setter
      * method.
      * This is similar to how JAXB framework sets Collections and
-     * Maps: no setter is involved, just setter.
+     * Maps: no setter is involved, just getter.
      *<p>
      * Note that such getters-as-setters methods have lower
      * precedence than setters, so they are only used if no

File: attic/TypeBindings.java
Patch:
@@ -111,7 +111,7 @@ public JavaType resolveType(Type type) {
 
     /*
     /**********************************************************
-    /* Accesors
+    /* Accessors
     /**********************************************************
      */
 

File: src/main/java/com/fasterxml/jackson/databind/BeanDescription.java
Patch:
@@ -40,7 +40,7 @@ protected BeanDescription(JavaType type) {
 
     /*
     /**********************************************************
-    /* Simple accesors
+    /* Simple accessors
     /**********************************************************
      */
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -91,7 +91,7 @@ public class POJOPropertiesCollector
 
     /**
      * A set of "field renamings" that have been discovered, indicating
-     * intended renaming of other accesors: key is the implicit original
+     * intended renaming of other accessors: key is the implicit original
      * name and value intended name to use instead.
      *<p>
      * Note that these renamings are applied earlier than "regular" (explicit)

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -233,7 +233,7 @@ protected Map<Object,WritableObjectId> _createObjectIdMap()
 
     /*
     /**********************************************************
-    /* Extended API: simple accesors
+    /* Extended API: simple accessors
     /**********************************************************
      */
 

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -59,15 +59,15 @@ public enum Type {
              * Usually this can be defined by using
              * {@link com.fasterxml.jackson.annotation.JsonManagedReference}
              */
-            MANAGED_REFERENCE
+            MANAGED_REFERENCE,
 
             /**
              * Reference property that Jackson manages by suppressing it during serialization,
              * and reconstructing during deserialization.
              * Usually this can be defined by using
              * {@link com.fasterxml.jackson.annotation.JsonBackReference}
              */
-            ,BACK_REFERENCE
+            BACK_REFERENCE
             ;
         }
 

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -4623,7 +4623,7 @@ public <T> T updateValue(T valueToUpdate, Object overrides)
      * @param t The class to generate schema for
      * @return Constructed JSON schema.
      *
-     * @deprecated Since 2.6 use external JSON Schema generator (https://github.com/FasterXML/jackson-module-jsonSchema)
+     * @deprecated Since 2.6 use external JSON Schema generator (<a href="https://github.com/FasterXML/jackson-module-jsonSchema">jackson-module-jsonSchema</a>)
      *    (which under the hood calls {@link #acceptJsonFormatVisitor(JavaType, JsonFormatVisitorWrapper)})
      */
     @Deprecated

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -529,8 +529,8 @@ public void resolveForwardReference(Object id, Object value) throws IOException
 
     /**
      * Helper class to maintain processing order of value. The resolved
-     * object associated with {@link #_id} comes before the values in
-     * {@link #next}.
+     * object associated with {@code #id} parameter from {@link #handleResolvedForwardReference(Object, Object)} 
+     * comes before the values in {@link #next}.
      */
     private final static class CollectionReferring extends Referring {
         private final CollectionReferringAccumulator _parent;

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
Patch:
@@ -202,8 +202,7 @@ public static AnnotatedClass construct(JavaType type, MapperConfig<?> config,
      * Method similar to {@link #construct}, but that will NOT include
      * information from supertypes; only class itself and any direct
      * mix-ins it may have.
-     */
-    /**
+     * 
      * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.
      */
     @Deprecated

File: src/main/java/com/fasterxml/jackson/databind/util/internal/PrivateMaxEntriesMap.java
Patch:
@@ -136,7 +136,7 @@ public final class PrivateMaxEntriesMap<K, V> extends AbstractMap<K, V>
 
     /**
      * The number of read buffers to use.
-     * The max of 4 was introduced due to https://github.com/FasterXML/jackson-databind/issues/3665.
+     * The max of 4 was introduced due to <a href="https://github.com/FasterXML/jackson-databind/issues/3665">databind#3665</a>.
      */
     static final int NUMBER_OF_READ_BUFFERS = Math.min(4, ceilingNextPowerOfTwo(NCPU));
 
@@ -145,7 +145,7 @@ public final class PrivateMaxEntriesMap<K, V> extends AbstractMap<K, V>
 
     /**
      * The number of pending read operations before attempting to drain.
-     * The threshold of 4 was introduced due to https://github.com/FasterXML/jackson-databind/issues/3665.
+     * The threshold of 4 was introduced due to <a href="https://github.com/FasterXML/jackson-databind/issues/3665">databind#3665</a>.
      */
     static final int READ_BUFFER_THRESHOLD = 4;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/dos/StreamReadStringConstraintsTest.java
Patch:
@@ -9,7 +9,7 @@
 import com.fasterxml.jackson.databind.json.JsonMapper;
 
 /**
- * Tests for {@a href="https://github.com/FasterXML/jackson-core/issues/863"}.
+ * Tests for <a href="https://github.com/FasterXML/jackson-core/issues/863">databind#863</a>"
  */
 public class StreamReadStringConstraintsTest extends BaseMapTest
 {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicDeserialization676.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.*;
 
 /**
- * Reproduction of [https://github.com/FasterXML/jackson-databind/issues/676]
+ * Reproduction of <a href="https://github.com/FasterXML/jackson-databind/issues/676">databind#676</a>
  * <p/>
  * Deserialization of class with generic collection inside
  * depends on how is was deserialized first time.

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -761,7 +761,7 @@ protected void _addMethods(Map<String, POJOPropertyBuilder> props)
                 _addGetterMethod(props, m, _annotationIntrospector);
             } else if (argCount == 1) { // setters
                 _addSetterMethod(props, m, _annotationIntrospector);
-            } else if (argCount == 2) { // any getter?
+            } else if (argCount == 2) { // any setter?
                 if (Boolean.TRUE.equals(_annotationIntrospector.hasAnySetter(m))) {
                     if (_anySetters == null) {
                         _anySetters = new LinkedList<AnnotatedMethod>();

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -454,7 +454,7 @@ protected Object _deserializeUsingPropertyBased(final JsonParser p, final Deseri
 
                     //  polymorphic?
                     if (bean.getClass() != _beanType.getRawClass()) {
-                        return handlePolymorphic(p, ctxt, bean, unknown);
+                        return handlePolymorphic(p, ctxt, p.streamReadConstraints(), bean, unknown);
                     }
                     if (unknown != null) { // nope, just extra unknown stuff...
                         bean = handleUnknownProperties(ctxt, bean, unknown);
@@ -538,7 +538,7 @@ protected Object _deserializeUsingPropertyBased(final JsonParser p, final Deseri
         if (unknown != null) {
             // polymorphic?
             if (bean.getClass() != _beanType.getRawClass()) { // lgtm [java/dereferenced-value-may-be-null]
-                return handlePolymorphic(null, ctxt, bean, unknown);
+                return handlePolymorphic(null, ctxt, p.streamReadConstraints(), bean, unknown);
             }
             // no, just some extra unknown properties
             return handleUnknownProperties(ctxt, bean, unknown);

File: src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
Patch:
@@ -395,7 +395,7 @@ protected Object _deserializeUsingPropertyBased(final JsonParser p,
                     }
                     //  polymorphic?
                     if (builder.getClass() != _beanType.getRawClass()) {
-                        return handlePolymorphic(p, ctxt, builder, unknown);
+                        return handlePolymorphic(p, ctxt, p.streamReadConstraints(), builder, unknown);
                     }
                     if (unknown != null) { // nope, just extra unknown stuff...
                         builder = handleUnknownProperties(ctxt, builder, unknown);
@@ -440,7 +440,7 @@ protected Object _deserializeUsingPropertyBased(final JsonParser p,
         if (unknown != null) {
             // polymorphic?
             if (builder.getClass() != _beanType.getRawClass()) {
-                return handlePolymorphic(null, ctxt, builder, unknown);
+                return handlePolymorphic(null, ctxt, p.streamReadConstraints(), builder, unknown);
             }
             // no, just some extra unknown properties
             return handleUnknownProperties(ctxt, builder, unknown);
@@ -669,7 +669,7 @@ protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
                         continue; // never gets here
                     }
                     if (builder.getClass() != _beanType.getRawClass()) {
-                        return handlePolymorphic(p, ctxt, builder, tokens);
+                        return handlePolymorphic(p, ctxt, p.streamReadConstraints(), builder, tokens);
                     }
                     return deserializeWithUnwrapped(p, ctxt, builder, tokens);
                 }

File: src/test/java/com/fasterxml/jackson/databind/deser/TestBigNumbers.java
Patch:
@@ -62,7 +62,7 @@ public void testDouble() throws Exception
             MAPPER.readValue(generateJson("d"), DoubleWrapper.class);
             fail("expected StreamReadException");
         } catch (StreamConstraintsException e) {
-            verifyException(e, "Invalid numeric value ", "exceeds the maximum length");
+            verifyException(e, "Number value length", "exceeds the maximum allowed");
         }
     }
 
@@ -79,7 +79,7 @@ public void testBigDecimal() throws Exception
             MAPPER.readValue(generateJson("number"), BigDecimalWrapper.class);
             fail("expected StreamReadException");
         } catch (StreamConstraintsException e) {
-            verifyException(e, "Invalid numeric value ", "exceeds the maximum length");
+            verifyException(e, "Number value length ", "exceeds the maximum allowed");
         }
     }
 
@@ -97,7 +97,7 @@ public void testBigInteger() throws Exception
             MAPPER.readValue(generateJson("number"), BigIntegerWrapper.class);
             fail("expected StreamReadException");
         } catch (StreamConstraintsException e) {
-            verifyException(e, "Invalid numeric value ", "exceeds the maximum length");
+            verifyException(e, "Number value length", "exceeds the maximum allowed");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/dos/StreamReadStringConstraintsTest.java
Patch:
@@ -48,7 +48,7 @@ public void testBigString() throws Exception
             fail("expected JsonMappingException");
         } catch (DatabindException e) {
             assertTrue("unexpected exception message: " + e.getMessage(),
-                    e.getMessage().startsWith("String length (5001000) exceeds the maximum length (5000000)"));
+                    e.getMessage().startsWith("String value length (5001000) exceeds the maximum allowed (5000000"));
         }
     }
 
@@ -61,8 +61,8 @@ public void testBiggerString() throws Exception
             final String message = e.getMessage();
             // this test fails when the TextBuffer is being resized, so we don't yet know just how big the string is
             // so best not to assert that the String length value in the message is the full 6000000 value
-            assertTrue("unexpected exception message: " + message, message.startsWith("String length"));
-            assertTrue("unexpected exception message: " + message, message.contains("exceeds the maximum length (5000000)"));
+            assertTrue("unexpected exception message: " + message, message.startsWith("String value length"));
+            assertTrue("unexpected exception message: " + message, message.contains("exceeds the maximum allowed (5000000"));
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java
Patch:
@@ -57,7 +57,7 @@ protected AnnotatedMember(AnnotatedMember base) {
     public abstract Annotated withAnnotations(AnnotationMap fallback);
 
     /**
-     * Actual physical class in which this memmber was declared.
+     * Actual physical class in which this member was declared.
      */
     public abstract Class<?> getDeclaringClass();
 

File: src/main/java/com/fasterxml/jackson/databind/JavaType.java
Patch:
@@ -86,7 +86,7 @@ protected JavaType(Class<?> raw, int additionalHash,
             Object valueHandler, Object typeHandler, boolean asStatic)
     {
         _class = raw;
-        _hash = raw.getName().hashCode() + additionalHash;
+        _hash =  31 * additionalHash + raw.hashCode();
         _valueHandler = valueHandler;
         _typeHandler = typeHandler;
         _asStatic = asStatic;
@@ -645,5 +645,5 @@ public String getErasedSignature() {
     public abstract boolean equals(Object o);
 
     @Override
-    public final int hashCode() { return _hash; }
+    public int hashCode() { return _hash; }
 }

File: src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java
Patch:
@@ -36,8 +36,9 @@ protected MapLikeType(Class<?> mapType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInts, JavaType keyT,
             JavaType valueT, Object valueHandler, Object typeHandler,
             boolean asStatic) {
-        super(mapType, bindings, superClass, superInts, keyT.hashCode()
-                ^ valueT.hashCode(), valueHandler, typeHandler, asStatic);
+        super(mapType, bindings, superClass, superInts,
+                31 * keyT.hashCode() + valueT.hashCode(),
+                valueHandler, typeHandler, asStatic);
         _keyType = keyT;
         _valueType = valueT;
     }

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -1465,7 +1465,7 @@ protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings
         } else {
             key = bindings.asKey(rawType);
         }
-        result = _typeCache.get(key); // ok, cache object is synced
+        result = key == null ? null : _typeCache.get(key); // ok, cache object is synced
         if (result != null) {
             return result;
         }
@@ -1529,7 +1529,7 @@ else if (superClass != null) {
         context.resolveSelfReferences(result);
         // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn't
         //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve
-        if (!result.hasHandlers()) {
+        if (key != null && !result.hasHandlers()) {
             _typeCache.putIfAbsent(key, result); // cache object syncs
         }
         return result;

File: src/test/java/com/fasterxml/jackson/databind/jsontype/JsonTypeInfoIgnored2968Test.java
Patch:
@@ -3,10 +3,12 @@
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.databind.BaseMapTest;
+import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
 import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
 import com.fasterxml.jackson.databind.exc.MismatchedInputException;
+import com.fasterxml.jackson.databind.json.JsonMapper;
 
 public class JsonTypeInfoIgnored2968Test extends BaseMapTest {
     /*
@@ -15,7 +17,7 @@ public class JsonTypeInfoIgnored2968Test extends BaseMapTest {
     /**********************************************************
      */
 
-    private static final ObjectMapper MAPPER = new ObjectMapper();
+    private static final ObjectMapper MAPPER = JsonMapper.builder().disable(MapperFeature.REQUIRE_TYPE_ID_FOR_SUBTYPES).build();
 
     @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/DeserDefaultTypedConcrete2968Test.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.databind.BaseMapTest;
+import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;
 import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
@@ -28,6 +29,7 @@ public void testDeserializationConcreteClassWithDefaultTyping() throws Exception
         ObjectMapper mapper = jsonMapperBuilder()
             .activateDefaultTyping(ptv, ObjectMapper.DefaultTyping.NON_FINAL,
                     JsonTypeInfo.As.PROPERTY)
+            .disable(MapperFeature.REQUIRE_TYPE_ID_FOR_SUBTYPES)
             .build();
 
         final String concreteTypeJson = a2q("{'size': 42}");

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.exc.StreamConstraintsException;
+
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.JsonNodeType;
 import com.fasterxml.jackson.databind.node.MissingNode;

File: src/main/java/com/fasterxml/jackson/databind/util/internal/PrivateMaxEntriesMap.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Objects;
 import java.util.Queue;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java
Patch:
@@ -274,7 +274,7 @@ protected static EnumValues constructEnumNamingStrategyValues(SerializationConfi
                 annotatedClass);
         EnumNamingStrategy enumNamingStrategy = EnumNamingStrategyFactory.createEnumNamingStrategyInstance(
             namingDef, config.canOverrideAccessModifiers());
-        return enumNamingStrategy == null ? null : EnumValues.constructUsingEnumNaming(
+        return enumNamingStrategy == null ? null : EnumValues.constructUsingEnumNamingStrategy(
             config, enumClass, enumNamingStrategy);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/util/EnumResolver.java
Patch:
@@ -6,6 +6,7 @@
 import com.fasterxml.jackson.databind.DeserializationConfig;
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.EnumNamingStrategy;
+import com.fasterxml.jackson.databind.cfg.MapperConfig;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
 
 /**
@@ -153,6 +154,8 @@ private static EnumResolver _constructUsingIndex(Class<Enum<?>> enumCls0, Annota
      * Factory method for constructing resolver that maps the name of enums converted to external property
      * names into Enum value using an implementation of {@link EnumNamingStrategy}.
      *
+     * The output {@link EnumResolver} should contain values that are symmetric to
+     * {@link EnumValues#constructUsingEnumNamingStrategy(MapperConfig, Class, EnumNamingStrategy)}.
      * @since 2.15
      */
     public static EnumResolver constructUsingEnumNamingStrategy(DeserializationConfig config,

File: src/main/java/com/fasterxml/jackson/databind/util/EnumValues.java
Patch:
@@ -81,12 +81,13 @@ public static EnumValues constructFromToString(MapperConfig<?> config, Class<Enu
 
     /**
      * Returns String serializations of Enum name using an instance of {@link EnumNamingStrategy}.
+     *
      * The output {@link EnumValues} should contain values that are symmetric to
-     * {@link EnumResolver#constructUsingEnumNaming(DeserializationConfig, Class, EnumNamingStrategy)}.
+     * {@link EnumResolver#constructUsingEnumNamingStrategy(DeserializationConfig, Class, EnumNamingStrategy)}.
      *
      * @since 2.15
      */
-    public static EnumValues constructUsingEnumNaming(MapperConfig<?> config, Class<Enum<?>> enumClass, EnumNamingStrategy namingStrategy) {
+    public static EnumValues constructUsingEnumNamingStrategy(MapperConfig<?> config, Class<Enum<?>> enumClass, EnumNamingStrategy namingStrategy) {
         Class<? extends Enum<?>> cls = ClassUtil.findEnumType(enumClass);
         Enum<?>[] values = cls.getEnumConstants();
         if (values == null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -353,7 +353,8 @@ private final Object _deserializeAltString(JsonParser p, DeserializationContext
                 if (match != null) {
                     return match;
                 }
-            } else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)
+            }
+            if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)
                     && !_isFromIntValue) {
                 // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)
                 char c = name.charAt(0);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java
Patch:
@@ -197,9 +197,9 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
 
     @Override
     public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {
-        if (_deser == null) { // String never has type info
-            return deserialize(p, ctxt);
-        }
+        // 27-Feb-2023, tatu: [databind#3796] required we do NOT skip call
+        //    to typed handling even for "simple" Strings
+        // if (_deser == null) { return deserialize(p, ctxt); }
         return typeDeserializer.deserializeTypedFromAny(p, ctxt);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.exc.StreamReadException;
+
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
@@ -467,7 +468,7 @@ public byte[] deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
             if (t == JsonToken.VALUE_STRING) {
                 try {
                     return p.getBinaryValue(ctxt.getBase64Variant());
-                } catch (StreamReadException e) {
+                } catch (StreamReadException | DatabindException e) {
                     // 25-Nov-2016, tatu: related to [databind#1425], try to convert
                     //   to a more usable one, as it's not really a JSON-level parse
                     //   exception, but rather binding from JSON String into base64 decoded

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -15,7 +15,6 @@
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.introspect.*;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
-import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
@@ -874,8 +873,8 @@ public void depositSchemaProperty(ObjectNode propertiesNode,
             ser = provider.findValueSerializer(getType(), this);
         }
         boolean isOptional = !isRequired();
-        if (ser instanceof SchemaAware) {
-            schemaNode = ((SchemaAware) ser).getSchema(provider, hint,
+        if (ser instanceof com.fasterxml.jackson.databind.jsonschema.SchemaAware) {
+            schemaNode = ((com.fasterxml.jackson.databind.jsonschema.SchemaAware) ser).getSchema(provider, hint,
                     isOptional);
         } else {
             schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java
Patch:
@@ -25,6 +25,8 @@
  *<p>
  * Since 2.5 There is {@link StdNodeBasedDeserializer} that is a simplified version
  * for cases where intermediate type is {@link JsonNode}
+ *<p>
+ * NOTE: in Jackson 3.0 this class will be renamed as {@code StdConvertingDeserializer}.
  * 
  * @param <T> Target type to convert to, from delegate type
  * 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
Patch:
@@ -121,7 +121,7 @@ public static class ShortSerializer extends Base<Object> {
         final static ShortSerializer instance = new ShortSerializer();
 
         public ShortSerializer() {
-            super(Short.class, JsonParser.NumberType.INT, "number");
+            super(Short.class, JsonParser.NumberType.INT, "integer");
         }
 
         @Override
@@ -186,7 +186,7 @@ public void serialize(Object value, JsonGenerator gen,
     @JacksonStdImpl
     public static class LongSerializer extends Base<Object> {
         public LongSerializer(Class<?> cls) {
-            super(cls, JsonParser.NumberType.LONG, "number");
+            super(cls, JsonParser.NumberType.LONG, "integer");
         }
 
         @Override

File: src/test/java/com/fasterxml/jackson/databind/convert/CoerceBoolToStringTest.java
Patch:
@@ -67,7 +67,7 @@ public void testCoerceConfigToFail() throws JsonProcessingException
     {
         _verifyCoerceFail(MAPPER_TO_FAIL, String.class, "true");
         _verifyCoerceFail(MAPPER_TO_FAIL, StringWrapper.class, "{\"str\": false}", "string");
-        _verifyCoerceFail(MAPPER_TO_FAIL, String[].class, "[ true ]", "element of `java.lang.String[]`");
+        _verifyCoerceFail(MAPPER_TO_FAIL, String[].class, "[ true ]", "to `java.lang.String` value");
     }
 
     /*

File: src/test/java/com/fasterxml/jackson/databind/convert/CoerceFloatToStringTest.java
Patch:
@@ -68,7 +68,8 @@ public void testCoerceConfigToFail() throws JsonProcessingException
     {
         _verifyCoerceFail(MAPPER_TO_FAIL, String.class, "3.5");
         _verifyCoerceFail(MAPPER_TO_FAIL, StringWrapper.class, "{\"str\": -5.3}", "string");
-        _verifyCoerceFail(MAPPER_TO_FAIL, String[].class, "[ 2.1 ]", "element of `java.lang.String[]`");
+        _verifyCoerceFail(MAPPER_TO_FAIL, String[].class, "[ 2.1 ]",
+                "to `java.lang.String` value");
     }
 
     /*

File: src/test/java/com/fasterxml/jackson/databind/convert/CoerceIntToFloatTest.java
Patch:
@@ -110,12 +110,12 @@ public void testCoerceConfigToFail() throws JsonProcessingException
         _verifyCoerceFail(MAPPER_TO_FAIL, Float.class, "3");
         _verifyCoerceFail(MAPPER_TO_FAIL, Float.TYPE, "-2");
         _verifyCoerceFail(MAPPER_TO_FAIL, FloatWrapper.class, "{\"f\": -5}", "float");
-        _verifyCoerceFail(MAPPER_TO_FAIL, float[].class, "[ 2 ]", "element of `float[]`");
+        _verifyCoerceFail(MAPPER_TO_FAIL, float[].class, "[ 2 ]", "to `float` value");
 
         _verifyCoerceFail(MAPPER_TO_FAIL, Double.class, "-1");
         _verifyCoerceFail(MAPPER_TO_FAIL, Double.TYPE, "4");
         _verifyCoerceFail(MAPPER_TO_FAIL, DoubleWrapper.class, "{\"d\": 2}", "double");
-        _verifyCoerceFail(MAPPER_TO_FAIL, double[].class, "[ -2 ]", "element of `double[]`");
+        _verifyCoerceFail(MAPPER_TO_FAIL, double[].class, "[ -2 ]", "to `double` value");
 
         _verifyCoerceFail(MAPPER_TO_FAIL, BigDecimal.class, "73455342");
     }

File: src/test/java/com/fasterxml/jackson/databind/convert/CoerceIntToStringTest.java
Patch:
@@ -68,7 +68,7 @@ public void testCoerceConfigToFail() throws JsonProcessingException
     {
         _verifyCoerceFail(MAPPER_TO_FAIL, String.class, "3");
         _verifyCoerceFail(MAPPER_TO_FAIL, StringWrapper.class, "{\"str\": -5}", "string");
-        _verifyCoerceFail(MAPPER_TO_FAIL, String[].class, "[ 2 ]", "element of `java.lang.String[]`");
+        _verifyCoerceFail(MAPPER_TO_FAIL, String[].class, "[ 2 ]", "to `java.lang.String` value");
     }
 
     /*

File: src/test/java/com/fasterxml/jackson/databind/format/MapEntryFormatTest.java
Patch:
@@ -177,7 +177,6 @@ public void testDefaultShapeOverride() throws Exception
                     cfg.setFormat(JsonFormat.Value.forShape(JsonFormat.Shape.OBJECT)))
                 .build();
         Map.Entry<String,String> input = new BeanWithMapEntry("foo", "bar").entry;
-        assertEquals(a2q("{'key':'foo','value':'bar'}"),
-                mapper.writeValueAsString(input));
+        assertTrue(mapper.writeValueAsString(input).equals(a2q("{'key':'foo','value':'bar'}")) || mapper.writeValueAsString(input).equals(a2q("{'value':'bar','key':'foo'}")));
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithEquals.java
Patch:
@@ -9,6 +9,7 @@
 
 public class TestObjectIdWithEquals extends BaseMapTest
 {
+    @JsonPropertyOrder({"id","bars","otherBars"})
     @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property="id", scope=Foo.class)
     static class Foo {
         public int id;
@@ -102,7 +103,6 @@ public void testSimpleEquals() throws Exception
 
         String json = mapper.writeValueAsString(foo);
         assertEquals("{\"id\":1,\"bars\":[{\"id\":1},{\"id\":2}],\"otherBars\":[1,2]}", json);
-
         Foo foo2 = mapper.readValue(json, Foo.class);       
         assertNotNull(foo2);
         assertEquals(foo.id, foo2.id);

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -53,7 +53,7 @@ public enum MapperFeature implements ConfigFeature
     /**
      * Feature that determines how <code>transient</code> modifier for fields
      * is handled: if disabled, it is only taken to mean exclusion of the field
-     * as accessor; if true, it is taken to imply removal of the whole property.
+     * as an accessor; if true, it is taken to imply removal of the whole property.
      *<p>
      * Feature is disabled by default, meaning that existence of `transient`
      * for a field does not necessarily lead to ignoral of getters or setters

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java
Patch:
@@ -950,7 +950,7 @@ public JsonProperty.Access removeNonVisible(boolean inferMutators,
         case AUTO: // the default case: base it on visibility
             _getters = _removeNonVisible(_getters);
             _ctorParameters = _removeNonVisible(_ctorParameters);
-    
+
             if (!inferMutators || (_getters == null)) {
                 _fields = _removeNonVisible(_fields);
                 _setters = _removeNonVisible(_setters);

File: src/test/java/com/fasterxml/jackson/databind/format/CollectionFormatShapeTest.java
Patch:
@@ -55,5 +55,4 @@ public void testListAsObjectRoundtrip() throws Exception
         CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class);
         assertEquals(2, result.size());
     }
-
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -616,8 +616,8 @@ protected Object _deserializeFromArray(JsonParser p, DeserializationContext ctxt
         final boolean unwrap = ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);
 
         if (unwrap || (act != CoercionAction.Fail)) {
-            JsonToken t = p.nextToken();
-            if (t == JsonToken.END_ARRAY) {
+            JsonToken unwrappedToken = p.nextToken();
+            if (unwrappedToken == JsonToken.END_ARRAY) {
                 switch (act) {
                 case AsEmpty:
                     return getEmptyValue(ctxt);
@@ -631,7 +631,7 @@ protected Object _deserializeFromArray(JsonParser p, DeserializationContext ctxt
             if (unwrap) {
                 // 23-Aug-2022, tatu: To prevent unbounded nested arrays, we better
                 //   check there is NOT another START_ARRAY lurking there..
-                if (p.nextToken() == JsonToken.START_ARRAY) {
+                if (unwrappedToken == JsonToken.START_ARRAY) {
                     JavaType targetType = getValueType(ctxt);
                     return ctxt.handleUnexpectedToken(targetType, JsonToken.START_ARRAY, p,
 "Cannot deserialize value of type %s from deeply-nested Array: only single wrapper allowed with `%s`",

File: src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java
Patch:
@@ -1411,7 +1411,7 @@ private static Field locateField(Class<?> fromClass, String expectedName, Class<
             }
             // If not found, indicate with exception
             throw new IllegalStateException(String.format(
-"No field named '%s' in class '%s'", expectedName, fromClass.getTypeName()));
+"No field named '%s' in class '%s'", expectedName, fromClass.getName()));
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java
Patch:
@@ -87,7 +87,7 @@ public Class<?> getRawType() {
 
     @Override
     public int getParameterCount() {
-        return _constructor.getParameterTypes().length;
+        return _constructor.getParameterCount();
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -318,8 +318,10 @@ public enum DeserializationFeature implements ConfigFeature
      * values to the corresponding value type.  This is basically the opposite of the {@link #ACCEPT_SINGLE_VALUE_AS_ARRAY}
      * feature.  If more than one value is found in the array, a JsonMappingException is thrown.
      * <p>
+     * NOTE: only <b>single</b> wrapper Array is allowed: if multiple attempted, exception
+     * will be thrown.
      * 
-     * Feature is disabled by default
+     * Feature is disabled by default.
      * @since 2.4
      */
     UNWRAP_SINGLE_VALUE_ARRAYS(false),

File: src/main/java/com/fasterxml/jackson/databind/introspect/DefaultAccessorNamingStrategy.java
Patch:
@@ -41,6 +41,7 @@ public interface BaseNameValidator {
     protected final BaseNameValidator _baseNameValidator;
 
     protected final boolean _stdBeanNaming;
+    protected final boolean _isGettersNonBoolean;
 
     protected final String _getterPrefix;
     protected final String _isGetterPrefix;
@@ -59,6 +60,7 @@ protected DefaultAccessorNamingStrategy(MapperConfig<?> config, AnnotatedClass f
         _forClass = forClass;
 
         _stdBeanNaming = config.isEnabled(MapperFeature.USE_STD_BEAN_NAMING);
+        _isGettersNonBoolean = config.isEnabled(MapperFeature.ALLOW_IS_GETTERS_FOR_NON_BOOLEAN);
         _mutatorPrefix = mutatorPrefix;
         _getterPrefix = getterPrefix;
         _isGetterPrefix = isGetterPrefix;
@@ -70,7 +72,7 @@ public String findNameForIsGetter(AnnotatedMethod am, String name)
     {
         if (_isGetterPrefix != null) {
             final Class<?> rt = am.getRawType();
-            if (rt == Boolean.class || rt == Boolean.TYPE) {
+            if (_isGettersNonBoolean || rt == Boolean.class || rt == Boolean.TYPE) {
                 if (name.startsWith(_isGetterPrefix)) {
                     return _stdBeanNaming
                             ? stdManglePropertyName(name, 2)

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
Patch:
@@ -165,7 +165,7 @@ public String[] deserialize(JsonParser p, DeserializationContext ctxt) throws IO
                         }
                         value = (String) _nullProvider.getNullValue(ctxt);
                     } else {
-                        value = _parseString(p, ctxt);
+                        value = _parseString(p, ctxt, _nullProvider);
                     }
                 }
                 if (ix >= chunk.length) {
@@ -286,7 +286,7 @@ public String[] deserialize(JsonParser p, DeserializationContext ctxt,
                         }
                         value = (String) _nullProvider.getNullValue(ctxt);
                     } else {
-                        value = _parseString(p, ctxt);
+                        value = _parseString(p, ctxt, _nullProvider);
                     }
                 }
                 if (ix >= chunk.length) {
@@ -335,7 +335,7 @@ private final String[] handleNonArray(JsonParser p, DeserializationContext ctxt)
                     // if coercion failed, we can still add it to an array
                 }
 
-                value = _parseString(p, ctxt);
+                value = _parseString(p, ctxt, _nullProvider);
             }
             return new String[] { value };
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -215,7 +215,7 @@ public Collection<String> deserialize(JsonParser p, DeserializationContext ctxt,
                     }
                     value = (String) _nullProvider.getNullValue(ctxt);
                 } else {
-                    value = _parseString(p, ctxt);
+                    value = _parseString(p, ctxt, _nullProvider);
                 }
                 result.add(value);
             }
@@ -322,7 +322,7 @@ private final Collection<String> handleNonArray(JsonParser p, DeserializationCon
             }
 
             try {
-                value = (valueDes == null) ? _parseString(p, ctxt) : valueDes.deserialize(p, ctxt);
+                value = (valueDes == null) ? _parseString(p, ctxt, _nullProvider) : valueDes.deserialize(p, ctxt);
             } catch (Exception e) {
                 throw JsonMappingException.wrapWithPath(e, result, result.size());
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/NullsAsEmptyProvider.java
Patch:
@@ -2,12 +2,11 @@
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.NullValueProvider;
-import com.fasterxml.jackson.databind.exc.InvalidNullException;
 import com.fasterxml.jackson.databind.util.AccessPattern;
 
 /**
- * Simple {@link NullValueProvider} that will always throw a
- * {@link InvalidNullException} when a null is encountered.
+ * Simple {@link NullValueProvider} that will return "empty value"
+ * specified by {@link JsonDeserializer} provider is constructed with.
  */
 public class NullsAsEmptyProvider
     implements NullValueProvider, java.io.Serializable

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1784,15 +1784,14 @@ public TypeDeserializer findTypeDeserializer(DeserializationConfig config,
 
         // Ok: if there is no explicit type info handler, we may want to
         // use a default. If so, config object knows what to use.
-        Collection<NamedType> subtypes = null;
         if (b == null) {
             b = config.getDefaultTyper(baseType);
             if (b == null) {
                 return null;
             }
-        } else {
-            subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac);
         }
+        final Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac);
+
         // May need to figure out default implementation, if none found yet
         // (note: check for abstract type is not 100% mandatory, more of an optimization)
         if ((b.getDefaultImpl() == null) && baseType.isAbstract()) {

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -317,8 +317,10 @@ public enum DeserializationFeature implements ConfigFeature
      * values to the corresponding value type.  This is basically the opposite of the {@link #ACCEPT_SINGLE_VALUE_AS_ARRAY}
      * feature.  If more than one value is found in the array, a JsonMappingException is thrown.
      * <p>
+     * NOTE: only <b>single</b> wrapper Array is allowed: if multiple attempted, exception
+     * will be thrown.
      * 
-     * Feature is disabled by default
+     * Feature is disabled by default.
      * @since 2.4
      */
     UNWRAP_SINGLE_VALUE_ARRAYS(false),

File: src/test/java/com/fasterxml/jackson/databind/convert/CoerceContainersTest.java
Patch:
@@ -41,9 +41,7 @@ public void testScalarCollections() throws Exception
 //            verifyException(e, "Cannot coerce empty String");
             verifyException(e, "Cannot deserialize value of type");
             verifyException(e, "from String value");
-            e.printStackTrace();
         }
-
         
         List<Double> result = _readWithCoercion(listType);
         assertNotNull(result);

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -150,7 +150,7 @@ public Iterator<Map.Entry<String, JsonNode>> fields() {
 
     @SuppressWarnings("unchecked")
     @Override
-    public ObjectNode with(String propertyName) {
+    public ObjectNode withObject(String propertyName) {
         JsonNode n = _children.get(propertyName);
         if (n != null) {
             if (n instanceof ObjectNode) {

File: src/test/java/com/fasterxml/jackson/databind/node/NodeJDKSerializationTest.java
Patch:
@@ -25,7 +25,7 @@ public void testObjectNodeSerialization() throws Exception
         root.put("answer", 42);
         ArrayNode arr = root.withArray("matrix");
         arr.add(1).add(12345678901L).add(true).add("...");
-        ObjectNode misc = root.with("misc");
+        ObjectNode misc = root.withObject("misc");
         misc.put("value", 0.25);
 
         testNodeRoundtrip(root);

File: src/test/java/com/fasterxml/jackson/databind/node/ObjectNodeTest.java
Patch:
@@ -303,7 +303,7 @@ public void testValidWith() throws Exception
     {
         ObjectNode root = MAPPER.createObjectNode();
         assertEquals("{}", MAPPER.writeValueAsString(root));
-        JsonNode child = root.with("prop");
+        JsonNode child = root.withObject("prop");
         assertTrue(child instanceof ObjectNode);
         assertEquals("{\"prop\":{}}", MAPPER.writeValueAsString(root));
     }
@@ -321,7 +321,7 @@ public void testInvalidWith() throws Exception
     {
         JsonNode root = MAPPER.createArrayNode();
         try { // should not work for non-ObjectNode nodes:
-            root.with("prop");
+            root.withObject("prop");
             fail("Expected exception");
         } catch (UnsupportedOperationException e) {
             verifyException(e, "not of type ObjectNode");
@@ -330,7 +330,7 @@ public void testInvalidWith() throws Exception
         ObjectNode root2 = MAPPER.createObjectNode();
         root2.put("prop", 13);
         try { // should not work for non-ObjectNode nodes:
-            root2.with("prop");
+            root2.withObject("prop");
             fail("Expected exception");
         } catch (UnsupportedOperationException e) {
             verifyException(e, "has value that is not");

File: src/main/java/com/fasterxml/jackson/databind/type/LogicalType.java
Patch:
@@ -61,8 +61,8 @@ public enum LogicalType
     Integer,
 
     /**
-     * Basic floating-point numbers types like {@code short}, {@code int}, {@code long}
-     * and matching wrapper types, {@link java.math.BigInteger}.
+     * Basic floating-point numbers types like {@code float}, {@code double},
+     * and matching wrapper types, {@link java.math.BigDecimal}.
      */
     Float,
 

File: src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java
Patch:
@@ -435,7 +435,7 @@ public SettableBeanProperty findBackReference(String refName)
      *<p>
      * Information gathered is typically used to either prevent merging update for
      * property (either by skipping, if based on global defaults; or by exception during
-     * deserialization construction if explicit attempt made) if {@link Boolean#FALSE}
+     * deserializer construction if explicit attempt made) if {@link Boolean#FALSE}
      * returned, or inclusion if {@link Boolean#TRUE} is specified. If "unknown" case
      * (<code>null</code> returned) behavior is to exclude property if global defaults
      * used; or to allow if explicit per-type or property merging is defined.

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -162,7 +162,7 @@ public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingExcep
             return true;
         }
         // should let filter decide what to do with nulls:
-        // But just case, let's handle unexpected (from our perspective) problems explicitly
+        // But just in case, let's handle unexpected (from our perspective) problems explicitly
         try {
             return filter.equals(null);
         } catch (Throwable t) {

File: src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java
Patch:
@@ -20,9 +20,9 @@ public void testPathRoundtrip() throws Exception
 
         Path p = mapper.readValue(json, Path.class);
         assertNotNull(p);
-        
+
         assertEquals(input.toUri(), p.toUri());
-        assertEquals(input, p);
+        assertEquals(input.toAbsolutePath(), p.toAbsolutePath());
     }
 
     // [databind#1688]:
@@ -41,6 +41,6 @@ public void testPolymorphicPath() throws Exception
         Object ob = obs[0];
         assertTrue(ob instanceof Path);
 
-        assertEquals(input.toString(), ob.toString());
+        assertEquals(input.toAbsolutePath().toString(), ob.toString());
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.deser.std;
 
 import java.io.IOException;
-import java.util.Iterator;
 
 import com.fasterxml.jackson.core.*;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepJsonNodeDeser3397Test.java
Patch:
@@ -8,9 +8,9 @@ public class DeepJsonNodeDeser3397Test extends BaseMapTest
     // 28-Mar-2021, tatu: Used to fail at 5000 for tree/object,
     // 8000 for tree/array, before work on iterative JsonNode deserializer
     // ... currently gets a bit slow at 1M but passes.
-    // But test with 50k as practical limit, to guard against regression
+    // But test with 100k as practical limit, to guard against regression
 //    private final static int TOO_DEEP_NESTING = 1_000_000;
-    private final static int TOO_DEEP_NESTING = 49999;
+    private final static int TOO_DEEP_NESTING = 100_00;
 
     private final ObjectMapper MAPPER = newJsonMapper();
 

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapDeserializationTest.java
Patch:
@@ -90,7 +90,7 @@ static class AbstractMapWrapper {
     /**********************************************************
      */
 
-    private final ObjectMapper MAPPER = new ObjectMapper();
+    private final ObjectMapper MAPPER = newJsonMapper();
 
     public void testBigUntypedMap() throws Exception
     {

File: src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java
Patch:
@@ -37,14 +37,15 @@ public void testSimpleViaObjectMapper()
         mapper.writeTree(jg, n);
 
         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);
-
         assertEquals(3, result.size());
         assertEquals("abc", result.get("string"));
         assertEquals(Integer.valueOf(15), result.get("number"));
         Map<String,Object> ob = (Map<String,Object>) result.get("ob");
         assertEquals(1, ob.size());
         List<Object> list = (List<Object>) ob.get("arr");
-        assertNotNull(list);
+        if (list == null) {
+            fail("Missing entry 'arr': "+ob);
+        }
         assertEquals(0, list.size());
         jg.close();
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -2125,7 +2125,7 @@ public JsonDeserializer<?> findDefaultDeserializer(DeserializationContext ctxt,
         if (deser != null) {
             return deser;
         }
-        return JdkDeserializers.find(rawType, clsName);
+        return JdkDeserializers.find(ctxt, rawType, clsName);
     }
 
     protected JavaType _findRemappedType(DeserializationConfig config, Class<?> rawType) throws JsonMappingException {

File: src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java
Patch:
@@ -235,7 +235,7 @@ public void testLineNumberAsString() throws IOException
         assertNotNull(exc);
     }
 
-    // [databind#1842]:
+    // [databind#1842]
     public void testNullAsMessage() throws IOException
     {
         Exception exc = MAPPER.readValue(a2q(

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -900,7 +900,9 @@ protected void _removeUnwantedProperties(Map<String, POJOPropertyBuilder> props)
             // Otherwise, check ignorals
             if (prop.anyIgnorals()) {
                 // first: if one or more ignorals, and no explicit markers, remove the whole thing
-                if (!prop.isExplicitlyIncluded()) {
+                // 16-May-2022, tatu: NOTE! As per [databind#3357] need to consider
+                //    only explicit inclusion by accessors OTHER than ones with ignoral marker
+                if (!prop.anyExplicitsWithoutIgnoral()) {
                     it.remove();
                     _collectIgnorals(prop.getName());
                     continue;

File: src/test/java/com/fasterxml/jackson/databind/ser/filter/JsonIncludeTest.java
Patch:
@@ -200,7 +200,7 @@ public void setStr(String str) {
     /**********************************************************
      */
 
-    final private ObjectMapper MAPPER = new ObjectMapper();
+    final private ObjectMapper MAPPER = newJsonMapper();
 
     public void testGlobal() throws IOException
     {

File: src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategies.java
Patch:
@@ -265,7 +265,9 @@ public String translate(String input)
      * snake case conversion functionality offered by the strategy.
      * @since 2.13
      */
-    public static class UpperSnakeCaseStrategy extends SnakeCaseStrategy {
+    public static class UpperSnakeCaseStrategy extends SnakeCaseStrategy
+    {
+        private static final long serialVersionUID = 2L;
 
         @Override
         public String translate(String input) {

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java
Patch:
@@ -15,7 +15,7 @@
 import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
 
 /**
- * Vanilla {@link Module} implementation that allows registration
+ * Vanilla {@link com.fasterxml.jackson.databind.Module} implementation that allows registration
  * of serializers and deserializers, bean serializer
  * and deserializer modifiers, registration of subtypes and mix-ins
  * as well as some other commonly

File: src/test-jdk14/java/com/fasterxml/jackson/databind/records/RecordUpdate3079Test.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.records;
 
 import java.util.Collections;
-import java.util.Map;
 
 import com.fasterxml.jackson.databind.*;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java
Patch:
@@ -168,7 +168,7 @@ public void checkUnresolvedObjectId() throws UnresolvedForwardReference
                 continue;
             }
             if (exception == null) {
-                exception = new UnresolvedForwardReference(getParser(), "Unresolved forward references for: ");
+                exception = new UnresolvedForwardReference(getParser(), "Unresolved forward references for: ")._fillInStackTrace();
             }
             Object key = roid.getKey().key;
             for (Iterator<Referring> iterator = roid.referringProperties(); iterator.hasNext(); ) {

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -961,8 +961,8 @@ protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationC
                 // and is inner class of the bean class...
                 if ((enclosing != null) && (enclosing == _beanType.getRawClass())) {
                     for (Constructor<?> ctor : valueClass.getConstructors()) {
-                        if (ctor.getParameterCount() == 1) {
-                            Class<?>[] paramTypes = ctor.getParameterTypes();
+                        Class<?>[] paramTypes = ctor.getParameterTypes();
+                        if (paramTypes.length == 1) {
                             if (enclosing.equals(paramTypes[0])) {
                                 if (ctxt.canOverrideAccessModifiers()) {
                                     ClassUtil.checkAndFixAccess(ctor, ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java
Patch:
@@ -169,7 +169,7 @@ public Object getValue(Object pojo)
 
     @Override
     public String toString() {
-        final int argCount = _constructor.getParameterCount();
+        final int argCount = _constructor.getParameterTypes().length;
         return String.format("[constructor for %s (%d arg%s), annotations: %s",
                 ClassUtil.nameOf(_constructor.getDeclaringClass()), argCount,
                 (argCount == 1) ? "" : "s", _annotations);

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java
Patch:
@@ -352,7 +352,7 @@ protected AnnotatedConstructor constructNonDefaultConstructor(ClassUtil.Ctor cto
     protected AnnotatedMethod constructFactoryCreator(Method m,
             TypeResolutionContext typeResCtxt, Method mixin)
     {
-        final int paramCount = m.getParameterCount();
+        final int paramCount = m.getParameterTypes().length;
         if (_intr == null) { // when annotation processing is disabled
             return new AnnotatedMethod(typeResCtxt, m, _emptyAnnotationMap(),
                     _emptyAnnotationMaps(paramCount));

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java
Patch:
@@ -184,7 +184,7 @@ private static boolean _isIncludableMemberMethod(Method m)
         }
         // also, for now we have no use for methods with more than 2 arguments:
         // (2 argument methods for "any setter", fwtw)
-        return (m.getParameterCount() <= 2);
+        return (m.getParameterTypes().length <= 2);
     }
 
     private final static class MethodBuilder {

File: src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java
Patch:
@@ -1448,7 +1448,7 @@ public Constructor<?> getConstructor() {
         public int getParamCount() {
             int c = _paramCount;
             if (c < 0) {
-                c = _ctor.getParameterCount();
+                c = _ctor.getParameterTypes().length;
                 _paramCount = c;
             }
             return c;

File: src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java
Patch:
@@ -293,23 +293,23 @@ public ObjectWriter withFeatures(SerializationFeature... features) {
     
     /**
      * Method for constructing a new instance that is configured
-     * with specified feature enabled.
+     * with specified feature disabled.
      */
     public ObjectWriter without(SerializationFeature feature) {
         return _new(this, _config.without(feature));
     }    
 
     /**
      * Method for constructing a new instance that is configured
-     * with specified features enabled.
+     * with specified features disabled.
      */
     public ObjectWriter without(SerializationFeature first, SerializationFeature... other) {
         return _new(this, _config.without(first, other));
     }    
 
     /**
      * Method for constructing a new instance that is configured
-     * with specified features enabled.
+     * with specified features disabled.
      */
     public ObjectWriter withoutFeatures(SerializationFeature... features) {
         return _new(this, _config.withoutFeatures(features));

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -562,7 +562,7 @@ public byte[] binaryValue() throws IOException {
     public BigDecimal decimalValue() { return BigDecimal.ZERO; }
 
     /**
-     * Returns integer value for this node (as {@link BigDecimal}), <b>if and only if</b>
+     * Returns integer value for this node (as {@link BigInteger}), <b>if and only if</b>
      * this node is numeric ({@link #isNumber} returns true). For other
      * types returns <code>BigInteger.ZERO</code>.
      *

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -209,7 +209,6 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
             }
             return _fromInteger(p, ctxt, p.getIntValue());
         }
-
         // 29-Jun-2020, tatu: New! "Scalar from Object" (mostly for XML)
         if (p.isExpectedStartObjectToken()) {
             return _fromString(p, ctxt,

File: src/test/java/com/fasterxml/jackson/failing/EnumDeserialization2787Test.java
Patch:
@@ -23,9 +23,9 @@ static enum  SomeEnumMixin2787 {
     }
 
     /*
-    /**********************************************************
+    /**********************************************************************
     /* Test methods
-    /**********************************************************
+    /**********************************************************************
      */
 
     protected final ObjectMapper MAPPER = newJsonMapper();

File: src/main/java/com/fasterxml/jackson/databind/introspect/DefaultAccessorNamingStrategy.java
Patch:
@@ -79,7 +79,7 @@ public String findNameForIsGetter(AnnotatedMethod am, String name)
         return null;
     }
 
-        @Override
+    @Override
     public String findNameForRegularGetter(AnnotatedMethod am, String name)
     {
         if ((_getterPrefix != null) && name.startsWith(_getterPrefix)) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/DefaultAccessorNamingStrategy.java
Patch:
@@ -79,7 +79,7 @@ public String findNameForIsGetter(AnnotatedMethod am, String name)
         return null;
     }
 
-        @Override
+    @Override
     public String findNameForRegularGetter(AnnotatedMethod am, String name)
     {
         if ((_getterPrefix != null) && name.startsWith(_getterPrefix)) {

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyCustom.java
Patch:
@@ -102,7 +102,7 @@ static class FieldBean {
         public FieldBean(int v) { key = v; }
     }
 
-    @JsonPropertyOrder({"first_name", "last_name"})
+    @JsonPropertyOrder({"firstName", "lastName", "age"})
     static class PersonBean {
         public String firstName;
         public String lastName;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java
Patch:
@@ -197,6 +197,7 @@ protected Object deserializeEnumUsingPropertyBased(final JsonParser p, final Des
                 continue;
             }
             // 26-Nov-2020, tatu: ... what should we do here tho?
+            p.skipChildren();
         }
         return creator.build(ctxt, buffer);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1797,8 +1797,10 @@ public TypeDeserializer findTypeDeserializer(DeserializationConfig config,
         // (note: check for abstract type is not 100% mandatory, more of an optimization)
         if ((b.getDefaultImpl() == null) && baseType.isAbstract()) {
             JavaType defaultType = mapAbstractType(config, baseType);
+            // 18-Sep-2021, tatu: We have a shared instance, MUST NOT call mutating method
+            //    but the new "mutant factory":
             if ((defaultType != null) && !defaultType.hasRawClass(baseType.getRawClass())) {
-                b = b.defaultImpl(defaultType.getRawClass());
+                b = b.withDefaultImpl(defaultType.getRawClass());
             }
         }
         // 05-Apt-2018, tatu: Since we get non-mapping exception due to various limitations,

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestBaseTypeAsDefault.java
Patch:
@@ -16,12 +16,10 @@ static class Parent {
     static class Child extends Parent {
     }
 
-
     @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = "@class", defaultImpl = ChildOfChild.class)
     static abstract class AbstractParentWithDefault {
     }
 
-
     static class ChildOfAbstract extends AbstractParentWithDefault {
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java
Patch:
@@ -51,7 +51,7 @@ public interface TypeResolverBuilder<T extends TypeResolverBuilder<T>>
      * available during type resolution
      */
     public Class<?> getDefaultImpl();
-    
+
     /*
     /**********************************************************
     /* Actual builder methods

File: src/test/java/com/fasterxml/jackson/databind/node/AbsentNodeViaCreator3214Test.java
Patch:
@@ -1,11 +1,11 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.node;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.node.TextNode;
 
-public class NullJsonNodeViaCreator3214Test extends BaseMapTest
+public class AbsentNodeViaCreator3214Test extends BaseMapTest
 {
     static class Pojo3214
     {

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1664,7 +1664,6 @@ protected void handleUnknownVanilla(JsonParser p, DeserializationContext ctxt,
             Object beanOrBuilder, String propName)
         throws IOException
     {
-
         if (IgnorePropertiesUtil.shouldIgnore(propName, _ignorableProps, _includableProps)) {
             handleIgnoredProperty(p, ctxt, beanOrBuilder, propName);
         } else if (_anySetter != null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java
Patch:
@@ -172,9 +172,8 @@ public void serialize(Object value, JsonGenerator gen, SerializerProvider provid
     public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider,
             TypeSerializer typeSer) throws IOException
     {
-        /* 03-Oct-2012, tatu: This is actually unlikely to work ok... but for now,
-         *    let's give it a chance?
-         */
+        // 03-Oct-2012, tatu: This is actually unlikely to work ok... but for now,
+        //    let's give it a chance?
         Object delegateValue = convertValue(value);
         JsonSerializer<Object> ser = _delegateSerializer;
         if (ser == null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java
Patch:
@@ -492,7 +492,6 @@ protected Object mapArray(JsonParser p, DeserializationContext ctxt,
     protected Object mapObject(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         String key1;
-
         JsonToken t = p.currentToken();
         
         if (t == JsonToken.START_OBJECT) {
@@ -802,7 +801,6 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt, Object into
             if (_nonMerging) {
                 return deserialize(p, ctxt);
             }
-
             switch (p.currentTokenId()) {
             case JsonTokenId.ID_END_OBJECT:
             case JsonTokenId.ID_END_ARRAY:
@@ -920,7 +918,8 @@ protected Object[] mapArrayToArray(JsonParser p, DeserializationContext ctxt) th
         protected Object mapObject(JsonParser p, DeserializationContext ctxt) throws IOException
         {
             // will point to FIELD_NAME at this point, guaranteed
-            String key1 = p.getText();
+            // 19-Jul-2021, tatu: Was incorrectly using "getText()" before 2.13, fixed for 2.13.0
+            String key1 = p.currentName();
             p.nextToken();
             Object value1 = deserialize(p, ctxt);
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -771,7 +771,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
                     PropertyName propName = objectIdInfo.getPropertyName();
                     idProp = findProperty(propName);
                     if (idProp == null) {
-                        ctxt.reportBadDefinition(_beanType, String.format(
+                        return ctxt.reportBadDefinition(_beanType, String.format(
 "Invalid Object Id definition for %s: cannot find property with name %s",
 ClassUtil.nameOf(handledType()), ClassUtil.name(propName)));
                     }
@@ -881,7 +881,7 @@ protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationC
         JsonDeserializer<?> valueDeser = prop.getValueDeserializer();
         SettableBeanProperty backProp = valueDeser.findBackReference(refName);
         if (backProp == null) {
-            ctxt.reportBadDefinition(_beanType, String.format(
+            return ctxt.reportBadDefinition(_beanType, String.format(
 "Cannot handle managed/back reference %s: no back reference property found from type %s",
 ClassUtil.name(refName), ClassUtil.getTypeDescription(prop.getType())));
         }

File: src/main/java/com/fasterxml/jackson/databind/util/ArrayIterator.java
Patch:
@@ -7,8 +7,8 @@
  * Iterator implementation used to efficiently expose contents of an
  * Array as read-only iterator.
  */
-@SuppressWarnings("IterableAndIterator")
-public class ArrayIterator<T> implements Iterator<T>, Iterable<T>
+@SuppressWarnings("IterableAndIterator") // only used internally, not exposed via API
+public class ArrayIterator<T> implements Iterator<T>, Iterable<T> // lgtm [java/iterator-implements-iterable]
 {
     private final T[] _a;
     

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1861,8 +1861,7 @@ protected Object wrapInstantiationProblem(Throwable t, DeserializationContext ct
         if (ctxt == null) { // only to please LGTM...
             throw new IllegalArgumentException(t.getMessage(), t);
         }
-        boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
-        if (!wrap) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions
+        if (!ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS)) {
             ClassUtil.throwIfRTE(t);
         }
         return ctxt.handleInstantiationProblem(_beanType.getRawClass(), null, t);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1858,6 +1858,9 @@ protected Object wrapInstantiationProblem(Throwable t, DeserializationContext ct
             // Since we have no more information to add, let's not actually wrap..
             throw (IOException) t;
         }
+        if (ctxt == null) { // only to please LGTM...
+            throw new IllegalArgumentException(t.getMessage(), t);
+        }
         boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
         if (!wrap) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions
             ClassUtil.throwIfRTE(t);

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
Patch:
@@ -431,7 +431,7 @@ public void replace(SettableBeanProperty origProp, SettableBeanProperty newProp)
         int end = _hashArea.length;
 
         for (;; i += 2) {
-            if (i > end) {
+            if (i >= end) {
                 throw new NoSuchElementException("No entry '"+origProp.getName()+"' found, can't replace");
             }
             if (_hashArea[i] == origProp) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -695,7 +695,9 @@ protected final JsonNode _fromEmbedded(JsonParser p, DeserializationContext ctxt
     @SuppressWarnings("rawtypes")
     final static class ContainerStack
     {
-        private ContainerNode[] _stack;
+        private final static ContainerNode[] EMPTY_STACK = new ContainerNode[0];
+
+        private ContainerNode[] _stack = EMPTY_STACK;
         private int _top, _end;
 
         public ContainerStack() { }

File: src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
Patch:
@@ -194,7 +194,7 @@ public JsonLocation getCurrentLocation() {
     @Override
     public String getText()
     {
-        if (_closed) {
+        if (_currToken == null) {
             return null;
         }
         // need to separate handling a bit...
@@ -213,7 +213,7 @@ public String getText()
                 return n.asText();
             }
         default:
-        	return (_currToken == null) ? null : _currToken.asString();
+            return _currToken.asString();
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -1,5 +1,7 @@
 package com.fasterxml.jackson.databind.type;
 
+import java.util.Objects;
+
 import com.fasterxml.jackson.databind.JavaType;
 
 /**
@@ -31,7 +33,7 @@ protected ReferenceType(Class<?> cls, TypeBindings bindings,
             JavaType anchorType,
             Object valueHandler, Object typeHandler, boolean asStatic)
     {
-        super(cls, bindings, superClass, superInts, refType.hashCode(),
+        super(cls, bindings, superClass, superInts, Objects.hashCode(refType),
                 valueHandler, typeHandler, asStatic);
         _referencedType = refType;
         _anchorType = (anchorType == null) ? this : anchorType;

File: src/main/java/com/fasterxml/jackson/databind/util/EnumResolver.java
Patch:
@@ -110,7 +110,9 @@ protected static EnumResolver _constructUsingToString(Class<?> enumCls0,
         final Enum<?>[] enumConstants = _enumConstants(enumCls0);
         HashMap<String, Enum<?>> map = new HashMap<String, Enum<?>>();
         final String[][] allAliases = new String[enumConstants.length][];
-        ai.findEnumAliases(enumCls, enumConstants, allAliases);
+        if (ai != null) {
+            ai.findEnumAliases(enumCls, enumConstants, allAliases);
+        }
 
         // from last to first, so that in case of duplicate values, first wins
         for (int i = enumConstants.length; --i >= 0; ) {

File: src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java
Patch:
@@ -113,6 +113,7 @@ public static String format(Date date, boolean millis, TimeZone tz, Locale loc)
      * @throws ParseException if the date is not in the appropriate format
      */
     public static Date parse(String date, ParsePosition pos) throws ParseException {
+        Objects.requireNonNull(date);
         Exception fail = null;
         try {
             int offset = pos.getIndex();

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -464,7 +464,7 @@ public enum DeserializationFeature implements ConfigFeature
      *<p>
      *<p>
      * Taking above into account, this feature is supported only by extension modules for
-     * Joda and Java 8 date/tyime datatypes.
+     * Joda and Java 8 date/time datatypes.
      * 
      * @since 2.2
      */

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -733,7 +733,7 @@ protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext c
                 continue;
             }
             // Need to copy to a separate buffer first
-            TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
+            TokenBuffer b2 = ctxt.bufferAsCopyOfValue(p);
             tokens.writeFieldName(propName);
             tokens.append(b2);
             try {
@@ -789,7 +789,7 @@ protected Object deserializeWithUnwrapped(JsonParser p, DeserializationContext c
                 tokens.copyCurrentStructure(p);
             } else {
                 // Need to copy to a separate buffer first
-                TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
+                TokenBuffer b2 = ctxt.bufferAsCopyOfValue(p);
                 tokens.writeFieldName(propName);
                 tokens.append(b2);
                 try {
@@ -888,7 +888,7 @@ protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, Deseri
                 tokens.copyCurrentStructure(p);
             } else {
                 // Need to copy to a separate buffer first
-                TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);
+                TokenBuffer b2 = ctxt.bufferAsCopyOfValue(p);
                 tokens.writeFieldName(propName);
                 tokens.append(b2);
                 try {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java
Patch:
@@ -103,7 +103,7 @@ protected Object _deserialize(JsonParser p, DeserializationContext ctxt) throws
                 && !_usesExternalId()
                 && p.hasToken(JsonToken.START_OBJECT)) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
+            TokenBuffer tb = ctxt.bufferForInputBuffering(p);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsDeductionTypeDeserializer.java
Patch:
@@ -123,7 +123,7 @@ public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ct
         // Keep track of processed tokens as we must rewind once after deducing
         // the deserializer to use
         @SuppressWarnings("resource")
-        TokenBuffer tb = new TokenBuffer(p, ctxt);
+        final TokenBuffer tb = ctxt.bufferForInputBuffering(p);
         boolean ignoreCase = ctxt.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);
 
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
Patch:
@@ -107,7 +107,7 @@ public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ct
                 return _deserializeTypedForId(p, ctxt, tb, p.getText());
             }
             if (tb == null) {
-                tb = new TokenBuffer(p, ctxt);
+                tb = ctxt.bufferForInputBuffering(p);
             }
             tb.writeFieldName(name);
             tb.copyCurrentStructure(p);
@@ -120,7 +120,7 @@ protected Object _deserializeTypedForId(JsonParser p, DeserializationContext ctx
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         if (_typeIdVisible) { // need to merge id back in JSON input?
             if (tb == null) {
-                tb = new TokenBuffer(p, ctxt);
+                tb = ctxt.bufferForInputBuffering(p);
             }
             tb.writeFieldName(p.currentName());
             tb.writeString(typeId);

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
Patch:
@@ -107,7 +107,7 @@ protected Object _deserialize(JsonParser p, DeserializationContext ctxt) throws
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.hasToken(JsonToken.START_OBJECT)) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null, false);
+            TokenBuffer tb = ctxt.bufferForInputBuffering(p);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);

File: src/test/java/com/fasterxml/jackson/databind/introspect/IntrospectorPairTest.java
Patch:
@@ -657,9 +657,9 @@ public ReadableInjectedBean(@JacksonInject(useInput = OptBoolean.FALSE) Unreadab
             this.injectBean = injectBean;
         }
         @JsonProperty
-        private String foo;
+        String foo;
         @JsonIgnore
-        private UnreadableBean injectBean;
+        UnreadableBean injectBean;
     }
 
     static class UnreadableInjectedBean {
@@ -688,7 +688,7 @@ public void testMergingIntrospectorsForInjection() throws Exception {
 
         boolean successReadingUnreadableInjectedBean;
         try {
-            UnreadableInjectedBean noBean = mapper.readValue("{\"foo\": \"bob\"}", UnreadableInjectedBean.class);
+            /*UnreadableInjectedBean noBean =*/ mapper.readValue("{\"foo\": \"bob\"}", UnreadableInjectedBean.class);
             successReadingUnreadableInjectedBean = true;
         } catch (JsonMappingException e) {
             successReadingUnreadableInjectedBean = false;

File: src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java
Patch:
@@ -20,9 +20,9 @@ public void testPathRoundtrip() throws Exception
 
         Path p = mapper.readValue(json, Path.class);
         assertNotNull(p);
-        
+
         assertEquals(input.toUri(), p.toUri());
-        assertEquals(input, p);
+        assertEquals(input.toAbsolutePath(), p.toAbsolutePath());
     }
 
     // [databind#1688]:
@@ -41,6 +41,6 @@ public void testPolymorphicPath() throws Exception
         Object ob = obs[0];
         assertTrue(ob instanceof Path);
 
-        assertEquals(input.toString(), ob.toString());
+        assertEquals(input.toAbsolutePath().toString(), ob.toString());
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java
Patch:
@@ -302,7 +302,9 @@ public JacksonInject.Value findInjectableValue(AnnotatedMember m) {
         JacksonInject.Value r = _primary.findInjectableValue(m);
         if (r == null || r.getUseInput() == null) {
             JacksonInject.Value secondary = _secondary.findInjectableValue(m);
-            r = (r == null || secondary == null) ? secondary : r.withUseInput(secondary.getUseInput());
+            if (secondary != null) {
+                r = (r == null) ? secondary : r.withUseInput(secondary.getUseInput());
+            }
         }
         return r;
     }

File: src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java
Patch:
@@ -999,7 +999,7 @@ public static void checkAndFixAccess(Member member, boolean force)
             // 14-Apr-2021, tatu: [databind#3118] Java 9/JPMS causes new fails...
             //    But while our baseline is Java 8, must check name
         } catch (RuntimeException se) {
-            if (!"InaccessibleObjectException".equals(se.getClass().getSimpleName())) {
+            if ("InaccessibleObjectException".equals(se.getClass().getSimpleName())) {
                 throw new IllegalArgumentException(String.format(
 "Failed to call `setAccess()` on %s '%s' due to `%s`, problem: %s",
 member.getClass().getTypeName(), member.getName(), se.getClass().getName(), se.getMessage()),

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java
Patch:
@@ -212,7 +212,9 @@ public StringBuilder getGenericSignature(StringBuilder sb) {
     protected String buildCanonicalName() {
         StringBuilder sb = new StringBuilder();
         sb.append(_class.getName());
-        if (_elementType != null) {
+        // 10-Apr-2021, tatu: [databind#3108] Ensure we have at least nominally
+        //   compatible type declaration (weak guarantee but better than nothing)
+        if ((_elementType != null) && _hasNTypeParameters(1)) {
             sb.append('<');
             sb.append(_elementType.toCanonical());
             sb.append('>');

File: src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java
Patch:
@@ -189,7 +189,9 @@ public JavaType refine(Class<?> rawType, TypeBindings bindings,
     protected String buildCanonicalName() {
         StringBuilder sb = new StringBuilder();
         sb.append(_class.getName());
-        if (_keyType != null) {
+        // 10-Apr-2021, tatu: [databind#3108] Ensure we have at least nominally
+        //   compatible type declaration (weak guarantee but better than nothing)
+        if ((_keyType != null) && _hasNTypeParameters(2)) {
             sb.append('<');
             sb.append(_keyType.toCanonical());
             sb.append(',');

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java
Patch:
@@ -167,7 +167,7 @@ public void setValue(Object pojo, Object value) throws IllegalArgumentException
             _method.invoke(pojo, value);
         } catch (IllegalAccessException | InvocationTargetException e) {
             throw new IllegalArgumentException("Failed to setValue() with method "
-                    +getFullName()+": "+e.getMessage(), e);
+                    +getFullName()+": "+ClassUtil.exceptionMessage(e), e);
         }
     }
 
@@ -178,7 +178,7 @@ public Object getValue(Object pojo) throws IllegalArgumentException
             return _method.invoke(pojo, (Object[]) null);
         } catch (IllegalAccessException | InvocationTargetException e) {
             throw new IllegalArgumentException("Failed to getValue() with method "
-                    +getFullName()+": "+e.getMessage(), e);
+                    +getFullName()+": "+ClassUtil.exceptionMessage(e), e);
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java
Patch:
@@ -94,6 +94,8 @@ public Class<?> getRawType() {
     
     @Override
     public final Object call() throws Exception {
+        // 31-Mar-2021, tatu: Note! This is faster than calling without arguments
+        //   because JDK in its wisdom would otherwise allocate `new Object[0]` to pass
         return _method.invoke(null);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -356,7 +356,7 @@ public Object instantiateBean(boolean fixAccess) {
             ac.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
         }
         try {
-            return ac.getAnnotated().newInstance();
+            return ac.call();
         } catch (Exception e) {
             Throwable t = e;
             while (t.getCause() != null) {

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -577,8 +577,8 @@ public enum MapperFeature implements ConfigFeature
     private final long _mask;
 
     // @since 2.13
-    public static int collectLongDefaults() {
-        int flags = 0;
+    public static long collectLongDefaults() {
+        long flags = 0;
         for (MapperFeature value : MapperFeature.values()) {
             if (value.enabledByDefault()) {
                 flags |= value.getLongMask();

File: src/test/java/com/fasterxml/jackson/databind/mixins/MapperMixinsCopy1998Test.java
Patch:
@@ -88,6 +88,7 @@ public MyChildB(String name) {
         }
     }
 
+    @SuppressWarnings("deprecation")
     public void testB_KO() throws Exception
     {
         final ObjectMapper DEFAULT = defaultMapper();

File: src/test/java/com/fasterxml/jackson/databind/module/TestDuplicateRegistration.java
Patch:
@@ -28,10 +28,11 @@ public void setupModule(SetupContext context) {
         }
     }
 
+    @SuppressWarnings("deprecation")
     public void testDuplicateRegistration() throws Exception
     {
         // by default, duplicate registration should be prevented
-        ObjectMapper mapper = new ObjectMapper();
+        ObjectMapper mapper = newJsonMapper();
         assertTrue(mapper.isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS));
         MyModule module = new MyModule();
         mapper.registerModule(module);

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperBuilder.java
Patch:
@@ -101,16 +101,19 @@ public TokenStreamFactory streamFactory() {
     /**********************************************************************
      */
 
+    @SuppressWarnings("deprecation")
     public B enable(MapperFeature... features) {
         _mapper.enable(features);
         return _this();
     }
 
+    @SuppressWarnings("deprecation")
     public B disable(MapperFeature... features) {
         _mapper.disable(features);
         return _this();
     }
 
+    @SuppressWarnings("deprecation")
     public B configure(MapperFeature feature, boolean state) {
         _mapper.configure(feature, state);
         return _this();

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java
Patch:
@@ -214,7 +214,7 @@ public Map.Entry<Object,Object> deserialize(JsonParser p, DeserializationContext
                 value = valueDes.deserializeWithType(p, ctxt, typeDeser);
             }
         } catch (Exception e) {
-            wrapAndThrow(e, Map.Entry.class, keyStr);
+            wrapAndThrow(ctxt, e, Map.Entry.class, keyStr);
         }
 
         // Close, but also verify that we reached the END_OBJECT

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -303,6 +303,8 @@ protected boolean verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolea
             }
 
             // one more thing: ok to override in sub-class
+            // 23-Feb-2021, tatu: Second check makes no sense to me, is probably
+            //   erroneous; remove from 2.13 (but leave in 2.12.x to minimize any risk)
             if (verify && (oldOne.getClass() == newOne.getClass())) {
                 // [databind#667]: avoid one particular class of bogus problems
                 Class<?> oldType = oldOne.getRawParameterType(0);
@@ -323,7 +325,7 @@ protected boolean verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolea
                 }
                 // otherwise, which one to choose?
                 else if (newType.isAssignableFrom(oldType)) {
-                    // new type more generic, use old
+                    // new type less specific use old
                     return false;
                 } else if (oldType.isAssignableFrom(newType)) {
                     // new type more specific, use it

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
Patch:
@@ -172,7 +172,7 @@ public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt,
         ExtTypedProperty prop = _properties[index];
         boolean canDeserialize;
         if (prop.hasTypePropertyName(propName)) {
-            // 19-Feb-2021, tatu: as per [databind#3005], don't use "getText()"
+            // 19-Feb-2021, tatu: as per [databind#3008], don't use "getText()"
             //    since that'll coerce null value into String "null"...
             _typeIds[index] = p.getValueAsString();
             p.skipChildren();

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -1021,7 +1021,6 @@ public Boolean hasAsValue(Annotated a) {
      * @since 2.9
      */
     public Boolean hasAnyGetter(Annotated ann) {
-
         // 21-Nov-2016, tatu: Delegate in 2.9; remove redirect from later versions
         if (ann instanceof AnnotatedMethod) {
             if (hasAnyGetterAnnotation((AnnotatedMethod) ann)) {

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -1938,7 +1938,7 @@ public JsonMappingException invalidTypeIdException(JavaType baseType, String typ
      */
     public JsonMappingException missingTypeIdException(JavaType baseType,
             String extraDesc) {
-        String msg = String.format("Missing type id when trying to resolve subtype of %s",
+        String msg = String.format("Could not resolve subtype of %s",
                 baseType);
         return InvalidTypeIdException.from(_parser, _colonConcat(msg, extraDesc), baseType, null);
     }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/JsonTypeInfoCaseInsensitive1983Test.java
Patch:
@@ -54,7 +54,7 @@ public void testReadMixedCasePropertyName() throws Exception
             MAPPER.readValue(serialised, Filter.class);
             fail("Should not pass");
         } catch (InvalidTypeIdException e) {
-            verifyException(e, "Missing type id when trying to resolve subtype");
+            verifyException(e, "missing type id property");
         }
 
         ObjectMapper mapper = jsonMapperBuilder()

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/UtilCollectionsTypesTest.java
Patch:
@@ -41,11 +41,11 @@ public void testEmptyMap() throws Exception {
      */
 
     public void testSingletonList() throws Exception {
-        _verifyCollection(Collections.singletonList(Arrays.asList("TheOne")));
+        _verifyCollection(Collections.singletonList("TheOne"));
     }
 
     public void testSingletonSet() throws Exception {
-        _verifyCollection(Collections.singleton(Arrays.asList("TheOne")));
+        _verifyCollection(Collections.singleton("TheOne"));
     }
 
     public void testSingletonMap() throws Exception {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java
Patch:
@@ -985,7 +985,7 @@ protected Object _mapObjectWithDups(JsonParser p, DeserializationContext ctxt,
                 newValue = deserialize(p, ctxt);
                 oldValue = result.put(nextKey, newValue);
                 if ((oldValue != null) && squashDups) {
-                    _squashDups(result, key, oldValue, newValue);
+                    _squashDups(result, nextKey, oldValue, newValue);
                 }
                 nextKey = p.nextFieldName();
             }

File: src/test/java/com/fasterxml/jackson/databind/struct/FormatFeatureAcceptSingleTest.java
Patch:
@@ -60,7 +60,7 @@ static class StringListWrapper {
     static class StringListWrapperWithBuilder {
         public final List<String> values;
 
-        private StringListWrapperWithBuilder(List<String> values) {
+        StringListWrapperWithBuilder(List<String> values) {
             this.values = values;
         }
 
@@ -102,7 +102,7 @@ static class RolesInList {
     static class RolesInListWithBuilder {
         public final List<Role> roles;
 
-        private RolesInListWithBuilder(List<Role> roles) {
+        RolesInListWithBuilder(List<Role> roles) {
             this.roles = roles;
         }
 
@@ -137,7 +137,7 @@ static class Role {
 
     @JsonDeserialize
     static class WrapperWithStringFactory {
-        private final Role role;
+        final Role role;
 
         private WrapperWithStringFactory(Role role) {
             this.role = role;

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -21,9 +21,9 @@
  * troubleshooting.
  */
 public class JsonMappingException
-    extends JsonProcessingException
+    extends DatabindException // @since 2.13
 {
-    private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = 3L;
 
     /**
      * Let's limit length of reference chain, to limit damage in cases

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -2276,7 +2276,7 @@ protected void _reportUndetectableSource(Object src) throws StreamReadException
      * Method called to locate deserializer for the passed root-level value.
      */
     protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt)
-        throws JsonMappingException
+        throws DatabindException
     {
         if (_rootDeserializer != null) {
             return _rootDeserializer;
@@ -2306,7 +2306,7 @@ protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext
      * @since 2.6
      */
     protected JsonDeserializer<Object> _findTreeDeserializer(DeserializationContext ctxt)
-        throws JsonMappingException
+        throws DatabindException
     {
         final JavaType nodeType = _jsonNodeType();
         JsonDeserializer<Object> deser = _rootDeserializers.get(nodeType);

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/CollectionDeserTest.java
Patch:
@@ -276,18 +276,18 @@ public void testWrapExceptions() throws Exception
 
         try {
             mapper.readValue("[{}]", new TypeReference<List<SomeObject>>() {});
-        } catch (JsonMappingException exc) {
+        } catch (DatabindException exc) {
             assertEquals("I want to catch this exception", exc.getOriginalMessage());
         } catch (RuntimeException exc) {
-            fail("The RuntimeException should have been wrapped with a JsonMappingException.");
+            fail("The RuntimeException should have been wrapped with a DatabindException.");
         }
 
         ObjectMapper mapperNoWrap = new ObjectMapper();
         mapperNoWrap.disable(DeserializationFeature.WRAP_EXCEPTIONS);
 
         try {
             mapperNoWrap.readValue("[{}]", new TypeReference<List<SomeObject>>() {});
-        } catch (JsonMappingException exc) {
+        } catch (DatabindException exc) {
             fail("It should not have wrapped the RuntimeException.");
         } catch (RuntimeException exc) {
             assertEquals("I want to catch this exception", exc.getMessage());

File: src/test/java/com/fasterxml/jackson/databind/seq/ReadRecoveryTest.java
Patch:
@@ -34,7 +34,7 @@ public void testRootBeans() throws Exception
         try {
             bean = it.nextValue();
             fail("Should not have succeeded");
-        } catch (JsonMappingException e) {
+        } catch (DatabindException e) {
             verifyException(e, "Unrecognized field \"x\"");
         }
         // 21-May-2015, tatu: With [databind#734], recovery, we now know there's no more data!
@@ -59,7 +59,7 @@ public void testSimpleRootRecovery() throws Exception
         // second one problematic
         try {
             it.nextValue();
-        } catch (JsonMappingException e) {
+        } catch (DatabindException e) {
             verifyException(e, "Unrecognized field \"foo\"");
         }
 
@@ -88,7 +88,7 @@ public void testSimpleArrayRecovery() throws Exception
         // second one problematic
         try {
             it.nextValue();
-        } catch (JsonMappingException e) {
+        } catch (DatabindException e) {
             verifyException(e, "Unrecognized field \"foo\"");
         }
 

File: src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithUnknown650.java
Patch:
@@ -24,7 +24,7 @@ public void testFailOnUnknownPropertyUnwrapped() throws Exception
         try {
             MAPPER.readValue(aposToQuotes(JSON), A.class);
             fail("Exception was not thrown on unkown property");
-        } catch (JsonMappingException e) {
+        } catch (DatabindException e) {
             verifyException(e, "Unrecognized field");
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -401,7 +401,7 @@ protected final Collection<Object> handleNonArray(JsonParser p, DeserializationC
                 value = valueDes.deserializeWithType(p, ctxt, typeDeser);
             }
         } catch (Exception e) {
-            boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
+            boolean wrap = ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
             if (!wrap) {
                 ClassUtil.throwIfRTE(e);
             }

File: src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java
Patch:
@@ -23,7 +23,7 @@ protected ValueNode() { }
 
     @Override
     protected JsonNode _at(JsonPointer ptr) {
-        // 02-Jan-2020, tatu: As per [databind#3003] must return `null` and NOT
+        // 02-Jan-2020, tatu: As per [databind#3005] must return `null` and NOT
         //    "missing node"
         return null;
     }

File: src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java
Patch:
@@ -23,9 +23,9 @@ protected ValueNode() { }
 
     @Override
     protected JsonNode _at(JsonPointer ptr) {
-        // will only allow direct matches, but no traversal through
-        // (base class checks for direct match)
-        return MissingNode.getInstance();
+        // 02-Jan-2020, tatu: As per [databind#3003] must return `null` and NOT
+        //    "missing node"
+        return null;
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -232,6 +232,9 @@ public class SubTypeValidator
         // (derivative of #2469)
         s.add("com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool");
 
+        // [databind#303]: another case of embedded Xalan (derivative of #2469)
+        s.add("org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -851,7 +851,8 @@ protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,
     }
 
     /**
-     * Helper method called when there is the explicit "is-creator" with mode of "properties-based"
+     * Helper method called when there is the explicit "is-creator" annotation with mode
+     * of "properties-based"
      *
      * @since 2.9.2
      */
@@ -1072,7 +1073,6 @@ private void _checkImplicitlyNamedConstructors(DeserializationContext ctxt,
         }
     }
 
-
     protected boolean _handleSingleArgumentCreator(CreatorCollector creators,
             AnnotatedWithParams ctor, boolean isCreator, boolean isVisible)
     {

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -869,9 +869,7 @@ public String extractScalarFromObject(JsonParser p, JsonDeserializer<?> deser,
             Class<?> scalarType)
         throws IOException
     {
-        return reportInputMismatch(scalarType, String.format(
-"Cannot deserialize value of type %s from %s (token `JsonToken.START_OBJECT`)",
-ClassUtil.getClassDescription(scalarType), _shapeForToken(JsonToken.START_OBJECT)));
+        return (String) handleUnexpectedToken(scalarType, p);
     }
 
     /*

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandler1767Test.java
Patch:
@@ -41,5 +41,4 @@ public void testPrimitivePropertyWithHandler() throws Exception {
         assertNotNull(result);
         assertEquals(1, result.a);
     }
-    
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -403,12 +403,13 @@ protected Object _deserializeUsingPropertyBased(final JsonParser p, final Deseri
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
+            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             // Object Id property?
-            if (buffer.readIdProperty(propName)) {
+            if (buffer.readIdProperty(propName) && creatorProp == null) {
                 continue;
             }
             // creator property?
-            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
+
             if (creatorProp != null) {
                 // Last creator property to set?
                 Object value;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -627,7 +627,7 @@ protected final Float _parseFloat(JsonParser p, DeserializationContext ctxt)
             //     considered "native" representation as JSON does not allow as numbers,
             //     and hence not bound by coercion rules
             {
-                Float nan = _checkFloatNaN(text);
+                Float nan = _checkFloatSpecialValue(text);
                 if (nan != null) {
                     return nan;
                 }
@@ -716,7 +716,7 @@ protected final Double _parseDouble(JsonParser p, DeserializationContext ctxt) t
             //     considered "native" representation as JSON does not allow as numbers,
             //     and hence not bound by coercion rules
             {
-                Double nan = this._checkDoubleNaN(text);
+                Double nan = this._checkDoubleSpecialValue(text);
                 if (nan != null) {
                     return nan;
                 }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3227,7 +3227,7 @@ public JsonParser treeAsTokens(TreeNode n) {
     @Override
     public <T> T treeToValue(TreeNode n, Class<T> valueType)
         throws IllegalArgumentException,
-            JsonProcessingException // is NOT actually thrown but retained as per #2878
+            JsonProcessingException
     {
         if (n == null) {
             return null;
@@ -3255,6 +3255,8 @@ public <T> T treeToValue(TreeNode n, Class<T> valueType)
                 }
             }
             return readValue(treeAsTokens(n), valueType);
+        } catch (JsonProcessingException e) {
+            throw e;
         } catch (IOException e) { // should not occur, no real i/o...
             throw new IllegalArgumentException(e.getMessage(), e);
         }

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -149,8 +149,8 @@ public enum DeserializationFeature implements ConfigFeature
     /**
      * Feature that determines what happens when type of a polymorphic
      * value (indicated for example by {@link com.fasterxml.jackson.annotation.JsonTypeInfo})
-     * cannot be found (missing) or resolved (invalid class name, unmappable id);
-     * if enabled, an exception ir thrown; if false, null value is used instead.
+     * cannot be found (missing) or resolved (invalid class name, non-mappable id);
+     * if enabled, an exception is thrown; if false, null value is used instead.
      *<p>
      * Feature is enabled by default so that exception is thrown for missing or invalid
      * type information.

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java
Patch:
@@ -32,15 +32,15 @@ public AsExternalTypeDeserializer(AsExternalTypeDeserializer src,
             BeanProperty property) {
         super(src, property);
     }
-    
+
     @Override
     public TypeDeserializer forProperty(BeanProperty prop) {
         if (prop == _property) { // usually if it's null
             return this;
         }
         return new AsExternalTypeDeserializer(this, prop);
     }
-    
+
     @Override
     public As getTypeInclusion() { return As.EXTERNAL_PROPERTY; }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/DataFormatReaders.java
Patch:
@@ -248,7 +248,7 @@ private Match _findFormat(AccessorForReader acc) throws IOException
     /**
      * We need sub-class here as well, to be able to access efficiently.
      */
-    protected class AccessorForReader extends InputAccessor.Std
+    protected static class AccessorForReader extends InputAccessor.Std
     {
         public AccessorForReader(InputStream in, byte[] buffer) {
             super(in, buffer);

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -499,7 +499,7 @@ private JavaType modifyTypeByAnnotation(DeserializationContext ctxt,
                     KeyDeserializer kd = ctxt.keyDeserializerInstance(a, kdDef);
                     if (kd != null) {
                         type = ((MapLikeType) type).withKeyValueHandler(kd);
-                        keyType = type.getKeyType(); // just in case it's used below
+                        // keyType = type.getKeyType(); // just in case it's used below
                     }
                 }
             }            
@@ -511,7 +511,7 @@ private JavaType modifyTypeByAnnotation(DeserializationContext ctxt,
                 if (cdDef != null) {
                     JsonDeserializer<?> cd = null;
                     if (cdDef instanceof JsonDeserializer<?>) {
-                        cdDef = (JsonDeserializer<?>) cdDef;
+                        cd = (JsonDeserializer<?>) cdDef;
                     } else {
                         Class<?> cdClass = _verifyAsClass(cdDef, "findContentDeserializer", JsonDeserializer.None.class);
                         if (cdClass != null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
Patch:
@@ -586,7 +586,7 @@ private final SettableBeanProperty _find2(String key, int slot, Object match)
         }
         // no? secondary?
         int hashSize = _hashMask+1;
-        int ix = hashSize + (slot>>1) << 1;
+        int ix = (hashSize + (slot>>1)) << 1;
         match = _hashArea[ix];
         if (key.equals(match)) {
             return (SettableBeanProperty) _hashArea[ix+1];
@@ -627,7 +627,7 @@ private SettableBeanProperty _find2ViaAlias(String key, int slot, Object match)
     {
         // no? secondary?
         int hashSize = _hashMask+1;
-        int ix = hashSize + (slot>>1) << 1;
+        int ix = (hashSize + (slot>>1)) << 1;
         match = _hashArea[ix];
         if (key.equals(match)) {
             return (SettableBeanProperty) _hashArea[ix+1];

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
Patch:
@@ -1,7 +1,5 @@
 package com.fasterxml.jackson.databind.deser.std;
 
-import java.io.IOException;
-
 import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
@@ -13,6 +11,8 @@
 import com.fasterxml.jackson.databind.type.LogicalType;
 import com.fasterxml.jackson.databind.util.AccessPattern;
 import com.fasterxml.jackson.databind.util.ObjectBuffer;
+import java.io.IOException;
+import java.util.Objects;
 
 /**
  * Separate implementation for serializing String arrays (instead of
@@ -123,7 +123,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanPro
             deser = null;
         }
         if ((_elementDeserializer == deser)
-                && (_unwrapSingle == unwrapSingle)
+                && (Objects.equals(_unwrapSingle, unwrapSingle))
                 && (_nullProvider == nuller)) {
             return this;
         }

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -183,7 +183,7 @@ public String findEnumValue(Enum<?> value)
         //   reasons, including odd representation JVM uses); has to do for now
         try {
             // We know that values are actually static fields with matching name so:
-            Field f = value.getClass().getField(value.name());
+            Field f = value.getDeclaringClass().getField(value.name());
             if (f != null) {
                 JsonProperty prop = f.getAnnotation(JsonProperty.class);
                 if (prop != null) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/MethodGenericTypeResolver.java
Patch:
@@ -116,7 +116,7 @@ static TypeBindings bindMethodTypeParameters(
                             // No way to satisfy the requested type.
                             return null;
                         }
-                        if (existingIsSubtype ^ newIsSubtype && newIsSubtype) {
+                        if ((existingIsSubtype ^ newIsSubtype) && newIsSubtype) {
                             // If the new type is more specific than the existing type, the new type replaces the old.
                             types.set(existingIndex, bindTarget);
                         }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java
Patch:
@@ -1,13 +1,13 @@
 package com.fasterxml.jackson.databind.ser.std;
 
-import java.io.IOException;
-
 import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.type.WritableTypeId;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.*;
+import java.io.IOException;
+import java.util.Objects;
 
 /**
  * Intermediate base class for serializers used for various
@@ -98,7 +98,7 @@ public JsonSerializer<?> createContextual(SerializerProvider serializers,
             JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
             if (format != null) {
                 unwrapSingle = format.getFeature(JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
-                if (unwrapSingle != _unwrapSingle) {
+                if (!Objects.equals(unwrapSingle, _unwrapSingle)) {
                     return _withResolved(property, unwrapSingle);
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/util/ArrayIterator.java
Patch:
@@ -7,6 +7,7 @@
  * Iterator implementation used to efficiently expose contents of an
  * Array as read-only iterator.
  */
+@SuppressWarnings("IterableAndIterator")
 public class ArrayIterator<T> implements Iterator<T>, Iterable<T>
 {
     private final T[] _a;

File: src/main/java/com/fasterxml/jackson/databind/util/CompactStringObjectMap.java
Patch:
@@ -112,7 +112,7 @@ private final Object _find2(String key, int slot, Object match)
             return null;
         }
         int hashSize = _hashMask+1;
-        int ix = hashSize + (slot>>1) << 1;
+        int ix = (hashSize + (slot>>1)) << 1;
         match = _hashArea[ix];
         if (key.equals(match)) {
             return _hashArea[ix+1];

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java
Patch:
@@ -186,7 +186,7 @@ public void testSampleDoc() throws Exception
         // and that's all folks!
     }
 
-    @SuppressWarnings("unlikely-arg-type")
+    @SuppressWarnings({"unlikely-arg-type", "CollectionIncompatibleType"})
     public void testUntypedMap() throws Exception
     {
         // to get "untyped" default map-to-map, pass Object.class

File: src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java
Patch:
@@ -198,7 +198,7 @@ public void testDateFormatConfig() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
         TimeZone tz1 = TimeZone.getTimeZone("America/Los_Angeles");
-        TimeZone tz2 = TimeZone.getTimeZone("Central Standard Time");
+        TimeZone tz2 = TimeZone.getTimeZone("US/Central");
 
         // sanity checks
         assertEquals(tz1, tz1);

File: src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
Patch:
@@ -200,6 +200,7 @@ public void testEnumType()
         assertFalse(enumSubT.getRawClass().isEnum());
     }
 
+    @SuppressWarnings("SelfComparison")
     public void testClassKey()
     {
         ClassKey key = new ClassKey(String.class);

File: src/test/java/com/fasterxml/jackson/databind/introspect/MethodGenericTypeResolverTest.java
Patch:
@@ -49,7 +49,7 @@ public static class StubA {
         private final String value;
 
         @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
-        private StubA(String value) {
+        StubA(String value) {
             this.value = value;
         }
 

File: src/test/java/com/fasterxml/jackson/databind/ser/GenericTypeSerializationTest.java
Patch:
@@ -399,8 +399,7 @@ interface Indexed<T> {
     }
 
     public static class TestIndexed implements Indexed<String> {
-
-        private final UUID value;
+        final UUID value;
 
         @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
         TestIndexed(UUID value) {
@@ -415,7 +414,7 @@ public String index() {
 
     public static final class IndexedList<T extends Indexed<K>, K> extends AbstractList<T> {
 
-        private final ArrayList<T> delegate;
+        final ArrayList<T> delegate;
 
         private IndexedList(ArrayList<T> delegate) {
             this.delegate = delegate;

File: src/test/java/com/fasterxml/jackson/databind/convert/CoerceContainersTest.java
Patch:
@@ -161,7 +161,7 @@ private void _verifyNoCoercion(JavaType targetType) throws Exception {
             fail("Should not pass");
         } catch (Exception e) {
             verifyException(e, "Cannot deserialize value of type");
-            verifyException(e, "from empty String");
+            verifyException(e, "from empty String", "from String value (token `JsonToken.VALUE_STRING`)");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/ext/SqlDateSerializationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.ser.jdk;
+package com.fasterxml.jackson.databind.ext;
 
 import java.io.IOException;
 import java.util.Calendar;

File: src/test/java/com/fasterxml/jackson/databind/ext/SqlTimestampDeserializationTest.java
Patch:
@@ -1,11 +1,11 @@
-package com.fasterxml.jackson.databind.deser.jdk;
+package com.fasterxml.jackson.databind.ext;
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 
 import com.fasterxml.jackson.databind.*;
 
-public class TimestampDeserializationTest
+public class SqlTimestampDeserializationTest
     extends BaseMapTest
 {
     private final ObjectMapper MAPPER = newJsonMapper();

File: src/test/java/com/fasterxml/jackson/databind/interop/ExceptionSerializableTest1195.java
Patch:
@@ -27,14 +27,14 @@ public void testExceptionSerializabilitySimple() throws Exception
             MAPPER.readValue("{\"x\": \"B\"}", ClassToRead.class);
             fail("Should not have passed");
         } catch (JsonMappingException e) {
-            verifyException(e, "not a valid Integer");
+            verifyException(e, "Cannot deserialize value of type `int` from String \"B\": not a valid `int` value");
             _testSerializability(e);
         }
         try {
             MAPPER.readValue("{\"classToRead\": {\"x\": \"B\"}}", ContainerClassToRead.class);
             fail("Should not have passed");
         } catch (JsonMappingException e) {
-            verifyException(e, "not a valid Integer");
+            verifyException(e, "Cannot deserialize value of type `int` from String \"B\": not a valid `int` value");
             _testSerializability(e);
         }
     }
@@ -46,7 +46,7 @@ public void testExceptionSerializabilityStructured() throws Exception
                     ContainerClassesToRead.class);
             fail("Should not have passed");
         } catch (JsonMappingException e) {
-            verifyException(e, "not a valid Integer");
+            verifyException(e, "Cannot deserialize value of type `int` from String \"B\": not a valid `int` value");
             _testSerializability(e);
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestPolymorphicDelegating.java
Patch:
@@ -43,7 +43,6 @@ public void testAbstractDelegateWithCreator() throws Exception
         Issue580Bean input = new Issue580Bean(new Issue580Impl(13));
         ObjectMapper mapper = new ObjectMapper();
         String json = mapper.writeValueAsString(input);
-
         Issue580Bean result = mapper.readValue(json, Issue580Bean.class);
         assertNotNull(result);
         assertNotNull(result.value);

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -216,8 +216,9 @@ protected BeanPropertyWriter buildWriter(SerializerProvider prov,
         case ALWAYS: // default
         default:
             // we may still want to suppress empty collections
-            if (actualType.isContainerType()
-                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {
+            @SuppressWarnings("deprecation")
+            final SerializationFeature emptyJsonArrays = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
+            if (actualType.isContainerType() && !_config.isEnabled(emptyJsonArrays)) {
                 valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;
             }
             break;

File: src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
Patch:
@@ -306,7 +306,7 @@ protected Map<String,Object> writeAndMap(ObjectMapper m, Object value)
         throws IOException
     {
         String str = m.writeValueAsString(value);
-        return (Map<String,Object>) m.readValue(str, Map.class);
+        return (Map<String,Object>) m.readValue(str, LinkedHashMap.class);
     }
     
     protected String serializeAsString(ObjectMapper m, Object value)

File: src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java
Patch:
@@ -12,6 +12,8 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.util.StdConverter;
 
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+
 /**
  * Tests for various conversions, especially ones using
  * {@link ObjectMapper#convertValue(Object, Class)}.
@@ -79,6 +81,7 @@ public ConvertingBean(int v1, int v2) {
        }
     }
 
+    @JsonPropertyOrder({ "a", "b" })
     public static class DummyBean {
        public final int a, b;
        public DummyBean(int v1, int v2) {

File: src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer.java
Patch:
@@ -10,6 +10,8 @@
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.fasterxml.jackson.databind.util.StdConverter;
 
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+
 public class TestConvertingSerializer
     extends com.fasterxml.jackson.databind.BaseMapTest
 {
@@ -140,6 +142,7 @@ public void serialize(Target a, JsonGenerator jsonGenerator, SerializerProvider
     }
 
     // [databind#731]
+    @JsonPropertyOrder({ "a", "b" })
     public static class DummyBean {
         public final int a, b;
         public DummyBean(int v1, int v2) {

File: src/test/java/com/fasterxml/jackson/databind/deser/CyclicTypesDeserTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.deser;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 import com.fasterxml.jackson.databind.*;
 
 /**
@@ -42,6 +43,7 @@ static class GenericLink<T> {
     static class StringLink extends GenericLink<String> {
     }
 
+    @JsonPropertyOrder({ "id", "parent" })
     static class Selfie405 {
         public int id;
 

File: src/test/java/com/fasterxml/jackson/databind/format/MapEntryFormatTest.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 import com.fasterxml.jackson.databind.*;
 
 public class MapEntryFormatTest extends BaseMapTest
@@ -16,13 +17,14 @@ static class BeanWithMapEntry {
 
         protected BeanWithMapEntry() { }
         public BeanWithMapEntry(String key, String value) {
-            Map<String,String> map = new HashMap<>();
+            Map<String,String> map = new LinkedHashMap<>();
             map.put(key, value);
             entry = map.entrySet().iterator().next();
         }
     }
 
     @JsonFormat(shape=JsonFormat.Shape.OBJECT)
+    @JsonPropertyOrder({ "key", "value" })
     static class MapEntryAsObject implements Map.Entry<String,String> {
         protected String key, value;
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ExistingPropertyTest.java
Patch:
@@ -6,6 +6,7 @@
 import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 
 import com.fasterxml.jackson.core.type.TypeReference;
 
@@ -29,6 +30,7 @@ static abstract class Fruit {
     }
 
     @JsonTypeName("apple")
+    @JsonPropertyOrder({ "name", "seedCount", "type" })
     static class Apple extends Fruit
     {
         public int seedCount;
@@ -43,6 +45,7 @@ public Apple(String name, int b) {
     }
 
     @JsonTypeName("orange")
+    @JsonPropertyOrder({ "name", "color", "type" })
     static class Orange extends Fruit
     {
         public String color;

File: src/test/java/com/fasterxml/jackson/databind/ser/AnyGetterTest.java
Patch:
@@ -134,7 +134,7 @@ public void serialize(String value, JsonGenerator gen,
 
     static class Bean2592NoAnnotations
     {
-        protected Map<String, String> properties = new HashMap<>();
+        protected Map<String, String> properties = new LinkedHashMap<>();
 
         @JsonAnyGetter
         public Map<String, String> getProperties() {

File: src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java
Patch:
@@ -8,6 +8,7 @@
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.type.TypeFactory;
@@ -57,6 +58,7 @@ static class WithRootName {
     }
 
     // [databind#412]
+    @JsonPropertyOrder({ "uuid", "type" })
     static class TestCommandParent {
         public String uuid;
         public int type;

File: src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayWithBuilder.java
Patch:
@@ -30,6 +30,7 @@ protected ValueClassXY(int x, int y) {
     }
 
     @JsonFormat(shape=JsonFormat.Shape.ARRAY)
+    @JsonPropertyOrder(alphabetic=true)
     static class SimpleBuilderXY
     {
         public int x, y;

File: src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.struct;
 
 import com.fasterxml.jackson.annotation.JsonUnwrapped;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -68,7 +69,7 @@ public DeepPrefixUnwrap(String str, int x, int y) {
     }
 
     // Let's actually test hierarchic names with unwrapping bit more:
-    
+    @JsonPropertyOrder({ "general", "misc" })
     static class ConfigRoot
     {
         @JsonUnwrapped(prefix="general.")

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -453,8 +453,9 @@ public Character deserialize(JsonParser p, DeserializationContext ctxt)
                 CoercionAction act = ctxt.findCoercionAction(logicalType(), _valueClass, CoercionInputShape.Integer);
                 switch (act) {
                 case Fail:
-                    _checkCoercionActionFail(ctxt, act, "Integer value ("+p.getText()+")");
-                    break;
+                    _checkCoercionFail(ctxt, act, _valueClass, p.getNumberValue(),
+                            "Integer value ("+p.getText()+")");
+                    // fall-through in unlikely case of returning
                 case AsNull:
                     return getNullValue(ctxt);
                 case AsEmpty:

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -766,7 +766,7 @@ public JavaType constructType(TypeReference<?> typeRef)
      * This is typically used only by code in databind itself.
      * 
      * @param type Type of a {@link java.lang.reflect.Member} to resolve
-     * @param bindings Type bindings from the context, often class in which
+     * @param contextBindings Type bindings from the context, often class in which
      *     member declared but may be subtype of that type (to bind actual bound
      *     type parametrers). Not used if {@code type} is of type {@code Class<?>}.
      *

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java
Patch:
@@ -190,7 +190,7 @@ public void setUp() throws Exception
 
     /**
      * Unit test to verify translations of 
-     * {@link PropertyNamingStrategy#SNAKE_CASE} 
+     * {@link PropertyNamingStrategies#SNAKE_CASE} 
      * outside the context of an ObjectMapper.
      */
     public void testLowerCaseStrategyStandAlone()
@@ -265,7 +265,7 @@ public void testLowerCaseUnchangedNames() throws Exception
 
     /**
      * Unit test to verify translations of 
-     * {@link PropertyNamingStrategy#UPPER_CAMEL_CASE } 
+     * {@link PropertyNamingStrategies#UPPER_CAMEL_CASE } 
      * outside the context of an ObjectMapper.
      */
     public void testPascalCaseStandAlone()

File: src/test/java/com/fasterxml/jackson/databind/type/TestAnnotatedClass.java
Patch:
@@ -97,7 +97,6 @@ public void testConstructorIntrospection()
     {
         // Need this call to ensure there is a synthetic constructor being generated
         // (not really needed otherwise)
-        @SuppressWarnings("synthetic-access")
         Bean1005 bean = new Bean1005(13);
         SerializationConfig config = MAPPER.getSerializationConfig();
         JavaType t = MAPPER.constructType(bean.getClass());

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
Patch:
@@ -467,7 +467,7 @@ public boolean hasTypePropertyName(String n) {
         }
 
         public boolean hasDefaultType() {
-            return _typeDeserializer.getDefaultImpl() != null;
+            return _typeDeserializer.hasDefaultImpl();
         }
 
         /**

File: src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java
Patch:
@@ -316,7 +316,7 @@ public void testBufferedLongViaCoercion() throws Exception {
         assertEquals(Long.valueOf(EXP), obj.longObj);
     }
 
-    public void testConversionsOfNull()
+    public void testConversionsOfNull() throws Exception
     {
         // First: `null` value should become `NullNode`
         JsonNode n = MAPPER.valueToTree(null);

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -2370,12 +2370,11 @@ protected EnumResolver constructEnumResolver(Class<?> enumClass,
                 ClassUtil.checkAndFixAccess(jsonValueAccessor.getMember(),
                         config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
             }
-            return EnumResolver.constructUnsafeUsingMethod(enumClass,
-                    jsonValueAccessor, config.getAnnotationIntrospector());
+            return EnumResolver.constructUsingMethod(config, enumClass, jsonValueAccessor);
         }
         // 14-Mar-2016, tatu: We used to check `DeserializationFeature.READ_ENUMS_USING_TO_STRING`
         //   here, but that won't do: it must be dynamically changeable...
-        return EnumResolver.constructUnsafe(enumClass, config.getAnnotationIntrospector());
+        return EnumResolver.constructFor(config, enumClass);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -294,8 +294,7 @@ protected CompactStringObjectMap _getToStringLookup(DeserializationContext ctxt)
         // reduce contention for the initial resolution
         if (lookup == null) {
             synchronized (this) {
-                lookup = EnumResolver.constructUnsafeUsingToString(_enumClass(),
-                        ctxt.getAnnotationIntrospector())
+                lookup = EnumResolver.constructUsingToString(ctxt.getConfig(), _enumClass())
                     .constructLookup();
             }
             _lookupByToString = lookup;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
Patch:
@@ -410,8 +410,8 @@ private EnumResolver _getToStringResolver(DeserializationContext ctxt)
             EnumResolver res = _byToStringResolver;
             if (res == null) {
                 synchronized (this) {
-                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),
-                            ctxt.getAnnotationIntrospector());
+                    res = EnumResolver.constructUsingToString(ctxt.getConfig(),
+                            _byNameResolver.getEnumClass());
                     _byToStringResolver = res;
                 }
             }

File: src/test/java/com/fasterxml/jackson/databind/util/EnumValuesTest.java
Patch:
@@ -52,8 +52,8 @@ public void testConstructWithToString() {
 
     public void testEnumResolver()
     {
-        EnumResolver enumRes = EnumResolver.constructUnsafeUsingToString(ABC.class,
-                MAPPER.getSerializationConfig().getAnnotationIntrospector());
+        EnumResolver enumRes = EnumResolver.constructUsingToString(MAPPER.getDeserializationConfig(),
+                ABC.class);
         assertEquals(ABC.B, enumRes.getEnum(1));
         assertNull(enumRes.getEnum(-1));
         assertNull(enumRes.getEnum(3));

File: src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java
Patch:
@@ -56,7 +56,8 @@ static class MyNoArgException extends Exception
     public void testIOException() throws IOException
     {
         IOException ioe = new IOException("TEST");
-        String json = MAPPER.writeValueAsString(ioe);
+        String json = MAPPER.writerWithDefaultPrettyPrinter()
+                .writeValueAsString(ioe);
         IOException result = MAPPER.readValue(json, IOException.class);
         assertEquals(ioe.getMessage(), result.getMessage());
     }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -143,8 +143,9 @@ public class SubTypeValidator
         // [databind#2814]: anteros-dbcp
         s.add("br.com.anteros.dbcp.AnterosDBCPDataSource");
 
-        // [databind#2642]: javax.swing (jdk)
+        // [databind#2642][databind#2854]: javax.swing (jdk)
         s.add("javax.swing.JEditorPane");
+        s.add("javax.swing.JTextPane");
 
         // [databind#2648], [databind#2653]: shire-core
         s.add("org.apache.shiro.realm.jndi.JndiRealmFactory");

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1061,9 +1061,9 @@ protected void _reportUnwrappedCreatorProperty(DeserializationContext ctxt,
             BeanDescription beanDesc, AnnotatedParameter param)
         throws JsonMappingException
     {
-        ctxt.reportBadDefinition(beanDesc.getType(), String.format(
-                "Cannot define Creator parameter %d as `@JsonUnwrapped`: combination not yet supported",
-                param.getIndex()));
+        ctxt.reportBadTypeDefinition(beanDesc,
+"Cannot define Creator parameter %d as `@JsonUnwrapped`: combination not yet supported",
+                param.getIndex());
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/ser/GenericTypeSerializationTest.java
Patch:
@@ -9,7 +9,7 @@
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-public class TestGenericTypes extends BaseMapTest
+public class GenericTypeSerializationTest extends BaseMapTest
 {
     static class Account {
         private Long id;        

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
Patch:
@@ -396,6 +396,7 @@ private final Creators _creators() {
                 c = NO_CREATORS;
             } else {
                 c = AnnotatedCreatorCollector.collectCreators(_annotationIntrospector,
+                        _typeFactory,
                         this, _type, _primaryMixIn, _collectAnnotations);
             }
             _creators = c;

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java
Patch:
@@ -57,7 +57,6 @@ public AnnotatedMethod withAnnotations(AnnotationMap ann) {
         return new AnnotatedMethod(_typeContext, _method, ann, _paramAnnotations);
     }
 
-
     @Override
     public Method getAnnotated() { return _method; }
 

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -1468,7 +1468,6 @@ protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, Typ
         if (bindings == null) {
             bindings = EMPTY_BINDINGS;
         }
-        
         // Quite simple when we resolving exact class/interface; start with that
         if (rawType == Map.class) {
             return _mapType(rawType, bindings, superClass, superInterfaces);

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java
Patch:
@@ -231,7 +231,10 @@ protected String buildCanonicalName() {
      * "real" Collection type; meaning whether it represents a parameterized
      * subtype of {@link java.util.Collection} or just something that acts
      * like one.
+     *
+     * @deprecated Since 2.12 just use instanceof 
      */
+    @Deprecated // since 2.12 use assignment checks
     public boolean isTrueCollectionType() {
         return Collection.class.isAssignableFrom(_class);
     }

File: src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java
Patch:
@@ -278,7 +278,10 @@ public MapLikeType withKeyValueHandler(Object h) {
      * Method that can be used for checking whether this type is a "real"
      * Collection type; meaning whether it represents a parameterized subtype of
      * {@link java.util.Collection} or just something that acts like one.
+     *
+     * @deprecated Since 2.12 just use instanceof 
      */
+    @Deprecated // since 2.12 use assignment checks
     public boolean isTrueMapType() {
         return Map.class.isAssignableFrom(_class);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -383,7 +383,7 @@ protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt,
                 JsonFormat.Value format = beanDesc.findExpectedFormat(null);
                 if ((format == null) || format.getShape() != JsonFormat.Shape.OBJECT) {
                     MapLikeType mlt = (MapLikeType) type;
-                    if (mlt.isTrueMapType()) {
+                    if (mlt instanceof MapType) {
                         return factory.createMapDeserializer(ctxt,(MapType) mlt, beanDesc);
                     }
                     return factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);
@@ -398,7 +398,7 @@ protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt,
                 JsonFormat.Value format = beanDesc.findExpectedFormat(null);
                 if ((format == null) || format.getShape() != JsonFormat.Shape.OBJECT) {
                     CollectionLikeType clt = (CollectionLikeType) type;
-                    if (clt.isTrueCollectionType()) {
+                    if (clt instanceof CollectionType) {
                         return factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);
                     }
                     return factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -614,7 +614,7 @@ protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov,
              *  But we do need to check class annotations.
              */
             JsonSerializer<Object> keySerializer = _findKeySerializer(prov, beanDesc.getClassInfo());
-            if (mlt.isTrueMapType()) {
+            if (mlt instanceof MapType) {
                 return buildMapSerializer(prov, (MapType) mlt, beanDesc, staticTyping,
                         keySerializer, elementTypeSerializer, elementValueSerializer);
             }
@@ -642,7 +642,7 @@ protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov,
         }
         if (type.isCollectionLikeType()) {
             CollectionLikeType clt = (CollectionLikeType) type;
-            if (clt.isTrueCollectionType()) {
+            if (clt instanceof CollectionType) {
                 return buildCollectionSerializer(prov,  (CollectionType) clt, beanDesc, staticTyping,
                         elementTypeSerializer, elementValueSerializer);
             }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1962,8 +1962,7 @@ public ObjectMapper activateDefaultTypingAsProperty(PolymorphicTypeValidator ptv
             DefaultTyping applicability, String propertyName)
     {
         TypeResolverBuilder<?> typer = _constructDefaultTypeResolverBuilder(applicability,
-                getPolymorphicTypeValidator());
-
+                ptv);
         // we'll always use full class name, when using defaulting
         typer = typer.init(JsonTypeInfo.Id.CLASS, null);
         typer = typer.inclusion(JsonTypeInfo.As.PROPERTY);

File: src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java
Patch:
@@ -262,7 +262,7 @@ public BaseSettings withAccessorNaming(AccessorNamingStrategy.Provider p) {
         }
         return new BaseSettings(_classIntrospector, _annotationIntrospector, _propertyNamingStrategy, _typeFactory,
                 _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,
-                _timeZone, _defaultBase64, _typeValidator, _accessorNaming);
+                _timeZone, _defaultBase64, _typeValidator, p);
     }
 
     public BaseSettings withTypeFactory(TypeFactory tf) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/DefaultAccessorNamingStrategy.java
Patch:
@@ -219,7 +219,7 @@ private static boolean isGroovyMetaClassGetter(AnnotatedMethod am) {
     /**
      * Provider for {@link DefaultAccessorNamingStrategy}.
      */
-    public final static class Provider
+    public static class Provider
         extends AccessorNamingStrategy.Provider
         implements java.io.Serializable
     {

File: src/test/java/com/fasterxml/jackson/databind/introspect/BeanDescriptionTest.java
Patch:
@@ -5,7 +5,7 @@
 
 public class BeanDescriptionTest extends BaseMapTest
 {
-    private final ObjectMapper MAPPER = objectMapper();
+    private final ObjectMapper MAPPER = newJsonMapper();
 
     private final static String CLASS_DESC = "Description, yay!";
     

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorWithNamingStrategyTest.java
Patch:
@@ -39,7 +39,7 @@ public OneProperty(String bogus) {
 
     private final ObjectMapper MAPPER = newJsonMapper()
             .setAnnotationIntrospector(new MyParamIntrospector())
-            .setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
+            .setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)
             ;
 
     // [databind#2051]

File: src/test/java/com/fasterxml/jackson/databind/format/EnumFormatShapeTest.java
Patch:
@@ -146,7 +146,7 @@ public void testEnumPropertyAsNumber() throws Exception {
     // [databind#2365]
     public void testEnumWithNamingStrategy() throws Exception {
         final ObjectMapper mapper = jsonMapperBuilder()
-                .propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
+                .propertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)
                 .build();
         String json = mapper.writeValueAsString(Enum2365.B);
         assertEquals(aposToQuotes("{'main_value':'B-x'}"), json);

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyCustom.java
Patch:
@@ -6,6 +6,7 @@
 
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.PropertyNamingStrategies;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 import com.fasterxml.jackson.databind.annotation.*;
 import com.fasterxml.jackson.databind.cfg.MapperConfig;
@@ -135,7 +136,7 @@ public SetterlessWithValue add(int v) {
         }
     }
 
-    static class LcStrategy extends PropertyNamingStrategy.PropertyNamingStrategyBase
+    static class LcStrategy extends PropertyNamingStrategies.NamingBase
     {
         @Override
         public String translate(String propertyName) {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeCustomResolverTest.java
Patch:
@@ -413,7 +413,7 @@ public Id getMechanism() {
     }
 
     private final ObjectMapper MAPPER = jsonMapperBuilder()
-            .propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
+            .propertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)
             .build();
 
     // [databind#1288]

File: src/test/java/com/fasterxml/jackson/failing/ImplicitParamsForCreator806Test.java
Patch:
@@ -39,7 +39,7 @@ public XY(int x, int y) {
 
     private final ObjectMapper MAPPER = newJsonMapper()
             .setAnnotationIntrospector(new MyParamIntrospector())
-            .setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
+            .setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)
             ;
 
     // for [databind#806]: problem is that renaming occurs too late for implicitly detected

File: src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
Patch:
@@ -11,7 +11,6 @@
 
 import com.fasterxml.jackson.core.*;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;
 import com.fasterxml.jackson.databind.json.JsonMapper;
 import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;

File: src/test/java/com/fasterxml/jackson/databind/MapperViaParserTest.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.core.io.CharacterEscapes;
 import com.fasterxml.jackson.core.io.SerializedString;
 import com.fasterxml.jackson.core.json.JsonWriteFeature;
-import com.fasterxml.jackson.databind.ObjectMapper;
+
 import com.fasterxml.jackson.databind.json.JsonMapper;
 
 public class MapperViaParserTest  extends BaseMapTest

File: src/test/java/com/fasterxml/jackson/databind/ObjectReaderTest.java
Patch:
@@ -516,8 +516,8 @@ public boolean handleUnknownProperty(DeserializationContext ctxt, JsonParser p,
         assertEquals("test", aObject.knownField);
     }
 
-    private static class A{
-        private String knownField;
+    private static class A {
+        String knownField;
 
         @JsonCreator
         private A(@JsonProperty("knownField") String knownField) {

File: src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java
Patch:
@@ -8,7 +8,6 @@
 import com.fasterxml.jackson.core.io.IOContext;
 import com.fasterxml.jackson.core.base.ParserBase;
 import com.fasterxml.jackson.core.base.GeneratorBase;
-import com.fasterxml.jackson.databind.ObjectMapper;
 
 /**
  * Basic tests to ensure that {@link FormatSchema} instances are properly

File: src/test/java/com/fasterxml/jackson/databind/TestRootName.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.*;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 import com.fasterxml.jackson.databind.json.JsonMapper;
 

File: src/test/java/com/fasterxml/jackson/databind/TestVersions.java
Patch:
@@ -3,8 +3,8 @@
 import com.fasterxml.jackson.core.Version;
 import com.fasterxml.jackson.core.Versioned;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
+import com.fasterxml.jackson.databind.json.JsonMapper;
 import com.fasterxml.jackson.databind.cfg.PackageVersion;
 
 /**
@@ -15,7 +15,7 @@ public class TestVersions extends BaseMapTest
 {
     public void testMapperVersions()
     {
-        ObjectMapper mapper = new ObjectMapper();
+        ObjectMapper mapper = new JsonMapper();
         assertVersion(mapper);
         assertVersion(mapper.reader());
         assertVersion(mapper.writer());

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingExternalProperty1003Test.java
Patch:
@@ -10,7 +10,7 @@ static class HeroBattle {
 
         private final Hero hero;
 
-        private HeroBattle(Hero hero) {
+        HeroBattle(Hero hero) {
             if (hero == null) throw new Error();
             this.hero = hero;
         }

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ImplicitNameMatch792Test.java
Patch:
@@ -54,7 +54,7 @@ static class ReadWriteBean
     {
         private int value;
 
-        private ReadWriteBean(@JsonProperty(value="value",
+        ReadWriteBean(@JsonProperty(value="value",
                 access=JsonProperty.Access.READ_WRITE) int v) {
             value = v;
         }

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java
Patch:
@@ -115,7 +115,7 @@ public static Product1853 from(String name){
             return new Product1853(false, "DELEG:"+name);
         }
 
-        private Product1853(boolean bogus, String name) {
+        Product1853(boolean bogus, String name) {
             this.name = name;
         }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestEmptyArrayBlockingQueueDeser.java
Patch:
@@ -16,7 +16,7 @@ public Collection<Double> getValues() {
     }
 
     static class Entity{
-        private ArrayBlockingQueue<Double> values;
+        ArrayBlockingQueue<Double> values;
 
         public Collection<Double> getValues() {
             return values;

File: src/test/java/com/fasterxml/jackson/databind/exc/DeserExceptionTypeTest.java
Patch:
@@ -3,9 +3,8 @@
 import java.io.*;
 
 import com.fasterxml.jackson.core.*;
+
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.exc.MismatchedInputException;
-import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
 import com.fasterxml.jackson.databind.testutil.BrokenStringReader;
 
 /**

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestAutoDetect.java
Patch:
@@ -8,7 +8,6 @@
 import com.fasterxml.jackson.core.*;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
 
 public class TestAutoDetect
     extends BaseMapTest

File: src/test/java/com/fasterxml/jackson/databind/introspect/VisibilityForSerializationTest.java
Patch:
@@ -7,7 +7,6 @@
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
 
 /**
  * Unit tests for checking handling of some of {@link MapperFeature}s

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java
Patch:
@@ -10,7 +10,6 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
-import com.fasterxml.jackson.databind.jsontype.NamedType;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java
Patch:
@@ -56,7 +56,7 @@ public static final class TestClass {
         @JsonProperty("mapProperty")
         @JsonSerialize(keyUsing = CompoundKeySerializer.class)
         @JsonDeserialize(keyUsing = CompoundKeyDeserializer.class)
-        private final Map<CompoundKey, String> mapProperty;
+        final Map<CompoundKey, String> mapProperty;
 
         @JsonCreator
         private TestClass(@JsonProperty("mapProperty") Map<CompoundKey, String> mapProperty) {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/DefaultTypeResolverForLong2753Test.java
Patch:
@@ -16,7 +16,7 @@ static class Data {
         private Long key;
 
         @JsonCreator
-        private Data(@JsonProperty("key") Long key) {
+        Data(@JsonProperty("key") Long key) {
             this.key = key;
         }
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultWithCreators.java
Patch:
@@ -46,7 +46,7 @@ protected Bean1385Wrapper() { }
 
     static class Bean1385
     {
-        private byte[] raw;
+        byte[] raw;
     
         @JsonCreator(mode=JsonCreator.Mode.DELEGATING)
         public Bean1385(byte[] raw) {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdWithCreatorTest.java
Patch:
@@ -66,7 +66,7 @@ public static class Message<P extends Payload999>
         @JsonSubTypes({
                 @JsonSubTypes.Type(FooPayload999.class),
                 @JsonSubTypes.Type(BarPayload999.class) })
-        private final P payload;
+        final P payload;
 
         @JsonCreator
         public Message(@JsonProperty("type") String type,

File: src/test/java/com/fasterxml/jackson/databind/misc/RaceCondition738Test.java
Patch:
@@ -39,7 +39,7 @@ public interface HasSubTypes {
     static class Wrapper {
         private final HasSubTypes hasSubTypes;
 
-        private Wrapper(HasSubTypes hasSubTypes) {
+        Wrapper(HasSubTypes hasSubTypes) {
             this.hasSubTypes = hasSubTypes;
         }
 

File: src/test/java/com/fasterxml/jackson/databind/module/SimpleModuleTest.java
Patch:
@@ -8,9 +8,6 @@
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.module.SimpleDeserializers;
-import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.fasterxml.jackson.databind.module.SimpleSerializers;
 
 import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;

File: src/test/java/com/fasterxml/jackson/databind/module/TestAbstractTypes.java
Patch:
@@ -4,10 +4,11 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+
 import com.fasterxml.jackson.core.Version;
+
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.module.SimpleModule;
 
 public class TestAbstractTypes extends BaseMapTest
 {

File: src/test/java/com/fasterxml/jackson/databind/node/POJONodeTest.java
Patch:
@@ -4,9 +4,9 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.JsonGenerator;
+
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 
 public class POJONodeTest extends NodeTestBase

File: src/test/java/com/fasterxml/jackson/databind/node/TestFindMethods.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.node.ObjectNode;
 
 public class TestFindMethods
     extends BaseMapTest

File: src/test/java/com/fasterxml/jackson/databind/ser/TestSerializerProvider.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
 
 public class TestSerializerProvider
     extends com.fasterxml.jackson.databind.BaseMapTest

File: src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java
Patch:
@@ -95,7 +95,7 @@ static class Inner {
     static class Outer {
         // @JsonProperty
         @JsonUnwrapped
-        private Inner inner;
+        Inner inner;
     }
 
     // [databind#1493]: case-insensitive handling

File: src/test/java/com/fasterxml/jackson/databind/type/TestAnnotatedClass.java
Patch:
@@ -97,6 +97,7 @@ public void testConstructorIntrospection()
     {
         // Need this call to ensure there is a synthetic constructor being generated
         // (not really needed otherwise)
+        @SuppressWarnings("synthetic-access")
         Bean1005 bean = new Bean1005(13);
         SerializationConfig config = MAPPER.getSerializationConfig();
         JavaType t = MAPPER.constructType(bean.getClass());

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactoryWithRecursiveTypes.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.BaseMapTest;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 
 // https://github.com/FasterXML/jackson-databind/issues/1647

File: src/test/java/com/fasterxml/jackson/databind/util/TestStdDateFormat.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.regex.Pattern;
 
 import com.fasterxml.jackson.databind.BaseMapTest;
-import com.fasterxml.jackson.databind.util.StdDateFormat;
 
 public class TestStdDateFormat
     extends BaseMapTest

File: src/test/java/com/fasterxml/jackson/failing/BuilderWithBackRef2686Test.java
Patch:
@@ -16,9 +16,9 @@ public class BuilderWithBackRef2686Test extends BaseMapTest
 {
     // [databind#2686]
     public static class Container {
-        private Content forward;
+        Content forward;
 
-        private String containerValue;
+        String containerValue;
 
         @JsonManagedReference
         public Content getForward() {

File: src/test/java/com/fasterxml/jackson/failing/EnumDeserialization1626Test.java
Patch:
@@ -25,7 +25,7 @@ static class ShippingMethodInfo {
         public int typeId;
 
         @JsonProperty("value")
-        private ShippingMethods value;
+        ShippingMethods value;
 
         @JsonProperty("coverage")
         public int coverage;

File: src/test/java/com/fasterxml/jackson/failing/ObjectIdWithBuilder1496Test.java
Patch:
@@ -18,7 +18,8 @@ static class POJO
          public long getId() { return id; }
          private int var;
          public int getVar() { return var; }
-         private POJO (long id, int var) { this.id = id; this.var = var; }
+
+         POJO (long id, int var) { this.id = id; this.var = var; }
 
          @Override
          public String toString() { return "id: " + id + ", var: " + var; }

File: src/test/java/com/fasterxml/jackson/failing/TestObjectIdWithUnwrapping1298.java
Patch:
@@ -13,7 +13,7 @@
 // Test case for https://github.com/FasterXML/jackson-databind/issues/1298
 public class TestObjectIdWithUnwrapping1298 extends BaseMapTest
 {
-    private static Long nextId = 1L;
+    static Long nextId = 1L;
 
     public static final class ListOfParents{
         public List<Parent> parents = new ArrayList<>();

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -365,7 +365,7 @@ public String[] findPropertiesToIgnore(Annotated ac, boolean forSerialization) {
 
     /**
      * @since 2.8
-     * @deprecated 2.12
+     * @deprecated 2.12, use {@link #findPropertyIgnoralByName} instead.
      */
     @Deprecated // since 2.12
     public JsonIgnoreProperties.Value findPropertyIgnorals(Annotated ac) {

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3210,8 +3210,6 @@ public <T> T treeToValue(TreeNode n, Class<T> valueType)
                 }
             }
             return readValue(treeAsTokens(n), valueType);
-        } catch (JsonProcessingException e) {
-            throw e;
         } catch (IOException e) { // should not occur, no real i/o...
             throw new IllegalArgumentException(e.getMessage(), e);
         }
@@ -3262,7 +3260,7 @@ public <T extends JsonNode> T valueToTree(Object fromValue)
         }
         return (T) result;
     }
-    
+
     /*
     /**********************************************************
     /* Extended Public API, accessors

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java
Patch:
@@ -13,7 +13,7 @@
  */
 public class TestTypeFactory
     extends BaseMapTest
-{    
+{
     /*
     /**********************************************************
     /* Helper types

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -592,6 +592,9 @@ public List<NamedType> findSubtypes(Annotated a)
         ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);
         for (JsonSubTypes.Type type : types) {
             result.add(new NamedType(type.value(), type.name()));
+            for (String name : type.names()) {
+                result.add(new NamedType(type.value(), name));
+            }
         }
         return result;
     }

File: src/test/java/com/fasterxml/jackson/failing/NumberNodes1770Test.java
Patch:
@@ -19,7 +19,7 @@ public void testBigDecimalCoercion() throws Exception
         final JsonNode jsonNode = MAPPER.reader()
             .with(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)
             .readTree("7976931348623157e309");
-        assertTrue(jsonNode.isBigDecimal());
+        assertTrue("Expected DecimalNode, got: "+jsonNode.getClass().getName()+": "+jsonNode, jsonNode.isBigDecimal());
         // the following fails with NumberFormatException, because jsonNode is a DoubleNode with a value of POSITIVE_INFINITY
 //        Assert.assertTrue(jsonNode.decimalValue().compareTo(new BigDecimal("7976931348623157e309")) == 0);
     }

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java
Patch:
@@ -81,7 +81,7 @@ private Map<String,FieldBuilder> _findFields(TypeResolutionContext tc,
             fields.put(f.getName(), b);
         }
         // And then... any mix-in overrides?
-        if (_mixInResolver != null) {
+        if ((fields != null) && (_mixInResolver != null)) {
             Class<?> mixin = _mixInResolver.findMixInClassFor(cls);
             if (mixin != null) {
                 _addFieldMixIns(mixin, cls, fields);

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -565,9 +565,9 @@ protected ObjectMapper(ObjectMapper src)
 
         RootNameLookup rootNames = new RootNameLookup();
         _serializationConfig = new SerializationConfig(src._serializationConfig,
-                _mixIns, rootNames, _configOverrides);
+                _subtypeResolver, _mixIns, rootNames, _configOverrides);
         _deserializationConfig = new DeserializationConfig(src._deserializationConfig,
-                _mixIns, rootNames,  _configOverrides);
+                _subtypeResolver, _mixIns, rootNames,  _configOverrides);
         _serializerProvider = src._serializerProvider.copy();
         _deserializationContext = src._deserializationContext.copy();
 

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java
Patch:
@@ -137,17 +137,17 @@ protected MapperConfigBase(BaseSettings base,
      * Copy constructor usually called to make a copy for use by
      * ObjectMapper that is copied.
      *
-     * @since 2.8
+     * @since 2.11.2
      */
     protected MapperConfigBase(MapperConfigBase<CFG,T> src,
-            SimpleMixInResolver mixins, RootNameLookup rootNames,
+            SubtypeResolver str, SimpleMixInResolver mixins, RootNameLookup rootNames,
             ConfigOverrides configOverrides)
     {
         // 18-Apr-2018, tatu: [databind#1898] need to force copying of `ClassIntrospector`
         //    (to clear its cache) to avoid leakage
         super(src, src._base.copy());
         _mixIns = mixins;
-        _subtypeResolver = src._subtypeResolver;
+        _subtypeResolver = str;
         _rootNames = rootNames;
         _rootName = src._rootName;
         _view = src._view;

File: src/test/java/com/fasterxml/jackson/databind/ObjectReaderTest.java
Patch:
@@ -286,7 +286,7 @@ public void testGetValueType() throws Exception
         assertEquals(MAPPER.constructType(String.class), r.getValueType());
     }
 
-    public void testParserConfigViaMapper() throws Exception
+    public void testParserConfigViaReader() throws Exception
     {
         try (JsonParser p = MAPPER.reader()
                 .with(StreamReadFeature.STRICT_DUPLICATE_DETECTION)
@@ -301,7 +301,7 @@ public void testParserConfigViaMapper() throws Exception
         }
     }
 
-    public void testGeneratorConfigViaMapper() throws Exception
+    public void testGeneratorConfigViaReader() throws Exception
     {
         StringWriter sw = new StringWriter();
         try (JsonGenerator g = MAPPER.writer()

File: src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java
Patch:
@@ -15,13 +15,13 @@
 
 /**
  * Immutable container class used to store simple configuration
- * settings. Since instances are fully immutable, instances can
+ * settings for both serialization and deserialization.
+ * Since instances are fully immutable, instances can
  * be freely shared and used without synchronization.
  */
 public final class BaseSettings
     implements java.io.Serializable
 {
-    // for 2.6
     private static final long serialVersionUID = 1L;
 
     /**
@@ -91,7 +91,7 @@ public final class BaseSettings
      */
     
     /**
-     * Custom date format to use for de-serialization. If specified, will be
+     * Custom date format to use for deserialization. If specified, will be
      * used instead of {@link com.fasterxml.jackson.databind.util.StdDateFormat}.
      *<p>
      * Note that the configured format object will be cloned once per

File: src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java
Patch:
@@ -333,7 +333,7 @@ private Impl(Impl src,
         }
 
         private Impl(Impl src) { super(src); }
-        
+
         private Impl(Impl src, DeserializerFactory factory) {
             super(src, factory);
         }
@@ -363,6 +363,6 @@ public DefaultDeserializationContext createDummyInstance(DeserializationConfig c
         @Override
         public DefaultDeserializationContext with(DeserializerFactory factory) {
             return new Impl(this, factory);
-        }        
+        }
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -875,9 +875,8 @@ protected boolean isPotentialBeanType(Class<?> type)
         if (ClassUtil.isProxyType(type)) {
             throw new IllegalArgumentException("Cannot deserialize Proxy class "+type.getName()+" as a Bean");
         }
-        /* also: can't deserialize some local classes: static are ok; in-method not;
-         * other non-static inner classes are ok
-         */
+        // also: can't deserialize some local classes: static are ok; in-method not;
+        // other non-static inner classes are ok
         typeStr = ClassUtil.isLocalType(type, true);
         if (typeStr != null) {
             throw new IllegalArgumentException("Cannot deserialize Class "+type.getName()+" (of type "+typeStr+") as a Bean");

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1946,6 +1946,8 @@ public ObjectMapper activateDefaultTypingAsProperty(PolymorphicTypeValidator ptv
      * explicitly annotated types (ones with
      * {@link com.fasterxml.jackson.annotation.JsonTypeInfo}) will have
      * additional embedded type information.
+     *
+     * @since 2.10
      */
     public ObjectMapper deactivateDefaultTyping() {
         return setDefaultTyping(null);

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -203,7 +203,7 @@ protected BeanSerializerBase(BeanSerializerBase src, Set<String> toIgnore)
         }
         _props = propsOut.toArray(new BeanPropertyWriter[propsOut.size()]);
         _filteredProps = (fpropsOut == null) ? null : fpropsOut.toArray(new BeanPropertyWriter[fpropsOut.size()]);
-        
+
         _typeId = src._typeId;
         _anyGetterWriter = src._anyGetterWriter;
         _objectIdWriter = src._objectIdWriter;
@@ -309,7 +309,7 @@ private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props,
 
     /*
     /**********************************************************
-    /* Post-constriction processing: resolvable, contextual
+    /* Post-construction processing: resolvable, contextual
     /**********************************************************
      */
 

File: src/test/java/com/fasterxml/jackson/databind/struct/UnwrapSingleArrayMiscTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.struct;
 
 import java.util.Collections;
 import java.util.EnumMap;

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsTest.java
Patch:
@@ -118,7 +118,7 @@ static class VoidBean {
         public Void value;
     }
 
-    private final ObjectMapper MAPPER = new ObjectMapper();
+    private final ObjectMapper MAPPER = newJsonMapper();
 
     /*
     /**********************************************************

File: src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderFailTest.java
Patch:
@@ -71,7 +71,7 @@ public void testBuilderMethodReturnInvalidType() throws Exception
             fail("Missing expected InvalidDefinitionException exception");
         } catch (InvalidDefinitionException e) {
             verifyException(e, "Build method ");
-            verifyException(e, "#build(0 params)");
+            verifyException(e, "#build()");
             verifyException(e, "has wrong return type");
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -598,7 +598,7 @@ public int asInt(int defaultValue) {
      * and 1 (true), and Strings are parsed using default Java language integer
      * parsing rules.
      *<p>
-     * If representation cannot be converted to an long (including structured types
+     * If representation cannot be converted to a long (including structured types
      * like Objects and Arrays),
      * default value of <b>0</b> will be returned; no exceptions are thrown.
      */
@@ -612,7 +612,7 @@ public long asLong() {
      * and 1 (true), and Strings are parsed using default Java language integer
      * parsing rules.
      *<p>
-     * If representation cannot be converted to an long (including structured types
+     * If representation cannot be converted to a long (including structured types
      * like Objects and Arrays),
      * specified <b>defaultValue</b> will be returned; no exceptions are thrown.
      */

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -194,6 +194,9 @@ public class SubTypeValidator
         s.add("oracle.jms.AQjmsXAQueueConnectionFactory");
         s.add("oracle.jms.AQjmsXAConnectionFactory");
 
+        // [databind#2764]: org.jsecurity:
+        s.add("org.jsecurity.realm.jndi.JndiRealmFactory");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsTest.java
Patch:
@@ -690,7 +690,7 @@ public void testEmptyStringFailForBooleanPrimitive() throws IOException
             reader.readValue(aposToQuotes("{'booleanValue':''}"));
             fail("Expected failure for boolean + empty String");
         } catch (JsonMappingException e) {
-            verifyException(e, "Cannot map `null` into type");
+            verifyException(e, "Cannot coerce `null` to `boolean`");
             verifyException(e, "FAIL_ON_NULL_FOR_PRIMITIVES");
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -512,7 +512,7 @@ public boolean useForType(JavaType t)
      * (should very quickly converge to zero after startup), let's
      * explicitly define a low concurrency setting.
      *<p>
-     * Since version 1.5, these may are either "raw" deserializers (when
+     * These may are either "raw" deserializers (when
      * no type information is needed for base type), or type-wrapped
      * deserializers (if it is needed)
      */
@@ -559,7 +559,7 @@ protected ObjectMapper(ObjectMapper src)
     {
         _jsonFactory = src._jsonFactory.copy();
         _jsonFactory.setCodec(this);
-        _subtypeResolver = src._subtypeResolver;
+        _subtypeResolver = src._subtypeResolver.copy();
         _typeFactory = src._typeFactory;
         _injectableValues = src._injectableValues;
         _configOverrides = src._configOverrides.copy();

File: src/test/java/com/fasterxml/jackson/databind/convert/CoerceJDKScalarsTest.java
Patch:
@@ -11,6 +11,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 
+// Tests for "old" coercions (pre-2.12), with `MapperFeature.ALLOW_COERCION_OF_SCALARS`
 public class CoerceJDKScalarsTest extends BaseMapTest
 {
     static class BooleanPOJO {

File: src/test/java/com/fasterxml/jackson/databind/convert/CoercePojosTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.cfg.CoercionAction;
 import com.fasterxml.jackson.databind.cfg.CoercionInputShape;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 import com.fasterxml.jackson.databind.type.LogicalType;
 
 public class CoercePojosTest extends BaseMapTest
@@ -173,7 +174,7 @@ private void _verifyFromEmptyFail(ObjectMapper m, String json) throws Exception
         try {
             m.readValue(json, Bean.class);
             fail("Should not accept Empty/Blank String for POJO with passed settings");
-        } catch (JsonProcessingException e) {
+        } catch (MismatchedInputException e) {
             _verifyFailMessage(e);
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -237,6 +237,9 @@ public ValueInstantiator findValueInstantiator(DeserializationContext ctxt,
                 }
             }
         }
+        if (instantiator != null) {
+            instantiator = instantiator.createContextual(ctxt, beanDesc);
+        }
 
         return instantiator;
     }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3324,7 +3324,7 @@ public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause)
         return createDeserializationContext(null,
                 getDeserializationConfig()).hasValueDeserializerFor(type, cause);
     }
-    
+
     /*
     /**********************************************************
     /* Extended Public API, deserialization,

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -277,6 +277,9 @@ private final Collection<String> handleNonArray(JsonParser p, DeserializationCon
                 ((_unwrapSingle == null) &&
                         ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));
         if (!canWrap) {
+            if (p.hasToken(JsonToken.VALUE_STRING)) {
+                return _deserializeFromString(p, ctxt);
+            }
             return (Collection<String>) ctxt.handleUnexpectedToken(_containerType, p);
         }
         // Strings are one of "native" (intrinsic) types, so there's never type deserializer involved

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java
Patch:
@@ -7,6 +7,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.*;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
+import com.fasterxml.jackson.databind.util.ClassUtil;
 import com.fasterxml.jackson.databind.util.NameTransformer;
 
 public class BeanAsArrayBuilderDeserializer
@@ -314,7 +315,8 @@ protected final Object _deserializeUsingPropertyBased(final JsonParser p,
                          */
                         return ctxt.reportBadDefinition(_beanType, String.format(
 "Cannot support implicit polymorphic deserialization for POJOs-as-Arrays style: nominal type %s, actual type %s",
-                                _beanType.getRawClass().getName(), builder.getClass().getName()));
+                                ClassUtil.getTypeDescription(_beanType),
+                                builder.getClass().getName()));
                     }
                 }
                 continue;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -335,7 +335,7 @@ protected Object[] handleNonArray(JsonParser p, DeserializationContext ctxt)
                     && _elementClass == Byte.class) {
                 return deserializeFromBase64(p, ctxt);
             }
-            return (Object[]) ctxt.handleUnexpectedToken(_containerType.getRawClass(), p);
+            return (Object[]) ctxt.handleUnexpectedToken(_containerType, p);
         }
 
         Object value;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -277,7 +277,7 @@ private final Collection<String> handleNonArray(JsonParser p, DeserializationCon
                 ((_unwrapSingle == null) &&
                         ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));
         if (!canWrap) {
-            return (Collection<String>) ctxt.handleUnexpectedToken(_containerType.getRawClass(), p);
+            return (Collection<String>) ctxt.handleUnexpectedToken(_containerType, p);
         }
         // Strings are one of "native" (intrinsic) types, so there's never type deserializer involved
         JsonDeserializer<String> valueDes = _valueDeserializer;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1424,7 +1424,7 @@ public Object deserializeFromString(JsonParser p, DeserializationContext ctxt)
                 return bean;
             }
         }
-        return _valueInstantiator.createFromString(ctxt, p.getText());
+        return _deserializeFromString(p, ctxt);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -370,7 +370,7 @@ public Map<Object,Object> deserialize(JsonParser p, DeserializationContext ctxt)
 
         // (empty) String may be ok however; or single-String-arg ctor
         if (t == JsonToken.VALUE_STRING) {
-            return (Map<Object,Object>) _valueInstantiator.createFromString(ctxt, p.getText());
+            return _deserializeFromString(p, ctxt);
         }
         // Empty array, or single-value wrapped in array?
         if (t == JsonToken.START_ARRAY) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NullifyingDeserializer.java
Patch:
@@ -5,6 +5,7 @@
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
+import com.fasterxml.jackson.databind.type.LogicalType;
 
 /**
  * Bogus deserializer that will simply skip all content there is to map

File: src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java
Patch:
@@ -9,7 +9,7 @@
 import com.fasterxml.jackson.databind.introspect.*;
 import com.fasterxml.jackson.databind.jsontype.*;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
-import com.fasterxml.jackson.databind.type.CoercionTargetType;
+import com.fasterxml.jackson.databind.type.LogicalType;
 import com.fasterxml.jackson.databind.util.LinkedNode;
 import com.fasterxml.jackson.databind.util.RootNameLookup;
 
@@ -909,7 +909,7 @@ public TypeDeserializer findTypeDeserializer(JavaType baseType)
      *
      * @since 2.12
      */
-    public CoercionAction findCoercionAction(CoercionTargetType targetType,
+    public CoercionAction findCoercionAction(LogicalType targetType,
             Class<?> targetClass, CoercionInputShape inputShape)
     {
         return _coercionConfigs.findCoercion(this,
@@ -932,7 +932,7 @@ public CoercionAction findCoercionAction(CoercionTargetType targetType,
      *
      * @since 2.12
      */
-    public CoercionAction findCoercionFromBlankString(CoercionTargetType targetType,
+    public CoercionAction findCoercionFromBlankString(LogicalType targetType,
             Class<?> targetClass,
             CoercionAction actionIfBlankNotAllowed)
     {

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -31,7 +31,7 @@
 import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
-import com.fasterxml.jackson.databind.type.CoercionTargetType;
+import com.fasterxml.jackson.databind.type.LogicalType;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.fasterxml.jackson.databind.util.*;
 
@@ -483,7 +483,7 @@ public final JsonNodeFactory getNodeFactory() {
      *
      * @since 2.12
      */
-    public CoercionAction findCoercionAction(CoercionTargetType targetType,
+    public CoercionAction findCoercionAction(LogicalType targetType,
             Class<?> targetClass, CoercionInputShape inputShape)
     {
         return _config.findCoercionAction(targetType, targetClass, inputShape);
@@ -505,7 +505,7 @@ public CoercionAction findCoercionAction(CoercionTargetType targetType,
      *
      * @since 2.12
      */
-    public CoercionAction findCoercionFromBlankString(CoercionTargetType targetType,
+    public CoercionAction findCoercionFromBlankString(LogicalType targetType,
             Class<?> targetClass,
             CoercionAction actionIfBlankNotAllowed)
     {

File: src/main/java/com/fasterxml/jackson/databind/cfg/CoercionAction.java
Patch:
@@ -1,12 +1,12 @@
 package com.fasterxml.jackson.databind.cfg;
 
-import com.fasterxml.jackson.databind.type.CoercionTargetType;
+import com.fasterxml.jackson.databind.type.LogicalType;
 
 /**
  * Set of possible actions for requested coercion from an
  * input shape {@link CoercionInputShape}
  * that does not directly or naturally match target type
- * ({@link CoercionTargetType}).
+ * ({@link LogicalType}).
  * This action is suggestion for deserializers to use in cases
  * where alternate actions could be appropriate: it is up to deserializer
  * to check configured action and take it into consideration.

File: src/main/java/com/fasterxml/jackson/databind/cfg/CoercionInputShape.java
Patch:
@@ -1,12 +1,12 @@
 package com.fasterxml.jackson.databind.cfg;
 
-import com.fasterxml.jackson.databind.type.CoercionTargetType;
+import com.fasterxml.jackson.databind.type.LogicalType;
 
 /**
  * Set of input types (which mostly match one of
  * {@link com.fasterxml.jackson.core.JsonToken} types) used for
  * configuring {@link CoercionAction}s to take when reading
- * input into target types (specific type or {@link CoercionTargetType}).
+ * input into target types (specific type or {@link LogicalType}).
  * Contains both physical input shapes (which match one of
  * {@link com.fasterxml.jackson.core.JsonToken} types) and a few
  * logical input shapes ("empty" variants).

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -9,7 +9,6 @@
 import com.fasterxml.jackson.databind.deser.ValueInstantiator;
 import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
 import com.fasterxml.jackson.databind.introspect.*;
-import com.fasterxml.jackson.databind.type.CoercionTargetType;
 import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.deser.*;
 import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
-import com.fasterxml.jackson.databind.type.CoercionTargetType;
+import com.fasterxml.jackson.databind.type.LogicalType;
 import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**
@@ -427,7 +427,7 @@ public AnnotatedWithParams getWithArgsCreator() {
      */
 
     @Override
-    protected CoercionTargetType _coercionTargetType() {
+    protected LogicalType _coercionTargetType() {
         return null;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java
Patch:
@@ -9,6 +9,7 @@
 import com.fasterxml.jackson.databind.introspect.*;
 import com.fasterxml.jackson.databind.jsontype.*;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
+import com.fasterxml.jackson.databind.type.CoercionTargetType;
 import com.fasterxml.jackson.databind.util.LinkedNode;
 import com.fasterxml.jackson.databind.util.RootNameLookup;
 

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -14,7 +14,6 @@
 import com.fasterxml.jackson.core.util.JacksonFeatureSet;
 import com.fasterxml.jackson.databind.cfg.CoercionAction;
 import com.fasterxml.jackson.databind.cfg.CoercionInputShape;
-import com.fasterxml.jackson.databind.cfg.CoercionTargetType;
 import com.fasterxml.jackson.databind.cfg.ContextAttributes;
 import com.fasterxml.jackson.databind.deser.*;
 import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
@@ -32,6 +31,7 @@
 import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
+import com.fasterxml.jackson.databind.type.CoercionTargetType;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.fasterxml.jackson.databind.util.*;
 

File: src/main/java/com/fasterxml/jackson/databind/cfg/CoercionAction.java
Patch:
@@ -1,5 +1,7 @@
 package com.fasterxml.jackson.databind.cfg;
 
+import com.fasterxml.jackson.databind.type.CoercionTargetType;
+
 /**
  * Set of possible actions for requested coercion from an
  * input shape {@link CoercionInputShape}

File: src/main/java/com/fasterxml/jackson/databind/cfg/CoercionConfigs.java
Patch:
@@ -6,6 +6,7 @@
 import com.fasterxml.jackson.databind.DeserializationConfig;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.MapperFeature;
+import com.fasterxml.jackson.databind.type.CoercionTargetType;
 
 /**
  * @since 2.12

File: src/main/java/com/fasterxml/jackson/databind/cfg/CoercionInputShape.java
Patch:
@@ -1,5 +1,7 @@
 package com.fasterxml.jackson.databind.cfg;
 
+import com.fasterxml.jackson.databind.type.CoercionTargetType;
+
 /**
  * Set of input types (which mostly match one of
  * {@link com.fasterxml.jackson.core.JsonToken} types) used for

File: src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java
Patch:
@@ -5,9 +5,9 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.cfg.CoercionAction;
 import com.fasterxml.jackson.databind.cfg.CoercionInputShape;
-import com.fasterxml.jackson.databind.cfg.CoercionTargetType;
 import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
 import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
+import com.fasterxml.jackson.databind.type.CoercionTargetType;
 
 /**
  * Class that defines simple API implemented by objects that create value

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -4,12 +4,12 @@
 import java.util.*;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.cfg.CoercionTargetType;
 import com.fasterxml.jackson.databind.cfg.MapperConfig;
 import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
 import com.fasterxml.jackson.databind.deser.ValueInstantiator;
 import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
 import com.fasterxml.jackson.databind.introspect.*;
+import com.fasterxml.jackson.databind.type.CoercionTargetType;
 import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java
Patch:
@@ -5,9 +5,9 @@
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.cfg.CoercionTargetType;
 import com.fasterxml.jackson.databind.deser.*;
 import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
+import com.fasterxml.jackson.databind.type.CoercionTargetType;
 import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/type/CoercionTargetType.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.cfg;
+package com.fasterxml.jackson.databind.type;
 
 /**
  * Set of logical "type classes" for which coercion actions can be defined:

File: src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
Patch:
@@ -234,7 +234,7 @@ protected ObjectReader objectReader(Class<?> cls) {
 
     // @since 2.10
     protected static ObjectMapper newJsonMapper() {
-        return new ObjectMapper();
+        return new JsonMapper();
     }
 
     // @since 2.10

File: src/test/java/com/fasterxml/jackson/databind/deser/ReadOnlyDeserFailOnUnknown2719Test.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.fasterxml.jackson.databind.*;
 
-public class ReadOnlyDeser2719Test extends BaseMapTest
+public class ReadOnlyDeserFailOnUnknown2719Test extends BaseMapTest
 {
     // [databind#2719]
     static class UserWithReadOnly {

File: src/test/java/com/fasterxml/jackson/databind/deser/ReadOnlyListDeser2283Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser;
 
 import java.util.*;
 
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.*;
 
 // [databind#2283]: ignore read-only Lists even if "getter-as-setter" enabled
-public class ReadOnlyList2283Test
+public class ReadOnlyListDeser2283Test
     extends BaseMapTest
 {
     static class RenamedToSameOnGetter {

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsTest.java
Patch:
@@ -564,7 +564,7 @@ private void _testEmptyToNullCoercion(Class<?> primType, Object emptyValue) thro
     public void testBase64Variants() throws Exception
     {
         final byte[] INPUT = "abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X".getBytes("UTF-8");
-        
+
         // default encoding is "MIME, no linefeeds", so:
         Assert.assertArrayEquals(INPUT, MAPPER.readValue(
                 quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="),
@@ -585,7 +585,7 @@ public void testBase64Variants() throws Exception
         Assert.assertArrayEquals(INPUT, (byte[]) reader.with(Base64Variants.PEM).readValue(
                 quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="
         )));
-    }    
+    }
 
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java
Patch:
@@ -299,7 +299,7 @@ protected static String translateLowerCaseWithSeparator(final String input, fina
      * <li>&quot;user__name&quot; is translated to &quot;user__name&quot;
      * (unchanged, with two underscores)</li></ul>
      *
-     * @since 2.7 (was previously called }
+     * @since 2.7 (was previously called {@link LowerCaseWithUnderscoresStrategy})
      */
     public static class SnakeCaseStrategy extends PropertyNamingStrategyBase
     {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java
Patch:
@@ -165,6 +165,9 @@ public AccessPattern getEmptyAccessPattern() {
     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
+        // 07-May-2020, tatu: Is the argument `EnumSet.class` correct here?
+        //    In a way seems like it should rather refer to value class... ?
+        //    (as it's individual value of element type, not Container)...
         final Boolean unwrapSingle = findFormatFeature(ctxt, property, EnumSet.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         JsonDeserializer<?> deser = _enumDeserializer;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -119,6 +119,9 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         JsonDeserializer<?> valueDeser = _elementDeserializer;
+        // 07-May-2020, tatu: Is the argument `containerType.getRawClass()` right here?
+        //    In a way seems like it should rather refer to value class... ?
+        //    (as it's individual value of element type, not Container)...
         Boolean unwrapSingle = findFormatFeature(ctxt, property, _containerType.getRawClass(),
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // May have a content converter

File: src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderErrorHandling.java
Patch:
@@ -54,7 +54,7 @@ public void testUnknownProperty() throws Exception
             MAPPER.readValue(json, ValueClassXY.class);
             fail("Should not pass");
         } catch (MismatchedInputException e) {
-            verifyException(e, "unrecognized field");
+            verifyException(e, "Unrecognized field");
         }
         // but pass if ok to ignore
         ValueClassXY result = MAPPER.readerFor(ValueClassXY.class)

File: src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderFailTest.java
Patch:
@@ -70,7 +70,8 @@ public void testBuilderMethodReturnInvalidType() throws Exception
             MAPPER.readValue(json, ValueClassWrongBuildType.class);
             fail("Missing expected InvalidDefinitionException exception");
         } catch (InvalidDefinitionException e) {
-            verifyException(e, "Build method");
+            verifyException(e, "Build method ");
+            verifyException(e, "#build(0 params)");
             verifyException(e, "has wrong return type");
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -9,7 +9,6 @@
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
-import com.fasterxml.jackson.databind.deser.impl.UnsupportedTypeDeserializer;
 import com.fasterxml.jackson.databind.introspect.*;
 import com.fasterxml.jackson.databind.jsontype.NamedType;
 import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -957,7 +957,8 @@ public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,
      */
     public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)
     {
-        return ReferenceType.construct(rawType, null, // no bindings
+        return ReferenceType.construct(rawType,
+                TypeBindings.create(rawType, referredType), // [databind#2091]
                 null, null, // or super-class, interfaces?
                 referredType);
     }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java
Patch:
@@ -126,7 +126,7 @@ public ContainerWithTwoAnimals(U a1, V a2) {
               otherAnimal = a2;
          }
     }
-    
+
     /*
     /**********************************************************
     /* Unit tests

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandlerTest.java
Patch:
@@ -362,7 +362,7 @@ public void testUnexpectedTokenHandling() throws Exception
             mapper.readValue("true", Integer.class);
             fail("Should not pass");
         } catch (MismatchedInputException e) {
-            verifyException(e, "out of VALUE_TRUE token");
+            verifyException(e, "from Boolean value (token `JsonToken.VALUE_TRUE`)");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/DateDeserializationTest.java
Patch:
@@ -702,7 +702,7 @@ public void testCalendarArrayUnwrap() throws Exception
             fail("Did not throw exception when reading a value from a single value array with the UNWRAP_SINGLE_VALUE_ARRAYS feature disabled");
         } catch (MismatchedInputException exp) {
             verifyException(exp, "Cannot deserialize");
-            verifyException(exp, "out of START_ARRAY");
+            verifyException(exp, "from Array value (token `JsonToken.START_ARRAY`)");
         }
 
         reader = reader.with(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);

File: src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java
Patch:
@@ -157,7 +157,7 @@ public void testSingleValueArrayDeserializationException() throws Exception {
             mapper.readValue(value, IOException.class);
             fail("Exception not thrown when attempting to deserialize an IOException wrapped in a single value array with UNWRAP_SINGLE_VALUE_ARRAYS disabled");
         } catch (JsonMappingException exp2) {
-            verifyException(exp2, "out of START_ARRAY");
+            verifyException(exp2, "from Array value (token `JsonToken.START_ARRAY`)");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/node/ArrayNodeTest.java
Patch:
@@ -359,7 +359,7 @@ public void testSimpleMismatch() throws Exception
             mapper.readValue(" 123 ", ArrayNode.class);
             fail("Should not pass");
         } catch (MismatchedInputException e) {
-            verifyException(e, "out of VALUE_NUMBER_INT token");
+            verifyException(e, "from Number value (token `JsonToken.VALUE_NUMBER_INT`)");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/node/ObjectNodeTest.java
Patch:
@@ -463,7 +463,7 @@ public void testSimpleMismatch() throws Exception
             mapper.readValue("[ 1, 2, 3 ]", ObjectNode.class);
             fail("Should not pass");
         } catch (MismatchedInputException e) {
-            verifyException(e, "out of START_ARRAY token");
+            verifyException(e, "from Array value (token `JsonToken.START_ARRAY`)");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/struct/EmptyArrayAsNullTest.java
Patch:
@@ -54,7 +54,7 @@ public void testPOJOFromEmptyArray() throws Exception
                 .readValue(EMPTY_ARRAY);
             fail("Should not accept Empty Array for POJO by default");
         } catch (JsonMappingException e) {
-            verifyException(e, "START_ARRAY token");
+            verifyException(e, "from Array value (token `JsonToken.START_ARRAY`)");
             assertValidLocation(e.getLocation());
         }
 
@@ -78,7 +78,7 @@ public void testMapFromEmptyArray() throws Exception
                 .readValue(EMPTY_ARRAY);
             fail("Should not accept Empty Array for Map by default");
         } catch (JsonMappingException e) {
-            verifyException(e, "START_ARRAY token");
+            verifyException(e, "from Array value (token `JsonToken.START_ARRAY`)");
         }
         // should be ok to enable dynamically:
         Map<?,?> result = READER_WITH_ARRAYS.forType(Map.class)

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -113,8 +113,10 @@ public class SubTypeValidator
         s.add("org.apache.commons.configuration.JNDIConfiguration");
         s.add("org.apache.commons.configuration2.JNDIConfiguration");
 
-        // [databind#2469]: xalan2
+        // [databind#2469]: xalan
         s.add("org.apache.xalan.lib.sql.JNDIConnectionPool");
+        // [databind#2704]: xalan2
+        s.add("com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool");
 
         // [databind#2478]: comons-dbcp, p6spy
         s.add("org.apache.commons.dbcp.datasources.PerUserPoolDataSource");

File: src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicBooleanDeserializer.java
Patch:
@@ -13,7 +13,7 @@ public class AtomicBooleanDeserializer extends StdScalarDeserializer<AtomicBoole
     public AtomicBooleanDeserializer() { super(AtomicBoolean.class); }
 
     @Override
-    public AtomicBoolean deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
-        return new AtomicBoolean(_parseBooleanPrimitive(jp, ctxt));
+    public AtomicBoolean deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+        return new AtomicBoolean(_parseBooleanPrimitive(ctxt, p, AtomicBoolean.class));
     }
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java
Patch:
@@ -389,7 +389,7 @@ public boolean[] deserialize(JsonParser p, DeserializationContext ctxt)
                         _verifyNullForPrimitive(ctxt);
                         value = false;
                     } else {
-                        value = _parseBooleanPrimitive(p, ctxt);
+                        value = _parseBooleanPrimitive(ctxt, p, Boolean.TYPE);
                     }
                     if (ix >= chunk.length) {
                         chunk = builder.appendCompletedChunk(chunk, ix);
@@ -406,7 +406,7 @@ public boolean[] deserialize(JsonParser p, DeserializationContext ctxt)
         @Override
         protected boolean[] handleSingleElementUnwrapped(JsonParser p,
                 DeserializationContext ctxt) throws IOException {
-            return new boolean[] { _parseBooleanPrimitive(p, ctxt) };
+            return new boolean[] { _parseBooleanPrimitive(ctxt, p, Boolean.TYPE) };
         }
 
         @Override

File: src/test/java/com/fasterxml/jackson/databind/jsontype/vld/AnnotatedPolymorphicValidationTest.java
Patch:
@@ -76,6 +76,7 @@ public void testPolymorphicWithUnsafeBaseType() throws IOException
 
         // but may with proper validator
         ObjectMapper customMapper = JsonMapper.builder()
+                .enable(MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES)
                 .polymorphicTypeValidator(new NumbersAreOkValidator())
                 .build();
         

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3972,7 +3972,7 @@ public ObjectReader readerForArrayOf(Class<?> type) {
      * read or update instances of a type {@code List<type>}.
      * Functionally same as:
      *<pre>
-     *    readerFor(new TypeReference&lt;List&lt;type>>() { });
+     *    readerFor(new TypeReference&lt;List&lt;type&gt;&gt;() { });
      *</pre>
      *
      * @since 2.11
@@ -3988,7 +3988,7 @@ public ObjectReader readerForListOf(Class<?> type) {
      * read or update instances of a type {@code Map<String, type>}
      * Functionally same as:
      *<pre>
-     *    readerFor(new TypeReference&lt;Map&lt;String, type>>() { });
+     *    readerFor(new TypeReference&lt;Map&lt;String, type&gt;&gt;() { });
      *</pre>
      *
      * @since 2.11

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -180,6 +180,9 @@ public class SubTypeValidator
         // [databind#2682]: commons-jelly
         s.add("org.apache.commons.jelly.impl.Embedded");
 
+        // [databind#2688]: apache/drill
+        s.add("oadd.org.apache.xalan.lib.sql.JNDIConnectionPool");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1013,9 +1013,8 @@ protected SettableBeanProperty constructCreatorProperty(DeserializationContext c
 
         // Note: contextualization of typeDeser _should_ occur in constructor of CreatorProperty
         // so it is not called directly here
-        Object injectableValueId = (injectable == null) ? null : injectable.getId();
-        SettableBeanProperty prop = new CreatorProperty(name, type, property.getWrapperName(),
-                typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId,
+        SettableBeanProperty prop = CreatorProperty.construct(name, type, property.getWrapperName(),
+                typeDeser, beanDesc.getClassAnnotations(), param, index, injectable,
                 metadata);
         JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, param);
         if (deser == null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonLocationInstantiator.java
Patch:
@@ -41,10 +41,10 @@ public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig confi
     }
 
     private static CreatorProperty creatorProp(String name, JavaType type, int index) {
-        return new CreatorProperty(PropertyName.construct(name), type, null,
+        return CreatorProperty.construct(PropertyName.construct(name), type, null,
                 null, null, null, index, null, PropertyMetadata.STD_REQUIRED);
     }
-    
+
     @Override
     public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) {
         return new JsonLocation(args[0], _long(args[1]), _long(args[2]),

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -177,6 +177,9 @@ public class SubTypeValidator
         // [databind#2666]: apache/commons-jms
         s.add("org.apache.commons.proxy.provider.remoting.RmiProvider");
 
+        // [databind#2682]: commons-jelly
+        s.add("org.apache.commons.jelly.impl.Embedded");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -49,6 +49,9 @@ public class SubTypeValidator
         // [databind#1737]; 3rd party
 //s.add("org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor"); // deprecated by [databind#1855]
         s.add("org.springframework.beans.factory.config.PropertyPathFactoryBean");
+        // [databind#2680]
+        s.add("org.springframework.aop.config.MethodLocatingFactoryBean");
+        s.add("org.springframework.beans.factory.config.BeanReferenceFactoryBean");
 
 // s.add("com.mchange.v2.c3p0.JndiRefForwardingDataSource"); // deprecated by [databind#1931]
 // s.add("com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"); // - "" -

File: src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderWithUnwrappedSingleArray2608Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser.builder;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
@@ -70,8 +70,8 @@ public void testDeserializationAndFail() throws Exception {
                 .build();
 
 // Regular POJO would work:
-//        final String serialized = "{\"id\": 1, \"value\": {\"subValue\": \"123\"}}";
-        final String serialized = "{\"id\": 1, \"value\": [ {\"subValue\": \"123\"} ]}";
+//        final String serialized = "{\"value\": {\"subValue\": \"123\"}}";
+        final String serialized = "{\"value\": [ {\"subValue\": \"123\"} ]}";
         final ExamplePOJO2608 result = mapper.readValue(serialized, ExamplePOJO2608.class);
         assertNotNull(result);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -113,7 +113,6 @@ protected CollectionDeserializer withResolved(JsonDeserializer<?> dd,
             JsonDeserializer<?> vd, TypeDeserializer vtd,
             NullValueProvider nuller, Boolean unwrapSingle)
     {
-//if (true) throw new Error();
         return new CollectionDeserializer(_containerType,
                 (JsonDeserializer<Object>) vd, vtd,
                 _valueInstantiator, (JsonDeserializer<Object>) dd,

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandler1767Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.filter;
+package com.fasterxml.jackson.databind.deser.filter;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -168,7 +168,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
     public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         JsonToken curr = p.currentToken();
-        
+
         // Usually should just get string value:
         if (curr == JsonToken.VALUE_STRING || curr == JsonToken.FIELD_NAME) {
             CompactStringObjectMap lookup = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -253,7 +253,9 @@ public final TypeFactory getTypeFactory() {
     }
 
     @Override // since 2.11
-    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
+    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
+        throws IllegalArgumentException
+    {
         if (baseType.hasRawClass(subclass)) {
             return baseType;
         }

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -334,7 +334,9 @@ public final TypeFactory getTypeFactory() {
     }
 
     @Override // since 2.11
-    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
+    public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
+        throws IllegalArgumentException
+    {
         if (baseType.hasRawClass(subclass)) {
             return baseType;
         }

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java
Patch:
@@ -30,7 +30,7 @@ public class SimpleAbstractTypeResolver
     extends AbstractTypeResolver
     implements java.io.Serializable
 {
-    private static final long serialVersionUID = 8635483102371490919L;
+    private static final long serialVersionUID = 1L;
 
     /**
      * Mappings from super types to subtypes

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractContainers.java
Patch:
@@ -44,14 +44,14 @@ static class ListWrapper {
     public interface IDataValueList extends List<String> { }
 
     static class DataValueList extends LinkedList<String> implements IDataValueList { }
-   
+
     /*
     /**********************************************************
     /* Test methods
     /**********************************************************
      */
 
-    private final ObjectMapper MAPPER = new ObjectMapper();
+    private final ObjectMapper MAPPER = newJsonMapper();
     
     public void testAbstractLists() throws Exception
     {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -74,10 +74,11 @@ public class SubTypeValidator
         s.add("com.sun.deploy.security.ruleset.DRSHelper");
         s.add("org.apache.axis2.jaxws.spi.handler.HandlerResolverImpl");
 
-        // [databind#2186]: yet more 3rd party gadgets
+        // [databind#2186], [databind#2670]: yet more 3rd party gadgets
         s.add("org.jboss.util.propertyeditor.DocumentEditor");
         s.add("org.apache.openjpa.ee.RegistryManagedRuntime");
         s.add("org.apache.openjpa.ee.JNDIManagedRuntime");
+        s.add("org.apache.openjpa.ee.WASRegistryManagedRuntime"); // [#2670] addition
         s.add("org.apache.axis2.transport.jms.JMSOutTransportInfo");
 
         // [databind#2326] (2.9.9)

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -147,6 +147,9 @@ public class SubTypeValidator
         s.add("org.apache.ignite.cache.jta.jndi.CacheJndiTmFactory");
         s.add("org.quartz.utils.JNDIConnectionProvider");
 
+        // [databind#2659]: aries.transaction.jms
+        s.add("org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -138,8 +138,9 @@ public class SubTypeValidator
         // [databind#2642]: javax.swing (jdk)
         s.add("javax.swing.JEditorPane");
 
-        // [databind#2648]: shire-core
+        // [databind#2648], [databind#2653]: shire-core
         s.add("org.apache.shiro.realm.jndi.JndiRealmFactory");
+        s.add("org.apache.shiro.jndi.JndiObjectFactory");
 
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java
Patch:
@@ -600,7 +600,7 @@ protected Object mapObject(JsonParser p, DeserializationContext ctxt,
      */
 
     /**
-     * Streamlined version of {@UntypedObjectDeserializer} that has fewer checks and
+     * Streamlined version of {@link UntypedObjectDeserializer} that has fewer checks and
      * is only used when no custom deserializer overrides are applied.
      */
     @JacksonStdImpl

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -84,9 +84,9 @@ public enum DeserializationFeature implements ConfigFeature
     
     /**
      * Feature that determines whether JSON Array is mapped to
-     * <code>Object[]</code> or <code>List&lt;Object></code> when binding
+     * <code>Object[]</code> or {@code List<Object>} when binding
      * "untyped" objects (ones with nominal type of <code>java.lang.Object</code>).
-     * If true, binds as <code>Object[]</code>; if false, as <code>List&lt;Object></code>.
+     * If true, binds as <code>Object[]</code>; if false, as {@code List<Object>}.
      *<p>
      * Feature is disabled by default, meaning that JSON arrays are bound as
      * {@link java.util.List}s.
@@ -97,7 +97,7 @@ public enum DeserializationFeature implements ConfigFeature
      * Feature that determines standard deserialization mechanism used for
      * Enum values: if enabled, Enums are assumed to have been serialized  using
      * return value of <code>Enum.toString()</code>;
-     * if disabled, return value of <code>Enum.name()</code> is assumed to have been used.
+     * if disabled, return value of {@code Enum.name()} is assumed to have been used.
      *<p>
      * Note: this feature should usually have same value
      * as {@link SerializationFeature#WRITE_ENUMS_USING_TO_STRING}.

File: src/main/java/com/fasterxml/jackson/databind/Module.java
Patch:
@@ -161,7 +161,7 @@ public static interface SetupContext
          *<pre>
          *   mapper.configOverride(java.util.Date.class)
          *       .setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
-         *<pre>
+         *</pre>
          * to change the default format to use for properties of type
          * {@link java.util.Date} (possibly further overridden by per-property
          * annotations)

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1505,13 +1505,13 @@ public void registerSubtypes(NamedType... types) {
      * Accessor for getting a mutable configuration override object for
      * given type, needed to add or change per-type overrides applied
      * to properties of given type.
-     * Usage is through returned object by colling "setter" methods, which
+     * Usage is through returned object by calling "setter" methods, which
      * directly modify override object and take effect directly.
      * For example you can do
      *<pre>
      *   mapper.configOverride(java.util.Date.class)
      *       .setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
-     *<pre>
+     *</pre>
      * to change the default format to use for properties of type
      * {@link java.util.Date} (possibly further overridden by per-property
      * annotations)

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java
Patch:
@@ -12,7 +12,7 @@
  * Deserializer for {@link EnumMap} values.
  * <p>
  * Note: casting within this class is all messed up -- just could not figure out a way
- * to properly deal with recursive definition of "EnumMap&lt;K extends Enum&lt;K>, V>
+ * to properly deal with recursive definition of {@code EnumMap<K extends Enum<K>, V>}
  */
 @SuppressWarnings({ "unchecked", "rawtypes" }) 
 public class EnumMapDeserializer

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -305,7 +305,7 @@ public ArrayNode addAll(Collection<? extends JsonNode> nodes)
     /**
      * Method for inserting specified child node as an element
      * of this Array. If index is 0 or less, it will be inserted as
-     * the first element; if >= size(), appended at the end, and otherwise
+     * the first element; {@code if >= size()}, appended at the end, and otherwise
      * inserted before existing element in specified index.
      * No exceptions are thrown for any index.
      *

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -136,6 +136,9 @@ public class SubTypeValidator
         // [databind#2642]: javax.swing (jdk)
         s.add("javax.swing.JEditorPane");
 
+        // [databind#2648]: shire-core
+        s.add("org.apache.shiro.realm.jndi.JndiRealmFactory");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -133,6 +133,9 @@ public class SubTypeValidator
         s.add("com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig");
         s.add("br.com.anteros.dbcp.AnterosDBCPConfig");
 
+        // [databind#2642]: javax.swing (jdk)
+        s.add("javax.swing.JEditorPane");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -123,6 +123,9 @@ public class SubTypeValidator
         s.add("net.sf.ehcache.transaction.manager.selector.GenericJndiSelector");
         s.add("net.sf.ehcache.transaction.manager.selector.GlassfishSelector");
 
+        // [databind#2620]: xbean-reflect
+        s.add("org.apache.xbean.propertyeditor.JndiConverter");
+        
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -138,6 +138,9 @@ public class SubTypeValidator
         // [databind#2642]: javax.swing (jdk)
         s.add("javax.swing.JEditorPane");
 
+        // [databind#2648]: shire-core
+        s.add("org.apache.shiro.realm.jndi.JndiRealmFactory");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/test/java/com/fasterxml/jackson/databind/ObjectReaderTest.java
Patch:
@@ -30,7 +30,7 @@ static class POJO {
     public void testSimpleViaParser() throws Exception
     {
         final String JSON = "[1]";
-        JsonParser p = MAPPER.getFactory().createParser(JSON);
+        JsonParser p = MAPPER.createParser(JSON);
         Object ob = MAPPER.readerFor(Object.class)
                 .readValue(p);
         p.close();

File: src/test/java/com/fasterxml/jackson/databind/deser/TestJacksonTypes.java
Patch:
@@ -113,7 +113,7 @@ public void testTokenBufferWithSequence() throws Exception
     // [databind#2398]
     public void testDeeplyNestedArrays() throws Exception
     {
-        try (JsonParser p = MAPPER.tokenStreamFactory().createParser(_createNested(RECURSION_2398 * 2,
+        try (JsonParser p = MAPPER.createParser(_createNested(RECURSION_2398 * 2,
                 "[", " 123 ", "]"))) {
             p.nextToken();
             TokenBuffer b = new TokenBuffer(p);
@@ -124,7 +124,7 @@ public void testDeeplyNestedArrays() throws Exception
 
     public void testDeeplyNestedObjects() throws Exception
     {
-        try (JsonParser p = MAPPER.tokenStreamFactory().createParser(_createNested(RECURSION_2398,
+        try (JsonParser p = MAPPER.createParser(_createNested(RECURSION_2398,
                 "{\"a\":", "42", "}"))) {
             p.nextToken();
             TokenBuffer b = new TokenBuffer(p);

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java
Patch:
@@ -228,7 +228,7 @@ public void testSimple() throws Exception
         // First "good" case with Strings
         String JSON = "\"OK\" \"RULES\"  null";
         // multiple main-level mappings, need explicit parser:
-        JsonParser jp = MAPPER.getFactory().createParser(JSON);
+        JsonParser jp = MAPPER.createParser(JSON);
 
         assertEquals(TestEnum.OK, MAPPER.readValue(jp, TestEnum.class));
         assertEquals(TestEnum.RULES, MAPPER.readValue(jp, TestEnum.class));

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsTest.java
Patch:
@@ -606,7 +606,7 @@ public void testSequenceOfInts() throws Exception
             sb.append(" ");
             sb.append(i);
         }
-        JsonParser jp = MAPPER.getFactory().createParser(sb.toString());
+        JsonParser jp = MAPPER.createParser(sb.toString());
         for (int i = 0; i < NR_OF_INTS; ++i) {
             Integer result = MAPPER.readValue(jp, Integer.class);
             assertEquals(Integer.valueOf(i), result);

File: src/test/java/com/fasterxml/jackson/databind/exc/DeserExceptionTypeTest.java
Patch:
@@ -75,7 +75,7 @@ public void testExceptionWithIncomplete()
         throws Exception
     {
         BrokenStringReader r = new BrokenStringReader("[ 1, ", "TEST");
-        JsonParser p = MAPPER.getFactory().createParser(r);
+        JsonParser p = MAPPER.createParser(r);
         try {
             @SuppressWarnings("unused")
             Object ob = MAPPER.readValue(p, Object.class);
@@ -90,7 +90,7 @@ public void testExceptionWithIncomplete()
 
     public void testExceptionWithEOF() throws Exception
     {
-        JsonParser p = MAPPER.getFactory().createParser("  3");
+        JsonParser p = MAPPER.createParser("  3");
 
         Integer I = MAPPER.readValue(p, Integer.class);
         assertEquals(3, I.intValue());

File: src/test/java/com/fasterxml/jackson/databind/exc/ExceptionSerializationTest.java
Patch:
@@ -70,7 +70,7 @@ public void testSimple() throws Exception
     // to double-check [databind#1413]
     public void testSimpleOther() throws Exception
     {
-        JsonParser p = MAPPER.getFactory().createParser("{ }");
+        JsonParser p = MAPPER.createParser("{ }");
         InvalidFormatException exc = InvalidFormatException.from(p, "Test", getClass(), String.class);
         String json = MAPPER.writeValueAsString(exc);
         p.close();

File: src/test/java/com/fasterxml/jackson/databind/node/TreeFromIncompleteJsonTest.java
Patch:
@@ -13,7 +13,7 @@ public class TreeFromIncompleteJsonTest extends BaseMapTest
     public void testErrorHandling() throws IOException {
 
       String json = "{\"A\":{\"B\":\n";
-      JsonParser parser = MAPPER.getFactory().createParser(json);
+      JsonParser parser = MAPPER.createParser(json);
       try {
           parser.readValueAsTree();
       } catch (JsonEOFException e) {

File: src/test/java/com/fasterxml/jackson/databind/ser/TestArraySerialization.java
Patch:
@@ -18,7 +18,7 @@ public void testLongStringArray() throws Exception
         }
         String str = sb.toString();
         byte[] data = MAPPER.writeValueAsBytes(new String[] { "abc", str, null, str });
-        JsonParser jp = MAPPER.getFactory().createParser(data);
+        JsonParser jp = MAPPER.createParser(data);
         assertToken(JsonToken.START_ARRAY, jp.nextToken());
         assertToken(JsonToken.VALUE_STRING, jp.nextToken());
         assertEquals("abc", jp.getText());
@@ -51,10 +51,9 @@ public void testBigIntArray() throws Exception
         // Let's try couple of times, to ensure that state is handled
         // correctly by ObjectMapper (wrt buffer recycling used
         // with 'writeAsBytes()')
-        JsonFactory f = MAPPER.getFactory();
         for (int round = 0; round < 3; ++round) {
             byte[] data = MAPPER.writeValueAsBytes(ints);
-            JsonParser jp = f.createParser(data);
+            JsonParser jp = MAPPER.createParser(data);
             assertToken(JsonToken.START_ARRAY, jp.nextToken());
             for (int i = 0; i < SIZE; ++i) {
                 assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());

File: src/test/java/com/fasterxml/jackson/databind/struct/ScalarCoercionTest.java
Patch:
@@ -219,11 +219,11 @@ private void _verifyRootStringCoerceFail(String unquotedValue, Class<?> type) th
         // Test failure for root value: for both byte- and char-backed sources:
 
         final String input = quote(unquotedValue);
-        try (JsonParser p = NOT_COERCING_MAPPER.getFactory().createParser(new StringReader(input))) {
+        try (JsonParser p = NOT_COERCING_MAPPER.createParser(new StringReader(input))) {
             _verifyStringCoerceFail(p, unquotedValue, type);
         }
         final byte[] inputBytes = utf8Bytes(input);
-        try (JsonParser p = NOT_COERCING_MAPPER.getFactory().createParser(new ByteArrayInputStream(inputBytes))) {
+        try (JsonParser p = NOT_COERCING_MAPPER.createParser(new ByteArrayInputStream(inputBytes))) {
             _verifyStringCoerceFail(p, unquotedValue, type);
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -135,6 +135,9 @@ public class SubTypeValidator
         s.add("com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig");
         s.add("br.com.anteros.dbcp.AnterosDBCPConfig");
 
+        // [databind#2642]: javax.swing (jdk)
+        s.add("javax.swing.JEditorPane");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -367,7 +367,7 @@ protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt,
 
         // 12-Feb-20202, tatu: Need to ensure that not only all Enum implementations get
         //    there, but also `Enum` -- latter wrt [databind#2605], polymorphic usage
-        if (ClassUtil.isEnumType(type.getRawClass())) { // type.isEnumType()) {
+        if (type.isEnumType()) {
             return factory.createEnumDeserializer(ctxt, type, beanDesc);
         }
         if (type.isContainerType()) {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -127,6 +127,9 @@ public class SubTypeValidator
         s.add("net.sf.ehcache.transaction.manager.selector.GenericJndiSelector");
         s.add("net.sf.ehcache.transaction.manager.selector.GlassfishSelector");
 
+        // [databind#2620]: xbean-reflect
+        s.add("org.apache.xbean.propertyeditor.JndiConverter");
+        
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java
Patch:
@@ -59,7 +59,7 @@ public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider p
         }
         // 23-Feb-2015, tatu: Nasty, but has to do (for now)
         if (_mapSerializer != null) {
-            _mapSerializer.serializeFields((Map<?,?>) value, gen, provider);
+            _mapSerializer.serializeWithoutTypeInfo((Map<?,?>) value, gen, provider);
             return;
         }
         _serializer.serialize(value, gen, provider);

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -251,7 +251,9 @@ public JsonMappingException(Closeable processor, String msg) {
     public JsonMappingException(Closeable processor, String msg, Throwable problem) {
         super(msg, problem);
         _processor = processor;
-        if (processor instanceof JsonParser) {
+        if (problem instanceof JsonProcessingException) {
+            _location = ((JsonProcessingException) problem).getLocation();
+        } else if (processor instanceof JsonParser) {
             _location = ((JsonParser) processor).getTokenLocation();
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -992,7 +992,10 @@ protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, D
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName,
                         _anySetter.deserialize(p, ctxt));
+                continue;
             }
+            // Unknown: let's call handler method
+            handleUnknownProperty(p, ctxt, _valueClass, propName);
         }
         tokens.writeEndObject();
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest.java
Patch:
@@ -514,7 +514,6 @@ public void testInverseExternalId928() throws Exception
     // for [databind#965]
     public void testBigDecimal965() throws Exception
     {
-
         Wrapper965 w = new Wrapper965();
         w.typeEnum = Type965.BIG_DECIMAL;
         final String NUM_STR = "-10000000000.0000000001";

File: src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
Patch:
@@ -257,7 +257,7 @@ public StdDateFormat withColonInTimeZone(boolean b) {
     
     @Override
     public StdDateFormat clone() {
-        // Although there is that much state to share, we do need to
+        // Although there isn't that much state to share, we do need to
         // orchestrate a bit, mostly since timezones may be changed
         return new StdDateFormat(_timezone, _locale, _lenient, _tzSerializedWithColon);
     }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -351,7 +351,8 @@ public boolean useForType(JavaType t)
             null, StdDateFormat.instance, null,
             Locale.getDefault(),
             null, // to indicate "use Jackson default TimeZone" (UTC since Jackson 2.7)
-            Base64Variants.getDefaultVariant(), // 2.1
+            Base64Variants.getDefaultVariant(),
+            // Only for 2.x; 3.x will use more restrictive default
             LaissezFaireSubTypeValidator.instance
     );
 

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -911,7 +911,7 @@ public boolean isEnabled(MapperFeature f) {
     }
 
     public boolean isEnabled(JsonParser.Feature f) {
-        return _parserFactory.isEnabled(f);
+        return _config.isEnabled(f, _parserFactory);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -362,7 +362,7 @@ public final JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {
      * @since 2.8
      */
     public final JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) {
-        return _config.getDefaultPropertyInclusion();
+        return _config.getDefaultPropertyInclusion(baseType);
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/ser/filter/MapInclusion2573Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.ser.filter;
 
 import java.util.*;
 
@@ -78,7 +78,7 @@ public void test2572MapOverrideInclAlways() throws Exception
                     JsonInclude.Include.ALWAYS));
         assertEquals(aposToQuotes("{'Speed':100,'Weight':null}"),
                 mapper.writeValueAsString(CAR_PROPERTIES));
-        assertEquals(aposToQuotes("{'model':'F60','properties':{'Speed':100,'Weight':null}}}"),
+        assertEquals(aposToQuotes("{'model':'F60','properties':{'Speed':100,'Weight':null}}"),
                 mapper.writeValueAsString(CAR));
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -278,8 +278,8 @@ public JsonSerializer<Object> findBeanOrAddOnSerializer(SerializerProvider prov,
         // First things first: we know some types are not beans...
         if (!isPotentialBeanType(type.getRawClass())) {
             // 03-Aug-2012, tatu: Except we do need to allow serializers for Enums,
-            //   as per [databind#24]
-            if (!type.isEnumType()) {
+            //   as per [databind#24], [databind#2576]
+            if (!ClassUtil.isEnumType(type.getRawClass())) {
                 return null;
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java
Patch:
@@ -127,7 +127,7 @@ public abstract void serializeWithType(JsonGenerator jgen, SerializerProvider pr
 
    /*
    /**********************************************************
-   /* Std method overrides
+   /* Standard method overrides
    /**********************************************************
     */
 

File: src/test/java/com/fasterxml/jackson/databind/node/TestMissingNode.java
Patch:
@@ -16,7 +16,9 @@ public void testMissing()
         assertEquals("", n.asText());
         assertStandardEquals(n);
         // 10-Dec-2018, tatu: With 2.10, should serialize same as via ObjectMapper/ObjectWriter
-        assertEquals("null", n.toString());
+        // 10-Dec-2019, tatu: Surprise! No, this is not how it worked in 2.9, nor does it make
+        //    sense... see [databind#2566] for details
+        assertEquals("", n.toString());
 
         assertNodeNumbersForNonNumeric(n);
 

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapRelatedTypesDeserTest.java
Patch:
@@ -8,7 +8,7 @@
 public class MapRelatedTypesDeserTest
     extends BaseMapTest
 {
-    private final ObjectMapper MAPPER = new ObjectMapper();
+    private final ObjectMapper MAPPER = newJsonMapper();
 
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java
Patch:
@@ -97,6 +97,7 @@ public Collection<Object> deserialize(JsonParser p, DeserializationContext ctxt,
             return handleNonArray(p, ctxt, new ArrayBlockingQueue<Object>(1));
         }
         result0 = super.deserialize(p, ctxt, new ArrayList<Object>());
+        if (result0.isEmpty()) return new ArrayBlockingQueue<Object>(1, false);
         return new ArrayBlockingQueue<Object>(result0.size(), false, result0);
     }
 

File: src/test/java/com/fasterxml/jackson/databind/jsonschema/TestReadJsonSchema.java
Patch:
@@ -3,12 +3,10 @@
 import java.util.*;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
 
 /**
  * Trivial test to ensure <code>JsonSchema</code> can be also deserialized
  */
-@SuppressWarnings("deprecation")
 public class TestReadJsonSchema
     extends com.fasterxml.jackson.databind.BaseMapTest
 {
@@ -48,6 +46,7 @@ static class Schemable {
      * Verifies that a simple schema that is serialized can be
      * deserialized back to equal schema instance
      */
+    @SuppressWarnings("deprecation")
     public void testDeserializeSimple() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();

File: src/test/java/com/fasterxml/jackson/databind/misc/BeanPropertyMapTest.java
Patch:
@@ -32,7 +32,8 @@ public void testArrayOutOfBounds884() throws Exception
         props.add(new ObjectIdValueProperty(new MyObjectIdReader("pk"), md));
         props.add(new ObjectIdValueProperty(new MyObjectIdReader("firstName"), md));
         BeanPropertyMap propMap = new BeanPropertyMap(false, props,
-                new HashMap<String,List<PropertyName>>());
+                new HashMap<String,List<PropertyName>>(),
+                Locale.getDefault());
         propMap = propMap.withProperty(new ObjectIdValueProperty(new MyObjectIdReader("@id"), md));
         assertNotNull(propMap);
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKAtomicTypesDeserTest.java
Patch:
@@ -97,7 +97,7 @@ static class Issue1256Bean {
     // [databind#2303]
     static class MyBean2303 {
         public AtomicReference<AtomicReference<Integer>> refRef;
-    }    
+    }
 
     /*
     /**********************************************************

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java
Patch:
@@ -282,6 +282,7 @@ public void testCollections()
         JavaType t = tf.constructType(ArrayList.class);
         assertEquals(CollectionType.class, t.getClass());
         assertSame(ArrayList.class, t.getRawClass());
+        assertSame(Object.class, ((CollectionType) t).getContentType().getRawClass());
 
         // And then the proper way
         t = tf.constructType(new TypeReference<ArrayList<String>>() { });

File: src/test/java/com/fasterxml/jackson/databind/util/EnumValuesTest.java
Patch:
@@ -52,7 +52,8 @@ public void testConstructWithToString() {
 
     public void testEnumResolver()
     {
-        EnumResolver enumRes = EnumResolver.constructUnsafeUsingToString(ABC.class, null);
+        EnumResolver enumRes = EnumResolver.constructUnsafeUsingToString(ABC.class,
+                MAPPER.getSerializationConfig().getAnnotationIntrospector());
         assertEquals(ABC.B, enumRes.getEnum(1));
         assertNull(enumRes.getEnum(-1));
         assertNull(enumRes.getEnum(3));

File: src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java
Patch:
@@ -51,7 +51,7 @@ public class OptionalHandlerFactory implements java.io.Serializable
         try {
             node = org.w3c.dom.Node.class;
             doc = org.w3c.dom.Document.class;
-        } catch (Exception e) {
+        } catch (Throwable e) {
             // not optimal but will do
             Logger.getLogger(OptionalHandlerFactory.class.getName())
                 .log(Level.INFO, "Could not load DOM `Node` and/or `Document` classes: no DOM support");

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1326,8 +1326,7 @@ public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,
                 } else {
                     inst = findValueInstantiator(ctxt, beanDesc);
                 }
-                Class<?> kt = keyType.getRawClass();
-                if (kt == null || !ClassUtil.isEnumType(kt)) {
+                if (!keyType.isEnumImplType()) {
                     throw new IllegalArgumentException("Cannot construct EnumMap; generic (key) type not available");
                 }
                 deser = new EnumMapDeserializer(type, inst, null,

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -85,7 +85,7 @@ protected JsonNode() { }
      * Convenience method that is functionally same as:
      *<pre>
      *    size() == 0
-     *<pre>
+     *</pre>
      * for all node types.
      *
      * @since 2.10

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -1373,7 +1373,7 @@ public <T> T readValue(DataInput src) throws IOException
      * Method that reads content from given input source,
      * using configuration of this reader, and binds it as JSON Tree.
      * Returns {@link JsonNode} that represents the root of the resulting tree, if there
-     * was content to read, or "missing node" (instance of {@JsonNode} for which
+     * was content to read, or "missing node" (instance of {@link JsonNode} for which
      * {@link JsonNode#isMissingNode()} returns true, and behaves otherwise similar to
      * "null node") if no more content is accessible through passed-in input source.
      *<p>

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -1754,7 +1754,7 @@ public JsonMappingException instantiationException(Class<?> instClass, String ms
     public JsonMappingException invalidTypeIdException(JavaType baseType, String typeId,
             String extraDesc) {
         String msg = String.format("Could not resolve type id '%s' as a subtype of %s",
-                typeId, baseType);
+                typeId, ClassUtil.getTypeDescription(baseType));
         return InvalidTypeIdException.from(_parser, _colonConcat(msg, extraDesc), baseType, typeId);
     }
 
@@ -1784,7 +1784,7 @@ public JsonMappingException unknownTypeException(JavaType type, String id,
             String extraDesc)
     {
         String msg = String.format("Could not resolve type id '%s' into a subtype of %s",
-                id, type);
+                id, ClassUtil.getTypeDescription(type));
         msg = _colonConcat(msg, extraDesc);
         return MismatchedInputException.from(_parser, type, msg);
     }

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -1227,7 +1227,7 @@ public void reportMappingProblem(Throwable t, String message, Object... msgArgs)
     public JsonMappingException invalidTypeIdException(JavaType baseType, String typeId,
             String extraDesc) {
         String msg = String.format("Could not resolve type id '%s' as a subtype of %s",
-                typeId, baseType);
+                typeId, ClassUtil.getTypeDescription(baseType));
         return InvalidTypeIdException.from(null, _colonConcat(msg, extraDesc), baseType, typeId);
     }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsForContentTest.java
Patch:
@@ -33,7 +33,7 @@ static class NullContentUndefined<T> {
         @JsonSetter // leave with defaults
         public T values;
     }
-    
+
     /*
     /**********************************************************
     /* Test methods, fail-on-null

File: src/test/java/com/fasterxml/jackson/databind/misc/ParsingContext2525Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.misc;
 
 import java.io.IOException;
 

File: src/test/java/com/fasterxml/jackson/databind/node/ArrayNodeTest.java
Patch:
@@ -260,7 +260,7 @@ public void testParser() throws Exception
         p.setCodec(null);
         assertNull(p.getCodec());
         assertNotNull(p.getParsingContext());
-//        assertTrue(p.getParsingContext().inRoot());
+        assertTrue(p.getParsingContext().inRoot());
         assertNotNull(p.getTokenLocation());
         assertNotNull(p.getCurrentLocation());
         assertNull(p.getEmbeddedObject());

File: src/test/java/com/fasterxml/jackson/databind/node/NodeContext2049Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.node;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -1583,6 +1583,8 @@ public JsonToken nextToken() throws IOException
                     || _currToken == JsonToken.END_ARRAY) {
                 // Closing JSON Object/Array? Close matching context
                 _parsingContext = _parsingContext.parentOrCopy();
+            } else {
+                _parsingContext.updateForValue();
             }
             return _currToken;
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1292,7 +1292,7 @@ protected Object deserializeFromObjectUsingNonDefault(JsonParser p,
         Class<?> raw = _beanType.getRawClass();
         if (ClassUtil.isNonStaticInnerClass(raw)) {
             return ctxt.handleMissingInstantiator(raw, null, p,
-"can only instantiate non-static inner class by using default, no-argument constructor");
+"non-static inner classes like this can only by instantiated using default, no-argument constructor");
         }
         return ctxt.handleMissingInstantiator(raw, getValueInstantiator(), p,
                 "cannot deserialize from Object value (no delegate- or property-based Creator)");

File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/BigDecimalAsString2519Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.ser.jdk;
 
 import java.math.BigDecimal;
 import java.util.*;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java
Patch:
@@ -129,7 +129,9 @@ public BigDecimalAsStringSerializer() {
 
         @Override
         public boolean isEmpty(SerializerProvider prov, Object value) {
-            return valueToString(value).isEmpty();
+            // As per [databind#2513], should not delegate; also, never empty (numbers do
+            // have "default value" to filter by, just not "empty"
+            return false;
         }
 
         @Override

File: src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
Patch:
@@ -215,7 +215,7 @@ protected ObjectMapper sharedMapper() {
         }
         return SHARED_MAPPER;
     }
-    
+
     protected ObjectMapper objectMapper() {
         return sharedMapper();
     }

File: src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithDeser.java
Patch:
@@ -45,7 +45,7 @@ static class TestPOJO
     /**********************************************************
      */
 
-    final ObjectMapper MAPPER = objectMapper();
+    final ObjectMapper MAPPER = sharedMapper();
     
     public void testSimplePerCall() throws Exception
     {

File: src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithSer.java
Patch:
@@ -47,7 +47,7 @@ static class TestPOJO
     /**********************************************************
      */
 
-    final ObjectMapper MAPPER = objectMapper();
+    final ObjectMapper MAPPER = sharedMapper();
     
     public void testSimplePerCall() throws Exception
     {

File: src/test/java/com/fasterxml/jackson/databind/convert/NumericConversionTest.java
Patch:
@@ -5,7 +5,7 @@
 
 public class NumericConversionTest extends BaseMapTest
 {
-    private final ObjectMapper MAPPER = objectMapper();
+    private final ObjectMapper MAPPER = sharedMapper();
     private final ObjectReader R = MAPPER.reader().without(DeserializationFeature.ACCEPT_FLOAT_AS_INT);
 
     public void testDoubleToInt() throws Exception

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingArrayCreatorsTest.java
Patch:
@@ -72,9 +72,9 @@ static class WithBagOfValues2324 {
         public Bag2324<Value2324> getValues() { return this.bagOfValues; }
         public void setValues(Bag2324<Value2324> bagOfValues) { this.bagOfValues = bagOfValues; }
         private Bag2324<Value2324> bagOfValues;
-    }    
+    }
 
-    private final ObjectMapper MAPPER = objectMapper();
+    private final ObjectMapper MAPPER = sharedMapper();
 
     // [databind#1804]
     public void testDelegatingArray1804() throws Exception {

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -791,7 +791,7 @@ public TypeSerializer findTypeSerializer(JavaType javaType) throws JsonMappingEx
     public JsonSerializer<Object> findKeySerializer(JavaType keyType, BeanProperty property)
         throws JsonMappingException
     {
-        JsonSerializer<Object> ser = _serializerFactory.createKeySerializer(_config, keyType, _keySerializer);
+        JsonSerializer<Object> ser = _serializerFactory.createKeySerializer(this, keyType, _keySerializer);
         // 25-Feb-2011, tatu: As per [JACKSON-519], need to ensure contextuality works here, too
         return _handleContextualResolvable(ser, property);
     }

File: src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java
Patch:
@@ -10,6 +10,7 @@
 /**
  * Numeric node that contains simple 64-bit integer values.
  */
+@SuppressWarnings("serial")
 public class BigIntegerNode
     extends NumericNode
 {

File: src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java
Patch:
@@ -11,6 +11,7 @@
  * Numeric node that contains values that do not fit in simple
  * integer (int, long) or floating point (double) values.
  */
+@SuppressWarnings("serial")
 public class DecimalNode
     extends NumericNode
 {

File: src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java
Patch:
@@ -13,6 +13,7 @@
  * Numeric node that contains 64-bit ("double precision")
  * floating point values simple 32-bit integer values.
  */
+@SuppressWarnings("serial")
 public class DoubleNode
     extends NumericNode
 {

File: src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java
Patch:
@@ -14,6 +14,7 @@
  * 
  * @since 2.2
  */
+@SuppressWarnings("serial")
 public class FloatNode extends NumericNode
 {
     protected final float _value;

File: src/main/java/com/fasterxml/jackson/databind/node/IntNode.java
Patch:
@@ -12,6 +12,7 @@
 /**
  * Numeric node that contains simple 32-bit integer values.
  */
+@SuppressWarnings("serial")
 public class IntNode
     extends NumericNode
 {

File: src/main/java/com/fasterxml/jackson/databind/node/LongNode.java
Patch:
@@ -12,6 +12,7 @@
 /**
  * Numeric node that contains simple 64-bit integer values.
  */
+@SuppressWarnings("serial")
 public class LongNode
     extends NumericNode
 {

File: src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java
Patch:
@@ -12,6 +12,7 @@
 /**
  * Numeric node that contains simple 16-bit integer values.
  */
+@SuppressWarnings("serial")
 public class ShortNode
     extends NumericNode
 {

File: src/main/java/com/fasterxml/jackson/databind/type/PlaceholderForType.java
Patch:
@@ -83,7 +83,6 @@ public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superCl
         return _unsupported();
     }
 
-    @SuppressWarnings("deprecation")
     @Override
     protected JavaType _narrow(Class<?> subclass) {
         return _unsupported();

File: src/test/java/com/fasterxml/jackson/databind/format/MapFormatShapeTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.format;
 
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;

File: src/test/java/com/fasterxml/jackson/databind/jsontype/GenericNestedType2331Test.java
Patch:
@@ -30,6 +30,7 @@ public List<? extends SuperNode<Node<T>>> getChildren() {
         }
     }    
     
+    @SuppressWarnings("rawtypes")
     public void testGeneric2331() throws Exception {
         Node root = new Node();
         root.children.add(new Node());

File: src/test/java/com/fasterxml/jackson/databind/mixins/MapperMixinsCopy1998Test.java
Patch:
@@ -88,7 +88,6 @@ public MyChildB(String name) {
         }
     }
 
-    @SuppressWarnings("deprecation")
     public void testB_KO() throws Exception
     {
         final ObjectMapper DEFAULT = defaultMapper();

File: src/test/java/com/fasterxml/jackson/databind/module/TestDuplicateRegistration.java
Patch:
@@ -28,7 +28,6 @@ public void setupModule(SetupContext context) {
         }
     }
 
-    @SuppressWarnings("deprecation")
     public void testDuplicateRegistration() throws Exception
     {
         // by default, duplicate registration should be prevented

File: src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java
Patch:
@@ -10,7 +10,6 @@
 import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.json.JsonMapper;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -54,6 +54,9 @@ public class SubTypeValidator
         // [databind#1855]: more 3rd party
         s.add("org.apache.tomcat.dbcp.dbcp2.BasicDataSource");
         s.add("com.sun.org.apache.bcel.internal.util.ClassLoader");
+        // [databind#1899]: more 3rd party
+        s.add("org.hibernate.jmx.StatisticsService");
+        s.add("org.apache.ibatis.datasource.jndi.JndiDataSourceFactory");
         // [databind#2032]: more 3rd party; data exfiltration via xml parsed ext entities
         s.add("org.apache.ibatis.parsing.XPathParser");
 
@@ -63,9 +66,6 @@ public class SubTypeValidator
         // [databind#2058]: Oracle JDBC driver, with jndi/ldap lookup
         s.add("oracle.jdbc.connector.OracleManagedConnectionFactory");
         s.add("oracle.jdbc.rowset.OracleJDBCRowSet");
-        // [databind#1899]: more 3rd party
-        s.add("org.hibernate.jmx.StatisticsService");
-        s.add("org.apache.ibatis.datasource.jndi.JndiDataSourceFactory");
 
         // [databind#2097]: some 3rd party, one JDK-bundled
         s.add("org.slf4j.ext.EventData");

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
Patch:
@@ -24,7 +24,7 @@
  * can be coerced into text, like Numbers and Booleans).
  * Simple JSON String values are trimmed using {@link java.lang.String#trim}.
  * Partial deserializer implementation will try to first access current token as
- * a String, calls {@link #_deserialize(String,DeserializationContext)} and
+ * a String, calls {@code _deserialize(String,DeserializationContext)} and
  * returns return value.
  * If this does not work (current token not a simple scalar type), attempts
  * are made so that:

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -173,7 +173,7 @@ public void serialize(JsonGenerator f, SerializerProvider provider) throws IOExc
     {
         final List<JsonNode> c = _children;
         final int size = c.size();
-        f.writeStartArray(size);
+        f.writeStartArray(this, size);
         for (int i = 0; i < size; ++i) { // we'll typically have array list
             // For now, assuming it's either BaseJsonNode, JsonSerializable
             JsonNode n = c.get(i);

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java
Patch:
@@ -75,7 +75,7 @@ public final void serialize(List<?> value, JsonGenerator gen, SerializerProvider
                 return;
             }
         }
-        gen.writeStartArray(len);
+        gen.writeStartArray(value, len);
         serializeContents(value, gen, provider);
         gen.writeEndArray();
     }
@@ -182,7 +182,6 @@ public void serializeTypedContents(List<?> value, JsonGenerator jgen, Serializer
                 }
             }
         } catch (Exception e) {
-            // [JACKSON-55] Need to add reference information
             wrapAndThrow(provider, e, value, i);
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java
Patch:
@@ -73,7 +73,7 @@ public void serialize(List<String> value, JsonGenerator g,
                 return;
             }
         }
-        g.writeStartArray(len);
+        g.writeStartArray(value, len);
         serializeContents(value, g, provider, len);
         g.writeEndArray();
     }
@@ -85,14 +85,14 @@ public void serializeWithType(List<String> value, JsonGenerator g, SerializerPro
     {
         WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
                 typeSer.typeId(value, JsonToken.START_ARRAY));
+        g.setCurrentValue(value);
         serializeContents(value, g, provider, value.size());
         typeSer.writeTypeSuffix(g, typeIdDef);
     }
 
     private final void serializeContents(List<String> value, JsonGenerator g,
             SerializerProvider provider, int len) throws IOException
     {
-        g.setCurrentValue(value);
         int i = 0;
         try {
             for (; i < len; ++i) {

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java
Patch:
@@ -63,7 +63,7 @@ public final void serialize(Iterator<?> value, JsonGenerator gen,
             }
         }
         */
-        gen.writeStartArray();
+        gen.writeStartArray(value);
         serializeContents(value, gen, provider);
         gen.writeEndArray();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -167,7 +167,7 @@ public final void serialize(String[] value, JsonGenerator gen, SerializerProvide
                 return;
             }
         }
-        gen.writeStartArray(len);
+        gen.writeStartArray(value, len);
         serializeContents(value, gen, provider);
         gen.writeEndArray();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java
Patch:
@@ -67,7 +67,6 @@ protected void acceptContentVisitor(JsonArrayFormatVisitor visitor) throws JsonM
     public void serialize(Collection<String> value, JsonGenerator g,
             SerializerProvider provider) throws IOException
     {
-        g.setCurrentValue(value);
         final int len = value.size();
         if (len == 1) {
             if (((_unwrapSingle == null) &&
@@ -77,7 +76,7 @@ public void serialize(Collection<String> value, JsonGenerator g,
                 return;
             }
         }
-        g.writeStartArray(len);
+        g.writeStartArray(value, len);
         serializeContents(value, g, provider);
         g.writeEndArray();
     }
@@ -87,9 +86,9 @@ public void serializeWithType(Collection<String> value, JsonGenerator g,
             SerializerProvider provider, TypeSerializer typeSer)
         throws IOException
     {
-        g.setCurrentValue(value);
         WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
                 typeSer.typeId(value, JsonToken.START_ARRAY));
+        g.setCurrentValue(value);
         serializeContents(value, g, provider);
         typeSer.writeTypeSuffix(g, typeIdDef);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java
Patch:
@@ -33,7 +33,7 @@ public void serialize(Object value, JsonGenerator gen, SerializerProvider provid
             failForEmpty(provider, value);
         }
         // But if it's fine, we'll just output empty JSON Object:
-        gen.writeStartObject();
+        gen.writeStartObject(value, 0);
         gen.writeEndObject();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java
Patch:
@@ -103,7 +103,7 @@ public final void serialize(Collection<?> value, JsonGenerator g, SerializerProv
                 return;
             }
         }
-        g.writeStartArray(len);
+        g.writeStartArray(value, len);
         serializeContents(value, g, provider);
         g.writeEndArray();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java
Patch:
@@ -70,7 +70,7 @@ public final void serialize(Iterable<?> value, JsonGenerator gen,
                 return;
             }
         }
-        gen.writeStartArray();
+        gen.writeStartArray(value);
         serializeContents(value, gen, provider);
         gen.writeEndArray();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -209,7 +209,7 @@ public final void serialize(Object[] value, JsonGenerator gen, SerializerProvide
                 return;
             }
         }
-        gen.writeStartArray(len);
+        gen.writeStartArray(value, len);
         serializeContents(value, gen, provider);
         gen.writeEndArray();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java
Patch:
@@ -98,7 +98,9 @@ public static JsonSerializer<Object> getFallbackKeySerializer(SerializationConfi
             if (rawKeyType == Enum.class) {
                 return new Dynamic();
             }
-            if (rawKeyType.isEnum()) {
+            // 29-Sep-2019, tatu: [databind#2457] can not use 'rawKeyType.isEnum()`, won't work
+            //    for subtypes.
+            if (Enum.class.isAssignableFrom(rawKeyType)) {
                 return EnumKeySerializer.construct(rawKeyType,
                         EnumValues.constructFromName(config, (Class<Enum<?>>) rawKeyType));
             }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -115,6 +115,7 @@ public class SubTypeValidator
         s.add("org.apache.xalan.lib.sql.JNDIConnectionPool");
 
         // [databind#2478]: comons-dbcp, p6spy
+        s.add("org.apache.commons.dbcp.datasources.PerUserPoolDataSource");
         s.add("org.apache.commons.dbcp.datasources.SharedPoolDataSource");
         s.add("com.p6spy.engine.spy.P6DataSource");
 

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -296,7 +296,7 @@ public enum MapperFeature implements ConfigFeature
      *<p>
      * Feature is disabled by default for backwards compatibility.
      *
-     * @since 2.9.6
+     * @since 2.10
      */
     USE_BASE_TYPE_AS_DEFAULT_IMPL(false),
 

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java
Patch:
@@ -223,7 +223,8 @@ public JsonSerializer<?> build()
      * type information)
      */
     public BeanSerializer createDummy() {
-        return BeanSerializer.createDummy(_beanDesc.getType());
+        // 20-Sep-2019, tatu: Can not skimp on passing builder  (see [databind#2077])
+        return BeanSerializer.createDummy(_beanDesc.getType(), this);
     }
 }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -114,6 +114,8 @@ protected BeanSerializerBase(JavaType type, BeanSerializerBuilder builder,
         _props = properties;
         _filteredProps = filteredProperties;
         if (builder == null) { // mostly for testing
+            // 20-Sep-2019, tatu: Actually not just that but also "dummy" serializer for
+            //     case of no bean properties, too
             _typeId = null;
             _anyGetterWriter = null;
             _propertyFilterId = null;
@@ -414,7 +416,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
         final AnnotatedMember accessor = (property == null || intr == null)
                 ? null : property.getMember();
         final SerializationConfig config = provider.getConfig();
-        
+
         // Let's start with one big transmutation: Enums that are annotated
         // to serialize as Objects may want to revert
         JsonFormat.Value format = findFormatOverrides(provider, property, handledType());

File: src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayPolymorphic.java
Patch:
@@ -1,12 +1,12 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.struct;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-public class TestPOJOAsArrayPolymorphic2077 extends BaseMapTest
+public class TestPOJOAsArrayPolymorphic extends BaseMapTest
 {
     // [databind#2077]
     @JsonTypeInfo(

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -111,6 +111,9 @@ public class SubTypeValidator
         s.add("org.apache.commons.configuration.JNDIConfiguration");
         s.add("org.apache.commons.configuration2.JNDIConfiguration");
 
+        // [databind#2469]: xalan2
+        s.add("org.apache.xalan.lib.sql.JNDIConnectionPool");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -92,8 +92,9 @@ public class SubTypeValidator
         s.add("org.jdom.transform.XSLTransformer");
         s.add("org.jdom2.transform.XSLTransformer");
 
-        // [databind#2387]: EHCache
+        // [databind#2387], [databind#2460]: EHCache
         s.add("net.sf.ehcache.transaction.manager.DefaultTransactionManagerLookup");
+        s.add("net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup");
 
         // [databind#2389]: logback/jndi
         s.add("ch.qos.logback.core.db.JNDIConnectionSource");

File: src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java
Patch:
@@ -936,7 +936,6 @@ public static void checkAndFixAccess(Member member, boolean force)
             if (force || 
                     (!Modifier.isPublic(member.getModifiers())
                             || !Modifier.isPublic(member.getDeclaringClass().getModifiers()))) {
-System.err.println(" SetAccessible for: "+member.getDeclaringClass().getSimpleName()+ " / "+member);
                 ao.setAccessible(true);
             }
         } catch (SecurityException se) {

File: src/main/java/com/fasterxml/jackson/databind/node/BinaryNode.java
Patch:
@@ -14,6 +14,8 @@
 public class BinaryNode
     extends ValueNode
 {
+    private static final long serialVersionUID = 2L;
+
     final static BinaryNode EMPTY_BINARY_NODE = new BinaryNode(new byte[0]);
 
     protected final byte[] _data;

File: src/main/java/com/fasterxml/jackson/databind/node/NullNode.java
Patch:
@@ -69,9 +69,7 @@ public final void serialize(JsonGenerator g, SerializerProvider provider)
     public boolean equals(Object o) {
         // 29-Aug-2019, tatu: [databind#2433] Since custom sub-classes are allowed (bad idea probably),
         //     need to do better comparison
-        if (o == this) return true;
-        if (!(o instanceof NullNode)) return false;
-        return ((NullNode) o).isNull();
+        return (o == this) || (o instanceof NullNode);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/node/POJONode.java
Patch:
@@ -14,6 +14,8 @@
 public class POJONode
     extends ValueNode
 {
+    private static final long serialVersionUID = 2L;
+
     protected final Object _value;
 
     public POJONode(Object v) { _value = v; }

File: src/main/java/com/fasterxml/jackson/databind/node/TextNode.java
Patch:
@@ -16,6 +16,8 @@
 public class TextNode
     extends ValueNode
 {
+    private static final long serialVersionUID = 2L;
+
     final static TextNode EMPTY_STRING_NODE = new TextNode("");
 
     protected final String _value;

File: src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java
Patch:
@@ -678,7 +678,7 @@ public static String getClassDescription(Object classOrInstance)
      * resolved type (or, {@code "null"} if {@code null} passed), similar
      * to return vaue of {@link #getClassDescription(Object)}.
      *
-     * @param type Fully resolved type or null
+     * @param fullType Fully resolved type or null
      * @return String description of type including generic type parameters, surrounded
      *   by backticks, if type passed; or string "null" if {code null} passed
      *
@@ -936,6 +936,7 @@ public static void checkAndFixAccess(Member member, boolean force)
             if (force || 
                     (!Modifier.isPublic(member.getModifiers())
                             || !Modifier.isPublic(member.getDeclaringClass().getModifiers()))) {
+System.err.println(" SetAccessible for: "+member.getDeclaringClass().getSimpleName()+ " / "+member);
                 ao.setAccessible(true);
             }
         } catch (SecurityException se) {

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandlerTest.java
Patch:
@@ -135,7 +135,7 @@ public WeirdTokenHandler(Object v) {
 
         @Override
         public Object handleUnexpectedToken(DeserializationContext ctxt,
-                Class<?> targetType, JsonToken t, JsonParser p,
+                JavaType targetType, JsonToken t, JsonParser p,
                 String failureMsg)
             throws IOException
         {

File: src/main/java/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java
Patch:
@@ -17,7 +17,8 @@ public class Java7SupportImpl extends Java7Support
     private final Class<?> _bogus;
 
     public Java7SupportImpl() {
-        // Trigger loading of annotations that only JDK 7 has...
+        // Trigger loading of annotations that only JDK 7 has, to trigger
+        // early fail (see [databind#2466])
         Class<?> cls = Transient.class;
         cls = ConstructorProperties.class;
         _bogus = cls;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java
Patch:
@@ -119,7 +119,6 @@ public JsonSerializer<?> createContextual(SerializerProvider serializers,
     public final void serialize(Enum<?> en, JsonGenerator gen, SerializerProvider serializers)
         throws IOException
     {
-        // [JACKSON-684]: serialize as index?
         if (_serializeAsIndex(serializers)) {
             gen.writeNumber(en.ordinal());
             return;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -100,6 +100,8 @@ public class SubTypeValidator
 
         // [databind#2410]: HikariCP/metricRegistry config
         s.add("com.zaxxer.hikari.HikariConfig");
+        // [databind#2449]: and sub-class thereof
+        s.add("com.zaxxer.hikari.HikariDataSource");
 
         // [databind#2420]: CXF/JAX-RS provider/XSLT
         s.add("org.apache.cxf.jaxrs.provider.XSLTJaxbProvider");

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -496,9 +496,8 @@ public enum MapperFeature implements ConfigFeature
      * merging is skipped and new value is created (<code>true</code>) or
      * an exception is thrown (false).
      *<p>
-     * Feature is disabled by default since non-mergeable property types are ignored
-     * even if defaults call for merging, and usually explicit per-type or per-property
-     * settings for such types should result in an exception.
+     * Feature is enabled by default, to allow use of merge defaults even in presence
+     * of some unmergeable properties.
      *
      * @since 2.9
      */

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -4283,7 +4283,7 @@ protected Object _unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt
         }
         String actualName = p.getCurrentName();
         if (!expSimpleName.equals(actualName)) {
-            ctxt.reportInputMismatch(rootType,
+            ctxt.reportPropertyInputMismatch(rootType, actualName,
                     "Root name '%s' does not match expected ('%s') for type %s",
                     actualName, expSimpleName, rootType);
         }

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -1847,7 +1847,7 @@ protected Object _unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt
         }
         String actualName = p.getCurrentName();
         if (!expSimpleName.equals(actualName)) {
-            ctxt.reportInputMismatch(rootType,
+            ctxt.reportPropertyInputMismatch(rootType, actualName,
                     "Root name '%s' does not match expected ('%s') for type %s",
                     actualName, expSimpleName, rootType);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java
Patch:
@@ -171,7 +171,7 @@ public Object[] getParameters(SettableBeanProperty[] props)
             for (int ix = 0; ix < props.length; ++ix) {
                 if (_creatorParameters[ix] == null) {
                     SettableBeanProperty prop = props[ix];
-                    _context.reportInputMismatch(prop.getType(),
+                    _context.reportInputMismatch(prop,
                             "Null value for creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_NULL_FOR_CREATOR_PARAMETERS` enabled",
                             prop.getName(), props[ix].getCreatorIndex());
                 }

File: src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest.java
Patch:
@@ -202,8 +202,8 @@ public JsonMapFormatVisitor expectMapFormat(JavaType type) {
     /* Test methods
     /**********************************************************
      */
-    
-    private final ObjectMapper MAPPER = new ObjectMapper();
+
+    private final ObjectMapper MAPPER = newJsonMapper();
 
     /* Silly little test for simply triggering traversal, without attempting to
      * verify what is being reported. Smoke test that should trigger problems

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -311,7 +311,7 @@ public final boolean isNumber() {
      * Note, however, that even if this method returns false, it
      * is possible that conversion would be possible from other numeric
      * types -- to check if this is possible, use
-     * {@link #canConvertToInt()} instead.
+     * {@link #canConvertToLong()} instead.
      * 
      * @return True if the value contained by this node is stored as Java <code>long</code>
      */

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -52,7 +52,7 @@ public static JsonDeserializer<? extends JsonNode> getDeserializer(Class<?> node
 
     @Override
     public JsonNode getNullValue(DeserializationContext ctxt) {
-        return NullNode.getInstance();
+        return ctxt.getNodeFactory().nullNode();
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/node/ArrayNodeTest.java
Patch:
@@ -199,7 +199,7 @@ public void testAddAllWithNullInCollection()
         assertEquals(2, array.size());
 
         for (JsonNode node : array) {
-            assertFalse(node.isNull());
+            assertNotNull(node);
         }
         assertEquals(NullNode.getInstance(), array.get(0));
     }

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -316,7 +316,9 @@ public ArrayNode addAll(ArrayNode other)
      */
     public ArrayNode addAll(Collection<? extends JsonNode> nodes)
     {
-        _children.addAll(nodes);
+        for (JsonNode node : nodes) {
+            add(node);
+        }
         return this;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -1077,7 +1077,7 @@ protected <T extends JsonNode> T _this() {
 
     /**
      * Helper method that throws {@link IllegalArgumentException} as a result of
-     * violating "required-constraint" for this node (for {@link #require() or related
+     * violating "required-constraint" for this node (for {@link #required} or related
      * methods).
      */
     protected <T> T _reportRequiredViolation(String msgTemplate, Object...args) {

File: src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java
Patch:
@@ -17,9 +17,9 @@ public class BigIntegerNode
     private final static BigInteger MAX_INTEGER = BigInteger.valueOf(Integer.MAX_VALUE);
     private final static BigInteger MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);
     private final static BigInteger MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);
-    
+
     final protected BigInteger _value;
-    
+
     /*
     /**********************************************************
     /* Construction

File: src/test/java/com/fasterxml/jackson/databind/node/ObjectNodeTest.java
Patch:
@@ -68,7 +68,7 @@ static class MyValue
     /**********************************************************
      */
 
-    private final ObjectMapper MAPPER = objectMapper();
+    private final ObjectMapper MAPPER = sharedMapper();
 
     public void testSimpleObject() throws Exception
     {

File: src/test/java/com/fasterxml/jackson/failing/TokenBufferRecursion2398Test.java
Patch:
@@ -8,8 +8,8 @@ public class TokenBufferRecursion2398Test extends BaseMapTest
 {
     private final ObjectMapper MAPPER = sharedMapper();
 
-    // 10k does it, 5k not
-    private final static int RECURSION = 9999;
+    // 10k does it, 5k not, but use bit higher values just in case
+    private final static int RECURSION = 25000;
     
     public void testDeeplyNestedArrays() throws Exception
     {

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java
Patch:
@@ -23,7 +23,7 @@ public void testUnmodifiable() throws Exception
         ObjectMapper mapper = new ObjectMapper();
         Class<?> unmodSetType = Collections.unmodifiableSet(Collections.<String>emptySet()).getClass();
         mapper.addMixIn(unmodSetType, UnmodifiableSetMixin.class);
-        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+        mapper.activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
 
         final String EXPECTED_JSON = "[\""+unmodSetType.getName()+"\",[]]";

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandlerUnknownTypeId2221Test.java
Patch:
@@ -85,7 +85,7 @@ public String toString() {
 
     public void testWithDeserializationProblemHandler() throws Exception {
         final ObjectMapper mapper = new ObjectMapper()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance);
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance);
         mapper.addHandler(new DeserializationProblemHandler() {
             @Override
             public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg) throws IOException {
@@ -101,7 +101,7 @@ public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseTy
     public void testWithDisabledFAIL_ON_INVALID_SUBTYPE() throws Exception {
         final ObjectMapper mapper = new ObjectMapper()
                 .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance)
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance)
         ;
         GenericContent processableContent = mapper.readValue(JSON, GenericContent.class);
         assertNotNull(processableContent.getInnerObjects());

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumMapDeserializationTest.java
Patch:
@@ -160,7 +160,7 @@ public void testEnumMapAsPolymorphic() throws Exception
         Pojo1859 input = new Pojo1859(enumMap);
 
         ObjectMapper mapper = JsonMapper.builder()
-                .enableDefaultTypingAsProperty(NoCheckSubTypeValidator.instance,
+                .activateDefaultTypingAsProperty(NoCheckSubTypeValidator.instance,
                         ObjectMapper.DefaultTyping.NON_FINAL, "@type")
                 .build();
 

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java
Patch:
@@ -51,7 +51,7 @@ public void testSingletonCollections() throws Exception
     public void testUnmodifiableSet() throws Exception
     {
         ObjectMapper mapper = jsonMapperBuilder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                         ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)
                 .build();
 

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java
Patch:
@@ -226,7 +226,7 @@ public void testNestedUntypes() throws IOException
     public void testObjectSerializeWithLong() throws IOException
     {
         final ObjectMapper mapper = new ObjectMapper();
-        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+        mapper.activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 DefaultTyping.JAVA_LANG_OBJECT, As.PROPERTY);
         final long VALUE = 1337800584532L;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/UtilCollectionsTypesTest.java
Patch:
@@ -12,7 +12,7 @@
 public class UtilCollectionsTypesTest extends BaseMapTest
 {
    private final ObjectMapper DEFAULT_MAPPER = JsonMapper.builder()
-           .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+           .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                    ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)
            .build();
 

File: src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java
Patch:
@@ -58,7 +58,7 @@ public void testXalanTypes1599() throws Exception
 +"}"
         );
         ObjectMapper mapper = new ObjectMapper();
-        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance);
+        mapper.activateDefaultTyping(NoCheckSubTypeValidator.instance);
         try {
             mapper.readValue(JSON, Bean1599.class);
             fail("Should not pass");
@@ -106,7 +106,7 @@ public void testSpringTypes1737() throws Exception
     public void testJDKTypes1872() throws Exception
     {
         ObjectMapper mapper = jsonMapperBuilder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                         ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)
                 .build();
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/NoTypeInfoTest.java
Patch:
@@ -26,7 +26,7 @@ final static class NoType implements NoTypeInterface {
     public void testWithIdNone() throws Exception
     {
         final ObjectMapper mapper = jsonMapperBuilder()
-            .enableDefaultTyping(NoCheckSubTypeValidator.instance)
+            .activateDefaultTyping(NoCheckSubTypeValidator.instance)
             .build();
         // serialize without type info
         String json = mapper.writeValueAsString(new NoType());

File: src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java
Patch:
@@ -63,7 +63,7 @@ public void testPolymorphicAtomicRefProperty() throws Exception
     public void testAtomicRefViaDefaultTyping() throws Exception
     {
         ObjectMapper mapper = jsonMapperBuilder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                         DefaultTyping.NON_FINAL)
                 .build();
         AtomicStringWrapper data = new AtomicStringWrapper("foo");

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java
Patch:
@@ -128,7 +128,7 @@ public void testEmptyCollection() throws Exception
     public void testInnerClassWithType() throws Exception
     {
         ObjectMapper mapper = jsonMapperBuilder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                         DefaultTyping.NON_FINAL)
                 .build();
         String json = mapper.writeValueAsString(new BeanWithAnon());

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java
Patch:
@@ -263,7 +263,7 @@ public void testEmptyBean() throws Exception
 
         // and then with defaults
         mapper = new ObjectMapper();
-        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+        mapper.activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 ObjectMapper.DefaultTyping.NON_FINAL);
         mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
         json = mapper.writeValueAsString(new EmptyNonFinal());

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java
Patch:
@@ -151,7 +151,7 @@ public void testInArray() throws Exception
         // ensure we'll use mapper with default configs
         ObjectMapper m = new ObjectMapper();
         // ... so this should NOT be needed...
-        m.disableDefaultTyping();
+        m.deactivateDefaultTyping();
         
         Animal[] animals = new Animal[] { new Cat("Miuku", "white"), new Dog("Murre", 9) };
         Map<String,Object> map = new HashMap<String,Object>();

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java
Patch:
@@ -167,7 +167,7 @@ public void testWrapperWithExplicitType() throws Exception
     public void testJackson387() throws Exception
     {
         ObjectMapper om = new ObjectMapper();
-        om.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+        om.activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY );
         om.setSerializationInclusion(JsonInclude.Include.NON_NULL );
         om.enable( SerializationFeature.INDENT_OUTPUT);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java
Patch:
@@ -122,7 +122,7 @@ public void testMapKeyRefinement1384() throws Exception
         final String TEST_INSTANCE_SERIALIZED =
                 "{\"mapProperty\":[\"java.util.HashMap\",{\"Compound|Key\":\"Value\"}]}";
         ObjectMapper mapper = jsonMapperBuilder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                         ObjectMapper.DefaultTyping.NON_FINAL)
                 .build();
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForEnums.java
Patch:
@@ -45,7 +45,7 @@ public void testSimpleEnumBean() throws Exception
         
         // then with type info
         m = JsonMapper.builder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance)
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance)
                 .build();
         json = m.writeValueAsString(bean);
         result = m.readValue(json, TimeUnitBean.class);
@@ -56,7 +56,7 @@ public void testSimpleEnumBean() throws Exception
     public void testSimpleEnumsInObjectArray() throws Exception
     {
         ObjectMapper m = JsonMapper.builder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance)
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance)
                 .build();
         // Typing is needed for enums
         String json = m.writeValueAsString(new Object[] { TestEnum.A });
@@ -71,7 +71,7 @@ public void testSimpleEnumsInObjectArray() throws Exception
     public void testSimpleEnumsAsField() throws Exception
     {
         ObjectMapper m = JsonMapper.builder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance)
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance)
                 .build();
         String json = m.writeValueAsString(new EnumHolder(TestEnum.B));
         assertEquals("{\"value\":[\"com.fasterxml.jackson.databind.jsontype.deftyping.TestDefaultForEnums$TestEnum\",\"B\"]}", json);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForMaps.java
Patch:
@@ -125,7 +125,7 @@ protected TypeNameIdResolver createTypeNameIdResolver(boolean forSerialization)
     public void testList() throws Exception
     {
         final ObjectMapper mapper = new ObjectMapper();
-        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+        mapper.activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);
         ItemList child = new ItemList();
         child.value = "I am child";
@@ -142,7 +142,7 @@ public void testList() throws Exception
     public void testMap() throws Exception
     {
         final ObjectMapper mapper = new ObjectMapper();
-        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+        mapper.activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);
         ItemMap child = new ItemMap();
         child.value = "I am child";

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForScalars.java
Patch:
@@ -45,7 +45,7 @@ public ObjectWrapperForPoly(final Object o) {
      */
 
     private final ObjectMapper DEFAULT_TYPING_MAPPER = jsonMapperBuilder()
-        .enableDefaultTyping(NoCheckSubTypeValidator.instance)
+        .activateDefaultTyping(NoCheckSubTypeValidator.instance)
         .build();
 
     /**
@@ -95,7 +95,7 @@ public void testMiscScalars() throws Exception
     public void testScalarArrays() throws Exception
     {
         ObjectMapper m = jsonMapperBuilder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                         ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT)
                 .build();
         Object[] input = new Object[] {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForTreeNodes.java
Patch:
@@ -20,7 +20,7 @@ public Foo() { }
      */
 
     private final ObjectMapper DEFAULT_MAPPER = jsonMapperBuilder()
-            .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+            .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY)
             .build();
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultWithCreators.java
Patch:
@@ -68,7 +68,7 @@ public byte[] getBytes() {
     public void testWithCreators() throws Exception
     {
         ObjectMapper mapper = JsonMapper.builder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                         ObjectMapper.DefaultTyping.NON_FINAL)
                 .build();
         UrlJob input = new UrlJob(123L, "http://foo", 3);
@@ -88,7 +88,7 @@ public void testWithCreatorAndJsonValue() throws Exception
     {
         final byte[] BYTES = new byte[] { 1, 2, 3, 4, 5 };
         ObjectMapper mapper = JsonMapper.builder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance)
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance)
                 .build();
         String json = mapper.writeValueAsString(new Bean1385Wrapper(
                 new Bean1385(BYTES)

File: src/test/java/com/fasterxml/jackson/databind/jsontype/vld/ValidatePolymBaseTypeTest.java
Patch:
@@ -91,7 +91,7 @@ public Validity validateSubType(MapperConfig<?> ctxt, JavaType baseType, JavaTyp
 
     private final ObjectMapper MAPPER_DEF_TYPING = jsonMapperBuilder()
             // Since GoodBalue, BadValue not abstraction need to use non-final
-            .enableDefaultTyping(new BaseTypeValidator(), DefaultTyping.NON_FINAL)
+            .activateDefaultTyping(new BaseTypeValidator(), DefaultTyping.NON_FINAL)
             .build();
 
     /*

File: src/test/java/com/fasterxml/jackson/databind/jsontype/vld/ValidatePolymSubTypeTest.java
Patch:
@@ -113,11 +113,11 @@ public Validity validateSubType(MapperConfig<?> ctxt, JavaType baseType, JavaTyp
     // // // Mappers with Default Typing
     
     private final ObjectMapper MAPPER_DEF_TYPING_NAME_CHECK = jsonMapperBuilder()
-            .enableDefaultTyping(new SimpleNameBasedValidator())
+            .activateDefaultTyping(new SimpleNameBasedValidator())
             .build();
 
     private final ObjectMapper MAPPER_DEF_TYPING_CLASS_CHECK = jsonMapperBuilder()
-            .enableDefaultTyping(new SimpleClassBasedValidator())
+            .activateDefaultTyping(new SimpleClassBasedValidator())
             .build();
 
     // // // Mappers without Default Typing (explicit annotation needed)

File: src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java
Patch:
@@ -178,7 +178,7 @@ public int compare(JsonNode o1, JsonNode o2) {
     public void testArrayWithDefaultTyping() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper()
-            .enableDefaultTyping(NoCheckSubTypeValidator.instance);
+            .activateDefaultTyping(NoCheckSubTypeValidator.instance);
 
         JsonNode array = mapper.readTree("[ 1, 2 ]");
         assertTrue(array.isArray());

File: src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest.java
Patch:
@@ -140,7 +140,7 @@ public void testFull825() throws Exception
     {
         final ObjectMapper mapper = jsonMapperBuilder()
                 .enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                         ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE)
                 .build();
 

File: src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825Test.java
Patch:
@@ -26,7 +26,7 @@ static class TestC extends TestAbst {
     static class TestD extends AbstractEntity { }
 
     private final ObjectMapper DEF_TYPING_MAPPER = jsonMapperBuilder()
-            .enableDefaultTyping(NoCheckSubTypeValidator.instance,
+            .activateDefaultTyping(NoCheckSubTypeValidator.instance,
                     ObjectMapper.DefaultTyping.NON_FINAL)
             .build();
 

File: src/test/java/com/fasterxml/jackson/databind/objectid/TestAbstractWithObjectId.java
Patch:
@@ -55,7 +55,7 @@ public void testIssue877() throws Exception
 
         // make an object mapper that will add class info in so deserialisation works
         ObjectMapper om = JsonMapper.builder()
-                .enableDefaultTypingAsProperty(NoCheckSubTypeValidator.instance,
+                .activateDefaultTypingAsProperty(NoCheckSubTypeValidator.instance,
                         ObjectMapper.DefaultTyping.NON_FINAL, "@class")
                 .build();
 

File: src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java
Patch:
@@ -135,7 +135,7 @@ public void testIssue811() throws Exception
         ObjectMapper om = new ObjectMapper();
         om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX);
         om.enable(SerializationFeature.INDENT_OUTPUT);
-        om.enableDefaultTypingAsProperty(NoCheckSubTypeValidator.instance,
+        om.activateDefaultTypingAsProperty(NoCheckSubTypeValidator.instance,
                 DefaultTyping.NON_FINAL, "@class");
     
         Process p = new Process();

File: src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java
Patch:
@@ -34,7 +34,7 @@ public void serialize(CustomKey key, JsonGenerator jsonGenerator, SerializerProv
     public void testPolyCustomKeySerializer() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
-        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+        mapper.activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 ObjectMapper.DefaultTyping.NON_FINAL);
 
         mapper.registerModule(new SimpleModule("keySerializerModule")

File: src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java
Patch:
@@ -187,7 +187,7 @@ public void testMapEntry() throws IOException
         assertEquals(aposToQuotes("[{'answer':42}]"), json);
 
         // and maybe with bit of extra typing?
-        ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(NoCheckSubTypeValidator.instance,
+        ObjectMapper mapper = new ObjectMapper().activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 DefaultTyping.NON_FINAL);
         json = mapper.writeValueAsString(input);
         assertEquals(aposToQuotes("['"+StringIntMapEntry.class.getName()+"',{'answer':42}]"),

File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/CollectionSerializationTest.java
Patch:
@@ -275,7 +275,7 @@ public void testStaticList() throws IOException
 
         // but then with default typing
         ObjectMapper mapper = jsonMapperBuilder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance, DefaultTyping.NON_FINAL)
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance, DefaultTyping.NON_FINAL)
                 .build();
         json = mapper.writeValueAsString(w);
         assertEquals(aposToQuotes(String.format("['%s',{'list':['%s',['a','b','c']]}]",

File: src/test/java/com/fasterxml/jackson/failing/DefaultTypingOverride1391Test.java
Patch:
@@ -23,7 +23,7 @@ static class ListWrapper {
     public void testCollectionWithOverride() throws Exception
     {
         final ObjectMapper mapper = JsonMapper.builder()
-            .enableDefaultTypingAsProperty(NoCheckSubTypeValidator.instance,
+            .activateDefaultTypingAsProperty(NoCheckSubTypeValidator.instance,
                     ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE,
                     "$type")
             .build();

File: src/test/java/com/fasterxml/jackson/failing/InnerClassNonStaticCore384Test.java
Patch:
@@ -172,7 +172,7 @@ public int hashCode() {
 
     public void testHierarchy() throws IOException {
         ObjectMapper mapper = jsonMapperBuilder()
-                .enableDefaultTyping(NoCheckSubTypeValidator.instance)
+                .activateDefaultTyping(NoCheckSubTypeValidator.instance)
                 .build();
 
         Fleet fleet = initVehicle();

File: src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java
Patch:
@@ -47,13 +47,13 @@ public Map<String,Poly> getMap() {
     /**********************************************************
      */
 
-    // For [Issue#501]
+    // For [databind#501]
     public void testSetterlessWithPolymorphic() throws Exception
     {
         Issue501Bean input = new Issue501Bean("a", new Poly(13));
         ObjectMapper m = new ObjectMapper();
         assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS));
-        m.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+        m.activateDefaultTyping(NoCheckSubTypeValidator.instance,
                 ObjectMapper.DefaultTyping.NON_FINAL);
 
         String json = m.writerWithDefaultPrettyPrinter().writeValueAsString(input);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -899,9 +899,9 @@ protected SettableBeanProperty _resolveMergeAndNullSettings(DeserializationConte
                 }
             } else if (!mayMerge.booleanValue()) { // prevented
                 if (!merge.fromDefaults) {
-                    // If attempts was made via explicit annotation/per-type config override,
+                    // If attempt was made via explicit annotation/per-type config override,
                     // should be reported; may or may not result in exception
-                    ctxt.reportBadMerge(valueDeser);
+                    ctxt.handleBadMerge(valueDeser);
                 }
                 return prop;
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java
Patch:
@@ -33,8 +33,8 @@ public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, Typ
     @Override // since 2.9
     public T deserialize(JsonParser p, DeserializationContext ctxt, T intoValue) throws IOException {
         // 25-Oct-2016, tatu: And if attempt is made, see if we are to complain...
-        ctxt.reportBadMerge(this);
-        // except that it is possible to suppress this; and if so...
+        ctxt.handleBadMerge(this);
+        // if that does not report an exception we can just delegate
         return deserialize(p, ctxt);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonLocationInstantiator.java
Patch:
@@ -18,6 +18,8 @@
 public class JsonLocationInstantiator
     extends ValueInstantiator.Base
 {
+    private static final long serialVersionUID = 1L;
+
     public JsonLocationInstantiator() {
         super(JsonLocation.class);
     }

File: src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java
Patch:
@@ -15,6 +15,8 @@ public abstract class ContainerNode<T extends ContainerNode<T>>
     extends BaseJsonNode
     implements JsonNodeCreator
 {
+    private static final long serialVersionUID = 1L;
+
     /**
      * We will keep a reference to the Object (usually TreeMapper)
      * that can construct instances of nodes to add to this container

File: src/main/java/com/fasterxml/jackson/databind/node/NumericNode.java
Patch:
@@ -11,6 +11,8 @@
 public abstract class NumericNode
     extends ValueNode
 {
+    private static final long serialVersionUID = 1L;
+
     protected NumericNode() { }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java
Patch:
@@ -17,6 +17,8 @@
 public abstract class ValueNode
     extends BaseJsonNode
 {
+    private static final long serialVersionUID = 1L;
+
     protected ValueNode() { }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java
Patch:
@@ -58,9 +58,8 @@ public static KeyDeserializer findStringBasedKeyDeserializer(DeserializationConf
             }
             return new StdKeyDeserializer.StringCtorKeyDeserializer(ctor);
         }
-        /* or if not, "static T valueOf(String)" (or equivalent marked
-         * with @JsonCreator annotation?)
-         */
+        // or if not, "static T valueOf(String)" (or equivalent marked
+        // with @JsonCreator annotation?)
         Method m = beanDesc.findFactoryMethod(String.class);
         if (m != null){
             if (config.canOverrideAccessModifiers()) {

File: src/test/java/com/fasterxml/jackson/databind/ObjectWriterTest.java
Patch:
@@ -282,7 +282,7 @@ public void testArgumentChecking() throws Exception
             w.acceptJsonFormatVisitor((JavaType) null, null);
             fail("Should not pass");
         } catch (IllegalArgumentException e) {
-            verifyException(e, "type must be provided");
+            verifyException(e, "argument \"type\" is null");
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
Patch:
@@ -468,7 +468,7 @@ protected final Object _deserialize(JsonParser p,
                 }
                 continue;
             }
-            handleUnknownVanilla(p, ctxt, handledType(), propName);
+            handleUnknownVanilla(p, ctxt, builder, propName);
         }
         return builder;
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java
Patch:
@@ -397,7 +397,10 @@ public interface Gettable {
      * to be used instead of directly extending {@link ValueInstantiator} itself.
      */
     public static class Base extends ValueInstantiator
+        implements java.io.Serializable // just because used as base for "standard" variants
     {
+        private static final long serialVersionUID = 1L;
+
         protected final Class<?> _valueType;
 
         public Base(Class<?> type) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java
Patch:
@@ -137,8 +137,7 @@ public BasicBeanDescription forCreation(DeserializationConfig cfg,
     {
         BasicBeanDescription desc = _findStdTypeDesc(type);
         if (desc == null) {
-
-            // As per [Databind#550], skip full introspection for some of standard
+            // As per [databind#550], skip full introspection for some of standard
             // structured types as well
             desc = _findStdJdkCollectionDesc(cfg, type);
             if (desc == null) {

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2062,7 +2062,7 @@ public boolean isEnabled(MapperFeature f) {
     }
     
     /**
-     * @deprecated Since 2.10 use {@code ObjectMapper.builder().disable(...)}
+     * @deprecated Since 2.10 use {@code JsonMapper.builder().configure(...)} (or similarly for other datatypes)
      */
     @Deprecated
     public ObjectMapper configure(MapperFeature f, boolean state) {
@@ -2074,7 +2074,7 @@ public ObjectMapper configure(MapperFeature f, boolean state) {
     }
 
     /**
-     * @deprecated Since 2.10 use {@code ObjectMapper.builder().disable(...)}
+     * @deprecated Since 2.10 use {@code JsonMapper.builder().Enable(...)} (or similarly for other datatypes)
      */
     @Deprecated
     public ObjectMapper enable(MapperFeature... f) {
@@ -2084,7 +2084,7 @@ public ObjectMapper enable(MapperFeature... f) {
     }
 
     /**
-     * @deprecated Since 2.10 use {@code ObjectMapper.builder().disable(...)}
+     * @deprecated Since 2.10 use {@code JsonMapper.builder().disable(...)} (or similarly for other datatypes)
      */
     @Deprecated
     public ObjectMapper disable(MapperFeature... f) {

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1102,7 +1102,7 @@ public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,
             }
             deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);
         }
-        // and then new with 2.2: ability to post-process it too (Issue#120)
+        // and then new with 2.2: ability to post-process it too (databind#120)
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 deser = mod.modifyArrayDeserializer(config, type, beanDesc, deser);
@@ -1112,9 +1112,9 @@ public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,
     }
 
     /*
-    /**********************************************************
+    /**********************************************************************
     /* JsonDeserializerFactory impl: Collection(-like) deserializers
-    /**********************************************************
+    /**********************************************************************
      */
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
Patch:
@@ -50,15 +50,15 @@ public StringBuilder getGenericSignature(StringBuilder sb) {
         if (_referencedType != null) {
             return _referencedType.getGenericSignature(sb);
         }
-        return _referencedType.getGenericSignature(sb);
+        return sb.append("?");
     }
 
     @Override
     public StringBuilder getErasedSignature(StringBuilder sb) {
         if (_referencedType != null) {
             return _referencedType.getErasedSignature(sb);
         }
-        return _referencedType.getErasedSignature(sb);
+        return sb;
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
Patch:
@@ -314,7 +314,7 @@ public int getIntValue() throws IOException {
     @Override
     public long getLongValue() throws IOException {
         final NumericNode node = (NumericNode) currentNumericNode();
-        if (!node.canConvertToInt()) {
+        if (!node.canConvertToLong()) {
             reportOverflowLong();
         }
         return node.longValue();

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -363,7 +363,6 @@ public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
         if (rawBase == subclass) {
             return baseType;
         }
-
         JavaType newType;
 
         // also: if we start from untyped, not much to save

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -962,7 +962,8 @@ public ObjectMapper registerModules(Iterable<? extends Module> modules)
      */
     public Set<Object> getRegisteredModuleIds()
     {
-        return Collections.unmodifiableSet(_registeredModuleTypes);
+        return (_registeredModuleTypes == null) ?
+                Collections.emptySet() : Collections.unmodifiableSet(_registeredModuleTypes);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -81,6 +81,9 @@ public class SubTypeValidator
         
         // [databind#2326] (2.7.9.6): one more 3rd party gadget
         s.add("com.mysql.cj.jdbc.admin.MiniAdmin");
+
+        // [databind#2334] (2.9.9.1): logback-core
+        s.add("ch.qos.logback.core.db.DriverManagerConnectionSource");
         
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }

File: src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java
Patch:
@@ -17,7 +17,6 @@
  */
 public abstract class BaseJsonNode
     extends JsonNode
-    implements JsonSerializable
 {
     protected BaseJsonNode() { }
 

File: src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java
Patch:
@@ -26,6 +26,8 @@ protected ContainerNode(JsonNodeFactory nc) {
         _nodeFactory = nc;
     }
 
+    protected ContainerNode() { _nodeFactory = null; } // only for JDK ser
+
     // all containers are mutable: can't define:
 //    @Override public abstract <T extends JsonNode> T deepCopy();
 

File: src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java
Patch:
@@ -360,7 +360,7 @@ public enum SerializationFeature implements ConfigFeature
      * and this setting <b>has no effect</b> on such types.
      *<p>
      * If disabled, standard millisecond timestamps are assumed.
-     * This is the counterpart to {@link SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS}.
+     * This is the counterpart to {@link DeserializationFeature#READ_DATE_TIMESTAMPS_AS_NANOSECONDS}.
      *<p>
      * Feature is enabled by default, to support most accurate time values possible.
      *

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -135,6 +135,7 @@ public Iterator<Map.Entry<String, JsonNode>> fields() {
         return _children.entrySet().iterator();
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public ObjectNode with(String propertyName) {
         JsonNode n = _children.get(propertyName);
@@ -151,6 +152,7 @@ public ObjectNode with(String propertyName) {
         return result;
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public ArrayNode withArray(String propertyName)
     {

File: src/test/java/com/fasterxml/jackson/databind/node/ObjectNodeTest.java
Patch:
@@ -283,9 +283,9 @@ public void testValidWith() throws Exception
 
     public void testValidWithArray() throws Exception
     {
-        ObjectNode root = MAPPER.createObjectNode();
+        JsonNode root = MAPPER.createObjectNode();
         assertEquals("{}", MAPPER.writeValueAsString(root));
-        JsonNode child = root.withArray("arr");
+        ArrayNode child = root.withArray("arr");
         assertTrue(child instanceof ArrayNode);
         assertEquals("{\"arr\":[]}", MAPPER.writeValueAsString(root));
     }

File: src/main/java/com/fasterxml/jackson/databind/DatabindContext.java
Patch:
@@ -274,7 +274,7 @@ private JavaType _resolveAndValidateGeneric(JavaType baseType, String subClass,
         }
         return subType;
     }
-    
+
     protected <T> T _throwNotASubtype(JavaType baseType, String subType) throws JsonMappingException {
         throw invalidTypeIdException(baseType, subType, "Not a subtype");
     }
@@ -290,7 +290,7 @@ protected <T> T _throwSubtypeClassNotAllowed(JavaType baseType, String subType,
         throw invalidTypeIdException(baseType, subType,
                 "Configured `PolymorphicTypeValidator` (of type "+ClassUtil.classNameOf(ptv)+") denied resolution");
     }
-    
+
     /**
      * Helper method for constructing exception to indicate that given type id
      * could not be resolved to a valid subtype of specified base type.

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/SingleArgCreatorTest.java
Patch:
@@ -1,7 +1,5 @@
 package com.fasterxml.jackson.databind.deser.creators;
 
-import java.util.*;
-
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;

File: src/test/java/com/fasterxml/jackson/failing/SingleArgCreator2305Test.java
Patch:
@@ -4,9 +4,6 @@
 
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
-import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
-import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
 
 // For [databind#2305]: regression/unintentional change, but not sure if behavior
 // should or should not be changed.

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -80,6 +80,9 @@ public class SubTypeValidator
         s.add("org.apache.openjpa.ee.JNDIManagedRuntime");
         s.add("org.apache.axis2.transport.jms.JMSOutTransportInfo");
 
+        // [databind#2326] (2.9.9): one more 3rd party gadget
+        s.add("com.mysql.cj.jdbc.admin.MiniAdmin");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java
Patch:
@@ -131,7 +131,9 @@ public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
         if (_valueDeserializer == deser) {
             return this;
         }
-        return new CreatorProperty(this, deser, _nullProvider);
+        // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were
+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;
+        return new CreatorProperty(this, deser, nvp);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java
Patch:
@@ -89,7 +89,9 @@ public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
         if (_valueDeserializer == deser) {
             return this;
         }
-        return new FieldProperty(this, deser, _nullProvider);
+        // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were
+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;
+        return new FieldProperty(this, deser, nvp);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java
Patch:
@@ -80,7 +80,9 @@ public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
         if (_valueDeserializer == deser) {
             return this;
         }
-        return new MethodProperty(this, deser, _nullProvider);
+        // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were
+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;
+        return new MethodProperty(this, deser, nvp);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java
Patch:
@@ -50,7 +50,9 @@ public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
         if (_valueDeserializer == deser) {
             return this;
         }
-        return new ObjectIdReferenceProperty(this, deser, _nullProvider);
+        // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were
+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;
+        return new ObjectIdReferenceProperty(this, deser, nvp);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java
Patch:
@@ -51,7 +51,9 @@ public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
         if (_valueDeserializer == deser) {
             return this;
         }
-        return new ObjectIdValueProperty(this, deser, _nullProvider);
+        // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were
+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;
+        return new ObjectIdValueProperty(this, deser, nvp);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java
Patch:
@@ -64,7 +64,9 @@ public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) {
         if (_valueDeserializer == deser) {
             return this;
         }
-        return new SetterlessProperty(this, deser, _nullProvider);
+        // 07-May-2019, tatu: As per [databind#2303], must keep VD/NVP in-sync if they were
+        NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider;
+        return new SetterlessProperty(this, deser, nvp);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java
Patch:
@@ -37,9 +37,10 @@ public AtomicReferenceDeserializer withResolved(TypeDeserializer typeDeser, Json
         return new AtomicReferenceDeserializer(_fullType, _valueInstantiator,
                 typeDeser, valueDeser);
     }
+
     @Override
-    public AtomicReference<Object> getNullValue(DeserializationContext ctxt) {
-        return new AtomicReference<Object>();
+    public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException {
+        return new AtomicReference<Object>(_valueDeserializer.getNullValue(ctxt));
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ReferenceTypeDeserializer.java
Patch:
@@ -118,10 +118,10 @@ protected abstract ReferenceTypeDeserializer<T> withResolved(TypeDeserializer ty
             JsonDeserializer<?> valueDeser);
 
     @Override
-    public abstract T getNullValue(DeserializationContext ctxt);
+    public abstract T getNullValue(DeserializationContext ctxt) throws JsonMappingException;
 
     @Override
-    public Object getEmptyValue(DeserializationContext ctxt) {
+    public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {
         return getNullValue(ctxt);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -642,7 +642,9 @@ protected void processViews(SerializationConfig config, BeanSerializerBuilder bu
         for (int i = 0; i < propCount; ++i) {
             BeanPropertyWriter bpw = props.get(i);
             Class<?>[] views = bpw.getViews();
-            if (views == null) { // no view info? include or exclude by default?
+            if (views == null
+                    // [databind#2311]: sometimes we add empty array
+                    || views.length == 0) { // no view info? include or exclude by default?
                 if (includeByDefault) {
                     filtered[i] = bpw;
                 }

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java
Patch:
@@ -6,6 +6,7 @@
 import com.fasterxml.jackson.annotation.*;
 
 import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 
 // for [databind#1392] (regression in 2.7 due to separation of array-delegating creator)
 public class ArrayDelegatorCreatorForCollectionTest extends BaseMapTest
@@ -22,7 +23,8 @@ public void testUnmodifiable() throws Exception
         ObjectMapper mapper = new ObjectMapper();
         Class<?> unmodSetType = Collections.unmodifiableSet(Collections.<String>emptySet()).getClass();
         mapper.addMixIn(unmodSetType, UnmodifiableSetMixin.class);
-        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
+        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
 
         final String EXPECTED_JSON = "[\""+unmodSetType.getName()+"\",[]]";
 

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandlerUnknownTypeId2221Test.java
Patch:
@@ -10,6 +10,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 
 // for [databind#2221]
 public class ProblemHandlerUnknownTypeId2221Test extends BaseMapTest
@@ -84,7 +85,7 @@ public String toString() {
 
     public void testWithDeserializationProblemHandler() throws Exception {
         final ObjectMapper mapper = new ObjectMapper()
-                .enableDefaultTyping();
+                .enableDefaultTyping(NoCheckSubTypeValidator.instance);
         mapper.addHandler(new DeserializationProblemHandler() {
             @Override
             public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg) throws IOException {
@@ -100,7 +101,7 @@ public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseTy
     public void testWithDisabledFAIL_ON_INVALID_SUBTYPE() throws Exception {
         final ObjectMapper mapper = new ObjectMapper()
                 .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)
-                .enableDefaultTyping()
+                .enableDefaultTyping(NoCheckSubTypeValidator.instance)
         ;
         GenericContent processableContent = mapper.readValue(JSON, GenericContent.class);
         assertNotNull(processableContent.getInnerObjects());

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java
Patch:
@@ -16,6 +16,7 @@
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
 import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;
 import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 
 /**
  * Unit tests for verifying "raw" (or "untyped") data binding from JSON to JDK objects;
@@ -225,7 +226,8 @@ public void testNestedUntypes() throws IOException
     public void testObjectSerializeWithLong() throws IOException
     {
         final ObjectMapper mapper = new ObjectMapper();
-        mapper.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT, As.PROPERTY);
+        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                DefaultTyping.JAVA_LANG_OBJECT, As.PROPERTY);
         final long VALUE = 1337800584532L;
 
         String serialized = "{\"timestamp\":"+VALUE+"}";

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind.jsontype;
 
-
 import com.fasterxml.jackson.core.Version;
 
 import java.util.*;
@@ -15,6 +14,7 @@
 import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
 import com.fasterxml.jackson.databind.jsontype.NamedType;
 import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 
 public class TestSubtypes extends com.fasterxml.jackson.databind.BaseMapTest
 {
@@ -263,7 +263,8 @@ public void testEmptyBean() throws Exception
 
         // and then with defaults
         mapper = new ObjectMapper();
-        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
+        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                ObjectMapper.DefaultTyping.NON_FINAL);
         mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
         json = mapper.writeValueAsString(new EmptyNonFinal());
         assertEquals("[\"com.fasterxml.jackson.databind.jsontype.TestSubtypes$EmptyNonFinal\",{}]", json);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java
Patch:
@@ -11,6 +11,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
 import com.fasterxml.jackson.databind.ser.ResolvableSerializer;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 
 public class TestWithGenerics extends BaseMapTest
 {
@@ -166,7 +167,8 @@ public void testWrapperWithExplicitType() throws Exception
     public void testJackson387() throws Exception
     {
         ObjectMapper om = new ObjectMapper();
-        om.enableDefaultTyping( ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY );
+        om.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT, JsonTypeInfo.As.PROPERTY );
         om.setSerializationInclusion(JsonInclude.Include.NON_NULL );
         om.enable( SerializationFeature.INDENT_OUTPUT);
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/vld/ValidatePolymBaseTypeTest.java
Patch:
@@ -90,10 +90,9 @@ public Validity validateSubType(MapperConfig<?> ctxt, JavaType baseType, JavaTyp
             .build();
 
     private final ObjectMapper MAPPER_DEF_TYPING = jsonMapperBuilder()
-            .polymorphicTypeValidator(new BaseTypeValidator())
-            .build()
             // Since GoodBalue, BadValue not abstraction need to use non-final
-            .enableDefaultTyping(DefaultTyping.NON_FINAL);
+            .enableDefaultTyping(new BaseTypeValidator(), DefaultTyping.NON_FINAL)
+            .build();
 
     /*
     /**********************************************************************

File: src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java
Patch:
@@ -8,6 +8,7 @@
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 
 public class TestObjectIdWithPolymorphic extends BaseMapTest
 {
@@ -134,7 +135,8 @@ public void testIssue811() throws Exception
         ObjectMapper om = new ObjectMapper();
         om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX);
         om.enable(SerializationFeature.INDENT_OUTPUT);
-        om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, "@class");
+        om.enableDefaultTypingAsProperty(NoCheckSubTypeValidator.instance,
+                DefaultTyping.NON_FINAL, "@class");
     
         Process p = new Process();
         Scope s = new Scope(p, null);

File: src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java
Patch:
@@ -11,6 +11,7 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 
 // for [databind#827]
 public class PolyMapWriter827Test extends BaseMapTest
@@ -33,7 +34,8 @@ public void serialize(CustomKey key, JsonGenerator jsonGenerator, SerializerProv
     public void testPolyCustomKeySerializer() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
-        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
+        mapper.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                ObjectMapper.DefaultTyping.NON_FINAL);
 
         mapper.registerModule(new SimpleModule("keySerializerModule")
             .addKeySerializer(CustomKey.class, new CustomKeySerializer()));

File: src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java
Patch:
@@ -11,6 +11,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 
 @SuppressWarnings("serial")
 public class TestMapSerialization extends BaseMapTest
@@ -186,7 +187,8 @@ public void testMapEntry() throws IOException
         assertEquals(aposToQuotes("[{'answer':42}]"), json);
 
         // and maybe with bit of extra typing?
-        ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL);
+        ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                DefaultTyping.NON_FINAL);
         json = mapper.writeValueAsString(input);
         assertEquals(aposToQuotes("['"+StringIntMapEntry.class.getName()+"',{'answer':42}]"),
                 json);

File: src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java
Patch:
@@ -5,6 +5,7 @@
 import com.fasterxml.jackson.annotation.*;
 
 import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.testutil.NoCheckSubTypeValidator;
 
 public class TestSetterlessProperties501
     extends BaseMapTest
@@ -52,7 +53,8 @@ public void testSetterlessWithPolymorphic() throws Exception
         Issue501Bean input = new Issue501Bean("a", new Poly(13));
         ObjectMapper m = new ObjectMapper();
         assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS));
-        m.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
+        m.enableDefaultTyping(NoCheckSubTypeValidator.instance,
+                ObjectMapper.DefaultTyping.NON_FINAL);
 
         String json = m.writerWithDefaultPrettyPrinter().writeValueAsString(input);
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
Patch:
@@ -242,7 +242,7 @@ public StdTypeResolverBuilder typeIdVisibility(boolean isVisible) {
     /* Internal methods
     /**********************************************************
      */
-    
+
     /**
      * Helper method that will either return configured custom
      * type id resolver, or construct a standard resolver

File: src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java
Patch:
@@ -208,7 +208,8 @@ public void testUnWrappedMapWithDefaultType() throws Exception{
         mod.addKeySerializer(ABC.class, new ABCKeySerializer());
         mapper.registerModule(mod);
 
-        TypeResolverBuilder<?> typer = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL);
+        TypeResolverBuilder<?> typer = ObjectMapper.DefaultTypeResolverBuilder.construct(
+                ObjectMapper.DefaultTyping.NON_FINAL, mapper.getPolymorphicTypeValidator());
         typer = typer.init(JsonTypeInfo.Id.NAME, null);
         typer = typer.inclusion(JsonTypeInfo.As.PROPERTY);
         //typer = typer.typeProperty(TYPE_FIELD);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/vld/ValidatePolymSubTypeTest.java
Patch:
@@ -12,7 +12,7 @@
  *
  * @since 2.10
  */
-public class ValidatePolymSubType extends BaseMapTest
+public class ValidatePolymSubTypeTest extends BaseMapTest
 {
     // // // Value types
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java
Patch:
@@ -68,7 +68,7 @@ public void writeAsField(JsonGenerator gen, SerializerProvider provider,
             //   we should even call is an open question, but for now do pass to let generator
             //   decide what to do, if anything.
             String idStr = (id == null) ? null : String.valueOf(id);
-            gen.writeObjectId(String.valueOf(idStr));
+            gen.writeObjectId(idStr);
             return;
         }
 

File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/BigDecimalPlain2230Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.ser.jdk;
 
 import java.math.BigDecimal;
 
@@ -26,12 +26,12 @@ public void testBigIntegerAsPlainTest() throws Exception
         final BigDecimal BD_VALUE = new BigDecimal(NORM_VALUE);
         final BigDecimalAsString INPUT = new BigDecimalAsString(BD_VALUE);
         // by default, use the default `toString()`
-        assertEquals("{\"value\":\""+BD_VALUE.toString()+"\"", MAPPER.writeValueAsString(INPUT));
+        assertEquals("{\"value\":\""+BD_VALUE.toString()+"\"}", MAPPER.writeValueAsString(INPUT));
 
         // but can force to "plain" notation
         final ObjectMapper m = jsonMapperBuilder()
             .enable(StreamWriteFeature.WRITE_BIGDECIMAL_AS_PLAIN)
             .build();
-        assertEquals("{\"value\":\""+NORM_VALUE+"\"", m.writeValueAsString(INPUT));
+        assertEquals("{\"value\":\""+NORM_VALUE+"\"}", m.writeValueAsString(INPUT));
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/node/EmptyContentAsTreeTest.java
Patch:
@@ -56,7 +56,6 @@ public void testNullFromEOFWithParserAndMapper() throws Exception
     }
 
     // [databind#1406]
-    /*
     public void testNullFromEOFWithParserAndReader() throws Exception
     {
         try (JsonParser p = MAPPER.getFactory().createParser(EMPTY0)) {
@@ -89,7 +88,7 @@ public void testNullFromEOFWithParserAndReader() throws Exception
             _assertNullTree(MAPPER.reader().readTree(p));
         }
     }
-*/
+
     // [databind#2211]: when passing content sources OTHER than `JsonParser`,
     // return "missing node" instead of alternate (return `null`, throw exception).
     public void testMissingNodeForEOFOtherMapper() throws Exception

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -253,7 +253,7 @@ private final Object _deserializeAltString(JsonParser p, DeserializationContext
         }
         if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {
             return ctxt.handleWeirdStringValue(_enumClass(), name,
-                    "value not one of declared Enum instance names: %s", lookup.keys());
+                    "not one of the values accepted for Enum class: %s",  lookup.keys());
         }
         return null;
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
Patch:
@@ -396,7 +396,7 @@ public Object _parse(String key, DeserializationContext ctxt) throws IOException
                         && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)) {
                     e = _enumDefaultValue;
                 } else if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {
-                    return ctxt.handleWeirdKey(_keyClass, key, "not one of values excepted for Enum class: %s",
+                    return ctxt.handleWeirdKey(_keyClass, key, "not one of the values accepted for Enum class: %s",
                         res.getEnumIds());
                 }
                 // fall-through if problems are collected, not immediately thrown

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java
Patch:
@@ -215,7 +215,7 @@ public void testSimple() throws Exception
             /*Object result =*/ MAPPER.readValue("\"NO-SUCH-VALUE\"", TestEnum.class);
             fail("Expected an exception for bogus enum value...");
         } catch (MismatchedInputException jex) {
-            verifyException(jex, "value not one of declared");
+            verifyException(jex, "not one of the values accepted for Enum class");
         }
         jp.close();
     }
@@ -284,7 +284,7 @@ public void testNumbersToEnums() throws Exception
         } catch (MismatchedInputException e) {
             verifyException(e, "Cannot deserialize");
             // 26-Jan-2017, tatu: as per [databind#1505], should fail bit differently
-            verifyException(e, "value not one of declared Enum");
+            verifyException(e, "not one of the values accepted for Enum class");
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -161,8 +161,8 @@ protected final JsonDeserializer<Object> _findDeserializer(DeserializationContex
                     // 10-May-2016, tatu: We may get some help...
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId);
                     if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
-                        return null;
+                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
+                        return NullifyingDeserializer.instance;
                     }
                     // ... would this actually work?
                     deser = ctxt.findContextualValueDeserializer(actual, _property);

File: src/test/java/com/fasterxml/jackson/databind/deser/dos/HugeIntegerCoerceTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.deser.dos;
 
-import com.fasterxml.jackson.core.*;
-
+import com.fasterxml.jackson.core.exc.InputCoercionException;
 import com.fasterxml.jackson.databind.*;
 
 // for [databind#2157]
@@ -27,7 +26,7 @@ public void testMaliciousLongForEnum() throws Exception
         try {
             /*ABC value =*/ MAPPER.readValue(BIG_POS_INTEGER, ABC.class);
             fail("Should not pass");
-        } catch (JsonParseException e) {
+        } catch (InputCoercionException e) {
             verifyException(e, "out of range of int");
             verifyException(e, "Integer with "+BIG_NUM_LEN+" digits");
         }

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/DateDeserializationTZTest.java
Patch:
@@ -543,8 +543,7 @@ private static void failure(ObjectMapper mapper, Object input, Class<? extends E
         try {
             Date date = read(mapper, input, java.util.Date.class);
             fail("Input "+input+" should not have been accepted but was deserialized into "+FORMAT.format(date));
-        }
-        catch(Exception e) {
+        } catch (Exception e) {
             // Is it the expected exception ?
             if (!exceptionType.isAssignableFrom(e.getClass()) ) {
                 fail("Wrong exception thrown when reading "+input+", actual: "+e.getClass().getName() + "("+e.getMessage()+"), expected: "+exceptionType.getName());

File: src/main/java/com/fasterxml/jackson/databind/node/JsonNodeCreator.java
Patch:
@@ -19,6 +19,9 @@ public interface JsonNodeCreator
     public ValueNode booleanNode(boolean v);
     public ValueNode nullNode();
 
+// Not yet in 2.10, will be added in 3.0    
+//    public JsonNode missingNode();
+    
     // Numeric types
 
     public ValueNode numberNode(byte v);

File: src/test/java/com/fasterxml/jackson/databind/node/JsonNodeFactoryTest.java
Patch:
@@ -33,5 +33,7 @@ public void testSimpleCreation()
         assertTrue(f.numberNode((BigDecimal) null).isNull());
 
         assertTrue(f.numberNode((BigInteger) null).isNull());
+
+        assertTrue(f.missingNode().isMissingNode());
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/node/TextNode.java
Patch:
@@ -63,7 +63,7 @@ public String textValue() {
     public byte[] getBinaryValue(Base64Variant b64variant) throws IOException
     {
         final String str = _value.trim();
-        ByteArrayBuilder builder = new ByteArrayBuilder(4 + ((str.length() * 3) << 2));
+        ByteArrayBuilder builder = new ByteArrayBuilder(4 + ((str.length() * 3) >> 2));
         try {
             b64variant.decode(str, builder);
         } catch (IllegalArgumentException e) {

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3696,7 +3696,7 @@ public <T> T convertValue(Object fromValue, Class<T> toValueType)
      * See {@link #convertValue(Object, Class)}
      */
     @SuppressWarnings("unchecked")
-    public <T> T convertValue(Object fromValue, TypeReference<?> toValueTypeRef)
+    public <T> T convertValue(Object fromValue, TypeReference<T> toValueTypeRef)
         throws IllegalArgumentException
     {
         return (T) _convert(fromValue, _typeFactory.constructType(toValueTypeRef));

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java
Patch:
@@ -31,7 +31,7 @@ public XBean() { }
     // And then a round-trip test for singleton collections
     public void testSingletonCollections() throws Exception
     {
-        final TypeReference<?> xbeanListType = new TypeReference<List<XBean>>() { };
+        final TypeReference<List<XBean>> xbeanListType = new TypeReference<List<XBean>>() { };
 
         String json = MAPPER.writeValueAsString(Collections.singleton(new XBean(3)));
         Collection<XBean> result = MAPPER.readValue(json, xbeanListType);

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapDeserializationTest.java
Patch:
@@ -240,7 +240,7 @@ public void testExactStringStringMap() throws Exception
     {
         // to get typing, must use type reference
         String JSON = "{ \"a\" : \"b\" }";
-        Map<String,Integer> result = MAPPER.readValue
+        TreeMap<String,String> result = MAPPER.readValue
             (JSON, new TypeReference<TreeMap<String,String>>() { });
 
         assertNotNull(result);
@@ -308,7 +308,7 @@ public void testMapWithEnums() throws Exception
         String JSON = "{ \"KEY2\" : \"WHATEVER\" }";
 
         // to get typing, must use type reference
-        Map<Enum<?>,Enum<?>> result = MAPPER.readValue
+        Map<Key,Key> result = MAPPER.readValue
             (JSON, new TypeReference<Map<Key,Key>>() { });
 
         assertNotNull(result);

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapRelatedTypesDeserTest.java
Patch:
@@ -71,7 +71,7 @@ public void testReadProperties() throws Exception
     // JDK singletonMap
     public void testSingletonMapRoundtrip() throws Exception
     {
-        final TypeReference<?> type = new TypeReference<Map<String,IntWrapper>>() { };
+        final TypeReference<Map<String,IntWrapper>> type = new TypeReference<Map<String,IntWrapper>>() { };
 
         String json = MAPPER.writeValueAsString(Collections.singletonMap("value", new IntWrapper(5)));
         Map<String,IntWrapper> result = MAPPER.readValue(json, type);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedContainerSerialization.java
Patch:
@@ -139,7 +139,7 @@ public void testIssue508() throws Exception
             List<Issue508A> l2 = new ArrayList<Issue508A>();
             l2.add(new Issue508A());
             l.add(l2);
-            TypeReference<?> typeRef = new TypeReference<List<List<Issue508A>>>() {};
+            TypeReference<List<List<Issue508A>>> typeRef = new TypeReference<List<List<Issue508A>>>() {};
             String json = mapper.writerFor(typeRef).writeValueAsString(l);
 
             List<?> output = mapper.readValue(json, typeRef);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeId999Test.java
Patch:
@@ -39,7 +39,7 @@ public Message(@JsonProperty("type") String type,
 
     public void testExternalTypeId() throws Exception
     {
-        TypeReference<?> type = new TypeReference<Message<FooPayload>>() { };
+        TypeReference<Message<FooPayload>> type = new TypeReference<Message<FooPayload>>() { };
 
         Message<?> msg = MAPPER.readValue(aposToQuotes("{ 'type':'foo', 'payload': {} }"), type);
         assertNotNull(msg);

File: src/test/java/com/fasterxml/jackson/databind/objectid/ObjectIdReordering1388Test.java
Patch:
@@ -48,7 +48,7 @@ public void testDeserializationFinalClassJSOG() throws Exception
         final UUID id = UUID.fromString("a59aa02c-fe3c-43f8-9b5a-5fe01878a818");
         final NamedThing thing = new NamedThing(id, "Hello");
 
-        final TypeReference<?> namedThingListType = new TypeReference<List<NamedThing>>() { };
+        final TypeReference<List<NamedThing>> namedThingListType = new TypeReference<List<NamedThing>>() { };
 
         {
             final String jsog = mapper.writeValueAsString(Arrays.asList(thing, thing, thing));

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2318,7 +2318,7 @@ public <T> T readValue(JsonParser p, Class<T> valueType)
      */
     @Override
     @SuppressWarnings("unchecked")
-    public <T> T readValue(JsonParser p, TypeReference<?> valueTypeRef)
+    public <T> T readValue(JsonParser p, TypeReference<T> valueTypeRef)
         throws IOException, JsonParseException, JsonMappingException
     {
         return (T) _readValue(getDeserializationConfig(), p, _typeFactory.constructType(valueTypeRef));
@@ -2477,7 +2477,7 @@ public <T> MappingIterator<T> readValues(JsonParser p, Class<T> valueType)
      * Method for reading sequence of Objects from parser stream.
      */
     @Override
-    public <T> MappingIterator<T> readValues(JsonParser p, TypeReference<?> valueTypeRef)
+    public <T> MappingIterator<T> readValues(JsonParser p, TypeReference<T> valueTypeRef)
         throws IOException, JsonProcessingException
     {
         return readValues(p, _typeFactory.constructType(valueTypeRef));

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -994,7 +994,7 @@ public <T> T readValue(JsonParser p, Class<T> valueType) throws IOException
      */
     @SuppressWarnings("unchecked")
     @Override
-    public <T> T readValue(JsonParser p, TypeReference<?> valueTypeRef) throws IOException
+    public <T> T readValue(JsonParser p, TypeReference<T> valueTypeRef) throws IOException
     {
         return (T) forType(valueTypeRef).readValue(p);
     }
@@ -1070,10 +1070,10 @@ public <T> Iterator<T> readValues(JsonParser p, Class<T> valueType) throws IOExc
      * (data-format specific) parser is given.
      */
     @Override
-    public <T> Iterator<T> readValues(JsonParser p, TypeReference<?> valueTypeRef) throws IOException {
+    public <T> Iterator<T> readValues(JsonParser p, TypeReference<T> valueTypeRef) throws IOException {
         return forType(valueTypeRef).readValues(p);
     }
-    
+
     /**
      * Convenience method that is equivalent to:
      *<pre>

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
Patch:
@@ -346,7 +346,7 @@ public final Object deserializeKey(String key, DeserializationContext ctxt)
 
         public Class<?> getKeyClass() { return _keyClass; }
     }
-     
+
     @JacksonStdImpl
     final static class EnumKD extends StdKeyDeserializer
     {
@@ -406,6 +406,7 @@ private EnumResolver _getToStringResolver(DeserializationContext ctxt)
                 synchronized (this) {
                     res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),
                             ctxt.getAnnotationIntrospector());
+                    _byToStringResolver = res;
                 }
             }
             return res;

File: src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java
Patch:
@@ -105,12 +105,12 @@ public abstract void serializeWithType(JsonGenerator jgen, SerializerProvider pr
     */
 
    @Override
-   public final String toString() {
+   public String toString() {
        return InternalNodeMapper.nodeToString(this);
    }
 
    @Override
-   public final String toPrettyString() {
+   public String toPrettyString() {
        return InternalNodeMapper.nodeToPrettyString(this);
    }
 }

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -90,6 +90,9 @@ public int size() {
         return _children.size();
     }
 
+    @Override // since 2.10
+    public boolean isEmpty() { return _children.isEmpty(); }
+    
     @Override
     public Iterator<JsonNode> elements() {
         return _children.values().iterator();

File: src/test/java/com/fasterxml/jackson/databind/node/ArrayNodeTest.java
Patch:
@@ -25,9 +25,11 @@ public void testDirectCreation() throws IOException
         assertStandardEquals(n);
         assertFalse(n.elements().hasNext());
         assertFalse(n.fieldNames().hasNext());
+        assertTrue(n.isEmpty());
         TextNode text = TextNode.valueOf("x");
         n.add(text);
         assertEquals(1, n.size());
+        assertFalse(n.isEmpty());
         assertFalse(0 == n.hashCode());
         assertTrue(n.elements().hasNext());
         // no field names for arrays
@@ -149,6 +151,7 @@ public void testAdds()
         n.add(new BigDecimal("0.2"));
         n.add(BigInteger.TEN);
         assertEquals(9, n.size());
+        assertFalse(n.isEmpty());
 
         assertNotNull(n.insertArray(0));
         assertNotNull(n.insertObject(0));

File: src/test/java/com/fasterxml/jackson/databind/node/NodeTestBase.java
Patch:
@@ -25,6 +25,7 @@ protected void assertNodeNumbers(JsonNode n, int expInt, double expDouble)
         assertEquals((long) expInt, n.asLong(19L));
         assertEquals(expDouble, n.asDouble());
         assertEquals(expDouble, n.asDouble(-19.25));
-    }
 
+        assertTrue(n.isEmpty());
+    }
 }

File: src/test/java/com/fasterxml/jackson/databind/node/ObjectNodeTest.java
Patch:
@@ -81,6 +81,7 @@ public void testSimpleObject() throws Exception
         assertFalse(root.isArray());
         assertTrue(root.isObject());
         assertEquals(2, root.size());
+        assertFalse(root.isEmpty());
 
         Iterator<JsonNode> it = root.iterator();
         assertNotNull(it);
@@ -127,7 +128,8 @@ public void testBasics()
     {
         ObjectNode n = new ObjectNode(JsonNodeFactory.instance);
         assertStandardEquals(n);
-
+        assertTrue(n.isEmpty());
+        
         assertFalse(n.elements().hasNext());
         assertFalse(n.fields().hasNext());
         assertFalse(n.fieldNames().hasNext());

File: src/test/java/com/fasterxml/jackson/databind/node/TestNullNode.java
Patch:
@@ -40,6 +40,7 @@ public void testBasicsWithNullNode() throws Exception
         assertEquals(BigInteger.ZERO, n.bigIntegerValue());
 
         assertEquals(0, n.size());
+        assertTrue(n.isEmpty());
         assertFalse(n.elements().hasNext());
         assertFalse(n.fieldNames().hasNext());
         // path is never null; but does point to missing node

File: src/test/java/com/fasterxml/jackson/databind/node/TextNodeTest.java
Patch:
@@ -9,6 +9,9 @@ public void testText()
         assertStandardEquals(empty);
         assertSame(TextNode.EMPTY_STRING_NODE, empty);
 
+        assertEquals(0, empty.size());
+        assertTrue(empty.isEmpty());
+
         assertNodeNumbers(TextNode.valueOf("-3"), -3, -3.0);
         assertNodeNumbers(TextNode.valueOf("17.75"), 17, 17.75);
     

File: src/test/java/com/fasterxml/jackson/databind/node/ObjectNodeTest.java
Patch:
@@ -328,7 +328,6 @@ public void testInvalidWithArray() throws Exception
         }
     }
 
-    // [Issue#93]
     public void testSetAll() throws Exception
     {
         ObjectNode root = MAPPER.createObjectNode();

File: src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java
Patch:
@@ -83,8 +83,8 @@ public void testPOJO()
         assertStandardEquals(n);
         assertEquals(n, new POJONode("x"));
         assertEquals("x", n.asText());
-        // not sure if this is what it'll remain as but:
-        assertEquals("x", n.toString());
+        // 10-Dec-2018, tatu: With 2.10, should serialize same as via ObjectMapper/ObjectWriter
+        assertEquals("\"x\"", n.toString());
 
         assertEquals(new POJONode(null), new POJONode(null));
 

File: src/test/java/com/fasterxml/jackson/databind/node/TestMissingNode.java
Patch:
@@ -15,7 +15,8 @@ public void testMissing()
         assertEquals(JsonToken.NOT_AVAILABLE, n.asToken());
         assertEquals("", n.asText());
         assertStandardEquals(n);
-        assertEquals("", n.toString());
+        // 10-Dec-2018, tatu: With 2.10, should serialize same as via ObjectMapper/ObjectWriter
+        assertEquals("null", n.toString());
 
         assertNodeNumbersForNonNumeric(n);
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -143,7 +143,8 @@ protected MapEntrySerializer(MapEntrySerializer src, BeanProperty property,
         _valueTypeSerializer = src._valueTypeSerializer;
         _keySerializer = (JsonSerializer<Object>) keySer;
         _valueSerializer = (JsonSerializer<Object>) valueSer;
-        _dynamicValueSerializers = src._dynamicValueSerializers;
+        // [databind#2181]: may not be safe to reuse, start from empty
+        _dynamicValueSerializers = PropertySerializerMap.emptyForProperties();
         _property = src._property;
         _suppressableValue = suppressableValue;
         _suppressNulls = suppressNulls;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -118,7 +118,8 @@ protected AsArraySerializerBase(AsArraySerializerBase<?> src,
         _valueTypeSerializer = vts;
         _property = property;
         _elementSerializer = (JsonSerializer<Object>) elementSerializer;
-        _dynamicSerializers = src._dynamicSerializers;
+        // [databind#2181]: may not be safe to reuse, start from empty
+        _dynamicSerializers = PropertySerializerMap.emptyForProperties();
         _unwrapSingle = unwrapSingle;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java
Patch:
@@ -116,7 +116,8 @@ protected ReferenceTypeSerializer(ReferenceTypeSerializer<?> base, BeanProperty
     {
         super(base);
         _referredType = base._referredType;
-        _dynamicSerializers = base._dynamicSerializers;
+        // [databind#2181]: may not be safe to reuse, start from empty
+        _dynamicSerializers = PropertySerializerMap.emptyForProperties();
         _property = property;
         _valueTypeSerializer = vts;
         _valueSerializer = (JsonSerializer<Object>) valueSer;

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -727,7 +727,7 @@ public boolean has(int index) {
      *<p>
      * This method is functionally equivalent to:
      *<pre>
-     *   node.get(fieldName) != null &lt;&lt; !node.get(fieldName).isNull()
+     *   node.get(fieldName) != null &amp;&amp; !node.get(fieldName).isNull()
      *</pre>
      * 
      * @since 2.1
@@ -743,7 +743,7 @@ public boolean hasNonNull(String fieldName) {
      *<p>
      * This method is equivalent to:
      *<pre>
-     *   node.get(index) != null &lt;&lt; !node.get(index).isNull()
+     *   node.get(index) != null &amp;&amp; !node.get(index).isNull()
      *</pre>
      * 
      * @since 2.1

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer.java
Patch:
@@ -20,7 +20,7 @@ public void serialize(ByteBuffer bbuf, JsonGenerator gen, SerializerProvider pro
     {
         // first, simple case when wrapping an array...
         if (bbuf.hasArray()) {
-            gen.writeBinary(bbuf.array(), 0, bbuf.limit());
+            gen.writeBinary(bbuf.array(), bbuf.arrayOffset(), bbuf.limit());
             return;
         }
         // the other case is more complicated however. Best to handle with InputStream wrapper.

File: src/main/java/com/fasterxml/jackson/databind/DatabindContext.java
Patch:
@@ -191,7 +191,8 @@ public JavaType resolveSubType(JavaType baseType, String subClass)
             } catch (Exception e) {
                 throw invalidTypeIdException(baseType, subClass, String.format(
                         "problem: (%s) %s",
-                        e.getClass().getName(), e.getMessage()));
+                        e.getClass().getName(),
+                        ClassUtil.exceptionMessage(e)));
             }
             if (baseType.isTypeOrSuperTypeOf(cls)) {
                 return getTypeFactory().constructSpecializedType(baseType, cls);

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -710,7 +710,8 @@ public Date parseDate(String dateStr) throws IllegalArgumentException
             return df.parse(dateStr);
         } catch (ParseException e) {
             throw new IllegalArgumentException(String.format(
-                    "Failed to parse Date value '%s': %s", dateStr, e.getMessage()));
+                    "Failed to parse Date value '%s': %s", dateStr,
+                    ClassUtil.exceptionMessage(e)));
         }
     }
 
@@ -1599,7 +1600,7 @@ public JsonMappingException instantiationException(Class<?> instClass, Throwable
         String excMsg;
         if (cause == null) {
             excMsg = "N/A";
-        } else if ((excMsg = cause.getMessage()) == null) {
+        } else if ((excMsg = ClassUtil.exceptionMessage(cause)) == null) {
             excMsg = ClassUtil.nameOf(cause.getClass());
         }
         String msg = String.format("Cannot construct instance of %s, problem: %s",

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1586,7 +1586,7 @@ public TypeDeserializer findTypeDeserializer(DeserializationConfig config,
             return b.buildTypeDeserializer(config, baseType, subtypes);
         } catch (IllegalArgumentException e0) {
             InvalidDefinitionException e = InvalidDefinitionException.from((JsonParser) null,
-                    e0.getMessage(), baseType);
+                    ClassUtil.exceptionMessage(e0), baseType);
             e.initCause(e0);
             throw e;
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -265,7 +265,7 @@ protected JsonDeserializer<Object> _createAndCache2(DeserializationContext ctxt,
         } catch (IllegalArgumentException iae) {
             // We better only expose checked exceptions, since those
             // are what caller is expected to handle
-            throw JsonMappingException.from(ctxt, iae.getMessage(), iae);
+            throw JsonMappingException.from(ctxt, ClassUtil.exceptionMessage(iae), iae);
         }
         if (deser == null) {
             return null;

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java
Patch:
@@ -199,7 +199,7 @@ protected void _throwAsIOE(Exception e, Object propName, Object value)
             StringBuilder msg = new StringBuilder("Problem deserializing \"any\" property '").append(propName);
             msg.append("' of class "+getClassName()+" (expected type: ").append(_type);
             msg.append("; actual type: ").append(actType).append(")");
-            String origMsg = e.getMessage();
+            String origMsg = ClassUtil.exceptionMessage(e);
             if (origMsg != null) {
                 msg.append(", problem: ").append(origMsg);
             } else {
@@ -211,7 +211,7 @@ protected void _throwAsIOE(Exception e, Object propName, Object value)
         ClassUtil.throwIfRTE(e);
         // let's wrap the innermost problem
         Throwable t = ClassUtil.getRootCause(e);
-        throw new JsonMappingException(null, t.getMessage(), t);
+        throw new JsonMappingException(null, ClassUtil.exceptionMessage(t), t);
     }
 
     private String getClassName() { return _setter.getDeclaringClass().getName(); }

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -587,7 +587,7 @@ protected void _throwAsIOE(JsonParser p, Exception e, Object value) throws IOExc
                     .append(getType())
                     .append("; actual type: ")
                     .append(actType).append(")");
-            String origMsg = e.getMessage();
+            String origMsg = ClassUtil.exceptionMessage(e);
             if (origMsg != null) {
                 msg.append(", problem: ")
                     .append(origMsg);
@@ -608,7 +608,7 @@ protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException
         ClassUtil.throwIfRTE(e);
         // let's wrap the innermost problem
         Throwable th = ClassUtil.getRootCause(e);
-        throw JsonMappingException.from(p, th.getMessage(), th);
+        throw JsonMappingException.from(p, ClassUtil.exceptionMessage(th), th);
     }
 
     @Deprecated // since 2.7

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -522,7 +522,8 @@ protected java.util.Date _parseDate(String value, DeserializationContext ctxt)
             return ctxt.parseDate(value);
         } catch (IllegalArgumentException iae) {
             return (java.util.Date) ctxt.handleWeirdStringValue(_valueClass, value,
-                    "not a valid representation (error: %s)", iae.getMessage());
+                    "not a valid representation (error: %s)",
+                    ClassUtil.exceptionMessage(iae));
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java
Patch:
@@ -453,7 +453,7 @@ protected JsonMappingException wrapException(Throwable t)
             }
         }
         return new JsonMappingException(null,
-                "Instantiation of "+getValueTypeDesc()+" value failed: "+t.getMessage(), t);
+                "Instantiation of "+getValueTypeDesc()+" value failed: "+ClassUtil.exceptionMessage(t), t);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -359,7 +359,9 @@ public Object instantiateBean(boolean fixAccess) {
             }
             ClassUtil.throwIfError(t);
             ClassUtil.throwIfRTE(t);
-            throw new IllegalArgumentException("Failed to instantiate bean of type "+_classInfo.getAnnotated().getName()+": ("+t.getClass().getName()+") "+t.getMessage(), t);
+            throw new IllegalArgumentException("Failed to instantiate bean of type "
+                    +_classInfo.getAnnotated().getName()+": ("+t.getClass().getName()+") "
+                    +ClassUtil.exceptionMessage(t), t);
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -168,7 +168,7 @@ public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingExcep
         } catch (Throwable t) {
             String msg = String.format(
 "Problem determining whether filter of type '%s' should filter out `null` values: (%s) %s",
-filter.getClass().getName(), t.getClass().getName(), t.getMessage());
+filter.getClass().getName(), t.getClass().getName(), ClassUtil.exceptionMessage(t));
             reportBadDefinition(filter.getClass(), msg, t);
             return false; // never gets here
         }
@@ -502,7 +502,7 @@ private IOException _wrapAsIOE(JsonGenerator g, Exception e) {
         if (e instanceof IOException) {
             return (IOException) e;
         }
-        String msg = e.getMessage();
+        String msg = ClassUtil.exceptionMessage(e);
         if (msg == null) {
             msg = "[no message for "+e.getClass().getName()+"]";
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -100,9 +100,9 @@ protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);
         } catch (JsonMappingException e) {
             if (propDef == null) {
-                return prov.reportBadDefinition(declaredType, e.getMessage());
+                return prov.reportBadDefinition(declaredType, ClassUtil.exceptionMessage(e));
             }
-            return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());
+            return prov.reportBadPropertyDefinition(_beanDesc, propDef, ClassUtil.exceptionMessage(e));
         }
 
         // Container types can have separate type serializers for content (value / element) type

File: src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
Patch:
@@ -62,9 +62,8 @@ protected DateTimeSerializerBase(Class<T> type,
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
-        if (property == null) {
-            return this;
-        }
+        // Note! Should not skip if `property` null since that'd skip check
+        // for config overrides, in case of root value
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;

File: src/test/java/com/fasterxml/jackson/failing/NodeContext2049Test.java
Patch:
@@ -134,7 +134,7 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
     private ObjectMapper objectMapper;
     {
         objectMapper = new ObjectMapper();
-        objectMapper.registerModule(new Module() {
+        objectMapper.registerModule(new com.fasterxml.jackson.databind.Module() {
               @Override
               public String getModuleName() {
                    return "parentSetting";

File: src/test/java/com/fasterxml/jackson/failing/NodeContext2049Test.java
Patch:
@@ -134,7 +134,7 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
     private ObjectMapper objectMapper;
     {
         objectMapper = new ObjectMapper();
-        objectMapper.registerModule(new Module() {
+        objectMapper.registerModule(new com.fasterxml.jackson.databind.Module() {
               @Override
               public String getModuleName() {
                    return "parentSetting";

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java
Patch:
@@ -48,9 +48,7 @@ public static KeyDeserializer constructDelegatingKeyDeserializer(Deserialization
     public static KeyDeserializer findStringBasedKeyDeserializer(DeserializationConfig config,
             JavaType type)
     {
-        /* We don't need full deserialization information, just need to
-         * know creators.
-         */
+        // We don't need full deserialization information, just need to know creators.
         BeanDescription beanDesc = config.introspect(type);
         // Ok, so: can we find T(String) constructor?
         Constructor<?> ctor = beanDesc.findSingleArgConstructor(String.class);

File: src/test/java/com/fasterxml/jackson/databind/module/TestAbstractTypes.java
Patch:
@@ -77,7 +77,7 @@ public String getValue() {
             return value;
         }
     }
-    
+
     /*
     /**********************************************************************
     /* Test methods
@@ -157,7 +157,7 @@ public void testInterfaceDefaulting() throws Exception
     }
 
     // [databind#2019]: mappings from multiple modules
-    public static void testAbstractMappingsFromTwoModules() throws Exception
+    public void testAbstractMappingsFromTwoModules() throws Exception
     {
         ObjectMapper mapper = newObjectMapper();
         SimpleModule module1 = new SimpleModule("module1");

File: src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest.java
Patch:
@@ -228,7 +228,7 @@ public void testConfigForPropertySorting() throws Exception
         assertFalse(dc.shouldSortPropertiesAlphabetically());
 
         // but when enabled, should be visible:
-        m = ObjectMapper.builder()
+        m = objectMapperBuilder()
                 .enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)
                 .build();
         sc = m.getSerializationConfig();

File: src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerWithViews.java
Patch:
@@ -174,7 +174,7 @@ public void testIssue560() throws Exception
         A a = new A("myname", 29, "mysurname");
 
         // Property SerializationConfig.SerializationFeature.DEFAULT_VIEW_INCLUSION set to false
-        ObjectMapper mapper = ObjectMapper.builder()
+        ObjectMapper mapper = objectMapperBuilder()
             .configure(MapperFeature.DEFAULT_VIEW_INCLUSION, Boolean.FALSE)
             .addMixIn(A.class, AMixInAnnotation.class)
             .build();

File: src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
Patch:
@@ -234,7 +234,7 @@ protected static ObjectMapper newObjectMapper() {
 
     // @since 2.10
     protected static ObjectMapper.Builder objectMapperBuilder() {
-        return (ObjectMapper.Builder) (Object) ObjectMapper.builder();
+        return (ObjectMapper.Builder)(Object) ObjectMapper.builder();
     }
 
     // @since 2.7

File: src/test/java/com/fasterxml/jackson/databind/deser/TestBasicAnnotations.java
Patch:
@@ -195,7 +195,7 @@ public void testAnnotationsDisabled() throws Exception
         AnnoBean bean = MAPPER.readValue("{ \"y\" : 0 }", AnnoBean.class);
         assertEquals(0, bean.value);
 
-        ObjectMapper m = ObjectMapper.builder()
+        ObjectMapper m = objectMapperBuilder()
                 .configure(MapperFeature.USE_ANNOTATIONS, false)
                 .build();
         // without annotations, should default to default bean-based name...
@@ -208,7 +208,7 @@ public void testEnumsWhenDisabled() throws Exception
         ObjectMapper m = new ObjectMapper();
         assertEquals(Alpha.B, m.readValue(quote("B"), Alpha.class));
 
-        m = ObjectMapper.builder()
+        m = objectMapperBuilder()
                 .configure(MapperFeature.USE_ANNOTATIONS, false)
                 .build();
         // should still use the basic name handling here
@@ -217,7 +217,7 @@ public void testEnumsWhenDisabled() throws Exception
 
     public void testNoAccessOverrides() throws Exception
     {
-        ObjectMapper m = ObjectMapper.builder()
+        ObjectMapper m = objectMapperBuilder()
                 .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)
                 .build();
         SimpleBean bean = m.readValue("{\"x\":1,\"y\":2}", SimpleBean.class);

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorPropertiesTest.java
Patch:
@@ -96,7 +96,7 @@ public void testConstructorPropertiesInference() throws Exception
         assertEquals(6, result.y);
 
         // but change if configuration changed
-        ObjectMapper mapper = ObjectMapper.builder()
+        ObjectMapper mapper = objectMapperBuilder()
                 .disable(MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES)
                 .build();
         // in which case fields are set directly:

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java
Patch:
@@ -135,7 +135,7 @@ public String getName(){
     
     public void testCreator541() throws Exception
     {
-        ObjectMapper mapper = ObjectMapper.builder()
+        ObjectMapper mapper = objectMapperBuilder()
                 .disable(
                 MapperFeature.AUTO_DETECT_CREATORS,
                 MapperFeature.AUTO_DETECT_FIELDS,

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKNumberDeserTest.java
Patch:
@@ -131,7 +131,7 @@ public void testTextualNullAsNumber() throws Exception
             verifyException(e, "Cannot coerce String \"null\"");
         }
 
-        ObjectMapper noCoerceMapper = ObjectMapper.builder()
+        ObjectMapper noCoerceMapper = objectMapperBuilder()
                 .disable(MapperFeature.ALLOW_COERCION_OF_SCALARS)
                 .build();
         try {

File: src/test/java/com/fasterxml/jackson/databind/introspect/AutoDetect1947Test.java
Patch:
@@ -30,7 +30,7 @@ public void setShouldNotBeDetected(String shouldNotBeDetected) {
     }
     public void testDisablingAll() throws Exception
     {
-        ObjectMapper mapper = ObjectMapper.builder()
+        ObjectMapper mapper = objectMapperBuilder()
                 .disable(MapperFeature.AUTO_DETECT_SETTERS)
                 .disable(MapperFeature.AUTO_DETECT_FIELDS)
                 .disable(MapperFeature.AUTO_DETECT_GETTERS)

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java
Patch:
@@ -363,15 +363,15 @@ public void testNamingWithObjectNode() throws Exception
 
     public void testExplicitRename() throws Exception
     {
-      ObjectMapper m = ObjectMapper.builder()
+      ObjectMapper m = objectMapperBuilder()
               .propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
               .enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)
               .build();
       // by default, renaming will not take place on explicitly named fields
       assertEquals(aposToQuotes("{'firstName':'Peter','lastName':'Venkman','user_age':'35'}"),
           m.writeValueAsString(new ExplicitBean()));
 
-      m = ObjectMapper.builder()
+      m = objectMapperBuilder()
               .propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
           .enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)
           .enable(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING)

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java
Patch:
@@ -116,7 +116,7 @@ public void testRegularAndIsGetter() throws Exception
 
     public void testInferredNameConflictsWithGetters() throws Exception
     {
-        ObjectMapper mapper = ObjectMapper.builder()
+        ObjectMapper mapper = objectMapperBuilder()
                 .annotationIntrospector(new InferingIntrospector())
                 .build();
         String json = mapper.writeValueAsString(new Infernal());
@@ -132,7 +132,7 @@ public void testInferredNameConflictsWithSetters() throws Exception
     }
 
     public void testIssue541() throws Exception {
-        ObjectMapper mapper = ObjectMapper.builder()
+        ObjectMapper mapper = objectMapperBuilder()
                 .disable(
                 MapperFeature.AUTO_DETECT_CREATORS,
                 MapperFeature.AUTO_DETECT_FIELDS,

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestGenericListSerialization.java
Patch:
@@ -54,7 +54,7 @@ public void testSubTypesFor356() throws Exception
         embedded.add(new Child1());
         embedded.add(new Child2());
         input.setResult(embedded);
-        ObjectMapper mapper = ObjectMapper.builder()
+        ObjectMapper mapper = objectMapperBuilder()
                 .configure(MapperFeature.USE_STATIC_TYPING, true)
                 .build();
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedArraySerialization.java
Patch:
@@ -148,7 +148,7 @@ public void testGenericArray() throws Exception
         assertEquals(EXP, MAPPER.writeValueAsString(input));
 
         // then with static typing enabled:
-        ObjectMapper m = ObjectMapper.builder()
+        ObjectMapper m = objectMapperBuilder()
                 .configure(MapperFeature.USE_STATIC_TYPING, true)
                 .build();
         assertEquals(EXP, m.writeValueAsString(input));

File: src/test/java/com/fasterxml/jackson/databind/mixins/MapperMixinsCopy1998Test.java
Patch:
@@ -119,7 +119,7 @@ private String getString(MyModelRoot myModelInstance, ObjectMapper myObjectMappe
 
     private ObjectMapper defaultMapper()
     {
-        return ObjectMapper.builder()
+        return objectMapperBuilder()
                 .serializationInclusion(JsonInclude.Include.NON_EMPTY)
                 .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)
                 .configure(MapperFeature.ALLOW_COERCION_OF_SCALARS, false)

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -166,6 +166,7 @@ protected String buildCanonicalName()
         sb.append(_class.getName());
         sb.append('<');
         sb.append(_referencedType.toCanonical());
+        sb.append('>');
         return sb.toString();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java
Patch:
@@ -24,7 +24,7 @@ public abstract class AbstractTypeResolver
      * resolvers, until a concrete type is located.
      * 
      * @param config Configuration in use; should always be of type
-     *    <code>DeserializationConfig</code>
+     *    {@code DeserializationConfig}
      */
     public JavaType findTypeMapping(DeserializationConfig config, JavaType type) {
         return null;

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -84,9 +84,9 @@ public enum DeserializationFeature implements ConfigFeature
     
     /**
      * Feature that determines whether JSON Array is mapped to
-     * <code>Object[]</code> or <code>List&lt;Object></code> when binding
+     * <code>Object[]</code> or <code>List&lt;Object&gt;</code> when binding
      * "untyped" objects (ones with nominal type of <code>java.lang.Object</code>).
-     * If true, binds as <code>Object[]</code>; if false, as <code>List&lt;Object></code>.
+     * If true, binds as <code>Object[]</code>; if false, as <code>List&lt;Object&gt;</code>.
      *<p>
      * Feature is disabled by default, meaning that JSON arrays are bound as
      * {@link java.util.List}s.

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -195,15 +195,15 @@ public enum MapperFeature implements ConfigFeature
     INFER_PROPERTY_MUTATORS(true),
 
     /**
-     * Feature that determines handling of <code>java.beans.ConstructorProperties<code>
+     * Feature that determines handling of {@code java.beans.ConstructorProperties}
      * annotation: when enabled, it is considered as alias of
      * {@link com.fasterxml.jackson.annotation.JsonCreator}, to mean that constructor
      * should be considered a property-based Creator; when disabled, only constructor
      * parameter name information is used, but constructor is NOT considered an explicit
      * Creator (although may be discovered as one using other annotations or heuristics).
      *<p>
-     * Feature is mostly used to help interoperability with frameworks like Lombok
-     * that may automatically generate <code>ConstructorProperties</code> annotation
+     * Feature is mostly used to help inter-operability with frameworks like Lombok
+     * that may automatically generate {@code ConstructorProperties} annotation
      * but without necessarily meaning that constructor should be used as Creator
      * for deserialization.
      *<p>

File: src/main/java/com/fasterxml/jackson/databind/Module.java
Patch:
@@ -163,7 +163,7 @@ public static interface SetupContext
          *<pre>
          *   mapper.configOverride(java.util.Date.class)
          *       .setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
-         *<pre>
+         *</pre>
          * to change the default format to use for properties of type
          * {@link java.util.Date} (possibly further overridden by per-property
          * annotations)

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1639,7 +1639,7 @@ public void registerSubtypes(Collection<Class<?>> subtypes) {
      *<pre>
      *   mapper.configOverride(java.util.Date.class)
      *       .setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
-     *<pre>
+     *</pre>
      * to change the default format to use for properties of type
      * {@link java.util.Date} (possibly further overridden by per-property
      * annotations)

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java
Patch:
@@ -19,7 +19,7 @@
  * Deserializer for {@link EnumMap} values.
  * <p>
  * Note: casting within this class is all messed up -- just could not figure out a way
- * to properly deal with recursive definition of "EnumMap&lt;K extends Enum&lt;K>, V>
+ * to properly deal with recursive definition of "EnumMap&lt;K extends Enum&lt;K&gt;, V&gt;
  */
 @SuppressWarnings({ "unchecked", "rawtypes" }) 
 public class EnumMapDeserializer

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -308,7 +308,7 @@ public ArrayNode addAll(Collection<? extends JsonNode> nodes)
     /**
      * Method for inserting specified child node as an element
      * of this Array. If index is 0 or less, it will be inserted as
-     * the first element; if >= size(), appended at the end, and otherwise
+     * the first element; if {@code >= size()}, appended at the end, and otherwise
      * inserted before existing element in specified index.
      * No exceptions are thrown for any index.
      *

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdWithEnum1328Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.jsontype.ext;
 
 import java.io.IOException;
 import java.util.Arrays;

File: src/test/java/com/fasterxml/jackson/failing/ExternalTypeIdWithUnwrapped2039Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.jsontype.ext;
+package com.fasterxml.jackson.failing;
 
 import com.fasterxml.jackson.annotation.*;
 

File: src/test/java/com/fasterxml/jackson/failing/ExternalTypeIdWithEnum1328Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.jsontype.ext;
+package com.fasterxml.jackson.failing;
 
 import java.io.IOException;
 import java.util.Arrays;

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java
Patch:
@@ -177,7 +177,6 @@ public Object[] getParameters(SettableBeanProperty[] props)
                 }
             }
         }
-
         return _creatorParameters;
     }
 
@@ -263,7 +262,6 @@ public boolean assignParameter(SettableBeanProperty prop, Object value)
     {
         final int ix = prop.getCreatorIndex();
         _creatorParameters[ix] = value;
-
         if (_paramsSeenBig == null) {
             int old = _paramsSeen;
             int newValue = (old | (1 << ix));

File: src/test/java/com/fasterxml/jackson/failing/CreatorAnySetter1401Test.java
Patch:
@@ -6,7 +6,7 @@
 
 // for [databind#1401]: should allow "Any Setter" to back up otherwise
 // problematic Creator properties?
-public class CreatorProperties1401Test extends BaseMapTest
+public class CreatorAnySetter1401Test extends BaseMapTest
 {
     // for [databind#1401]
     static class NoSetter1401 {

File: src/test/java/com/fasterxml/jackson/failing/ImplicitParamsForCreator806Test.java
Patch:
@@ -24,7 +24,7 @@ static class XY {
         protected int x, y;
 
         // annotation should NOT be needed with 2.6 any more (except for single-arg case)
-        //@com.fasterxml.jackson.annotation.JsonCreator
+//        @com.fasterxml.jackson.annotation.JsonCreator
         public XY(int x, int y) {
             this.x = x;
             this.y = y;
@@ -42,7 +42,8 @@ public XY(int x, int y) {
             .setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
             ;
 
-    // for [databind#806]
+    // for [databind#806]: problem is that renaming occurs too late for implicitly detected
+    // Creators
     public void testImplicitNameWithNamingStrategy() throws Exception
     {
         XY value = MAPPER.readValue(aposToQuotes("{'param_name0':1,'param_name1':2}"), XY.class);

File: src/test/java/com/fasterxml/jackson/failing/ImplicitParamsForCreator806Test.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.failing;
 
-import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
 import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
@@ -38,7 +37,7 @@ public XY(int x, int y) {
     /**********************************************************
      */
 
-    private final ObjectMapper MAPPER = objectMapper()
+    private final ObjectMapper MAPPER = newObjectMapper()
             .setAnnotationIntrospector(new MyParamIntrospector())
             .setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
             ;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
Patch:
@@ -145,7 +145,7 @@ protected JavaType defineDefaultImpl(DeserializationConfig config, JavaType base
         JavaType defaultImpl;
         if (_defaultImpl == null) {
             //Fis of issue #955
-            if (config.isEnabled(DeserializationFeature.USE_BASE_TYPE_AS_DEFAULT) && !baseType.isAbstract()) {
+            if (config.isEnabled(MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL) && !baseType.isAbstract()) {
                 defaultImpl = baseType;
             } else {
                 defaultImpl = null;

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java
Patch:
@@ -88,14 +88,13 @@ final static class BeanWithAnon {
             public String toString() { return "sub!"; }
         };
     }
-    
+
     /*
     /**********************************************************
-    /* Unit tests
+    /* Test methods
     /**********************************************************
      */
 
-    // Testing [JACKSON-498], partial fix
     public void testEmptyCollection() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();

File: src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinMerging.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.introspect;
+package com.fasterxml.jackson.databind.mixins;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestScalars.java
Patch:
@@ -42,14 +42,14 @@ public ScalarList add(Object v) {
             return this;
         }
     }
-    
+
     /*
     /**********************************************************
     /* Unit tests
     /**********************************************************
      */
 
-    final ObjectMapper MAPPER = new ObjectMapper();
+    final ObjectMapper MAPPER = newObjectMapper();
     
     /**
      * Ensure that per-property dynamic types work, both for "native" types

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -54,6 +54,8 @@ public class SubTypeValidator
         // [databind#1855]: more 3rd party
         s.add("org.apache.tomcat.dbcp.dbcp2.BasicDataSource");
         s.add("com.sun.org.apache.bcel.internal.util.ClassLoader");
+        // [databind#2032]: more 3rd party; data exfiltration via xml parsed ext entities
+        s.add("org.apache.ibatis.parsing.XPathParser");
 
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -339,7 +339,7 @@ protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationCo
         if (beanDesc.getType().isConcrete()) {
             _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);
         }
-        return creators.constructValueInstantiator(config);
+        return creators.constructValueInstantiator(ctxt);
     }
 
     protected Map<AnnotatedWithParams,BeanPropertyDefinition[]> _findCreatorsFromProperties(DeserializationContext ctxt,

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingArrayCreator1804Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.util.List;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingCreatorAnnotations2021Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.io.IOException;
 

File: src/test/java/com/fasterxml/jackson/failing/NullConversionWithCreatorTest.java
Patch:
@@ -6,6 +6,7 @@
 
 public class NullConversionWithCreatorTest extends BaseMapTest
 {
+    // [databind#2024]
     static class EmptyFromNullViaCreator {
         Point p;
 
@@ -24,6 +25,7 @@ public EmptyFromNullViaCreator(@JsonSetter(nulls=Nulls.AS_EMPTY)
      */
     private final ObjectMapper MAPPER = newObjectMapper();
 
+    // [databind#2024]
     public void testEmptyFromNullViaCreator() throws Exception
     {
         EmptyFromNullViaCreator result = MAPPER.readValue(aposToQuotes("{'p':null}"),

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java
Patch:
@@ -509,8 +509,7 @@ protected JsonMappingException rewrapCtorProblem(DeserializationContext ctxt,
     /**********************************************************
      */
 
-    private Object _createUsingDelegate(
-            AnnotatedWithParams delegateCreator,
+    private Object _createUsingDelegate(AnnotatedWithParams delegateCreator,
             SettableBeanProperty[] delegateArguments,
             DeserializationContext ctxt,
             Object delegate)

File: src/test/java/com/fasterxml/jackson/databind/jsontype/SubTypeResolution1964Test.java
Patch:
@@ -39,7 +39,7 @@ public void testTypeCompatibility1964() throws Exception
     {
         // Important! Must use raw type since assignment requires effectively
         // casting due incompatible type parameters.
-        @SuppressWarnings("unchecked")
+        @SuppressWarnings({ "unchecked", "rawtypes" })
         Map<String, Collection<String>> repoPrivilegesMap = new CustomMap();
         String key = "/storages/storage0/releases";
         Collection<String> values = new HashSet<>();

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -216,7 +216,7 @@ private JavaType _mapAbstractType2(DeserializationConfig config, JavaType type)
         if (_factoryConfig.hasAbstractTypeResolvers()) {
             for (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers()) {
                 JavaType concrete = resolver.findTypeMapping(config, type);
-                if (ClassUtil.rawClass(concrete) != currClass) {
+                if ((concrete != null) && !concrete.hasRawClass(currClass)) {
                     return concrete;
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverride.java
Patch:
@@ -79,6 +79,8 @@ protected ConfigOverride(ConfigOverride src) {
         _include = src._include;
         _includeAsProperty = src._includeAsProperty;
         _ignorals = src._ignorals;
+        _setterInfo = src._setterInfo;
+        _visibility = src._visibility;
         _isIgnoredType = src._isIgnoredType;
         _mergeable = src._mergeable;
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -419,7 +419,7 @@ protected void _addDeserializerConstructors(DeserializationContext ctxt,
             BeanDescription beanDesc, VisibilityChecker<?> vchecker,
          AnnotationIntrospector intr, CreatorCollector creators,
          Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)
-        throws JsonMappingException
+                 throws JsonMappingException
     {
         // 25-Jan-2017, tatu: As per [databind#1501], [databind#1502], [databind#1503], best
         //     for now to skip attempts at using anything but no-args constructor (see

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -184,8 +184,8 @@ public void addPropertyCreator(AnnotatedWithParams creator,
                     Integer old = names.put(name, Integer.valueOf(i));
                     if (old != null) {
                         throw new IllegalArgumentException(String.format(
-                                "Duplicate creator property \"%s\" (index %s vs %d)",
-                                name, old, i));
+                                "Duplicate creator property \"%s\" (index %s vs %d) for type %s ",
+                                name, old, i, ClassUtil.nameOf(_beanDesc.getBeanClass())));
                     }
                 }
             }

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators2.java
Patch:
@@ -261,6 +261,8 @@ public void testCreatorWithDupNames() throws Exception
             fail("Should have caught duplicate creator parameters");
         } catch (JsonMappingException e) {
             verifyException(e, "duplicate creator property \"bar\"");
+            verifyException(e, "for type `com.fasterxml.jackson.databind.");
+            verifyException(e, "$BrokenCreatorBean`");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/mixins/MapperMixinsCopy1998Test.java
Patch:
@@ -108,7 +108,6 @@ public void testB_KO() throws Exception
                 .setConfig(myObjectMapper.getSerializationConfig().withView(MyModelView.class));
 
         String result = getString(myModelInstance, myObjectMapper);
-System.out.println("result: "+result);
         assertEquals(EXPECTED, result);
 
     }

File: src/test/java/com/fasterxml/jackson/databind/misc/RaceCondition738Test.java
Patch:
@@ -56,7 +56,7 @@ public HasSubTypes getHasSubTypes() {
      */
     
     public void testRepeatedly() throws Exception {
-        final int COUNT = 2000;
+        final int COUNT = 3000;
         for (int i = 0; i < COUNT; i++) {
             runOnce(i, COUNT);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java
Patch:
@@ -184,7 +184,7 @@ public abstract JsonDeserializer<?> createMapLikeDeserializer(DeserializationCon
     public abstract KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException;
-    
+
     /**
      * Method called to find and create a type information deserializer for given base type,
      * if one is needed. If not needed (no polymorphic handling configured for type),

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -987,6 +987,7 @@ protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, D
                         _anySetter.deserialize(p, ctxt));
             }
         }
+        tokens.writeEndObject();
 
         // We hit END_OBJECT; resolve the pieces:
         try {

File: src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
Patch:
@@ -629,6 +629,8 @@ protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
+        tokens.writeEndObject();
+
         // We hit END_OBJECT, so:
         if (builder == null) {
             try {

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java
Patch:
@@ -96,7 +96,6 @@ public void serializeContents(Iterator<?> value, JsonGenerator g,
     protected void _serializeDynamicContents(Iterator<?> value, JsonGenerator g,
             SerializerProvider provider) throws IOException
     {
-        JsonSerializer<Object> serializer = _elementSerializer;
         final TypeSerializer typeSer = _valueTypeSerializer;
         PropertySerializerMap serializers = _dynamicSerializers;
         do {
@@ -106,7 +105,7 @@ protected void _serializeDynamicContents(Iterator<?> value, JsonGenerator g,
                 continue;
             }
             Class<?> cc = elem.getClass();
-            serializers.serializerFor(cc);
+            JsonSerializer<Object> serializer = serializers.serializerFor(cc);
             if (serializer == null) {
                 if (_elementType.hasGenericTypes()) {
                     serializer = _findAndAddDynamic(serializers,

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -311,7 +311,7 @@ public boolean isEmpty(SerializerProvider prov, Entry<?, ?> entry)
             // Let's not worry about generic types here, actually;
             // unlikely to make any difference, but does add significant overhead
             Class<?> cc = value.getClass();
-            valueSer = _dynamicValueSerializers.serializerFor(cc.getClass());
+            valueSer = _dynamicValueSerializers.serializerFor(cc);
             if (valueSer == null) {
                 try {
                     valueSer = _findAndAddDynamic(_dynamicValueSerializers, cc, prov);

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java
Patch:
@@ -672,7 +672,8 @@ public final VisibilityChecker<?> getDefaultVisibilityChecker()
     {
         VisibilityChecker<?> vchecker = _configOverrides.getDefaultVisibility();
         // then global overrides (disabling)
-        if ((_mapperFeatures & AUTO_DETECT_MASK) != 0) {
+        // 05-Mar-2018, tatu: As per [databind#1947], need to see if any disabled
+        if ((_mapperFeatures & AUTO_DETECT_MASK) != AUTO_DETECT_MASK) {
             if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {
                 vchecker = vchecker.withFieldVisibility(Visibility.NONE);
             }

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -352,7 +352,7 @@ public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
         // also: if we start from untyped, not much to save
         do { // bogus loop to be able to break
             if (rawBase == Object.class) {
-                newType = _fromClass(null, subclass, TypeBindings.emptyBindings());
+                newType = _fromClass(null, subclass, EMPTY_BINDINGS);
                 break;
             }
             if (!rawBase.isAssignableFrom(subclass)) {
@@ -363,7 +363,7 @@ public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
 
             // (1) Original target type has no generics -- just resolve subtype
             if (baseType.getBindings().isEmpty()) {
-                newType = _fromClass(null, subclass, TypeBindings.emptyBindings());     
+                newType = _fromClass(null, subclass, EMPTY_BINDINGS);     
                 break;
             }
             // (2) A small set of "well-known" List/Map subtypes where can take a short-cut
@@ -893,7 +893,7 @@ public JavaType constructParametricType(Class<?> parametrized, Class<?>... param
         int len = parameterClasses.length;
         JavaType[] pt = new JavaType[len];
         for (int i = 0; i < len; ++i) {
-            pt[i] = _fromClass(null, parameterClasses[i], null);
+            pt[i] = _fromClass(null, parameterClasses[i], EMPTY_BINDINGS);
         }
         return constructParametricType(parametrized, pt);
     }

File: src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java
Patch:
@@ -56,7 +56,7 @@ protected JavaType parseType(MyTokenizer tokens)
             // can be comma that separates types, or closing '>'
             tokens.pushBack(token);
         }
-        return _factory._fromClass(null, base, null);
+        return _factory._fromClass(null, base, TypeBindings.emptyBindings());
     }
 
     protected List<JavaType> parseTypes(MyTokenizer tokens)

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -1637,8 +1637,7 @@ private final boolean _smallerThanLong(Number n) {
             return (n instanceof Integer) || (n instanceof Short) || (n instanceof Byte);
         }
 
-        /* 02-Jan-2017, tatu: Modified from method(s) in `ParserBase`
-         */
+        // 02-Jan-2017, tatu: Modified from method(s) in `ParserBase`
         
         protected int _convertNumberToInt(Number n) throws IOException
         {
@@ -1689,7 +1688,7 @@ protected long _convertNumberToLong(Number n) throws IOException
                 if (d < MIN_LONG_D || d > MAX_LONG_D) {
                     reportOverflowLong();
                 }
-                return (int) d;
+                return (long) d;
             } else if (n instanceof BigDecimal) {
                 BigDecimal big = (BigDecimal) n;
                 if (BD_MIN_LONG.compareTo(big) > 0 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java
Patch:
@@ -50,7 +50,8 @@ public StackTraceElement deserialize(JsonParser p, DeserializationContext ctxt)
                     moduleName = p.getText();
                 } else if ("moduleVersion".equals(propName)) {
                     moduleVersion = p.getText();
-                } else if ("declaringClass".equals(propName)) {
+                } else if ("declaringClass".equals(propName)
+                        || "format".equals(propName)) {
                     // 01-Nov-2017: [databind#1794] Not sure if we should but... let's prune it for now
                     ;
                 } else {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -79,8 +79,9 @@ public void validateSubType(DeserializationContext ctxt, JavaType type) throws J
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
-            if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
+            if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {
+                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -721,7 +721,7 @@ protected void _removeUnwantedProperties(Map<String, POJOPropertyBuilder> props)
                 }
                 // otherwise just remove ones marked to be ignored
                 prop.removeIgnored();
-                if (!_forSerialization && !prop.couldDeserialize()) {
+                if (!prop.couldDeserialize()) {
                     _collectIgnorals(prop.getName());
                 }
             }
@@ -742,7 +742,7 @@ protected void _removeUnwantedAccessor(Map<String, POJOPropertyBuilder> props)
             POJOPropertyBuilder prop = it.next();
             // 26-Jan-2017, tatu: [databind#935]: need to denote removal of
             JsonProperty.Access acc = prop.removeNonVisible(inferMutators);
-            if (!_forSerialization && (acc == JsonProperty.Access.READ_ONLY)) {
+            if (acc == JsonProperty.Access.READ_ONLY) {
                 _collectIgnorals(prop.getName());
             }
         }

File: src/test/java/com/fasterxml/jackson/databind/deser/AnySetterTest.java
Patch:
@@ -367,7 +367,7 @@ public void testGenericAnySetter() throws Exception
         assertEquals(integerGeneric.getDynamicallyMappedProperties(), integerGenericMap);
     }
 
-	/*
+    /*
     /**********************************************************
     /* Private helper methods
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -341,7 +341,6 @@ public JsonDeserializer<?> build()
     {
         Collection<SettableBeanProperty> props = _properties.values();
         _fixAccess(props);
-
         BeanPropertyMap propertyMap = BeanPropertyMap.construct(props,
                 _config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES),
                 _collectAliases(props));

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -464,7 +464,6 @@ protected void addBeanProps(DeserializationContext ctxt,
                 .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),
                         beanDesc.getClassInfo());
         Set<String> ignored;
-
         if (ignorals != null) {
             boolean ignoreAny = ignorals.getIgnoreUnknown();
             builder.setIgnoreUnknownProperties(ignoreAny);
@@ -497,7 +496,6 @@ protected void addBeanProps(DeserializationContext ctxt,
         // Ok: let's then filter out property definitions
         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
                 beanDesc, builder, beanDesc.findProperties(), ignored);
-
         // After which we can let custom code change the set
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -178,8 +178,7 @@ public void addPropertyCreator(AnnotatedWithParams creator,
                     String name = properties[i].getName();
                     // Need to consider Injectables, which may not have
                     // a name at all, and need to be skipped
-                    if (name.length() == 0
-                            && properties[i].getInjectableValueId() != null) {
+                    if (name.isEmpty() && (properties[i].getInjectableValueId() != null)) {
                         continue;
                     }
                     Integer old = names.put(name, Integer.valueOf(i));

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/ReadOnlyDeser95Test.java
Patch:
@@ -1,12 +1,12 @@
-package com.fasterxml.jackson.databind.ser.filter;
+package com.fasterxml.jackson.databind.deser.filter;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.databind.*;
 
 /**
  * Failing test related to [databind#95]
  */
-public class ReadOnlyProperties95Test extends BaseMapTest
+public class ReadOnlyDeser95Test extends BaseMapTest
 {
     @JsonIgnoreProperties(value={ "computed" }, allowGetters=true)
     static class ReadOnlyBean

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -310,7 +310,7 @@ public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) t
          *   Once again, if we must, we can do more complex handling with buffering,
          *   but let's only do that if and when that becomes necessary.
          */
-        if (_objectIdReader != null && _objectIdReader.maySerializeAsObject()) {
+        if ((_objectIdReader != null) && _objectIdReader.maySerializeAsObject()) {
             if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)
                     && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {
                 return deserializeFromObjectId(p, ctxt);

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/TestDefaultForUtilCollections1868.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser.jdk;
 
 import java.util.*;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java
Patch:
@@ -140,5 +140,5 @@ public JsonSerializer<?> createContextual(SerializerProvider serializers,
             }
             return this;
         }
-}
+    }
 }

File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/AtomicTypeSerializationTest.java
Patch:
@@ -10,7 +10,7 @@
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
 /**
- * Unit tests for verifying serialization of {@link java.util.concurrent.AtomicReference}
+ * Unit tests for verifying serialization of {@link java.util.concurrent.atomic.AtomicReference}
  * and other atomic types, via various settings.
  */
 public class AtomicTypeSerializationTest

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -197,7 +197,7 @@ public void  addBackReferenceProperty(String referenceName, SettableBeanProperty
         _backRefProperties.put(referenceName, prop);
         // also: if we had property with same name, actually remove it
         if (_properties != null) {
-            _properties.remove(prop.getName());
+            _properties.remove(referenceName);
         }
         // ??? 23-Jul-2012, tatu: Should it be included in list of all properties?
         //   For now, won't add, since it is inferred, not explicit...

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -104,9 +104,9 @@ public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ct
         if (type.isThrowable()) {
             return buildThrowableDeserializer(ctxt, type, beanDesc);
         }
-        /* Or, for abstract types, may have alternate means for resolution
-         * (defaulting, materialization)
-         */
+        // Or, for abstract types, may have alternate means for resolution
+        // (defaulting, materialization)
+
         // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are
         //    not something we could materialize anything for
         if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java
Patch:
@@ -121,7 +121,7 @@ public void resolve(DeserializationContext ctxt)
     public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
         throws JsonMappingException
     {
-        // First: if already got serializer to delegate to, contextualize it:
+        // First: if already got deserializer to delegate to, contextualize it:
         if (_delegateDeserializer != null) {
             JsonDeserializer<?> deser = ctxt.handleSecondaryContextualization(_delegateDeserializer,
                     property, _delegateType);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -13,7 +13,6 @@
 import com.fasterxml.jackson.databind.introspect.*;
 import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
 import com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator;
-import com.fasterxml.jackson.databind.util.ArrayBuilders;
 import com.fasterxml.jackson.databind.util.ClassUtil;
 import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -79,8 +79,9 @@ public void validateSubType(DeserializationContext ctxt, JavaType type) throws J
 
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
-            if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
+            if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {
+                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDefaultReadTest.java
Patch:
@@ -13,7 +13,7 @@ enum SimpleEnum {
         ZERO,
         ONE;
     }
-    
+
     enum SimpleEnumWithDefault {
         @JsonEnumDefaultValue
         ZERO,
@@ -165,8 +165,8 @@ public void testWithFailOnNumbersAndReadUnknownAsDefault()
         throws Exception
     {
         ObjectReader r = MAPPER.reader()
-                          .with(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)
-                          .with(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);
+                .with(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)
+                .with(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);
 
         _verifyOkDeserialization(r, "ZERO", SimpleEnum.class, SimpleEnum.ZERO);
         _verifyOkDeserialization(r, "ONE", SimpleEnum.class, SimpleEnum.ONE);

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java
Patch:
@@ -201,9 +201,7 @@ public void testSimple() throws Exception
         assertEquals(TestEnum.OK, MAPPER.readValue(jp, TestEnum.class));
         assertEquals(TestEnum.RULES, MAPPER.readValue(jp, TestEnum.class));
 
-        /* should be ok; nulls are typeless; handled by mapper, not by
-         * deserializer
-         */
+        // should be ok; nulls are typeless; handled by mapper, not by deserializer
         assertNull(MAPPER.readValue(jp, TestEnum.class));
 
         // and no more content beyond that...

File: src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
Patch:
@@ -165,7 +165,7 @@ public Boolean supportsUpdate(DeserializationConfig config) {
     /**********************************************************
      */
 
-    protected final Object finishBuild(DeserializationContext ctxt, Object builder)
+    protected Object finishBuild(DeserializationContext ctxt, Object builder)
             throws IOException
     {
         // As per [databind#777], allow returning builder itself
@@ -183,7 +183,7 @@ protected final Object finishBuild(DeserializationContext ctxt, Object builder)
      * Main deserialization method for bean-based objects (POJOs).
      */
     @Override
-    public final Object deserialize(JsonParser p, DeserializationContext ctxt)
+    public Object deserialize(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
         // common case first:
@@ -334,7 +334,7 @@ public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt)
      */
     @Override
     @SuppressWarnings("resource")
-    protected final Object _deserializeUsingPropertyBased(final JsonParser p,
+    protected Object _deserializeUsingPropertyBased(final JsonParser p,
             final DeserializationContext ctxt)
         throws IOException
     { 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
Patch:
@@ -134,8 +134,7 @@ private static boolean isJavaUtilCollectionClass(String clz, String type)
         if (clz.startsWith("Collections$")) {
             // 02-Jan-2017, tatu: As per [databind#1868], may need to leave Unmodifiable variants as is
             return (clz.indexOf(type) > 0)
-//                    && !clz.contains("Unmodifiable");
-                    ;
+                    && !clz.contains("Unmodifiable");
         }
         if (clz.startsWith("Arrays$")) {
             return (clz.indexOf(type) > 0);

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
Patch:
@@ -71,6 +71,7 @@ public void validateSubType(DeserializationContext ctxt, JavaType type) throws J
         final Class<?> raw = type.getRawClass();
         String full = raw.getName();
 
+        main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
@@ -84,8 +85,8 @@ public void validateSubType(DeserializationContext ctxt, JavaType type) throws J
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
                             // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
-                            || "AbstractApplicationContext.equals".equals(name)) {
-                        break;
+                            || "AbstractApplicationContext".equals(name)) {
+                        break main_check;
                     }
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -913,6 +913,6 @@ protected void _validateSubType(DeserializationContext ctxt, JavaType type,
             BeanDescription beanDesc)
         throws JsonMappingException
     {
-        SubTypeValidator.instance().validateSubType(ctxt, type);
+        SubTypeValidator.instance().validateSubType(ctxt, type, beanDesc);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -113,6 +113,7 @@ protected CollectionDeserializer withResolved(JsonDeserializer<?> dd,
             JsonDeserializer<?> vd, TypeDeserializer vtd,
             NullValueProvider nuller, Boolean unwrapSingle)
     {
+//if (true) throw new Error();
         return new CollectionDeserializer(_containerType,
                 (JsonDeserializer<Object>) vd, vtd,
                 _valueInstantiator, (JsonDeserializer<Object>) dd,

File: src/test/java/com/fasterxml/jackson/failing/CaseInsensitive1854Test.java
Patch:
@@ -57,7 +57,7 @@ public void testIssue1854() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
         mapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);
-        final String DOC = aposToQuotes("{'ID': 1, 'Items': [ { 'ID': 10 } ]}");
+        final String DOC = aposToQuotes("{'ID': 1, 'Items': [ { 'ChildID': 10 } ]}");
         Obj1854 result = mapper.readValue(DOC, Obj1854.class);
         assertNotNull(result);
         assertEquals(1, result.getId());

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -68,7 +68,9 @@ public class BeanDeserializerFactory
         s.add("org.springframework.beans.factory.config.PropertyPathFactoryBean");
         s.add("com.mchange.v2.c3p0.JndiRefForwardingDataSource");
         s.add("com.mchange.v2.c3p0.WrapperConnectionPoolDataSource");
-
+        // [databind#1855]: more 3rd party
+        s.add("org.apache.tomcat.dbcp.dbcp2.BasicDataSource");
+        s.add("com.sun.org.apache.bcel.internal.util.ClassLoader");
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/type/PlaceholderForType.java
Patch:
@@ -83,6 +83,7 @@ public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superCl
         return _unsupported();
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     protected JavaType _narrow(Class<?> subclass) {
         return _unsupported();

File: src/test/java/com/fasterxml/jackson/failing/CustomAnnotationIntrospector1756Test.java
Patch:
@@ -88,6 +88,7 @@ public String findImplicitPropertyName(final AnnotatedMember member) {
         return null;
       }
 
+      @SuppressWarnings("deprecation")
       @Override
       public boolean hasCreatorAnnotation(Annotated a) {
         final AnnotatedConstructor ctor = (AnnotatedConstructor) a;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -437,7 +437,7 @@ public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContex
         builder.addIgnorable("suppressed");
         /* As well as "message": it will be passed via constructor,
          * as there's no 'setMessage()' method
-        */
+         */
         builder.addIgnorable("message");
 
         // update builder now that all information is in?

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java
Patch:
@@ -107,7 +107,7 @@ public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) t
             // Maybe it's "message"?
             if (PROP_NAME_MESSAGE.equals(propName)) {
                 if (hasStringCreator) {
-                    throwable = _valueInstantiator.createFromString(ctxt, p.getText());
+                    throwable = _valueInstantiator.createFromString(ctxt, p.getValueAsString());
                     // any pending values?
                     if (pending != null) {
                         for (int i = 0, len = pendingIx; i < len; i += 2) {

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java
Patch:
@@ -93,7 +93,7 @@ public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt,
         } catch (UnresolvedForwardReference reference) {
             boolean usingIdentityInfo = (_objectIdInfo != null) || (_valueDeserializer.getObjectIdReader() != null);
             if (!usingIdentityInfo) {
-                throw JsonMappingException.from(p, "Unresolved forward reference but no identity info.", reference);
+                throw JsonMappingException.from(p, "Unresolved forward reference but no identity info", reference);
             }
             reference.getRoid().appendReferring(new PropertyReferring(this, reference, _type.getRawClass(), instance));
             return null;

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java
Patch:
@@ -140,10 +140,10 @@ public Object deserializeSetAndReturn(JsonParser p,
         deserializeAndSet(p, ctxt, instance);
         return instance;
     }
-    
+
     @Override
     public final void set(Object instance, Object value) throws IOException {
-        throw new UnsupportedOperationException("Should never call 'set' on setterless property");
+        throw new UnsupportedOperationException("Should never call `set()` on setterless property ('"+getName()+"')");
     }
 
     @Override

File: src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
Patch:
@@ -280,13 +280,13 @@ protected String serializeAsString(ObjectMapper m, Object value)
     protected String serializeAsString(Object value)
         throws IOException
     {
-        return serializeAsString(SHARED_MAPPER, value);
+        return serializeAsString(objectMapper(), value);
     }
 
     protected String asJSONObjectValueString(Object... args)
         throws IOException
     {
-        return asJSONObjectValueString(SHARED_MAPPER, args);
+        return asJSONObjectValueString(objectMapper(), args);
     }
 
     protected String asJSONObjectValueString(ObjectMapper m, Object... args)
@@ -308,7 +308,7 @@ protected String asJSONObjectValueString(ObjectMapper m, Object... args)
     protected <T> T readAndMapFromString(String input, Class<T> cls)
         throws IOException
     {
-        return readAndMapFromString(SHARED_MAPPER, input, cls);
+        return readAndMapFromString(objectMapper(), input, cls);
     }
 
     protected <T> T readAndMapFromString(ObjectMapper m, String input, Class<T> cls) throws IOException

File: src/test/java/com/fasterxml/jackson/databind/views/TestViewSerialization.java
Patch:
@@ -159,7 +159,7 @@ public void testDefaultExclusion() throws IOException
      */
     public void testImplicitAutoDetection() throws Exception
     {
-    	assertEquals("{\"a\":1}", serializeAsString(new ImplicitBean()));
+        assertEquals("{\"a\":1}", objectMapper().writeValueAsString(new ImplicitBean()));
     }
 
     public void testVisibility() throws Exception

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -281,9 +281,6 @@ public JsonDeserializer<Object> buildBeanDeserializer(DeserializationContext ctx
         }
         JsonDeserializer<?> deserializer;
 
-        /* 19-Mar-2012, tatu: This check used to be done earlier; but we have to defer
-         *   it a bit to collect information on ObjectIdReader, for example.
-         */
         if (type.isAbstract() && !valueInstantiator.canInstantiate()) {
             deserializer = builder.buildAbstract();
         } else {

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -25,7 +25,7 @@ public class ReferenceType extends SimpleType
      * @since 2.8
      */
     protected final JavaType _anchorType;
-    
+
     protected ReferenceType(Class<?> cls, TypeBindings bindings,
             JavaType superClass, JavaType[] superInts, JavaType refType,
             JavaType anchorType,

File: src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
Patch:
@@ -211,7 +211,7 @@ public JavaType refine(Class<?> rawType, TypeBindings bindings,
         // SimpleType means something not-specialized, so:
         return null;
     }
-    
+
     @Override
     protected String buildCanonicalName()
     {

File: src/test/java/com/fasterxml/jackson/databind/type/NestedTypes1604Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.type;
 
 import java.util.ArrayList;
 import java.util.List;

File: src/test/java/com/fasterxml/jackson/failing/TestTypeFactory1604.java
Patch:
@@ -15,7 +15,7 @@ static class Data1604<T> { }
     static class DataList1604<T> extends Data1604<List<T>> {
     }
 
-    static class RefinedDataList1604<T> extends DataList1604<List<T>> {
+    static class RefinedDataList1604<T> extends DataList1604<T> {
     }
 
     public static class SneakyDataList1604<BOGUS,T> extends Data1604<List<T>> {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
Patch:
@@ -262,7 +262,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
                 return;
             }
         }
-        ser.acceptJsonFormatVisitor(visitor, null); 
+        ser.acceptJsonFormatVisitor(visitor, type);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
Patch:
@@ -623,9 +623,9 @@ protected Date _parseAsISO8601(String dateStr, ParsePosition bogus)
                 int len = end-start;
                 if (len > 1) { // 0 -> none, 1 -> 'Z'
                     // NOTE: first char is sign; then 2 digits, then optional colon, optional 2 digits
-                    int offsetSecs = _parse2D(dateStr, start+1) * 3600;
+                    int offsetSecs = _parse2D(dateStr, start+1) * 3600; // hours
                     if (len >= 5) {
-                        offsetSecs += _parse2D(dateStr, end-2);
+                        offsetSecs += _parse2D(dateStr, end-2) * 60; // minutes
                     }
                     if (dateStr.charAt(start) == '-') {
                         offsetSecs *= -1000;

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java
Patch:
@@ -133,7 +133,7 @@ private void _addMemberMethods(TypeResolutionContext tc,
                     b.method = m;
                     // 23-Aug-2017, tatu: [databind#1705] Also need to change the type resolution context if so
                     //    (note: mix-over case above shouldn't need it)
-//                    b.typeContext = tc;
+                    b.typeContext = tc;
                 }
             }
         }

File: src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderSimpleTest.java
Patch:
@@ -243,7 +243,7 @@ public ValueClass822(int x, Map<String,Object> stuff) {
         }
     }
 
-    protected static class NopModule1557 extends Module
+    protected static class NopModule1557 extends com.fasterxml.jackson.databind.Module
     {
         @Override
         public String getModuleName() {

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorNullValue.java
Patch:
@@ -50,7 +50,7 @@ public JsonDeserializer<?> findBeanDeserializer(JavaType type,
         }
     }
 
-    protected static class TestModule extends Module
+    protected static class TestModule extends com.fasterxml.jackson.databind.Module
     {
         @Override
         public String getModuleName() {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/AbstracTypeMapping1186Test.java
Patch:
@@ -33,7 +33,7 @@ public static class MyObject {
     }
 
     public void testDeserializeMyContainer() throws Exception {
-        Module module = new SimpleModule().addAbstractTypeMapping(IContainer.class, MyContainer.class);
+        SimpleModule module = new SimpleModule().addAbstractTypeMapping(IContainer.class, MyContainer.class);
         final ObjectMapper mapper = new ObjectMapper().registerModule(module);
         String json = "{\"ts\": [ { \"msg\": \"hello\"} ] }";
         final Object o = mapper.readValue(json,

File: src/test/java/com/fasterxml/jackson/databind/module/SimpleModuleTest.java
Patch:
@@ -146,7 +146,7 @@ public MySimpleModule(String name, Version version) {
         }
     }
 
-    protected static class ContextVerifierModule extends Module
+    protected static class ContextVerifierModule extends com.fasterxml.jackson.databind.Module
     {
         @Override
         public String getModuleName() { return "x"; }
@@ -241,7 +241,7 @@ public void testSimpleInterfaceSerializer() throws Exception
         SimpleModule mod = new SimpleModule("test", Version.unknownVersion());
         mod.addSerializer(new BaseSerializer());
         // and another variant here too
-        List<Module> mods = Arrays.asList((Module) mod);
+        List<SimpleModule> mods = Arrays.asList(mod);
         mapper.registerModules(mods);
         assertEquals(quote("Base:1"), mapper.writeValueAsString(new Impl1()));
         assertEquals(quote("Base:2"), mapper.writeValueAsString(new Impl2()));
@@ -340,7 +340,7 @@ public void testMixIns626() throws Exception
 
     public void testAutoDiscovery() throws Exception
     {
-        List<Module> mods = ObjectMapper.findModules();
+        List<?> mods = ObjectMapper.findModules();
         assertEquals(0, mods.size());
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/module/TestDuplicateRegistration.java
Patch:
@@ -5,7 +5,7 @@
 
 public class TestDuplicateRegistration extends BaseMapTest
 {
-    static class MyModule extends Module {
+    static class MyModule extends com.fasterxml.jackson.databind.Module {
         public int regCount;
         
         public MyModule() {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -63,7 +63,8 @@ protected StdDeserializer(Class<?> vc) {
     }
 
     protected StdDeserializer(JavaType valueType) {
-        _valueClass = valueType.getRawClass();
+        // 26-Sep-2017, tatu: [databind#1764] need to add null-check back until 3.x
+        _valueClass = (valueType == null) ? Object.class : valueType.getRawClass();
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java
Patch:
@@ -239,7 +239,7 @@ public void testCanonicalWithSpaces()
     {
         TypeFactory tf = TypeFactory.defaultInstance();
         Object objects = new TreeMap<Object, Object>() { }; // to get subtype
-        String reflectTypeName = objects.getClass().getGenericSuperclass().getTypeName();
+        String reflectTypeName = objects.getClass().getGenericSuperclass().toString();
         JavaType t1 = tf.constructType(objects.getClass().getGenericSuperclass());
         // This will throw an Exception if you don't remove all white spaces from the String.
         JavaType t2 = tf.constructFromCanonical(reflectTypeName);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1466,7 +1466,7 @@ public Object deserializeFromEmbedded(JsonParser p, DeserializationContext ctxt)
         //    more meaningful exceptions.
         Object value = p.getEmbeddedObject();
         if (value != null) {
-            if (!_beanType.getClass().isInstance(value)) {
+            if (!_beanType.isTypeOrSuperTypeOf(value.getClass())) {
                 // allow this to be handled...
                 value = ctxt.handleWeirdNativeValue(_beanType, value, p);
             }

File: src/test/java/com/fasterxml/jackson/databind/BaseTest.java
Patch:
@@ -364,7 +364,9 @@ protected void verifyException(Throwable e, String... matches)
                 return;
             }
         }
-        fail("Expected an exception with one of substrings ("+Arrays.asList(matches)+"): got one with message \""+msg+"\"");
+        fail("Expected an exception with one of substrings ("
+                +Arrays.asList(matches)+"): got one (of type "+e.getClass().getName()
+                +") with message \""+msg+"\"");
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -353,8 +353,8 @@ public ArrayNode removeAll()
      */
 
     /**
-     * Method that will construct an ArrayNode and add it as a
-     * field of this ObjectNode, replacing old value, if any.
+     * Method that will construct an ArrayNode and add it at the end
+     * of this array node.
      *
      * @return Newly constructed ArrayNode
      */

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -353,8 +353,8 @@ public ArrayNode removeAll()
      */
 
     /**
-     * Method that will construct an ArrayNode and add it as a
-     * field of this ObjectNode, replacing old value, if any.
+     * Method that will construct an ArrayNode and add it at the end
+     * of this array node.
      *
      * @return Newly constructed ArrayNode
      */

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java
Patch:
@@ -27,7 +27,7 @@
  * to ensure that registration works as expected.
  */
 public class SimpleModule
-    extends Module
+    extends com.fasterxml.jackson.databind.Module
     implements java.io.Serializable
 {
     private static final long serialVersionUID = 1L; // 2.5.0

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java
Patch:
@@ -34,7 +34,7 @@ public abstract class DelegatingDeserializer
 
     public DelegatingDeserializer(JsonDeserializer<?> d)
     {
-        super(d.getClass());
+        super(d.handledType());
         _delegatee = d;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -156,7 +156,7 @@ public final void serialize(Object bean, JsonGenerator gen, SerializerProvider p
         }
         gen.writeEndObject();
     }
-    
+
     /*
     /**********************************************************
     /* Standard methods

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -306,7 +306,6 @@ public void serializeValue(JsonGenerator gen, Object value) throws IOException
         final Class<?> cls = value.getClass();
         // true, since we do want to cache root-level typed serializers (ditto for null property)
         final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);
-
         PropertyName rootName = _config.getFullRootName();
         if (rootName == null) { // not explicitly specified
             if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) {

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsTest.java
Patch:
@@ -796,7 +796,7 @@ private void _testNullForPrimitiveArrays(Class<?> cls, Object defValue,
             fail("Should not pass");
         } catch (JsonMappingException e) {
             verifyException(e, "Cannot coerce `null`");
-            verifyException(e, "as content of type `"+SIMPLE_NAME+"`");
+            verifyException(e, "as content of type "+SIMPLE_NAME);
         }
         
         if (testEmptyString) {
@@ -809,7 +809,7 @@ private void _testNullForPrimitiveArrays(Class<?> cls, Object defValue,
                 fail("Should not pass");
             } catch (JsonMappingException e) {
                 verifyException(e, "Cannot coerce empty String (\"\")");
-                verifyException(e, "as content of type `"+SIMPLE_NAME+"`");
+                verifyException(e, "as content of type "+SIMPLE_NAME);
             }
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1466,7 +1466,7 @@ public ObjectMapper setDefaultMergeable(Boolean b) {
     /**
      * Convenience method that is equivalent to calling
      *<pre>
-     *  enableObjectTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
+     *  enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
      *</pre>
      *<p>
      * NOTE: use of Default Typing can be a potential security risk if incoming
@@ -1482,7 +1482,7 @@ public ObjectMapper enableDefaultTyping() {
     /**
      * Convenience method that is equivalent to calling
      *<pre>
-     *  enableObjectTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);
+     *  enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);
      *</pre>
      *<p>
      * NOTE: use of Default Typing can be a potential security risk if incoming

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1466,7 +1466,7 @@ public ObjectMapper setDefaultMergeable(Boolean b) {
     /**
      * Convenience method that is equivalent to calling
      *<pre>
-     *  enableObjectTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
+     *  enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);
      *</pre>
      *<p>
      * NOTE: use of Default Typing can be a potential security risk if incoming
@@ -1482,7 +1482,7 @@ public ObjectMapper enableDefaultTyping() {
     /**
      * Convenience method that is equivalent to calling
      *<pre>
-     *  enableObjectTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);
+     *  enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY);
      *</pre>
      *<p>
      * NOTE: use of Default Typing can be a potential security risk if incoming

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3840,7 +3840,7 @@ public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitorWrapper visi
     {
         acceptJsonFormatVisitor(_typeFactory.constructType(type), visitor);
     }
-    
+
     /**
      * Method for visiting type hierarchy for given type, using specified visitor.
      * Visitation uses <code>Serializer</code> hierarchy and related properties
@@ -3861,7 +3861,7 @@ public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitorWrapper visi
         }
         _serializerProvider(getSerializationConfig()).acceptJsonFormatVisitor(type, visitor);
     }
-    
+
     /*
     /**********************************************************
     /* Internal methods for serialization, overridable

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -1422,7 +1422,7 @@ protected final DateFormat _dateFormat()
         if (_dateFormat != null) {
             return _dateFormat;
         }
-        /* At this point, all timezone configuration should have occured, with respect
+        /* At this point, all timezone configuration should have occurred, with respect
          * to default dateformat configuration. But we still better clone
          * an instance as formatters are stateful, not thread-safe.
          */

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -414,7 +414,7 @@ public enum MapperFeature implements ConfigFeature
     /* Coercion features
     /******************************************************
      */
-    
+
     /**
      * Feature that determines whether coercions from secondary representations are allowed
      * for simple non-textual scalar types: numbers and booleans. This includes `primitive`

File: src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java
Patch:
@@ -128,7 +128,7 @@ public T deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)
         if (ctxt.isEnabled(MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE)) {
             return deserialize(p, ctxt);
         }
-        throw new UnsupportedOperationException("Can not update object of type "
+        throw new UnsupportedOperationException("Cannot update object of type "
                 +intoValue.getClass().getName()+" (by deserializer of type "+getClass().getName()+")");
     }
 
@@ -362,7 +362,7 @@ public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingExcep
      */
     public SettableBeanProperty findBackReference(String refName)
     {
-        throw new IllegalArgumentException("Can not handle managed/back reference '"+refName
+        throw new IllegalArgumentException("Cannot handle managed/back reference '"+refName
                 +"': type: value deserializer of type "+getClass().getName()+" does not support them");
     }
 

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -85,7 +85,7 @@ protected Reference() { }
         public Reference(Object from, String fieldName) {
             _from = from;
             if (fieldName == null) {
-                throw new NullPointerException("Can not pass null fieldName");
+                throw new NullPointerException("Cannot pass null fieldName");
             }
             _fieldName = fieldName;
         }

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -881,7 +881,7 @@ public final List<JsonNode> findParents(String fieldName)
      */
     public JsonNode with(String propertyName) {
         throw new UnsupportedOperationException("JsonNode not of type ObjectNode (but "
-                +getClass().getName()+"), can not call with() on it");
+                +getClass().getName()+"), cannot call with() on it");
     }
 
     /**
@@ -894,7 +894,7 @@ public JsonNode with(String propertyName) {
      */
     public JsonNode withArray(String propertyName) {
         throw new UnsupportedOperationException("JsonNode not of type ObjectNode (but "
-                +getClass().getName()+"), can not call withArray() on it");
+                +getClass().getName()+"), cannot call withArray() on it");
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1519,7 +1519,7 @@ public ObjectMapper enableDefaultTyping(DefaultTyping applicability, JsonTypeInf
          *   use "As.EXTERNAL_PROPERTY", since that will not work (with 2.5+)
          */
         if (includeAs == JsonTypeInfo.As.EXTERNAL_PROPERTY) {
-            throw new IllegalArgumentException("Can not use includeAs of "+includeAs);
+            throw new IllegalArgumentException("Cannot use includeAs of "+includeAs);
         }
         
         TypeResolverBuilder<?> typer = new DefaultTypeResolverBuilder(applicability);
@@ -4157,7 +4157,7 @@ protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext
         deser = ctxt.findRootValueDeserializer(valueType);
         if (deser == null) { // can this happen?
             return ctxt.reportBadDefinition(valueType,
-                    "Can not find a deserializer for type "+valueType);
+                    "Cannot find a deserializer for type "+valueType);
         }
         _rootDeserializers.put(valueType, deser);
         return deser;
@@ -4170,7 +4170,7 @@ protected void _verifySchemaType(FormatSchema schema)
     {
         if (schema != null) {
             if (!_jsonFactory.canUseSchema(schema)) {
-                    throw new IllegalArgumentException("Can not use FormatSchema of type "+schema.getClass().getName()
+                    throw new IllegalArgumentException("Cannot use FormatSchema of type "+schema.getClass().getName()
                             +" for format "+_jsonFactory.getFormatName());
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java
Patch:
@@ -1099,7 +1099,7 @@ protected void _verifySchemaType(FormatSchema schema)
     {
         if (schema != null) {
             if (!_generatorFactory.canUseSchema(schema)) {
-                    throw new IllegalArgumentException("Can not use FormatSchema of type "+schema.getClass().getName()
+                    throw new IllegalArgumentException("Cannot use FormatSchema of type "+schema.getClass().getName()
                             +" for format "+_generatorFactory.getFormatName());
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -272,7 +272,7 @@ protected SerializerProvider(SerializerProvider src)
     public void setDefaultKeySerializer(JsonSerializer<Object> ks)
     {
         if (ks == null) {
-            throw new IllegalArgumentException("Can not pass null JsonSerializer");
+            throw new IllegalArgumentException("Cannot pass null JsonSerializer");
         }
         _keySerializer = ks;
     }
@@ -289,7 +289,7 @@ public void setDefaultKeySerializer(JsonSerializer<Object> ks)
     public void setNullValueSerializer(JsonSerializer<Object> nvs)
     {
         if (nvs == null) {
-            throw new IllegalArgumentException("Can not pass null JsonSerializer");
+            throw new IllegalArgumentException("Cannot pass null JsonSerializer");
         }
         _nullValueSerializer = nvs;
     }
@@ -306,7 +306,7 @@ public void setNullValueSerializer(JsonSerializer<Object> nvs)
     public void setNullKeySerializer(JsonSerializer<Object> nks)
     {
         if (nks == null) {
-            throw new IllegalArgumentException("Can not pass null JsonSerializer");
+            throw new IllegalArgumentException("Cannot pass null JsonSerializer");
         }
         _nullKeySerializer = nks;
     }

File: src/main/java/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java
Patch:
@@ -56,7 +56,7 @@ protected SerializerFactoryConfig(Serializers[] allAdditionalSerializers,
     public SerializerFactoryConfig withAdditionalSerializers(Serializers additional)
     {
         if (additional == null) {
-            throw new IllegalArgumentException("Can not pass null Serializers");
+            throw new IllegalArgumentException("Cannot pass null Serializers");
         }
         Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalSerializers, additional);
         return new SerializerFactoryConfig(all, _additionalKeySerializers, _modifiers);
@@ -65,7 +65,7 @@ public SerializerFactoryConfig withAdditionalSerializers(Serializers additional)
     public SerializerFactoryConfig withAdditionalKeySerializers(Serializers additional)
     {
         if (additional == null) {
-            throw new IllegalArgumentException("Can not pass null Serializers");
+            throw new IllegalArgumentException("Cannot pass null Serializers");
         }
         Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalKeySerializers, additional);
         return new SerializerFactoryConfig(_additionalSerializers, all, _modifiers);
@@ -74,7 +74,7 @@ public SerializerFactoryConfig withAdditionalKeySerializers(Serializers addition
     public SerializerFactoryConfig withSerializerModifier(BeanSerializerModifier modifier)
     {
         if (modifier == null) {
-            throw new IllegalArgumentException("Can not pass null modifier");
+            throw new IllegalArgumentException("Cannot pass null modifier");
         }
         BeanSerializerModifier[] modifiers = ArrayBuilders.insertInListNoDup(_modifiers, modifier);
         return new SerializerFactoryConfig(_additionalSerializers, _additionalKeySerializers, modifiers);

File: src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java
Patch:
@@ -142,15 +142,15 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
                         idProp = (_properties == null) ? null : _properties.get(propName.getSimpleName());
                         if (idProp == null) {
                             ctxt.reportBadDefinition(_baseType, String.format(
-                                    "Invalid Object Id definition for %s: can not find property with name '%s'",
+                                    "Invalid Object Id definition for %s: cannot find property with name '%s'",
                                     handledType().getName(), propName));
                         }
                         idType = idProp.getType();
                         idGen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());
 /*
                          ctxt.reportBadDefinition(_baseType, String.format(
 /
-"Invalid Object Id definition for abstract type %s: can not use `PropertyGenerator` on polymorphic types using property annotation",
+"Invalid Object Id definition for abstract type %s: cannot use `PropertyGenerator` on polymorphic types using property annotation",
 handledType().getName()));
 */
                     } else { // other types simpler

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -775,7 +775,7 @@ protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, Deseri
                         // !!! 08-Jul-2011, tatu: Could probably support; but for now
                         //   it's too complicated, so bail out
                         ctxt.reportInputMismatch(creatorProp,
-                                "Can not create polymorphic instances with unwrapped values");
+                                "Cannot create polymorphic instances with unwrapped values");
                         return null;
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
@@ -953,7 +953,7 @@ protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, D
                             // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
                             //   it's too complicated, so bail out
                             return ctxt.reportBadDefinition(_beanType, String.format(
-                                    "Can not create polymorphic instances with external type ids (%s -> %s)",
+                                    "Cannot create polymorphic instances with external type ids (%s -> %s)",
                                     _beanType, bean.getClass()));
                         }
                         return ext.complete(p, ctxt, bean);
@@ -1034,7 +1034,7 @@ public void handleResolvedForwardReference(Object id, Object value) throws IOExc
         {
             if (_bean == null) {
                 _context.reportInputMismatch(_prop,
-"Can not resolve ObjectId forward reference using property '%s' (of type %s): Bean not yet resolved",
+"Cannot resolve ObjectId forward reference using property '%s' (of type %s): Bean not yet resolved",
 _prop.getName(), _prop.getDeclaringClass().getName());
         }
             _prop.set(_bean, value);

File: src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
Patch:
@@ -56,7 +56,7 @@ public BuilderBasedDeserializer(BeanDeserializerBuilder builder,
         _buildMethod = builder.getBuildMethod();
         // 05-Mar-2012, tatu: Cannot really make Object Ids work with builders, not yet anyway
         if (_objectIdReader != null) {
-            throw new IllegalArgumentException("Can not use Object Id with Builder-based deserialization (type "
+            throw new IllegalArgumentException("Cannot use Object Id with Builder-based deserialization (type "
                     +beanDesc.getType()+")");
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -578,14 +578,14 @@ protected JsonDeserializer<Object> _handleUnknownValueDeserializer(Deserializati
         // Let's try to figure out the reason, to give better error messages
         Class<?> rawClass = type.getRawClass();
         if (!ClassUtil.isConcrete(rawClass)) {
-            return ctxt.reportBadDefinition(type, "Can not find a Value deserializer for abstract type "+type);
+            return ctxt.reportBadDefinition(type, "Cannot find a Value deserializer for abstract type "+type);
         }
-        return ctxt.reportBadDefinition(type, "Can not find a Value deserializer for type "+type);
+        return ctxt.reportBadDefinition(type, "Cannot find a Value deserializer for type "+type);
     }
 
     protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext ctxt, JavaType type)
         throws JsonMappingException
     {
-        return ctxt.reportBadDefinition(type, "Can not find a (Map) Key deserializer for type "+type);
+        return ctxt.reportBadDefinition(type, "Cannot find a (Map) Key deserializer for type "+type);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -537,7 +537,7 @@ public final Object deserializeWith(JsonParser p, DeserializationContext ctxt,
         // 20-Oct-2016, tatu: Also tricky -- for now, report an error
         if (_valueTypeDeserializer != null) {
             ctxt.reportBadDefinition(getType(),
-                    String.format("Can not merge polymorphic property '%s'",
+                    String.format("Cannot merge polymorphic property '%s'",
                             getName()));
 //            return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java
Patch:
@@ -307,7 +307,7 @@ protected final Object _deserializeUsingPropertyBased(final JsonParser p,
                          *   but make explicitly non-supported for now.
                          */
                         return ctxt.reportBadDefinition(_beanType, String.format(
-"Can not support implicit polymorphic deserialization for POJOs-as-Arrays style: nominal type %s, actual type %s",
+"Cannot support implicit polymorphic deserialization for POJOs-as-Arrays style: nominal type %s, actual type %s",
                                 _beanType.getRawClass().getName(), builder.getClass().getName()));
                     }
                 }
@@ -343,7 +343,7 @@ protected Object _deserializeFromNonArray(JsonParser p, DeserializationContext c
     {
         // Let's start with failure
         return ctxt.handleUnexpectedToken(handledType(), p.getCurrentToken(), p,
-                "Can not deserialize a POJO (of type %s) from non-Array representation (token: %s): "
+                "Cannot deserialize a POJO (of type %s) from non-Array representation (token: %s): "
                 +"type/property designed to be serialized as JSON Array",
                 _beanType.getRawClass().getName(),
                 p.getCurrentToken());

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java
Patch:
@@ -327,7 +327,7 @@ protected final Object _deserializeUsingPropertyBased(final JsonParser p, final
                          *   but make explicitly non-supported for now.
                          */
                         ctxt.reportBadDefinition(_beanType, String.format(
-                                "Can not support implicit polymorphic deserialization for POJOs-as-Arrays style: "
+                                "Cannot support implicit polymorphic deserialization for POJOs-as-Arrays style: "
                                 +"nominal type %s, actual type %s",
                                 _beanType.getRawClass().getName(), bean.getClass().getName()));
                     }
@@ -363,7 +363,7 @@ protected Object _deserializeFromNonArray(JsonParser p, DeserializationContext c
         throws IOException
     {
         return ctxt.handleUnexpectedToken(handledType(), p.getCurrentToken(), p,
-                "Can not deserialize a POJO (of type %s) from non-Array representation (token: %s): "
+                "Cannot deserialize a POJO (of type %s) from non-Array representation (token: %s): "
                 +"type/property designed to be serialized as JSON Array",
                 _beanType.getRawClass().getName(),
                 p.getCurrentToken());

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
Patch:
@@ -471,7 +471,7 @@ public SettableBeanProperty find(int index)
     public SettableBeanProperty find(String key)
     {
         if (key == null) {
-            throw new IllegalArgumentException("Can not pass null property name");
+            throw new IllegalArgumentException("Cannot pass null property name");
         }
         if (_caseInsensitive) {
             key = key.toLowerCase();

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java
Patch:
@@ -98,7 +98,7 @@ public SettableBeanProperty findBackReference(String refName) {
         JsonDeserializer<Object> valueDeser = getContentDeserializer();
         if (valueDeser == null) {
             throw new IllegalArgumentException(String.format(
-                    "Can not handle managed/back reference '%s': type: container deserializer of type %s returned null for 'getContentDeserializer()'",
+                    "Cannot handle managed/back reference '%s': type: container deserializer of type %s returned null for 'getContentDeserializer()'",
                     refName, getClass().getName()));
         }
         return valueDeser.findBackReference(refName);
@@ -147,7 +147,7 @@ public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingExcep
         if (vi == null || !vi.canCreateUsingDefault()) {
             JavaType type = getValueType();
             ctxt.reportBadDefinition(type,
-                    String.format("Can not create empty instance of %s, no default Creator", type));
+                    String.format("Cannot create empty instance of %s, no default Creator", type));
         }
         try {
             return vi.createUsingDefault(ctxt);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java
Patch:
@@ -179,7 +179,7 @@ public Map.Entry<Object,Object> deserialize(JsonParser p, DeserializationContext
         if (t != JsonToken.FIELD_NAME) {
             if (t == JsonToken.END_OBJECT) {
                 return ctxt.reportInputMismatch(this,
-                        "Can not deserialize a Map.Entry out of empty JSON Object");
+                        "Cannot deserialize a Map.Entry out of empty JSON Object");
             }
             return (Map.Entry<Object,Object>) ctxt.handleUnexpectedToken(handledType(), p);
         }
@@ -227,7 +227,7 @@ public Map.Entry<Object,Object> deserialize(JsonParser p, DeserializationContext
     public Map.Entry<Object,Object> deserialize(JsonParser p, DeserializationContext ctxt,
             Map.Entry<Object,Object> result) throws IOException
     {
-        throw new IllegalStateException("Can not update Map.Entry values");
+        throw new IllegalStateException("Cannot update Map.Entry values");
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java
Patch:
@@ -312,7 +312,7 @@ public char[] deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
                     }
                     if (str.length() != 1) {
                         ctxt.reportInputMismatch(this,
-"Can not convert a JSON String of length %d into a char element of char array", str.length());
+"Cannot convert a JSON String of length %d into a char element of char array", str.length());
                     }
                     sb.append(str.charAt(0));
                 }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java
Patch:
@@ -220,7 +220,7 @@ protected Object _handleIncompatibleUpdateValue(JsonParser p, DeserializationCon
         throws IOException
     {
         throw new UnsupportedOperationException(String.format
-                ("Can not update object of type %s (using deserializer for type %s)"
+                ("Cannot update object of type %s (using deserializer for type %s)"
                         +intoValue.getClass().getName(), _delegateType));
     }
     

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
Patch:
@@ -157,15 +157,15 @@ protected Object _parse(String key, DeserializationContext ctxt) throws Exceptio
                 int value = _parseInt(key);
                 // allow range up to 255, inclusive (to support "unsigned" byte)
                 if (value < Byte.MIN_VALUE || value > 255) {
-                    return ctxt.handleWeirdKey(_keyClass, key, "overflow, value can not be represented as 8-bit value");
+                    return ctxt.handleWeirdKey(_keyClass, key, "overflow, value cannot be represented as 8-bit value");
                 }
                 return Byte.valueOf((byte) value);
             }
         case TYPE_SHORT:
             {
                 int value = _parseInt(key);
                 if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {
-                    return ctxt.handleWeirdKey(_keyClass, key, "overflow, value can not be represented as 16-bit value");
+                    return ctxt.handleWeirdKey(_keyClass, key, "overflow, value cannot be represented as 16-bit value");
                     // fall-through and truncate if need be
                 }
                 return Short.valueOf((short) value);

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java
Patch:
@@ -36,7 +36,7 @@ public AnnotatedMethod(TypeResolutionContext ctxt, Method method,
     {
         super(ctxt, classAnn, paramAnnotations);
         if (method == null) {
-            throw new IllegalArgumentException("Can not construct AnnotatedMethod with null Method");
+            throw new IllegalArgumentException("Cannot construct AnnotatedMethod with null Method");
         }
         _method = method;
     }

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -766,7 +766,7 @@ public JavaType refineSerializationType(final MapperConfig<?> config,
                         type = type.withStaticTyping();
                     } else {
                         throw new JsonMappingException(null,
-                                String.format("Can not refine serialization type %s into %s; types not related",
+                                String.format("Cannot refine serialization type %s into %s; types not related",
                                         type, serClass.getName()));
                     }
                 } catch (IllegalArgumentException iae) {
@@ -801,7 +801,7 @@ public JavaType refineSerializationType(final MapperConfig<?> config,
                             keyType = keyType.withStaticTyping();
                         } else {
                             throw new JsonMappingException(null,
-                                    String.format("Can not refine serialization key type %s into %s; types not related",
+                                    String.format("Cannot refine serialization key type %s into %s; types not related",
                                             keyType, keyClass.getName()));
                         }
                     } catch (IllegalArgumentException iae) {
@@ -837,7 +837,7 @@ public JavaType refineSerializationType(final MapperConfig<?> config,
                            contentType = contentType.withStaticTyping();
                        } else {
                            throw new JsonMappingException(null,
-                                   String.format("Can not refine serialization content type %s into %s; types not related",
+                                   String.format("Cannot refine serialization content type %s into %s; types not related",
                                            contentType, contentClass.getName()));
                        }
                    } catch (IllegalArgumentException iae) { // shouldn't really happen

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java
Patch:
@@ -1285,7 +1285,7 @@ public Linked(T v, Linked<T> n,
 
             if (explName) {
                 if (this.name == null) { // sanity check to catch internal problems
-                    throw new IllegalArgumentException("Can not pass true for 'explName' if name is null/empty");
+                    throw new IllegalArgumentException("Cannot pass true for 'explName' if name is null/empty");
                 }
                 // 03-Apr-2014, tatu: But how about name-space only override?
                 //   Probably should not be explicit? Or, need to merge somehow?

File: src/main/java/com/fasterxml/jackson/databind/introspect/VirtualAnnotatedMember.java
Patch:
@@ -84,12 +84,12 @@ public JavaType getType() {
 
     @Override
     public void setValue(Object pojo, Object value) throws IllegalArgumentException {
-        throw new IllegalArgumentException("Can not set virtual property '"+_name+"'");
+        throw new IllegalArgumentException("Cannot set virtual property '"+_name+"'");
     }
 
     @Override
     public Object getValue(Object pojo) throws IllegalArgumentException {
-        throw new IllegalArgumentException("Can not get virtual property '"+_name+"'");
+        throw new IllegalArgumentException("Cannot get virtual property '"+_name+"'");
     }
     
     /*

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
Patch:
@@ -65,7 +65,7 @@ public StdTypeResolverBuilder init(JsonTypeInfo.Id idType, TypeIdResolver idRes)
     {
         // sanity checks
         if (idType == null) {
-            throw new IllegalArgumentException("idType can not be null");
+            throw new IllegalArgumentException("idType cannot be null");
         }
         _idType = idType;
         _customIdResolver = idRes;
@@ -168,7 +168,7 @@ public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,
     @Override
     public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs) {
         if (includeAs == null) {
-            throw new IllegalArgumentException("includeAs can not be null");
+            throw new IllegalArgumentException("includeAs cannot be null");
         }
         _includeAs = includeAs;
         return this;
@@ -227,7 +227,7 @@ protected TypeIdResolver idResolver(MapperConfig<?> config,
     {
         // Custom id resolver?
         if (_customIdResolver != null) { return _customIdResolver; }
-        if (_idType == null) throw new IllegalStateException("Can not build, 'init()' not yet called");
+        if (_idType == null) throw new IllegalStateException("Cannot build, 'init()' not yet called");
         switch (_idType) {
         case CLASS:
             return new ClassNameIdResolver(baseType, config.getTypeFactory());

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeSerializerBase.java
Patch:
@@ -96,7 +96,7 @@ protected String idFromValueAndType(Object value, Class<?> type) {
     protected void handleMissingId(Object value) {
         /*
         String typeDesc = ClassUtil.classNameOf(value, "NULL");
-        throw new IllegalArgumentException("Can not resolve type id for "
+        throw new IllegalArgumentException("Cannot resolve type id for "
                 +typeDesc+" (using "+_idResolver.getClass().getName()+")");
                 */
     }

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java
Patch:
@@ -53,14 +53,14 @@ public <T> SimpleAbstractTypeResolver addMapping(Class<T> superType, Class<? ext
     {
         // Sanity checks, just in case someone tries to force typing...
         if (superType == subType) {
-            throw new IllegalArgumentException("Can not add mapping from class to itself");
+            throw new IllegalArgumentException("Cannot add mapping from class to itself");
         }
         if (!superType.isAssignableFrom(subType)) {
-            throw new IllegalArgumentException("Can not add mapping from class "+superType.getName()
+            throw new IllegalArgumentException("Cannot add mapping from class "+superType.getName()
                     +" to "+subType.getName()+", as latter is not a subtype of former");
         }
         if (!Modifier.isAbstract(superType.getModifiers())) {
-            throw new IllegalArgumentException("Can not add mapping from class "+superType.getName()
+            throw new IllegalArgumentException("Cannot add mapping from class "+superType.getName()
                     +" since it is not abstract");
         }
         _mappings.put(new ClassKey(superType), subType);

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java
Patch:
@@ -510,7 +510,7 @@ protected void _checkNotNull(Object thingy, String type)
     {
         if (thingy == null) {
             throw new IllegalArgumentException(String.format(
-                    "Can not pass `null` as %s", type));
+                    "Cannot pass `null` as %s", type));
         }
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/node/TextNode.java
Patch:
@@ -69,7 +69,7 @@ public byte[] getBinaryValue(Base64Variant b64variant) throws IOException
         } catch (IllegalArgumentException e) {
             throw InvalidFormatException.from(null,
                     String.format(
-"Can not access contents of TextNode as binary due to broken Base64 encoding: %s",
+"Cannot access contents of TextNode as binary due to broken Base64 encoding: %s",
 e.getMessage()),
                     str, byte[].class);
         }

File: src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
Patch:
@@ -407,7 +407,7 @@ protected JsonNode currentNumericNode()
         JsonNode n = currentNode();
         if (n == null || !n.isNumber()) {
             JsonToken t = (n == null) ? null : n.asToken();
-            throw _constructError("Current token ("+t+") not numeric, can not use numeric value accessors");
+            throw _constructError("Current token ("+t+") not numeric, cannot use numeric value accessors");
         }
         return n;
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -392,7 +392,7 @@ public void assignSerializer(JsonSerializer<Object> ser) {
         // may need to disable check in future?
         if ((_serializer != null) && (_serializer != ser)) {
             throw new IllegalStateException(String.format(
-                    "Can not override _serializer: had a %s, trying to set to %s",
+                    "Cannot override _serializer: had a %s, trying to set to %s",
                     ClassUtil.classNameOf(_serializer), ClassUtil.classNameOf(ser)));
         }
         _serializer = ser;
@@ -405,7 +405,7 @@ public void assignNullSerializer(JsonSerializer<Object> nullSer) {
         // may need to disable check in future?
         if ((_nullSerializer != null) && (_nullSerializer != nullSer)) {
             throw new IllegalStateException(String.format(
-                    "Can not override _nullSerializer: had a %s, trying to set to %s",
+                    "Cannot override _nullSerializer: had a %s, trying to set to %s",
                     ClassUtil.classNameOf(_nullSerializer), ClassUtil.classNameOf(nullSer)));
         }
         _nullSerializer = nullSer;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -102,7 +102,7 @@ public SerializerFactory withConfig(SerializerFactoryConfig config)
          */
         if (getClass() != BeanSerializerFactory.class) {
             throw new IllegalStateException("Subtype of BeanSerializerFactory ("+getClass().getName()
-                    +") has not properly overridden method 'withAdditionalSerializers': can not instantiate subtype with "
+                    +") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with "
                     +"additional serializer definitions");
         }
         return new BeanSerializerFactory(config);
@@ -446,7 +446,7 @@ protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov
         // 05-Jul-2012, tatu: ... but we should be able to just return "unknown type" serializer, right?
         if (beanDesc.getBeanClass() == Object.class) {
             return prov.getUnknownTypeSerializer(Object.class);
-//            throw new IllegalArgumentException("Can not create bean serializer for Object.class");
+//            throw new IllegalArgumentException("Cannot create bean serializer for Object.class");
         }
         final SerializationConfig config = prov.getConfig();
         BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);
@@ -557,7 +557,7 @@ protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov,
             for (int i = 0, len = props.size() ;; ++i) {
                 if (i == len) {
                     throw new IllegalArgumentException("Invalid Object Id definition for "+beanDesc.getBeanClass().getName()
-                            +": can not find property with name '"+propName+"'");
+                            +": cannot find property with name '"+propName+"'");
                 }
                 BeanPropertyWriter prop = props.get(i);
                 if (propName.equals(prop.getName())) {

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -317,7 +317,7 @@ protected Object getDefaultBean()
                 // 06-Nov-2015, tatu: As per [databind#998], do not fail.
                 /*
                 Class<?> cls = _beanDesc.getClassInfo().getAnnotated();
-                throw new IllegalArgumentException("Class "+cls.getName()+" has no default constructor; can not instantiate default bean value to support 'properties=JsonSerialize.Inclusion.NON_DEFAULT' annotation");
+                throw new IllegalArgumentException("Class "+cls.getName()+" has no default constructor; cannot instantiate default bean value to support 'properties=JsonSerialize.Inclusion.NON_DEFAULT' annotation");
                  */
 
                 // And use a marker

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java
Patch:
@@ -127,7 +127,7 @@ public void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider
     {
         if (provider.isEnabled(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS)) {
             provider.reportBadDefinition(handledType(),
-                    "Unwrapped property requires use of type information: can not serialize without disabling `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`");
+                    "Unwrapped property requires use of type information: cannot serialize without disabling `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`");
         }
         gen.setCurrentValue(bean); // [databind#631]
         if (_objectIdWriter != null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -492,7 +492,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                     for (int i = 0, len = _props.length; ; ++i) {
                         if (i == len) {
                             provider.reportBadDefinition(_beanType, String.format(
-                                    "Invalid Object Id definition for %s: can not find property with name '%s'",
+                                    "Invalid Object Id definition for %s: cannot find property with name '%s'",
                                     handledType().getName(), propName));
                         }
                         BeanPropertyWriter prop = _props[i];

File: src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
Patch:
@@ -102,7 +102,7 @@ public JsonSerializer<?> createContextual(SerializerProvider serializers,
         //    So: require it be `SimpleDateFormat`; can't config other types
         if (!(df0 instanceof SimpleDateFormat)) {
             serializers.reportBadDefinition(handledType(), String.format(
-"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",
+"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`",
 df0.getClass().getName()));
         }
         SimpleDateFormat df = (SimpleDateFormat) df0;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -573,7 +573,7 @@ public boolean isEmpty(SerializerProvider prov, Map<?,?> value)
             }
             try {
                 valueSer = _findSerializer(prov, elemValue);
-            } catch (JsonMappingException e) { // Ugh... can not just throw as-is, so...
+            } catch (JsonMappingException e) { // Ugh... cannot just throw as-is, so...
                 // 05-Nov-2015, tatu: For now, probably best not to assume empty then
                 return false;
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -424,7 +424,7 @@ protected PropertyFilter findPropertyFilter(SerializerProvider provider,
         // Not ok to miss the provider, if a filter is declared to be needed.
         if (filters == null) {
             provider.reportBadDefinition(handledType(),
-                    "Can not resolve PropertyFilter with id '"+filterId+"'; no FilterProvider configured");
+                    "Cannot resolve PropertyFilter with id '"+filterId+"'; no FilterProvider configured");
         }
         // But whether unknown ids are ok just depends on filter provider; if we get null that's fine
         return filters.findPropertyFilter(filterId, valueToFilter);

File: src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java
Patch:
@@ -125,7 +125,7 @@ public JavaType refine(Class<?> contentClass, TypeBindings bindings,
     }
 
     private JavaType _reportUnsupported() {
-        throw new UnsupportedOperationException("Can not narrow or widen array types");
+        throw new UnsupportedOperationException("Cannot narrow or widen array types");
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java
Patch:
@@ -86,7 +86,7 @@ public static CollectionLikeType upgradeFrom(JavaType baseType, JavaType element
         if (baseType instanceof TypeBase) {
             return new CollectionLikeType((TypeBase) baseType, elementType);
         }
-        throw new IllegalArgumentException("Can not upgrade from an instance of "+baseType.getClass());
+        throw new IllegalArgumentException("Cannot upgrade from an instance of "+baseType.getClass());
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java
Patch:
@@ -66,7 +66,7 @@ public static MapLikeType upgradeFrom(JavaType baseType, JavaType keyT,
             return new MapLikeType((TypeBase) baseType, keyT, valueT);
         }
         throw new IllegalArgumentException(
-                "Can not upgrade from an instance of " + baseType.getClass());
+                "Cannot upgrade from an instance of " + baseType.getClass());
     }
 
     @Deprecated

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -70,7 +70,7 @@ public static ReferenceType upgradeFrom(JavaType baseType, JavaType refdType) {
         if (baseType instanceof TypeBase) {
             return new ReferenceType((TypeBase) baseType, refdType);
         }
-        throw new IllegalArgumentException("Can not upgrade from an instance of "+baseType.getClass());
+        throw new IllegalArgumentException("Cannot upgrade from an instance of "+baseType.getClass());
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java
Patch:
@@ -83,7 +83,7 @@ protected Class<?> findClass(String className, MyTokenizer tokens)
             return _factory.findClass(className);
         } catch (Exception e) {
             ClassUtil.throwIfRTE(e);
-            throw _problem(tokens, "Can not locate class '"+className+"', problem: "+e.getMessage());
+            throw _problem(tokens, "Cannot locate class '"+className+"', problem: "+e.getMessage());
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/util/EnumValues.java
Patch:
@@ -46,7 +46,7 @@ public static EnumValues constructFromName(MapperConfig<?> config, Class<Enum<?>
         Class<? extends Enum<?>> enumCls = ClassUtil.findEnumType(enumClass);
         Enum<?>[] enumValues = enumCls.getEnumConstants();
         if (enumValues == null) {
-            throw new IllegalArgumentException("Can not determine enum constants for Class "+enumClass.getName());
+            throw new IllegalArgumentException("Cannot determine enum constants for Class "+enumClass.getName());
         }
         String[] names = config.getAnnotationIntrospector().findEnumValues(enumCls, enumValues, new String[enumValues.length]);
         SerializableString[] textual = new SerializableString[enumValues.length];
@@ -72,7 +72,7 @@ public static EnumValues constructFromToString(MapperConfig<?> config, Class<Enu
             }
             return new EnumValues(enumClass, textual);
         }
-        throw new IllegalArgumentException("Can not determine enum constants for Class "+enumClass.getName());
+        throw new IllegalArgumentException("Cannot determine enum constants for Class "+enumClass.getName());
     }
 
     public SerializableString serializedValueFor(Enum<?> key) {

File: src/main/java/com/fasterxml/jackson/databind/util/StdConverter.java
Patch:
@@ -36,7 +36,7 @@ protected JavaType _findConverterType(TypeFactory tf) {
         JavaType thisType = tf.constructType(getClass());
         JavaType convType = thisType.findSuperType(Converter.class);
         if (convType == null || convType.containedTypeCount() < 2) {
-            throw new IllegalStateException("Can not find OUT type parameter for Converter of type "+getClass().getName());
+            throw new IllegalStateException("Cannot find OUT type parameter for Converter of type "+getClass().getName());
         }
         return convType;
     }

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -435,7 +435,7 @@ public void serialize(JsonGenerator gen) throws IOException
                         gen.writeNumber((String) n);
                     } else {
                         throw new JsonGenerationException(String.format(
-                                "Unrecognized value type for VALUE_NUMBER_FLOAT: %s, can not serialize",
+                                "Unrecognized value type for VALUE_NUMBER_FLOAT: %s, cannot serialize",
                                 n.getClass().getName()), gen);
                     }
                 }
@@ -1649,7 +1649,7 @@ public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonP
                 // fall through to error case
             }
             if (_currToken != JsonToken.VALUE_STRING) {
-                throw _constructError("Current token ("+_currToken+") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary");
+                throw _constructError("Current token ("+_currToken+") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), cannot access as binary");
             }
             final String str = getText();
             if (str == null) {
@@ -1715,7 +1715,7 @@ protected final Object _currentObject() {
         protected final void _checkIsNumber() throws JsonParseException
         {
             if (_currToken == null || !_currToken.isNumeric()) {
-                throw _constructError("Current token ("+_currToken+") not numeric, can not use numeric value accessors");
+                throw _constructError("Current token ("+_currToken+") not numeric, cannot use numeric value accessors");
             }
         }
 

File: src/test/java/com/fasterxml/jackson/databind/ObjectReaderTest.java
Patch:
@@ -321,7 +321,7 @@ public void testSchema() throws Exception
             
             fail("Should not pass");
         } catch (IllegalArgumentException e) {
-            verifyException(e, "Can not use FormatSchema");
+            verifyException(e, "Cannot use FormatSchema");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/ObjectWriterTest.java
Patch:
@@ -194,7 +194,7 @@ public void testMiscSettings() throws Exception
             newW = w.with(schema);
             fail("Should not pass");
         } catch (IllegalArgumentException e) {
-            verifyException(e, "Can not use FormatSchema");
+            verifyException(e, "Cannot use FormatSchema");
         }
     }
 
@@ -294,7 +294,7 @@ public void testSchema() throws Exception
                 .writeValueAsBytes("foo");
             fail("Should not pass");
         } catch (IllegalArgumentException e) {
-            verifyException(e, "Can not use FormatSchema");
+            verifyException(e, "Cannot use FormatSchema");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java
Patch:
@@ -147,7 +147,7 @@ public void testErrorReporting() throws Exception
         try {
             MAPPER.readValue("{\"boolProp\":\"foobar\"}", BooleanBean.class);
         } catch (JsonMappingException e) {
-            verifyException(e, "Can not deserialize value of type boolean from String");
+            verifyException(e, "Cannot deserialize value of type boolean from String");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java
Patch:
@@ -251,7 +251,7 @@ public void testAbstractFailure() throws Exception
             MAPPER.readValue("{ \"x\" : 3 }", Abstract.class);
             fail("Should fail on trying to deserialize abstract type");
         } catch (JsonProcessingException e) {
-            verifyException(e, "can not construct");
+            verifyException(e, "cannot construct");
         }
     }    
     public void testPropertyRemoval() throws Exception

File: src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java
Patch:
@@ -226,7 +226,7 @@ public void testArrayIndexForExceptions() throws Exception
             MAPPER.readValue(OBJECTS_JSON, Key[].class);
             fail("Should not pass");
         } catch (JsonMappingException e) {
-            verifyException(e, "Can not deserialize");
+            verifyException(e, "Cannot deserialize");
             List<JsonMappingException.Reference> refs = e.getPath();
             assertEquals(1, refs.size());
             assertEquals(1, refs.get(0).getIndex());
@@ -236,7 +236,7 @@ public void testArrayIndexForExceptions() throws Exception
             MAPPER.readValue("[ \"xyz\", { } ]", String[].class);
             fail("Should not pass");
         } catch (JsonMappingException e) {
-            verifyException(e, "Can not deserialize");
+            verifyException(e, "Cannot deserialize");
             List<JsonMappingException.Reference> refs = e.getPath();
             assertEquals(1, refs.size());
             assertEquals(1, refs.get(0).getIndex());
@@ -246,7 +246,7 @@ public void testArrayIndexForExceptions() throws Exception
             MAPPER.readValue("{\"keys\":"+OBJECTS_JSON+"}", KeyListBean.class);
             fail("Should not pass");
         } catch (JsonMappingException e) {
-            verifyException(e, "Can not deserialize");
+            verifyException(e, "Cannot deserialize");
             List<JsonMappingException.Reference> refs = e.getPath();
             assertEquals(2, refs.size());
             // Bean has no index, but has name:

File: src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java
Patch:
@@ -277,7 +277,7 @@ public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,
                         JsonDeserializer<?> d = new MyStringDeserializer(deserializer);
                         // just for test coverage purposes...
                         if (d.getDelegatee() != deserializer) {
-                            throw new Error("Can not access delegatee!");
+                            throw new Error("Cannot access delegatee!");
                         }
                         return d;
                     }

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/InnerClassCreatorTest.java
Patch:
@@ -64,7 +64,7 @@ public void testIssue1501() throws Exception
             MAPPER.readValue(ser, Something1501.class);
             fail("Should not pass");
         } catch (JsonMappingException e) {
-            verifyException(e, "Can not construct instance");
+            verifyException(e, "Cannot construct instance");
             verifyException(e, "InnerSomething1501");
             verifyException(e, "can only instantiate non-static inner class by using default");
         }
@@ -77,7 +77,7 @@ public void testIssue1502() throws Exception
             MAPPER.readValue(ser, Something1502.class);
             fail("Should not pass");
         } catch (JsonMappingException e) {
-            verifyException(e, "Can not construct instance");
+            verifyException(e, "Cannot construct instance");
             verifyException(e, "InnerSomething1502");
             verifyException(e, "can only instantiate non-static inner class by using default");
         }

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestValueInstantiator.java
Patch:
@@ -589,7 +589,7 @@ public void testErrorMessageForMissingCtor() throws Exception
             MAPPER.readValue("{ }", MyBean.class);
             fail("Should not succeed");
         } catch (JsonMappingException e) {
-            verifyException(e, "Can not construct instance of");
+            verifyException(e, "Cannot construct instance of");
             verifyException(e, "no Creators");
             // as per [databind#1414], is definition problem
             assertEquals(InvalidDefinitionException.class, e.getClass());
@@ -604,7 +604,7 @@ public void testErrorMessageForMissingStringCtor() throws Exception
             MAPPER.readValue("\"foo\"", MyBean.class);
             fail("Should not succeed");
         } catch (JsonMappingException e) {
-            verifyException(e, "Can not construct instance of");
+            verifyException(e, "Cannot construct instance of");
             verifyException(e, "no String-argument constructor/factory");
             // as per [databind#1414], is definition problem
             assertEquals(InvalidDefinitionException.class, e.getClass());

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsGenericTest.java
Patch:
@@ -56,7 +56,7 @@ public void testNullsToEmptyPojo() throws Exception
                     NoCtorWrapper.class);
             fail("Should not pass");
         } catch (JsonMappingException e) {
-            verifyException(e, "Can not create empty instance");
+            verifyException(e, "Cannot create empty instance");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/Base64DecodingTest.java
Patch:
@@ -43,7 +43,7 @@ private void _testInvalidBase64(ObjectMapper mapper, String value) throws Except
             /*byte[] b =*/ nodeValue.binaryValue();
             fail("Should not pass");
         } catch (MismatchedInputException e) {
-            verifyException(e, "Can not access contents of TextNode as binary");
+            verifyException(e, "Cannot access contents of TextNode as binary");
             verifyException(e, "Illegal character '!'");
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDefaultReadTest.java
Patch:
@@ -222,7 +222,7 @@ private <T> void _verifyFailingDeserialization(final ObjectReader reader,
             reader.forType(toValueType).readValue(quote(fromValue));
             fail("Deserialization should have failed");
         } catch (InvalidFormatException e) {
-            verifyException(e, "Can not deserialize value of type");
+            verifyException(e, "Cannot deserialize value of type");
             /* Expected. */
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKNumberDeserTest.java
Patch:
@@ -128,7 +128,7 @@ public void testTextualNullAsNumber() throws Exception
                 .readValue(NULL_JSON);
             fail("Should not have passed");
         } catch (MismatchedInputException e) {
-            verifyException(e, "Can not coerce String \"null\"");
+            verifyException(e, "Cannot coerce String \"null\"");
         }
 
         ObjectMapper noCoerceMapper = new ObjectMapper();
@@ -137,7 +137,7 @@ public void testTextualNullAsNumber() throws Exception
             noCoerceMapper.readValue(NULL_JSON, Integer.TYPE);
             fail("Should not have passed");
         } catch (MismatchedInputException e) {
-            verifyException(e, "Can not coerce String \"null\"");
+            verifyException(e, "Cannot coerce String \"null\"");
         }
     }
     

File: src/test/java/com/fasterxml/jackson/databind/deser/merge/PropertyMergeTest.java
Patch:
@@ -190,7 +190,7 @@ public void testBeanAsArrayMerging() throws Exception
                 .readValue("\"blob\"");
             fail("Should not pass");
         } catch (MismatchedInputException e) {
-            verifyException(e, "Can not deserialize");
+            verifyException(e, "Cannot deserialize");
             verifyException(e, "from non-Array representation");
         }
     }
@@ -223,7 +223,7 @@ public void testInvalidPropertyMerge() throws Exception
             mapper.readValue("{\"value\":3}", CantMergeInts.class);
             fail("Should not pass");
         } catch (InvalidDefinitionException e) {
-            verifyException(e, "can not be merged");
+            verifyException(e, "cannot be merged");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/exc/ExceptionSerializationTest.java
Patch:
@@ -120,14 +120,14 @@ public void testJsonMappingExceptionSerialization() throws IOException {
             MAPPER.readValue( "{ \"val\": \"foo\" }", NoSerdeConstructor.class );
             fail("Should not pass");
         } catch (JsonMappingException e0) {
-            verifyException(e0, "can not deserialize from Object");
+            verifyException(e0, "cannot deserialize from Object");
             e = e0;
         }
         // but should be able to serialize new exception we got
         String json = MAPPER.writeValueAsString(e);
         JsonNode root = MAPPER.readTree(json);
         String msg = root.path("message").asText();
-        String MATCH = "can not construct instance";
+        String MATCH = "cannot construct instance";
         if (!msg.toLowerCase().contains(MATCH)) {
             fail("Exception should contain '"+MATCH+"', does not: '"+msg+"'");
         }

File: src/test/java/com/fasterxml/jackson/databind/interop/TestFormatDetection.java
Patch:
@@ -80,7 +80,7 @@ public void testInvalid() throws Exception
             detecting.readValue(utf8Bytes("<POJO><x>1</x></POJO>"));
             fail("Should have failed");
         } catch (JsonProcessingException e) {
-            verifyException(e, "Can not detect format from input");
+            verifyException(e, "Cannot detect format from input");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java
Patch:
@@ -136,7 +136,7 @@ public void testAbstractBean() throws Exception
             fail("Should have failed");
         } catch (JsonMappingException e) {
             // let's use whatever is currently thrown exception... may change tho
-            verifyException(e, "can not construct");
+            verifyException(e, "cannot construct");
         }
         
         // and then that we will succeed with default type info
@@ -348,7 +348,7 @@ public void testNoGoWithExternalProperty() throws Exception
                     JsonTypeInfo.As.EXTERNAL_PROPERTY);
             fail("Should not have passed");
         } catch (IllegalArgumentException e) {
-            verifyException(e, "Can not use includeAs of EXTERNAL_PROPERTY");
+            verifyException(e, "Cannot use includeAs of EXTERNAL_PROPERTY");
         }
     }
     

File: src/test/java/com/fasterxml/jackson/databind/misc/AccessFixTest.java
Patch:
@@ -14,7 +14,7 @@ static class CauseBlockingSecurityManager
         @Override
         public void checkPermission(Permission perm) throws SecurityException {
             if ("suppressAccessChecks".equals(perm.getName())) {
-                throw new SecurityException("Can not force permission: "+perm);
+                throw new SecurityException("Cannot force permission: "+perm);
             }
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/module/SimpleModuleTest.java
Patch:
@@ -205,7 +205,7 @@ public void testWithoutModule()
             mapper.readValue("{\"str\":\"ab\",\"num\":2}", CustomBean.class);
             fail("Should have caused an exception");
         } catch (IOException e) {
-            verifyException(e, "Can not construct");
+            verifyException(e, "Cannot construct");
             verifyException(e, "no creators");
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/objectid/PolymorphicWithObjectId1551Test.java
Patch:
@@ -71,7 +71,7 @@ public void testFailingAbstractUsingProp() throws Exception
             // on serialization, reported for different type
             assertEquals(Car.class, e.getType().getRawClass());
             verifyException(e, "Invalid Object Id definition");
-            verifyException(e, "can not find property with name 'bogus'");
+            verifyException(e, "cannot find property with name 'bogus'");
         }
 
         // and same for deser
@@ -85,7 +85,7 @@ public void testFailingAbstractUsingProp() throws Exception
         } catch (InvalidDefinitionException e) {
             assertEquals(Vehicle.class, e.getType().getRawClass());
             verifyException(e, "Invalid Object Id definition");
-            verifyException(e, "can not find property with name 'bogus'");
+            verifyException(e, "cannot find property with name 'bogus'");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdSerialization.java
Patch:
@@ -331,7 +331,7 @@ public void testInvalidProp() throws Exception
             MAPPER.writeValueAsString(new Broken());
             fail("Should have thrown an exception");
         } catch (JsonMappingException e) {
-            verifyException(e, "can not find property with name 'id'");
+            verifyException(e, "cannot find property with name 'id'");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/ser/filter/TestJsonFilter.java
Patch:
@@ -146,7 +146,7 @@ public void testMissingFilter() throws Exception
             MAPPER.writeValueAsString(new Bean());
             fail("Should have failed without configured filter");
         } catch (JsonMappingException e) { // should be resolved to a MappingException (internally may be something else)
-            verifyException(e, "Can not resolve PropertyFilter with id 'RootFilter'");
+            verifyException(e, "Cannot resolve PropertyFilter with id 'RootFilter'");
         }
         
         // but when changing behavior, should work difference

File: src/test/java/com/fasterxml/jackson/databind/struct/ScalarCoercionTest.java
Patch:
@@ -92,7 +92,7 @@ private void _verifyNullFail(Class<?> type) throws IOException
             NOT_COERCING_MAPPER.readerFor(type).readValue("\"\"");
             fail("Should have failed for "+type);
         } catch (MismatchedInputException e) {
-            verifyException(e, "Can not coerce empty String");
+            verifyException(e, "Cannot coerce empty String");
             verifyException(e, "Null value for");
         }
     }
@@ -187,7 +187,7 @@ private void _verifyCoerceFail(String input, Class<?> type) throws IOException
                 .readValue(input);
             fail("Should not have allowed coercion");
         } catch (MismatchedInputException e) {
-            verifyException(e, "Can not coerce ");
+            verifyException(e, "Cannot coerce ");
             verifyException(e, " for type `");
             verifyException(e, "enable `MapperFeature.ALLOW_COERCION_OF_SCALARS` to allow");
         }

File: src/test/java/com/fasterxml/jackson/databind/struct/UnwrapSingleArrayScalarsTest.java
Patch:
@@ -256,7 +256,7 @@ public void testSingleStringWrapped() throws Exception
             mapper.readValue("[\""+value+"\"]", String.class);
             fail("Exception not thrown when attempting to unwrap a single value 'String' array into a simple String");
         } catch (MismatchedInputException exp) {
-            verifyException(exp, "Can not deserialize");
+            verifyException(exp, "Cannot deserialize");
             verifyException(exp, "out of START_ARRAY");
         }
         
@@ -284,7 +284,7 @@ public void testBigDecimal() throws Exception
             mapper.readValue("[" + value.toString() + "]", BigDecimal.class);
             fail("Exception was not thrown when attempting to read a single value array of BigDecimal when UNWRAP_SINGLE_VALUE_ARRAYS feature is disabled");
         } catch (MismatchedInputException exp) {
-            verifyException(exp, "Can not deserialize");
+            verifyException(exp, "Cannot deserialize");
             verifyException(exp, "out of START_ARRAY");
         }
         
@@ -313,7 +313,7 @@ public void testBigInteger() throws Exception
             mapper.readValue("[" + value.toString() + "]", BigInteger.class);
             fail("Exception was not thrown when attempting to read a single value array of BigInteger when UNWRAP_SINGLE_VALUE_ARRAYS feature is disabled");
         } catch (MismatchedInputException exp) {
-            verifyException(exp, "Can not deserialize");
+            verifyException(exp, "Cannot deserialize");
             verifyException(exp, "out of START_ARRAY");
         }
         

File: src/test/java/com/fasterxml/jackson/databind/struct/UnwrappedCreatorParam265Test.java
Patch:
@@ -78,7 +78,7 @@ public void testUnwrappedWithUnnamedCreatorParam() throws Exception
             /*JPersonWithoutName result =*/ mapper.readValue(json, JPersonWithoutName.class);
             fail("Should not pass");
         } catch (InvalidDefinitionException e) {
-            verifyException(e, "Can not define Creator parameter");
+            verifyException(e, "Cannot define Creator parameter");
             verifyException(e, "@JsonUnwrapped");
         }
     }
@@ -94,7 +94,7 @@ public void testUnwrappedWithNamedCreatorParam() throws Exception
             /*JPersonWithName result =*/ mapper.readValue(json, JPersonWithName.class);
             fail("Should not pass");
         } catch (InvalidDefinitionException e) {
-            verifyException(e, "Can not define Creator property \"address\"");
+            verifyException(e, "Cannot define Creator property \"address\"");
             verifyException(e, "@JsonUnwrapped");
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeBindings.java
Patch:
@@ -83,7 +83,7 @@ public void testInvalidBindings()
             TypeBindings.create(AbstractType.class, unknown);
             fail("Should not pass");
         } catch (IllegalArgumentException e) {
-            verifyException(e, "Can not create TypeBindings");
+            verifyException(e, "Cannot create TypeBindings");
             verifyException(e, "class expects 2");
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java
Patch:
@@ -192,14 +192,14 @@ public void testParametricTypes()
             // Maps must take 2 type parameters, not just one
             tf.constructParametrizedType(Map.class, Map.class, strC);
         } catch (IllegalArgumentException e) {
-            verifyException(e, "Can not create TypeBindings for class java.util.Map");
+            verifyException(e, "Cannot create TypeBindings for class java.util.Map");
         }
 
         try {
             // Type only accepts one type param
             tf.constructParametrizedType(SingleArgGeneric.class, SingleArgGeneric.class, strC, strC);
         } catch (IllegalArgumentException e) {
-            verifyException(e, "Can not create TypeBindings for class ");
+            verifyException(e, "Cannot create TypeBindings for class ");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/util/TestStdDateFormat.java
Patch:
@@ -122,7 +122,7 @@ public void testLenientParsing() throws Exception
             f.parse("2015-11-32");
             fail("Should not pass");
         } catch (ParseException e) {
-            verifyException(e, "can not parse date");
+            verifyException(e, "Cannot parse date");
         }
 
         // ... yet, with lenient, do allow
@@ -136,7 +136,7 @@ public void testInvalid() {
         try {
             std.parse("foobar");
         } catch (java.text.ParseException e) {
-            verifyException(e, "Can not parse");
+            verifyException(e, "Cannot parse");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKAtomicTypesTest.java
Patch:
@@ -204,12 +204,12 @@ public void testFilteringOfAtomicReference() throws Exception
         ObjectMapper mapper = MAPPER;
 
         // by default, include as null
-        assertEquals("{\"value\":null}", mapper.writeValueAsString(input));
+        assertEquals(aposToQuotes("{'value':null}"), mapper.writeValueAsString(input));
 
         // ditto with "no nulls"
         mapper = new ObjectMapper().setSerializationInclusion(JsonInclude
                 .Include.NON_NULL);
-        assertEquals("{\"value\":null}", mapper.writeValueAsString(input));
+        assertEquals(aposToQuotes("{'value':null}"), mapper.writeValueAsString(input));
 
         // but not with "non empty"
         mapper = new ObjectMapper().setSerializationInclusion(JsonInclude

File: src/test/java/com/fasterxml/jackson/databind/deser/AnySetterTest.java
Patch:
@@ -304,6 +304,7 @@ public void testPolymorphic() throws Exception
     {
         PolyAnyBean input = new PolyAnyBean();
         input.props.put("a", new Impl("xyz"));
+
         String json = MAPPER.writeValueAsString(input);
         
 //        System.err.println("JSON: "+json);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java
Patch:
@@ -122,6 +122,7 @@ public void testArrayTypingForPrimitiveArrays() throws Exception
         _testArrayTypingForPrimitiveArrays(m, new double[] { 0.5, 5.5, -1.0 });
         _testArrayTypingForPrimitiveArrays(m, new float[] { 0.5f, 5.5f, -1.0f });
         _testArrayTypingForPrimitiveArrays(m, new boolean[] { true, false });
+        _testArrayTypingForPrimitiveArrays(m, new byte[] { 1, 2, 3 });
 
         _testArrayTypingForPrimitiveArrays(m, new char[] { 'a', 'b' });
     }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForLists.java
Patch:
@@ -115,7 +115,7 @@ public void testDateTypes() throws Exception
         inputList.add(Locale.CHINESE);
         input.values = inputList;
         String json = m.writeValueAsString(input);
-        
+
         ObjectListBean output = m.readValue(json, ObjectListBean.class);
         List<Object> outputList = output.values;
         assertEquals(2, outputList.size());

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestPropertyTypeInfo.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  * Testing to verify that {@link JsonTypeInfo} works
- * for properties as well as types (see [JACKSON-280] for details)
+ * for properties as well as types.
  */
 @SuppressWarnings("serial")
 public class TestPropertyTypeInfo extends BaseMapTest

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -58,6 +58,8 @@ public class BeanDeserializerFactory
         s.add("org.springframework.beans.factory.ObjectFactory");
         s.add("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl");
         s.add("org.apache.xalan.xsltc.trax.TemplatesImpl");
+        // [databind#1680]: may or may not be problem, take no chance
+        s.add("com.sun.rowset.JdbcRowSetImpl");
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeSerializerBase.java
Patch:
@@ -38,7 +38,7 @@ protected TypeSerializerBase(TypeIdResolver idRes, BeanProperty property)
     public TypeIdResolver getTypeIdResolver() { return _idResolver; }
 
     @Override
-    public void writeTypePrefix(JsonGenerator g,
+    public WritableTypeId writeTypePrefix(JsonGenerator g,
             WritableTypeId idMetadata) throws IOException
     {
         final Object value = idMetadata.forValue;
@@ -54,6 +54,7 @@ public void writeTypePrefix(JsonGenerator g,
         } else { // scalar
             writeCustomTypePrefixForScalar(value, g, idStr);
         }
+        return idMetadata;
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -166,8 +166,8 @@ public void serialize(JsonGenerator f, SerializerProvider provider) throws IOExc
     public void serializeWithType(JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
         throws IOException
     {
-        WritableTypeId typeIdDef = new WritableTypeId(this, JsonToken.START_ARRAY);
-        typeSer.writeTypePrefix(g, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(this, JsonToken.START_ARRAY));
         for (JsonNode n : _children) {
             ((BaseJsonNode)n).serialize(g, provider);
         }

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -317,8 +317,8 @@ public void serializeWithType(JsonGenerator g, SerializerProvider provider,
         boolean trimEmptyArray = (provider != null) &&
                 !provider.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS);
 
-        WritableTypeId typeIdDef = new WritableTypeId(this, JsonToken.START_OBJECT);
-        typeSer.writeTypePrefix(g, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(this, JsonToken.START_OBJECT));
         for (Map.Entry<String, JsonNode> en : _children.entrySet()) {
             BaseJsonNode value = (BaseJsonNode) en.getValue();
 

File: src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java
Patch:
@@ -41,8 +41,8 @@ public void serializeWithType(JsonGenerator g, SerializerProvider provider,
             TypeSerializer typeSer)
         throws IOException
     {
-        WritableTypeId typeIdDef = new WritableTypeId(this, asToken());
-        typeSer.writeTypePrefix(g, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(this, asToken()));
         serialize(g, provider);
         typeSer.writeTypeSuffix(g, typeIdDef);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java
Patch:
@@ -83,8 +83,8 @@ public void serializeWithType(List<String> value, JsonGenerator g, SerializerPro
             TypeSerializer typeSer)
         throws IOException
     {
-        WritableTypeId typeIdDef = new WritableTypeId(value, JsonToken.START_ARRAY);
-        typeSer.writeTypePrefix(g, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(value, JsonToken.START_ARRAY));
         serializeContents(value, g, provider, value.size());
         typeSer.writeTypeSuffix(g, typeIdDef);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java
Patch:
@@ -44,8 +44,8 @@ public final void serializeWithType(Object value, JsonGenerator gen, SerializerP
         if (provider.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {
             failForEmpty(provider, value);
         }
-        WritableTypeId typeIdDef = new WritableTypeId(value, JsonToken.START_OBJECT);
-        typeSer.writeTypePrefix(gen, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(gen,
+                typeSer.typeId(value, JsonToken.START_OBJECT));
         typeSer.writeTypeSuffix(gen, typeIdDef);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -254,10 +254,10 @@ && hasSingleElement(value)) {
     public void serializeWithType(T value, JsonGenerator g, SerializerProvider provider,
             TypeSerializer typeSer) throws IOException
     {
-        WritableTypeId typeIdDef = new WritableTypeId(value, JsonToken.START_ARRAY);
-        typeSer.writeTypePrefix(g, typeIdDef);
         // [databind#631]: Assign current value, to be accessible by custom serializers
         g.setCurrentValue(value);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(value, JsonToken.START_ARRAY));
         serializeContents(value, g, provider);
         typeSer.writeTypeSuffix(g, typeIdDef);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ByteArraySerializer.java
Patch:
@@ -55,8 +55,8 @@ public void serializeWithType(byte[] value, JsonGenerator g, SerializerProvider
         throws IOException
     {
         // most likely scalar
-        WritableTypeId typeIdDef = new WritableTypeId(value, JsonToken.VALUE_EMBEDDED_OBJECT);
-        typeSer.writeTypePrefix(g, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(value, JsonToken.VALUE_EMBEDDED_OBJECT));
         g.writeBinary(provider.getConfig().getBase64Variant(),
                 value, 0, value.length);
         typeSer.writeTypeSuffix(g, typeIdDef);

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -647,10 +647,10 @@ public void serializeWithType(Map<?,?> value, JsonGenerator gen, SerializerProvi
             TypeSerializer typeSer)
         throws IOException
     {
-        WritableTypeId typeIdDef = new WritableTypeId(value, JsonToken.START_OBJECT);
         // [databind#631]: Assign current value, to be accessible by custom serializers
         gen.setCurrentValue(value);
-        typeSer.writeTypePrefix(gen, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(gen,
+                typeSer.typeId(value, JsonToken.START_OBJECT));
         if (!value.isEmpty()) {
             if (_sortKeys || provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {
                 value = _orderEntries(value, gen, provider);

File: src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java
Patch:
@@ -36,8 +36,8 @@ public void serializeWithType(T value, JsonGenerator g, SerializerProvider provi
             TypeSerializer typeSer)
         throws IOException
     {
-        WritableTypeId typeIdDef = new WritableTypeId(value, JsonToken.VALUE_EMBEDDED_OBJECT);
-        typeSer.writeTypePrefix(g, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(value, JsonToken.VALUE_EMBEDDED_OBJECT));
         serialize(value, g, provider);
         typeSer.writeTypeSuffix(g, typeIdDef);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java
Patch:
@@ -41,8 +41,8 @@ public void serializeWithType(T value, JsonGenerator g, SerializerProvider provi
             TypeSerializer typeSer) throws IOException
     {
         // NOTE: need not really be string; just indicates "scalar of some kind"
-        WritableTypeId typeIdDef = new WritableTypeId(value, JsonToken.VALUE_STRING);
-        typeSer.writeTypePrefix(g, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(value, JsonToken.VALUE_STRING));
         serialize(value, g, provider);
         typeSer.writeTypeSuffix(g, typeIdDef);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java
Patch:
@@ -23,9 +23,8 @@ public void serializeWithType(TimeZone value, JsonGenerator g,
             SerializerProvider provider, TypeSerializer typeSer) throws IOException
     {
         // Better ensure we don't use specific sub-classes:
-        WritableTypeId typeIdDef = new WritableTypeId(value,
-                TimeZone.class, JsonToken.VALUE_STRING);
-        typeSer.writeTypePrefix(g, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(value, TimeZone.class, JsonToken.VALUE_STRING));
         serialize(value, g, provider);
         typeSer.writeTypeSuffix(g, typeIdDef);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java
Patch:
@@ -75,8 +75,8 @@ public void serializeWithType(Object value, JsonGenerator g, SerializerProvider
             TypeSerializer typeSer)
         throws IOException
     {
-        WritableTypeId typeIdDef = new WritableTypeId(value, JsonToken.VALUE_STRING);
-        typeSer.writeTypePrefix(g, typeIdDef);
+        WritableTypeId typeIdDef = typeSer.writeTypePrefix(g,
+                typeSer.typeId(value, JsonToken.VALUE_STRING));
         serialize(value, g, provider);
         typeSer.writeTypeSuffix(g, typeIdDef);
     }

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -572,7 +572,7 @@ public JsonFormat.Value findFormat(Annotated memberOrClass) {
      * it is "weak" and does not either proof that a property exists (for example,
      * if visibility is not high enough), or override explicit names.
      * In practice this method is used to introspect optional names for creator
-     * parameters (which may or may not be available and can not be detected
+     * parameters (which may or may not be available and cannot be detected
      * by standard databind); or to provide alternate name mangling for
      * fields, getters and/or setters.
      * 
@@ -605,7 +605,7 @@ public JsonFormat.Value findFormat(Annotated memberOrClass) {
      * Method called in cases where a class has two methods eligible to be used
      * for the same logical property, and default logic is not enough to figure
      * out clear precedence. Introspector may try to choose one to use; or, if
-     * unable, return `null` to indicate it can not resolve the problem.
+     * unable, return `null` to indicate it cannot resolve the problem.
      *
      * @since 2.7
      */

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -143,7 +143,7 @@ public enum DeserializationFeature implements ConfigFeature
     /**
      * Feature that determines what happens when type of a polymorphic
      * value (indicated for example by {@link com.fasterxml.jackson.annotation.JsonTypeInfo})
-     * can not be found (missing) or resolved (invalid class name, unmappable id);
+     * cannot be found (missing) or resolved (invalid class name, unmappable id);
      * if enabled, an exception ir thrown; if false, null value is used instead.
      *<p>
      * Feature is enabled by default so that exception is thrown for missing or invalid

File: src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java
Patch:
@@ -340,7 +340,7 @@ public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingExcep
      * serialization, and if so, should be able to resolve it to actual
      * Object instance to return as deserialized value.
      *<p>
-     * Default implementation returns null, as support can not be implemented
+     * Default implementation returns null, as support cannot be implemented
      * generically. Some standard deserializers (most notably
      * {@link com.fasterxml.jackson.databind.deser.BeanDeserializer})
      * do implement this feature, and may return reader instance, depending on exact

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java
Patch:
@@ -24,7 +24,7 @@
  * with null values -- caller <b>must</b> handle null values, usually
  * by calling {@link SerializerProvider#findNullValueSerializer} to obtain
  * serializer to use.
- * This also means that custom serializers can not be directly used to change
+ * This also means that custom serializers cannot be directly used to change
  * the output to produce when serializing null values.
  *<p>
  * If serializer is an aggregate one -- meaning it delegates handling of some

File: src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java
Patch:
@@ -1322,7 +1322,7 @@ public final static class Prefetch
         private final JsonSerializer<Object> valueSerializer;
 
         /**
-         * When dealing with polymorphic types, we can not pre-fetch
+         * When dealing with polymorphic types, we cannot pre-fetch
          * serializer, but can pre-fetch {@link TypeSerializer}.
          */
         private final TypeSerializer typeSerializer;

File: src/main/java/com/fasterxml/jackson/databind/SequenceWriter.java
Patch:
@@ -196,7 +196,7 @@ public SequenceWriter writeAll(Object[] value) throws IOException
         return this;
     }
 
-    // NOTE: redundant wrt variant that takes Iterable, but can not remove or even
+    // NOTE: redundant wrt variant that takes Iterable, but cannot remove or even
     // deprecate due to backwards-compatibility needs
     public <C extends Collection<?>> SequenceWriter writeAll(C container) throws IOException {
         for (Object value : container) {

File: src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java
Patch:
@@ -275,7 +275,7 @@ public enum SerializationFeature implements ConfigFeature
      * Feature that determines whether Map entries with null values are
      * to be serialized (true) or not (false).
      *<p>
-     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>can not</b> be
+     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>cannot</b> be
      * dynamically changed on per-call basis, because its effect is considered during
      * construction of serializers and property handlers.
      *<p>
@@ -297,7 +297,7 @@ public enum SerializationFeature implements ConfigFeature
      * Note that this does not change behavior of {@link java.util.Map}s, or
      * "Collection-like" types.
      *<p>
-     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>can not</b> be
+     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>cannot</b> be
      * dynamically changed on per-call basis, because its effect is considered during
      * construction of serializers and property handlers.
      *<p>

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -837,7 +837,7 @@ public JsonSerializer<Object> getDefaultNullValueSerializer() {
     /**
      * Method called to find a serializer to use for null values for given
      * declared type. Note that type is completely based on declared type,
-     * since nulls in Java have no type and thus runtime type can not be
+     * since nulls in Java have no type and thus runtime type cannot be
      * determined.
      * 
      * @since 2.0
@@ -867,7 +867,7 @@ public JsonSerializer<Object> findNullValueSerializer(BeanProperty property)
 
     /**
      * Method called to get the serializer to use if provider
-     * can not determine an actual type-specific serializer
+     * cannot determine an actual type-specific serializer
      * to use; typically when none of {@link SerializerFactory}
      * instances are able to construct a serializer.
      *<p>
@@ -1289,7 +1289,7 @@ protected void _reportIncompatibleRootType(Object value, JavaType rootType) thro
     /**
      * Method that will try to find a serializer, either from cache
      * or by constructing one; but will not return an "unknown" serializer
-     * if this can not be done but rather returns null.
+     * if this cannot be done but rather returns null.
      *
      * @return Serializer if one can be found, null if not.
      */

File: src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java
Patch:
@@ -130,7 +130,7 @@ public Class<? extends JsonSerializer> nullsUsing()
     /**
      * Which helper object is to be used to convert type into something
      * that Jackson knows how to serialize; either because base type
-     * can not be serialized easily, or just to alter serialization.
+     * cannot be serialized easily, or just to alter serialization.
      *
      * @since 2.2
      */

File: src/main/java/com/fasterxml/jackson/databind/annotation/NoClass.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * Marker class used with annotations to indicate "no class". This is
- * a silly but necessary work-around -- annotations can not take nulls
+ * a silly but necessary work-around -- annotations cannot take nulls
  * as either default or explicit values. Hence for class values we must
  * explicitly use a bogus placeholder to denote equivalent of
  * "no class" (for which 'null' is usually the natural choice).

File: src/main/java/com/fasterxml/jackson/databind/annotation/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Annotations that directly depend on classes in databinding bundle
- * (not just Jackson core) and can not be included
- * in Jackson core annotations package (because it can not have any
+ * (not just Jackson core) and cannot be included
+ * in Jackson core annotations package (because it cannot have any
  * external dependencies).
  */
 package com.fasterxml.jackson.databind.annotation;

File: src/main/java/com/fasterxml/jackson/databind/cfg/ConfigFeature.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Interface that actual SerializationFeature enumerations used by
  * {@link MapperConfig} implementations must implement.
- * Necessary since enums can not be extended using normal
+ * Necessary since enums cannot be extended using normal
  * inheritance, but can implement interfaces
  */
 public interface ConfigFeature

File: src/main/java/com/fasterxml/jackson/databind/cfg/ContextAttributes.java
Patch:
@@ -69,7 +69,7 @@ public static class Impl extends ContextAttributes
         protected final static Object NULL_SURROGATE = new Object();
         
         /**
-         * Shared attributes that we can not modify in-place.
+         * Shared attributes that we cannot modify in-place.
          */
         protected final Map<?,?> _shared;
 

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java
Patch:
@@ -50,7 +50,7 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,
 
     /**
      * Mix-in annotation mappings to use, if any: immutable,
-     * can not be changed once defined.
+     * cannot be changed once defined.
      * 
      * @since 2.6
      */

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -802,7 +802,7 @@ protected boolean _handleSingleArgumentFactory(DeserializationConfig config,
         return false;
     }
 
-    // 01-Dec-2016, tatu: As per [databind#265] we can not yet support passing
+    // 01-Dec-2016, tatu: As per [databind#265] we cannot yet support passing
     //   of unwrapped values through creator properties, so fail fast
     protected void _reportUnwrappedCreatorProperty(DeserializationContext ctxt,
             BeanDescription beanDesc, AnnotatedParameter param)

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -558,7 +558,7 @@ protected void addBeanProps(DeserializationContext ctxt,
                     } else if (!propDef.hasConstructorParameter()) {
                         PropertyMetadata md = propDef.getMetadata();
                         // 25-Oct-2016, tatu: If merging enabled, might not need setter.
-                        //   We can not quite support this with creator parameters; in theory
+                        //   We cannot quite support this with creator parameters; in theory
                         //   possibly, but right not not due to complexities of routing, so
                         //   just prevent
                         if (md.getMergeInfo() != null) {
@@ -879,7 +879,7 @@ protected SettableBeanProperty constructSetterlessProperty(DeserializationContex
 
     /**
      * Helper method used to skip processing for types that we know
-     * can not be (i.e. are never consider to be) beans: 
+     * cannot be (i.e. are never consider to be) beans: 
      * things like primitives, Arrays, Enums, and proxy types.
      *<p>
      * Note that usually we shouldn't really be getting these sort of

File: src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
Patch:
@@ -54,7 +54,7 @@ public BuilderBasedDeserializer(BeanDeserializerBuilder builder,
                 ignorableProps, ignoreAllUnknown, hasViews);
         _targetType = targetType;
         _buildMethod = builder.getBuildMethod();
-        // 05-Mar-2012, tatu: Can not really make Object Ids work with builders, not yet anyway
+        // 05-Mar-2012, tatu: Cannot really make Object Ids work with builders, not yet anyway
         if (_objectIdReader != null) {
             throw new IllegalArgumentException("Can not use Object Id with Builder-based deserialization (type "
                     +beanDesc.getType()+")");
@@ -228,7 +228,7 @@ public final Object deserialize(JsonParser p, DeserializationContext ctxt)
     public Object deserialize(JsonParser p, DeserializationContext ctxt,
     		Object value) throws IOException
     {
-        // 26-Oct-2016, tatu: I can not see any of making this actually
+        // 26-Oct-2016, tatu: I cannot see any of making this actually
         //    work correctly, so let's indicate problem right away
         JavaType valueType = _targetType;
         // Did they try to give us builder?

File: src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java
Patch:
@@ -29,7 +29,7 @@ public interface ContextualDeserializer
      *    deserializers that may be needed by this deserializer
      * @param property Method, field or constructor parameter that represents the property
      *   (and is used to assign deserialized value).
-     *   Should be available; but there may be cases where caller can not provide it and
+     *   Should be available; but there may be cases where caller cannot provide it and
      *   null is passed instead (in which case impls usually pass 'this' deserializer as is)
      * 
      * @return Deserializer to use for deserializing values of specified property;

File: src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java
Patch:
@@ -49,7 +49,7 @@ public class CreatorProperty
     protected final int _creatorIndex;
 
     /**
-     * In special cases, when implementing "updateValue", we can not use
+     * In special cases, when implementing "updateValue", we cannot use
      * constructors or factory methods, but have to fall back on using a
      * setter (or mutable field property). If so, this refers to that fallback
      * accessor.

File: src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java
Patch:
@@ -38,7 +38,7 @@ public abstract class DefaultDeserializationContext
     /**
      * Constructor that will pass specified deserializer factory and
      * cache: cache may be null (in which case default implementation
-     * will be used), factory can not be null
+     * will be used), factory cannot be null
      */
     protected DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache) {
         super(df, cache);

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java
Patch:
@@ -163,7 +163,7 @@ public void set(Object instance, Object propName, Object value) throws IOExcepti
                 AnnotatedField field = (AnnotatedField) _setter;
                 Map<Object,Object> val = (Map<Object,Object>) field.getValue(instance);
                 /* 01-Jun-2016, tatu: At this point it is not quite clear what to do if
-                 *    field is `null` -- we can not necessarily count on zero-args
+                 *    field is `null` -- we cannot necessarily count on zero-args
                  *    constructor except for a small set of types, so for now just
                  *    ignore if null. May need to figure out something better in future.
                  */
@@ -172,7 +172,7 @@ public void set(Object instance, Object propName, Object value) throws IOExcepti
                     val.put(propName, value);
                 }
             } else {
-                // note: can not use 'setValue()' due to taking 2 args
+                // note: cannot use 'setValue()' due to taking 2 args
                 ((AnnotatedMethod) _setter).callOnWith(instance, propName, value);
             }
         } catch (Exception e) {

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -85,7 +85,7 @@ public abstract class SettableBeanProperty
     /*
     /**********************************************************
     /* Configuration that is not yet immutable; generally assigned
-    /* during initialization process but can not be passed to
+    /* during initialization process but cannot be passed to
     /* constructor.
     /**********************************************************
      */
@@ -594,7 +594,7 @@ protected IOException _throwAsIOE(Exception e) throws IOException {
     }
 
     // 10-Oct-2015, tatu: _Should_ be deprecated, too, but its remaining
-    //   callers can not actually provide a JsonParser
+    //   callers cannot actually provide a JsonParser
     protected void _throwAsIOE(Exception e, Object value) throws IOException {
         _throwAsIOE((JsonParser) null, e, value);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java
Patch:
@@ -18,7 +18,7 @@
  * is a scalar value (String, number, boolean).
  *<p>
  * Note that this type is not parameterized (even though it would seemingly
- * make sense), because such type information can not be use effectively
+ * make sense), because such type information cannot be use effectively
  * during runtime: access is always using either wildcard type, or just
  * basic {@link java.lang.Object}; and so adding type parameter seems
  * like unnecessary extra work.

File: src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java
Patch:
@@ -26,7 +26,7 @@ public interface ValueInstantiators
      *   a custom instantiator already)
      *   
      * @return Instantiator to use; either <code>defaultInstantiator</code> that was passed,
-     *   or a custom variant; can not be null.
+     *   or a custom variant; cannot be null.
      */
     public ValueInstantiator findValueInstantiator(DeserializationConfig config,
             BeanDescription beanDesc, ValueInstantiator defaultInstantiator);

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java
Patch:
@@ -15,7 +15,7 @@ public class BeanAsArrayBuilderDeserializer
     private static final long serialVersionUID = 1L;
 
     /**
-     * Deserializer we delegate operations that we can not handle.
+     * Deserializer we delegate operations that we cannot handle.
      */
     final protected BeanDeserializerBase _delegate;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java
Patch:
@@ -21,7 +21,7 @@ public class BeanAsArrayDeserializer
     private static final long serialVersionUID = 1L;
 
     /**
-     * Deserializer we delegate operations that we can not handle.
+     * Deserializer we delegate operations that we cannot handle.
      */
     protected final BeanDeserializerBase _delegate;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java
Patch:
@@ -79,7 +79,7 @@ protected ArrayBlockingQueueDeserializer withResolved(JsonDeserializer<?> dd,
     protected Collection<Object> createDefaultInstance(DeserializationContext ctxt)
         throws IOException
     {
-        // 07-Nov-2016, tatu: Important: can not create using default ctor (one
+        // 07-Nov-2016, tatu: Important: cannot create using default ctor (one
         //    does not exist); and also need to know exact size. Hence, return
         //    null from here
         return null;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -540,7 +540,7 @@ protected final JsonNode deserializeAny(JsonParser p, DeserializationContext ctx
             */
 
             
-            // These states can not be mapped; input stream is
+            // These states cannot be mapped; input stream is
             // off by an event or two
 
         //case END_OBJECT:

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java
Patch:
@@ -39,7 +39,7 @@ public T deserialize(JsonParser p, DeserializationContext ctxt, T intoValue) thr
     }
 
     /**
-     * By default assumption is that scalar types can not be updated: many are immutable
+     * By default assumption is that scalar types cannot be updated: many are immutable
      * values (such as primitives and wrappers)
      */
     @Override // since 2.9

File: src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java
Patch:
@@ -127,7 +127,7 @@ protected UntypedObjectDeserializer(UntypedObjectDeserializer base,
 
     /**
      * We need to implement this method to properly find things to delegate
-     * to: it can not be done earlier since delegated deserializers almost
+     * to: it cannot be done earlier since delegated deserializers almost
      * certainly require access to this instance (at least "List" and "Map" ones)
      */
     @SuppressWarnings("unchecked")

File: src/main/java/com/fasterxml/jackson/databind/exc/IgnoredPropertyException.java
Patch:
@@ -47,7 +47,7 @@ public IgnoredPropertyException(String msg, JsonLocation loc,
      *    if available), or if not, type itself
      * @param propertyName Name of unrecognized property
      * @param propertyIds (optional, null if not available) Set of properties that
-     *    type would recognize, if completely known: null if set can not be determined.
+     *    type would recognize, if completely known: null if set cannot be determined.
      */
     public static IgnoredPropertyException from(JsonParser p,
             Object fromObjectOrClass, String propertyName,

File: src/main/java/com/fasterxml/jackson/databind/exc/UnrecognizedPropertyException.java
Patch:
@@ -43,7 +43,7 @@ public UnrecognizedPropertyException(String msg, JsonLocation loc,
      *    if available), or if not, type itself
      * @param propertyName Name of unrecognized property
      * @param propertyIds (optional, null if not available) Set of properties that
-     *    type would recognize, if completely known: null if set can not be determined.
+     *    type would recognize, if completely known: null if set cannot be determined.
      */
     public static UnrecognizedPropertyException from(JsonParser p,
             Object fromObjectOrClass, String propertyName,

File: src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java
Patch:
@@ -59,7 +59,7 @@ public final JavaType getType(TypeBindings bogus) {
     /**
      * JDK declared generic type of the annotated element; definition
      * of what exactly this means depends on sub-class. Note that such type
-     * can not be reliably resolved without {@link TypeResolutionContext}, and
+     * cannot be reliably resolved without {@link TypeResolutionContext}, and
      * as a result use of this method was deprecated in Jackson 2.7: see
      * {@link #getType} for replacement.
      *

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java
Patch:
@@ -18,7 +18,7 @@ public final class AnnotatedField
     /**
      * Actual {@link Field} used for access.
      *<p>
-     * Transient since it can not be persisted directly using
+     * Transient since it cannot be persisted directly using
      * JDK serialization
      */
     protected final transient Field _field;

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Object that represents method parameters, mostly so that associated
  * annotations can be processed conveniently. Note that many of accessors
- * can not return meaningful values since parameters do not have stand-alone
+ * cannot return meaningful values since parameters do not have stand-alone
  * JDK objects associated; so access should mostly be limited to checking
  * annotation values which are properly aggregated and included.
  */

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -179,7 +179,7 @@ public boolean isAnnotationBundle(Annotation ann) {
     public String findEnumValue(Enum<?> value)
     {
         // 11-Jun-2015, tatu: As per [databind#677], need to allow explicit naming.
-        //   Unfortunately can not quite use standard AnnotatedClass here (due to various
+        //   Unfortunately cannot quite use standard AnnotatedClass here (due to various
         //   reasons, including odd representation JVM uses); has to do for now
         try {
             // We know that values are actually static fields with matching name so:
@@ -1438,7 +1438,7 @@ protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config,
         // 08-Dec-2014, tatu: To deprecate `JsonTypeInfo.None` we need to use other placeholder(s);
         //   and since `java.util.Void` has other purpose (to indicate "deser as null"), we'll instead
         //   use `JsonTypeInfo.class` itself. But any annotation type will actually do, as they have no
-        //   valid use (can not instantiate as default)
+        //   valid use (cannot instantiate as default)
         if (defaultImpl != JsonTypeInfo.None.class && !defaultImpl.isAnnotation()) {
             b = b.defaultImpl(defaultImpl);
         }

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -488,7 +488,7 @@ protected void _addCreatorParam(Map<String, POJOPropertyBuilder> props,
         boolean expl = (pn != null && !pn.isEmpty());
         if (!expl) {
             if (impl.isEmpty()) {
-                // Important: if neither implicit nor explicit name, can not make use of
+                // Important: if neither implicit nor explicit name, cannot make use of
                 // this creator parameter -- may or may not be a problem, verified at a later point.
                 return;
             }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema.java
Patch:
@@ -25,7 +25,7 @@
 {
     /**
      * Marker value used to indicate that property has "no value";
-     * needed because annotations can not have null as default
+     * needed because annotations cannot have null as default
      * value.
      */
     public final static String NO_VALUE = "##irrelevant";

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java
Patch:
@@ -66,7 +66,7 @@ public abstract class TypeDeserializer
     /**
      * Accessor for "default implementation" type; optionally defined
      * class to use in cases where type id is not
-     * accessible for some reason (either missing, or can not be
+     * accessible for some reason (either missing, or cannot be
      * resolved)
      */
     public abstract Class<?> getDefaultImpl();

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java
Patch:
@@ -135,7 +135,7 @@ public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,
 
     /**
      * Method for specifying default implementation to use if type id 
-     * is either not available, or can not be resolved.
+     * is either not available, or cannot be resolved.
      * 
      * @return Resulting builder instance (usually this builder,
      *   but may be a newly constructed instance for immutable builders}

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java
Patch:
@@ -98,7 +98,7 @@ public abstract void writeTypeSuffix(JsonGenerator g,
      * Method called to write initial part of type information for given
      * value, when it will be output as scalar JSON value (not as JSON
      * Object or Array).
-     * This means that the context after call can not be that of JSON Object;
+     * This means that the context after call cannot be that of JSON Object;
      * it may be Array or root context.
      * 
      * @param value Value that will be serialized, for which type information is
@@ -193,7 +193,7 @@ public void writeTypePrefixForArray(Object value, JsonGenerator g, Class<?> type
 //    @Deprecated // since 2.9
     public void writeCustomTypePrefixForScalar(Object value, JsonGenerator g, String typeId) throws IOException { }
 
-//    @Deprecated // since 2.9
+    //    @Deprecated // since 2.9
     public void writeCustomTypePrefixForObject(Object value, JsonGenerator g, String typeId) throws IOException { }
 
 //    @Deprecated // since 2.9

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java
Patch:
@@ -35,7 +35,7 @@ public AsArrayTypeSerializer forProperty(BeanProperty prop) {
     @Override
     public void writeTypePrefixForObject(Object value, JsonGenerator g) throws IOException {
         final String typeId = idFromValue(value);
-        // NOTE: can not always avoid writing type id, even if null
+        // NOTE: cannot always avoid writing type id, even if null
         if (g.canWriteTypeId()) {
             _writeTypeId(g, typeId);
         } else {
@@ -48,7 +48,7 @@ public void writeTypePrefixForObject(Object value, JsonGenerator g) throws IOExc
     @Override
     public void writeTypePrefixForObject(Object value, JsonGenerator g, Class<?> type) throws IOException {
         final String typeId = idFromValueAndType(value, type);
-        // NOTE: can not always avoid writing type id, even if null
+        // NOTE: cannot always avoid writing type id, even if null
         if (g.canWriteTypeId()) {
             _writeTypeId(g, typeId);
         } else {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java
Patch:
@@ -11,7 +11,7 @@
  * Type serializer that preferably embeds type information as an "external"
  * type property; embedded in enclosing JSON object.
  * Note that this serializer should only be used when value is being output
- * at JSON Object context; otherwise it can not work reliably, and will have
+ * at JSON Object context; otherwise it cannot work reliably, and will have
  * to revert operation similar to {@link AsPropertyTypeSerializer}.
  *<p>
  * Note that implementation of serialization is bit cumbersome as we must

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java
Patch:
@@ -43,7 +43,7 @@ public void writeTypePrefixForObject(Object value, JsonGenerator g) throws IOExc
             g.writeStartObject();
             // and then JSON Object start caller wants
 
-            // 28-Jan-2015, tatu: No really good answer here; can not really change
+            // 28-Jan-2015, tatu: No really good answer here; cannot really change
             //   structure, so change null to empty String...
             g.writeObjectFieldStart(_validTypeId(typeId));
         }
@@ -61,7 +61,7 @@ public void writeTypePrefixForObject(Object value, JsonGenerator g, Class<?> typ
             g.writeStartObject();
             // and then JSON Object start caller wants
 
-            // 28-Jan-2015, tatu: No really good answer here; can not really change
+            // 28-Jan-2015, tatu: No really good answer here; cannot really change
             //   structure, so change null to empty String...
             g.writeObjectFieldStart(_validTypeId(typeId));
         }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
Patch:
@@ -71,7 +71,7 @@ protected final String _idFrom(Object value, Class<?> cls, TypeFactory typeFacto
         }
         String str = cls.getName();
         if (str.startsWith("java.util")) {
-            // 25-Jan-2009, tatu: There are some internal classes that we can not access as is.
+            // 25-Jan-2009, tatu: There are some internal classes that we cannot access as is.
             //     We need better mechanism; for now this has to do...
 
             // Enum sets and maps are problematic since we MUST know type of

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
Patch:
@@ -127,7 +127,7 @@ public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,
         } else {
             // 20-Mar-2016, tatu: It is important to do specialization go through
             //   TypeFactory to ensure proper resolution; with 2.7 and before, direct
-            //   call to JavaType was used, but that can not work reliably with 2.7
+            //   call to JavaType was used, but that cannot work reliably with 2.7
             // 20-Mar-2016, tatu: Can finally add a check for type compatibility BUT
             //   if so, need to add explicit checks for marker types. Not ideal, but
             //   seems like a reasonable compromise.

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -40,7 +40,7 @@ public abstract class TypeDeserializerBase
 
     /**
      * Type to use as the default implementation, if type id is
-     * missing or can not be resolved.
+     * missing or cannot be resolved.
      */
     protected final JavaType _defaultImpl;
 
@@ -172,7 +172,7 @@ protected final JsonDeserializer<Object> _findDeserializer(DeserializationContex
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
-                 *   One complication, though; can not change 'type class' (simple type to container); otherwise
+                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
@@ -263,7 +263,7 @@ protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationCont
     }
 
     /**
-     * Helper method called when given type id can not be resolved into 
+     * Helper method called when given type id cannot be resolved into 
      * concrete deserializer either directly (using given {@link  TypeIdResolver}),
      * or using default type.
      * Default implementation simply throws a {@link com.fasterxml.jackson.databind.JsonMappingException} to

File: src/main/java/com/fasterxml/jackson/databind/jsontype/package-info.java
Patch:
@@ -2,7 +2,7 @@
  * Package that contains interfaces that define how to implement
  * functionality for dynamically resolving type during deserialization.
  * This is needed for complete handling of polymorphic types, where
- * actual type can not be determined statically (declared type is
+ * actual type cannot be determined statically (declared type is
  * a supertype of actual polymorphic serialized types).
  */
 package com.fasterxml.jackson.databind.jsontype;

File: src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java
Patch:
@@ -61,7 +61,7 @@ public final void serialize(JsonGenerator jg, SerializerProvider provider)
         /* Nothing to output... should we signal an error tho?
          * Chances are, this is an erroneous call. For now, let's
          * not do that; serialize as explicit null. Why? Because we
-         * can not just omit a value as JSON Object field name may have
+         * cannot just omit a value as JSON Object field name may have
          * been written out.
          */
         jg.writeNull();

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -549,7 +549,7 @@ protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov,
         TypeSerializer elementTypeSerializer = createTypeSerializer(config,
                 elementType);
 
-        // if elements have type serializer, can not force static typing:
+        // if elements have type serializer, cannot force static typing:
         if (elementTypeSerializer != null) {
             staticTyping = false;
         }
@@ -975,7 +975,7 @@ protected JsonSerializer<?> buildArraySerializer(SerializerProvider prov,
         throws JsonMappingException
     {
         // 25-Jun-2015, tatu: Note that unlike with Collection(Like) and Map(Like) types, array
-        //   types can not be annotated (in theory I guess we could have mix-ins but... ?)
+        //   types cannot be annotated (in theory I guess we could have mix-ins but... ?)
         //   so we need not do primary annotation lookup here.
         //   So all we need is (1) Custom, (2) Default array serializers
         SerializationConfig config = prov.getConfig();
@@ -1129,7 +1129,7 @@ protected Object findFilterId(SerializationConfig config, BeanDescription beanDe
     protected boolean usesStaticTyping(SerializationConfig config,
             BeanDescription beanDesc, TypeSerializer typeSer)
     {
-        /* 16-Aug-2010, tatu: If there is a (value) type serializer, we can not force
+        /* 16-Aug-2010, tatu: If there is a (value) type serializer, we cannot force
          *    static typing; that would make it impossible to handle expected subtypes
          */
         if (typeSer != null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -135,7 +135,7 @@ public class BeanPropertyWriter extends PropertyWriter // which extends
      */
 
     /**
-     * Serializer to use for writing out the value: null if it can not be known
+     * Serializer to use for writing out the value: null if it cannot be known
      * statically; non-null if it can.
      */
     protected JsonSerializer<Object> _serializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -112,7 +112,7 @@ protected BeanSerializerBase withIgnorals(Set<String> toIgnore) {
     @Override
     protected BeanSerializerBase asArraySerializer()
     {
-        /* Can not:
+        /* Cannot:
          * 
          * - have Object Id (may be allowed in future)
          * - have "any getter"

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -616,7 +616,7 @@ protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription b
     
     /**
      * Helper method used to skip processing for types that we know
-     * can not be (i.e. are never consider to be) beans: 
+     * cannot be (i.e. are never consider to be) beans: 
      * things like primitives, Arrays, Enums, and proxy types.
      *<p>
      * Note that usually we shouldn't really be getting these sort of

File: src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java
Patch:
@@ -27,7 +27,7 @@ public interface ContextualSerializer
      * @param prov Serializer provider to use for accessing config, other serializers
      * @param property Method or field that represents the property
      *   (and is used to access value to serialize).
-     *   Should be available; but there may be cases where caller can not provide it and
+     *   Should be available; but there may be cases where caller cannot provide it and
      *   null is passed instead (in which case impls usually pass 'this' serializer as is)
      * 
      * @return Serializer to use for serializing values of specified property;

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -162,7 +162,7 @@ protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             // First: case of class/type specifying it; try to find POJO property defaults
             Object defaultBean;
 
-            // 16-Oct-2016, tatu: Note: if we can not for some reason create "default instance",
+            // 16-Oct-2016, tatu: Note: if we cannot for some reason create "default instance",
             //    revert logic to the case of general/per-property handling, so both
             //    type-default AND null are to be excluded.
             //    (as per [databind#1417]

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java
Patch:
@@ -50,7 +50,7 @@ public class BeanAsArraySerializer
 
     /**
      * Serializer that would produce JSON Object version; used in
-     * cases where array output can not be used.
+     * cases where array output cannot be used.
      */
     protected final BeanSerializerBase _defaultSerializer;
     
@@ -218,7 +218,7 @@ protected final void serializeAsArray(Object bean, JsonGenerator gen, Serializer
                     prop.serializeAsElement(bean, gen, provider);
                 }
             }
-            // NOTE: any getters can not be supported either
+            // NOTE: any getters cannot be supported either
             //if (_anyGetterWriter != null) {
             //    _anyGetterWriter.getAndSerialize(bean, gen, provider);
             //}

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * This is an optimized serializer for Lists that can be efficiently
  * traversed by index (as opposed to others, such as {@link LinkedList}
- * that can not}.
+ * that cannot}.
  */
 @JacksonStdImpl
 public final class IndexedListSerializer

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -67,7 +67,7 @@ public class MapEntrySerializer
     protected final TypeSerializer _valueTypeSerializer;
 
     /**
-     * If value type can not be statically determined, mapping from
+     * If value type cannot be statically determined, mapping from
      * runtime value types to serializers are stored in this object.
      */
     protected PropertySerializerMap _dynamicValueSerializers;
@@ -315,7 +315,7 @@ public boolean isEmpty(SerializerProvider prov, Entry<?, ?> entry)
             if (valueSer == null) {
                 try {
                     valueSer = _findAndAddDynamic(_dynamicValueSerializers, cc, prov);
-                } catch (JsonMappingException e) { // Ugh... can not just throw as-is, so...
+                } catch (JsonMappingException e) { // Ugh... cannot just throw as-is, so...
                     return false;
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.java
Patch:
@@ -42,7 +42,7 @@ protected PropertySerializerMap(PropertySerializerMap base) {
 
     /**
      * Main lookup method. Takes a "raw" type since usage is always from
-     * place where parameterization is fixed such that there can not be
+     * place where parameterization is fixed such that there cannot be
      * type-parametric variations.
      */
     public abstract JsonSerializer<Object> serializerFor(Class<?> type);

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java
Patch:
@@ -87,7 +87,7 @@ protected BeanSerializerBase withIgnorals(Set<String> toIgnore) {
     }
 
     /**
-     * JSON Array output can not be done if unwrapping operation is
+     * JSON Array output cannot be done if unwrapping operation is
      * requested; so implementation will simply return 'this'.
      */
     @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AsArraySerializerBase<T>
     protected final JsonSerializer<Object> _elementSerializer;
 
     /**
-     * If element type can not be statically determined, mapping from
+     * If element type cannot be statically determined, mapping from
      * runtime type to serializer is handled using this object
      */
     protected PropertySerializerMap _dynamicSerializers;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ByteArraySerializer.java
Patch:
@@ -22,7 +22,7 @@
  * as numbers. Instead, we assume that it would make more sense to output content
  * as base64 encoded bytes (using default base64 encoding).
  *<p>
- * NOTE: since it is NOT serialized as an array, can not use AsArraySerializer as base
+ * NOTE: since it is NOT serialized as an array, cannot use AsArraySerializer as base
  *<p>
  * NOTE: since 2.6, has been a main-level class; earlier was embedded in
  * {@link StdArraySerializers}.

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java
Patch:
@@ -70,7 +70,7 @@ public EnumSerializer(EnumValues v, Boolean serializeAsIndex)
     public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config,
             BeanDescription beanDesc, JsonFormat.Value format)
     {
-        /* 08-Apr-2015, tatu: As per [databind#749], we can not statically determine
+        /* 08-Apr-2015, tatu: As per [databind#749], we cannot statically determine
          *   between name() and toString(), need to construct `EnumValues` with names,
          *   handle toString() case dynamically (for example)
          */

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java
Patch:
@@ -77,7 +77,7 @@ public void serializeContents(EnumSet<? extends Enum<?>> value, JsonGenerator ge
          */
         for (Enum<?> en : value) {
             if (enumSer == null) {
-                /* 12-Jan-2010, tatu: Since enums can not be polymorphic, let's
+                /* 12-Jan-2010, tatu: Since enums cannot be polymorphic, let's
                  *   not bother with typed serializer variant here
                  */
                 enumSer = provider.findValueSerializer(en.getDeclaringClass(), _property);

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -93,7 +93,7 @@ public class MapSerializer
     protected final TypeSerializer _valueTypeSerializer;
 
     /**
-     * If value type can not be statically determined, mapping from
+     * If value type cannot be statically determined, mapping from
      * runtime value types to serializers are stored in this object.
      */
     protected PropertySerializerMap _dynamicValueSerializers;
@@ -311,7 +311,7 @@ public static MapSerializer construct(Set<String> ignoredEntries, JavaType mapTy
         if (!staticValueType) {
             staticValueType = (valueType != null && valueType.isFinal());
         } else {
-            // also: Object.class can not be handled as static, ever
+            // also: Object.class cannot be handled as static, ever
             if (valueType.getRawClass() == Object.class) {
                 staticValueType = false;
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java
Patch:
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator gen, SerializerProvider provid
      * Although this method should rarely get called, for convenience we should override
      * it, and handle it same way as "natural" types: by serializing exactly as is,
      * without type decorations. The most common possible use case is that of delegation
-     * by JSON filter; caller can not know what kind of serializer it gets handed.
+     * by JSON filter; caller cannot know what kind of serializer it gets handed.
      */
     @Override
     public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider serializers,

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -48,7 +48,7 @@ public class ObjectArraySerializer
     protected JsonSerializer<Object> _elementSerializer;
 
     /**
-     * If element type can not be statically determined, mapping from
+     * If element type cannot be statically determined, mapping from
      * runtime type to serializer is handled using this object
      */
     protected PropertySerializerMap _dynamicSerializers;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java
Patch:
@@ -19,7 +19,7 @@ public class RawSerializer<T>
 {
     /**
      * Constructor takes in expected type of values; but since caller
-     * typically can not really provide actual type parameter, we will
+     * typically cannot really provide actual type parameter, we will
      * just take wild card and coerce type.
      */
     public RawSerializer(Class<?> cls) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java
Patch:
@@ -57,7 +57,7 @@ public abstract class ReferenceTypeSerializer<T>
     protected final NameTransformer _unwrapper;
 
     /**
-     * If element type can not be statically determined, mapping from
+     * If element type cannot be statically determined, mapping from
      * runtime type to serializer is handled using this object
      */
     protected transient PropertySerializerMap _dynamicSerializers;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java
Patch:
@@ -15,7 +15,7 @@
  * Generic handler for types that implement {@link JsonSerializable}.
  *<p>
  * Note: given that this is used for anything that implements
- * interface, can not be checked for direct class equivalence.
+ * interface, cannot be checked for direct class equivalence.
  */
 @JacksonStdImpl
 @SuppressWarnings("serial")

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java
Patch:
@@ -69,7 +69,7 @@ protected TypedPrimitiveArraySerializer(TypedPrimitiveArraySerializer<T> src,
         }
 
         // 01-Dec-2016, tatu: Only now realized that due strong typing of Java arrays,
-        //    we can not really ever have value type serializers
+        //    we cannot really ever have value type serializers
         @Override
         public final ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
             // throw exception or just do nothing?
@@ -256,7 +256,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
      * they are most likely to be textual data, and should be written as
      * Strings, not arrays of entries.
      *<p>
-     * NOTE: since it is NOT serialized as an array, can not use AsArraySerializer as base
+     * NOTE: since it is NOT serialized as an array, cannot use AsArraySerializer as base
      */
     @JacksonStdImpl
     public static class CharArraySerializer extends StdSerializer<char[]>

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java
Patch:
@@ -30,7 +30,7 @@ public static JsonSerializer<Object> getStdKeySerializer(SerializationConfig con
             Class<?> rawKeyType, boolean useDefault)
     {
         // 24-Sep-2015, tatu: Important -- should ONLY consider types for which `@JsonValue`
-        //    can not be used, since caller has not yet checked for that annotation
+        //    cannot be used, since caller has not yet checked for that annotation
         //    This is why Enum types are not handled here quite yet
 
         // [databind#943: Use a dynamic key serializer if we are not given actual

File: src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * We also want to directly support serialization of {@link TokenBuffer};
- * and since it is part of core package, it can not implement
+ * and since it is part of core package, it cannot implement
  * {@link com.fasterxml.jackson.databind.JsonSerializable}
  * (which is only included in the mapper package)
  */

File: src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
Patch:
@@ -112,7 +112,7 @@ public boolean equals(Object o) {
         if (o == this) return true;
         if (o == null) return false;
         if (o.getClass() == getClass()) {
-            // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since
+            // 16-Jun-2017, tatu: as per [databind#1658], cannot do recursive call since
             //    there is likely to be a cycle...
 
             // but... true or false?

File: src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
Patch:
@@ -127,7 +127,7 @@ protected JavaType _narrow(Class<?> subclass)
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
+        //    placeholder values (`Void`, `NoClass`), so cannot quite do yet.
         // TODO: fix in 2.9
         if (!_class.isAssignableFrom(subclass)) {
             /*

File: src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java
Patch:
@@ -11,7 +11,7 @@
  * replace) basic type instance factory constructs.
  * This is typically needed to support creation of
  * {@link MapLikeType} and {@link CollectionLikeType} instances,
- * as those can not be constructed in generic fashion.
+ * as those cannot be constructed in generic fashion.
  */
 public abstract class TypeModifier
 {
@@ -29,7 +29,7 @@ public abstract class TypeModifier
      *   construct instance of primary type itself
      * 
      * @return Actual type instance to use; usually either <code>type</code> (as is or with
-     *    modifications), or a newly constructed type instance based on it. Can not be null.
+     *    modifications), or a newly constructed type instance based on it. Cannot be null.
      */
     public abstract JavaType modifyType(JavaType type, Type jdkType, TypeBindings context,
             TypeFactory typeFactory);

File: src/main/java/com/fasterxml/jackson/databind/util/Converter.java
Patch:
@@ -30,7 +30,7 @@ public interface Converter<IN,OUT>
      * Method that can be used to find out actual input (source) type; this
      * usually can be determined from type parameters, but may need
      * to be implemented differently from programmatically defined
-     * converters (which can not change static type parameter bindings).
+     * converters (which cannot change static type parameter bindings).
      * 
      * @since 2.2
      */
@@ -40,7 +40,7 @@ public interface Converter<IN,OUT>
      * Method that can be used to find out actual output (target) type; this
      * usually can be determined from type parameters, but may need
      * to be implemented differently from programmatically defined
-     * converters (which can not change static type parameter bindings).
+     * converters (which cannot change static type parameter bindings).
      * 
      * @since 2.2
      */

File: src/main/java/com/fasterxml/jackson/databind/util/NameTransformer.java
Patch:
@@ -108,7 +108,7 @@ public static NameTransformer chainedTransformer(NameTransformer t1, NameTransfo
 
     /**
      * Method called when reversal of transformation is needed; should return
-     * null if this is not possible, that is, given name can not have been
+     * null if this is not possible, that is, given name cannot have been
      * result of calling {@link #transform} of this object.
      */
     public abstract String reverse(String transformed);

File: src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
Patch:
@@ -89,7 +89,7 @@ public class StdDateFormat
 
     protected final static DateFormat DATE_FORMAT_ISO8601;
 
-    /* Let's construct "blueprint" date format instances: can not be used
+    /* Let's construct "blueprint" date format instances: cannot be used
      * as is, due to thread-safety issues, but can be used for constructing
      * actual instances more cheaply (avoids re-parsing).
      */
@@ -118,7 +118,7 @@ public class StdDateFormat
     /**
      * Explicit override for leniency, if specified.
      *<p>
-     * Can not be `final` because {@link #setLenient(boolean)} returns
+     * Cannot be `final` because {@link #setLenient(boolean)} returns
      * `void`.
      *
      * @since 2.7

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorPropertiesTest.java
Patch:
@@ -16,7 +16,7 @@ static class Issue905Bean {
 
         @ConstructorProperties({"x", "y"})
         // Same as above; use differing local parameter names so that parameter name
-        // introspection can not be used as the source of property names.
+        // introspection cannot be used as the source of property names.
         public Issue905Bean(int a, int b) {
             _x = a;
             _y = b;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/InnerClassCreatorTest.java
Patch:
@@ -6,7 +6,7 @@
 
 // For [databind#1501], [databind#1502], [databind#1503]; mostly to
 // test that for non-static inner classes constructors are ignored
-// and no Creators should be processed (since they can not be made
+// and no Creators should be processed (since they cannot be made
 // to work in standard way anyway).
 public class InnerClassCreatorTest extends BaseMapTest
 {

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java
Patch:
@@ -326,7 +326,7 @@ public void testEnumsWithJsonValue() throws Exception
 
     public void testAllowUnknownEnumValuesReadAsNull() throws Exception
     {
-        // can not use shared mapper when changing configs...
+        // cannot use shared mapper when changing configs...
         ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);
         assertNull(reader.forType(TestEnum.class).readValue("\"NO-SUCH-VALUE\""));
         assertNull(reader.forType(TestEnum.class).readValue(" 4343 "));
@@ -337,7 +337,7 @@ public void testAllowUnknownEnumValuesReadAsNull() throws Exception
     // [databind#1642]
     public void testAllowUnknownEnumValuesReadAsNullWithCreatorMethod() throws Exception
     {
-        // can not use shared mapper when changing configs...
+        // cannot use shared mapper when changing configs...
         ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);
         assertNull(reader.forType(StrictEnumCreator.class).readValue("\"NO-SUCH-VALUE\""));
         assertNull(reader.forType(StrictEnumCreator.class).readValue(" 4343 "));

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsTest.java
Patch:
@@ -825,7 +825,7 @@ public void testInvalidStringCoercionFail() throws IOException
         _testInvalidStringCoercionFail(boolean[].class);
         _testInvalidStringCoercionFail(byte[].class);
 
-        // char[] is special, can not use generalized test here
+        // char[] is special, cannot use generalized test here
 //        _testInvalidStringCoercionFail(char[].class);
         _testInvalidStringCoercionFail(short[].class);
         _testInvalidStringCoercionFail(int[].class);

File: src/test/java/com/fasterxml/jackson/databind/exc/DeserExceptionTypeTest.java
Patch:
@@ -20,7 +20,7 @@ static class Bean {
         public String propX;
     }
 
-    // Class that has no applicable creators and thus can not be instantiated;
+    // Class that has no applicable creators and thus cannot be instantiated;
     // definition problem
     static class NoCreatorsBean {
         public int x;

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java
Patch:
@@ -92,7 +92,7 @@ static class ExternalIdWrapper2 {
     static class ExternalIdBean2 {
         public int a = 2;
 
-        /* Type id property itself can not be external, as it is conceptually
+        /* Type id property itself cannot be external, as it is conceptually
          * part of the bean for which info is written:
          */
         @JsonTypeId

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest.java
Patch:
@@ -294,10 +294,10 @@ public void testSimpleSerialization() throws Exception
         ObjectMapper mapper = new ObjectMapper();
         mapper.registerSubtypes(ValueBean.class);
         // This may look odd, but one implementation nastiness is the fact
-        // that we can not properly serialize type id before the object,
+        // that we cannot properly serialize type id before the object,
         // because call is made after property name (for object) has already
         // been written out. So we'll write it after...
-        // Deserializer will work either way as it can not rely on ordering
+        // Deserializer will work either way as it cannot rely on ordering
         // anyway.
         assertEquals("{\"bean\":{\"value\":11},\"extType\":\"vbean\"}",
                 mapper.writeValueAsString(new ExternalBean(11)));

File: src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java
Patch:
@@ -158,7 +158,7 @@ public void testBoth() throws IOException
     // Test custom key serializer for enum
     public void testCustomForEnum() throws IOException
     {
-        // can not use shared mapper as we are registering a module
+        // cannot use shared mapper as we are registering a module
         final ObjectMapper mapper = new ObjectMapper();
         SimpleModule mod = new SimpleModule("test");
         mod.addKeySerializer(ABC.class, new ABCKeySerializer());

File: src/test/java/com/fasterxml/jackson/databind/type/RecursiveTypeTest.java
Patch:
@@ -85,7 +85,7 @@ public void testRecursivePair() throws Exception
 
         assertNotNull(json);
 
-        // can not deserialize with current definition, however
+        // cannot deserialize with current definition, however
     }
 
     // for [databind#1301]

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -572,7 +572,7 @@ public JsonFormat.Value findFormat(Annotated memberOrClass) {
      * it is "weak" and does not either proof that a property exists (for example,
      * if visibility is not high enough), or override explicit names.
      * In practice this method is used to introspect optional names for creator
-     * parameters (which may or may not be available and can not be detected
+     * parameters (which may or may not be available and cannot be detected
      * by standard databind); or to provide alternate name mangling for
      * fields, getters and/or setters.
      * 
@@ -605,7 +605,7 @@ public JsonFormat.Value findFormat(Annotated memberOrClass) {
      * Method called in cases where a class has two methods eligible to be used
      * for the same logical property, and default logic is not enough to figure
      * out clear precedence. Introspector may try to choose one to use; or, if
-     * unable, return `null` to indicate it can not resolve the problem.
+     * unable, return `null` to indicate it cannot resolve the problem.
      *
      * @since 2.7
      */

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -143,7 +143,7 @@ public enum DeserializationFeature implements ConfigFeature
     /**
      * Feature that determines what happens when type of a polymorphic
      * value (indicated for example by {@link com.fasterxml.jackson.annotation.JsonTypeInfo})
-     * can not be found (missing) or resolved (invalid class name, unmappable id);
+     * cannot be found (missing) or resolved (invalid class name, unmappable id);
      * if enabled, an exception ir thrown; if false, null value is used instead.
      *<p>
      * Feature is enabled by default so that exception is thrown for missing or invalid

File: src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java
Patch:
@@ -340,7 +340,7 @@ public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingExcep
      * serialization, and if so, should be able to resolve it to actual
      * Object instance to return as deserialized value.
      *<p>
-     * Default implementation returns null, as support can not be implemented
+     * Default implementation returns null, as support cannot be implemented
      * generically. Some standard deserializers (most notably
      * {@link com.fasterxml.jackson.databind.deser.BeanDeserializer})
      * do implement this feature, and may return reader instance, depending on exact

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java
Patch:
@@ -24,7 +24,7 @@
  * with null values -- caller <b>must</b> handle null values, usually
  * by calling {@link SerializerProvider#findNullValueSerializer} to obtain
  * serializer to use.
- * This also means that custom serializers can not be directly used to change
+ * This also means that custom serializers cannot be directly used to change
  * the output to produce when serializing null values.
  *<p>
  * If serializer is an aggregate one -- meaning it delegates handling of some

File: src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java
Patch:
@@ -1322,7 +1322,7 @@ public final static class Prefetch
         private final JsonSerializer<Object> valueSerializer;
 
         /**
-         * When dealing with polymorphic types, we can not pre-fetch
+         * When dealing with polymorphic types, we cannot pre-fetch
          * serializer, but can pre-fetch {@link TypeSerializer}.
          */
         private final TypeSerializer typeSerializer;

File: src/main/java/com/fasterxml/jackson/databind/SequenceWriter.java
Patch:
@@ -196,7 +196,7 @@ public SequenceWriter writeAll(Object[] value) throws IOException
         return this;
     }
 
-    // NOTE: redundant wrt variant that takes Iterable, but can not remove or even
+    // NOTE: redundant wrt variant that takes Iterable, but cannot remove or even
     // deprecate due to backwards-compatibility needs
     public <C extends Collection<?>> SequenceWriter writeAll(C container) throws IOException {
         for (Object value : container) {

File: src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java
Patch:
@@ -275,7 +275,7 @@ public enum SerializationFeature implements ConfigFeature
      * Feature that determines whether Map entries with null values are
      * to be serialized (true) or not (false).
      *<p>
-     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>can not</b> be
+     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>cannot</b> be
      * dynamically changed on per-call basis, because its effect is considered during
      * construction of serializers and property handlers.
      *<p>
@@ -297,7 +297,7 @@ public enum SerializationFeature implements ConfigFeature
      * Note that this does not change behavior of {@link java.util.Map}s, or
      * "Collection-like" types.
      *<p>
-     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>can not</b> be
+     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>cannot</b> be
      * dynamically changed on per-call basis, because its effect is considered during
      * construction of serializers and property handlers.
      *<p>

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -837,7 +837,7 @@ public JsonSerializer<Object> getDefaultNullValueSerializer() {
     /**
      * Method called to find a serializer to use for null values for given
      * declared type. Note that type is completely based on declared type,
-     * since nulls in Java have no type and thus runtime type can not be
+     * since nulls in Java have no type and thus runtime type cannot be
      * determined.
      * 
      * @since 2.0
@@ -867,7 +867,7 @@ public JsonSerializer<Object> findNullValueSerializer(BeanProperty property)
 
     /**
      * Method called to get the serializer to use if provider
-     * can not determine an actual type-specific serializer
+     * cannot determine an actual type-specific serializer
      * to use; typically when none of {@link SerializerFactory}
      * instances are able to construct a serializer.
      *<p>
@@ -1289,7 +1289,7 @@ protected void _reportIncompatibleRootType(Object value, JavaType rootType) thro
     /**
      * Method that will try to find a serializer, either from cache
      * or by constructing one; but will not return an "unknown" serializer
-     * if this can not be done but rather returns null.
+     * if this cannot be done but rather returns null.
      *
      * @return Serializer if one can be found, null if not.
      */

File: src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java
Patch:
@@ -130,7 +130,7 @@ public Class<? extends JsonSerializer> nullsUsing()
     /**
      * Which helper object is to be used to convert type into something
      * that Jackson knows how to serialize; either because base type
-     * can not be serialized easily, or just to alter serialization.
+     * cannot be serialized easily, or just to alter serialization.
      *
      * @since 2.2
      */

File: src/main/java/com/fasterxml/jackson/databind/annotation/NoClass.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * Marker class used with annotations to indicate "no class". This is
- * a silly but necessary work-around -- annotations can not take nulls
+ * a silly but necessary work-around -- annotations cannot take nulls
  * as either default or explicit values. Hence for class values we must
  * explicitly use a bogus placeholder to denote equivalent of
  * "no class" (for which 'null' is usually the natural choice).

File: src/main/java/com/fasterxml/jackson/databind/annotation/package-info.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * Annotations that directly depend on classes in databinding bundle
- * (not just Jackson core) and can not be included
- * in Jackson core annotations package (because it can not have any
+ * (not just Jackson core) and cannot be included
+ * in Jackson core annotations package (because it cannot have any
  * external dependencies).
  */
 package com.fasterxml.jackson.databind.annotation;

File: src/main/java/com/fasterxml/jackson/databind/cfg/ConfigFeature.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Interface that actual SerializationFeature enumerations used by
  * {@link MapperConfig} implementations must implement.
- * Necessary since enums can not be extended using normal
+ * Necessary since enums cannot be extended using normal
  * inheritance, but can implement interfaces
  */
 public interface ConfigFeature

File: src/main/java/com/fasterxml/jackson/databind/cfg/ContextAttributes.java
Patch:
@@ -69,7 +69,7 @@ public static class Impl extends ContextAttributes
         protected final static Object NULL_SURROGATE = new Object();
         
         /**
-         * Shared attributes that we can not modify in-place.
+         * Shared attributes that we cannot modify in-place.
          */
         protected final Map<?,?> _shared;
 

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java
Patch:
@@ -50,7 +50,7 @@ public abstract class MapperConfigBase<CFG extends ConfigFeature,
 
     /**
      * Mix-in annotation mappings to use, if any: immutable,
-     * can not be changed once defined.
+     * cannot be changed once defined.
      * 
      * @since 2.6
      */

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -802,7 +802,7 @@ protected boolean _handleSingleArgumentFactory(DeserializationConfig config,
         return false;
     }
 
-    // 01-Dec-2016, tatu: As per [databind#265] we can not yet support passing
+    // 01-Dec-2016, tatu: As per [databind#265] we cannot yet support passing
     //   of unwrapped values through creator properties, so fail fast
     protected void _reportUnwrappedCreatorProperty(DeserializationContext ctxt,
             BeanDescription beanDesc, AnnotatedParameter param)

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -558,7 +558,7 @@ protected void addBeanProps(DeserializationContext ctxt,
                     } else if (!propDef.hasConstructorParameter()) {
                         PropertyMetadata md = propDef.getMetadata();
                         // 25-Oct-2016, tatu: If merging enabled, might not need setter.
-                        //   We can not quite support this with creator parameters; in theory
+                        //   We cannot quite support this with creator parameters; in theory
                         //   possibly, but right not not due to complexities of routing, so
                         //   just prevent
                         if (md.getMergeInfo() != null) {
@@ -879,7 +879,7 @@ protected SettableBeanProperty constructSetterlessProperty(DeserializationContex
 
     /**
      * Helper method used to skip processing for types that we know
-     * can not be (i.e. are never consider to be) beans: 
+     * cannot be (i.e. are never consider to be) beans: 
      * things like primitives, Arrays, Enums, and proxy types.
      *<p>
      * Note that usually we shouldn't really be getting these sort of

File: src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
Patch:
@@ -54,7 +54,7 @@ public BuilderBasedDeserializer(BeanDeserializerBuilder builder,
                 ignorableProps, ignoreAllUnknown, hasViews);
         _targetType = targetType;
         _buildMethod = builder.getBuildMethod();
-        // 05-Mar-2012, tatu: Can not really make Object Ids work with builders, not yet anyway
+        // 05-Mar-2012, tatu: Cannot really make Object Ids work with builders, not yet anyway
         if (_objectIdReader != null) {
             throw new IllegalArgumentException("Can not use Object Id with Builder-based deserialization (type "
                     +beanDesc.getType()+")");
@@ -228,7 +228,7 @@ public final Object deserialize(JsonParser p, DeserializationContext ctxt)
     public Object deserialize(JsonParser p, DeserializationContext ctxt,
     		Object value) throws IOException
     {
-        // 26-Oct-2016, tatu: I can not see any of making this actually
+        // 26-Oct-2016, tatu: I cannot see any of making this actually
         //    work correctly, so let's indicate problem right away
         JavaType valueType = _targetType;
         // Did they try to give us builder?

File: src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java
Patch:
@@ -29,7 +29,7 @@ public interface ContextualDeserializer
      *    deserializers that may be needed by this deserializer
      * @param property Method, field or constructor parameter that represents the property
      *   (and is used to assign deserialized value).
-     *   Should be available; but there may be cases where caller can not provide it and
+     *   Should be available; but there may be cases where caller cannot provide it and
      *   null is passed instead (in which case impls usually pass 'this' deserializer as is)
      * 
      * @return Deserializer to use for deserializing values of specified property;

File: src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java
Patch:
@@ -49,7 +49,7 @@ public class CreatorProperty
     protected final int _creatorIndex;
 
     /**
-     * In special cases, when implementing "updateValue", we can not use
+     * In special cases, when implementing "updateValue", we cannot use
      * constructors or factory methods, but have to fall back on using a
      * setter (or mutable field property). If so, this refers to that fallback
      * accessor.

File: src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java
Patch:
@@ -38,7 +38,7 @@ public abstract class DefaultDeserializationContext
     /**
      * Constructor that will pass specified deserializer factory and
      * cache: cache may be null (in which case default implementation
-     * will be used), factory can not be null
+     * will be used), factory cannot be null
      */
     protected DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache) {
         super(df, cache);

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java
Patch:
@@ -163,7 +163,7 @@ public void set(Object instance, Object propName, Object value) throws IOExcepti
                 AnnotatedField field = (AnnotatedField) _setter;
                 Map<Object,Object> val = (Map<Object,Object>) field.getValue(instance);
                 /* 01-Jun-2016, tatu: At this point it is not quite clear what to do if
-                 *    field is `null` -- we can not necessarily count on zero-args
+                 *    field is `null` -- we cannot necessarily count on zero-args
                  *    constructor except for a small set of types, so for now just
                  *    ignore if null. May need to figure out something better in future.
                  */
@@ -172,7 +172,7 @@ public void set(Object instance, Object propName, Object value) throws IOExcepti
                     val.put(propName, value);
                 }
             } else {
-                // note: can not use 'setValue()' due to taking 2 args
+                // note: cannot use 'setValue()' due to taking 2 args
                 ((AnnotatedMethod) _setter).callOnWith(instance, propName, value);
             }
         } catch (Exception e) {

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -85,7 +85,7 @@ public abstract class SettableBeanProperty
     /*
     /**********************************************************
     /* Configuration that is not yet immutable; generally assigned
-    /* during initialization process but can not be passed to
+    /* during initialization process but cannot be passed to
     /* constructor.
     /**********************************************************
      */
@@ -594,7 +594,7 @@ protected IOException _throwAsIOE(Exception e) throws IOException {
     }
 
     // 10-Oct-2015, tatu: _Should_ be deprecated, too, but its remaining
-    //   callers can not actually provide a JsonParser
+    //   callers cannot actually provide a JsonParser
     protected void _throwAsIOE(Exception e, Object value) throws IOException {
         _throwAsIOE((JsonParser) null, e, value);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java
Patch:
@@ -18,7 +18,7 @@
  * is a scalar value (String, number, boolean).
  *<p>
  * Note that this type is not parameterized (even though it would seemingly
- * make sense), because such type information can not be use effectively
+ * make sense), because such type information cannot be use effectively
  * during runtime: access is always using either wildcard type, or just
  * basic {@link java.lang.Object}; and so adding type parameter seems
  * like unnecessary extra work.

File: src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java
Patch:
@@ -26,7 +26,7 @@ public interface ValueInstantiators
      *   a custom instantiator already)
      *   
      * @return Instantiator to use; either <code>defaultInstantiator</code> that was passed,
-     *   or a custom variant; can not be null.
+     *   or a custom variant; cannot be null.
      */
     public ValueInstantiator findValueInstantiator(DeserializationConfig config,
             BeanDescription beanDesc, ValueInstantiator defaultInstantiator);

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java
Patch:
@@ -15,7 +15,7 @@ public class BeanAsArrayBuilderDeserializer
     private static final long serialVersionUID = 1L;
 
     /**
-     * Deserializer we delegate operations that we can not handle.
+     * Deserializer we delegate operations that we cannot handle.
      */
     final protected BeanDeserializerBase _delegate;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java
Patch:
@@ -21,7 +21,7 @@ public class BeanAsArrayDeserializer
     private static final long serialVersionUID = 1L;
 
     /**
-     * Deserializer we delegate operations that we can not handle.
+     * Deserializer we delegate operations that we cannot handle.
      */
     protected final BeanDeserializerBase _delegate;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java
Patch:
@@ -79,7 +79,7 @@ protected ArrayBlockingQueueDeserializer withResolved(JsonDeserializer<?> dd,
     protected Collection<Object> createDefaultInstance(DeserializationContext ctxt)
         throws IOException
     {
-        // 07-Nov-2016, tatu: Important: can not create using default ctor (one
+        // 07-Nov-2016, tatu: Important: cannot create using default ctor (one
         //    does not exist); and also need to know exact size. Hence, return
         //    null from here
         return null;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -540,7 +540,7 @@ protected final JsonNode deserializeAny(JsonParser p, DeserializationContext ctx
             */
 
             
-            // These states can not be mapped; input stream is
+            // These states cannot be mapped; input stream is
             // off by an event or two
 
         //case END_OBJECT:

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java
Patch:
@@ -39,7 +39,7 @@ public T deserialize(JsonParser p, DeserializationContext ctxt, T intoValue) thr
     }
 
     /**
-     * By default assumption is that scalar types can not be updated: many are immutable
+     * By default assumption is that scalar types cannot be updated: many are immutable
      * values (such as primitives and wrappers)
      */
     @Override // since 2.9

File: src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java
Patch:
@@ -127,7 +127,7 @@ protected UntypedObjectDeserializer(UntypedObjectDeserializer base,
 
     /**
      * We need to implement this method to properly find things to delegate
-     * to: it can not be done earlier since delegated deserializers almost
+     * to: it cannot be done earlier since delegated deserializers almost
      * certainly require access to this instance (at least "List" and "Map" ones)
      */
     @SuppressWarnings("unchecked")

File: src/main/java/com/fasterxml/jackson/databind/exc/IgnoredPropertyException.java
Patch:
@@ -47,7 +47,7 @@ public IgnoredPropertyException(String msg, JsonLocation loc,
      *    if available), or if not, type itself
      * @param propertyName Name of unrecognized property
      * @param propertyIds (optional, null if not available) Set of properties that
-     *    type would recognize, if completely known: null if set can not be determined.
+     *    type would recognize, if completely known: null if set cannot be determined.
      */
     public static IgnoredPropertyException from(JsonParser p,
             Object fromObjectOrClass, String propertyName,

File: src/main/java/com/fasterxml/jackson/databind/exc/UnrecognizedPropertyException.java
Patch:
@@ -43,7 +43,7 @@ public UnrecognizedPropertyException(String msg, JsonLocation loc,
      *    if available), or if not, type itself
      * @param propertyName Name of unrecognized property
      * @param propertyIds (optional, null if not available) Set of properties that
-     *    type would recognize, if completely known: null if set can not be determined.
+     *    type would recognize, if completely known: null if set cannot be determined.
      */
     public static UnrecognizedPropertyException from(JsonParser p,
             Object fromObjectOrClass, String propertyName,

File: src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java
Patch:
@@ -59,7 +59,7 @@ public final JavaType getType(TypeBindings bogus) {
     /**
      * JDK declared generic type of the annotated element; definition
      * of what exactly this means depends on sub-class. Note that such type
-     * can not be reliably resolved without {@link TypeResolutionContext}, and
+     * cannot be reliably resolved without {@link TypeResolutionContext}, and
      * as a result use of this method was deprecated in Jackson 2.7: see
      * {@link #getType} for replacement.
      *

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java
Patch:
@@ -18,7 +18,7 @@ public final class AnnotatedField
     /**
      * Actual {@link Field} used for access.
      *<p>
-     * Transient since it can not be persisted directly using
+     * Transient since it cannot be persisted directly using
      * JDK serialization
      */
     protected final transient Field _field;

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Object that represents method parameters, mostly so that associated
  * annotations can be processed conveniently. Note that many of accessors
- * can not return meaningful values since parameters do not have stand-alone
+ * cannot return meaningful values since parameters do not have stand-alone
  * JDK objects associated; so access should mostly be limited to checking
  * annotation values which are properly aggregated and included.
  */

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -179,7 +179,7 @@ public boolean isAnnotationBundle(Annotation ann) {
     public String findEnumValue(Enum<?> value)
     {
         // 11-Jun-2015, tatu: As per [databind#677], need to allow explicit naming.
-        //   Unfortunately can not quite use standard AnnotatedClass here (due to various
+        //   Unfortunately cannot quite use standard AnnotatedClass here (due to various
         //   reasons, including odd representation JVM uses); has to do for now
         try {
             // We know that values are actually static fields with matching name so:
@@ -1438,7 +1438,7 @@ protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config,
         // 08-Dec-2014, tatu: To deprecate `JsonTypeInfo.None` we need to use other placeholder(s);
         //   and since `java.util.Void` has other purpose (to indicate "deser as null"), we'll instead
         //   use `JsonTypeInfo.class` itself. But any annotation type will actually do, as they have no
-        //   valid use (can not instantiate as default)
+        //   valid use (cannot instantiate as default)
         if (defaultImpl != JsonTypeInfo.None.class && !defaultImpl.isAnnotation()) {
             b = b.defaultImpl(defaultImpl);
         }

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -488,7 +488,7 @@ protected void _addCreatorParam(Map<String, POJOPropertyBuilder> props,
         boolean expl = (pn != null && !pn.isEmpty());
         if (!expl) {
             if (impl.isEmpty()) {
-                // Important: if neither implicit nor explicit name, can not make use of
+                // Important: if neither implicit nor explicit name, cannot make use of
                 // this creator parameter -- may or may not be a problem, verified at a later point.
                 return;
             }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema.java
Patch:
@@ -25,7 +25,7 @@
 {
     /**
      * Marker value used to indicate that property has "no value";
-     * needed because annotations can not have null as default
+     * needed because annotations cannot have null as default
      * value.
      */
     public final static String NO_VALUE = "##irrelevant";

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java
Patch:
@@ -66,7 +66,7 @@ public abstract class TypeDeserializer
     /**
      * Accessor for "default implementation" type; optionally defined
      * class to use in cases where type id is not
-     * accessible for some reason (either missing, or can not be
+     * accessible for some reason (either missing, or cannot be
      * resolved)
      */
     public abstract Class<?> getDefaultImpl();

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java
Patch:
@@ -135,7 +135,7 @@ public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,
 
     /**
      * Method for specifying default implementation to use if type id 
-     * is either not available, or can not be resolved.
+     * is either not available, or cannot be resolved.
      * 
      * @return Resulting builder instance (usually this builder,
      *   but may be a newly constructed instance for immutable builders}

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java
Patch:
@@ -98,7 +98,7 @@ public void writeTypeSuffix(JsonGenerator g,
      * Method called to write initial part of type information for given
      * value, when it will be output as scalar JSON value (not as JSON
      * Object or Array).
-     * This means that the context after call can not be that of JSON Object;
+     * This means that the context after call cannot be that of JSON Object;
      * it may be Array or root context.
      * 
      * @param value Value that will be serialized, for which type information is
@@ -195,7 +195,7 @@ public void writeTypePrefixForArray(Object value, JsonGenerator g, Class<?> type
      * value, when it will be output as scalar JSON value (not as JSON
      * Object or Array),
      * using specified custom type id instead of calling {@link TypeIdResolver}.
-     * This means that the context after call can not be that of JSON Object;
+     * This means that the context after call cannot be that of JSON Object;
      * it may be Array or root context.
      * 
      * @param value Value that will be serialized, for which type information is

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java
Patch:
@@ -35,7 +35,7 @@ public AsArrayTypeSerializer forProperty(BeanProperty prop) {
     @Override
     public void writeTypePrefixForObject(Object value, JsonGenerator g) throws IOException {
         final String typeId = idFromValue(value);
-        // NOTE: can not always avoid writing type id, even if null
+        // NOTE: cannot always avoid writing type id, even if null
         if (g.canWriteTypeId()) {
             _writeTypeId(g, typeId);
         } else {
@@ -48,7 +48,7 @@ public void writeTypePrefixForObject(Object value, JsonGenerator g) throws IOExc
     @Override
     public void writeTypePrefixForObject(Object value, JsonGenerator g, Class<?> type) throws IOException {
         final String typeId = idFromValueAndType(value, type);
-        // NOTE: can not always avoid writing type id, even if null
+        // NOTE: cannot always avoid writing type id, even if null
         if (g.canWriteTypeId()) {
             _writeTypeId(g, typeId);
         } else {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java
Patch:
@@ -11,7 +11,7 @@
  * Type serializer that preferably embeds type information as an "external"
  * type property; embedded in enclosing JSON object.
  * Note that this serializer should only be used when value is being output
- * at JSON Object context; otherwise it can not work reliably, and will have
+ * at JSON Object context; otherwise it cannot work reliably, and will have
  * to revert operation similar to {@link AsPropertyTypeSerializer}.
  *<p>
  * Note that implementation of serialization is bit cumbersome as we must

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java
Patch:
@@ -43,7 +43,7 @@ public void writeTypePrefixForObject(Object value, JsonGenerator g) throws IOExc
             g.writeStartObject();
             // and then JSON Object start caller wants
 
-            // 28-Jan-2015, tatu: No really good answer here; can not really change
+            // 28-Jan-2015, tatu: No really good answer here; cannot really change
             //   structure, so change null to empty String...
             g.writeObjectFieldStart(_validTypeId(typeId));
         }
@@ -61,7 +61,7 @@ public void writeTypePrefixForObject(Object value, JsonGenerator g, Class<?> typ
             g.writeStartObject();
             // and then JSON Object start caller wants
 
-            // 28-Jan-2015, tatu: No really good answer here; can not really change
+            // 28-Jan-2015, tatu: No really good answer here; cannot really change
             //   structure, so change null to empty String...
             g.writeObjectFieldStart(_validTypeId(typeId));
         }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
Patch:
@@ -71,7 +71,7 @@ protected final String _idFrom(Object value, Class<?> cls, TypeFactory typeFacto
         }
         String str = cls.getName();
         if (str.startsWith("java.util")) {
-            // 25-Jan-2009, tatu: There are some internal classes that we can not access as is.
+            // 25-Jan-2009, tatu: There are some internal classes that we cannot access as is.
             //     We need better mechanism; for now this has to do...
 
             // Enum sets and maps are problematic since we MUST know type of

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
Patch:
@@ -127,7 +127,7 @@ public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,
         } else {
             // 20-Mar-2016, tatu: It is important to do specialization go through
             //   TypeFactory to ensure proper resolution; with 2.7 and before, direct
-            //   call to JavaType was used, but that can not work reliably with 2.7
+            //   call to JavaType was used, but that cannot work reliably with 2.7
             // 20-Mar-2016, tatu: Can finally add a check for type compatibility BUT
             //   if so, need to add explicit checks for marker types. Not ideal, but
             //   seems like a reasonable compromise.

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -40,7 +40,7 @@ public abstract class TypeDeserializerBase
 
     /**
      * Type to use as the default implementation, if type id is
-     * missing or can not be resolved.
+     * missing or cannot be resolved.
      */
     protected final JavaType _defaultImpl;
 
@@ -172,7 +172,7 @@ protected final JsonDeserializer<Object> _findDeserializer(DeserializationContex
                  *   we actually now need to explicitly narrow from base type (which may have parameterization)
                  *   using raw type.
                  *
-                 *   One complication, though; can not change 'type class' (simple type to container); otherwise
+                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise
                  *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
                  *   type in process (getting SimpleType of Map.class which will not work as expected)
                  */
@@ -263,7 +263,7 @@ protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationCont
     }
 
     /**
-     * Helper method called when given type id can not be resolved into 
+     * Helper method called when given type id cannot be resolved into 
      * concrete deserializer either directly (using given {@link  TypeIdResolver}),
      * or using default type.
      * Default implementation simply throws a {@link com.fasterxml.jackson.databind.JsonMappingException} to

File: src/main/java/com/fasterxml/jackson/databind/jsontype/package-info.java
Patch:
@@ -2,7 +2,7 @@
  * Package that contains interfaces that define how to implement
  * functionality for dynamically resolving type during deserialization.
  * This is needed for complete handling of polymorphic types, where
- * actual type can not be determined statically (declared type is
+ * actual type cannot be determined statically (declared type is
  * a supertype of actual polymorphic serialized types).
  */
 package com.fasterxml.jackson.databind.jsontype;

File: src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java
Patch:
@@ -61,7 +61,7 @@ public final void serialize(JsonGenerator jg, SerializerProvider provider)
         /* Nothing to output... should we signal an error tho?
          * Chances are, this is an erroneous call. For now, let's
          * not do that; serialize as explicit null. Why? Because we
-         * can not just omit a value as JSON Object field name may have
+         * cannot just omit a value as JSON Object field name may have
          * been written out.
          */
         jg.writeNull();

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -549,7 +549,7 @@ protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov,
         TypeSerializer elementTypeSerializer = createTypeSerializer(config,
                 elementType);
 
-        // if elements have type serializer, can not force static typing:
+        // if elements have type serializer, cannot force static typing:
         if (elementTypeSerializer != null) {
             staticTyping = false;
         }
@@ -975,7 +975,7 @@ protected JsonSerializer<?> buildArraySerializer(SerializerProvider prov,
         throws JsonMappingException
     {
         // 25-Jun-2015, tatu: Note that unlike with Collection(Like) and Map(Like) types, array
-        //   types can not be annotated (in theory I guess we could have mix-ins but... ?)
+        //   types cannot be annotated (in theory I guess we could have mix-ins but... ?)
         //   so we need not do primary annotation lookup here.
         //   So all we need is (1) Custom, (2) Default array serializers
         SerializationConfig config = prov.getConfig();
@@ -1129,7 +1129,7 @@ protected Object findFilterId(SerializationConfig config, BeanDescription beanDe
     protected boolean usesStaticTyping(SerializationConfig config,
             BeanDescription beanDesc, TypeSerializer typeSer)
     {
-        /* 16-Aug-2010, tatu: If there is a (value) type serializer, we can not force
+        /* 16-Aug-2010, tatu: If there is a (value) type serializer, we cannot force
          *    static typing; that would make it impossible to handle expected subtypes
          */
         if (typeSer != null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -135,7 +135,7 @@ public class BeanPropertyWriter extends PropertyWriter // which extends
      */
 
     /**
-     * Serializer to use for writing out the value: null if it can not be known
+     * Serializer to use for writing out the value: null if it cannot be known
      * statically; non-null if it can.
      */
     protected JsonSerializer<Object> _serializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -112,7 +112,7 @@ protected BeanSerializerBase withIgnorals(Set<String> toIgnore) {
     @Override
     protected BeanSerializerBase asArraySerializer()
     {
-        /* Can not:
+        /* Cannot:
          * 
          * - have Object Id (may be allowed in future)
          * - have "any getter"

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -616,7 +616,7 @@ protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription b
     
     /**
      * Helper method used to skip processing for types that we know
-     * can not be (i.e. are never consider to be) beans: 
+     * cannot be (i.e. are never consider to be) beans: 
      * things like primitives, Arrays, Enums, and proxy types.
      *<p>
      * Note that usually we shouldn't really be getting these sort of

File: src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java
Patch:
@@ -27,7 +27,7 @@ public interface ContextualSerializer
      * @param prov Serializer provider to use for accessing config, other serializers
      * @param property Method or field that represents the property
      *   (and is used to access value to serialize).
-     *   Should be available; but there may be cases where caller can not provide it and
+     *   Should be available; but there may be cases where caller cannot provide it and
      *   null is passed instead (in which case impls usually pass 'this' serializer as is)
      * 
      * @return Serializer to use for serializing values of specified property;

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -162,7 +162,7 @@ protected BeanPropertyWriter buildWriter(SerializerProvider prov,
             // First: case of class/type specifying it; try to find POJO property defaults
             Object defaultBean;
 
-            // 16-Oct-2016, tatu: Note: if we can not for some reason create "default instance",
+            // 16-Oct-2016, tatu: Note: if we cannot for some reason create "default instance",
             //    revert logic to the case of general/per-property handling, so both
             //    type-default AND null are to be excluded.
             //    (as per [databind#1417]

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java
Patch:
@@ -48,7 +48,7 @@ public class BeanAsArraySerializer
 
     /**
      * Serializer that would produce JSON Object version; used in
-     * cases where array output can not be used.
+     * cases where array output cannot be used.
      */
     protected final BeanSerializerBase _defaultSerializer;
     
@@ -209,7 +209,7 @@ protected final void serializeAsArray(Object bean, JsonGenerator gen, Serializer
                     prop.serializeAsElement(bean, gen, provider);
                 }
             }
-            // NOTE: any getters can not be supported either
+            // NOTE: any getters cannot be supported either
             //if (_anyGetterWriter != null) {
             //    _anyGetterWriter.getAndSerialize(bean, gen, provider);
             //}

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * This is an optimized serializer for Lists that can be efficiently
  * traversed by index (as opposed to others, such as {@link LinkedList}
- * that can not}.
+ * that cannot}.
  */
 @JacksonStdImpl
 public final class IndexedListSerializer

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -66,7 +66,7 @@ public class MapEntrySerializer
     protected final TypeSerializer _valueTypeSerializer;
 
     /**
-     * If value type can not be statically determined, mapping from
+     * If value type cannot be statically determined, mapping from
      * runtime value types to serializers are stored in this object.
      */
     protected PropertySerializerMap _dynamicValueSerializers;
@@ -314,7 +314,7 @@ public boolean isEmpty(SerializerProvider prov, Entry<?, ?> entry)
             if (valueSer == null) {
                 try {
                     valueSer = _findAndAddDynamic(_dynamicValueSerializers, cc, prov);
-                } catch (JsonMappingException e) { // Ugh... can not just throw as-is, so...
+                } catch (JsonMappingException e) { // Ugh... cannot just throw as-is, so...
                     return false;
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.java
Patch:
@@ -42,7 +42,7 @@ protected PropertySerializerMap(PropertySerializerMap base) {
 
     /**
      * Main lookup method. Takes a "raw" type since usage is always from
-     * place where parameterization is fixed such that there can not be
+     * place where parameterization is fixed such that there cannot be
      * type-parametric variations.
      */
     public abstract JsonSerializer<Object> serializerFor(Class<?> type);

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java
Patch:
@@ -87,7 +87,7 @@ protected BeanSerializerBase withIgnorals(Set<String> toIgnore) {
     }
 
     /**
-     * JSON Array output can not be done if unwrapping operation is
+     * JSON Array output cannot be done if unwrapping operation is
      * requested; so implementation will simply return 'this'.
      */
     @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AsArraySerializerBase<T>
     protected final JsonSerializer<Object> _elementSerializer;
 
     /**
-     * If element type can not be statically determined, mapping from
+     * If element type cannot be statically determined, mapping from
      * runtime type to serializer is handled using this object
      */
     protected PropertySerializerMap _dynamicSerializers;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ByteArraySerializer.java
Patch:
@@ -20,7 +20,7 @@
  * as numbers. Instead, we assume that it would make more sense to output content
  * as base64 encoded bytes (using default base64 encoding).
  *<p>
- * NOTE: since it is NOT serialized as an array, can not use AsArraySerializer as base
+ * NOTE: since it is NOT serialized as an array, cannot use AsArraySerializer as base
  *<p>
  * NOTE: since 2.6, has been a main-level class; earlier was embedded in
  * {@link StdArraySerializers}.

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java
Patch:
@@ -70,7 +70,7 @@ public EnumSerializer(EnumValues v, Boolean serializeAsIndex)
     public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config,
             BeanDescription beanDesc, JsonFormat.Value format)
     {
-        /* 08-Apr-2015, tatu: As per [databind#749], we can not statically determine
+        /* 08-Apr-2015, tatu: As per [databind#749], we cannot statically determine
          *   between name() and toString(), need to construct `EnumValues` with names,
          *   handle toString() case dynamically (for example)
          */

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java
Patch:
@@ -77,7 +77,7 @@ public void serializeContents(EnumSet<? extends Enum<?>> value, JsonGenerator ge
          */
         for (Enum<?> en : value) {
             if (enumSer == null) {
-                /* 12-Jan-2010, tatu: Since enums can not be polymorphic, let's
+                /* 12-Jan-2010, tatu: Since enums cannot be polymorphic, let's
                  *   not bother with typed serializer variant here
                  */
                 enumSer = provider.findValueSerializer(en.getDeclaringClass(), _property);

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -92,7 +92,7 @@ public class MapSerializer
     protected final TypeSerializer _valueTypeSerializer;
 
     /**
-     * If value type can not be statically determined, mapping from
+     * If value type cannot be statically determined, mapping from
      * runtime value types to serializers are stored in this object.
      */
     protected PropertySerializerMap _dynamicValueSerializers;
@@ -310,7 +310,7 @@ public static MapSerializer construct(Set<String> ignoredEntries, JavaType mapTy
         if (!staticValueType) {
             staticValueType = (valueType != null && valueType.isFinal());
         } else {
-            // also: Object.class can not be handled as static, ever
+            // also: Object.class cannot be handled as static, ever
             if (valueType.getRawClass() == Object.class) {
                 staticValueType = false;
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java
Patch:
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator gen, SerializerProvider provid
      * Although this method should rarely get called, for convenience we should override
      * it, and handle it same way as "natural" types: by serializing exactly as is,
      * without type decorations. The most common possible use case is that of delegation
-     * by JSON filter; caller can not know what kind of serializer it gets handed.
+     * by JSON filter; caller cannot know what kind of serializer it gets handed.
      */
     @Override
     public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider serializers,

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -48,7 +48,7 @@ public class ObjectArraySerializer
     protected JsonSerializer<Object> _elementSerializer;
 
     /**
-     * If element type can not be statically determined, mapping from
+     * If element type cannot be statically determined, mapping from
      * runtime type to serializer is handled using this object
      */
     protected PropertySerializerMap _dynamicSerializers;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java
Patch:
@@ -18,7 +18,7 @@ public class RawSerializer<T>
 {
     /**
      * Constructor takes in expected type of values; but since caller
-     * typically can not really provide actual type parameter, we will
+     * typically cannot really provide actual type parameter, we will
      * just take wild card and coerce type.
      */
     public RawSerializer(Class<?> cls) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java
Patch:
@@ -57,7 +57,7 @@ public abstract class ReferenceTypeSerializer<T>
     protected final NameTransformer _unwrapper;
 
     /**
-     * If element type can not be statically determined, mapping from
+     * If element type cannot be statically determined, mapping from
      * runtime type to serializer is handled using this object
      */
     protected transient PropertySerializerMap _dynamicSerializers;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java
Patch:
@@ -15,7 +15,7 @@
  * Generic handler for types that implement {@link JsonSerializable}.
  *<p>
  * Note: given that this is used for anything that implements
- * interface, can not be checked for direct class equivalence.
+ * interface, cannot be checked for direct class equivalence.
  */
 @JacksonStdImpl
 @SuppressWarnings("serial")

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java
Patch:
@@ -68,7 +68,7 @@ protected TypedPrimitiveArraySerializer(TypedPrimitiveArraySerializer<T> src,
         }
 
         // 01-Dec-2016, tatu: Only now realized that due strong typing of Java arrays,
-        //    we can not really ever have value type serializers
+        //    we cannot really ever have value type serializers
         @Override
         public final ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
             // throw exception or just do nothing?
@@ -255,7 +255,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
      * they are most likely to be textual data, and should be written as
      * Strings, not arrays of entries.
      *<p>
-     * NOTE: since it is NOT serialized as an array, can not use AsArraySerializer as base
+     * NOTE: since it is NOT serialized as an array, cannot use AsArraySerializer as base
      */
     @JacksonStdImpl
     public static class CharArraySerializer extends StdSerializer<char[]>

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java
Patch:
@@ -30,7 +30,7 @@ public static JsonSerializer<Object> getStdKeySerializer(SerializationConfig con
             Class<?> rawKeyType, boolean useDefault)
     {
         // 24-Sep-2015, tatu: Important -- should ONLY consider types for which `@JsonValue`
-        //    can not be used, since caller has not yet checked for that annotation
+        //    cannot be used, since caller has not yet checked for that annotation
         //    This is why Enum types are not handled here quite yet
 
         // [databind#943: Use a dynamic key serializer if we are not given actual

File: src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * We also want to directly support serialization of {@link TokenBuffer};
- * and since it is part of core package, it can not implement
+ * and since it is part of core package, it cannot implement
  * {@link com.fasterxml.jackson.databind.JsonSerializable}
  * (which is only included in the mapper package)
  */

File: src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
Patch:
@@ -112,7 +112,7 @@ public boolean equals(Object o) {
         if (o == this) return true;
         if (o == null) return false;
         if (o.getClass() == getClass()) {
-            // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since
+            // 16-Jun-2017, tatu: as per [databind#1658], cannot do recursive call since
             //    there is likely to be a cycle...
 
             // but... true or false?

File: src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
Patch:
@@ -127,7 +127,7 @@ protected JavaType _narrow(Class<?> subclass)
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
+        //    placeholder values (`Void`, `NoClass`), so cannot quite do yet.
         // TODO: fix in 2.9
         if (!_class.isAssignableFrom(subclass)) {
             /*

File: src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java
Patch:
@@ -11,7 +11,7 @@
  * replace) basic type instance factory constructs.
  * This is typically needed to support creation of
  * {@link MapLikeType} and {@link CollectionLikeType} instances,
- * as those can not be constructed in generic fashion.
+ * as those cannot be constructed in generic fashion.
  */
 public abstract class TypeModifier
 {
@@ -29,7 +29,7 @@ public abstract class TypeModifier
      *   construct instance of primary type itself
      * 
      * @return Actual type instance to use; usually either <code>type</code> (as is or with
-     *    modifications), or a newly constructed type instance based on it. Can not be null.
+     *    modifications), or a newly constructed type instance based on it. Cannot be null.
      */
     public abstract JavaType modifyType(JavaType type, Type jdkType, TypeBindings context,
             TypeFactory typeFactory);

File: src/main/java/com/fasterxml/jackson/databind/util/Converter.java
Patch:
@@ -30,7 +30,7 @@ public interface Converter<IN,OUT>
      * Method that can be used to find out actual input (source) type; this
      * usually can be determined from type parameters, but may need
      * to be implemented differently from programmatically defined
-     * converters (which can not change static type parameter bindings).
+     * converters (which cannot change static type parameter bindings).
      * 
      * @since 2.2
      */
@@ -40,7 +40,7 @@ public interface Converter<IN,OUT>
      * Method that can be used to find out actual output (target) type; this
      * usually can be determined from type parameters, but may need
      * to be implemented differently from programmatically defined
-     * converters (which can not change static type parameter bindings).
+     * converters (which cannot change static type parameter bindings).
      * 
      * @since 2.2
      */

File: src/main/java/com/fasterxml/jackson/databind/util/NameTransformer.java
Patch:
@@ -108,7 +108,7 @@ public static NameTransformer chainedTransformer(NameTransformer t1, NameTransfo
 
     /**
      * Method called when reversal of transformation is needed; should return
-     * null if this is not possible, that is, given name can not have been
+     * null if this is not possible, that is, given name cannot have been
      * result of calling {@link #transform} of this object.
      */
     public abstract String reverse(String transformed);

File: src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
Patch:
@@ -89,7 +89,7 @@ public class StdDateFormat
 
     protected final static DateFormat DATE_FORMAT_ISO8601;
 
-    /* Let's construct "blueprint" date format instances: can not be used
+    /* Let's construct "blueprint" date format instances: cannot be used
      * as is, due to thread-safety issues, but can be used for constructing
      * actual instances more cheaply (avoids re-parsing).
      */
@@ -118,7 +118,7 @@ public class StdDateFormat
     /**
      * Explicit override for leniency, if specified.
      *<p>
-     * Can not be `final` because {@link #setLenient(boolean)} returns
+     * Cannot be `final` because {@link #setLenient(boolean)} returns
      * `void`.
      *
      * @since 2.7

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorPropertiesTest.java
Patch:
@@ -16,7 +16,7 @@ static class Issue905Bean {
 
         @ConstructorProperties({"x", "y"})
         // Same as above; use differing local parameter names so that parameter name
-        // introspection can not be used as the source of property names.
+        // introspection cannot be used as the source of property names.
         public Issue905Bean(int a, int b) {
             _x = a;
             _y = b;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/InnerClassCreatorTest.java
Patch:
@@ -6,7 +6,7 @@
 
 // For [databind#1501], [databind#1502], [databind#1503]; mostly to
 // test that for non-static inner classes constructors are ignored
-// and no Creators should be processed (since they can not be made
+// and no Creators should be processed (since they cannot be made
 // to work in standard way anyway).
 public class InnerClassCreatorTest extends BaseMapTest
 {

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java
Patch:
@@ -326,7 +326,7 @@ public void testEnumsWithJsonValue() throws Exception
 
     public void testAllowUnknownEnumValuesReadAsNull() throws Exception
     {
-        // can not use shared mapper when changing configs...
+        // cannot use shared mapper when changing configs...
         ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);
         assertNull(reader.forType(TestEnum.class).readValue("\"NO-SUCH-VALUE\""));
         assertNull(reader.forType(TestEnum.class).readValue(" 4343 "));
@@ -337,7 +337,7 @@ public void testAllowUnknownEnumValuesReadAsNull() throws Exception
     // [databind#1642]
     public void testAllowUnknownEnumValuesReadAsNullWithCreatorMethod() throws Exception
     {
-        // can not use shared mapper when changing configs...
+        // cannot use shared mapper when changing configs...
         ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);
         assertNull(reader.forType(StrictEnumCreator.class).readValue("\"NO-SUCH-VALUE\""));
         assertNull(reader.forType(StrictEnumCreator.class).readValue(" 4343 "));

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsTest.java
Patch:
@@ -825,7 +825,7 @@ public void testInvalidStringCoercionFail() throws IOException
         _testInvalidStringCoercionFail(boolean[].class);
         _testInvalidStringCoercionFail(byte[].class);
 
-        // char[] is special, can not use generalized test here
+        // char[] is special, cannot use generalized test here
 //        _testInvalidStringCoercionFail(char[].class);
         _testInvalidStringCoercionFail(short[].class);
         _testInvalidStringCoercionFail(int[].class);

File: src/test/java/com/fasterxml/jackson/databind/exc/DeserExceptionTypeTest.java
Patch:
@@ -20,7 +20,7 @@ static class Bean {
         public String propX;
     }
 
-    // Class that has no applicable creators and thus can not be instantiated;
+    // Class that has no applicable creators and thus cannot be instantiated;
     // definition problem
     static class NoCreatorsBean {
         public int x;

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java
Patch:
@@ -92,7 +92,7 @@ static class ExternalIdWrapper2 {
     static class ExternalIdBean2 {
         public int a = 2;
 
-        /* Type id property itself can not be external, as it is conceptually
+        /* Type id property itself cannot be external, as it is conceptually
          * part of the bean for which info is written:
          */
         @JsonTypeId

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest.java
Patch:
@@ -294,10 +294,10 @@ public void testSimpleSerialization() throws Exception
         ObjectMapper mapper = new ObjectMapper();
         mapper.registerSubtypes(ValueBean.class);
         // This may look odd, but one implementation nastiness is the fact
-        // that we can not properly serialize type id before the object,
+        // that we cannot properly serialize type id before the object,
         // because call is made after property name (for object) has already
         // been written out. So we'll write it after...
-        // Deserializer will work either way as it can not rely on ordering
+        // Deserializer will work either way as it cannot rely on ordering
         // anyway.
         assertEquals("{\"bean\":{\"value\":11},\"extType\":\"vbean\"}",
                 mapper.writeValueAsString(new ExternalBean(11)));

File: src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java
Patch:
@@ -158,7 +158,7 @@ public void testBoth() throws IOException
     // Test custom key serializer for enum
     public void testCustomForEnum() throws IOException
     {
-        // can not use shared mapper as we are registering a module
+        // cannot use shared mapper as we are registering a module
         final ObjectMapper mapper = new ObjectMapper();
         SimpleModule mod = new SimpleModule("test");
         mod.addKeySerializer(ABC.class, new ABCKeySerializer());

File: src/test/java/com/fasterxml/jackson/databind/type/RecursiveTypeTest.java
Patch:
@@ -85,7 +85,7 @@ public void testRecursivePair() throws Exception
 
         assertNotNull(json);
 
-        // can not deserialize with current definition, however
+        // cannot deserialize with current definition, however
     }
 
     // for [databind#1301]

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java
Patch:
@@ -122,6 +122,7 @@ public void testArrayTypingForPrimitiveArrays() throws Exception
         _testArrayTypingForPrimitiveArrays(m, new double[] { 0.5, 5.5, -1.0 });
         _testArrayTypingForPrimitiveArrays(m, new float[] { 0.5f, 5.5f, -1.0f });
         _testArrayTypingForPrimitiveArrays(m, new boolean[] { true, false });
+        _testArrayTypingForPrimitiveArrays(m, new byte[] { 1, 2, 3 });
 
         _testArrayTypingForPrimitiveArrays(m, new char[] { 'a', 'b' });
     }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer.java
Patch:
@@ -26,10 +26,10 @@ public AsExistingPropertyTypeSerializer forProperty(BeanProperty prop) {
         return (_property == prop) ? this :
             new AsExistingPropertyTypeSerializer(_idResolver, prop, _typePropertyName);
     }
-    
+
     @Override
     public As getTypeInclusion() { return As.EXISTING_PROPERTY; }
-    
+
     @Override
     public void writeTypePrefixForObject(Object value, JsonGenerator gen) throws IOException
     {
@@ -53,7 +53,7 @@ public void writeTypePrefixForObject(Object value, JsonGenerator gen, Class<?> t
         }
         gen.writeStartObject();
     }
-    
+
     @Override
     public void writeCustomTypePrefixForObject(Object value, JsonGenerator gen, String typeId) throws IOException
     {

File: src/test/java/com/fasterxml/jackson/databind/ser/KeySerializers1679Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.ser;
 
 import java.util.*;
 
@@ -18,8 +18,8 @@ public class KeySerializers1679Test extends BaseMapTest
     public void testRecursion1679() throws Exception
     {
         Map<Object, Object> objectMap = new HashMap<Object, Object>();
-        objectMap.put(new Object(), new Object());
+        objectMap.put(new Object(), "foo");
         String json = MAPPER.writeValueAsString(objectMap);
-        assertEquals("{}", json);
+        assertNotNull(json);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/util/ISO8601DateFormat.java
Patch:
@@ -19,7 +19,7 @@ public class ISO8601DateFormat extends DateFormat
 {
     private static final long serialVersionUID = 1L;
 
-    // those classes are to try to allow a consistent behavior for hascode/equals and other methods
+    // those classes are to try to allow a consistent behavior for hashcode/equals and other methods
     private static Calendar CALENDAR = new GregorianCalendar();
     private static NumberFormat NUMBER_FORMAT = new DecimalFormat();
 

File: src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java
Patch:
@@ -133,7 +133,6 @@ public static String format(Date date, boolean millis, TimeZone tz) {
         } else {
             formatted.append('Z');
         }
-
         return formatted.toString();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -1221,7 +1221,7 @@ public PropertyName findNameForDeserialization(Annotated a) {
      * @since 2.9
      */
     public Boolean hasAnySetter(Annotated a) {
-        return false;
+        return null;
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/introspect/IgnoredCreatorProperty1572Test.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.introspect.*;
 
 public class IgnoredCreatorProperty1572Test extends BaseMapTest
 {

File: src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java
Patch:
@@ -83,13 +83,14 @@ public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider prov
         }
         // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?
         if (_mapSerializer != null) {
-            _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null);
+            _mapSerializer.serializeFilteredAnyProperties(provider, gen, bean,(Map<?,?>) value,
+                    filter, null);
             return;
         }
         // ... not sure how custom handler would do it
         _serializer.serialize(value, gen, provider);
     }
-    
+
     // Note: NOT part of ResolvableSerializer...
     @SuppressWarnings("unchecked")
     public void resolve(SerializerProvider provider) throws JsonMappingException

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.annotation.*;
-import com.fasterxml.jackson.annotation.JsonCreator.Mode;
 import com.fasterxml.jackson.core.Version;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.*;

File: src/test/java/com/fasterxml/jackson/failing/DateDeserialization1651Test.java
Patch:
@@ -19,7 +19,7 @@ public void testDate1651() throws Exception
          // Mapper with timezone GMT-2
          ObjectMapper mapper = new ObjectMapper();
          mapper.setTimeZone(TimeZone.getTimeZone("GMT-2"));
-         Date dateGMT1 = mapper.readValue(json, Date.class);  // 11970-01-01T00:00:00.000-02:00
+         Date dateGMT1 = mapper.readValue(json, Date.class);  // 1970-01-01T00:00:00.000-02:00
     
          // Underlying timestamps should be the same
          assertEquals(dateUTC.getTime(), dateGMT1.getTime());

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -795,7 +795,7 @@ protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext
     {
         ObjectIdInfo objectIdInfo = prop.getObjectIdInfo();
         JsonDeserializer<Object> valueDeser = prop.getValueDeserializer();
-        ObjectIdReader objectIdReader = valueDeser.getObjectIdReader();
+        ObjectIdReader objectIdReader = (valueDeser == null) ? null : valueDeser.getObjectIdReader();
         if (objectIdInfo == null && objectIdReader == null) {
             return prop;
         }

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactoryWithRecursiveTypes.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.type;
 
 import java.io.IOException;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.util.Collections;
 import java.util.Set;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/BigCreatorTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.*;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorPropertiesTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.beans.ConstructorProperties;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorWithObjectIdTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.beans.ConstructorProperties;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingCreatorImplicitNames1001Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingExternalProperty1003Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.*;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/DisablingCreatorsTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/EnumCreatorTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.math.BigDecimal;
 import java.util.*;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/FailOnNullCreatorTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ImplicitNameMatch792Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/ImplicitParamsForCreatorTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/InnerClassCreatorTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/MultiArgConstructorTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/RequiredCreatorTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.*;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestConstructFromMap.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.math.BigDecimal;
 import java.util.*;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorNullValue.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.io.IOException;
 import java.util.UUID;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorWithNamingStrategy556.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.databind.*;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorWithPolymorphic113.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.*;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.util.*;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators2.java
Patch:
@@ -1,5 +1,5 @@
 
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.io.IOException;
 import java.util.List;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators421.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators541.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.util.*;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorsDelegating.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorsWithIdentity.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.io.IOException;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCustomValueInstDefaults.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.io.IOException;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestPolymorphicCreators.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.*;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestPolymorphicDelegating.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;

File: src/test/java/com/fasterxml/jackson/databind/deser/creators/TestValueInstantiator.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.creators;
+package com.fasterxml.jackson.databind.deser.creators;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -213,6 +213,8 @@ public enum MapperFeature implements ConfigFeature
      */
     INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES(true),
 
+    SET_PROPERTY_CREATOR_AS_DEFAULT(false),
+
     /*
     /******************************************************
     /* Access modifier handling

File: src/test/java/com/fasterxml/jackson/databind/filter/ProblemHandlerTest.java
Patch:
@@ -242,11 +242,10 @@ public void testWeirdStringHandling() throws Exception
         assertEquals(SingleValuedEnum.A, result);
 
         // also, write [databind#1629] try this
-        UUID defaultUUID = UUID.nameUUIDFromBytes("abc".getBytes());
         mapper = new ObjectMapper()
-                .addHandler(new WeirdStringHandler(defaultUUID));
+                .addHandler(new WeirdStringHandler(null));
         UUID result2 = mapper.readValue(quote("not a uuid!"), UUID.class);
-        assertEquals(defaultUUID, result2);
+        assertNull(result2);
     }
 
     public void testInvalidTypeId() throws Exception

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java
Patch:
@@ -156,7 +156,8 @@ public void testWrapperWithExplicitType() throws Exception
     {
         Dog dog = new Dog("Fluffy", 3);
         ContainerWithGetter<Animal> c2 = new ContainerWithGetter<Animal>(dog);
-        String json = MAPPER.writerFor(MAPPER.getTypeFactory().constructParametrizedType(ContainerWithGetter.class, ContainerWithGetter.class, Animal.class)).writeValueAsString(c2);
+        String json = MAPPER.writerFor(MAPPER.getTypeFactory().constructParametricType(ContainerWithGetter.class,
+                Animal.class)).writeValueAsString(c2);
         if (json.indexOf("\"object-type\":\"doggy\"") < 0) {
             fail("polymorphic type not kept, result == "+json+"; should contain 'object-type':'...'");
         }

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.JsonSerializable;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.util.RawValue;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -492,7 +492,7 @@ protected void addBeanProps(DeserializationContext ctxt,
             boolean ignoreAny = ignorals.getIgnoreUnknown();
             builder.setIgnoreUnknownProperties(ignoreAny);
             // Or explicit/implicit definitions?
-            ignored = ignorals.getIgnored();
+            ignored = ignorals.findIgnoredForDeserialization();
             for (String propName : ignored) {
                 builder.addIgnorable(propName);
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -380,7 +380,7 @@ public JsonDeserializer<?> build()
      * @since 2.0
      */
     public AbstractDeserializer buildAbstract() {
-        return new AbstractDeserializer(this, _beanDesc, _backRefProperties);
+        return new AbstractDeserializer(this, _beanDesc, _backRefProperties, _properties);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -490,8 +490,9 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
 
                     for (int i = 0, len = _props.length; ; ++i) {
                         if (i == len) {
-                            throw new IllegalArgumentException("Invalid Object Id definition for "+_handledType.getName()
-                                    +": can not find property with name '"+propName+"'");
+                            provider.reportBadDefinition(_beanType, String.format(
+                                    "Invalid Object Id definition for %s: can not find property with name '%s'",
+                                    handledType().getName(), propName));
                         }
                         BeanPropertyWriter prop = _props[i];
                         if (propName.equals(prop.getName())) {

File: src/test/java/com/fasterxml/jackson/databind/util/JsonParserSequenceTest.java
Patch:
@@ -13,6 +13,7 @@ public class JsonParserSequenceTest extends BaseMapTest {
     /**
      * Verifies fix for [core#372]
      */
+    @SuppressWarnings("resource")
     public void testJsonParserSequenceOverridesSkipChildren() throws Exception
     {
         // Create parser from TokenBuffer containing an incomplete JSON object

File: src/main/java/com/fasterxml/jackson/databind/DatabindContext.java
Patch:
@@ -252,7 +252,6 @@ public Converter<Object,Object> converterInstance(Annotated annotated,
      */
     public abstract <T> T reportBadDefinition(JavaType type, String msg) throws JsonMappingException;
 
-
     /**
      * @since 2.9
      */

File: src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
Patch:
@@ -291,13 +291,13 @@ protected String serializeAsString(ObjectMapper m, Object value)
     protected String serializeAsString(Object value)
         throws IOException
     {
-        return serializeAsString(SHARED_MAPPER, value);
+        return serializeAsString(objectMapper(), value);
     }
 
     protected String asJSONObjectValueString(Object... args)
         throws IOException
     {
-        return asJSONObjectValueString(SHARED_MAPPER, args);
+        return asJSONObjectValueString(objectMapper(), args);
     }
 
     protected String asJSONObjectValueString(ObjectMapper m, Object... args)
@@ -319,7 +319,7 @@ protected String asJSONObjectValueString(ObjectMapper m, Object... args)
     protected <T> T readAndMapFromString(String input, Class<T> cls)
         throws IOException
     {
-        return readAndMapFromString(SHARED_MAPPER, input, cls);
+        return readAndMapFromString(objectMapper(), input, cls);
     }
 
     protected <T> T readAndMapFromString(ObjectMapper m, String input, Class<T> cls) throws IOException

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForMaps.java
Patch:
@@ -118,8 +118,6 @@ protected TypeNameIdResolver createTypeNameIdResolver(boolean forSerialization)
                 TypeFactory.defaultInstance().constructType(Object.class), subtypes, forSerialization, !forSerialization);
     }
 
-    // // For #234:
-    
     public void testList() throws Exception
     {
         final ObjectMapper mapper = new ObjectMapper();

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -1155,7 +1155,7 @@ public <T> T reportBadTypeDefinition(BeanDescription bean,
             String msg, Object... msgArgs) throws JsonMappingException {
         String beanDesc = "N/A";
         if (bean != null) {
-            beanDesc = _desc(bean.getType().getGenericSignature());
+            beanDesc = ClassUtil.nameOf(bean.getBeanClass());
         }
         msg = String.format("Invalid type definition for type %s: %s",
                 beanDesc, _format(msg, msgArgs));
@@ -1178,7 +1178,7 @@ public <T> T reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefin
         }
         String beanDesc = "N/A";
         if (bean != null) {
-            beanDesc = _desc(bean.getType().getGenericSignature());
+            beanDesc = ClassUtil.nameOf(bean.getBeanClass());
         }
         message = String.format("Invalid definition for property %s (of type %s): %s",
                 propName, beanDesc, message);

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -1631,7 +1631,7 @@ public JsonMappingException endOfInputException(Class<?> instClass) {
      *
      * @since 2.8
      * 
-     * @deprecate Since 2.9: use a more specific method, or {@link #reportBadDefinition(JavaType, String)},
+     * @deprecated Since 2.9: use a more specific method, or {@link #reportBadDefinition(JavaType, String)},
      *    or {@link #reportInputMismatch} instead
      */
     @Deprecated // since 2.9

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java
Patch:
@@ -33,7 +33,7 @@ public class SimpleModule
 
     protected final String _name;
     protected final Version _version;
-    
+
     protected SimpleSerializers _serializers = null;
     protected SimpleDeserializers _deserializers = null;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -525,11 +525,9 @@ public final Object deserialize(JsonParser p, DeserializationContext ctxt) throw
     public final Object deserializeWith(JsonParser p, DeserializationContext ctxt,
             Object toUpdate) throws IOException
     {
-        JsonToken t = p.getCurrentToken();
-
         // 20-Oct-2016, tatu: Not 100% sure what to do; probably best to simply return
         //   null value and let caller decide what to do.
-        if (t == JsonToken.VALUE_NULL) {
+        if (p.hasToken(JsonToken.VALUE_NULL)) {
             // ... except for "skip nulls" case which should just do that:
             if (NullsConstantProvider.isSkipper(_nullProvider)) {
                 return toUpdate;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Arrays;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
-import com.fasterxml.jackson.annotation.JsonSetter.Nulls;
+import com.fasterxml.jackson.annotation.Nulls;
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.*;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
-import com.fasterxml.jackson.annotation.JsonSetter.Nulls;
+import com.fasterxml.jackson.annotation.Nulls;
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.io.NumberInput;
 import com.fasterxml.jackson.databind.*;

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java
Patch:
@@ -5,6 +5,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonSetter;
+import com.fasterxml.jackson.annotation.Nulls;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.cfg.ConfigOverride;
 import com.fasterxml.jackson.databind.cfg.MapperConfig;
@@ -241,8 +242,8 @@ public PropertyMetadata getMetadata() {
     protected PropertyMetadata _getSetterInfo(PropertyMetadata metadata)
     {
         boolean needMerge = true;
-        JsonSetter.Nulls valueNulls = null;
-        JsonSetter.Nulls contentNulls = null;
+        Nulls valueNulls = null;
+        Nulls contentNulls = null;
         
         // Slightly confusing: first, annotations should be accessed via primary member
         // (mutator); but accessor is needed for actual merge operation. So:

File: src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest.java
Patch:
@@ -6,8 +6,7 @@
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonSetter;
-import com.fasterxml.jackson.annotation.JsonSetter.Nulls;
-
+import com.fasterxml.jackson.annotation.Nulls;
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
 

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsGenericTest.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import com.fasterxml.jackson.annotation.JsonSetter;
+import com.fasterxml.jackson.annotation.Nulls;
 import com.fasterxml.jackson.core.type.TypeReference;
 
 import com.fasterxml.jackson.databind.*;
@@ -17,14 +18,14 @@ static class GeneralEmpty<T> {
 //        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)
         T value;
 
-        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)
+        @JsonSetter(nulls=Nulls.AS_EMPTY)
         public void setValue(T v) {
             value = v;
         }
     }
 
     static class NoCtorWrapper {
-        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)
+        @JsonSetter(nulls=Nulls.AS_EMPTY)
         public NoCtorPOJO value;
     }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsPojoTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.deser.filter;
 
 import com.fasterxml.jackson.annotation.JsonSetter;
-import com.fasterxml.jackson.annotation.JsonSetter.Nulls;
+import com.fasterxml.jackson.annotation.Nulls;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.exc.InvalidNullException;
 
@@ -11,14 +11,14 @@ public class NullConversionsPojoTest extends BaseMapTest
     static class NullFail {
         public String nullsOk = "a";
 
-        @JsonSetter(nulls=JsonSetter.Nulls.FAIL)
+        @JsonSetter(nulls=Nulls.FAIL)
         public String noNulls = "b";
     }
 
     static class NullAsEmpty {
         public String nullsOk = "a";
 
-        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)
+        @JsonSetter(nulls=Nulls.AS_EMPTY)
         public String nullAsEmpty = "b";
     }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsSkipTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.deser.filter;
 
 import com.fasterxml.jackson.annotation.JsonSetter;
-import com.fasterxml.jackson.annotation.JsonSetter.Nulls;
+import com.fasterxml.jackson.annotation.Nulls;
 import com.fasterxml.jackson.databind.*;
 
 // for [databind#1402]; configurable null handling, specifically with SKIP
@@ -10,7 +10,7 @@ public class NullConversionsSkipTest extends BaseMapTest
     static class NullSkipField {
         public String nullsOk = "a";
 
-        @JsonSetter(nulls=JsonSetter.Nulls.SKIP)
+        @JsonSetter(nulls=Nulls.SKIP)
         public String noNulls = "b";
     }
 
@@ -22,7 +22,7 @@ public void setNullsOk(String v) {
             _nullsOk = v;
         }
 
-        @JsonSetter(nulls=JsonSetter.Nulls.SKIP)
+        @JsonSetter(nulls=Nulls.SKIP)
         public void setNoNulls(String v) {
             _noNulls = v;
         }

File: src/test/java/com/fasterxml/jackson/failing/TestObjectIdWithUnwrapping1298.java
Patch:
@@ -76,7 +76,7 @@ public void testObjectIdWithRepeatedChild() throws Exception
 //                .writerWithDefaultPrettyPrinter()
                 .writeValue(sw, parents);
         } catch (Exception e) {
-            fail("Failed output so far: " + sw);
+            fail("Failed with "+e.getClass().getName()+", output so far: " + sw);
         }
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ByteArraySerializer.java
Patch:
@@ -65,7 +65,7 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
         ObjectNode itemSchema = createSchemaNode("byte"); //binary values written as strings?
         return o.set("items", itemSchema);
     }
-    
+
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
         throws JsonMappingException

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -209,7 +209,7 @@ public enum MapperFeature implements ConfigFeature
      *<p>
      * Feature is enabled by default.
      *
-     * @since 2.7
+     * @since 2.9
      */
     INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES(true),
 

File: src/test/java/com/fasterxml/jackson/failing/TestUnknownProperty426.java
Patch:
@@ -15,7 +15,7 @@ static class User {
         public String firstName;
         Integer userId; 
 
-        void setUserId(CharSequence id) {
+        public void setUserId(CharSequence id) {
             // 21-Dec-2015, tatu: With a fix in 2.7, use of String would not
             //   trigger the problem, so use CharSequence...
             setUserId(new Integer(id.toString()));

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -444,7 +444,7 @@ public Map<String,AnnotatedMember> findBackReferenceProperties()
 //        boolean hasIgnored = (_ignoredPropertyNames != null);
 
         for (BeanPropertyDefinition property : _properties()) {
-            /* 23-Sep-2014, tatu: As per [Databind#426], we _should_ try to avoid
+            /* 23-Sep-2014, tatu: As per [databind#426], we _should_ try to avoid
              *   calling accessor, as it triggers exception from seeming conflict.
              *   But the problem is that _ignoredPropertyNames here only contains
              *   ones ignored on per-property annotations, but NOT class annotations...

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -528,6 +528,8 @@ public JsonSerializer<Object> findValueSerializer(Class<?> valueType, BeanProper
      * full generics-aware type instead of raw class.
      * This is necessary for accurate handling of external type information,
      * to handle polymorphic types.
+     *<p>
+     * Note: this call will also contextualize serializer before returning it.
      * 
      * @param property When creating secondary serializers, property for which
      *   serializer is needed: annotations of the property (or bean that contains it)

File: src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedRecursive383.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.struct;
 
 import com.fasterxml.jackson.annotation.*;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java
Patch:
@@ -104,6 +104,8 @@ protected StdDelegatingDeserializer<T> withDelegate(Converter<Object,T> converte
     /**********************************************************
      */
 
+    // Note: unlikely to get called since most likely instances explicitly constructed;
+    // if so, caller must ensure delegating deserializer is properly resolve()d.
     @Override
     public void resolve(DeserializationContext ctxt)
         throws JsonMappingException

File: src/test/java/com/fasterxml/jackson/databind/convert/ConvertingAbstractSerializer795Test.java
Patch:
@@ -34,9 +34,9 @@ public static class AbstractCustomTypeUser {
         @JsonDeserialize(converter = AbstractCustomTypeDeserializationConverter.class)
         private final AbstractCustomType customField;
 
-        @JsonCreator AbstractCustomTypeUser(@JsonProperty("customField")
-        AbstractCustomType customField) {
-            this.customField = customField;
+        @JsonCreator
+        AbstractCustomTypeUser(@JsonProperty("customField") AbstractCustomType cf) {
+            this.customField = cf;
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -1568,8 +1568,9 @@ protected Object _bind(JsonParser p, Object valueToUpdate) throws IOException
                 if (valueToUpdate == null) {
                     result = deser.deserialize(p, ctxt);
                 } else {
-                    deser.deserialize(p, ctxt, valueToUpdate);
-                    result = valueToUpdate;
+                    // 20-Mar-2017, tatu: Important! May be different from `valueToUpdate`
+                    //   for immutable Objects like Java arrays; logical result
+                    result = deser.deserialize(p, ctxt, valueToUpdate);
                 }
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -970,7 +970,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
     /* Internal helper methods
     /**********************************************************
      */
-    
+
     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,
             Class<?> type, SerializerProvider provider) throws JsonMappingException
     {

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -26,7 +26,7 @@
 public class BeanSerializer
     extends BeanSerializerBase
 {
-    private static final long serialVersionUID = -3618164443537292758L;
+    private static final long serialVersionUID = 29; // as per jackson 2.9
 
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -1164,7 +1164,7 @@ public Class<?> findPOJOBuilder(AnnotatedClass ac) {
      * @since 2.0
      */
     public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {
-        return JsonPOJOBuilder.Value.empty();
+        return null;
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -1164,7 +1164,7 @@ public Class<?> findPOJOBuilder(AnnotatedClass ac) {
      * @since 2.0
      */
     public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {
-        return JsonPOJOBuilder.Value.empty();
+        return null;
     }
 
     /*

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapDeserializationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.deser;
+package com.fasterxml.jackson.databind.deser.jdk;
 
 import java.io.IOException;
 import java.text.DateFormat;

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -14,7 +14,6 @@
  */
 public class PropertyBuilder
 {
-    
     // @since 2.7
     private final static Object NO_DEFAULT_MARKER = Boolean.FALSE;
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java
Patch:
@@ -6,6 +6,7 @@
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.NoClass;
+import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
 
 /**
  * Unit tests related to specialized handling of "default implementation"
@@ -264,9 +265,8 @@ public void testWithoutEmptyStringAsNullObject1533() throws Exception
         try {
             r.readValue("{ \"value\": \"\" }");
             fail("Expected " + JsonMappingException.class);
-        } catch (JsonMappingException e) {
-            verifyException(e, "missing property 'type'");
-            verifyException(e, "contain type id");
+        } catch (InvalidTypeIdException e) {
+            verifyException(e, "missing type id property 'type'");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java
Patch:
@@ -9,6 +9,7 @@
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
 import com.fasterxml.jackson.databind.jsontype.NamedType;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 
@@ -268,8 +269,8 @@ public void testDefaultImplViaModule() throws Exception
         try {
             MAPPER.readValue(JSON, SuperTypeWithoutDefault.class);
             fail("Expected an exception");
-        } catch (JsonMappingException e) {
-            verifyException(e, "missing property");
+        } catch (InvalidTypeIdException e) {
+            verifyException(e, "missing type id property '#type'");
         }
 
         // but then succeed when we register default impl

File: src/main/java/com/fasterxml/jackson/databind/exc/InvalidTypeIdException.java
Patch:
@@ -19,7 +19,8 @@ public class InvalidTypeIdException
     protected final JavaType _baseType;
 
     /**
-     * Type id that failed to be resolved to a subtype
+     * Type id that failed to be resolved to a subtype; `null` in cases
+     * where no type id was located (since 2.9).
      */
     protected final String _typeId;
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java
Patch:
@@ -23,7 +23,7 @@ public EnumHolder() { }
     protected static class TimeUnitBean {
         public TimeUnit timeUnit;
     }
-    
+
     /*
     /**********************************************************
     /* Test methods

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -190,7 +190,7 @@ protected Object _coerceTextualNull(DeserializationContext ctxt) throws JsonMapp
         {
             if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
                 ctxt.reportInputMismatch(this,
-                        "Can not map String `null` into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
+                        "Can not map String \"null\" into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
                         handledType().toString());
             }
             return _nullValue;

File: src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java
Patch:
@@ -302,7 +302,6 @@ public AccessPattern getNullAccessPattern() {
      *
      * @since 2.9
      */
-//    public abstract AccessPattern getEmptyAccessPattern();
     public AccessPattern getEmptyAccessPattern() {
         return AccessPattern.DYNAMIC;
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -844,11 +844,10 @@ protected SettableBeanProperty constructCreatorProperty(DeserializationContext c
                 metadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
             } else {
                 Boolean b = intr.hasRequiredMarker(param);
-                boolean req = (b != null && b.booleanValue());
                 String desc = intr.findPropertyDescription(param);
                 Integer idx = intr.findPropertyIndex(param);
                 String def = intr.findPropertyDefaultValue(param);
-                metadata = PropertyMetadata.construct(req, desc, idx, def);
+                metadata = PropertyMetadata.construct(b, desc, idx, def);
             }
         }
         JavaType type = resolveMemberAndTypeAnnotations(ctxt, param, param.getType());

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -133,7 +133,7 @@ protected SettableBeanProperty(String propName, JavaType type, PropertyName wrap
             boolean isRequired)
     {
         this(new PropertyName(propName), type, wrapper, typeDeser, contextAnnotations,
-                PropertyMetadata.construct(isRequired, null, null, null));
+                PropertyMetadata.construct(Boolean.valueOf(isRequired), null, null, null));
     }
     
     protected SettableBeanProperty(PropertyName propName, JavaType type, PropertyName wrapper,

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java
Patch:
@@ -500,7 +500,7 @@ public PropertyMetadata getMetadata() {
             return (desc == null) ? PropertyMetadata.STD_REQUIRED_OR_OPTIONAL
                     : PropertyMetadata.STD_REQUIRED_OR_OPTIONAL.withDescription(desc);
         }
-        return PropertyMetadata.construct(b.booleanValue(), desc, idx, def);
+        return PropertyMetadata.construct(b, desc, idx, def);
     }
 
     protected Boolean _findRequired() {

File: src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsGenericTest.java
Patch:
@@ -13,7 +13,8 @@
 public class NullConversionsGenericTest extends BaseMapTest
 {
     static class GeneralEmpty<T> {
-        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)
+        // 09-Feb-2017, tatu: Should only need annotation either for field OR setter, not both:
+//        @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)
         T value;
 
         @JsonSetter(nulls=JsonSetter.Nulls.AS_EMPTY)

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -1121,7 +1121,7 @@ protected NullValueProvider findContentNullProvider(DeserializationContext ctxt,
                 return prov;
             }
         }
-        return NullsConstantProvider.nuller();
+        return valueDeser;
     }
 
     // @since 2.9

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -57,7 +57,7 @@ public final class StringCollectionDeserializer
     public StringCollectionDeserializer(JavaType collectionType,
             JsonDeserializer<?> valueDeser, ValueInstantiator valueInstantiator)
     {
-        this(collectionType, valueInstantiator, null, valueDeser, null, null);
+        this(collectionType, valueInstantiator, null, valueDeser, valueDeser, null);
     }
 
     @SuppressWarnings("unchecked")

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -927,6 +927,8 @@ protected SettableBeanProperty _resolveMergeAndNullSettings(DeserializationConte
                 break;
             case DESERIALIZER_NULL:
             case DESERIALIZER_EMPTY:
+                // !!! TODO
+
             case SKIP: // can't do here
             default: // SET/DEFAULT, nothing to do; S
             }

File: src/main/java/com/fasterxml/jackson/databind/exc/InvalidNullException.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.PropertyName;
+import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**
  * Exception thrown if a `null` value is being encountered for a property
@@ -37,7 +38,7 @@ public static InvalidNullException from(DeserializationContext ctxt,
             PropertyName name, JavaType type)
     {
         String msg = String.format("Invalid `null` value encountered for property %s",
-                name);
+                ClassUtil.quotedOr(name, "<UNKNOWN>"));
         InvalidNullException exc = new InvalidNullException(ctxt, msg, name);
         if (type != null) {
             exc.setTargetType(type);

File: src/test/java/com/fasterxml/jackson/failing/NullHandling1402Test.java
Patch:
@@ -36,7 +36,7 @@ public void testFailOnNull() throws Exception
                     NullFail.class);
             fail("Should not pass");
         } catch (InvalidNullException e) {
-            verifyException(e, "'noNulls'");
+            verifyException(e, "noNulls");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/deser/EnumDeserializationTest.java
Patch:
@@ -289,7 +289,8 @@ public void testNumbersToEnums() throws Exception
             fail("Expected an error");
         } catch (JsonMappingException e) {
             verifyException(e, "Can not deserialize");
-            verifyException(e, "not allowed to deserialize Enum value out of number: disable");
+            // 26-Jan-2017, tatu: as per [databind#1505], should fail bit differently
+            verifyException(e, "value not one of declared Enum");
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java
Patch:
@@ -641,7 +641,7 @@ public void removeIgnored()
      * @param inferMutators Whether mutators can be "pulled in" by visible
      *    accessors or not. 
      */
-    public void removeNonVisible(boolean inferMutators)
+    public JsonProperty.Access removeNonVisible(boolean inferMutators)
     {
         /* 07-Jun-2015, tatu: With 2.6, we will allow optional definition
          *  of explicit access type for property; if not "AUTO", it will
@@ -680,6 +680,7 @@ public void removeNonVisible(boolean inferMutators)
                 _setters = _removeNonVisible(_setters);
             }
         }
+        return acc;
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/failing/ReadWriteOnlyProp935Test.java
Patch:
@@ -65,7 +65,7 @@ public void testReadOnlyAndWriteOnly() throws Exception
 
         ReadXWriteY result = MAPPER.readValue("{\"x\":5, \"y\":6}", ReadXWriteY.class);
         assertNotNull(result);
-        assertEquals(0, result.x);
+        assertEquals(1, result.x);
         assertEquals(6, result.y);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
Patch:
@@ -72,7 +72,7 @@ public static StdKeyDeserializer forType(Class<?> raw)
         int kind;
 
         // first common types:
-        if (raw == String.class || raw == Object.class) {
+        if (raw == String.class || raw == Object.class || raw == CharSequence.class) {
             return StringKD.forType(raw);
         } else if (raw == UUID.class) {
             kind = TYPE_UUID;

File: src/test/java/com/fasterxml/jackson/databind/filter/IgnoreCreatorProp1317Test.java
Patch:
@@ -1,12 +1,12 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.filter;
 
 import java.beans.ConstructorProperties;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 
 import com.fasterxml.jackson.databind.*;
 
-public class Ignore1317Test extends BaseMapTest
+public class IgnoreCreatorProp1317Test extends BaseMapTest
 {
     static class Testing {
         @JsonIgnore

File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/NumberSerTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.ser;
+package com.fasterxml.jackson.databind.ser.jdk;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;

File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/TestJdkTypes.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.ser;
+package com.fasterxml.jackson.databind.ser.jdk;
 
 import java.io.*;
 import java.math.BigDecimal;

File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/TestSimpleAtomicTypes.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.ser;
+package com.fasterxml.jackson.databind.ser.jdk;
 
 import java.util.concurrent.atomic.*;
 

File: src/test/java/com/fasterxml/jackson/databind/ser/jdk/UntypedSerializationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.ser;
+package com.fasterxml.jackson.databind.ser.jdk;
 
 import java.util.*;
 
@@ -11,7 +11,7 @@
  * "Native" java type mapper; basically that is can properly serialize
  * core JDK objects to JSON.
  */
-public class TestUntypedSerialization
+public class UntypedSerializationTest
     extends BaseMapTest
 {
     public void testFromArray()

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -457,7 +457,7 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
                         if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {
                             return new BigDecimal(text);
                         }
-                        return new Double(text);
+                        return Double.valueOf(text);
                     }
                     if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {
                         return new BigInteger(text);

File: src/main/java/com/fasterxml/jackson/databind/ext/Java7Support.java
Patch:
@@ -5,6 +5,7 @@
 import com.fasterxml.jackson.databind.PropertyName;
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
+import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**
  * To support Java7-incomplete platforms, we will offer support for JDK 7
@@ -21,7 +22,7 @@ public abstract class Java7Support
         Java7Support impl = null;
         try {
             Class<?> cls = Class.forName("com.fasterxml.jackson.databind.ext.Java7SupportImpl");
-            impl = (Java7Support) cls.newInstance();
+            impl = (Java7Support) ClassUtil.createInstance(cls, false);
         } catch (Throwable t) {
             // 24-Nov-2015, tatu: Should we log or not?
             java.util.logging.Logger.getLogger(Java7Support.class.getName())

File: src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.Deserializers;
 import com.fasterxml.jackson.databind.ser.Serializers;
+import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**
  * Helper class used for isolating details of handling optional+external types
@@ -149,7 +150,7 @@ public JsonDeserializer<?> findDeserializer(JavaType type, DeserializationConfig
     private Object instantiate(String className)
     {
         try {
-            return Class.forName(className).newInstance();
+            return ClassUtil.createInstance(Class.forName(className), false);
         } catch (LinkageError e) { }
         // too many different kinds to enumerate here:
         catch (Exception e) { }

File: src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java
Patch:
@@ -609,13 +609,13 @@ public static <T> T createInstance(Class<T> cls, boolean canFixAccess)
         }
     }
 
-    public static <T> Constructor<T> findConstructor(Class<T> cls, boolean canFixAccess)
+    public static <T> Constructor<T> findConstructor(Class<T> cls, boolean forceAccess)
         throws IllegalArgumentException
     {
         try {
             Constructor<T> ctor = cls.getDeclaredConstructor();
-            if (canFixAccess) {
-                checkAndFixAccess(ctor);
+            if (forceAccess) {
+                checkAndFixAccess(ctor, forceAccess);
             } else {
                 // Has to be public...
                 if (!Modifier.isPublic(ctor.getModifiers())) {

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -201,16 +201,14 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             ser = _valueSerializer;
         }
         // [databind#124]: May have a content converter
-        ser = findConvertingContentSerializer(provider, property, ser);
+        ser = findContextualConvertingSerializer(provider, property, ser);
         if (ser == null) {
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
             // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho
             if (_valueTypeIsStatic && !_valueType.isJavaLangObject()) {
                 ser = provider.findValueSerializer(_valueType, property);
             }
-        } else {
-            ser = provider.handleSecondaryContextualization(ser, property);
         }
         if (keySer == null) {
             keySer = _keySerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -107,11 +107,9 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             ser = _elementSerializer;
         }
         // May have a content converter
-        ser = findConvertingContentSerializer(provider, property, ser);
+        ser = findContextualConvertingSerializer(provider, property, ser);
         if (ser == null) {
             ser = provider.findValueSerializer(String.class, property);
-        } else {
-            ser = provider.handleSecondaryContextualization(ser, property);
         }
         // Optimization: default serializer just writes String, so we can avoid a call:
         if (isDefaultSerializer(ser)) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -191,7 +191,7 @@ public JsonSerializer<?> createContextual(SerializerProvider serializers,
             ser = _elementSerializer;
         }
         // 18-Feb-2013, tatu: May have a content converter:
-        ser = findConvertingContentSerializer(serializers, property, ser);
+        ser = findContextualConvertingSerializer(serializers, property, ser);
         if (ser == null) {
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
@@ -200,8 +200,6 @@ public JsonSerializer<?> createContextual(SerializerProvider serializers,
                     ser = serializers.findValueSerializer(_elementType, property);
                 }
             }
-        } else {
-            ser = serializers.handleSecondaryContextualization(ser, property);
         }
         if ((ser != _elementSerializer)
                 || (property != _property)

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -415,16 +415,14 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             ser = _valueSerializer;
         }
         // [databind#124]: May have a content converter
-        ser = findConvertingContentSerializer(provider, property, ser);
+        ser = findContextualConvertingSerializer(provider, property, ser);
         if (ser == null) {
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
             // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho
             if (_valueTypeIsStatic && !_valueType.isJavaLangObject()) {
                 ser = provider.findValueSerializer(_valueType, property);
             }
-        } else {
-            ser = provider.handleSecondaryContextualization(ser, property);
         }
         if (keySer == null) {
             keySer = _keySerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -150,7 +150,7 @@ public JsonSerializer<?> createContextual(SerializerProvider serializers,
             ser = _elementSerializer;
         }
         // [databind#124]: May have a content converter
-        ser = findConvertingContentSerializer(serializers, property, ser);
+        ser = findContextualConvertingSerializer(serializers, property, ser);
         if (ser == null) {
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
@@ -159,8 +159,6 @@ public JsonSerializer<?> createContextual(SerializerProvider serializers,
                     ser = serializers.findValueSerializer(_elementType, property);
                 }
             }
-        } else {
-            ser = serializers.handleSecondaryContextualization(ser, property);
         }
         return withResolved(property, vts, ser, unwrapSingle);
     }

File: src/test/java/com/fasterxml/jackson/databind/module/SimpleModuleTest.java
Patch:
@@ -11,6 +11,7 @@
 import com.fasterxml.jackson.databind.module.SimpleDeserializers;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.fasterxml.jackson.databind.module.SimpleSerializers;
+
 import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 

File: src/test/java/com/fasterxml/jackson/databind/module/TestCustomEnumKeyDeserializer.java
Patch:
@@ -4,8 +4,6 @@
 import java.io.IOException;
 import java.util.*;
 
-import org.junit.Test;
-
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.type.TypeReference;
@@ -169,7 +167,6 @@ static class SuperType {
      */
     
     // Test passing with the fix
-    @Test
     public void testWithEnumKeys() throws Exception {
         ObjectMapper plainObjectMapper = new ObjectMapper();
         JsonNode tree = plainObjectMapper.readTree(aposToQuotes("{'red' : [ 'a', 'b']}"));

File: src/test/java/com/fasterxml/jackson/failing/ConvertingSerializer357Test.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.fasterxml.jackson.databind.util.StdConverter;
 
-public class TestConvertingSerializer357
+public class ConvertingSerializer357Test
     extends com.fasterxml.jackson.databind.BaseMapTest
 {
     // [databind#357]

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java
Patch:
@@ -115,9 +115,8 @@ public JsonSerializer<?> createContextual(SerializerProvider provider, BeanPrope
             if (delegateType == null) {
                 delegateType = _converter.getOutputType(provider.getTypeFactory());
             }
-            /* 02-Apr-2015, tatu: For "dynamic case", where type is only specified as
-             *    java.lang.Object (or missing generic), [databind#731]
-             */
+            // 02-Apr-2015, tatu: For "dynamic case", where type is only specified as
+            //    java.lang.Object (or missing generic), [databind#731]
             if (!delegateType.isJavaLangObject()) {
                 delSer = provider.findValueSerializer(delegateType);
             }

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -1246,7 +1246,8 @@ public <T> T reportInputMismatch(BeanProperty prop,
             String msg, Object... msgArgs) throws JsonMappingException
     {
         msg = _format(msg, msgArgs);
-        throw MismatchedInputException.from(getParser(), prop.getType(), msg);
+        JavaType type = (prop == null) ? null : prop.getType();
+        throw MismatchedInputException.from(getParser(), type, msg);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -299,8 +299,8 @@ protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationCo
         
         // need to construct suitable visibility checker:
         final DeserializationConfig config = ctxt.getConfig();
-        VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker();
-        vchecker = intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);
+        VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker(beanDesc.getBeanClass(),
+                beanDesc.getClassInfo());
 
         /* 24-Sep-2014, tatu: Tricky part first; need to merge resolved property information
          *  (which has creator parameters sprinkled around) with actual creator

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/Base64DecodingTest.java
Patch:
@@ -7,7 +7,7 @@
 
 // Mostly for [databind#1425]; not in optimal place (as it also has
 // tree-access tests), but has to do for now
-public class BaseDecodingTest extends BaseMapTest
+public class Base64DecodingTest extends BaseMapTest
 {
     private final ObjectMapper MAPPER = objectMapper();
 

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java
Patch:
@@ -268,9 +268,8 @@ public VisibilityChecker<?> getDefaultVisibilityChecker() {
             vchecker = vchecker.withFieldVisibility(Visibility.NONE);
         }
         return vchecker;
-
     }
-    
+
     public final PropertyNamingStrategy getPropertyNamingStrategy() {
         return _base.getPropertyNamingStrategy();
     }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -30,7 +30,7 @@
 import com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
 import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
 import com.fasterxml.jackson.databind.deser.*;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 import com.fasterxml.jackson.databind.introspect.*;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.*;
@@ -3900,7 +3900,7 @@ protected JsonToken _initForReading(JsonParser p, JavaType targetType) throws IO
             if (t == null) {
                 // Throw mapping exception, since it's failure to map,
                 //   not an actual parsing problem
-                throw InputMismatchException.from(p, targetType,
+                throw MismatchedInputException.from(p, targetType,
                         "No content to map due to end-of-input");
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/exc/InvalidDefinitionException.java
Patch:
@@ -11,7 +11,7 @@
  * Intermediate exception type used as the base class for all {@link JsonMappingException}s
  * that are due to problems with target type definition; usually a problem with
  * annotations used on a class or its properties.
- * This is in contrast to {@link InputMismatchException} which
+ * This is in contrast to {@link MismatchedInputException} which
  * signals a problem with input to map.
  *
  * @since 2.9

File: src/main/java/com/fasterxml/jackson/databind/exc/InvalidFormatException.java
Patch:
@@ -4,14 +4,14 @@
 import com.fasterxml.jackson.core.JsonParser;
 
 /**
- * Specialized sub-class of {@link InputMismatchException}
+ * Specialized sub-class of {@link MismatchedInputException}
  * that is used when the underlying problem appears to be that
  * of bad formatting of a value to deserialize.
  * 
  * @since 2.1
  */
 public class InvalidFormatException
-    extends InputMismatchException // since 2.9
+    extends MismatchedInputException // since 2.9
 {
     private static final long serialVersionUID = 1L; // silly Eclipse, warnings
 

File: src/main/java/com/fasterxml/jackson/databind/exc/InvalidTypeIdException.java
Patch:
@@ -9,7 +9,7 @@
  * @since 2.8
  */
 public class InvalidTypeIdException
-    extends InputMismatchException // since 2.9
+    extends MismatchedInputException // since 2.9
 {
     private static final long serialVersionUID = 1L; // silly Eclipse, warnings
 

File: src/main/java/com/fasterxml/jackson/databind/exc/PropertyBindingException.java
Patch:
@@ -16,7 +16,7 @@
  */
 @SuppressWarnings("serial")
 public abstract class PropertyBindingException
-    extends InputMismatchException // since 2.9
+    extends MismatchedInputException // since 2.9
 {
     /**
      * Class that does not contain mapping for the unrecognized property.

File: src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderErrorHandling.java
Patch:
@@ -4,7 +4,7 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 
 public class BuilderErrorHandling extends BaseMapTest
 {
@@ -53,7 +53,7 @@ public void testUnknownProperty() throws Exception
         try {
             MAPPER.readValue(json, ValueClassXY.class);
             fail("Should not pass");
-        } catch (InputMismatchException e) {
+        } catch (MismatchedInputException e) {
             verifyException(e, "unrecognized field");
         }
         // but pass if ok to ignore

File: src/test/java/com/fasterxml/jackson/databind/deser/jdk/BaseDecodingTest.java
Patch:
@@ -3,7 +3,7 @@
 import java.nio.charset.StandardCharsets;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 
 // Mostly for [databind#1425]; not in optimal place (as it also has
 // tree-access tests), but has to do for now
@@ -30,7 +30,7 @@ private void _testInvalidBase64(ObjectMapper mapper, String value) throws Except
         try {
             MAPPER.readValue(quote(value), byte[].class);
             fail("Should not pass");
-        } catch (InputMismatchException e) {
+        } catch (MismatchedInputException e) {
             verifyException(e, "Failed to decode");
             verifyException(e, "as base64");
             verifyException(e, "Illegal character '!'");
@@ -42,7 +42,7 @@ private void _testInvalidBase64(ObjectMapper mapper, String value) throws Except
         try {
             /*byte[] b =*/ nodeValue.binaryValue();
             fail("Should not pass");
-        } catch (InputMismatchException e) {
+        } catch (MismatchedInputException e) {
             verifyException(e, "Can not access contents of TextNode as binary");
             verifyException(e, "Illegal character '!'");
         }

File: src/test/java/com/fasterxml/jackson/databind/deser/merge/PropertyMergeTest.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.annotation.OptBoolean;
 import com.fasterxml.jackson.annotation.JsonFormat.Shape;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
 
 /**
@@ -184,15 +184,15 @@ public void testBeanAsArrayMerging() throws Exception
             MAPPER.readerForUpdating(input)
                 .readValue("[9, 8, 14]");
             fail("Should not pass");
-        } catch (InputMismatchException e) {
+        } catch (MismatchedInputException e) {
             verifyException(e, "expected at most 2 properties");
         }
 
         try {
             MAPPER.readerForUpdating(input)
                 .readValue("\"blob\"");
             fail("Should not pass");
-        } catch (InputMismatchException e) {
+        } catch (MismatchedInputException e) {
             verifyException(e, "Can not deserialize");
             verifyException(e, "from non-Array representation");
         }

File: src/test/java/com/fasterxml/jackson/databind/exc/DeserExceptionTypeTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
 
 /**
@@ -65,7 +65,7 @@ public void testExceptionWithEmpty() throws Exception
             Object result = MAPPER.readValue("    ", Object.class);
             fail("Expected an exception, but got result value: "+result);
         } catch (Exception e) {
-            verifyException(e, InputMismatchException.class, "No content");
+            verifyException(e, MismatchedInputException.class, "No content");
         }
     }
 
@@ -99,7 +99,7 @@ public void testExceptionWithEOF() throws Exception
             I = MAPPER.readValue(p, Integer.class);
             fail("Should have gotten an exception");
         } catch (IOException e) {
-            verifyException(e, InputMismatchException.class, "No content");
+            verifyException(e, MismatchedInputException.class, "No content");
         }
         // also: should have no current token after end-of-input
         JsonToken t = p.getCurrentToken();

File: src/test/java/com/fasterxml/jackson/databind/node/ArrayNodeTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.node.TextNode;
@@ -339,7 +339,7 @@ public void testSimpleMismatch() throws Exception
         try {
             mapper.readValue(" 123 ", ArrayNode.class);
             fail("Should not pass");
-        } catch (InputMismatchException e) {
+        } catch (MismatchedInputException e) {
             verifyException(e, "out of VALUE_NUMBER_INT token");
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/node/ObjectNodeTest.java
Patch:
@@ -9,7 +9,7 @@
 import com.fasterxml.jackson.annotation.JsonValue;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 
 /**
  * Additional tests for {@link ObjectNode} container class.
@@ -446,7 +446,7 @@ public void testSimpleMismatch() throws Exception
         try {
             mapper.readValue("[ 1, 2, 3 ]", ObjectNode.class);
             fail("Should not pass");
-        } catch (InputMismatchException e) {
+        } catch (MismatchedInputException e) {
             verifyException(e, "out of START_ARRAY token");
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.annotation.JsonFormat.Shape;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
 
@@ -275,7 +275,7 @@ public void testUnknownExtraProp() throws Exception
         try {
             MAPPER.readValue(json, PojoAsArrayWrapper.class);
             fail("should not pass with extra element");
-        } catch (InputMismatchException e) {
+        } catch (MismatchedInputException e) {
             verifyException(e, "Unexpected JSON values");
         }
 

File: src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayWithBuilder.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectReader;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
+import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
 
 /**
@@ -189,7 +189,7 @@ public void testUnknownExtraProp() throws Exception
         try {
             MAPPER.readValue(json, ValueClassXY.class);
             fail("should not pass with extra element");
-        } catch (InputMismatchException e) {
+        } catch (MismatchedInputException e) {
             verifyException(e, "Unexpected JSON values");
         }
 

File: src/main/java/com/fasterxml/jackson/databind/node/TextNode.java
Patch:
@@ -6,9 +6,9 @@
 import com.fasterxml.jackson.core.io.CharTypes;
 import com.fasterxml.jackson.core.io.NumberInput;
 import com.fasterxml.jackson.core.util.ByteArrayBuilder;
+
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.exc.InvalidFormatException;
-import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**
  * Value node that contains a text value.

File: src/test/java/com/fasterxml/jackson/databind/access/TestAnyGetterAccess.java
Patch:
@@ -9,7 +9,7 @@
  * Separate tests located in different package than code being
  * exercised; needed to trigger some access-related failures.
  */
-public class TestSerAnyGetter
+public class TestAnyGetterAccess
     extends BaseMapTest
 {
     /*

File: src/main/java/com/fasterxml/jackson/databind/BeanDescription.java
Patch:
@@ -184,6 +184,9 @@ protected BeanDescription(JavaType type) {
      * if any. If multiple ones are found,
      * an error is reported by throwing {@link IllegalArgumentException}
      */
+    public abstract AnnotatedMember findJsonValueAccessor();
+
+    @Deprecated // since 2.9
     public abstract AnnotatedMethod findJsonValueMethod();
 
     public abstract AnnotatedMethod findMethod(String name, Class<?>[] paramTypes);

File: src/test/java/com/fasterxml/jackson/databind/util/EnumValuesTest.java
Patch:
@@ -50,10 +50,9 @@ public void testConstructWithToString() {
         assertEquals(3, values.internalMap().size());
     }
 
-    @SuppressWarnings("deprecation")
     public void testEnumResolver()
     {
-        EnumResolver enumRes = EnumResolver.constructUnsafeUsingToString(ABC.class);
+        EnumResolver enumRes = EnumResolver.constructUnsafeUsingToString(ABC.class, null);
         assertEquals(ABC.B, enumRes.getEnum(1));
         assertNull(enumRes.getEnum(-1));
         assertNull(enumRes.getEnum(3));

File: src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderFailTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind.deser.builder;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -430,7 +430,7 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
                 if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {
                     return p.getDecimalValue();
                 }
-                return Double.valueOf(p.getDoubleValue());
+                return p.getNumberValue();
 
             case JsonTokenId.ID_STRING:
                 /* Textual values are more difficult... not parsing itself, but figuring

File: src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.struct;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -12,7 +12,7 @@
 
 import com.fasterxml.jackson.databind.*;
 
-public class SingleValueAsArray1421Test extends BaseMapTest
+public class SingleValueAsArrayTest extends BaseMapTest
 {
     private static final String JSON = "[{\"message\":\"messageHere\"}]";
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -419,7 +419,7 @@ public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContex
      */
     protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt,
             BeanDescription beanDesc) {
-        return new BeanDeserializerBuilder(beanDesc, ctxt.getConfig());
+        return new BeanDeserializerBuilder(beanDesc, ctxt);
     }
     
     /**

File: src/test/java/com/fasterxml/jackson/databind/deser/merge/UpdateValueTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.deser;
+package com.fasterxml.jackson.databind.deser.merge;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java
Patch:
@@ -145,6 +145,6 @@ public final void set(Object instance, Object value) throws IOException {
     public Object setAndReturn(Object instance, Object value) throws IOException
     {
         set(instance, value);
-        return null;
+        return instance;
     }
 }
\ No newline at end of file

File: src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java
Patch:
@@ -20,7 +20,7 @@ public Foo(String bar) {
         }
     }
 
-    // [Issue#353]
+    // [databind#353]
     public class SavedCookie {
         public String name, value;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java
Patch:
@@ -220,10 +220,10 @@ public boolean assignParameter(SettableBeanProperty prop, Object value)
             }
         } else {
             if (!_paramsSeenBig.get(ix)) {
+                _paramsSeenBig.set(ix);
                 if (--_paramsNeeded <= 0) {
                     return true;
                 }
-                _paramsSeenBig.set(ix);
             }
         }
         return false;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -153,13 +153,13 @@ public abstract class BeanDeserializerBase
      * on active view used (if any)
      */
     final protected boolean _needViewProcesing;
-    
+
     /**
      * We may also have one or more back reference fields (usually
      * zero or one).
      */
     final protected Map<String, SettableBeanProperty> _backRefs;
-    
+
     /*
     /**********************************************************
     /* Related handlers

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -385,7 +385,7 @@ public JsonDeserializer<Object> getValueDeserializer() {
     public boolean visibleInView(Class<?> activeView) {
         return (_viewMatcher == null) || _viewMatcher.isVisibleForView(activeView);
     }
-    
+
     public boolean hasViews() { return _viewMatcher != null; }
     
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -433,7 +433,7 @@ public JsonDeserializer<?> buildBuilderBased(JavaType valueType,
         }
 
         return new BuilderBasedDeserializer(this,
-                _beanDesc, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,
+                _beanDesc, valueType, propertyMap, _backRefProperties, _ignorableProps, _ignoreAllUnknown,
                 anyViews);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
Patch:
@@ -125,7 +125,8 @@ public Object deserializeKey(String key, DeserializationContext ctxt)
                 return result;
             }
         } catch (Exception re) {
-            return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation, problem: %s", re.getMessage());
+            return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation, problem: (%s) %s",
+                    re.getClass().getName(), re.getMessage());
         }
         if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {
             return null;

File: src/test/java/com/fasterxml/jackson/databind/deser/KeyDeser1429Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.deser;
 
 import java.util.Map;
 

File: src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java
Patch:
@@ -123,6 +123,9 @@ public abstract T deserialize(JsonParser p, DeserializationContext ctxt)
     public T deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)
         throws IOException, JsonProcessingException
     {
+        if (ctxt.isEnabled(MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE)) {
+            return deserialize(p, ctxt);
+        }
         throw new UnsupportedOperationException("Can not update object of type "
                 +intoValue.getClass().getName()+" (by deserializer of type "+getClass().getName()+")");
     }

File: src/main/java/com/fasterxml/jackson/databind/cfg/MutableConfigOverride.java
Patch:
@@ -26,7 +26,7 @@ protected MutableConfigOverride(MutableConfigOverride src) {
         super(src);
     }
 
-    protected MutableConfigOverride copy() {
+    public MutableConfigOverride copy() {
         return new MutableConfigOverride(this);
     }
 
@@ -51,7 +51,6 @@ public MutableConfigOverride setIgnorals(JsonIgnoreProperties.Value v) {
     }
 
     public MutableConfigOverride setIsIgnoredType(Boolean v) {
-        
         _isIgnoredType = v;
         return this;
     }

File: src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java
Patch:
@@ -102,8 +102,8 @@ public JsonInclude.Value findPropertyInclusion(MapperConfig<?> config, Class<?>
             return v0;
         }
         JsonInclude.Value v = intr.findPropertyInclusion(member);
-        if (v == null) {
-            return v0;
+        if (v0 == null) {
+            return v;
         }
         return v0.withOverrides(v);
     }

File: src/test/java/com/fasterxml/jackson/databind/filter/TestMapFiltering.java
Patch:
@@ -248,7 +248,7 @@ public void testMapViaGlobalNonEmpty() throws Exception
     {
         // basic Map<String,String> subclass:
         ObjectMapper mapper = new ObjectMapper();
-        mapper.setPropertyInclusion(JsonInclude.Value.empty()
+        mapper.setDefaultPropertyInclusion(JsonInclude.Value.empty()
                 .withContentInclusion(JsonInclude.Include.NON_EMPTY));
         assertEquals(aposToQuotes("{'a':'b'}"), mapper.writeValueAsString(
                 new StringMap497()

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java
Patch:
@@ -6,7 +6,7 @@
 import com.fasterxml.jackson.databind.*;
 
 /**
- * Tests to verify [JACKSON-437], [JACKSON-762]
+ * Tests to verify that Type Id may be exposed during deserialization,
  */
 public class TestVisibleTypeId extends BaseMapTest
 {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java
Patch:
@@ -29,7 +29,7 @@ public abstract class ArraySerializerBase<T>
      * @since 2.6
      */
     protected final Boolean _unwrapSingle;
-    
+
     protected ArraySerializerBase(Class<T> cls)
     {
         super(cls);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -5,7 +5,6 @@
 
 import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.JsonParser.NumberType;
 import com.fasterxml.jackson.core.io.NumberInput;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Special bogus "serializer" that will throw
- * {@link JsonGenerationException} if its {@link #serialize}
+ * {@link JsonMappingException} if its {@link #serialize}
  * gets invoked. Most commonly registered as handler for unknown types,
  * as well as for catching unintended usage (like trying to use null
  * as Map/Object key).
@@ -32,7 +32,7 @@ public FailingSerializer(String msg) {
     @Override
     public void serialize(Object value, JsonGenerator g, SerializerProvider provider) throws IOException
     {
-        throw new JsonGenerationException(_msg, g);
+        provider.reportMappingProblem(_msg);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
Patch:
@@ -424,14 +424,17 @@ public void writeTypeSuffixForArray(Object value, JsonGenerator gen) throws IOEx
             _typeSerializer.writeTypeSuffixForArray(_forObject, gen);
         }
 
+        @Override
         public void writeTypePrefixForScalar(Object value, JsonGenerator gen, Class<?> type) throws IOException {
             _typeSerializer.writeTypePrefixForScalar(_forObject, gen, type);
         }
 
+        @Override
         public void writeTypePrefixForObject(Object value, JsonGenerator gen, Class<?> type) throws IOException {
             _typeSerializer.writeTypePrefixForObject(_forObject, gen, type);
         }
 
+        @Override
         public void writeTypePrefixForArray(Object value, JsonGenerator gen, Class<?> type) throws IOException {
             _typeSerializer.writeTypePrefixForArray(_forObject, gen, type);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java
Patch:
@@ -69,14 +69,14 @@ public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) t
                     _delegateDeserializer.deserialize(p, ctxt));
         }
         if (_beanType.isAbstract()) { // for good measure, check this too
-            return ctxt.handleMissingInstantiator(handledType(), p,
+            return ctxt.handleMissingInstantiator(handledType(), getValueInstantiator(), p,
                     "abstract type (need to add/enable type information?)");
         }
         boolean hasStringCreator = _valueInstantiator.canCreateFromString();
         boolean hasDefaultCtor = _valueInstantiator.canCreateUsingDefault();
         // and finally, verify we do have single-String arg constructor (if no @JsonCreator)
         if (!hasStringCreator && !hasDefaultCtor) {
-            return ctxt.handleMissingInstantiator(handledType(), p,
+            return ctxt.handleMissingInstantiator(handledType(), getValueInstantiator(), p,
                     "Throwable needs a default contructor, a single-String-arg constructor; or explicit @JsonCreator");
         }
         

File: src/test/java/com/fasterxml/jackson/databind/creators/MultiArgConstructorTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.PropertyAccessor;
 import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
 import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
 import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
@@ -97,8 +98,8 @@ public void testMultiArgNotVisible() throws Exception
             /*MultiArgCtorBean bean =*/ mapper.readValue(aposToQuotes("{'b':13,  'a':-99}"),
                 MultiArgCtorBean.class);
             fail("Should not have passed");
-        } catch (JsonMappingException e) {
-            verifyException(e, "No suitable constructor");
+        } catch (InvalidDefinitionException e) {
+            verifyException(e, "no Creators");
         }
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/exc/ExceptionSerializationTest.java
Patch:
@@ -120,15 +120,15 @@ public void testJsonMappingExceptionSerialization() throws IOException {
             MAPPER.readValue( "{ \"val\": \"foo\" }", NoSerdeConstructor.class );
             fail("Should not pass");
         } catch (JsonMappingException e0) {
-            verifyException(e0, "no suitable constructor");
+            verifyException(e0, "can not deserialize from Object");
             e = e0;
         }
         // but should be able to serialize new exception we got
         String json = MAPPER.writeValueAsString(e);
         JsonNode root = MAPPER.readTree(json);
         String msg = root.path("message").asText();
-        String MATCH = "no suitable constructor";
-        if (!msg.contains(MATCH)) {
+        String MATCH = "can not construct instance";
+        if (!msg.toLowerCase().contains(MATCH)) {
             fail("Exception should contain '"+MATCH+"', does not: '"+msg+"'");
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java
Patch:
@@ -80,7 +80,7 @@ protected abstract static class DateBasedDeserializer<T>
          * Let's also keep format String for reference, to use for error messages
          */
         protected final String _formatString;
-        
+
         protected DateBasedDeserializer(Class<?> clz) {
             super(clz);
             _customFormat = null;
@@ -187,7 +187,7 @@ public static class CalendarDeserializer extends DateBasedDeserializer<Calendar>
          * used for instantiation.
          */
         protected final Class<? extends Calendar> _calendarClass;
-        
+
         public CalendarDeserializer() {
             super(Calendar.class);
             _calendarClass = null;
@@ -207,7 +207,7 @@ public CalendarDeserializer(CalendarDeserializer src, DateFormat df, String form
         protected CalendarDeserializer withDateFormat(DateFormat df, String formatString) {
             return new CalendarDeserializer(this, df, formatString);
         }
-        
+
         @Override
         public Calendar deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java
Patch:
@@ -41,7 +41,9 @@ protected AttributePropertyWriter(String attrName, BeanPropertyDefinition propDe
     {
         super(propDef, contextAnnotations, declaredType,
                 /* value serializer */ null, /* type serializer */ null, /* ser type */ null,
-                inclusion);
+                inclusion,
+                // 10-Oct-2016, tatu: Could enable per-view settings too in future
+                null);
         _attrName = attrName;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -318,9 +318,6 @@ public void resolve(SerializerProvider provider)
                 // It not, we can use declared return type if and only if declared type is final:
                 // if not, we don't really know the actual type until we get the instance.
                 if (type == null) {
-                    // 30-Oct-2015, tatu: Not sure why this was used
-//                    type = provider.constructType(prop.getGenericPropertyType());
-                    // but this looks better
                     type = prop.getType();
                     if (!type.isFinal()) {
                         if (type.isContainerType() || type.containedTypeCount() > 0) {

File: src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java
Patch:
@@ -163,7 +163,8 @@ public List<BeanPropertyWriter> changeProperties(SerializationConfig config,
                 beanProperties.add(new BeanPropertyWriter(prop, f, null,
                         strType,
                         null, null, strType,
-                        false, null));
+                        false, null,
+                        null));
             } catch (NoSuchFieldException e) {
                 throw new IllegalStateException(e.getMessage());
             }

File: src/test/java/com/fasterxml/jackson/databind/deser/exc/TestExceptionDeserialization.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.deser;
+package com.fasterxml.jackson.databind.deser.exc;
 
 import java.io.IOException;
 import java.util.*;

File: src/test/java/com/fasterxml/jackson/databind/deser/exc/TestExceptionHandlingWithJsonCreatorDeserialization.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.deser;
+package com.fasterxml.jackson.databind.deser.exc;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -53,14 +53,15 @@ public void testShouldThrowJsonMappingExceptionWithPathReference() throws IOExce
         // given
         ObjectMapper mapper = new ObjectMapper();
         String input = "{\"bar\":{\"baz\":{qux:\"quxValue\"))}";
+        final String THIS = getClass().getName();
 
         // when
         try {
             mapper.readValue(input, Foo.class);
             fail("Upsss! Exception has not been thrown.");
         } catch (JsonMappingException ex) {
             // then
-            assertEquals("com.fasterxml.jackson.databind.deser.Foo[\"bar\"]->com.fasterxml.jackson.databind.deser.Bar[\"baz\"]",
+            assertEquals(THIS+"$Foo[\"bar\"]->"+THIS+"$Bar[\"baz\"]",
                     ex.getPathReference());
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/exc/TestExceptionSerialization.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.ser;
+package com.fasterxml.jackson.databind.deser.exc;
 
 import java.io.IOException;
 import java.util.*;

File: src/test/java/com/fasterxml/jackson/databind/deser/exc/TestExceptionsDuringWriting.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.ser;
+package com.fasterxml.jackson.databind.deser.exc;
 
 import java.io.*;
 import java.util.*;
@@ -12,7 +12,7 @@
  * re-thrown or wrapped, depending)
  * with Object serialization.
  */
-public class TestExceptionHandling
+public class TestExceptionsDuringWriting
     extends BaseMapTest
 {
     /*

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -317,12 +317,12 @@ public static JsonMappingException from(SerializerProvider ctxt, String msg, Thr
      * Factory method used when "upgrading" an {@link IOException} into
      * {@link JsonMappingException}: usually only needed to comply with
      * a signature.
+     *<p>
+     * NOTE: since 2.9 should usually NOT be used on input-side (deserialization)
+     *    exceptions; instead use method(s) of <code>InputMismatchException</code>
      * 
      * @since 2.1
-     * 
-     * @deprecated Since 2.9 call method on {@link InputMismatchException} instead
      */
-    @Deprecated
     public static JsonMappingException fromUnexpectedIOE(IOException src) {
         return new JsonMappingException(null,
                 String.format("Unexpected IOException (of type %s): %s",

File: src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java
Patch:
@@ -14,7 +14,6 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.core.util.*;
 import com.fasterxml.jackson.databind.cfg.ContextAttributes;
-import com.fasterxml.jackson.databind.exc.InputMismatchException;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.*;
@@ -1024,7 +1023,7 @@ public String writeValueAsString(Object value)
         } catch (JsonProcessingException e) {
             throw e;
         } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:
-            throw InputMismatchException.fromUnexpectedIOE(e);
+            throw JsonMappingException.fromUnexpectedIOE(e);
         }
         return sw.getAndClear();
     }
@@ -1048,7 +1047,7 @@ public byte[] writeValueAsBytes(Object value)
         } catch (JsonProcessingException e) { // to support [JACKSON-758]
             throw e;
         } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:
-            throw InputMismatchException.fromUnexpectedIOE(e);
+            throw JsonMappingException.fromUnexpectedIOE(e);
         }
         byte[] result = bb.toByteArray();
         bb.release();

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -980,7 +980,7 @@ public void setBean(Object bean) {
         public void handleResolvedForwardReference(Object id, Object value) throws IOException
         {
             if (_bean == null) {
-                _context.reportInputMismatch(
+                _context.reportInputMismatch(_prop,
 "Can not resolve ObjectId forward reference using property '%s' (of type %s): Bean not yet resolved",
 _prop.getName(), _prop.getDeclaringClass().getName());
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -564,7 +564,7 @@ public void resolve(DeserializationContext ctxt)
                 TypeDeserializer typeDeser = prop.getValueTypeDeserializer();
                 if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {
                     if (extTypes == null) {
-                        extTypes = new ExternalTypeHandler.Builder();
+                        extTypes = ExternalTypeHandler.builder(_beanType);
                     }
                     extTypes.addExternal(prop, typeDeser);
                     // In fact, remove from list of known properties to simplify later handling

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java
Patch:
@@ -127,7 +127,7 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt)
         }
         // Ok; extra fields? Let's fail, unless ignoring extra props is fine
         if (!_ignoreAllUnknown) {
-            ctxt.reportWrongTokenException(p, JsonToken.END_ARRAY,
+            ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY,
                     "Unexpected JSON values; expected at most %d properties (in JSON Array)",
                     propCount);
             // never gets here
@@ -176,7 +176,7 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean
         
         // Ok; extra fields? Let's fail, unless ignoring extra props is fine
         if (!_ignoreAllUnknown) {
-            ctxt.reportWrongTokenException(p, JsonToken.END_ARRAY,
+            ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY,
                     "Unexpected JSON values; expected at most %d properties (in JSON Array)",
                     propCount);
             // never gets here
@@ -246,7 +246,7 @@ protected Object _deserializeNonVanilla(JsonParser p, DeserializationContext ctx
         }
         // Ok; extra fields? Let's fail, unless ignoring extra props is fine
         if (!_ignoreAllUnknown) {
-            ctxt.reportWrongTokenException(p, JsonToken.END_ARRAY,
+            ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY,
                     "Unexpected JSON values; expected at most %d properties (in JSON Array)",
                     propCount);
             // will never reach here as exception has been thrown

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/FailingDeserializer.java
Patch:
@@ -23,8 +23,8 @@ public FailingDeserializer(String m) {
     }
     
     @Override
-    public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws JsonMappingException{
-        ctxt.reportInputMismatch(_message);
+    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws JsonMappingException{
+        ctxt.reportInputMismatch(this, _message);
         return null;
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java
Patch:
@@ -121,8 +121,9 @@ public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt,
          * be compatible. If so, implementation could be changed.
          */
         if (toModify == null) {
-            throw JsonMappingException.from(p,
-                    "Problem deserializing 'setterless' property '"+getName()+"': get method returned null");
+            ctxt.reportBadDefinition(getType(), String.format(
+                    "Problem deserializing 'setterless' property '%s': get method returned null",
+                    getName()));
         }
         _valueDeserializer.deserialize(p, ctxt, toModify);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -132,7 +132,7 @@ protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl) {
         public final T getNullValue(DeserializationContext ctxt) throws JsonMappingException
         {
             if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
-                ctxt.reportInputMismatch(
+                ctxt.reportInputMismatch(this,
                         "Can not map JSON null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
                         handledType().toString());
             }
@@ -144,7 +144,7 @@ public T getEmptyValue(DeserializationContext ctxt) throws JsonMappingException
             // [databind#1095]: Should not allow coercion from into null from Empty String
             // either, if `null` not allowed
             if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
-                ctxt.reportInputMismatch(
+                ctxt.reportInputMismatch(this,
                         "Can not map Empty String as null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
                         handledType().toString());
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java
Patch:
@@ -174,8 +174,8 @@ public char[] deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
                         str = cs.toString();
                     }
                     if (str.length() != 1) {
-                        ctxt.reportInputMismatch("Can not convert a JSON String of length %d into a char element of char array",
-                                str.length());
+                        ctxt.reportInputMismatch(this,
+"Can not convert a JSON String of length %d into a char element of char array", str.length());
                     }
                     sb.append(str.charAt(0));
                 }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
Patch:
@@ -93,11 +93,11 @@ protected Object _deserialize(JsonParser p, DeserializationContext ctxt) throws
         if (t == JsonToken.START_OBJECT) {
             // should always get field name, but just in case...
             if (p.nextToken() != JsonToken.FIELD_NAME) {
-                ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
+                ctxt.reportWrongTokenException(baseType(), JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
         } else if (t != JsonToken.FIELD_NAME) {
-            ctxt.reportWrongTokenException(p, JsonToken.START_OBJECT,
+            ctxt.reportWrongTokenException(baseType(), JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
         final String typeId = p.getText();
@@ -121,7 +121,7 @@ protected Object _deserialize(JsonParser p, DeserializationContext ctxt) throws
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
-            ctxt.reportWrongTokenException(p, JsonToken.END_OBJECT,
+            ctxt.reportWrongTokenException(baseType(), JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -453,7 +453,7 @@ public TokenBuffer deserialize(JsonParser p, DeserializationContext ctxt) throws
             copyCurrentStructure(p);
         } while ((t = p.nextToken()) == JsonToken.FIELD_NAME);
         if (t != JsonToken.END_OBJECT) {
-            ctxt.reportWrongTokenException(p, JsonToken.END_OBJECT,
+            ctxt.reportWrongTokenException(TokenBuffer.class, JsonToken.END_OBJECT,
                     "Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got "+t);
             // never gets here
         }

File: src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue.java
Patch:
@@ -70,9 +70,9 @@ static class DataADeserializer extends StdDeserializer<DataA> {
         @Override
         public DataA deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
             if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-                ctxt.reportWrongTokenException(p, JsonToken.START_OBJECT,
-                        "Wrong current token, expected START_OBJECT, got: %s",
-                        p.getCurrentToken());
+                ctxt.reportInputMismatch(DataA.class,
+                        "Wrong current token, expected START_OBJECT, got: "
+                        +p.getCurrentToken());
                 // never gets here
             }
             /*JsonNode node =*/ p.readValueAsTree();

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays.java
Patch:
@@ -72,6 +72,7 @@ public void testNodeInArray() throws Exception
         assertTrue(ob instanceof JsonNode);
     }
     
+    @SuppressWarnings("deprecation")
     public void testNodeInEmptyArray() throws Exception {
         Map<String, List<String>> outerMap = new HashMap<String, List<String>>();
         outerMap.put("inner", new ArrayList<String>());

File: src/test/java/com/fasterxml/jackson/databind/objectid/JSOGDeserialize622Test.java
Patch:
@@ -97,14 +97,14 @@ public JSOGRef generateId(Object forPojo) {
     static class JSOGRefDeserializer extends JsonDeserializer<JSOGRef>
     {
       @Override
-      public JSOGRef deserialize(JsonParser jp, DeserializationContext ctx) throws IOException {
-          JsonNode node = jp.readValueAsTree();
+      public JSOGRef deserialize(JsonParser p, DeserializationContext ctx) throws IOException {
+          JsonNode node = p.readValueAsTree();
           if (node.isTextual()) {
               return new JSOGRef(node.asInt());
           }
           JsonNode n = node.get(REF_KEY);
           if (n == null) {
-              throw JsonMappingException.from(jp, "Could not find key '"+REF_KEY
+              throw new JsonMappingException(p, "Could not find key '"+REF_KEY
                       +"' from ("+node.getClass().getName()+"): "+node);
           }
           return new JSOGRef(n.asInt());

File: src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java
Patch:
@@ -227,14 +227,13 @@ public void testNullBeanEnumMap() throws IOException
         assertNull(result.get("map"));
     }
 
-    // Test [JACKSON-220]
     public void testListSerializer() throws IOException
     {
         assertEquals("\"[ab, cd, ef]\"",
                 MAPPER.writeValueAsString(new PseudoList("ab", "cd", "ef")));
     }
 
-    // [JACKSON-254]
+    @SuppressWarnings("deprecation")
     public void testEmptyListOrArray() throws IOException
     {
         // by default, empty lists serialized normally

File: src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java
Patch:
@@ -190,6 +190,7 @@ public void testUnWrappedMapWithDefaultType() throws Exception{
     }
 
     // [databind#838]
+    @SuppressWarnings("deprecation")
     public void testUnWrappedMapWithKeySerializer() throws Exception{
         SimpleModule mod = new SimpleModule("test");
         mod.addKeySerializer(ABC.class, new ABCKeySerializer());

File: src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java
Patch:
@@ -2,8 +2,6 @@
 
 import java.io.IOException;
 
-import com.fasterxml.jackson.core.*;
-
 /**
  * Abstract class that defines API used for deserializing JSON content
  * field names into Java Map keys. These deserializers are only used
@@ -15,7 +13,7 @@ public abstract class KeyDeserializer
      * Method called to deserialize a {@link java.util.Map} key from JSON property name.
      */
     public abstract Object deserializeKey(String key, DeserializationContext ctxt)
-        throws IOException, JsonProcessingException;
+        throws IOException;
 
     /**
      * This marker class is only to be used with annotations, to

File: src/test/java/com/fasterxml/jackson/databind/creators/DelegatingCreatorImplicitNames1001Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.creators;
 
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;
@@ -21,7 +21,7 @@ private D(String raw1, String raw2) {
         }
 
         // not needed strictly speaking, but added for good measure
-        @JsonCreator(mode=JsonCreator.Mode.DELEGATING)
+        @JsonCreator
         public static D make(String value) {
             String[] split = value.split(":");
             return new D(split[0], split[1]);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/JsonValueExtTypeIdTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.jsontype.ext;
 
 import java.io.*;
 import java.math.BigDecimal;
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.*;
 
 @SuppressWarnings("serial")
-public class TestTypeWithJsonValue466 extends BaseMapTest
+public class JsonValueExtTypeIdTest extends BaseMapTest
 {
     // The following is required for the testDecimalMetadata test case. That case fails.
     @JsonTypeName(value = "decimalValue")

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -228,6 +228,7 @@ protected BeanDeserializerBase(BeanDeserializerBuilder builder,
         _objectIdReader = builder.getObjectIdReader();
         _nonStandardCreation = (_unwrappedPropertyHandler != null)
             || _valueInstantiator.canCreateUsingDelegate()
+            || _valueInstantiator.canCreateUsingArrayDelegate() // new in 2.7
             || _valueInstantiator.canCreateFromObjectWith()
             || !_valueInstantiator.canCreateUsingDefault()
             ;

File: src/test/java/com/fasterxml/jackson/databind/creators/ArrayDelegatorCreatorForCollectionTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.creators;
 
 import java.util.Collections;
 import java.util.Set;
@@ -7,7 +7,7 @@
 
 import com.fasterxml.jackson.databind.*;
 
-public class UnmodifiableSetTyping1392Test extends BaseMapTest
+public class ArrayDelegatorCreatorForCollectionTest extends BaseMapTest
 {
     @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)
     abstract static class UnmodifiableSetMixin {

File: src/test/java/com/fasterxml/jackson/databind/deser/JDKAtomicTypesTest.java
Patch:
@@ -40,7 +40,6 @@ public RefWrapper(int i) {
     static class SimpleWrapper {
         public AtomicReference<Object> value;
 
-        public SimpleWrapper() { }
         public SimpleWrapper(Object o) { value = new AtomicReference<Object>(o); }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -318,9 +318,9 @@ public boolean isEmpty(SerializerProvider prov, Entry<?, ?> entry)
             }
         }
         if (_suppressableValue == MARKER_FOR_EMPTY) {
-            return !valueSer.isEmpty(prov, value);
+            return valueSer.isEmpty(prov, value);
         }
-        return !_suppressableValue.equals(value);
+        return _suppressableValue.equals(value);
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -538,7 +538,6 @@ public boolean isEmpty(SerializerProvider prov, Map<?,?> value)
         // 05-Nove-2015, tatu: Simple cases are cheap, but for recursive
         //   emptiness checking we actually need to see if values are empty as well.
         Object supp = _suppressableValue;
-
         if ((supp == null) && !_suppressNulls) {
             return false;
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -56,7 +56,7 @@ public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc)
         // 08-Sep-2016, tatu: This gets tricky, with 3 levels of definitions:
         //  (a) global default inclusion
         //  (b) per-type default inclusion (from annotation or config overrides;
-        //     latter having precedence
+        //     latter having precedence)
         //  Cc) per-property override
         //
         //  and not only requiring merging, but also considering special handling

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -225,7 +225,7 @@ protected void serializeDynamic(Map.Entry<?, ?> value, JsonGenerator jgen, Seria
         if (keyElem == null) {
             provider.findNullKeySerializer(_keyType, _property).serialize(null, jgen, provider);
         } else {
-            // [JACKSON-314] skip entries with null values?
+            // [skip entries with null values?
             if (skipNulls && valueElem == null) return;
             keySerializer.serialize(keyElem, jgen, provider);
         }
@@ -276,7 +276,7 @@ protected void serializeUsing(Map.Entry<?, ?> value, JsonGenerator jgen, Seriali
         if (keyElem == null) {
             provider.findNullKeySerializer(_keyType, _property).serialize(null, jgen, provider);
         } else {
-            // [JACKSON-314] also may need to skip entries with null values
+            // also may need to skip entries with null values
             if (skipNulls && valueElem == null) return;
             keySerializer.serialize(keyElem, jgen, provider);
         }
@@ -290,7 +290,6 @@ protected void serializeUsing(Map.Entry<?, ?> value, JsonGenerator jgen, Seriali
                     ser.serializeWithType(valueElem, jgen, provider, vts);
                 }
             } catch (Exception e) {
-                // [JACKSON-55] Need to add reference information
                 String keyDesc = ""+keyElem;
                 wrapAndThrow(provider, e, value, keyDesc);
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java
Patch:
@@ -9,7 +9,7 @@
 import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
 
 @JacksonStdImpl
-public final class StringDeserializer extends StdScalarDeserializer<String>
+public class StringDeserializer extends StdScalarDeserializer<String> // non-final since 2.9
 {
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java
Patch:
@@ -158,9 +158,7 @@ protected Object deserializeEnumUsingPropertyBased(final JsonParser p, final Des
     
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                    p.nextToken(); // to move to next field name
-                }
+                buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp));
                 continue;
             }
             if (buffer.readIdProperty(propName)) {

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -423,8 +423,9 @@ public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
             }
         } while (false);
 
-        // except possibly handlers
-//      newType = newType.withHandlersFrom(baseType);
+        // 25-Sep-2016, tatu: As per [databind#1384] also need to ensure handlers get
+        //   copied as well
+        newType = newType.withHandlersFrom(baseType);
         return newType;
 
         // 20-Oct-2015, tatu: Old simplistic approach

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -35,10 +35,10 @@ public class BeanDeserializer
      * Lazily constructed exception used as root cause if reporting problem
      * with creator method that returns <code>null</code> (which is not allowed)
      *
-     * @since 3.8
+     * @since 2.8
      */
     protected transient Exception _nullFromCreator;
-    
+
     /*
     /**********************************************************
     /* Life-cycle, construction, initialization

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -502,7 +502,7 @@ public void resolve(DeserializationContext ctxt)
                 prop = prop.withValueDeserializer(deser);
             } else { // may need contextual version
                 JsonDeserializer<Object> deser = prop.getValueDeserializer();
-                /* Important! This is the only place where actually handle "primary"
+                /* Important! This is the only place where we actually handle "primary"
                  * property deserializers -- call is different from other places.
                  */
                 JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop,

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java
Patch:
@@ -92,7 +92,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property)
         throws JsonMappingException
     {
-        if ((_deser == null) && (_inputType != null)) {
+        if ((_deser == null) && (_inputType != null) && (_creatorProps == null)) {
             return new FactoryBasedEnumDeserializer(this,
                     ctxt.findContextualValueDeserializer(_inputType, property));
         }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java
Patch:
@@ -24,7 +24,7 @@ public AsWrapperTypeSerializer(TypeIdResolver idRes, BeanProperty property) {
 
     @Override
     public AsWrapperTypeSerializer forProperty(BeanProperty prop) {
-        return (_property == prop) ? this : new AsWrapperTypeSerializer(this._idResolver, prop);
+        return (_property == prop) ? this : new AsWrapperTypeSerializer(_idResolver, prop);
     }
     
     @Override

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -1142,14 +1142,14 @@ public JsonCreator.Mode findCreatorAnnotation(MapperConfig<?> config, Annotated
         }
 
         if (_cfgConstructorPropertiesImpliesCreator
-//                && config.isEnabled(MapperFeature.))
+                && config.isEnabled(MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES)
             ) {
             if (a instanceof AnnotatedConstructor) {
                 if (_java7Helper != null) {
                     Boolean b = _java7Helper.hasCreatorAnnotation(a);
                     if ((b != null) && b.booleanValue()) {
-                        // 13-Sep-2016, tatu: Judgment call, but I don't JDK ever intended use
-                        //    of delegate, but assumed as-properties implicitly
+                        // 13-Sep-2016, tatu: Judgment call, but I don't think JDK ever implies
+                        //    use of delegate; assumes as-properties implicitly
                         return JsonCreator.Mode.PROPERTIES;
                     }
                 }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java
Patch:
@@ -24,7 +24,7 @@ public AsWrapperTypeSerializer(TypeIdResolver idRes, BeanProperty property) {
 
     @Override
     public AsWrapperTypeSerializer forProperty(BeanProperty prop) {
-        return (_property == prop) ? this : new AsWrapperTypeSerializer(this._idResolver, prop);
+        return (_property == prop) ? this : new AsWrapperTypeSerializer(_idResolver, prop);
     }
     
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -515,7 +515,7 @@ public void resolve(DeserializationContext ctxt)
             // Need to link managed references with matching back references
             prop = _resolveManagedReferenceProperty(ctxt, prop);
 
-            // [databind#351[: need to wrap properties that require object id resolution.
+            // [databind#351]: need to wrap properties that require object id resolution.
             if (!(prop instanceof ManagedReferenceProperty)) {
                 prop = _resolvedObjectIdProperty(ctxt, prop);
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java
Patch:
@@ -132,7 +132,7 @@ public final void set(Object instance, Object value) throws IOException
         try {
             _field.set(instance, value);
         } catch (Exception e) {
-            // 15-Sep-2015, tatu: How coud we get a ref to JsonParser?
+            // 15-Sep-2015, tatu: How could we get a ref to JsonParser?
             _throwAsIOE(e, value);
         }
     }
@@ -143,7 +143,7 @@ public Object setAndReturn(Object instance, Object value) throws IOException
         try {
             _field.set(instance, value);
         } catch (Exception e) {
-            // 15-Sep-2015, tatu: How coud we get a ref to JsonParser?
+            // 15-Sep-2015, tatu: How could we get a ref to JsonParser?
             _throwAsIOE(e, value);
         }
         return instance;

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java
Patch:
@@ -119,7 +119,7 @@ public Object deserializeSetAndReturn(JsonParser p,
             return null;
         }
     }
-    
+
     @Override
     public final void set(Object instance, Object value) throws IOException
     {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java
Patch:
@@ -92,7 +92,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property)
         throws JsonMappingException
     {
-        if ((_deser == null) && (_inputType != null)) {
+        if ((_deser == null) && (_inputType != null) && (_creatorProps == null)) {
             return new FactoryBasedEnumDeserializer(this,
                     ctxt.findContextualValueDeserializer(_inputType, property));
         }

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -5,6 +5,7 @@
 import java.io.Serializable;
 import java.util.*;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.util.ClassUtil;
 
@@ -400,7 +401,7 @@ public List<Reference> getPath()
     }
 
     /**
-     * Method for accesing description of path that lead to the
+     * Method for accessing description of path that lead to the
      * problem that triggered this exception
      */
     public String getPathReference()
@@ -454,6 +455,7 @@ public void prependPath(Reference r)
      */
 
     @Override // since 2.7.5
+    @JsonIgnore // as per [databind#1368]
     public Object getProcessor() { return _processor; }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -587,6 +587,7 @@ protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov,
         ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size());
         final boolean fixAccess = config.canOverrideAccessModifiers();
         final boolean forceAccess = fixAccess && config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS);
+
         for (BeanPropertyDefinition property : properties) {
             final AnnotatedMember accessor = property.getAccessor();
             // Type id? Requires special handling:

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -21,7 +21,7 @@ public enum MapperFeature implements ConfigFeature
     /* Introspection features
     /******************************************************
      */
-    
+
     /**
      * Feature that determines whether annotation introspection
      * is used for configuration; if enabled, configured

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -391,8 +391,7 @@ public JsonInclude.Value findPropertyInclusion(JsonInclude.Value defValue) {
         if (_annotationIntrospector != null) {
             JsonInclude.Value incl = _annotationIntrospector.findPropertyInclusion(_classInfo);
             if (incl != null) {
-                return (defValue == null) ? incl
-                        : defValue.withOverrides(incl);
+                return (defValue == null) ? incl : defValue.withOverrides(incl);
             }
         }
         return defValue;

File: src/test/java/com/fasterxml/jackson/databind/creators/TestValueUpdate.java
Patch:
@@ -36,13 +36,12 @@ void setB(String b) {
         }
     }
 
-    // [Issue#318] (and Scala module issue #83]
+    // [databind#318] (and Scala module issue #83]
     public void testValueUpdateWithCreator() throws Exception
     {
         Bean bean = new Bean("abc", "def");
         new ObjectMapper().readerFor(Bean.class).withValueToUpdate(bean).readValue("{\"a\":\"ghi\",\"b\":\"jkl\"}");
         assertEquals("ghi", bean.getA());
         assertEquals("jkl", bean.getB());
     }
-
 }

File: src/test/java/com/fasterxml/jackson/databind/deser/TestAnnotationIgnore.java
Patch:
@@ -47,8 +47,7 @@ final static class NoYOrZ
     
     public void testSimpleIgnore() throws Exception
     {
-        SizeClassIgnore result = MAPPER.readValue
-            ("{ \"x\":1, \"y\" : 2 }",
+        SizeClassIgnore result = MAPPER.readValue("{ \"x\":1, \"y\" : 2 }",
              SizeClassIgnore.class);
         // x should be set, y not
         assertEquals(1, result._x);

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -1438,7 +1438,8 @@ public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)
         if (_dataFormatReaders != null) {
             return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);
         }
-        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true));
+        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),
+                true));
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1144,7 +1144,9 @@ protected Object _convertObjectId(JsonParser p, DeserializationContext ctxt,
         } else {
             // should we worry about UUIDs? They should be fine, right?
             // 07-Aug-2014, tatu: Maybe, but not necessarily; had issues with
-            //   Smile format; [Smile#19], possibly related.
+            //   Smile format; [dataformat-smile#19], possibly related.
+            // 01-Sep-2016, tatu: For non-JSON, might want to consider `writeEmbeddedObject`
+            //   but that won't work for default impl (JSON and most dataformats)
             buf.writeObject(rawId);
         }
         JsonParser bufParser = buf.asParser();

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -370,6 +370,9 @@ protected final JsonNode _fromFloat(JsonParser p, DeserializationContext ctxt,
             || ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {
             return nodeFactory.numberNode(p.getDecimalValue());
         }
+        if (nt == JsonParser.NumberType.FLOAT) {
+            return nodeFactory.numberNode(p.getFloatValue());
+        }
         return nodeFactory.numberNode(p.getDoubleValue());
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.*;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
+import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URL;
 import java.nio.charset.Charset;
@@ -115,6 +116,8 @@ public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOExcepti
                 }
             } catch (IllegalArgumentException iae) {
                 cause = iae;
+            } catch (MalformedURLException me) {
+                cause = me;
             }
             String msg = "not a valid textual representation";
             if (cause != null) {

File: src/test/java/com/fasterxml/jackson/databind/deser/JDKAtomicTypesTest.java
Patch:
@@ -9,7 +9,7 @@
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
-public class TestJDKAtomicTypes
+public class JDKAtomicTypesTest
     extends com.fasterxml.jackson.databind.BaseMapTest
 {
     @JsonTypeInfo(use = JsonTypeInfo.Id.NAME)

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -256,7 +256,7 @@ public enum DeserializationFeature implements ConfigFeature
      *
      * @since 2.9
      */
-    FAIL_ON_EXTERNAL_TYPE_ID_MISSING_PROPERTY(true),
+    FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY(true),
 
     /**
      * Feature that determines whether Jackson code should catch

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
Patch:
@@ -167,7 +167,7 @@ public Object complete(JsonParser p, DeserializationContext ctxt, Object bean)
                 SettableBeanProperty prop = _properties[i].getProperty();
 
                 if(prop.isRequired() ||
-                        ctxt.isEnabled(DeserializationFeature.FAIL_ON_EXTERNAL_TYPE_ID_MISSING_PROPERTY)) {
+                        ctxt.isEnabled(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)) {
                     ctxt.reportMappingException("Missing property '%s' for external type id '%s'",
                             prop.getName(), _properties[i].getTypePropertyName());
                 }

File: src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java
Patch:
@@ -74,6 +74,8 @@ public void testLocale() throws IOException
         assertEquals(quote("es_ES"), MAPPER.writeValueAsString(new Locale("es", "ES")));
         assertEquals(quote("fi_FI_savo"), MAPPER.writeValueAsString(new Locale("FI", "fi", "savo")));
 
+        assertEquals(quote("en_US"), MAPPER.writeValueAsString(Locale.US));
+
         // [databind#1123]
         assertEquals(quote(""), MAPPER.writeValueAsString(Locale.ROOT));
     }

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -391,7 +391,8 @@ public JsonInclude.Value findPropertyInclusion(JsonInclude.Value defValue) {
         if (_annotationIntrospector != null) {
             JsonInclude.Value incl = _annotationIntrospector.findPropertyInclusion(_classInfo);
             if (incl != null) {
-                return defValue.withOverrides(incl);
+                return (defValue == null) ? incl
+                        : defValue.withOverrides(incl);
             }
         }
         return defValue;

File: src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java
Patch:
@@ -230,6 +230,8 @@ public boolean isRequired() {
     /**
      * Method used to check if this property has specific inclusion override
      * associated with it or not.
+     * It should NOT check for any default settings (global, per-type, or
+     * containing POJO settings)
      * 
      * @since 2.5
      */

File: src/test/java/com/fasterxml/jackson/databind/filter/JsonInclude1327Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.filter;
 
 import java.util.*;
 

File: src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java
Patch:
@@ -422,7 +422,7 @@ public String translate(String input)
     public static class LowerCaseWithUnderscoresStrategy extends SnakeCaseStrategy {}
 
     /**
-     * @deprecated In 2.7 use {@link SnakeCaseStrategy} instead
+     * @deprecated In 2.7 use {@link UpperCamelCaseStrategy} instead
      */
     @Deprecated
     public static class PascalCaseStrategy extends UpperCamelCaseStrategy {}

File: src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java
Patch:
@@ -422,7 +422,7 @@ public String translate(String input)
     public static class LowerCaseWithUnderscoresStrategy extends SnakeCaseStrategy {}
 
     /**
-     * @deprecated In 2.7 use {@link SnakeCaseStrategy} instead
+     * @deprecated In 2.7 use {@link UpperCamelCaseStrategy} instead
      */
     @Deprecated
     public static class PascalCaseStrategy extends UpperCamelCaseStrategy {}

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -136,7 +136,7 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
                         "not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow"
                         );
             }
-            if (index >= 0 && index <= _enumsByIndex.length) {
+            if (index >= 0 && index < _enumsByIndex.length) {
                 return _enumsByIndex[index];
             }
             if ((_enumDefaultValue != null)

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -136,7 +136,7 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
                         "not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow"
                         );
             }
-            if (index >= 0 && index <= _enumsByIndex.length) {
+            if (index >= 0 && index < _enumsByIndex.length) {
                 return _enumsByIndex[index];
             }
             if ((_enumDefaultValue != null)

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java
Patch:
@@ -308,7 +308,8 @@ protected TimestampDeserializer withDateFormat(DateFormat df, String formatStrin
         @Override
         public java.sql.Timestamp deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
         {
-            return new Timestamp(_parseDate(jp, ctxt).getTime());
+            Date d = _parseDate(jp, ctxt);
+            return (d == null) ? null : new Timestamp(d.getTime());
         }
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
Patch:
@@ -128,7 +128,7 @@ protected JavaType _narrow(Class<?> subclass)
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
+        // TODO: fix in 2.9
         if (!_class.isAssignableFrom(subclass)) {
             /*
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -1269,6 +1269,8 @@ else if (superClass != null) {
             }
         }
         context.resolveSelfReferences(result);
+        // 16-Jul-2016, tatu: [databind#1302] is solved different way, but ideally we shouldn't
+        //     cache anything with partially resolved `ResolvedRecursiveType`... so maybe improve
         if (!result.hasHandlers()) {
             _typeCache.putIfAbsent(key, result); // cache object syncs
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -441,8 +441,8 @@ public JavaType getParameterType(int index) {
             return _base.getParameterType(index);
         }
 
-        @SuppressWarnings("deprecation")
         @Override
+        @Deprecated
         public Type getGenericParameterType(int index) {
             return _base.getGenericParameterType(index);
         }

File: src/test/java/com/fasterxml/jackson/databind/type/TestLocalTypes.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Failing test related to [databind#609]
  */
-public class TestLocalType609 extends BaseMapTest
+public class TestLocalTypes extends BaseMapTest
 {
     static class EntityContainer {
         RuleForm entity;

File: src/test/java/com/fasterxml/jackson/failing/EnumCreator1291Test.java
Patch:
@@ -1,5 +1,6 @@
 package com.fasterxml.jackson.failing;
 
+import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
@@ -20,6 +21,7 @@ static enum Enum1291 {
             this.name = name;
         }
 
+//        @JsonCreator
         public static Enum1291 fromString(String name) {
             for (Enum1291 type : Enum1291.values()) {
                 if (type.name.equals(name)) {

File: src/test/java/com/fasterxml/jackson/failing/EnumCreatorTest929.java
Patch:
@@ -4,6 +4,8 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.*;
 
+// Ideally should allow multiple-parameter Creator; but not
+// yet allowed or supported
 public class EnumCreatorTest929 extends BaseMapTest
 {
     static enum MyEnum

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -401,8 +401,7 @@ public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
             }
             
             // If not, we'll need to do more thorough forward+backwards resolution. Sigh.
-            // !!! TODO (as of 28-Jan-2016, at least)
-            
+
             // 20-Oct-2015, tatu: Container, Map-types somewhat special. There is
             //    a way to fully resolve and merge hierarchies; but that gets expensive
             //    so let's, for now, try to create close-enough approximation that

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java
Patch:
@@ -19,7 +19,7 @@ public final class AnnotatedConstructor
      * @since 2.1
      */
     protected Serialization _serialization;
-    
+
     /*
     /**********************************************************
     /* Life-cycle

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java
Patch:
@@ -107,6 +107,9 @@ protected Object _deserialize(JsonParser p, DeserializationContext ctxt) throws
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
+            // 02-Jul-2016, tatu: Depending on for JsonParserSequence is initialized it may
+            //   try to access current token; ensure there isn't one
+            p.clearCurrentToken();
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
Patch:
@@ -111,6 +111,9 @@ protected Object _deserialize(JsonParser p, DeserializationContext ctxt) throws
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
+            // 02-Jul-2016, tatu: Depending on for JsonParserSequence is initialized it may
+            //   try to access current token; ensure there isn't one
+            p.clearCurrentToken();
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java
Patch:
@@ -42,7 +42,7 @@ public static CollectionType construct(Class<?> rawType, TypeBindings bindings,
     }
 
     /**
-     * @deprecated Since 2.7, remove from 2.8
+     * @deprecated Since 2.7, remove from 2.9
      */
     @Deprecated // since 2.7
     public static CollectionType construct(Class<?> rawType, JavaType elemT) {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMap1215Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.jsontype;
 
 import java.util.LinkedHashMap;
 import java.util.Map;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java
Patch:
@@ -12,8 +12,11 @@
  * Specialized serializer that can be used as the generic key
  * serializer, when serializing {@link java.util.Map}s to JSON
  * Objects.
+ *
+ * @deprecated Since 2.8, use {@link StdKeySerializers.Default} instead.
  */
 @SuppressWarnings("serial")
+@Deprecated // since 2.8,
 public class StdKeySerializer extends StdSerializer<Object>
 {
     public StdKeySerializer() { super(Object.class); }

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -383,7 +383,7 @@ public void assignSerializer(JsonSerializer<Object> ser) {
      */
     public void assignNullSerializer(JsonSerializer<Object> nullSer) {
         // may need to disable check in future?
-        if (_nullSerializer != null && _nullSerializer != nullSer) {
+        if ((_nullSerializer != null) && (_nullSerializer != nullSer)) {
             throw new IllegalStateException("Can not override null serializer");
         }
         _nullSerializer = nullSer;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -899,7 +899,7 @@ protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, D
                         if (bean.getClass() != _beanType.getRawClass()) {
                             // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
                             //   it's too complicated, so bail out
-                            ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+                            ctxt.reportMappingException("Can not create polymorphic instances with external type ids");
                             return null;
                         }
                         return ext.complete(p, ctxt, bean);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -572,13 +572,11 @@ public void resolve(DeserializationContext ctxt)
                 }
             }
         }
-
         // "any setter" may also need to be resolved now
         if (_anySetter != null && !_anySetter.hasValueDeserializer()) {
             _anySetter = _anySetter.withValueDeserializer(findDeserializer(ctxt,
                     _anySetter.getType(), _anySetter.getProperty()));
         }
-
         // as well as delegate-based constructor:
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
@@ -609,7 +607,9 @@ public void resolve(DeserializationContext ctxt)
         }
 
         if (extTypes != null) {
-            _externalTypeIdHandler = extTypes.build();
+            // 21-Jun-2016, tatu: related to [databind#999], may need to link type ids too,
+            //    so need to pass collected properties
+            _externalTypeIdHandler = extTypes.build(_beanProperties);
             // we consider this non-standard, to offline handling
             _nonStandardCreation = true;
         }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.jsontype;
+package com.fasterxml.jackson.databind.jsontype.ext;
 
 import java.math.BigDecimal;
 import java.util.*;
@@ -12,7 +12,7 @@
 
 // Tests for External type id, one that exists at same level as typed Object,
 // that is, property is not within typed object but a member of its parent.
-public class TestExternalId extends BaseMapTest
+public class ExternalTypeIdTest extends BaseMapTest
 {
     static class ExternalBean
     {

File: src/test/java/com/fasterxml/jackson/failing/ExternalTypeId96Test.java
Patch:
@@ -9,7 +9,7 @@
 
 // Tests for External type id, one that exists at same level as typed Object,
 // that is, property is not within typed object but a member of its parent.
-public class ExternalId96Test extends BaseMapTest
+public class ExternalTypeId96Test extends BaseMapTest
 {
     // for [databind#96]
     static class ExternalBeanWithDefault

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -480,7 +480,7 @@ public abstract Object deserializeSetAndReturn(JsonParser p,
     public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         JsonToken t = p.getCurrentToken();
-        
+
         if (t == JsonToken.VALUE_NULL) {
             return _valueDeserializer.getNullValue(ctxt);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java
Patch:
@@ -33,7 +33,8 @@ public final class SetterlessProperty
     protected final Method _getter;
 
     public SetterlessProperty(BeanPropertyDefinition propDef, JavaType type,
-            TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) {
+            TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method)
+    {
         super(propDef, type, typeDeser, contextAnnotations);
         _annotated = method;
         _getter = method.getAnnotated();

File: src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
Patch:
@@ -175,11 +175,12 @@ public void testGenericSignature1194() throws Exception
         assertEquals("Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", t.getGenericSignature());
     }
 
-    public void testAnchorTypeForRefTypes1206() throws Exception
+    public void testAnchorTypeForRefTypes() throws Exception
     {
         TypeFactory tf = TypeFactory.defaultInstance();
         JavaType t  = tf.constructType(AtomicStringReference.class);
         assertTrue(t.isReferenceType());
+        assertTrue(t.hasContentType());
         ReferenceType rt = (ReferenceType) t;
         assertFalse(rt.isAnchorType());
         assertEquals(AtomicReference.class, rt.getAnchorType().getRawClass());

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -252,6 +252,7 @@ public TypeBindings bindingsForBeanType() {
     }
 
     @Override
+    @Deprecated // since 2.8
     public JavaType resolveType(java.lang.reflect.Type jdkType) {
         if (jdkType == null) {
             return null;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -791,7 +791,7 @@ protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationC
      * in case where object id resolution is required.
      */
     protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext ctxt,
-            SettableBeanProperty prop)
+            SettableBeanProperty prop) throws JsonMappingException
     {
         ObjectIdInfo objectIdInfo = prop.getObjectIdInfo();
         JsonDeserializer<Object> valueDeser = prop.getValueDeserializer();

File: src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsWithIdentity.java
Patch:
@@ -25,7 +25,6 @@ public Parent(@JsonProperty("parentProp") String parentProp) {
 	    }
 	}
 
-
 	public static class Child {
 	    @JsonProperty
 	    Parent parent;
@@ -50,5 +49,6 @@ public void testSimple() throws IOException
 	    assertNotNull(parent);
 	    Child child = JSON_MAPPER.readValue(childStr, Child.class);
 	    assertNotNull(child);
+	    assertNotNull(child.parent);
 	}
 }

File: src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithInjectables538.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.objectid;
 
 import com.fasterxml.jackson.annotation.*;
 
@@ -18,6 +18,7 @@ public A(@JacksonInject("i1") String injected) {
     public static class B {
         public A a;
 
+        @JsonCreator
         public B(@JacksonInject("i2") String injected) {
         }
     } 
@@ -50,8 +51,8 @@ public void testWithInjectables538() throws Exception
             throw new IllegalStateException("Failed to deserialize from JSON '"+json+"'", e);
         }
         assertNotNull(output);
-
         assertNotNull(output.b);
+        assertSame(output, output.b.a);
     }
 }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -247,7 +247,6 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             vd = findConvertingContentDeserializer(ctxt, property, vd);
         }
         final JavaType vt = _mapType.getContentType();
-System.err.println("Map deser for "+_mapType+":\n   vt == "+vt);
         if (vd == null) {
             vd = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
@@ -668,7 +667,7 @@ public void resolveForwardReference(Object id, Object value) throws IOException
      * The resolved object associated with {@link #key} comes before the values in
      * {@link #next}.
      */
-    final static class MapReferring extends Referring {
+    static class MapReferring extends Referring {
         private final MapReferringAccumulator _parent;
 
         public final Map<Object, Object> next = new LinkedHashMap<Object, Object>();

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -285,7 +285,7 @@ public boolean useForType(JavaType t)
             STD_VISIBILITY_CHECKER, null, TypeFactory.defaultInstance(),
             null, StdDateFormat.instance, null,
             Locale.getDefault(),
-            null, // to indicate "use default TimeZone"
+            null, // to indicate "use Jackson default TimeZone" (UTC since Jackson 2.7)
             Base64Variants.getDefaultVariant() // 2.1
     );
 
@@ -1757,7 +1757,7 @@ public ObjectMapper setLocale(Locale l) {
 
     /**
      * Method for overriding default TimeZone to use for formatting.
-     * Default value used is UTC (NOT local timezone).
+     * Default value used is UTC (NOT default TimeZone of JVM).
      */
     public ObjectMapper setTimeZone(TimeZone tz) {
         _deserializationConfig = _deserializationConfig.with(tz);

File: src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java
Patch:
@@ -121,7 +121,8 @@ public final class BaseSettings
     /**
      * Default {@link java.util.TimeZone} used with serialization formats,
      * if (and only if!) explicitly set by use; otherwise `null` to indicate
-     * "use default", which currently (Jackson 2.6) means "GMT"
+     * "use default", which means "UTC" (from Jackson 2.7); earlier versions
+     * (up to 2.6) used "GMT".
      *<p>
      * Note that if a new value is set, timezone is also assigned to
      * {@link #_dateFormat} of this object.

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -56,7 +56,7 @@ public EnumDeserializer(EnumResolver byNameResolver)
     @Deprecated
     public static JsonDeserializer<?> deserializerForCreator(DeserializationConfig config,
             Class<?> enumClass, AnnotatedMethod factory) {
-        return deserializerForCreator(config, enumClass, factory);
+        return deserializerForCreator(config, enumClass, factory, null, null);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java
Patch:
@@ -238,9 +238,8 @@ public Object handleIdValue(final DeserializationContext ctxt, Object bean) thro
                     return idProp.setAndReturn(bean, _idValue);
                 }
             } else {
-                // TODO: is this an error case?
-                ctxt.reportMappingException("No _idValue when handleIdValue called, on instance of %s",
-                        bean.getClass().getName());
+                // 07-Jun-2016, tatu: Trying to improve error messaging here...
+                ctxt.reportUnresolvedObjectId(_objectIdReader, bean);
             }
         }
         return bean;

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -968,9 +968,10 @@ public JsonMappingException mappingException(Class<?> targetClass) {
     }
 
     public JsonMappingException mappingException(Class<?> targetClass, JsonToken token) {
+        String tokenDesc = (token == null) ? "<end of input>" : String.format("%s token", token);
         return JsonMappingException.from(_parser,
-                String.format("Can not deserialize instance of %s out of %s token",
-                        _calcName(targetClass), token));
+                String.format("Can not deserialize instance of %s out of %s",
+                        _calcName(targetClass), tokenDesc));
     }
     
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -219,6 +219,9 @@ protected final ObjectNode deserializeObject(JsonParser p, DeserializationContex
         for (; key != null; key = p.nextFieldName()) {
             JsonNode value;
             JsonToken t = p.nextToken();
+            if (t == null) {
+                throw ctxt.mappingException("Unexpected end-of-input when binding data into ObjectNode");
+            }
             switch (t.id()) {
             case JsonTokenId.ID_START_OBJECT:
                 value = deserializeObject(p, ctxt, nodeFactory);

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java
Patch:
@@ -133,7 +133,7 @@ public PropertyValueBuffer startBuilding(JsonParser p, DeserializationContext ct
     public Object build(DeserializationContext ctxt, PropertyValueBuffer buffer) throws IOException
     {
         Object bean = _valueInstantiator.createFromObjectWith(ctxt,
-                buffer.getParameters(_allProperties));
+                _allProperties, buffer);
         // returning null isn't quite legal, but let's let caller deal with that
         if (bean != null) {
             // Object Id to handle?

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
+import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.fasterxml.jackson.databind.util.*;
@@ -1136,12 +1137,12 @@ public Object handleUnexpectedToken(Class<?> instClass, JsonToken t,
      * @since 2.8
      */
     public JavaType handleUnknownTypeId(JavaType baseType, String id,
-            String extraDesc) throws IOException
+            TypeIdResolver idResolver, String extraDesc) throws IOException
     {
         LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers();
         while (h != null) {
             // Can bail out if it's handled
-            JavaType type = h.value().handleUnknownTypeId(this, baseType, id, extraDesc);
+            JavaType type = h.value().handleUnknownTypeId(this, baseType, id, idResolver, extraDesc);
             if (type != null) {
                 if (type.hasRawClass(Void.class)) {
                     return null;

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java
Patch:
@@ -9,6 +9,7 @@
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
 
 /**
  * This is the class that can be registered (via
@@ -306,7 +307,7 @@ public Object handleMissingInstantiator(DeserializationContext ctxt,
      * @since 2.8
      */
     public JavaType handleUnknownTypeId(DeserializationContext ctxt,
-            JavaType baseType, String subTypeId,
+            JavaType baseType, String subTypeId, TypeIdResolver idResolver,
             String failureMsg)
         throws IOException
     {

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -1082,7 +1082,7 @@ public PropertyName findNameForDeserialization(Annotated a)
         }
         return null;
     }
-    
+
     @Override
     public boolean hasAnySetterAnnotation(AnnotatedMethod am)
     {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
Patch:
@@ -62,7 +62,7 @@ protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOExcepti
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
                 // First: we may have problem handlers that can deal with it?
-                return dctxt.handleUnknownTypeId(_baseType, id, "no such class found");
+                return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
             // ... meaning that we really should never get here.
             return null;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -278,6 +278,6 @@ protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String type
         } else {
             extraDesc = null;
         }
-        return ctxt.handleUnknownTypeId(_baseType, typeId, extraDesc);
+        return ctxt.handleUnknownTypeId(_baseType, typeId, idResolver, extraDesc);
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/filter/ProblemHandlerTest.java
Patch:
@@ -9,6 +9,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
 import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
+import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
 
 /**
  * Tests to exercise handler methods of {@link DeserializationProblemHandler}.
@@ -145,7 +146,7 @@ static class TypeIdHandler
         
         @Override
         public JavaType handleUnknownTypeId(DeserializationContext ctxt,
-                JavaType baseType, String subTypeId,
+                JavaType baseType, String subTypeId, TypeIdResolver idResolver,
                 String failureMsg)
             throws IOException
         {

File: src/test/java/com/fasterxml/jackson/databind/ext/TestJava6Types.java
Patch:
@@ -9,7 +9,7 @@
  * Tests to ensure that we can handle 1.6-only types, even if
  * registrations are done without direct refs
  */
-public class TestJdk16Types extends com.fasterxml.jackson.databind.BaseMapTest
+public class TestJava6Types extends com.fasterxml.jackson.databind.BaseMapTest
 {
     // for [databind#216]
     public void test16Types() throws Exception

File: src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * @since 2.7
  */
-public class TestJdk7Types extends BaseMapTest
+public class TestJava7Types extends BaseMapTest
 {
     public void testPathRoundtrip() throws Exception
     {

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java
Patch:
@@ -119,9 +119,7 @@ public final AnnotatedParameter getParameter(int index) {
      * @deprecated Since 2.7, remove in 2.8
      */
     @Deprecated
-    public final Type getGenericParameterType(int index) {
-        return getRawParameterType(index);
-    }
+    public abstract Type getGenericParameterType(int index);
 
     public final int getAnnotationCount() { return _annotations.size(); }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java
Patch:
@@ -1,5 +1,7 @@
 package com.fasterxml.jackson.databind.jsontype.impl;
 
+import java.io.IOException;
+
 import com.fasterxml.jackson.databind.DatabindContext;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
@@ -52,7 +54,7 @@ public String idFromBaseType() {
     }
 
     @Override
-    public JavaType typeFromId(DatabindContext context, String id) {
+    public JavaType typeFromId(DatabindContext context, String id)  throws IOException {
         // 22-Dec-2015, tatu: Must be overridden by sub-classes, so let's throw
         //    an exception if not
         throw new IllegalStateException("Sub-class "+getClass().getName()+" MUST implement "

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestOverlappingTypeIdNames.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;
 
-public class TestOverlappingTypeIdNames312 extends BaseMapTest
+public class TestOverlappingTypeIdNames extends BaseMapTest
 {
     @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
     @JsonSubTypes({

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.jsontype.impl;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.databind.DatabindContext;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
@@ -48,7 +49,7 @@ public String idFromValue(Object value)
     }
 
     @Override
-    protected JavaType _typeFromId(String id, TypeFactory typeFactory)
+    protected JavaType _typeFromId(String id, DatabindContext ctxt)
     {
         if (id.startsWith(".")) {
             StringBuilder sb = new StringBuilder(id.length() + _basePackageName.length());
@@ -61,6 +62,6 @@ protected JavaType _typeFromId(String id, TypeFactory typeFactory)
             }
             id = sb.toString();
         }
-        return super._typeFromId(id, typeFactory);
+        return super._typeFromId(id, ctxt);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
Patch:
@@ -257,7 +257,7 @@ public boolean hasAnnotation(Class<?> acls) {
     public boolean hasOneOf(Class<? extends Annotation>[] annoClasses) {
         return _classAnnotations().hasOneOf(annoClasses);
     }
-    
+
     @Override
     public Class<?> getRawType() {
         return _class;

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java
Patch:
@@ -71,7 +71,7 @@ public AnnotatedConstructor withAnnotations(AnnotationMap ann) {
     public JavaType getType() {
         return _typeContext.resolveType(getRawType());
     }
-    
+
     @Override
     public Class<?> getRawType() {
         return _constructor.getDeclaringClass();

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java
Patch:
@@ -88,7 +88,7 @@ public Class<?> getRawType() {
 
     @Override
     public JavaType getType() {
-        return _typeContext.resolveType(_type);
+        return _type;
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/NullProvider.java
Patch:
@@ -30,9 +30,9 @@ public NullProvider(JavaType type, Object nullValue)
     public Object nullValue(DeserializationContext ctxt) throws JsonProcessingException
     {
         if (_isPrimitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
-            throw ctxt.mappingException("Can not map JSON null into type %s"
-                    +" (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
-                    _rawType.getName());                    
+            throw ctxt.mappingException(String.format(
+                    "Can not map JSON null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
+                    _rawType.getName()));
         }
         return _nullValue;
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -315,6 +315,7 @@ public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,
      * throw an exception, or try to handle value as if member of implicit
      * array, depending on configuration.
      */
+    @SuppressWarnings("unchecked")
     protected final Collection<Object> handleNonArray(JsonParser p, DeserializationContext ctxt,
             Collection<Object> result)
         throws IOException
@@ -324,8 +325,7 @@ protected final Collection<Object> handleNonArray(JsonParser p, DeserializationC
                 ((_unwrapSingle == null) &&
                         ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));
         if (!canWrap) {
-            ctxt.reportMappingException(_collectionType.getRawClass());
-            return null;
+            return (Collection<Object>) ctxt.handleUnexpectedToken(_collectionType.getRawClass(), p);
         }
         JsonDeserializer<Object> valueDes = _valueDeserializer;
         final TypeDeserializer typeDeser = _valueTypeDeserializer;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -266,13 +266,13 @@ protected Object[] handleNonArray(JsonParser p, DeserializationContext ctxt)
                         ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));
         if (!canWrap) {
             // One exception; byte arrays are generally serialized as base64, so that should be handled
-            if (p.getCurrentToken() == JsonToken.VALUE_STRING
+            JsonToken t = p.getCurrentToken();
+            if (t == JsonToken.VALUE_STRING
                     // note: not `byte[]`, but `Byte[]` -- former is primitive array
                     && _elementClass == Byte.class) {
                 return deserializeFromBase64(p, ctxt);
             }
-            ctxt.reportMappingException(_arrayType.getRawClass());
-            return null;
+            return (Object[]) ctxt.handleUnexpectedToken(_arrayType.getRawClass(), p);
         }
         JsonToken t = p.getCurrentToken();
         Object value;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java
Patch:
@@ -62,8 +62,7 @@ public StackTraceElement deserialize(JsonParser p, DeserializationContext ctxt)
             }
             return value;
         }
-        ctxt.reportMappingException(_valueClass, t);
-        return null;
+        return (StackTraceElement) ctxt.handleUnexpectedToken(_valueClass, p);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
Patch:
@@ -184,7 +184,6 @@ private final String[] handleNonArray(JsonParser p, DeserializationContext ctxt)
                 return null;
             }
         }
-        ctxt.reportMappingException(_valueClass);
-        return null;
+        return (String[]) ctxt.handleUnexpectedToken(_valueClass, p);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -249,15 +249,15 @@ public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, Typ
      * throw an exception, or try to handle value as if member of implicit
      * array, depending on configuration.
      */
+    @SuppressWarnings("unchecked")
     private final Collection<String> handleNonArray(JsonParser p, DeserializationContext ctxt, Collection<String> result) throws IOException
     {
         // implicit arrays from single values?
         boolean canWrap = (_unwrapSingle == Boolean.TRUE) ||
                 ((_unwrapSingle == null) &&
                         ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));
         if (!canWrap) {
-            ctxt.reportMappingException(_collectionType.getRawClass());
-            return null;
+            return (Collection<String>) ctxt.handleUnexpectedToken(_collectionType.getRawClass(), p);
         }
         // Strings are one of "native" (intrinsic) types, so there's never type deserializer involved
         JsonDeserializer<String> valueDes = _valueDeserializer;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java
Patch:
@@ -57,8 +57,7 @@ public String deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
         if (text != null) {
             return text;
         }
-        ctxt.reportMappingException(_valueClass, p.getCurrentToken());
-        return null;
+        return (String) ctxt.handleUnexpectedToken(_valueClass, p);
     }
 
     // Since we can never have type info ("natural type"; String, Boolean, Integer, Double):

File: src/test/java/com/fasterxml/jackson/databind/deser/TestValueAnnotations.java
Patch:
@@ -73,8 +73,7 @@ public RootString deserialize(JsonParser p, DeserializationContext ctxt)
             if (p.hasToken(JsonToken.VALUE_STRING)) {
                 return new RootStringImpl(p.getText());
             }
-            ctxt.reportMappingException(_valueClass);
-            return null;
+            return (RootString) ctxt.handleUnexpectedToken(_valueClass, p);
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/node/TextNode.java
Patch:
@@ -57,9 +57,9 @@ public String textValue() {
      * base64 encoded; if so, they are decoded and resulting binary
      * data is returned.
      */
+    @SuppressWarnings("resource")
     public byte[] getBinaryValue(Base64Variant b64variant) throws IOException
     {
-        @SuppressWarnings("resource")
         ByteArrayBuilder builder = new ByteArrayBuilder(100);
         final String str = _value;
         int ptr = 0;

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -28,6 +28,7 @@ public class StringArraySerializer
     /* Note: not clean in general, but we are betting against
      * anyone re-defining properties of String.class here...
      */
+    @SuppressWarnings("deprecation")
     private final static JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(String.class);
 
     public final static StringArraySerializer instance = new StringArraySerializer();

File: src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java
Patch:
@@ -149,7 +149,7 @@ public void testBrokenAnnotation() throws Exception
         try {
             serializeAsString(MAPPER, new BrokenClass());
         } catch (Exception e) {
-            verifyException(e, "not a super-type of");
+            verifyException(e, "types not related");
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java
Patch:
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.Deserializers;
 import com.fasterxml.jackson.databind.ser.Serializers;
-import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
 
 /**
  * Helper class used for isolating details of handling optional+external types

File: src/test/java/com/fasterxml/jackson/databind/ext/TestJdk7Types.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.nio.file.FileSystem;
 import java.nio.file.Path;
-import java.nio.file.Paths;
 
 import com.fasterxml.jackson.databind.*;
+
 import com.google.common.jimfs.Configuration;
 import com.google.common.jimfs.Jimfs;
 
@@ -28,5 +28,6 @@ public void testPathRoundtrip() throws Exception
         
         assertEquals(input.toUri(), p.toUri());
         assertEquals(input, p);
+        fs.close();
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ext/Java7Support.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ext;
 
 import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.PropertyName;
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
@@ -42,4 +43,6 @@ public static Java7Support instance() {
     public abstract Class<?> getClassJavaNioFilePath();
 
     public abstract JsonDeserializer<?> getDeserializerForJavaNioFilePath(Class<?> rawType);
+
+    public abstract JsonSerializer<?> getSerializerForJavaNioFilePath(Class<?> rawType);
 }

File: src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java
Patch:
@@ -85,9 +85,9 @@ public JsonSerializer<?> findSerializer(SerializationConfig config, JavaType typ
         final Class<?> rawType = type.getRawClass();
 
         if (_jdk7Helper != null) {
-            Class<?> path = _jdk7Helper.getClassJavaNioFilePath();
-            if (path.isAssignableFrom(rawType)) {
-                return ToStringSerializer.instance;
+            JsonSerializer<?> ser = _jdk7Helper.getSerializerForJavaNioFilePath(rawType);
+            if (ser != null) {
+                return ser;
             }
         }
         if ((CLASS_DOM_NODE != null) && CLASS_DOM_NODE.isAssignableFrom(rawType)) {

File: src/main/java/com/fasterxml/jackson/databind/ext/Java7Support.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ext;
 
 import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.PropertyName;
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
@@ -42,4 +43,6 @@ public static Java7Support instance() {
     public abstract Class<?> getClassJavaNioFilePath();
 
     public abstract JsonDeserializer<?> getDeserializerForJavaNioFilePath(Class<?> rawType);
+
+    public abstract JsonSerializer<?> getSerializerForJavaNioFilePath(Class<?> rawType);
 }

File: src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java
Patch:
@@ -85,9 +85,9 @@ public JsonSerializer<?> findSerializer(SerializationConfig config, JavaType typ
         final Class<?> rawType = type.getRawClass();
 
         if (_jdk7Helper != null) {
-            Class<?> path = _jdk7Helper.getClassJavaNioFilePath();
-            if (path.isAssignableFrom(rawType)) {
-                return ToStringSerializer.instance;
+            JsonSerializer<?> ser = _jdk7Helper.getSerializerForJavaNioFilePath(rawType);
+            if (ser != null) {
+                return ser;
             }
         }
         if ((CLASS_DOM_NODE != null) && CLASS_DOM_NODE.isAssignableFrom(rawType)) {

File: src/test/java/com/fasterxml/jackson/databind/misc/CaseInsensitiveDeserTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.*;
 
-public class CaseInsensitiveDeser extends BaseMapTest
+public class CaseInsensitiveDeserTest extends BaseMapTest
 {
     // [databind#1036]
     static class BaseResponse {
@@ -45,7 +45,7 @@ static class Issue476Type {
     // [databind#566]
     public void testCaseInsensitiveDeserialization() throws Exception
     {
-     final String JSON = "{\"Value1\" : {\"nAme\" : \"fruit\", \"vALUe\" : \"apple\"}, \"valUE2\" : {\"NAME\" : \"color\", \"value\" : \"red\"}}";
+        final String JSON = "{\"Value1\" : {\"nAme\" : \"fruit\", \"vALUe\" : \"apple\"}, \"valUE2\" : {\"NAME\" : \"color\", \"value\" : \"red\"}}";
         
         // first, verify default settings which do not accept improper case
         ObjectMapper mapper = new ObjectMapper();
@@ -62,7 +62,7 @@ public void testCaseInsensitiveDeserialization() throws Exception
 
         // Definitely not OK to enable dynamically - the BeanPropertyMap (which is the consumer of this particular feature) gets cached.
         mapper = new ObjectMapper();
-        mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);
+        mapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);
         ObjectReader r = mapper.readerFor(Issue476Bean.class);
         Issue476Bean result = r.readValue(JSON);
         assertEquals(result.value1.name, "fruit");

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -453,6 +453,9 @@ public void prependPath(Reference r)
     /**********************************************************
      */
 
+    @Override // since 2.7.5
+    public Object getProcessor() { return _processor; }
+
     @Override
     public String getLocalizedMessage() {
         return _buildMessage();

File: src/test/java/com/fasterxml/jackson/databind/filter/TestUnknownPropertyDeserialization.java
Patch:
@@ -42,7 +42,7 @@ public TestBean() { }
      * just marks unknown property/ies when encountered, along with
      * Json value of the property.
      */
-    final static class MyHandler
+    static class MyHandler
         extends DeserializationProblemHandler
     {
         @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -780,7 +780,7 @@ protected java.util.Date _parseDate(JsonParser p, DeserializationContext ctxt)
             return (java.util.Date) getNullValue(ctxt);
         }
         if (t == JsonToken.VALUE_STRING) {
-            return _parseDate(p.getText(), ctxt);
+            return _parseDate(p.getText().trim(), ctxt);
         }
         // [databind#381]
         if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {

File: src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java
Patch:
@@ -124,7 +124,7 @@ public void testErrorReporting() throws Exception
         try {
             MAPPER.readValue("{\"boolProp\":\"foobar\"}", BooleanBean.class);
         } catch (JsonMappingException e) {
-            verifyException(e, "from String value (\"foobar\")");
+            verifyException(e, "Can not deserialize value of type boolean from String");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java
Patch:
@@ -516,7 +516,7 @@ public void testInvalidFormat() throws Exception
             MAPPER.readValue(quote("foobar"), Date.class);
             fail("Should have failed with an exception");
         } catch (InvalidFormatException e) {
-            verifyException(e, "Can not construct instance");
+            verifyException(e, "Can not deserialize value of type java.util.Date from String");
             assertEquals("foobar", e.getValue());
             assertEquals(Date.class, e.getTargetType());
         } catch (Exception e) {

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java
Patch:
@@ -133,7 +133,7 @@ public PropertyValueBuffer startBuilding(JsonParser p, DeserializationContext ct
     public Object build(DeserializationContext ctxt, PropertyValueBuffer buffer) throws IOException
     {
         Object bean = _valueInstantiator.createFromObjectWith(ctxt,
-                buffer.getParameters(_allProperties));
+                _allProperties, buffer);
         // returning null isn't quite legal, but let's let caller deal with that
         if (bean != null) {
             // Object Id to handle?

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -544,8 +544,9 @@ protected void addBeanProps(DeserializationContext ctxt,
                     }
                 }
                 if (cprop == null) {
-                    throw ctxt.mappingException("Could not find creator property with name '%s' (in class %s)",
+                    ctxt.reportMappingException("Could not find creator property with name '%s' (in class %s)",
                             name, beanDesc.getBeanClass().getName());
+                    continue;
                 }
                 if (prop != null) {
                     cprop.setFallbackSetter(prop);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java
Patch:
@@ -133,7 +133,8 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
             return _factory.callOnWith(_valueClass, value);
         } catch (Exception e) {
             Throwable t = ClassUtil.throwRootCauseIfIOE(e);
-            return ctxt.reportInstantiationException(_valueClass, t);
+            ctxt.reportInstantiationException(_valueClass, t);
+            return null;
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
Patch:
@@ -159,8 +159,9 @@ public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOExcepti
 
     protected T _deserializeEmbedded(Object ob, DeserializationContext ctxt) throws IOException {
         // default impl: error out
-        throw ctxt.mappingException("Don't know how to convert embedded Object of type %s into %s",
+        ctxt.reportMappingException("Don't know how to convert embedded Object of type %s into %s",
                 ob.getClass().getName(), _valueClass.getName());
+        return null;
     }
 
     protected T _deserializeFromEmptyString() throws IOException {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -132,7 +132,7 @@ protected PrimitiveOrWrapperDeserializer(Class<T> vc, T nvl) {
         public final T getNullValue(DeserializationContext ctxt) throws JsonMappingException
         {
             if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
-                throw ctxt.mappingException(
+                ctxt.reportMappingException(
                         "Can not map JSON null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
                         handledType().toString());
             }
@@ -150,7 +150,7 @@ public T getEmptyValue(DeserializationContext ctxt) throws JsonMappingException
             // [databind#1095]: Should not allow coercion from into null from Empty String
             // either, if `null` not allowed
             if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
-                throw ctxt.mappingException(
+                ctxt.reportMappingException(
                         "Can not map Empty String as null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
                         handledType().toString());
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -1114,7 +1114,7 @@ protected void handleMissingEndArrayForSingle(JsonParser p, DeserializationConte
     protected void _failDoubleToIntCoercion(JsonParser p, DeserializationContext ctxt,
             String type) throws IOException
     {
-        throw ctxt.mappingException("Can not coerce a floating-point value ('%s') into %s; enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow",
+        ctxt.reportMappingException("Can not coerce a floating-point value ('%s') into %s; enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow",
                         p.getValueAsString(), type);
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue.java
Patch:
@@ -70,8 +70,9 @@ static class DataADeserializer extends StdDeserializer<DataA> {
         @Override
         public DataA deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
             if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-                throw ctxt.mappingException("Wrong current token, expected START_OBJECT, got: %s",
+                ctxt.reportMappingException("Wrong current token, expected START_OBJECT, got: %s",
                         p.getCurrentToken());
+                return null;
             }
             /*JsonNode node =*/ p.readValueAsTree();
 

File: src/test/java/com/fasterxml/jackson/databind/module/TestCustomEnumKeyDeserializer.java
Patch:
@@ -71,7 +71,8 @@ public Object deserializeKey(String key, DeserializationContext ctxt) throws IOE
             try {
                 return TestEnum.lookup(key);
             } catch (IllegalArgumentException e) {
-                return ctxt.reportWeirdKeyException(TestEnum.class, key, "Unknown code");
+                ctxt.reportWeirdKeyException(TestEnum.class, key, "Unknown code");
+                return null;
             }
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -1039,7 +1039,10 @@ public JsonMappingException weirdNumberException(Number value, Class<?> instClas
      * Helper method for constructing exception to indicate that given JSON
      * Object field name was not in format to be able to deserialize specified
      * key type.
+     * 
+     * @deprecated Since 2.8 use {@link #reportWeirdKeyException} instead
      */
+    @Deprecated
     public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg) {
         return InvalidFormatException.from(_parser,
                 String.format("Can not construct Map key of type %s from String (%s): %s",

File: src/test/java/com/fasterxml/jackson/databind/deser/EnumDeserializationTest.java
Patch:
@@ -134,7 +134,7 @@ protected AnEnum _deserialize(String value, DeserializationContext ctxt) throws
             try {
                 return AnEnum.valueOf(value);
             } catch (IllegalArgumentException e) {
-                throw ctxt.weirdKeyException(AnEnum.class, value, "Undefined AnEnum code");
+                return ctxt.reportWeirdKeyException(AnEnum.class, value, "Undefined AnEnum code");
             }
         }
     }
@@ -146,7 +146,7 @@ public Object deserializeKey(String key, DeserializationContext ctxt) throws IOE
             try {
                 return AnEnum.valueOf(key);
             } catch (IllegalArgumentException e) {
-                throw ctxt.weirdKeyException(AnEnum.class, key, "Undefined AnEnum code");
+                return ctxt.reportWeirdKeyException(AnEnum.class, key, "Undefined AnEnum code");
             }
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/module/TestCustomEnumKeyDeserializer.java
Patch:
@@ -71,7 +71,7 @@ public Object deserializeKey(String key, DeserializationContext ctxt) throws IOE
             try {
                 return TestEnum.lookup(key);
             } catch (IllegalArgumentException e) {
-                throw ctxt.weirdKeyException(TestEnum.class, key, "Unknown code");
+                return ctxt.reportWeirdKeyException(TestEnum.class, key, "Unknown code");
             }
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -172,7 +172,8 @@ protected final Object _deserializeOther(JsonParser p, DeserializationContext ct
     }
 
     protected Object _missingToken(JsonParser p, DeserializationContext ctxt) throws IOException {
-        throw ctxt.endOfInputException(handledType());
+        ctxt.reportEndOfInputException(handledType());
+        return null;
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1285,8 +1285,7 @@ public Object deserializeFromArray(JsonParser p, DeserializationContext ctxt) th
             }
             final Object value = deserialize(p, ctxt);
             if (p.nextToken() != JsonToken.END_ARRAY) {
-                throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, 
-                        "Attempted to unwrap single value array for single '" + _valueClass.getName() + "' value but there was more than a single value in the array");
+                handleMissingEndArrayForSingle(p, ctxt);
             }
             return value;
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java
Patch:
@@ -166,8 +166,7 @@ protected java.util.Date _parseDate(JsonParser p, DeserializationContext ctxt)
                     final Date parsed = _parseDate(p, ctxt);
                     t = p.nextToken();
                     if (t != JsonToken.END_ARRAY) {
-                        throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, 
-                                "Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array");
+                        handleMissingEndArrayForSingle(p, ctxt);
                     }            
                     return parsed;            
                 }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -203,8 +203,7 @@ protected Object _deserializeOther(JsonParser p, DeserializationContext ctxt) th
             final Object parsed = deserialize(p, ctxt);
             curr = p.nextToken();
             if (curr != JsonToken.END_ARRAY) {
-                throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,
-                        "Attempted to unwrap single value array for single '" + _enumClass().getName() + "' value but there was more than a single value in the array");
+                handleMissingEndArrayForSingle(p, ctxt);
             }
             return parsed;
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
Patch:
@@ -105,8 +105,7 @@ public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOExcepti
             p.nextToken();
             final T value = deserialize(p, ctxt);
             if (p.nextToken() != JsonToken.END_ARRAY) {
-                throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, 
-                                "Attempted to unwrap single value array for single '" + _valueClass.getName() + "' value but there was more than a single value in the array");
+                handleMissingEndArrayForSingle(p, ctxt);
             }
             return value;
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java
Patch:
@@ -36,8 +36,7 @@ public String deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
             p.nextToken();
             final String parsed = _parseString(p, ctxt);
             if (p.nextToken() != JsonToken.END_ARRAY) {
-                throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, 
-                        "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array");
+                handleMissingEndArrayForSingle(p, ctxt);
             }            
             return parsed;            
         }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
Patch:
@@ -150,8 +150,9 @@ protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, Deserialization
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
-        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
+        return null;
     }
 
     /* Also need to re-route "unknown" version. Need to think

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
Patch:
@@ -93,11 +93,11 @@ protected Object _deserialize(JsonParser p, DeserializationContext ctxt) throws
         if (t == JsonToken.START_OBJECT) {
             // should always get field name, but just in case...
             if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
         } else if (t != JsonToken.FIELD_NAME) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+            ctxt.reportWrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
         final String typeId = p.getText();
@@ -118,7 +118,7 @@ protected Object _deserialize(JsonParser p, DeserializationContext ctxt) throws
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+            ctxt.reportWrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -270,6 +270,7 @@ protected JsonDeserializer<Object> _handleUnknownTypeId(DeserializationContext c
         } else {
             extraDesc = null;
         }
-        throw ctxt.unknownTypeException(_baseType, typeId, extraDesc);
+        ctxt.reportUnknownTypeException(_baseType, typeId, extraDesc);
+        return null;
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1256,6 +1256,9 @@ public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,
                             deser = EnumDeserializer.deserializerForCreator(config, enumClass, factory, valueInstantiator, creatorProps);
                             break;
                         }
+                    } else if (argCount == 0) { // [databind#960]
+                        deser = EnumDeserializer.deserializerForNoArgsCreator(config, enumClass, factory);
+                        break;
                     }
                     throw new IllegalArgumentException("Unsuitable method ("+factory+") decorated with @JsonCreator (for Enum type "
                             +enumClass.getName()+")");

File: src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
Patch:
@@ -241,6 +241,9 @@ protected String buildCanonicalName()
 
     @Override
     public boolean isContainerType() { return false; }
+    
+    @Override
+    public boolean hasContentType() { return false; }
 
     @Override
     public StringBuilder getErasedSignature(StringBuilder sb) {

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java
Patch:
@@ -157,7 +157,7 @@ public void serializeWithType(T value, JsonGenerator gen, SerializerProvider ser
         if (clz == null) {
             clz = value.getClass();
         }
-        serializers.reportMappingException("Type id handling not implemented for type %s (by serializer of type %s)",
+        serializers.reportMappingProblem("Type id handling not implemented for type %s (by serializer of type %s)",
                 clz.getName(), getClass().getName());
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java
Patch:
@@ -45,7 +45,7 @@ public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider p
             return;
         }
         if (!(value instanceof Map<?,?>)) {
-            provider.reportMappingException("Value returned by 'any-getter' %s() not java.util.Map but %s",
+            provider.reportMappingProblem("Value returned by 'any-getter' %s() not java.util.Map but %s",
                     _accessor.getName(), value.getClass().getName());
         }
         // 23-Feb-2015, tatu: Nasty, but has to do (for now)
@@ -68,7 +68,7 @@ public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider prov
             return;
         }
         if (!(value instanceof Map<?,?>)) {
-            provider.reportMappingException("Value returned by 'any-getter' (%s()) not java.util.Map but %s",
+            provider.reportMappingProblem("Value returned by 'any-getter' (%s()) not java.util.Map but %s",
                     _accessor.getName(), value.getClass().getName());
         }
         // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -907,7 +907,7 @@ protected boolean _handleSelfReference(Object bean, JsonGenerator gen,
             // (something
             // OTHER than {@link BeanSerializerBase}
             if (ser instanceof BeanSerializerBase) {
-                prov.reportMappingException("Direct self-reference leading to cycle");
+                prov.reportMappingProblem("Direct self-reference leading to cycle");
             }
         }
         return false;

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java
Patch:
@@ -66,7 +66,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
 
     protected void failForEmpty(SerializerProvider prov, Object value)
             throws JsonMappingException {
-        prov.reportMappingException("No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)",
+        prov.reportMappingProblem("No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)",
                 value.getClass().getName());
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java
Patch:
@@ -126,7 +126,7 @@ public void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider
     		TypeSerializer typeSer) throws IOException
     {
         if (provider.isEnabled(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS)) {
-            provider.reportMappingException("Unwrapped property requires use of type information: can not serialize without disabling `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`");
+            provider.reportMappingProblem("Unwrapped property requires use of type information: can not serialize without disabling `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`");
         }
         gen.setCurrentValue(bean); // [databind#631]
         if (_objectIdWriter != null) {

File: src/test/java/com/fasterxml/jackson/databind/filter/IgnorePropertyOnDeser1217Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.filter;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.databind.BaseMapTest;

File: src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java
Patch:
@@ -103,7 +103,7 @@ public final class DeserializationConfig
      */
     public DeserializationConfig(BaseSettings base,
             SubtypeResolver str, SimpleMixInResolver mixins,
-            RootNameLookup rootNames, PropertyConfigOverrides propertyOverrides)
+            RootNameLookup rootNames, TypeConfigOverrides propertyOverrides)
     {
         super(base, str, mixins, rootNames, propertyOverrides);
         _deserFeatures = collectFeatureDefaults(DeserializationFeature.class);
@@ -246,7 +246,7 @@ protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver m
      * @since 2.8
      */
     protected DeserializationConfig(DeserializationConfig src, SimpleMixInResolver mixins,
-            RootNameLookup rootNames, PropertyConfigOverrides propertyOverrides)
+            RootNameLookup rootNames, TypeConfigOverrides propertyOverrides)
     {
         super(src, mixins, rootNames, propertyOverrides);
         _deserFeatures = src._deserFeatures;
@@ -804,7 +804,7 @@ public JsonInclude.Value getDefaultPropertyInclusion() {
 
     @Override
     public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) {
-        PropertyConfigOverride overrides = findPropertyConfigOverride(baseType);
+        TypeConfigOverride overrides = findPropertyConfigOverride(baseType);
         if (overrides != null) {
             JsonInclude.Value v = overrides.getInclude();
             if (v != null) {

File: src/main/java/com/fasterxml/jackson/databind/Module.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.databind.cfg.MutablePropertyConfigOverride;
+import com.fasterxml.jackson.databind.cfg.MutableTypeConfigOverride;
 import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
 import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
 import com.fasterxml.jackson.databind.deser.Deserializers;
@@ -168,7 +168,7 @@ public static interface SetupContext
          *
          * @since 2.8
          */
-        public MutablePropertyConfigOverride configOverride(Class<?> type);
+        public MutableTypeConfigOverride configOverride(Class<?> type);
         
         /*
         /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java
Patch:
@@ -132,7 +132,7 @@ public final class SerializationConfig
      */
     public SerializationConfig(BaseSettings base,
             SubtypeResolver str, SimpleMixInResolver mixins,
-            RootNameLookup rootNames, PropertyConfigOverrides propertyOverrides)
+            RootNameLookup rootNames, TypeConfigOverrides propertyOverrides)
     {
         super(base, str, mixins, rootNames, propertyOverrides);
         _serFeatures = collectFeatureDefaults(SerializationFeature.class);
@@ -304,7 +304,7 @@ protected SerializationConfig(SerializationConfig src, PrettyPrinter defaultPP)
      * @since 2.8
      */
     protected SerializationConfig(SerializationConfig src, SimpleMixInResolver mixins,
-            RootNameLookup rootNames, PropertyConfigOverrides propertyOverrides)
+            RootNameLookup rootNames, TypeConfigOverrides propertyOverrides)
     {
         super(src, mixins, rootNames, propertyOverrides);
         _serFeatures = src._serFeatures;
@@ -905,7 +905,7 @@ public JsonInclude.Value getDefaultPropertyInclusion() {
 
     @Override
     public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) {
-        PropertyConfigOverride overrides = findPropertyConfigOverride(baseType);
+        TypeConfigOverride overrides = findPropertyConfigOverride(baseType);
         if (overrides != null) {
             JsonInclude.Value v = overrides.getInclude();
             if (v != null) {

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java
Patch:
@@ -374,15 +374,15 @@ public BeanDescription introspectDirectClassAnnotations(Class<?> cls) {
     public abstract JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType);
 
     /**
-     * Accessor for finding possible {@link PropertyConfigOverride} to use for
+     * Accessor for finding possible {@link TypeConfigOverride} to use for
      * properties of given type. Note that only directly associate override
      * is found; no type hierarchy traversal is performed.
      *
      * @since 2.8
      * 
      * @return Override object if there is an override for specified type; `null` if not
      */
-    public abstract PropertyConfigOverride findPropertyConfigOverride(Class<?> type);
+    public abstract TypeConfigOverride findPropertyConfigOverride(Class<?> type);
 
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/cfg/TypeConfigOverride.java
Patch:
@@ -12,7 +12,7 @@
  *
  * @since 2.8
  */
-public abstract class PropertyConfigOverride
+public abstract class TypeConfigOverride
 {
     protected JsonFormat.Value _format;
     protected JsonInclude.Value _include;
@@ -25,8 +25,8 @@ public abstract class PropertyConfigOverride
      */
     protected Boolean _isIgnoredType;
     
-    protected PropertyConfigOverride() { }
-    protected PropertyConfigOverride(PropertyConfigOverride src) {
+    protected TypeConfigOverride() { }
+    protected TypeConfigOverride(TypeConfigOverride src) {
         _format = src._format;
         _include = src._include;
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
-import com.fasterxml.jackson.databind.cfg.PropertyConfigOverride;
+import com.fasterxml.jackson.databind.cfg.TypeConfigOverride;
 import com.fasterxml.jackson.databind.deser.impl.*;
 import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;
 import com.fasterxml.jackson.databind.introspect.*;
@@ -825,7 +825,7 @@ protected boolean isIgnorableType(DeserializationConfig config, BeanDescription
             return status.booleanValue();
         }
         // 21-Apr-2016, tatu: For 2.8, can specify config overrides
-        PropertyConfigOverride override = config.findPropertyConfigOverride(type);
+        TypeConfigOverride override = config.findPropertyConfigOverride(type);
         if (override != null) {
             status = override.getIsIgnoredType();
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.annotation.ObjectIdGenerators;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.cfg.PropertyConfigOverride;
+import com.fasterxml.jackson.databind.cfg.TypeConfigOverride;
 import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
 import com.fasterxml.jackson.databind.introspect.*;
 import com.fasterxml.jackson.databind.jsontype.NamedType;
@@ -701,7 +701,7 @@ protected void removeIgnorableTypes(SerializationConfig config, BeanDescription
             Boolean result = ignores.get(type);
             if (result == null) {
                 // 21-Apr-2016, tatu: For 2.8, can specify config overrides
-                PropertyConfigOverride override = config.findPropertyConfigOverride(type);
+                TypeConfigOverride override = config.findPropertyConfigOverride(type);
                 if (override != null) {
                     result = override.getIsIgnoredType();
                 }

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java
Patch:
@@ -380,7 +380,7 @@ public BeanDescription introspectDirectClassAnnotations(Class<?> cls) {
      *
      * @since 2.8
      * 
-     * @return Override object if there is an override for specified type
+     * @return Override object if there is an override for specified type; `null` if not
      */
     public abstract PropertyConfigOverride findPropertyConfigOverride(Class<?> type);
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java
Patch:
@@ -82,8 +82,8 @@ public AnnotatedMethod withAnnotations(AnnotationMap ann) {
 
     /**
      * For methods, this returns declared return type, which is only
-     * useful with getters (setters do not return anything; hence "void"
-     * type is returned here)
+     * useful with getters (setters do not return anything; hence `Void`
+     * would be returned here)
      */
     @Override
     public JavaType getType() {

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -867,7 +867,7 @@ protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr,
         }
         // now, then, we need a placeholder for member (no real Field/Method):
         AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),
-                attrName, type.getRawClass());
+                attrName, type);
         // and with that and property definition
         SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,
                 member, propName, metadata, attr.include());
@@ -885,7 +885,7 @@ protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop,
         JavaType type = config.constructType(prop.type());
         // now, then, we need a placeholder for member (no real Field/Method):
         AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(),
-                propName.getSimpleName(), type.getRawClass());
+                propName.getSimpleName(), type);
         // and with that and property definition
         SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,
                 member, propName, metadata, prop.include());

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -234,7 +234,7 @@ public JsonSerializer<Object> createKeySerializer(SerializationConfig config,
                         if (config.canOverrideAccessModifiers()) {
                             ClassUtil.checkAndFixAccess(m, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                         }
-                        ser = new JsonValueSerializer(m, delegate);
+                        ser = new JsonValueSerializer(am, delegate);
                     } else {
                         ser = StdKeySerializers.getFallbackKeySerializer(config, keyType.getRawClass());
                     }
@@ -353,7 +353,7 @@ protected final JsonSerializer<?> findSerializerByAnnotations(SerializerProvider
                 ClassUtil.checkAndFixAccess(m, prov.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
             }
             JsonSerializer<Object> ser = findSerializerFromAnnotation(prov, valueMethod);
-            return new JsonValueSerializer(m, ser);
+            return new JsonValueSerializer(valueMethod, ser);
         }
         // No well-known annotations...
         return null;

File: src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest.java
Patch:
@@ -100,7 +100,8 @@ public void format(JsonValueFormat format) { }
     public void testEnumWithJsonValue() throws Exception
     {
         final Set<String> values = new TreeSet<String>();
-        MAPPER.acceptJsonFormatVisitor(TestEnumWithJsonValue.class, new JsonFormatVisitorWrapper.Base() {
+        MAPPER.acceptJsonFormatVisitor(TestEnumWithJsonValue.class,
+                new JsonFormatVisitorWrapper.Base() {
             @Override
             public JsonStringFormatVisitor expectStringFormat(JavaType type) {
                 return new JsonStringFormatVisitor() {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java
Patch:
@@ -212,9 +212,9 @@ protected CalendarDeserializer withDateFormat(DateFormat df, String formatString
         }
         
         @Override
-        public Calendar deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
+        public Calendar deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            Date d = _parseDate(jp, ctxt);
+            Date d = _parseDate(p, ctxt);
             if (d == null) {
                 return null;
             }

File: src/main/java/com/fasterxml/jackson/databind/node/POJONode.java
Patch:
@@ -26,8 +26,7 @@ public class POJONode
      */
 
     @Override
-    public JsonNodeType getNodeType()
-    {
+    public JsonNodeType getNodeType() {
         return JsonNodeType.POJO;
     }
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
+
 import com.fasterxml.jackson.databind.*;
 
 public class PolymorphicViaRefTypeTest extends BaseMapTest
@@ -35,7 +36,7 @@ static class TypeInfoAtomic {
 
     private final ObjectMapper MAPPER = objectMapper();
 
-    public void testOptionalWithAtomic() throws Exception
+    public void testPolymorphicAtomicRefProperty() throws Exception
     {
         TypeInfoAtomic data = new TypeInfoAtomic();
         data.value = new AtomicReference<BaseForAtomic>(new ImplForAtomic(42));

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1869,7 +1869,7 @@ protected JavaType resolveType(DeserializationContext ctxt,
             }
         }
 
-        if (type.getContentType() != null) { // container type or reference type
+        if (type.isContainerType() || type.isReferenceType()) {
             Object cdDef = intr.findContentDeserializer(member);
             JsonDeserializer<?> cd = ctxt.deserializerInstance(member, cdDef);
             if (cd != null) {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractContainers.java
Patch:
@@ -6,7 +6,7 @@
 import com.fasterxml.jackson.databind.*;
 
 /**
- * For [Issue#292]
+ * For [databind#292]
  */
 @SuppressWarnings("serial")
 public class TestAbstractContainers extends BaseMapTest

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer.java
Patch:
@@ -224,7 +224,7 @@ public boolean isEmpty(SerializerProvider provider, AtomicReference<?> value)
         JsonSerializer<Object> ser = _valueSerializer;
         if (ser == null) {
             try {
-                ser = _findCachedSerializer(provider, value.getClass());
+                ser = _findCachedSerializer(provider, contents.getClass());
             } catch (JsonMappingException e) { // nasty but necessary
                 throw new RuntimeJsonMappingException(e);
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer.java
Patch:
@@ -224,7 +224,7 @@ public boolean isEmpty(SerializerProvider provider, AtomicReference<?> value)
         JsonSerializer<Object> ser = _valueSerializer;
         if (ser == null) {
             try {
-                ser = _findCachedSerializer(provider, value.getClass());
+                ser = _findCachedSerializer(provider, contents.getClass());
             } catch (JsonMappingException e) { // nasty but necessary
                 throw new RuntimeJsonMappingException(e);
             }

File: src/main/java/com/fasterxml/jackson/databind/cfg/MutablePropertyConfigOverride.java
Patch:
@@ -33,7 +33,7 @@ public MutablePropertyConfigOverride setFormat(JsonFormat.Value v) {
         return this;
     }
     
-    public MutablePropertyConfigOverride getInclude(JsonInclude.Value v) {
+    public MutablePropertyConfigOverride setInclude(JsonInclude.Value v) {
         _include = v;
         return this;
     }

File: src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
Patch:
@@ -194,5 +194,4 @@ protected <T> T jdkDeserialize(byte[] raw) throws IOException
             objIn.close();
         }
     }
-
 }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/AbstracTypeMapping1186Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.jsontype;
 
 import java.util.List;
 

File: src/main/java/com/fasterxml/jackson/databind/util/Converter.java
Patch:
@@ -13,9 +13,10 @@
  *
  * @param <IN> Type of values converter takes
  * @param <OUT> Result type from conversion
- * 
+ *
  * @see com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
- * 
+ * @see com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer
+ *
  * @since 2.1
  */
 public interface Converter<IN,OUT>

File: src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java
Patch:
@@ -294,12 +294,12 @@ public static Date parse(String date, ParsePosition pos) throws ParseException {
         } catch (IllegalArgumentException e) {
             fail = e;
         }
-        String input = (date == null) ? null : ('"' + date + "'");
+        String input = (date == null) ? null : ('"' + date + '"');
         String msg = fail.getMessage();
         if (msg == null || msg.isEmpty()) {
             msg = "("+fail.getClass().getName()+")";
         }
-        ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
+        ParseException ex = new ParseException("Failed to parse date " + input + ": " + msg, pos.getIndex());
         ex.initCause(fail);
         throw ex;
     }

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -195,7 +195,7 @@ public StringBuilder getGenericSignature(StringBuilder sb)
         _classSignature(_class, sb, false);
         sb.append('<');
         sb = _referencedType.getGenericSignature(sb);
-        sb.append(';');
+        sb.append(">;");
         return sb;
     }
     

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -153,7 +153,7 @@ public StringBuilder getGenericSignature(StringBuilder sb)
         _classSignature(_class, sb, false);
         sb.append('<');
         sb = _referencedType.getGenericSignature(sb);
-        sb.append(';');
+        sb.append(">;");
         return sb;
     }
     

File: src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize2.java
Patch:
@@ -119,23 +119,23 @@ static class NullBean
 
     private final ObjectMapper MAPPER = new ObjectMapper();
     
-    // [JACKSON-480], test value annotation applied to List value class
+    // test value annotation applied to List value class
     public void testSerializedAsListWithClassAnnotations() throws IOException
     {
         SimpleValueList list = new SimpleValueList();
         list.add(new ActualValue("foo"));
         assertEquals("[{\"value\":\"foo\"}]", MAPPER.writeValueAsString(list));
     }
 
-    // [JACKSON-480], test value annotation applied to Map value class
+    // test value annotation applied to Map value class
     public void testSerializedAsMapWithClassAnnotations() throws IOException
     {
         SimpleValueMap map = new SimpleValueMap();
         map.put(new SimpleKey("x"), new ActualValue("y"));
         assertEquals("{\"toString:x\":{\"value\":\"y\"}}", MAPPER.writeValueAsString(map));
     }
 
-    // [JACKSON-480], test Serialization annotation with List
+    // test Serialization annotation with List
     public void testSerializedAsListWithClassSerializer() throws IOException
     {
         ObjectMapper m = new ObjectMapper();

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
Patch:
@@ -100,7 +100,7 @@ public static Std findDeserializer(Class<?> rawType)
     @Override
     public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
-        // Issue#381
+        // [databind#381]
         if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
             p.nextToken();
             final T value = deserialize(p, ctxt);

File: src/test/java/com/fasterxml/jackson/databind/seq/ObjectReaderTest.java
Patch:
@@ -17,7 +17,7 @@ public class ObjectReaderTest extends BaseMapTest
     static class POJO {
         public Map<String, Object> name;
     }
-    
+
     public void testParserFeatures() throws Exception
     {
         final String JSON = "[ /* foo */ 7 ]";
@@ -99,6 +99,7 @@ public void testPointerLoadingMappingIteratorMany() throws Exception {
         
         pojo = itr.next();
 
+        assertNotNull(pojo.name);
         assertTrue(pojo.name.containsKey("value"));
         assertEquals(5678, pojo.name.get("value"));
         assertFalse(itr.hasNext());

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1291,7 +1291,6 @@ public JsonDeserializer<?> createReferenceDeserializer(DeserializationContext ct
         // Very first thing: is deserializer hard-coded for elements?
         JsonDeserializer<Object> contentDeser = contentType.getValueHandler();
         final DeserializationConfig config = ctxt.getConfig();
-
         // Then optional type info: if type has been resolved, we may already know type deserializer:
         TypeDeserializer contentTypeDeser = contentType.getTypeHandler();
         if (contentTypeDeser == null) { // or if not, may be able to find:

File: src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java
Patch:
@@ -30,7 +30,7 @@ public class AtomicReferenceDeserializer
     public AtomicReferenceDeserializer(JavaType referencedType) {
         this(referencedType, null, null);
     }
-    
+
     public AtomicReferenceDeserializer(JavaType referencedType, TypeDeserializer typeDeser, JsonDeserializer<?> deser)
     {
         super(AtomicReference.class);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1204,7 +1204,6 @@ public Object deserializeFromString(JsonParser p, DeserializationContext ctxt) t
      * Method called to deserialize POJO value from a JSON floating-point
      * number.
      */
-    @SuppressWarnings("incomplete-switch")
     public Object deserializeFromDouble(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         NumberType t = p.getNumberType();

File: src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
Patch:
@@ -13,7 +13,6 @@
 import com.fasterxml.jackson.core.JsonParser;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.*;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
 import com.fasterxml.jackson.databind.util.StdDateFormat;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java
Patch:
@@ -17,7 +17,6 @@
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
-import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.util.StdDateFormat;
 
 /**
@@ -104,7 +103,8 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanPro
            throws JsonMappingException
         {
             if (property != null) {
-                JsonFormat.Value format = ctxt.getAnnotationIntrospector().findFormat((Annotated) property.getMember());
+                JsonFormat.Value format = findFormatOverrides(ctxt, property,
+                        this.handledType());
                 if (format != null) {
                     TimeZone tz = format.getTimeZone();
                     // First: fully custom pattern?

File: src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
Patch:
@@ -51,9 +51,9 @@ public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property != null) {
-            JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
+            JsonFormat.Value format = findFormatOverrides(serializers, property,
+                    handledType());
             if (format != null) {
-
             	// Simple case first: serialize as numeric timestamp?
                 JsonFormat.Shape shape = format.getShape();
                 if (shape.isNumeric()) {

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -677,7 +677,7 @@ protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt,
                 PropertyMetadata.STD_OPTIONAL);
         type = resolveType(ctxt, beanDesc, type, setter);
 
-        /* AnySetter can be annotated with @JsonClass (etc) just like a
+        /* AnySetter can be annotated with @JsonDeserialize (etc) just like a
          * regular setter... so let's see if those are used.
          * Returns null if no annotations, in which case binding will
          * be done at a later point.

File: src/test/java/com/fasterxml/jackson/databind/filter/TestMapFiltering.java
Patch:
@@ -41,7 +41,7 @@ public MapBean() {
         }
     }
 
-    static class MyMapFilter implements PropertyFilter
+    static class TestMapFilter implements PropertyFilter
     {
         @Override
         public void serializeAsField(Object value, JsonGenerator jgen,
@@ -176,7 +176,7 @@ public void testNonNullValueMapViaProp() throws IOException
     public void testMapFilteringWithAnnotations() throws Exception
     {
         FilterProvider prov = new SimpleFilterProvider().addFilter("filterX",
-                new MyMapFilter());
+                new TestMapFilter());
         String json = MAPPER.writer(prov).writeValueAsString(new MapBean());
         // a=1 should become a=2
         assertEquals(aposToQuotes("{'values':{'a':2}}"), json);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -576,7 +576,7 @@ public Map<Object,Object> _deserializeUsingCreator(JsonParser p, Deserialization
         try {
             return (Map<Object,Object>)creator.build(ctxt, buffer);
         } catch (Exception e) {
-            wrapAndThrow(e, _mapType.getRawClass(), null);
+            wrapAndThrow(e, _mapType.getRawClass(), key);
             return null;
         }
     }

File: src/test/java/com/fasterxml/jackson/failing/Generic1133Test.java
Patch:
@@ -46,7 +46,7 @@ public void testIssue1128() throws Exception
         ObjectMapper mapper = new ObjectMapper();
 //        mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);
         mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);
-    
+
         final DevMContainer devMContainer1 = new DevMContainer();
         final DevM entity = new DevM();
         final Dev parent = new Dev();
@@ -55,6 +55,8 @@ public void testIssue1128() throws Exception
         devMContainer1.entity = entity;
     
         String json = mapper.writeValueAsString(devMContainer1);
+//        String json = "{\"entity\":{\"id\":0,\"parent\":{\"id\":2,\"p1\":0},\"p1\":0,\"m1\":0}}";
+        
         System.out.println("serializedContainer = " + json);
         final DevMContainer devMContainer = mapper.readValue(json, DevMContainer.class);
         System.out.println("devMContainer.getEntity().getParent().getId() = " + devMContainer.entity.parent.id);

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1917,11 +1917,11 @@ protected EnumResolver constructEnumResolver(Class<?> enumClass,
             if (config.canOverrideAccessModifiers()) {
                 ClassUtil.checkAndFixAccess(accessor, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
             }
-            return EnumResolver.constructUnsafeUsingMethod(enumClass, accessor);
+            return EnumResolver.constructUnsafeUsingMethod(enumClass, accessor, config.getAnnotationIntrospector());
         }
         // May need to use Enum.toString()
         if (config.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)) {
-            return EnumResolver.constructUnsafeUsingToString(enumClass);
+            return EnumResolver.constructUnsafeUsingToString(enumClass, config.getAnnotationIntrospector());
         }
         return EnumResolver.constructUnsafe(enumClass, config.getAnnotationIntrospector());
     }

File: src/test/java/com/fasterxml/jackson/databind/creators/CreatorPropertiesTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.beans.ConstructorProperties;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.*;
 
 public class CreatorPropertiesTest extends BaseMapTest

File: src/main/java/com/fasterxml/jackson/databind/util/EnumResolver.java
Patch:
@@ -51,7 +51,7 @@ public static EnumResolver constructFor(Class<Enum<?>> enumCls, AnnotationIntros
             map.put(name, enumValues[i]);
         }
 
-        Enum<?> defaultEnum = ClassUtil.findFirstAnnotatedEnumValue(enumCls, JsonEnumDefaultValue.class);
+        Enum<?> defaultEnum = ai.findDefaultEnumValue(enumCls);
 
         return new EnumResolver(enumCls, enumValues, map, defaultEnum);
     }
@@ -70,7 +70,7 @@ public static EnumResolver constructUsingToString(Class<Enum<?>> enumCls)
             map.put(e.toString(), e);
         }
 
-        Enum<?> defaultEnum = ClassUtil.findFirstAnnotatedEnumValue(enumCls, JsonEnumDefaultValue.class);
+        Enum<?> defaultEnum = new JacksonAnnotationIntrospector().findDefaultEnumValue(enumCls);
         return new EnumResolver(enumCls, enumValues, map, defaultEnum);
     }    
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java
Patch:
@@ -37,8 +37,6 @@ public static Collection<Map.Entry<Class<?>, Object>> all()
         sers.put(UUID.class, new UUIDSerializer());
         sers.put(java.util.regex.Pattern.class, sls);
         sers.put(Locale.class, sls);
-
-        sers.put(Locale.class, sls);
         
         // then atomic types (note: AtomicReference needs better handling)
         sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3527,6 +3527,7 @@ protected Object _convert(Object fromValue, JavaType toValueType)
      * @return Constructed JSON schema.
      * 
      * @deprecated Since 2.6 use external JSON Schema generator (https://github.com/FasterXML/jackson-module-jsonSchema)
+     *    (which under the hood calls {@link #acceptJsonFormatVisitor(JavaType, JsonFormatVisitorWrapper)})
      */
     @Deprecated
     public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class<?> t)

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -126,7 +126,7 @@ public boolean equals(Comparator<JsonNode> comparator, JsonNode o)
         List<JsonNode> l1 = _children;
         List<JsonNode> l2 = other._children;
         for (int i = 0; i < len; ++i) {
-            if (comparator.compare(l1.get(i), l2.get(i)) != 0) {
+            if (!l1.get(i).equals(comparator, l2.get(i))) {
                 return false;
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -175,7 +175,7 @@ public boolean equals(Comparator<JsonNode> comparator, JsonNode o)
 
         for (Map.Entry<String, JsonNode> entry : m1.entrySet()) {
             JsonNode v2 = m2.get(entry.getKey());
-            if ((v2 == null) || comparator.compare(entry.getValue(), v2) != 0) {
+            if ((v2 == null) || !entry.getValue().equals(comparator, v2)) {
                 return false;
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
Patch:
@@ -31,7 +31,7 @@ public class StdDateFormat
      * to ISO-8601 date formatting standard, when it includes basic undecorated
      * timezone definition
      */
-    protected final static String DATE_FORMAT_STR_ISO8601 = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
+    public final static String DATE_FORMAT_STR_ISO8601 = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
 
     /**
      * Same as 'regular' 8601, but handles 'Z' as an alias for "+0000"

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -928,7 +928,7 @@ public JsonMappingException weirdNumberException(Number value, Class<?> instClas
      */
     public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg) {
         return InvalidFormatException.from(_parser,
-                String.format("Can not construct Map key of type %s from String \"%s\": ",
+                String.format("Can not construct Map key of type %s from String \"%s\": %s",
                         keyClass.getName(), _desc(keyValue), msg),
                 keyValue, keyClass);
     }

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -928,7 +928,7 @@ public JsonMappingException weirdNumberException(Number value, Class<?> instClas
      */
     public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg) {
         return InvalidFormatException.from(_parser,
-                String.format("Can not construct Map key of type %s from String \"%s\": ",
+                String.format("Can not construct Map key of type %s from String \"%s\": %s",
                         keyClass.getName(), _desc(keyValue), msg),
                 keyValue, keyClass);
     }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -185,7 +185,7 @@ protected final JsonDeserializer<Object> _findDeserializer(DeserializationContex
 
     protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException
     {
-        /* 06-Feb-2013, tatu: As per [Issue#148], consider default implementation value of
+        /* 06-Feb-2013, tatu: As per [databind#148], consider default implementation value of
          *   {@link java.lang.Void} to mean "serialize as null"; as well as DeserializationFeature
          *   to do swift mapping to null
          */

File: src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
Patch:
@@ -31,7 +31,7 @@ public class StdDateFormat
      * to ISO-8601 date formatting standard, when it includes basic undecorated
      * timezone definition
      */
-    protected final static String DATE_FORMAT_STR_ISO8601 = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
+    public final static String DATE_FORMAT_STR_ISO8601 = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
 
     /**
      * Same as 'regular' 8601, but handles 'Z' as an alias for "+0000"

File: src/main/java/com/fasterxml/jackson/databind/JavaType.java
Patch:
@@ -202,6 +202,7 @@ public JavaType forcedNarrowBy(Class<?> subclass)
         return result;
     }
 
+    @Deprecated // since 2.7
     protected abstract JavaType _narrow(Class<?> subclass);
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java
Patch:
@@ -111,6 +111,7 @@ public ArrayType withStaticTyping() {
      * it is not even allowed.
      */
     @Override
+    @Deprecated // since 2.7
     protected JavaType _narrow(Class<?> subclass) {
         return _reportUnsupported();
     }

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -151,8 +151,9 @@ protected String buildCanonicalName()
     /* Narrow/widen
     /**********************************************************
      */
-    
+
     @Override
+    @Deprecated // since 2.7
     protected JavaType _narrow(Class<?> subclass)
     {
         // Should we check that there is a sub-class relationship?

File: src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
Patch:
@@ -68,6 +68,7 @@ public JavaType withStaticTyping() {
         return this;
     }
 
+    @Deprecated // since 2.7
     @Override
     protected JavaType _narrow(Class<?> subclass) {
         return this;

File: src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java
Patch:
@@ -96,7 +96,6 @@ public static TypeBindings create(Class<?> erasedType, JavaType[] types)
         case 2:
             return create(erasedType, types[0], types[1]);
         }
-        
         TypeVariable<?>[] vars = erasedType.getTypeParameters();
         String[] names;
         if (vars == null || vars.length == 0) {
@@ -195,8 +194,6 @@ public static TypeBindings createIfNeeded(Class<?> erasedType, JavaType[] types)
      * Method for creating an instance that has same bindings as this object,
      * plus an indicator for additional type variable that may be unbound within
      * this context; this is needed to resolve recursive self-references.
-     * 
-     * @since 1.3 (renamed from "withAdditionalBinding" in 1.2)
      */
     public TypeBindings withUnboundVariable(String name)
     {

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -373,7 +373,7 @@ public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
             }
 
             // If not, we'll need to do more thorough forward+backwards resolution. Sigh.
-            // !!! TODO
+            // !!! TODO (as of 28-Jan-2016, at least)
 
             // 20-Oct-2015, tatu: Container, Map-types somewhat special. There is
             //    a way to fully resolve and merge hierarchies; but that gets expensive

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java
Patch:
@@ -61,7 +61,7 @@ public static CollectionLikeType construct(Class<?> rawType, TypeBindings bindin
     public static CollectionLikeType construct(Class<?> rawType, JavaType elemT) {
         return new CollectionLikeType(rawType, null, 
                 // !!! TODO: wrong, probably has super-types, but:
-                null, null,
+                _bogusSuperClass(rawType), null,
                 elemT, null, null, false);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java
Patch:
@@ -47,7 +47,7 @@ public static CollectionType construct(Class<?> rawType, JavaType elemT) {
         // nominally component types will be just Object.class
         return new CollectionType(rawType, null,
                 // !!! TODO: Wrong, does have supertypes, but:
-                null, null, elemT,
+                _bogusSuperClass(rawType), null, elemT,
                 null, null, false);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java
Patch:
@@ -69,7 +69,8 @@ public static MapLikeType upgradeFrom(JavaType baseType, JavaType keyT, JavaType
 
     @Deprecated // since 2.7
     public static MapLikeType construct(Class<?> rawType, JavaType keyT, JavaType valueT) {
-        return new MapLikeType(rawType, null, null, null, keyT, valueT, null, null, false);
+        return new MapLikeType(rawType, null, _bogusSuperClass(rawType), null,
+                keyT, valueT, null, null, false);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/type/MapType.java
Patch:
@@ -41,7 +41,8 @@ public static MapType construct(Class<?> rawType, TypeBindings bindings,
     @Deprecated // since 2.7
     public static MapType construct(Class<?> rawType, JavaType keyT, JavaType valueT) {
         // !!! TODO: Wrong, does have supertypes
-        return new MapType(rawType, null, null, null, keyT, valueT, null, null, false);
+        return new MapType(rawType, null, _bogusSuperClass(rawType), null,
+                keyT, valueT, null, null, false);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -126,7 +126,7 @@ public boolean equals(Comparator<JsonNode> comparator, JsonNode o)
         List<JsonNode> l1 = _children;
         List<JsonNode> l2 = other._children;
         for (int i = 0; i < len; ++i) {
-            if (comparator.compare(l1.get(i), l2.get(i)) != 0) {
+            if (!l1.get(i).equals(comparator, l2.get(i))) {
                 return false;
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -175,7 +175,7 @@ public boolean equals(Comparator<JsonNode> comparator, JsonNode o)
 
         for (Map.Entry<String, JsonNode> entry : m1.entrySet()) {
             JsonNode v2 = m2.get(entry.getKey());
-            if ((v2 == null) || comparator.compare(entry.getValue(), v2) != 0) {
+            if ((v2 == null) || !entry.getValue().equals(comparator, v2)) {
                 return false;
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -599,7 +599,7 @@ public JavaType constructType(TypeReference<?> typeRef)
      */
     @Deprecated
     public JavaType constructType(Type type, Class<?> contextType) {
-        return _fromAny(null, type, EMPTY_BINDINGS);
+        return constructType(type, constructType(contextType));
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/failing/ExternalTypeId999Test.java
Patch:
@@ -28,12 +28,12 @@ public static class Message<P extends Payload>
         public Message(@JsonProperty("type") String type,
                 @JsonProperty("payload") P payload)
         {
-            if (type == null) {
-                throw new RuntimeException("'type' is null");
-            }
             if (payload == null) {
                 throw new RuntimeException("'payload' is null");
             }
+            if (type == null) {
+                throw new RuntimeException("'type' is null");
+            }
             this.type = type;
             this.payload = payload;
         }

File: src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java
Patch:
@@ -128,7 +128,7 @@ public List<JavaType> getInterfaces() {
         }
         return Arrays.asList(_superInterfaces);
     }
-    
+
     @Override
     public final JavaType findSuperType(Class<?> rawTarget)
     {

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -481,8 +481,8 @@ protected ObjectMapper(ObjectMapper src)
         // Default serializer factory is stateless, can just assign
         _serializerFactory = src._serializerFactory;
 
-        // as per [databind#922], make sure to copy registered modules as appropriate
-        Set<Object> reg = _registeredModuleTypes;
+        // as per [databind#922], [databind#1078] make sure to copy registered modules as appropriate
+        Set<Object> reg = src._registeredModuleTypes;
         if (reg == null) {
             _registeredModuleTypes = null;
         } else {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java
Patch:
@@ -21,9 +21,9 @@ public class SqlTimeSerializer
     public SqlTimeSerializer() { super(java.sql.Time.class); }
 
     @Override
-    public void serialize(java.sql.Time value, JsonGenerator jgen, SerializerProvider provider) throws IOException
+    public void serialize(java.sql.Time value, JsonGenerator g, SerializerProvider provider) throws IOException
     {
-        jgen.writeString(value.toString());
+        g.writeString(value.toString());
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -305,11 +305,10 @@ protected final JsonNode deserializeAny(JsonParser p, DeserializationContext ctx
         switch (p.getCurrentTokenId()) {
         case JsonTokenId.ID_START_OBJECT:
         case JsonTokenId.ID_END_OBJECT: // for empty JSON Objects we may point to this
+        case JsonTokenId.ID_FIELD_NAME:
             return deserializeObject(p, ctxt, nodeFactory);
         case JsonTokenId.ID_START_ARRAY:
             return deserializeArray(p, ctxt, nodeFactory);
-        case JsonTokenId.ID_FIELD_NAME:
-            return deserializeObject(p, ctxt, nodeFactory);
         case JsonTokenId.ID_EMBEDDED_OBJECT:
             return _fromEmbedded(p, ctxt, nodeFactory);
         case JsonTokenId.ID_STRING:

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
Patch:
@@ -71,7 +71,7 @@ public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ct
         JsonToken t = p.getCurrentToken();
         if (t == JsonToken.START_OBJECT) {
             t = p.nextToken();
-        } else if (t == JsonToken.START_ARRAY) {
+        } else if (t == JsonToken.START_ARRAY || t != JsonToken.FIELD_NAME) {
             /* This is most likely due to the fact that not all Java types are
              * serialized as JSON Objects; so if "as-property" inclusion is requested,
              * serialization of things like Lists must be instead handled as if
@@ -80,8 +80,6 @@ public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ct
              * is defined, it will be asked to handle this case.
              */
             return _deserializeTypedUsingDefaultImpl(p, ctxt, null);
-        } else if (t != JsonToken.FIELD_NAME) {
-            return _deserializeTypedUsingDefaultImpl(p, ctxt, null);
         }
         // Ok, let's try to find the property. But first, need token buffer...
         TokenBuffer tb = null;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java
Patch:
@@ -49,15 +49,13 @@ public void serialize(Number value, JsonGenerator g, SerializerProvider provider
         /* These shouldn't match (as there are more specific ones),
          * but just to be sure:
          */
-        } else if (value instanceof Integer) {
-            g.writeNumber(value.intValue());
         } else if (value instanceof Long) {
             g.writeNumber(value.longValue());
         } else if (value instanceof Double) {
             g.writeNumber(value.doubleValue());
         } else if (value instanceof Float) {
             g.writeNumber(value.floatValue());
-        } else if ((value instanceof Byte) || (value instanceof Short)) {
+        } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
             g.writeNumber(value.intValue()); // doesn't need to be cast to smaller numbers
         } else {
             // We'll have to use fallback "untyped" number write method

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -38,6 +38,7 @@ public class JacksonAnnotationIntrospector
         JsonSerialize.class,
         JsonView.class,
         JsonFormat.class,
+        JsonTypeInfo.class,
         JsonRawValue.class,
         JsonUnwrapped.class,
         JsonBackReference.class,
@@ -50,6 +51,7 @@ public class JacksonAnnotationIntrospector
         JsonDeserialize.class,
         JsonView.class,
         JsonFormat.class,
+        JsonTypeInfo.class,
         JsonUnwrapped.class,
         JsonBackReference.class,
         JsonManagedReference.class

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -114,7 +114,7 @@ public class TokenBuffer
     protected Object _objectId;
 
     /**
-     * Do we currnetly have a native type or object id buffered?
+     * Do we currently have a native type or object id buffered?
      */
     protected boolean _hasNativeId = false;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -305,11 +305,10 @@ protected final JsonNode deserializeAny(JsonParser p, DeserializationContext ctx
         switch (p.getCurrentTokenId()) {
         case JsonTokenId.ID_START_OBJECT:
         case JsonTokenId.ID_END_OBJECT: // for empty JSON Objects we may point to this
+        case JsonTokenId.ID_FIELD_NAME:
             return deserializeObject(p, ctxt, nodeFactory);
         case JsonTokenId.ID_START_ARRAY:
             return deserializeArray(p, ctxt, nodeFactory);
-        case JsonTokenId.ID_FIELD_NAME:
-            return deserializeObject(p, ctxt, nodeFactory);
         case JsonTokenId.ID_EMBEDDED_OBJECT:
             return _fromEmbedded(p, ctxt, nodeFactory);
         case JsonTokenId.ID_STRING:

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
Patch:
@@ -71,7 +71,7 @@ public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ct
         JsonToken t = p.getCurrentToken();
         if (t == JsonToken.START_OBJECT) {
             t = p.nextToken();
-        } else if (t == JsonToken.START_ARRAY) {
+        } else if (t == JsonToken.START_ARRAY || t != JsonToken.FIELD_NAME) {
             /* This is most likely due to the fact that not all Java types are
              * serialized as JSON Objects; so if "as-property" inclusion is requested,
              * serialization of things like Lists must be instead handled as if
@@ -80,8 +80,6 @@ public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ct
              * is defined, it will be asked to handle this case.
              */
             return _deserializeTypedUsingDefaultImpl(p, ctxt, null);
-        } else if (t != JsonToken.FIELD_NAME) {
-            return _deserializeTypedUsingDefaultImpl(p, ctxt, null);
         }
         // Ok, let's try to find the property. But first, need token buffer...
         TokenBuffer tb = null;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java
Patch:
@@ -49,15 +49,13 @@ public void serialize(Number value, JsonGenerator g, SerializerProvider provider
         /* These shouldn't match (as there are more specific ones),
          * but just to be sure:
          */
-        } else if (value instanceof Integer) {
-            g.writeNumber(value.intValue());
         } else if (value instanceof Long) {
             g.writeNumber(value.longValue());
         } else if (value instanceof Double) {
             g.writeNumber(value.doubleValue());
         } else if (value instanceof Float) {
             g.writeNumber(value.floatValue());
-        } else if ((value instanceof Byte) || (value instanceof Short)) {
+        } else if (value instanceof Integer || value instanceof Byte || value instanceof Short) {
             g.writeNumber(value.intValue()); // doesn't need to be cast to smaller numbers
         } else {
             // We'll have to use fallback "untyped" number write method

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
Patch:
@@ -150,7 +150,7 @@ protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, Deserialization
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
     }
 
-    /* Aalso need to re-route "unknown" version. Need to think
+    /* Also need to re-route "unknown" version. Need to think
      * this through bit more in future, but for now this does address issue and has
      * no negative side effects (at least within existing unit test suite).
      */

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -71,7 +71,8 @@ protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes,
     {
         _baseType = baseType;
         _idResolver = idRes;
-        _typePropertyName = typePropertyName;
+        // 22-Dec-2015, tatu: as per [databind#1055], avoid NPE
+        _typePropertyName = (typePropertyName == null) ? "" : typePropertyName;
         _typeIdVisible = typeIdVisible;
         // defaults are fine, although concurrency of 4 bit more frugal than 16:
         _deserializers = new ConcurrentHashMap<String, JsonDeserializer<Object>>(16, 0.75f, 4);

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java
Patch:
@@ -130,6 +130,7 @@ public JsonSerializer<Object> untypedValueSerializer(Class<?> type)
         }
         return null;
     }    
+
     /*
     /**********************************************************
     /* Helper classes

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -276,6 +276,7 @@ protected final ArrayNode deserializeArray(JsonParser p, DeserializationContext
                 return node;
             case JsonTokenId.ID_EMBEDDED_OBJECT:
                 node.add(_fromEmbedded(p, ctxt, nodeFactory));
+		break;
             case JsonTokenId.ID_STRING:
                 node.add(nodeFactory.textNode(p.getText()));
                 break;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1269,7 +1269,7 @@ public Object deserializeFromEmbedded(JsonParser p, DeserializationContext ctxt)
         
         return p.getEmbeddedObject();
     }
-    
+
     /*
     /**********************************************************
     /* Overridable helper methods

File: src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest.java
Patch:
@@ -160,7 +160,7 @@ public void optionalProperty(BeanProperty prop) throws JsonMappingException {
                         ser.acceptJsonFormatVisitor(new JsonFormatVisitorWrapper.Base() {
                             @Override
                             public JsonNumberFormatVisitor expectNumberFormat(
-                                    JavaType type) throws JsonMappingException {
+                                    JavaType t) throws JsonMappingException {
                                 return new JsonNumberFormatVisitor() {
                                     @Override
                                     public void format(JsonValueFormat format) {
@@ -178,7 +178,7 @@ public void numberType(NumberType numberType) {
                             }
 
                             @Override
-                            public JsonIntegerFormatVisitor expectIntegerFormat(JavaType type) throws JsonMappingException {
+                            public JsonIntegerFormatVisitor expectIntegerFormat(JavaType t) throws JsonMappingException {
                                 return new JsonIntegerFormatVisitor() {
                                     @Override
                                     public void format(JsonValueFormat format) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java
Patch:
@@ -78,7 +78,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
         } else {
             Class<?> h = handledType();
             if (h == BigDecimal.class) {
-                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);
+                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);
             } else {
                 // otherwise bit unclear what to call... but let's try:
                 /*JsonNumberFormatVisitor v2 =*/ visitor.expectNumberFormat(typeHint);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -1027,7 +1027,8 @@ protected JsonFormat.Value findFormatOverrides(DeserializationContext ctxt,
 
     /**
      * Convenience method that uses {@link #findFormatOverrides} to find possible
-     * defaults and/of overrides, and then calls {@link JsonFormat.Value#getFeature}
+     * defaults and/of overrides, and then calls
+     * <code>JsonFormat.Value.getFeature(feat)</code>
      * to find whether that feature has been specifically marked as enabled or disabled.
      * 
      * @param typeForDefaults Type (erased) used for finding default format settings, if any

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -474,7 +474,7 @@ protected JsonFormat.Value findFormatOverrides(SerializerProvider provider,
 
     /**
      * Convenience method that uses {@link #findFormatOverrides} to find possible
-     * defaults and/of overrides, and then calls {@link JsonFormat.Value#getFeature}
+     * defaults and/of overrides, and then calls <code>JsonFormat.Value.getFeature(...)</code>
      * to find whether that feature has been specifically marked as enabled or disabled.
      * 
      * @param typeForDefaults Type (erased) used for finding default format settings, if any

File: src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java
Patch:
@@ -157,7 +157,7 @@ public List<BeanPropertyWriter> changeProperties(SerializationConfig config,
         {
             JavaType strType = config.constructType(String.class);
             // we need a valid BeanPropertyDefinition; this will do (just need name to match)
-            POJOPropertyBuilder prop = new POJOPropertyBuilder(new PropertyName("bogus"), null, true);
+            POJOPropertyBuilder prop = new POJOPropertyBuilder(config, null, true, new PropertyName("bogus"));
             try {
                 AnnotatedField f = new AnnotatedField(null, EmptyBean.class.getDeclaredField("name"), null);
                 beanProperties.add(new BeanPropertyWriter(prop, f, null,

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java
Patch:
@@ -7,7 +7,6 @@
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java
Patch:
@@ -50,6 +50,7 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-        visitor.expectStringFormat(typeHint);
+        // type not really known, but since it is a JSON string:
+        visitStringFormat(visitor, typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java
Patch:
@@ -53,9 +53,9 @@ public void serialize(Object value, JsonGenerator gen, SerializerProvider provid
     public JsonNode getSchema(SerializerProvider provider, Type typeHint) {
         return createSchemaNode("string", true);
     }
-    
+
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {
-        if (visitor != null) visitor.expectStringFormat(typeHint);
+        visitStringFormat(visitor, typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java
Patch:
@@ -97,8 +97,6 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws Jso
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-        if (visitor != null) {
-            visitor.expectStringFormat(typeHint);
-        }
+        visitStringFormat(visitor, typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -114,7 +114,9 @@ public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ct
         /* Or, for abstract types, may have alternate means for resolution
          * (defaulting, materialization)
          */
-        if (type.isAbstract()) {
+        // 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are
+        //    not something we could materialize anything for
+        if (type.isAbstract() && !type.isPrimitive()) {
             // Let's make it possible to materialize abstract types.
             JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);
             if (concreteType != null) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
Patch:
@@ -283,9 +283,7 @@ protected AnnotationMap getAllAnnotations() {
 
     @Override
     public JavaType getType() {
-        // 16-Oct-2015, tatu: Does this make any sense? Technically doable but
-//        return _type;
-        throw new UnsupportedOperationException("Should not be called on AnnotatedClass");
+        return _type;
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java
Patch:
@@ -190,7 +190,7 @@ public void serializeWithType(T value, JsonGenerator gen, SerializerProvider ser
      * @since 2.0
      * 
      * @deprecated Since 2.5 Use {@link #isEmpty(SerializerProvider, Object)} instead;
-     *   will be removed from 2.7
+     *   will be removed from 2.8
      */
     @Deprecated
     public boolean isEmpty(T value) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java
Patch:
@@ -343,9 +343,10 @@ public JsonInclude.Include findSerializationInclusionForContent(Annotated a, Jso
     }
 
     @Override
-    public JsonInclude.Value findPropertyInclusion(Annotated a) {
+    public JsonInclude.Value findPropertyInclusion(Annotated a)
+    {
         JsonInclude.Value v2 = _secondary.findPropertyInclusion(a);
-        JsonInclude.Value v1 = _secondary.findPropertyInclusion(a);
+        JsonInclude.Value v1 = _primary.findPropertyInclusion(a);
 
         if (v2 == null) { // shouldn't occur but
             return v1;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.concurrent.atomic.AtomicReference;
 
 import com.fasterxml.jackson.annotation.JsonInclude;

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -131,8 +131,8 @@ public String findEnumValue(Enum<?> value)
         return value.name();
     }
 
-    @Override
-    public  String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {
+    @Override // since 2.7
+    public String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {
         HashMap<String,String> expl = null;
         for (Field f : ClassUtil.getDeclaredFields(enumType)) {
             if (!f.isEnumConstant()) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/UUIDDeserializer.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.UUID;
 
 import com.fasterxml.jackson.core.Base64Variants;
-import com.fasterxml.jackson.core.JsonParser;
+
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.exc.InvalidFormatException;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
Patch:
@@ -339,7 +339,7 @@ public Object _parse(String key, DeserializationContext ctxt) throws JsonMapping
                 }
             }
             Enum<?> e = _resolver.findEnum(key);
-            if (e == null && !ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {
+            if ((e == null) && !ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {
                 throw ctxt.weirdKeyException(_keyClass, key, "not one of values for Enum class");
             }
             return e;

File: src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java
Patch:
@@ -124,7 +124,7 @@ public void testErrorReporting() throws Exception
         try {
             MAPPER.readValue("{\"boolProp\":\"foobar\"}", BooleanBean.class);
         } catch (JsonMappingException e) {
-            verifyException(e, "from String value 'foobar'");
+            verifyException(e, "from String value (\"foobar\")");
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -836,7 +836,7 @@ public ObjectReader with(ContextAttributes attrs) {
     /**
      * @since 2.3
      */
-    public ObjectReader withAttributes(Map<Object,Object> attrs) {
+    public ObjectReader withAttributes(Map<?,?> attrs) {
         return _with(_config.withAttributes(attrs));
     }
 

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java
Patch:
@@ -379,7 +379,7 @@ public T withRootName(String rootName) {
      * 
      * @since 2.3
      */
-    public T withAttributes(Map<Object,Object> attributes) {
+    public T withAttributes(Map<?,?> attributes) {
         return with(getAttributes().withSharedAttributes(attributes));
     }
     

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -8,7 +8,6 @@
 
 import com.fasterxml.jackson.annotation.ObjectIdGenerator;
 import com.fasterxml.jackson.core.JsonGenerator;
-
 import com.fasterxml.jackson.databind.cfg.ContextAttributes;
 import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
 import com.fasterxml.jackson.databind.introspect.Annotated;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.Iterator;
 
 import com.fasterxml.jackson.core.*;
+
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java
Patch:
@@ -26,10 +26,10 @@ protected NonTypedScalarSerializerBase(Class<?> t, boolean bogus) {
     }
     
     @Override
-    public final void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,
+    public final void serializeWithType(T value, JsonGenerator gen, SerializerProvider provider,
             TypeSerializer typeSer) throws IOException
     {
         // no type info, just regular serialization
-        serialize(value, jgen, provider);            
+        serialize(value, gen, provider);            
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java
Patch:
@@ -111,7 +111,7 @@ public boolean isEmpty(T value) {
     public boolean isEmpty(SerializerProvider provider, T value) {
         return (value == null) || (value.size() == 0);
     }
-    
+
     @Override
     public JsonNode getSchema(SerializerProvider provider, Type typeHint) {
         return createSchemaNode("array", true).set("items", contentSchema());

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import com.fasterxml.jackson.core.JsonGenerator;
+
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java
Patch:
@@ -43,10 +43,10 @@ public boolean isEmpty(SerializerProvider prov, Object value) {
         String str = (String) value;
         return (str == null) || (str.length() == 0);
     }
-    
+
     @Override
-    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
-        jgen.writeString((String) value);
+    public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+        gen.writeString((String) value);
     }
 
     @Override

File: src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorWithNamingStrategy556.java
Patch:
@@ -58,7 +58,7 @@ public String findImplicitPropertyName(AnnotatedMember param) {
     }
     
     private final ObjectMapper MAPPER = new ObjectMapper()
-            .setPropertyNamingStrategy(PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE)
+            .setPropertyNamingStrategy(PropertyNamingStrategy.UPPER_CAMEL_CASE)
             ;
     {
         MAPPER.setAnnotationIntrospector(new MyParamIntrospector());

File: src/test/java/com/fasterxml/jackson/failing/ImplicitParamsForCreator806Test.java
Patch:
@@ -42,7 +42,7 @@ public void testImplicitNameWithNamingStrategy() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper()
             .setAnnotationIntrospector(new MyParamIntrospector())
-            .setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES)
+            .setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
             ;
         XY value = mapper.readValue(aposToQuotes("{'param_name0':1,'param_name1':2}"), XY.class);
         assertNotNull(value);

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -224,14 +224,14 @@ public Object findNamingStrategy(AnnotatedClass ac)
     {
         JsonNaming ann = _findAnnotation(ac, JsonNaming.class);
         return (ann == null) ? null : ann.value();
-    } 
+    }
 
     /*
     /**********************************************************
     /* Property auto-detection
     /**********************************************************
      */
-    
+
     @Override
     public VisibilityChecker<?> findAutoDetectVisibility(AnnotatedClass ac,
         VisibilityChecker<?> checker)

File: src/main/java/com/fasterxml/jackson/databind/annotation/JsonNaming.java
Patch:
@@ -7,6 +7,9 @@
 /**
  * Annotation that can be used to indicate a {@link PropertyNamingStrategy}
  * to use for annotated class. Overrides the global (default) strategy.
+ * Note that if the {@link #value} property is omitted, its default value
+ * means "use default naming" (that is, no alternate naming method is used).
+ * This can be used as an override with mix-ins.
  * 
  * @since 2.1
  */

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestPOJOPropertiesCollector.java
Patch:
@@ -237,8 +237,8 @@ public DuplicateGetterCreatorBean(@JsonProperty("bloop") @A boolean bloop) {}
     /**********************************************************
      */
 
-    private final ObjectMapper MAPPER = new ObjectMapper();
-    
+    private final ObjectMapper MAPPER = objectMapper();
+
     public void testSimple()
     {
         POJOPropertiesCollector coll = collector(MAPPER,

File: src/main/java/com/fasterxml/jackson/databind/BeanDescription.java
Patch:
@@ -224,7 +224,7 @@ protected BeanDescription(JavaType type) {
      */
 
     public abstract Map<Object, AnnotatedMember> findInjectables();
-    
+
     /**
      * Method for checking if the POJO type has annotations to
      * indicate that a builder is to be used for instantiating
@@ -237,7 +237,7 @@ protected BeanDescription(JavaType type) {
      * Method for finding configuration for POJO Builder class.
      */
     public abstract JsonPOJOBuilder.Value findPOJOBuilderConfig();
-    
+
     /**
      * Method called to create a "default instance" of the bean, currently
      * only needed for obtaining default field values which may be used for

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -298,8 +298,7 @@ public List<AnnotatedConstructor> getConstructors() {
     }
 
     @Override
-    public Object instantiateBean(boolean fixAccess)
-    {
+    public Object instantiateBean(boolean fixAccess) {
         AnnotatedConstructor ac = _classInfo.getDefaultConstructor();
         if (ac == null) {
             return null;

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -235,7 +235,7 @@ protected SerializerProvider(SerializerProvider src,
     /**
      * Copy-constructor used when making a copy of a blueprint instance.
      * 
-     * @since 2.5.0
+     * @since 2.5
      */
     protected SerializerProvider(SerializerProvider src)
     {

File: src/main/java/com/fasterxml/jackson/databind/SequenceWriter.java
Patch:
@@ -196,9 +196,9 @@ public SequenceWriter writeAll(Object[] value) throws IOException
         return this;
     }
 
-    @Deprecated
-    public <C extends Collection<?>> SequenceWriter writeAll(C container) throws IOException
-    {
+    // NOTE: redundant wrt variant that takes Iterable, but can not remove or even
+    // deprecate due to backwards-compatibility needs
+    public <C extends Collection<?>> SequenceWriter writeAll(C container) throws IOException {
         for (Object value : container) {
             write(value);
         }

File: src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java
Patch:
@@ -31,10 +31,10 @@ public final class BaseSettings
      */
     private static final TimeZone DEFAULT_TIMEZONE = 
             //  TimeZone.getDefault()
-            /* [databind#915] 26-Sep-2015, tatu: Should be UTC, plan to change
-             * it so for 2.7
+            /* [databind#915] 05-Nov-2015, tatu: Changed to UTC, from earlier
+             * baseline of GMT (up to 2.6)
              */
-            TimeZone.getTimeZone("GMT");
+            TimeZone.getTimeZone("UTC");
     
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -180,12 +180,13 @@ public enum MapperFeature implements ConfigFeature
      * and may result in slower Reflection calls. Exact impact (if any)
      * depends on Java platform (Java SE, Android) as well as JDK version.
      *<p>
-     * Feature is enabled by default, for legacy reasons.
+     * Feature is enabled by default, for legacy reasons (it was the behavior
+     * until 2.6)
      *
      * @since 2.7
      */
     OVERRIDE_PUBLIC_ACCESS_MODIFIERS(true),
-    
+
     /**
      * Feature that determines whether member mutators (fields and
      * setters) may be "pulled in" even if they are not visible,

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java
Patch:
@@ -83,7 +83,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider, BeanPrope
         if (ser == null) {
             ser = _serializer;
         }
-        // #124: May have a content converter
+        // [databind#124]: May have a content converter
         ser = findConvertingContentSerializer(provider, property, ser);
         if (ser == null) {
             ser = provider.findValueSerializer(String.class, property);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -760,8 +760,8 @@ protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationC
                     for (Constructor<?> ctor : valueClass.getConstructors()) {
                         Class<?>[] paramTypes = ctor.getParameterTypes();
                         if (paramTypes.length == 1 && paramTypes[0] == enclosing) {
-                            if (ctxt.getConfig().canOverrideAccessModifiers()) {
-                                ClassUtil.checkAndFixAccess(ctor);
+                            if (ctxt.canOverrideAccessModifiers()) {
+                                ClassUtil.checkAndFixAccess(ctor, ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                             }
                             return new InnerClassProperty(prop, ctor);
                         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -53,7 +53,8 @@ public static JsonDeserializer<?> deserializerForCreator(DeserializationConfig c
         // note: caller has verified there's just one arg; but we must verify its type
         Class<?> paramClass = factory.getRawParameterType(0);
         if (config.canOverrideAccessModifiers()) {
-            ClassUtil.checkAndFixAccess(factory.getMember());
+            ClassUtil.checkAndFixAccess(factory.getMember(),
+                    config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
         }
         return new FactoryBasedDeserializer(enumClass, factory, paramClass);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java
Patch:
@@ -56,7 +56,7 @@ public static KeyDeserializer findStringBasedKeyDeserializer(DeserializationConf
         Constructor<?> ctor = beanDesc.findSingleArgConstructor(String.class);
         if (ctor != null) {
             if (config.canOverrideAccessModifiers()) {
-                ClassUtil.checkAndFixAccess(ctor);
+                ClassUtil.checkAndFixAccess(ctor, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
             }
             return new StdKeyDeserializer.StringCtorKeyDeserializer(ctor);
         }
@@ -66,7 +66,7 @@ public static KeyDeserializer findStringBasedKeyDeserializer(DeserializationConf
         Method m = beanDesc.findFactoryMethod(String.class);
         if (m != null){
             if (config.canOverrideAccessModifiers()) {
-                ClassUtil.checkAndFixAccess(m);
+                ClassUtil.checkAndFixAccess(m, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
             }
             return new StdKeyDeserializer.StringFactoryKeyDeserializer(m);
         }

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java
Patch:
@@ -186,7 +186,7 @@ Object readResolve() {
             Constructor<?> ctor = clazz.getDeclaredConstructor(_serialization.args);
             // 06-Oct-2012, tatu: Has "lost" its security override, must force back
             if (!ctor.isAccessible()) {
-                ClassUtil.checkAndFixAccess(ctor);
+                ClassUtil.checkAndFixAccess(ctor, false);
             }
             return new AnnotatedConstructor(null, ctor, null, null);
         } catch (Exception e) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java
Patch:
@@ -164,7 +164,7 @@ Object readResolve() {
             Field f = clazz.getDeclaredField(_serialization.name);
             // 06-Oct-2012, tatu: Has "lost" its security override, may need to force back
             if (!f.isAccessible()) {
-                ClassUtil.checkAndFixAccess(f);
+                ClassUtil.checkAndFixAccess(f, false);
             }
             return new AnnotatedField(null, f, null);
         } catch (Exception e) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java
Patch:
@@ -255,7 +255,7 @@ Object readResolve() {
                     _serialization.args);
             // 06-Oct-2012, tatu: Has "lost" its security override, may need to force back
             if (!m.isAccessible()) {
-                ClassUtil.checkAndFixAccess(m);
+                ClassUtil.checkAndFixAccess(m, false);
             }
             return new AnnotatedMethod(null, m, null, null);
         } catch (Exception e) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -305,7 +305,7 @@ public Object instantiateBean(boolean fixAccess)
             return null;
         }
         if (fixAccess) {
-            ac.fixAccess();
+            ac.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
         }
         try {
             return ac.getAnnotated().newInstance();
@@ -319,7 +319,7 @@ public Object instantiateBean(boolean fixAccess)
             throw new IllegalArgumentException("Failed to instantiate bean of type "+_classInfo.getAnnotated().getName()+": ("+t.getClass().getName()+") "+t.getMessage(), t);
         }
     }
-    
+
     /*
     /**********************************************************
     /* Simple accessors, extended

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -239,7 +239,7 @@ public JsonSerializer<Object> createKeySerializer(SerializationConfig config,
                                 rawType, true);
                         Method m = am.getAnnotated();
                         if (config.canOverrideAccessModifiers()) {
-                            ClassUtil.checkAndFixAccess(m);
+                            ClassUtil.checkAndFixAccess(m, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                         }
                         ser = new JsonValueSerializer(m, delegate);
                     } else {
@@ -357,7 +357,7 @@ protected final JsonSerializer<?> findSerializerByAnnotations(SerializerProvider
         if (valueMethod != null) {
             Method m = valueMethod.getAnnotated();
             if (prov.canOverrideAccessModifiers()) {
-                ClassUtil.checkAndFixAccess(m);
+                ClassUtil.checkAndFixAccess(m, prov.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
             }
             JsonSerializer<Object> ser = findSerializerFromAnnotation(prov, valueMethod);
             return new JsonValueSerializer(m, ser);

File: src/test/java/com/fasterxml/jackson/databind/views/TestViewSerialization.java
Patch:
@@ -173,7 +173,7 @@ public void testVisibility() throws Exception
     }
 
     // [JACKSON-868]
-    public void test() throws IOException
+    public void test868() throws IOException
     {
         ObjectMapper mapper = new ObjectMapper();
         mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java
Patch:
@@ -34,15 +34,15 @@ public final class AnnotatedField
     /**********************************************************
      */
 
-    public AnnotatedField(AnnotatedClass contextClass, Field field, AnnotationMap annMap)
+    public AnnotatedField(TypeResolutionContext contextClass, Field field, AnnotationMap annMap)
     {
         super(contextClass, annMap);
         _field = field;
     }
     
     @Override
     public AnnotatedField withAnnotations(AnnotationMap ann) {
-        return new AnnotatedField(_context, _field, ann);
+        return new AnnotatedField(_typeContext, _field, ann);
     }
 
     /**
@@ -77,7 +77,7 @@ public Class<?> getRawType() {
 
     @Override
     public JavaType getType() {
-        return _context.resolveMemberType(_field.getGenericType());
+        return _typeContext.resolveType(_field.getGenericType());
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java
Patch:
@@ -40,7 +40,7 @@ public final class AnnotatedParameter
     public AnnotatedParameter(AnnotatedWithParams owner, JavaType type,  AnnotationMap annotations,
             int index)
     {
-        super((owner == null) ? null : owner.getContextClass(), annotations);
+        super((owner == null) ? null : owner.getTypeContext(), annotations);
         _owner = owner;
         _type = type;
         _index = index;
@@ -88,9 +88,9 @@ public Class<?> getRawType() {
 
     @Override
     public JavaType getType() {
-        return _context.resolveMemberType(_type);
+        return _typeContext.resolveType(_type);
     }
-    
+
     /*
     /**********************************************************
     /* AnnotatedMember extras

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java
Patch:
@@ -26,7 +26,7 @@ public abstract class AnnotatedWithParams
     /**********************************************************
      */
 
-    protected AnnotatedWithParams(AnnotatedClass ctxt, AnnotationMap annotations, AnnotationMap[] paramAnnotations)
+    protected AnnotatedWithParams(TypeResolutionContext ctxt, AnnotationMap annotations, AnnotationMap[] paramAnnotations)
     {
         super(ctxt, annotations);
         _paramAnnotations = paramAnnotations;

File: src/main/java/com/fasterxml/jackson/databind/introspect/VirtualAnnotatedMember.java
Patch:
@@ -27,10 +27,10 @@ public class VirtualAnnotatedMember extends AnnotatedMember
     /**********************************************************
      */
 
-    public VirtualAnnotatedMember(AnnotatedClass contextClass, Class<?> declaringClass,
+    public VirtualAnnotatedMember(TypeResolutionContext typeContext, Class<?> declaringClass,
             String name, Class<?> rawType)
     {
-        super(contextClass, /* AnnotationMap*/ null);
+        super(typeContext, /* AnnotationMap*/ null);
         _declaringClass = declaringClass;
         _rawType = rawType;
         _name = name;
@@ -63,7 +63,7 @@ public Class<?> getRawType() {
 
     @Override
     public JavaType getType() {
-        return _context.resolveMemberType(_rawType);
+        return _typeContext.resolveType(_rawType);
     }
 
     /*

File: src/test/java/com/fasterxml/jackson/databind/misc/TestJSONP.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.misc;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.type.TypeFactory;
+
 import com.fasterxml.jackson.databind.util.JSONPObject;
 
 public class TestJSONP
@@ -46,7 +46,7 @@ public void testWithType() throws Exception
     {
         ObjectMapper m = new ObjectMapper();
         Object ob = new Impl("abc", "def");
-        JavaType type = TypeFactory.defaultInstance().uncheckedSimpleType(Base.class);
+        JavaType type = m.constructType(Base.class);
         assertEquals("do({\"a\":\"abc\"})",
                 serializeAsString(m, new JSONPObject("do", ob, type)));
     }

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -436,7 +436,7 @@ public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
                     return baseType;
                 }
                 JavaType componentType = _fromAny(null, rawComp, null);
-                return ((ArrayType) baseType).withOverriddenComponentType(componentType);
+                return ((ArrayType) baseType).withComponentType(componentType);
             }
         }
 

File: src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
Patch:
@@ -76,7 +76,6 @@ public void testSimpleClass()
          * class type otherwise)
          */
         assertSame(baseType, baseType.narrowBy(BaseType.class));
-        assertSame(baseType, baseType.widenBy(BaseType.class));
 
         // Also: no narrowing for simple types (but should there be?)
         try {

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -20,6 +20,7 @@
 import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
 import com.fasterxml.jackson.databind.type.MapLikeType;
+import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.fasterxml.jackson.databind.util.Converter;
 import com.fasterxml.jackson.databind.util.NameTransformer;
 
@@ -775,10 +776,11 @@ public JavaType refineSerializationType(final MapperConfig<?> config,
         // Ok: start by refining the main type itself; common to all types
         Class<?> serClass = findSerializationType(a);
         if ((serClass != null) && !type.hasRawClass(serClass)) {
+            final TypeFactory tf = config.getTypeFactory();
             try {
                 // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                 //   may be needed here too in future?
-                type = type.widenBy(serClass);
+                type = tf.constructGeneralizedType(type, serClass);
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException(null,
                         String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java
Patch:
@@ -24,7 +24,7 @@ public IterableSerializer(IterableSerializer src, BeanProperty property,
             Boolean unwrapSingle) {
         super(src, property, vts, valueSerializer, unwrapSingle);
     }
-    
+
     @Override
     public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
         return new IterableSerializer(this, _property, vts, _elementSerializer, _unwrapSingle);

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestEnumTyping.java
Patch:
@@ -71,7 +71,6 @@ public void testEnumInterface() throws Exception
     {
         ObjectMapper m = new ObjectMapper();
         String json = m.writeValueAsString(Tag.B);
-        
         EnumInterface result = m.readValue(json, EnumInterface.class);
         assertSame(Tag.B, result);
     }

File: src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java
Patch:
@@ -58,7 +58,7 @@ public final boolean isPublic() {
     public abstract JavaType getType();
 
     /**
-     * @deprecated Since 2.7 Use {@link #getType()} instead
+     * @deprecated Since 2.7 Use {@link #getType()} instead. To be removed from 2.8.
      */
     @Deprecated
     public final JavaType getType(TypeBindings bogus) {
@@ -69,11 +69,11 @@ public final JavaType getType(TypeBindings bogus) {
      * Full generic type of the annotated element; definition
      * of what exactly this means depends on sub-class.
      *
-     * @deprecated Since 2.7 should instead use {@link #getType()}
+     * @deprecated Since 2.7 should instead use {@link #getType()}. To be removed from 2.8
      */
     @Deprecated
     public Type getGenericType() {
-        return getType().getRawClass();
+        return getRawType();
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -1099,8 +1099,6 @@ protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings
             return result;
         }
         // Barring that, we may have recently constructed an instance:
-        ClassKey key;
-
         // !!! TODO 16-Oct-2015, tatu: For now let's only cached non-parameterized; otherwise
         //     need better cache key
         boolean cachable = (bindings == null) || bindings.isEmpty();

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1448,7 +1448,7 @@ private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt,
                     // usually should be class, but may be just plain Enum<?> (for Enum.valueOf()?)
                     if (returnType.isAssignableFrom(enumClass)) {
                         // note: mostly copied from 'EnumDeserializer.deserializerForCreator(...)'
-                        if (factory.getGenericParameterType(0) != String.class) {
+                        if (factory.getRawParameterType(0) != String.class) {
                             throw new IllegalArgumentException("Parameter #0 type for factory method ("+factory+") not suitable, must be java.lang.String");
                         }
                         if (config.canOverrideAccessModifiers()) {

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -93,7 +93,7 @@ public ValueInstantiator constructValueInstantiator(DeserializationConfig config
                     }
                 }
             }
-            delegateType = _beanDesc.resolveType(_creators[C_DELEGATE].getGenericParameterType(ix));
+            delegateType = _creators[C_DELEGATE].getParameterType(ix);
         }
 
         final JavaType type = _beanDesc.getType();

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -499,7 +499,7 @@ protected void addBeanProps(DeserializationContext ctxt,
         for (BeanPropertyDefinition propDef : propDefs) {
             SettableBeanProperty prop = null;
             /* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,
-             *   we need to do linkage (as per [Issue#318]), and so need to start with
+             *   we need to do linkage (as per [databind#318]), and so need to start with
              *   other types, and only then create constructor parameter, if any.
              */
             if (propDef.hasSetter()) {
@@ -509,7 +509,7 @@ protected void addBeanProps(DeserializationContext ctxt,
                 Type propertyType = propDef.getField().getGenericType();
                 prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);
             } else if (useGettersAsSetters && propDef.hasGetter()) {
-                /* As per [JACKSON-88], may also need to consider getters
+                /* May also need to consider getters
                  * for Map/Collection properties; but with lowest precedence
                  */
                 AnnotatedMethod getter = propDef.getGetter();
@@ -652,7 +652,7 @@ protected void addInjectables(DeserializationContext ctxt,
                     m.fixAccess(); // to ensure we can call it
                 }
                 builder.addInjectable(PropertyName.construct(m.getName()),
-                        beanDesc.resolveType(m.getGenericType()),
+                        m.getType(),
                         beanDesc.getClassAnnotations(), m, entry.getKey());
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java
Patch:
@@ -818,7 +818,7 @@ public void initialize(JsonGenerator g)
             }
             g.overrideStdFeatures(newFlags, mask);
         }
-        if (_formatWriteFeatures != 0) {
+        if (_formatWriteFeaturesToChange != 0) {
             g.overrideFormatFeatures(_formatWriteFeatures, _formatWriteFeaturesToChange);
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java
Patch:
@@ -322,13 +322,13 @@ public enum SerializationFeature implements ConfigFeature
      *<p>
      * NOTE: since this feature typically requires use of
      * {@link com.fasterxml.jackson.core.JsonGenerator#writeNumber(String)}
-     * ot may cause compatibility problems since not all {@link com.fasterxml.jackson.core.JsonGenerator}
+     * it may cause compatibility problems since not all {@link com.fasterxml.jackson.core.JsonGenerator}
      * implementations support such mode of output: usually only text-based formats
      * support it.
      *<p>
      * Feature is disabled by default.
      * 
-     * @deprecated Since 2.5: use {@link com.fasterxml.jackson.core.JsonGenerator.Feature#WRITE_BIGDECIMAL_AS_PLAIN} directly
+     * @deprecated Since 2.5: use {@link com.fasterxml.jackson.core.JsonGenerator.Feature#WRITE_BIGDECIMAL_AS_PLAIN} instead
      *    (using {@link ObjectWriter#with(com.fasterxml.jackson.core.JsonGenerator.Feature)}).
      */
     @Deprecated // since 2.5

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -397,6 +397,9 @@ protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt,
                 }
             }
         }
+        if (type.isReferenceType()) {
+            return factory.createReferenceDeserializer(ctxt, (ReferenceType) type, beanDesc);
+        }
         if (JsonNode.class.isAssignableFrom(type.getRawClass())) {
             return factory.createTreeDeserializer(config, type, beanDesc);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java
Patch:
@@ -65,7 +65,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanPro
         if (typeDeser != null) {
             typeDeser = typeDeser.forProperty(property);
         }
-        if (deser == _valueDeserializer && typeDeser == _valueTypeDeserializer) {
+        if ((deser == _valueDeserializer) && (typeDeser == _valueTypeDeserializer)) {
             return this;
         }
         return withResolved(typeDeser, deser);
@@ -84,8 +84,8 @@ public AtomicReference<?> deserialize(JsonParser jp, DeserializationContext ctxt
     }
 
     @Override
-    public Object[] deserializeWithType(JsonParser jp, DeserializationContext ctxt,
+    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,
             TypeDeserializer typeDeserializer) throws IOException {
-        return (Object[]) typeDeserializer.deserializeTypedFromAny(jp, ctxt);
+        return typeDeserializer.deserializeTypedFromAny(jp, ctxt);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -156,7 +156,7 @@ protected JavaType _narrow(Class<?> subclass)
     public JavaType narrowContentsBy(Class<?> contentClass)
     {
         // Can do a quick check first:
-        if (contentClass == _referencedType.getRawClass()) {
+        if (_referencedType.hasRawClass(contentClass)) {
             return this;
         }
         return new ReferenceType(_class, _bindings,

File: src/test/java/com/fasterxml/jackson/failing/TestConvertingSerializer357.java
Patch:
@@ -8,7 +8,7 @@
 public class TestConvertingSerializer357
     extends com.fasterxml.jackson.databind.BaseMapTest
 {
-    // [Issue#357]
+    // [databind#357]
     static class Value { }
 
     static class ListWrapper {
@@ -29,7 +29,7 @@ public List<String> convert(Value value) {
     /**********************************************************
      */
 
-    // [Issue#357]
+    // [databind#357]
     public void testConverterForList357() throws Exception {
         String json = objectWriter().writeValueAsString(new ListWrapper());
         assertEquals("{\"list\":[[\"Hello world!\"]]}", json);

File: src/test/java/com/fasterxml/jackson/databind/deser/TestValueAnnotations.java
Patch:
@@ -276,7 +276,7 @@ public void testOverrideClassInvalid() throws Exception
                 ("{ \"strings\" : [ ] }", BrokenCollectionHolder.class);
             fail("Expected a failure, but got results: "+result);
         } catch (JsonMappingException jme) {
-            verifyException(jme, "is not assignable to");
+            verifyException(jme, "not subtype of");
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test.java
Patch:
@@ -1,12 +1,12 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.type;
 
 import java.util.*;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.databind.*;
 
 // For [databind#936], losing parametric type information it seems
-public class PolymorphicListTest936 extends BaseMapTest
+public class PolymorphicList036Test extends BaseMapTest
 {
     // note: would prefer using CharSequence, but while abstract, that's deserialized
     // just fine as ... String

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java
Patch:
@@ -45,7 +45,7 @@ protected CollectionLikeType(TypeBase base, JavaType elemT)
     }
 
     /**
-     * @deprecated Since 2.7, use {@link #upgrade} for constructing instances, given
+     * @deprecated Since 2.7, use {@link #upgradeFrom} for constructing instances, given
      *    pre-resolved {@link SimpleType}.
      */
     @Deprecated // since 2.7
@@ -144,7 +144,7 @@ public CollectionLikeType withStaticTyping() {
     public JavaType refine(Class<?> rawType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInterfaces) {
         return new CollectionLikeType(rawType, _bindings,
-                _superClass, _superInterfaces, _elementType,
+                superClass, superInterfaces, _elementType,
                 _valueHandler, _typeHandler, _asStatic);
     }
     

File: src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java
Patch:
@@ -165,7 +165,7 @@ public MapLikeType withStaticTyping() {
     public JavaType refine(Class<?> rawType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInterfaces) {
         return new MapLikeType(rawType, _bindings,
-                _superClass, _superInterfaces, _keyType, _valueType,
+                superClass, superInterfaces, _keyType, _valueType,
                 _valueHandler, _typeHandler, _asStatic);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java
Patch:
@@ -120,7 +120,7 @@ public CollectionType withStaticTyping() {
     public JavaType refine(Class<?> rawType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInterfaces) {
         return new CollectionType(rawType, _bindings,
-                _superClass, _superInterfaces, _elementType,
+                superClass, superInterfaces, _elementType,
                 _valueHandler, _typeHandler, _asStatic);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/type/MapType.java
Patch:
@@ -139,7 +139,7 @@ public MapType withStaticTyping() {
     public JavaType refine(Class<?> rawType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInterfaces) {
         return new MapType(rawType, _bindings,
-                _superClass, _superInterfaces, _keyType, _valueType,
+                superClass, superInterfaces, _keyType, _valueType,
                 _valueHandler, _typeHandler, _asStatic);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -120,7 +120,7 @@ public ReferenceType withStaticTyping() {
     public JavaType refine(Class<?> rawType, TypeBindings bindings,
             JavaType superClass, JavaType[] superInterfaces) {
         return new ReferenceType(rawType, _bindings,
-                _superClass, _superInterfaces, _referencedType,
+                superClass, superInterfaces, _referencedType,
                 _valueHandler, _typeHandler, _asStatic);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/BeanDescription.java
Patch:
@@ -79,7 +79,10 @@ protected BeanDescription(JavaType type) {
      * Accessor for type bindings that may be needed to fully resolve
      * types of member object, such as return and argument types of
      * methods and constructors, and types of fields.
+     *
+     * @deprecated Since 2.7, use {@link #resolveType(java.lang.reflect.Type)} instead.
      */
+    @Deprecated
     public abstract TypeBindings bindingsForBeanType();
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -840,7 +840,7 @@ protected SettableBeanProperty constructCreatorProperty(DeserializationContext c
         }
         // 15-Oct-2015, tatu: Not 100% if context needed; removing it does not make any
         //    existing unit tests fail. Still seems like the right thing to do.
-        JavaType t0 = config.getTypeFactory().constructType(param.getParameterType(), beanDesc.bindingsForBeanType());
+        JavaType t0 = beanDesc.resolveType(param.getParameterType());
         BeanProperty.Std property = new BeanProperty.Std(name, t0,
                 intr.findWrapperName(param),
                 beanDesc.getClassAnnotations(), param, metadata);

File: src/test/java/com/fasterxml/jackson/databind/type/JavaType76Test.java
Patch:
@@ -1,14 +1,14 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.type;
 
 import java.util.*;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 /**
- * Failing test related to [Issue#76]
+ * Failing test related to [databind#76]
  */
-public class TestJavaType76 extends BaseMapTest
+public class JavaType76Test extends BaseMapTest
 {
     @SuppressWarnings("serial")
     static class HashTree<K, V> extends HashMap<K, HashTree<K, V>> { }

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -247,7 +247,7 @@ public Annotations getClassAnnotations() {
     public TypeBindings bindingsForBeanType()
     {
         if (_bindings == null) {
-            _bindings = new TypeBindings(_config.getTypeFactory(), _type);
+            _bindings = new TypeBindings(_config.getTypeFactory(), null, _type);
         }
         return _bindings;
     }

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeBindings.java
Patch:
@@ -42,7 +42,7 @@ public void testAbstract() throws Exception
          * known as 'Object.class' (via lower bound)
          */
         TypeFactory tf = TypeFactory.defaultInstance();
-        TypeBindings b = new TypeBindings(tf, AbstractType.class);
+        TypeBindings b = new TypeBindings(tf, null, AbstractType.class);
         assertEquals(2, b.getBindingCount());
         JavaType obType = tf.constructType(Object.class);
         assertEquals(obType, b.findType("A", true));
@@ -53,7 +53,7 @@ public void testSimple() throws Exception
     {
         TypeFactory tf = TypeFactory.defaultInstance();
         // concrete class does have bindings however
-        TypeBindings b = new TypeBindings(tf, LongStringType.class);
+        TypeBindings b = new TypeBindings(tf, null, LongStringType.class);
         assertEquals(2, b.getBindingCount());
         assertEquals(tf.constructType(Long.class), b.findType("A", true));
         assertEquals(tf.constructType(String.class), b.findType("B", true));

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -810,7 +810,7 @@ protected Object findSuppressableContentValue(SerializationConfig config,
             JavaType contentType, BeanDescription beanDesc)
         throws JsonMappingException
     {
-        JsonInclude.Value inclV = beanDesc.findPropertyInclusion(config.getPropertyInclusion());
+        JsonInclude.Value inclV = beanDesc.findPropertyInclusion(config.getDefaultPropertyInclusion());
         
         if (inclV == null) {
             return null;

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -38,7 +38,7 @@ public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc)
     {
         _config = config;
         _beanDesc = beanDesc;
-        _defaultInclusion = beanDesc.findPropertyInclusion(config.getPropertyInclusion());
+        _defaultInclusion = beanDesc.findPropertyInclusion(config.getDefaultPropertyInclusion());
         _annotationIntrospector = _config.getAnnotationIntrospector();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -99,7 +99,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                     ser = provider.serializerInstance(m, serDef);
                 }
             }
-            JsonFormat.Value format = property.findFormatOverrides(ai);
+            JsonFormat.Value format = property.findPropertyFormat(provider.getConfig(), String[].class);
             if (format != null) {
                 unwrapSingle = format.getFeature(JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java
Patch:
@@ -94,8 +94,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
 
         // First: if we have a property, may have property-annotation overrides
         if (property != null) {
-            final AnnotationIntrospector intr = provider.getAnnotationIntrospector();
-            JsonFormat.Value format = property.findFormatOverrides(intr);
+            JsonFormat.Value format = property.findPropertyFormat(provider.getConfig(), _handledType);
             if (format != null) {
                 unwrapSingle = format.getFeature(JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
                 if (unwrapSingle != _unwrapSingle) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -185,7 +185,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                     ser = provider.serializerInstance(m, serDef);
                 }
             }
-            JsonFormat.Value format = property.findFormatOverrides(intr);
+            JsonFormat.Value format = property.findPropertyFormat(provider.getConfig(), _handledType);
             if (format != null) {
                 unwrapSingle = format.getFeature(JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -329,7 +329,9 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             if (serDef != null) {
                 ser = provider.serializerInstance(propertyAcc, serDef);
             }
-            JsonInclude.Value inclV = property.findPropertyInclusion(intr);
+        }
+        if (property != null) {
+            JsonInclude.Value inclV = property.findPropertyInclusion(provider.getConfig(), Map.class);
             JsonInclude.Include incl = inclV.getContentInclusion();
             if ((incl != null) && (incl != JsonInclude.Include.USE_DEFAULTS)) {
                 suppressableValue = incl;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -144,7 +144,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                     ser = provider.serializerInstance(m, serDef);
                 }
             }
-            JsonFormat.Value format = property.findFormatOverrides(intr);
+            JsonFormat.Value format = property.findPropertyFormat(provider.getConfig(), _handledType);
             if (format != null) {
                 unwrapSingle = format.getFeature(JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java
Patch:
@@ -75,7 +75,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider, BeanPrope
                     ser = provider.serializerInstance(m, serDef);
                 }
             }
-            JsonFormat.Value format = property.findFormatOverrides(intr);
+            JsonFormat.Value format = property.findPropertyFormat(provider.getConfig(), _handledType);
             if (format != null) {
                 unwrapSingle = format.getFeature(JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -320,7 +320,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
         Object suppressableValue = _suppressableValue;
 
         // First: if we have a property, may have property-annotation overrides
-        if (propertyAcc != null && intr != null) {
+        if ((propertyAcc != null) && (intr != null)) {
             Object serDef = intr.findKeySerializer(propertyAcc);
             if (serDef != null) {
                 keySer = provider.serializerInstance(propertyAcc, serDef);
@@ -331,7 +331,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             }
             JsonInclude.Value inclV = property.findPropertyInclusion(intr);
             JsonInclude.Include incl = inclV.getContentInclusion();
-            if (incl != null && incl != JsonInclude.Include.USE_DEFAULTS) {
+            if ((incl != null) && (incl != JsonInclude.Include.USE_DEFAULTS)) {
                 suppressableValue = incl;
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -132,8 +132,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
             // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho
-            if ((_valueTypeIsStatic && !_valueType.isJavaLangObject())
-                    || hasContentTypeAnnotation(provider, property)) {
+            if (_valueTypeIsStatic && !_valueType.isJavaLangObject()) {
                 ser = provider.findValueSerializer(_valueType, property);
             }
         } else {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -199,9 +199,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
             if (_elementType != null) {
-                // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho
-                if ((_staticTyping && !_elementType.isJavaLangObject())
-                        || hasContentTypeAnnotation(provider, property)) {
+                if (_staticTyping && !_elementType.isJavaLangObject()) {
                     ser = provider.findValueSerializer(_elementType, property);
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -344,8 +344,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
             // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho
-            if ((_valueTypeIsStatic && !_valueType.isJavaLangObject())
-                    || hasContentTypeAnnotation(provider, property)) {
+            if (_valueTypeIsStatic && !_valueType.isJavaLangObject()) {
                 ser = provider.findValueSerializer(_valueType, property);
             }
         } else {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -158,7 +158,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
             if (_elementType != null) {
-                if (_staticTyping || hasContentTypeAnnotation(provider, property)) {
+                if (_staticTyping && !_elementType.isJavaLangObject()) {
                     ser = provider.findValueSerializer(_elementType, property);
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -609,20 +609,23 @@ public JsonInclude.Value findPropertyInclusion(Annotated a)
     }
 
     @Override
+    @Deprecated
     public Class<?> findSerializationType(Annotated am)
     {
         JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);
         return (ann == null) ? null : _classIfExplicit(ann.as());
     }
 
     @Override
+    @Deprecated
     public Class<?> findSerializationKeyType(Annotated am, JavaType baseType)
     {
         JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);
         return (ann == null) ? null : _classIfExplicit(ann.keyAs());
     }
 
     @Override
+    @Deprecated
     public Class<?> findSerializationContentType(Annotated am, JavaType baseType)
     {
         JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -126,13 +126,13 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
         if (ser == null) {
             ser = _valueSerializer;
         }
-        // [Issue#124]: May have a content converter
+        // [databind#124]: May have a content converter
         ser = findConvertingContentSerializer(provider, property, ser);
         if (ser == null) {
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
             // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho
-            if ((_valueTypeIsStatic && _valueType.getRawClass() != Object.class)
+            if ((_valueTypeIsStatic && !_valueType.isJavaLangObject())
                     || hasContentTypeAnnotation(provider, property)) {
                 ser = provider.findValueSerializer(_valueType, property);
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -200,7 +200,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             //   we can consider it a static case as well.
             if (_elementType != null) {
                 // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho
-                if ((_staticTyping && _elementType.getRawClass() != Object.class)
+                if ((_staticTyping && !_elementType.isJavaLangObject())
                         || hasContentTypeAnnotation(provider, property)) {
                     ser = provider.findValueSerializer(_elementType, property);
                 }
@@ -216,7 +216,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
         }
         return this;
     }
-    
+
     /*
     /**********************************************************
     /* Accessors

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -344,7 +344,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
             // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho
-            if ((_valueTypeIsStatic && _valueType.getRawClass() != Object.class)
+            if ((_valueTypeIsStatic && !_valueType.isJavaLangObject())
                     || hasContentTypeAnnotation(provider, property)) {
                 ser = provider.findValueSerializer(_valueType, property);
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -173,7 +173,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
     /* Accessors
     /**********************************************************
      */
-        
+
     @Override
     public JavaType getContentType() {
         return _elementType;

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -99,6 +99,9 @@ protected JavaType _narrow(Class<?> subclass)
                 _valueHandler, _typeHandler, _asStatic);
     }
 
+    // no need to override _widen() since it by default just calls _narrow() anyway
+//    protected JavaType _widen(Class<?> subclass)
+
     @Override
     public JavaType narrowContentsBy(Class<?> contentClass)
     {

File: src/main/java/com/fasterxml/jackson/databind/JavaType.java
Patch:
@@ -398,7 +398,7 @@ public JavaType containedTypeOrUnknown(int index) {
      * @since 2.6
      */
     public boolean hasValueHandler() { return _valueHandler != null; }
-    
+
     /*
     /**********************************************************
     /* Support for producing signatures

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -542,7 +542,8 @@ protected IOException _throwAsIOE(Exception e) throws IOException {
         return _throwAsIOE((JsonParser) null, e);
     }
 
-    @Deprecated // since 2.7
+    // 10-Oct-2015, tatu: _Should_ be deprecated, too, but its remaining
+    //   callers can not actually provide a JsonParser
     protected void _throwAsIOE(Exception e, Object value) throws IOException {
         _throwAsIOE((JsonParser) null, e, value);
     }

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java
Patch:
@@ -111,7 +111,7 @@ public CollectionLikeType withStaticTyping() {
 
     @Override
     public boolean isCollectionLikeType() { return true; }
-    
+
     @Override
     public JavaType getContentType() { return _elementType; }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -1037,10 +1037,10 @@ protected Object _handleTypedObjectId(JsonParser jp, DeserializationContext ctxt
      * @since 2.3
      */
     @SuppressWarnings("resource") // TokenBuffers don't need close, nor parser thereof
-    protected Object _convertObjectId(JsonParser jp, DeserializationContext ctxt,
+    protected Object _convertObjectId(JsonParser p, DeserializationContext ctxt,
             Object rawId, JsonDeserializer<Object> idDeser) throws IOException
     {
-        TokenBuffer buf = new TokenBuffer(jp);
+        TokenBuffer buf = new TokenBuffer(p, ctxt);
         if (rawId instanceof String) {
             buf.writeString((String) rawId);
         } else if (rawId instanceof Long) {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
Patch:
@@ -93,7 +93,7 @@ public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext c
                 return _deserializeTypedForId(jp, ctxt, tb);
             }
             if (tb == null) {
-                tb = new TokenBuffer(null, false);
+                tb = new TokenBuffer(jp, ctxt);
             }
             tb.writeFieldName(name);
             tb.copyCurrentStructure(jp);
@@ -108,7 +108,7 @@ protected Object _deserializeTypedForId(JsonParser jp, DeserializationContext ct
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         if (_typeIdVisible) { // need to merge id back in JSON input?
             if (tb == null) {
-                tb = new TokenBuffer(null, false);
+                tb = new TokenBuffer(jp, ctxt);
             }
             tb.writeFieldName(jp.getCurrentName());
             tb.writeString(typeId);

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -4,7 +4,6 @@
 import java.lang.annotation.Annotation;
 
 import com.fasterxml.jackson.core.*;
-
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.impl.FailingDeserializer;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
@@ -347,7 +346,8 @@ public <A extends Annotation> A getContextAnnotation(Class<A> acls) {
     }
 
     @Override
-    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)
+    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor,
+            SerializerProvider provider)
         throws JsonMappingException
     {
         if (isRequired()) {

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -7,11 +7,9 @@
 import java.util.HashMap;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
-
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.SerializableString;
 import com.fasterxml.jackson.core.io.SerializedString;
-
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.introspect.*;
@@ -750,7 +748,8 @@ public void serializeAsPlaceholder(Object bean, JsonGenerator gen, SerializerPro
 
     // Also part of BeanProperty implementation
     @Override
-    public void depositSchemaProperty(JsonObjectFormatVisitor v)
+    public void depositSchemaProperty(JsonObjectFormatVisitor v,
+            SerializerProvider provider)
         throws JsonMappingException
     {
         if (v != null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyWriter.java
Patch:
@@ -152,10 +152,10 @@ public abstract void serializeAsPlaceholder(Object value, JsonGenerator jgen, Se
      * POJO introspection.
      */
     @Override
-    public abstract void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)
+    public abstract void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor,
+            SerializerProvider provider)
         throws JsonMappingException;
 
-
     /**
      * Legacy method called for JSON Schema generation; should not be called by new code
      * 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java
Patch:
@@ -189,7 +189,7 @@ public void depositSchemaProperty(BeanPropertyWriter writer,
         throws JsonMappingException
     {
         if (include(writer)) {
-            writer.depositSchemaProperty(objectVisitor);
+            writer.depositSchemaProperty(objectVisitor, provider);
         }
     }
 
@@ -238,7 +238,7 @@ public void depositSchemaProperty(PropertyWriter writer,
             SerializerProvider provider) throws JsonMappingException 
     {
         if (include(writer)) {
-            writer.depositSchemaProperty(objectVisitor);
+            writer.depositSchemaProperty(objectVisitor, provider);
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java
Patch:
@@ -706,11 +706,11 @@ public void mergeAnnotations(boolean forSerialization)
         }
     }
 
-    private AnnotationMap _mergeAnnotations(int index, Linked<? extends AnnotatedMember>... nodes)
+    private AnnotationMap _mergeAnnotations(int index,
+            Linked<? extends AnnotatedMember>... nodes)
     {
         AnnotationMap ann = _getAllAnnotations(nodes[index]);
-        ++index;
-        for (; index < nodes.length; ++index) {
+        while (++index < nodes.length) {
             if (nodes[index] != null) {
               return AnnotationMap.merge(ann, _mergeAnnotations(index, nodes));
             }

File: src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
Patch:
@@ -76,7 +76,7 @@ protected static class ListWrapper<T>
     {
         public List<T> list;
 
-        public ListWrapper(T... values) {
+        public ListWrapper(@SuppressWarnings("unchecked") T... values) {
             list = new ArrayList<T>();
             for (T value : values) {
                 list.add(value);

File: src/test/java/com/fasterxml/jackson/databind/ext/TestJdk16Types.java
Patch:
@@ -9,9 +9,9 @@
  * Tests to ensure that we can handle 1.6-only types, even if
  * registrations are done without direct refs
  */
-public class TestJDK16OnlyTypes extends com.fasterxml.jackson.databind.BaseMapTest
+public class TestJdk16Types extends com.fasterxml.jackson.databind.BaseMapTest
 {
-    // for [Issue#216]
+    // for [databind#216]
     public void test16Types() throws Exception
     {
         final ObjectMapper mapper = new ObjectMapper();

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -335,7 +335,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
         if (ser == null) {
             ser = _valueSerializer;
         }
-        // [Issue#124]: May have a content converter
+        // [databind#124]: May have a content converter
         ser = findConvertingContentSerializer(provider, property, ser);
         if (ser == null) {
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
@@ -533,6 +533,7 @@ public void serializeFields(Map<?,?> value, JsonGenerator gen, SerializerProvide
             Object valueElem = entry.getValue();
             // First, serialize key
             Object keyElem = entry.getKey();
+
             if (keyElem == null) {
                 provider.findNullKeySerializer(_keyType, _property).serialize(null, gen, provider);
             } else {

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -838,13 +838,13 @@ public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider
         }
         _depositSchemaProperty(propertiesNode, schemaNode);
     }
-    
+
     /*
     /**********************************************************
     /* Helper methods
     /**********************************************************
      */
-    
+
     protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,
             Class<?> type, SerializerProvider provider) throws JsonMappingException
     {
@@ -861,7 +861,7 @@ protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,
         }
         return result.serializer;
     }
-    
+
     /**
      * Method that can be used to access value of the property this
      * Object describes, from given bean instance.

File: src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java
Patch:
@@ -72,14 +72,14 @@ public abstract TypeSerializer createTypeSerializer(SerializationConfig config,
      * be output as <code>JsonToken.FIELD_NAME</code>) for Map that has specified declared
      * key type, and is for specified property (or, if property is null, as root value)
      * 
-     * @param baseType Declared type for Map keys
+     * @param type Declared type for Map keys
      * @param defaultImpl Default key serializer implementation to use, if no custom ones
      *    are found (may be null)
      * 
      * @return Serializer to use, if factory knows it; null if not (in which case default
      *   serializer is to be used)
      */
     public abstract JsonSerializer<Object> createKeySerializer(SerializationConfig config,
-            JavaType baseType, JsonSerializer<Object> defaultImpl)
+            JavaType type, JsonSerializer<Object> defaultImpl)
         throws JsonMappingException;
 }

File: src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java
Patch:
@@ -188,6 +188,6 @@ public void testDynamicMapKeys() throws Exception
         stuff.put(AbcLC.B, Integer.valueOf(3));
         stuff.put(new UCString("foo"), Integer.valueOf(4));
         String json = MAPPER.writeValueAsString(stuff);
-        assertEquals("{'b':3,'FOO':4}", aposToQuotes(json));
+        assertEquals(aposToQuotes("{'b':3,'FOO':4}"), json);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -276,8 +276,7 @@ public boolean useForType(JavaType t)
             STD_VISIBILITY_CHECKER, null, TypeFactory.defaultInstance(),
             null, StdDateFormat.instance, null,
             Locale.getDefault(),
-//            TimeZone.getDefault()
-            TimeZone.getTimeZone("GMT"),
+            null, // to indicate "use default TimeZone"
             Base64Variants.getDefaultVariant() // 2.1
     );
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java
Patch:
@@ -83,6 +83,7 @@ public static JsonSerializer<Object> getStdKeySerializer(JavaType keyType) {
     /**
      * @deprecated since 2.7
      */
+    @Deprecated
     public static JsonSerializer<Object> getDefault() {
         return DEFAULT_KEY_SERIALIZER;
     }

File: src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
Patch:
@@ -149,7 +149,7 @@ public StdDateFormat withTimeZone(TimeZone tz) {
         if (tz == null) {
             tz = DEFAULT_TIMEZONE;
         }
-        if (tz.equals(_timezone)) {
+        if ((tz == _timezone) || tz.equals(_timezone)) {
             return this;
         }
         return new StdDateFormat(tz, _locale);

File: src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java
Patch:
@@ -11,7 +11,6 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.XBean;
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
 
 @SuppressWarnings("serial")

File: src/test/java/com/fasterxml/jackson/databind/misc/TestJSONP.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.ser;
+package com.fasterxml.jackson.databind.misc;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.type.TypeFactory;

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -237,13 +237,13 @@ public JsonSerializer<Object> createKeySerializer(SerializationConfig config,
                         }
                         ser = new JsonValueSerializer(m, delegate);
                     } else {
-                        ser = StdKeySerializers.getDefault();
+                        ser = StdKeySerializers.getFallbackKeySerializer(config, keyType.getRawClass());
                     }
                 }
             }
         }
         
-        // [Issue#120]: Allow post-processing
+        // [databind#120]: Allow post-processing
         if (_factoryConfig.hasSerializerModifiers()) {
             for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {
                 ser = mod.modifyKeySerializer(config, keyType, beanDesc, ser);

File: src/main/java/com/fasterxml/jackson/databind/node/IntNode.java
Patch:
@@ -129,5 +129,5 @@ public boolean equals(Object o)
     }
 
     @Override
-        public int hashCode() { return _value; }
+    public int hashCode() { return _value; }
 }

File: src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java
Patch:
@@ -45,6 +45,8 @@ public void serializeWithType(JsonGenerator jg, SerializerProvider provider,
         typeSer.writeTypeSuffixForScalar(this, jg);
     }
 
+    @Override public abstract int hashCode();
+
     /*
     /**********************************************************************
     /* Base impls for standard methods

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -124,6 +124,8 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
             if (_vanillaProcessing) {
                 return vanillaDeserialize(p, ctxt, p.nextToken());
             }
+            // 23-Sep-2015, tatu: This is wrong at some many levels, but for now... it is
+            //    what it is, including "expected behavior".
             p.nextToken();
             if (_objectIdReader != null) {
                 return deserializeWithObjectId(p, ctxt);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -789,7 +789,9 @@ protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, D
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 // first: let's check to see if this might be part of value with external type id:
-                if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
+                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
+                //   since it is not the bean
+                if (ext.handlePropertyValue(p, ctxt, propName, null)) {
                     ;
                 } else {
                     // Last creator property to set?

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java
Patch:
@@ -138,8 +138,8 @@ public abstract void serialize(T value, JsonGenerator gen, SerializerProvider se
      *  typeSer.writeTypeSuffixForScalar(value, gen);
      *</pre>
      * and implementations for type serialized as JSON Arrays or Objects would differ slightly,
-     * as <code>START-ARRAY></code>/<code>END-ARRAY</code> and
-     * <code>START-OBJECT></code>/<code>END-OBJECT</code> pairs
+     * as <code>START-ARRAY</code>/<code>END-ARRAY</code> and
+     * <code>START-OBJECT</code>/<code>END-OBJECT</code> pairs
      * need to be properly handled with respect to serializing of contents.
      *
      * @param value Value to serialize; can <b>not</b> be null.

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java
Patch:
@@ -327,7 +327,7 @@ static class ExplicitBean {
       String userAge = "35";
     }
 
-    public void test2() throws Exception {
+    public void testExplicitRename() throws Exception {
       ObjectMapper m = new ObjectMapper();
       m.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);
       m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java
Patch:
@@ -138,8 +138,8 @@ public abstract void serialize(T value, JsonGenerator gen, SerializerProvider se
      *  typeSer.writeTypeSuffixForScalar(value, gen);
      *</pre>
      * and implementations for type serialized as JSON Arrays or Objects would differ slightly,
-     * as <code>START-ARRAY></code>/<code>END-ARRAY</code> and
-     * <code>START-OBJECT></code>/<code>END-OBJECT</code> pairs
+     * as <code>START-ARRAY</code>/<code>END-ARRAY</code> and
+     * <code>START-OBJECT</code>/<code>END-OBJECT</code> pairs
      * need to be properly handled with respect to serializing of contents.
      *
      * @param value Value to serialize; can <b>not</b> be null.

File: src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java
Patch:
@@ -195,7 +195,8 @@ protected Object _deserializeFromObjectId(JsonParser jp, DeserializationContext
         // do we have it resolved?
         Object pojo = roid.resolve();
         if (pojo == null) { // not yet; should wait...
-            throw new UnresolvedForwardReference("Could not resolve Object Id ["+id+"] -- unresolved forward-reference?", jp.getCurrentLocation(), roid);
+            throw new UnresolvedForwardReference(jp,
+                    "Could not resolve Object Id ["+id+"] -- unresolved forward-reference?", jp.getCurrentLocation(), roid);
         }
         return pojo;
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java
Patch:
@@ -151,7 +151,7 @@ public void checkUnresolvedObjectId() throws UnresolvedForwardReference
                 continue;
             }
             if (exception == null) {
-                exception = new UnresolvedForwardReference("Unresolved forward references for: ");
+                exception = new UnresolvedForwardReference(getParser(), "Unresolved forward references for: ");
             }
             Object key = roid.getKey().key;
             for (Iterator<Referring> iterator = roid.referringProperties(); iterator.hasNext(); ) {

File: src/test/java/com/fasterxml/jackson/databind/TestVersions.java
Patch:
@@ -31,10 +31,9 @@ public void testMapperVersions()
     private void assertVersion(Versioned vers)
     {
         Version v = vers.version();
-        assertFalse("Should find version information (got "+v+")", v.isUknownVersion());
+        assertFalse("Should find version information (got "+v+")", v.isUnknownVersion());
         Version exp = PackageVersion.VERSION;
         assertEquals(exp.toFullString(), v.toFullString());
         assertEquals(exp, v);
     }
 }
-

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -26,7 +26,7 @@
 public class BeanSerializer
     extends BeanSerializerBase
 {
-    private static final long serialVersionUID = -4536893235025590367L;
+    private static final long serialVersionUID = -3618164443537292758L;
 
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java
Patch:
@@ -22,7 +22,10 @@
  */
 public abstract class VirtualBeanPropertyWriter
     extends BeanPropertyWriter
+    implements java.io.Serializable
 {
+    private static final long serialVersionUID = 1L;
+
     /**
      * Constructor used by most sub-types.
      */

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java
Patch:
@@ -20,6 +20,8 @@
 public class AttributePropertyWriter
     extends VirtualBeanPropertyWriter
 {
+    private static final long serialVersionUID = 1;
+
     protected final String _attrName;
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java
Patch:
@@ -23,7 +23,10 @@
  */
 public class UnwrappingBeanPropertyWriter
     extends BeanPropertyWriter
+    implements java.io.Serializable
 {
+    private static final long serialVersionUID = 1L;
+
     /**
      * Transformer used to add prefix and/or suffix for properties
      * of unwrapped POJO.

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java
Patch:
@@ -12,6 +12,7 @@
 
 public class UnwrappingBeanSerializer
     extends BeanSerializerBase
+    implements java.io.Serializable
 {
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/fasterxml/jackson/databind/util/EnumValues.java
Patch:
@@ -11,7 +11,10 @@
  * enumerations.
  */
 public final class EnumValues
+    implements java.io.Serializable
 {
+    private static final long serialVersionUID = 1;
+
     private final Class<Enum<?>> _enumClass;
 
     private final Enum<?>[] _values;

File: src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
Patch:
@@ -90,9 +90,7 @@ public void testEnumHandlers() throws IOException
         /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic
          *    at this point; comment out for now. Try to fix later on.
          */
-        
-//        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));
-        bytes = jdkSerialize(mapper.writer());
+        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));
         ObjectWriter w = jdkDeserialize(bytes);
         assertNotNull(w);
 

File: src/test/java/com/fasterxml/jackson/databind/ser/TestVirtualProperties.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.core.JsonGenerator;
-
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonAppend;
 import com.fasterxml.jackson.databind.cfg.MapperConfig;
@@ -45,6 +44,7 @@ static class OptionalsBean
         public int value = 28;
     }
 
+    @SuppressWarnings("serial")
     static class CustomVProperty
         extends VirtualBeanPropertyWriter
     {

File: src/main/java/com/fasterxml/jackson/databind/JavaType.java
Patch:
@@ -147,8 +147,9 @@ public JavaType narrowBy(Class<?> subclass)
         if (subclass == _class) { return this; }
         // Otherwise, ensure compatibility
         _assertSubclass(subclass, _class);
+        
         JavaType result = _narrow(subclass);
-
+        
         // TODO: these checks should NOT actually be needed; above should suffice:
         if (_valueHandler != result.<Object>getValueHandler()) {
             result = result.withValueHandler(_valueHandler);

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1754,7 +1754,7 @@ protected <T extends JavaType> T modifyTypeByAnnotation(DeserializationContext c
         Class<?> subclass = intr.findDeserializationType(a, type);
         if (subclass != null) {
             try {
-                type = (T) type.narrowBy(subclass);
+                type = (T) ctxt.getTypeFactory().constructSpecializedType(type, subclass);
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException("Failed to narrow type "+type+" with concrete-type annotation (value "+subclass.getName()+"), method '"+a.getName()+"': "+iae.getMessage(), null, iae);
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -474,7 +474,7 @@ private JavaType modifyTypeByAnnotation(DeserializationContext ctxt,
         Class<?> subclass = intr.findDeserializationType(a, type);
         if (subclass != null) {
             try {
-                type = type.narrowBy(subclass);
+                type = ctxt.getTypeFactory().constructSpecializedType(type, subclass);
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException("Failed to narrow type "+type+" with concrete-type annotation (value "+subclass.getName()+"), method '"+a.getName()+"': "+iae.getMessage(), null, iae);
             }

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java
Patch:
@@ -76,7 +76,8 @@ public JavaType findTypeMapping(DeserializationConfig config, JavaType type)
         if (dst == null) {
             return null;
         }
-        return type.narrowBy(dst);
+        // 09-Aug-2015, tatu: Instead of direct call via JavaType, better use TypeFactory
+        return config.getTypeFactory().constructSpecializedType(type, dst);
     }
 
     

File: src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java
Patch:
@@ -231,10 +231,9 @@ public BaseSettings withDateFormat(DateFormat df) {
         if (_dateFormat == df) {
             return this;
         }
-        TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();
         return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,
                 _typeResolverBuilder, df, _handlerInstantiator, _locale,
-                tz, _defaultBase64);
+                _timeZone, _defaultBase64);
     }
 
     public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) {

File: src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectId.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.fasterxml.jackson.databind.*;
 
-// related to [JACKSON-847]
 public class TestObjectId extends BaseMapTest
 {
     @JsonPropertyOrder({"a", "b"})

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -532,7 +532,7 @@ protected void addBeanProps(DeserializationContext ctxt,
                 CreatorProperty cprop = null;
                 if (creatorProps != null) {
                     for (SettableBeanProperty cp : creatorProps) {
-                        if (name.equals(cp.getName())) {
+                        if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {
                             cprop = (CreatorProperty) cp;
                             break;
                         }

File: src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java
Patch:
@@ -115,7 +115,9 @@ public boolean canInstantiate() {
      * NOTE: all properties will be of type
      * {@link com.fasterxml.jackson.databind.deser.CreatorProperty}.
      */
-    public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config) { return null; }
+    public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config) {
+        return null;
+    }
 
     /**
      * Method that can be used to determine what is the type of delegate

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -546,6 +546,8 @@ public void serializeWithType(Object bean, JsonGenerator gen,
         } else {
             typeSer.writeCustomTypePrefixForObject(bean, gen, typeStr);
         }
+        // [databind#631]: Assign current value, to be accessible by custom serializers
+        gen.setCurrentValue(bean);
         if (_propertyFilterId != null) {
             serializeFieldsFiltered(bean, gen, provider);
         } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ReadableObjectId.java
Patch:
@@ -18,11 +18,12 @@
 public class ReadableObjectId
 {
     /**
-     * @deprecated Prefer using {@link #resolve()}, which is able to handle
-     *             external id resolving mechanism.
+     * @deprecated Change visibility, if possible; prefer using {@link #resolve()}, which is able
+     *    to handle external id resolving mechanism.
      */
     @Deprecated // at least since 2.5. Remove from 2.7
     public Object item;
+
     @Deprecated
     public final Object id;
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java
Patch:
@@ -80,7 +80,7 @@ public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt
      * deserialization.
      */
     @SuppressWarnings("resource")
-    private final Object _deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
+    protected Object _deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (jp.canReadTypeId()) {
@@ -116,7 +116,7 @@ private final Object _deserialize(JsonParser jp, DeserializationContext ctxt) th
         return value;
     }    
     
-    protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException
+    protected String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
         if (!jp.isExpectedStartArrayToken()) {
             // Need to allow even more customized handling, if something unexpected seen...

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
Patch:
@@ -17,8 +17,6 @@
  * when typed object is expressed as JSON Object; otherwise behaves similar to how
  * {@link As#WRAPPER_ARRAY} works.
  * Latter is used if JSON representation is polymorphic
- * 
- * @author tatu
  */
 public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer
 {
@@ -104,7 +102,7 @@ public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext c
     }
 
     @SuppressWarnings("resource")
-    protected final Object _deserializeTypedForId(JsonParser jp, DeserializationContext ctxt, TokenBuffer tb) throws IOException
+    protected Object _deserializeTypedForId(JsonParser jp, DeserializationContext ctxt, TokenBuffer tb) throws IOException
     {
         String typeId = jp.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java
Patch:
@@ -14,8 +14,6 @@
  * use JSON Object). If this is not possible (for JSON Arrays, scalars),
  * uses a JSON Array wrapper (similar to how
  * {@link As#WRAPPER_ARRAY} always works) as a fallback.
- * 
- * @author tatus
  */
 public class AsPropertyTypeSerializer
     extends AsArrayTypeSerializer

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
Patch:
@@ -21,7 +21,7 @@ public class AsWrapperTypeDeserializer
     extends TypeDeserializerBase
     implements java.io.Serializable
 {
-    private static final long serialVersionUID = 5345570420394408290L;
+    private static final long serialVersionUID = 1L;
 
     public AsWrapperTypeDeserializer(JavaType bt, TypeIdResolver idRes,
             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)
@@ -76,7 +76,7 @@ public Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt
      * deserialization.
      */
     @SuppressWarnings("resource")
-    private final Object _deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
+    protected Object _deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (jp.canReadTypeId()) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -455,7 +455,7 @@ public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOEx
                     return Double.NaN;
                 }
                 try {
-                    if (text.indexOf('.') >= 0) { // floating point
+                    if (text.indexOf('.') >= 0 || text.indexOf('E') >= 0) { // floating point
                         if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {
                             return new BigDecimal(text);
                         }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
Patch:
@@ -60,7 +60,7 @@ protected JavaType _typeFromId(String id, TypeFactory typeFactory)
             return t;
         }
         try {
-            Class<?> cls =  ClassUtil.findClass(id);
+            Class<?> cls =  typeFactory.findClass(id);
             return typeFactory.constructSpecializedType(_baseType, cls);
         } catch (ClassNotFoundException e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): no such class found");

File: src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**
  * Simple recursive-descent parser for parsing canonical {@link JavaType}
@@ -73,7 +72,7 @@ protected List<JavaType> parseTypes(MyTokenizer tokens)
     protected Class<?> findClass(String className, MyTokenizer tokens)
     {
         try {
-            return ClassUtil.findClass(className);
+            return _factory.findClass(className);
         } catch (Exception e) {
             if (e instanceof RuntimeException) {
                 throw (RuntimeException) e;

File: src/test/java/com/fasterxml/jackson/databind/creators/ImplicitNameMatch792Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.creators;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;

File: src/main/java/com/fasterxml/jackson/databind/SequenceWriter.java
Patch:
@@ -82,8 +82,8 @@ public SequenceWriter(DefaultSerializerProvider prov, JsonGenerator gen,
         _provider = prov;
         _generator = gen;
         _closeGenerator = closeGenerator;
-        _rootSerializer = prefetch.valueSerializer;
-        _typeSerializer = prefetch.typeSerializer;
+        _rootSerializer = prefetch.getValueSerializer();
+        _typeSerializer = prefetch.getTypeSerializer();
 
         _config = prov.getConfig();
         _cfgFlush = _config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE);

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java
Patch:
@@ -434,6 +434,7 @@ public final PropertyName getFullRootName() {
         return _rootName;
     }
 
+    @Override
     public final Class<?> getActiveView() {
         return _view;
     }

File: src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java
Patch:
@@ -19,6 +19,7 @@ static class CustomKey {
         String a;
         int b;
 
+        @Override
         public String toString() { return "BAD-KEY"; }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java
Patch:
@@ -53,7 +53,6 @@ static class KeyListBean {
     }
 
     // [Issue#828]
-    // @JsonDeserialize(using)
     @JsonDeserialize(using=SomeObjectDeserializer.class)
     static class SomeObject {}
 

File: src/test/java/com/fasterxml/jackson/databind/seq/ObjectWriterTest.java
Patch:
@@ -93,7 +93,7 @@ public void testObjectWriterWithNode() throws Exception
         assertEquals("{\"a\":5}", json);
     }
 
-    public void testPolymorpicWithTyping() throws Exception
+    public void testPolymorphicWithTyping() throws Exception
     {
         ObjectWriter writer = MAPPER.writerFor(PolyBase.class);
         String json;

File: src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.seq;
 
 import java.io.IOException;
 import java.util.HashMap;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/DateSerializer.java
Patch:
@@ -42,8 +42,7 @@ protected long _timestamp(Date value) {
     }
 
     @Override
-    public void serialize(Date value, JsonGenerator gen, SerializerProvider provider)
-        throws IOException, JsonGenerationException
+    public void serialize(Date value, JsonGenerator gen, SerializerProvider provider) throws IOException
     {
         if (_asTimestamp(provider)) {
             gen.writeNumber(_timestamp(value));

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -721,9 +721,10 @@ protected List<BeanPropertyWriter> removeOverlappingTypeIds(SerializerProvider p
             }
             String n = td.getPropertyName();
             PropertyName typePropName = PropertyName.construct(n);
+
             for (BeanPropertyWriter w2 : props) {
                 if ((w2 != bpw) && w2.wouldConflictWithName(typePropName)) {
-                    props.set(i, bpw.withTypeSerializer(null));
+                    bpw.assignTypeSerializer(null);
                     break;
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java
Patch:
@@ -32,7 +32,7 @@ public abstract class TypeSerializer
      * @since 2.0
      */
     public abstract TypeSerializer forProperty(BeanProperty prop);
-    
+
     /*
     /**********************************************************
     /* Introspection

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -277,6 +277,8 @@ public TypeSerializer createTypeSerializer(SerializationConfig config,
         if (b == null) {
             return null;
         }
+        // 10-Jun-2015, tatu: Since not created for Bean Property, no need for post-processing
+        //    wrt EXTERNAL_PROPERTY
         return b.buildTypeSerializer(config, baseType, subtypes);
     }
 
@@ -293,7 +295,7 @@ public TypeSerializer createTypeSerializer(SerializationConfig config,
     /* Overridable secondary serializer accessor methods
     /**********************************************************
      */
-    
+
     /**
      * Method that will use fast lookup (and identity comparison) methods to
      * see if we know serializer to use for given type.

File: src/main/java/com/fasterxml/jackson/databind/util/EmptyIterator.java
Patch:
@@ -15,7 +15,7 @@ public class EmptyIterator<T> implements Iterator<T> {
 
     @SuppressWarnings("unchecked")
     public static <T> Iterator<T> instance() { return (Iterator<T>) instance; }
-    
+
     @Override public boolean hasNext() { return false; }
     @Override public T next() { throw new NoSuchElementException(); }
     @Override public void remove() { throw new UnsupportedOperationException(); }

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/NoClassDefFoundDeserializer.java
Patch:
@@ -3,14 +3,15 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 
 /**
  * A deserializer that stores a {@link NoClassDefFoundError} error
  * and throws the stored exception when attempting to deserialize
  * a value. Null and empty values can be deserialized without error.
+ * 
+ * @since 2.5
  */
 public class NoClassDefFoundDeserializer<T> extends JsonDeserializer<T>
 {
@@ -22,8 +23,7 @@ public NoClassDefFoundDeserializer(NoClassDefFoundError cause)
     }
 
     @Override
-    public T deserialize(JsonParser jp, DeserializationContext ctxt)
-            throws IOException, JsonProcessingException
+    public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
         throw _cause;
     }

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java
Patch:
@@ -194,7 +194,7 @@ protected POJOPropertiesCollector collectProperties(MapperConfig<?> config,
         boolean useAnnotations = config.isAnnotationProcessingEnabled();
         AnnotatedClass ac = AnnotatedClass.construct(type.getRawClass(),
                 (useAnnotations ? config.getAnnotationIntrospector() : null), r);
-        return constructPropertyCollector(config, ac, type, forSerialization, mutatorPrefix).collect();
+        return constructPropertyCollector(config, ac, type, forSerialization, mutatorPrefix);
     }
     
     protected POJOPropertiesCollector collectPropertiesWithBuilder(MapperConfig<?> config,
@@ -205,7 +205,7 @@ protected POJOPropertiesCollector collectPropertiesWithBuilder(MapperConfig<?> c
         AnnotatedClass ac = AnnotatedClass.construct(type.getRawClass(), ai, r);
         JsonPOJOBuilder.Value builderConfig = (ai == null) ? null : ai.findPOJOBuilderConfig(ac);
         String mutatorPrefix = (builderConfig == null) ? "with" : builderConfig.withPrefix;
-        return constructPropertyCollector(config, ac, type, forSerialization, mutatorPrefix).collect();
+        return constructPropertyCollector(config, ac, type, forSerialization, mutatorPrefix);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -1,5 +1,7 @@
 package com.fasterxml.jackson.databind.node;
 
+import com.fasterxml.jackson.annotation.JsonAutoDetect;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
@@ -320,6 +322,7 @@ public JsonNode set(String fieldName, JsonNode value)
      *
      * @since 2.1
      */
+    @JsonIgnore // work-around for [databind#815]
     public JsonNode setAll(Map<String,? extends JsonNode> properties)
     {
         for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) {

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion;
 import com.fasterxml.jackson.databind.introspect.*;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.util.*;

File: src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java
Patch:
@@ -21,8 +21,8 @@ public class TestConfig
     /**********************************************************
      */
 
-    @JsonSerialize(include=JsonSerialize.Inclusion.NON_DEFAULT,
-                   typing=JsonSerialize.Typing.STATIC)
+    @JsonInclude(JsonInclude.Include.NON_DEFAULT)
+    @JsonSerialize(typing=JsonSerialize.Typing.STATIC)
     final static class Config { }
 
     final static class ConfigNone { }

File: src/test/java/com/fasterxml/jackson/databind/ser/TestEmptyClass.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 
+import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
@@ -23,7 +24,7 @@ static class NonZero {
         public NonZero(int i) { nr = i; }
     }
 
-    @JsonSerialize(include=JsonSerialize.Inclusion.NON_EMPTY)
+    @JsonInclude(JsonInclude.Include.NON_EMPTY)
     static class NonZeroWrapper {
         public NonZero value;
         

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1271,7 +1271,7 @@ public ObjectMapper setSerializationInclusion(JsonInclude.Include incl) {
      * Method for specifying {@link PrettyPrinter} to use when "default pretty-printing"
      * is enabled (by enabling {@link SerializationFeature#INDENT_OUTPUT})
      * 
-     * @param pp
+     * @param pp Pretty printer to use by default.
      * 
      * @return This mapper, useful for call-chaining
      * 

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -411,7 +411,6 @@ public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config
 
         // may need to keep track for [#725]
         List<AnnotatedConstructor> implicitCtors = null;
-        
         for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {
             final boolean isCreator = intr.hasCreatorAnnotation(ctor);
             BeanPropertyDefinition[] propDefs = creatorParams.get(ctor);
@@ -446,7 +445,7 @@ public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config
             // 2 or more args; all params must have names or be injectable
             // 14-Mar-2015, tatu (2.6): Or, as per [#725], implicit names will also
             //   do, with some constraints. But that will require bit post processing...
-            
+
             AnnotatedParameter nonAnnotatedParam = null;
             CreatorProperty[] properties = new CreatorProperty[argCount];
             int explicitNameCount = 0;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -20,8 +20,8 @@ public class BeanDeserializer
 {
     /* TODOs for future versions:
      * 
-     * For 2.6?
-     * 
+     * For 2.7?
+     *
      * - New method in JsonDeserializer (deserializeNext()) to allow use of more
      *   efficient 'nextXxx()' method `JsonParser` provides.
      *
@@ -429,7 +429,7 @@ protected Object _deserializeUsingPropertyBased(final JsonParser p, final Deseri
             unknown.writeFieldName(propName);
             unknown.copyCurrentStructure(p);
         }
-        
+
         // We hit END_OBJECT, so:
         Object bean;
         try {

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -534,13 +534,13 @@ protected void addBeanProps(DeserializationContext ctxt,
                               +name+"' (in class "+beanDesc.getBeanClass().getName()+")");
                 }
                 if (prop != null) {
-                    cprop = cprop.withFallbackSetter(prop);
+                    cprop.setFallbackSetter(prop);
                 }
                 prop = cprop;
                 builder.addCreatorProperty(cprop);
                 continue;
             }
-            
+
             if (prop != null) {
                 Class<?>[] views = propDef.findViews();
                 if (views == null) {

File: src/test/java/com/fasterxml/jackson/databind/convert/ConvertingAbstractSerializer795Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.convert;
 
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;
@@ -47,7 +47,6 @@ public NonAbstractCustomType(String v) {
         }
     }
 
-
     public static class NonAbstractCustomTypeDeserializationConverter extends StdConverter<String, NonAbstractCustomType>{
 
         @Override
@@ -56,7 +55,6 @@ public NonAbstractCustomType convert(String arg) {
         }
     }
 
-
     public static class NonAbstractCustomTypeUser {
         @JsonProperty
         @JsonDeserialize(converter = NonAbstractCustomTypeDeserializationConverter.class)

File: src/test/java/com/fasterxml/jackson/databind/ser/FieldSerializationTest.java
Patch:
@@ -12,7 +12,7 @@
  * Unit tests for verifying that field-backed properties can also be serialized
  * (since version 1.1) as well as getter-accessible properties.
  */
-public class TestFieldSerialization
+public class FieldSerializationTest
     extends BaseMapTest
 {
     /*

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1164,7 +1164,8 @@ public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,
                 if (deser == null) {
                     ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);
                     MapDeserializer md = new MapDeserializer(type, inst, keyDes, contentDeser, contentTypeDeser);
-                    md.setIgnorableProperties(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()));
+                    AnnotationIntrospector ai = config.getAnnotationIntrospector();
+                    md.setIgnorableProperties(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), false));
                     deser = md;
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -618,7 +618,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         }
         // And possibly add more properties to ignore
         if (accessor != null) {
-            String[] ignorals = intr.findPropertiesToIgnore(accessor);
+            String[] ignorals = intr.findPropertiesToIgnore(accessor, false);
             if (ignorals != null && ignorals.length != 0) {
                 HashSet<String> newIgnored = ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);
                 contextual = contextual.withIgnorableProperties(newIgnored);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -451,7 +451,7 @@ protected void addBeanProps(DeserializationContext ctxt,
             }
         }
         // Or explicit/implicit definitions?
-        Set<String> ignored = ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));        
+        Set<String> ignored = ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo(), false));        
         for (String propName : ignored) {
             builder.addIgnorable(propName);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -254,7 +254,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         if (intr != null && property != null) {
             AnnotatedMember member = property.getMember();
             if (member != null) {
-                String[] moreToIgnore = intr.findPropertiesToIgnore(member);
+                String[] moreToIgnore = intr.findPropertiesToIgnore(member, false);
                 if (moreToIgnore != null) {
                     ignored = (ignored == null) ? new HashSet<String>() : new HashSet<String>(ignored);
                     for (String str : moreToIgnore) {

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -761,7 +761,8 @@ protected JsonSerializer<?> buildMapSerializer(SerializationConfig config,
             } else {
             */
             Object filterId = findFilterId(config, beanDesc);
-            MapSerializer mapSer = MapSerializer.construct(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()),
+            AnnotationIntrospector ai = config.getAnnotationIntrospector();
+            MapSerializer mapSer = MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true),
                     type, staticTyping, elementTypeSerializer,
                     keySerializer, elementValueSerializer, filterId);
             Object suppressableValue = findSuppressableContentValue(config,

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -587,7 +587,7 @@ protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig conf
     {
         AnnotationIntrospector intr = config.getAnnotationIntrospector();
         AnnotatedClass ac = beanDesc.getClassInfo();
-        String[] ignored = intr.findPropertiesToIgnore(ac);
+        String[] ignored = intr.findPropertiesToIgnore(ac, true);
         if (ignored != null && ignored.length > 0) {
             HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(ignored);
             Iterator<BeanPropertyWriter> it = props.iterator();

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -420,7 +420,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
         
         // Then we may have an override for Object Id
         if (accessor != null) {
-            ignorals = intr.findPropertiesToIgnore(accessor);
+            ignorals = intr.findPropertiesToIgnore(accessor, true);
             ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);
             if (objectIdInfo == null) {
                 // no ObjectId override, but maybe ObjectIdRef?

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -356,7 +356,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
         HashSet<String> ignored = _ignoredEntries;
         boolean sortKeys = false;
         if (intr != null && propertyAcc != null) {
-            String[] moreToIgnore = intr.findPropertiesToIgnore(propertyAcc);
+            String[] moreToIgnore = intr.findPropertiesToIgnore(propertyAcc, true);
             if (moreToIgnore != null) {
                 ignored = (ignored == null) ? new HashSet<String>() : new HashSet<String>(ignored);
                 for (String str : moreToIgnore) {

File: src/test/java/com/fasterxml/jackson/databind/filter/IgnorePropsTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.fasterxml.jackson.databind.*;
 
-public class TestIgnorePropsForSerialization
+public class IgnorePropsTest
     extends BaseMapTest
 {
     @JsonIgnoreProperties({"b", "c"})
@@ -63,7 +63,7 @@ static class MapWrapper {
             value.put("b", 2);
         }
     }
-    
+
     /*
     /****************************************************************
     /* Unit tests

File: src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java
Patch:
@@ -149,7 +149,7 @@ public int compare(JsonNode o1, JsonNode o2) {
                     double d1 = ((NumericNode) o1).asDouble();
                     double d2 = ((NumericNode) o2).asDouble();
                     if (d1 == d2) { // strictly equals because it's integral value
-                        return 1;
+                        return 0;
                     }
                 }
                 return 0;

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -205,7 +205,7 @@ public enum DeserializationFeature implements ConfigFeature
      * Feature is disabled by default, so that no exception is thrown for missing creator
      * property values, unless they are explicitly marked as `required`.
      * 
-     * @since 2.5
+     * @since 2.6
      */
     FAIL_ON_MISSING_CREATOR_PROPERTIES(false),
     

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -557,7 +557,9 @@ private JavaType modifyTypeByAnnotation(DeserializationContext ctxt,
     private boolean _hasCustomValueHandler(JavaType t) {
         if (t.isContainerType()) {
             JavaType ct = t.getContentType();
-            return (ct != null) && (ct.getValueHandler() != null);
+            if (ct != null) {
+                return (ct.getValueHandler() != null) || (ct.getTypeHandler() != null);
+            }
         }
         return false;
     }

File: src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorNullValue.java
Patch:
@@ -93,7 +93,7 @@ public static JsonEntity create(@JsonProperty("type") String type, @JsonProperty
     /* Unit tests
     /**********************************************************
      */
-    
+
     public void testUsesDeserializersNullValue() throws Exception {
         ObjectMapper mapper = new ObjectMapper();
         mapper.registerModule(new TestModule());

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java
Patch:
@@ -223,11 +223,9 @@ public boolean assignParameter(SettableBeanProperty prop, Object value)
         final int ix = prop.getCreatorIndex();
         _creatorParameters[ix] = value;
 
-System.out.println(" assign #"+ix+" -> "+value);        
-        
         if (_paramsSeenBig == null) {
             int old = _paramsSeen;
-            int newValue = (old & ~(1 << ix));
+            int newValue = (old | (1 << ix));
             if (old != newValue) {
                 _paramsSeen = newValue;
                 if (--_paramsNeeded <= 0) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java
Patch:
@@ -141,12 +141,12 @@ public JsonDeserializer<?> replaceDelegatee(JsonDeserializer<?> delegatee)
     }
 
     @Override
-    public Object getNullValue(DeserializationContext ctxt) {
+    public Object getNullValue(DeserializationContext ctxt) throws JsonMappingException {
         return _delegatee.getNullValue(ctxt);
     }
 
     @Override
-    public Object getEmptyValue(DeserializationContext ctxt) {
+    public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {
         return _delegatee.getEmptyValue(ctxt);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -3335,7 +3335,7 @@ protected Object _convert(Object fromValue, JavaType toValueType)
             JsonToken t = _initForReading(jp);
             if (t == JsonToken.VALUE_NULL) {
                 DeserializationContext ctxt = createDeserializationContext(jp, deserConfig);
-                result = _findRootDeserializer(ctxt, toValueType).getNullValue();
+                result = _findRootDeserializer(ctxt, toValueType).getNullValue(ctxt);
             } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {
                 result = null;
             } else { // pointing to event other than null
@@ -3585,7 +3585,7 @@ protected Object _readValue(DeserializationConfig cfg, JsonParser jp, JavaType v
         if (t == JsonToken.VALUE_NULL) {
             // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:
             DeserializationContext ctxt = createDeserializationContext(jp, cfg);
-            result = _findRootDeserializer(ctxt, valueType).getNullValue();
+            result = _findRootDeserializer(ctxt, valueType).getNullValue(ctxt);
         } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {
             result = null;
         } else { // pointing to event other than null
@@ -3613,7 +3613,7 @@ protected Object _readMapAndClose(JsonParser jp, JavaType valueType)
                 // [JACKSON-643]: Ask JsonDeserializer what 'null value' to use:
                 DeserializationContext ctxt = createDeserializationContext(jp,
                         getDeserializationConfig());
-                result = _findRootDeserializer(ctxt, valueType).getNullValue();
+                result = _findRootDeserializer(ctxt, valueType).getNullValue(ctxt);
             } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {
                 result = null;
             } else {

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -1415,7 +1415,7 @@ protected Object _bind(JsonParser jp, Object valueToUpdate) throws IOException
         if (t == JsonToken.VALUE_NULL) {
             if (valueToUpdate == null) {
                 DeserializationContext ctxt = createDeserializationContext(jp, _config);
-                result = _findRootDeserializer(ctxt, _valueType).getNullValue();
+                result = _findRootDeserializer(ctxt, _valueType).getNullValue(ctxt);
             } else {
                 result = valueToUpdate;
             }
@@ -1448,7 +1448,7 @@ protected Object _bindAndClose(JsonParser jp, Object valueToUpdate) throws IOExc
             if (t == JsonToken.VALUE_NULL) {
                 if (valueToUpdate == null) {
                     DeserializationContext ctxt = createDeserializationContext(jp, _config);
-                    result = _findRootDeserializer(ctxt, _valueType).getNullValue();
+                    result = _findRootDeserializer(ctxt, _valueType).getNullValue(ctxt);
                 } else {
                     result = valueToUpdate;
                 }

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java
Patch:
@@ -99,7 +99,7 @@ public static PropertyBasedCreator construct(DeserializationContext ctxt,
             // [JACKSON-372]: primitive types need extra care
             // [JACKSON-774]: as do non-default nulls...
             JsonDeserializer<?> deser = prop.getValueDeserializer();
-            Object nullValue = (deser == null) ? null : deser.getNullValue();
+            Object nullValue = (deser == null) ? null : deser.getNullValue(ctxt);
             if ((nullValue == null) && prop.getType().isPrimitive()) {
                 nullValue = ClassUtil.defaultValue(prop.getType().getRawClass());
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java
Patch:
@@ -103,7 +103,7 @@ public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt
                 Object value;
                 
                 if (t == JsonToken.VALUE_NULL) {
-                    value = valueDes.getNullValue();
+                    value = valueDes.getNullValue(ctxt);
                 } else if (typeDeser == null) {
                     value = valueDes.deserialize(jp, ctxt);
                 } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -240,7 +240,7 @@ public Collection<Object> deserialize(JsonParser p, DeserializationContext ctxt,
             try {
                 Object value;
                 if (t == JsonToken.VALUE_NULL) {
-                    value = valueDes.getNullValue();
+                    value = valueDes.getNullValue(ctxt);
                 } else if (typeDeser == null) {
                     value = valueDes.deserialize(p, ctxt);
                 } else {
@@ -295,7 +295,7 @@ protected final Collection<Object> handleNonArray(JsonParser p, DeserializationC
 
         try {
             if (t == JsonToken.VALUE_NULL) {
-                value = valueDes.getNullValue();
+                value = valueDes.getNullValue(ctxt);
             } else if (typeDeser == null) {
                 value = valueDes.deserialize(p, ctxt);
             } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java
Patch:
@@ -158,7 +158,7 @@ public EnumMap<?,?> deserialize(JsonParser jp, DeserializationContext ctxt)
 
             try {
                 if (t == JsonToken.VALUE_NULL) {
-                    value = valueDes.getNullValue();
+                    value = valueDes.getNullValue(ctxt);
                 } else if (typeDeser == null) {
                     value =  valueDes.deserialize(jp, ctxt);
                 } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java
Patch:
@@ -199,7 +199,7 @@ public Map.Entry<Object,Object> deserialize(JsonParser jp, DeserializationContex
         try {
             // Note: must handle null explicitly here; value deserializers won't
             if (t == JsonToken.VALUE_NULL) {
-                value = valueDes.getNullValue();
+                value = valueDes.getNullValue(ctxt);
             } else if (typeDeser == null) {
                 value = valueDes.deserialize(jp, ctxt);
             } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -151,7 +151,7 @@ public Object[] deserialize(JsonParser jp, DeserializationContext ctxt)
                 Object value;
                 
                 if (t == JsonToken.VALUE_NULL) {
-                    value = _elementDeserializer.getNullValue();
+                    value = _elementDeserializer.getNullValue(ctxt);
                 } else if (typeDeser == null) {
                     value = _elementDeserializer.deserialize(jp, ctxt);
                 } else {
@@ -235,7 +235,7 @@ private final Object[] handleNonArray(JsonParser jp, DeserializationContext ctxt
         Object value;
         
         if (t == JsonToken.VALUE_NULL) {
-            value = _elementDeserializer.getNullValue();
+            value = _elementDeserializer.getNullValue(ctxt);
         } else if (_elementTypeDeserializer == null) {
             value = _elementDeserializer.deserialize(jp, ctxt);
         } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
Patch:
@@ -106,7 +106,7 @@ protected final String[] _deserializeCustom(JsonParser jp, DeserializationContex
                         break;
                     }
                     // Ok: no need to convert Strings, but must recognize nulls
-                    value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);
+                    value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue(ctxt) : deser.deserialize(jp, ctxt);
                 } else {
                     value = deser.deserialize(jp, ctxt);
                 }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -213,7 +213,7 @@ private Collection<String> deserializeUsingCustom(JsonParser jp, Deserialization
                     break;
                 }
                 // Ok: no need to convert Strings, but must recognize nulls
-                value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);
+                value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue(ctxt) : deser.deserialize(jp, ctxt);
             } else {
                 value = deser.deserialize(jp, ctxt);
             }
@@ -246,7 +246,7 @@ private final Collection<String> handleNonArray(JsonParser jp, DeserializationCo
         String value;
         
         if (t == JsonToken.VALUE_NULL) {
-            value = (valueDes == null) ? null : valueDes.getNullValue();
+            value = (valueDes == null) ? null : valueDes.getNullValue(ctxt);
         } else {
             value = (valueDes == null) ? _parseString(jp, ctxt) : valueDes.deserialize(jp, ctxt);
         }

File: src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorNullValue.java
Patch:
@@ -32,7 +32,7 @@ public Contained<?> deserialize(JsonParser jp, DeserializationContext ctxt) thro
         }
 
         @Override
-        public Contained<?> getNullValue() {
+        public Contained<?> getNullValue(DeserializationContext ctxt) {
             return NULL_CONTAINED;
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/TestNullHandling.java
Patch:
@@ -20,7 +20,7 @@ public String deserialize(JsonParser jp, DeserializationContext ctxt) throws IOE
         }
 
         @Override
-        public String getNullValue() { return "funny"; }
+        public String getNullValue(DeserializationContext ctxt) { return "funny"; }
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -656,7 +656,7 @@ public boolean hasAsValueAnnotation(AnnotatedMethod am) {
      */
 
     @Override
-    public Class<? extends JsonDeserializer<?>> findDeserializer(Annotated a)
+    public Object findDeserializer(Annotated a)
     {
         JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);
         if (ann != null) {

File: src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
Patch:
@@ -185,6 +185,8 @@ public boolean equals(Object o)
 
         ReferenceType other = (ReferenceType) o;
 
+        if (other._class != _class) return false;
+        
         // Otherwise actually mostly worry about referenced type
         return _referencedType.equals(other._referencedType);
     }

File: src/main/java/com/fasterxml/jackson/databind/JavaType.java
Patch:
@@ -326,6 +326,9 @@ public boolean isConcrete() {
     @Override
     public JavaType getContentType() { return null; }
 
+    @Override // since 2.6
+    public JavaType getReferencedType() { return null; }
+    
     @Override
     public int containedTypeCount() { return 0; }
 

File: src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java
Patch:
@@ -12,7 +12,7 @@
 public final class ArrayType
     extends TypeBase
 {
-    private static final long serialVersionUID = 9040058063449087477L;
+    private static final long serialVersionUID = 1L;
 
     /**
      * Type of elements in the array.
@@ -25,8 +25,8 @@ public final class ArrayType
      * it is essentially immutable and thus can be shared.
      */
     protected final Object _emptyArray;
-    
-    private ArrayType(JavaType componentType, Object emptyInstance,
+
+    protected ArrayType(JavaType componentType, Object emptyInstance,
             Object valueHandler, Object typeHandler, boolean asStatic)
     {
         super(emptyInstance.getClass(), componentType.hashCode(),

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java
Patch:
@@ -13,7 +13,7 @@
  */
 public class CollectionLikeType extends TypeBase
 {
-    private static final long serialVersionUID = 4611641304150899138L;
+    private static final long serialVersionUID = 1L;
 
     /**
      * Type of elements in collection

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java
Patch:
@@ -8,7 +8,7 @@
 public final class CollectionType
     extends CollectionLikeType
 {
-    private static final long serialVersionUID = -7834910259750909424L;
+    private static final long serialVersionUID = 1L;
 
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java
Patch:
@@ -14,7 +14,7 @@
  */
 public class MapLikeType extends TypeBase
 {
-    private static final long serialVersionUID = 416067702302823522L;
+    private static final long serialVersionUID = 1L;
 
     /**
      * Type of keys of Map.

File: src/main/java/com/fasterxml/jackson/databind/type/MapType.java
Patch:
@@ -7,7 +7,7 @@
  */
 public final class MapType extends MapLikeType
 {
-    private static final long serialVersionUID = -811146779148281500L;
+    private static final long serialVersionUID = 1L;
 
     /*
     /**********************************************************

File: src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue.java
Patch:
@@ -67,6 +67,7 @@ static class DataADeserializer extends StdDeserializer<DataA> {
             super(DataA.class);
         }
 
+        @Override
         public DataA deserialize(JsonParser jp, DeserializationContext ctxt)
                 throws JsonProcessingException, IOException {
             if (jp.getCurrentToken() != JsonToken.START_OBJECT) {

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
Patch:
@@ -424,7 +424,7 @@ private void resolveMemberMethods()
         AnnotatedMethodMap mixins = new AnnotatedMethodMap();
         // first: methods from the class itself
         _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);
-
+        
         // and then augment these with annotations from super-types:
         for (Class<?> cls : _superTypes) {
             Class<?> mixin = (_mixInResolver == null) ? null : _mixInResolver.findMixInClassFor(cls);         
@@ -594,7 +594,7 @@ protected void _addMemberMethods(Class<?> cls, AnnotatedMethodMap methods,
         // first, mixIns, since they have higher priority then class methods
         if (mixInCls != null) {
             _addMethodMixIns(cls, methods, mixInCls, mixIns);
-        }        
+        }
         if (cls == null) { // just so caller need not check when passing super-class
             return;
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -75,7 +75,7 @@ protected StdSerializer(Class<?> t, boolean dummy) {
      */
     
     @Override
-    public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider provider)
+    public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider)
         throws IOException, JsonGenerationException;
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -657,7 +657,7 @@ public boolean hasAsValueAnnotation(AnnotatedMethod am) {
      */
 
     @Override
-    public Class<? extends JsonDeserializer<?>> findDeserializer(Annotated a)
+    public Object findDeserializer(Annotated a)
     {
         JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);
         if (ann != null) {

File: src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
Patch:
@@ -155,7 +155,7 @@ public  SimpleType withContentValueHandler(Object h) {
     @Override
     public SimpleType withStaticTyping() {
         return _asStatic ? this : new SimpleType(_class,
-                _typeNames, _typeParameters, _valueHandler, _typeHandler, _asStatic, _typeParametersFor);
+                _typeNames, _typeParameters, _valueHandler, _typeHandler, true, _typeParametersFor);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -374,7 +374,7 @@ public JsonDeserializer<?> buildBuilderBased(JavaType valueType,
         }
         // also: type of the method must be compatible
         Class<?> rawBuildType = _buildMethod.getRawReturnType();
-        if (!valueType.getRawClass().isAssignableFrom(rawBuildType)) {
+        if (!rawBuildType.isAssignableFrom(valueType.getRawClass())) {
             throw new IllegalArgumentException("Build method '"+_buildMethod.getFullName()
         			+" has bad return type ("+rawBuildType.getName()
         			+"), not compatible with POJO type ("+valueType.getRawClass().getName()+")");

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -374,7 +374,7 @@ public JsonDeserializer<?> buildBuilderBased(JavaType valueType,
         }
         // also: type of the method must be compatible
         Class<?> rawBuildType = _buildMethod.getRawReturnType();
-        if (!valueType.getRawClass().isAssignableFrom(rawBuildType)) {
+        if (!rawBuildType.isAssignableFrom(valueType.getRawClass())) {
             throw new IllegalArgumentException("Build method '"+_buildMethod.getFullName()
         			+" has bad return type ("+rawBuildType.getName()
         			+"), not compatible with POJO type ("+valueType.getRawClass().getName()+")");

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java
Patch:
@@ -65,7 +65,7 @@ public EnumSerializer(EnumValues v) {
 
     public EnumSerializer(EnumValues v, Boolean serializeAsIndex)
     {
-        super(Enum.class, false);
+        super(v.getEnumClass(), false);
         _values = v;
         _serializeAsIndex = serializeAsIndex;
     }

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java
Patch:
@@ -53,7 +53,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
      *
      * @since 2.6
      */
-    public static class Base
+    public abstract static class Base implements JsonSerializable
     {
         /**
          * Method that may be called on instance to determine if it is considered

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -159,7 +159,8 @@ public JsonSerializer<Object> createSerializer(SerializerProvider prov,
             // [#359]: explicitly check (again) for @JsonSerializer...
             ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());
         }
-        if (ser == null) {
+        // [databind#731]: Should skip if nominally java.lang.Object
+        if (ser == null && !delegateType.isJavaLangObject()) {
             ser = _createSerializer2(prov, delegateType, beanDesc, true);
         }
         return new StdDelegatingSerializer(conv, delegateType, ser);

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -366,7 +366,9 @@ protected JsonSerializer<Object> findConvertingSerializer(SerializerProvider pro
                 if (convDef != null) {
                     Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);
                     JavaType delegateType = conv.getOutputType(provider.getTypeFactory());
-                    JsonSerializer<?> ser = provider.findValueSerializer(delegateType, prop);
+                    // [databind#731]: Should skip if nominally java.lang.Object
+                    JsonSerializer<?> ser = delegateType.isJavaLangObject() ? null
+                            : provider.findValueSerializer(delegateType, prop);
                     return new StdDelegatingSerializer(conv, delegateType, ser);
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -250,7 +250,6 @@ protected JsonSerializer<?> findConvertingContentSerializer(SerializerProvider p
          *   when applying contextual content converter; this is not ideal way,
          *   but should work for most cases.
          */
-
         final AnnotationIntrospector intr = provider.getAnnotationIntrospector();
         if (intr != null && prop != null) {
             AnnotatedMember m = prop.getMember();
@@ -259,7 +258,8 @@ protected JsonSerializer<?> findConvertingContentSerializer(SerializerProvider p
                 if (convDef != null) {
                     Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);
                     JavaType delegateType = conv.getOutputType(provider.getTypeFactory());
-                    if (existingSerializer == null) {
+                    // [databind#731]: Should skip if nominally java.lang.Object
+                    if (existingSerializer == null && !delegateType.hasRawClass(Object.class)) {
                         existingSerializer = provider.findValueSerializer(delegateType);
                     }
                     return new StdDelegatingSerializer(conv, delegateType, existingSerializer);

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedObjectIdGenerator.java
Patch:
@@ -30,6 +30,9 @@ public ObjectIdGenerator<Object> newForSerialization(Object context) {
 
     @Override
     public com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey key(Object key) {
+        if (key == null) {
+            return null;
+        }
         // should we use general type for all; or type of property itself?
         return new IdKey(getClass(), _scope, key);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertyBasedObjectIdGenerator.java
Patch:
@@ -70,6 +70,9 @@ public ObjectIdGenerator<Object> newForSerialization(Object context) {
 
     @Override
     public com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey key(Object key) {
+        if (key == null) {
+            return null;
+        }
         // should we use general type for all; or type of property itself?
         return new IdKey(getClass(), _scope, key);
     }

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -631,7 +631,9 @@ public PropertyName findNameForSerialization(Annotated a)
             JsonProperty pann = _findAnnotation(a, JsonProperty.class);
             if (pann != null) {
                 name = pann.value();
-            } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)) {
+            } else if (_hasAnnotation(a, JsonSerialize.class)
+                    || _hasAnnotation(a, JsonView.class)
+                    || _hasAnnotation(a, JsonRawValue.class)) {
                 name = "";
             } else {
                 return null;

File: src/test/java/com/fasterxml/jackson/failing/RaceCondition738Test.java
Patch:
@@ -56,7 +56,7 @@ public HasSubTypes getHasSubTypes() {
      */
     
     public void testRepeatedly() throws Exception {
-        final int COUNT = 50;
+        final int COUNT = 2000;
         for (int i = 0; i < COUNT; i++) {
             runOnce(i, COUNT);
         }
@@ -88,10 +88,8 @@ public String call() throws Exception {
             JsonNode wrapped = tree.get("hasSubTypes");
 
             if (!wrapped.has("one")) {
-System.out.println("JSON wrong: "+json);
                 throw new IllegalStateException("Round #"+round+"/"+max+" ; missing property 'one', source: "+json);
             }
-System.out.println("JSON fine: "+json);
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java
Patch:
@@ -5,7 +5,6 @@
 import java.math.BigInteger;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.io.NumberOutput;
 import com.fasterxml.jackson.databind.SerializerProvider;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/util/CompactStringObjectMap.java
Patch:
@@ -192,7 +192,7 @@ private Object _findFromSpill(String key) {
             int i = hashSize + (hashSize>>1);
             for (int end = i + _spillCount; i < end; ++i) {
                 if (key.equals(_keys[i])) {
-                    return _values[1];
+                    return _values[i];
                 }
             }
             return null;

File: src/test/java/com/fasterxml/jackson/databind/type/TestLocalType609.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.type;
 
 import com.fasterxml.jackson.databind.*;
 

File: src/test/java/com/fasterxml/jackson/databind/ser/TestGenericTypes.java
Patch:
@@ -106,8 +106,7 @@ public Impl727(int a, int b) {
     /**********************************************************
      */
 
-//    final ObjectMapper MAPPER = new ObjectMapper();
-    final ObjectMapper MAPPER = objectMapper();
+    final ObjectMapper MAPPER = new ObjectMapper();
 
     @SuppressWarnings("unchecked")
     public void testIssue468a() throws Exception

File: src/test/java/com/fasterxml/jackson/failing/TestPolymorphicDeserialization283.java
Patch:
@@ -17,7 +17,7 @@
  * Whether this is wrong, and if so, can we fix it, is unknown at this point
  * (2.3): quite possibly this can not be changed.
  */
-public class TestPolymorphicDeserialization extends BaseMapTest
+public class TestPolymorphicDeserialization283 extends BaseMapTest
 {
     @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", defaultImpl = ClassA.class)
     @JsonSubTypes({

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/JsonSerializerMap.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Map;
 
 import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.ser.SerializerCache.TypeKey;
+import com.fasterxml.jackson.databind.util.TypeKey;
 
 /**
  * Specialized read-only map used for storing and accessing serializers by type.

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java
Patch:
@@ -2,10 +2,9 @@
 
 import java.util.*;
 
-
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.ser.SerializerCache.TypeKey;
+import com.fasterxml.jackson.databind.util.TypeKey;
 
 /**
  * Optimized lookup table for accessing two types of serializers; typed

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -20,7 +20,7 @@ public class POJOPropertiesCollector
     /* Configuration
     /**********************************************************
      */
-    
+
     /**
      * Configuration settings
      */

File: src/test/java/com/fasterxml/jackson/failing/MultiArgConstructorTest.java
Patch:
@@ -78,8 +78,8 @@ public void testMultiArgWithPartialOverride() throws Exception
     {
         final ObjectMapper mapper = new ObjectMapper();
         mapper.setAnnotationIntrospector(new MyParamIntrospector());
-        MultiArgCtorBean bean = mapper.readValue(aposToQuotes("{'b2':7, 'c':222, 'a':-99}"),
-                MultiArgCtorBean.class);
+        MultiArgCtorBeanWithAnnotations bean = mapper.readValue(aposToQuotes("{'b2':7, 'c':222, 'a':-99}"),
+                MultiArgCtorBeanWithAnnotations.class);
         assertNotNull(bean);
         assertEquals(7, bean._b);
         assertEquals(-99, bean._a);

File: src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java
Patch:
@@ -750,7 +750,7 @@ public TypeDeserializer findTypeDeserializer(JavaType baseType)
                 return null;
             }
         } else {
-            subtypes = getSubtypeResolver().collectAndResolveSubtypesByName(this, ac);
+            subtypes = getSubtypeResolver().collectAndResolveSubtypesByTypeId(this, ac);
         }
         /* 04-May-2014, tatu: When called from DeserializerFactory, additional code like
          *   this is invoked. But here we do not actually have access to mappings, so not

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1247,7 +1247,7 @@ public TypeDeserializer findTypeDeserializer(DeserializationConfig config,
                 return null;
             }
         } else {
-            subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByName(config, ac);
+            subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac);
         }
         // [JACKSON-505]: May need to figure out default implementation, if none found yet
         // (note: check for abstract type is not 100% mandatory, more of an optimization)
@@ -1387,7 +1387,7 @@ public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig confi
             return findTypeDeserializer(config, baseType);
         }
         // but if annotations found, may need to resolve subtypes:
-        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByName(
+        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(
                 config, annotated, baseType);
         return b.buildTypeDeserializer(config, baseType, subtypes);
     }
@@ -1415,7 +1415,7 @@ public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfi
             return findTypeDeserializer(config, contentType);
         }
         // but if annotations found, may need to resolve subtypes:
-        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByName(
+        Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(
                 config, propertyEntity, contentType);
         return b.buildTypeDeserializer(config, contentType, subtypes);
     }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestOverlappingTypeIdNames312.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.jsontype;
 
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;

File: src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java
Patch:
@@ -750,7 +750,7 @@ public TypeDeserializer findTypeDeserializer(JavaType baseType)
                 return null;
             }
         } else {
-            subtypes = getSubtypeResolver().collectAndResolveSubtypes(ac, this, getAnnotationIntrospector());
+            subtypes = getSubtypeResolver().collectAndResolveSubtypesByName(this, ac);
         }
         /* 04-May-2014, tatu: When called from DeserializerFactory, additional code like
          *   this is invoked. But here we do not actually have access to mappings, so not

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -271,7 +271,7 @@ public TypeSerializer createTypeSerializer(SerializationConfig config,
         if (b == null) {
             b = config.getDefaultTyper(baseType);
         } else {
-            subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);
+            subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByClass(config, ac);
         }
         if (b == null) {
             return null;

File: src/test/java/com/fasterxml/jackson/failing/TestOverlappingTypeIdNames312.java
Patch:
@@ -1,8 +1,6 @@
 package com.fasterxml.jackson.failing;
 
-import com.fasterxml.jackson.annotation.JsonSubTypes;
-import com.fasterxml.jackson.annotation.JsonTypeInfo;
-import com.fasterxml.jackson.annotation.JsonTypeName;
+import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;
 
 public class TestOverlappingTypeIdNames312 extends BaseMapTest

File: src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java
Patch:
@@ -5,7 +5,6 @@
 import java.math.BigInteger;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.io.NumberOutput;
 import com.fasterxml.jackson.databind.SerializerProvider;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -342,6 +342,7 @@ public void resolve(SerializerProvider provider)
 
         // also, any-getter may need to be resolved
         if (_anyGetterWriter != null) {
+            // 23-Feb-2015, tatu: Misleading, as this actually triggers call to contextualization...
             _anyGetterWriter.resolve(provider);
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java
Patch:
@@ -89,7 +89,9 @@ public BigInteger bigIntegerValue() {
 
     @Override
     public String asText() {
-        return NumberOutput.toString(_value);
+        // As per [jackson-core#179]
+//        return NumberOutput.toString(_value);
+        return Float.toString(_value);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -42,7 +42,7 @@ public abstract class DeserializationContext
     extends DatabindContext
     implements java.io.Serializable
 {
-    private static final long serialVersionUID = -4290063686213707727L;
+    private static final long serialVersionUID = 1L; // 2.6
 
     /**
      * Let's limit length of error messages, for cases where underlying data

File: src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java
Patch:
@@ -5,8 +5,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import com.fasterxml.jackson.annotation.*;
+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 import com.fasterxml.jackson.core.*;
-
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -772,8 +772,6 @@ protected void serializeTypedFields(Map<?,?> value, JsonGenerator gen, Serialize
                     continue;
                 }
                 valueSer = provider.getDefaultNullValueSerializer();
-                keySerializer.serialize(keyElem, gen, provider);
-                provider.defaultSerializeNull(gen);
             } else {
                 valueSer = _valueSerializer;
                 Class<?> cc = valueElem.getClass();

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java
Patch:
@@ -139,7 +139,8 @@ public void serializeWithType(T value, JsonGenerator gen, SerializerProvider ser
         if (clz == null) {
             clz = value.getClass();
         }
-        throw new UnsupportedOperationException("Type id handling not implemented for type "+clz.getName());
+        throw serializers.mappingException("Type id handling not implemented for type %s (by serializer of type %s)",
+                clz.getName(), getClass().getName());
     }
     
     /*

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -412,6 +412,8 @@ protected ObjectMapper(ObjectMapper src)
         _subtypeResolver = src._subtypeResolver;
         _rootNames = new RootNameLookup();
         _typeFactory = src._typeFactory;
+        _injectableValues = src._injectableValues;
+
         HashMap<ClassKey,Class<?>> mixins = new HashMap<ClassKey,Class<?>>(src._mixInAnnotations);
         _mixInAnnotations = mixins;
         _serializationConfig = new SerializationConfig(src._serializationConfig, mixins);

File: src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java
Patch:
@@ -497,7 +497,6 @@ public Object createFromBoolean(DeserializationContext ctxt, boolean value) {
     /**********************************************************
      */
 
-    
     /**
      * Beyond basic features, it should be possible to even implement
      * polymorphic handling...
@@ -513,7 +512,7 @@ public void testPolymorphicCreatorBean() throws Exception
         assertEquals("Axel", ((PolymorphicBean) result).name);
     }
 
-    public void testJackson633() throws Exception
+    public void testEmptyBean() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
         AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class);

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java
Patch:
@@ -47,7 +47,7 @@ public IndexedListSerializer withResolved(BeanProperty property,
      */
     
     @Override
-    public boolean isEmpty(List<?> value) {
+    public boolean isEmpty(SerializerProvider prov, List<?> value) {
         return (value == null) || value.isEmpty();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java
Patch:
@@ -28,7 +28,7 @@ public IteratorSerializer(IteratorSerializer src,
     }
 
     @Override
-    public boolean isEmpty(Iterator<?> value) {
+    public boolean isEmpty(SerializerProvider prov, Iterator<?> value) {
         return (value == null) || !value.hasNext();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java
Patch:
@@ -174,7 +174,7 @@ public boolean hasSingleElement(Map.Entry<?,?> value) {
     }
 
     @Override
-    public boolean isEmpty(Entry<?, ?> value) {
+    public boolean isEmpty(SerializerProvider prov, Entry<?, ?> value) {
         return (value == null);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -130,7 +130,7 @@ public JsonSerializer<?> getContentSerializer() {
     }
     
     @Override
-    public boolean isEmpty(String[] value) {
+    public boolean isEmpty(SerializerProvider prov, String[] value) {
         return (value == null) || (value.length == 0);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java
Patch:
@@ -62,7 +62,7 @@ public CollectionSerializer withResolved(BeanProperty property,
      */
 
     @Override
-    public boolean isEmpty(Collection<?> value) {
+    public boolean isEmpty(SerializerProvider prov, Collection<?> value) {
         return (value == null) || value.isEmpty();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java
Patch:
@@ -162,7 +162,7 @@ public JsonSerializer<?> getContentSerializer() {
     }
     
     @Override
-    public boolean isEmpty(EnumMap<? extends Enum<?>,?> value) {
+    public boolean isEmpty(SerializerProvider prov, EnumMap<? extends Enum<?>,?> value) {
         return (value == null) || value.isEmpty();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java
Patch:
@@ -35,7 +35,7 @@ public EnumSetSerializer withResolved(BeanProperty property,
     }
     
     @Override
-    public boolean isEmpty(EnumSet<? extends Enum<?>> value) {
+    public boolean isEmpty(SerializerProvider prov, EnumSet<? extends Enum<?>> value) {
         return (value == null) || value.isEmpty();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java
Patch:
@@ -38,7 +38,7 @@ public IterableSerializer withResolved(BeanProperty property,
     }
     
     @Override
-    public boolean isEmpty(Iterable<?> value) {
+    public boolean isEmpty(SerializerProvider prov, Iterable<?> value) {
         // Not really good way to implement this, but has to do for now:
         return (value == null) || !value.iterator().hasNext();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -401,7 +401,7 @@ public JsonSerializer<?> getContentSerializer() {
     }
     
     @Override
-    public boolean isEmpty(Map<?,?> value) {
+    public boolean isEmpty(SerializerProvider prov, Map<?,?> value) {
         return (value == null) || value.isEmpty();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -797,7 +797,7 @@ protected CreatorProperty constructCreatorProperty(DeserializationContext ctxt,
                 metadata);
         if (deser != null) {
             // As per [Issue#462] need to ensure we contextualize deserializer before passing it on
-            deser = ctxt.handlePrimaryContextualization(deser, prop);
+            deser = ctxt.handlePrimaryContextualization(deser, prop, type);
             prop = prop.withValueDeserializer(deser);
         }
         return prop;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -441,7 +441,8 @@ public void resolve(DeserializationContext ctxt)
                 /* Important! This is the only place where actually handle "primary"
                  * property deserializers -- call is different from other places.
                  */
-                JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop);
+                JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop,
+                        prop.getType());
                 if (cd != deser) {
                     prop = prop.withValueDeserializer(cd);
                 }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -154,11 +154,11 @@ public CollectionDeserializer createContextual(DeserializationContext ctxt,
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         // #125: May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
+        final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
-            valueDeser = ctxt.findContextualValueDeserializer(
-                    _collectionType.getContentType(), property);
+            valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property);
+            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java
Patch:
@@ -67,7 +67,9 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             BeanProperty property)
         throws JsonMappingException
     {
-        JsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property);
+        JavaType vt = ctxt.constructType(_delegatee.handledType());
+        JsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee,
+                property, vt);
         if (del == _delegatee) {
             return this;
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java
Patch:
@@ -74,10 +74,11 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanPro
             kd = ctxt.findKeyDeserializer(_mapType.getKeyType(), property);
         }
         JsonDeserializer<?> vd = _valueDeserializer;
+        final JavaType vt = _mapType.getContentType();
         if (vd == null) {
-            vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);
+            vd = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
-            vd = ctxt.handleSecondaryContextualization(vd, property);
+            vd = ctxt.handleSecondaryContextualization(vd, property, vt);
         }
         TypeDeserializer vtd = _valueTypeDeserializer;
         if (vtd != null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java
Patch:
@@ -64,7 +64,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         if (deser == null) {
             deser = ctxt.findContextualValueDeserializer(_enumType, property);
         } else { // if directly assigned, probably not yet contextual, so:
-            deser = ctxt.handleSecondaryContextualization(deser, property);
+            deser = ctxt.handleSecondaryContextualization(deser, property, _enumType);
         }
         return withDeserializer(deser);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -236,10 +236,11 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         JsonDeserializer<?> vd = _valueDeserializer;
         // #125: May have a content converter
         vd = findConvertingContentDeserializer(ctxt, property, vd);
+        final JavaType vt = _mapType.getContentType();
         if (vd == null) {
-            vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);
+            vd = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
-            vd = ctxt.handleSecondaryContextualization(vd, property);
+            vd = ctxt.handleSecondaryContextualization(vd, property, vt);
         }
         TypeDeserializer vtd = _valueTypeDeserializer;
         if (vtd != null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java
Patch:
@@ -132,10 +132,11 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         }
         JsonDeserializer<?> vd = _valueDeserializer;
         vd = findConvertingContentDeserializer(ctxt, property, vd);
+        JavaType contentType = _type.containedType(1);
         if (vd == null) {
-            vd = ctxt.findContextualValueDeserializer(_type.containedType(1), property);
+            vd = ctxt.findContextualValueDeserializer(contentType, property);
         } else { // if directly assigned, probably not yet contextual, so:
-            vd = ctxt.handleSecondaryContextualization(vd, property);
+            vd = ctxt.handleSecondaryContextualization(vd, property, contentType);
         }
         TypeDeserializer vtd = _valueTypeDeserializer;
         if (vtd != null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -89,10 +89,11 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         JsonDeserializer<?> deser = _elementDeserializer;
         // #125: May have a content converter
         deser = findConvertingContentDeserializer(ctxt, property, deser);
+        final JavaType vt = _arrayType.getContentType();
         if (deser == null) {
-            deser = ctxt.findContextualValueDeserializer(_arrayType.getContentType(), property);
+            deser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
-            deser = ctxt.handleSecondaryContextualization(deser, property);
+            deser = ctxt.handleSecondaryContextualization(deser, property, vt);
         }
         TypeDeserializer elemTypeDeser = _elementTypeDeserializer;
         if (elemTypeDeser != null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java
Patch:
@@ -119,7 +119,8 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanPro
     {
         // First: if already got serializer to delegate to, contextualize it:
         if (_delegateDeserializer != null) {
-            JsonDeserializer<?> deser = ctxt.handleSecondaryContextualization(_delegateDeserializer, property);
+            JsonDeserializer<?> deser = ctxt.handleSecondaryContextualization(_delegateDeserializer,
+                    property, _delegateType);
             if (deser != _delegateDeserializer) {
                 return withDelegate(_converter, _delegateType, deser);
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
Patch:
@@ -144,10 +144,11 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanPro
         JsonDeserializer<?> deser = _elementDeserializer;
         // #125: May have a content converter
         deser = findConvertingContentDeserializer(ctxt, property, deser);
+        JavaType type = ctxt.constructType(String.class);
         if (deser == null) {
-            deser = ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);
+            deser = ctxt.findContextualValueDeserializer(type, property);
         } else { // if directly assigned, probably not yet contextual, so:
-            deser = ctxt.handleSecondaryContextualization(deser, property);
+            deser = ctxt.handleSecondaryContextualization(deser, property, type);
         }
         // Ok ok: if all we got is the default String deserializer, can just forget about it
         if (deser != null && this.isDefaultDeserializer(deser)) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -106,15 +106,16 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             }
         }
         JsonDeserializer<?> valueDeser = _valueDeserializer;
+        final JavaType valueType = _collectionType.getContentType();
         if (valueDeser == null) {
             // #125: May have a content converter
             valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
             if (valueDeser == null) {
             // And we may also need to get deserializer for String
-                valueDeser = ctxt.findContextualValueDeserializer( _collectionType.getContentType(), property);
+                valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
             }
         } else { // if directly assigned, probably not yet contextual, so:
-            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property);
+            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
         } 
         if (isDefaultDeserializer(valueDeser)) {
             valueDeser = null;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -26,6 +26,8 @@
 public class BeanSerializer
     extends BeanSerializerBase
 {
+    private static final long serialVersionUID = -4536893235025590367L;
+
     /*
     /**********************************************************
     /* Life-cycle: constructors

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.JsonGenerator;
-
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
@@ -44,6 +43,8 @@
 public class BeanAsArraySerializer
     extends BeanSerializerBase
 {
+    private static final long serialVersionUID = -893701886577615846L;
+
     /**
      * Serializer that would produce JSON Object version; used in
      * cases where array output can not be used.

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
-
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
@@ -14,6 +13,8 @@
 public class UnwrappingBeanSerializer
     extends BeanSerializerBase
 {
+    private static final long serialVersionUID = 1L;
+
     /**
      * Transformer used to add prefix and/or suffix for properties
      * of unwrapped POJO.

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer.java
Patch:
@@ -4,17 +4,16 @@
 import java.nio.ByteBuffer;
 
 import com.fasterxml.jackson.core.*;
-
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;
 
+@SuppressWarnings("serial")
 public class ByteBufferSerializer extends StdScalarSerializer<ByteBuffer>
 {
     public ByteBufferSerializer() { super(ByteBuffer.class); }
 
     @Override
-    public void serialize(ByteBuffer bbuf, JsonGenerator gen, SerializerProvider provider)
-        throws IOException, JsonGenerationException
+    public void serialize(ByteBuffer bbuf, JsonGenerator gen, SerializerProvider provider) throws IOException
     {
         // first, simple case when wrapping an array...
         if (bbuf.hasArray()) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.Calendar;
 
 import com.fasterxml.jackson.core.*;
-
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 
@@ -15,6 +14,7 @@
  * (standard Java 64-bit timestamp) or textual formats (usually ISO-8601).
  */
 @JacksonStdImpl
+@SuppressWarnings("serial")
 public class CalendarSerializer
     extends DateTimeSerializerBase<Calendar>
 {
@@ -37,8 +37,7 @@ protected long _timestamp(Calendar value) {
     }
 
     @Override
-    public void serialize(Calendar value, JsonGenerator jgen, SerializerProvider provider)
-        throws IOException, JsonGenerationException
+    public void serialize(Calendar value, JsonGenerator jgen, SerializerProvider provider) throws IOException
     {
         if (_asTimestamp(provider)) {
             jgen.writeNumber(_timestamp(value));

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
@@ -29,6 +28,7 @@
  * @deprecated Since 2.4.4; standard {@link MapSerializer} works better.
  *   (to be removed from 2.6)
  */
+@SuppressWarnings("serial")
 @JacksonStdImpl
 @Deprecated
 public class EnumMapSerializer

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java
Patch:
@@ -31,6 +31,8 @@ public class EnumSerializer
     extends StdScalarSerializer<Enum<?>>
     implements ContextualSerializer
 {
+    private static final long serialVersionUID = 1L;
+
     /**
      * This map contains pre-resolved values (since there are ways
      * to customize actual String constants to use) to use as

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java
Patch:
@@ -7,6 +7,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 
+@SuppressWarnings("serial")
 public class EnumSetSerializer
     extends AsArraySerializerBase<EnumSet<? extends Enum<?>>>
 {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/InetSocketAddressSerializer.java
Patch:
@@ -13,13 +13,14 @@
 /**
  * Simple serializer for {@link InetSocketAddress}.
  */
+@SuppressWarnings("serial")
 public class InetSocketAddressSerializer
     extends StdScalarSerializer<InetSocketAddress>
 {
     public InetSocketAddressSerializer() { super(InetSocketAddress.class); }
 
     @Override
-    public void serialize(InetSocketAddress value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException
+    public void serialize(InetSocketAddress value, JsonGenerator jgen, SerializerProvider provider) throws IOException
     {
         InetAddress addr = value.getAddress();
         String str = addr == null ? value.getHostName() : addr.toString().trim();

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
Patch:
@@ -26,7 +26,7 @@ public class AsWrapperTypeDeserializer
     public AsWrapperTypeDeserializer(JavaType bt, TypeIdResolver idRes,
             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)
     {
-        super(bt, idRes, typePropertyName, typeIdVisible, null);
+        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);
     }
 
     protected AsWrapperTypeDeserializer(AsWrapperTypeDeserializer src, BeanProperty property) {

File: src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java
Patch:
@@ -653,7 +653,7 @@ public final boolean isEnabled(JsonParser.Feature f, JsonFactory factory) {
         }
         return factory.isEnabled(f);
     }
-    
+
     /**
      * "Bulk" access method for checking that all features specified by
      * mask are enabled.
@@ -673,7 +673,7 @@ public final int getDeserializationFeatures() {
     /* Other configuration
     /**********************************************************
      */
-    
+
     /**
      * Method for getting head of the problem handler chain. May be null,
      * if no handlers have been added.

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java
Patch:
@@ -20,9 +20,9 @@
 public class StdKeySerializer extends StdSerializer<Object>
 {
     public StdKeySerializer() { super(Object.class); }
-    
+
     @Override
-    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {
+    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
         if (value instanceof Date) {
             provider.defaultSerializeDateKey((Date) value, jgen);
         } else {
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {
         return createSchemaNode("string");
     }
-    
+
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {
         visitor.expectStringFormat(typeHint);

File: src/test/java/com/fasterxml/jackson/failing/TestMapJsonValueKey47.java
Patch:
@@ -41,6 +41,6 @@ public void testMapJsonValueKey()
 
         ObjectMapper mapper = new ObjectMapper();
         String json = mapper.writeValueAsString(input);
-        assertEquals(aposToQuotes("{'3':'true'}"), json);
+        assertEquals(aposToQuotes("{'3':true}"), json);
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithSameName647.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.struct;
 
 import com.fasterxml.jackson.annotation.JsonUnwrapped;
 import com.fasterxml.jackson.databind.*;

File: src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithCreator265.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.fasterxml.jackson.databind.*;
 
-public class TestUnwrappedWithCreator extends BaseMapTest
+public class TestUnwrappedWithCreator265 extends BaseMapTest
 {
     static class JAddress {
         protected String address;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -258,7 +258,7 @@ public Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) t
     {
         /* 09-Dec-2014, tatu: As per [#622], we need to allow Object Id references
          *   to come in as JSON Objects as well; but for now assume they will
-         *   be simple, single-prooerty references, which means that we can
+         *   be simple, single-property references, which means that we can
          *   recognize them without having to buffer anything.
          *   Once again, if we must, we can do more complex handling with buffering,
          *   but let's only do that if and when that becomes necessary.

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -98,7 +98,7 @@ public class BeanPropertyWriter extends PropertyWriter
      * under which value for the property is written.
      *<p>
      * NOTE: do NOT change name of this field; it is accessed by
-     * Afterburner module.
+     * Afterburner module (until 2.4; not directly from 2.5)
      * ALSO NOTE: ... and while it really ought to be `SerializableString`,
      * changing that is also binary-incompatible change. So nope.
      */
@@ -237,7 +237,7 @@ protected BeanPropertyWriter(BeanPropertyWriter base, PropertyName name)
         /* 02-Dec-2014, tatu: This is a big mess, alas, what with dependency
          *   to MapperConfig to encode, and Afterburner having heartburn
          *   for SerializableString (vs SerializedString).
-         *   Hope it can be resolved/reworker in 2.6 timeframe
+         *   Hope it can be resolved/reworker in 2.6 timeframe, if not for 2.5
          */
         _name = new SerializedString(name.getSimpleName());
         _wrapperName = base._wrapperName;

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -539,10 +539,10 @@ public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass a
                     attrName, propType.getRawClass());
             // and with that and property definition
             SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config,
-                    member, propName, metadata);
+                    member, propName, metadata, attr.include());
             // can construct the property writer
             properties.add(AttributePropertyWriter.construct(attrName, propDef,
-                    ac.getAnnotations(), propType, attr.include()));
+                    ac.getAnnotations(), propType));
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java
Patch:
@@ -165,7 +165,7 @@ protected JsonDeserializer<?> _withResolved(JsonDeserializer<?> mapDeser,
      */
     @Override
     public boolean isCachable() { return true; }
-    
+
     @Override
     public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java
Patch:
@@ -1100,7 +1100,7 @@ public Linked<T> withoutNonVisible() {
          * Method called to append given node(s) at the end of this
          * node chain.
          */
-        private Linked<T> append(Linked<T> appendable) {
+        protected Linked<T> append(Linked<T> appendable) {
             if (next == null) {
                 return withNext(appendable);
             }

File: src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java
Patch:
@@ -6,7 +6,6 @@
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
-
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
@@ -20,6 +19,7 @@
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
 import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
+import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 public class TestHandlerInstantiation extends BaseMapTest
@@ -111,7 +111,7 @@ public void serialize(MyBean value, JsonGenerator jgen, SerializerProvider provi
     }
     
     // copied from "TestCustomTypeIdResolver"
-    static class CustomIdResolver implements TypeIdResolver
+    static class CustomIdResolver extends TypeIdResolverBase
     {
         static List<JavaType> initTypes;
 
@@ -144,7 +144,7 @@ public void init(JavaType baseType) {
             }
         }
         @Override
-        public JavaType typeFromId(String id)
+        public JavaType typeFromId(DatabindContext context, String id)
         {
             if (id.equals(_id)) {
                 return TypeFactory.defaultInstance().constructType(TypeIdBean.class);

File: src/test/java/com/fasterxml/jackson/databind/creators/TestCreators541.java
Patch:
@@ -13,9 +13,9 @@ public class TestCreators541 extends BaseMapTest
     static final class Foo {
 
         @JsonProperty("foo")
-        private Map<Integer, Bar> foo;
+        protected Map<Integer, Bar> foo;
         @JsonProperty("anumber")
-        private long anumber;
+        protected long anumber;
 
         public Foo() {
             anumber = 0;

File: src/test/java/com/fasterxml/jackson/databind/deser/TestBasicAnnotations.java
Patch:
@@ -43,7 +43,7 @@ final static class SizeClassSetter
 
     static class Issue442Bean {
         @JsonUnwrapped
-        private IntWrapper w = new IntWrapper(13);
+        protected IntWrapper w = new IntWrapper(13);
     }
     
     final static class SizeClassSetter2
@@ -85,7 +85,7 @@ static class BeanSubClass extends BaseBean
     }
 
     static class BeanWithDeserialize {
-        @JsonDeserialize private int a;
+        @JsonDeserialize protected int a;
     }
     
     /*

File: src/test/java/com/fasterxml/jackson/databind/deser/TestCyclicTypes.java
Patch:
@@ -35,7 +35,7 @@ static class LinkA {
     }
 
     static class LinkB {
-        private LinkA a;
+        protected LinkA a;
 
         public void setA(LinkA a) { this.a = a; }
         public LinkA getA() { return a; }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java
Patch:
@@ -19,7 +19,7 @@ public class EnumSetDeserializer
     extends StdDeserializer<EnumSet<?>>
     implements ContextualDeserializer
 {
-    private static final long serialVersionUID = 3479455075597887177L;
+    private static final long serialVersionUID = 1L; // since 2.5
 
     protected final JavaType _enumType;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java
Patch:
@@ -15,8 +15,8 @@ public class SimpleFilterProvider
     extends FilterProvider
     implements java.io.Serializable // since 2.1
 {
-    // for 2.3.0
-    private static final long serialVersionUID = -6305772546718366447L;
+    // for 2.5+
+    private static final long serialVersionUID = 1L;
 
     /**
      * Mappings from ids to filters.

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -37,7 +37,8 @@
  * and {@link ObjectMapper#treeAsTokens(TreeNode)}
  */
 public abstract class JsonNode
-    implements TreeNode, Iterable<JsonNode>
+    implements TreeNode, Iterable<JsonNode>,
+        JsonSerializable // since 2.5; bit tricky if anyone is sub-classing but...
 {
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -359,7 +359,7 @@ private final static class CollectionReferring extends Referring {
         private final CollectionReferringAccumulator _parent;
         public final List<Object> next = new ArrayList<Object>();
         
-        private CollectionReferring(CollectionReferringAccumulator parent,
+        CollectionReferring(CollectionReferringAccumulator parent,
                 UnresolvedForwardReference reference, Class<?> contentType)
         {
             super(reference, contentType);

File: src/test/java/com/fasterxml/jackson/databind/access/TestSerAnyGetter.java
Patch:
@@ -34,7 +34,7 @@ public void set(String name, String value) {
         }
     }
 
-    private static class PrivateThing
+    static class PrivateThing
     {
         @JsonAnyGetter
         public Map<?,?> getProperties()

File: src/test/java/com/fasterxml/jackson/databind/creators/TestPolymorphicCreators.java
Patch:
@@ -129,7 +129,7 @@ public void testManualPolymorphicCatWithReorder() throws Exception
 
     public void testManualPolymorphicWithNumbered() throws Exception
     {
-         final ObjectWriter w = MAPPER.writerWithType(AbstractRoot.class);
+         final ObjectWriter w = MAPPER.writerFor(AbstractRoot.class);
          final ObjectReader r = MAPPER.reader(AbstractRoot.class);
 
          AbstractRoot input = AbstractRoot.make(1, "oh hai!");

File: src/test/java/com/fasterxml/jackson/databind/deser/TestForwardReference.java
Patch:
@@ -51,7 +51,7 @@ public static class ForwardReferenceContainerClass
 	@JsonSubTypes({
 			@JsonSubTypes.Type(value = ForwardReferenceClassOne.class, name = "One"),
 			@JsonSubTypes.Type(value = ForwardReferenceClassTwo.class, name = "Two")})
-	private static abstract class ForwardReferenceClass
+	static abstract class ForwardReferenceClass
 	{
 		public String id;
 		public void setId(String id) {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestGenericListSerialization.java
Patch:
@@ -59,7 +59,7 @@ public void testSubTypesFor356() throws Exception
         mapper.configure(MapperFeature.USE_STATIC_TYPING, true);
 
         JavaType rootType = TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>() { });
-        byte[] json = mapper.writerWithType(rootType).writeValueAsBytes(input);
+        byte[] json = mapper.writerFor(rootType).writeValueAsBytes(input);
         
         JSONResponse<List<Parent>> out = mapper.readValue(json, 0, json.length, rootType);
 

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedContainerSerialization.java
Patch:
@@ -126,7 +126,7 @@ public void testIssue329() throws Exception
             ArrayList<Animal> animals = new ArrayList<Animal>();
             animals.add(new Dog("Spot"));
             JavaType rootType = TypeFactory.defaultInstance().constructParametrizedType(Iterator.class, Iterator.class, Animal.class);
-            String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator());
+            String json = mapper.writerFor(rootType).writeValueAsString(animals.iterator());
             if (json.indexOf("\"object-type\":\"doggy\"") < 0) {
                 fail("No polymorphic type retained, should be; JSON = '"+json+"'");
             }
@@ -139,7 +139,7 @@ public void testIssue508() throws Exception
             l2.add(new Issue508A());
             l.add(l2);
             TypeReference<?> typeRef = new TypeReference<List<List<Issue508A>>>() {};
-            String json = mapper.writerWithType(typeRef).writeValueAsString(l);
+            String json = mapper.writerFor(typeRef).writeValueAsString(l);
 
             List<?> output = mapper.readValue(json, typeRef);
             assertEquals(1, output.size());

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java
Patch:
@@ -197,7 +197,7 @@ public void testTypedMaps() throws Exception
         List<Super> list = new ArrayList<Super>();
         list.add(new A());
         map.put(1L, list);
-        String json = mapper.writerWithType(new TypeReference<Map<Long, Collection<Super>>>() {}).writeValueAsString(map);
+        String json = mapper.writerFor(new TypeReference<Map<Long, Collection<Super>>>() {}).writeValueAsString(map);
         assertTrue("JSON does not contain '@class': "+json, json.contains("@class"));
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java
Patch:
@@ -156,7 +156,7 @@ public void testWrapperWithExplicitType() throws Exception
     {
         Dog dog = new Dog("Fluffy", 3);
         ContainerWithGetter<Animal> c2 = new ContainerWithGetter<Animal>(dog);
-        String json = MAPPER.writerWithType(MAPPER.getTypeFactory().constructParametrizedType(ContainerWithGetter.class, ContainerWithGetter.class, Animal.class)).writeValueAsString(c2);
+        String json = MAPPER.writerFor(MAPPER.getTypeFactory().constructParametrizedType(ContainerWithGetter.class, ContainerWithGetter.class, Animal.class)).writeValueAsString(c2);
         if (json.indexOf("\"object-type\":\"doggy\"") < 0) {
             fail("polymorphic type not kept, result == "+json+"; should contain 'object-type':'...'");
         }

File: src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java
Patch:
@@ -168,7 +168,7 @@ public void testCloseCloseable() throws IOException
 
         // also: let's ensure that ObjectWriter won't interfere with it
         bean = new CloseableBean();
-        m.writerWithType(CloseableBean.class).writeValueAsString(bean);
+        m.writerFor(CloseableBean.class).writeValueAsString(bean);
         assertTrue(bean.wasClosed);
     }
 

File: src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java
Patch:
@@ -127,7 +127,7 @@ public NoEmptyStringsMap add(String key, String value) {
 
     public void testUsingObjectWriter() throws IOException
     {
-        ObjectWriter w = MAPPER.writerWithType(Object.class);
+        ObjectWriter w = MAPPER.writerFor(Object.class);
         Map<String,Object> map = new LinkedHashMap<String,Object>();
         map.put("a", 1);
         String json = w.writeValueAsString(map);

File: src/test/java/com/fasterxml/jackson/failing/TestExternalTypeId222.java
Patch:
@@ -69,7 +69,7 @@ static class Pojo {
         public final int p;
 
         @JsonCreator
-        private Pojo(@JsonProperty("p") int p) {
+        Pojo(@JsonProperty("p") int p) {
             this.p = p;
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java
Patch:
@@ -107,7 +107,7 @@ public final <A extends Annotation> A getAnnotation(Class<A> acls) {
     public final AnnotationMap getParameterAnnotations(int index)
     {
         if (_paramAnnotations != null) {
-            if (index >= 0 && index <= _paramAnnotations.length) {
+            if (index >= 0 && index < _paramAnnotations.length) {
                 return _paramAnnotations[index];
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/MappingIterator.java
Patch:
@@ -106,9 +106,9 @@ public boolean hasNext()
         try {
             return hasNextValue();
         } catch (JsonMappingException e) {
-            return _handleMappingException(e);
+            return (Boolean) _handleMappingException(e);
         } catch (IOException e) {
-            return _handleIOException(e);
+            return (Boolean) _handleIOException(e);
         }
     }
     

File: src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java
Patch:
@@ -195,9 +195,10 @@ protected Object _deserializeFromObjectId(JsonParser jp, DeserializationContext
         // do we have it resolved?
         Object pojo = roid.resolve();
         if (pojo == null) { // not yet; should wait...
-            throw new IllegalStateException("Could not resolve Object Id ["+id+"] -- unresolved forward-reference?");
+            throw new UnresolvedForwardReference("Could not resolve Object Id ["+id+"] -- unresolved forward-reference?", jp.getCurrentLocation(), roid);
         }
         return pojo;
     }
 }
 
+

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java
Patch:
@@ -25,8 +25,11 @@
  * Specialized serializer for {@link EnumMap}s. Somewhat tricky to
  * implement because actual Enum value type may not be available;
  * and if not, it can only be gotten from actual instance.
+ * 
+ * @deprecated Since 2.4.4; standard {@link MapSerializer} works better.
  */
 @JacksonStdImpl
+@Deprecated
 public class EnumMapSerializer
     extends ContainerSerializer<EnumMap<? extends Enum<?>, ?>>
     implements ContextualSerializer

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -77,9 +77,8 @@ public abstract class BasicSerializerFactory
         _concrete.put(Boolean.class.getName(), new BooleanSerializer(false));
 
         // Other numbers, more complicated
-        final JsonSerializer<?> ns = NumberSerializer.instance;
-        _concrete.put(BigInteger.class.getName(), ns);
-        _concrete.put(BigDecimal.class.getName(), ns);
+        _concrete.put(BigInteger.class.getName(), new NumberSerializer(BigInteger.class));
+        _concrete.put(BigDecimal.class.getName(),new NumberSerializer(BigDecimal.class));
 
         // Other discrete non-container types:
         // First, Date/Time zoo:

File: src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java
Patch:
@@ -51,7 +51,7 @@ public enum SerializationFeature implements ConfigFeature
      * method to use any <code>PrettyPrinter</code> instance.
      * This feature will only allow using the default implementation.
      *<p>
-     * Feature is enabled by default.
+     * Feature is disabled by default.
      */
     INDENT_OUTPUT(false),
     

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -351,6 +351,9 @@ protected Object _deserializeUsingPropertyBased(final JsonParser jp, final Deser
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         bean = null; // never gets here
                     }
+                    if (bean == null) {
+                        throw ctxt.instantiationException(_beanType.getRawClass(), " the created object is null");
+                    }
                     //  polymorphic?
                     if (bean.getClass() != _beanType.getRawClass()) {
                         return handlePolymorphic(jp, ctxt, bean, unknown);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -351,6 +351,9 @@ protected Object _deserializeUsingPropertyBased(final JsonParser jp, final Deser
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         bean = null; // never gets here
                     }
+                    if (bean == null) {
+                        throw ctxt.instantiationException(_beanType.getRawClass(), " the created object is null");
+                    }
                     //  polymorphic?
                     if (bean.getClass() != _beanType.getRawClass()) {
                         return handlePolymorphic(jp, ctxt, bean, unknown);

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java
Patch:
@@ -152,10 +152,10 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
-            throws JsonMappingException
+        throws JsonMappingException
     {
         // [JACKSON-684]: serialize as index?
-        if (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {
+        if (_serializeAsIndex(visitor.getProvider())) {
             JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);
             if (v2 != null) { // typically serialized as a small number (byte or int)
                 v2.numberType(JsonParser.NumberType.INT);

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -401,13 +401,12 @@ protected ObjectMapper(ObjectMapper src)
         _subtypeResolver = src._subtypeResolver;
         _rootNames = new RootNameLookup();
         _typeFactory = src._typeFactory;
-        _serializationConfig = src._serializationConfig;
         HashMap<ClassKey,Class<?>> mixins = new HashMap<ClassKey,Class<?>>(src._mixInAnnotations);
         _mixInAnnotations = mixins;
         _serializationConfig = new SerializationConfig(src._serializationConfig, mixins);
         _deserializationConfig = new DeserializationConfig(src._deserializationConfig, mixins);
-        _serializerProvider = src._serializerProvider;
-        _deserializationContext = src._deserializationContext;
+        _serializerProvider = src._serializerProvider.copy();
+        _deserializationContext = src._deserializationContext.copy();
 
         // Default serializer factory is stateless, can just assign
         _serializerFactory = src._serializerFactory;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java
Patch:
@@ -125,8 +125,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider, BeanPrope
         }
         // and then find the thing...
         return withDelegate(_converter, delegateType,
-//                provider.findValueSerializer(delegateType, property));
-                provider.findValueSerializer(delegateType));
+                provider.findValueSerializer(delegateType, property));
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
Patch:
@@ -120,7 +120,7 @@ public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,
                     _typeProperty, _typeIdVisible, _defaultImpl);
         case EXISTING_PROPERTY:
         	// as per [#528]
-        	return new AsExistingPropertyTypeDeserializer(baseType, idRes,
+        	return new AsPropertyTypeDeserializer(baseType, idRes,
                     _typeProperty, _typeIdVisible, _defaultImpl);
         }
         throw new IllegalStateException("Do not know how to construct standard type serializer for inclusion type: "+_includeAs);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
Patch:
@@ -162,9 +162,7 @@ protected Object _parse(String key, DeserializationContext ctxt) throws Exceptio
             return _parseLong(key);
 
         case TYPE_FLOAT:
-            /* 22-Jan-2009, tatu: Bounds/range checks would be tricky
-             *   here, so let's not bother even trying...
-             */
+            // Bounds/range checks would be tricky here, so let's not bother even trying...
             return Float.valueOf((float) _parseDouble(key));
         case TYPE_DOUBLE:
             return _parseDouble(key);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java
Patch:
@@ -28,7 +28,7 @@
 public class StdKeyDeserializers
     implements KeyDeserializers, java.io.Serializable
 {
-    private static final long serialVersionUID = 923268084968181479L;
+    private static final long serialVersionUID = 1L;
     
     public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver<?> enumResolver) {
         return new StdKeyDeserializer.EnumKD(enumResolver, null);

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java
Patch:
@@ -22,7 +22,7 @@
 public class SimpleKeyDeserializers
     implements KeyDeserializers, java.io.Serializable // since 2.1
 {
-    private static final long serialVersionUID = -6786398737835438187L;
+    private static final long serialVersionUID = 1L;
 
     protected HashMap<ClassKey,KeyDeserializer> _classMappings = null;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -865,7 +865,7 @@ protected JsonSerializer<?> buildEnumSerializer(SerializationConfig config,
             JavaType type, BeanDescription beanDesc)
         throws JsonMappingException
     {
-        /* As per [Issue#24], may want to use alternate shape, serialize as JSON Object.
+        /* As per [databind#24], may want to use alternate shape, serialize as JSON Object.
          * Challenge here is that EnumSerializer does not know how to produce
          * POJO style serialization, so we must handle that special case separately;
          * otherwise pass it to EnumSerializer.

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -908,7 +908,7 @@ public final void setMixInAnnotations(Map<Class<?>, Class<?>> sourceMixins)
      * @param mixinSource Class (or interface) whose annotations are to
      *   be "added" to target's annotations, overriding as necessary
      *
-     * @deprecated replaced by a fluent form of the method; {@link #addMixIn(Class, Class)}.
+     * @deprecated Replaced by a fluent form of the method; {@link #addMixIn(Class, Class)}.
      */
     @Deprecated
     public final void addMixInAnnotations(Class<?> target, Class<?> mixinSource)

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -101,7 +101,7 @@ public BeanDeserializerBuilder(BeanDescription beanDesc,
     { 
         _beanDesc = beanDesc;
         _defaultViewInclusion = config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);
-        _caseInsensitivePropertyComparison = config.isEnabled(DeserializationFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);
+        _caseInsensitivePropertyComparison = config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java
Patch:
@@ -304,7 +304,7 @@ public void testCaseInsensitiveDeserialization() throws Exception
         
         // first, verify default settings which do not accept improper case
         ObjectMapper mapper = new ObjectMapper();
-        assertFalse(mapper.isEnabled(DeserializationFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));
+        assertFalse(mapper.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));
         
         try {
             mapper.readValue(JSON, Issue476Bean.class);
@@ -317,7 +317,7 @@ public void testCaseInsensitiveDeserialization() throws Exception
 
         // Definitely not OK to enable dynamically - the BeanPropertyMap (which is the consumer of this particular feature) gets cached.
         mapper = new ObjectMapper();
-        mapper.configure(DeserializationFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);
+        mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);
         ObjectReader r = mapper.reader(Issue476Bean.class);
         Issue476Bean result = r.readValue(JSON);
         assertEquals(result.value1.name, "fruit");

File: src/main/java/com/fasterxml/jackson/databind/MapperFeature.java
Patch:
@@ -182,6 +182,8 @@ public enum MapperFeature implements ConfigFeature
      * explicitly annotated for such use.
      *<p>
      * Feature is enabled by default, for backwards compatibility reasons.
+     * 
+     * @since 2.2
      */
     ALLOW_FINAL_FIELDS_AS_MUTATORS(true),
     

File: src/main/java/com/fasterxml/jackson/databind/JavaType.java
Patch:
@@ -324,6 +324,9 @@ public boolean isConcrete() {
     @Override
     public String containedTypeName(int index) { return null; }
 
+    @Override
+    public abstract Class<?> getParameterSource();
+    
     /*
     /**********************************************************
     /* Extended API beyond ResolvedType

File: src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java
Patch:
@@ -76,7 +76,7 @@ public static enum KeyEnum {
     public static enum ConcreteType implements ITestType {
         ONE, TWO;
     }
-
+    
     /*
     /**********************************************************
     /* Test methods, untyped (Object valued) maps

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedContainerSerialization.java
Patch:
@@ -125,7 +125,7 @@ public void testIssue329() throws Exception
     {
             ArrayList<Animal> animals = new ArrayList<Animal>();
             animals.add(new Dog("Spot"));
-            JavaType rootType = TypeFactory.defaultInstance().constructParametricType(Iterator.class, Animal.class);
+            JavaType rootType = TypeFactory.defaultInstance().constructParametrizedType(Iterator.class, Iterator.class, Animal.class);
             String json = mapper.writerWithType(rootType).writeValueAsString(animals.iterator());
             if (json.indexOf("\"object-type\":\"doggy\"") < 0) {
                 fail("No polymorphic type retained, should be; JSON = '"+json+"'");

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java
Patch:
@@ -157,7 +157,7 @@ public void testWrapperWithExplicitType() throws Exception
     {
         Dog dog = new Dog("Fluffy", 3);
         ContainerWithGetter<Animal> c2 = new ContainerWithGetter<Animal>(dog);
-        String json = MAPPER.writerWithType(MAPPER.getTypeFactory().constructParametricType(ContainerWithGetter.class, Animal.class)).writeValueAsString(c2);
+        String json = MAPPER.writerWithType(MAPPER.getTypeFactory().constructParametrizedType(ContainerWithGetter.class, ContainerWithGetter.class, Animal.class)).writeValueAsString(c2);
         if (json.indexOf("\"object-type\":\"doggy\"") < 0) {
             fail("polymorphic type not kept, result == "+json+"; should contain 'object-type':'...'");
         }

File: src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayWithBuilder.java
Patch:
@@ -29,13 +29,11 @@ static class SimpleBuilderXY
     {
         public int x, y;
         
-        @SuppressWarnings("hiding")
         public SimpleBuilderXY withX(int x) {
             this.x = x;
             return this;
         }
 
-        @SuppressWarnings("hiding")
         public SimpleBuilderXY withY(int y) {
             this.y = y;
             return this;

File: src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorWithPolymorphic113.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.creators;
 
 import com.fasterxml.jackson.annotation.*;
 

File: src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java
Patch:
@@ -235,7 +235,7 @@ protected byte[] utf8Bytes(String str) {
         }
     }
 
-    protected String aposToQuotes(String json) {
+    protected static String aposToQuotes(String json) {
         return json.replace("'", "\"");
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple.java
Patch:
@@ -22,7 +22,6 @@ protected ValueClassXY(int x, int y) {
         }
     }
 
-    @SuppressWarnings("hiding")
     static class SimpleBuilderXY
     {
         public int x, y;
@@ -56,7 +55,6 @@ protected ValueClassABC(int a, int b, int c) {
         }
     }
 
-    @SuppressWarnings("hiding")
     static class BuildABC
     {
         public int a; // to be used as is

File: src/test/java/com/fasterxml/jackson/databind/interop/TestCglibUsage.java
Patch:
@@ -1,7 +1,5 @@
 package com.fasterxml.jackson.databind.interop;
 
-
-import java.io.*;
 import java.lang.reflect.Method;
 import java.util.*;
 

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestBuilderMethods.java
Patch:
@@ -13,7 +13,6 @@ static class SimpleBuilder
     {
         public int x;
 
-        @SuppressWarnings("hiding")
         public SimpleBuilder withX(int x) {
     		    this.x = x;
     		    return this;

File: src/test/java/com/fasterxml/jackson/failing/TestExternalTypeId.java
Patch:
@@ -105,6 +105,4 @@ public void testIssue222() throws Exception
         String json = mapper.writeValueAsString(input);
         assertEquals("{\"value\":{\"x\":13},\"type\":\"foo\"}", json);
     }
-    
-
 }

File: src/test/java/com/fasterxml/jackson/databind/TestParserUsingMapper.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.core.io.SerializedString;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-public class TestParserUsingMapper  extends com.fasterxml.jackson.core.BaseTest
+public class TestParserUsingMapper  extends BaseMapTest
 {
     final static int TWO_BYTE_ESCAPED = 0x111;
     final static int THREE_BYTE_ESCAPED = 0x1111;

File: src/test/java/com/fasterxml/jackson/databind/TestVersions.java
Patch:
@@ -11,7 +11,7 @@
  * Tests to ensure that we get proper Version information via
  * things defined as Versioned.
  */
-public class TestVersions extends com.fasterxml.jackson.core.BaseTest
+public class TestVersions extends BaseMapTest
 {
     public void testMapperVersions()
     {

File: src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
Patch:
@@ -2,14 +2,15 @@
 
 import java.util.*;
 
+import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Simple tests to verify that {@link JavaType} types work to
  * some degree
  */
 public class TestJavaType
-    extends com.fasterxml.jackson.core.BaseTest
+    extends BaseMapTest
 {
     static class BaseType { }
 

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeBindings.java
Patch:
@@ -2,14 +2,15 @@
 
 import java.util.*;
 
+import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Simple tests to verify for generic type binding functionality
  * implemented by {@link TypeBindings} class.
  */
 public class TestTypeBindings
-    extends com.fasterxml.jackson.core.BaseTest
+    extends BaseMapTest
 {    
     static class AbstractType<A,B> { }
     

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeResolution.java
Patch:
@@ -3,14 +3,14 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.type.TypeReference;
-
+import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.CollectionType;
 import com.fasterxml.jackson.databind.type.MapType;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 @SuppressWarnings("serial")
-public class TestTypeResolution extends com.fasterxml.jackson.core.BaseTest
+public class TestTypeResolution extends BaseMapTest
 {
     public static class LongValuedMap<K> extends HashMap<K, Long> { }
 

File: src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java
Patch:
@@ -5,9 +5,10 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.util.JsonParserSequence;
+import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-public class TestTokenBuffer extends com.fasterxml.jackson.core.BaseTest
+public class TestTokenBuffer extends BaseMapTest
 {
     /*
     /**********************************************************

File: src/test/java/com/fasterxml/jackson/failing/TestJavaType76.java
Patch:
@@ -2,14 +2,14 @@
 
 import java.util.*;
 
+import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 /**
  * Failing test related to [Issue#76]
  */
-public class TestJavaType76
-    extends com.fasterxml.jackson.core.BaseTest
+public class TestJavaType76 extends BaseMapTest
 {
     @SuppressWarnings("serial")
     static class HashTree<K, V> extends HashMap<K, HashTree<K, V>> { }

File: src/test/java/com/fasterxml/jackson/databind/creators/TestValueUpdate.java
Patch:
@@ -2,10 +2,10 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.core.BaseTest;
-import com.fasterxml.jackson.databind.ObjectMapper;
 
-public class TestValueUpdate extends BaseTest
+import com.fasterxml.jackson.databind.*;
+
+public class TestValueUpdate extends BaseMapTest
 {
     static class Bean
     {

File: src/test/java/com/fasterxml/jackson/databind/util/TestObjectBuffer.java
Patch:
@@ -2,10 +2,10 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.BaseTest;
+import com.fasterxml.jackson.databind.BaseMapTest;
 
 public class TestObjectBuffer
-    extends BaseTest
+    extends BaseMapTest
 {
     /**
      * First a test that treats results as plain old Object[]

File: src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
Patch:
@@ -125,7 +125,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                  *   to serializer factory at this point... 
                  */
                 // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...
-                ser = provider.findPrimaryPropertySerializer(t, _property);
+                ser = provider.findPrimaryPropertySerializer(t, property);
                 /* 09-Dec-2010, tatu: Turns out we must add special handling for
                  *   cases where "native" (aka "natural") type is being serialized,
                  *   using standard serializer

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -660,7 +660,7 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
         // there's no way to statically determine the keys, so the "Entries" can't be determined.
         return o;
     }
-    
+
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
         throws JsonMappingException

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -246,7 +246,7 @@ public enum DeserializationFeature implements ConfigFeature
      * kinds of JSON values); if enable, empty JSON String can be taken
      * to be equivalent of JSON null.
      *<p>
-     * Feature is enabled by default.
+     * Feature is disabled by default.
      */
     ACCEPT_EMPTY_STRING_AS_NULL_OBJECT(false),
     

File: src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java
Patch:
@@ -246,7 +246,7 @@ public enum DeserializationFeature implements ConfigFeature
      * kinds of JSON values); if enable, empty JSON String can be taken
      * to be equivalent of JSON null.
      *<p>
-     * Feature is enabled by default.
+     * Feature is disabled by default.
      */
     ACCEPT_EMPTY_STRING_AS_NULL_OBJECT(false),
     

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
@@ -15,7 +14,6 @@
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
 import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 /**
  * Base class for serializers that will output contents as JSON

File: src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java
Patch:
@@ -15,7 +15,7 @@ public class ObjectIdInfo
 {
     protected final PropertyName _propertyName;
     protected final Class<? extends ObjectIdGenerator<?>> _generator;
-    private final Class<? extends ObjectIdResolver> _resolver;
+    protected final Class<? extends ObjectIdResolver> _resolver;
     protected final Class<?> _scope;
     protected final boolean _alwaysAsId;
 
@@ -60,7 +60,7 @@ public ObjectIdInfo withAlwaysAsId(boolean state) {
         if (_alwaysAsId == state) {
             return this;
         }
-        return new ObjectIdInfo(_propertyName, _scope, _generator, state);
+        return new ObjectIdInfo(_propertyName, _scope, _generator, state, _resolver);
     }
     
     public PropertyName getPropertyName() { return _propertyName; }

File: src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java
Patch:
@@ -8,6 +8,7 @@
 
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 import com.fasterxml.jackson.annotation.JsonIdentityInfo;
+import com.fasterxml.jackson.annotation.JsonIdentityReference;
 import com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
 import com.fasterxml.jackson.annotation.ObjectIdGenerators;
 import com.fasterxml.jackson.annotation.ObjectIdResolver;
@@ -140,6 +141,7 @@ static class CustomResolutionWrapper {
     }
 
     @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id", resolver = PoolResolver.class)
+    @JsonIdentityReference(alwaysAsId = true) // #524
     static class WithCustomResolution {
         public int id;
         public int data;

File: src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java
Patch:
@@ -15,7 +15,7 @@ public class ObjectIdInfo
 {
     protected final PropertyName _propertyName;
     protected final Class<? extends ObjectIdGenerator<?>> _generator;
-    private final Class<? extends ObjectIdResolver> _resolver;
+    protected final Class<? extends ObjectIdResolver> _resolver;
     protected final Class<?> _scope;
     protected final boolean _alwaysAsId;
 
@@ -60,7 +60,7 @@ public ObjectIdInfo withAlwaysAsId(boolean state) {
         if (_alwaysAsId == state) {
             return this;
         }
-        return new ObjectIdInfo(_propertyName, _scope, _generator, state);
+        return new ObjectIdInfo(_propertyName, _scope, _generator, state, _resolver);
     }
     
     public PropertyName getPropertyName() { return _propertyName; }

File: src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java
Patch:
@@ -8,6 +8,7 @@
 
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 import com.fasterxml.jackson.annotation.JsonIdentityInfo;
+import com.fasterxml.jackson.annotation.JsonIdentityReference;
 import com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey;
 import com.fasterxml.jackson.annotation.ObjectIdGenerators;
 import com.fasterxml.jackson.annotation.ObjectIdResolver;
@@ -140,6 +141,7 @@ static class CustomResolutionWrapper {
     }
 
     @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id", resolver = PoolResolver.class)
+    @JsonIdentityReference(alwaysAsId = true) // #524
     static class WithCustomResolution {
         public int id;
         public int data;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -157,7 +157,7 @@ public Object[] deserialize(JsonParser jp, DeserializationContext ctxt)
                 chunk[ix++] = value;
             }
         } catch (Exception e) {
-            throw JsonMappingException.wrapWithPath(e, chunk, ix);
+            throw JsonMappingException.wrapWithPath(e, chunk, buffer.bufferedSize() + ix);
         }
 
         Object[] result;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
Patch:
@@ -19,7 +19,7 @@ public final class StringArrayDeserializer
     extends StdDeserializer<String[]>
     implements ContextualDeserializer
 {
-    private static final long serialVersionUID = -7589512013334920693L;
+    private static final long serialVersionUID = 1L;
 
     public final static StringArrayDeserializer instance = new StringArrayDeserializer();
     
@@ -74,7 +74,7 @@ public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws I
                 chunk[ix++] = value;
             }
         } catch (Exception e) {
-            throw JsonMappingException.wrapWithPath(e, chunk, ix);
+            throw JsonMappingException.wrapWithPath(e, chunk, buffer.bufferedSize() + ix);
         }
         String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);
         ctxt.returnObjectBuffer(buffer);

File: src/main/java/com/fasterxml/jackson/databind/util/PrimitiveArrayBuilder.java
Patch:
@@ -50,6 +50,8 @@ protected PrimitiveArrayBuilder() { }
     /**********************************************************
      */
 
+    public int bufferedSize() { return _bufferedEntryCount; }
+    
     public T resetAndStart()
     {
         _reset();

File: src/main/java/com/fasterxml/jackson/databind/util/LRUMap.java
Patch:
@@ -31,7 +31,7 @@ public LRUMap(int initialEntries, int maxEntries)
         _maxEntries = maxEntries;
     }
 
-    public void put(K key, V value) {
+    public V put(K key, V value) {
         if (_map.size() >= _maxEntries) {
             // double-locking, yes, but safe here; trying to avoid "clear storms"
             synchronized (this) {
@@ -40,7 +40,7 @@ public void put(K key, V value) {
                 }
             }
         }
-        _map.put(key, value);
+        return _map.put(key, value);
     }
 
     // NOTE: key is of type Object only to retain binary backwards-compatibility

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -813,6 +813,8 @@ protected SettableBeanProperty constructSetterlessProperty(DeserializationContex
          */
         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, getter);
         type = modifyTypeByAnnotation(ctxt, getter, type);
+        // As per [Issue#501], need full resolution:
+        type = resolveType(ctxt, beanDesc, type, getter);
         TypeDeserializer typeDeser = type.getTypeHandler();
         SettableBeanProperty prop = new SetterlessProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), getter);

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -528,7 +528,7 @@ public final Object deserialize(JsonParser jp, DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         JsonToken t = jp.getCurrentToken();
-        
+
         if (t == JsonToken.VALUE_NULL) {
             return (_nullProvider == null) ? null : _nullProvider.nullValue(ctxt);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -402,7 +402,6 @@ public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config
             boolean isVisible =  vchecker.isCreatorVisible(ctor);
             // some single-arg constructors (String, number) are auto-detected
             if (argCount == 1) {
-System.err.println("Visible: "+isVisible+", "+ctor);                
                 PropertyName name = (ctor == propertyCtor) ? ctorPropNames[0] : null;
                 _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,
                         ctor, isCreator, isVisible, name);

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -402,6 +402,7 @@ public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config
             boolean isVisible =  vchecker.isCreatorVisible(ctor);
             // some single-arg constructors (String, number) are auto-detected
             if (argCount == 1) {
+System.err.println("Visible: "+isVisible+", "+ctor);                
                 PropertyName name = (ctor == propertyCtor) ? ctorPropNames[0] : null;
                 _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,
                         ctor, isCreator, isVisible, name);

File: src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java
Patch:
@@ -137,7 +137,7 @@ public interface VisibilityChecker<T extends VisibilityChecker<T>>
     * Default standard implementation is purely based on visibility
     * modifier of given class members, and its configured minimum
     * levels.
-    * Implemented using "builder" (aka "Fluid") pattern, whereas instances
+    * Implemented using "builder" (or "Fluent") pattern, whereas instances
     * are immutable, and configuration is achieved by chainable factory
     * methods. As a result, type is declared is funky recursive generic
     * type, to allow for sub-classing of build methods with property type

File: src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java
Patch:
@@ -168,8 +168,6 @@ public static Date parse(String date, ParsePosition pos) throws ParseException
                 throw new IndexOutOfBoundsException("Invalid time zone indicator " + timezoneIndicator);
             }
 
-            pos.setIndex(offset);
-
             TimeZone timezone = TimeZone.getTimeZone(timezoneId);
             if (!timezone.getID().equals(timezoneId)) {
                 throw new IndexOutOfBoundsException();
@@ -185,6 +183,7 @@ public static Date parse(String date, ParsePosition pos) throws ParseException
             calendar.set(Calendar.SECOND, seconds);
             calendar.set(Calendar.MILLISECOND, milliseconds);
 
+            pos.setIndex(offset);
             return calendar.getTime();
             //If we get a ParseException it'll already have the right message/offset.
             //Other exception types can convert here.

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
Patch:
@@ -63,7 +63,7 @@ public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws I
             if (t == JsonToken.VALUE_STRING) {
                 value = jp.getText();
             } else if (t == JsonToken.VALUE_NULL) {
-                value = _elementDeserializer.getNullValue();
+                value = null; // since we have established that '_elementDeserializer == null' earlier
             } else {
                 value = _parseString(jp, ctxt);
             }
@@ -92,7 +92,7 @@ protected final String[] _deserializeCustom(JsonParser jp, DeserializationContex
         
         while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {
             // Ok: no need to convert Strings, but must recognize nulls
-            String value = (t == JsonToken.VALUE_NULL) ? null : deser.deserialize(jp, ctxt);
+            String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);
             if (ix >= chunk.length) {
                 chunk = buffer.appendCompletedChunk(chunk);
                 ix = 0;

File: src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java
Patch:
@@ -672,7 +672,7 @@ public void testURL() throws Exception
         assertNull(MAPPER.readValue(buf.asParser(), URL.class));
         buf.close();
 
-        // then, UUID itself come as is:
+        // then, URLitself come as is:
         buf = new TokenBuffer(null, false);
         buf.writeObject(value);
         assertSame(value, MAPPER.readValue(buf.asParser(), URL.class));

File: src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java
Patch:
@@ -264,6 +264,7 @@ public void testPOJOFromEmptyString() throws Exception
             fail("Should not accept Empty String for POJO");
         } catch (JsonProcessingException e) {
             verifyException(e, "from String value");
+            assertValidLocation(e.getLocation());
         }
 
         // should be ok to enable dynamically:

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1372,7 +1372,7 @@ public ObjectMapper setLocale(Locale l) {
 
     /**
      * Method for overriding default TimeZone to use for formatting.
-     * Default value used is {@link TimeZone#getDefault()}.
+     * Default value used is UTC (NOT local timezone).
      */
     public ObjectMapper setTimeZone(TimeZone tz) {
         _deserializationConfig = _deserializationConfig.with(tz);

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1209,8 +1209,7 @@ public TypeDeserializer findTypeDeserializer(DeserializationConfig config,
             JavaType baseType)
         throws JsonMappingException
     {
-        Class<?> cls = baseType.getRawClass();
-        BeanDescription bean = config.introspectClassAnnotations(cls);
+        BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());
         AnnotatedClass ac = bean.getClassInfo();
         AnnotationIntrospector ai = config.getAnnotationIntrospector();
         TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -27,7 +27,7 @@ public class CollectionDeserializer
     extends ContainerDeserializerBase<Collection<Object>>
     implements ContextualDeserializer
 {
-    private static final long serialVersionUID = -2003828398549708958L;
+    private static final long serialVersionUID = 3917273725180652224L;
 
     // // Configuration
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -872,7 +872,7 @@ protected JsonDeserializer<?> findConvertingContentDeserializer(DeserializationC
         }
         return existingDeserializer;
     }
-
+    
     /*
     /**********************************************************
     /* Helper methods for sub-classes, problem reporting

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -230,7 +230,7 @@ protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationCont
      * @since 2.4
      */
     protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId)
-            throws IOException
+        throws IOException
     {
         JsonDeserializer<Object> deser;
         if (typeId == null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -400,6 +400,7 @@ public void serialize(Map<?,?> value, JsonGenerator jgen, SerializerProvider pro
             if (_filterId != null) {
                 serializeFilteredFields(value, jgen, provider,
                         findPropertyFilter(provider, _filterId, value));
+                jgen.writeEndObject();
                 return;
             }
             if (_sortKeys || provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java
Patch:
@@ -40,7 +40,7 @@ public UnwrappingBeanPropertyWriter(BeanPropertyWriter base, NameTransformer unw
     }
 
     private UnwrappingBeanPropertyWriter(UnwrappingBeanPropertyWriter base, NameTransformer transformer,
-            SerializableString name) {
+            SerializedString name) {
         super(base, name);
         _nameTransformer = transformer;
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java
Patch:
@@ -98,12 +98,10 @@ public void testSampleDoc() throws Exception
     {
         final String JSON = SAMPLE_DOC_JSON_SPEC;
 
-        JsonFactory jf = new JsonFactory();
-
         /* To get "untyped" Mapping (to Maps, Lists, instead of beans etc),
          * we'll specify plain old Object.class as the target.
          */
-        Object root = new ObjectMapper().readValue(jf.createParser(new StringReader(JSON)), Object.class);
+        Object root = new ObjectMapper().readValue(JSON, Object.class);
 
         assertType(root, Map.class);
         Map<?,?> rootMap = (Map<?,?>) root;

File: src/test/java/perf/ManualReadPerfUntyped.java
Patch:
@@ -24,8 +24,8 @@ public static void main(String[] args) throws Exception
         JsonNode input2 = m.readTree(data);
 
         new ManualReadPerfUntyped()
-            .testFromBytes(
-//            .testFromString(
+//            .testFromBytes(
+            .testFromString(
                 m, "JSON-as-Object", input1, Object.class
                 ,m, "JSON-as-Object2", input2, Object.class
 //               ,m, "JSON-as-Node", input2, JsonNode.class

File: src/test/java/perf/ObjectReaderBase.java
Patch:
@@ -174,7 +174,7 @@ protected long testDeser2(int reps, byte[] input, ObjectReader reader) throws Ex
         return _testDeser(reps, input, reader);
     }
     
-    private final long _testDeser(int reps, byte[] input, ObjectReader reader) throws Exception
+    protected final long _testDeser(int reps, byte[] input, ObjectReader reader) throws Exception
     {
         long start = System.currentTimeMillis();
         Object result = null;
@@ -193,7 +193,7 @@ protected long testDeser2(int reps, String input, ObjectReader reader) throws Ex
         return _testDeser(reps, input, reader);
     }
     
-    private final long _testDeser(int reps, String input, ObjectReader reader) throws Exception
+    protected final long _testDeser(int reps, String input, ObjectReader reader) throws Exception
     {
         long start = System.currentTimeMillis();
         Object result = null;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java
Patch:
@@ -23,11 +23,11 @@ public SqlDateSerializer() {
         /* 12-Apr-2014, tatu: for now, pass explicit 'false' to mean 'not using timestamp',
          *     for backwards compatibility; this differs from other Date/Calendar types.
          */
-    	this(Boolean.FALSE);
+        this(Boolean.FALSE);
     }
 
     protected SqlDateSerializer(Boolean useTimestamp) {
-    	super(java.sql.Date.class, useTimestamp, null);
+        super(java.sql.Date.class, useTimestamp, null);
     }
 
     @Override
@@ -61,6 +61,6 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException
     {
-    	_acceptJsonFormatVisitor(visitor, typeHint, _useTimestamp);
+        _acceptJsonFormatVisitor(visitor, typeHint, _useTimestamp);
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/ser/TestDateSerialization.java
Patch:
@@ -101,7 +101,9 @@ public void testSqlDate() throws IOException
         java.sql.Date date = new java.sql.Date(99, Calendar.APRIL, 1);
         assertEquals(quote("1999-04-01"), MAPPER.writeValueAsString(date));
 
-        assertEquals(aposToQuotes("{'date':'1969-12-31'}"), MAPPER.writeValueAsString(new SqlDateAsDefaultBean(0L)));
+        java.sql.Date date0 = new java.sql.Date(0L);
+        assertEquals(aposToQuotes("{'date':'"+date0.toString()+"'}"),
+                MAPPER.writeValueAsString(new SqlDateAsDefaultBean(0L)));
 
         // but may explicitly force timestamp too
         assertEquals(aposToQuotes("{'date':0}"), MAPPER.writeValueAsString(new SqlDateAsNumberBean(0L)));

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts193And327.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.introspect;
 
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.databind.*;

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java
Patch:
@@ -37,7 +37,7 @@ protected static class Getters1B
         public int getValue() { return value+1; }
     }
 
-    // [Issue#323] (fixed in 2.4)
+    // [Issue#323]
     static class Bean323 { 
         private int a;
 

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -8,7 +8,6 @@
 import com.fasterxml.jackson.databind.util.ArrayBuilders;
 import com.fasterxml.jackson.databind.util.LRUMap;
 
-
 /**
  * Class used for creating concrete {@link JavaType} instances,
  * given various inputs.

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -439,10 +439,11 @@ protected void _addCreators()
                 PropertyName pn = ai.findNameForDeserialization(param);
                 String name = (pn == null) ? null : pn.getSimpleName();
                 // is it legal not to have name?
-                if (name != null) {
+                if (name != null && name.length() > 0) {
                     // shouldn't need to worry about @JsonIgnore (no real point, so)
                     POJOPropertyBuilder prop = _property(name);
-                    // 28-Mar-2014, tatu: for now, all names considered explicit
+                    // 28-Mar-2014, tatu: for now, all creator names considered explicit;
+                    //    may need to change for JDK 8 where implicit names exist
                     prop.addCtor(param, name, true, true, false);
                     _creatorProperties.add(prop);
                 }

File: src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java
Patch:
@@ -50,6 +50,9 @@ protected ObjectIdInfo(PropertyName prop, Class<?> scope, Class<? extends Object
         _scope = scope;
         _generator = gen;
         _alwaysAsId = alwaysAsId;
+        if (resolver == null) {
+            resolver = SimpleObjectIdResolver.class;
+        }
         _resolver = resolver;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -422,7 +422,7 @@ public final KeyDeserializer findKeyDeserializer(JavaType keyType,
      */
     public abstract ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator, ObjectIdResolver resolver);
 
-    @Deprecated
+    @Deprecated // since 2.4
     public abstract ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator);
 
     /**

File: src/test/java/com/fasterxml/jackson/failing/TestConvertingSerializer357And359.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.fasterxml.jackson.databind.util.StdConverter;
 
-public class TestConvertingSerializer
+public class TestConvertingSerializer357And359
     extends com.fasterxml.jackson.databind.BaseMapTest
 {
     // [Issue#357]

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -917,7 +917,7 @@ public abstract Object deserializeFromObject(JsonParser jp, DeserializationConte
         throws IOException, JsonProcessingException;
 
     @Override
-    public final Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,
+    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,
             TypeDeserializer typeDeserializer)
         throws IOException, JsonProcessingException
     {

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -158,7 +158,7 @@ public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType)
             wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);
             if (wrap) {
                 jgen.writeStartObject();
-                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));
+                jgen.writeFieldName(_rootNames.findRootName(rootType, _config));
             }
         } else if (rootName.length() == 0) {
             wrap = false;

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -218,7 +218,9 @@ public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType,
             wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);
             if (wrap) {
                 jgen.writeStartObject();
-                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));
+                jgen.writeFieldName((rootType == null)
+                        ? _rootNames.findRootName(value.getClass(), _config)
+                        : _rootNames.findRootName(rootType, _config));
             }
         } else if (rootName.length() == 0) {
             wrap = false;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -565,15 +565,15 @@ protected final float _parseFloatPrimitive(JsonParser jp, DeserializationContext
             }
             switch (text.charAt(0)) {
             case 'I':
-                if (_isNegInf(text)) {
+                if (_isPosInf(text)) {
                     return Float.POSITIVE_INFINITY;
                 }
                 break;
             case 'N':
                 if (_isNaN(text)) { return Float.NaN; }
                 break;
             case '-':
-                if (_isPosInf(text)) {
+                if (_isNegInf(text)) {
                     return Float.NEGATIVE_INFINITY;
                 }
                 break;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java
Patch:
@@ -102,7 +102,7 @@ public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt
             Object value;
             
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = valueDes.getNullValue();
             } else if (typeDeser == null) {
                 value = valueDes.deserialize(jp, ctxt);
             } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -226,7 +226,7 @@ public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt
             try {
                 Object value;
                 if (t == JsonToken.VALUE_NULL) {
-                    value = null;
+                    value = valueDes.getNullValue();
                 } else if (typeDeser == null) {
                     value = valueDes.deserialize(jp, ctxt);
                 } else {
@@ -278,7 +278,7 @@ protected final Collection<Object> handleNonArray(JsonParser jp, Deserialization
         Object value;
         
         if (t == JsonToken.VALUE_NULL) {
-            value = null;
+            value = valueDes.getNullValue();
         } else if (typeDeser == null) {
             value = valueDes.deserialize(jp, ctxt);
         } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java
Patch:
@@ -141,7 +141,7 @@ public EnumMap<?,?> deserialize(JsonParser jp, DeserializationContext ctxt) thro
             Object value;
             
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = valueDes.getNullValue();
             } else if (typeDeser == null) {
                 value =  valueDes.deserialize(jp, ctxt);
             } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -391,7 +391,7 @@ protected final void _readAndBind(JsonParser jp, DeserializationContext ctxt,
                 // Note: must handle null explicitly here; value deserializers won't
                 Object value;
                 if (t == JsonToken.VALUE_NULL) {
-                    value = null;
+                    value = valueDes.getNullValue();
                 } else if (typeDeser == null) {
                     value = valueDes.deserialize(jp, ctxt);
                 } else {
@@ -445,7 +445,7 @@ protected final void _readAndBindStringMap(JsonParser jp, DeserializationContext
                 // Note: must handle null explicitly here; value deserializers won't
                 Object value;
                 if (t == JsonToken.VALUE_NULL) {
-                    value = null;
+                    value = valueDes.getNullValue();
                 } else if (typeDeser == null) {
                     value = valueDes.deserialize(jp, ctxt);
                 } else {
@@ -507,7 +507,7 @@ public Map<Object,Object> _deserializeUsingCreator(JsonParser jp, Deserializatio
             Object key = _keyDeserializer.deserializeKey(fieldName, ctxt);
             Object value;            
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = valueDes.getNullValue();
             } else if (typeDeser == null) {
                 value = valueDes.deserialize(jp, ctxt);
             } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -144,7 +144,7 @@ public Object[] deserialize(JsonParser jp, DeserializationContext ctxt)
             Object value;
             
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = _elementDeserializer.getNullValue();
             } else if (typeDeser == null) {
                 value = _elementDeserializer.deserialize(jp, ctxt);
             } else {
@@ -225,7 +225,7 @@ private final Object[] handleNonArray(JsonParser jp, DeserializationContext ctxt
         Object value;
         
         if (t == JsonToken.VALUE_NULL) {
-            value = null;
+            value = _elementDeserializer.getNullValue();
         } else if (_elementTypeDeserializer == null) {
             value = _elementDeserializer.deserialize(jp, ctxt);
         } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
Patch:
@@ -63,7 +63,7 @@ public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws I
             if (t == JsonToken.VALUE_STRING) {
                 value = jp.getText();
             } else if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = _elementDeserializer.getNullValue();
             } else {
                 value = _parseString(jp, ctxt);
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -183,7 +183,7 @@ private Collection<String> deserializeUsingCustom(JsonParser jp, Deserialization
             String value;
 
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = deser.getNullValue();
             } else {
                 value = deser.deserialize(jp, ctxt);
             }
@@ -216,7 +216,7 @@ private final Collection<String> handleNonArray(JsonParser jp, DeserializationCo
         String value;
         
         if (t == JsonToken.VALUE_NULL) {
-            value = null;
+            value = (valueDes == null) ? null : valueDes.getNullValue();
         } else {
             value = (valueDes == null) ? _parseString(jp, ctxt) : valueDes.deserialize(jp, ctxt);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java
Patch:
@@ -102,7 +102,7 @@ public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt
             Object value;
             
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = valueDes.getNullValue();
             } else if (typeDeser == null) {
                 value = valueDes.deserialize(jp, ctxt);
             } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -226,7 +226,7 @@ public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt
             try {
                 Object value;
                 if (t == JsonToken.VALUE_NULL) {
-                    value = null;
+                    value = valueDes.getNullValue();
                 } else if (typeDeser == null) {
                     value = valueDes.deserialize(jp, ctxt);
                 } else {
@@ -278,7 +278,7 @@ protected final Collection<Object> handleNonArray(JsonParser jp, Deserialization
         Object value;
         
         if (t == JsonToken.VALUE_NULL) {
-            value = null;
+            value = valueDes.getNullValue();
         } else if (typeDeser == null) {
             value = valueDes.deserialize(jp, ctxt);
         } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java
Patch:
@@ -141,7 +141,7 @@ public EnumMap<?,?> deserialize(JsonParser jp, DeserializationContext ctxt) thro
             Object value;
             
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = valueDes.getNullValue();
             } else if (typeDeser == null) {
                 value =  valueDes.deserialize(jp, ctxt);
             } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -391,7 +391,7 @@ protected final void _readAndBind(JsonParser jp, DeserializationContext ctxt,
                 // Note: must handle null explicitly here; value deserializers won't
                 Object value;
                 if (t == JsonToken.VALUE_NULL) {
-                    value = null;
+                    value = valueDes.getNullValue();
                 } else if (typeDeser == null) {
                     value = valueDes.deserialize(jp, ctxt);
                 } else {
@@ -445,7 +445,7 @@ protected final void _readAndBindStringMap(JsonParser jp, DeserializationContext
                 // Note: must handle null explicitly here; value deserializers won't
                 Object value;
                 if (t == JsonToken.VALUE_NULL) {
-                    value = null;
+                    value = valueDes.getNullValue();
                 } else if (typeDeser == null) {
                     value = valueDes.deserialize(jp, ctxt);
                 } else {
@@ -507,7 +507,7 @@ public Map<Object,Object> _deserializeUsingCreator(JsonParser jp, Deserializatio
             Object key = _keyDeserializer.deserializeKey(fieldName, ctxt);
             Object value;            
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = valueDes.getNullValue();
             } else if (typeDeser == null) {
                 value = valueDes.deserialize(jp, ctxt);
             } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -144,7 +144,7 @@ public Object[] deserialize(JsonParser jp, DeserializationContext ctxt)
             Object value;
             
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = _elementDeserializer.getNullValue();
             } else if (typeDeser == null) {
                 value = _elementDeserializer.deserialize(jp, ctxt);
             } else {
@@ -225,7 +225,7 @@ private final Object[] handleNonArray(JsonParser jp, DeserializationContext ctxt
         Object value;
         
         if (t == JsonToken.VALUE_NULL) {
-            value = null;
+            value = _elementDeserializer.getNullValue();
         } else if (_elementTypeDeserializer == null) {
             value = _elementDeserializer.deserialize(jp, ctxt);
         } else {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
Patch:
@@ -63,7 +63,7 @@ public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws I
             if (t == JsonToken.VALUE_STRING) {
                 value = jp.getText();
             } else if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = _elementDeserializer.getNullValue();
             } else {
                 value = _parseString(jp, ctxt);
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -183,7 +183,7 @@ private Collection<String> deserializeUsingCustom(JsonParser jp, Deserialization
             String value;
 
             if (t == JsonToken.VALUE_NULL) {
-                value = null;
+                value = deser.getNullValue();
             } else {
                 value = deser.deserialize(jp, ctxt);
             }
@@ -216,7 +216,7 @@ private final Collection<String> handleNonArray(JsonParser jp, DeserializationCo
         String value;
         
         if (t == JsonToken.VALUE_NULL) {
-            value = null;
+            value = (valueDes == null) ? null : valueDes.getNullValue();
         } else {
             value = (valueDes == null) ? _parseString(jp, ctxt) : valueDes.deserialize(jp, ctxt);
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java
Patch:
@@ -148,7 +148,7 @@ public JsonDeserializer<?> replaceDelegatee(JsonDeserializer<?> delegatee)
     public Collection<Object> getKnownPropertyNames() { return _delegatee.getKnownPropertyNames(); }
     
     @Override
-    public boolean isCachable() { return false; }
+    public boolean isCachable() { return _delegatee.isCachable(); }
 
     @Override
     public ObjectIdReader getObjectIdReader() { return _delegatee.getObjectIdReader(); }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java
Patch:
@@ -148,7 +148,7 @@ public JsonDeserializer<?> replaceDelegatee(JsonDeserializer<?> delegatee)
     public Collection<Object> getKnownPropertyNames() { return _delegatee.getKnownPropertyNames(); }
     
     @Override
-    public boolean isCachable() { return false; }
+    public boolean isCachable() { return _delegatee.isCachable(); }
 
     @Override
     public ObjectIdReader getObjectIdReader() { return _delegatee.getObjectIdReader(); }

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java
Patch:
@@ -194,7 +194,7 @@ private class AnySetterReferring extends Referring {
 
         public AnySetterReferring(Object instance, String propName, Object id, JsonLocation location)
         {
-            super(location);
+            super(location, _type.getRawClass());
             _pojo = instance;
             _propName = propName;
             _unresolvedId = id;

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java
Patch:
@@ -109,7 +109,7 @@ public final class PropertyReferring extends Referring {
 
         public PropertyReferring(Object ob, Object id, JsonLocation location)
         {
-            super(location);
+            super(location, _type.getRawClass());
             _pojo = ob;
             _unresolvedId = id;
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -352,7 +352,7 @@ private final class UnresolvedId extends Referring {
 
             private UnresolvedId(Object id, JsonLocation location)
             {
-                super(location);
+                super(location, _collectionType.getContentType().getRawClass());
                 _id = id;
             }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -619,7 +619,7 @@ private final class UnresolvedId extends Referring {
 
             private UnresolvedId(Object key, Object id, JsonLocation location)
             {
-                super(location);
+                super(location, _mapType.getContentType().getRawClass());
                 _key = key;
                 _id = id;
             }

File: src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java
Patch:
@@ -363,7 +363,7 @@ public void testUnresolvedForwardReference()
             assertEquals(Employee.class, firstUnresolvedId.getType());
             UnresolvedId secondUnresolvedId = unresolvedIds.get(1);
             assertEquals(firstUnresolvedId.getId(), secondUnresolvedId.getId());
-            assertEquals(firstUnresolvedId.getType(), secondUnresolvedId.getType());
+            assertEquals(Employee.class, secondUnresolvedId.getType());
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -366,7 +366,7 @@ protected void addObjectIdReader(DeserializationContext ctxt,
         }
         Class<?> implClass = objectIdInfo.getGeneratorType();
         JavaType idType;
-    	SettableBeanProperty idProp;
+        SettableBeanProperty idProp;
         ObjectIdGenerator<?> gen;
 
         // Just one special case: Property-based generator is trickier

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java
Patch:
@@ -170,15 +170,15 @@ public boolean hasProperties() {
     public JsonSerializer<?> build()
     {
         BeanPropertyWriter[] properties;
-        // No properties or any getter? No real serializer; caller gets to handle
+        // No properties, any getter or object id writer?
+        // No real serializer; caller gets to handle
         if (_properties == null || _properties.isEmpty()) {
-            if (_anyGetter == null) {
+            if (_anyGetter == null && _objectIdWriter == null) {
                 return null;
             }
             properties = NO_PROPERTIES;
         } else {
             properties = _properties.toArray(new BeanPropertyWriter[_properties.size()]);
-            
         }
         return new BeanSerializer(_beanDesc.getType(), this,
                 properties, _filteredProperties);

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -435,7 +435,7 @@ protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov
         }
         
         JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();
-
+        
         /* However, after all modifications: no properties, no serializer
          * (note; as per [JACKSON-670], check was moved later on from an earlier location)
          */

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java
Patch:
@@ -82,7 +82,7 @@ public static TypeNameIdResolver construct(MapperConfig<?> config,
     @Override
     public String idFromValue(Object value)
     {
-        Class<?> cls = value.getClass();
+        Class<?> cls = _typeFactory.constructType(value.getClass()).getRawClass();
         final String key = cls.getName();
         String name;
         synchronized (_typeToId) {

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java
Patch:
@@ -82,7 +82,7 @@ public static TypeNameIdResolver construct(MapperConfig<?> config,
     @Override
     public String idFromValue(Object value)
     {
-        Class<?> cls = value.getClass();
+        Class<?> cls = _typeFactory.constructType(value.getClass()).getRawClass();
         final String key = cls.getName();
         String name;
         synchronized (_typeToId) {

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -185,7 +185,7 @@ protected SettableBeanProperty(PropertyName propName, JavaType type, PropertyNam
     }
 
     /**
-     * Constructor only used by {@link ObjectIdValueProperty}.
+     * Constructor only used by {@link com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty}.
      * 
      * @since 2.3
      */

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java
Patch:
@@ -11,9 +11,8 @@ public interface JsonFormatVisitable
 {
     /**
      * Get the representation of the schema to which this serializer will conform.
+     * 
      * @param typeHint Type of element (entity like property) being visited
-     *
-     * @returns <a href="http://json-schema.org/">Json-schema</a> for this serializer.
      */
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
         throws JsonMappingException;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -223,7 +223,7 @@ protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore)
 
     /**
      * Mutant factory used for creating a new instance with different
-     * {@link JsonFilter}.
+     * filter id (used with <code>JsonFilter</code> annotation)
      * 
      * @since 2.3
      */

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -274,6 +274,7 @@ protected final JsonNode deserializeAny(JsonParser jp, DeserializationContext ct
     {
         switch (jp.getCurrentToken()) {
         case START_OBJECT:
+        case END_OBJECT: // for empty JSON Objects we may point to this
             return deserializeObject(jp, ctxt, nodeFactory);
 
         case START_ARRAY:

File: src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Numeric node that contains simple 64-bit integer values.
  */
-public final class BigIntegerNode
+public class BigIntegerNode
     extends NumericNode
 {
     private final static BigInteger MIN_INTEGER = BigInteger.valueOf(Integer.MIN_VALUE);
@@ -109,7 +109,7 @@ public boolean equals(Object o)
     {
         if (o == this) return true;
         if (o == null) return false;
-        if (o.getClass() != getClass()) { // final class, can do this
+        if (!(o instanceof BigIntegerNode)) {
             return false;
         }
         return ((BigIntegerNode) o)._value.equals(_value);

File: src/main/java/com/fasterxml/jackson/databind/node/BinaryNode.java
Patch:
@@ -11,12 +11,12 @@
  * Value node that contains Base64 encoded binary value, which will be
  * output and stored as Json String value.
  */
-public final class BinaryNode
+public class BinaryNode
     extends ValueNode
 {
     final static BinaryNode EMPTY_BINARY_NODE = new BinaryNode(new byte[0]);
 
-    final byte[] _data;
+    protected final byte[] _data;
 
     public BinaryNode(byte[] data)
     {
@@ -100,7 +100,7 @@ public boolean equals(Object o)
     {
         if (o == this) return true;
         if (o == null) return false;
-        if (o.getClass() != getClass()) { // final class, can do this
+        if (!(o instanceof BinaryNode)) {
             return false;
         }
         return Arrays.equals(((BinaryNode) o)._data, _data);

File: src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java
Patch:
@@ -11,7 +11,7 @@
  * Numeric node that contains values that do not fit in simple
  * integer (int, long) or floating point (double) values.
  */
-public final class DecimalNode
+public class DecimalNode
     extends NumericNode
 {
     public static final DecimalNode ZERO = new DecimalNode(BigDecimal.ZERO);
@@ -115,7 +115,7 @@ public boolean equals(Object o)
     {
         if (o == this) return true;
         if (o == null) return false;
-        if (o.getClass() != getClass()) { // final class, can do this
+        if (!(o instanceof DecimalNode)) {
             return false;
         }
         return ((DecimalNode) o)._value.equals(_value);

File: src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java
Patch:
@@ -388,7 +388,7 @@ public final Class<?> getActiveView() {
     public final ContextAttributes getAttributes() {
         return _attributes;
     }
-    
+
     /*
     /**********************************************************
     /* ClassIntrospector.MixInResolver impl:

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -440,7 +440,7 @@ public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config
                     properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);
                 } else {
                     NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);
-                    if (unwrapper != null) {
+                    if (unwrapper != null) { // [Issue#265]: allow unwrapped properties
                         properties[i] = constructCreatorProperty(ctxt, beanDesc,
                                 UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);
                         ++namedCount;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java
Patch:
@@ -115,10 +115,11 @@ public String idFromValueAndType(Object value, Class<?> type)
         }
         return idFromValue(value);
     }
-    
+
+    @Deprecated
     @Override
     public JavaType typeFromId(String id) {
-        return _idToType.get(id);
+        return _typeFromId(id);
     }    
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -565,10 +565,10 @@ public void serializeAsOmittedField(Object bean, JsonGenerator jgen, SerializerP
      * is serialized as JSON Array; the difference is that no field names
      * are written.
      * 
-     * @since 2.1
+     * @since 2.3
      */
     @Override
-    public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
+    public void serializeAsElement(Object bean, JsonGenerator jgen, SerializerProvider prov)
         throws Exception
     {
         Object value = get(bean);
@@ -631,7 +631,7 @@ public void serializeAsPlaceholder(Object bean, JsonGenerator jgen, SerializerPr
             jgen.writeNull();
         }
     }
-
+    
     /*
     /**********************************************************
     /* PropertyWriter methods (schema generation)

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java
Patch:
@@ -188,7 +188,7 @@ protected final void serializeAsArray(Object bean, JsonGenerator jgen, Serialize
                 if (prop == null) { // can have nulls in filtered list; but if so, MUST write placeholders
                     jgen.writeNull();
                 } else {
-                    prop.serializeAsColumn(bean, jgen, provider);
+                    prop.serializeAsElement(bean, jgen, provider);
                 }
             }
             // NOTE: any getters can not be supported either

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java
Patch:
@@ -172,7 +172,7 @@ public BeanPropertyFilter findFilter(Object filterId)
     }
     
     @Override
-    public PropertyFilter findPropertyFilter(Object filterId)
+    public PropertyFilter findPropertyFilter(Object filterId, Object valueToFilter)
     {
         PropertyFilter f = _filtersById.get(filterId);
         if (f == null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty.java
Patch:
@@ -79,7 +79,7 @@ public void serializeAsOmittedField(Object pojo, JsonGenerator jgen,
     }
 
     @Override
-    public void serializeAsColumn(Object pojo, JsonGenerator jgen,
+    public void serializeAsElement(Object pojo, JsonGenerator jgen,
             SerializerProvider provider) throws Exception
     {
         if (_typeSerializer == null) {
@@ -88,7 +88,7 @@ public void serializeAsColumn(Object pojo, JsonGenerator jgen,
             _valueSerializer.serializeWithType(_value, jgen, provider, _typeSerializer);
         }
     }
-
+    
     @Override
     public void serializeAsPlaceholder(Object pojo, JsonGenerator jgen,
             SerializerProvider provider) throws Exception

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -375,7 +375,8 @@ public void serialize(Map<?,?> value, JsonGenerator jgen, SerializerProvider pro
         jgen.writeStartObject();
         if (!value.isEmpty()) {
             if (_filterId != null) {
-                serializeFilteredFields(value, jgen, provider, findFilter(provider, _filterId));
+                serializeFilteredFields(value, jgen, provider,
+                        findPropertyFilter(provider, _filterId, value));
                 return;
             }
             if (provider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS)) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -263,15 +263,16 @@ protected JsonSerializer<?> findConvertingContentSerializer(SerializerProvider p
      * 
      * @since 2.3
      */
-    protected PropertyFilter findFilter(SerializerProvider provider, Object filterId)
+    protected PropertyFilter findPropertyFilter(SerializerProvider provider,
+            Object filterId, Object valueToFilter)
         throws JsonMappingException
     {
         FilterProvider filters = provider.getFilterProvider();
         // Not ok to miss the provider, if a filter is declared to be needed.
         if (filters == null) {
             throw new JsonMappingException("Can not resolve PropertyFilter with id '"+filterId+"'; no FilterProvider configured");
         }
-        PropertyFilter filter = filters.findPropertyFilter(filterId);
+        PropertyFilter filter = filters.findPropertyFilter(filterId, valueToFilter);
         // But whether unknown ids are ok just depends on filter provider; if we get null that's fine
         return filter;
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -187,7 +187,7 @@ public static MapSerializer construct(String[] ignoredList, JavaType mapType,
             JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer)
     {
         return construct(ignoredList, mapType, staticValueType, vts,
-                keySerializer, valueSerializer);
+                keySerializer, valueSerializer, null);
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -190,7 +190,8 @@ public Set<String> getIgnoredPropertyNames() {
      * Accessor to find out whether type specified requires inclusion
      * of Object Identifier.
      */
-    public ObjectIdInfo getObjectIdInfo() {
+    public ObjectIdInfo getObjectIdInfo()
+    {
         if (_annotationIntrospector == null) {
             return null;
         }
@@ -206,7 +207,7 @@ public ObjectIdInfo getObjectIdInfo() {
      */
     public Class<?> findPOJOBuilderClass()
     {
-    	return _annotationIntrospector.findPOJOBuilder(_classDef);
+        return _annotationIntrospector.findPOJOBuilder(_classDef);
     }
     
     // for unit tests:

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -661,11 +661,9 @@ public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)
      * @param propertiesNode Node which the given property would exist within
      * @param provider Provider that can be used for accessing dynamic aspects of serialization
      *  processing
-     * 
-     * @since 2.1
      */
-    @SuppressWarnings("deprecation")
     @Override
+    @Deprecated
     public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider)
         throws JsonMappingException
     {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty.java
Patch:
@@ -100,10 +100,13 @@ public void serializeAsPlaceholder(Object pojo, JsonGenerator jgen,
     public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)
         throws JsonMappingException
     {
+        // !!! TODO
     }
 
     @Override
+    @Deprecated
     public void depositSchemaProperty(ObjectNode propertiesNode,
             SerializerProvider provider) throws JsonMappingException {
+        // !!! TODO
     }
 }
\ No newline at end of file

File: src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java
Patch:
@@ -47,7 +47,7 @@ public ConvertingBean convert(int[] values) {
         }
     }
     
-    static class PointConverter extends StdConverter<int[], Point>
+    private static class PointConverter extends StdConverter<int[], Point>
     {
         @Override public Point convert(int[] value) {
             return new Point(value[0], value[1]);

File: src/test/java/com/fasterxml/jackson/databind/creators/TestValueUpdate.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.creators;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -683,7 +683,7 @@ protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen,
                 }
             }
             if (_anyGetterWriter != null) {
-                _anyGetterWriter.getAndSerialize(bean, jgen, provider);
+                _anyGetterWriter.getAndFilter(bean, jgen, provider, filter);
             }
         } catch (Exception e) {
             String name = (i == props.length) ? "[anySetter]" : props[i].getName();

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java
Patch:
@@ -160,6 +160,7 @@ && hasSingleElement(provider)) {
     /* Field serialization methods
     /**********************************************************
      */
+
     private boolean hasSingleElement(SerializerProvider provider) {
         final BeanPropertyWriter[] props;
         if (_filteredProps != null && provider.getActiveView() != null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
Patch:
@@ -264,7 +264,6 @@ public static class Builder
         private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>();
         private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>();
 
-        // note: signature changed between 2.1.0 and 2.1.1 (alas!)
         public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser)
         {
             Integer index = _properties.size();

File: src/test/java/com/fasterxml/jackson/failing/TestMultipleExternalIds.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.jsontype;
+package com.fasterxml.jackson.failing;
 
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -1382,7 +1382,7 @@ public JsonDeserializer<?> findDefaultDeserializer(DeserializationContext ctxt,
         if (rawType.isPrimitive() || clsName.startsWith("java.")) {
             // Object ("untyped"), String equivalents:
             if (rawType == CLASS_OBJECT) {
-                return UntypedObjectDeserializer.instance;
+                return new UntypedObjectDeserializer();
             }
             if (rawType == CLASS_STRING || rawType == CLASS_CHAR_BUFFER) {
                 return StringDeserializer.instance;

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1908,7 +1908,7 @@ public JsonParser treeAsTokens(TreeNode n)
      * Convenience conversion method that will bind data given JSON tree
      * contains into specific value (usually bean) type.
      *<p>
-     * Equivalent to:
+     * Functionally equivalent to:
      *<pre>
      *   objectMapper.convertValue(n, valueClass);
      *</pre>

File: src/test/java/com/fasterxml/jackson/databind/ser/TestSerializationOrder.java
Patch:
@@ -141,7 +141,7 @@ public void testAlphaAndCreatorOrdering() throws Exception
     {
         ObjectMapper m = new ObjectMapper();
         m.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);
-        String json = m.writeValueAsString(new BeanForGH311(1, 2));
+        String json = m.writeValueAsString(new BeanForGH311(2, 1));
         assertEquals("{\"a\":1,\"b\":2}", json);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -526,7 +526,7 @@ protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription b
      */
     protected Object findFilterId(SerializationConfig config, BeanDescription beanDesc)
     {
-        return config.getAnnotationIntrospector().findFilterId(beanDesc.getClassInfo());
+        return config.getAnnotationIntrospector().findFilterId((Annotated)beanDesc.getClassInfo());
     }
     
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java
Patch:
@@ -17,7 +17,7 @@
 public class UUIDSerializer
     extends StdScalarSerializer<UUID>
 {
-    final static char[] HEX_CHARS = "01234567890abcdef".toCharArray();
+    final static char[] HEX_CHARS = "0123456789abcdef".toCharArray();
     
     public UUIDSerializer() { super(UUID.class); }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -185,9 +185,10 @@ && hasSingleElement(value)) {
         serializeContents(value, jgen, provider);
         jgen.writeEndArray();
     }
-    
+
+    // Note: was 'final' modifier in 2.2 and before; no real need to be, removed
     @Override
-    public final void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,
+    public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider provider,
             TypeSerializer typeSer)
         throws IOException, JsonGenerationException
     {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -5,7 +5,6 @@
 import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
-
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
@@ -133,7 +132,9 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
             // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,
             //   we can consider it a static case as well.
             if (_elementType != null) {
-                if (_staticTyping || hasContentTypeAnnotation(provider, property)) {
+                // 20-Aug-2013, tatu: Need to avoid trying to access serializer for java.lang.Object tho
+                if ((_staticTyping && _elementType.getRawClass() != Object.class)
+                        || hasContentTypeAnnotation(provider, property)) {
                     ser = provider.findValueSerializer(_elementType, property);
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -114,7 +114,6 @@ protected CollectionDeserializer withResolved(JsonDeserializer<?> dd,
         return new CollectionDeserializer(_collectionType,
                 (JsonDeserializer<Object>) vd, vtd,
                 _valueInstantiator, (JsonDeserializer<Object>) dd);
-                
     }
     
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java
Patch:
@@ -15,7 +15,7 @@
 public class StdContainerSerializers
 {
     protected StdContainerSerializers() { }
-    
+
     /**
      * @since 2.1
      */
@@ -24,7 +24,7 @@ public static ContainerSerializer<?> indexedListSerializer(JavaType elemType,
     {
         return new IndexedListSerializer(elemType, staticTyping, vts, null, valueSerializer);
     }
-    
+
     /**
      * @since 2.1
      */

File: src/main/java/com/fasterxml/jackson/databind/node/NullNode.java
Patch:
@@ -47,7 +47,6 @@ public String asText() {
     public final void serialize(JsonGenerator jg, SerializerProvider provider)
         throws IOException, JsonProcessingException
     {
-System.err.println("DEBUG: serialize null...");
         provider.defaultSerializeNull(jg);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/node/NullNode.java
Patch:
@@ -47,7 +47,8 @@ public String asText() {
     public final void serialize(JsonGenerator jg, SerializerProvider provider)
         throws IOException, JsonProcessingException
     {
-        jg.writeNull();
+System.err.println("DEBUG: serialize null...");
+        provider.defaultSerializeNull(jg);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -336,6 +336,8 @@ public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.I
                 return JsonInclude.Include.NON_DEFAULT;
             case NON_EMPTY:
                 return JsonInclude.Include.NON_EMPTY;
+            case DEFAULT_INCLUSION: // since 2.3 -- fall through, use default
+                break;
             }
         }
         return defValue;

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -981,7 +981,7 @@ protected boolean usesStaticTyping(SerializationConfig config,
         }
         AnnotationIntrospector intr = config.getAnnotationIntrospector();
         JsonSerialize.Typing t = intr.findSerializationTyping(beanDesc.getClassInfo());
-        if (t != null) {
+        if (t != null && t != JsonSerialize.Typing.DEFAULT_TYPING) {
             return (t == JsonSerialize.Typing.STATIC);
         }
         return config.isEnabled(MapperFeature.USE_STATIC_TYPING);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -331,20 +331,20 @@ public BeanDeserializerBase(BeanDeserializerBase src, ObjectIdReader oir)
         _needViewProcesing = src._needViewProcesing;
         _serializationShape = src._serializationShape;
 
-        _vanillaProcessing = src._vanillaProcessing;
-
         // then actual changes:
         _objectIdReader = oir;
 
         if (oir == null) {
             _beanProperties = src._beanProperties;
+            _vanillaProcessing = src._vanillaProcessing;
         } else {
             /* 18-Nov-2012, tatu: May or may not have annotations for id property;
              *   but no easy access. But hard to see id property being optional,
              *   so let's consider required at this point.
              */
             ObjectIdValueProperty idProp = new ObjectIdValueProperty(oir, PropertyMetadata.STD_REQUIRED);
             _beanProperties = src._beanProperties.withProperty(idProp);
+            _vanillaProcessing = false;
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -213,15 +213,16 @@ protected final JsonDeserializer<Object> _findDefaultImplDeserializer(Deserializ
     protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
-        final String typeId = jp.getTypeId();
+        final Object typeId0 = jp.getTypeId();
         JsonDeserializer<Object> deser;
-        if (typeId == null) {
+        if (typeId0 == null) {
             if (_defaultImpl != null) {
                 deser = _findDefaultImplDeserializer(ctxt);
             } else {
                 throw ctxt.mappingException("No (native) type id found when one was expected for polymorphic type handling");
             }
         } else {
+            String typeId = (typeId0 instanceof String) ? (String) typeId0 : String.valueOf(typeId0);
             deser = _findDeserializer(ctxt, typeId);
         }
         /* 02-Aug-2013, tatu: What if type id is marked as "visible"? Should we try to

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JavaTypeDeserializer.java
Patch:
@@ -14,6 +14,8 @@
 public class JavaTypeDeserializer
     extends StdScalarDeserializer<JavaType>
 {
+    private static final long serialVersionUID = 1;
+
     public final static JavaTypeDeserializer instance = new JavaTypeDeserializer();
     
     public JavaTypeDeserializer() { super(JavaType.class); }

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -1341,9 +1341,10 @@ protected final static class Segment
          */
         private final static JsonToken[] TOKEN_TYPES_BY_INDEX;
         static {
-            // ... here we know that there are <= 16 values in JsonToken enum
+            // ... here we know that there are <= 15 values in JsonToken enum
             TOKEN_TYPES_BY_INDEX = new JsonToken[16];
             JsonToken[] t = JsonToken.values();
+            // and reserve entry 0 for "not available"
             System.arraycopy(t, 1, TOKEN_TYPES_BY_INDEX, 1, Math.min(15, t.length - 1));
         }
 

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1924,7 +1924,7 @@ public <T extends JsonNode> T valueToTree(Object fromValue)
         throws IllegalArgumentException
     {
         if (fromValue == null) return null;
-        TokenBuffer buf = new TokenBuffer(this);
+        TokenBuffer buf = new TokenBuffer(this, false);
         JsonNode result;
         try {
             writeValue(buf, fromValue);
@@ -2602,7 +2602,7 @@ protected Object _convert(Object fromValue, JavaType toValueType)
         /* Then use TokenBuffer, which is a JsonGenerator:
          * (see [JACKSON-175])
          */
-        TokenBuffer buf = new TokenBuffer(this);
+        TokenBuffer buf = new TokenBuffer(this, false);
         try {
             // inlined 'writeValue' with minor changes:
             // first: disable wrapping when writing

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -900,14 +900,14 @@ protected Object deserializeWithObjectId(JsonParser jp, DeserializationContext c
             return deserializeFromObject(jp, ctxt);
         }
         // otherwise need to reorder things
-        TokenBuffer tmpBuffer = new TokenBuffer(jp.getCodec());
+        TokenBuffer tmpBuffer = new TokenBuffer(jp);
         TokenBuffer mergedBuffer = null;
         for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) {
             String propName = jp.getCurrentName();
             // when we match the id property, can start merging
             if (mergedBuffer == null) {
                 if (idPropName.equals(propName)) {
-                    mergedBuffer = new TokenBuffer(jp.getCodec());
+                    mergedBuffer = new TokenBuffer(jp);
                     mergedBuffer.writeFieldName(propName);
                     jp.nextToken();
                     mergedBuffer.copyCurrentStructure(jp);

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
Patch:
@@ -105,7 +105,7 @@ public boolean handlePropertyValue(JsonParser jp, DeserializationContext ctxt,
             canDeserialize = (bean != null) && (_tokens[index] != null);
         } else {
             @SuppressWarnings("resource")
-            TokenBuffer tokens = new TokenBuffer(jp.getCodec());
+            TokenBuffer tokens = new TokenBuffer(jp);
             tokens.copyCurrentStructure(jp);
             _tokens[index] = tokens;
             canDeserialize = (bean != null) && (_typeIds[index] != null);
@@ -217,7 +217,7 @@ protected final Object _deserialize(JsonParser jp, DeserializationContext ctxt,
             int index, String typeId)
         throws IOException, JsonProcessingException
     {
-        TokenBuffer merged = new TokenBuffer(jp.getCodec());
+        TokenBuffer merged = new TokenBuffer(jp);
         merged.writeStartArray();
         merged.writeString(typeId);
         JsonParser p2 = _tokens[index].asParser(jp);
@@ -239,7 +239,7 @@ protected final void _deserializeAndSet(JsonParser jp, DeserializationContext ct
         /* Ok: time to mix type id, value; and we will actually use "wrapper-array"
          * style to ensure we can handle all kinds of JSON constructs.
          */
-        TokenBuffer merged = new TokenBuffer(jp.getCodec());
+        TokenBuffer merged = new TokenBuffer(jp);
         merged.writeStartArray();
         merged.writeString(typeId);
         JsonParser p2 = _tokens[index].asParser(jp);

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java
Patch:
@@ -105,7 +105,7 @@ private final Object _deserialize(JsonParser jp, DeserializationContext ctxt)
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && jp.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null);
+            TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
Patch:
@@ -87,7 +87,7 @@ public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext c
                 return _deserializeTypedForId(jp, ctxt, tb);
             }
             if (tb == null) {
-                tb = new TokenBuffer(null);
+                tb = new TokenBuffer(null, false);
             }
             tb.writeFieldName(name);
             tb.copyCurrentStructure(jp);
@@ -104,7 +104,7 @@ protected final Object _deserializeTypedForId(JsonParser jp, DeserializationCont
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         if (_typeIdVisible) { // need to merge id back in JSON input?
             if (tb == null) {
-                tb = new TokenBuffer(null);
+                tb = new TokenBuffer(null, false);
             }
             tb.writeFieldName(jp.getCurrentName());
             tb.writeString(typeId);

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
Patch:
@@ -115,7 +115,7 @@ private final Object _deserialize(JsonParser jp, DeserializationContext ctxt)
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && jp.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
-            TokenBuffer tb = new TokenBuffer(null);
+            TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);

File: src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
Patch:
@@ -15,8 +15,6 @@
  * accessing contents of JSON tree in alternate form (stream of tokens).
  * Useful when a streaming source is expected by code, such as data binding
  * functionality.
- * 
- * @author tatu
  */
 public class TreeTraversingParser extends ParserMinimalBase
 {

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java
Patch:
@@ -254,7 +254,7 @@ public void testTokenBuffer() throws Exception
         mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
 
         // Ok, first test JSON Object containing buffer:
-        TokenBuffer buf = new TokenBuffer(mapper);
+        TokenBuffer buf = new TokenBuffer(mapper, false);
         buf.writeStartObject();
         buf.writeNumberField("num", 42);
         buf.writeEndObject();
@@ -272,7 +272,7 @@ public void testTokenBuffer() throws Exception
         buf.close();
 
         // then as an array:
-        buf = new TokenBuffer(mapper);
+        buf = new TokenBuffer(mapper, false);
         buf.writeStartArray();
         buf.writeBoolean(true);
         buf.writeEndArray();
@@ -289,7 +289,7 @@ public void testTokenBuffer() throws Exception
         buf.close();
 
         // and finally as scalar
-        buf = new TokenBuffer(mapper);
+        buf = new TokenBuffer(mapper, false);
         buf.writeNumber(321);
         json = mapper.writeValueAsString(new ObjectHolder(buf));
         holder = mapper.readValue(json, ObjectHolder.class);

File: src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java
Patch:
@@ -156,7 +156,7 @@ public void testIssue709() throws Exception
 
     public void testEmbeddedObject() throws Exception
     {
-        TokenBuffer buf = new TokenBuffer(MAPPER);
+        TokenBuffer buf = new TokenBuffer(MAPPER, false);
         buf.writeObject(new byte[3]);
         JsonNode node = MAPPER.readTree(buf.asParser());
         buf.close();
@@ -170,7 +170,7 @@ public void testEmbeddedObject() throws Exception
 
     public void testEmbeddedObjectInArray() throws Exception
     {
-        TokenBuffer buf = new TokenBuffer(MAPPER);
+        TokenBuffer buf = new TokenBuffer(MAPPER, false);
         buf.writeStartArray();
         buf.writeObject(MARKER);
         buf.writeEndArray();
@@ -185,7 +185,7 @@ public void testEmbeddedObjectInArray() throws Exception
 
     public void testEmbeddedObjectInObject() throws Exception
     {
-        TokenBuffer buf = new TokenBuffer(MAPPER);
+        TokenBuffer buf = new TokenBuffer(MAPPER, false);
         buf.writeStartObject();
         buf.writeFieldName("pojo");
         buf.writeObject(MARKER);

File: src/test/java/com/fasterxml/jackson/databind/ser/TestJacksonTypes.java
Patch:
@@ -36,7 +36,7 @@ public void testTokenBuffer() throws Exception
     {
         // First, copy events from known good source (StringReader)
         JsonParser jp = createParserUsingReader(SAMPLE_DOC_JSON_SPEC);
-        TokenBuffer tb = new TokenBuffer(null);
+        TokenBuffer tb = new TokenBuffer(null, false);
         while (jp.nextToken() != null) {
             tb.copyCurrentEvent(jp);
         }

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java
Patch:
@@ -48,6 +48,7 @@ public void writeTypePrefixForObject(Object value, JsonGenerator jgen)
         final String typeId = idFromValue(value);
         if (jgen.canWriteTypeId()) {
             jgen.writeTypeId(typeId);
+            jgen.writeStartObject();
         } else {
             jgen.writeStartObject();
             jgen.writeStringField(_typePropertyName, typeId);
@@ -61,6 +62,7 @@ public void writeTypePrefixForObject(Object value, JsonGenerator jgen, Class<?>
         final String typeId = idFromValueAndType(value, type);
         if (jgen.canWriteTypeId()) {
             jgen.writeTypeId(typeId);
+            jgen.writeStartObject();
         } else {
             jgen.writeStartObject();
             jgen.writeStringField(_typePropertyName, typeId);
@@ -99,6 +101,7 @@ public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, Str
     {
         if (jgen.canWriteTypeId()) {
             jgen.writeTypeId(typeId);
+            jgen.writeStartObject();
         } else {
             jgen.writeStartObject();
             jgen.writeStringField(_typePropertyName, typeId);

File: src/main/java/com/fasterxml/jackson/databind/BeanProperty.java
Patch:
@@ -104,7 +104,7 @@ public interface BeanProperty extends Named
      */
     public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)
         throws JsonMappingException;
-    
+
     /*
     /**********************************************************
     /* Helper classes

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java
Patch:
@@ -18,6 +18,9 @@
  * Note that implementation of serialization is bit cumbersome as we must
  * serialized external type id AFTER object; this because callback only
  * occurs after field name has been written.
+ *<p>
+ * Also note that this type of type id inclusion will NOT try to make use
+ * of native Type Ids, even if those exist.
  */
 public class AsExternalTypeSerializer
    extends TypeSerializerBase

File: src/test/java/com/fasterxml/jackson/databind/struct/TestBackRefsWithPolymorphic.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.failing;
+package com.fasterxml.jackson.databind.struct;
 
 import java.io.IOException;
 import java.util.Map;

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -498,7 +498,7 @@ protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai)
         }
         String implName; // from naming convention
         boolean visible;
-        
+
         PropertyName pn = (ai == null) ? null : ai.findNameForSerialization(m);
         String explName = (pn == null) ? null : pn.getSimpleName();
         if (explName == null) { // no explicit name; must follow naming convention

File: src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java
Patch:
@@ -227,8 +227,8 @@ public void testBigDecimalAsPlain() throws Exception
         ObjectMapper mapper = new ObjectMapper()
                 .enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)
                 .enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);
-        final String JSON = "{\"x\":1e2}";
-        final JsonNode node = mapper.readTree(JSON);
+        final String INPUT = "{\"x\":1e2}";
+        final JsonNode node = mapper.readTree(INPUT);
         String result = mapper.writeValueAsString(node);
         assertEquals("{\"x\":100}", result);
     }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractWithObjectId.java
Patch:
@@ -63,6 +63,6 @@ public void testIssue877() throws Exception
 
         assertNotNull(result);
         // see what we get back
-        System.out.println("deserialised list size = " + result.size());
+        assertEquals(2, result.size());
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -291,7 +291,7 @@ protected BeanDeserializerBase(BeanDeserializerBase src, NameTransformer unwrapp
 
         _nonStandardCreation = src._nonStandardCreation;
         UnwrappedPropertyHandler uph = src._unwrappedPropertyHandler;
-        
+
         if (unwrapper != null) {
             // delegate further unwraps, if any
             if (uph != null) { // got handler, delegate

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java
Patch:
@@ -25,11 +25,12 @@ public void addProperty(SettableBeanProperty property) {
         _properties.add(property);
     }
 
-    public void renameAll(NameTransformer transformer)
+    public UnwrappedPropertyHandler renameAll(NameTransformer transformer)
     {
         ArrayList<SettableBeanProperty> oldProps = new ArrayList<SettableBeanProperty>(_properties);
         Iterator<SettableBeanProperty> it = oldProps.iterator();
         _properties.clear();
+
         while (it.hasNext()) {
             SettableBeanProperty prop = it.next();
             String newName = transformer.transform(prop.getName());
@@ -45,6 +46,7 @@ public void renameAll(NameTransformer transformer)
             }
             _properties.add(prop);
         }
+        return this;
     }
     
     public Object processUnwrapped(JsonParser originalParser, DeserializationContext ctxt, Object bean,

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -67,7 +67,7 @@ public abstract class BasicDeserializerFactory
             @SuppressWarnings("unchecked")
                 Class<? extends Map<?,?>> mapValue = (Class<? extends Map<?,?>>) value;
             _mapFallbacks.put(key.getName(), mapValue);
-        } catch (Throwable e) { // is this possible?
+        } catch (Throwable e) { // some class loading problems are Errors, others Exceptions
             System.err.println("Problems with (optional) types: "+e);
         }
     }

File: src/test/java/com/fasterxml/jackson/databind/ser/TestDateSerialization.java
Patch:
@@ -4,7 +4,6 @@
 import java.text.*;
 import java.util.*;
 
-
 import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.databind.*;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -275,7 +275,7 @@ protected final JsonNode deserializeAny(JsonParser jp, DeserializationContext ct
                     return nodeFactory.binaryNode((byte[]) ob);
                 }
                 // any other special handling needed?
-                return nodeFactory.POJONode(ob);
+                return nodeFactory.pojoNode(ob);
             }
 
         case VALUE_STRING:

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -336,7 +336,7 @@ public ArrayNode addPOJO(Object value)
         if (value == null) {
             addNull();
         } else {
-            _add(POJONode(value));
+            _add(pojoNode(value));
         }
         return this;
     }
@@ -536,7 +536,7 @@ public ArrayNode insertPOJO(int index, Object value)
         if (value == null) {
             return insertNull(index);
         }
-        return _insert(index, POJONode(value));
+        return _insert(index, pojoNode(value));
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -560,7 +560,7 @@ public ObjectNode putObject(String fieldName)
      * @return This node (to allow chaining)
      */
     public ObjectNode putPOJO(String fieldName, Object pojo) {
-        _children.put(fieldName, POJONode(pojo));
+        _children.put(fieldName, pojoNode(pojo));
         return this;
     }
 

File: src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java
Patch:
@@ -58,7 +58,7 @@ public void testPOJOString()
         ObjectMapper mapper = new ObjectMapper();
         // also need tree mapper to construct tree to serialize
         ObjectNode n = mapper.getNodeFactory().objectNode();
-        n.set("pojo", mapper.getNodeFactory().POJONode("abc"));
+        n.set("pojo", mapper.getNodeFactory().pojoNode("abc"));
         StringWriter sw = new StringWriter();
         JsonGenerator jg = mapper.getFactory().createGenerator(sw);
         mapper.writeTree(jg, n);
@@ -73,7 +73,7 @@ public void testPOJOIntArray()
     {
         ObjectMapper mapper = new ObjectMapper();
         ObjectNode n = mapper.getNodeFactory().objectNode();
-        n.set("pojo", mapper.getNodeFactory().POJONode(new int[] { 1, 2, 3 }));
+        n.set("pojo", mapper.getNodeFactory().pojoNode(new int[] { 1, 2, 3 }));
         StringWriter sw = new StringWriter();
         JsonGenerator jg = mapper.getFactory().createGenerator(sw);
         mapper.writeTree(jg, n);
@@ -96,7 +96,7 @@ public void testPOJOBean()
         ObjectMapper mapper = new ObjectMapper();
         // also need tree mapper to construct tree to serialize
         ObjectNode n = mapper.getNodeFactory().objectNode();
-        n.set("pojo", mapper.getNodeFactory().POJONode(new Bean()));
+        n.set("pojo", mapper.getNodeFactory().pojoNode(new Bean()));
         StringWriter sw = new StringWriter();
         JsonGenerator jg = mapper.getFactory().createGenerator(sw);
         mapper.writeTree(jg, n);

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -589,6 +589,7 @@ public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvide
             } else { // can NOT suppress entries in tabular output
                 jgen.writeNull();
             }
+            return;
         }
         // otherwise find serializer to use
         JsonSerializer<Object> ser = _serializer;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java
Patch:
@@ -79,7 +79,7 @@ public StdValueInstantiator(DeserializationConfig config, JavaType valueType)
                 : config.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
         _valueTypeDesc = (valueType == null) ? "UNKNOWN TYPE" : valueType.toString();
     }
-    
+
     /**
      * Copy-constructor that sub-classes can use when creating new instances
      * by fluent-style construction

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java
Patch:
@@ -56,6 +56,6 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
 
     protected void failForEmpty(Object value) throws JsonMappingException
     {
-        throw new JsonMappingException("No serializer found for class "+value.getClass().getName()+" and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.SerializationFeature.FAIL_ON_EMPTY_BEANS) )");
+        throw new JsonMappingException("No serializer found for class "+value.getClass().getName()+" and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )");
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.*;
 
-import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.*;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -1218,7 +1218,7 @@ public void setFilters(FilterProvider filterProvider) {
      * 
      * @param v Base64 variant to use
      * 
-     * @returns This mapper, for convenience to allow chaining
+     * @return This mapper, for convenience to allow chaining
      * 
      * @since 2.1
      */

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -645,7 +645,7 @@ protected JsonDeserializer<Object> findDeserializer(DeserializationContext ctxt,
      * indicating that a converter is to be used for contained values (contents
      * of structured types; array/List/Map values)
      * 
-     * @param existingSerializer (optional) configured content
+     * @param existingDeserializer (optional) configured content
      *    serializer if one already exists.
      * 
      * @since 2.2

File: src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java
Patch:
@@ -60,6 +60,9 @@ public Number numberValue() {
         return _value;
     }
 
+    @Override
+    public short shortValue() { return _value.shortValue(); }
+
     @Override
     public int intValue() { return _value.intValue(); }
 

File: src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java
Patch:
@@ -67,6 +67,9 @@ public final class DecimalNode
     @Override
     public Number numberValue() { return _value; }
 
+    @Override
+    public short shortValue() { return _value.shortValue(); }
+
     @Override
     public int intValue() { return _value.intValue(); }
 

File: src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java
Patch:
@@ -63,6 +63,9 @@ public Number numberValue() {
         return Double.valueOf(_value);
     }
 
+    @Override
+    public short shortValue() { return (short) _value; }
+
     @Override
     public int intValue() { return (int) _value; }
 

File: src/main/java/com/fasterxml/jackson/databind/node/IntNode.java
Patch:
@@ -78,6 +78,9 @@ public Number numberValue() {
         return Integer.valueOf(_value);
     }
 
+    @Override
+    public short shortValue() { return (short) _value; }
+
     @Override
     public int intValue() { return _value; }
 

File: src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java
Patch:
@@ -129,7 +129,7 @@ public ValueNode numberNode(Byte value) {
      * Factory method for getting an instance of JSON numeric value
      * that expresses given 16-bit integer value
      */
-    public NumericNode numberNode(short v) { return IntNode.valueOf(v); }
+    public NumericNode numberNode(short v) { return ShortNode.valueOf(v); }
 
     /**
      * Alternate factory method that will handle wrapper value, which may
@@ -138,7 +138,7 @@ public ValueNode numberNode(Byte value) {
      * {@link NumericNode}, but just {@link ValueNode}.
      */
     public ValueNode numberNode(Short value) {
-        return (value == null) ? nullNode() : IntNode.valueOf(value.shortValue());
+        return (value == null) ? nullNode() : ShortNode.valueOf(value);
     }
     
     /**

File: src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java
Patch:
@@ -171,6 +171,9 @@ public void writeFieldName(String name) throws IOException { }
         @Override
         public void writeNull() throws IOException, JsonGenerationException { }
 
+        @Override
+        public void writeNumber(short v) throws IOException { }
+
         @Override
         public void writeNumber(int v) throws IOException { }
 

File: src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java
Patch:
@@ -36,7 +36,7 @@ public final class ShortNode
     @Override public JsonToken asToken() { return JsonToken.VALUE_NUMBER_INT; }
 
     @Override
-    public JsonParser.NumberType numberType() { return JsonParser.NumberType.SHORT; }
+    public JsonParser.NumberType numberType() { return JsonParser.NumberType.INT; }			// should be SHORT
 
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
Patch:
@@ -72,7 +72,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
         {
             JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);
             if (v2 != null) {
-                v2.numberType(JsonParser.NumberType.SHORT);
+                v2.numberType(JsonParser.NumberType.INT);			// should be SHORT
             }
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -1109,7 +1109,7 @@ public long getLongValue() throws IOException, JsonParseException {
         public NumberType getNumberType() throws IOException, JsonParseException
         {
             Number n = getNumberValue();
-            if (n instanceof Short) return NumberType.SHORT;
+            if (n instanceof Short) return NumberType.INT;		// should be SHORT
             if (n instanceof Integer) return NumberType.INT;
             if (n instanceof Long) return NumberType.LONG;
             if (n instanceof Double) return NumberType.DOUBLE;

File: src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java
Patch:
@@ -21,7 +21,7 @@ public void testShort()
         assertStandardEquals(n);
         assertTrue(0 != n.hashCode());
         assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken());
-        assertEquals(JsonParser.NumberType.SHORT, n.numberType());
+        assertEquals(JsonParser.NumberType.INT, n.numberType());	// should be SHORT
         assertEquals(1, n.intValue());
         assertEquals(1L, n.longValue());
         assertEquals(BigDecimal.ONE, n.decimalValue());

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2757,7 +2757,7 @@ private final void _writeCloseableValue(JsonGenerator jgen, Object value, Serial
      * for deserializing a single root value.
      * Can be overridden if a custom context is needed.
      */
-    protected final DefaultDeserializationContext createDeserializationContext(JsonParser jp,
+    protected DefaultDeserializationContext createDeserializationContext(JsonParser jp,
             DeserializationConfig cfg)
     {
         return _deserializationContext.createInstance(cfg,

File: src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java
Patch:
@@ -36,7 +36,7 @@ public final class ShortNode
     @Override public JsonToken asToken() { return JsonToken.VALUE_NUMBER_INT; }
 
     @Override
-    public JsonParser.NumberType numberType() { return JsonParser.NumberType.INT; }	// TODO: should be SHORT
+    public JsonParser.NumberType numberType() { return JsonParser.NumberType.SHORT; }
 
 
     @Override

File: src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java
Patch:
@@ -163,6 +163,9 @@ public void writeFieldName(String name) throws IOException { }
         @Override
         public void writeNull() throws IOException, JsonGenerationException { }
 
+        @Override
+        public void writeNumber(short v) throws IOException { }
+
         @Override
         public void writeNumber(int v) throws IOException { }
 

File: src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java
Patch:
@@ -20,8 +20,8 @@ public void testShort()
         ShortNode n = ShortNode.valueOf((short) 1);
         assertStandardEquals(n);
         assertTrue(0 != n.hashCode());
-//        assertEquals(JsonToken.VALUE_NUMBER_SHORT, n.asToken());		// TODO: fix when available
-        assertEquals(JsonParser.NumberType.INT, n.numberType());
+        assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken());
+        assertEquals(JsonParser.NumberType.SHORT, n.numberType());
         assertEquals(1, n.intValue());
         assertEquals(1L, n.longValue());
         assertEquals(BigDecimal.ONE, n.decimalValue());

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -426,6 +426,7 @@ public final Object deserialize(JsonParser jp, DeserializationContext ctxt)
         if (_valueTypeDeserializer != null) {
             return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);
         }
+if (_valueDeserializer == null) throw new JsonMappingException("No Value deserializer for '"+this._propName+"', type "+this._type);
         return _valueDeserializer.deserialize(jp, ctxt);
     }
     

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -161,15 +161,15 @@ public JsonMappingException(String msg, JsonLocation loc, Throwable rootCause)
 
     public static JsonMappingException from(JsonParser jp, String msg)
     {
-        return new JsonMappingException(msg, jp.getTokenLocation());
+        return new JsonMappingException(msg, ((jp == null) ? null : jp.getTokenLocation()));
     }
 
     public static JsonMappingException from(JsonParser jp, String msg,
             Throwable problem)
     {
-        return new JsonMappingException(msg, jp.getTokenLocation(), problem);
+        return new JsonMappingException(msg, ((jp == null) ? null : jp.getTokenLocation()), problem);
     }
-
+    
     /**
      * Factory method used when "upgrading" an {@link IOException} into
      * {@link JsonMappingException}: usually only needed to comply with

File: src/test/java/com/fasterxml/jackson/databind/introspect/TestInferredMutators.java
Patch:
@@ -5,8 +5,7 @@
 import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-public class TestInferredMutators
-    extends BaseMapTest
+public class TestInferredMutators extends BaseMapTest
 {
     public static class Point {
         private int x;
@@ -21,7 +20,7 @@ public static class FixedPoint {
 
         public int getX() { return x; }
     }
-    
+
     /*
     /**********************************************************
     /* Unit tests

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -518,7 +518,7 @@ public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)
         for (int i = 0, len = typeVars.length; i < len; ++i) {
             names[i] = typeVars[i].getName();
         }
-        JavaType resultType = new SimpleType(rawType, names, parameterTypes, null, null);
+        JavaType resultType = new SimpleType(rawType, names, parameterTypes, null, null, false);
         return resultType;
     } 
 

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -4,12 +4,11 @@
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.core.io.SerializedString;
+
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer;
 import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
 import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;
-import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
 import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
 import com.fasterxml.jackson.databind.util.NameTransformer;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java
Patch:
@@ -38,7 +38,7 @@ public ValueInstantiator findValueInstantiator(DeserializationConfig config,
      */
     public static class Base implements ValueInstantiators
     {
-//      @Override
+        @Override
         public ValueInstantiator findValueInstantiator(DeserializationConfig config,
                 BeanDescription beanDesc, ValueInstantiator defaultInstantiator) {
             return defaultInstantiator;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java
Patch:
@@ -29,7 +29,7 @@ public class CollectionSerializer
     /* Life-cycle
     /**********************************************************
      */
-    
+
     public CollectionSerializer(JavaType elemType, boolean staticTyping, TypeSerializer vts,
             BeanProperty property, JsonSerializer<Object> valueSerializer)
     {

File: src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java
Patch:
@@ -61,7 +61,7 @@ public String toCanonical()
     /**********************************************************
      */
 
-//  @Override
+    @Override
     public void serializeWithType(JsonGenerator jgen, SerializerProvider provider,
             TypeSerializer typeSer)
         throws IOException, JsonProcessingException
@@ -71,7 +71,7 @@ public void serializeWithType(JsonGenerator jgen, SerializerProvider provider,
         typeSer.writeTypeSuffixForScalar(this, jgen);
     }
 
-//  @Override
+    @Override
     public void serialize(JsonGenerator jgen, SerializerProvider provider)
             throws IOException, JsonProcessingException
     {

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -361,7 +361,7 @@ protected JsonDeserializer<Object> _createDeserializer(DeserializationContext ct
             throw new JsonMappingException("Could not determine Converter parameterization for "
                     +converterType);
         }
-        JavaType delegateType = params[1];
+        JavaType delegateType = params[0];
         return new StdDelegatingDeserializer<Object>(conv, delegateType,
                 _createDeserializer2(ctxt, factory, delegateType, beanDesc));
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java
Patch:
@@ -96,7 +96,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanPro
         if (_delegateDeserializer != null) {
             if (_delegateDeserializer instanceof ContextualDeserializer) {
                 JsonDeserializer<?> deser = ((ContextualDeserializer)_delegateDeserializer).createContextual(ctxt, property);
-                if (deser != _delegateDeserializer || true) {
+                if (deser != _delegateDeserializer) {
                     return withDelegate(_converter, _delegateType, deser);
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java
Patch:
@@ -93,7 +93,8 @@ public T deserialize(JsonParser jp, DeserializationContext ctxt,
                          T intoValue)
         throws IOException, JsonProcessingException
     {
-        throw new UnsupportedOperationException("Can not update object of type "+intoValue.getClass().getName());
+        throw new UnsupportedOperationException("Can not update object of type "
+                +intoValue.getClass().getName()+" (by deserializer of type "+getClass().getName()+")");
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -356,6 +356,9 @@ public String toString()
 
     protected void _appendPathDesc(StringBuilder sb)
     {
+        if (_path == null) {
+            return;
+        }
         Iterator<Reference> it = _path.iterator();
         while (it.hasNext()) {
             sb.append(it.next().toString());

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -356,6 +356,9 @@ public String toString()
 
     protected void _appendPathDesc(StringBuilder sb)
     {
+        if (_path == null) {
+            return;
+        }
         Iterator<Reference> it = _path.iterator();
         while (it.hasNext()) {
             sb.append(it.next().toString());

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -80,7 +80,7 @@ protected AsArraySerializerBase(AsArraySerializerBase<?> src,
         _elementType = src._elementType;
         _staticTyping = src._staticTyping;
         _valueTypeSerializer = vts;
-        _property = src._property;
+        _property = property;
         _elementSerializer = (JsonSerializer<Object>) elementSerializer;
         _dynamicSerializers = src._dynamicSerializers;
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -548,7 +548,8 @@ protected void addBeanProps(DeserializationContext ctxt,
                     }
                 }
                 if (prop == null) {
-                    throw ctxt.mappingException("Could not find creator property with name '"+name+"'");
+                    throw ctxt.mappingException("Could not find creator property with name '"
+                    		+name+"' (in class "+beanDesc.getBeanClass().getName()+")");
                 }
                 builder.addCreatorProperty(prop);
                 continue;

File: src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java
Patch:
@@ -15,6 +15,8 @@
 public final class DecimalNode
     extends NumericNode
 {
+    public static final DecimalNode ZERO = new DecimalNode(BigDecimal.ZERO);
+
     private final static BigDecimal MIN_INTEGER = BigDecimal.valueOf(Integer.MIN_VALUE);
     private final static BigDecimal MAX_INTEGER = BigDecimal.valueOf(Integer.MAX_VALUE);
     private final static BigDecimal MIN_LONG = BigDecimal.valueOf(Long.MIN_VALUE);

File: src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java
Patch:
@@ -15,6 +15,8 @@
 public final class DecimalNode
     extends NumericNode
 {
+    public static final DecimalNode ZERO = new DecimalNode(BigDecimal.ZERO);
+
     private final static BigDecimal MIN_INTEGER = BigDecimal.valueOf(Integer.MIN_VALUE);
     private final static BigDecimal MAX_INTEGER = BigDecimal.valueOf(Integer.MAX_VALUE);
     private final static BigDecimal MIN_LONG = BigDecimal.valueOf(Long.MIN_VALUE);

File: src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
Patch:
@@ -336,7 +336,7 @@ public JsonNode setAll(Map<String,JsonNode> properties)
      */
     public JsonNode setAll(ObjectNode other)
     {
-        other._children.putAll(_children);
+        _children.putAll(other._children);
         return this;
     }
     

File: src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java
Patch:
@@ -46,6 +46,7 @@ public void testBasics()
         n2.put("b", 13);
         assertFalse(n.equals(n2));
         n.setAll(n2);
+        
         assertEquals(2, n.size());
         n.set("null", (JsonNode)null);
         assertEquals(3, n.size());

File: src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java
Patch:
@@ -27,9 +27,6 @@ protected ContainerNode(JsonNodeFactory nc)
 
     // all containers are mutable: can't define:
 //    @Override public abstract <T extends JsonNode> T deepCopy();
-    
-    @Override
-    public boolean isContainerNode() { return true; }
 
     @Override
     public abstract JsonToken asToken();

File: src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java
Patch:
@@ -27,8 +27,6 @@ protected ValueNode() { }
     @Override
     public <T extends JsonNode> T deepCopy() { return (T) this; }
     
-    @Override public boolean isValueNode() { return true; }
-
     @Override public abstract JsonToken asToken();
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -927,7 +927,7 @@ public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,
                 if (kt == null || !kt.isEnum()) {
                     throw new IllegalArgumentException("Can not construct EnumMap; generic (key) type not available");
                 }
-                deser = new EnumMapDeserializer(type, null, contentDeser);
+                deser = new EnumMapDeserializer(type, null, contentDeser, contentTypeDeser);
             }
 
             // Otherwise, generic handler works ok.

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -369,7 +369,6 @@ protected final void _readAndBind(JsonParser jp, DeserializationContext ctxt,
             t = jp.nextToken();
         }
         final KeyDeserializer keyDes = _keyDeserializer;
-        
         final JsonDeserializer<Object> valueDes = _valueDeserializer;
         final TypeDeserializer typeDeser = _valueTypeDeserializer;
         for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) {

File: src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java
Patch:
@@ -30,7 +30,7 @@ public enum SerializationFeature implements ConfigFeature
      * class name).
      * Feature is mostly intended for JAXB compatibility.
      *<p>
-     * Feature is enabled by default.
+     * Feature is disabled by default.
      */
     WRAP_ROOT_VALUE(false),
 
@@ -300,4 +300,4 @@ private SerializationFeature(boolean defaultState) {
 
 //    @Override
     public int getMask() { return (1 << ordinal()); }
-}
\ No newline at end of file
+}

File: src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java
Patch:
@@ -30,7 +30,7 @@ public enum SerializationFeature implements ConfigFeature
      * class name).
      * Feature is mostly intended for JAXB compatibility.
      *<p>
-     * Feature is enabled by default.
+     * Feature is disabled by default.
      */
     WRAP_ROOT_VALUE(false),
 
@@ -300,4 +300,4 @@ private SerializationFeature(boolean defaultState) {
 
 //    @Override
     public int getMask() { return (1 << ordinal()); }
-}
\ No newline at end of file
+}

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -242,7 +242,6 @@ public final JsonSerializer<Object> findBeanSerializer(SerializerProvider prov,
      * Method that will try to construct a {@link BeanSerializer} for
      * given class. Returns null if no properties are found.
      */
-    @SuppressWarnings("unchecked")
     public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov,
             JavaType type, BeanDescription beanDesc)
         throws JsonMappingException

File: src/test/java/com/fasterxml/jackson/databind/ser/TestSerializerProvider.java
Patch:
@@ -18,7 +18,7 @@ public void testFindExplicit() throws JsonMappingException
         DefaultSerializerProvider prov = new DefaultSerializerProvider.Impl().createInstance(config, f);
 
         // Should have working default key and null key serializers
-        assertNotNull(prov.findKeySerializer(null, null));
+        assertNotNull(prov.findKeySerializer(mapper.constructType(String.class), null));
         assertNotNull(prov.getDefaultNullKeySerializer());
         assertNotNull(prov.getDefaultNullValueSerializer());
         // as well as 'unknown type' one (throws exception)

File: src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java
Patch:
@@ -151,7 +151,7 @@ static class EmptyBean {
         @JsonIgnore
         public String name = "foo";
     }
-    
+
     static class EmptyBeanModifier extends BeanSerializerModifier
     {
         @Override

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -389,8 +389,9 @@ protected ObjectMapper(ObjectMapper src)
         _rootNames = new RootNameLookup();
         _typeFactory = src._typeFactory;
         _serializationConfig = src._serializationConfig;
-        _serializationConfig = new SerializationConfig(src._serializationConfig, _mixInAnnotations);
-        _deserializationConfig = new DeserializationConfig(src._deserializationConfig, _mixInAnnotations);
+        HashMap<ClassKey,Class<?>> mixins = new HashMap<ClassKey,Class<?>>(src._mixInAnnotations);
+        _serializationConfig = new SerializationConfig(src._serializationConfig, mixins);
+        _deserializationConfig = new DeserializationConfig(src._deserializationConfig, mixins);
         _serializerProvider = src._serializerProvider;
         _deserializationContext = src._deserializationContext;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java
Patch:
@@ -89,9 +89,6 @@ public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,
         throws IOException, JsonProcessingException
     {
         // Hmmh. One tricky question; for scalar, is it an Object Id, or "Natural" type?
-
-System.err.println("Abstract, objR = "+_objectIdReader);
-
         // for now, prefer Object Id:
         if (_objectIdReader != null) {
             JsonToken t = jp.getCurrentToken();

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -243,6 +243,7 @@ public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType,
      *
      * @param type The type for which to generate schema
      */
+    @SuppressWarnings("deprecation")
     public JsonSchema generateJsonSchema(Class<?> type)
         throws JsonMappingException
     {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -9,8 +9,6 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
@@ -504,7 +502,7 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
         throws JsonMappingException
     {
-        JsonMapFormatVisitor v2 = (visitor == null) ? null : visitor.expectMapFormat(typeHint);
+        JsonMapFormatVisitor v2 = (visitor == null) ? null : visitor.expectMapFormat(typeHint);        
         if (v2 != null) {
             v2.keyFormat(_keySerializer, _keyType);
             JsonSerializer<?> valueSer = _valueSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java
Patch:
@@ -49,6 +49,6 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
             throws JsonMappingException
     {
-        visitor.expectStringFormat(typeHint);
+        if (visitor != null) visitor.expectStringFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java
Patch:
@@ -90,6 +90,8 @@ public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,
     {
         // Hmmh. One tricky question; for scalar, is it an Object Id, or "Natural" type?
 
+System.err.println("Abstract, objR = "+_objectIdReader);
+
         // for now, prefer Object Id:
         if (_objectIdReader != null) {
             JsonToken t = jp.getCurrentToken();

File: src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java
Patch:
@@ -22,6 +22,8 @@ public abstract class DelegatingDeserializer
     extends StdDeserializer<Object>
     implements ContextualDeserializer, ResolvableDeserializer
 {
+    private static final long serialVersionUID = 1L;
+
     protected final JsonDeserializer<?> _delegatee;
     
     /*

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
Patch:
@@ -13,6 +13,8 @@
 public abstract class FromStringDeserializer<T>
     extends StdScalarDeserializer<T>
 {
+    private static final long serialVersionUID = 1L;
+
     protected FromStringDeserializer(Class<?> vc) {
         super(vc);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -28,6 +28,8 @@ public class MapDeserializer
     extends ContainerDeserializerBase<Map<Object,Object>>
     implements ContextualDeserializer, ResolvableDeserializer
 {
+    private static final long serialVersionUID = -3378654289961736240L;
+
     // // Configuration: typing, deserializers
 
     protected final JavaType _mapType;

File: src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java
Patch:
@@ -68,6 +68,7 @@ public Collection<StdDeserializer<?>> provide()
     public static class DurationDeserializer
         extends FromStringDeserializer<Duration>
     {
+        private static final long serialVersionUID = 1L;
         public DurationDeserializer() { super(Duration.class); }
     
         @Override
@@ -81,6 +82,7 @@ protected Duration _deserialize(String value, DeserializationContext ctxt)
     public static class GregorianCalendarDeserializer
         extends StdScalarDeserializer<XMLGregorianCalendar>
     {
+        private static final long serialVersionUID = 1L;
         public GregorianCalendarDeserializer() { super(XMLGregorianCalendar.class); }
         
         @Override
@@ -100,6 +102,7 @@ public XMLGregorianCalendar deserialize(JsonParser jp, DeserializationContext ct
     public static class QNameDeserializer
         extends FromStringDeserializer<QName>
     {
+        private static final long serialVersionUID = 1L;
         public QNameDeserializer() { super(QName.class); }
         
         @Override

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java
Patch:
@@ -216,7 +216,7 @@ public JsonSerializer<?> getDelegatee() {
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType type)
         throws JsonMappingException
     {
-        visitor.expectAnyFormat(type);
+        if (visitor != null) visitor.expectAnyFormat(type);
     }
     
     /*

File: src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java
Patch:
@@ -52,6 +52,6 @@ public JsonNode getSchema(SerializerProvider provider, java.lang.reflect.Type ty
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
             throws JsonMappingException
     {
-        visitor.expectAnyFormat(typeHint);
+        if (visitor != null) visitor.expectAnyFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java
Patch:
@@ -52,6 +52,8 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
         throws JsonMappingException
     {
-        visitor.expectBooleanFormat(typeHint);
+        if (visitor != null) {
+            visitor.expectBooleanFormat(typeHint);
+        }
     }
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java
Patch:
@@ -86,7 +86,8 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
             throws JsonMappingException
     {
-        visitor.expectStringFormat(typeHint);
+        if (visitor != null) {
+            visitor.expectStringFormat(typeHint);
+        }
     }
-    
 }

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -370,6 +370,9 @@ public JavaType _constructType(Type type, TypeBindings context)
         else if (type instanceof ParameterizedType) {
             resultType = _fromParamType((ParameterizedType) type, context);
         }
+        else if (type instanceof JavaType) { // [Issue#116]
+            return (JavaType) type;
+        }
         else if (type instanceof GenericArrayType) {
             resultType = _fromArrayType((GenericArrayType) type, context);
         }

File: src/test/java/com/fasterxml/jackson/databind/type/TestAnnotatedClass.java
Patch:
@@ -52,16 +52,15 @@ public void setX(Integer value) { }
      * Test class for checking that field introspection
      * works as expected
      */
+    @SuppressWarnings("unused")
     static class FieldBean
     {
         // static, not to be included:
         public static boolean DUMMY;
 
         // not public, no annotations, shouldn't be included
-        @SuppressWarnings("unused")
         private long bar;
 
-        @SuppressWarnings("unused")
         @JsonProperty
         private String props;
     }

File: src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java
Patch:
@@ -810,7 +810,7 @@ public final boolean equals(Object o)
     {
         if (o == this) return true;
         if (o == null) return false;
-        if (o.getClass() != getClass()) { // final class, can do this
+        if (o.getClass() != getClass() && !(o instanceof ArrayNode)) {
             return false;
         }
         /* This is bit convoluted, but the goal is to make it possible to

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2558,6 +2558,7 @@ public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitorWrapper visi
     
     /**
      * Method for visiting type hierarchy for given type, using specified visitor.
+     * Visitation uses <code>Serializer</code> hierarchy and related properties
      *<p>
      * This method can be used for things like
      * generating <a href="http://json-schema.org/">Json Schema</a>
@@ -2579,7 +2580,7 @@ public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitorWrapper visi
             provider.acceptJsonFormatVisitor(type, visitor);
         }
     }
-
+    
     /*
     /**********************************************************
     /* Internal methods for serialization, overridable

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -122,7 +122,7 @@ public final Object deserialize(JsonParser jp, DeserializationContext ctxt)
         }
         return _deserializeOther(jp, ctxt, t);
     }
-    
+
     private final Object _deserializeOther(JsonParser jp, DeserializationContext ctxt,
             JsonToken t)
         throws IOException, JsonProcessingException

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java
Patch:
@@ -23,6 +23,8 @@ public class EnumMapDeserializer
     extends StdDeserializer<EnumMap<?,?>>
     implements ContextualDeserializer
 {
+    private static final long serialVersionUID = 1916979386940205321L;
+
     protected final JavaType _mapType;
     
     protected final Class<?> _enumClass;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java
Patch:
@@ -20,6 +20,8 @@ public class EnumSetDeserializer
     extends StdDeserializer<EnumSet<?>>
     implements ContextualDeserializer
 {
+    private static final long serialVersionUID = 3479455075597887177L;
+
     protected final JavaType _enumType;
 
     protected final Class<Enum> _enumClass;

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind.jsonFormatVisitors;
 
-
 public interface JsonNumberFormatVisitor extends JsonValueFormatVisitor{
 
 }

File: src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java
Patch:
@@ -55,7 +55,7 @@ public class JsonNodeFactory
      *
      * @see BigDecimal
      */
-    protected JsonNodeFactory(boolean bigDecimalExact)
+    public JsonNodeFactory(boolean bigDecimalExact)
     {
         _cfgBigDecimalExact = bigDecimalExact;
     }
@@ -73,7 +73,6 @@ protected JsonNodeFactory()
 
     /**
      * Return a factory instance with the desired behavior for BigDecimals
-     *
      * <p>See {@link #JsonNodeFactory(boolean)} for a full description.</p>
      *
      * @param bigDecimalExact see description

File: src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java
Patch:
@@ -110,7 +110,7 @@ public String getValueTypeDesc() {
         public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {
             return  new CreatorProperty[] {
                     new CreatorProperty("type", config.constructType(Class.class),
-                            null, null, null, 0, null)
+                            null, null, null, 0, null, true)
             };
         }
 
@@ -139,7 +139,7 @@ public String getValueTypeDesc() {
         public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {
             return  new CreatorProperty[] {
                     new CreatorProperty("name", config.constructType(String.class),
-                            null, null, null, 0, null)
+                            null, null, null, 0, null, true)
             };
         }
 
@@ -367,7 +367,7 @@ public void testPropertyBasedBeanInstantiator() throws Exception
                     public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {
                         return  new CreatorProperty[] {
                                 new CreatorProperty("secret", config.constructType(String.class),
-                                        null, null, null, 0, null)
+                                        null, null, null, 0, null, true)
                         };
                     }
         

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -149,7 +149,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                 }
             }
         } else if (ser instanceof ContextualSerializer) {
-            ser = ((ContextualSerializer) _elementSerializer).createContextual(provider, property);
+            ser = ((ContextualSerializer) ser).createContextual(provider, property);
         }
         return withResolved(property, vts, ser);
     }

File: src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java
Patch:
@@ -32,14 +32,14 @@ static class FactoryWithSchema extends JsonFactory
     {
         private static final long serialVersionUID = 1L;
         @Override
-        protected JsonParser _createJsonParser(Reader r, IOContext ctxt)
+        protected JsonParser _createParser(Reader r, IOContext ctxt)
             throws IOException, JsonParseException
         {
             return new ParserWithSchema(ctxt, _parserFeatures);
         }
 
         @Override
-        protected JsonGenerator _createJsonGenerator(Writer out, IOContext ctxt) throws IOException
+        protected JsonGenerator _createGenerator(Writer out, IOContext ctxt) throws IOException
         {
             return new GeneratorWithSchema(_generatorFeatures, _objectCodec);
         }

File: src/main/java/com/fasterxml/jackson/databind/PropertyName.java
Patch:
@@ -122,7 +122,7 @@ public boolean equals(Object o)
         if (USE_DEFAULT == o) {
             return this == USE_DEFAULT;
         }
-        PropertyName other = (PropertyName) this;
+        PropertyName other = (PropertyName) o;
         if (_simpleName == null) {
             if (other._simpleName != null) return false;
         } else if (!_simpleName.equals(other._simpleName)) {

File: src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java
Patch:
@@ -276,8 +276,9 @@ public void resetUntyped(JavaType type) {
         {
             if (o == null) return false;
             if (o == this) return true;
-            if (!(o instanceof TypeKey))
+            if (o.getClass() != getClass()) {
                 return false;
+            }
             TypeKey other = (TypeKey) o;
             if (other._isTyped == _isTyped) {
                 if (_class != null) {

File: src/test/java/com/fasterxml/jackson/databind/TestNamingStrategy.java
Patch:
@@ -16,6 +16,7 @@
  * Unit tests to verify functioning of {@link PropertyNamingStrategy} which
  * was added in Jackson 1.8, as per [JACKSON-178].
  */
+@SuppressWarnings("serial")
 public class TestNamingStrategy extends BaseMapTest
 {
     /*
@@ -24,7 +25,7 @@ public class TestNamingStrategy extends BaseMapTest
     /**********************************************************************
      */
 
-    static class PrefixStrategy extends PropertyNamingStrategy
+	static class PrefixStrategy extends PropertyNamingStrategy
     {
         @Override
         public String nameForField(MapperConfig<?> config,

File: src/test/java/com/fasterxml/jackson/databind/node/TestArrayNode.java
Patch:
@@ -162,5 +162,6 @@ public void testParser() throws Exception
         p.nextToken();
         assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
         assertEquals(JsonParser.NumberType.INT, p.getNumberType());
+        p.close();
     }
 }

File: src/test/java/perf/ManualObjectWriterPerf.java
Patch:
@@ -57,6 +57,7 @@ private <T1, T2> void test(ObjectMapper mapper,
                 value = inputValue2;
                 break;
             default:
+            	out.close(); // silly eclipse juno
                 throw new Error();
             }
             msecs = testSer(REPS, value, writer, out);

File: src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java
Patch:
@@ -274,7 +274,10 @@ public void resetUntyped(JavaType type) {
         // note: we assume key is never used for anything other than as map key, so:
         @Override public final boolean equals(Object o)
         {
+            if (o == null) return false;
             if (o == this) return true;
+            if (!(o instanceof TypeKey))
+                return false;
             TypeKey other = (TypeKey) o;
             if (other._isTyped == _isTyped) {
                 if (_class != null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java
Patch:
@@ -18,7 +18,7 @@
 public class CalendarSerializer
     extends DateTimeSerializerBase<Calendar>
 {
-    public static CalendarSerializer instance = new CalendarSerializer();
+    public static final CalendarSerializer instance = new CalendarSerializer();
 
     public CalendarSerializer() { this(false, null); }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/DateSerializer.java
Patch:
@@ -21,7 +21,7 @@ public class DateSerializer
      * Default instance that is used when no contextual configuration
      * is needed.
      */
-    public static DateSerializer instance = new DateSerializer();
+    public static final DateSerializer instance = new DateSerializer();
     
     public DateSerializer() {
         this(false, null);

File: src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java
Patch:
@@ -274,7 +274,10 @@ public void resetUntyped(JavaType type) {
         // note: we assume key is never used for anything other than as map key, so:
         @Override public final boolean equals(Object o)
         {
+            if (o == null) return false;
             if (o == this) return true;
+            if (!(o instanceof TypeKey))
+                return false;
             TypeKey other = (TypeKey) o;
             if (other._isTyped == _isTyped) {
                 if (_class != null) {

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -752,7 +752,8 @@ public boolean hasAsValueAnnotation(AnnotatedMethod am) {
      * @return Serialized enum value.
      */
     public String findEnumValue(Enum<?> value) {
-        return null;
+        // as per [JACKSON-875], should use default here
+        return value.name();
     }
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java
Patch:
@@ -19,7 +19,10 @@
  */
 public class AbstractDeserializer
     extends JsonDeserializer<Object>
+    implements java.io.Serializable
 {
+    private static final long serialVersionUID = -3010349050434697698L;
+
     protected final JavaType _baseType;
 
     protected final ObjectIdReader _objectIdReader;

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java
Patch:
@@ -9,7 +9,10 @@
  * Object that knows how to serialize Object Ids.
  */
 public final class ObjectIdReader
+    implements java.io.Serializable
 {
+    private static final long serialVersionUID = 1L;
+
     public final JavaType idType;
 
     public final String propertyName;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -98,6 +98,8 @@ public ObjectNode deserialize(JsonParser jp, DeserializationContext ctxt)
     final static class ArrayDeserializer
         extends BaseNodeDeserializer<ArrayNode>
     {
+        private static final long serialVersionUID = 1L;
+
         protected final static ArrayDeserializer _instance = new ArrayDeserializer();
 
         protected ArrayDeserializer() {

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java
Patch:
@@ -23,6 +23,8 @@
 public final class AnnotatedParameter
     extends AnnotatedMember
 {
+    private static final long serialVersionUID = 1L;
+
     /**
      * Member (method, constructor) that this parameter belongs to
      */

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java
Patch:
@@ -16,6 +16,8 @@
 public abstract class AnnotatedWithParams
     extends AnnotatedMember
 {
+    private static final long serialVersionUID = 1L;
+
     /**
      * Annotations associated with parameters of the annotated
      * entity (method or constructor parameters)

File: src/main/java/com/fasterxml/jackson/databind/util/EnumResolver.java
Patch:
@@ -10,7 +10,10 @@
  * names or regular String values) into Java Enum instances.
  */
 public class EnumResolver<T extends Enum<T>>
+    implements java.io.Serializable
 {
+    private static final long serialVersionUID = 1L;
+
     protected final Class<T> _enumClass;
 
     protected final T[] _enums;

File: src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java
Patch:
@@ -26,7 +26,9 @@
  * from methods (as well as lower-cases initial sequence of capitalized
  * characters).
  */
+@SuppressWarnings("serial")
 public abstract class PropertyNamingStrategy
+    implements java.io.Serializable
 {
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -970,7 +970,7 @@ protected Object deserializeWithExternalTypeId(JsonParser jp, DeserializationCon
         }
         // and when we get this far, let's try finalizing the deal:
         return ext.complete(jp, ctxt, bean);
-    }        
+    }
 
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser jp, DeserializationContext ctxt)

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -412,7 +412,7 @@ public void resolve(DeserializationContext ctxt)
                         if (extTypes == null) {
                             extTypes = new ExternalTypeHandler.Builder();
                         }
-                        extTypes.addExternal(prop, typeDeser.getPropertyName());
+                        extTypes.addExternal(prop, typeDeser);
                     }
                 }
             }
@@ -461,7 +461,7 @@ public void resolve(DeserializationContext ctxt)
                     if (extTypes == null) {
                         extTypes = new ExternalTypeHandler.Builder();
                     }
-                    extTypes.addExternal(prop, typeDeser.getPropertyName());
+                    extTypes.addExternal(prop, typeDeser);
                     // In fact, remove from list of known properties to simplify later handling
                     _beanProperties.remove(prop);
                     continue;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java
Patch:
@@ -165,7 +165,8 @@ public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,
      * conversion.
      * 
      * @param delegateValue
-     * @return
+     * 
+     * @return Result of conversion
      */
     protected T convertValue(Object delegateValue) {
         return _converter.convert(delegateValue);

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java
Patch:
@@ -73,7 +73,7 @@ public abstract class TypeDeserializer
     public abstract Class<?> getDefaultImpl();
     
     /*
-    /*********************************************************
+    /**********************************************************
     /* Type deserialization methods
     /**********************************************************
      */

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java
Patch:
@@ -219,8 +219,9 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
      * The default implementation uses configured {@link Converter} to do
      * conversion.
      * 
-     * @param delegateValue
-     * @return
+     * @param value Value to convert
+     * 
+     * @return Result of conversion
      */
     protected Object convertValue(Object value) {
         return _converter.convert(value);

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java
Patch:
@@ -109,6 +109,7 @@ public FilterExceptFilter(Set<String> properties) {
             _propertiesToInclude = properties;
         }
 
+        @Override
         protected boolean include(BeanPropertyWriter writer) {
             return _propertiesToInclude.contains(writer.getName());
         }
@@ -130,6 +131,7 @@ public SerializeExceptFilter(Set<String> properties) {
             _propertiesToExclude = properties;
         }
 
+        @Override
         protected boolean include(BeanPropertyWriter writer) {
             return !_propertiesToExclude.contains(writer.getName());
         }

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -506,6 +506,7 @@ public void writeRaw(String text, int offset, int len) throws IOException, JsonG
         _reportUnsupportedOperation();
     }
 
+    @Override
     public void writeRaw(SerializableString text) throws IOException, JsonGenerationException {
         _reportUnsupportedOperation();
     }

File: src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java
Patch:
@@ -93,7 +93,7 @@ public void testDelegating() throws Exception
         SimpleModule module = new SimpleModule("test", Version.unknownVersion());
         module.addSerializer(new StdDelegatingSerializer(Immutable.class,
                 new Converter<Immutable, Map<String,Integer>>() {
-                    @Override
+                    //@Override
                     public Map<String, Integer> convert(Immutable value)
                     {
                         HashMap<String,Integer> map = new LinkedHashMap<String,Integer>();

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -59,7 +59,7 @@ protected StdSerializer(Class<?> t, boolean dummy) {
      */
     
     @Override
-    public final Class<T> handledType() { return _handledType; }
+    public Class<T> handledType() { return _handledType; }
 
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -506,7 +506,6 @@ public void writeRaw(String text, int offset, int len) throws IOException, JsonG
         _reportUnsupportedOperation();
     }
 
-    @Override
     public void writeRaw(SerializableString text) throws IOException, JsonGenerationException {
         _reportUnsupportedOperation();
     }

File: src/test/java/com/fasterxml/jackson/failing/TestKeySerializers.java
Patch:
@@ -30,7 +30,7 @@ public static class KarlBean
         @JsonSerialize(keyUsing = KarlSerializer.class)
         public Map<String,Integer> map = new HashMap<String,Integer>();
         {
-            map.put("Not Karl", 1);
+            map.put("Karl", 1);
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -276,7 +276,7 @@ public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBinding
                 int len = actualTypes.length;
                 for (int i = 0; i < len; ++i) {
                     String name = vars[i].getName();
-                    JavaType type = instance._constructType(actualTypes[i], bindings);
+                    JavaType type = _constructType(actualTypes[i], bindings);
                     newBindings.addBinding(name, type);
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java
Patch:
@@ -432,7 +432,7 @@ public PropertyName findWrapperName(Annotated ann) {
         } else if (name == PropertyName.USE_DEFAULT) {
             // does the other introspector have a better idea?
             PropertyName name2 = _secondary.findWrapperName(ann);
-            if (name2 != name) {
+            if (name2 != null) {
                 name = name2;
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2499,7 +2499,7 @@ public JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException {
      * Generate <a href="http://json-schema.org/">Json-schema</a>
      * instance for specified class.
      *
-     * @param t The class to generate schema for
+     * @param javaType The class to generate schema for
      */
     public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor) throws JsonMappingException {
     	if (javaType == null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -264,7 +264,7 @@ public JsonSchema generateJsonSchema(Class<?> type)
      * The method to be called by {@link ObjectMapper} and {@link ObjectWriter}
      * to to expose the format of the given to to the given visitor
      *
-     * @param type The type for which to generate format
+     * @param javaType The type for which to generate format
      * @param visitor the visitor to accept the format
      */
     public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor)

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java
Patch:
@@ -22,7 +22,7 @@ public final class ObjectIdReader
     public final ObjectIdGenerator<?> generator;
     
     /**
-     * Serializer used for serializing id values.
+     * Deserializer used for deserializing id values.
      */
     public final JsonDeserializer<Object> deserializer;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -439,7 +439,8 @@ public Map<Object,Object> _deserializeUsingCreator(JsonParser jp, Deserializatio
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
-        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt);
+        // null -> no ObjectIdReader for Maps (yet?)
+        PropertyValueBuffer buffer = creator.startBuilding(jp, ctxt, null);
 
         JsonToken t = jp.getCurrentToken();
         if (t == JsonToken.START_OBJECT) {

File: src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java
Patch:
@@ -139,10 +139,13 @@ public static Class<?> getOuterClass(Class<?> type)
      */
     public static boolean isProxyType(Class<?> type)
     {
+        // As per [Issue#57], should NOT disqualify JDK proxy:
+        /*
         // Then: well-known proxy (etc) classes
         if (Proxy.isProxyClass(type)) {
             return true;
         }
+        */
         String name = type.getName();
         // Hibernate uses proxies heavily as well:
         if (name.startsWith("net.sf.cglib.proxy.")

File: src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java
Patch:
@@ -74,7 +74,7 @@ public SerializableString getEscapeSequence(final int ch) {
             }
         };
 
-        mapper.getJsonFactory().setCharacterEscapes(defaultCharacterEscapes);
+        mapper.getFactory().setCharacterEscapes(defaultCharacterEscapes);
         String jacksonJson = mapper.writeValueAsString(sampleText);
         boolean hasLFs = jacksonJson.indexOf('\n') > 0;
         assertFalse("Should NOT contain linefeeds, should have been escaped", hasLFs);

File: src/test/java/com/fasterxml/jackson/databind/TestObjectMapper.java
Patch:
@@ -81,12 +81,12 @@ public void testConfigForPropertySorting() throws Exception
     public void testJsonFactoryLinkage()
     {
         // first, implicit factory, giving implicit linkage
-        assertSame(MAPPER, MAPPER.getJsonFactory().getCodec());
+        assertSame(MAPPER, MAPPER.getFactory().getCodec());
 
         // and then explicit factory, which should also be implicitly linked
         JsonFactory f = new JsonFactory();
         ObjectMapper m = new ObjectMapper(f);
-        assertSame(f, m.getJsonFactory());
+        assertSame(f, m.getFactory());
         assertSame(m, f.getCodec());
     }
     
@@ -132,7 +132,7 @@ public void testCopy() throws Exception
 
         // // Also, underlying JsonFactory instances should be distinct
         
-        assertNotSame(m.getJsonFactory(), m2.getJsonFactory());
+        assertNotSame(m.getFactory(), m2.getFactory());
 
         // ... anything else? (probably should do more tests, add as needed)
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java
Patch:
@@ -109,7 +109,7 @@ public void testSimple() throws Exception
         // First "good" case with Strings
         String JSON = "\"OK\" \"RULES\"  null";
         // multiple main-level mappings, need explicit parser:
-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(JSON);
+        JsonParser jp = MAPPER.getFactory().createJsonParser(JSON);
 
         assertEquals(TestEnum.OK, MAPPER.readValue(jp, TestEnum.class));
         assertEquals(TestEnum.RULES, MAPPER.readValue(jp, TestEnum.class));

File: src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java
Patch:
@@ -429,7 +429,7 @@ public void testSequenceOfInts() throws Exception
             sb.append(" ");
             sb.append(i);
         }
-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(sb.toString());
+        JsonParser jp = MAPPER.getFactory().createJsonParser(sb.toString());
         for (int i = 0; i < NR_OF_INTS; ++i) {
             Integer result = MAPPER.readValue(jp, Integer.class);
             assertEquals(Integer.valueOf(i), result);

File: src/test/java/com/fasterxml/jackson/databind/ser/TestArraySerialization.java
Patch:
@@ -22,7 +22,7 @@ public void testLongStringArray() throws Exception
         }
         String str = sb.toString();
         byte[] data = MAPPER.writeValueAsBytes(new String[] { "abc", str, null, str });
-        JsonParser jp = MAPPER.getJsonFactory().createJsonParser(data);
+        JsonParser jp = MAPPER.getFactory().createJsonParser(data);
         assertToken(JsonToken.START_ARRAY, jp.nextToken());
         assertToken(JsonToken.VALUE_STRING, jp.nextToken());
         assertEquals("abc", jp.getText());
@@ -55,7 +55,7 @@ public void testBigIntArray() throws Exception
         // Let's try couple of times, to ensure that state is handled
         // correctly by ObjectMapper (wrt buffer recycling used
         // with 'writeAsBytes()')
-        JsonFactory f = MAPPER.getJsonFactory();
+        JsonFactory f = MAPPER.getFactory();
         for (int round = 0; round < 3; ++round) {
             byte[] data = MAPPER.writeValueAsBytes(ints);
             JsonParser jp = f.createJsonParser(data);

File: src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java
Patch:
@@ -149,7 +149,7 @@ public void testIndentWithPassedGenerator() throws Exception
 
         // [Issue#12]
         StringWriter sw = new StringWriter();
-        JsonGenerator jgen = MAPPER.getJsonFactory().createGenerator(sw);
+        JsonGenerator jgen = MAPPER.getFactory().createGenerator(sw);
         indentWriter.writeValue(jgen, input);
         jgen.close();
         assertEquals(INDENTED, sw.toString());
@@ -158,7 +158,7 @@ public void testIndentWithPassedGenerator() throws Exception
         sw = new StringWriter();
         ObjectMapper m2 = new ObjectMapper();
         m2.enable(SerializationFeature.INDENT_OUTPUT);
-        jgen = m2.getJsonFactory().createGenerator(sw);
+        jgen = m2.getFactory().createGenerator(sw);
         m2.writeValue(jgen, input);
         jgen.close();
         assertEquals(INDENTED, sw.toString());

File: src/test/java/com/fasterxml/jackson/failing/TestCollectionSerialization.java
Patch:
@@ -5,7 +5,6 @@
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.BaseMapTest;
-import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 public class TestCollectionSerialization extends BaseMapTest

File: src/test/java/com/fasterxml/jackson/databind/interop/TestExternalizable.java
Patch:
@@ -207,6 +207,7 @@ public void testSerializeAsExternalizable() throws Exception
         // then read back!
         ObjectInputStream ins = new ObjectInputStream(new ByteArrayInputStream(ser));
         MyPojo output = (MyPojo) ins.readObject();
+        ins.close();
         assertNotNull(output);
         
         assertEquals(input, output);

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2494,8 +2494,8 @@ public JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException {
      *
      * @param t The class to generate schema for
      */
-    public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitorWrapper visitor) throws JsonMappingException {
-    	if (t == null) {
+    public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor) throws JsonMappingException {
+    	if (javaType == null) {
     		throw new IllegalArgumentException("class must be provided");
     	}
     	
@@ -2504,7 +2504,7 @@ public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitorWrapper visitor
     	}
     	DefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());
         visitor.setProvider(provider);
-    	provider.acceptJsonFormatVisitor(t, visitor);
+    	provider.acceptJsonFormatVisitor(javaType, visitor);
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2495,7 +2495,7 @@ public JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException {
      * @param t The class to generate schema for
      */
     public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor) throws JsonMappingException {
-    	if (t == null) {
+    	if (javaType == null) {
     		throw new IllegalArgumentException("class must be provided");
     	}
     	

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2494,7 +2494,7 @@ public JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException {
      *
      * @param t The class to generate schema for
      */
-    public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitorWrapper visitor) throws JsonMappingException {
+    public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor) throws JsonMappingException {
     	if (t == null) {
     		throw new IllegalArgumentException("class must be provided");
     	}
@@ -2504,7 +2504,7 @@ public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitorWrapper visitor
     	}
     	DefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());
         visitor.setProvider(provider);
-    	provider.acceptJsonFormatVisitor(t, visitor);
+    	provider.acceptJsonFormatVisitor(javaType, visitor);
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -181,6 +181,6 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.expectArrayFormat(null).itemsFormat(JsonFormatTypes.STRING);
+    	visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -478,7 +478,8 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.expectObjectFormat(null);
+    	//jackphel Aug 17 2012 : this can definitely more more exact. 
+    	visitor.expectObjectFormat(typeHint);
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -181,6 +181,6 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.expectArrayFormat(null).itemsFormat(JsonFormatTypes.STRING);
+    	visitor.expectArrayFormat(typeHint).itemsFormat(JsonFormatTypes.STRING);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -478,7 +478,8 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.expectObjectFormat(null);
+    	//jackphel Aug 17 2012 : this can definitely more more exact. 
+    	visitor.expectObjectFormat(typeHint);
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java
Patch:
@@ -12,7 +12,7 @@ public interface JsonFormatVisitable
      * Get the representation of the schema to which this serializer will conform.
      * @param typeHint TODO
      *
-     * @return <a href="http://json-schema.org/">Json-schema</a> for this serializer.
+     * @returns <a href="http://json-schema.org/">Json-schema</a> for this serializer.
      */
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint);
 }

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java
Patch:
@@ -6,6 +6,6 @@ public interface JsonArrayFormatVisitor extends JsonFormatVisitorWithSerializerP
 
 	void itemsFormat(JavaType contentType);
 
-	void itemsFormat(SchemaType format);
+	void itemsFormat(JsonFormatTypes format);
 
 }

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;
 
-public enum SchemaType {
+public enum JsonFormatTypes {
 	
 	STRING,
 	NUMBER,
@@ -21,7 +21,7 @@ public String value() {
 	}
 	
 	@JsonCreator
-	public static SchemaType forValue(String s) {
+	public static JsonFormatTypes forValue(String s) {
 		return valueOf(s.toUpperCase());
 	}
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * Marker interface for schema-aware serializers.
  */
-public interface JsonFormatVisitorAware
+public interface JsonFormatVisitable
 {
     /**
      * Get the representation of the schema to which this serializer will conform.

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java
Patch:
@@ -10,9 +10,9 @@ public interface JsonObjectFormatVisitor extends JsonFormatVisitorWithSerializer
 
 	public void optionalProperty(BeanPropertyWriter writer);
 
-	public void property(String name, JsonFormatVisitorAware handler, JavaType propertyTypeHint);
+	public void property(String name, JsonFormatVisitable handler, JavaType propertyTypeHint);
 
-	public void optionalProperty(String name, JsonFormatVisitorAware handler,
+	public void optionalProperty(String name, JsonFormatVisitable handler,
 			JavaType propertyTypeHint);
 
 	public void property(String name);

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -13,7 +13,7 @@
 import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorAware;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
@@ -277,8 +277,8 @@ public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitorWrapper visi
          * type information it needs is accessible via "untyped" serializer)
          */
         JsonSerializer<Object> ser = findValueSerializer(type, null);
-        if (ser instanceof JsonFormatVisitorAware) {
-        	((JsonFormatVisitorAware) ser).acceptJsonFormatVisitor(visitor, constructType(type));
+        if (ser instanceof JsonFormatVisitable) {
+        	((JsonFormatVisitable) ser).acceptJsonFormatVisitor(visitor, constructType(type));
         } else {
         	visitor.expectAnyFormat(constructType(type));
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.SchemaType;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
 import com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;
@@ -52,7 +52,7 @@ public IndexedStringListSerializer(JsonSerializer<?> ser) {
 
 	@Override
 	protected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {
-		visitor.itemsFormat(SchemaType.STRING);
+		visitor.itemsFormat(JsonFormatTypes.STRING);
 		
 	}
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -9,7 +9,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.SchemaType;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
@@ -181,6 +181,6 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.expectArrayFormat(null).itemsFormat(SchemaType.STRING);
+    	visitor.expectArrayFormat(null).itemsFormat(JsonFormatTypes.STRING);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.SchemaType;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
 import com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;
@@ -52,7 +52,7 @@ protected StringCollectionSerializer(JsonSerializer<?> ser)
     
 	@Override
 	protected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {
-		visitor.itemsFormat(SchemaType.STRING);
+		visitor.itemsFormat(JsonFormatTypes.STRING);
 		
 	}
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -20,7 +20,7 @@
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
 import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorAware;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
 import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
@@ -51,7 +51,7 @@
 public abstract class BeanSerializerBase
     extends StdSerializer<Object>
     implements ContextualSerializer, ResolvableSerializer,
-        JsonFormatVisitorAware, SchemaAware
+        JsonFormatVisitable, SchemaAware
 {
     final protected static BeanPropertyWriter[] NO_PROPS = new BeanPropertyWriter[0];
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java
Patch:
@@ -15,7 +15,7 @@
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorAware;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
 import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
@@ -299,8 +299,8 @@ public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType t
                 	String name = visitor.getProvider().getConfig().getAnnotationIntrospector().findEnumValue((Enum<?>)enumValue);
                 	try {
                 		ser = visitor.getProvider().findValueSerializer(valueType.getRawClass(), _property);
-                		if (ser instanceof JsonFormatVisitorAware)  {
-                			objectVisitor.property(name, (JsonFormatVisitorAware) ser, valueType);
+                		if (ser instanceof JsonFormatVisitable)  {
+                			objectVisitor.property(name, (JsonFormatVisitable) ser, valueType);
                 		} 
                 		continue;
                 	} catch (JsonMappingException e) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -13,7 +13,7 @@
 import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorAware;
+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;
 import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
@@ -23,11 +23,11 @@
  * Base class used by all standard serializers, and can also
  * be used for custom serializers (in fact, this is the recommended
  * base class to use).
- * Provides convenience methods for implementing {@link JsonFormatVisitorAware}
+ * Provides convenience methods for implementing {@link JsonFormatVisitable}
  */
 public abstract class StdSerializer<T>
     extends JsonSerializer<T>
-    implements JsonFormatVisitorAware, SchemaAware
+    implements JsonFormatVisitable, SchemaAware
 {
     /**
      * Nominal type supported, usually declared type of

File: src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java
Patch:
@@ -649,8 +649,7 @@ private final void _writeCloseable(JsonGenerator jgen, Object value, Serializati
     }
     
     /**
-     * Helper method used when value to serialize is {@link java.util.Closeable}
-     * and its <code>close()</code>
+     * Helper method used when value to serialize is {@link Closeable} and its <code>close()</code>
      * method is to be called right after serialization has been called
      */
     private final void _writeCloseableValue(JsonGenerator jgen, Object value, SerializationConfig cfg)

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
Patch:
@@ -205,7 +205,7 @@ protected final ObjectNode deserializeObject(JsonParser jp, DeserializationConte
             default:
                 value = deserializeAny(jp, ctxt, nodeFactory);
             }
-            JsonNode old = node.put(fieldName, value);
+            JsonNode old = node.replace(fieldName, value);
             if (old != null) {
                 _handleDuplicateField(fieldName, node, old, value);
             }

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -117,8 +117,8 @@ public Object findNamingStrategy(AnnotatedClass ac)
     {
         JsonNaming ann = ac.getAnnotation(JsonNaming.class);
         return (ann == null) ? null : ann.value();
-    }
-    
+    } 
+
     /*
     /**********************************************************
     /* Property auto-detection

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -230,7 +230,6 @@ public POJOPropertiesCollector collect()
 
         // Rename remaining properties
         _renameProperties();
-
         // And use custom naming strategy, if applicable...
         PropertyNamingStrategy naming = _findNamingStrategy();
         if (naming != null) {

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.jsonFormatVisitors;
 
 import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;
 
 public interface JsonArrayFormatVisitor extends JsonFormatVisitorWithSerializerProvider {
 

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormat.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.jsonschema.types;
+package com.fasterxml.jackson.databind.jsonFormatVisitors;
 
 /**
  * This enum represents the encoded format for a jsonSchema value type

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormatVisitor.java
Patch:
@@ -2,8 +2,6 @@
 
 import java.util.Set;
 
-import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;
-
 public interface JsonValueFormatVisitor {
 
 	void format(JsonValueFormat format);

File: src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/SchemaType.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.jsonschema.types;
+package com.fasterxml.jackson.databind.jsonFormatVisitors;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;

File: src/main/java/com/fasterxml/jackson/databind/node/BinaryNode.java
Patch:
@@ -88,7 +88,8 @@ public String asText() {
     public final void serialize(JsonGenerator jg, SerializerProvider provider)
         throws IOException, JsonProcessingException
     {
-        jg.writeBinary(_data);
+        jg.writeBinary(provider.getConfig().getBase64Variant(),
+                _data, 0, _data.length);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java
Patch:
@@ -4,8 +4,8 @@
 import java.text.DateFormat;
 import java.util.Calendar;
 
-import com.fasterxml.jackson.core.JsonGenerationException;
-import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.*;
+
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java
Patch:
@@ -4,8 +4,7 @@
 import java.util.Collection;
 import java.util.Iterator;
 
-import com.fasterxml.jackson.core.JsonGenerationException;
-import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java
Patch:
@@ -3,8 +3,8 @@
 import java.io.IOException;
 import java.net.InetAddress;
 
-import com.fasterxml.jackson.core.JsonGenerationException;
-import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.*;
+
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java
Patch:
@@ -3,8 +3,8 @@
 import java.io.IOException;
 import java.util.Iterator;
 
-import com.fasterxml.jackson.core.JsonGenerationException;
-import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.*;
+
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.io.IOException;
 
-import com.fasterxml.jackson.core.JsonGenerationException;
-import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.*;
+
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java
Patch:
@@ -1,12 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
-import com.fasterxml.jackson.databind.BeanProperty;
-import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer;
 import com.fasterxml.jackson.databind.ser.impl.IteratorSerializer;
+import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;
 
 /**
  * Dummy container class to group standard container serializers: serializers

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java
Patch:
@@ -4,8 +4,8 @@
 import java.util.Calendar;
 import java.util.Date;
 
-import com.fasterxml.jackson.core.JsonGenerationException;
-import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.*;
+
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java
Patch:
@@ -3,8 +3,8 @@
 import java.io.IOException;
 import java.util.TimeZone;
 
-import com.fasterxml.jackson.core.JsonGenerationException;
-import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.*;
+
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -42,8 +42,8 @@ public class TokenBuffer
 
     /**
      * Object codec to use for stream-based object
-     *   conversion through parser/generator interfaces. If null,
-     *   such methods can not be used.
+     * conversion through parser/generator interfaces. If null,
+     * such methods can not be used.
      */
     protected ObjectCodec _objectCodec;
 

File: src/test/java/com/fasterxml/jackson/databind/TestNamingStrategy.java
Patch:
@@ -13,7 +13,8 @@
 import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
 
 /**
- * Unit tests to verify functioning of {@link PropertyNamingStrategy}.
+ * Unit tests to verify functioning of {@link PropertyNamingStrategy} which
+ * was added in Jackson 1.8, as per [JACKSON-178].
  */
 public class TestNamingStrategy extends BaseMapTest
 {

File: src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java
Patch:
@@ -65,12 +65,12 @@ public void testObjectNodeEquality()
         assertTrue(n1.equals(n2));
         assertTrue(n2.equals(n1));
 
-        n1.put("x", TextNode.valueOf("Test"));
+        n1.set("x", TextNode.valueOf("Test"));
 
         assertFalse(n1.equals(n2));
         assertFalse(n2.equals(n1));
 
-        n2.put("x", TextNode.valueOf("Test"));
+        n2.set("x", TextNode.valueOf("Test"));
 
         assertTrue(n1.equals(n2));
         assertTrue(n2.equals(n1));

File: src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java
Patch:
@@ -58,7 +58,7 @@ public void testPOJOString()
         ObjectMapper mapper = new ObjectMapper();
         // also need tree mapper to construct tree to serialize
         ObjectNode n = mapper.getNodeFactory().objectNode();
-        n.put("pojo", mapper.getNodeFactory().POJONode("abc"));
+        n.set("pojo", mapper.getNodeFactory().POJONode("abc"));
         StringWriter sw = new StringWriter();
         JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);
         mapper.writeTree(jg, n);
@@ -73,7 +73,7 @@ public void testPOJOIntArray()
     {
         ObjectMapper mapper = new ObjectMapper();
         ObjectNode n = mapper.getNodeFactory().objectNode();
-        n.put("pojo", mapper.getNodeFactory().POJONode(new int[] { 1, 2, 3 }));
+        n.set("pojo", mapper.getNodeFactory().POJONode(new int[] { 1, 2, 3 }));
         StringWriter sw = new StringWriter();
         JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);
         mapper.writeTree(jg, n);
@@ -96,7 +96,7 @@ public void testPOJOBean()
         ObjectMapper mapper = new ObjectMapper();
         // also need tree mapper to construct tree to serialize
         ObjectNode n = mapper.getNodeFactory().objectNode();
-        n.put("pojo", mapper.getNodeFactory().POJONode(new Bean()));
+        n.set("pojo", mapper.getNodeFactory().POJONode(new Bean()));
         StringWriter sw = new StringWriter();
         JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);
         mapper.writeTree(jg, n);

File: src/main/java/com/fasterxml/jackson/databind/node/BinaryNode.java
Patch:
@@ -88,7 +88,8 @@ public String asText() {
     public final void serialize(JsonGenerator jg, SerializerProvider provider)
         throws IOException, JsonProcessingException
     {
-        jg.writeBinary(_data);
+        jg.writeBinary(provider.getConfig().getBase64Variant(),
+                _data, 0, _data.length);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -42,8 +42,8 @@ public class TokenBuffer
 
     /**
      * Object codec to use for stream-based object
-     *   conversion through parser/generator interfaces. If null,
-     *   such methods can not be used.
+     * conversion through parser/generator interfaces. If null,
+     * such methods can not be used.
      */
     protected ObjectCodec _objectCodec;
 

File: src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java
Patch:
@@ -649,7 +649,8 @@ private final void _writeCloseable(JsonGenerator jgen, Object value, Serializati
     }
     
     /**
-     * Helper method used when value to serialize is {@link Closeable} and its <code>close()</code>
+     * Helper method used when value to serialize is {@link java.util.Closeable}
+     * and its <code>close()</code>
      * method is to be called right after serialization has been called
      */
     private final void _writeCloseableValue(JsonGenerator jgen, Object value, SerializationConfig cfg)

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -98,6 +98,7 @@ public ValueInstantiator constructValueInstantiator(DeserializationConfig config
     /**
      * @deprecated since 2.1, use {@link #setDefaultCreator} instead.
      */
+    @Deprecated
     public void setDefaultConstructor(AnnotatedConstructor ctor) {
         _defaultConstructor = _fixAccess(ctor);
     }

File: src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java
Patch:
@@ -42,7 +42,7 @@ public synchronized SerializedString findRootName(Class<?> rootType, MapperConfi
         AnnotatedClass ac = beanDesc.getClassInfo();
         String nameStr = intr.findRootName(ac);
         // No answer so far? Let's just default to using simple class name
-        if (nameStr == null) {
+        if (nameStr == null || nameStr.length() == 0) {
             // Should we strip out enclosing class tho? For now, nope:
             nameStr = rootType.getSimpleName();
         }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -26,7 +26,7 @@
 import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
 import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
 import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.*;
 import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
 import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
@@ -2396,7 +2396,7 @@ protected Object _convert(Object fromValue, JavaType toValueType)
      *
      * @param t The class to generate schema for
      */
-    public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitor visitor) throws JsonMappingException {
+    public void acceptJsonFormatVisitor(Class<?> t, JsonFormatVisitorWrapper visitor) throws JsonMappingException {
     	if (t == null) {
     		throw new IllegalArgumentException("class must be provided");
     	}

File: src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java
Patch:
@@ -16,7 +16,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
@@ -63,7 +63,7 @@ public void serialize(XMLGregorianCalendar value, JsonGenerator jgen, Serializer
             CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider);
         }
 
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) {
             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 
 public class DOMSerializer
@@ -41,8 +41,8 @@ public void serialize(Node value, JsonGenerator jgen, SerializerProvider provide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-        visitor.anyFormat(typeHint);
+        visitor.expectAnyFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonFormatVisitorAware.java
Patch:
@@ -2,7 +2,7 @@
 
 
 import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 
 /**
  * Marker interface for schema-aware serializers.
@@ -15,5 +15,5 @@ public interface JsonFormatVisitorAware
      *
      * @return <a href="http://json-schema.org/">Json-schema</a> for this serializer.
      */
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint);
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint);
 }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonArrayFormatVisitor.java
Patch:
@@ -4,7 +4,7 @@
 import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;
 import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;
 
-public interface JsonArrayFormatVisitor {
+public interface JsonArrayFormatVisitor extends JsonFormatVisitorWithSerializerProvider {
 
 	void itemsFormat(JavaType contentType);
 

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonObjectFormatVisitor.java
Patch:
@@ -5,7 +5,7 @@
 import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
 
-public interface JsonObjectFormatVisitor extends JsonFormatVisitor {
+public interface JsonObjectFormatVisitor extends JsonFormatVisitorWithSerializerProvider {
 
 	public void property(BeanPropertyWriter writer);
 

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -14,7 +14,7 @@
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
 import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
 import com.fasterxml.jackson.databind.util.ClassUtil;
 
@@ -236,7 +236,7 @@ public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType,
      *
      * @param type The type for which to generate schema
      */
-    public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitor visitor)
+    public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitorWrapper visitor)
         throws JsonMappingException
     {
         if (type == null) {
@@ -249,7 +249,7 @@ public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitor visitor)
         if (ser instanceof JsonFormatVisitorAware) {
         	((JsonFormatVisitorAware) ser).acceptJsonFormatVisitor(visitor, constructType(type));
         } else {
-        	visitor.anyFormat(constructType(type));
+        	visitor.expectAnyFormat(constructType(type));
         }
     }
     /**

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 
 /**
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
         ;
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
@@ -170,8 +170,8 @@ private void serializeContentsSlow(String[] value, JsonGenerator jgen, Serialize
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.arrayFormat(null).itemsFormat(SchemaType.STRING);
+    	visitor.expectArrayFormat(null).itemsFormat(SchemaType.STRING);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java
Patch:
@@ -5,7 +5,7 @@
 import com.fasterxml.jackson.core.*;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 
@@ -42,8 +42,8 @@ public final void serializeWithType(Object value, JsonGenerator jgen, Serializer
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { 
-    	visitor.anyFormat(typeHint);
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) { 
+    	visitor.expectAnyFormat(typeHint);
     }
 
     protected void failForEmpty(Object value) throws JsonMappingException

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -14,7 +14,7 @@
 import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonArrayFormatVisitor;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
@@ -171,7 +171,7 @@ protected abstract void serializeContents(T value, JsonGenerator jgen, Serialize
         throws IOException, JsonGenerationException;
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
         /* 15-Jan-2010, tatu: This should probably be rewritten, given that
          *    more information about content type is actually being explicitly
@@ -180,7 +180,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint
          */
         //ObjectNode o = createSchemaNode("array", true);
         JsonArrayFormatVisitor arrayVisitor = 
-        		visitor.arrayFormat(typeHint);
+        		visitor.expectArrayFormat(typeHint);
         JavaType contentType = null;
         if (typeHint != null) {
             contentType = typeHint.getContentType();

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 
 /**
  * Serializer used for primitive boolean, as well as java.util.Boolean
@@ -40,8 +40,8 @@ public void serialize(Boolean value, JsonGenerator jgen, SerializerProvider prov
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-        visitor.booleanFormat(typeHint);
+        visitor.expectBooleanFormat(typeHint);
     }
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java
Patch:
@@ -15,7 +15,7 @@
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonObjectFormatVisitor;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
@@ -255,9 +255,9 @@ protected void serializeContentsUsing(EnumMap<? extends Enum<?>,?> value, JsonGe
     
     @SuppressWarnings("unchecked")
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	JsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);
+    	JsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);
         if (typeHint instanceof ParameterizedType) {
             Type[] typeArgs = ((ParameterizedType) typeHint).getActualTypeArguments();
             if (typeArgs.length == 2) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
Patch:
@@ -16,7 +16,7 @@
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.BeanSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
@@ -235,12 +235,12 @@ public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvide
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
     	if (_valueSerializer instanceof JsonFormatVisitorAware) {
     		((JsonFormatVisitorAware) _valueSerializer).acceptJsonFormatVisitor(visitor, null); 
     	} else {
-    		visitor.anyFormat(typeHint);
+    		visitor.expectAnyFormat(typeHint);
     	}
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -16,7 +16,7 @@
 import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
@@ -473,9 +473,9 @@ protected void serializeTypedFields(Map<?,?> value, JsonGenerator jgen, Serializ
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.objectFormat(null);
+    	visitor.expectObjectFormat(null);
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 
 /**
  * This is a simple dummy serializer that will just output literal
@@ -32,8 +32,8 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.nullFormat(typeHint);
+    	visitor.expectNullFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -11,7 +11,7 @@
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
@@ -295,9 +295,9 @@ public void serializeTypedContents(Object[] value, JsonGenerator jgen, Serialize
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.arrayFormat(typeHint).itemsFormat(_elementType);
+    	visitor.expectArrayFormat(typeHint).itemsFormat(_elementType);
     }
 
     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,

File: src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 
 /**
@@ -46,8 +46,8 @@ public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider pr
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-        visitor.stringFormat(typeHint);
+        visitor.expectStringFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java
Patch:
@@ -10,7 +10,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 
 /**
@@ -46,8 +46,8 @@ public final void serializeWithType(JsonSerializable value, JsonGenerator jgen,
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.anyFormat(typeHint);
+    	visitor.expectAnyFormat(typeHint);
     }
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 
 /**
  * Compared to regular {@link java.util.Date} serialization, we do use String
@@ -29,8 +29,8 @@ public void serialize(java.sql.Date value, JsonGenerator jgen, SerializerProvide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.stringFormat(typeHint).format(JsonValueFormat.DATE_TIME);
+    	visitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);
     }
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 
 @JacksonStdImpl
 public class SqlTimeSerializer
@@ -24,8 +24,8 @@ public void serialize(java.sql.Time value, JsonGenerator jgen, SerializerProvide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.stringFormat(typeHint).format(JsonValueFormat.DATE_TIME);
+    	visitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);
     }
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonArrayFormatVisitor;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 
 /**
  * Intermediate base class for Lists, Collections and Arrays
@@ -23,9 +23,9 @@ public boolean isEmpty(T value) {
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	acceptContentVisitor(visitor.arrayFormat(typeHint));
+    	acceptContentVisitor(visitor.expectArrayFormat(typeHint));
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 
 /**
  * Specialized serializer that can be used as the generic key
@@ -33,8 +33,8 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.stringFormat(typeHint);
+    	visitor.expectStringFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java
Patch:
@@ -6,7 +6,7 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 
 public abstract class StdScalarSerializer<T>
@@ -43,8 +43,8 @@ public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider pr
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-        visitor.anyFormat(typeHint);
+        visitor.expectAnyFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -12,7 +12,7 @@
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 
 /**
  * Base class used by all standard serializers, and can also
@@ -83,8 +83,8 @@ public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider p
      * overriden by custom serializers.
      */
 //  @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { 
-    	visitor.anyFormat(typeHint);
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) { 
+    	visitor.expectAnyFormat(typeHint);
     }
             
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 
 /**
  * This is the special serializer for regular {@link java.lang.String}s.
@@ -37,8 +37,8 @@ public void serialize(String value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.stringFormat(typeHint);
+    	visitor.expectStringFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 
 /**
@@ -73,9 +73,9 @@ public void serializeWithType(Object value, JsonGenerator jgen, SerializerProvid
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
-    	visitor.stringFormat(typeHint);
+    	visitor.expectStringFormat(typeHint);
     }
     
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
-import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
+import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitorWrapper;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.util.TokenBuffer;
 
@@ -53,12 +53,12 @@ public final void serializeWithType(TokenBuffer value, JsonGenerator jgen, Seria
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
     {
         /* 01-Jan-2010, tatu: Not 100% sure what we should say here:
          *   type is basically not known. This seems closest
          *   approximation
          */
-    	visitor.anyFormat(typeHint);
+    	visitor.expectAnyFormat(typeHint);
     }
 }    

File: src/test/java/com/fasterxml/jackson/databind/jsonschema/TestReadJsonSchema.java
Patch:
@@ -51,7 +51,7 @@ static class Schemable {
     public void testDeserializeSimple() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
-        SchemaFactory visitor = new SchemaFactory();
+        SchemaFactoryProvider visitor = new SchemaFactoryProvider();
         mapper.acceptJsonFormatVisitor(Schemable.class, visitor);
         JsonSchema jsonSchema = visitor.finalSchema();
         assertNotNull(jsonSchema);

File: src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java
Patch:
@@ -43,6 +43,6 @@ public void serialize(Node value, JsonGenerator jgen, SerializerProvider provide
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
-        visitor.anyFormat();
+        visitor.anyFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NullSchemaFactory.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsonschema.factories;
 
-import com.fasterxml.jackson.databind.jsonschema.types.NullSchema;
 import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;
+import com.fasterxml.jackson.databind.jsonschema.types.NullSchema;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonNullFormatVisitor;
 
 public class NullSchemaFactory extends SchemaFactory implements

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ObjectSchemaFactory.java
Patch:
@@ -5,8 +5,8 @@
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.jsonschema.JsonFormatVisitorAware;
-import com.fasterxml.jackson.databind.jsonschema.types.ObjectSchema;
 import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;
+import com.fasterxml.jackson.databind.jsonschema.types.ObjectSchema;
 import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonObjectFormatVisitor;
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
@@ -46,7 +46,7 @@ protected JsonSchema propertySchema(BeanPropertyWriter writer) {
 		if (ser != null && ser instanceof JsonFormatVisitorAware) {
 			((JsonFormatVisitorAware)ser).acceptJsonFormatVisitor(visitor, writer.getType());
 		} else {
-			visitor.anyFormat();
+			visitor.anyFormat(writer.getType());
 		}
 		return visitor.finalSchema();
 	}

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ValueTypeSchemaFactory.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.util.Set;
 
-import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;
 import com.fasterxml.jackson.databind.jsonschema.types.JsonSchema;
+import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;
 import com.fasterxml.jackson.databind.jsonschema.types.ValueTypeSchema;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonValueFormatVisitor;
 

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ArraySchema.java
Patch:
@@ -5,9 +5,7 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonUnwrapped;
 import com.fasterxml.jackson.annotation.JsonValue;
-import com.fasterxml.jackson.databind.jsonschema.factories.SchemaFactory;
 
 /*
  * This attribute defines the allowed items in an instance array, and

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/types/JsonSchema.java
Patch:
@@ -12,7 +12,6 @@
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
-import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonNumberFormatVisitor.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind.jsonschema.visitors;
 
-import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;
 
 public interface JsonNumberFormatVisitor extends JsonValueFormatVisitor{
 

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -249,7 +249,7 @@ public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitor visitor)
         if (ser instanceof JsonFormatVisitorAware) {
         	((JsonFormatVisitorAware) ser).acceptJsonFormatVisitor(visitor, constructType(type));
         } else {
-        	visitor.anyFormat();
+        	visitor.anyFormat(constructType(type));
         }
     }
     /**

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java
Patch:
@@ -43,7 +43,7 @@ public final void serializeWithType(Object value, JsonGenerator jgen, Serializer
     
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { 
-    	visitor.anyFormat();
+    	visitor.anyFormat(typeHint);
     }
 
     protected void failForEmpty(Object value) throws JsonMappingException

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java
Patch:
@@ -4,9 +4,7 @@
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
-
 import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
@@ -44,6 +42,6 @@ public void serialize(Boolean value, JsonGenerator jgen, SerializerProvider prov
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
-        visitor.booleanFormat();
+        visitor.booleanFormat(typeHint);
     }
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java
Patch:
@@ -4,8 +4,8 @@
 import java.text.DateFormat;
 import java.util.Calendar;
 
-import com.fasterxml.jackson.core.*;
-
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java
Patch:
@@ -4,7 +4,8 @@
 import java.util.Collection;
 import java.util.Iterator;
 
-import com.fasterxml.jackson.core.*;
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java
Patch:
@@ -3,8 +3,8 @@
 import java.io.IOException;
 import java.net.InetAddress;
 
-import com.fasterxml.jackson.core.*;
-
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java
Patch:
@@ -3,8 +3,8 @@
 import java.io.IOException;
 import java.util.Iterator;
 
-import com.fasterxml.jackson.core.*;
-
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.io.IOException;
 
-import com.fasterxml.jackson.core.*;
-
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java
Patch:
@@ -4,9 +4,7 @@
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
-
 import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;
@@ -33,6 +31,6 @@ public void serialize(java.sql.Date value, JsonGenerator jgen, SerializerProvide
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
-    	visitor.stringFormat().format(JsonValueFormat.DATE_TIME);
+    	visitor.stringFormat(typeHint).format(JsonValueFormat.DATE_TIME);
     }
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java
Patch:
@@ -4,9 +4,7 @@
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
-
 import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;
@@ -28,6 +26,6 @@ public void serialize(java.sql.Time value, JsonGenerator jgen, SerializerProvide
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
-    	visitor.stringFormat().format(JsonValueFormat.DATE_TIME);
+    	visitor.stringFormat(typeHint).format(JsonValueFormat.DATE_TIME);
     }
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java
Patch:
@@ -1,11 +1,12 @@
 package com.fasterxml.jackson.databind.ser.std;
 
-import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.BeanProperty;
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer;
 import com.fasterxml.jackson.databind.ser.impl.IteratorSerializer;
-import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;
 
 /**
  * Dummy container class to group standard container serializers: serializers

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java
Patch:
@@ -4,8 +4,8 @@
 import java.util.Calendar;
 import java.util.Date;
 
-import com.fasterxml.jackson.core.*;
-
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.io.IOException;
 
-import com.fasterxml.jackson.core.*;
-
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -39,6 +39,6 @@ public void serialize(String value, JsonGenerator jgen, SerializerProvider provi
     @Override
     public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
-    	visitor.stringFormat();
+    	visitor.stringFormat(typeHint);
     }
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java
Patch:
@@ -3,8 +3,8 @@
 import java.io.IOException;
 import java.util.TimeZone;
 
-import com.fasterxml.jackson.core.*;
-
+import com.fasterxml.jackson.core.JsonGenerationException;
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 

File: src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java
Patch:
@@ -53,7 +53,7 @@ public void serialize(CustomBean value, JsonGenerator jgen, SerializerProvider p
 
         @Override
         public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
-            visitor.anyFormat();
+            visitor.anyFormat(typeHint);
         }
     }
     
@@ -87,7 +87,7 @@ public void serialize(SimpleEnum value, JsonGenerator jgen, SerializerProvider p
 
         @Override
         public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
-            visitor.anyFormat();
+            visitor.anyFormat(typeHint);
         }
     }
 

File: src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.annotation.*;
-import com.fasterxml.jackson.annotation.JsonFormat.Shape;
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;

File: src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ext;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
@@ -12,6 +11,7 @@
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.JsonSerializer;
@@ -63,7 +63,7 @@ public void serialize(XMLGregorianCalendar value, JsonGenerator jgen, Serializer
             CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider);
         }
 
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ext;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import org.w3c.dom.Node;
 import  org.w3c.dom.bootstrap.DOMImplementationRegistry;
@@ -10,6 +9,7 @@
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
@@ -41,7 +41,7 @@ public void serialize(Node value, JsonGenerator jgen, SerializerProvider provide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         visitor.anyFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/SchemaAware.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsonschema;
 
-import java.lang.reflect.Type;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 
 /**
@@ -15,5 +15,5 @@ public interface SchemaAware
      *
      * @return <a href="http://json-schema.org/">Json-schema</a> for this serializer.
      */
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint);
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint);
 }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ArraySchemaFactory.java
Patch:
@@ -35,7 +35,7 @@ public void itemsFormat(JavaType contentType) {
 				ser = getProvider().findValueSerializer(contentType, _property);
 				if (ser instanceof SchemaAware) {
 	            	SchemaFactory visitor = new SchemaFactory(provider);
-	                ((SchemaAware) ser).acceptJsonFormatVisitor(visitor, null);
+	                ((SchemaAware) ser).acceptJsonFormatVisitor(visitor, contentType);
 	                arraySchema.setItemsSchema(visitor.finalSchema());
 	            }
 			} catch (JsonMappingException e) {

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonObjectFormatVisitor.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsonschema.visitors;
 
-import java.lang.reflect.Type;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
 
@@ -11,10 +11,10 @@ public interface JsonObjectFormatVisitor extends JsonFormatVisitor {
 
 	public void optionalProperty(BeanPropertyWriter writer);
 
-	public void property(String name, SchemaAware handler, Type propertyTypeHint);
+	public void property(String name, SchemaAware handler, JavaType propertyTypeHint);
 
 	public void optionalProperty(String name, SchemaAware handler,
-			Type propertyTypeHint);
+			JavaType propertyTypeHint);
 
 	public void property(String name);
 	

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -247,7 +247,7 @@ public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitor visitor)
          */
         JsonSerializer<Object> ser = findValueSerializer(type, null);
         if (ser instanceof SchemaAware) {
-        	((SchemaAware) ser).acceptJsonFormatVisitor(visitor, type);
+        	((SchemaAware) ser).acceptJsonFormatVisitor(visitor, constructType(type));
         } else {
         	visitor.anyFormat();
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         ;
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
@@ -171,7 +170,7 @@ private void serializeContentsSlow(String[] value, JsonGenerator jgen, Serialize
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.arrayFormat(null).itemsFormat(SchemaType.STRING);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -43,7 +42,7 @@ public final void serializeWithType(Object value, JsonGenerator jgen, Serializer
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) { 
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { 
     	visitor.anyFormat();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.*;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
@@ -627,9 +626,9 @@ protected BeanPropertyFilter findFilter(SerializerProvider provider)
         return filter;
     }
     
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
-    	JsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint == null ? _handledType : typeHint);
+    	JsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);
         // [JACKSON-813]: Add optional JSON Schema id attribute, if found
         // NOTE: not optimal, does NOT go through AnnotationIntrospector etc:
 //        JsonSerializableSchema ann = _handledType.getAnnotation(JsonSerializableSchema.class);

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -42,7 +42,7 @@ public void serialize(Boolean value, JsonGenerator jgen, SerializerProvider prov
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         visitor.booleanFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Locale;
@@ -102,7 +101,7 @@ public boolean isEmpty(T value) {
 
     protected abstract long _timestamp(T value);
     
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         //todo: (ryan) add a format for the date in the schema?
         boolean asNumber = _useTimestamp;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java
Patch:
@@ -252,7 +252,7 @@ protected void serializeContentsUsing(EnumMap<? extends Enum<?>,?> value, JsonGe
     
     @SuppressWarnings("unchecked")
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	JsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);
         if (typeHint instanceof ParameterizedType) {
@@ -268,7 +268,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
                 	try {
                 		ser = visitor.getProvider().findValueSerializer(valueType.getRawClass(), _property);
                 		if (ser instanceof SchemaAware)  {
-                			objectVisitor.property(name, (SchemaAware) ser, typeArgs[1]);
+                			objectVisitor.property(name, (SchemaAware) ser, valueType);
                 		} 
                 		continue;
                 	} catch (JsonMappingException e) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
Patch:
@@ -4,7 +4,6 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -231,7 +230,7 @@ public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvide
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	if (_valueSerializer instanceof SchemaAware) {
     		((SchemaAware) _valueSerializer).acceptJsonFormatVisitor(visitor, null); 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
@@ -467,7 +466,7 @@ protected void serializeTypedFields(Map<?,?> value, JsonGenerator jgen, Serializ
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.objectFormat(null);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind.ser.std;
 
-import java.lang.reflect.Type;
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.*;
@@ -32,7 +31,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.nullFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -297,9 +296,9 @@ public void serializeTypedContents(Object[] value, JsonGenerator jgen, Serialize
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
-    	visitor.arrayFormat(typeHint == null ? _property.getType().getRawClass() : typeHint).itemsFormat(_elementType);
+    	visitor.arrayFormat(typeHint).itemsFormat(_elementType);
     }
 
     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,

File: src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -45,7 +44,7 @@ public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider pr
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -31,7 +31,7 @@ public void serialize(java.sql.Date value, JsonGenerator jgen, SerializerProvide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat().format(JsonValueFormat.DATE_TIME);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -26,7 +26,7 @@ public void serialize(java.sql.Time value, JsonGenerator jgen, SerializerProvide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat().format(JsonValueFormat.DATE_TIME);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java
Patch:
@@ -1,8 +1,8 @@
 package com.fasterxml.jackson.databind.ser.std;
 
-import java.lang.reflect.Type;
 import java.util.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
@@ -27,7 +27,7 @@ public boolean isEmpty(T value) {
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	acceptContentVisitor(visitor.arrayFormat(typeHint));
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.Date;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
@@ -45,7 +45,7 @@ public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider pr
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         visitor.anyFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
@@ -81,7 +80,7 @@ public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider p
      * overriden by custom serializers.
      */
 //  @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) { 
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { 
     	visitor.anyFormat();
     }
             

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
@@ -37,7 +37,7 @@ public void serialize(String value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
@@ -75,7 +75,7 @@ public void serializeWithType(Object value, JsonGenerator jgen, SerializerProvid
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -54,7 +54,7 @@ public final void serializeWithType(TokenBuffer value, JsonGenerator jgen, Seria
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         /* 01-Jan-2010, tatu: Not 100% sure what we should say here:
          *   type is basically not known. This seems closest

File: src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.module;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.*;
 
 
@@ -53,7 +52,7 @@ public void serialize(CustomBean value, JsonGenerator jgen, SerializerProvider p
         }
 
         @Override
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
             visitor.anyFormat();
         }
     }
@@ -87,7 +86,7 @@ public void serialize(SimpleEnum value, JsonGenerator jgen, SerializerProvider p
         }
 
         @Override
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
             visitor.anyFormat();
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2402,7 +2402,7 @@ protected Object _convert(Object fromValue, JavaType toValueType)
     public Schema generateJsonSchema(Class<?> t) throws JsonMappingException {
     	DefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());
     	SchemaFactory visitor = new SchemaFactory(provider);
-        provider.acceptJsonFormatVisitor(constructType(t), visitor);
+        provider.acceptJsonFormatVisitor(t, visitor);
         return visitor.finalSchema();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ext;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
@@ -11,7 +12,6 @@
 
 import com.fasterxml.jackson.core.*;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.JsonSerializer;
@@ -63,7 +63,7 @@ public void serialize(XMLGregorianCalendar value, JsonGenerator jgen, Serializer
             CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider);
         }
 
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {
             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ext;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import org.w3c.dom.Node;
 import  org.w3c.dom.bootstrap.DOMImplementationRegistry;
@@ -9,7 +10,6 @@
 
 import com.fasterxml.jackson.core.*;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
@@ -41,7 +41,7 @@ public void serialize(Node value, JsonGenerator jgen, SerializerProvider provide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
         visitor.anyFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/SchemaAware.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsonschema;
 
+import java.lang.reflect.Type;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 
 /**
@@ -15,5 +15,5 @@ public interface SchemaAware
      *
      * @return <a href="http://json-schema.org/">Json-schema</a> for this serializer.
      */
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint);
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint);
 }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/SchemaFactory.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsonschema.factories;
 
+import java.lang.reflect.Type;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.types.Schema;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonAnyFormatVisitor;
@@ -28,7 +28,7 @@ public JsonAnyFormatVisitor anyFormat() {
 		return (JsonAnyFormatVisitor) delegate;
 	}
 
-	public JsonArrayFormatVisitor arrayFormat(JavaType elementType) {
+	public JsonArrayFormatVisitor arrayFormat(Type elementType) {
 		delegate = new ArraySchemaFactory(this);
 		return (JsonArrayFormatVisitor) delegate;
 	}
@@ -67,7 +67,7 @@ public JsonNumberFormatVisitor numberFormat() {
 		return (JsonNumberFormatVisitor) delegate;
 	}
 
-	public JsonObjectFormatVisitor objectFormat(JavaType type) {
+	public JsonObjectFormatVisitor objectFormat(Type type) {
 		// BasicClassIntrospector.instance.
 		delegate = new ObjectSchemaFactory(this);
 		return (JsonObjectFormatVisitor) delegate;

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonFormatVisitor.java
Patch:
@@ -1,13 +1,13 @@
 package com.fasterxml.jackson.databind.jsonschema.visitors;
 
+import java.lang.reflect.Type;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 
 public interface JsonFormatVisitor {
 
-	public JsonObjectFormatVisitor objectFormat(JavaType type);
-	public JsonArrayFormatVisitor arrayFormat(JavaType elementType);
+	public JsonObjectFormatVisitor objectFormat(Type type);
+	public JsonArrayFormatVisitor arrayFormat(Type elementType);
 	public JsonStringFormatVisitor stringFormat();
 	public JsonNumberFormatVisitor numberFormat();
 	public JsonIntegerFormatVisitor integerFormat();

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonObjectFormatVisitor.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsonschema.visitors;
 
+import java.lang.reflect.Type;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
 
@@ -11,10 +11,10 @@ public interface JsonObjectFormatVisitor extends JsonFormatVisitor {
 
 	public void optionalProperty(BeanPropertyWriter writer);
 
-	public void property(String name, SchemaAware handler, JavaType propertyTypeHint);
+	public void property(String name, SchemaAware handler, Type propertyTypeHint);
 
 	public void optionalProperty(String name, SchemaAware handler,
-			JavaType propertyTypeHint);
+			Type propertyTypeHint);
 
 	public void property(String name);
 	

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -236,7 +236,7 @@ public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType,
      *
      * @param type The type for which to generate schema
      */
-    public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitor visitor)
+    public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitor visitor)
         throws JsonMappingException
     {
         if (type == null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
         ;
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
@@ -170,7 +171,7 @@ private void serializeContentsSlow(String[] value, JsonGenerator jgen, Serialize
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	visitor.arrayFormat(null).itemsFormat(SchemaType.STRING);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -42,7 +43,7 @@ public final void serializeWithType(Object value, JsonGenerator jgen, Serializer
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { 
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) { 
     	visitor.anyFormat();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -42,7 +42,7 @@ public void serialize(Boolean value, JsonGenerator jgen, SerializerProvider prov
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
         visitor.booleanFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Locale;
@@ -101,7 +102,7 @@ public boolean isEmpty(T value) {
 
     protected abstract long _timestamp(T value);
     
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
         //todo: (ryan) add a format for the date in the schema?
         boolean asNumber = _useTimestamp;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java
Patch:
@@ -19,7 +19,6 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.fasterxml.jackson.databind.util.EnumValues;
 
 /**
@@ -253,7 +252,7 @@ protected void serializeContentsUsing(EnumMap<? extends Enum<?>,?> value, JsonGe
     
     @SuppressWarnings("unchecked")
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	JsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);
         if (typeHint instanceof ParameterizedType) {
@@ -269,7 +268,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint
                 	try {
                 		ser = visitor.getProvider().findValueSerializer(valueType.getRawClass(), _property);
                 		if (ser instanceof SchemaAware)  {
-                			objectVisitor.property(name, (SchemaAware) ser, TypeFactory.defaultInstance().constructType(typeArgs[1]));
+                			objectVisitor.property(name, (SchemaAware) ser, typeArgs[1]);
                 		} 
                 		continue;
                 	} catch (JsonMappingException e) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
Patch:
@@ -4,6 +4,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -230,7 +231,7 @@ public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvide
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	if (_valueSerializer instanceof SchemaAware) {
     		((SchemaAware) _valueSerializer).acceptJsonFormatVisitor(visitor, null); 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
@@ -466,7 +467,7 @@ protected void serializeTypedFields(Map<?,?> value, JsonGenerator jgen, Serializ
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	visitor.objectFormat(null);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java
Patch:
@@ -1,5 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
+import java.lang.reflect.Type;
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.*;
@@ -31,7 +32,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	visitor.nullFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -296,9 +297,9 @@ public void serializeTypedContents(Object[] value, JsonGenerator jgen, Serialize
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
-    	visitor.arrayFormat(typeHint).itemsFormat(_elementType);
+    	visitor.arrayFormat(typeHint == null ? _property.getType().getRawClass() : typeHint).itemsFormat(_elementType);
     }
 
     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,

File: src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -44,7 +45,7 @@ public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider pr
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
         visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -31,7 +31,7 @@ public void serialize(java.sql.Date value, JsonGenerator jgen, SerializerProvide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	visitor.stringFormat().format(JsonValueFormat.DATE_TIME);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -26,7 +26,7 @@ public void serialize(java.sql.Time value, JsonGenerator jgen, SerializerProvide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	visitor.stringFormat().format(JsonValueFormat.DATE_TIME);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java
Patch:
@@ -1,8 +1,8 @@
 package com.fasterxml.jackson.databind.ser.std;
 
+import java.lang.reflect.Type;
 import java.util.*;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
@@ -27,7 +27,7 @@ public boolean isEmpty(T value) {
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	acceptContentVisitor(visitor.arrayFormat(typeHint));
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 import java.util.Date;
 
 import com.fasterxml.jackson.core.*;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
@@ -45,7 +45,7 @@ public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider pr
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
         visitor.anyFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
@@ -80,7 +81,7 @@ public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider p
      * overriden by custom serializers.
      */
 //  @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { 
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) { 
     	visitor.anyFormat();
     }
             

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
@@ -37,7 +37,7 @@ public void serialize(String value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
@@ -75,7 +75,7 @@ public void serializeWithType(Object value, JsonGenerator jgen, SerializerProvid
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
     	visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
-import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -54,7 +54,7 @@ public final void serializeWithType(TokenBuffer value, JsonGenerator jgen, Seria
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
     {
         /* 01-Jan-2010, tatu: Not 100% sure what we should say here:
          *   type is basically not known. This seems closest

File: src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java
Patch:
@@ -1,6 +1,7 @@
 package com.fasterxml.jackson.databind.module;
 
 import java.io.IOException;
+import java.lang.reflect.Type;
 import java.util.*;
 
 
@@ -52,7 +53,7 @@ public void serialize(CustomBean value, JsonGenerator jgen, SerializerProvider p
         }
 
         @Override
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {
             visitor.anyFormat();
         }
     }
@@ -86,7 +87,7 @@ public void serialize(SimpleEnum value, JsonGenerator jgen, SerializerProvider p
         }
 
         @Override
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {
             visitor.anyFormat();
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2402,7 +2402,7 @@ protected Object _convert(Object fromValue, JavaType toValueType)
     public Schema generateJsonSchema(Class<?> t) throws JsonMappingException {
     	DefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());
     	SchemaFactory visitor = new SchemaFactory(provider);
-        provider.acceptJsonFormatVisitor(t, visitor);
+        provider.acceptJsonFormatVisitor(constructType(t), visitor);
         return visitor.finalSchema();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ext;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
@@ -12,6 +11,7 @@
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.JsonSerializer;
@@ -63,7 +63,7 @@ public void serialize(XMLGregorianCalendar value, JsonGenerator jgen, Serializer
             CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider);
         }
 
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ext;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import org.w3c.dom.Node;
 import  org.w3c.dom.bootstrap.DOMImplementationRegistry;
@@ -10,6 +9,7 @@
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
@@ -41,7 +41,7 @@ public void serialize(Node value, JsonGenerator jgen, SerializerProvider provide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         visitor.anyFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/SchemaAware.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsonschema;
 
-import java.lang.reflect.Type;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 
 /**
@@ -15,5 +15,5 @@ public interface SchemaAware
      *
      * @return <a href="http://json-schema.org/">Json-schema</a> for this serializer.
      */
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint);
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint);
 }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/SchemaFactory.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsonschema.factories;
 
-import java.lang.reflect.Type;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.types.Schema;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonAnyFormatVisitor;
@@ -28,7 +28,7 @@ public JsonAnyFormatVisitor anyFormat() {
 		return (JsonAnyFormatVisitor) delegate;
 	}
 
-	public JsonArrayFormatVisitor arrayFormat(Type elementType) {
+	public JsonArrayFormatVisitor arrayFormat(JavaType elementType) {
 		delegate = new ArraySchemaFactory(this);
 		return (JsonArrayFormatVisitor) delegate;
 	}
@@ -67,7 +67,7 @@ public JsonNumberFormatVisitor numberFormat() {
 		return (JsonNumberFormatVisitor) delegate;
 	}
 
-	public JsonObjectFormatVisitor objectFormat(Type type) {
+	public JsonObjectFormatVisitor objectFormat(JavaType type) {
 		// BasicClassIntrospector.instance.
 		delegate = new ObjectSchemaFactory(this);
 		return (JsonObjectFormatVisitor) delegate;

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonFormatVisitor.java
Patch:
@@ -1,13 +1,13 @@
 package com.fasterxml.jackson.databind.jsonschema.visitors;
 
-import java.lang.reflect.Type;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 
 public interface JsonFormatVisitor {
 
-	public JsonObjectFormatVisitor objectFormat(Type type);
-	public JsonArrayFormatVisitor arrayFormat(Type elementType);
+	public JsonObjectFormatVisitor objectFormat(JavaType type);
+	public JsonArrayFormatVisitor arrayFormat(JavaType elementType);
 	public JsonStringFormatVisitor stringFormat();
 	public JsonNumberFormatVisitor numberFormat();
 	public JsonIntegerFormatVisitor integerFormat();

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonObjectFormatVisitor.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsonschema.visitors;
 
-import java.lang.reflect.Type;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
 
@@ -11,10 +11,10 @@ public interface JsonObjectFormatVisitor extends JsonFormatVisitor {
 
 	public void optionalProperty(BeanPropertyWriter writer);
 
-	public void property(String name, SchemaAware handler, Type propertyTypeHint);
+	public void property(String name, SchemaAware handler, JavaType propertyTypeHint);
 
 	public void optionalProperty(String name, SchemaAware handler,
-			Type propertyTypeHint);
+			JavaType propertyTypeHint);
 
 	public void property(String name);
 	

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -236,7 +236,7 @@ public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType,
      *
      * @param type The type for which to generate schema
      */
-    public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitor visitor)
+    public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitor visitor)
         throws JsonMappingException
     {
         if (type == null) {

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         ;
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
@@ -171,7 +170,7 @@ private void serializeContentsSlow(String[] value, JsonGenerator jgen, Serialize
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.arrayFormat(null).itemsFormat(SchemaType.STRING);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -43,7 +42,7 @@ public final void serializeWithType(Object value, JsonGenerator jgen, Serializer
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) { 
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { 
     	visitor.anyFormat();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -42,7 +42,7 @@ public void serialize(Boolean value, JsonGenerator jgen, SerializerProvider prov
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         visitor.booleanFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Locale;
@@ -102,7 +101,7 @@ public boolean isEmpty(T value) {
 
     protected abstract long _timestamp(T value);
     
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         //todo: (ryan) add a format for the date in the schema?
         boolean asNumber = _useTimestamp;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
+import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.fasterxml.jackson.databind.util.EnumValues;
 
 /**
@@ -252,7 +253,7 @@ protected void serializeContentsUsing(EnumMap<? extends Enum<?>,?> value, JsonGe
     
     @SuppressWarnings("unchecked")
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	JsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);
         if (typeHint instanceof ParameterizedType) {
@@ -268,7 +269,7 @@ public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
                 	try {
                 		ser = visitor.getProvider().findValueSerializer(valueType.getRawClass(), _property);
                 		if (ser instanceof SchemaAware)  {
-                			objectVisitor.property(name, (SchemaAware) ser, typeArgs[1]);
+                			objectVisitor.property(name, (SchemaAware) ser, TypeFactory.defaultInstance().constructType(typeArgs[1]));
                 		} 
                 		continue;
                 	} catch (JsonMappingException e) {

File: src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
Patch:
@@ -4,7 +4,6 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -231,7 +230,7 @@ public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvide
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	if (_valueSerializer instanceof SchemaAware) {
     		((SchemaAware) _valueSerializer).acceptJsonFormatVisitor(visitor, null); 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
@@ -467,7 +466,7 @@ protected void serializeTypedFields(Map<?,?> value, JsonGenerator jgen, Serializ
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.objectFormat(null);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind.ser.std;
 
-import java.lang.reflect.Type;
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.*;
@@ -32,7 +31,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.nullFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -297,9 +296,9 @@ public void serializeTypedContents(Object[] value, JsonGenerator jgen, Serialize
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
-    	visitor.arrayFormat(typeHint == null ? _property.getType().getRawClass() : typeHint).itemsFormat(_elementType);
+    	visitor.arrayFormat(typeHint).itemsFormat(_elementType);
     }
 
     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,

File: src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
@@ -45,7 +44,7 @@ public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider pr
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -31,7 +31,7 @@ public void serialize(java.sql.Date value, JsonGenerator jgen, SerializerProvide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat().format(JsonValueFormat.DATE_TIME);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -26,7 +26,7 @@ public void serialize(java.sql.Time value, JsonGenerator jgen, SerializerProvide
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat().format(JsonValueFormat.DATE_TIME);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java
Patch:
@@ -1,8 +1,8 @@
 package com.fasterxml.jackson.databind.ser.std;
 
-import java.lang.reflect.Type;
 import java.util.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
@@ -27,7 +27,7 @@ public boolean isEmpty(T value) {
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	acceptContentVisitor(visitor.arrayFormat(typeHint));
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java
Patch:
@@ -1,11 +1,11 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.Date;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
@@ -34,7 +34,7 @@ public void serialize(Object value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
@@ -45,7 +45,7 @@ public void serializeWithType(T value, JsonGenerator jgen, SerializerProvider pr
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         visitor.anyFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
@@ -81,7 +80,7 @@ public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider p
      * overriden by custom serializers.
      */
 //  @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) { 
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { 
     	visitor.anyFormat();
     }
             

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;
@@ -37,7 +37,7 @@ public void serialize(String value, JsonGenerator jgen, SerializerProvider provi
     }
 
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
@@ -75,7 +75,7 @@ public void serializeWithType(Object value, JsonGenerator jgen, SerializerProvid
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
     	visitor.stringFormat();
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java
Patch:
@@ -1,10 +1,10 @@
 package com.fasterxml.jackson.databind.ser.std;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
@@ -54,7 +54,7 @@ public final void serializeWithType(TokenBuffer value, JsonGenerator jgen, Seria
     }
     
     @Override
-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)
+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)
     {
         /* 01-Jan-2010, tatu: Not 100% sure what we should say here:
          *   type is basically not known. This seems closest

File: src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind.module;
 
 import java.io.IOException;
-import java.lang.reflect.Type;
 import java.util.*;
 
 
@@ -53,7 +52,7 @@ public void serialize(CustomBean value, JsonGenerator jgen, SerializerProvider p
         }
 
         @Override
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
             visitor.anyFormat();
         }
     }
@@ -87,7 +86,7 @@ public void serialize(SimpleEnum value, JsonGenerator jgen, SerializerProvider p
         }
 
         @Override
-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {
+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {
             visitor.anyFormat();
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ObjectSchema.java
Patch:
@@ -122,14 +122,16 @@ public boolean isObjectSchema() {
 	}
 
 	public void putOptionalProperty(String name, Schema schema) {
-		// just don't put anything in the property list
+		schema.setRequired(false);
+		properties.put(name, schema);
 	}
 
 	public Schema putPatternProperty(String regex, Schema value) {
 		return patternProperties.put(regex, value);
 	}
 
 	public Schema putProperty(String name, Schema value) {
+		value.setRequired(true);
 		return properties.put(name, value);
 	}
 

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -196,6 +196,8 @@ public boolean useForType(JavaType t)
 
     protected final static VisibilityChecker<?> STD_VISIBILITY_CHECKER = VisibilityChecker.Std.defaultInstance();
 
+    protected final static PrettyPrinter _defaultPrettyPrinter = new DefaultPrettyPrinter();
+    
     /**
      * Base settings contain defaults used for all {@link ObjectMapper}
      * instances.
@@ -2437,7 +2439,7 @@ protected DefaultSerializerProvider _serializerProvider(SerializationConfig conf
      * to use default pretty printer.
      */
     protected PrettyPrinter _defaultPrettyPrinter() {
-        return new DefaultPrettyPrinter();
+        return _defaultPrettyPrinter;
     }
     
     /**

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java
Patch:
@@ -175,7 +175,7 @@ protected final void serializeAsArray(Object bean, JsonGenerator jgen, Serialize
             String name = (i == props.length) ? "[anySetter]" : props[i].getName();
             wrapAndThrow(provider, e, bean, name);
         } catch (StackOverflowError e) {
-            JsonMappingException mapE = new JsonMappingException("Infinite recursion (StackOverflowError)");
+            JsonMappingException mapE = new JsonMappingException("Infinite recursion (StackOverflowError)", e);
             String name = (i == props.length) ? "[anySetter]" : props[i].getName();
             mapE.prependPath(new JsonMappingException.Reference(bean, name));
             throw mapE;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -554,7 +554,7 @@ protected void serializeFields(Object bean, JsonGenerator jgen, SerializerProvid
              *   have many stack frames to spare... just one or two; can't
              *   make many calls.
              */
-            JsonMappingException mapE = new JsonMappingException("Infinite recursion (StackOverflowError)");
+            JsonMappingException mapE = new JsonMappingException("Infinite recursion (StackOverflowError)", e);
             String name = (i == props.length) ? "[anySetter]" : props[i].getName();
             mapE.prependPath(new JsonMappingException.Reference(bean, name));
             throw mapE;
@@ -601,7 +601,7 @@ protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen, Serializ
             String name = (i == props.length) ? "[anySetter]" : props[i].getName();
             wrapAndThrow(provider, e, bean, name);
         } catch (StackOverflowError e) {
-            JsonMappingException mapE = new JsonMappingException("Infinite recursion (StackOverflowError)");
+            JsonMappingException mapE = new JsonMappingException("Infinite recursion (StackOverflowError)", e);
             String name = (i == props.length) ? "[anySetter]" : props[i].getName();
             mapE.prependPath(new JsonMappingException.Reference(bean, name));
             throw mapE;

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -403,7 +403,8 @@ public ObjectIdInfo findObjectIdInfo(Annotated ann) {
         if (info == null || info.generator() == ObjectIdGenerators.None.class) {
             return null;
         }
-        return new ObjectIdInfo(info.property(), info.scope(), info.generator());
+        return new ObjectIdInfo(info.property(), info.scope(), info.generator(),
+                info.firstAsId());
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -418,15 +418,16 @@ protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov,
             JavaType idType = idProp.getType();
             gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);
             // one more thing: must ensure that ObjectIdWriter does not actually write the value:
-            return ObjectIdWriter.construct(idType, null, gen);
+            return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());
             
         } 
         // other types are simpler
         JavaType type = prov.constructType(implClass);
         // Could require type to be passed explicitly, but we should be able to find it too:
         JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];
         gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);
-        return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);
+        return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,
+                objectIdInfo.getFirstAsId());
     }
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -384,10 +384,11 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                     }
                     idType = idProp.getType();
                     gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);
-                    oiw = ObjectIdWriter.construct(idType, null, gen);
+                    oiw = ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());
                 } else { // other types need to be simpler
                     gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);
-                    oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);
+                    oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,
+                            objectIdInfo.getFirstAsId());
                 }
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -2400,8 +2400,9 @@ protected Object _convert(Object fromValue, JavaType toValueType)
      * @return Constructed JSON schema.
      */
     public Schema generateJsonSchema(Class<?> t) throws JsonMappingException {
-    	SchemaFactory visitor = new SchemaFactory(this);
-        _serializerProvider(getSerializationConfig()).acceptJsonFormatVisitor(t, visitor);
+    	DefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());
+    	SchemaFactory visitor = new SchemaFactory(provider);
+        provider.acceptJsonFormatVisitor(t, visitor);
         return visitor.finalSchema();
     }
 

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/AnySchemaFactory.java
Patch:
@@ -11,7 +11,7 @@ public class AnySchemaFactory extends SchemaFactory implements
 	protected AnySchema anySchema;
 	
 	public AnySchemaFactory(SchemaFactory parent) {
-		super(parent.mapper);
+		super(parent.provider);
 		this.parent = parent;
 		anySchema = new AnySchema();
 	}

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ArraySchemaFactory.java
Patch:
@@ -17,7 +17,7 @@ public class ArraySchemaFactory extends SchemaFactory implements JsonArrayFormat
 	protected BeanProperty _property;
 	
 	public ArraySchemaFactory(SchemaFactory parent, BeanProperty property) {
-		super(parent.mapper);
+		super(parent.provider);
 		this.parent = parent;
 		arraySchema = new ArraySchema();
 	}
@@ -34,7 +34,7 @@ public void itemsFormat(JavaType contentType) {
 			try {
 				ser = getProvider().findValueSerializer(contentType, _property);
 				if (ser instanceof SchemaAware) {
-	            	SchemaFactory visitor = new SchemaFactory(mapper);
+	            	SchemaFactory visitor = new SchemaFactory(provider);
 	                ((SchemaAware) ser).acceptJsonFormatVisitor(visitor, null);
 	                arraySchema.setItemsSchema(visitor.finalSchema());
 	            }

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/BooleanSchemaFactory.java
Patch:
@@ -11,7 +11,7 @@ public class BooleanSchemaFactory extends ValueTypeSchemaFactory implements
 	protected BooleanSchema booleanSchema;
 	
 	public BooleanSchemaFactory(SchemaFactory parent) {
-		super(parent.mapper);
+		super(parent.provider);
 		this.parent = parent;
 		booleanSchema = new BooleanSchema();
 	}

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/IntegerSchemaFactory.java
Patch:
@@ -11,7 +11,7 @@ public class IntegerSchemaFactory extends ValueTypeSchemaFactory implements
 	protected IntegerSchema integerSchema;
 	
 	public IntegerSchemaFactory(SchemaFactory parent) {
-		super(parent.mapper);
+		super(parent.provider);
 		this.parent = parent;
 		integerSchema = new IntegerSchema();
 	}

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NullSchemaFactory.java
Patch:
@@ -11,7 +11,7 @@ public class NullSchemaFactory extends SchemaFactory implements
 	protected NullSchema nullSchema;
 	
 	public NullSchemaFactory(SchemaFactory parent) {
-		super(parent.mapper);
+		super(parent.provider);
 		this.parent = parent;
 		nullSchema = new NullSchema();
 	}

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/NumberSchemaFactory.java
Patch:
@@ -11,7 +11,7 @@ public class NumberSchemaFactory extends ValueTypeSchemaFactory implements
 	protected NumberSchema numberSchema;
 	
 	public NumberSchemaFactory(SchemaFactory parent) {
-		super(parent.mapper);
+		super(parent.provider);
 		this.parent = parent;
 		numberSchema = new NumberSchema();
 	}

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/StringSchemaFactory.java
Patch:
@@ -11,7 +11,7 @@ public class StringSchemaFactory extends ValueTypeSchemaFactory implements JsonS
 	protected SchemaFactory parent;
 	
 	public StringSchemaFactory(SchemaFactory parent) {
-		super(parent.mapper);
+		super(parent.provider);
 		this.parent = parent;
 		stringSchema = new StringSchema();
 	}

File: src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ValueTypeSchemaFactory.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Set;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsonschema.types.JsonValueFormat;
 import com.fasterxml.jackson.databind.jsonschema.types.Schema;
 import com.fasterxml.jackson.databind.jsonschema.types.ValueTypeSchema;
@@ -11,8 +11,8 @@
 public abstract class ValueTypeSchemaFactory extends SchemaFactory implements
 		SchemaFactoryDelegate, JsonValueFormatVisitor {
 
-	protected ValueTypeSchemaFactory(ObjectMapper mapper) {
-		super(mapper);
+	protected ValueTypeSchemaFactory(SerializerProvider provider) {
+		super(provider);
 	}
 
 	public Schema getSchema() {

File: src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
Patch:
@@ -164,7 +164,7 @@ public static JsonMappingException from(JsonParser jp, String msg)
     }
 
     public static JsonMappingException from(JsonParser jp, String msg,
-                                            Throwable problem)
+            Throwable problem)
     {
         return new JsonMappingException(msg, jp.getTokenLocation(), problem);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
Patch:
@@ -42,7 +42,7 @@ public final T deserialize(JsonParser jp, DeserializationContext ctxt)
             } catch (IllegalArgumentException iae) {
                 // nothing to do here, yet? We'll fail anyway
             }
-            throw ctxt.weirdStringException(_valueClass, "not a valid textual representation");
+            throw ctxt.weirdStringException(text, _valueClass, "not a valid textual representation");
         }
         if (jp.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {
             // Trivial cases; null to null, instance of type itself returned as is

File: src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
Patch:
@@ -330,7 +330,7 @@ public Number deserialize(JsonParser jp, DeserializationContext ctxt)
                     }
                     return Long.valueOf(value);
                 } catch (IllegalArgumentException iae) {
-                    throw ctxt.weirdStringException(_valueClass, "not a valid number");
+                    throw ctxt.weirdStringException(text, _valueClass, "not a valid number");
                 }
             }
             // Otherwise, no can do:
@@ -405,7 +405,7 @@ public BigInteger deserialize(JsonParser jp, DeserializationContext ctxt)
             try {
                 return new BigInteger(text);
             } catch (IllegalArgumentException iae) {
-                throw ctxt.weirdStringException(_valueClass, "not a valid representation");
+                throw ctxt.weirdStringException(text, _valueClass, "not a valid representation");
             }
         }
     }
@@ -433,7 +433,7 @@ public BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt)
                 try {
                     return new BigDecimal(text);
                 } catch (IllegalArgumentException iae) {
-                    throw ctxt.weirdStringException(_valueClass, "not a valid representation");
+                    throw ctxt.weirdStringException(text, _valueClass, "not a valid representation");
                 }
             }
             // Otherwise, no can do:

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Builder class used for aggregating deserialization information about
  * a POJO, in order to build a {@link JsonDeserializer} for deserializing
- * intances.
+ * instances.
  */
 public class BeanDeserializerBuilder
 {

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -48,7 +48,7 @@ public class POJOPropertiesCollector
     
     /*
     /**********************************************************
-    /* Collected information
+    /* Collected property information
     /**********************************************************
      */
 

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -297,8 +297,10 @@ protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov
         throws JsonMappingException
     {
         // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object
+        // 05-Jul-2012, tatu: ... but we should be able to just return "unknown type" serializer, right?
         if (beanDesc.getBeanClass() == Object.class) {
-            throw new IllegalArgumentException("Can not create bean serializer for Object.class");
+            return prov.getUnknownTypeSerializer(Object.class);
+//            throw new IllegalArgumentException("Can not create bean serializer for Object.class");
         }
         final SerializationConfig config = prov.getConfig();
         BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -159,14 +159,14 @@ public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
-                if (t.isArrayType()) {
+                while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
                 return (t.getRawClass() == Object.class) || !t.isConcrete();
             case NON_FINAL:
-                if (t.isArrayType()) {
+                while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 return !t.isFinal(); // includes Object.class

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -159,14 +159,14 @@ public boolean useForType(JavaType t)
         {
             switch (_appliesFor) {
             case NON_CONCRETE_AND_ARRAYS:
-                if (t.isArrayType()) {
+                while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 // fall through
             case OBJECT_AND_NON_CONCRETE:
                 return (t.getRawClass() == Object.class) || !t.isConcrete();
             case NON_FINAL:
-                if (t.isArrayType()) {
+                while (t.isArrayType()) {
                     t = t.getContentType();
                 }
                 return !t.isFinal(); // includes Object.class

File: src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
Patch:
@@ -26,7 +26,7 @@
  * deserialization parameters, such as root type to use or object
  * to update (instead of constructing new instance).
  *<p>
- * Uses "fluent" (aka builder) pattern so that instances are immutable
+ * Uses "fluent" (or, kind of, builder) pattern so that instances are immutable
  * (and thus fully thread-safe with no external synchronization);
  * new instances are constructed for different configurations.
  * Instances are initially constructed by {@link ObjectMapper} and can be

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java
Patch:
@@ -90,7 +90,7 @@ public JsonNode getSchema(SerializerProvider provider, Type typeHint)
      * Default implementation simply claims type is "string"; usually
      * overriden by custom serializers.
      */
-    @Override
+//    @Override
     public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)
         throws JsonMappingException
     {

File: src/test/java/com/fasterxml/jackson/databind/ser/TestUntypedSerialization.java
Patch:
@@ -1,8 +1,9 @@
-package com.fasterxml.jackson.databind;
+package com.fasterxml.jackson.databind.ser;
 
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
+import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java
Patch:
@@ -61,7 +61,7 @@ public void addSerializer(JsonSerializer<?> ser)
         if (cls == null || cls == Object.class) {
             throw new IllegalArgumentException("JsonSerializer of type "+ser.getClass().getName()
                     +" does not define valid handledType() -- must either register with method that takes type argument "
-                    +" or make serializer extend 'com.fasterxml.jackson.databind.ser.std.SerializerBase'"); 
+                    +" or make serializer extend 'com.fasterxml.jackson.databind.ser.std.StdSerializer'"); 
         }
         _addSerializer(cls, ser);
     }

File: src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java
Patch:
@@ -165,7 +165,6 @@ public void testFromEmptyString() throws Exception
     }
 
     // [JACKSON-822]: ensure that type can be coerced
-    /*
     public void testTypedLists() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
@@ -187,5 +186,4 @@ public void testTypedArrays() throws Exception
         assertEquals("[{\"a\":3}]", mapper.writerWithType(Issue822Interface[].class).writeValueAsString(
                 new Issue822Interface[] { new Issue822Impl() }));
     }
-    */
 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java
Patch:
@@ -43,7 +43,7 @@ public IterableSerializer withResolved(BeanProperty property,
     @Override
     public boolean isEmpty(Iterable<?> value) {
         // Not really good way to implement this, but has to do for now:
-        return (value == null) || value.iterator().hasNext();
+        return (value == null) || !value.iterator().hasNext();
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java
Patch:
@@ -43,7 +43,7 @@ public IterableSerializer withResolved(BeanProperty property,
     @Override
     public boolean isEmpty(Iterable<?> value) {
         // Not really good way to implement this, but has to do for now:
-        return (value == null) || value.iterator().hasNext();
+        return (value == null) || !value.iterator().hasNext();
     }
 
     @Override

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java
Patch:
@@ -149,7 +149,7 @@ public BaseContainer(@JsonProperty("baseContainerProperty") String bcp, @JsonPro
         public Base getBase() { return base; }
     }
 
-    // [JACKSON-831]
+    // [JACKSON-831]: should allow a property to map id to as well
     
     interface Pet {}
 
@@ -158,7 +158,7 @@ static class Dog implements Pet {
     }
 
     static class House831 {
-        private String petType;
+        protected String petType;
 
         @JsonTypeInfo(use = Id.NAME, include = As.EXTERNAL_PROPERTY, property = "petType")
         @JsonSubTypes({@JsonSubTypes.Type(name = "dog", value = Dog.class)})
@@ -289,5 +289,6 @@ public void testIssue831() throws Exception
         assertNotNull(result);
         assertNotNull(result.pet);
         assertSame(Dog.class, result.pet.getClass());
+        assertEquals("dog", result.petType);
     }
 }

File: src/test/java/com/fasterxml/jackson/databind/TestUntypedDeserialization.java
Patch:
@@ -7,14 +7,14 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 /**
- * Unit tests for verifying "old" data binding from Json to JDK objects;
+ * Unit tests for verifying "old" data binding from JSON to JDK objects;
  * one that only uses core JDK types; wrappers, Maps and Lists.
  */
-public class TestToJavaType
+public class TestUntypedDeserialization
     extends com.fasterxml.jackson.test.BaseTest
 {
     @SuppressWarnings("unchecked")
-	public void testSampleDoc()
+    public void testSampleDoc()
         throws Exception
     {
         final String JSON = SAMPLE_DOC_JSON_SPEC;

File: src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java
Patch:
@@ -29,7 +29,7 @@ public static List<Class<?>> findSuperTypes(Class<?> cls, Class<?> endBefore)
     {
         return findSuperTypes(cls, endBefore, new ArrayList<Class<?>>(8));
     }
-
+    
     public static List<Class<?>> findSuperTypes(Class<?> cls, Class<?> endBefore, List<Class<?>> result)
     {
         _addSuperTypes(cls, endBefore, result, false);

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
Patch:
@@ -420,7 +420,7 @@ private void resolveMemberMethods()
 
         // and then augment these with annotations from super-types:
         for (Class<?> cls : _superTypes) {
-            Class<?> mixin = (_mixInResolver == null) ? null : _mixInResolver.findMixInClassFor(cls);
+            Class<?> mixin = (_mixInResolver == null) ? null : _mixInResolver.findMixInClassFor(cls);         
             _addMemberMethods(cls, _memberMethods, mixin, mixins);
         }
         // Special case: mix-ins for Object.class? (to apply to ALL classes)

File: src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForFields.java
Patch:
@@ -49,7 +49,7 @@ abstract class MixIn2 {
         // also: add a dummy field that is NOT to match anything
         @JsonProperty public String xyz;
     }
-
+    
     /*
     /**********************************************************
     /* Unit tests

File: src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java
Patch:
@@ -123,10 +123,10 @@ public void testSimple() throws Exception
      */
     public void testComplexEnum() throws Exception
     {
-        String json = MAPPER.writeValueAsString(TimeUnit.HOURS);
-        assertEquals(quote("HOURS"), json);
+        String json = MAPPER.writeValueAsString(TimeUnit.SECONDS);
+        assertEquals(quote("SECONDS"), json);
         TimeUnit result = MAPPER.readValue(json, TimeUnit.class);
-        assertSame(TimeUnit.HOURS, result);
+        assertSame(TimeUnit.SECONDS, result);
     }
     
     /**

File: src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java
Patch:
@@ -115,7 +115,7 @@ public void testBase64Text() throws Exception
                 try {
                     data = n.getBinaryValue(variant);
                 } catch (Exception e) {
-                    throw new IOException("Failed (variant "+variant+", data length "+len+"): "+e.getMessage(), e);
+                    throw new IOException("Failed (variant "+variant+", data length "+len+"): "+e.getMessage());
                 }
                 assertNotNull(data);
                 assertArrayEquals(data, input);

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -582,8 +582,9 @@ protected java.util.Date _parseDate(JsonParser jp, DeserializationContext ctxt)
     protected final static double parseDouble(String numStr) throws NumberFormatException
     {
         // [JACKSON-486]: avoid some nasty float representations... but should it be MIN_NORMAL or MIN_VALUE?
+        // for now, MIN_VALUE, since MIN_NORMAL is JDK 1.6
         if (NumberInput.NASTY_SMALL_DOUBLE.equals(numStr)) {
-            return Double.MIN_NORMAL;
+            return Double.MIN_VALUE;
         }
         return Double.parseDouble(numStr);
     }

File: src/test/java/com/fasterxml/jackson/databind/TestVersions.java
Patch:
@@ -41,7 +41,7 @@ private void assertVersion(Versioned vers)
         assertEquals(MAJOR_VERSION, v.getMajorVersion());
         assertEquals(MINOR_VERSION, v.getMinorVersion());
         // Check patch level initially, comment out for maint versions
-        assertEquals(0, v.getPatchLevel());
+//        assertEquals(0, v.getPatchLevel());
         assertEquals(GROUP_ID, v.getGroupId());
         assertEquals(ARTIFACT_ID, v.getArtifactId());
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
Patch:
@@ -197,8 +197,8 @@ protected JsonDeserializer<Object> _findCachedDeserializer(JavaType type)
      * Method that will try to create a deserializer for given type,
      * and resolve and cache it if necessary
      * 
-     * @param type Type of property to deserializer
-     * @param property Property (field, setter, ctor arg) to use deserializer for
+     * @param ctxt Currently active deserialization context
+     * @param type Type of property to deserialize
      */
     protected JsonDeserializer<Object>_createAndCacheValueDeserializer(DeserializationContext ctxt,
             DeserializerFactory factory, JavaType type)

File: src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
Patch:
@@ -45,7 +45,7 @@ public class StdDateFormat
 
     /**
      * This constant defines the date format specified by
-     * RFC 1123.
+     * RFC 1123 / RFC 822.
      */
     protected final static String DATE_FORMAT_STR_RFC1123 = "EEE, dd MMM yyyy HH:mm:ss zzz";
 
@@ -82,7 +82,7 @@ public class StdDateFormat
         /* Another important thing: let's force use of GMT for
          * baseline DataFormat objects
          */
-        DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123);
+        DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, Locale.US);
         DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);
         DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601);
         DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);

File: src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java
Patch:
@@ -303,7 +303,7 @@ public void testMapWithEnums() throws Exception
     public void testDateMap() throws Exception
     {
     	 Date date1=new Date(123456000L);
-    	 DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz");
+    	 DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);
          
     	 String JSON = "{ \""+  fmt.format(date1)+"\" : \"\", \""+new Date(0).getTime()+"\" : null }";
     	 HashMap<Date,String> result=  MAPPER.readValue
@@ -330,7 +330,7 @@ public void testCalendarMap() throws Exception
     {
     	 Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
          c.setTimeInMillis(123456000L);
-         DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz");
+         DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);
     	 String JSON = "{ \""+fmt.format(c.getTime())+"\" : \"\", \""+new Date(0).getTime()+"\" : null }";
     	 HashMap<Calendar,String> result = MAPPER.readValue
     	            (JSON, new TypeReference<HashMap<Calendar,String>>() { });

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -559,8 +559,8 @@ protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationC
             }
             backProp = ((BeanDeserializerBase) contentDeser).findBackReference(refName);
             isContainer = true;
-        } else if (valueDeser instanceof AbstractDeserializer) { // [JACKSON-368]: not easy to fix, alas  
-            throw new IllegalArgumentException("Can not handle managed/back reference for abstract types (property "+_beanType.getRawClass().getName()+"."+prop.getName()+")");
+        } else if (valueDeser instanceof AbstractDeserializer) {
+            backProp = ((AbstractDeserializer) valueDeser).findBackReference(refName);
         } else {
             throw new IllegalArgumentException("Can not handle managed/back reference '"+refName
                     +"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but "

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -342,7 +342,7 @@ public BeanDeserializer build()
      */
     public AbstractDeserializer buildAbstract()
     {
-        return new AbstractDeserializer(_beanDesc.getType(), _objectIdReader);
+        return new AbstractDeserializer(this, _beanDesc, _backRefProperties);
     }
     
     /**

File: src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java
Patch:
@@ -106,7 +106,7 @@ public boolean equals(Object o)
         if (o.getClass() != getClass()) { // final class, can do this
             return false;
         }
-        return ((BigIntegerNode) o)._value == _value;
+        return ((BigIntegerNode) o)._value.equals(_value);
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -786,7 +786,7 @@ protected Object deserializeFromObjectId(JsonParser jp, DeserializationContext c
         // do we have it resolved?
         Object pojo = roid.item;
         if (pojo == null) { // not yet; should wait...
-            throw new IllegalStateException("Could not resolve Object Id ["+id+"] -- illegal forward-reference?");
+            throw new IllegalStateException("Could not resolve Object Id ["+id+"] -- unresolved forward-reference?");
         }
         return pojo;
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
Patch:
@@ -649,7 +649,7 @@ protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationC
     public boolean isCachable() { return true; }
 
     /**
-     * Overridden to return tru for those instances that are
+     * Overridden to return true for those instances that are
      * handling value for which Object Identity handling is enabled
      * (either via value type or referring property).
      */

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -583,7 +583,7 @@ protected void _removeUnwantedProperties()
             // Otherwise, check ignorals
             if (prop.anyIgnorals()) {
                 // first: if one or more ignorals, and no explicit markers, remove the whole thing
-                if (!prop.anyExplicitNames()) {
+                if (!prop.isExplicitlyIncluded()) {
                     it.remove();
                     _addIgnored(prop.getName());
                     continue;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -632,7 +632,9 @@ protected void removeSetterlessGetters(SerializationConfig config, BeanDescripti
         Iterator<BeanPropertyDefinition> it = properties.iterator();
         while (it.hasNext()) {
             BeanPropertyDefinition property = it.next();
-            if (!property.couldDeserialize()) {
+            // one caveat: as per [JACKSON-806], only remove implicit properties;
+            // explicitly annotated ones should remain
+            if (!property.couldDeserialize() && !property.isExplicitlyIncluded()) {
                 it.remove();
             }
         }

File: src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java
Patch:
@@ -148,9 +148,9 @@ public Object deserializeSetAndReturn(JsonParser jp,
     public void set(Object instance, Object value) throws IOException
     {
         /* Hmmmh. Should we return quietly (NOP), or error?
-         * For now, let's just bail out without fuss.
+         * Perhaps better to throw an exception, since it's generally an error.
          */
-        //throw new IllegalStateException("Method should never be called on a "+getClass().getName());
+        throw new IllegalStateException("Method should never be called on a "+getClass().getName());
     }
 
     @Override

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -831,7 +831,7 @@ protected Object deserializeWithExternalTypeId(JsonParser jp, DeserializationCon
         }
         return deserializeWithExternalTypeId(jp, ctxt, _valueInstantiator.createUsingDefault(ctxt));
     }
-
+    
     protected Object deserializeWithExternalTypeId(JsonParser jp, DeserializationContext ctxt,
             Object bean)
         throws IOException, JsonProcessingException

File: src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
Patch:
@@ -23,7 +23,7 @@
 public class BuilderBasedDeserializer
 	extends BeanDeserializerBase
 {
-	protected final AnnotatedMethod _buildMethod;
+    protected final AnnotatedMethod _buildMethod;
 	
     /*
     /**********************************************************

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -416,6 +416,8 @@ public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContex
 
         // And also need to ignore "localizedMessage"
         builder.addIgnorable("localizedMessage");
+        // [JACKSON-794]: JDK 7 also added "getSuppressed", skip if we have such data:
+        builder.addIgnorable("suppressed");
         /* As well as "message": it will be passed via constructor,
          * as there's no 'setMessage()' method
         */

File: src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java
Patch:
@@ -91,7 +91,7 @@ public T deserialize(JsonParser jp, DeserializationContext ctxt,
                          T intoValue)
         throws IOException, JsonProcessingException
     {
-        throw new UnsupportedOperationException();
+        throw new UnsupportedOperationException("Can not update object of type "+intoValue.getClass().getName());
     }
 
     /**

File: src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java
Patch:
@@ -328,12 +328,11 @@ public void testDateMap() throws Exception
 
     public void testCalendarMap() throws Exception
     {
-    	 Calendar c = Calendar.getInstance();
-//    	 c.setTimeZone(TimeZone.getTimeZone("GMT"));
+    	 Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
          c.setTimeInMillis(123456000L);
          DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz");
     	 String JSON = "{ \""+fmt.format(c.getTime())+"\" : \"\", \""+new Date(0).getTime()+"\" : null }";
-    	 HashMap<Calendar,String> result=  MAPPER.readValue
+    	 HashMap<Calendar,String> result = MAPPER.readValue
     	            (JSON, new TypeReference<HashMap<Calendar,String>>() { });
     	 
     	 assertNotNull(result);

File: src/test/java/com/fasterxml/jackson/databind/ext/TestCoreXMLTypes.java
Patch:
@@ -55,7 +55,7 @@ public void testXMLGregorianCalendarSerAndDeser() throws Exception
         XMLGregorianCalendar calOut = mapper.readValue(numStr, XMLGregorianCalendar.class);
         assertNotNull(calOut);
         assertEquals(timestamp, calOut.toGregorianCalendar().getTimeInMillis());
-        
+
         // and then textual variant
         mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
         // this is ALMOST same as default for XMLGregorianCalendar... just need to unify Z/+0000

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -110,7 +110,8 @@ public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider
         jgen.writeEndObject();
     }
 
-    private final void serializeWithObjectId(Object bean, JsonGenerator jgen, SerializerProvider provider)
+    private final void serializeWithObjectId(Object bean,
+            JsonGenerator jgen, SerializerProvider provider)
         throws IOException, JsonGenerationException
     {
         final ObjectIdWriter w = _objectIdWriter;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -367,7 +367,6 @@ protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov,
         }
         ObjectIdGenerator<?> gen;
         Class<?> implClass = objectIdInfo.getGeneratorType();
-        JavaType idType;
 
         // Just one special case: Property-based generator is trickier
         if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work
@@ -392,7 +391,7 @@ protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov,
                     break;
                 }
             }
-            idType = idProp.getType();
+            JavaType idType = idProp.getType();
             gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);
             // one more thing: must ensure that ObjectIdWriter does not actually write the value:
             return ObjectIdWriter.construct(idType, null, gen);
@@ -401,7 +400,7 @@ protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov,
         // other types are simpler
         JavaType type = prov.constructType(implClass);
         // Could require type to be passed explicitly, but we should be able to find it too:
-        idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];
+        JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];
         gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);
         return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java
Patch:
@@ -296,6 +296,7 @@ public WritableObjectId findObjectId(Object forPojo,
         }
         if (generator == null) {
             generator = generatorType.newForSerialization(this);
+            _objectIdGenerators.add(generator);
         }
         WritableObjectId oid = new WritableObjectId(generator);
         _seenObjectIds.put(forPojo, oid);

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertyBasedObjectIdGenerator.java
Patch:
@@ -6,7 +6,8 @@
 import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
 import com.fasterxml.jackson.databind.ser.*;
 
-public class PropertyBasedObjectIdGenerator extends ObjectIdGenerators.PropertyGenerator
+public class PropertyBasedObjectIdGenerator
+	extends ObjectIdGenerators.PropertyGenerator
 {
     protected final BeanPropertyWriter _property;
     

File: src/test/java/com/fasterxml/jackson/databind/deser/TestInnerClass.java
Patch:
@@ -44,7 +44,6 @@ public void testSimpleNonStaticInner() throws Exception
         ObjectMapper mapper = new ObjectMapper();
         Dog input = new Dog("Smurf", true);
         String json = mapper.writeValueAsString(input);
-//System.out.println("JSON = "+json);
         Dog output = mapper.readValue(json, Dog.class);
         assertEquals("Smurf", output.name);
         assertNotNull(output.brain);

File: src/test/java/com/fasterxml/jackson/databind/node/NodeTestBase.java
Patch:
@@ -1,8 +1,9 @@
 package com.fasterxml.jackson.databind.node;
 
-import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.JsonNode;
 
+import com.fasterxml.jackson.databind.BaseMapTest;
+
 abstract class NodeTestBase extends BaseMapTest
 {
     protected void assertNodeNumbersForNonNumeric(JsonNode n)

File: src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java
Patch:
@@ -13,7 +13,7 @@
  * Basic tests for {@link JsonNode} implementations that
  * contain numeric values.
  */
-public class TestNumberNodes extends com.fasterxml.jackson.databind.BaseMapTest
+public class TestNumberNodes extends NodeTestBase
 {
     public void testInt()
     {

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -571,7 +571,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
             final ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);
             if (objectIdInfo != null) { // some code duplication here as well (from BeanDeserializerFactory)
                 ObjectIdGenerator<?> idGen;
-                Class<?> implClass = objectIdInfo.getGenerator();
+                Class<?> implClass = objectIdInfo.getGeneratorType();
                 JavaType type = ctxt.constructType(implClass);
                 JavaType idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];
                 // Property-based generator is trickier
@@ -580,7 +580,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
                     idGen = null;
                     if (true) throw new IllegalStateException("Not yet implemented!");
                 } else { // other types need to be simpler
-                    idGen = ctxt.objectIdGeneratorInstance(accessor, implClass);
+                    idGen = ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);
                 }
                 JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);
                 oir = ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser);

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -285,7 +285,7 @@ protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt,
             return null;
         }
         ObjectIdGenerator<?> gen;
-        Class<?> implClass = oidInfo.getGenerator();
+        Class<?> implClass = oidInfo.getGeneratorType();
         JavaType type = ctxt.constructType(implClass);
         // Could require type to be passed explicitly, but we should be able to find it too:
         JavaType idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];
@@ -298,7 +298,7 @@ protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt,
             gen = null;
             if (true) throw new IllegalStateException("Not yet implemented!");
         } else { // other types need to be simpler
-            gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);
+            gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), oidInfo);
         }
         return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);
     }

File: src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java
Patch:
@@ -23,5 +23,5 @@ public ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerat
 
     public String getPropertyName() { return _propertyName; }
     public Class<?> getScope() { return _scope; }
-    public Class<? extends ObjectIdGenerator<?>> getGenerator() { return _generator; }
+    public Class<? extends ObjectIdGenerator<?>> getGeneratorType() { return _generator; }
 }
\ No newline at end of file

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertyBasedObjectIdGenerator.java
Patch:
@@ -39,7 +39,7 @@ public ObjectIdGenerator<Object> forScope(Class<?> scope) {
     }
 
     @Override
-    public ObjectIdGenerator<Object> newForSerialization() {
+    public ObjectIdGenerator<Object> newForSerialization(Object context) {
         // No state, can return this
         return this;
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -278,7 +278,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                  * really belongs)
                  */
                 ObjectIdGenerator<?> gen;
-                Class<?> implClass = objectIdInfo.getGenerator();
+                Class<?> implClass = objectIdInfo.getGeneratorType();
                 JavaType type = provider.constructType(implClass);
                 JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];
                 // Property-based generator is trickier
@@ -313,7 +313,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
                     gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);
                     oiw = ObjectIdWriter.construct(idType, null, gen);
                 } else { // other types need to be simpler
-                    gen = provider.objectIdGeneratorInstance(accessor, implClass);
+                    gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);
                     oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);
                 }
             }

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -162,18 +162,19 @@ public class BeanPropertyWriter
     /**********************************************************
      */
     
+    @SuppressWarnings("unchecked")
     public BeanPropertyWriter(BeanPropertyDefinition propDef,
             AnnotatedMember member, Annotations contextAnnotations,
             JavaType declaredType,
-            JsonSerializer<Object> ser, TypeSerializer typeSer, JavaType serType,
+            JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType,
             boolean suppressNulls, Object suppressableValue)
     {
         
         _member = member;
         _contextAnnotations = contextAnnotations;
         _name = new SerializedString(propDef.getName());
         _declaredType = declaredType;
-        _serializer = ser;
+        _serializer = (JsonSerializer<Object>) ser;
         _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyMap() : null;
         _typeSerializer = typeSer;
         _cfgSerializationType = serType;

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -54,8 +54,7 @@ public Annotations getClassAnnotations() {
      *    of container type)
      */
     protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef,
-            JavaType declaredType,
-            JsonSerializer<Object> ser,
+            JavaType declaredType, JsonSerializer<?> ser,
             TypeSerializer typeSer, TypeSerializer contentTypeSer,
             AnnotatedMember am, boolean defaultUseStaticTyping)
     {

File: src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java
Patch:
@@ -197,7 +197,7 @@ public void resolve(SerializerProvider provider) {
     /* Unit tests
     /**********************************************************
      */
-
+    
     // Test to verify that contextual serializer can make use of property
     // (method, field) annotations.
     public void testMethodAnnotations() throws Exception
@@ -270,6 +270,7 @@ public void testContextualViaAnnotation() throws Exception
         assertEquals("{\"value\":\"prefix->abc\"}", mapper.writeValueAsString(bean));
     }
 
+    /*
     // [JACKSON-647]: is resolve() called for contextual instances?
     public void testResolveOnContextual() throws Exception
     {
@@ -286,4 +287,5 @@ public void testContextualArrayElement() throws Exception
         ContextualArrayElementBean beans = new ContextualArrayElementBean("456");
         assertEquals("{\"beans\":[\"elem->456\"]}", mapper.writeValueAsString(beans));
     }
+    */
 }

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -11,7 +11,6 @@
 import com.fasterxml.jackson.databind.cfg.DeserializationConfig;
 import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
 import com.fasterxml.jackson.databind.deser.*;
-import com.fasterxml.jackson.databind.deser.impl.DeserializerCache;
 import com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer;
 import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
 import com.fasterxml.jackson.databind.introspect.Annotated;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -7,7 +7,6 @@
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.cfg.DeserializationConfig;
 import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
-import com.fasterxml.jackson.databind.deser.impl.DeserializerCache;
 import com.fasterxml.jackson.databind.deser.std.JdkDeserializers;
 import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;
 import com.fasterxml.jackson.databind.introspect.*;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -128,8 +128,10 @@ public JsonSerializer<Object> createSerializer(SerializerProvider prov,
         if (ser != null) {
             return (JsonSerializer<Object>) ser;
         }
+        
         // Next: we may have annotations that further define types to use...
         JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);
+
         // and if so, we consider it implicit "force static typing" instruction
         boolean staticTyping = (type != origType);
 

File: src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java
Patch:
@@ -1,9 +1,9 @@
-package com.fasterxml.jackson.databind.ser.impl;
+package com.fasterxml.jackson.databind.ser;
 
 import java.util.*;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.ser.ResolvableSerializer;
+import com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
 
 /**
  * Simple cache object that allows for doing 2-level lookups: first level is

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java
Patch:
@@ -39,7 +39,7 @@ protected IndexedStringListSerializer() {
 
     @SuppressWarnings("unchecked")
     public IndexedStringListSerializer(JsonSerializer<?> ser) {
-        super(List.class, null);
+        super(List.class);
         _serializer = (JsonSerializer<String>) ser;
         
     }
@@ -61,7 +61,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
     {
         JsonSerializer<?> ser = _serializer;
         if (ser == null) {
-            ser = provider.findValueSerializer(String.class, _property);
+            ser = provider.findValueSerializer(String.class, property);
         } else if (ser instanceof ContextualSerializer) {
             ser = ((ContextualSerializer) ser).createContextual(provider, property);
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/JsonSerializerMap.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Map;
 
 import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.ser.impl.SerializerCache.TypeKey;
+import com.fasterxml.jackson.databind.ser.SerializerCache.TypeKey;
 
 /**
  * Specialized read-only map used for storing and accessing serializers by type.

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.ser.impl.SerializerCache.TypeKey;
+import com.fasterxml.jackson.databind.ser.SerializerCache.TypeKey;
 
 /**
  * Optimized lookup table for accessing two types of serializers; typed

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -76,7 +76,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
     {
         JsonSerializer<?> ser = _elementSerializer;
         if (ser == null) {
-            ser = provider.findValueSerializer(String.class, _property);
+            ser = provider.findValueSerializer(String.class, property);
         } else if (ser instanceof ContextualSerializer) {
             ser = ((ContextualSerializer) ser).createContextual(provider, property);
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java
Patch:
@@ -40,7 +40,7 @@ protected StringCollectionSerializer() {
     @SuppressWarnings("unchecked")
     protected StringCollectionSerializer(JsonSerializer<?> ser)
     {
-        super(Collection.class, null);
+        super(Collection.class);
         _serializer = (JsonSerializer<String>) ser;
     }        
     
@@ -61,7 +61,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
     {
         JsonSerializer<?> ser = _serializer;
         if (ser == null) {
-            ser = provider.findValueSerializer(String.class, _property);
+            ser = provider.findValueSerializer(String.class, property);
         } else if (ser instanceof ContextualSerializer) {
             ser = ((ContextualSerializer) ser).createContextual(provider, property);
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -340,6 +340,7 @@ public void resolve(SerializerProvider provider)
                     continue;
                 }
             }
+            
             JsonSerializer<Object> ser = provider.findValueSerializer(type, prop);
             /* 04-Feb-2010, tatu: We may have stashed type serializer for content types
              *   too, earlier; if so, it's time to connect the dots here:

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -188,7 +188,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
         JsonSerializer<?> ser = _valueSerializer;
         if (ser == null) {
             if (_valueTypeIsStatic) {
-                ser = provider.findValueSerializer(_valueType, _property);
+                ser = provider.findValueSerializer(_valueType, property);
             }
         } else if (ser instanceof ContextualSerializer) {
             ser = ((ContextualSerializer) ser).createContextual(provider, property);
@@ -202,7 +202,7 @@ public JsonSerializer<?> createContextual(SerializerProvider provider,
          */
         JsonSerializer<?> keySer = _keySerializer;
         if (keySer == null) {
-            keySer = provider.findKeySerializer(_keyType, _property);
+            keySer = provider.findKeySerializer(_keyType, property);
         } else if (keySer instanceof ContextualSerializer) {
             keySer = ((ContextualSerializer) keySer).createContextual(provider, property);
         }

File: src/test/java/com/fasterxml/jackson/databind/creators/TestCreators.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.deser;
+package com.fasterxml.jackson.databind.creators;
 
 import java.util.*;
 

File: src/test/java/com/fasterxml/jackson/databind/creators/TestCreators2.java
Patch:
@@ -1,5 +1,5 @@
 
-package com.fasterxml.jackson.databind.deser;
+package com.fasterxml.jackson.databind.creators;
 
 import java.io.IOException;
 import java.util.List;

File: src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java
Patch:
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.module;
+package com.fasterxml.jackson.databind.creators;
 
 import java.util.*;
 

File: src/main/java/com/fasterxml/jackson/databind/JsonNode.java
Patch:
@@ -343,10 +343,10 @@ public byte[] binaryValue() throws IOException
      */
 
     /**
-     * Method that will return valid String representation of
+     * Method that will return a valid String representation of
      * the container value, if the node is a value node
-     * (method {@link #isValueNode} returns true), otherwise
-     * empty String.
+     * (method {@link #isValueNode} returns true),
+     * otherwise empty String.
      */
     public abstract String asText();
 

File: src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java
Patch:
@@ -39,7 +39,7 @@ private MissingNode() { }
     public boolean isMissingNode() { return true; }
 
     @Override
-    public String asText() { return null; }
+    public String asText() { return ""; }
     
     @Override
     public int asInt(int defaultValue) {

File: src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java
Patch:
@@ -143,7 +143,8 @@ public void testMissing()
     {
         MissingNode n = MissingNode.getInstance();
         assertEquals(JsonToken.NOT_AVAILABLE, n.asToken());
-        assertNull(n.asText());
+        // as per [JACKSON-775]
+        assertEquals("", n.asText());
         assertStandardEquals(n);
         assertEquals("", n.toString());
 

File: src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java
Patch:
@@ -1,9 +1,8 @@
-package com.fasterxml.jackson.databind.tree;
+package com.fasterxml.jackson.databind.node;
 
 import java.io.*;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.node.*;
 
 /**
  * This unit test suite tries to verify that JsonNode-based trees

File: src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperMaps.java
Patch:
@@ -1,9 +1,8 @@
-package com.fasterxml.jackson.databind.tree;
+package com.fasterxml.jackson.databind.node;
 
 import java.util.*;
 
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.node.*;
 import com.fasterxml.jackson.test.BaseTest;
 
 /**

File: src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperSerializer.java
Patch:
@@ -1,13 +1,11 @@
-package com.fasterxml.jackson.databind.tree;
+package com.fasterxml.jackson.databind.node;
 
 import static org.junit.Assert.*;
 
 import java.io.*;
 
-
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.node.*;
 import com.fasterxml.jackson.test.BaseTest;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -140,9 +140,9 @@ public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,
 
         @Override
         public TypeSerializer buildTypeSerializer(SerializationConfig config,
-                JavaType baseType, Collection<NamedType> subtypes, BeanProperty property)
+                JavaType baseType, Collection<NamedType> subtypes)
         {
-            return useForType(baseType) ? super.buildTypeSerializer(config, baseType, subtypes, property) : null;            
+            return useForType(baseType) ? super.buildTypeSerializer(config, baseType, subtypes) : null;            
         }
 
         /**

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
-import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.DeserializationConfig;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializationConfig;
@@ -69,8 +68,7 @@ public interface TypeResolverBuilder<T extends TypeResolverBuilder<T>>
      *    handle; super type of all types it will be used for.
      */
     public TypeSerializer buildTypeSerializer(SerializationConfig config,
-            JavaType baseType, Collection<NamedType> subtypes,
-            BeanProperty property);            
+            JavaType baseType, Collection<NamedType> subtypes);
 
     /**
      * Method for building type deserializer based on current configuration

File: src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java
Patch:
@@ -62,7 +62,7 @@ public abstract JsonSerializer<Object> createSerializer(SerializerProvider prov,
      * @return Type serializer to use for the base type, if one is needed; null if not.
      */
     public abstract TypeSerializer createTypeSerializer(SerializationConfig config,
-            JavaType baseType, BeanProperty property)
+            JavaType baseType)
         throws JsonMappingException;
 
     /**

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java
Patch:
@@ -43,7 +43,7 @@ public class StringArraySerializer
      */
     
     protected StringArraySerializer() {
-        super(String[].class, null, null);
+        super(String[].class, null);
         _elementSerializer = null;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java
Patch:
@@ -68,7 +68,7 @@ protected CreatorProperty(CreatorProperty src, String newName) {
         _injectableValueId = src._injectableValueId;
     }
     
-    protected CreatorProperty(CreatorProperty src, JsonDeserializer<Object> deser) {
+    protected CreatorProperty(CreatorProperty src, JsonDeserializer<?> deser) {
         super(src, deser);
         _annotated = src._annotated;
         _injectableValueId = src._injectableValueId;
@@ -80,7 +80,7 @@ public CreatorProperty withName(String newName) {
     }
     
     @Override
-    public CreatorProperty withValueDeserializer(JsonDeserializer<Object> deser) {
+    public CreatorProperty withValueDeserializer(JsonDeserializer<?> deser) {
         return new CreatorProperty(this, deser);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java
Patch:
@@ -47,8 +47,8 @@ public SimpleKeyDeserializers addDeserializer(Class<?> forClass, KeyDeserializer
      */
 
     @Override
-    public KeyDeserializer findKeyDeserializer(JavaType type, DeserializationConfig config, 
-            BeanDescription beanDesc, BeanProperty property)
+    public KeyDeserializer findKeyDeserializer(JavaType type,
+            DeserializationConfig config, BeanDescription beanDesc)
     {
         if (_classMappings == null) {
             return null;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -567,7 +567,7 @@ protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt,
          * Returns null if no annotations, in which case binding will
          * be done at a later point.
          */
-        JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt, setter, property);
+        JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt, setter);
         if (deser != null) {
             return new SettableAnyProperty(property, setter, type, deser);
         }
@@ -613,7 +613,7 @@ protected SettableBeanProperty constructSettableProperty(DeserializationContext
         /* First: does the Method specify the deserializer to use?
          * If so, let's use it.
          */
-        JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator, property);
+        JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
         type = modifyTypeByAnnotation(ctxt, mutator, type, property);
         TypeDeserializer typeDeser = type.getTypeHandler();
         SettableBeanProperty prop;
@@ -662,7 +662,7 @@ protected SettableBeanProperty constructSetterlessProperty(DeserializationContex
          */
         BeanProperty.Std property = new BeanProperty.Std(name, type, beanDesc.getClassAnnotations(), getter);
         // @TODO: create BeanProperty to pass?
-        JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, getter, property);
+        JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, getter);
         type = modifyTypeByAnnotation(ctxt, getter, type, property);
         TypeDeserializer typeDeser = type.getTypeHandler();
         SettableBeanProperty prop = new SettableBeanProperty.SetterlessProperty(name, type, typeDeser,

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -141,7 +141,8 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         // also, often value deserializer is resolved here:
         JsonDeserializer<Object> valueDeser = _valueDeserializer;
         if (valueDeser == null) {
-            valueDeser = (JsonDeserializer<Object>)ctxt.findValueDeserializer(_collectionType.getContentType(), property);
+            valueDeser = (JsonDeserializer<Object>)ctxt.findContextualValueDeserializer(
+                    _collectionType.getContentType(), property);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java
Patch:
@@ -71,11 +71,11 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         // quite as clean as it ought to be)
         JsonDeserializer<?> kd = _keyDeserializer;
         if (kd == null) {
-            kd = ctxt.findValueDeserializer(_mapType.getKeyType(), property);
+            kd = ctxt.findContextualValueDeserializer(_mapType.getKeyType(), property);
         }
         JsonDeserializer<?> vd = _valueDeserializer;
         if (vd == null) {
-            vd = ctxt.findValueDeserializer(_mapType.getContentType(), property);
+            vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);
         }
         return withResolved(kd, vd);
     }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java
Patch:
@@ -59,7 +59,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         if (_enumDeserializer != null) {
             return this;
         }
-        return withDeserializer(ctxt.findValueDeserializer(_enumType, property));
+        return withDeserializer(ctxt.findContextualValueDeserializer(_enumType, property));
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java
Patch:
@@ -276,7 +276,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
                 return this;
             }
             return new AtomicReferenceDeserializer(_referencedType,
-                    ctxt.findValueDeserializer(_referencedType, property));
+                    ctxt.findContextualValueDeserializer(_referencedType, property));
         }
     }
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -232,7 +232,7 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         }
         JsonDeserializer<Object> vd = _valueDeserializer;
         if (vd == null) {
-            vd = ctxt.findValueDeserializer(_mapType.getContentType(), property);
+            vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);
         }
         TypeDeserializer vtd = _valueTypeDeserializer;
         if (vtd != null) {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -89,8 +89,8 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         if (elemTypeDeser != null) {
             elemTypeDeser = elemTypeDeser.forProperty(property);
         }
-        return withDeserializer(ctxt.findValueDeserializer(_arrayType.getContentType(), property),
-                elemTypeDeser);
+        return withDeserializer(ctxt.findContextualValueDeserializer(
+                _arrayType.getContentType(), property), elemTypeDeser);
     }
     
     /*

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -609,7 +609,7 @@ protected JsonDeserializer<Object> findDeserializer(DeserializationContext ctxt,
             JavaType type, BeanProperty property)
         throws JsonMappingException
     {
-        return ctxt.findValueDeserializer(type, property);
+        return ctxt.findContextualValueDeserializer(type, property);
     }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -94,7 +94,8 @@ public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         if (valueDeser == null) {
             // And we may also need to get deserializer for String
-            JsonDeserializer<?> deser = ctxt.findValueDeserializer(_collectionType.getContentType(), property);
+            JsonDeserializer<?> deser = ctxt.findContextualValueDeserializer(
+                    _collectionType.getContentType(), property);
             valueDeser = (JsonDeserializer<String>) deser;
             if (isDefaultDeserializer(valueDeser)) {
                 valueDeser = null;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -163,7 +163,7 @@ protected final JsonDeserializer<Object> _findDeserializer(DeserializationContex
                     if (_baseType != null && _baseType.getClass() == type.getClass()) {
                         type = _baseType.narrowBy(type.getRawClass());
                     }
-                    deser = ctxt.findValueDeserializer(type, _property);
+                    deser = ctxt.findContextualValueDeserializer(type, _property);
                 }
                 _deserializers.put(typeId, deser);
             }
@@ -179,7 +179,8 @@ protected final JsonDeserializer<Object> _findDefaultImplDeserializer(Deserializ
         }
         synchronized (_defaultImpl) {
             if (_defaultImplDeserializer == null) {
-                _defaultImplDeserializer = ctxt.findValueDeserializer(_defaultImpl, _property);
+                _defaultImplDeserializer = ctxt.findContextualValueDeserializer(
+                        _defaultImpl, _property);
             }
             return _defaultImplDeserializer;
         }

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -133,9 +133,9 @@ public DefaultTypeResolverBuilder(DefaultTyping t) {
 
         @Override
         public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,
-                JavaType baseType, Collection<NamedType> subtypes, BeanProperty property)
+                JavaType baseType, Collection<NamedType> subtypes)
         {
-            return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes, property) : null;
+            return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes) : null;
         }
 
         @Override

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java
Patch:
@@ -37,14 +37,14 @@ public class SimpleFilterProvider extends FilterProvider
      */
     
     public SimpleFilterProvider() {
-        _filtersById = new HashMap<String,BeanPropertyFilter>();
+        this(new HashMap<String,BeanPropertyFilter>());
     }
 
     /**
      * @param mapping Mapping from id to filter; used as is, no copy is made.
      */
     public SimpleFilterProvider(Map<String,BeanPropertyFilter> mapping) {
-        _filtersById = new HashMap<String,BeanPropertyFilter>();
+        _filtersById = mapping;
     }
     
     /**

File: src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
Patch:
@@ -374,7 +374,7 @@ public ObjectMapper(JsonFactory jf)
      * 
      * @param jf JsonFactory to use: if null, a new {@link MappingJsonFactory} will be constructed
      * @param sp SerializerProvider to use: if null, a {@link StdSerializerProvider} will be constructed
-     * @param dp DeserializerCache to use: if null, a {@link StdDeserializerProvider} will be constructed
+     * @param dp DeserializerCache to use
      */
     public ObjectMapper(JsonFactory jf,
             SerializerProvider sp, DeserializerCache dp)

File: src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java
Patch:
@@ -58,7 +58,6 @@ public JsonDeserializer<?> findArrayDeserializer(ArrayType type,
      * 
      * @param type Type of collection instances to deserialize
      * @param config Configuration in effect
-     * @param property Property that contains array value  (null for root values)
      * @param beanDesc Definition of the enumeration type that contains class annotations and
      *    other information typically needed for building deserializers
      * @param property Property that contains array value  (null for root values)

File: src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java
Patch:
@@ -803,7 +803,7 @@ protected JsonSerializer<Object> _handleContextualResolvable(JsonSerializer<Obje
     /**
      * Standard implementation used by {@link ObjectMapper}; just implements
      * <code>createInstance</code> method which is abstract in
-     * {@link StdDeserializerProvider}
+     * {@link StdSerializerProvider}
      */
     public final static class Impl extends StdSerializerProvider
     {

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -261,6 +261,7 @@ public final Object deserialize(JsonParser jp, DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         JsonToken t = jp.getCurrentToken();
+        
         if (t == JsonToken.VALUE_NULL) {
             return (_nullProvider == null) ? null : _nullProvider.nullValue(ctxt);
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -222,8 +222,9 @@ protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name)
         _typeSerializer = base._typeSerializer;
         _nonTrivialBaseType = base._nonTrivialBaseType;
     }
-    
-    public BeanPropertyWriter withName(String newName) {
+
+    public BeanPropertyWriter rename(NameTransformer transformer) {
+        String newName = transformer.transform(_name.getValue());
         if (newName.equals(_name.toString())) {
             return this;
         }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -120,7 +120,7 @@ private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props,
         for (int i = 0; i < len; ++i) {
             BeanPropertyWriter bpw = props[i];
             if (bpw != null) {
-                result[i] = bpw.withName(transformer.transform(bpw.getName()));
+                result[i] = bpw.rename(transformer);
             }
         }
         return result;

File: src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java
Patch:
@@ -44,7 +44,7 @@ public UnwrappingWithCreator(@JsonProperty("name") String n) {
         }
     }
     
-    static class Location {
+    final static class Location {
         public int x;
         public int y;
 

File: src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
Patch:
@@ -1084,6 +1084,8 @@ public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonP
             ByteArrayBuilder builder = _byteBuilder;
             if (builder == null) {
                 _byteBuilder = builder = new ByteArrayBuilder(100);
+            } else {
+                _byteBuilder.reset();
             }
             _decodeBase64(str, builder, b64variant);
             return builder.toByteArray();

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java
Patch:
@@ -25,7 +25,7 @@ public class AsExternalTypeSerializer
    protected final String _typePropertyName;
 
    public AsExternalTypeSerializer(TypeIdResolver idRes, BeanProperty property,
-           String propName)
+          String propName)
    {
        super(idRes, property);
        _typePropertyName = propName;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java
Patch:
@@ -15,7 +15,6 @@
  * uses a JSON Array wrapper (similar to how
  * {@link As#WRAPPER_ARRAY} always works) as a fallback.
  * 
- * @since 1.5
  * @author tatus
  */
 public class AsPropertyTypeSerializer

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java
Patch:
@@ -16,8 +16,7 @@
  * just use a wrapping array with type information as the first element
  * and value as second.
  * 
- * @since 1.5
- * @author tatus
+ * @author tatu
  */
 public class AsWrapperTypeSerializer
     extends TypeSerializerBase

File: src/main/java/com/fasterxml/jackson/databind/jsontype/NamedType.java
Patch:
@@ -5,7 +5,6 @@
  * as external identifier
  * 
  * @author tatu
- * @since 1.5
  */
 public final class NamedType
 {

File: src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java
Patch:
@@ -129,7 +129,7 @@ public Object deserialize(JsonParser jp, DeserializationContext ctxt)
             }
             String value = jp.getText();
             try {
-                return _factory.invoke(_enumClass, value);
+                return _factory.invoke(null, value);
             } catch (Exception e) {
                 ClassUtil.unwrapAndThrowAsIAE(e);
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -266,7 +266,7 @@ protected final void _readAndBind(JsonParser jp, DeserializationContext ctxt,
         for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) {
             // Must point to field name
             String fieldName = jp.getCurrentName();
-            Object key = (keyDes == null) ? fieldName : keyDes.deserializeKey(fieldName, ctxt);
+            Object key = keyDes.deserializeKey(fieldName, ctxt);
             // And then the value...
             t = jp.nextToken();
             if (_ignorableProperties != null && _ignorableProperties.contains(fieldName)) {
@@ -331,7 +331,7 @@ public Map<Object,Object> _deserializeUsingCreator(JsonParser jp, Deserializatio
             }
             // other property? needs buffering
             String fieldName = jp.getCurrentName();
-            Object key = (_keyDeserializer == null) ? fieldName : _keyDeserializer.deserializeKey(fieldName, ctxt);
+            Object key = _keyDeserializer.deserializeKey(fieldName, ctxt);
             Object value;            
             if (t == JsonToken.VALUE_NULL) {
                 value = null;

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -260,8 +260,8 @@ public JsonDeserializer<?> createCollectionDeserializer(DeserializationConfig co
         if (contentDeser == null) { // not defined by annotation
             // One special type: EnumSet:
             if (EnumSet.class.isAssignableFrom(collectionClass)) {
-                return new EnumSetDeserializer(constructEnumResolver(contentType.getRawClass(), config,
-                        _findJsonValueFor(config, contentType)));
+                return new EnumSetDeserializer(contentType.getRawClass(),
+                        createEnumDeserializer(config, p, contentType, property));
             }
             // But otherwise we can just use a generic value deserializer:
             // 'null' -> collections have no referring fields

File: src/main/java/com/fasterxml/jackson/databind/BeanProperty.java
Patch:
@@ -22,8 +22,6 @@
  * and deserializers for futher use; mostly to retain access
  * to annotations when dynamically locating handlers for
  * sub-properties or dynamic types.
- *
- * @since 1.7
  */
 public interface BeanProperty extends Named
 {
@@ -97,7 +95,7 @@ public Std withType(JavaType type) {
         
         @Override
         public <A extends Annotation> A getAnnotation(Class<A> acls) {
-            return _member.getAnnotation(acls);
+            return (_member == null) ? null : _member.getAnnotation(acls);
         }
 
         @Override

File: src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java
Patch:
@@ -769,11 +769,12 @@ public <T extends BeanDescription> T introspect(JavaType type) {
      */
 
     @SuppressWarnings("unchecked")
-    public JsonSerializer<Object> serializerInstance(Annotated annotated, Class<? extends JsonSerializer<?>> serClass)
+    public JsonSerializer<Object> serializerInstance(Annotated annotated, Class<?> serClass)
     {
         HandlerInstantiator hi = getHandlerInstantiator();
         if (hi != null) {
-            JsonSerializer<?> ser = hi.serializerInstance(this, annotated, serClass);
+            JsonSerializer<?> ser = hi.serializerInstance(this, annotated,
+                    (Class<JsonSerializer<?>>)serClass);
             if (ser != null) {
                 return (JsonSerializer<Object>) ser;
             }

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -919,6 +919,4 @@ protected Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneCl
         }
         return cls;
     }
-
-    }
-
+}

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IndexedStringListSerializer.java
Patch:
@@ -12,15 +12,14 @@
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ResolvableSerializer;
+import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**
  * Efficient implement for serializing {@link List}s that contains Strings and are random-accessible.
  * The only complexity is due to possibility that serializer for {@link String}
  * may be overridde; because of this, logic is needed to ensure that the default
  * serializer is in use to use fastest mode, or if not, to defer to custom
  * String serializer.
- * 
- * @since 1.7
  */
 @JacksonStdImpl
 public final class IndexedStringListSerializer
@@ -42,7 +41,7 @@ public IndexedStringListSerializer(BeanProperty property) {
     public void resolve(SerializerProvider provider) throws JsonMappingException
     {
         JsonSerializer<?> ser = provider.findValueSerializer(String.class, _property);
-        if (!isDefaultSerializer(ser)) {
+        if (!ClassUtil.isJacksonStdImpl(ser)) {
             _serializer = (JsonSerializer<String>) ser;
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StringCollectionSerializer.java
Patch:
@@ -12,6 +12,7 @@
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ResolvableSerializer;
+import com.fasterxml.jackson.databind.util.ClassUtil;
 
 /**
  * Efficient implement for serializing {@link Collection}s that contain Strings.
@@ -41,7 +42,7 @@ public StringCollectionSerializer(BeanProperty property) {
     public void resolve(SerializerProvider provider) throws JsonMappingException
     {
         JsonSerializer<?> ser = provider.findValueSerializer(String.class, _property);
-        if (!isDefaultSerializer(ser)) {
+        if (!ClassUtil.isJacksonStdImpl(ser)) {
             _serializer = (JsonSerializer<String>) ser;
         }
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -348,10 +348,10 @@ public void resolve(SerializerProvider provider)
                 TypeSerializer typeSer = type.getContentType().getTypeHandler();
                 if (typeSer != null) {
                     // for now, can do this only for standard containers...
-                    if (ser instanceof ContainerSerializerBase<?>) {
+                    if (ser instanceof ContainerSerializer<?>) {
                         // ugly casts... but necessary
                         @SuppressWarnings("unchecked")
-                        JsonSerializer<Object> ser2 = (JsonSerializer<Object>)((ContainerSerializerBase<?>) ser).withValueTypeSerializer(typeSer);
+                        JsonSerializer<Object> ser2 = (JsonSerializer<Object>)((ContainerSerializer<?>) ser).withValueTypeSerializer(typeSer);
                         ser = ser2;
                     }
                 }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java
Patch:
@@ -10,6 +10,7 @@
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
+import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
 
 
@@ -30,7 +31,7 @@ public CollectionSerializer(JavaType elemType, boolean staticTyping, TypeSeriali
     }
     
     @Override
-    public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {
+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
         return new CollectionSerializer(_elementType, _staticTyping, vts, _property, _elementSerializer);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java
Patch:
@@ -10,6 +10,7 @@
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
+import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 
 public class EnumSetSerializer
     extends AsArraySerializerBase<EnumSet<? extends Enum<?>>>
@@ -20,7 +21,7 @@ public EnumSetSerializer(JavaType elemType, BeanProperty property)
     }
 
     @Override
-    public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {
+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
         // no typing for enums (always "hard" type)
         return this;
     }

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java
Patch:
@@ -11,6 +11,7 @@
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
+import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 
 @JacksonStdImpl
 public class IterableSerializer
@@ -22,7 +23,7 @@ public IterableSerializer(JavaType elemType, boolean staticTyping, TypeSerialize
     }
 
     @Override
-    public ContainerSerializerBase<?> _withValueTypeSerializer(TypeSerializer vts) {
+    public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
         return new IterableSerializer(_elementType, _staticTyping, vts, _property);
     }
 

File: src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java
Patch:
@@ -12,14 +12,12 @@
  * This is typically needed to support creation of
  * {@link MapLikeType} and {@link CollectionLikeType} instances,
  * as those can not be constructed in generic fashion.
- * 
- * @since 1.8
  */
 public abstract class TypeModifier
 {
     /**
      * Method called to let modifier change constructed type definition.
-     * Note that as of version 1.8 this is only guaranteed to be called for
+     * Note that this is only guaranteed to be called for
      * non-container types ("simple" types not recognized as arrays,
      * <code>java.util.Collection</code> or <code>java.util.Map</code>).
      * 

File: src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java
Patch:
@@ -103,7 +103,7 @@ public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,
      * Default implementation just returns 'this'
      * indicating that no unwrapped variant exists
      */
-    public JsonDeserializer<T> unwrappingDeserializer() {
+    public JsonDeserializer<T> unwrappingDeserializer(String prefix) {
         return this;
     }
     

File: src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java
Patch:
@@ -33,8 +33,10 @@ public abstract class JsonSerializer<T>
      *<p>
      * Default implementation just returns serializer as-is,
      * indicating that no unwrapped variant exists
+     * 
+     * @param prefix Prefix to use for embedded properties, if any
      */
-    public JsonSerializer<T> unwrappingSerializer() {
+    public JsonSerializer<T> unwrappingSerializer(String prefix) {
         return this;
     }
 

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -79,8 +79,8 @@ public static BeanSerializer createDummy(Class<?> forType)
     }
 
     @Override
-    public JsonSerializer<Object> unwrappingSerializer() {
-        return new UnwrappingBeanSerializer(this);
+    public JsonSerializer<Object> unwrappingSerializer(String prefix) {
+        return new UnwrappingBeanSerializer(this, prefix);
     }
     
     /*

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -136,9 +136,9 @@ protected BeanPropertyWriter buildWriter(String name, JavaType declaredType,
                 ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);
         
         // [JACKSON-132]: Unwrapping
-        Boolean unwrapped = _annotationIntrospector.shouldUnwrapProperty(am);
-        if (unwrapped != null && unwrapped.booleanValue()) {
-            bpw = bpw.unwrappingWriter();
+        String unwrapPrefix = _annotationIntrospector.findUnwrapPrefix(am);
+        if (unwrapPrefix != null) {
+            bpw = bpw.unwrappingWriter(unwrapPrefix);
         }
         return bpw;
     }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java
Patch:
@@ -78,14 +78,16 @@ public class B extends Super {}
     /* Unit tests
     /**********************************************************
      */
+
+    private final ObjectMapper MAPPER = new ObjectMapper();
     
     /**
      * First things first, let's ensure we can serialize using
      * class name, written as main-level property name
      */
     public void testSimpleClassAsProperty() throws Exception
     {
-        Map<String,Object> result = writeAndMap(new Cat("Beelzebub", "tabby"));
+        Map<String,Object> result = writeAndMap(MAPPER, new Cat("Beelzebub", "tabby"));
         assertEquals(3, result.size());
         assertEquals("Beelzebub", result.get("name"));
         assertEquals("tabby", result.get("furColor"));

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
Patch:
@@ -47,8 +47,8 @@ public JavaType typeFromId(String id)
          *    to do translation when necessary
          */
         if (id.indexOf('<') > 0) {
-            JavaType t = TypeFactory.fromCanonical(id);
-            // note: may want to try combining with specialization (esp for EnumMap)
+            JavaType t = _typeFactory.constructFromCanonical(id);
+            // note: may want to try combining with specialization (esp for EnumMap)?
             return t;
         }
         try {

File: src/main/java/com/fasterxml/jackson/databind/util/LRUMap.java
Patch:
@@ -5,8 +5,6 @@
 
 /**
  * Helper for simple bounded LRU maps used for reusing lookup values.
- * 
- * @since 1.7
  */
 @SuppressWarnings("serial")
 public class LRUMap<K,V> extends LinkedHashMap<K,V>

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -100,7 +100,7 @@ public void resolve(DeserializationConfig config, DeserializerProvider provider)
     {
         // May need to resolve types for delegate-based creators:
         if (_valueInstantiator.canCreateUsingDelegate()) {
-            JavaType delegateType = _valueInstantiator.getDelegateType();
+            JavaType delegateType = _valueInstantiator.getDelegateType(config);
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -101,7 +101,7 @@ public void resolve(DeserializationConfig config, DeserializerProvider provider)
         // May need to resolve types for delegate-based creators:
         AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
         if (delegateCreator != null) {
-            JavaType delegateType = _valueInstantiator.getDelegateType();
+            JavaType delegateType = _valueInstantiator.getDelegateType(config);
             // Need to create a temporary property to allow contextual deserializers:
             BeanProperty.Std property = new BeanProperty.Std(null,
                     delegateType, null, delegateCreator);

File: src/test/java/com/fasterxml/jackson/databind/deser/TestGenericsBounded.java
Patch:
@@ -1,4 +1,4 @@
-package org.codehaus.jackson.map.deser;
+package com.fasterxml.jackson.databind.deser;
 
 import java.util.*;
 

File: src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForClass.java
Patch:
@@ -28,11 +28,11 @@ static class BaseClass
         public void setA(String v) { a = "XXX"+v; }
     }
 
-    @JsonAutoDetect(getterVisibility=Visibility.ANY, fieldVisibility=Visibility.ANY)
+    @JsonAutoDetect(setterVisibility=Visibility.ANY, fieldVisibility=Visibility.ANY)
     static class LeafClass
         extends BaseClass { }
 
-    @JsonAutoDetect(getterVisibility=Visibility.NONE, fieldVisibility=Visibility.NONE)
+    @JsonAutoDetect(setterVisibility=Visibility.NONE, fieldVisibility=Visibility.NONE)
     interface MixIn { }
 
     /*

File: src/main/java/com/fasterxml/jackson/databind/ext/JodaSerializers.java
Patch:
@@ -21,8 +21,6 @@
  * Since version 1.5, more types are supported. These types use slightly
  * different approach to serialization than core date types: "timestamp"
  * notation is implemented using JSON arrays, for improved readability.
- *
- * @since 1.4
  */
 public class JodaSerializers
     implements Provider<Map.Entry<Class<?>,JsonSerializer<?>>>

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForEnums.java
Patch:
@@ -58,7 +58,7 @@ public void testSimpleEnumsInObjectArray() throws Exception
         
         // Typing is needed for enums
         String json = m.writeValueAsString(new Object[] { TestEnum.A });
-        assertEquals("[[\"org.codehaus.jackson.map.jsontype.TestDefaultForEnums$TestEnum\",\"A\"]]", json);
+        assertEquals("[[\"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums$TestEnum\",\"A\"]]", json);
 
         // and let's verify we get it back ok as well:
         Object[] value = m.readValue(json, Object[].class);
@@ -71,7 +71,7 @@ public void testSimpleEnumsAsField() throws Exception
         ObjectMapper m = new ObjectMapper();
         m.enableDefaultTyping();
         String json = m.writeValueAsString(new EnumHolder(TestEnum.B));
-        assertEquals("{\"value\":[\"org.codehaus.jackson.map.jsontype.TestDefaultForEnums$TestEnum\",\"B\"]}", json);
+        assertEquals("{\"value\":[\"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums$TestEnum\",\"B\"]}", json);
         EnumHolder holder = m.readValue(json, EnumHolder.class);
         assertSame(TestEnum.B, holder.value);
     }

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java
Patch:
@@ -326,7 +326,7 @@ public void testFeature432() throws Exception
         ObjectMapper mapper = new ObjectMapper();
         mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, "*CLASS*");
         String json = mapper.writeValueAsString(new BeanHolder(new StringBean("punny")));
-        assertEquals("{\"bean\":{\"*CLASS*\":\"org.codehaus.jackson.map.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json);
+        assertEquals("{\"bean\":{\"*CLASS*\":\"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\",\"name\":\"punny\"}}", json);
     }
     
     /*

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java
Patch:
@@ -145,7 +145,7 @@ public void testEmptyBean() throws Exception
         mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
         mapper.configure(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS, false);
         json = mapper.writeValueAsString(new EmptyNonFinal());
-        assertEquals("[\"org.codehaus.jackson.map.jsontype.TestSubtypes$EmptyNonFinal\",{}]", json);
+        assertEquals("[\"com.fasterxml.jackson.databind.jsontype.TestSubtypes$EmptyNonFinal\",{}]", json);
     }
 
     public void testDefaultImpl() throws Exception

File: src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java
Patch:
@@ -196,7 +196,7 @@ public void testTypedMaps() throws Exception
         list.add(new A());
         map.put(1L, list);
         String json = mapper.writerWithType(new TypeReference<Map<Long, Collection<Super>>>() {}).writeValueAsString(map);
-        assertTrue(json, json.contains("@class"));
+        assertTrue("JSON does not contain '@class': "+json, json.contains("@class"));
     }
 }
 

File: src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java
Patch:
@@ -268,7 +268,7 @@ public void testCanonicalNames()
         // And then EnumMap (actual use case for us)
         t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class);
         can = t.toCanonical();
-        assertEquals("java.util.EnumMap<org.codehaus.jackson.map.type.TestTypeFactory$EnumForCanonical,java.lang.String>",
+        assertEquals("java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>",
                 can);
         assertEquals(t, TypeFactory.fromCanonical(can));
         

File: src/test/java/com/fasterxml/jackson/databind/util/ISO8601DateFormatTest.java
Patch:
@@ -25,17 +25,17 @@ public void setUp()
         df = new ISO8601DateFormat();
     }
 
-    public void format() {
+    public void testFormat() {
         String result = df.format(date);
         assertEquals("2007-08-13T19:51:23Z", result);
     }
 
-    public void parse() throws Exception {
+    public void testParse() throws Exception {
         Date result = df.parse("2007-08-13T19:51:23Z");
         assertEquals(date, result);
     }
 
-    public void cloneObject() throws Exception {
+    public void testCloneObject() throws Exception {
         DateFormat clone = (DateFormat)df.clone();
         assertSame(df, clone);
     }

File: src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java
Patch:
@@ -16,7 +16,7 @@
  * @author tatu
  */
 public class JSONPObject
-    implements JsonSerializableWithType
+    implements JsonSerializable
 {
     /**
      * JSONP function name to use for serialization

File: src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java
Patch:
@@ -17,7 +17,7 @@
  * @author tatu
  */
 public class JSONWrappedObject
-    implements JsonSerializableWithType
+    implements JsonSerializable
 {
     /**
      * Literal String to output before serialized value.

File: src/main/java/org/codehaus/jackson/node/BaseJsonNode.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.List;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.databind.JsonSerializableWithType;
+import com.fasterxml.jackson.databind.JsonSerializable;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.TypeSerializer;
 
@@ -19,7 +19,7 @@
  */
 public abstract class BaseJsonNode
     extends JsonNode
-    implements JsonSerializableWithType
+    implements JsonSerializable
 {
     protected BaseJsonNode() { }
 

File: src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 /**
  * Defines interface for resolvers that can resolve abstract types into concrete

File: src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
Patch:
@@ -3,7 +3,6 @@
 import java.lang.annotation.Annotation;
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.annotate.JsonSerialize;

File: src/main/java/com/fasterxml/jackson/databind/BeanDescription.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
 import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;

File: src/main/java/com/fasterxml/jackson/databind/BeanProperty.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.lang.annotation.Annotation;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
 import com.fasterxml.jackson.databind.util.Annotations;
 import com.fasterxml.jackson.databind.util.Named;

File: src/main/java/com/fasterxml/jackson/databind/ClassIntrospector.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 /**
  * Helper class used to introspect features of POJO value classes

File: src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java
Patch:
@@ -6,7 +6,7 @@
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
 import com.fasterxml.jackson.databind.deser.ValueInstantiator;
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;

File: src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.fasterxml.jackson.databind.util.ArrayBuilders;
 import com.fasterxml.jackson.databind.util.ObjectBuffer;

File: src/main/java/com/fasterxml/jackson/databind/DeserializerFactory.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
 import com.fasterxml.jackson.databind.deser.ValueInstantiator;
 import com.fasterxml.jackson.databind.deser.ValueInstantiators;

File: src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind;
 
 import com.fasterxml.jackson.core.io.SerializedString;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
 import com.fasterxml.jackson.databind.deser.ValueInstantiators;
 

File: src/main/java/com/fasterxml/jackson/databind/Deserializers.java
Patch:
@@ -1,7 +1,6 @@
 package com.fasterxml.jackson.databind;
 
 import com.fasterxml.jackson.core.JsonNode;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.type.*;
 
 

File: src/main/java/com/fasterxml/jackson/databind/KeyDeserializers.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 /**
  * Interface that defines API for simple extensions that can provide additional deserializers

File: src/main/java/com/fasterxml/jackson/databind/MapperConfig.java
Patch:
@@ -6,7 +6,6 @@
 
 
 import com.fasterxml.jackson.annotation.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.introspect.Annotated;
 import com.fasterxml.jackson.databind.introspect.VisibilityChecker;

File: src/main/java/com/fasterxml/jackson/databind/MappingIterator.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 /**
  * Iterator exposed by {@link ObjectMapper} when binding sequence of

File: src/main/java/com/fasterxml/jackson/databind/Module.java
Patch:
@@ -188,7 +188,7 @@ public interface SetupContext
 
         /**
          * Method that module can use to register additional
-         * {@link TypeModifier} instance, which can augment {@link org.codehaus.jackson.type.JavaType}
+         * {@link TypeModifier} instance, which can augment {@link com.fasterxml.jackson.databind.type.JavaType}
          * instances constructed by {@link com.fasterxml.jackson.databind.type.TypeFactory}.
          * 
          * @param modifier to add

File: src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java
Patch:
@@ -5,7 +5,6 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.io.SegmentedStringWriter;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.core.util.ByteArrayBuilder;
 import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;

File: src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java
Patch:
@@ -6,7 +6,6 @@
 
 import com.fasterxml.jackson.annotation.*;
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.annotate.JsonSerialize;
 import com.fasterxml.jackson.databind.annotate.JsonSerialize.Inclusion;
 import com.fasterxml.jackson.databind.introspect.Annotated;

File: src/main/java/com/fasterxml/jackson/databind/SerializerFactory.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
 
 

File: src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.Date;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
 import com.fasterxml.jackson.databind.ser.FilterProvider;
 import com.fasterxml.jackson.databind.type.TypeFactory;

File: src/main/java/com/fasterxml/jackson/databind/Serializers.java
Patch:
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.databind;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.type.*;
 
 

File: src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import com.fasterxml.jackson.core.JsonNode;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;
 import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
Patch:
@@ -6,7 +6,6 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JsonCachable;
 import com.fasterxml.jackson.databind.deser.impl.*;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;

File: src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.JsonNode;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;
 import com.fasterxml.jackson.databind.deser.impl.CreatorProperty;

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java
Patch:
@@ -4,9 +4,9 @@
 import java.lang.reflect.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;

File: src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.core.util.InternCache;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.introspect.AnnotatedField;

File: src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializationContext.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
 import com.fasterxml.jackson.databind.util.ArrayBuilders;

File: src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java
Patch:
@@ -6,7 +6,6 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.io.SerializedString;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.BeanDeserializer;
 import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;

File: src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java
Patch:
@@ -3,7 +3,7 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
Patch:
@@ -3,9 +3,9 @@
 import java.lang.reflect.Member;
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.DeserializationConfig;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.deser.ValueInstantiator;
 import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
 import com.fasterxml.jackson.databind.introspect.*;

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorProperty.java
Patch:
@@ -5,9 +5,9 @@
 
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.TypeDeserializer;
 import com.fasterxml.jackson.databind.deser.SettableBeanProperty;

File: src/main/java/com/fasterxml/jackson/databind/deser/impl/ValueInjector.java
Patch:
@@ -2,10 +2,10 @@
 
 import java.io.IOException;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
 import com.fasterxml.jackson.databind.util.Annotations;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 

File: src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;
 import com.fasterxml.jackson.databind.deser.ValueInstantiator;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.deser.std;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/deser/std/JavaTypeDeserializer.java
Patch:
@@ -3,9 +3,9 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * @since 1.9

File: src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;
 import com.fasterxml.jackson.databind.deser.SettableBeanProperty;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java
Patch:
@@ -4,7 +4,6 @@
 import java.lang.reflect.Array;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;
 import com.fasterxml.jackson.databind.type.*;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.io.NumberInput;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java
Patch:
@@ -4,8 +4,8 @@
 import java.lang.reflect.Method;
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.DeserializationConfig;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.KeyDeserializer;
 import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
 import com.fasterxml.jackson.databind.type.*;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java
Patch:
@@ -3,9 +3,9 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.TypeDeserializer;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java
Patch:
@@ -3,8 +3,8 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.DeserializationConfig;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
 import com.fasterxml.jackson.databind.deser.ValueInstantiator;

File: src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.Collection;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;
 import com.fasterxml.jackson.databind.deser.ValueInstantiator;

File: src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.Collection;
 import java.util.Map;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;

File: src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java
Patch:
@@ -5,8 +5,8 @@
 import java.lang.reflect.Modifier;
 import java.lang.reflect.Type;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.TypeBindings;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java
Patch:
@@ -4,8 +4,8 @@
 import java.lang.reflect.Member;
 import java.lang.reflect.Type;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.TypeBindings;
 
 public final class AnnotatedConstructor

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.lang.reflect.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.TypeBindings;
 
 public final class AnnotatedMethod

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java
Patch:
@@ -5,8 +5,8 @@
 import java.lang.reflect.Member;
 import java.lang.reflect.Type;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java
Patch:
@@ -4,8 +4,8 @@
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.TypeBindings;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java
Patch:
@@ -4,7 +4,6 @@
 import java.lang.reflect.Method;
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JsonSerialize;

File: src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java
Patch:
@@ -3,11 +3,11 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.AnnotationIntrospector;
 import com.fasterxml.jackson.databind.ClassIntrospector;
 import com.fasterxml.jackson.databind.DeserializationConfig;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.MapperConfig;
 import com.fasterxml.jackson.databind.SerializationConfig;
 import com.fasterxml.jackson.databind.type.SimpleType;

File: src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.List;
 
 import com.fasterxml.jackson.annotation.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.*;

File: src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.lang.annotation.Annotation;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.AnnotationIntrospector;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.KeyDeserializer;
 import com.fasterxml.jackson.databind.annotate.JsonSerialize.Typing;

File: src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.util.BeanUtil;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeIdResolver.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsontype;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Interface that defines standard API for converting types

File: src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java
Patch:
@@ -4,9 +4,9 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.DeserializationConfig;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.SerializationConfig;
 import com.fasterxml.jackson.databind.TypeDeserializer;
 import com.fasterxml.jackson.databind.TypeSerializer;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java
Patch:
@@ -1,9 +1,9 @@
 package com.fasterxml.jackson.databind.jsontype.impl;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.BeanProperty;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.core.util.JsonParserSequence;
 
 import com.fasterxml.jackson.databind.*;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.*;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import com.fasterxml.jackson.databind.util.ClassUtil;
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.java
Patch:
@@ -1,8 +1,8 @@
 package com.fasterxml.jackson.databind.jsontype.impl;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
 public class MinimalClassNameIdResolver

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.Collection;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsontype.NamedType;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
Patch:
@@ -5,10 +5,10 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.TypeDeserializer;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.jsontype.impl;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 

File: src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.*;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.MapperConfig;
 import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
 import com.fasterxml.jackson.databind.jsontype.NamedType;

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java
Patch:
@@ -3,10 +3,10 @@
 import java.lang.reflect.Modifier;
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.AbstractTypeResolver;
 import com.fasterxml.jackson.databind.DeserializationConfig;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.type.ClassKey;
 
 /**

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.JsonNode;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.type.*;

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.type.ClassKey;

File: src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.type.ArrayType;

File: src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java
Patch:
@@ -6,7 +6,6 @@
 import java.net.InetAddress;
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JsonSerialize;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
Patch:
@@ -8,8 +8,8 @@
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.io.SerializedString;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.BeanProperty;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;
 import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;

File: src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.introspect.*;
 import com.fasterxml.jackson.databind.jsontype.NamedType;

File: src/main/java/com/fasterxml/jackson/databind/ser/CustomSerializerFactory.java
Patch:
@@ -3,7 +3,6 @@
 import java.lang.reflect.Modifier;
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.type.ClassKey;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.Collection;
 import java.util.Map;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JsonSerialize;

File: src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.Date;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.BeanProperty;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.ser.impl.SerializerCache.TypeKey;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/SerializerCache.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.ResolvableSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java
Patch:
@@ -1,7 +1,7 @@
 package com.fasterxml.jackson.databind.ser.impl;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java
Patch:
@@ -5,7 +5,6 @@
 import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import org.codehaus.jackson.node.ObjectNode;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java
Patch:
@@ -4,7 +4,6 @@
 import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import org.codehaus.jackson.node.ObjectNode;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java
Patch:
@@ -5,8 +5,8 @@
 import java.util.Iterator;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.BeanProperty;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.TypeSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import org.codehaus.jackson.node.JsonNodeFactory;
 import org.codehaus.jackson.node.ObjectNode;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java
Patch:
@@ -5,7 +5,6 @@
 
 import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.core.io.SerializedString;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import org.codehaus.jackson.node.ObjectNode;
 import org.codehaus.jackson.node.ArrayNode;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java
Patch:
@@ -4,9 +4,9 @@
 import java.util.EnumSet;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.BeanProperty;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.TypeSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java
Patch:
@@ -4,9 +4,9 @@
 import java.util.Iterator;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.BeanProperty;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.TypeSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
Patch:
@@ -7,7 +7,6 @@
 import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 
 import com.fasterxml.jackson.databind.*;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import org.codehaus.jackson.node.ObjectNode;
 

File: src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java
Patch:
@@ -5,11 +5,11 @@
 import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import org.codehaus.jackson.node.ObjectNode;
 
 import com.fasterxml.jackson.databind.BeanProperty;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.ResolvableSerializer;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/SerializerBase.java
Patch:
@@ -5,7 +5,6 @@
 import java.lang.reflect.Type;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;
 import com.fasterxml.jackson.databind.jsonschema.SchemaAware;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.*;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;

File: src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java
Patch:
@@ -5,8 +5,8 @@
 import java.util.Date;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 

File: src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.lang.reflect.Array;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Array types represent Java arrays, both primitive and object valued.

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Collection;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Type that represents things that act similar to {@link java.util.Collection};

File: src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java
Patch:
@@ -1,6 +1,6 @@
 package com.fasterxml.jackson.databind.type;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Type that represents Java Collection types (Lists, Sets).

File: src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Type that represents Map-like types; things that consist of key/value pairs but that

File: src/main/java/com/fasterxml/jackson/databind/type/MapType.java
Patch:
@@ -1,6 +1,6 @@
 package com.fasterxml.jackson.databind.type;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Type that represents "true" Java Map types.

File: src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Simple types are defined as anything other than one of recognized

File: src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonSerializableWithType;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.TypeSerializer;

File: src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java
Patch:
@@ -3,7 +3,7 @@
 import java.lang.reflect.*;
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Helper class used for resolving type parameters for given class

File: src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.*;
 import java.lang.reflect.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
 import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.util.ArrayBuilders;
 
 

File: src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.lang.reflect.Type;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Class that defines API that can be used to modify details of

File: src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.*;
 
-import com.fasterxml.jackson.core.type.JavaType;
+import com.fasterxml.jackson.databind.JavaType;
 
 /**
  * Simple recursive-descent parser for parsing canonical {@link JavaType}

File: src/main/java/com/fasterxml/jackson/databind/type/package-info.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * Package that contains concrete implementations of
- * {@link org.codehaus.jackson.type.JavaType}, as
+ * {@link com.fasterxml.jackson.databind.type.JavaType}, as
  * well as the factory ({@link com.fasterxml.jackson.databind.type.TypeFactory}) for
  * constructing instances from various input data types
  * (like {@link java.lang.Class}, {@link java.lang.reflect.Type})

File: src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 

File: src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 
 import com.fasterxml.jackson.core.*;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.*;
 

File: src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java
Patch:
@@ -1,9 +1,9 @@
 package com.fasterxml.jackson.databind.util;
 
 import com.fasterxml.jackson.core.io.SerializedString;
-import com.fasterxml.jackson.core.type.JavaType;
 
 import com.fasterxml.jackson.databind.AnnotationIntrospector;
+import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.MapperConfig;
 import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
 import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;

