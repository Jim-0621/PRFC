File: ftgo-accounting-service/src/test/java/net/chrisrichardson/ftgo/accountingservice/messaging/AccountingServiceCommandHandlerTest.java
Patch:
@@ -10,6 +10,7 @@
 import io.eventuate.tram.sagas.spring.inmemory.TramSagaInMemoryConfiguration;
 import io.eventuate.tram.testutil.TestMessageConsumer;
 import io.eventuate.tram.testutil.TestMessageConsumerFactory;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import io.eventuate.util.test.async.Eventually;
 import net.chrisrichardson.ftgo.accountingservice.domain.Account;
 import net.chrisrichardson.ftgo.accountingservice.domain.AccountCommand;
@@ -36,7 +37,7 @@
 public class AccountingServiceCommandHandlerTest {
 
   @Configuration
-  @EnableAutoConfiguration
+  @EnableAutoConfiguration(exclude = CommonSwaggerConfiguration.class)
   @Import({AccountingMessagingConfiguration.class,
           TramCommandProducerConfiguration.class,
           EmbeddedTestAggregateStoreConfiguration.class,

File: ftgo-consumer-service/src/test/java/net/chrisrichardson/ftgo/consumerservice/ConsumerServiceInMemoryIntegrationTest.java
Patch:
@@ -6,6 +6,7 @@
 import io.eventuate.tram.spring.inmemory.TramInMemoryConfiguration;
 import io.eventuate.tram.testutil.TestMessageConsumer;
 import io.eventuate.tram.testutil.TestMessageConsumerFactory;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import net.chrisrichardson.ftgo.common.Money;
 import net.chrisrichardson.ftgo.common.PersonName;
 import net.chrisrichardson.ftgo.consumerservice.api.ValidateOrderByConsumer;
@@ -17,6 +18,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -42,6 +44,7 @@ public class ConsumerServiceInMemoryIntegrationTest {
   @Import({ConsumerWebConfiguration.class,
           TramCommandProducerConfiguration.class,
           TramInMemoryConfiguration.class})
+  @EnableAutoConfiguration(exclude = CommonSwaggerConfiguration.class)
   public static class TestConfiguration {
 
     @Bean

File: ftgo-delivery-service/src/component-test/java/net/chrisrichardson/ftgo/deliveryservice/DeliveryServiceOutOfProcessComponentTest.java
Patch:
@@ -3,6 +3,7 @@
 import io.eventuate.tram.events.publisher.DomainEventPublisher;
 import io.eventuate.tram.spring.events.publisher.TramEventsPublisherConfiguration;
 import io.eventuate.tram.spring.jdbckafka.TramJdbcKafkaConfiguration;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import net.chrisrichardson.ftgo.deliveryservice.domain.DeliveryServiceTestData;
 import net.chrisrichardson.ftgo.orderservice.api.OrderServiceChannels;
 import net.chrisrichardson.ftgo.orderservice.api.events.OrderCreatedEvent;
@@ -33,7 +34,7 @@ public class DeliveryServiceOutOfProcessComponentTest {
 
   @Configuration
   @EnableJpaRepositories
-  @EnableAutoConfiguration
+  @EnableAutoConfiguration(exclude = CommonSwaggerConfiguration.class)
   @Import({TramJdbcKafkaConfiguration.class, TramEventsPublisherConfiguration.class
   })
   public static class Config {

File: ftgo-delivery-service/src/integration-test/java/net/chrisrichardson/ftgo/deliveryservice/domain/CourierJpaTest.java
Patch:
@@ -1,6 +1,7 @@
 package net.chrisrichardson.ftgo.deliveryservice.domain;
 
 import io.eventuate.tram.spring.consumer.jdbc.TramConsumerJdbcAutoConfiguration;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -22,7 +23,7 @@ public class CourierJpaTest {
 
   @Configuration
   @EnableJpaRepositories
-  @EnableAutoConfiguration(exclude = TramConsumerJdbcAutoConfiguration.class)
+  @EnableAutoConfiguration(exclude = {TramConsumerJdbcAutoConfiguration.class, CommonSwaggerConfiguration.class})
   public static class Config {
   }
 

File: ftgo-delivery-service/src/integration-test/java/net/chrisrichardson/ftgo/deliveryservice/domain/DeliveryJpaTest.java
Patch:
@@ -1,6 +1,7 @@
 package net.chrisrichardson.ftgo.deliveryservice.domain;
 
 import io.eventuate.tram.spring.consumer.jdbc.TramConsumerJdbcAutoConfiguration;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -18,7 +19,7 @@ public class DeliveryJpaTest {
 
   @Configuration
   @EnableJpaRepositories
-  @EnableAutoConfiguration(exclude = TramConsumerJdbcAutoConfiguration.class)
+  @EnableAutoConfiguration(exclude = {TramConsumerJdbcAutoConfiguration.class, CommonSwaggerConfiguration.class})
   public static class Config {
   }
 

File: ftgo-delivery-service/src/integration-test/java/net/chrisrichardson/ftgo/deliveryservice/domain/RestaurantJpaTest.java
Patch:
@@ -1,6 +1,7 @@
 package net.chrisrichardson.ftgo.deliveryservice.domain;
 
 import io.eventuate.tram.spring.consumer.jdbc.TramConsumerJdbcAutoConfiguration;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -19,7 +20,7 @@ public class RestaurantJpaTest {
 
   @Configuration
   @EnableJpaRepositories
-  @EnableAutoConfiguration(exclude = TramConsumerJdbcAutoConfiguration.class)
+  @EnableAutoConfiguration(exclude = {TramConsumerJdbcAutoConfiguration.class, CommonSwaggerConfiguration.class})
   public static class Config {
   }
 

File: ftgo-kitchen-service/src/integration-test/java/net/chrisrichardson/ftgo/kitchenservice/contract/MessagingBase.java
Patch:
@@ -1,13 +1,15 @@
 package net.chrisrichardson.ftgo.kitchenservice.contract;
 
 import io.eventuate.tram.spring.cloudcontractsupport.EventuateContractVerifierConfiguration;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import net.chrisrichardson.ftgo.kitchenservice.api.TicketDetails;
 import net.chrisrichardson.ftgo.kitchenservice.domain.KitchenService;
 import net.chrisrichardson.ftgo.kitchenservice.domain.Ticket;
 import net.chrisrichardson.ftgo.kitchenservice.messagehandlers.KitchenServiceMessageHandlersConfiguration;
 import org.junit.Before;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.cloud.contract.verifier.messaging.boot.AutoConfigureMessageVerifier;
@@ -30,6 +32,7 @@
 public abstract class MessagingBase {
 
   @Configuration
+  @EnableAutoConfiguration(exclude = CommonSwaggerConfiguration.class)
   @Import({KitchenServiceMessageHandlersConfiguration.class, EventuateContractVerifierConfiguration.class})
   public static class TestConfiguration {
 

File: ftgo-kitchen-service/src/test/java/net/chrisrichardson/ftgo/kitchenservice/domain/KitchenServiceInMemoryIntegrationTest.java
Patch:
@@ -7,6 +7,7 @@
 import io.eventuate.tram.sagas.spring.inmemory.TramSagaInMemoryConfiguration;
 import io.eventuate.tram.testutil.TestMessageConsumer;
 import io.eventuate.tram.testutil.TestMessageConsumerFactory;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import net.chrisrichardson.ftgo.common.Money;
 import net.chrisrichardson.ftgo.kitchenservice.api.CreateTicket;
 import net.chrisrichardson.ftgo.kitchenservice.api.TicketDetails;
@@ -40,7 +41,7 @@ public class KitchenServiceInMemoryIntegrationTest {
   private int port;
 
   @Configuration
-  @EnableAutoConfiguration
+  @EnableAutoConfiguration(exclude = CommonSwaggerConfiguration.class)
   @Import({KitchenServiceWebConfiguration.class, KitchenServiceMessageHandlersConfiguration.class,
           TramCommandProducerConfiguration.class,
           TramSagaInMemoryConfiguration.class})

File: ftgo-order-history-service/src/test/java/net/chrisrichardson/ftgo/orderhistory/contracts/OrderHistoryEventHandlersTest.java
Patch:
@@ -6,6 +6,7 @@
 import io.eventuate.tram.messaging.common.ChannelMapping;
 import io.eventuate.tram.messaging.common.DefaultChannelMapping;
 import io.eventuate.tram.spring.cloudcontractsupport.EventuateContractVerifierConfiguration;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import net.chrisrichardson.ftgo.cqrs.orderhistory.OrderHistoryDao;
 import net.chrisrichardson.ftgo.cqrs.orderhistory.dynamodb.Order;
 import net.chrisrichardson.ftgo.cqrs.orderhistory.dynamodb.SourceEvent;
@@ -43,7 +44,7 @@
 public class OrderHistoryEventHandlersTest {
 
   @Configuration
-  @EnableAutoConfiguration
+  @EnableAutoConfiguration(exclude = CommonSwaggerConfiguration.class)
   @Import({OrderHistoryServiceMessagingConfiguration.class,
           TramCommandProducerConfiguration.class,
           TramInMemoryCommonConfiguration.class,

File: ftgo-order-service/src/component-test/java/net/chrisrichardson/ftgo/orderservice/cucumber/OrderServiceComponentTestStepDefinitions.java
Patch:
@@ -12,6 +12,7 @@
 import io.eventuate.tram.sagas.testing.SagaParticipantStubManager;
 import io.eventuate.tram.sagas.spring.testing.SagaParticipantStubManagerConfiguration;
 import io.eventuate.tram.testing.MessageTracker;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import io.restassured.response.Response;
 import net.chrisrichardson.ftgo.accountservice.api.AuthorizeCommand;
 import net.chrisrichardson.ftgo.common.CommonJsonMapperInitializer;
@@ -67,7 +68,7 @@ protected String baseUrl(String path) {
   }
 
   @Configuration
-  @EnableAutoConfiguration
+  @EnableAutoConfiguration(exclude = CommonSwaggerConfiguration.class)
   @Import({TramJdbcKafkaConfiguration.class, SagaParticipantStubManagerConfiguration.class})
   @EnableJpaRepositories(basePackageClasses = RestaurantRepository.class) // Need to verify that the restaurant has been created. Replace with verifyRestaurantCreatedInOrderService
   @EntityScan(basePackageClasses = Order.class)

File: ftgo-order-service/src/integration-test/java/net/chrisrichardson/ftgo/orderservice/domain/OrderJpaTestConfiguration.java
Patch:
@@ -1,12 +1,13 @@
 package net.chrisrichardson.ftgo.orderservice.domain;
 
 import io.eventuate.tram.spring.consumer.jdbc.TramConsumerJdbcAutoConfiguration;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 
 @Configuration
 @EnableJpaRepositories
-@EnableAutoConfiguration(exclude = TramConsumerJdbcAutoConfiguration.class)
+@EnableAutoConfiguration(exclude = {TramConsumerJdbcAutoConfiguration.class, CommonSwaggerConfiguration.class})
 public class OrderJpaTestConfiguration {
 }

File: ftgo-order-service/src/integration-test/java/net/chrisrichardson/ftgo/orderservice/domain/OrderServiceIntegrationTest.java
Patch:
@@ -7,6 +7,7 @@
 import io.eventuate.tram.messaging.common.Message;
 import io.eventuate.tram.sagas.spring.inmemory.TramSagaInMemoryConfiguration;
 import io.eventuate.tram.testutil.TestMessageConsumerFactory;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import io.eventuate.util.test.async.Eventually;
 import net.chrisrichardson.ftgo.consumerservice.api.ConsumerServiceChannels;
 import net.chrisrichardson.ftgo.consumerservice.api.ValidateOrderByConsumer;
@@ -49,7 +50,7 @@ private String baseUrl(String path) {
   }
 
   @Configuration
-  @EnableAutoConfiguration
+  @EnableAutoConfiguration(exclude = CommonSwaggerConfiguration.class)
   @Import({OrderWebConfiguration.class, OrderServiceMessagingConfiguration.class,  OrderCommandHandlersConfiguration.class,
           TramCommandProducerConfiguration.class,
           TramSagaInMemoryConfiguration.class})

File: ftgo-order-service/src/integration-test/java/net/chrisrichardson/ftgo/orderservice/sagaparticipants/KitchenServiceProxyIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 import io.eventuate.tram.sagas.spring.testing.contract.EventuateTramSagasSpringCloudContractSupportConfiguration;
 import io.eventuate.tram.sagas.spring.testing.contract.SagaMessagingTestHelper;
 import io.eventuate.tram.spring.cloudcontractsupport.EventuateTramRoutesConfigurer;
+import io.eventuate.util.spring.swagger.CommonSwaggerConfiguration;
 import net.chrisrichardson.ftgo.kitchenservice.api.CreateTicket;
 import net.chrisrichardson.ftgo.kitchenservice.api.CreateTicketReply;
 import net.chrisrichardson.ftgo.kitchenservice.api.TicketDetails;
@@ -40,7 +41,7 @@ public class KitchenServiceProxyIntegrationTest {
 
 
   @Configuration
-  @EnableAutoConfiguration
+  @EnableAutoConfiguration(exclude = CommonSwaggerConfiguration.class)
   @Import({TramSagaInMemoryConfiguration.class, EventuateTramSagasSpringCloudContractSupportConfiguration.class})
   public static class TestConfiguration {
 

File: ftgo-consumer-service/src/main/java/net/chrisrichardson/ftgo/consumerservice/domain/ConsumerService.java
Patch:
@@ -9,7 +9,6 @@
 
 import java.util.Optional;
 
-@Transactional
 public class ConsumerService {
 
   @Autowired
@@ -23,6 +22,7 @@ public void validateOrderForConsumer(long consumerId, Money orderTotal) {
     consumer.orElseThrow(ConsumerNotFoundException::new).validateOrderByConsumer(orderTotal);
   }
 
+  @Transactional
   public ResultWithEvents<Consumer> create(PersonName name) {
     ResultWithEvents<Consumer> rwe = Consumer.create(name);
     consumerRepository.save(rwe.result);

File: ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/domain/OrderService.java
Patch:
@@ -25,7 +25,6 @@
 
 import static java.util.stream.Collectors.toList;
 
-@Transactional
 public class OrderService {
 
   private Logger logger = LoggerFactory.getLogger(getClass());
@@ -66,6 +65,7 @@ public OrderService(SagaInstanceFactory sagaInstanceFactory,
     this.meterRegistry = meterRegistry;
   }
 
+  @Transactional
   public Order createOrder(long consumerId, long restaurantId, DeliveryInformation deliveryInformation,
                            List<MenuItemIdAndQuantity> lineItems) {
     Restaurant restaurant = restaurantRepository.findById(restaurantId)
@@ -112,6 +112,7 @@ public void noteReversingAuthorization(Long orderId) {
     throw new UnsupportedOperationException();
   }
 
+  @Transactional
   public Order cancel(Long orderId) {
     Order order = orderRepository.findById(orderId)
             .orElseThrow(() -> new OrderNotFoundException(orderId));
@@ -149,6 +150,7 @@ public void confirmCancelled(long orderId) {
     updateOrder(orderId, Order::noteCancelled);
   }
 
+  @Transactional
   public Order reviseOrder(long orderId, OrderRevision orderRevision) {
     Order order = orderRepository.findById(orderId).orElseThrow(() -> new OrderNotFoundException(orderId));
     ReviseOrderSagaData sagaData = new ReviseOrderSagaData(order.getConsumerId(), orderId, null, orderRevision);
@@ -172,13 +174,11 @@ public void confirmRevision(long orderId, OrderRevision revision) {
     updateOrder(orderId, order -> order.confirmRevision(revision));
   }
 
-  @Transactional(propagation = Propagation.MANDATORY)
   public void createMenu(long id, String name, List<MenuItem> menuItems) {
     Restaurant restaurant = new Restaurant(id, name, menuItems);
     restaurantRepository.save(restaurant);
   }
 
-  @Transactional(propagation = Propagation.MANDATORY)
   public void reviseMenu(long id, List<MenuItem> menuItems) {
     restaurantRepository.findById(id).map(restaurant -> {
       List<OrderDomainEvent> events = restaurant.reviseMenu(menuItems);

File: ftgo-order-history-service/src/main/java/net/chrisrichardson/ftgo/cqrs/orderhistory/messaging/OrderHistoryServiceMessagingConfiguration.java
Patch:
@@ -1,6 +1,5 @@
 package net.chrisrichardson.ftgo.cqrs.orderhistory.messaging;
 
-import io.eventuate.messaging.kafka.spring.consumer.KafkaConsumerFactoryConfiguration;
 import io.eventuate.tram.spring.consumer.common.TramNoopDuplicateMessageDetectorConfiguration;
 import io.eventuate.tram.spring.events.subscriber.TramEventSubscriberConfiguration;
 import io.eventuate.tram.events.subscriber.DomainEventDispatcher;
@@ -12,7 +11,7 @@
 import org.springframework.context.annotation.Import;
 
 @Configuration
-@Import({CommonConfiguration.class, TramNoopDuplicateMessageDetectorConfiguration.class, TramEventSubscriberConfiguration.class, KafkaConsumerFactoryConfiguration.class})
+@Import({CommonConfiguration.class, TramNoopDuplicateMessageDetectorConfiguration.class, TramEventSubscriberConfiguration.class})
 public class OrderHistoryServiceMessagingConfiguration {
 
   @Bean

File: ftgo-order-history-service/src/main/java/net/chrisrichardson/ftgo/cqrs/orderhistory/OrderHistoryDao.java
Patch:
@@ -3,6 +3,7 @@
 
 import net.chrisrichardson.ftgo.cqrs.orderhistory.dynamodb.SourceEvent;
 import net.chrisrichardson.ftgo.cqrs.orderhistory.dynamodb.Order;
+import net.chrisrichardson.ftgo.orderservice.api.events.OrderState;
 
 import java.util.Optional;
 
@@ -12,7 +13,7 @@ public interface OrderHistoryDao {
 
   OrderHistory findOrderHistory(String consumerId, OrderHistoryFilter filter);
 
-  public boolean cancelOrder(String orderId, Optional<SourceEvent> eventSource);
+  boolean updateOrderState(String orderId, OrderState newState, Optional<SourceEvent> eventSource);
 
   void noteTicketPreparationStarted(String orderId);
 
@@ -25,4 +26,5 @@ public interface OrderHistoryDao {
   void noteDelivered(String orderId);
 
   Optional<Order> findOrder(String orderId);
+
 }

File: ftgo-order-service-api/src/main/java/net/chrisrichardson/ftgo/orderservice/api/events/OrderAuthorized.java
Patch:
@@ -1,7 +1,5 @@
-package net.chrisrichardson.ftgo.orderservice.domain;
+package net.chrisrichardson.ftgo.orderservice.api.events;
 
-import io.eventuate.tram.events.common.DomainEvent;
-import net.chrisrichardson.ftgo.orderservice.api.events.OrderDomainEvent;
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 

File: ftgo-order-service-api/src/main/java/net/chrisrichardson/ftgo/orderservice/api/events/OrderCancelled.java
Patch:
@@ -1,4 +1,4 @@
-package net.chrisrichardson.ftgo.orderservice.domain;
+package net.chrisrichardson.ftgo.orderservice.api.events;
 
 import io.eventuate.tram.events.common.DomainEvent;
 import net.chrisrichardson.ftgo.orderservice.api.events.OrderDomainEvent;

File: ftgo-order-service/src/test/java/net/chrisrichardson/ftgo/orderservice/domain/OrderTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.eventuate.tram.events.aggregates.ResultWithDomainEvents;
 import net.chrisrichardson.ftgo.orderservice.RestaurantMother;
+import net.chrisrichardson.ftgo.orderservice.api.events.OrderAuthorized;
 import net.chrisrichardson.ftgo.orderservice.api.events.OrderCreatedEvent;
 import net.chrisrichardson.ftgo.orderservice.api.events.OrderDomainEvent;
 import net.chrisrichardson.ftgo.orderservice.api.events.OrderState;
@@ -14,7 +15,6 @@
 
 import static java.util.Collections.singletonList;
 import static net.chrisrichardson.ftgo.orderservice.OrderDetailsMother.*;
-import static net.chrisrichardson.ftgo.orderservice.RestaurantMother.AJANTA_ID;
 import static net.chrisrichardson.ftgo.orderservice.RestaurantMother.AJANTA_RESTAURANT;
 import static net.chrisrichardson.ftgo.orderservice.RestaurantMother.CHICKEN_VINDALOO_PRICE;
 import static org.junit.Assert.assertEquals;

File: ftgo-order-service/src/integration-test/java/net/chrisrichardson/ftgo/orderservice/domain/OrderJpaTest.java
Patch:
@@ -27,7 +27,7 @@ public class OrderJpaTest {
   @Test
   public void shouldSaveAndLoadOrder() {
 
-    long orderId = transactionTemplate.execute((ts) -> {
+    long orderId = transactionTemplate.execute(ts -> {
       Order order = new Order(CONSUMER_ID, AJANTA_ID, chickenVindalooLineItems());
       orderRepository.save(order);
       return order.getId();

File: ftgo-common/src/main/java/net/chrisrichardson/ftgo/common/Money.java
Patch:
@@ -73,4 +73,7 @@ public Money multiply(int x) {
     return new Money(amount.multiply(new BigDecimal(x)));
   }
 
+  public Long asLong() {
+    return multiply(100).amount.longValue();
+  }
 }

File: ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/sagaparticipants/AccountingServiceProxy.java
Patch:
@@ -5,8 +5,6 @@
 import io.eventuate.tram.sagas.simpledsl.CommandEndpointBuilder;
 import net.chrisrichardson.ftgo.accountservice.api.AccountingServiceChannels;
 import net.chrisrichardson.ftgo.accountservice.api.AuthorizeCommand;
-import net.chrisrichardson.ftgo.consumerservice.api.ConsumerServiceChannels;
-import net.chrisrichardson.ftgo.consumerservice.api.ValidateOrderByConsumer;
 
 public class AccountingServiceProxy {
 

File: ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/sagaparticipants/ConsumerServiceProxy.java
Patch:
@@ -5,7 +5,6 @@
 import io.eventuate.tram.sagas.simpledsl.CommandEndpointBuilder;
 import net.chrisrichardson.ftgo.consumerservice.api.ConsumerServiceChannels;
 import net.chrisrichardson.ftgo.consumerservice.api.ValidateOrderByConsumer;
-import net.chrisrichardson.ftgo.orderservice.api.OrderServiceChannels;
 
 public class ConsumerServiceProxy {
 

File: ftgo-delivery-service/src/component-test/java/net/chrisrichardson/ftgo/deliveryservice/DeliveryServiceInProcessComponentTest.java
Patch:
@@ -39,7 +39,6 @@ public class DeliveryServiceInProcessComponentTest {
   private long orderId;
 
   @Configuration
-  @EnableJpaRepositories
   @EnableAutoConfiguration
   @Import({DeliveryServiceMessagingConfiguration.class,
           DeliveryServiceWebConfiguration.class,

File: ftgo-delivery-service/src/test/java/net/chrisrichardson/ftgo/deliveryservice/domain/DeliveryServiceTest.java
Patch:
@@ -81,7 +81,7 @@ public void shouldScheduleDelivery() {
 
     deliveryService.scheduleDelivery(ORDER_ID, READY_BY);
 
-    assertSame(courier, delivery.getAssignedCourier());
+    assertSame(courier.getId(), delivery.getAssignedCourier());
     List<Action> actions = courier.getPlan().getActions();
     assertEquals(2, actions.size());
     assertEquals(ActionType.PICKUP, actions.get(0).getType());

File: ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/main/OrderServiceMain.java
Patch:
@@ -10,7 +10,6 @@
 import net.chrisrichardson.ftgo.orderservice.web.OrderWebConfiguration;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Import;
 
 @SpringBootApplication

File: ftgo-order-service/src/integration-test/java/net/chrisrichardson/ftgo/orderservice/sagaparticipants/SagaMessagingTestHelper.java
Patch:
@@ -27,10 +27,9 @@ public <C extends Command, R> R sendAndReceiveCommand(CommandEndpoint<C> command
     // TODO verify that replyClass is allowed
 
     String sagaId = idGenerator.genId().asString();
-    String requestId = idGenerator.genId().asString();
 
     String replyTo = sagaType + "-reply";
-    sagaCommandProducer.sendCommand(sagaType, sagaId, commandEndpoint.getCommandChannel(), null, requestId, command, replyTo);
+    sagaCommandProducer.sendCommand(sagaType, sagaId, commandEndpoint.getCommandChannel(), null, command, replyTo);
 
     ContractVerifierMessage response = contractVerifierMessaging.receive(replyTo);
 

File: ftgo-order-service/src/integration-test/java/net/chrisrichardson/ftgo/orderservice/sagaparticipants/SagaMessagingTestHelper.java
Patch:
@@ -27,10 +27,9 @@ public <C extends Command, R> R sendAndReceiveCommand(CommandEndpoint<C> command
     // TODO verify that replyClass is allowed
 
     String sagaId = idGenerator.genId().asString();
-    String requestId = idGenerator.genId().asString();
 
     String replyTo = sagaType + "-reply";
-    sagaCommandProducer.sendCommand(sagaType, sagaId, commandEndpoint.getCommandChannel(), null, requestId, command, replyTo);
+    sagaCommandProducer.sendCommand(sagaType, sagaId, commandEndpoint.getCommandChannel(), null, command, replyTo);
 
     ContractVerifierMessage response = contractVerifierMessaging.receive(replyTo);
 

File: ftgo-kitchen-service/src/main/java/net/chrisrichardson/ftgo/kitchenservice/domain/Restaurant.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 
 @Entity
-@Table(name = "restaurant_order_service_restaurants")
+@Table(name = "kitchen_service_restaurants")
 @Access(AccessType.FIELD)
 public class Restaurant {
 
@@ -25,7 +25,7 @@ public class Restaurant {
 
   @Embedded
   @ElementCollection
-  @CollectionTable(name = "restaurant_order_service_restaurant_menu_items")
+  @CollectionTable(name = "kitchen_service_restaurant_menu_items")
   private List<MenuItem> menuItems;
 
   private Restaurant() {

File: ftgo-api-gateway/src/main/java/net/chrisrichardson/ftgo/apiagateway/consumers/ConsumerConfiguration.java
Patch:
@@ -13,10 +13,11 @@
 @EnableConfigurationProperties(ConsumerDestinations.class)
 public class ConsumerConfiguration {
 
+  @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")
   @Bean
   public RouteLocator consumerProxyRouting(ConsumerDestinations consumerDestinations) {
     return Routes.locator()
-            .route("orderService")
+            .route("consumerService")
             .uri(consumerDestinations.getConsumerServiceUrl())
             .predicate(path("/consumers").and(method("POST").or(method("PUT"))))
             .and()

