File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1357,7 +1357,7 @@ public void onGlobalLayout() {
                 if (isSuggestionItemsFillRecyclerView) {
                     suggestionsListLm.setReverseLayout(false);
                 } else {
-                    Collections.reverse(newSearchSuggestions);
+                    mSuggestionsAdapter.reverseList();
                     suggestionsListLm.setReverseLayout(true);
                 }
                 mSuggestionsList.setAlpha(1);

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1357,7 +1357,7 @@ public void onGlobalLayout() {
                 if (isSuggestionItemsFillRecyclerView) {
                     suggestionsListLm.setReverseLayout(false);
                 } else {
-                    Collections.reverse(newSearchSuggestions);
+                    mSuggestionsAdapter.reverseList();
                     suggestionsListLm.setReverseLayout(true);
                 }
                 mSuggestionsList.setAlpha(1);

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1317,12 +1317,13 @@ public void onGlobalLayout() {
                     suggestionsListLm.setReverseLayout(false);
                 }else {
                     Collections.reverse(newSearchSuggestions);
-                    mSuggestionsAdapter.notifyDataSetChanged();
                     suggestionsListLm.setReverseLayout(true);
                 }
+                mSuggestionsList.setAlpha(1);
             }
         });
         mSuggestionsList.setAdapter(mSuggestionsAdapter);//workaround to avoid list retaining scroll pos
+        mSuggestionsList.setAlpha(0);
         mSuggestionsAdapter.swapData(newSearchSuggestions);
 
         mDivider.setVisibility(!newSearchSuggestions.isEmpty() ? View.VISIBLE : View.GONE);

File: library/src/main/java/com/arlib/floatingsearchview/suggestions/SearchSuggestionsAdapter.java
Patch:
@@ -38,7 +38,7 @@ public class SearchSuggestionsAdapter extends RecyclerView.Adapter<RecyclerView.
 
     private static final String TAG = "SearchSuggestionsAdapter";
 
-    private List<SearchSuggestion> mSearchSuggestions = new ArrayList<>();
+    private List<? extends SearchSuggestion> mSearchSuggestions = new ArrayList<>();
 
     private Listener mListener;
 
@@ -122,8 +122,7 @@ public SearchSuggestionsAdapter(Context context, int suggestionTextSize, Listene
     }
 
     public void swapData(List<? extends SearchSuggestion> searchSuggestions) {
-        mSearchSuggestions.clear();
-        mSearchSuggestions.addAll(searchSuggestions);
+        mSearchSuggestions = searchSuggestions;
         notifyDataSetChanged();
     }
 

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1450,6 +1450,7 @@ private void setSearchFocusedInternal(final boolean focused) {
             }else {
                 mSearchInput.setSelection(mSearchInput.getText().length());
             }
+            mSearchInput.setLongClickable(true);
             mClearButton.setVisibility((mSearchInput.getText().toString().length() == 0) ?
                     View.INVISIBLE : View.VISIBLE);
             if (mFocusChangeListener != null) {
@@ -1472,6 +1473,7 @@ private void setSearchFocusedInternal(final boolean focused) {
                 mSkipTextChangeEvent = true;
                 mSearchInput.setText(mTitleText);
             }
+            mSearchInput.setLongClickable(false);
             if (mFocusChangeListener != null) {
                 mFocusChangeListener.onFocusCleared();
             }

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1125,7 +1125,7 @@ private void refreshShowMoveUpSuggestion() {
      *                  clicked.
      */
     public void setSearchFocusable(boolean focusable) {
-        mSearchInput.setFocusable(focusable);
+        mSearchInput.setFocusableInTouchMode(focusable);
     }
 
     /**

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1125,7 +1125,7 @@ private void refreshShowMoveUpSuggestion() {
      *                  clicked.
      */
     public void setSearchFocusable(boolean focusable) {
-        mSearchInput.setFocusable(focusable);
+        mSearchInput.setFocusableInTouchMode(focusable);
     }
 
     /**

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1125,7 +1125,7 @@ private void refreshShowMoveUpSuggestion() {
      *                  clicked.
      */
     public void setSearchFocusable(boolean focusable) {
-        mSearchInput.setFocusable(focusable);
+        mSearchInput.setFocusableInTouchMode(focusable);
     }
 
     /**

File: library/src/main/java/com/arlib/floatingsearchview/util/Util.java
Patch:
@@ -47,7 +47,7 @@ public static void showSoftKeyboard(final Context context, final EditText editTe
             public void run() {
 
                 InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
-                inputMethodManager.showSoftInput(editText, InputMethodManager.SHOW_IMPLICIT);
+                inputMethodManager.showSoftInput(editText, InputMethodManager.SHOW_FORCED);
             }
         }, 100);
     }

File: library/src/main/java/com/arlib/floatingsearchview/suggestions/SearchSuggestionsAdapter.java
Patch:
@@ -92,8 +92,10 @@ public SearchSuggestionViewHolder(View v, Listener listener) {
                 @Override
                 public void onClick(View v) {
 
-                    if (mListener != null)
+                    int adapterPosition = getAdapterPosition();
+                    if (mListener != null && adapterPosition != RecyclerView.NO_POSITION) {
                         mListener.onMoveItemToSearchClicked(getAdapterPosition());
+                    }
                 }
             });
 

File: library/src/main/java/com/arlib/floatingsearchview/util/view/MenuView.java
Patch:
@@ -174,10 +174,11 @@ public int compare(MenuItemImpl lhs, MenuItemImpl rhs) {
         List<MenuItemImpl> localActionItems = filter(mMenuItems, new MenuItemImplPredicate() {
             @Override
             public boolean apply(MenuItemImpl menuItem) {
-                return menuItem.requiresActionButton() || menuItem.requestsActionButton();
+                return menuItem.getIcon() != null && (menuItem.requiresActionButton() || menuItem.requestsActionButton());
             }
         });
 
+
         int availItemRoom = availWidth / (int) ACTION_DIMENSION_PX;
 
         //determine if to show overflow menu
@@ -278,7 +279,7 @@ public void hideIfRoomItems(boolean withAnim) {
         List<MenuItemImpl> showAlwaysActionItems = filter(mMenuItems, new MenuItemImplPredicate() {
             @Override
             public boolean apply(MenuItemImpl menuItem) {
-                return menuItem.requiresActionButton();
+                return  menuItem.getIcon() != null && menuItem.requiresActionButton();
             }
         });
 

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1369,6 +1369,7 @@ private void setSearchFocusedInternal(final boolean focused) {
         if (focused) {
             mSearchInput.requestFocus();
             moveSuggestListToInitialPos();
+            mSuggestionsSection.setVisibility(VISIBLE);
             if (mDimBackground) {
                 fadeInBackground();
             }

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -423,6 +423,8 @@ public void onGlobalLayout() {
 
     private void setupViews(AttributeSet attrs) {
 
+        mSuggestionsSection.setEnabled(false);
+
         if (attrs != null) {
             applyXmlAttributes(attrs);
         }

File: library/src/main/java/com/arlib/floatingsearchview/suggestions/SearchSuggestionsAdapter.java
Patch:
@@ -53,7 +53,7 @@ public class SearchSuggestionsAdapter extends RecyclerView.Adapter<RecyclerView.
 
     public interface OnBindSuggestionCallback {
 
-        void onBindSuggestion(ImageView leftIcon, TextView textView,
+        void onBindSuggestion(View suggestionView, ImageView leftIcon, TextView textView,
                               SearchSuggestion item, int itemPosition);
     }
 
@@ -182,7 +182,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder vh, int position) {
         viewHolder.body.setText(suggestionItem.getBody());
 
         if (mOnBindSuggestionCallback != null) {
-            mOnBindSuggestionCallback.onBindSuggestion(viewHolder.leftIcon, viewHolder.body,
+            mOnBindSuggestionCallback.onBindSuggestion(viewHolder.itemView, viewHolder.leftIcon, viewHolder.body,
                     suggestionItem, position);
         }
     }

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1156,8 +1156,9 @@ private void swapSuggestions(final List<? extends SearchSuggestion> newSearchSug
         ViewCompat.animate(mSuggestionListContainer).cancel();
         float translationY = (-mSuggestionListContainer.getHeight())+getVisibleItemsHeight(newSearchSuggestions);
 
+        Log.d("dfsdfsdff", translationY+"");
         //todo refactor go over and make more clear
-        final float newTranslationY = translationY<0 ?
+        final float newTranslationY = (translationY+fiveDp)<0 ?
                 newSearchSuggestions.size()==0 ? translationY : translationY+threeDp
                 : -fiveDp;
 

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -1364,9 +1364,10 @@ public void onCleared() {
             if(mSearchInput.length()!=0)
                 mSearchInput.setText("");
 
-            mSkipTextChangeEvent = true;
-            if(mIsTitleSet)
+            if(mIsTitleSet) {
+                mSkipTextChangeEvent = true;
                 mSearchInput.setText(mTitleText);
+            }
 
             if(mFocusChangeListener!=null) {
                 mFocusChangeListener.onFocusCleared();

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -479,7 +479,7 @@ private void applyXmlAttributes(AttributeSet attrs){
             setMenuItemIconColor(a.getColor(R.styleable.FloatingSearchView_floatingSearch_menuItemIconColor, getResources().getColor(R.color.menu_icon_color)));
             setDividerColor(a.getColor(R.styleable.FloatingSearchView_floatingSearch_dividerColor, getResources().getColor(R.color.divider)));
             setClearBtnColor(a.getColor(R.styleable.FloatingSearchView_floatingSearch_clearBtnColor, getResources().getColor(R.color.clear_btn_color)));
-            setViewTextColor(a.getColor(R.styleable.FloatingSearchView_floatingSearch_viewTextColor, getResources().getColor(android.R.color.primary_text_dark)));
+            setViewTextColor(a.getColor(R.styleable.FloatingSearchView_floatingSearch_viewTextColor, getResources().getColor(R.color.dark_gray)));
             setHintTextColor(a.getColor(R.styleable.FloatingSearchView_floatingSearch_hintTextColor, getResources().getColor(R.color.hint_color)));
             setSuggestionRightIconColor(a.getColor(R.styleable.FloatingSearchView_floatingSearch_suggestionRightIconColor, getResources().getColor(R.color.gray_active_icon)));
 

File: sample/src/main/java/com/arlib/floatingsearchviewdemo/MainActivity.java
Patch:
@@ -226,6 +226,8 @@ public void onDrawerClosed(View drawerView) { }
             @Override
             public void onDrawerStateChanged(int newState) { }
         });
+
+        mSearchView.setSearchFocused(true);
     }
 
     private void refreshBackgroundColor(String colorName, String colorValue){

File: library/src/main/java/com/arlib/floatingsearchview/util/actionmenu/MenuView.java
Patch:
@@ -245,6 +245,7 @@ private ImageView getOverflowActionHolder(){
     public void showIfRoomItems(boolean withAnim){
 
         cancelChildAnimListAndClear();
+        mActionShowAlwaysItems.clear();
 
         final int preAnimTranslationX = (int)getChildAt(0).getTranslationX();
 

File: library/src/main/java/com/arlib/floatingsearchview/FloatingSearchView.java
Patch:
@@ -197,6 +197,7 @@ public class FloatingSearchView extends FrameLayout {
     private SearchSuggestionsAdapter mSuggestionsAdapter;
     private boolean mIsCollapsing = false;
     private int mSuggestionsTextSizePx;
+    private boolean mIsInitialLayout = true;
 
     //An interface for implementing a listener that will get notified when the suggestions
     //section's height is set. This is to be used internally only.
@@ -387,8 +388,6 @@ private void setIconsColor(int color){
         DrawableCompat.setTint(mIconSearch, color);
     }
 
-    private boolean mIsInitialLayout = true;
-
     @Override
     protected void onLayout(boolean changed, int l, int t, int r, int b) {
 

