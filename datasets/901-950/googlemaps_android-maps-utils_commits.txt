File: demo/src/main/java/com/google/maps/android/utils/demo/MainActivity.java
Patch:
@@ -47,6 +47,7 @@ protected void onCreate(Bundle savedInstanceState) {
         addDemo("Clustering", ClusteringDemoActivity.class);
         addDemo("Advanced Markers Clustering Example", CustomAdvancedMarkerClusteringDemoActivity.class);
         addDemo("Clustering: Custom Look", CustomMarkerClusteringDemoActivity.class);
+        addDemo("Clustering: Diff", ClusteringDiffDemoActivity.class);
         addDemo("Clustering: 2K markers", BigClusteringDemoActivity.class);
         addDemo("Clustering: 20K only visible markers", VisibleClusteringDemoActivity.class);
         addDemo("Clustering: ViewModel", ClusteringViewModelDemoActivity.class);

File: demo/src/main/java/com/google/maps/android/utils/demo/ClusteringViewModel.java
Patch:
@@ -30,7 +30,7 @@
 
 public class ClusteringViewModel extends ViewModel {
 
-    private NonHierarchicalViewBasedAlgorithm<MyItem> mAlgorithm = new NonHierarchicalViewBasedAlgorithm<>(0, 0);
+    private final NonHierarchicalViewBasedAlgorithm<MyItem> mAlgorithm = new NonHierarchicalViewBasedAlgorithm<>(0, 0);
 
     NonHierarchicalViewBasedAlgorithm<MyItem> getAlgorithm() {
         return mAlgorithm;

File: demo/src/main/java/com/google/maps/android/utils/demo/MainActivity.java
Patch:
@@ -41,6 +41,7 @@ protected void onCreate(Bundle savedInstanceState) {
         mListView = findViewById(R.id.list);
 
         addDemo("Clustering", ClusteringDemoActivity.class);
+        addDemo("Advanced Markers Clustering Example", CustomAdvancedMarkerClusteringDemoActivity.class);
         addDemo("Clustering: Custom Look", CustomMarkerClusteringDemoActivity.class);
         addDemo("Clustering: 2K markers", BigClusteringDemoActivity.class);
         addDemo("Clustering: 20K only visible markers", VisibleClusteringDemoActivity.class);

File: library/src/main/java/com/google/maps/android/data/kml/KmlRenderer.java
Patch:
@@ -451,7 +451,7 @@ private void addGroundOverlays(HashMap<KmlGroundOverlay, GroundOverlay> groundOv
             if (groundOverlayUrl != null && groundOverlay.getLatLngBox() != null) {
                 // Can't draw overlay if url and coordinates are missing
                 if (getCachedGroundOverlayImage(groundOverlayUrl) != null) {
-                    addGroundOverlayToMap(groundOverlayUrl, getGroundOverlayMap(), true);
+                    addGroundOverlayToMap(groundOverlayUrl, groundOverlays, true);
                 } else {
                     mGroundOverlayUrls.add(groundOverlayUrl);
                 }

File: library/src/main/java/com/google/maps/android/clustering/ClusterManager.java
Patch:
@@ -38,7 +38,7 @@
 
 /**
  * Groups many items on a map based on zoom level.
- * <p/>
+ * <p>
  * ClusterManager should be added to the map as an: <ul> <li>{@link com.google.android.gms.maps.GoogleMap.OnCameraIdleListener}</li>
  * <li>{@link com.google.android.gms.maps.GoogleMap.OnMarkerClickListener}</li> </ul>
  */

File: library/src/main/java/com/google/maps/android/clustering/algo/NonHierarchicalDistanceBasedAlgorithm.java
Patch:
@@ -35,14 +35,14 @@
 /**
  * A simple clustering algorithm with O(nlog n) performance. Resulting clusters are not
  * hierarchical.
- * <p/>
+ * <p>
  * High level algorithm:<br>
  * 1. Iterate over items in the order they were added (candidate clusters).<br>
  * 2. Create a cluster with the center of the item. <br>
  * 3. Add all items that are within a certain distance to the cluster. <br>
  * 4. Move any items out of an existing cluster if they are closer to another cluster. <br>
  * 5. Remove those items from the list of candidate clusters.
- * <p/>
+ * <p>
  * Clusters have the center of the first element (not the centroid of the items within it).
  */
 public class NonHierarchicalDistanceBasedAlgorithm<T extends ClusterItem> extends AbstractAlgorithm<T> {

File: library/src/main/java/com/google/maps/android/collections/CircleManager.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Keeps track of collections of circles on the map. Delegates all Circle-related events to each
  * collection's individually managed listeners.
- * <p/>
+ * <p>
  * All circle operations (adds and removes) should occur via its collection class. That is, don't
  * add a circle via a collection, then remove it via Circle.remove()
  */

File: library/src/main/java/com/google/maps/android/collections/GroundOverlayManager.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Keeps track of collections of ground overlays on the map. Delegates all GroundOverlay-related events to each
  * collection's individually managed listeners.
- * <p/>
+ * <p>
  * All ground overlay operations (adds and removes) should occur via its collection class. That is, don't
  * add a ground overlay via a collection, then remove it via GroundOverlay.remove()
  */

File: library/src/main/java/com/google/maps/android/collections/MarkerManager.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Keeps track of collections of markers on the map. Delegates all Marker-related events to each
  * collection's individually managed listeners.
- * <p/>
+ * <p>
  * All marker operations (adds and removes) should occur via its collection class. That is, don't
  * add a marker via a collection, then remove it via Marker.remove()
  */

File: library/src/main/java/com/google/maps/android/collections/PolygonManager.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Keeps track of collections of polygons on the map. Delegates all Polygon-related events to each
  * collection's individually managed listeners.
- * <p/>
+ * <p>
  * All polygon operations (adds and removes) should occur via its collection class. That is, don't
  * add a polygon via a collection, then remove it via Polygon.remove()
  */

File: library/src/main/java/com/google/maps/android/collections/PolylineManager.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Keeps track of collections of polylines on the map. Delegates all Polyline-related events to each
  * collection's individually managed listeners.
- * <p/>
+ * <p>
  * All polyline operations (adds and removes) should occur via its collection class. That is, don't
  * add a polyline via a collection, then remove it via Polyline.remove()
  */

File: library/src/main/java/com/google/maps/android/ui/RotationLayout.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * RotationLayout rotates the contents of the layout by multiples of 90 degrees.
- * <p/>
+ * <p>
  * May not work with padding.
  */
 public class RotationLayout extends FrameLayout {

File: demo/src/gms/java/com/google/maps/android/utils/demo/CustomMarkerClusteringDemoActivity.java
Patch:
@@ -250,4 +250,4 @@ private LatLng position() {
     private double random(double min, double max) {
         return mRandom.nextDouble() * (max - min) + min;
     }
-}
+}
\ No newline at end of file

File: demo/src/gms/java/com/google/maps/android/utils/demo/MainActivity.java
Patch:
@@ -45,6 +45,7 @@ protected void onCreate(Bundle savedInstanceState) {
         addDemo("Clustering: 2K markers", BigClusteringDemoActivity.class);
         addDemo("Clustering: 20K only visible markers", VisibleClusteringDemoActivity.class);
         addDemo("Clustering: ViewModel", ClusteringViewModelDemoActivity.class);
+        addDemo("Clustering: Force on Zoom", ZoomClusteringDemoActivity.class);
         addDemo("PolyUtil.decode", PolyDecodeDemoActivity.class);
         addDemo("PolyUtil.simplify", PolySimplifyDemoActivity.class);
         addDemo("IconGenerator", IconGeneratorDemoActivity.class);

File: demo/src/v3/java/com/google/maps/android/utils/demo/CustomMarkerClusteringDemoActivity.java
Patch:
@@ -257,4 +257,4 @@ private LatLng position() {
     private double random(double min, double max) {
         return mRandom.nextDouble() * (max - min) + min;
     }
-}
+}
\ No newline at end of file

File: demo/src/v3/java/com/google/maps/android/utils/demo/MainActivity.java
Patch:
@@ -52,6 +52,7 @@ protected void onCreate(Bundle savedInstanceState) {
         addDemo("Clustering: 2K markers", BigClusteringDemoActivity.class);
         addDemo("Clustering: 20K only visible markers", VisibleClusteringDemoActivity.class);
         addDemo("Clustering: ViewModel", ClusteringViewModelDemoActivity.class);
+        addDemo("Clustering: Force on Zoom", ZoomClusteringDemoActivity.class);
         addDemo("PolyUtil.decode", PolyDecodeDemoActivity.class);
         addDemo("PolyUtil.simplify", PolySimplifyDemoActivity.class);
         addDemo("IconGenerator", IconGeneratorDemoActivity.class);

File: library/src/main/java/com/google/maps/android/collections/MapObjectManager.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -94,7 +94,7 @@ public boolean remove(O object) {
     protected abstract void removeObjectFromMap(O object);
 
     public class Collection {
-        private final Set<O> mObjects = new HashSet<>();
+        private final Set<O> mObjects = new LinkedHashSet<>();
 
         public Collection() {
         }

File: library/src/main/java/com/google/maps/android/clustering/view/DefaultClusterRenderer.java
Patch:
@@ -782,11 +782,11 @@ protected void onClusterItemUpdated(T item, Marker marker) {
         boolean changed = false;
         // Update marker text if the item text changed - same logic as adding marker in CreateMarkerTask.perform()
         if (item.getTitle() != null && item.getSnippet() != null) {
-            if (!marker.getTitle().equals(item.getTitle())) {
+            if (!item.getTitle().equals(marker.getTitle())) {
                 marker.setTitle(item.getTitle());
                 changed = true;
             }
-            if (!marker.getSnippet().equals(item.getSnippet())) {
+            if (!item.getSnippet().equals(marker.getSnippet())) {
                 marker.setSnippet(item.getSnippet());
                 changed = true;
             }

File: library/src/main/java/com/google/maps/android/PolyUtil.java
Patch:
@@ -129,7 +129,7 @@ public static boolean containsLocation(double latitude, double longitude, List<L
         return (nIntersect & 1) != 0;
     }
 
-    private static final double DEFAULT_TOLERANCE = 0.1;  // meters.
+    public static final double DEFAULT_TOLERANCE = 0.1;  // meters.
 
     /**
      * Computes whether the given point lies on or near the edge of a polygon, within a specified

File: demo/src/main/java/com/google/maps/android/utils/demo/MultiLayerDemoActivity.java
Patch:
@@ -174,7 +174,7 @@ public boolean onMarkerClick(Marker marker) {
                 return false;
             }
         });
-        // [START maps_multilayer_demo_init7]
+        // [END maps_multilayer_demo_init7]
     }
 
     private void addClusterItems(ClusterManager clusterManager) {

File: library/src/test/java/com/google/maps/android/data/geojson/GeoJsonLineStringStyleTest.java
Patch:
@@ -17,6 +17,8 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Color;
 
@@ -26,6 +28,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+@RunWith(RobolectricTestRunner.class)
 public class GeoJsonLineStringStyleTest {
     private GeoJsonLineStringStyle lineStringStyle;
 

File: library/src/test/java/com/google/maps/android/data/geojson/GeoJsonParserTest.java
Patch:
@@ -20,6 +20,8 @@
 
 import org.json.JSONObject;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -54,6 +56,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
+@RunWith(RobolectricTestRunner.class)
 public class GeoJsonParserTest {
     @Test
     public void testParseGeoJson() throws Exception {

File: library/src/test/java/com/google/maps/android/data/geojson/GeoJsonPolygonStyleTest.java
Patch:
@@ -17,6 +17,8 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Color;
 
@@ -26,6 +28,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+@RunWith(RobolectricTestRunner.class)
 public class GeoJsonPolygonStyleTest {
     private GeoJsonPolygonStyle polygonStyle;
 

File: library/src/test/java/com/google/maps/android/data/geojson/GeoJsonRendererTest.java
Patch:
@@ -21,6 +21,8 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -34,6 +36,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
+@RunWith(RobolectricTestRunner.class)
 public class GeoJsonRendererTest {
     private GoogleMap mMap1;
     private Set<GeoJsonFeature> geoJsonFeaturesSet;

File: library/src/test/java/com/google/maps/android/heatmaps/GradientTest.java
Patch:
@@ -17,6 +17,8 @@
 package com.google.maps.android.heatmaps;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 
 import android.graphics.Color;
 import android.os.Build;
@@ -26,6 +28,7 @@
 import static android.graphics.Color.RED;
 import static org.junit.Assert.assertEquals;
 
+@RunWith(RobolectricTestRunner.class)
 public class GradientTest {
     @Test
     public void testInterpolateColor() {

File: demo/src/main/java/com/google/maps/android/utils/demo/MultiLayerDemoActivity.java
Patch:
@@ -128,7 +128,7 @@ public void onFeatureClick(Feature feature) {
         KmlLayer kmlPolygonLayer;
         try {
             // KML Polyline
-            kmlPolylineLayer = new KmlLayer(getMap(), R.raw.south_london_line_kml, this, markerManager, polygonManager, polylineManager, groundOverlayManager);
+            kmlPolylineLayer = new KmlLayer(getMap(), R.raw.south_london_line_kml, this, markerManager, polygonManager, polylineManager, groundOverlayManager, null);
             kmlPolylineLayer.addLayerToMap();
             kmlPolylineLayer.setOnFeatureClickListener(new KmlLayer.OnFeatureClickListener() {
                 @Override
@@ -140,7 +140,7 @@ public void onFeatureClick(Feature feature) {
             });
 
             // KML Polygon
-            kmlPolygonLayer = new KmlLayer(getMap(), R.raw.south_london_square_kml, this, markerManager, polygonManager, polylineManager, groundOverlayManager);
+            kmlPolygonLayer = new KmlLayer(getMap(), R.raw.south_london_square_kml, this, markerManager, polygonManager, polylineManager, groundOverlayManager, null);
             kmlPolygonLayer.addLayerToMap();
             kmlPolygonLayer.setOnFeatureClickListener(new KmlLayer.OnFeatureClickListener() {
                 @Override

File: library/src/androidTest/java/com/google/maps/android/data/kml/KmlRendererTest.java
Patch:
@@ -36,7 +36,7 @@ public void setUp() throws Exception {
         mParser = new KmlParser(parser);
         mParser.parseKml();
 
-        mRenderer = new KmlRenderer(mMap1, null, null, null, null, null);
+        mRenderer = new KmlRenderer(mMap1, null, null, null, null, null, null);
         mRenderer.storeKmlData(mParser.getStyles(), mParser.getStyleMaps(), mParser.getPlacemarks(),
                 mParser.getContainers(), mParser.getGroundOverlays());
     }

File: library/src/test/java/com/google/maps/android/data/kml/KmlRendererTest.java
Patch:
@@ -33,7 +33,7 @@ public void testAssignStyleMap() {
         KmlStyle redStyle = new KmlStyle();
         styles.put("BlueValue", blueStyle);
         styles.put("RedValue", redStyle);
-        KmlRenderer renderer = new KmlRenderer(null, null, null, null, null, null);
+        KmlRenderer renderer = new KmlRenderer(null, null, null, null, null, null, null);
         renderer.assignStyleMap(styleMap, styles);
         assertNotNull(styles.get("BlueKey"));
         assertEquals(styles.get("BlueKey"), styles.get("BlueValue"));

File: library/src/main/java/com/google/maps/android/quadtree/PointQuadTree.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 
@@ -118,7 +118,7 @@ private void insert(double x, double y, T item) {
             return;
         }
         if (mItems == null) {
-            mItems = new HashSet<>();
+            mItems = new LinkedHashSet<>();
         }
         mItems.add(item);
         if (mItems.size() > MAX_ELEMENTS && mDepth < MAX_DEPTH) {

File: library/src/main/java/com/google/maps/android/data/kml/KmlStyle.java
Patch:
@@ -138,7 +138,7 @@ public void setFill(boolean fill) {
      *
      * @return scale value
      */
-    /* package */ double getIconScale() {
+    public double getIconScale() {
         return mScale;
     }
 

File: library/src/main/java/com/google/maps/android/data/Style.java
Patch:
@@ -43,7 +43,9 @@ public abstract class Style extends Observable {
     public Style() {
         mMarkerOptions = new MarkerOptions();
         mPolylineOptions = new PolylineOptions();
+        mPolylineOptions.clickable(true);
         mPolygonOptions = new PolygonOptions();
+        mPolygonOptions.clickable(true);
     }
 
     /**

File: library/src/main/java/com/google/maps/android/data/geojson/GeoJsonLineStringStyle.java
Patch:
@@ -23,6 +23,7 @@ public class GeoJsonLineStringStyle extends Style implements GeoJsonStyle {
      */
     public GeoJsonLineStringStyle() {
         mPolylineOptions = new PolylineOptions();
+        mPolylineOptions.clickable(true);
     }
 
     /**

File: library/src/main/java/com/google/maps/android/data/kml/KmlStyle.java
Patch:
@@ -388,6 +388,7 @@ private static PolylineOptions createPolylineOptions(PolylineOptions originalPol
         PolylineOptions polylineOptions = new PolylineOptions();
         polylineOptions.color(originalPolylineOption.getColor());
         polylineOptions.width(originalPolylineOption.getWidth());
+        polylineOptions.clickable(originalPolylineOption.isClickable());
         return polylineOptions;
     }
 
@@ -409,6 +410,7 @@ private static PolygonOptions createPolygonOptions(PolygonOptions originalPolygo
             polygonOptions.strokeColor(originalPolygonOption.getStrokeColor());
             polygonOptions.strokeWidth(originalPolygonOption.getStrokeWidth());
         }
+        polygonOptions.clickable(originalPolygonOption.isClickable());
         return polygonOptions;
     }
 

File: library/src/main/java/com/google/maps/android/clustering/ClusterManager.java
Patch:
@@ -93,13 +93,13 @@ public MarkerManager getMarkerManager() {
         return mMarkerManager;
     }
 
-    public void setRenderer(ClusterRenderer<T> view) {
+    public void setRenderer(ClusterRenderer<T> renderer) {
         mRenderer.setOnClusterClickListener(null);
         mRenderer.setOnClusterItemClickListener(null);
         mClusterMarkers.clear();
         mMarkers.clear();
         mRenderer.onRemove();
-        mRenderer = view;
+        mRenderer = renderer;
         mRenderer.onAdd();
         mRenderer.setOnClusterClickListener(mOnClusterClickListener);
         mRenderer.setOnClusterInfoWindowClickListener(mOnClusterInfoWindowClickListener);

File: library/src/main/java/com/google/maps/android/PolyUtil.java
Patch:
@@ -483,9 +483,8 @@ public static double distanceToLine(final LatLng p, final LatLng start, final La
         if (u >= 1) {
             return computeDistanceBetween(p, end);
         }
-        LatLng sa = new LatLng(p.latitude - start.latitude, p.longitude - start.longitude);
-        LatLng sb = new LatLng(u * (end.latitude - start.latitude), u * (end.longitude - start.longitude));
-        return computeDistanceBetween(sa, sb);
+        LatLng su = new LatLng(start.latitude + u * (end.latitude - start.latitude), start.longitude + u * (end.longitude - start.longitude));
+        return computeDistanceBetween(p, su);
     }
 
     /**

File: library/src/androidTest/java/com/google/maps/android/data/geojson/GeoJsonPointStyleTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.google.android.gms.maps.MapsInitializer;
 import com.google.android.gms.maps.model.BitmapDescriptor;
 import com.google.android.gms.maps.model.BitmapDescriptorFactory;
-import com.google.maps.android.BuildConfig;
+import com.google.maps.android.TestUtil;
 
 import org.junit.Assume;
 import org.junit.Before;
@@ -67,7 +67,7 @@ public void testFlat() {
 
     @Test
     public void testIcon() {
-        if (BuildConfig.TRAVIS != null && BuildConfig.TRAVIS.equals("true")) {
+        if (TestUtil.isRunningOnTravis()) {
             Assume.assumeTrue("Skipping GeoJsonPointStyleTest.testIcon() - this is expected behavior on Travis CI (#573)", false);
             return;
         }

File: demo/src/main/java/com/google/maps/android/utils/demo/KmlDemoActivity.java
Patch:
@@ -44,7 +44,7 @@ public void startDemo (boolean isRestore) {
 
     private void retrieveFileFromResource() {
         try {
-            KmlLayer kmlLayer = new KmlLayer(mMap, R.raw.campus, getApplicationContext());
+            KmlLayer kmlLayer = new KmlLayer(mMap, R.raw.campus, this);
             kmlLayer.addLayerToMap();
             moveCameraToKml(kmlLayer);
         } catch (IOException e) {
@@ -106,7 +106,7 @@ protected byte[] doInBackground(String... params) {
         protected void onPostExecute(byte[] byteArr) {
             try {
                 KmlLayer kmlLayer = new KmlLayer(mMap, new ByteArrayInputStream(byteArr),
-                        getApplicationContext());
+                        KmlDemoActivity.this);
                 kmlLayer.addLayerToMap();
                 kmlLayer.setOnFeatureClickListener(new KmlLayer.OnFeatureClickListener() {
                     @Override

File: library/src/main/java/com/google/maps/android/ui/IconGenerator.java
Patch:
@@ -57,7 +57,7 @@ public class IconGenerator {
      */
     public IconGenerator(Context context) {
         mContext = context;
-        mBackground = new BubbleDrawable(mContext.getResources());
+        mBackground = new BubbleDrawable(mContext);
         mContainer = (ViewGroup) LayoutInflater.from(mContext).inflate(R.layout.amu_text_bubble, null);
         mRotationLayout = (RotationLayout) mContainer.getChildAt(0);
         mContentView = mTextView = (TextView) mRotationLayout.findViewById(R.id.amu_text);

File: demo/src/com/google/maps/android/utils/demo/BaseDemoActivity.java
Patch:
@@ -17,7 +17,9 @@
 package com.google.maps.android.utils.demo;
 
 import android.os.Bundle;
+
 import androidx.fragment.app.FragmentActivity;
+
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.OnMapReadyCallback;
 import com.google.android.gms.maps.SupportMapFragment;

File: demo/src/com/google/maps/android/utils/demo/BigClusteringDemoActivity.java
Patch:
@@ -59,4 +59,4 @@ private void readItems() throws JSONException {
             }
         }
     }
-}
\ No newline at end of file
+}

File: demo/src/com/google/maps/android/utils/demo/ClusteringDemoActivity.java
Patch:
@@ -53,4 +53,4 @@ private void readItems() throws JSONException {
         List<MyItem> items = new MyItemReader().read(inputStream);
         mClusterManager.addItems(items);
     }
-}
\ No newline at end of file
+}

File: demo/src/com/google/maps/android/utils/demo/PolySimplifyDemoActivity.java
Patch:
@@ -16,15 +16,15 @@
 
 package com.google.maps.android.utils.demo;
 
+import android.graphics.Color;
+
 import com.google.android.gms.maps.CameraUpdateFactory;
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.model.LatLng;
 import com.google.android.gms.maps.model.PolygonOptions;
 import com.google.android.gms.maps.model.PolylineOptions;
 import com.google.maps.android.PolyUtil;
 
-import android.graphics.Color;
-
 import java.util.ArrayList;
 import java.util.List;
 

File: demo/src/com/google/maps/android/utils/demo/VisibleClusteringDemoActivity.java
Patch:
@@ -67,4 +67,4 @@ private void readItems() throws JSONException {
             }
         }
     }
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/PolyUtil.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.google.android.gms.maps.model.LatLng;
 
-import java.util.List;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Stack;
 
 import static com.google.maps.android.SphericalUtil.*;

File: library/src/com/google/maps/android/SphericalUtil.java
Patch:
@@ -20,8 +20,8 @@
 
 import java.util.List;
 
-import static java.lang.Math.*;
 import static com.google.maps.android.MathUtil.*;
+import static java.lang.Math.*;
 
 public class SphericalUtil {
 

File: library/src/com/google/maps/android/clustering/Cluster.java
Patch:
@@ -29,4 +29,4 @@ public interface Cluster<T extends ClusterItem> {
     Collection<T> getItems();
 
     int getSize();
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/clustering/ClusterItem.java
Patch:
@@ -37,4 +37,4 @@ public interface ClusterItem {
      * The description of this marker.
      */
     String getSnippet();
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/clustering/ClusterManager.java
Patch:
@@ -18,7 +18,6 @@
 
 import android.content.Context;
 import android.os.AsyncTask;
-import android.os.Build;
 
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.model.CameraPosition;

File: library/src/com/google/maps/android/clustering/algo/StaticCluster.java
Patch:
@@ -80,4 +80,4 @@ public boolean equals(Object other) {
         return ((StaticCluster<?>) other).mCenter.equals(mCenter)
                 && ((StaticCluster<?>) other).mItems.equals(mItems);
     }
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/clustering/view/ClusterRenderer.java
Patch:
@@ -56,4 +56,4 @@ public interface ClusterRenderer<T extends ClusterItem> {
      * Called when the view is removed.
      */
     void onRemove();
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/data/MultiGeometry.java
Patch:
@@ -17,7 +17,6 @@
 package com.google.maps.android.data;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 
 /**

File: library/src/com/google/maps/android/data/Point.java
Patch:
@@ -68,4 +68,3 @@ public String toString() {
     }
 
 }
-

File: library/src/com/google/maps/android/data/Style.java
Patch:
@@ -113,4 +113,4 @@ public void setPolygonStrokeWidth(float strokeWidth) {
     public void setPolygonFillColor(int fillColor) {
         mPolygonOptions.fillColor(fillColor);
     }
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/data/geojson/GeoJsonGeometryCollection.java
Patch:
@@ -37,4 +37,4 @@ public String getType() {
     public List<Geometry> getGeometries() {
         return getGeometryObject();
     }
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/data/geojson/GeoJsonLayer.java
Patch:
@@ -1,14 +1,14 @@
 package com.google.maps.android.data.geojson;
 
+import android.content.Context;
+
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.model.LatLngBounds;
 import com.google.maps.android.data.Layer;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import android.content.Context;
-
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;

File: library/src/com/google/maps/android/data/geojson/GeoJsonParser.java
Patch:
@@ -1,5 +1,6 @@
 package com.google.maps.android.data.geojson;
 
+import android.util.Log;
 
 import com.google.android.gms.maps.model.LatLng;
 import com.google.android.gms.maps.model.LatLngBounds;
@@ -9,8 +10,6 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import android.util.Log;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;

File: library/src/com/google/maps/android/data/geojson/GeoJsonPoint.java
Patch:
@@ -57,4 +57,4 @@ public LatLng getCoordinates() {
     public Double getAltitude() {
         return mAltitude;
     }
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/data/kml/KmlContainerParser.java
Patch:
@@ -161,4 +161,4 @@ private static void setContainerPlacemark(XmlPullParser parser,
         containerPlacemarks.put(KmlFeatureParser.createPlacemark(parser), null);
     }
 
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/data/kml/KmlLayer.java
Patch:
@@ -1,14 +1,14 @@
 package com.google.maps.android.data.kml;
 
+import android.content.Context;
+
 import com.google.android.gms.maps.GoogleMap;
 import com.google.maps.android.data.Layer;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlPullParserFactory;
 
-import android.content.Context;
-
 import java.io.IOException;
 import java.io.InputStream;
 

File: library/src/com/google/maps/android/data/kml/KmlMultiGeometry.java
Patch:
@@ -36,4 +36,4 @@ public String toString() {
         sb.append("\n}\n");
         return sb.toString();
     }
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/data/kml/KmlPoint.java
Patch:
@@ -33,4 +33,4 @@ public KmlPoint(LatLng coordinates, Double altitude) {
     public Double getAltitude() {
         return mAltitude;
     }
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/data/kml/KmlRenderer.java
Patch:
@@ -13,8 +13,8 @@
 import com.google.android.gms.maps.model.GroundOverlayOptions;
 import com.google.android.gms.maps.model.Marker;
 import com.google.maps.android.data.Feature;
-import com.google.maps.android.data.Renderer;
 import com.google.maps.android.data.Geometry;
+import com.google.maps.android.data.Renderer;
 
 import java.io.IOException;
 import java.io.InputStream;

File: library/src/com/google/maps/android/data/kml/KmlTrack.java
Patch:
@@ -1,12 +1,9 @@
 package com.google.maps.android.data.kml;
 
-import android.util.Log;
-
 import com.google.android.gms.maps.model.LatLng;
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
 
 /**
  * Created by thorin on 22/02/2017.

File: library/src/com/google/maps/android/geometry/Bounds.java
Patch:
@@ -58,4 +58,4 @@ public boolean intersects(Bounds bounds) {
     public boolean contains(Bounds bounds) {
         return bounds.minX >= minX && bounds.maxX <= maxX && bounds.minY >= minY && bounds.maxY <= maxY;
     }
-}
\ No newline at end of file
+}

File: library/tests/src/com/google/maps/android/clustering/StaticClusterTest.java
Patch:
@@ -19,13 +19,15 @@
 import com.google.android.gms.maps.model.LatLng;
 import com.google.maps.android.clustering.algo.StaticCluster;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.Assert;
 
 public class StaticClusterTest {
 
     private StaticCluster<ClusterItem> mCluster;
 
+    @Before
     public void setUp() {
         mCluster = new StaticCluster<ClusterItem>(new LatLng(0.1, 0.5));
     }

File: library/tests/src/com/google/maps/android/data/kml/KmlContainerParserTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import android.support.test.InstrumentationRegistry;
+import androidx.test.platform.app.InstrumentationRegistry;
 
 import org.junit.Test;
 import org.junit.Assert;
@@ -15,7 +15,7 @@
 public class KmlContainerParserTest {
 
     public XmlPullParser createParser(int res) throws Exception {
-        InputStream stream = InstrumentationRegistry.getTargetContext().getResources().openRawResource(res);
+        InputStream stream = InstrumentationRegistry.getInstrumentation().getTargetContext().getResources().openRawResource(res);
         XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
         factory.setNamespaceAware(true);
         XmlPullParser parser = factory.newPullParser();

File: library/tests/src/com/google/maps/android/data/kml/KmlFeatureParserTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import android.support.test.InstrumentationRegistry;
+import androidx.test.platform.app.InstrumentationRegistry;
 
 import org.junit.Test;
 import org.junit.Assert;
@@ -17,7 +17,7 @@
 public class KmlFeatureParserTest {
 
     public XmlPullParser createParser(int res) throws Exception {
-        InputStream stream = InstrumentationRegistry.getTargetContext().getResources().openRawResource(res);
+        InputStream stream = InstrumentationRegistry.getInstrumentation().getTargetContext().getResources().openRawResource(res);
         XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
         factory.setNamespaceAware(true);
         XmlPullParser parser = factory.newPullParser();
@@ -70,7 +70,7 @@ public void testGroundOverlay() throws Exception {
         Assert.assertNotNull(groundOverlay);
         Assert.assertEquals(groundOverlay.getProperty("name"), "Sample Ground Overlay");
         Assert.assertNotNull(groundOverlay.getImageUrl());
-        Assert.assertEquals(groundOverlay.getGroundOverlayOptions().getZIndex(), 99.0f);
+        Assert.assertEquals(groundOverlay.getGroundOverlayOptions().getZIndex(), 99.0f, 0);
         Assert.assertTrue(groundOverlay.getGroundOverlayOptions().isVisible());
         Assert.assertNotNull(groundOverlay.getLatLngBox());
         xmlPullParser = createParser(R.raw.amu_ground_overlay_color);

File: library/tests/src/com/google/maps/android/data/kml/KmlParserTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import android.support.test.InstrumentationRegistry;
+import androidx.test.platform.app.InstrumentationRegistry;
 import android.graphics.Color;
 
 import org.junit.Test;
@@ -14,7 +14,7 @@
 public class KmlParserTest {
 
     public XmlPullParser createParser(int res) throws Exception {
-        InputStream stream = InstrumentationRegistry.getTargetContext().getResources().openRawResource(res);
+        InputStream stream = InstrumentationRegistry.getInstrumentation().getTargetContext().getResources().openRawResource(res);
         XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
         factory.setNamespaceAware(true);
         XmlPullParser parser = factory.newPullParser();

File: library/tests/src/com/google/maps/android/data/kml/KmlPointTest.java
Patch:
@@ -32,8 +32,8 @@ public void testGetKmlGeometryObject() throws Exception {
         kmlPoint = createSimplePoint();
         Assert.assertNotNull(kmlPoint);
         Assert.assertNotNull(kmlPoint.getGeometryObject());
-        Assert.assertEquals(kmlPoint.getGeometryObject().latitude, 0.0);
-        Assert.assertEquals(kmlPoint.getGeometryObject().longitude, 50.0);
+        Assert.assertEquals(kmlPoint.getGeometryObject().latitude, 0.0, 0);
+        Assert.assertEquals(kmlPoint.getGeometryObject().longitude, 50.0, 0);
     }
 
     @Test

File: library/tests/src/com/google/maps/android/quadtree/PointQuadTreeTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.maps.android.geometry.Bounds;
 import com.google.maps.android.geometry.Point;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.Assert;
 
@@ -29,6 +30,7 @@ public class PointQuadTreeTest {
 
     private PointQuadTree<Item> mTree;
 
+    @Before
     public void setUp() {
         mTree = new PointQuadTree<Item>(0, 1, 0, 1);
     }

File: library/src/com/google/maps/android/ui/SquareTextView.java
Patch:
@@ -19,9 +19,10 @@
 import android.content.Context;
 import android.graphics.Canvas;
 import android.util.AttributeSet;
-import android.widget.TextView;
 
-public class SquareTextView extends TextView {
+import androidx.appcompat.widget.AppCompatTextView;
+
+public class SquareTextView extends AppCompatTextView {
     private int mOffsetTop = 0;
     private int mOffsetLeft = 0;
 

File: demo/src/com/google/maps/android/utils/demo/BaseDemoActivity.java
Patch:
@@ -17,7 +17,7 @@
 package com.google.maps.android.utils.demo;
 
 import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
+import androidx.fragment.app.FragmentActivity;
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.OnMapReadyCallback;
 import com.google.android.gms.maps.SupportMapFragment;

File: demo/src/com/google/maps/android/utils/demo/ClusteringDemoActivity.java
Patch:
@@ -38,7 +38,7 @@ public class ClusteringDemoActivity extends BaseDemoActivity {
     protected void startDemo() {
         getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(51.503186, -0.126446), 10));
 
-        mClusterManager = new ClusterManager<MyItem>(this, getMap());
+        mClusterManager = new ClusterManager<>(this, getMap());
         getMap().setOnCameraIdleListener(mClusterManager);
 
         try {

File: demo/src/com/google/maps/android/utils/demo/DistanceDemoActivity.java
Patch:
@@ -43,7 +43,7 @@ protected int getLayoutId() {
 
     @Override
     protected void startDemo() {
-        mTextView = (TextView) findViewById(R.id.textView);
+        mTextView = findViewById(R.id.textView);
 
         getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(-33.8256, 151.2395), 10));
         getMap().setOnMarkerDragListener(this);

File: demo/src/com/google/maps/android/utils/demo/HeatmapsDemoActivity.java
Patch:
@@ -89,7 +89,7 @@ public class HeatmapsDemoActivity extends BaseDemoActivity {
      * Maps name of data set to data (list of LatLngs)
      * Also maps to the URL of the data set for attribution
      */
-    private HashMap<String, DataSet> mLists = new HashMap<String, DataSet>();
+    private HashMap<String, DataSet> mLists = new HashMap<>();
 
     @Override
     protected int getLayoutId() {
@@ -101,7 +101,7 @@ protected void startDemo() {
         getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(-25, 143), 4));
 
         // Set up the spinner/dropdown list
-        Spinner spinner = (Spinner) findViewById(R.id.spinner);
+        Spinner spinner = findViewById(R.id.spinner);
         ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,
                 R.array.heatmaps_datasets_array, android.R.layout.simple_spinner_item);
         adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
@@ -159,7 +159,7 @@ public void onItemSelected(AdapterView<?> parent, View view,
                                    int pos, long id) {
             String dataset = parent.getItemAtPosition(pos).toString();
 
-            TextView attribution = ((TextView) findViewById(R.id.attribution));
+            TextView attribution = findViewById(R.id.attribution);
 
             // Check if need to instantiate (avoid setData etc twice)
             if (mProvider == null) {

File: demo/src/com/google/maps/android/utils/demo/KmlDemoActivity.java
Patch:
@@ -118,6 +118,8 @@ public void onFeatureClick(Feature feature) {
                 e.printStackTrace();
             } catch (IOException e) {
                 e.printStackTrace();
+            } catch (NullPointerException e) {
+                e.printStackTrace();
             }
         }
     }

File: demo/src/com/google/maps/android/utils/demo/VisibleClusteringDemoActivity.java
Patch:
@@ -40,7 +40,7 @@ protected void startDemo() {
 
         getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(51.503186, -0.126446), 10));
 
-        mClusterManager = new ClusterManager<MyItem>(this, getMap());
+        mClusterManager = new ClusterManager<>(this, getMap());
         mClusterManager.setAlgorithm(new NonHierarchicalViewBasedAlgorithm<MyItem>(
                 metrics.widthPixels, metrics.heightPixels));
 

File: library/src/com/google/maps/android/clustering/algo/GridBasedAlgorithm.java
Patch:
@@ -16,13 +16,12 @@
 
 package com.google.maps.android.clustering.algo;
 
+import androidx.collection.LongSparseArray;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
-import android.support.v4.util.LongSparseArray;
-
 import com.google.maps.android.clustering.Cluster;
 import com.google.maps.android.clustering.ClusterItem;
 import com.google.maps.android.geometry.Point;

File: library/src/com/google/maps/android/clustering/algo/PreCachingAlgorithmDecorator.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.clustering.algo;
 
-import android.support.v4.util.LruCache;
+import androidx.collection.LruCache;
 
 import com.google.maps.android.clustering.Cluster;
 import com.google.maps.android.clustering.ClusterItem;

File: library/src/com/google/maps/android/data/Renderer.java
Patch:
@@ -18,12 +18,13 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.support.v4.util.LruCache;
 import android.text.Html;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.TextView;
 
+import androidx.collection.LruCache;
+
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.model.BitmapDescriptorFactory;
 import com.google.android.gms.maps.model.GroundOverlay;

File: library/src/com/google/maps/android/heatmaps/HeatmapTileProvider.java
Patch:
@@ -18,7 +18,7 @@
 
 import android.graphics.Bitmap;
 import android.graphics.Color;
-import android.support.v4.util.LongSparseArray;
+import androidx.collection.LongSparseArray;
 
 import com.google.android.gms.maps.model.LatLng;
 import com.google.android.gms.maps.model.Tile;

File: demo/src/com/google/maps/android/utils/demo/BaseDemoActivity.java
Patch:
@@ -18,9 +18,9 @@
 
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
-import com.google.android.gms.maps.GoogleMap;
-import com.google.android.gms.maps.OnMapReadyCallback;
-import com.google.android.gms.maps.SupportMapFragment;
+import com.google.android.libraries.maps.GoogleMap;
+import com.google.android.libraries.maps.OnMapReadyCallback;
+import com.google.android.libraries.maps.SupportMapFragment;
 
 public abstract class BaseDemoActivity extends FragmentActivity implements OnMapReadyCallback {
     private GoogleMap mMap;

File: demo/src/com/google/maps/android/utils/demo/BigClusteringDemoActivity.java
Patch:
@@ -23,8 +23,8 @@
 
 import android.widget.Toast;
 
-import com.google.android.gms.maps.CameraUpdateFactory;
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.CameraUpdateFactory;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.ClusterManager;
 import com.google.maps.android.utils.demo.model.MyItem;
 

File: demo/src/com/google/maps/android/utils/demo/ClusteringDemoActivity.java
Patch:
@@ -18,8 +18,8 @@
 
 import android.widget.Toast;
 
-import com.google.android.gms.maps.CameraUpdateFactory;
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.CameraUpdateFactory;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.ClusterManager;
 import com.google.maps.android.utils.demo.model.MyItem;
 

File: demo/src/com/google/maps/android/utils/demo/PolyDecodeDemoActivity.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.google.maps.android.utils.demo;
 
-import com.google.android.gms.maps.CameraUpdateFactory;
-import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.PolylineOptions;
+import com.google.android.libraries.maps.CameraUpdateFactory;
+import com.google.android.libraries.maps.model.LatLng;
+import com.google.android.libraries.maps.model.PolylineOptions;
 import com.google.maps.android.PolyUtil;
 
 import java.util.List;

File: demo/src/com/google/maps/android/utils/demo/VisibleClusteringDemoActivity.java
Patch:
@@ -19,8 +19,8 @@
 import android.util.DisplayMetrics;
 import android.widget.Toast;
 
-import com.google.android.gms.maps.CameraUpdateFactory;
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.CameraUpdateFactory;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.ClusterManager;
 import com.google.maps.android.clustering.algo.NonHierarchicalViewBasedAlgorithm;
 import com.google.maps.android.utils.demo.model.MyItem;

File: demo/src/com/google/maps/android/utils/demo/model/MyItem.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.utils.demo.model;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.ClusterItem;
 
 public class MyItem implements ClusterItem {

File: demo/src/com/google/maps/android/utils/demo/model/Person.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.utils.demo.model;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.ClusterItem;
 
 public class Person implements ClusterItem {

File: library/src/com/google/maps/android/MarkerManager.java
Patch:
@@ -18,9 +18,9 @@
 
 import android.view.View;
 
-import com.google.android.gms.maps.GoogleMap;
-import com.google.android.gms.maps.model.Marker;
-import com.google.android.gms.maps.model.MarkerOptions;
+import com.google.android.libraries.maps.GoogleMap;
+import com.google.android.libraries.maps.model.Marker;
+import com.google.android.libraries.maps.model.MarkerOptions;
 
 import java.util.Collections;
 import java.util.HashMap;

File: library/src/com/google/maps/android/PolyUtil.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import java.util.List;
 import java.util.ArrayList;

File: library/src/com/google/maps/android/SphericalUtil.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import java.util.List;
 

File: library/src/com/google/maps/android/clustering/Cluster.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.clustering;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import java.util.Collection;
 

File: library/src/com/google/maps/android/clustering/ClusterItem.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.clustering;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 /**
  * ClusterItem represents a marker on the map.

File: library/src/com/google/maps/android/clustering/algo/NonHierarchicalDistanceBasedAlgorithm.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.Cluster;
 import com.google.maps.android.clustering.ClusterItem;
 import com.google.maps.android.geometry.Bounds;

File: library/src/com/google/maps/android/clustering/algo/NonHierarchicalViewBasedAlgorithm.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.google.maps.android.clustering.algo;
 
-import com.google.android.gms.maps.model.CameraPosition;
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.CameraPosition;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.ClusterItem;
 import com.google.maps.android.geometry.Bounds;
 import com.google.maps.android.geometry.Point;

File: library/src/com/google/maps/android/clustering/algo/ScreenBasedAlgorithm.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.clustering.algo;
 
-import com.google.android.gms.maps.model.CameraPosition;
+import com.google.android.libraries.maps.model.CameraPosition;
 import com.google.maps.android.clustering.ClusterItem;
 
 /**

File: library/src/com/google/maps/android/clustering/algo/ScreenBasedAlgorithmAdapter.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.clustering.algo;
 
-import com.google.android.gms.maps.model.CameraPosition;
+import com.google.android.libraries.maps.model.CameraPosition;
 import com.google.maps.android.clustering.Cluster;
 import com.google.maps.android.clustering.ClusterItem;
 

File: library/src/com/google/maps/android/clustering/algo/StaticCluster.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.clustering.algo;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.Cluster;
 import com.google.maps.android.clustering.ClusterItem;
 

File: library/src/com/google/maps/android/data/DataPolygon.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.data;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import java.util.List;
 

File: library/src/com/google/maps/android/data/LineString.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.data;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import java.util.List;
 

File: library/src/com/google/maps/android/data/Point.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.data;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 /**
  * An abstraction that shares the common properties of

File: library/src/com/google/maps/android/data/Style.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.google.maps.android.data;
 
-import com.google.android.gms.maps.model.MarkerOptions;
-import com.google.android.gms.maps.model.PolygonOptions;
-import com.google.android.gms.maps.model.PolylineOptions;
+import com.google.android.libraries.maps.model.MarkerOptions;
+import com.google.android.libraries.maps.model.PolygonOptions;
+import com.google.android.libraries.maps.model.PolylineOptions;
 
 import java.util.Observable;
 

File: library/src/com/google/maps/android/data/geojson/GeoJsonLayer.java
Patch:
@@ -1,7 +1,7 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.GoogleMap;
-import com.google.android.gms.maps.model.LatLngBounds;
+import com.google.android.libraries.maps.GoogleMap;
+import com.google.android.libraries.maps.model.LatLngBounds;
 import com.google.maps.android.data.Layer;
 
 import org.json.JSONException;

File: library/src/com/google/maps/android/data/geojson/GeoJsonLineString.java
Patch:
@@ -1,13 +1,13 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.LineString;
 
 import java.util.List;
 
 /**
  * A GeoJsonLineString geometry represents a number of connected {@link
- * com.google.android.gms.maps.model.LatLng}s.
+ * com.google.android.libraries.maps.model.LatLng}s.
  */
 public class GeoJsonLineString extends LineString {
     private final List<Double> mAltitudes;

File: library/src/com/google/maps/android/data/geojson/GeoJsonLineStringStyle.java
Patch:
@@ -1,7 +1,7 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.PatternItem;
-import com.google.android.gms.maps.model.PolylineOptions;
+import com.google.android.libraries.maps.model.PatternItem;
+import com.google.android.libraries.maps.model.PolylineOptions;
 import com.google.maps.android.data.Style;
 
 import java.util.Arrays;

File: library/src/com/google/maps/android/data/geojson/GeoJsonParser.java
Patch:
@@ -1,8 +1,8 @@
 package com.google.maps.android.data.geojson;
 
 
-import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.LatLngBounds;
+import com.google.android.libraries.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLngBounds;
 import com.google.maps.android.data.Geometry;
 
 import org.json.JSONArray;

File: library/src/com/google/maps/android/data/geojson/GeoJsonPoint.java
Patch:
@@ -1,10 +1,10 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.Point;
 
 /**
- * A GeoJsonPoint geometry contains a single {@link com.google.android.gms.maps.model.LatLng}.
+ * A GeoJsonPoint geometry contains a single {@link com.google.android.libraries.maps.model.LatLng}.
  */
 public class GeoJsonPoint extends Point {
     private final Double mAltitude;

File: library/src/com/google/maps/android/data/geojson/GeoJsonPolygon.java
Patch:
@@ -1,13 +1,13 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.DataPolygon;
 
 import java.util.ArrayList;
 import java.util.List;
 
 /**
- * A GeoJsonPolygon geometry contains an array of arrays of {@link com.google.android.gms.maps.model.LatLng}s.
+ * A GeoJsonPolygon geometry contains an array of arrays of {@link com.google.android.libraries.maps.model.LatLng}s.
  * The first array is the polygon exterior boundary. Subsequent arrays are holes.
  */
 

File: library/src/com/google/maps/android/data/geojson/GeoJsonPolygonStyle.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.PolygonOptions;
+import com.google.android.libraries.maps.model.PolygonOptions;
 import com.google.maps.android.data.Style;
 
 import java.util.Arrays;

File: library/src/com/google/maps/android/data/geojson/GeoJsonRenderer.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.GoogleMap;
+import com.google.android.libraries.maps.GoogleMap;
 import com.google.maps.android.data.Feature;
 import com.google.maps.android.data.Renderer;
 

File: library/src/com/google/maps/android/data/kml/KmlContainer.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.GroundOverlay;
+import com.google.android.libraries.maps.model.GroundOverlay;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: library/src/com/google/maps/android/data/kml/KmlContainerParser.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.GroundOverlay;
+import com.google.android.libraries.maps.model.GroundOverlay;
 import com.google.maps.android.data.Feature;
 
 import org.xmlpull.v1.XmlPullParser;

File: library/src/com/google/maps/android/data/kml/KmlFeatureParser.java
Patch:
@@ -1,7 +1,7 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.LatLngBounds;
+import com.google.android.libraries.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLngBounds;
 import com.google.maps.android.data.Geometry;
 
 import org.xmlpull.v1.XmlPullParser;

File: library/src/com/google/maps/android/data/kml/KmlGroundOverlay.java
Patch:
@@ -1,7 +1,7 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.GroundOverlayOptions;
-import com.google.android.gms.maps.model.LatLngBounds;
+import com.google.android.libraries.maps.model.GroundOverlayOptions;
+import com.google.android.libraries.maps.model.LatLngBounds;
 
 import java.util.HashMap;
 import java.util.Map;

File: library/src/com/google/maps/android/data/kml/KmlLayer.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.GoogleMap;
+import com.google.android.libraries.maps.GoogleMap;
 import com.google.maps.android.data.Layer;
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;

File: library/src/com/google/maps/android/data/kml/KmlLineString.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.LineString;
 
 import java.util.ArrayList;

File: library/src/com/google/maps/android/data/kml/KmlParser.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.GroundOverlay;
+import com.google.android.libraries.maps.model.GroundOverlay;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;

File: library/src/com/google/maps/android/data/kml/KmlPlacemark.java
Patch:
@@ -1,8 +1,8 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.MarkerOptions;
-import com.google.android.gms.maps.model.PolygonOptions;
-import com.google.android.gms.maps.model.PolylineOptions;
+import com.google.android.libraries.maps.model.MarkerOptions;
+import com.google.android.libraries.maps.model.PolygonOptions;
+import com.google.android.libraries.maps.model.PolylineOptions;
 import com.google.maps.android.data.Feature;
 import com.google.maps.android.data.Geometry;
 

File: library/src/com/google/maps/android/data/kml/KmlPoint.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.Point;
 
 /**

File: library/src/com/google/maps/android/data/kml/KmlPolygon.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.DataPolygon;
 
 import java.util.ArrayList;

File: library/src/com/google/maps/android/data/kml/KmlTrack.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.util.Log;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: library/src/com/google/maps/android/heatmaps/HeatmapTileProvider.java
Patch:
@@ -20,9 +20,9 @@
 import android.graphics.Color;
 import android.support.v4.util.LongSparseArray;
 
-import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.Tile;
-import com.google.android.gms.maps.model.TileProvider;
+import com.google.android.libraries.maps.model.LatLng;
+import com.google.android.libraries.maps.model.Tile;
+import com.google.android.libraries.maps.model.TileProvider;
 import com.google.maps.android.geometry.Bounds;
 import com.google.maps.android.geometry.Point;
 import com.google.maps.android.quadtree.PointQuadTree;

File: library/src/com/google/maps/android/heatmaps/WeightedLatLng.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.heatmaps;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.geometry.Point;
 import com.google.maps.android.projection.SphericalMercatorProjection;
 import com.google.maps.android.quadtree.PointQuadTree;

File: library/src/com/google/maps/android/projection/SphericalMercatorProjection.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.projection;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 public class SphericalMercatorProjection {
     final double mWorldWidth;

File: library/src/com/google/maps/android/ui/IconGenerator.java
Patch:
@@ -34,7 +34,7 @@
  * window-like shape.
  * <p/>
  * The icon {@link Bitmap}s generated by the factory should be used in conjunction with a {@link
- * com.google.android.gms.maps.model.BitmapDescriptorFactory}.
+ * com.google.android.libraries.maps.model.BitmapDescriptorFactory}.
  * <p/>
  * This class is not thread safe.
  */

File: library/src/com/google/maps/android/ui/SquareTextView.java
Patch:
@@ -19,9 +19,9 @@
 import android.content.Context;
 import android.graphics.Canvas;
 import android.util.AttributeSet;
-import android.widget.TextView;
+import android.support.v7.widget.AppCompatTextView;
 
-public class SquareTextView extends TextView {
+public class SquareTextView extends AppCompatTextView {
     private int mOffsetTop = 0;
     private int mOffsetLeft = 0;
 

File: library/tests/src/com/google/maps/android/PolyUtilTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.Assert;
 import junit.framework.TestCase;

File: library/tests/src/com/google/maps/android/SphericalUtilTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import junit.framework.Assert;
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/clustering/QuadItemTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.clustering;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.algo.NonHierarchicalDistanceBasedAlgorithm;
 
 import junit.framework.TestCase;

File: library/tests/src/com/google/maps/android/clustering/StaticClusterTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.clustering;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.clustering.algo.StaticCluster;
 
 import junit.framework.TestCase;

File: library/tests/src/com/google/maps/android/data/FeatureTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/LineStringTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/MultiGeometryTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.geojson.GeoJsonPolygon;
 
 import junit.framework.TestCase;

File: library/tests/src/com/google/maps/android/data/PointTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.google.maps.android.data;
 
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/RendererTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.google.maps.android.data;
 
 
-import com.google.android.gms.maps.GoogleMap;
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.GoogleMap;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonFeatureTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.LatLngBounds;
+import com.google.android.libraries.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLngBounds;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonLayerTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.GoogleMap;
-import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.LatLngBounds;
+import com.google.android.libraries.maps.GoogleMap;
+import com.google.android.libraries.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLngBounds;
 import com.google.maps.android.data.Feature;
 
 import junit.framework.TestCase;

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonLineStringTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonMultiLineStringTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonMultiPointTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonMultiPolygonTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonParserTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.Geometry;
 
 import junit.framework.TestCase;

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonPointStyleTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.MapsInitializer;
-import com.google.android.gms.maps.model.BitmapDescriptor;
-import com.google.android.gms.maps.model.BitmapDescriptorFactory;
+import com.google.android.libraries.maps.MapsInitializer;
+import com.google.android.libraries.maps.model.BitmapDescriptor;
+import com.google.android.libraries.maps.model.BitmapDescriptorFactory;
 
 import android.test.AndroidTestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonPointTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonPolygonTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonRendererTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.google.maps.android.data.geojson;
 
-import com.google.android.gms.maps.GoogleMap;
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.GoogleMap;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/kml/KmlLineStringTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/kml/KmlMultiGeometryTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.Geometry;
 
 import junit.framework.TestCase;

File: library/tests/src/com/google/maps/android/data/kml/KmlMultiTrackTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.data.Geometry;
 
 import junit.framework.TestCase;

File: library/tests/src/com/google/maps/android/data/kml/KmlPointTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/kml/KmlPolygonTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/kml/KmlTrackTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.google.maps.android.data.kml;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/heatmaps/UtilTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.maps.android.heatmaps;
 
-import com.google.android.gms.maps.model.LatLng;
+import com.google.android.libraries.maps.model.LatLng;
 import com.google.maps.android.geometry.Bounds;
 
 import junit.framework.TestCase;

File: library/src/com/google/maps/android/clustering/algo/NonHierarchicalViewBasedAlgorithm.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.android.gms.maps.model.LatLng;
 import com.google.maps.android.clustering.ClusterItem;
 import com.google.maps.android.geometry.Bounds;
-import com.google.maps.android.projection.Point;
+import com.google.maps.android.geometry.Point;
 import com.google.maps.android.projection.SphericalMercatorProjection;
 import com.google.maps.android.quadtree.PointQuadTree;
 

File: library/src/com/google/maps/android/data/Feature.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class Feature extends Observable {
 
-    private final String mId;
+    protected String mId;
 
     private final Map<String, String> mProperties;
 

File: library/src/com/google/maps/android/data/geojson/GeoJsonFeature.java
Patch:
@@ -18,8 +18,6 @@
  */
 public class GeoJsonFeature extends Feature implements Observer {
 
-    private final String mId;
-
     private final LatLngBounds mBoundingBox;
 
     private GeoJsonPointStyle mPointStyle;

File: library/tests/src/com/google/maps/android/data/kml/KmlContainerParserTest.java
Patch:
@@ -32,7 +32,7 @@ public void testCreateContainerProperty() throws Exception {
         KmlContainer kmlContainer = KmlContainerParser.createContainer(xmlPullParser);
         assertTrue(kmlContainer.hasProperties());
         assertEquals(kmlContainer.getProperty("name"), "Basic Folder");
-        xmlPullParser = createParser(R.raw.amu_unknwown_folder);
+        xmlPullParser = createParser(R.raw.amu_unknown_folder);
         kmlContainer = KmlContainerParser.createContainer(xmlPullParser);
         assertTrue(kmlContainer.hasProperty("name"));
     }

File: demo/src/com/google/maps/android/utils/demo/MainActivity.java
Patch:
@@ -38,6 +38,7 @@ protected void onCreate(Bundle savedInstanceState) {
         addDemo("Clustering", ClusteringDemoActivity.class);
         addDemo("Clustering: Custom Look", CustomMarkerClusteringDemoActivity.class);
         addDemo("Clustering: 2K markers", BigClusteringDemoActivity.class);
+        addDemo("Clustering: 20k only visible markers", VisibleClusteringDemoActivity.class);
         addDemo("PolyUtil.decode", PolyDecodeDemoActivity.class);
         addDemo("PolyUtil.simplify", PolySimplifyDemoActivity.class);
         addDemo("IconGenerator", IconGeneratorDemoActivity.class);

File: demo/src/com/google/maps/android/utils/demo/CustomMarkerClusteringDemoActivity.java
Patch:
@@ -18,7 +18,6 @@
 
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
-import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;

File: demo/src/com/google/maps/android/utils/demo/DistanceDemoActivity.java
Patch:
@@ -16,13 +16,11 @@
 
 package com.google.maps.android.utils.demo;
 
-import android.os.Bundle;
 import android.widget.TextView;
 import android.widget.Toast;
 
 import com.google.android.gms.maps.CameraUpdateFactory;
 import com.google.android.gms.maps.GoogleMap;
-import com.google.android.gms.maps.LocationSource;
 import com.google.android.gms.maps.model.LatLng;
 import com.google.android.gms.maps.model.Marker;
 import com.google.android.gms.maps.model.MarkerOptions;

File: demo/src/com/google/maps/android/utils/demo/MultiDrawable.java
Patch:
@@ -18,6 +18,7 @@
 
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
+import android.graphics.PixelFormat;
 import android.graphics.drawable.Drawable;
 
 import java.util.List;
@@ -100,6 +101,6 @@ public void setColorFilter(ColorFilter colorFilter) {
 
     @Override
     public int getOpacity() {
-        return 0;
+        return PixelFormat.UNKNOWN;
     }
 }

File: demo/src/com/google/maps/android/utils/demo/PolySimplifyDemoActivity.java
Patch:
@@ -48,7 +48,7 @@ protected void startDemo() {
 
         List<LatLng> simplifiedLine;
 
-        /**
+        /*
          * Simplified lines - increasing the tolerance will result in fewer points in the simplified
          * line
          */

File: library/src/com/google/maps/android/clustering/algo/NonHierarchicalDistanceBasedAlgorithm.java
Patch:
@@ -208,7 +208,7 @@ public int getSize() {
         @Override
         public int hashCode() {
             return mClusterItem.hashCode();
-        };
+        }
 
         @Override
         public boolean equals(Object other) {

File: library/src/com/google/maps/android/clustering/algo/StaticCluster.java
Patch:
@@ -69,7 +69,7 @@ public String toString() {
     @Override
     public int hashCode() {
         return mCenter.hashCode() + mItems.hashCode();
-    };
+    }
 
     @Override
     public boolean equals(Object other) {

File: library/src/com/google/maps/android/data/MultiGeometry.java
Patch:
@@ -44,9 +44,7 @@ public MultiGeometry(List<? extends Geometry> geometries) {
 
         //convert unknown geometry type (due to GeoJSON types) to Geometry type
         ArrayList geometriesList = new ArrayList();
-        Iterator<? extends Geometry> geometriesIterator = geometries.iterator();
-        while (geometriesIterator.hasNext()) {
-            Geometry geometry = geometriesIterator.next();
+        for (Geometry geometry : geometries) {
             geometriesList.add(geometry);
         }
 

File: library/tests/src/com/google/maps/android/data/geojson/BiMultiMapTest.java
Patch:
@@ -42,16 +42,16 @@ public void testMulti() {
     public void testCollection() {
         BiMultiMap<String> map = new BiMultiMap<>();
         String key = "foo";
-        Object values = Arrays.asList("bar", "baz");
+        List<String> values = Arrays.asList("bar", "baz");
         map.put(key, values);
         assertEquals(1, map.size());
         assertEquals(values, map.get(key));
-        for (String value : (List<String>) values) {
+        for (String value : values) {
             assertEquals(key, map.getKey(value));
         }
         map.remove(key);
         assertEquals(0, map.size());
-        for (String value : (List<String>) values) {
+        for (String value : values) {
             assertEquals(null, map.getKey(value));
         }
     }

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonFeatureTest.java
Patch:
@@ -41,7 +41,7 @@ public void testProperty() throws Exception {
 
     public void testNullProperty() throws Exception {
         GeoJsonLayer layer = new GeoJsonLayer(null, createFeatureCollection());
-        GeoJsonFeature feature = (GeoJsonFeature) layer.getFeatures().iterator().next();
+        GeoJsonFeature feature = layer.getFeatures().iterator().next();
         assertTrue(feature.hasProperty("prop0"));
         assertNull(feature.getProperty("prop0"));
         assertFalse(feature.hasProperty("prop1"));

File: library/tests/src/com/google/maps/android/data/kml/KmlPolygonTest.java
Patch:
@@ -5,6 +5,7 @@
 import junit.framework.TestCase;
 
 import java.util.ArrayList;
+import java.util.List;
 
 public class KmlPolygonTest extends TestCase {
 
@@ -21,7 +22,7 @@ public KmlPolygon createRegularPolygon() {
         outerCoordinates.add(new LatLng(20, 20));
         outerCoordinates.add(new LatLng(30, 30));
         outerCoordinates.add(new LatLng(10, 10));
-        ArrayList<ArrayList<LatLng>> innerCoordinates = new  ArrayList<ArrayList<LatLng>>();
+        ArrayList<List<LatLng>> innerCoordinates = new ArrayList<List<LatLng>>();
         ArrayList<LatLng> innerHole = new ArrayList<LatLng>();
         innerHole.add(new LatLng(20, 20));
         innerHole.add(new LatLng(10, 10));

File: demo/src/com/google/maps/android/utils/demo/HeatmapsPlacesDemoActivity.java
Patch:
@@ -145,7 +145,7 @@ protected void startDemo() {
             @Override
             public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) {
                 boolean handled = false;
-                if (actionId == EditorInfo.IME_NULL) {
+                if (actionId == EditorInfo.IME_ACTION_GO) {
                     submit();
                     handled = true;
                 }

File: library/src/com/google/maps/android/data/geojson/BiMultiMap.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import java.util.Collection;
 import java.util.HashMap;
@@ -15,7 +15,7 @@
  * Polyline, and Polygon map objects. We want to look these up in reverse to provide access
  * to GeoJsonFeature instances when map objects are clicked.
  */
-/* package */ class BiMultiMap<K> extends HashMap<K, Object> {
+public class BiMultiMap<K> extends HashMap<K, Object> {
 
     private final Map<Object, K> mValuesToKeys = new HashMap<>();
 

File: library/src/com/google/maps/android/data/geojson/GeoJsonStyle.java
Patch:
@@ -1,7 +1,8 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 /**
- * Class used to apply styles for the GeoJsonFeature objects
+ * Class used to apply styles for the
+ * {@link com.google.maps.android.data.geojson.GeoJsonFeature GeoJsonFeature} objects
  */
 interface GeoJsonStyle {
 

File: library/src/com/google/maps/android/data/kml/KmlBoolean.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.maps.android.kml;
+package com.google.maps.android.data.kml;
 
 /**
  * Utility class to help parse Kml boolean entities.

File: library/src/com/google/maps/android/data/kml/KmlContainer.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.kml;
+package com.google.maps.android.data.kml;
 
 import com.google.android.gms.maps.model.GroundOverlay;
 

File: library/src/com/google/maps/android/data/kml/KmlGroundOverlay.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.kml;
+package com.google.maps.android.data.kml;
 
 import com.google.android.gms.maps.model.GroundOverlayOptions;
 import com.google.android.gms.maps.model.LatLngBounds;

File: library/src/com/google/maps/android/data/kml/KmlStyleParser.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.kml;
+package com.google.maps.android.data.kml;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
@@ -61,7 +61,6 @@ static KmlStyle createStyle(XmlPullParser parser)
             }
             eventType = parser.next();
         }
-
         return styleProperties;
     }
 
@@ -155,7 +154,6 @@ private static void createBalloonStyle(XmlPullParser parser, KmlStyle style)
      *
      * @param style Style to set the icon url to
      */
-
     private static void setIconUrl(XmlPullParser parser, KmlStyle style)
             throws XmlPullParserException, IOException {
         int eventType = parser.getEventType();

File: library/tests/src/com/google/maps/android/data/geojson/BiMultiMapTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonFeatureTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import com.google.android.gms.maps.model.LatLng;
 import com.google.android.gms.maps.model.LatLngBounds;
@@ -24,7 +24,7 @@ public void testGetId() throws Exception {
     }
 
     public void testProperty() throws Exception {
-        HashMap<String, String> properties = new HashMap<String, String>();
+        HashMap<String, String> properties = new HashMap<>();
         properties.put("Color", "Yellow");
         properties.put("Width", "5");
         feature = new GeoJsonFeature(null, null, properties, null);
@@ -41,7 +41,7 @@ public void testProperty() throws Exception {
 
     public void testNullProperty() throws Exception {
         GeoJsonLayer layer = new GeoJsonLayer(null, createFeatureCollection());
-        GeoJsonFeature feature = layer.getFeatures().iterator().next();
+        GeoJsonFeature feature = (GeoJsonFeature) layer.getFeatures().iterator().next();
         assertTrue(feature.hasProperty("prop0"));
         assertNull(feature.getProperty("prop0"));
         assertFalse(feature.hasProperty("prop1"));

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonLineStringStyleTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonLineStringTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import com.google.android.gms.maps.model.LatLng;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonMultiLineStringTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import com.google.android.gms.maps.model.LatLng;
 
@@ -38,7 +38,7 @@ public void testGetLineStrings() throws Exception {
             mls = new GeoJsonMultiLineString(null);
             fail();
         } catch (IllegalArgumentException e) {
-            assertEquals("GeoJsonLineStrings cannot be null", e.getMessage());
+            assertEquals("Geometries cannot be null", e.getMessage());
         }
     }
 }
\ No newline at end of file

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonMultiPointTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import com.google.android.gms.maps.model.LatLng;
 
@@ -27,15 +27,15 @@ public void testGetPoints() throws Exception {
         mp = new GeoJsonMultiPoint(points);
         assertEquals(points, mp.getPoints());
 
-        points = new ArrayList<GeoJsonPoint>();
+        points = new ArrayList<>();
         mp = new GeoJsonMultiPoint(points);
         assertEquals(new ArrayList<GeoJsonPoint>(), mp.getPoints());
 
         try {
             mp = new GeoJsonMultiPoint(null);
             fail();
         } catch (IllegalArgumentException e) {
-            assertEquals("GeoJsonPoints cannot be null", e.getMessage());
+            assertEquals("Geometries cannot be null", e.getMessage());
         }
     }
 }
\ No newline at end of file

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonMultiPolygonTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import com.google.android.gms.maps.model.LatLng;
 
@@ -56,7 +56,7 @@ public void testGetPolygons() throws Exception {
             mp = new GeoJsonMultiPolygon(null);
             fail();
         } catch (IllegalArgumentException e) {
-            assertEquals("GeoJsonPolygons cannot be null", e.getMessage());
+            assertEquals("Geometries cannot be null", e.getMessage());
         }
     }
 }
\ No newline at end of file

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonPointStyleTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import com.google.android.gms.maps.MapsInitializer;
 import com.google.android.gms.maps.model.BitmapDescriptor;

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonPointTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import com.google.android.gms.maps.model.LatLng;
 
@@ -20,7 +20,7 @@ public void testGetCoordinates() throws Exception {
             p = new GeoJsonPoint(null);
             fail();
         } catch (IllegalArgumentException e) {
-            assertEquals("Coordinate cannot be null", e.getMessage());
+            assertEquals("Coordinates cannot be null", e.getMessage());
         }
     }
 }
\ No newline at end of file

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonPolygonStyleTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import junit.framework.TestCase;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonPolygonTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import com.google.android.gms.maps.model.LatLng;
 

File: library/tests/src/com/google/maps/android/data/geojson/GeoJsonRendererTest.java
Patch:
@@ -1,8 +1,7 @@
-package com.google.maps.android.geojson;
+package com.google.maps.android.data.geojson;
 
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.LatLngBounds;
 
 import junit.framework.TestCase;
 
@@ -34,7 +33,7 @@ public void setUp() throws Exception {
         mRenderer = new GeoJsonRenderer(mMap1, geoJsonFeatures);
         mLayer = new GeoJsonLayer(mMap1, createFeatureCollection());
         GeoJsonLineString geoJsonLineString = new GeoJsonLineString(
-                new ArrayList<LatLng>(Arrays.asList(new LatLng(0, 100), new LatLng(1, 101))));
+                new ArrayList<>(Arrays.asList(new LatLng(0, 100), new LatLng(1, 101))));
         mGeoJsonFeature = new GeoJsonFeature(geoJsonLineString, null, null, null);
         mValues = geoJsonFeatures.values();
     }

File: library/tests/src/com/google/maps/android/data/kml/KmlContainerParserTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.kml;
+package com.google.maps.android.data.kml;
 
 import android.test.ActivityTestCase;
 

File: library/tests/src/com/google/maps/android/data/kml/KmlLineStringTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.kml;
+package com.google.maps.android.data.kml;
 
 import com.google.android.gms.maps.model.LatLng;
 

File: library/tests/src/com/google/maps/android/data/kml/KmlParserTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.kml;
+package com.google.maps.android.data.kml;
 
 import android.graphics.Color;
 import android.test.ActivityTestCase;

File: library/tests/src/com/google/maps/android/data/kml/KmlPolygonTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.kml;
+package com.google.maps.android.data.kml;
 
 import com.google.android.gms.maps.model.LatLng;
 

File: library/tests/src/com/google/maps/android/data/kml/KmlStyleTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.maps.android.kml;
+package com.google.maps.android.data.kml;
 
 import android.graphics.Color;
 

File: library/src/com/google/maps/android/PolyUtil.java
Patch:
@@ -409,7 +409,7 @@ public static boolean isClosedPolygon(List<LatLng> poly) {
      */
     public static double distanceToLine(final LatLng p, final LatLng start, final LatLng end) {
         if (start.equals(end)) {
-            computeDistanceBetween(end, p);
+            return computeDistanceBetween(end, p);
         }
 
         final double s0lat = toRadians(p.latitude);

File: demo/src/com/google/maps/android/utils/demo/GeoJsonDemoActivity.java
Patch:
@@ -56,7 +56,7 @@ private void retrieveFileFromUrl() {
 
     private void retrieveFileFromResource() {
         try {
-            GeoJsonLayer layer = new GeoJsonLayer(getMap(), R.raw.earthquakes, this);
+            GeoJsonLayer layer = new GeoJsonLayer(getMap(), R.raw.earthquakes_with_usa, this);
             addGeoJsonLayerToMap(layer);
         } catch (IOException e) {
             Log.e(mLogTag, "GeoJSON file could not be read");

File: library/src/com/google/maps/android/kml/KmlRenderer.java
Patch:
@@ -569,6 +569,9 @@ private void setMarkerInfoWindow(KmlStyle style, Marker marker,
         } else if (hasDescription) {
             marker.setTitle(placemark.getProperty("description"));
             createInfoWindow();
+        } else if (hasName) {
+            marker.setTitle(placemark.getProperty("name"));
+            createInfoWindow();
         }
     }
 

File: demo/src/com/google/maps/android/utils/demo/BigClusteringDemoActivity.java
Patch:
@@ -37,7 +37,7 @@ protected void startDemo() {
 
         mClusterManager = new ClusterManager<MyItem>(this, getMap());
 
-        getMap().setOnCameraChangeListener(mClusterManager);
+        getMap().setOnCameraIdleListener(mClusterManager);
         try {
             readItems();
         } catch (JSONException e) {

File: demo/src/com/google/maps/android/utils/demo/ClusteringDemoActivity.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.google.android.gms.maps.CameraUpdateFactory;
 import com.google.android.gms.maps.model.LatLng;
-import com.google.maps.android.clustering.Cluster;
 import com.google.maps.android.clustering.ClusterManager;
 import com.google.maps.android.utils.demo.model.MyItem;
 
@@ -40,7 +39,7 @@ protected void startDemo() {
         getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(51.503186, -0.126446), 10));
 
         mClusterManager = new ClusterManager<MyItem>(this, getMap());
-        getMap().setOnCameraChangeListener(mClusterManager);
+        getMap().setOnCameraIdleListener(mClusterManager);
 
         try {
             readItems();

File: demo/src/com/google/maps/android/utils/demo/VisibleClusteringDemoActivity.java
Patch:
@@ -44,7 +44,7 @@ protected void startDemo() {
         mClusterManager.setAlgorithm(new NonHierarchicalViewBasedAlgorithm<MyItem>(
                 metrics.widthPixels, metrics.heightPixels));
 
-        getMap().setOnCameraChangeListener(mClusterManager);
+        getMap().setOnCameraIdleListener(mClusterManager);
 
         try {
             readItems();

File: library/src/com/google/maps/android/PolyUtil.java
Patch:
@@ -89,7 +89,7 @@ private static boolean intersects(double lat1, double lat2, double lng2,
 
     /**
      * Computes whether the given point lies inside the specified polygon.
-     * The polygon is always cosidered closed, regardless of whether the last point equals
+     * The polygon is always considered closed, regardless of whether the last point equals
      * the first or not.
      * Inside is defined as not containing the South Pole -- the South Pole is always outside.
      * The polygon is formed of great circle segments if geodesic is true, and of rhumb

File: library/src/com/google/maps/android/geojson/GeoJsonParser.java
Patch:
@@ -196,7 +196,7 @@ private static HashMap<String, String> parseProperties(JSONObject properties)
         Iterator propertyKeys = properties.keys();
         while (propertyKeys.hasNext()) {
             String key = (String) propertyKeys.next();
-            propertiesMap.put(key, properties.getString(key));
+            propertiesMap.put(key, properties.isNull(key) ? null : properties.getString(key));
         }
         return propertiesMap;
     }

File: library/src/com/google/maps/android/kml/KmlFeatureParser.java
Patch:
@@ -24,7 +24,7 @@
 
     private final static int LATITUDE_INDEX = 1;
 
-    private final static String PROPERTY_REGEX = "name|description|visibility|open|address|phoneNumber";
+    private final static String PROPERTY_REGEX = "name|description|drawOrder|visibility|open|address|phoneNumber";
 
     private final static String BOUNDARY_REGEX = "outerBoundaryIs|innerBoundaryIs";
 

File: library/src/com/google/maps/android/ui/BubbleDrawable.java
Patch:
@@ -32,8 +32,8 @@ class BubbleDrawable extends Drawable {
     private int mColor = Color.WHITE;
 
     public BubbleDrawable(Resources res) {
-        mMask = res.getDrawable(R.drawable.bubble_mask);
-        mShadow = res.getDrawable(R.drawable.bubble_shadow);
+        mMask = res.getDrawable(R.drawable.amu_bubble_mask);
+        mShadow = res.getDrawable(R.drawable.amu_bubble_shadow);
     }
 
     public void setColor(int color) {

File: library/src/com/google/maps/android/ui/RotationLayout.java
Patch:
@@ -26,7 +26,7 @@
  * <p/>
  * May not work with padding.
  */
-class RotationLayout extends FrameLayout {
+public class RotationLayout extends FrameLayout {
     private int mRotation;
 
     public RotationLayout(Context context) {

File: library/src/com/google/maps/android/geojson/GeoJsonRenderer.java
Patch:
@@ -126,10 +126,10 @@ private static void removeFromMap(Object mapObject) {
     }
 
     /**
-     * Gets a GeoJsonFeature for the given mapObject, which is a Marker, Polyline or Polygon.
+     * Gets a GeoJsonFeature for the given map object, which is a Marker, Polyline or Polygon.
      *
-     * @param mapObject Object a Marker, Polyline or Polygon
-     * @return GeoJsonFeature for the given mapObject
+     * @param mapObject Marker, Polyline or Polygon
+     * @return GeoJsonFeature for the given map object
      */
     /* package */ GeoJsonFeature getFeature(Object mapObject) {
         return mFeatures.getKey(mapObject);

File: library/src/com/google/maps/android/geojson/GeoJsonRenderer.java
Patch:
@@ -131,7 +131,7 @@ private static void removeFromMap(Object mapObject) {
      * @param mapObject Object a Marker, Polyline or Polygon
      * @return GeoJsonFeature for the given mapObject
      */
-    public GeoJsonFeature getFeature(Object mapObject) {
+    /* package */ GeoJsonFeature getFeature(Object mapObject) {
         return mFeatures.getKey(mapObject);
     }
 

File: library/src/com/google/maps/android/ui/BubbleDrawable.java
Patch:
@@ -32,8 +32,8 @@ class BubbleDrawable extends Drawable {
     private int mColor = Color.WHITE;
 
     public BubbleDrawable(Resources res) {
-        mMask = res.getDrawable(R.drawable.bubble_mask);
-        mShadow = res.getDrawable(R.drawable.bubble_shadow);
+        mMask = res.getDrawable(R.drawable.amu_bubble_mask);
+        mShadow = res.getDrawable(R.drawable.amu_bubble_shadow);
     }
 
     public void setColor(int color) {

File: library/src/com/google/maps/android/ui/RotationLayout.java
Patch:
@@ -26,7 +26,7 @@
  * <p/>
  * May not work with padding.
  */
-class RotationLayout extends FrameLayout {
+public class RotationLayout extends FrameLayout {
     private int mRotation;
 
     public RotationLayout(Context context) {

File: library/src/com/google/maps/android/ui/IconGenerator.java
Patch:
@@ -69,7 +69,7 @@ public IconGenerator(Context context) {
      *
      * @param text the text content to display inside the icon.
      */
-    public Bitmap makeIcon(String text) {
+    public Bitmap makeIcon(CharSequence text) {
         if (mTextView != null) {
             mTextView.setText(text);
         }

File: library/tests/src/com/google/maps/android/heatmaps/GradientTest.java
Patch:
@@ -27,6 +27,7 @@ public void testInterpolateColor() {
         int blue = Color.BLUE;
         int green = Color.GREEN;
 
+
         // Expect itself
         assertEquals(red, Gradient.interpolateColor(red, red, 0.5f));
         assertEquals(blue, Gradient.interpolateColor(blue, blue, 0.5f));

File: library/src/com/google/maps/android/clustering/view/DefaultClusterRenderer.java
Patch:
@@ -198,7 +198,7 @@ private SquareTextView makeSquareTextView(Context context) {
         return squareTextView;
     }
 
-    private int getColor(int clusterSize) {
+    protected int getColor(int clusterSize) {
         final float hueRange = 220;
         final float sizeRange = 300;
         final float size = Math.min(clusterSize, sizeRange);

File: library/src/com/google/maps/android/clustering/view/DefaultClusterRenderer.java
Patch:
@@ -198,7 +198,7 @@ private SquareTextView makeSquareTextView(Context context) {
         return squareTextView;
     }
 
-    private int getColor(int clusterSize) {
+    protected int getColor(int clusterSize) {
         final float hueRange = 220;
         final float sizeRange = 300;
         final float size = Math.min(clusterSize, sizeRange);

File: demo/src/com/google/maps/android/utils/demo/MainActivity.java
Patch:
@@ -20,6 +20,7 @@ protected void onCreate(Bundle savedInstanceState) {
         addDemo("Clustering", ClusteringDemoActivity.class);
         addDemo("Clustering: Custom Look", CustomMarkerClusteringDemoActivity.class);
         addDemo("Clustering: 2K markers", BigClusteringDemoActivity.class);
+        addDemo("Clustering: 20k only visible markers", VisibleClusteringDemoActivity.class);
         addDemo("PolyUtil.decode", PolyDecodeDemoActivity.class);
         addDemo("IconGenerator", IconGeneratorDemoActivity.class);
         addDemo("SphericalUtil.computeDistanceBetween", DistanceDemoActivity.class);

File: library/src/com/google/maps/android/geometry/Bounds.java
Patch:
@@ -40,7 +40,7 @@ public Bounds(double minX, double maxX, double minY, double maxY) {
     }
 
     public boolean contains(double x, double y) {
-        return minX <= x && x < maxX && minY <= y && y < maxY;
+        return minX <= x && x <= maxX && minY <= y && y <= maxY;
     }
 
     public boolean contains(Point point) {

File: library/src/com/google/maps/android/geometry/Bounds.java
Patch:
@@ -40,7 +40,7 @@ public Bounds(double minX, double maxX, double minY, double maxY) {
     }
 
     public boolean contains(double x, double y) {
-        return minX <= x && x < maxX && minY <= y && y < maxY;
+        return minX <= x && x <= maxX && minY <= y && y <= maxY;
     }
 
     public boolean contains(Point point) {

File: library/src/com/google/maps/android/heatmaps/HeatmapTileProvider.java
Patch:
@@ -115,7 +115,7 @@ public class HeatmapTileProvider implements TileProvider {
     /**
      * Quad tree of all the points to display in the heatmap
      */
-    private PointQuadTree mTree;
+    private PointQuadTree<WeightedLatLng> mTree;
 
     /**
      * Collection of all the data.
@@ -309,7 +309,7 @@ public void setWeightedData(Collection<WeightedLatLng> data) {
         // Make the quad tree
         mBounds = getBounds(mData);
 
-        mTree = new PointQuadTree(mBounds);
+        mTree = new PointQuadTree<WeightedLatLng>(mBounds);
 
         // Add points to quad tree
         for (WeightedLatLng l : mData) {

File: library/src/com/google/maps/android/heatmaps/HeatmapTileProvider.java
Patch:
@@ -115,7 +115,7 @@ public class HeatmapTileProvider implements TileProvider {
     /**
      * Quad tree of all the points to display in the heatmap
      */
-    private PointQuadTree mTree;
+    private PointQuadTree<WeightedLatLng> mTree;
 
     /**
      * Collection of all the data.
@@ -309,7 +309,7 @@ public void setWeightedData(Collection<WeightedLatLng> data) {
         // Make the quad tree
         mBounds = getBounds(mData);
 
-        mTree = new PointQuadTree(mBounds);
+        mTree = new PointQuadTree<WeightedLatLng>(mBounds);
 
         // Add points to quad tree
         for (WeightedLatLng l : mData) {

File: library/src/com/google/maps/android/PolyUtil.java
Patch:
@@ -296,7 +296,7 @@ public static List<LatLng> decode(final String encodedPath) {
         int lat = 0;
         int lng = 0;
 
-        for (int pointIndex = 0; index < len; ++pointIndex) {
+        while (index < len) {
             int result = 1;
             int shift = 0;
             int b;

File: library/src/com/google/maps/android/clustering/ClusterItem.java
Patch:
@@ -1,7 +1,6 @@
 package com.google.maps.android.clustering;
 
 import com.google.android.gms.maps.model.LatLng;
-import com.google.android.gms.maps.model.MarkerOptions;
 
 /**
  * ClusterItem represents a marker on the map.

File: library/src/com/google/maps/android/clustering/ClusterManager.java
Patch:
@@ -25,8 +25,6 @@
  * <li>{@link com.google.android.gms.maps.GoogleMap.OnMarkerClickListener}</li> </ul>
  */
 public class ClusterManager<T extends ClusterItem> implements GoogleMap.OnCameraChangeListener, GoogleMap.OnMarkerClickListener, GoogleMap.OnInfoWindowClickListener {
-    private static final String TAG = ClusterManager.class.getName();
-
     private final MarkerManager mMarkerManager;
     private final MarkerManager.Collection mMarkers;
     private final MarkerManager.Collection mClusterMarkers;

File: library/src/com/google/maps/android/clustering/algo/PreCachingAlgorithmDecorator.java
Patch:
@@ -14,7 +14,6 @@
  * Optimistically fetch clusters for adjacent zoom levels, caching them as necessary.
  */
 public class PreCachingAlgorithmDecorator<T extends ClusterItem> implements Algorithm<T> {
-    private final static String TAG = PreCachingAlgorithmDecorator.class.getName();
     private final Algorithm<T> mAlgorithm;
 
     // TODO: evaluate maxSize parameter for LruCache.

File: library/src/com/google/maps/android/clustering/view/DefaultClusterRenderer.java
Patch:
@@ -217,6 +217,7 @@ protected int getBucket(Cluster<T> cluster) {
      * ViewModifier ensures only one re-rendering of the view occurs at a time, and schedules
      * re-rendering, which is performed by the RenderTask.
      */
+    @SuppressLint("HandlerLeak")
     private class ViewModifier extends Handler {
         private static final int RUN_TASK = 0;
         private static final int TASK_FINISHED = 1;
@@ -275,7 +276,7 @@ public void queue(Set<? extends Cluster<T>> clusters) {
     /**
      * Determine whether the cluster should be rendered as individual markers or a cluster.
      */
-    protected boolean shouldRenderAsCluster(Cluster cluster) {
+    protected boolean shouldRenderAsCluster(Cluster<T> cluster) {
         return cluster.getSize() > MIN_CLUSTER_SIZE;
     }
 
@@ -473,6 +474,7 @@ private static Point findClosestCluster(List<Point> markers, Point point) {
      * animating a markerWithPosition) is performed while trying not to block the rest of the app's
      * UI.
      */
+    @SuppressLint("HandlerLeak")
     private class MarkerModifier extends Handler implements MessageQueue.IdleHandler {
         private static final int BLANK = 0;
 

File: library/src/com/google/maps/android/projection/SphericalMercatorProjection.java
Patch:
@@ -25,6 +25,7 @@ public SphericalMercatorProjection(final double worldWidth) {
         mWorldWidth = worldWidth;
     }
 
+    @SuppressWarnings("deprecation")
     public Point toPoint(final LatLng latLng) {
         final double x = latLng.longitude / 360 + .5;
         final double siny = Math.sin(Math.toRadians(latLng.latitude));

File: library/src/com/google/maps/android/ui/SquareTextView.java
Patch:
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.graphics.Canvas;
 import android.util.AttributeSet;
-import android.util.Log;
 import android.widget.TextView;
 
 public class SquareTextView extends TextView {

File: library/src/com/google/maps/android/clustering/ClusterManager.java
Patch:
@@ -213,8 +213,6 @@ public void setOnClusterClickListener(OnClusterClickListener<T> listener) {
     }
 
     /**
-<<<<<<< HEAD
-=======
      * Sets a callback that's invoked when a Cluster is tapped. Note: For this listener to function,
      * the ClusterManager must be added as a info window click listener to the map.
      */
@@ -224,7 +222,6 @@ public void setOnClusterInfoWindowClickListener(OnClusterInfoWindowClickListener
     }
 
     /**
->>>>>>> 47b98b1edb21b89c3d800706c64fd96859568cdf
      * Sets a callback that's invoked when an individual ClusterItem is tapped. Note: For this
      * listener to function, the ClusterManager must be added as a click listener to the map.
      */

File: library/src/com/google/maps/android/heatmaps/WeightedLatLng.java
Patch:
@@ -33,11 +33,11 @@ public class WeightedLatLng implements PointQuadTree.Item {
      *
      * @param latLng    LatLng to add to wrapper
      * @param intensity Intensity to use: should be greater than 0
-     *                  Default value is 10.
+     *                  Default value is 1.
      *                  This represents the "importance" or "value" of this particular point
      *                  Higher intensity values map to higher colours.
-     *                  Intensity is additive: having two points of intensity 10 at the same
-     *                  location is identical to having one of intensity 20.
+     *                  Intensity is additive: having two points of intensity 1 at the same
+     *                  location is identical to having one of intensity 2.
      */
     public WeightedLatLng(LatLng latLng, double intensity) {
         mPoint = mProjection.toPoint(latLng);

File: library/src/com/google/maps/android/heatmaps/HeatmapTileProvider.java
Patch:
@@ -280,7 +280,7 @@ private HeatmapTileProvider(Builder builder) {
      *
      * @param data Data set of points to use in the heatmap, as LatLngs.
      *             Note: Editing data without calling setWeightedData again will not update the data
-     *             displayed on the tree, but will impact calculation of max intensity values,
+     *             displayed on the map, but will impact calculation of max intensity values,
      *             as the collection you pass in is stored.
      *             Outside of changing the data, max intensity values are calculated only upon
      *             changing the radius.

File: library/src/com/google/maps/android/heatmaps/WeightedLatLng.java
Patch:
@@ -15,7 +15,7 @@ public class WeightedLatLng implements PointQuadTree.Item {
     /**
      * Default intensity to use when intensity not specified
      */
-    public static final double DEFAULT_INTENSITY = 10;
+    public static final double DEFAULT_INTENSITY = 1;
 
     /**
      * Projection to use for points

File: library/src/com/google/maps/android/heatmaps/WeightedLatLng.java
Patch:
@@ -15,7 +15,7 @@ public class WeightedLatLng implements PointQuadTree.Item {
     /**
      * Default intensity to use when intensity not specified
      */
-    public static final double DEFAULT_INTENSITY = 10;
+    public static final double DEFAULT_INTENSITY = 1;
 
     /**
      * Projection to use for points

File: library/src/com/google/maps/android/heatmaps/WeightedLatLng.java
Patch:
@@ -22,7 +22,7 @@ public class WeightedLatLng implements PointQuadTree.Item {
      * Converts LatLng to (x, y) coordinates using a SphericalMercatorProjection
      */
     public static final SphericalMercatorProjection mProjection =
-            new SphericalMercatorProjection(HeatmapTileProvider.TILE_DIM);
+            new SphericalMercatorProjection(HeatmapTileProvider.WORLD_WIDTH);
 
     private Point mPoint;
 

File: demo/src/com/google/maps/android/utils/demo/HeatmapsDemoActivity.java
Patch:
@@ -155,9 +155,7 @@ public void onNothingSelected(AdapterView<?> parent) {
         }
     }
 
-    // Datasets:
-    // Police Stations: all police stations across Australia from http://poidb.com
-    // Red Lights: all red lights across Australia from http://poidb.com
+    // Datasets from http://data.gov.au
     private ArrayList<LatLng> readItems(int resource) throws JSONException {
         ArrayList<LatLng> list = new ArrayList<LatLng>();
         InputStream inputStream = getResources().openRawResource(resource);

File: library/src/com/google/maps/android/projection/SphericalMercatorProjection.java
Patch:
@@ -25,6 +25,7 @@ public SphericalMercatorProjection(final double worldWidth) {
         mWorldWidth = worldWidth;
     }
 
+    @SuppressWarnings("deprecation")
     public Point toPoint(final LatLng latLng) {
         final double x = latLng.longitude / 360 + .5;
         final double siny = Math.sin(Math.toRadians(latLng.latitude));

File: demo/src/com/google/maps/android/utils/demo/HeatmapsPlacesDemoActivity.java
Patch:
@@ -60,7 +60,7 @@ public class HeatmapsPlacesDemoActivity extends BaseDemoActivity {
     private static final String TYPE_RADAR_SEARCH = "/radarsearch";
     private static final String OUT_JSON = "/json";
     // Places API Server Key
-    private static final String API_KEY = "YOUR_KEY_HERE"; // TODO place your own here!
+    private static final String API_KEY = "AIzaSyDzEnwjg6wwrkrLLBUr0TEWfS8O5Dt1NEA"; // TODO place your own here!
 
     /**
      * The colors to be used for the different heatmap layers.
@@ -166,7 +166,7 @@ public void submit() {
             Toast.makeText(mContext, "This keyword has already been inputted :(", Toast.LENGTH_SHORT).show();
         } else if (mOverlaysRendered == MAX_CHECKBOXES) {
             Toast.makeText(mContext, "You can only input " + MAX_CHECKBOXES + " keywords. :(", Toast.LENGTH_SHORT).show();
-        } else {
+        } else if (keyword.length() != 0) {
             mOverlaysInput++;
             ProgressBar progressBar = (ProgressBar) findViewById(R.id.progress_bar);
             progressBar.setVisibility(View.VISIBLE);
@@ -201,7 +201,7 @@ private Collection<LatLng> getPoints(String keyword) {
             String jsonResults = getJsonPlaces(keyword, searchCenters.get(j));
             try {
                 // Create a JSON object hierarchy from the results
-                JSONObject jsonObj = new JSONObject(jsonResults.toString());
+                JSONObject jsonObj = new JSONObject(jsonResults);
                 JSONArray pointsJsonArray = jsonObj.getJSONArray("results");
 
                 // Extract the Place descriptions from the results

File: demo/src/com/google/maps/android/utils/demo/HeatmapsDemoActivity.java
Patch:
@@ -155,9 +155,7 @@ public void onNothingSelected(AdapterView<?> parent) {
         }
     }
 
-    // Datasets:
-    // Police Stations: all police stations across Australia from http://poidb.com
-    // Red Lights: all red lights across Australia from http://poidb.com
+    // Datasets from http://data.gov.au
     private ArrayList<LatLng> readItems(int resource) throws JSONException {
         ArrayList<LatLng> list = new ArrayList<LatLng>();
         InputStream inputStream = getResources().openRawResource(resource);

File: library/src/com/google/maps/android/heatmaps/HeatmapTileProvider.java
Patch:
@@ -501,7 +501,7 @@ private double[] getMaxIntensities(int radius) {
                 for (int j = 0; j < i; j++) maxIntensityArray[j] = maxIntensityArray[i];
             }
         }
-        for (int i = DEFAULT_MIN_ZOOM; i < MAX_ZOOM_LEVEL; i++) {
+        for (int i = DEFAULT_MAX_ZOOM; i < MAX_ZOOM_LEVEL; i++) {
             maxIntensityArray[i] = maxIntensityArray[DEFAULT_MAX_ZOOM - 1];
         }
 

File: library/src/com/google/maps/android/heatmaps/Gradient.java
Patch:
@@ -100,6 +100,8 @@ public Gradient(int[] colors, float[] startPoints, int colorMapSize, Interpolato
         }
         mInterpolator = interpolator;
         mColorMapSize = colorMapSize;
+        mColors = new int[colors.length];
+        mStartPoints = new float[startPoints.length];
         System.arraycopy(colors, 0, mColors, 0, colors.length);
         System.arraycopy(startPoints, 0, mStartPoints, 0, startPoints.length);
     }

File: library/src/com/google/maps/android/clustering/ClusterManager.java
Patch:
@@ -57,6 +57,7 @@ public ClusterManager(Context context, GoogleMap map, MarkerManager markerManage
         mRenderer = new DefaultClusterRenderer<T>(context, map, this);
         mAlgorithm = new PreCachingAlgorithmDecorator<T>(new NonHierarchicalDistanceBasedAlgorithm<T>());
         mClusterTask = new ClusterTask();
+        mRenderer.onAdd();
     }
 
     public MarkerManager.Collection getMarkerCollection() {
@@ -265,4 +266,4 @@ public interface OnClusterItemClickListener<T extends ClusterItem> {
     public interface OnClusterItemInfoWindowClickListener<T extends ClusterItem> {
         public void onClusterItemInfoWindowClick(T item);
     }
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/clustering/ClusterManager.java
Patch:
@@ -57,6 +57,7 @@ public ClusterManager(Context context, GoogleMap map, MarkerManager markerManage
         mRenderer = new DefaultClusterRenderer<T>(context, map, this);
         mAlgorithm = new PreCachingAlgorithmDecorator<T>(new NonHierarchicalDistanceBasedAlgorithm<T>());
         mClusterTask = new ClusterTask();
+        mRenderer.onAdd();
     }
 
     public MarkerManager.Collection getMarkerCollection() {
@@ -265,4 +266,4 @@ public interface OnClusterItemClickListener<T extends ClusterItem> {
     public interface OnClusterItemInfoWindowClickListener<T extends ClusterItem> {
         public void onClusterItemInfoWindowClick(T item);
     }
-}
\ No newline at end of file
+}

File: library/src/com/google/maps/android/heatmaps/HeatmapConstants.java
Patch:
@@ -30,7 +30,7 @@ public class HeatmapConstants {
      /**
      * Alternative radius for convolution
      */
-    public static final int ALT_HEATMAP_RADIUS = 5;
+    public static final int ALT_HEATMAP_RADIUS = 7;
 
     /**
      * Default opacity of heatmap overlay
@@ -96,7 +96,7 @@ public class HeatmapConstants {
     /**
      * Minimum radius value.
      */
-    public static final int MIN_RADIUS = 1;
+    public static final int MIN_RADIUS = 5;
 
     /**
      * Maximum radius value.

File: library/src/com/google/maps/android/heatmaps/HeatmapHelper.java
Patch:
@@ -56,9 +56,9 @@ public static class Builder {
         private int radius = HeatmapConstants.DEFAULT_HEATMAP_RADIUS;
         private int[] gradient = HeatmapConstants.DEFAULT_HEATMAP_GRADIENT;
         private double opacity = HeatmapConstants.DEFAULT_HEATMAP_OPACITY;
-        // Only custom min/max if they differ so initialise both to 0
+        // Only custom min/max if they differ so initialise both to 5
         private int minZoom = 5;
-        private int maxZoom = 8;
+        private int maxZoom = 5;
 
         /**
          * Constructor for builder, which contains the required parameters for a heatmap.

File: library/src/com/google/maps/android/heatmaps/HeatmapHandler.java
Patch:
@@ -104,7 +104,7 @@ public HeatmapHandler(Collection<LatLngWrapper> points, int radius, int[] gradie
      *                if minZoom >= maxZoom, only one default max intensity value is calculated
      * @param map pass the map so we can draw the heatmap onto it
      */
-    public HeatmapHandler(ArrayList<LatLngWrapper> list, int minZoom, int maxZoom, GoogleMap map) {
+    public HeatmapHandler(Collection<LatLngWrapper> list, int minZoom, int maxZoom, GoogleMap map) {
         this(list, HeatmapConstants.DEFAULT_HEATMAP_RADIUS,
                 HeatmapConstants.DEFAULT_HEATMAP_GRADIENT, HeatmapConstants.DEFAULT_HEATMAP_OPACITY,
                 minZoom, maxZoom, map);
@@ -116,7 +116,7 @@ public HeatmapHandler(ArrayList<LatLngWrapper> list, int minZoom, int maxZoom, G
      * @param list List of all LatLngWrappers to put into quadtree
      * @param map pass the map so we can draw the heatmap onto it
      */
-    public HeatmapHandler(ArrayList<LatLngWrapper> list, GoogleMap map) {
+    public HeatmapHandler(Collection<LatLngWrapper> list, GoogleMap map) {
         this(list, HeatmapConstants.DEFAULT_HEATMAP_RADIUS,
                 HeatmapConstants.DEFAULT_HEATMAP_GRADIENT, HeatmapConstants.DEFAULT_HEATMAP_OPACITY,
                 0, 0, map);
@@ -205,5 +205,4 @@ public void setVisible(boolean visibility) {
     private long getTime() {
         return System.currentTimeMillis();
     }
-
 }

File: library/src/com/google/maps/android/quadtree/PointQuadTree.java
Patch:
@@ -120,7 +120,6 @@ private void insert(double x, double y, T item) {
         if (mItems.size() > MAX_ELEMENTS && mDepth < MAX_DEPTH) {
             split();
         }
-        return;
     }
 
     /**

File: library/src/com/google/maps/android/geometry/Bounds.java
Patch:
@@ -36,7 +36,7 @@ public Bounds(double minX, double maxX, double minY, double maxY) {
         this.maxY = maxY;
 
         midX = (minX + maxX) / 2;
-        midY = (minY + minY) / 2;
+        midY = (minY + maxY) / 2;
     }
 
     public boolean contains(double x, double y) {

File: library/src/com/google/maps/android/heatmaps/HeatmapConstants.java
Patch:
@@ -35,8 +35,8 @@ public class HeatmapConstants {
     public final static int[] DEFAULT_HEATMAP_GRADIENT = {
             //a, r, g, b / r, g, b
             Color.argb(0, 102, 255, 0),  // green (invisible)
-            Color.argb(255/3 ,102, 255, 0),  // 1/3rd invisible
-            Color.argb(255/3*2, 147, 255, 0), // 2/3rd invisible
+            Color.argb(255/2 ,102, 255, 0),  // 1/2th invisible
+            Color.rgb(147, 255, 0),
             Color.rgb(193, 255, 0),
             Color.rgb(238, 255, 0),  // yellow
             Color.rgb(244, 227, 0),

File: library/src/com/google/maps/android/heatmaps/HeatmapTileProvider.java
Patch:
@@ -128,8 +128,8 @@ public Tile getTile(int x, int y, int zoom) {
         double[][] convolved = HeatmapUtil.convolve(intensity, mKernel);
 
         // Color it into a bitmap
-        double max = HeatmapUtil.getMaxVal(convolved);
-        Bitmap bitmap = HeatmapUtil.colorize(convolved, mColorMap, max);
+        //TODO: THIS IS A TEMPORARY FIX
+        Bitmap bitmap = HeatmapUtil.colorize(convolved, mColorMap, 10);
 
         return convertBitmap(bitmap);
     }

File: library/src/com/google/maps/android/heatmaps/HeatmapUtil.java
Patch:
@@ -151,6 +151,7 @@ public static Bitmap colorize(double[][] grid, int[] colorMap, double max) {
      * @param grid grid to find max for. Assumed to be square
      * @return max value in grid
      */
+    // TODO: THIS IS STUPID YOU NEED ONE FOR _EVERYTHING_ otherwise colors will mess up when stuff is split across tiles
     public static double getMaxVal(double[][] grid) {
         int i, j;
         double max = 0;
@@ -251,4 +252,6 @@ private static int interpolateColor(double x1, double x2, double x3, int color1,
 
         return Color.argb((int) alpha, (int) red, (int) green, (int) blue);
     }
+
+
 }

File: library/src/com/google/maps/android/heatmaps/HeatmapConstants.java
Patch:
@@ -21,8 +21,8 @@ public class HeatmapConstants {
     public final static int[] DEFAULT_HEATMAP_GRADIENT = {
             //a, r, g, b / r, g, b
             Color.argb(0, 102, 255, 0),  // green (invisible)
-            Color.rgb(102, 255, 0),  // green
-            Color.rgb(147, 255, 0),
+            Color.argb(255/3 ,102, 255, 0),  // 1/3rd invisible
+            Color.argb(255/3*2, 147, 255, 0), // 2/3rd invisible
             Color.rgb(193, 255, 0),
             Color.rgb(238, 255, 0),  // yellow
             Color.rgb(244, 227, 0),

File: demo/src/com/google/maps/android/utils/demo/HeatmapsDemoActivity.java
Patch:
@@ -66,6 +66,8 @@ protected void startDemo() {
         double[][] bigGrid = new double[dim + 2*radius][dim + 2*radius];
         bigGrid[100][100] = 10;
         bigGrid[200][200] = 10;
+        bigGrid[200][100] = 10;
+        bigGrid[240][240] = 10;
         double[] bigKernel = HeatmapUtil.generateKernel(radius, radius/3.0);
         double[][] bigConvolved = HeatmapUtil.convolve(bigGrid, bigKernel);
         //printGrid(bigConvolved);

File: demo/src/com/google/maps/android/utils/demo/HeatmapsDemoActivity.java
Patch:
@@ -39,7 +39,7 @@ protected void startDemo() {
         double[][] convolved = HeatmapUtil.convolve(grid, testKernel);
         printGrid(convolved);
 
-        int[] colorMapTest = HeatmapUtil.generateColorMap(HeatmapConstants.DEFAULT_HEATMAP_GRADIENT, 101, 1);
+        int[] colorMapTest = HeatmapUtil.generateColorMap(HeatmapConstants.DEFAULT_HEATMAP_GRADIENT, 102, 1);
         Log.e("map", Arrays.toString(colorMapTest));
 
         Bitmap colorMap = Bitmap.createBitmap(256, 256, Bitmap.Config.ARGB_8888);

File: library/src/com/google/maps/android/clustering/ClusterManager.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.os.AsyncTask;
-import android.util.Log;
 
 import com.google.android.gms.maps.GoogleMap;
 import com.google.android.gms.maps.model.CameraPosition;
@@ -11,7 +10,7 @@
 import com.google.maps.android.clustering.algo.PreCachingDecorator;
 import com.google.maps.android.clustering.algo.SimpleDistanceBased;
 import com.google.maps.android.clustering.view.ClusterView;
-import com.google.maps.android.clustering.view.DefaultView;
+import com.google.maps.android.clustering.view.DefaultClusterView;
 
 import java.util.Collection;
 import java.util.Set;
@@ -46,7 +45,7 @@ public ClusterManager(Context context, GoogleMap map, MarkerManager markerManage
         mMarkerManager = markerManager;
         mClusterMarkers = markerManager.newCollection();
         mMarkers = markerManager.newCollection();
-        mView = new DefaultView<T>(context, map, this);
+        mView = new DefaultClusterView<T>(context, map, this);
         setAlgorithm(new SimpleDistanceBased<T>());
         mClusterTask = new ClusterTask();
     }

File: library/src/com/google/maps/android/clustering/view/DefaultClusterView.java
Patch:
@@ -53,7 +53,7 @@
 /**
  * The default view for a ClusterManager. Markers are animated in and out of clusters.
  */
-public class DefaultView<T extends ClusterItem> implements ClusterView<T> {
+public class DefaultClusterView<T extends ClusterItem> implements ClusterView<T> {
     public static final boolean SHOULD_ANIMATE = Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;
     private final GoogleMap mMap;
     private final TextIconGenerator mTextIconGenerator;
@@ -103,7 +103,7 @@ public class DefaultView<T extends ClusterItem> implements ClusterView<T> {
     private ClusterManager.OnClusterClickListener<T> mClickListener;
     private ClusterManager.OnClusterItemClickListener<T> mItemClickListener;
 
-    public DefaultView(Context context, GoogleMap map, ClusterManager<T> clusterManager) {
+    public DefaultClusterView(Context context, GoogleMap map, ClusterManager<T> clusterManager) {
         mMap = map;
         mDensity = context.getResources().getDisplayMetrics().density;
         mTextIconGenerator = new TextIconGenerator(context);
@@ -264,7 +264,7 @@ private static boolean shouldRenderAsCluster(Cluster cluster) {
     }
 
     /**
-     * Transforms the current view (represented by DefaultView.mClusters and DefaultView.mZoom) to a
+     * Transforms the current view (represented by DefaultClusterView.mClusters and DefaultClusterView.mZoom) to a
      * new zoom level and set of clusters.
      * <p/>
      * This must be run off the UI thread. Work is coordinated in the RenderTask, then queued up to

File: library/src/com/google/maps/android/ui/TextIconGenerator.java
Patch:
@@ -280,7 +280,7 @@ private static int getTextStyle(int style) {
         switch (style) {
             case STYLE_DEFAULT:
             case STYLE_WHITE:
-                return R.drawable.bubble_white;
+                return R.style.Bubble_TextAppearance_Dark;
             case STYLE_RED:
             case STYLE_BLUE:
             case STYLE_GREEN:

File: library/src/com/google/maps/android/clustering/ClusterManager.java
Patch:
@@ -31,7 +31,7 @@ public ClusterManager(Context context,
                           GoogleMap map) {
         mMap = map;
         mView = new DefaultView<T>(context, map);
-        mAlgorithm = new SimpleDistanceBased<T>();
+        setAlgorithm(new SimpleDistanceBased<T>());
         mClusterTask = new ClusterTask();
     }
 

File: library/src/com/google/maps/android/ui/TextIconGenerator.java
Patch:
@@ -280,7 +280,7 @@ private static int getTextStyle(int style) {
         switch (style) {
             case STYLE_DEFAULT:
             case STYLE_WHITE:
-                return R.drawable.bubble_white;
+                return R.style.Bubble_TextAppearance_Dark;
             case STYLE_RED:
             case STYLE_BLUE:
             case STYLE_GREEN:

File: library/src/com/google/maps/android/ui/TextIconGenerator.java
Patch:
@@ -280,7 +280,7 @@ private static int getTextStyle(int style) {
         switch (style) {
             case STYLE_DEFAULT:
             case STYLE_WHITE:
-                return R.drawable.bubble_white;
+                return R.style.Bubble_TextAppearance_Dark;
             case STYLE_RED:
             case STYLE_BLUE:
             case STYLE_GREEN:

File: demo/src/com/google/maps/android/utils/demo/BigClusteringDemoActivity.java
Patch:
@@ -24,7 +24,6 @@ protected void startDemo() {
         getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(51.503186, -0.126446), 10));
 
         mClusterManager = new ClusterManager<MyItem>(this, getMap());
-        mClusterManager.setAlgorithm(new SimpleDistanceBased<MyItem>());
 
         getMap().setOnCameraChangeListener(mClusterManager);
         try {

File: demo/src/com/google/maps/android/utils/demo/ClusteringDemoActivity.java
Patch:
@@ -24,7 +24,6 @@ protected void startDemo() {
         getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(51.503186, -0.126446), 10));
 
         mClusterManager = new ClusterManager<MyItem>(this, getMap());
-        mClusterManager.setAlgorithm(new SimpleDistanceBased<MyItem>());
 
         getMap().setOnCameraChangeListener(mClusterManager);
 

File: demo/src/com/google/maps/android/utils/demo/BaseDemoActivity.java
Patch:
@@ -23,16 +23,16 @@ public void onCreate(Bundle savedInstanceState) {
     protected void onResume() {
         super.onResume();
         setUpMapIfNeeded();
-        if (getMap() != null) {
-          startDemo();
-        }
     }
 
     private void setUpMapIfNeeded() {
         if (mMap != null) {
             return;
         }
         mMap = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map)).getMap();
+        if (mMap != null) {
+            startDemo();
+        }
     }
 
     /**

File: src/com/google/maps/android/PolyUtil.java
Patch:
@@ -26,7 +26,7 @@ public class PolyUtil {
     /**
      * Decodes an encoded path string into a sequence of LatLngs.
      */
-    public List<LatLng> decode(final String encodedPath) {
+    public static List<LatLng> decode(final String encodedPath) {
         int len = encodedPath.length();
 
         // For speed we preallocate to an upper bound on the final length, then

