File: store/src/main/java/com/nytimes/android/external/store3/base/impl/Store.java
Patch:
@@ -69,7 +69,6 @@ public interface Store<T, V> {
      * Errors will be dropped
      *
      */
-    @Deprecated
     @Nonnull
     Observable<T> stream(V key);
 

File: middleware-jackson/src/test/java/com/nytimes/android/external/store3/middleware/jackson/JacksonReaderParserStoreTest.java
Patch:
@@ -5,8 +5,8 @@
 import com.nytimes.android.external.store3.base.Fetcher;
 import com.nytimes.android.external.store3.base.Parser;
 import com.nytimes.android.external.store3.base.Persister;
-import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.BarCode;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.StoreBuilder;
 import com.nytimes.android.external.store3.middleware.jackson.data.Foo;
 

File: middleware-jackson/src/test/java/com/nytimes/android/external/store3/middleware/jackson/JacksonSourceParserStoreTest.java
Patch:
@@ -5,8 +5,8 @@
 import com.nytimes.android.external.store3.base.Fetcher;
 import com.nytimes.android.external.store3.base.Parser;
 import com.nytimes.android.external.store3.base.Persister;
-import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.BarCode;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.StoreBuilder;
 import com.nytimes.android.external.store3.middleware.jackson.data.Foo;
 

File: middleware-moshi/src/test/java/com/nytimes/android/external/store3/middleware/moshi/MoshiSourceParserTest.java
Patch:
@@ -4,8 +4,8 @@
 import com.nytimes.android.external.store3.base.Parser;
 import com.nytimes.android.external.store3.base.Persister;
 import com.nytimes.android.external.store3.base.impl.BarCode;
-import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.ParsingStoreBuilder;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.middleware.moshi.data.Foo;
 
 import org.junit.Before;

File: middleware-moshi/src/test/java/com/nytimes/android/external/store3/middleware/moshi/MoshiStringParserStoreTest.java
Patch:
@@ -3,8 +3,8 @@
 import com.nytimes.android.external.store3.base.Fetcher;
 import com.nytimes.android.external.store3.base.Persister;
 import com.nytimes.android.external.store3.base.impl.BarCode;
-import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.ParsingStoreBuilder;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.middleware.moshi.data.Foo;
 import com.squareup.moshi.Moshi;
 

File: middleware-jackson/src/test/java/com/nytimes/android/external/store3/middleware/jackson/JacksonReaderParserStoreTest.java
Patch:
@@ -5,8 +5,8 @@
 import com.nytimes.android.external.store3.base.Fetcher;
 import com.nytimes.android.external.store3.base.Parser;
 import com.nytimes.android.external.store3.base.Persister;
-import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.BarCode;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.StoreBuilder;
 import com.nytimes.android.external.store3.middleware.jackson.data.Foo;
 

File: middleware-jackson/src/test/java/com/nytimes/android/external/store3/middleware/jackson/JacksonSourceParserStoreTest.java
Patch:
@@ -5,8 +5,8 @@
 import com.nytimes.android.external.store3.base.Fetcher;
 import com.nytimes.android.external.store3.base.Parser;
 import com.nytimes.android.external.store3.base.Persister;
-import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.BarCode;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.StoreBuilder;
 import com.nytimes.android.external.store3.middleware.jackson.data.Foo;
 

File: middleware-moshi/src/test/java/com/nytimes/android/external/store3/middleware/moshi/MoshiSourceParserTest.java
Patch:
@@ -4,8 +4,8 @@
 import com.nytimes.android.external.store3.base.Parser;
 import com.nytimes.android.external.store3.base.Persister;
 import com.nytimes.android.external.store3.base.impl.BarCode;
-import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.ParsingStoreBuilder;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.middleware.moshi.data.Foo;
 
 import org.junit.Before;

File: middleware-moshi/src/test/java/com/nytimes/android/external/store3/middleware/moshi/MoshiStringParserStoreTest.java
Patch:
@@ -3,8 +3,8 @@
 import com.nytimes.android.external.store3.base.Fetcher;
 import com.nytimes.android.external.store3.base.Persister;
 import com.nytimes.android.external.store3.base.impl.BarCode;
-import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.base.impl.ParsingStoreBuilder;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.external.store3.middleware.moshi.data.Foo;
 import com.squareup.moshi.Moshi;
 

File: store/src/main/java/com/nytimes/android/external/store3/util/NoopParserFunc.java
Patch:
@@ -11,6 +11,7 @@ public class NoopParserFunc<Raw, Parsed> implements Parser<Raw, Parsed> {
 
     @Override
     public Parsed apply(@NonNull Raw raw) throws ParserException {
+        //noinspection unchecked
         return (Parsed) raw;
     }
 }

File: store/src/test/java/com/nytimes/android/external/store3/base/impl/MemoryPolicyBuilderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testBuildExpireAfterWriteMemoryPolicy() {
 
         assertThat(policy.getExpireAfterWrite()).isEqualTo(4L);
         assertThat(policy.getExpireAfterTimeUnit()).isEqualTo(TimeUnit.SECONDS);
-        assertThat(policy.isDefaultPolicy()).isFalse();
+        assertThat(policy.isDefaultWritePolicy()).isFalse();
         assertThat(policy.getExpireAfterAccess()).isEqualTo(MemoryPolicy.DEFAULT_POLICY);
     }
 
@@ -28,7 +28,7 @@ public void testBuildExpireAfterAccessMemoryPolicy() {
 
         assertThat(policy.getExpireAfterAccess()).isEqualTo(4L);
         assertThat(policy.getExpireAfterTimeUnit()).isEqualTo(TimeUnit.SECONDS);
-        assertThat(policy.isDefaultPolicy()).isTrue();
+        assertThat(policy.isDefaultWritePolicy()).isTrue();
         assertThat(policy.getExpireAfterWrite()).isEqualTo(MemoryPolicy.DEFAULT_POLICY);
     }
 

File: filesystem/src/test/java/com/nytimes/android/external/fs3/StoreNetworkBeforeStaleFailTest.java
Patch:
@@ -53,7 +53,7 @@ public void networkBeforeStaleNoNetworkResponse() {
         verify(fetcher, times(1)).fetch(barCode);
     }
 
-    final class TestPersister implements Persister<BufferedSource, BarCode>, RecordProvider<BarCode> {
+    private static final class TestPersister implements Persister<BufferedSource, BarCode>, RecordProvider<BarCode> {
         @Nonnull
         @Override
         public RecordState getRecordState(@Nonnull BarCode barCode) {

File: filesystem/src/test/java/com/nytimes/android/external/fs3/StoreNetworkBeforeStaleFailTest.java
Patch:
@@ -27,7 +27,7 @@
 
 @RunWith(MockitoJUnitRunner.class)
 public class StoreNetworkBeforeStaleFailTest {
-    private static final Exception sorry = new Exception("sorry");
+    static final Exception sorry = new Exception("sorry");
     private static final BarCode barCode = new BarCode("key", "value");
     @Mock
     Fetcher<BufferedSource, BarCode> fetcher;

File: filesystem/src/main/java/com/nytimes/android/external/fs3/SourcePersisterFactory.java
Patch:
@@ -78,7 +78,6 @@ public static Persister<BufferedSource, BarCode> create(@Nonnull FileSystem file
         return SourcePersister.create(fileSystem);
     }
 
-
     /**
      * Returns a new {@link BufferedSource} persister with the provided file as the root of the
      * persistence {@link FileSystem}.
@@ -104,5 +103,4 @@ public static Persister<BufferedSource, BarCode> createAll(@Nonnull FileSystem f
         }
         return SourceAllPersister.create(fileSystem);
     }
-
 }

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/StoreUtil.java
Patch:
@@ -19,7 +19,7 @@ private StoreUtil() {
 
     @Nonnull
     static <Parsed, Key> ObservableTransformer<Parsed, Parsed>
-    repeatWhenCacheEvicted(PublishSubject<Key> refreshSubject, @Nonnull final Key keyForRepeat) {
+    repeatWhenSubjectEmits(PublishSubject<Key> refreshSubject, @Nonnull final Key keyForRepeat) {
         Observable<Key> filter = refreshSubject.filter(key -> key.equals(keyForRepeat));
         return RepeatWhenEmits.from(filter);
     }

File: middleware-jackson/src/main/java/com/nytimes/android/external/store3/middleware/jackson/JacksonTransformerFactory.java
Patch:
@@ -2,11 +2,10 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.nytimes.android.external.fs3.ObjectToSourceTransformer;
+import com.nytimes.android.external.store3.annotations.Experimental;
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.annotations.Experimental;
-
 /**
  * Factory which returns Jackson {@link io.reactivex.SingleTransformer} implementations.
  */

File: middleware-moshi/src/main/java/com/nytimes/android/external/store3/middleware/moshi/MoshiTransformerFactory.java
Patch:
@@ -1,14 +1,13 @@
 package com.nytimes.android.external.store3.middleware.moshi;
 
 import com.nytimes.android.external.fs3.ObjectToSourceTransformer;
+import com.nytimes.android.external.store3.annotations.Experimental;
 import com.squareup.moshi.Moshi;
 
 import java.lang.reflect.Type;
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.annotations.Experimental;
-
 /**
  * Factory which returns Moshi {@link io.reactivex.SingleTransformer} implementations.
  */

File: middleware/src/main/java/com/nytimes/android/external/store3/middleware/GsonTransformerFactory.java
Patch:
@@ -2,11 +2,10 @@
 
 import com.google.gson.Gson;
 import com.nytimes.android.external.fs3.ObjectToSourceTransformer;
+import com.nytimes.android.external.store3.annotations.Experimental;
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.annotations.Experimental;
-
 /**
  * Factory which returns Gson {@link io.reactivex.SingleTransformer} implementations.
  */

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/RealInternalStore.java
Patch:
@@ -1,6 +1,7 @@
 package com.nytimes.android.external.store3.base.impl;
 
 import com.nytimes.android.external.cache3.Cache;
+import com.nytimes.android.external.store3.annotations.Experimental;
 import com.nytimes.android.external.store3.base.Fetcher;
 import com.nytimes.android.external.store3.base.InternalStore;
 import com.nytimes.android.external.store3.base.Persister;
@@ -15,7 +16,6 @@
 import io.reactivex.Maybe;
 import io.reactivex.Observable;
 import io.reactivex.Single;
-import io.reactivex.annotations.Experimental;
 import io.reactivex.subjects.PublishSubject;
 
 /**

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/Store.java
Patch:
@@ -1,11 +1,12 @@
 package com.nytimes.android.external.store3.base.impl;
 
 
+import com.nytimes.android.external.store3.annotations.Experimental;
+
 import javax.annotation.Nonnull;
 
 import io.reactivex.Observable;
 import io.reactivex.Single;
-import io.reactivex.annotations.Experimental;
 
 
 /**

File: app/src/main/java/com/nytimes/android/sample/activity/PersistingStoreActivity.java
Patch:
@@ -7,8 +7,8 @@
 import android.support.v7.widget.Toolbar;
 import android.widget.Toast;
 
-import com.nytimes.android.external.store2.base.impl.BarCode;
-import com.nytimes.android.external.store2.base.impl.Store;
+import com.nytimes.android.external.store3.base.impl.BarCode;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.sample.R;
 import com.nytimes.android.sample.SampleApp;
 import com.nytimes.android.sample.data.model.Children;

File: app/src/main/java/com/nytimes/android/sample/activity/StoreActivity.java
Patch:
@@ -8,8 +8,8 @@
 import android.util.Log;
 import android.widget.Toast;
 
-import com.nytimes.android.external.store2.base.impl.BarCode;
-import com.nytimes.android.external.store2.base.impl.Store;
+import com.nytimes.android.external.store3.base.impl.BarCode;
+import com.nytimes.android.external.store3.base.impl.Store;
 import com.nytimes.android.sample.R;
 import com.nytimes.android.sample.SampleApp;
 import com.nytimes.android.sample.data.model.Children;

File: app/src/test/java/com/nytimes/android/sample/StoreIntegrationTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.nytimes.android.sample;
 
-import com.nytimes.android.external.store2.base.impl.Store;
-import com.nytimes.android.external.store2.base.impl.BarCode;
-import com.nytimes.android.external.store2.base.impl.StoreBuilder;
+import com.nytimes.android.external.store3.base.impl.Store;
+import com.nytimes.android.external.store3.base.impl.BarCode;
+import com.nytimes.android.external.store3.base.impl.StoreBuilder;
 
 import org.junit.Before;
 import org.junit.Test;

File: cache/src/main/java/com/nytimes/android/external/cache3/AbstractFuture.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 

File: cache/src/main/java/com/nytimes/android/external/cache3/AbstractSequentialIterator.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 

File: cache/src/main/java/com/nytimes/android/external/cache3/Ascii.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 import javax.annotation.Nonnull;
 

File: cache/src/main/java/com/nytimes/android/external/cache3/Cache.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 import java.util.Map;

File: cache/src/main/java/com/nytimes/android/external/cache3/CacheBuilder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 

File: cache/src/main/java/com/nytimes/android/external/cache3/CacheLoader.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 import java.io.Serializable;

File: cache/src/main/java/com/nytimes/android/external/cache3/DirectExecutor.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 import java.util.concurrent.Executor;
 

File: cache/src/main/java/com/nytimes/android/external/cache3/Equivalence.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 import java.io.Serializable;

File: cache/src/main/java/com/nytimes/android/external/cache3/ExecutionError.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 

File: cache/src/main/java/com/nytimes/android/external/cache3/ForwardingCache.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 import java.util.Map;
 import java.util.concurrent.Callable;

File: cache/src/main/java/com/nytimes/android/external/cache3/ForwardingObject.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 public abstract class ForwardingObject {
 

File: cache/src/main/java/com/nytimes/android/external/cache3/Function.java
Patch:
@@ -3,7 +3,7 @@
 // (powered by Fernflower decompiler)
 //
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 import javax.annotation.Nullable;
 

File: cache/src/main/java/com/nytimes/android/external/cache3/Futures.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 

File: cache/src/main/java/com/nytimes/android/external/cache3/FuturesGetChecked.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 import java.lang.ref.WeakReference;

File: cache/src/main/java/com/nytimes/android/external/cache3/ListenableFuture.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.Future;

File: cache/src/main/java/com/nytimes/android/external/cache3/LoadingCache.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentMap;

File: cache/src/main/java/com/nytimes/android/external/cache3/MoreObjects.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 import java.util.Arrays;

File: cache/src/main/java/com/nytimes/android/external/cache3/Objects.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 /**

File: cache/src/main/java/com/nytimes/android/external/cache3/Platform.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 /**
  * Methods factored out so that they can be emulated differently in GWT.

File: cache/src/main/java/com/nytimes/android/external/cache3/Preconditions.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 

File: cache/src/main/java/com/nytimes/android/external/cache3/RemovalCause.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 /**
  * The reason why a cached entry was removed.

File: cache/src/main/java/com/nytimes/android/external/cache3/RemovalListener.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 public interface RemovalListener<K, V> {
   /**

File: cache/src/main/java/com/nytimes/android/external/cache3/RemovalNotification.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 
@@ -7,7 +7,7 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
-import static com.nytimes.android.external.cache.Preconditions.checkNotNull;
+import static com.nytimes.android.external.cache3.Preconditions.checkNotNull;
 
 public final class RemovalNotification<K, V> implements Map.Entry<K, V> {
 

File: cache/src/main/java/com/nytimes/android/external/cache3/SettableFuture.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 import javax.annotation.Nonnull;

File: cache/src/main/java/com/nytimes/android/external/cache3/Stopwatch.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 
 import javax.annotation.Nonnull;
 
-import static com.nytimes.android.external.cache.Preconditions.checkState;
+import static com.nytimes.android.external.cache3.Preconditions.checkState;
 import static java.util.concurrent.TimeUnit.DAYS;
 import static java.util.concurrent.TimeUnit.HOURS;
 import static java.util.concurrent.TimeUnit.MICROSECONDS;

File: cache/src/main/java/com/nytimes/android/external/cache3/Supplier.java
Patch:
@@ -3,7 +3,7 @@
 // (powered by Fernflower decompiler)
 //
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 import javax.annotation.Nonnull;
 

File: cache/src/main/java/com/nytimes/android/external/cache3/Ticker.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 
 import javax.annotation.Nonnull;

File: cache/src/main/java/com/nytimes/android/external/cache3/UncheckedExecutionException.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 public class UncheckedExecutionException extends RuntimeException {
 // --Commented out by Inspection START (11/29/16, 5:04 PM):

File: cache/src/main/java/com/nytimes/android/external/cache3/Uninterruptibles.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;

File: cache/src/main/java/com/nytimes/android/external/cache3/UnmodifiableIterator.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 import java.util.Iterator;
 

File: cache/src/main/java/com/nytimes/android/external/cache3/Weigher.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.cache;
+package com.nytimes.android.external.cache3;
 
 public interface Weigher<K, V> {
 

File: filesystem/src/main/java/com/nytimes/android/external/fs3/BarCodePathResolver.java
Patch:
@@ -1,6 +1,6 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
-import com.nytimes.android.external.store2.base.impl.BarCode;
+import com.nytimes.android.external.store3.base.impl.BarCode;
 
 import javax.annotation.Nonnull;
 

File: filesystem/src/main/java/com/nytimes/android/external/fs3/BufferedSourceAdapter.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
 import javax.annotation.Nonnull;
 

File: filesystem/src/main/java/com/nytimes/android/external/fs3/FSReader.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
-import com.nytimes.android.external.fs2.filesystem.FileSystem;
-import com.nytimes.android.external.store2.base.DiskRead;
+import com.nytimes.android.external.fs3.filesystem.FileSystem;
+import com.nytimes.android.external.store3.base.DiskRead;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;

File: filesystem/src/main/java/com/nytimes/android/external/fs3/FSWriter.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
-import com.nytimes.android.external.fs2.filesystem.FileSystem;
-import com.nytimes.android.external.store2.base.DiskWrite;
+import com.nytimes.android.external.fs3.filesystem.FileSystem;
+import com.nytimes.android.external.store3.base.DiskWrite;
 
 import javax.annotation.Nonnull;
 

File: filesystem/src/main/java/com/nytimes/android/external/fs3/FileSystemPersister.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
-import com.nytimes.android.external.fs2.filesystem.FileSystem;
-import com.nytimes.android.external.store2.base.Persister;
+import com.nytimes.android.external.fs3.filesystem.FileSystem;
+import com.nytimes.android.external.store3.base.Persister;
 
 import javax.annotation.Nonnull;
 

File: filesystem/src/main/java/com/nytimes/android/external/fs3/ObjectToSourceTransformer.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
 import javax.annotation.Nonnull;
 

File: filesystem/src/main/java/com/nytimes/android/external/fs3/PathResolver.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
 
 import javax.annotation.Nonnull;

File: filesystem/src/main/java/com/nytimes/android/external/fs3/Util.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
 
 import java.io.File;

File: filesystem/src/main/java/com/nytimes/android/external/fs3/filesystem/BreadthFirstFileTreeIterator.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2.filesystem;
+package com.nytimes.android.external.fs3.filesystem;
 
 /*
  * Copyright 2004-2007 the original author or authors.

File: filesystem/src/main/java/com/nytimes/android/external/fs3/filesystem/FSFile.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.fs2.filesystem;
+package com.nytimes.android.external.fs3.filesystem;
 
 
-import com.nytimes.android.external.fs2.Util;
+import com.nytimes.android.external.fs3.Util;
 
 import java.io.File;
 import java.io.FileNotFoundException;

File: filesystem/src/main/java/com/nytimes/android/external/fs3/filesystem/FileSystem.java
Patch:
@@ -1,6 +1,6 @@
-package com.nytimes.android.external.fs2.filesystem;
+package com.nytimes.android.external.fs3.filesystem;
 
-import com.nytimes.android.external.store2.base.RecordState;
+import com.nytimes.android.external.store3.base.RecordState;
 
 import java.io.File;
 import java.io.FileNotFoundException;

File: filesystem/src/main/java/com/nytimes/android/external/fs3/filesystem/FileSystemFactory.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2.filesystem;
+package com.nytimes.android.external.fs3.filesystem;
 
 import java.io.File;
 import java.io.IOException;

File: filesystem/src/test/java/com/nytimes/android/external/fs3/MultiTest.java
Patch:
@@ -1,8 +1,8 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
 import com.google.common.collect.ImmutableMap;
-import com.nytimes.android.external.fs2.filesystem.FileSystem;
-import com.nytimes.android.external.fs2.filesystem.FileSystemFactory;
+import com.nytimes.android.external.fs3.filesystem.FileSystem;
+import com.nytimes.android.external.fs3.filesystem.FileSystemFactory;
 
 import org.junit.Test;
 

File: filesystem/src/test/java/com/nytimes/android/external/fs3/ObjectToSourceTransformerTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
 import org.junit.Before;
 import org.junit.Test;

File: filesystem/src/test/java/com/nytimes/android/external/fs3/SourcePersisterTest.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
-import com.nytimes.android.external.fs2.filesystem.FileSystem;
-import com.nytimes.android.external.store2.base.impl.BarCode;
+import com.nytimes.android.external.fs3.filesystem.FileSystem;
+import com.nytimes.android.external.store3.base.impl.BarCode;
 
 import org.junit.Before;
 import org.junit.Rule;

File: filesystem/src/test/java/com/nytimes/android/external/fs3/UtilTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2;
+package com.nytimes.android.external.fs3;
 
 import org.junit.Test;
 

File: filesystem/src/test/java/com/nytimes/android/external/fs3/filesystem/BreadthFirstFileTreeIteratorTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2.filesystem;
+package com.nytimes.android.external.fs3.filesystem;
 
 import org.junit.Before;
 import org.junit.Test;

File: filesystem/src/test/java/com/nytimes/android/external/fs3/filesystem/FSFileTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.fs2.filesystem;
+package com.nytimes.android.external.fs3.filesystem;
 
 import org.junit.Before;
 import org.junit.Rule;

File: middleware-jackson/src/main/java/com/nytimes/android/external/store3/middleware/jackson/JacksonBufferedSourceAdapter.java
Patch:
@@ -1,8 +1,8 @@
-package com.nytimes.android.external.store2.middleware.jackson;
+package com.nytimes.android.external.store3.middleware.jackson;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.nytimes.android.external.fs2.BufferedSourceAdapter;
+import com.nytimes.android.external.fs3.BufferedSourceAdapter;
 
 import java.io.ByteArrayInputStream;
 

File: middleware-jackson/src/main/java/com/nytimes/android/external/store3/middleware/jackson/JacksonParserFactory.java
Patch:
@@ -1,9 +1,9 @@
-package com.nytimes.android.external.store2.middleware.jackson;
+package com.nytimes.android.external.store3.middleware.jackson;
 
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.nytimes.android.external.cache.Preconditions;
-import com.nytimes.android.external.store2.base.Parser;
+import com.nytimes.android.external.cache3.Preconditions;
+import com.nytimes.android.external.store3.base.Parser;
 
 import java.io.Reader;
 import java.lang.reflect.Type;

File: middleware-jackson/src/main/java/com/nytimes/android/external/store3/middleware/jackson/JacksonReaderParser.java
Patch:
@@ -1,11 +1,11 @@
-package com.nytimes.android.external.store2.middleware.jackson;
+package com.nytimes.android.external.store3.middleware.jackson;
 
 
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.nytimes.android.external.store2.base.Parser;
-import com.nytimes.android.external.store2.util.ParserException;
+import com.nytimes.android.external.store3.base.Parser;
+import com.nytimes.android.external.store3.util.ParserException;
 
 import java.io.IOException;
 import java.io.Reader;

File: middleware-jackson/src/main/java/com/nytimes/android/external/store3/middleware/jackson/JacksonSourceParser.java
Patch:
@@ -1,10 +1,10 @@
-package com.nytimes.android.external.store2.middleware.jackson;
+package com.nytimes.android.external.store3.middleware.jackson;
 
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.nytimes.android.external.store2.base.Parser;
-import com.nytimes.android.external.store2.util.ParserException;
+import com.nytimes.android.external.store3.base.Parser;
+import com.nytimes.android.external.store3.util.ParserException;
 
 import java.io.IOException;
 import java.io.InputStream;

File: middleware-jackson/src/main/java/com/nytimes/android/external/store3/middleware/jackson/JacksonStringParser.java
Patch:
@@ -1,10 +1,10 @@
-package com.nytimes.android.external.store2.middleware.jackson;
+package com.nytimes.android.external.store3.middleware.jackson;
 
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.nytimes.android.external.store2.base.Parser;
-import com.nytimes.android.external.store2.util.ParserException;
+import com.nytimes.android.external.store3.base.Parser;
+import com.nytimes.android.external.store3.util.ParserException;
 
 import java.io.IOException;
 import java.lang.reflect.Type;

File: middleware-jackson/src/main/java/com/nytimes/android/external/store3/middleware/jackson/JacksonTransformerFactory.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2.middleware.jackson;
+package com.nytimes.android.external.store3.middleware.jackson;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.nytimes.android.external.fs2.ObjectToSourceTransformer;
+import com.nytimes.android.external.fs3.ObjectToSourceTransformer;
 
 import javax.annotation.Nonnull;
 

File: middleware-jackson/src/test/java/com/nytimes/android/external/store3/middleware/jackson/data/Bar.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.middleware.jackson.data;
+package com.nytimes.android.external.store3.middleware.jackson.data;
 
 public class Bar {
     public String string;

File: middleware-jackson/src/test/java/com/nytimes/android/external/store3/middleware/jackson/data/Foo.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.middleware.jackson.data;
+package com.nytimes.android.external.store3.middleware.jackson.data;
 
 import java.util.List;
 

File: middleware-moshi/src/main/java/com/nytimes/android/external/store3/middleware/moshi/MoshiBufferedSourceAdapter.java
Patch:
@@ -1,6 +1,6 @@
-package com.nytimes.android.external.store2.middleware.moshi;
+package com.nytimes.android.external.store3.middleware.moshi;
 
-import com.nytimes.android.external.fs2.BufferedSourceAdapter;
+import com.nytimes.android.external.fs3.BufferedSourceAdapter;
 import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.Moshi;
 

File: middleware-moshi/src/main/java/com/nytimes/android/external/store3/middleware/moshi/MoshiParserFactory.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2.middleware.moshi;
+package com.nytimes.android.external.store3.middleware.moshi;
 
-import com.nytimes.android.external.cache.Preconditions;
-import com.nytimes.android.external.store2.base.Parser;
+import com.nytimes.android.external.cache3.Preconditions;
+import com.nytimes.android.external.store3.base.Parser;
 import com.squareup.moshi.Moshi;
 
 import java.lang.reflect.Type;

File: middleware-moshi/src/main/java/com/nytimes/android/external/store3/middleware/moshi/MoshiSourceParser.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2.middleware.moshi;
+package com.nytimes.android.external.store3.middleware.moshi;
 
-import com.nytimes.android.external.store2.base.Parser;
-import com.nytimes.android.external.store2.util.ParserException;
+import com.nytimes.android.external.store3.base.Parser;
+import com.nytimes.android.external.store3.util.ParserException;
 import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.Moshi;
 

File: middleware-moshi/src/main/java/com/nytimes/android/external/store3/middleware/moshi/MoshiStringParser.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2.middleware.moshi;
+package com.nytimes.android.external.store3.middleware.moshi;
 
-import com.nytimes.android.external.store2.base.Parser;
-import com.nytimes.android.external.store2.util.ParserException;
+import com.nytimes.android.external.store3.base.Parser;
+import com.nytimes.android.external.store3.util.ParserException;
 import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.Moshi;
 

File: middleware-moshi/src/main/java/com/nytimes/android/external/store3/middleware/moshi/MoshiTransformerFactory.java
Patch:
@@ -1,6 +1,6 @@
-package com.nytimes.android.external.store2.middleware.moshi;
+package com.nytimes.android.external.store3.middleware.moshi;
 
-import com.nytimes.android.external.fs2.ObjectToSourceTransformer;
+import com.nytimes.android.external.fs3.ObjectToSourceTransformer;
 import com.squareup.moshi.Moshi;
 
 import java.lang.reflect.Type;

File: middleware-moshi/src/test/java/com/nytimes/android/external/store3/middleware/moshi/data/Bar.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.middleware.moshi.data;
+package com.nytimes.android.external.store3.middleware.moshi.data;
 
 public class Bar {
     public String string;

File: middleware-moshi/src/test/java/com/nytimes/android/external/store3/middleware/moshi/data/Foo.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.middleware.moshi.data;
+package com.nytimes.android.external.store3.middleware.moshi.data;
 
 import java.util.List;
 

File: middleware/src/main/java/com/nytimes/android/external/store3/middleware/GsonBufferedSourceAdapter.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2.middleware;
+package com.nytimes.android.external.store3.middleware;
 
 import com.google.gson.Gson;
-import com.nytimes.android.external.fs2.BufferedSourceAdapter;
+import com.nytimes.android.external.fs3.BufferedSourceAdapter;
 
 import java.io.ByteArrayInputStream;
 import java.nio.charset.StandardCharsets;

File: middleware/src/main/java/com/nytimes/android/external/store3/middleware/GsonParserFactory.java
Patch:
@@ -1,8 +1,8 @@
-package com.nytimes.android.external.store2.middleware;
+package com.nytimes.android.external.store3.middleware;
 
 
 import com.google.gson.Gson;
-import com.nytimes.android.external.store2.base.Parser;
+import com.nytimes.android.external.store3.base.Parser;
 
 import java.io.Reader;
 import java.lang.reflect.Type;

File: middleware/src/main/java/com/nytimes/android/external/store3/middleware/GsonTransformerFactory.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2.middleware;
+package com.nytimes.android.external.store3.middleware;
 
 import com.google.gson.Gson;
-import com.nytimes.android.external.fs2.ObjectToSourceTransformer;
+import com.nytimes.android.external.fs3.ObjectToSourceTransformer;
 
 import javax.annotation.Nonnull;
 

File: middleware/src/test/java/com/nytimes/android/external/store3/GsonParserFactoryTest.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2;
+package com.nytimes.android.external.store3;
 
 import com.google.gson.Gson;
-import com.nytimes.android.external.store2.middleware.GsonParserFactory;
+import com.nytimes.android.external.store3.middleware.GsonParserFactory;
 
 import org.junit.Before;
 import org.junit.Rule;

File: store/src/main/java/com/nytimes/android/external/store3/base/Clearable.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base;
+package com.nytimes.android.external.store3.base;
 
 
 import javax.annotation.Nonnull;

File: store/src/main/java/com/nytimes/android/external/store3/base/DiskRead.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base;
+package com.nytimes.android.external.store3.base;
 
 import javax.annotation.Nonnull;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/DiskWrite.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base;
+package com.nytimes.android.external.store3.base;
 
 import javax.annotation.Nonnull;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/Fetcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base;
+package com.nytimes.android.external.store3.base;
 
 import javax.annotation.Nonnull;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/InternalStore.java
Patch:
@@ -1,6 +1,6 @@
-package com.nytimes.android.external.store2.base;
+package com.nytimes.android.external.store3.base;
 
-import com.nytimes.android.external.store2.base.impl.Store;
+import com.nytimes.android.external.store3.base.impl.Store;
 
 import javax.annotation.Nonnull;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/Parser.java
Patch:
@@ -1,6 +1,6 @@
-package com.nytimes.android.external.store2.base;
+package com.nytimes.android.external.store3.base;
 
-import com.nytimes.android.external.store2.util.ParserException;
+import com.nytimes.android.external.store3.util.ParserException;
 
 import io.reactivex.annotations.NonNull;
 import io.reactivex.functions.Function;

File: store/src/main/java/com/nytimes/android/external/store3/base/Persister.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base;
+package com.nytimes.android.external.store3.base;
 
 import javax.annotation.Nonnull;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/RecordProvider.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base;
+package com.nytimes.android.external.store3.base;
 
 import javax.annotation.Nonnull;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/RecordState.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base;
+package com.nytimes.android.external.store3.base;
 
 public enum RecordState {
     FRESH, STALE, MISSING

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/BarCode.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
-import com.nytimes.android.external.cache.Preconditions;
-import com.nytimes.android.external.store2.base.Persister;
+import com.nytimes.android.external.cache3.Preconditions;
+import com.nytimes.android.external.store3.base.Persister;
 
 import java.io.Serializable;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/CacheFactory.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
-import com.nytimes.android.external.cache.Cache;
-import com.nytimes.android.external.cache.CacheBuilder;
+import com.nytimes.android.external.cache3.Cache;
+import com.nytimes.android.external.cache3.CacheBuilder;
 
 import java.util.concurrent.TimeUnit;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/MemoryPolicy.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
 
-import com.nytimes.android.external.store2.util.NoopPersister;
+import com.nytimes.android.external.store3.util.NoopPersister;
 
 import java.util.concurrent.TimeUnit;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/ParsingStoreBuilder.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
 import javax.annotation.Nonnull;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/RepeatWhenEmits.java
Patch:
@@ -1,12 +1,12 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
 import javax.annotation.Nonnull;
 
 import io.reactivex.Observable;
 import io.reactivex.ObservableSource;
 import io.reactivex.ObservableTransformer;
 
-import static com.nytimes.android.external.cache.Preconditions.checkNotNull;
+import static com.nytimes.android.external.cache3.Preconditions.checkNotNull;
 
 /**
  * A Transformer that takes a source observable and re-subscribes to the upstream Observable when

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/StalePolicy.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
 public enum StalePolicy {
     UNSPECIFIED, REFRESH_ON_STALE, NETWORK_BEFORE_STALE

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/Store.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
 
 import javax.annotation.Nonnull;

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/StoreBuilder.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
 import javax.annotation.Nonnull;
 

File: store/src/main/java/com/nytimes/android/external/store3/base/impl/StoreDefaults.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
 import java.util.concurrent.TimeUnit;
 

File: store/src/main/java/com/nytimes/android/external/store3/util/KeyParser.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.util;
+package com.nytimes.android.external.store3.util;
 
 import io.reactivex.annotations.NonNull;
 import io.reactivex.functions.BiFunction;

File: store/src/main/java/com/nytimes/android/external/store3/util/NoKeyParser.java
Patch:
@@ -1,6 +1,6 @@
-package com.nytimes.android.external.store2.util;
+package com.nytimes.android.external.store3.util;
 
-import com.nytimes.android.external.store2.base.Parser;
+import com.nytimes.android.external.store3.base.Parser;
 
 import javax.annotation.Nonnull;
 

File: store/src/main/java/com/nytimes/android/external/store3/util/NoopParserFunc.java
Patch:
@@ -1,6 +1,6 @@
-package com.nytimes.android.external.store2.util;
+package com.nytimes.android.external.store3.util;
 
-import com.nytimes.android.external.store2.base.Parser;
+import com.nytimes.android.external.store3.base.Parser;
 
 import io.reactivex.annotations.NonNull;
 

File: store/src/main/java/com/nytimes/android/external/store3/util/ParserException.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.util;
+package com.nytimes.android.external.store3.util;
 
 /**
  * Exception thrown when one of the provided parsers fails.

File: store/src/test/java/com/nytimes/android/external/store3/KeyParserTest.java
Patch:
@@ -1,7 +1,7 @@
-package com.nytimes.android.external.store2;
+package com.nytimes.android.external.store3;
 
-import com.nytimes.android.external.store2.base.impl.Store;
-import com.nytimes.android.external.store2.base.impl.StoreBuilder;
+import com.nytimes.android.external.store3.base.impl.Store;
+import com.nytimes.android.external.store3.base.impl.StoreBuilder;
 
 import org.junit.Before;
 import org.junit.Test;

File: store/src/test/java/com/nytimes/android/external/store3/base/impl/MemoryPolicyBuilderTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
 import org.junit.Test;
 

File: store/src/test/java/com/nytimes/android/external/store3/base/impl/RepeatWhenEmitsTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.nytimes.android.external.store2.base.impl;
+package com.nytimes.android.external.store3.base.impl;
 
 import org.junit.Test;
 

File: store/src/test/java/com/nytimes/android/external/store3/util/NoopPersisterTest.java
Patch:
@@ -1,6 +1,6 @@
-package com.nytimes.android.external.store2.util;
+package com.nytimes.android.external.store3.util;
 
-import com.nytimes.android.external.store2.base.impl.BarCode;
+import com.nytimes.android.external.store3.base.impl.BarCode;
 
 import org.junit.Test;
 

File: app/src/main/java/com/nytimes/android/sample/SampleApp.java
Patch:
@@ -11,6 +11,7 @@
 import com.nytimes.android.external.store2.base.impl.Store;
 import com.nytimes.android.external.store2.base.impl.StoreBuilder;
 import com.nytimes.android.external.store2.middleware.GsonParserFactory;
+import com.nytimes.android.external.store2.middleware.GsonTransformerFactory;
 import com.nytimes.android.sample.data.model.GsonAdaptersModel;
 import com.nytimes.android.sample.data.model.RedditData;
 import com.nytimes.android.sample.data.remote.Api;

File: cache/src/main/java/com/nytimes/android/external/cache/LocalCache.java
Patch:
@@ -4760,7 +4760,7 @@ protected Cache<K, V> delegate() {
     }
 
     /**
-     * Serializes the configuration of a LocalCache, reconsitituting it as an LoadingCache using
+     * Serializes the configuration of a LocalCache, reconstituting it as a LoadingCache using
      * CacheBuilder upon deserialization. An instance of this class is fit for use by the writeReplace
      * of LocalLoadingCache.
      * <p>

File: filesystem/src/main/java/com/nytimes/android/external/fs2/filesystem/FSFile.java
Patch:
@@ -51,7 +51,7 @@ public String path() {
         return pathValue;
     }
 
-    public void write(BufferedSource source) throws IOException {
+    public void write(@Nonnull BufferedSource source) throws IOException {
 
         File tmpFile = File.createTempFile("new", "tmp", file.getParentFile());
         BufferedSink sink = null;
@@ -71,6 +71,7 @@ public void write(BufferedSource source) throws IOException {
             if (sink != null) {
                 sink.close();
             }
+            source.close();
         }
     }
 

File: store/src/main/java/com/nytimes/android/external/store2/base/impl/BarCode.java
Patch:
@@ -14,6 +14,7 @@
  * Barcode will be passed to   Fetcher
  * and {@link Persister  Persister}
  **/
+@SuppressWarnings("PMD.SimplifyBooleanReturns")
 public final class BarCode implements Serializable {
 
     private static final BarCode EMPTY_BARCODE = new BarCode("", "");

File: store/src/main/java/com/nytimes/android/external/store2/base/impl/RealStore.java
Patch:
@@ -83,7 +83,7 @@ public Observable<Parsed> getRefreshing(@Nonnull Key key) {
 
     /**
      * Will check to see if there exists an in flight observable and return it before
-     * going to nerwork
+     * going to network
      *
      * @return data from fetch and store it in memory and persister
      */

File: store/src/main/java/com/nytimes/android/external/store2/util/NoopPersister.java
Patch:
@@ -23,7 +23,7 @@ public class NoopPersister<Raw, Key> implements Persister<Raw, Key>, Clearable<K
     NoopPersister(MemoryPolicy memoryPolicy) {
         this.networkResponses = CacheBuilder
             .newBuilder()
-            .expireAfterWrite(memoryPolicy.getExpireAfter(), memoryPolicy.getExpireAfterTimeUnit())
+            .expireAfterWrite(memoryPolicy.getExpireAfterWrite(), memoryPolicy.getExpireAfterTimeUnit())
             .build();
     }
 
@@ -38,7 +38,7 @@ public static <Raw, Key> NoopPersister<Raw, Key> create(MemoryPolicy memoryPolic
         if (memoryPolicy == null) {
             memPolicy = MemoryPolicy
                 .builder()
-                .setExpireAfter(TimeUnit.HOURS.toSeconds(24))
+                .setExpireAfterWrite(TimeUnit.HOURS.toSeconds(24))
                 .setExpireAfterTimeUnit(TimeUnit.SECONDS)
                 .build();
         } else {

File: app/src/main/java/com/nytimes/android/sample/activity/PersistingStoreActivity.java
Patch:
@@ -58,7 +58,7 @@ public void loadPosts() {
 
         this.persistedStore
                 .get(awwRequest)
-                .flatMap(this::sanitizeData)
+                .flatMapObservable(this::sanitizeData)
                 .toList()
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())

File: app/src/main/java/com/nytimes/android/sample/activity/StoreActivity.java
Patch:
@@ -60,7 +60,7 @@ public void loadPosts() {
 
         this.nonPersistedStore
                 .get(awwRequest)
-                .flatMap(new Function<RedditData, ObservableSource<Post>>() {
+                .flatMapObservable(new Function<RedditData, ObservableSource<Post>>() {
                     @Override
                     public ObservableSource<Post> apply(@NonNull RedditData redditData) throws Exception {
                         return sanitizeData(redditData);

File: filesystem/src/main/java/com/nytimes/android/external/fs2/FSWriter.java
Patch:
@@ -7,7 +7,7 @@
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.Observable;
+import io.reactivex.Single;
 import okio.BufferedSource;
 
 /**
@@ -27,8 +27,8 @@ public FSWriter(FileSystem fileSystem, PathResolver<T> pathResolver) {
 
     @Nonnull
     @Override
-    public Observable<Boolean> write(@Nonnull final T key, @Nonnull final BufferedSource data) {
-        return Observable.fromCallable(new Callable<Boolean>() {
+    public Single<Boolean> write(@Nonnull final T key, @Nonnull final BufferedSource data) {
+        return Single.fromCallable(new Callable<Boolean>() {
             @Nonnull
             @Override
             @SuppressWarnings("PMD.SignatureDeclareThrowsException")

File: store/src/main/java/com/nytimes/android/external/store2/base/DiskRead.java
Patch:
@@ -2,10 +2,9 @@
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.Observable;
-
+import io.reactivex.Maybe;
 
 public interface DiskRead<Raw, Key> {
     @Nonnull
-    Observable<Raw> read(@Nonnull Key key);
+    Maybe<Raw> read(@Nonnull Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store2/base/DiskWrite.java
Patch:
@@ -2,7 +2,7 @@
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.Observable;
+import io.reactivex.Single;
 
 public interface DiskWrite<Raw, Key> {
     /**
@@ -11,5 +11,5 @@ public interface DiskWrite<Raw, Key> {
      *            either return Observable.empty or throw an exception
      */
     @Nonnull
-    Observable<Boolean> write(@Nonnull Key key, @Nonnull Raw raw);
+    Single<Boolean> write(@Nonnull Key key, @Nonnull Raw raw);
 }

File: store/src/main/java/com/nytimes/android/external/store2/base/Fetcher.java
Patch:
@@ -2,7 +2,7 @@
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.Observable;
+import io.reactivex.Single;
 
 
 /**
@@ -17,5 +17,5 @@ public interface Fetcher<Raw, Key> {
      * @return Observable that emits {@link Raw} data
      */
     @Nonnull
-    Observable<Raw> fetch(@Nonnull Key key);
+    Single<Raw> fetch(@Nonnull Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store2/base/InternalStore.java
Patch:
@@ -4,16 +4,16 @@
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.Observable;
+import io.reactivex.Maybe;
 
 /**
 2 * this interface allows us to mark a {@link Store} as "internal", exposing methods for retrieving data
  * directly from memory or from disk.
  */
 public interface InternalStore<Parsed, Key> extends Store<Parsed, Key> {
     @Nonnull
-    Observable<Parsed> memory(@Nonnull final Key key);
+    Maybe<Parsed> memory(@Nonnull final Key key);
 
     @Nonnull
-    Observable<Parsed> disk(@Nonnull final Key key);
+    Maybe<Parsed> disk(@Nonnull final Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store2/base/impl/Store.java
Patch:
@@ -4,6 +4,7 @@
 import javax.annotation.Nonnull;
 
 import io.reactivex.Observable;
+import io.reactivex.Single;
 import io.reactivex.annotations.Experimental;
 
 
@@ -24,7 +25,7 @@ public interface Store<T, V> {
      * Sources are Memory Cache, Disk Cache, Inflight, Network Response
      */
     @Nonnull
-    Observable<T> get(@Nonnull V key);
+    Single<T> get(@Nonnull V key);
 
     /**
      * Calls store.get(), additionally will repeat anytime store.clear(barcode) is called
@@ -39,7 +40,7 @@ public interface Store<T, V> {
      * Return an Observable of T for requested Barcode skipping Memory & Disk Cache
      */
     @Nonnull
-    Observable<T> fetch(@Nonnull V key);
+    Single<T> fetch(@Nonnull V key);
 
     /**
      * @return an Observable that emits "fresh" new response from the store that hit the fetcher

File: store/src/test/java/com/nytimes/android/external/store2/DontCacheErrorsTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.Observable;
+import io.reactivex.Single;
 
 
 public class DontCacheErrorsTest {
@@ -26,8 +26,8 @@ public void setUp() {
                 .fetcher(new Fetcher<Integer, BarCode>() {
                     @Nonnull
                     @Override
-                    public Observable<Integer> fetch(@Nonnull BarCode barCode) {
-                        return Observable.fromCallable(new Callable<Integer>() {
+                    public Single<Integer> fetch(@Nonnull BarCode barCode) {
+                        return Single.fromCallable(new Callable<Integer>() {
                             @Override
                             public Integer call() {
                                 if (shouldThrow) {

File: store/src/test/java/com/nytimes/android/external/store2/KeyParserTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import javax.annotation.Nonnull;
 
-import io.reactivex.Observable;
+import io.reactivex.Single;
 import io.reactivex.annotations.NonNull;
 import io.reactivex.observers.TestObserver;
 
@@ -36,8 +36,8 @@ public String apply(@NonNull Integer integer, @NonNull String s) {
                 .fetcher(new Fetcher<String, Integer>() {
                     @Nonnull
                     @Override
-                    public Observable<String> fetch(@Nonnull Integer integer) {
-                        return Observable.just(NETWORK);
+                    public Single<String> fetch(@Nonnull Integer integer) {
+                        return Single.just(NETWORK);
                     }
                 }).open();
 

File: store/src/test/java/com/nytimes/android/external/store2/util/NoopPersisterTest.java
Patch:
@@ -13,9 +13,9 @@ public class NoopPersisterTest {
     @Test
     public void writeReadTest() {
         NoopPersister<String, BarCode> persister = NoopPersister.create();
-        boolean success = persister.write(barCode, "foo").blockingFirst();
+        boolean success = persister.write(barCode, "foo").blockingGet();
         assertThat(success).isTrue();
-        String rawValue = persister.read(barCode).blockingFirst();
+        String rawValue = persister.read(barCode).blockingGet();
         assertThat(rawValue).isEqualTo("foo");
     }
 

File: store/src/test/java/com/nytimes/android/external/store/StoreTest.java
Patch:
@@ -144,7 +144,7 @@ public void testSubclass() {
     @Test
     public void testNoopAndDefault() {
 
-        Persister<String, BarCode> persister = spy(new NoopPersister<String, BarCode>());
+        Persister<String, BarCode> persister = spy(NoopPersister.<String, BarCode>create());
         RealStore<String, BarCode> simpleStore = new SampleStore(fetcher, persister);
 
 

File: store/src/test/java/com/nytimes/android/external/store/util/NoopPersisterTest.java
Patch:
@@ -13,7 +13,7 @@ public class NoopPersisterTest {
     @Test
     public void writeReadTest() {
 
-        NoopPersister<String, BarCode> persister = new NoopPersister<>();
+        NoopPersister<String, BarCode> persister = NoopPersister.create();
         boolean success = persister.write(barCode, "foo").toBlocking().first();
         assertThat(success).isTrue();
         String rawValue = persister.read(barCode).toBlocking().first();

File: store/src/main/java/com/nytimes/android/external/store/base/impl/RealStore.java
Patch:
@@ -126,7 +126,7 @@ public void clear() {
 
     @Override
     public void clear(@Nonnull Key key) {
-        internalStore.clear();
+        internalStore.clear(key);
     }
 
     protected Observable<Parsed> memory(@Nonnull Key key) {

File: store/src/test/java/com/nytimes/android/external/store/ClearStoreTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import static com.nytimes.android.external.store.GetRefreshingTest.ClearingPersister;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -69,6 +70,7 @@ public void testClearSingleBarCode() {
         // after clearing the memory another call should be made
         store.clear(barcode);
         store.get(barcode).test().awaitTerminalEvent();
+        verify(persister).clear(barcode);
         assertThat(networkCalls.intValue()).isEqualTo(2);
     }
 

File: cache/src/main/java/com/nytimes/android/external/cache/CacheBuilder.java
Patch:
@@ -91,7 +91,7 @@ public long read() {
    */
   @Nonnull
   public static CacheBuilder<Object, Object> newBuilder() {
-    return new CacheBuilder<Object, Object>();
+    return new CacheBuilder<>();
   }
 
   /**
@@ -478,14 +478,14 @@ <K1 extends K, V1 extends V> RemovalListener<K1, V1> getRemovalListener() {
   public <K1 extends K, V1 extends V> LoadingCache<K1, V1> build(
           @Nonnull CacheLoader<? super K1, V1> loader) {
     checkWeightWithWeigher();
-    return new LocalCache.LocalLoadingCache<K1, V1>(this, loader);
+    return new LocalCache.LocalLoadingCache<>(this, loader);
   }
 
   @Nonnull
   public <K1 extends K, V1 extends V> Cache<K1, V1> build() {
     checkWeightWithWeigher();
     checkNonLoadingCache();
-    return new LocalCache.LocalManualCache<K1, V1>(this);
+    return new LocalCache.LocalManualCache<>(this);
   }
 
 

File: cache/src/main/java/com/nytimes/android/external/cache/CacheLoader.java
Patch:
@@ -52,7 +52,7 @@ public Map<K, V> loadAll(Iterable<? extends K> keys) throws Exception {
    */
   @Nonnull
   public static <K, V> CacheLoader<K, V> from(@Nonnull Function<K, V> function) {
-    return new FunctionToCacheLoader<K, V>(function);
+    return new FunctionToCacheLoader<>(function);
   }
 
   private static final class FunctionToCacheLoader<K, V>
@@ -83,7 +83,7 @@ public V load(@Nonnull K key) {
    */
   @Nonnull
   public static <V> CacheLoader<Object, V> from(@Nonnull Supplier<V> supplier) {
-    return new SupplierToCacheLoader<V>(supplier);
+    return new SupplierToCacheLoader<>(supplier);
   }
 
 

File: cache/src/main/java/com/nytimes/android/external/cache/SettableFuture.java
Patch:
@@ -10,7 +10,7 @@ public final class SettableFuture<V> extends AbstractFuture.TrustedFuture<V> {
    */
   @Nonnull
   public static <V> SettableFuture<V> create() {
-    return new SettableFuture<V>();
+    return new SettableFuture<>();
   }
 
   /**

File: filesystem/src/main/java/com/nytimes/android/external/fs/FSReader.java
Patch:
@@ -30,7 +30,7 @@ public FSReader(FileSystem fileSystem, PathResolver<T> pathResolver) {
 
     @Nonnull
     @Override
-    public Observable<BufferedSource> read(final T key) {
+    public Observable<BufferedSource> read(@Nonnull final T key) {
         return Observable.fromEmitter(new Action1<Emitter<BufferedSource>>() {
             @Override
             public void call(Emitter<BufferedSource> emitter) {

File: filesystem/src/main/java/com/nytimes/android/external/fs/FSWriter.java
Patch:
@@ -26,13 +26,13 @@ public FSWriter(FileSystem fileSystem, PathResolver<T> pathResolver) {
 
     @Nonnull
     @Override
-    public Observable<Boolean> write(final T barCode, final BufferedSource data) {
+    public Observable<Boolean> write(@Nonnull final T key, @Nonnull final BufferedSource data) {
         return Observable.fromCallable(new Callable<Boolean>() {
             @Nonnull
             @Override
             @SuppressWarnings("PMD.SignatureDeclareThrowsException")
             public Boolean call() throws Exception {
-                fileSystem.write(pathResolver.resolve(barCode), data);
+                fileSystem.write(pathResolver.resolve(key), data);
                 return true;
             }
         });

File: filesystem/src/main/java/com/nytimes/android/external/fs/RecordPersister.java
Patch:
@@ -25,6 +25,7 @@ public RecordPersister(FileSystem fileSystem,
         this.expirationUnit = expirationUnit;
     }
 
+    @Nonnull
     @Override
     public RecordState getRecordState(@Nonnull BarCode barCode) {
         return sourceFileReader.getRecordState(barCode, expirationUnit, expirationDuration);

File: filesystem/src/main/java/com/nytimes/android/external/fs/Util.java
Patch:
@@ -21,15 +21,16 @@ public String simplifyPath(@Nonnull String path) {
         String delim = "[/]+";
         String[] arr = path.split(delim);
 
-        Stack<String> stack = new Stack<String>();
+        Stack<String> stack = new Stack<>();
 
         fillStack(arr, stack);
 
-        StringBuilder sb = new StringBuilder();
         if (emptyStack(stack)) {
             return "/";
         }
 
+        StringBuilder sb = new StringBuilder();
+
         for (String str : stack) {
             sb.append("/").append(str);
         }

File: filesystem/src/main/java/com/nytimes/android/external/fs/filesystem/FSFile.java
Patch:
@@ -17,7 +17,6 @@
 
 class FSFile {
 
-    private final Util util = new Util();
     @Nonnull
     private final String pathValue;
     @Nonnull
@@ -29,6 +28,7 @@ class FSFile {
         if (file.exists() && file.isDirectory()) {
             throw new FileNotFoundException(format("expecting a file at %s, instead found a directory", path));
         }
+        Util util = new Util();
         util.createParentDirs(this.file);
     }
 

File: middleware-jackson/src/main/java/com/nytimes/android/external/store/middleware/jackson/JacksonParserFactory.java
Patch:
@@ -60,7 +60,7 @@ public static <T> Parser<BufferedSource, T> createSourceParser(@Nonnull JsonFact
                                                                    @Nonnull Type type) {
         Preconditions.checkNotNull(jsonFactory, "jsonFactory cannot be null.");
         Preconditions.checkNotNull(type, "type cannot be null.");
-        return new JacksonSourceParser<T>(jsonFactory, type);
+        return new JacksonSourceParser<>(jsonFactory, type);
     }
 
     /**
@@ -72,7 +72,7 @@ public static <T> Parser<BufferedSource, T> createSourceParser(@Nonnull ObjectMa
                                                                    @Nonnull Type type) {
         Preconditions.checkNotNull(objectMapper, "objectMapper cannot be null.");
         Preconditions.checkNotNull(type, "type cannot be null.");
-        return new JacksonSourceParser<T>(objectMapper, type);
+        return new JacksonSourceParser<>(objectMapper, type);
     }
 
     /**
@@ -105,7 +105,7 @@ public static <T> Parser<Reader, T> createReaderParser(@Nonnull ObjectMapper obj
                                                            @Nonnull Type type) {
         Preconditions.checkNotNull(objectMapper, "objectMapper cannot be null.");
         Preconditions.checkNotNull(type, "type cannot be null.");
-        return new JacksonReaderParser<T>(objectMapper, type);
+        return new JacksonReaderParser<>(objectMapper, type);
     }
 
     /**

File: store/src/main/java/com/nytimes/android/external/store/base/Clearable.java
Patch:
@@ -1,10 +1,12 @@
 package com.nytimes.android.external.store.base;
 
 
+import javax.annotation.Nonnull;
+
 /**
  * Persisters should implement Clearable if they want store.clear(key) to also clear the persister
  * @param <T> Type of key/request param in store
  */
 public interface Clearable<T> {
-    void clear(T key);
+    void clear(@Nonnull T key);
 }

File: store/src/main/java/com/nytimes/android/external/store/base/DiskRead.java
Patch:
@@ -6,5 +6,5 @@
 
 public interface DiskRead<Raw, Key> {
     @Nonnull
-    Observable<Raw> read(Key key);
+    Observable<Raw> read(@Nonnull Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store/base/Fetcher.java
Patch:
@@ -12,9 +12,9 @@
 public interface Fetcher<Raw, Key> {
 
     /**
-     * @param barCode Container with Key and Type used as a request param
+     * @param key Container with Key and Type used as a request param
      * @return Observable that emits {@link Raw} data
      */
     @Nonnull
-    Observable<Raw> fetch(Key key);
+    Observable<Raw> fetch(@Nonnull Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store/base/RecordProvider.java
Patch:
@@ -2,9 +2,8 @@
 
 import javax.annotation.Nonnull;
 
-/**
- * Created by 206847 on 2/6/17.
- */
+
 public interface RecordProvider<Key> {
+    @Nonnull
     RecordState getRecordState(@Nonnull Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store/base/RecordState.java
Patch:
@@ -1,5 +1,5 @@
 package com.nytimes.android.external.store.base;
 
 public enum RecordState {
-    FRESH, STALE, MISSING;
+    FRESH, STALE, MISSING
 }

File: store/src/main/java/com/nytimes/android/external/store/base/impl/RealStore.java
Patch:
@@ -11,7 +11,6 @@
 import javax.annotation.Nonnull;
 
 import rx.Observable;
-import rx.functions.Func1;
 
 import static com.nytimes.android.external.store.base.impl.StalePolicy.UNSPECIFIED;
 
@@ -42,7 +41,7 @@ public <Raw> RealStore(Fetcher<Raw, Key> fetcher,
 
     public <Raw> RealStore(Fetcher<Raw, Key> fetcher,
                            Persister<Raw, Key> persister,
-                           Func1<Raw, Parsed> parser, Cache<Key, Observable<Parsed>> memCache) {
+                           Parser<Raw, Parsed> parser, Cache<Key, Observable<Parsed>> memCache) {
         internalStore = new RealInternalStore<>(fetcher, persister, parser, memCache, UNSPECIFIED);
     }
 

File: store/src/main/java/com/nytimes/android/external/store/base/impl/StoreBuilder.java
Patch:
@@ -18,15 +18,18 @@ public static <Raw> RealStoreBuilder<Raw, Raw, BarCode> builder() {
         return new RealStoreBuilder<>();
     }
 
+    @Nonnull
     public static <Parsed> RealStoreBuilder<Parsed, Parsed, BarCode> barcode() {
         return new RealStoreBuilder<>();
     }
 
+    @Nonnull
     public static <Key, Parsed> RealStoreBuilder<Parsed, Parsed, Key> key() {
         return new RealStoreBuilder<>();
     }
 
     @Beta
+    @Nonnull
     public static <Key, Raw, Parsed> RealStoreBuilder<Raw, Parsed, Key> parsedWithKey() {
         return new RealStoreBuilder<>();
     }

File: store/src/main/java/com/nytimes/android/external/store/base/impl/StoreUtil.java
Patch:
@@ -20,11 +20,11 @@ private StoreUtil() {
 
     @Nonnull
     static <Parsed, Key> Observable.Transformer<Parsed, Parsed>
-    repeatWhenCacheEvicted(PublishSubject<Key> refreshSubject, @Nonnull final Key key) {
+    repeatWhenCacheEvicted(PublishSubject<Key> refreshSubject, @Nonnull final Key keyForRepeat) {
         Observable<Key> filter = refreshSubject.filter(new Func1<Key, Boolean>() {
             @Override
-            public Boolean call(Key barCode) {
-                return barCode.equals(key);
+            public Boolean call(Key key) {
+                return key.equals(keyForRepeat);
             }
         });
         return from(filter);

File: store/src/main/java/com/nytimes/android/external/store/util/NoopPersister.java
Patch:
@@ -19,20 +19,20 @@ public class NoopPersister<Raw, Key> implements Persister<Raw, Key>, Clearable<K
 
     @Nonnull
     @Override
-    public Observable<Raw> read(Key key) {
+    public Observable<Raw> read(@Nonnull Key key) {
         Raw raw = networkResponses.get(key);
         return raw == null ? Observable.<Raw>empty() : Observable.just(raw);
     }
 
     @Nonnull
     @Override
-    public Observable<Boolean> write(Key key, Raw raw) {
+    public Observable<Boolean> write(@Nonnull Key key, @Nonnull Raw raw) {
         networkResponses.put(key, raw);
         return Observable.just(true);
     }
 
     @Override
-    public void clear(Key key) {
+    public void clear(@Nonnull Key key) {
         networkResponses.remove(key);
     }
 }

File: store/src/test/java/com/nytimes/android/external/store/ClearStoreMemoryTest.java
Patch:
@@ -28,7 +28,7 @@ public void setUp() {
                 .fetcher(new Fetcher<Integer, BarCode>() {
                     @Nonnull
                     @Override
-                    public Observable<Integer> fetch(BarCode barCode) {
+                    public Observable<Integer> fetch(@Nonnull BarCode barCode) {
                         return Observable.fromCallable(new Callable<Integer>() {
                             @Override
                             public Integer call() {

File: store/src/test/java/com/nytimes/android/external/store/ClearStoreTest.java
Patch:
@@ -36,7 +36,7 @@ public void setUp() {
                 .fetcher(new Fetcher<Integer, BarCode>() {
                     @Nonnull
                     @Override
-                    public Observable<Integer> fetch(BarCode barCode) {
+                    public Observable<Integer> fetch(@Nonnull BarCode barCode) {
                         return Observable.fromCallable(new Callable<Integer>() {
                             @Override
                             public Integer call() {

File: store/src/test/java/com/nytimes/android/external/store/DontCacheErrorsTest.java
Patch:
@@ -25,7 +25,7 @@ public void setUp() {
                 .fetcher(new Fetcher<Integer, BarCode>() {
                     @Nonnull
                     @Override
-                    public Observable<Integer> fetch(BarCode barCode) {
+                    public Observable<Integer> fetch(@Nonnull BarCode barCode) {
                         return Observable.fromCallable(new Callable<Integer>() {
                             @Override
                             public Integer call() {

File: store/src/test/java/com/nytimes/android/external/store/SequentialTest.java
Patch:
@@ -28,7 +28,7 @@ public void setUp() {
                 .fetcher(new Fetcher<Integer, BarCode>() {
                     @Nonnull
                     @Override
-                    public Observable<Integer> fetch(BarCode barCode) {
+                    public Observable<Integer> fetch(@Nonnull BarCode barCode) {
                         return Observable.fromCallable(new Callable<Integer>() {
                             @Override
                             public Integer call() {

File: store/src/main/java/com/nytimes/android/external/store/base/DiskRead.java
Patch:
@@ -6,5 +6,5 @@
 
 public interface DiskRead<Raw, Key> {
     @Nonnull
-    Observable<Raw> read(Key barCode);
+    Observable<Raw> read(Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store/base/DiskWrite.java
Patch:
@@ -11,5 +11,5 @@ public interface DiskWrite<Raw, Key> {
      *                either return Observable.empty or throw an exception
      */
     @Nonnull
-    Observable<Boolean> write(Key barCode, Raw raw);
+    Observable<Boolean> write(Key key, Raw raw);
 }

File: store/src/main/java/com/nytimes/android/external/store/base/Fetcher.java
Patch:
@@ -16,5 +16,5 @@ public interface Fetcher<Raw, Key> {
      * @return Observable that emits {@link Raw} data
      */
     @Nonnull
-    Observable<Raw> fetch(Key barCode);
+    Observable<Raw> fetch(Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store/base/InternalStore.java
Patch:
@@ -12,8 +12,8 @@
  */
 public interface InternalStore<Parsed, Key> extends Store<Parsed, Key> {
     @Nonnull
-    Observable<Parsed> memory(@Nonnull final Key barCode);
+    Observable<Parsed> memory(@Nonnull final Key key);
 
     @Nonnull
-    Observable<Parsed> disk(@Nonnull final Key barCode);
+    Observable<Parsed> disk(@Nonnull final Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store/base/RecordProvider.java
Patch:
@@ -6,5 +6,5 @@
  * Created by 206847 on 2/6/17.
  */
 public interface RecordProvider<Key> {
-    RecordState getRecordState(@Nonnull Key barCode);
+    RecordState getRecordState(@Nonnull Key key);
 }

File: store/src/main/java/com/nytimes/android/external/store/base/impl/RealStore.java
Patch:
@@ -114,7 +114,6 @@ public void clear() {
     @Override
     public void clear(@Nonnull Key key) {
         internalStore.clear();
-
     }
 
     protected Observable<Parsed> memory(@Nonnull Key key) {

File: filesystem/src/main/java/com/nytimes/android/external/fs/SourceFileReader.java
Patch:
@@ -15,7 +15,7 @@
 
 import static com.nytimes.android.external.fs.SourcePersister.pathForBarcode;
 
-public class SourceFileReader implements DiskRead<BufferedSource> {
+public class SourceFileReader implements DiskRead<BufferedSource, BarCode> {
 
     final FileSystem fileSystem;
 

File: filesystem/src/main/java/com/nytimes/android/external/fs/SourceFileWriter.java
Patch:
@@ -15,7 +15,7 @@
 import static com.nytimes.android.external.fs.SourcePersister.pathForBarcode;
 import static okio.Okio.buffer;
 
-public class SourceFileWriter implements DiskWrite<BufferedSource> {
+public class SourceFileWriter implements DiskWrite<BufferedSource, BarCode> {
 
     final FileSystem fileSystem;
 

File: filesystem/src/main/java/com/nytimes/android/external/fs/filesystem/FileSystem.java
Patch:
@@ -56,7 +56,7 @@ public interface FileSystem {
      * write a new version of a file. No readers will "see" this version until it has successfully been completely
      * written to and closed. In case of error, the version is deleted from disk.
      *
-     * @param path what to write to
+     * @param path   what to write to
      * @param source a {@link BufferedSource} containing the content to be written to disk. Caller must close it!
      * @throws IOException
      */

File: store/src/main/java/com/nytimes/android/external/store/base/impl/MultiParser.java
Patch:
@@ -38,6 +38,6 @@ public Parsed call(Raw raw) {
 
     private ParserException createParserException() {
         return new ParserException("One of the provided parsers has a wrong typing. " +
-                "Make sure that parsers are passed in a correct order and the types match each other.");
+                "Make sure that parsers are passed in a correct order and the fromTypes match each other.");
     }
 }

File: store/src/test/java/com/nytimes/android/external/store/ClearStoreMemoryTest.java
Patch:
@@ -25,7 +25,7 @@ public class ClearStoreMemoryTest {
     public void setUp() {
         networkCalls = 0;
         store = StoreBuilder.<Integer>builder()
-                .fetcher(new Fetcher<Integer>() {
+                .fetcher(new Fetcher<Integer, BarCode>() {
                     @Nonnull
                     @Override
                     public Observable<Integer> fetch(BarCode barCode) {

File: store/src/test/java/com/nytimes/android/external/store/DontCacheErrorsTest.java
Patch:
@@ -22,7 +22,7 @@ public class DontCacheErrorsTest {
     @Before
     public void setUp() {
         store = StoreBuilder.<Integer>builder()
-                .fetcher(new Fetcher<Integer>() {
+                .fetcher(new Fetcher<Integer, BarCode>() {
                     @Nonnull
                     @Override
                     public Observable<Integer> fetch(BarCode barCode) {

File: store/src/test/java/com/nytimes/android/external/store/GetRefreshingTest.java
Patch:
@@ -26,7 +26,7 @@ public class GetRefreshingTest {
     public void setUp() {
         networkCalls = 0;
         store = StoreBuilder.<Integer>builder()
-                .fetcher(new Fetcher<Integer>() {
+                .fetcher(new Fetcher<Integer, BarCode>() {
                     @Nonnull
                     @Override
                     public Observable<Integer> fetch(BarCode barCode) {

File: store/src/test/java/com/nytimes/android/external/store/SequentialTest.java
Patch:
@@ -25,7 +25,7 @@ public class SequentialTest {
     public void setUp() {
         networkCalls = 0;
         store = StoreBuilder.<Integer>builder()
-                .fetcher(new Fetcher<Integer>() {
+                .fetcher(new Fetcher<Integer, BarCode>() {
                     @Nonnull
                     @Override
                     public Observable<Integer> fetch(BarCode barCode) {

File: store/src/test/java/com/nytimes/android/external/store/util/NoopPersisterTest.java
Patch:
@@ -13,7 +13,7 @@ public class NoopPersisterTest {
     @Test
     public void writeReadTest() {
 
-        NoopPersister<String> persister = new NoopPersister<>();
+        NoopPersister<String, BarCode> persister = new NoopPersister<>();
         boolean success = persister.write(barCode, "foo").toBlocking().first();
         assertThat(success).isTrue();
         String rawValue = persister.read(barCode).toBlocking().first();

File: store/src/test/java/com/nytimes/android/external/store/StoreTest.java
Patch:
@@ -147,8 +147,6 @@ public void testNoopAndDefault() {
 
         NoopPersister<String> persister = spy(new NoopPersister<String>());
         Store<String> simpleStore = new RealStore<>(fetcher, persister);
-        simpleStore.clearMemory();
-
 
         when(fetcher.fetch(barCode))
                 .thenReturn(Observable.just(NETWORK));

File: store/src/test/java/com/nytimes/android/external/store/StoreTest.java
Patch:
@@ -147,8 +147,6 @@ public void testNoopAndDefault() {
 
         NoopPersister<String> persister = spy(new NoopPersister<String>());
         Store<String> simpleStore = new RealStore<>(fetcher, persister);
-        simpleStore.clearMemory();
-
 
         when(fetcher.fetch(barCode))
                 .thenReturn(Observable.just(NETWORK));

File: middleware/src/main/java/com/nytimes/android/external/store/middleware/GsonSourceParser.java
Patch:
@@ -15,6 +15,8 @@
 import okio.BufferedSource;
 
 import static com.nytimes.android.external.cache.Preconditions.checkNotNull;
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 
 /**
  * Parser to be used when going from a BufferedSource to any Parsed Type
@@ -42,7 +44,7 @@ public GsonSourceParser(Gson gson, Type type) {
 
     @Override
     public Parsed call(@NotNull BufferedSource source) {
-        try (InputStreamReader reader = new InputStreamReader(source.inputStream())) {
+        try (InputStreamReader reader = new InputStreamReader(source.inputStream(), UTF_8)) {
             return gson.fromJson(reader, type);
         } catch (IOException e) {
             throw new RuntimeException(e);

File: middleware-jackson/src/main/java/com/nytimes/android/external/store/middleware/jackson/JacksonReaderParser.java
Patch:
@@ -18,7 +18,6 @@ public class JacksonReaderParser<Parsed> implements Parser<Reader, Parsed> {
     private final ObjectMapper objectMapper;
     private final JavaType parsedType;
 
-    @Inject
     public JacksonReaderParser(@NonNull JsonFactory jsonFactory, @NonNull Type type) {
         objectMapper = new ObjectMapper(jsonFactory);
         parsedType = objectMapper.constructType(type);

File: middleware-jackson/src/main/java/com/nytimes/android/external/store/middleware/jackson/JacksonSourceParser.java
Patch:
@@ -21,7 +21,6 @@ public class JacksonSourceParser<Parsed> implements Parser<BufferedSource, Parse
     private final ObjectMapper objectMapper;
     private final JavaType parsedType;
 
-    @Inject
     public JacksonSourceParser(@NonNull JsonFactory jsonFactory, @NonNull Type type) {
         objectMapper = new ObjectMapper(jsonFactory);
         parsedType = objectMapper.constructType(type);

File: middleware-jackson/src/main/java/com/nytimes/android/external/store/middleware/jackson/JacksonStringParser.java
Patch:
@@ -18,7 +18,6 @@ public class JacksonStringParser<Parsed> implements Parser<String, Parsed> {
     private final ObjectMapper objectMapper;
     private final JavaType parsedType;
 
-    @Inject
     public JacksonStringParser(@NonNull JsonFactory jsonFactory, @NonNull Type type) {
         objectMapper = new ObjectMapper(jsonFactory);
         parsedType = objectMapper.constructType(type);

File: filesystem/src/main/java/com/nytimes/android/external/fs/SourcePersister.java
Patch:
@@ -29,7 +29,7 @@ public class SourcePersister implements Persister<BufferedSource> {
 
     @Inject
     public SourcePersister(FileSystem fileSystem) {
-        this.sourceFileReader = new SourceFileReader(fileSystem);
+        sourceFileReader = new SourceFileReader(fileSystem);
         sourceFileWriter = new SourceFileWriter(fileSystem);
     }
 

File: filesystem/src/main/java/com/nytimes/android/external/fs/SourceFileWriter.java
Patch:
@@ -28,6 +28,7 @@ public SourceFileWriter(FileSystem fileSystem) {
     public Observable<Boolean> write(final BarCode barCode, final BufferedSource data) {
         return Observable.fromCallable(new Callable<Boolean>() {
             @Override
+            @SuppressWarnings("PMD.SignatureDeclareThrowsException")
             public Boolean call() throws Exception {
                 fileSystem.write(pathForBarcode(barCode), buffer(data));
                 return true;

File: filesystem/src/main/java/com/nytimes/android/external/fs/SourcePersisterFactory.java
Patch:
@@ -12,7 +12,9 @@
  * Factory for {@link SourcePersister}
  */
 
-public class SourcePersisterFactory {
+public final class SourcePersisterFactory {
+    private SourcePersisterFactory() {
+    }
 
     /**
      * Returns a new {@link BufferedSource} persister with the provided file as the root of the

File: filesystem/src/main/java/com/nytimes/android/external/fs/filesystem/FileSystemFactory.java
Patch:
@@ -6,7 +6,9 @@
 /**
  * Factory for {@link FileSystem}.
  */
-public class FileSystemFactory {
+public final class FileSystemFactory {
+  private FileSystemFactory() {
+  }
 
   /**
    * Creates new instance of {@link FileSystemImpl}.

File: filesystem/src/main/java/com/nytimes/android/external/fs/filesystem/FileSystemImpl.java
Patch:
@@ -62,7 +62,7 @@ public Collection<String> list(String directory) throws FileNotFoundException {
         Collection<FSFile> foundFiles = findFiles(directory);
         Collection<String> names = new ArrayList<>(foundFiles.size());
         Iterator<FSFile> iterator = foundFiles.iterator();
-        while ((iterator.hasNext())) {
+        while (iterator.hasNext()) {
             names.add(iterator.next().path());
         }
         return names;
@@ -73,7 +73,7 @@ public void deleteAll(String directory) throws FileNotFoundException {
 
         Collection<FSFile> foundFiles = findFiles(directory);
         Iterator<FSFile> iterator = foundFiles.iterator();
-        while ((iterator.hasNext())) {
+        while (iterator.hasNext()) {
             iterator.next().delete();
         }
     }

File: filesystem/src/test/java/com/nytimes/android/external/fs/MultiTest.java
Patch:
@@ -44,7 +44,7 @@ private FileSystem createAndPopulateTestFileSystem() throws IOException {
     }
 
     @Test
-    public void deleteAll() throws IOException {
+    public void testDeleteAll() throws IOException {
         FileSystem fileSystem = createAndPopulateTestFileSystem();
         fileSystem.deleteAll("/");
         assertThat(fileSystem.list("/").size()).isZero();

File: filesystem/src/test/java/com/nytimes/android/external/fs/UtilTest.java
Patch:
@@ -17,7 +17,7 @@ public class UtilTest extends BaseTestCase {
     private final Util util = new Util();
 
     @Test
-    public void simplifyPathTest() {
+    public void testSimplifyPath() {
         assertThat(util.simplifyPath("/a/b/c/d")).isEqualTo("/a/b/c/d");
         assertThat(util.simplifyPath("/a/../b/")).isEqualTo("/b");
         assertThat(util.simplifyPath("/a/./b/c/../d")).isEqualTo("/a/b/d");

File: filesystem/src/test/java/com/nytimes/android/external/fs/impl/BaseTestCase.java
Patch:
@@ -4,7 +4,8 @@
 
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-
+@SuppressWarnings("PMD.AbstractClassWithoutAnyMethod")
 @RunWith(RobolectricTestRunner.class)
 public abstract class BaseTestCase extends TestCase {
+
 }

File: filesystem/src/test/java/com/nytimes/android/external/fs/impl/SimpleTest.java
Patch:
@@ -55,7 +55,7 @@ public void delete() throws IOException {
     }
 
     @Test
-    public void deleteWhileReading() throws IOException {
+    public void testDeleteWhileReading() throws IOException {
 
         fileSystem.write("/boo", source(testString1));
         BufferedSource source = fileSystem.read("/boo");

File: middleware/src/main/java/com/nytimes/android/external/store/middleware/GsonParserFactory.java
Patch:
@@ -11,7 +11,9 @@
 /**
  * Factory which returns various Gson {@link Parser} implementations.
  */
-public class GsonParserFactory {
+public final class GsonParserFactory {
+    private GsonParserFactory() {
+    }
 
     /**
      * Returns a new Parser which parses from {@link Reader} to the specified type, using

File: middleware/src/main/java/com/nytimes/android/external/store/middleware/GsonSourceParser.java
Patch:
@@ -1,7 +1,6 @@
 package com.nytimes.android.external.store.middleware;
 
 import com.google.gson.Gson;
-import com.google.gson.reflect.TypeToken;
 import com.nytimes.android.external.store.base.Parser;
 
 import java.io.IOException;
@@ -26,7 +25,7 @@
 public class GsonSourceParser<Parsed> implements Parser<BufferedSource, Parsed> {
 
     private final Gson gson;
-    private Type type;
+    private final Type type;
 
     @Inject
     public GsonSourceParser(Gson gson, Type type) {

File: store/src/main/java/com/nytimes/android/external/store/base/impl/ParsingStoreBuilder.java
Patch:
@@ -41,6 +41,7 @@ public ParsingStoreBuilder<Raw, Parsed> nonObservableFetcher(final @NonNull Func
             public Observable<Raw> fetch(final BarCode barCode) {
                 return Observable.fromCallable(new Callable<Raw>() {
                     @Override
+                    @SuppressWarnings("PMD.SignatureDeclareThrowsException")
                     public Raw call() throws Exception {
                         return fetcher.call(barCode);
                     }

File: store/src/main/java/com/nytimes/android/external/store/base/impl/RealInternalStore.java
Patch:
@@ -1,7 +1,6 @@
 package com.nytimes.android.external.store.base.impl;
 
 import android.support.annotation.NonNull;
-import android.util.Log;
 
 import com.nytimes.android.external.cache.Cache;
 import com.nytimes.android.external.cache.CacheBuilder;
@@ -97,6 +96,7 @@ private Observable<Parsed> cache(@NonNull final BarCode barCode) {
         try {
             return memCache.get(barCode, new Callable<Observable<Parsed>>() {
                 @Override
+                @SuppressWarnings("PMD.SignatureDeclareThrowsException")
                 public Observable<Parsed> call() throws Exception {
                     return disk(barCode);
                 }

File: store/src/main/java/com/nytimes/android/external/store/util/NoopPersister.java
Patch:
@@ -12,7 +12,7 @@
  * Pass-through diskdao for stores that don't want to use persister
  */
 public class NoopPersister<Raw> implements Persister<Raw> {
-    private ConcurrentMap<BarCode, Raw> networkResponses = new ConcurrentHashMap<>();
+    private final ConcurrentMap<BarCode, Raw> networkResponses = new ConcurrentHashMap<>();
 
     @Override
     public Observable<Raw> read(BarCode barCode) {

File: store/src/test/java/com/nytimes/android/external/store/util/NoopPersisterTest.java
Patch:
@@ -11,7 +11,7 @@ public class NoopPersisterTest {
     private final BarCode barCode = new BarCode("key", "value");
 
     @Test
-    public void writeReadTest() throws Exception {
+    public void writeReadTest() {
 
         NoopPersister<String> persister = new NoopPersister<>();
         boolean success = persister.write(barCode, "foo").toBlocking().first();
@@ -21,7 +21,8 @@ public void writeReadTest() throws Exception {
     }
 
     @Test
-    public void noopParserFuncTest() throws Exception {
+    @SuppressWarnings("PMD.CompareObjectsWithEquals")
+    public void noopParserFuncTest() {
         NoopParserFunc<String, String> noopParserFunc = new NoopParserFunc<>();
         String input = "foo";
         String output = (String) noopParserFunc.call(input);

File: filesystem/src/main/java/com/nytimes/android/external/fs/SourcePersisterFactory.java
Patch:
@@ -9,16 +9,14 @@
 import okio.BufferedSource;
 
 /**
- * Created by Scott on 1/8/2017.
+ * Factory for {@link SourcePersister}
  */
 
 public class SourcePersisterFactory {
 
     /**
      * Returns a new {@link BufferedSource} persister with the provided file as the root of the
      * persistence {@link com.nytimes.android.external.fs.filesystem.FileSystem}.
-     * @param root
-     * @return
      * @throws IOException
      */
     public static Persister<BufferedSource> create(File root) throws IOException {

